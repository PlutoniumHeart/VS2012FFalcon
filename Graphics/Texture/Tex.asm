; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\Graphics\Texture\Tex.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?VT@?$CVarTypeInfo@_J@ATL@@2GB			; ATL::CVarTypeInfo<__int64>::VT
PUBLIC	?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ ; ATL::CVarTypeInfo<__int64>::pmField
PUBLIC	___pobjMapEntryFirst
PUBLIC	___pobjMapEntryLast
PUBLIC	?VT@?$CVarTypeInfo@PA_J@ATL@@2GB		; ATL::CVarTypeInfo<__int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ ; ATL::CVarTypeInfo<__int64 *>::pmField
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?VT@?$CVarTypeInfo@_K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned __int64>::VT
PUBLIC	??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@	; `string'
PUBLIC	?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64>::pmField
PUBLIC	??_C@_08PICKODJL@FileType?$AA@			; `string'
PUBLIC	??_C@_09JKPGEJCH@Interface?$AA@			; `string'
PUBLIC	??_C@_08PPIOJEA@Hardware?$AA@			; `string'
PUBLIC	?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA	; ATL::_pPerfRegFunc
PUBLIC	??_C@_04IHBFOLAC@Mime?$AA@			; `string'
PUBLIC	?_pPerfUnRegFunc@ATL@@3P6AJXZA			; ATL::_pPerfUnRegFunc
PUBLIC	??_C@_03DDIMFGBA@SAM?$AA@			; `string'
PUBLIC	?_AtlRegisterPerUser@ATL@@3_NA			; ATL::_AtlRegisterPerUser
PUBLIC	??_C@_08LOPHEHKG@SECURITY?$AA@			; `string'
PUBLIC	??_C@_06FDHFNJBJ@SYSTEM?$AA@			; `string'
PUBLIC	??_C@_08KEKAJNJI@Software?$AA@			; `string'
PUBLIC	??_C@_07KJLOKDKB@TypeLib?$AA@			; `string'
PUBLIC	?VT@?$CVarTypeInfo@PA_K@ATL@@2GB		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
PUBLIC	__GUID_00000000_0000_0000_c000_000000000046
PUBLIC	?VT@?$CVarTypeInfo@M@ATL@@2GB			; ATL::CVarTypeInfo<float>::VT
PUBLIC	?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ ; ATL::CVarTypeInfo<float>::pmField
PUBLIC	__GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
PUBLIC	?VT@?$CVarTypeInfo@PAM@ATL@@2GB			; ATL::CVarTypeInfo<float *>::VT
PUBLIC	__GUID_00020400_0000_0000_c000_000000000046
PUBLIC	?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ ; ATL::CVarTypeInfo<float *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@N@ATL@@2GB			; ATL::CVarTypeInfo<double>::VT
PUBLIC	?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ ; ATL::CVarTypeInfo<double>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAN@ATL@@2GB			; ATL::CVarTypeInfo<double *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ ; ATL::CVarTypeInfo<double *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB	; ATL::CVarTypeInfo<tagVARIANT *>::VT
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	__GUID_0002e012_0000_0000_c000_000000000046
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?VT@?$CVarTypeInfo@PA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ ; ATL::CVarTypeInfo<wchar_t *>::pmField
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t * *>::VT
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ ; ATL::CVarTypeInfo<wchar_t * *>::pmField
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown *>::VT
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown *>::pmField
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown * *>::pmField
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	__GUID_0000010c_0000_0000_c000_000000000046
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch *>::VT
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch *>::pmField
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	??_C@_05GIBEAPNE@CLSID?$AA@			; `string'
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	_IID_IAxWinHostWindow
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch * *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY>::VT
PUBLIC	?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY>::pmField
PUBLIC	??_C@_05PDIKPLII@AppID?$AA@			; `string'
PUBLIC	?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY *>::VT
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY *>::pmField
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?chDirSep@ATL@@3DB				; ATL::chDirSep
PUBLIC	?chRightBracket@ATL@@3DB			; ATL::chRightBracket
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?chLeftBracket@ATL@@3DB				; ATL::chLeftBracket
PUBLIC	?chQuote@ATL@@3DB				; ATL::chQuote
PUBLIC	?chEquals@ATL@@3DB				; ATL::chEquals
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?szStringVal@ATL@@3QBDB				; ATL::szStringVal
PUBLIC	??_C@_01CPLAODJH@S?$AA@				; `string'
PUBLIC	?multiszStringVal@ATL@@3QBDB			; ATL::multiszStringVal
PUBLIC	_IID_IAxWinHostWindowLic
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	??_C@_01PLPBNMEI@M?$AA@				; `string'
PUBLIC	?szDwordVal@ATL@@3QBDB				; ATL::szDwordVal
PUBLIC	??_C@_01CKDDGHAB@D?$AA@				; `string'
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?szBinaryVal@ATL@@3QBDB				; ATL::szBinaryVal
PUBLIC	??_C@_01HMGJMAIH@B?$AA@				; `string'
PUBLIC	?szValToken@ATL@@3QBDB				; ATL::szValToken
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	??_C@_03LAIAPFCB@Val?$AA@			; `string'
PUBLIC	?szForceRemove@ATL@@3QBDB			; ATL::szForceRemove
PUBLIC	??_C@_0M@DBGDLGLL@ForceRemove?$AA@		; `string'
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?szNoRemove@ATL@@3QBDB				; ATL::szNoRemove
PUBLIC	??_C@_08KAAPDIAN@NoRemove?$AA@			; `string'
PUBLIC	?szDelete@ATL@@3QBDB				; ATL::szDelete
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	??_C@_06JBKGCNBB@Delete?$AA@			; `string'
PUBLIC	??_C@_07NFANNNEC@UNKNOWN?$AA@			; `string'
PUBLIC	??_C@_06IFDNOMJN@R8G8B8?$AA@			; `string'
PUBLIC	??_C@_08GBJJHIMB@A8R8G8B8?$AA@			; `string'
PUBLIC	??_C@_08GBPKIMOL@X8R8G8B8?$AA@			; `string'
PUBLIC	??_C@_06GMNCPGDN@R5G6B5?$AA@			; `string'
PUBLIC	??_C@_06HOGHFJND@R5G5B5?$AA@			; `string'
PUBLIC	??_C@_08BGCKKBKE@PALETTE4?$AA@			; `string'
PUBLIC	??_C@_08LKJPOOKI@PALETTE8?$AA@			; `string'
PUBLIC	??_C@_08IFIMNGKE@A1R5G5B5?$AA@			; `string'
PUBLIC	??_C@_08KHPEKJGL@X4R4G4B4?$AA@			; `string'
PUBLIC	??_C@_08KHJHFNEB@A4R4G4B4?$AA@			; `string'
PUBLIC	??_C@_02GOKBOOLC@L8?$AA@			; `string'
PUBLIC	??_C@_04HMOGBAK@A8L8?$AA@			; `string'
PUBLIC	??_C@_04IDBPHGOO@U8V8?$AA@			; `string'
PUBLIC	?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA	; ATL::CComApartment::ATL_CREATE_OBJECT
PUBLIC	??_C@_06MHPDKHKG@U5V5L6?$AA@			; `string'
PUBLIC	??_C@_06BHIEEBCL@U8V8L8?$AA@			; `string'
PUBLIC	??_C@_04HMGDLMGO@UYVY?$AA@			; `string'
PUBLIC	??_C@_04HOBABLIG@YUY2?$AA@			; `string'
PUBLIC	??_C@_04DHPPFAPI@DXT1?$AA@			; `string'
PUBLIC	??_C@_04FMJDCHK@DXT3?$AA@			; `string'
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	??_C@_04FDJDJFPM@DXT5?$AA@			; `string'
PUBLIC	??_C@_06MCBEHDNF@R3G3B2?$AA@			; `string'
PUBLIC	??_C@_02GGHJHNOB@A8?$AA@			; `string'
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	??_C@_0L@PGJGDKJN@TEXTUREMAX?$AA@		; `string'
PUBLIC	??_C@_05BLJFOFJM@Z16S0?$AA@			; `string'
PUBLIC	??_C@_05OODHCBKL@Z32S0?$AA@			; `string'
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	??_C@_05BADLHLDD@Z15S1?$AA@			; `string'
PUBLIC	??_C@_05DOOFNNMP@Z24S8?$AA@			; `string'
PUBLIC	??_C@_05HLEOBHOE@S1Z15?$AA@			; `string'
PUBLIC	??_C@_05GNADPKIN@S8Z24?$AA@			; `string'
PUBLIC	??_C@_0BJ@LFECPCJK@?$DM?$DM?$DMIndex?5our?5of?5range?$DO?$DO?$DO?$AA@ ; `string'
PUBLIC	_IID_IAxWinAmbientDispatch
PUBLIC	?m_arrPF@TextureHandle@@1PAU_DDPIXELFORMAT@@A	; TextureHandle::m_arrPF
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?m_pD3DD@TextureHandle@@1PAUIDirect3DDevice7@@A	; TextureHandle::m_pD3DD
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?m_pD3DHWDeviceDesc@TextureHandle@@1PAU_D3DDeviceDesc7@@A ; TextureHandle::m_pD3DHWDeviceDesc
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A ; ATL::_pAtlAutoThreadModule
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?m_bInitFailed@CAtlBaseModule@ATL@@2_NA		; ATL::CAtlBaseModule::m_bInitFailed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	__GUID_00000000_0000_0000_0000_000000000000
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?MAX_VALUE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_VALUE
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?rgszNeverDelete@CRegParser@ATL@@1QBQBDB	; ATL::CRegParser::rgszNeverDelete
PUBLIC	?cbNeverDelete@CRegParser@ATL@@1HB		; ATL::CRegParser::cbNeverDelete
PUBLIC	?MAX_TYPE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_TYPE
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	_IID_IAxWinAmbientDispatchEx
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	_IID_IInternalConnection
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	__GUID_1cf2b120_547d_101b_8e65_08002b2bd119
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?_pAtlModule@ATL@@3PAVCAtlModule@1@A		; ATL::_pAtlModule
PUBLIC	?m_libid@CAtlModule@ATL@@2U_GUID@@A		; ATL::CAtlModule::m_libid
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	__GUID_00000146_0000_0000_c000_000000000046
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?VT@?$CVarTypeInfo@D@ATL@@2GB			; ATL::CVarTypeInfo<char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ ; ATL::CVarTypeInfo<char>::pmField
PUBLIC	?VT@?$CVarTypeInfo@E@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ ; ATL::CVarTypeInfo<unsigned char>::pmField
PUBLIC	_CLSID_Registrar
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?_Min@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Min
PUBLIC	?VT@?$CVarTypeInfo@PAD@ATL@@2GB			; ATL::CVarTypeInfo<char *>::VT
PUBLIC	?_Max@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Max
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ ; ATL::CVarTypeInfo<char *>::pmField
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?_Min@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Min
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?_Max@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Max
PUBLIC	?VT@?$CVarTypeInfo@PAE@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char *>::VT
PUBLIC	__GUID_00000109_0000_0000_c000_000000000046
PUBLIC	?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ ; ATL::CVarTypeInfo<unsigned char *>::pmField
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?_Min@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Min
PUBLIC	__GUID_b196b284_bab4_101a_b69c_00aa00341d07
PUBLIC	?_Max@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Max
PUBLIC	?VT@?$CVarTypeInfo@F@ATL@@2GB			; ATL::CVarTypeInfo<short>::VT
PUBLIC	_IID_IRegistrar
PUBLIC	?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ ; ATL::CVarTypeInfo<short>::pmField
PUBLIC	?_Min@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Min
PUBLIC	?_Max@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Max
PUBLIC	?VT@?$CVarTypeInfo@PAF@ATL@@2GB			; ATL::CVarTypeInfo<short *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ ; ATL::CVarTypeInfo<short *>::pmField
PUBLIC	?_Min@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Min
PUBLIC	__GUID_00000001_0000_0000_c000_000000000046
PUBLIC	?_Max@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Max
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?VT@?$CVarTypeInfo@G@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short>::VT
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ ; ATL::CVarTypeInfo<unsigned short>::pmField
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	__GUID_00020401_0000_0000_c000_000000000046
PUBLIC	?_Min@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Min
PUBLIC	_LIBID_ATLLib
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?_Max@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Max
PUBLIC	__GUID_00020412_0000_0000_c000_000000000046
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?VT@?$CVarTypeInfo@PAG@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short *>::VT
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ ; ATL::CVarTypeInfo<unsigned short *>::pmField
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?VT@?$CVarTypeInfo@H@ATL@@2GB			; ATL::CVarTypeInfo<int>::VT
PUBLIC	?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ ; ATL::CVarTypeInfo<int>::pmField
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?VT@?$CVarTypeInfo@PAH@ATL@@2GB			; ATL::CVarTypeInfo<int *>::VT
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ ; ATL::CVarTypeInfo<int *>::pmField
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?VT@?$CVarTypeInfo@I@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int>::VT
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ ; ATL::CVarTypeInfo<unsigned int>::pmField
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?VT@?$CVarTypeInfo@PAI@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ ; ATL::CVarTypeInfo<unsigned int *>::pmField
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?VT@?$CVarTypeInfo@J@ATL@@2GB			; ATL::CVarTypeInfo<long>::VT
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ ; ATL::CVarTypeInfo<long>::pmField
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?_pModule@ATL@@3PAVCComModule@1@A		; ATL::_pModule
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?VT@?$CVarTypeInfo@PAJ@ATL@@2GB			; ATL::CVarTypeInfo<long *>::VT
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ ; ATL::CVarTypeInfo<long *>::pmField
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	_IID_IDocHostUIHandlerDispatch
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?VT@?$CVarTypeInfo@K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long>::VT
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ ; ATL::CVarTypeInfo<unsigned long>::pmField
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?VT@?$CVarTypeInfo@PAK@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long *>::VT
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ ; ATL::CVarTypeInfo<unsigned long *>::pmField
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA
_BSS	SEGMENT
?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA DD 01H DUP (?) ; ATL::_pPerfRegFunc
_BSS	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZA
_BSS	SEGMENT
?_pPerfUnRegFunc@ATL@@3P6AJXZA DD 01H DUP (?)		; ATL::_pPerfUnRegFunc
_BSS	ENDS
;	COMDAT ?_AtlRegisterPerUser@ATL@@3_NA
_BSS	SEGMENT
?_AtlRegisterPerUser@ATL@@3_NA DB 01H DUP (?)		; ATL::_AtlRegisterPerUser
_BSS	ENDS
_BSS	SEGMENT
_TexturePath DB	0100H DUP (?)
_rc	DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_BSS	SEGMENT
?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA DD 01H DUP (?) ; ATL::CComApartment::ATL_CREATE_OBJECT
_BSS	ENDS
_BSS	SEGMENT
?m_arrPF@TextureHandle@@1PAU_DDPIXELFORMAT@@A DB 080H DUP (?) ; TextureHandle::m_arrPF
?m_pD3DD@TextureHandle@@1PAUIDirect3DDevice7@@A DD 01H DUP (?) ; TextureHandle::m_pD3DD
?m_pD3DHWDeviceDesc@TextureHandle@@1PAU_D3DDeviceDesc7@@A DD 01H DUP (?) ; TextureHandle::m_pD3DHWDeviceDesc
_BSS	ENDS
;	COMDAT ?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A
_BSS	SEGMENT
?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A DD 01H DUP (?) ; ATL::_pAtlAutoThreadModule
_BSS	ENDS
;	COMDAT ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA
_BSS	SEGMENT
?m_bInitFailed@CAtlBaseModule@ATL@@2_NA DB 01H DUP (?)	; ATL::CAtlBaseModule::m_bInitFailed
_BSS	ENDS
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_BSS	SEGMENT
?_pAtlModule@ATL@@3PAVCAtlModule@1@A DD 01H DUP (?)	; ATL::_pAtlModule
_BSS	ENDS
;	COMDAT ?m_libid@CAtlModule@ATL@@2U_GUID@@A
_BSS	SEGMENT
?m_libid@CAtlModule@ATL@@2U_GUID@@A DB 010H DUP (?)	; ATL::CAtlModule::m_libid
_BSS	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_BSS	SEGMENT
?_pModule@ATL@@3PAVCComModule@1@A DD 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long *>::pmField
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAK@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAK@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned long *>::VT
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long>::pmField
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@K@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned long>::VT
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
_IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ DD 08H ; ATL::CVarTypeInfo<long *>::pmField
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAJ@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAJ@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<long *>::VT
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ DD 08H ; ATL::CVarTypeInfo<long>::pmField
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@J@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<long>::VT
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAI@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAI@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned int *>::VT
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int>::pmField
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@I@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@I@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned int>::VT
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ DD 08H ; ATL::CVarTypeInfo<int *>::pmField
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAH@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAH@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<int *>::VT
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ DD 08H ; ATL::CVarTypeInfo<int>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@H@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@H@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<int>::VT
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short *>::pmField
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAG@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAG@ATL@@2GB DW 04012H		; ATL::CVarTypeInfo<unsigned short *>::VT
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT __GUID_00020412_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020412_0000_0000_c000_000000000046 DD 020412H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Max@?$AtlLimits@_K@ATL@@2_KB DQ ffffffffffffffffH	; ATL::AtlLimits<unsigned __int64>::_Max
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT
_LIBID_ATLLib DD 044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Min@?$AtlLimits@_K@ATL@@2_KB DQ 0000000000000000H	; ATL::AtlLimits<unsigned __int64>::_Min
CONST	ENDS
;	COMDAT __GUID_00020401_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020401_0000_0000_c000_000000000046 DD 020401H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short>::pmField
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@G@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@G@ATL@@2GB DW 012H			; ATL::CVarTypeInfo<unsigned short>::VT
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Max@?$AtlLimits@_J@ATL@@2_JB DQ 7fffffffffffffffH	; ATL::AtlLimits<__int64>::_Max
CONST	ENDS
;	COMDAT __GUID_00000001_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000001_0000_0000_c000_000000000046 DD 01H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Min@?$AtlLimits@_J@ATL@@2_JB DQ 8000000000000000H	; ATL::AtlLimits<__int64>::_Min
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ DD 08H ; ATL::CVarTypeInfo<short *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAF@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAF@ATL@@2GB DW 04002H		; ATL::CVarTypeInfo<short *>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Max@?$AtlLimits@K@ATL@@2KB DD 0ffffffffH		; ATL::AtlLimits<unsigned long>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Min@?$AtlLimits@K@ATL@@2KB DD 00H			; ATL::AtlLimits<unsigned long>::_Min
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ DD 08H ; ATL::CVarTypeInfo<short>::pmField
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT
_IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@F@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@F@ATL@@2GB DW 02H			; ATL::CVarTypeInfo<short>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Max@?$AtlLimits@J@ATL@@2JB DD 07fffffffH		; ATL::AtlLimits<long>::_Max
CONST	ENDS
;	COMDAT __GUID_b196b284_bab4_101a_b69c_00aa00341d07
CONST	SEGMENT
__GUID_b196b284_bab4_101a_b69c_00aa00341d07 DD 0b196b284H
	DW	0bab4H
	DW	0101aH
	DB	0b6H
	DB	09cH
	DB	00H
	DB	0aaH
	DB	00H
	DB	034H
	DB	01dH
	DB	07H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Min@?$AtlLimits@J@ATL@@2JB DD 080000000H		; ATL::AtlLimits<long>::_Min
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT __GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
CONST	SEGMENT
__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713 DD 07fd52380H
	DW	04e07H
	DW	0101bH
	DB	0aeH
	DB	02dH
	DB	08H
	DB	00H
	DB	02bH
	DB	02eH
	DB	0c7H
	DB	013H
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char *>::pmField
CONST	ENDS
;	COMDAT __GUID_00000109_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000109_0000_0000_c000_000000000046 DD 0109H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAE@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAE@ATL@@2GB DW 04011H		; ATL::CVarTypeInfo<unsigned char *>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Max@?$AtlLimits@I@ATL@@2IB DD 0ffffffffH		; ATL::AtlLimits<unsigned int>::_Max
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Min@?$AtlLimits@I@ATL@@2IB DD 00H			; ATL::AtlLimits<unsigned int>::_Min
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ DD 08H ; ATL::CVarTypeInfo<char *>::pmField
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Max@?$AtlLimits@H@ATL@@2HB DD 07fffffffH		; ATL::AtlLimits<int>::_Max
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAD@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAD@ATL@@2GB DW 04010H		; ATL::CVarTypeInfo<char *>::VT
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Min@?$AtlLimits@H@ATL@@2HB DD 080000000H		; ATL::AtlLimits<int>::_Min
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT
_CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@E@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@E@ATL@@2GB DW 011H			; ATL::CVarTypeInfo<unsigned char>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ DD 08H ; ATL::CVarTypeInfo<char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@D@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@D@ATL@@2GB DW 010H			; ATL::CVarTypeInfo<char>::VT
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT __GUID_00000146_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000146_0000_0000_c000_000000000046 DD 0146H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT __GUID_1cf2b120_547d_101b_8e65_08002b2bd119
CONST	SEGMENT
__GUID_1cf2b120_547d_101b_8e65_08002b2bd119 DD 01cf2b120H
	DW	0547dH
	DW	0101bH
	DB	08eH
	DB	065H
	DB	08H
	DB	00H
	DB	02bH
	DB	02bH
	DB	0d1H
	DB	019H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT
_IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatchEx
CONST	SEGMENT
_IID_IAxWinAmbientDispatchEx DD 0b2d0778bH
	DW	0ac99H
	DW	04c58H
	DB	0a5H
	DB	0c8H
	DB	0e7H
	DB	072H
	DB	04eH
	DB	053H
	DB	016H
	DB	0b5H
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT __GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
CONST	SEGMENT
__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352 DD 0fc4801a3H
	DW	02ba9H
	DW	011cfH
	DB	0a2H
	DB	029H
	DB	00H
	DB	0aaH
	DB	00H
	DB	03dH
	DB	073H
	DB	052H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?MAX_TYPE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_TYPE@CRegParser@ATL@@1HB DD 01000H			; ATL::CRegParser::MAX_TYPE
CONST	ENDS
;	COMDAT ?cbNeverDelete@CRegParser@ATL@@1HB
CONST	SEGMENT
?cbNeverDelete@CRegParser@ATL@@1HB DD 0cH		; ATL::CRegParser::cbNeverDelete
CONST	ENDS
;	COMDAT ?rgszNeverDelete@CRegParser@ATL@@1QBQBDB
CONST	SEGMENT
?rgszNeverDelete@CRegParser@ATL@@1QBQBDB DD FLAT:??_C@_05PDIKPLII@AppID?$AA@ ; ATL::CRegParser::rgszNeverDelete
	DD	FLAT:??_C@_05GIBEAPNE@CLSID?$AA@
	DD	FLAT:??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
	DD	FLAT:??_C@_08PICKODJL@FileType?$AA@
	DD	FLAT:??_C@_09JKPGEJCH@Interface?$AA@
	DD	FLAT:??_C@_08PPIOJEA@Hardware?$AA@
	DD	FLAT:??_C@_04IHBFOLAC@Mime?$AA@
	DD	FLAT:??_C@_03DDIMFGBA@SAM?$AA@
	DD	FLAT:??_C@_08LOPHEHKG@SECURITY?$AA@
	DD	FLAT:??_C@_06FDHFNJBJ@SYSTEM?$AA@
	DD	FLAT:??_C@_08KEKAJNJI@Software?$AA@
	DD	FLAT:??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?MAX_VALUE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_VALUE@CRegParser@ATL@@1HB DD 01000H		; ATL::CRegParser::MAX_VALUE
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
CONST	SEGMENT
__GUID_00000000_0000_0000_0000_000000000000 DD 00H
	DW	00H
	DW	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT
_IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ??_C@_0BJ@LFECPCJK@?$DM?$DM?$DMIndex?5our?5of?5range?$DO?$DO?$DO?$AA@
CONST	SEGMENT
??_C@_0BJ@LFECPCJK@?$DM?$DM?$DMIndex?5our?5of?5range?$DO?$DO?$DO?$AA@ DB '<'
	DB	'<<Index our of range>>>', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GNADPKIN@S8Z24?$AA@
CONST	SEGMENT
??_C@_05GNADPKIN@S8Z24?$AA@ DB 'S8Z24', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HLEOBHOE@S1Z15?$AA@
CONST	SEGMENT
??_C@_05HLEOBHOE@S1Z15?$AA@ DB 'S1Z15', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DOOFNNMP@Z24S8?$AA@
CONST	SEGMENT
??_C@_05DOOFNNMP@Z24S8?$AA@ DB 'Z24S8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BADLHLDD@Z15S1?$AA@
CONST	SEGMENT
??_C@_05BADLHLDD@Z15S1?$AA@ DB 'Z15S1', 00H		; `string'
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ??_C@_05OODHCBKL@Z32S0?$AA@
CONST	SEGMENT
??_C@_05OODHCBKL@Z32S0?$AA@ DB 'Z32S0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BLJFOFJM@Z16S0?$AA@
CONST	SEGMENT
??_C@_05BLJFOFJM@Z16S0?$AA@ DB 'Z16S0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PGJGDKJN@TEXTUREMAX?$AA@
CONST	SEGMENT
??_C@_0L@PGJGDKJN@TEXTUREMAX?$AA@ DB 'TEXTUREMAX', 00H	; `string'
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ??_C@_02GGHJHNOB@A8?$AA@
CONST	SEGMENT
??_C@_02GGHJHNOB@A8?$AA@ DB 'A8', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06MCBEHDNF@R3G3B2?$AA@
CONST	SEGMENT
??_C@_06MCBEHDNF@R3G3B2?$AA@ DB 'R3G3B2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FDJDJFPM@DXT5?$AA@
CONST	SEGMENT
??_C@_04FDJDJFPM@DXT5?$AA@ DB 'DXT5', 00H		; `string'
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ??_C@_04FMJDCHK@DXT3?$AA@
CONST	SEGMENT
??_C@_04FMJDCHK@DXT3?$AA@ DB 'DXT3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DHPPFAPI@DXT1?$AA@
CONST	SEGMENT
??_C@_04DHPPFAPI@DXT1?$AA@ DB 'DXT1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HOBABLIG@YUY2?$AA@
CONST	SEGMENT
??_C@_04HOBABLIG@YUY2?$AA@ DB 'YUY2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HMGDLMGO@UYVY?$AA@
CONST	SEGMENT
??_C@_04HMGDLMGO@UYVY?$AA@ DB 'UYVY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BHIEEBCL@U8V8L8?$AA@
CONST	SEGMENT
??_C@_06BHIEEBCL@U8V8L8?$AA@ DB 'U8V8L8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MHPDKHKG@U5V5L6?$AA@
CONST	SEGMENT
??_C@_06MHPDKHKG@U5V5L6?$AA@ DB 'U5V5L6', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IDBPHGOO@U8V8?$AA@
CONST	SEGMENT
??_C@_04IDBPHGOO@U8V8?$AA@ DB 'U8V8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HMOGBAK@A8L8?$AA@
CONST	SEGMENT
??_C@_04HMOGBAK@A8L8?$AA@ DB 'A8L8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02GOKBOOLC@L8?$AA@
CONST	SEGMENT
??_C@_02GOKBOOLC@L8?$AA@ DB 'L8', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08KHJHFNEB@A4R4G4B4?$AA@
CONST	SEGMENT
??_C@_08KHJHFNEB@A4R4G4B4?$AA@ DB 'A4R4G4B4', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KHPEKJGL@X4R4G4B4?$AA@
CONST	SEGMENT
??_C@_08KHPEKJGL@X4R4G4B4?$AA@ DB 'X4R4G4B4', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IFIMNGKE@A1R5G5B5?$AA@
CONST	SEGMENT
??_C@_08IFIMNGKE@A1R5G5B5?$AA@ DB 'A1R5G5B5', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08LKJPOOKI@PALETTE8?$AA@
CONST	SEGMENT
??_C@_08LKJPOOKI@PALETTE8?$AA@ DB 'PALETTE8', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BGCKKBKE@PALETTE4?$AA@
CONST	SEGMENT
??_C@_08BGCKKBKE@PALETTE4?$AA@ DB 'PALETTE4', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HOGHFJND@R5G5B5?$AA@
CONST	SEGMENT
??_C@_06HOGHFJND@R5G5B5?$AA@ DB 'R5G5B5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GMNCPGDN@R5G6B5?$AA@
CONST	SEGMENT
??_C@_06GMNCPGDN@R5G6B5?$AA@ DB 'R5G6B5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GBPKIMOL@X8R8G8B8?$AA@
CONST	SEGMENT
??_C@_08GBPKIMOL@X8R8G8B8?$AA@ DB 'X8R8G8B8', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GBJJHIMB@A8R8G8B8?$AA@
CONST	SEGMENT
??_C@_08GBJJHIMB@A8R8G8B8?$AA@ DB 'A8R8G8B8', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06IFDNOMJN@R8G8B8?$AA@
CONST	SEGMENT
??_C@_06IFDNOMJN@R8G8B8?$AA@ DB 'R8G8B8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NFANNNEC@UNKNOWN?$AA@
CONST	SEGMENT
??_C@_07NFANNNEC@UNKNOWN?$AA@ DB 'UNKNOWN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JBKGCNBB@Delete?$AA@
CONST	SEGMENT
??_C@_06JBKGCNBB@Delete?$AA@ DB 'Delete', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
_arrSurfFmt2String DD FLAT:??_C@_07NFANNNEC@UNKNOWN?$AA@
	DD	FLAT:??_C@_06IFDNOMJN@R8G8B8?$AA@
	DD	FLAT:??_C@_08GBJJHIMB@A8R8G8B8?$AA@
	DD	FLAT:??_C@_08GBPKIMOL@X8R8G8B8?$AA@
	DD	FLAT:??_C@_06GMNCPGDN@R5G6B5?$AA@
	DD	FLAT:??_C@_06HOGHFJND@R5G5B5?$AA@
	DD	FLAT:??_C@_08BGCKKBKE@PALETTE4?$AA@
	DD	FLAT:??_C@_08LKJPOOKI@PALETTE8?$AA@
	DD	FLAT:??_C@_08IFIMNGKE@A1R5G5B5?$AA@
	DD	FLAT:??_C@_08KHPEKJGL@X4R4G4B4?$AA@
	DD	FLAT:??_C@_08KHJHFNEB@A4R4G4B4?$AA@
	DD	FLAT:??_C@_02GOKBOOLC@L8?$AA@
	DD	FLAT:??_C@_04HMOGBAK@A8L8?$AA@
	DD	FLAT:??_C@_04IDBPHGOO@U8V8?$AA@
	DD	FLAT:??_C@_06MHPDKHKG@U5V5L6?$AA@
	DD	FLAT:??_C@_06BHIEEBCL@U8V8L8?$AA@
	DD	FLAT:??_C@_04HMGDLMGO@UYVY?$AA@
	DD	FLAT:??_C@_04HOBABLIG@YUY2?$AA@
	DD	FLAT:??_C@_04DHPPFAPI@DXT1?$AA@
	DD	FLAT:??_C@_04FMJDCHK@DXT3?$AA@
	DD	FLAT:??_C@_04FDJDJFPM@DXT5?$AA@
	DD	FLAT:??_C@_06MCBEHDNF@R3G3B2?$AA@
	DD	FLAT:??_C@_02GGHJHNOB@A8?$AA@
	DD	FLAT:??_C@_0L@PGJGDKJN@TEXTUREMAX?$AA@
	DD	FLAT:??_C@_05BLJFOFJM@Z16S0?$AA@
	DD	FLAT:??_C@_05OODHCBKL@Z32S0?$AA@
	DD	FLAT:??_C@_05BADLHLDD@Z15S1?$AA@
	DD	FLAT:??_C@_05DOOFNNMP@Z24S8?$AA@
	DD	FLAT:??_C@_05HLEOBHOE@S1Z15?$AA@
	DD	FLAT:??_C@_05GNADPKIN@S8Z24?$AA@
	DD	FLAT:??_C@_0BJ@LFECPCJK@?$DM?$DM?$DMIndex?5our?5of?5range?$DO?$DO?$DO?$AA@
	DD	FLAT:??_C@_0BJ@LFECPCJK@?$DM?$DM?$DMIndex?5our?5of?5range?$DO?$DO?$DO?$AA@
	DD	FLAT:??_C@_0BJ@LFECPCJK@?$DM?$DM?$DMIndex?5our?5of?5range?$DO?$DO?$DO?$AA@
	DD	FLAT:??_C@_0BJ@LFECPCJK@?$DM?$DM?$DMIndex?5our?5of?5range?$DO?$DO?$DO?$AA@
	DD	FLAT:??_C@_0BJ@LFECPCJK@?$DM?$DM?$DMIndex?5our?5of?5range?$DO?$DO?$DO?$AA@
	DD	FLAT:??_C@_0BJ@LFECPCJK@?$DM?$DM?$DMIndex?5our?5of?5range?$DO?$DO?$DO?$AA@
	DD	FLAT:??_C@_0BJ@LFECPCJK@?$DM?$DM?$DMIndex?5our?5of?5range?$DO?$DO?$DO?$AA@
	DD	FLAT:??_C@_0BJ@LFECPCJK@?$DM?$DM?$DMIndex?5our?5of?5range?$DO?$DO?$DO?$AA@
	DD	FLAT:??_C@_0BJ@LFECPCJK@?$DM?$DM?$DMIndex?5our?5of?5range?$DO?$DO?$DO?$AA@
	DD	FLAT:??_C@_0BJ@LFECPCJK@?$DM?$DM?$DMIndex?5our?5of?5range?$DO?$DO?$DO?$AA@
	DD	FLAT:??_C@_0BJ@LFECPCJK@?$DM?$DM?$DMIndex?5our?5of?5range?$DO?$DO?$DO?$AA@
_DATA	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?szDelete@ATL@@3QBDB
CONST	SEGMENT
?szDelete@ATL@@3QBDB DD FLAT:??_C@_06JBKGCNBB@Delete?$AA@ ; ATL::szDelete
CONST	ENDS
;	COMDAT ??_C@_08KAAPDIAN@NoRemove?$AA@
CONST	SEGMENT
??_C@_08KAAPDIAN@NoRemove?$AA@ DB 'NoRemove', 00H	; `string'
CONST	ENDS
;	COMDAT ?szNoRemove@ATL@@3QBDB
CONST	SEGMENT
?szNoRemove@ATL@@3QBDB DD FLAT:??_C@_08KAAPDIAN@NoRemove?$AA@ ; ATL::szNoRemove
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ??_C@_0M@DBGDLGLL@ForceRemove?$AA@
CONST	SEGMENT
??_C@_0M@DBGDLGLL@ForceRemove?$AA@ DB 'ForceRemove', 00H ; `string'
CONST	ENDS
;	COMDAT ?szForceRemove@ATL@@3QBDB
CONST	SEGMENT
?szForceRemove@ATL@@3QBDB DD FLAT:??_C@_0M@DBGDLGLL@ForceRemove?$AA@ ; ATL::szForceRemove
CONST	ENDS
;	COMDAT ??_C@_03LAIAPFCB@Val?$AA@
CONST	SEGMENT
??_C@_03LAIAPFCB@Val?$AA@ DB 'Val', 00H			; `string'
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?szValToken@ATL@@3QBDB
CONST	SEGMENT
?szValToken@ATL@@3QBDB DD FLAT:??_C@_03LAIAPFCB@Val?$AA@ ; ATL::szValToken
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B?$AA@
CONST	SEGMENT
??_C@_01HMGJMAIH@B?$AA@ DB 'B', 00H			; `string'
CONST	ENDS
;	COMDAT ?szBinaryVal@ATL@@3QBDB
CONST	SEGMENT
?szBinaryVal@ATL@@3QBDB DD FLAT:??_C@_01HMGJMAIH@B?$AA@	; ATL::szBinaryVal
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D?$AA@
CONST	SEGMENT
??_C@_01CKDDGHAB@D?$AA@ DB 'D', 00H			; `string'
CONST	ENDS
;	COMDAT ?szDwordVal@ATL@@3QBDB
CONST	SEGMENT
?szDwordVal@ATL@@3QBDB DD FLAT:??_C@_01CKDDGHAB@D?$AA@	; ATL::szDwordVal
CONST	ENDS
;	COMDAT ??_C@_01PLPBNMEI@M?$AA@
CONST	SEGMENT
??_C@_01PLPBNMEI@M?$AA@ DB 'M', 00H			; `string'
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindowLic
CONST	SEGMENT
_IID_IAxWinHostWindowLic DD 03935bda8H
	DW	04ed9H
	DW	0495cH
	DB	086H
	DB	050H
	DB	0e0H
	DB	01fH
	DB	0c1H
	DB	0e3H
	DB	08aH
	DB	04bH
CONST	ENDS
;	COMDAT ?multiszStringVal@ATL@@3QBDB
CONST	SEGMENT
?multiszStringVal@ATL@@3QBDB DD FLAT:??_C@_01PLPBNMEI@M?$AA@ ; ATL::multiszStringVal
CONST	ENDS
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT
??_C@_01CPLAODJH@S?$AA@ DB 'S', 00H			; `string'
CONST	ENDS
;	COMDAT ?szStringVal@ATL@@3QBDB
CONST	SEGMENT
?szStringVal@ATL@@3QBDB DD FLAT:??_C@_01CPLAODJH@S?$AA@	; ATL::szStringVal
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?chEquals@ATL@@3DB
CONST	SEGMENT
?chEquals@ATL@@3DB DB 03dH				; ATL::chEquals
CONST	ENDS
;	COMDAT ?chQuote@ATL@@3DB
CONST	SEGMENT
?chQuote@ATL@@3DB DB 027H				; ATL::chQuote
CONST	ENDS
;	COMDAT ?chLeftBracket@ATL@@3DB
CONST	SEGMENT
?chLeftBracket@ATL@@3DB DB 07bH				; ATL::chLeftBracket
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?chRightBracket@ATL@@3DB
CONST	SEGMENT
?chRightBracket@ATL@@3DB DB 07dH			; ATL::chRightBracket
CONST	ENDS
;	COMDAT ?chDirSep@ATL@@3DB
CONST	SEGMENT
?chDirSep@ATL@@3DB DB 05cH				; ATL::chDirSep
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY *>::pmField
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB DW 04006H	; ATL::CVarTypeInfo<tagCY *>::VT
CONST	ENDS
;	COMDAT ??_C@_05PDIKPLII@AppID?$AA@
CONST	SEGMENT
??_C@_05PDIKPLII@AppID?$AA@ DB 'AppID', 00H		; `string'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB DW 06H		; ATL::CVarTypeInfo<tagCY>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB DW 04009H	; ATL::CVarTypeInfo<IDispatch * *>::VT
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT
_IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ??_C@_05GIBEAPNE@CLSID?$AA@
CONST	SEGMENT
??_C@_05GIBEAPNE@CLSID?$AA@ DB 'CLSID', 00H		; `string'
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch *>::pmField
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB DW 09H	; ATL::CVarTypeInfo<IDispatch *>::VT
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT __GUID_0000010c_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_0000010c_0000_0000_c000_000000000046 DD 010cH
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB DW 0400dH	; ATL::CVarTypeInfo<IUnknown * *>::VT
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown *>::pmField
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB DW 0dH	; ATL::CVarTypeInfo<IUnknown *>::VT
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t * *>::pmField
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB DW 04008H		; ATL::CVarTypeInfo<wchar_t * *>::VT
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_W@ATL@@2GB DW 08H			; ATL::CVarTypeInfo<wchar_t *>::VT
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT __GUID_0002e012_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_0002e012_0000_0000_c000_000000000046 DD 02e012H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB DW 0400cH	; ATL::CVarTypeInfo<tagVARIANT *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ DD 08H ; ATL::CVarTypeInfo<double *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAN@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAN@ATL@@2GB DW 04005H		; ATL::CVarTypeInfo<double *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ DD 08H ; ATL::CVarTypeInfo<double>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@N@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@N@ATL@@2GB DW 05H			; ATL::CVarTypeInfo<double>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ DD 08H ; ATL::CVarTypeInfo<float *>::pmField
CONST	ENDS
;	COMDAT __GUID_00020400_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020400_0000_0000_c000_000000000046 DD 020400H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAM@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAM@ATL@@2GB DW 04004H		; ATL::CVarTypeInfo<float *>::VT
CONST	ENDS
;	COMDAT __GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
CONST	SEGMENT
__GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851 DD 0a6bc3ac0H
	DW	0dbaaH
	DW	011ceH
	DB	09dH
	DB	0e3H
	DB	00H
	DB	0aaH
	DB	00H
	DB	04bH
	DB	0b8H
	DB	051H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ DD 08H ; ATL::CVarTypeInfo<float>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@M@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@M@ATL@@2GB DW 04H			; ATL::CVarTypeInfo<float>::VT
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000000_0000_0000_c000_000000000046 DD 00H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_K@ATL@@2GB DW 04015H		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
CONST	ENDS
;	COMDAT ??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	SEGMENT
??_C@_07KJLOKDKB@TypeLib?$AA@ DB 'TypeLib', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KEKAJNJI@Software?$AA@
CONST	SEGMENT
??_C@_08KEKAJNJI@Software?$AA@ DB 'Software', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDHFNJBJ@SYSTEM?$AA@
CONST	SEGMENT
??_C@_06FDHFNJBJ@SYSTEM?$AA@ DB 'SYSTEM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LOPHEHKG@SECURITY?$AA@
CONST	SEGMENT
??_C@_08LOPHEHKG@SECURITY?$AA@ DB 'SECURITY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03DDIMFGBA@SAM?$AA@
CONST	SEGMENT
??_C@_03DDIMFGBA@SAM?$AA@ DB 'SAM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IHBFOLAC@Mime?$AA@
CONST	SEGMENT
??_C@_04IHBFOLAC@Mime?$AA@ DB 'Mime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPIOJEA@Hardware?$AA@
CONST	SEGMENT
??_C@_08PPIOJEA@Hardware?$AA@ DB 'Hardware', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JKPGEJCH@Interface?$AA@
CONST	SEGMENT
??_C@_09JKPGEJCH@Interface?$AA@ DB 'Interface', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PICKODJL@FileType?$AA@
CONST	SEGMENT
??_C@_08PICKODJL@FileType?$AA@ DB 'FileType', 00H	; `string'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64>::pmField
CONST	ENDS
;	COMDAT ??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
CONST	SEGMENT
??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@ DB 'Component Categories', 00H ; `string'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_K@ATL@@2GB DW 015H			; ATL::CVarTypeInfo<unsigned __int64>::VT
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_J@ATL@@2GB DW 04014H		; ATL::CVarTypeInfo<__int64 *>::VT
CONST	ENDS
;	COMDAT ___pobjMapEntryLast
ATL$__z	SEGMENT
___pobjMapEntryLast DD 00H
ATL$__z	ENDS
;	COMDAT ___pobjMapEntryFirst
ATL$__a	SEGMENT
___pobjMapEntryFirst DD 00H
ATL$__a	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_J@ATL@@2GB DW 014H			; ATL::CVarTypeInfo<__int64>::VT
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??1CComBSTR@ATL@@QAE@XZ				; ATL::CComBSTR::~CComBSTR
PUBLIC	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
PUBLIC	??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
PUBLIC	??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z		; _com_error::_com_error
PUBLIC	??0_com_error@@QAE@ABV0@@Z			; _com_error::_com_error
PUBLIC	??1_com_error@@UAE@XZ				; _com_error::~_com_error
PUBLIC	?Error@_com_error@@QBEJXZ			; _com_error::Error
PUBLIC	??_G_com_error@@UAEPAXI@Z			; _com_error::`scalar deleting destructor'
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?CheckHR@@YAXJ@Z				; CheckHR
PUBLIC	?glReleaseMemory@@YAXPAX@Z			; glReleaseMemory
PUBLIC	?glGetFileExtension@@YAXPBDPAD@Z		; glGetFileExtension
PUBLIC	??1CFileIO@@UAE@XZ				; CFileIO::~CFileIO
PUBLIC	??_GCFileIO@@UAEPAXI@Z				; CFileIO::`scalar deleting destructor'
PUBLIC	??1CFileMemory@@UAE@XZ				; CFileMemory::~CFileMemory
PUBLIC	??_GCFileMemory@@UAEPAXI@Z			; CFileMemory::`scalar deleting destructor'
PUBLIC	??1CImageFileMemory@@UAE@XZ			; CImageFileMemory::~CImageFileMemory
PUBLIC	??_GCImageFileMemory@@UAEPAXI@Z			; CImageFileMemory::`scalar deleting destructor'
PUBLIC	?CheckImageType@@YAHPBD@Z			; CheckImageType
PUBLIC	?ReadTextureImage@@YAHPAVCImageFileMemory@@@Z	; ReadTextureImage
PUBLIC	??0TextureHandle@@QAE@XZ			; TextureHandle::TextureHandle
PUBLIC	??1TextureHandle@@QAE@XZ			; TextureHandle::~TextureHandle
PUBLIC	?Create@TextureHandle@@QAE_NPADKGGGK@Z		; TextureHandle::Create
PUBLIC	?Load@TextureHandle@@QAE_NGIPAE_N1H@Z		; TextureHandle::Load
PUBLIC	?Reload@TextureHandle@@QAE_NXZ			; TextureHandle::Reload
PUBLIC	?PaletteAttach@TextureHandle@@QAEXPAVPaletteHandle@@@Z ; TextureHandle::PaletteAttach
PUBLIC	?PaletteDetach@TextureHandle@@QAEXPAVPaletteHandle@@@Z ; TextureHandle::PaletteDetach
PUBLIC	?SetPriority@TextureHandle@@QAE_NK@Z		; TextureHandle::SetPriority
PUBLIC	?Clear@TextureHandle@@QAEXXZ			; TextureHandle::Clear
PUBLIC	?PreLoad@TextureHandle@@QAEXXZ			; TextureHandle::PreLoad
PUBLIC	?RestoreAll@TextureHandle@@QAEXXZ		; TextureHandle::RestoreAll
PUBLIC	?ReportTextureLoadError@TextureHandle@@IAEXJ_N@Z ; TextureHandle::ReportTextureLoadError
PUBLIC	?ReportTextureLoadError@TextureHandle@@IAEXPAD@Z ; TextureHandle::ReportTextureLoadError
PUBLIC	?TextureSearchCallback@TextureHandle@@KGJPAU_DDPIXELFORMAT@@PAX@Z ; TextureHandle::TextureSearchCallback
PUBLIC	?StaticInit@TextureHandle@@SAXPAUIDirect3DDevice7@@@Z ; TextureHandle::StaticInit
PUBLIC	?StaticCleanup@TextureHandle@@SAXXZ		; TextureHandle::StaticCleanup
PUBLIC	??_GTextureHandle@@QAEPAXI@Z			; TextureHandle::`scalar deleting destructor'
PUBLIC	?Activate@Palette@@QAEXXZ			; Palette::Activate
PUBLIC	?UpdateMPR@Palette@@QAEXXZ			; Palette::UpdateMPR
PUBLIC	??_GPalette@@QAEPAXI@Z				; Palette::`scalar deleting destructor'
PUBLIC	??0Texture@@QAE@XZ				; Texture::Texture
PUBLIC	??1Texture@@QAE@XZ				; Texture::~Texture
PUBLIC	?SetupForDevice@Texture@@SAXPAVDXContext@@PAD@Z	; Texture::SetupForDevice
PUBLIC	?CleanupForDevice@Texture@@SAXPAVDXContext@@@Z	; Texture::CleanupForDevice
PUBLIC	?IsSetup@Texture@@SA_NXZ			; Texture::IsSetup
PUBLIC	?LoadImageA@Texture@@QAEHPADKH@Z		; Texture::LoadImageA
PUBLIC	?LoadAndCreate@Texture@@QAEHPADK@Z		; Texture::LoadAndCreate
PUBLIC	?CreateTexture@Texture@@QAE_NPAD@Z		; Texture::CreateTexture
PUBLIC	?UpdateMPR@Texture@@QAE_NPAD@Z			; Texture::UpdateMPR
PUBLIC	?FreeAll@Texture@@QAEXXZ			; Texture::FreeAll
PUBLIC	?FreeImage@Texture@@QAEXXZ			; Texture::FreeImage
PUBLIC	?FreeTexture@Texture@@QAEXXZ			; Texture::FreeTexture
PUBLIC	?FreePalette@Texture@@QAEXXZ			; Texture::FreePalette
PUBLIC	?RestoreAll@Texture@@QAEXXZ			; Texture::RestoreAll
PUBLIC	?DumpImageToFile@Texture@@QAE_NPADH@Z		; Texture::DumpImageToFile
PUBLIC	?SaveDDS_DXTn@Texture@@IAE_NPBDPAEHK@Z		; Texture::SaveDDS_DXTn
PUBLIC	??0CompressionOptions@@QAE@XZ			; CompressionOptions::CompressionOptions
PUBLIC	??0?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
PUBLIC	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
PUBLIC	??I?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEPAPAUIDirectDrawSurface7@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator&
PUBLIC	??C?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDrawSurface7@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator->
PUBLIC	?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::_Release
PUBLIC	??0?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >
PUBLIC	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >
PUBLIC	??I?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEPAPAUIDirectDraw7@@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator&
PUBLIC	??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDraw7@@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator->
PUBLIC	?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_Release
PUBLIC	?RGB32ToSurfaceColor@@YAKKPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@@Z ; RGB32ToSurfaceColor
PUBLIC	??0?$_com_ptr_t@V?$_com_IIID@UIDirectDrawPalette@@$1?IID_IDirectDrawPalette@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawPalette,&IID_IDirectDrawPalette> >::_com_ptr_t<_com_IIID<IDirectDrawPalette,&IID_IDirectDrawPalette> >
PUBLIC	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawPalette@@$1?IID_IDirectDrawPalette@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawPalette,&IID_IDirectDrawPalette> >::~_com_ptr_t<_com_IIID<IDirectDrawPalette,&IID_IDirectDrawPalette> >
PUBLIC	??I?$_com_ptr_t@V?$_com_IIID@UIDirectDrawPalette@@$1?IID_IDirectDrawPalette@@3U_GUID@@B@@@@QAEPAPAUIDirectDrawPalette@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawPalette,&IID_IDirectDrawPalette> >::operator&
PUBLIC	?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawPalette@@$1?IID_IDirectDrawPalette@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirectDrawPalette,&IID_IDirectDrawPalette> >::_Release
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7_com_error@@6B@				; _com_error::`vftable'
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	__TI1?AV_com_error@@
PUBLIC	__CTA1?AV_com_error@@
PUBLIC	??_R0?AV_com_error@@@8				; _com_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AV_com_error@@@8??0_com_error@@QAE@ABV0@@Z16
PUBLIC	??_7CFileIO@@6B@				; CFileIO::`vftable'
PUBLIC	??_7CFileMemory@@6B@				; CFileMemory::`vftable'
PUBLIC	??_7CImageFileMemory@@6B@			; CImageFileMemory::`vftable'
PUBLIC	??_C@_03BBABOKL@GIF?$AA@			; `string'
PUBLIC	??_C@_03DJLAKPIA@LBM?$AA@			; `string'
PUBLIC	??_C@_03BFAIMLIE@PCX?$AA@			; `string'
PUBLIC	??_C@_03CNFPPDJC@BMP?$AA@			; `string'
PUBLIC	??_C@_03MNGDDBAC@APL?$AA@			; `string'
PUBLIC	??_C@_03GGDFNBH@TGA?$AA@			; `string'
PUBLIC	??_C@_03CMMIMEAC@DDS?$AA@			; `string'
PUBLIC	??_C@_0M@CFLADCE@Feb?518?52013?$AA@		; `string'
PUBLIC	??_C@_07FJOCOJGK@Tex?4cpp?$AA@			; `string'
PUBLIC	??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0BM@LGBCNBPK@Texture?5path?5name?5overflow?$CB?$AA@ ; `string'
PUBLIC	??_C@_01KICIPPFI@?2?$AA@			; `string'
PUBLIC	??_C@_0DG@ODIPJGIB@TextureHandle?3?3Create?5?9?5EVICTING@ ; `string'
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_06PDNJPBCN@?$CFs?4dds?$AA@		; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4_com_error@@6B@				; _com_error::`RTTI Complete Object Locator'
PUBLIC	??_R3_com_error@@8				; _com_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_com_error@@8				; _com_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_com_error@@8			; _com_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CFileIO@@6B@				; CFileIO::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCFileIO@@@8				; CFileIO `RTTI Type Descriptor'
PUBLIC	??_R3CFileIO@@8					; CFileIO::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CFileIO@@8					; CFileIO::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CFileIO@@8			; CFileIO::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CFileMemory@@6B@				; CFileMemory::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCFileMemory@@@8				; CFileMemory `RTTI Type Descriptor'
PUBLIC	??_R3CFileMemory@@8				; CFileMemory::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CFileMemory@@8				; CFileMemory::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CFileMemory@@8			; CFileMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CImageFileMemory@@6B@			; CImageFileMemory::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCImageFileMemory@@@8			; CImageFileMemory `RTTI Type Descriptor'
PUBLIC	??_R3CImageFileMemory@@8			; CImageFileMemory::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CImageFileMemory@@8			; CImageFileMemory::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CImageFileMemory@@8		; CImageFileMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3c23d70a
PUBLIC	__real@3f400000
PUBLIC	__real@3f800000
PUBLIC	__real@400ccccd
PUBLIC	__real@40800000
PUBLIC	__real@41200000
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_exit:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strcpy:PROC
EXTRN	_strcat:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	_strrchr:PROC
EXTRN	_strnicmp:PROC
EXTRN	__imp__LocalFree@4:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	__imp__SysFreeString@4:PROC
EXTRN	__imp__GetErrorInfo@8:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	_sprintf:PROC
EXTRN	?_com_issue_error@@YGXJ@Z:PROC			; _com_issue_error
EXTRN	??_E_com_error@@UAEPAXI@Z:PROC			; _com_error::`vector deleting destructor'
EXTRN	_D3DXMakeSurfaceFormat@4:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	__close:PROC
EXTRN	?_open@@YAHPBDHH@Z:PROC				; _open
EXTRN	?closefile@CFileIO@@QAEXXZ:PROC			; CFileIO::closefile
EXTRN	??_ECFileIO@@UAEPAXI@Z:PROC			; CFileIO::`vector deleting destructor'
EXTRN	?glOpenFileMem@CFileMemory@@QAEHPBD@Z:PROC	; CFileMemory::glOpenFileMem
EXTRN	?glReadFileMem@CFileMemory@@QAEXXZ:PROC		; CFileMemory::glReadFileMem
EXTRN	?glCloseFileMem@CFileMemory@@QAEXXZ:PROC	; CFileMemory::glCloseFileMem
EXTRN	??_ECFileMemory@@UAEPAXI@Z:PROC			; CFileMemory::`vector deleting destructor'
EXTRN	??0CImageFileMemory@@QAE@XZ:PROC		; CImageFileMemory::CImageFileMemory
EXTRN	??_ECImageFileMemory@@UAEPAXI@Z:PROC		; CImageFileMemory::`vector deleting destructor'
EXTRN	?UnpackGIF@@YAHPAVCImageFileMemory@@@Z:PROC	; UnpackGIF
EXTRN	?UnpackLBM@@YAHPAVCImageFileMemory@@@Z:PROC	; UnpackLBM
EXTRN	?UnpackPCX@@YAHPAVCImageFileMemory@@@Z:PROC	; UnpackPCX
EXTRN	?ReadBMP@@YAHPAVCImageFileMemory@@@Z:PROC	; ReadBMP
EXTRN	?ReadAPL@@YAHPAVCImageFileMemory@@@Z:PROC	; ReadAPL
EXTRN	?ReadTGA@@YAHPAVCImageFileMemory@@@Z:PROC	; ReadTGA
EXTRN	?ReadDDS@@YAHPAVCImageFileMemory@@@Z:PROC	; ReadDDS
EXTRN	?AttachToTexture@PaletteHandle@@QAEXPAVTextureHandle@@@Z:PROC ; PaletteHandle::AttachToTexture
EXTRN	?DetachFromTexture@PaletteHandle@@QAEXPAVTextureHandle@@@Z:PROC ; PaletteHandle::DetachFromTexture
EXTRN	??0Palette@@QAE@XZ:PROC				; Palette::Palette
EXTRN	??1Palette@@QAE@XZ:PROC				; Palette::~Palette
EXTRN	?SetupForDevice@Palette@@SAXPAVDXContext@@@Z:PROC ; Palette::SetupForDevice
EXTRN	?CleanupForDevice@Palette@@SAXPAVDXContext@@@Z:PROC ; Palette::CleanupForDevice
EXTRN	?Setup32@Palette@@QAEXPAK@Z:PROC		; Palette::Setup32
EXTRN	?Reference@Palette@@QAEXXZ:PROC			; Palette::Reference
EXTRN	?Release@Palette@@QAEHXZ:PROC			; Palette::Release
EXTRN	?UpdateMPR@Palette@@QAEXPAK@Z:PROC		; Palette::UpdateMPR
EXTRN	_MonoPrint:PROC
EXTRN	?F4IsBadReadPtr@@YA_NPBXI@Z:PROC		; F4IsBadReadPtr
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?PalettePool@PaletteBankClass@@2PAVPalette@@A:DWORD ; PaletteBankClass::PalettePool
EXTRN	?nPalettes@PaletteBankClass@@2HA:DWORD		; PaletteBankClass::nPalettes
EXTRN	?DisplayOptions@@3VDisplayOptionsClass@@A:BYTE	; DisplayOptions
EXTRN	?g_bEnableNonPersistentTextures@@3_NA:BYTE	; g_bEnableNonPersistentTextures
EXTRN	?g_bShowMipUsage@@3_NA:BYTE			; g_bShowMipUsage
EXTRN	?fileout@@3HA:DWORD				; fileout
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@400ccccd
CONST	SEGMENT
__real@400ccccd DD 0400ccccdr			; 2.2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f400000
CONST	SEGMENT
__real@3f400000 DD 03f400000r			; 0.75
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CImageFileMemory@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CImageFileMemory@@8 DD FLAT:??_R0?AVCImageFileMemory@@@8 ; CImageFileMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CImageFileMemory@@8
rdata$r	ENDS
;	COMDAT ??_R2CImageFileMemory@@8
rdata$r	SEGMENT
??_R2CImageFileMemory@@8 DD FLAT:??_R1A@?0A@EA@CImageFileMemory@@8 ; CImageFileMemory::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CFileMemory@@8
rdata$r	ENDS
;	COMDAT ??_R3CImageFileMemory@@8
rdata$r	SEGMENT
??_R3CImageFileMemory@@8 DD 00H				; CImageFileMemory::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CImageFileMemory@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCImageFileMemory@@@8
_DATA	SEGMENT
??_R0?AVCImageFileMemory@@@8 DD FLAT:??_7type_info@@6B@	; CImageFileMemory `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCImageFileMemory@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CImageFileMemory@@6B@
rdata$r	SEGMENT
??_R4CImageFileMemory@@6B@ DD 00H			; CImageFileMemory::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCImageFileMemory@@@8
	DD	FLAT:??_R3CImageFileMemory@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CFileMemory@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CFileMemory@@8 DD FLAT:??_R0?AVCFileMemory@@@8 ; CFileMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CFileMemory@@8
rdata$r	ENDS
;	COMDAT ??_R2CFileMemory@@8
rdata$r	SEGMENT
??_R2CFileMemory@@8 DD FLAT:??_R1A@?0A@EA@CFileMemory@@8 ; CFileMemory::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CFileMemory@@8
rdata$r	SEGMENT
??_R3CFileMemory@@8 DD 00H				; CFileMemory::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CFileMemory@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFileMemory@@@8
_DATA	SEGMENT
??_R0?AVCFileMemory@@@8 DD FLAT:??_7type_info@@6B@	; CFileMemory `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFileMemory@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CFileMemory@@6B@
rdata$r	SEGMENT
??_R4CFileMemory@@6B@ DD 00H				; CFileMemory::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCFileMemory@@@8
	DD	FLAT:??_R3CFileMemory@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CFileIO@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CFileIO@@8 DD FLAT:??_R0?AVCFileIO@@@8	; CFileIO::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CFileIO@@8
rdata$r	ENDS
;	COMDAT ??_R2CFileIO@@8
rdata$r	SEGMENT
??_R2CFileIO@@8 DD FLAT:??_R1A@?0A@EA@CFileIO@@8	; CFileIO::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CFileIO@@8
rdata$r	SEGMENT
??_R3CFileIO@@8 DD 00H					; CFileIO::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CFileIO@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFileIO@@@8
_DATA	SEGMENT
??_R0?AVCFileIO@@@8 DD FLAT:??_7type_info@@6B@		; CFileIO `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFileIO@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CFileIO@@6B@
rdata$r	SEGMENT
??_R4CFileIO@@6B@ DD 00H				; CFileIO::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCFileIO@@@8
	DD	FLAT:??_R3CFileIO@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_com_error@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_com_error@@8 DD FLAT:??_R0?AV_com_error@@@8 ; _com_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_com_error@@8
rdata$r	ENDS
;	COMDAT ??_R2_com_error@@8
rdata$r	SEGMENT
??_R2_com_error@@8 DD FLAT:??_R1A@?0A@EA@_com_error@@8	; _com_error::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_com_error@@8
rdata$r	SEGMENT
??_R3_com_error@@8 DD 00H				; _com_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_com_error@@8
rdata$r	ENDS
;	COMDAT ??_R4_com_error@@6B@
rdata$r	SEGMENT
??_R4_com_error@@6B@ DD 00H				; _com_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_com_error@@@8
	DD	FLAT:??_R3_com_error@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06PDNJPBCN@?$CFs?4dds?$AA@
CONST	SEGMENT
??_C@_06PDNJPBCN@?$CFs?4dds?$AA@ DB '%s.dds', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
;	COMDAT ?arrMipColors@?1??SetMipLevelColor@@YAXPAUMipLoadContext@@@Z@4PAKA
_DATA	SEGMENT
?arrMipColors@?1??SetMipLevelColor@@YAXPAUMipLoadContext@@@Z@4PAKA DD 0ffffffH ; `SetMipLevelColor'::`2'::arrMipColors
	DD	0ff0000H
	DD	0ff00H
	DD	0ffH
	DD	0ffff00H
	DD	0ffffH
	DD	0ff00ffH
	DD	0808080H
	DD	0800000H
	DD	08000H
	DD	080H
	DD	0808000H
	DD	08080H
	DD	0800080H
_DATA	ENDS
;	COMDAT ??_C@_0DG@ODIPJGIB@TextureHandle?3?3Create?5?9?5EVICTING@
CONST	SEGMENT
??_C@_0DG@ODIPJGIB@TextureHandle?3?3Create?5?9?5EVICTING@ DB 'TextureHand'
	DB	'le::Create - EVICTING MANAGED TEXTURES !!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KICIPPFI@?2?$AA@
CONST	SEGMENT
??_C@_01KICIPPFI@?2?$AA@ DB '\', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@LGBCNBPK@Texture?5path?5name?5overflow?$CB?$AA@
CONST	SEGMENT
??_C@_0BM@LGBCNBPK@Texture?5path?5name?5overflow?$CB?$AA@ DB 'Texture pat'
	DB	'h name overflow!', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@ DB 'Error:  %'
	DB	'0d  %s  %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07FJOCOJGK@Tex?4cpp?$AA@
CONST	SEGMENT
??_C@_07FJOCOJGK@Tex?4cpp?$AA@ DB 'Tex.cpp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
CONST	SEGMENT
??_C@_0M@CFLADCE@Feb?518?52013?$AA@ DB 'Feb 18 2013', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03CMMIMEAC@DDS?$AA@
CONST	SEGMENT
??_C@_03CMMIMEAC@DDS?$AA@ DB 'DDS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03GGDFNBH@TGA?$AA@
CONST	SEGMENT
??_C@_03GGDFNBH@TGA?$AA@ DB 'TGA', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MNGDDBAC@APL?$AA@
CONST	SEGMENT
??_C@_03MNGDDBAC@APL?$AA@ DB 'APL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CNFPPDJC@BMP?$AA@
CONST	SEGMENT
??_C@_03CNFPPDJC@BMP?$AA@ DB 'BMP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03BFAIMLIE@PCX?$AA@
CONST	SEGMENT
??_C@_03BFAIMLIE@PCX?$AA@ DB 'PCX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03DJLAKPIA@LBM?$AA@
CONST	SEGMENT
??_C@_03DJLAKPIA@LBM?$AA@ DB 'LBM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03BBABOKL@GIF?$AA@
CONST	SEGMENT
??_C@_03BBABOKL@GIF?$AA@ DB 'GIF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7CImageFileMemory@@6B@
CONST	SEGMENT
??_7CImageFileMemory@@6B@ DD FLAT:??_R4CImageFileMemory@@6B@ ; CImageFileMemory::`vftable'
	DD	FLAT:??_ECImageFileMemory@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CFileMemory@@6B@
CONST	SEGMENT
??_7CFileMemory@@6B@ DD FLAT:??_R4CFileMemory@@6B@	; CFileMemory::`vftable'
	DD	FLAT:??_ECFileMemory@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CFileIO@@6B@
CONST	SEGMENT
??_7CFileIO@@6B@ DD FLAT:??_R4CFileIO@@6B@		; CFileIO::`vftable'
	DD	FLAT:??_ECFileIO@@UAEPAXI@Z
CONST	ENDS
;	COMDAT __CT??_R0?AV_com_error@@@8??0_com_error@@QAE@ABV0@@Z16
xdata$x	SEGMENT
__CT??_R0?AV_com_error@@@8??0_com_error@@QAE@ABV0@@Z16 DD 00H
	DD	FLAT:??_R0?AV_com_error@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	010H
	DD	FLAT:??0_com_error@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AV_com_error@@@8
_DATA	SEGMENT
??_R0?AV_com_error@@@8 DD FLAT:??_7type_info@@6B@	; _com_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_com_error@@', 00H
_DATA	ENDS
;	COMDAT __CTA1?AV_com_error@@
xdata$x	SEGMENT
__CTA1?AV_com_error@@ DD 01H
	DD	FLAT:__CT??_R0?AV_com_error@@@8??0_com_error@@QAE@ABV0@@Z16
xdata$x	ENDS
;	COMDAT __TI1?AV_com_error@@
xdata$x	SEGMENT
__TI1?AV_com_error@@ DD 00H
	DD	FLAT:??1_com_error@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA1?AV_com_error@@
xdata$x	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7_com_error@@6B@
CONST	SEGMENT
??_7_com_error@@6B@ DD FLAT:??_R4_com_error@@6B@	; _com_error::`vftable'
	DD	FLAT:??_E_com_error@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?RGB32ToSurfaceColor@@YAKKPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RGB32ToSurfaceColor@@YAKKPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@@Z$0
__unwindtable$?CreateTexture@Texture@@QAE_NPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateTexture@Texture@@QAE_NPAD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateTexture@Texture@@QAE_NPAD@Z$1
__unwindtable$?LoadImageA@Texture@@QAEHPADKH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadImageA@Texture@@QAEHPADKH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadImageA@Texture@@QAEHPADKH@Z$1
__catchsym$?Clear@TextureHandle@@QAEXXZ$3 DD 00H
	DD	FLAT:??_R0?AV_com_error@@@8
	DD	0ffffff38H
	DD	FLAT:__catch$?Clear@TextureHandle@@QAEXXZ$0
__catchsym$?Reload@TextureHandle@@QAE_NXZ$3 DD 00H
	DD	FLAT:??_R0?AV_com_error@@@8
	DD	0fffff240H
	DD	FLAT:__catch$?Reload@TextureHandle@@QAE_NXZ$0
__catchsym$?Create@TextureHandle@@QAE_NPADKGGGK@Z$5 DD 00H
	DD	FLAT:??_R0?AV_com_error@@@8
	DD	0fffffe84H
	DD	FLAT:__catch$?Create@TextureHandle@@QAE_NPADKGGGK@Z$0
__tryblocktable$?Clear@TextureHandle@@QAEXXZ DD 00H
	DD	00H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?Clear@TextureHandle@@QAEXXZ$3
__tryblocktable$?Reload@TextureHandle@@QAE_NXZ DD 00H
	DD	00H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?Reload@TextureHandle@@QAE_NXZ$3
__tryblocktable$?Create@TextureHandle@@QAE_NPADKGGGK@Z DD 00H
	DD	02H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$?Create@TextureHandle@@QAE_NPADKGGGK@Z$5
__unwindtable$?Clear@TextureHandle@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	FLAT:__unwindfunclet$?Clear@TextureHandle@@QAEXXZ$2
__unwindtable$?Reload@TextureHandle@@QAE_NXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	FLAT:__unwindfunclet$?Reload@TextureHandle@@QAE_NXZ$2
__ehfuncinfo$?RGB32ToSurfaceColor@@YAKKPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RGB32ToSurfaceColor@@YAKKPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateTexture@Texture@@QAE_NPAD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CreateTexture@Texture@@QAE_NPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?LoadImageA@Texture@@QAEHPADKH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?LoadImageA@Texture@@QAEHPADKH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Clear@TextureHandle@@QAEXXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?Clear@TextureHandle@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?Clear@TextureHandle@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Reload@TextureHandle@@QAE_NXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?Reload@TextureHandle@@QAE_NXZ
	DD	01H
	DD	FLAT:__tryblocktable$?Reload@TextureHandle@@QAE_NXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Create@TextureHandle@@QAE_NPADKGGGK@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?Create@TextureHandle@@QAE_NPADKGGGK@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Create@TextureHandle@@QAE_NPADKGGGK@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Create@TextureHandle@@QAE_NPADKGGGK@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?Create@TextureHandle@@QAE_NPADKGGGK@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?Create@TextureHandle@@QAE_NPADKGGGK@Z$3
	DD	0ffffffffH
	DD	00H
	DD	03H
	DD	FLAT:__unwindfunclet$?Create@TextureHandle@@QAE_NPADKGGGK@Z$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawPalette@@$1?IID_IDirectDrawPalette@@3U_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawPalette@@$1?IID_IDirectDrawPalette@@3U_GUID@@B@@@@AAEXXZ PROC ; _com_ptr_t<_com_IIID<IDirectDrawPalette,&IID_IDirectDrawPalette> >::_Release, COMDAT
; _this$ = ecx

; 780  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 781  :         if (m_pInterface != NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release

; 782  :             m_pInterface->Release();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN2@Release:

; 783  :         }
; 784  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawPalette@@$1?IID_IDirectDrawPalette@@3U_GUID@@B@@@@AAEXXZ ENDP ; _com_ptr_t<_com_IIID<IDirectDrawPalette,&IID_IDirectDrawPalette> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??I?$_com_ptr_t@V?$_com_IIID@UIDirectDrawPalette@@$1?IID_IDirectDrawPalette@@3U_GUID@@B@@@@QAEPAPAUIDirectDrawPalette@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$_com_ptr_t@V?$_com_IIID@UIDirectDrawPalette@@$1?IID_IDirectDrawPalette@@3U_GUID@@B@@@@QAEPAPAUIDirectDrawPalette@@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDrawPalette,&IID_IDirectDrawPalette> >::operator&, COMDAT
; _this$ = ecx

; 391  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 392  :         _Release();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawPalette@@$1?IID_IDirectDrawPalette@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirectDrawPalette,&IID_IDirectDrawPalette> >::_Release

; 393  :         m_pInterface = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 394  :         return &m_pInterface;

	mov	eax, DWORD PTR _this$[ebp]

; 395  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??I?$_com_ptr_t@V?$_com_IIID@UIDirectDrawPalette@@$1?IID_IDirectDrawPalette@@3U_GUID@@B@@@@QAEPAPAUIDirectDrawPalette@@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDrawPalette,&IID_IDirectDrawPalette> >::operator&
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawPalette@@$1?IID_IDirectDrawPalette@@3U_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawPalette@@$1?IID_IDirectDrawPalette@@3U_GUID@@B@@@@QAE@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDrawPalette,&IID_IDirectDrawPalette> >::~_com_ptr_t<_com_IIID<IDirectDrawPalette,&IID_IDirectDrawPalette> >, COMDAT
; _this$ = ecx

; 315  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 316  :         _Release(); 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawPalette@@$1?IID_IDirectDrawPalette@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirectDrawPalette,&IID_IDirectDrawPalette> >::_Release

; 317  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawPalette@@$1?IID_IDirectDrawPalette@@3U_GUID@@B@@@@QAE@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDrawPalette,&IID_IDirectDrawPalette> >::~_com_ptr_t<_com_IIID<IDirectDrawPalette,&IID_IDirectDrawPalette> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??0?$_com_ptr_t@V?$_com_IIID@UIDirectDrawPalette@@$1?IID_IDirectDrawPalette@@3U_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_com_ptr_t@V?$_com_IIID@UIDirectDrawPalette@@$1?IID_IDirectDrawPalette@@3U_GUID@@B@@@@QAE@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDrawPalette,&IID_IDirectDrawPalette> >::_com_ptr_t<_com_IIID<IDirectDrawPalette,&IID_IDirectDrawPalette> >, COMDAT
; _this$ = ecx

; 135  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 136  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_com_ptr_t@V?$_com_IIID@UIDirectDrawPalette@@$1?IID_IDirectDrawPalette@@3U_GUID@@B@@@@QAE@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDrawPalette,&IID_IDirectDrawPalette> >::_com_ptr_t<_com_IIID<IDirectDrawPalette,&IID_IDirectDrawPalette> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
_hr$2 = -176						; size = 4
$T3 = -172						; size = 4
$T4 = -168						; size = 4
_pPal$ = -164						; size = 4
_greenShift$ = -160					; size = 4
_redShift$ = -156					; size = 4
_blueShift$ = -152					; size = 4
_dwResult$ = -148					; size = 4
_mask$ = -144						; size = 4
_ddsd$ = -140						; size = 124
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_col$ = 8						; size = 4
_lpDDSurface$ = 12					; size = 4
_pddsd$ = 16						; size = 4
?RGB32ToSurfaceColor@@YAKKPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@@Z PROC ; RGB32ToSurfaceColor

; 1516 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?RGB32ToSurfaceColor@@YAKKPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 164				; 000000a4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1517 : 	// NOTE: This function is sloooooow
; 1518 : 
; 1519 : 	// Is it a palette surface?
; 1520 : 	IDirectDrawPalettePtr pPal;

	lea	ecx, DWORD PTR _pPal$[ebp]
	call	??0?$_com_ptr_t@V?$_com_IIID@UIDirectDrawPalette@@$1?IID_IDirectDrawPalette@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawPalette,&IID_IDirectDrawPalette> >::_com_ptr_t<_com_IIID<IDirectDrawPalette,&IID_IDirectDrawPalette> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1521 : 	if(SUCCEEDED(lpDDSurface->GetPalette(&pPal)))

	lea	ecx, DWORD PTR _pPal$[ebp]
	call	??I?$_com_ptr_t@V?$_com_IIID@UIDirectDrawPalette@@$1?IID_IDirectDrawPalette@@3U_GUID@@B@@@@QAEPAPAUIDirectDrawPalette@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawPalette,&IID_IDirectDrawPalette> >::operator&
	push	eax
	mov	eax, DWORD PTR _lpDDSurface$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _lpDDSurface$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax
	test	eax, eax
	jl	SHORT $LN20@RGB32ToSur

; 1522 : 		return col;

	mov	ecx, DWORD PTR _col$[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pPal$[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawPalette@@$1?IID_IDirectDrawPalette@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawPalette,&IID_IDirectDrawPalette> >::~_com_ptr_t<_com_IIID<IDirectDrawPalette,&IID_IDirectDrawPalette> >
	mov	eax, DWORD PTR $T4[ebp]
	jmp	$LN21@RGB32ToSur
$LN20@RGB32ToSur:

; 1523 : 
; 1524 : 	DDSURFACEDESC2 ddsd;
; 1525 : 
; 1526 : 	if(pddsd == NULL){

	cmp	DWORD PTR _pddsd$[ebp], 0
	jne	SHORT $LN19@RGB32ToSur

; 1527 : 		ZeroMemory(&ddsd,sizeof(ddsd));

	push	124					; 0000007cH
	push	0
	lea	edx, DWORD PTR _ddsd$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 1528 : 		ddsd.dwSize = sizeof(ddsd);

	mov	DWORD PTR _ddsd$[ebp], 124		; 0000007cH

; 1529 : 		HRESULT hr = lpDDSurface->GetSurfaceDesc(&ddsd);

	lea	eax, DWORD PTR _ddsd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lpDDSurface$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _lpDDSurface$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+88]
	call	ecx
	mov	DWORD PTR _hr$2[ebp], eax

; 1530 : 		ShiAssert(SUCCEEDED(hr));
; 1531 : 
; 1532 : 		pddsd = &ddsd;

	lea	edx, DWORD PTR _ddsd$[ebp]
	mov	DWORD PTR _pddsd$[ebp], edx
$LN19@RGB32ToSur:

; 1533 : 	}
; 1534 : 
; 1535 : 	// Compute the right shifts required to get from 24 bit RGB to this pixel format
; 1536 : 	UInt32 mask;
; 1537 : 
; 1538 : 	int redShift;
; 1539 : 	int greenShift;
; 1540 : 	int blueShift;
; 1541 : 
; 1542 : 	// RED
; 1543 : 	mask = pddsd->ddpfPixelFormat.dwRBitMask;

	mov	eax, DWORD PTR _pddsd$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR _mask$[ebp], ecx

; 1544 : 	redShift = 8;

	mov	DWORD PTR _redShift$[ebp], 8
$LN18@RGB32ToSur:

; 1545 : 	ShiAssert(mask);
; 1546 : 
; 1547 : 	while( !(mask & 1) ){

	mov	edx, DWORD PTR _mask$[ebp]
	and	edx, 1
	jne	SHORT $LN16@RGB32ToSur

; 1548 : 		mask >>= 1;

	mov	eax, DWORD PTR _mask$[ebp]
	shr	eax, 1
	mov	DWORD PTR _mask$[ebp], eax

; 1549 : 		redShift--;

	mov	ecx, DWORD PTR _redShift$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _redShift$[ebp], ecx

; 1550 : 	}

	jmp	SHORT $LN18@RGB32ToSur
$LN16@RGB32ToSur:

; 1551 : 
; 1552 : 	while( mask & 1 ){

	mov	edx, DWORD PTR _mask$[ebp]
	and	edx, 1
	je	SHORT $LN15@RGB32ToSur

; 1553 : 		mask >>= 1;

	mov	eax, DWORD PTR _mask$[ebp]
	shr	eax, 1
	mov	DWORD PTR _mask$[ebp], eax

; 1554 : 		redShift--;

	mov	ecx, DWORD PTR _redShift$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _redShift$[ebp], ecx

; 1555 : 	}

	jmp	SHORT $LN16@RGB32ToSur
$LN15@RGB32ToSur:

; 1556 : 
; 1557 : 	// GREEN
; 1558 : 	mask = pddsd->ddpfPixelFormat.dwGBitMask;

	mov	edx, DWORD PTR _pddsd$[ebp]
	mov	eax, DWORD PTR [edx+92]
	mov	DWORD PTR _mask$[ebp], eax

; 1559 : 	greenShift = 16;

	mov	DWORD PTR _greenShift$[ebp], 16		; 00000010H
$LN14@RGB32ToSur:

; 1560 : 	ShiAssert(mask);
; 1561 : 
; 1562 : 	while( !(mask & 1) ){

	mov	ecx, DWORD PTR _mask$[ebp]
	and	ecx, 1
	jne	SHORT $LN12@RGB32ToSur

; 1563 : 		mask >>= 1;

	mov	edx, DWORD PTR _mask$[ebp]
	shr	edx, 1
	mov	DWORD PTR _mask$[ebp], edx

; 1564 : 		greenShift--;

	mov	eax, DWORD PTR _greenShift$[ebp]
	sub	eax, 1
	mov	DWORD PTR _greenShift$[ebp], eax

; 1565 : 	}

	jmp	SHORT $LN14@RGB32ToSur
$LN12@RGB32ToSur:

; 1566 : 
; 1567 : 	while( mask & 1 ){

	mov	ecx, DWORD PTR _mask$[ebp]
	and	ecx, 1
	je	SHORT $LN11@RGB32ToSur

; 1568 : 		mask >>= 1;

	mov	edx, DWORD PTR _mask$[ebp]
	shr	edx, 1
	mov	DWORD PTR _mask$[ebp], edx

; 1569 : 		greenShift--;

	mov	eax, DWORD PTR _greenShift$[ebp]
	sub	eax, 1
	mov	DWORD PTR _greenShift$[ebp], eax

; 1570 : 	}

	jmp	SHORT $LN12@RGB32ToSur
$LN11@RGB32ToSur:

; 1571 : 
; 1572 : 	// BLUE
; 1573 : 	mask = pddsd->ddpfPixelFormat.dwBBitMask;

	mov	ecx, DWORD PTR _pddsd$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR _mask$[ebp], edx

; 1574 : 	ShiAssert(mask);
; 1575 : 	blueShift = 24;

	mov	DWORD PTR _blueShift$[ebp], 24		; 00000018H
$LN10@RGB32ToSur:

; 1576 : 
; 1577 : 	while( !(mask & 1) ){

	mov	eax, DWORD PTR _mask$[ebp]
	and	eax, 1
	jne	SHORT $LN8@RGB32ToSur

; 1578 : 		mask >>= 1;

	mov	ecx, DWORD PTR _mask$[ebp]
	shr	ecx, 1
	mov	DWORD PTR _mask$[ebp], ecx

; 1579 : 		blueShift--;

	mov	edx, DWORD PTR _blueShift$[ebp]
	sub	edx, 1
	mov	DWORD PTR _blueShift$[ebp], edx

; 1580 : 	}

	jmp	SHORT $LN10@RGB32ToSur
$LN8@RGB32ToSur:

; 1581 : 
; 1582 : 	while( mask & 1 ){

	mov	eax, DWORD PTR _mask$[ebp]
	and	eax, 1
	je	SHORT $LN7@RGB32ToSur

; 1583 : 		mask >>= 1;

	mov	ecx, DWORD PTR _mask$[ebp]
	shr	ecx, 1
	mov	DWORD PTR _mask$[ebp], ecx

; 1584 : 		blueShift--;

	mov	edx, DWORD PTR _blueShift$[ebp]
	sub	edx, 1
	mov	DWORD PTR _blueShift$[ebp], edx

; 1585 : 	}

	jmp	SHORT $LN8@RGB32ToSur
$LN7@RGB32ToSur:

; 1586 : 
; 1587 : 	// Convert the key color from 32 bit RGB to the current pixel format
; 1588 : 	DWORD dwResult;	
; 1589 : 
; 1590 : 	// RED
; 1591 : 	if (redShift >= 0){

	cmp	DWORD PTR _redShift$[ebp], 0
	jl	SHORT $LN6@RGB32ToSur

; 1592 : 		dwResult = (col >>  redShift) & pddsd->ddpfPixelFormat.dwRBitMask;

	mov	eax, DWORD PTR _col$[ebp]
	mov	ecx, DWORD PTR _redShift$[ebp]
	shr	eax, cl
	mov	ecx, DWORD PTR _pddsd$[ebp]
	and	eax, DWORD PTR [ecx+88]
	mov	DWORD PTR _dwResult$[ebp], eax

; 1593 : 	}
; 1594 : 	else{

	jmp	SHORT $LN5@RGB32ToSur
$LN6@RGB32ToSur:

; 1595 : 		dwResult = (col << -redShift) & pddsd->ddpfPixelFormat.dwRBitMask;

	mov	ecx, DWORD PTR _redShift$[ebp]
	neg	ecx
	mov	edx, DWORD PTR _col$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _pddsd$[ebp]
	and	edx, DWORD PTR [eax+88]
	mov	DWORD PTR _dwResult$[ebp], edx
$LN5@RGB32ToSur:

; 1596 : 	}
; 1597 : 
; 1598 : 	// GREEN
; 1599 : 	if (greenShift >= 0){

	cmp	DWORD PTR _greenShift$[ebp], 0
	jl	SHORT $LN4@RGB32ToSur

; 1600 : 		dwResult |= (col >>  greenShift) & pddsd->ddpfPixelFormat.dwGBitMask;

	mov	edx, DWORD PTR _col$[ebp]
	mov	ecx, DWORD PTR _greenShift$[ebp]
	shr	edx, cl
	mov	eax, DWORD PTR _pddsd$[ebp]
	and	edx, DWORD PTR [eax+92]
	or	edx, DWORD PTR _dwResult$[ebp]
	mov	DWORD PTR _dwResult$[ebp], edx

; 1601 : 	}
; 1602 : 	else{

	jmp	SHORT $LN3@RGB32ToSur
$LN4@RGB32ToSur:

; 1603 : 		dwResult |= (col << -greenShift) & pddsd->ddpfPixelFormat.dwGBitMask;

	mov	ecx, DWORD PTR _greenShift$[ebp]
	neg	ecx
	mov	edx, DWORD PTR _col$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _pddsd$[ebp]
	and	edx, DWORD PTR [eax+92]
	or	edx, DWORD PTR _dwResult$[ebp]
	mov	DWORD PTR _dwResult$[ebp], edx
$LN3@RGB32ToSur:

; 1604 : 	}
; 1605 : 
; 1606 : 	// BLUE
; 1607 : 	if(blueShift >= 0){

	cmp	DWORD PTR _blueShift$[ebp], 0
	jl	SHORT $LN2@RGB32ToSur

; 1608 : 		dwResult |= (col >>  blueShift) & pddsd->ddpfPixelFormat.dwBBitMask;

	mov	edx, DWORD PTR _col$[ebp]
	mov	ecx, DWORD PTR _blueShift$[ebp]
	shr	edx, cl
	mov	eax, DWORD PTR _pddsd$[ebp]
	and	edx, DWORD PTR [eax+96]
	or	edx, DWORD PTR _dwResult$[ebp]
	mov	DWORD PTR _dwResult$[ebp], edx

; 1609 : 	}
; 1610 : 	else{

	jmp	SHORT $LN1@RGB32ToSur
$LN2@RGB32ToSur:

; 1611 : 		dwResult |= (col << -blueShift) & pddsd->ddpfPixelFormat.dwBBitMask;

	mov	ecx, DWORD PTR _blueShift$[ebp]
	neg	ecx
	mov	edx, DWORD PTR _col$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _pddsd$[ebp]
	and	edx, DWORD PTR [eax+96]
	or	edx, DWORD PTR _dwResult$[ebp]
	mov	DWORD PTR _dwResult$[ebp], edx
$LN1@RGB32ToSur:

; 1612 : 	}
; 1613 : 
; 1614 : 	return dwResult;

	mov	ecx, DWORD PTR _dwResult$[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pPal$[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawPalette@@$1?IID_IDirectDrawPalette@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawPalette,&IID_IDirectDrawPalette> >::~_com_ptr_t<_com_IIID<IDirectDrawPalette,&IID_IDirectDrawPalette> >
	mov	eax, DWORD PTR $T3[ebp]
$LN21@RGB32ToSur:

; 1615 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?RGB32ToSurfaceColor@@YAKKPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@@Z$0:
	lea	ecx, DWORD PTR _pPal$[ebp]
	jmp	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawPalette@@$1?IID_IDirectDrawPalette@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawPalette,&IID_IDirectDrawPalette> >::~_com_ptr_t<_com_IIID<IDirectDrawPalette,&IID_IDirectDrawPalette> >
__ehhandler$?RGB32ToSurfaceColor@@YAKKPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-168]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?RGB32ToSurfaceColor@@YAKKPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?RGB32ToSurfaceColor@@YAKKPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@@Z ENDP ; RGB32ToSurfaceColor
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ PROC ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_Release, COMDAT
; _this$ = ecx

; 780  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 781  :         if (m_pInterface != NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release

; 782  :             m_pInterface->Release();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN2@Release:

; 783  :         }
; 784  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ ENDP ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDraw7@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDraw7@@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator->, COMDAT
; _this$ = ecx

; 401  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  :         if (m_pInterface == NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@operator

; 403  :             _com_issue_error(E_POINTER);

	push	-2147467261				; 80004003H
	call	?_com_issue_error@@YGXJ@Z		; _com_issue_error
$LN1@operator:

; 404  :         }
; 405  : 
; 406  :         return m_pInterface; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
$LN3@operator:

; 407  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDraw7@@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator->
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??I?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEPAPAUIDirectDraw7@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEPAPAUIDirectDraw7@@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator&, COMDAT
; _this$ = ecx

; 391  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 392  :         _Release();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_Release

; 393  :         m_pInterface = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 394  :         return &m_pInterface;

	mov	eax, DWORD PTR _this$[ebp]

; 395  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??I?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEPAPAUIDirectDraw7@@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator&
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??1?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >, COMDAT
; _this$ = ecx

; 315  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 316  :         _Release(); 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_Release

; 317  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??0?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >, COMDAT
; _this$ = ecx

; 135  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 136  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ PROC ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::_Release, COMDAT
; _this$ = ecx

; 780  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 781  :         if (m_pInterface != NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release

; 782  :             m_pInterface->Release();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN2@Release:

; 783  :         }
; 784  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ ENDP ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??C?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDrawSurface7@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDrawSurface7@@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator->, COMDAT
; _this$ = ecx

; 401  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  :         if (m_pInterface == NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@operator

; 403  :             _com_issue_error(E_POINTER);

	push	-2147467261				; 80004003H
	call	?_com_issue_error@@YGXJ@Z		; _com_issue_error
$LN1@operator:

; 404  :         }
; 405  : 
; 406  :         return m_pInterface; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
$LN3@operator:

; 407  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??C?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDrawSurface7@@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator->
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??I?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEPAPAUIDirectDrawSurface7@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEPAPAUIDirectDrawSurface7@@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator&, COMDAT
; _this$ = ecx

; 391  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 392  :         _Release();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::_Release

; 393  :         m_pInterface = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 394  :         return &m_pInterface;

	mov	eax, DWORD PTR _this$[ebp]

; 395  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??I?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEPAPAUIDirectDrawSurface7@@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator&
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >, COMDAT
; _this$ = ecx

; 315  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 316  :         _Release(); 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::_Release

; 317  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??0?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >, COMDAT
; _this$ = ecx

; 135  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 136  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
_result$ = -8						; size = 4
_i$ = -4						; size = 4
_val$ = 8						; size = 4
?FindMsb@@YAHK@Z PROC					; FindMsb

; 90   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 91   :     int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 92   : 	for(i = 0; i < 32; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@FindMsb
$LN3@FindMsb:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@FindMsb:
	cmp	DWORD PTR _i$[ebp], 32			; 00000020H
	jge	SHORT $LN2@FindMsb

; 93   : 		if(val & (1 << (31 - i))){

	mov	ecx, 31					; 0000001fH
	sub	ecx, DWORD PTR _i$[ebp]
	mov	edx, 1
	shl	edx, cl
	and	edx, DWORD PTR _val$[ebp]
	je	SHORT $LN1@FindMsb

; 94   : 			break;

	jmp	SHORT $LN2@FindMsb
$LN1@FindMsb:

; 95   : 		}
; 96   : 	}

	jmp	SHORT $LN3@FindMsb
$LN2@FindMsb:

; 97   : 
; 98   : 	// pmvstrm - VS2010 fix
; 99   : 	int result = 31 + i;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 31					; 0000001fH
	mov	DWORD PTR _result$[ebp], eax

; 100  : 
; 101  : 	// pmvstrm original was
; 102  : 	result = 31 +i;

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 31					; 0000001fH
	mov	DWORD PTR _result$[ebp], ecx

; 103  : 
; 104  : 	return result;

	mov	eax, DWORD PTR _result$[ebp]

; 105  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FindMsb@@YAHK@Z ENDP					; FindMsb
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
_bfx$ = -232						; size = 100
_hr$ = -132						; size = 4
_ddsd$ = -128						; size = 124
__$ArrayPad$ = -4					; size = 4
_pCtx$ = 8						; size = 4
?SetMipLevelColor@@YAXPAUMipLoadContext@@@Z PROC	; SetMipLevelColor

; 1618 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1619 : 	static DWORD arrMipColors[] = { 0xffffff, 0xff0000, 0xff00, 0xff, 0xffff00,
; 1620 : 									0xffff, 0xff00ff, 0x808080, 0x800000, 0x8000, 
; 1621 : 									0x80, 0x808000, 0x8080, 0x800080,  };
; 1622 : 
; 1623 : 	_ASSERTE(pCtx->nLevel < sizeof(arrMipColors) / sizeof(arrMipColors[0]));
; 1624 : 
; 1625 : 	DDSURFACEDESC2 ddsd;
; 1626 : 	ZeroMemory(&ddsd,sizeof(ddsd));

	push	124					; 0000007cH
	push	0
	lea	eax, DWORD PTR _ddsd$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 1627 : 	ddsd.dwSize = sizeof(ddsd);

	mov	DWORD PTR _ddsd$[ebp], 124		; 0000007cH

; 1628 : 	HRESULT hr = pCtx->lpDDSurface->GetSurfaceDesc(&ddsd);

	lea	ecx, DWORD PTR _ddsd$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pCtx$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _pCtx$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+88]
	call	ecx
	mov	DWORD PTR _hr$[ebp], eax

; 1629 : 	ShiAssert(SUCCEEDED(hr));
; 1630 : 
; 1631 : 	if(FAILED(hr)){

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@SetMipLeve

; 1632 : 		return;

	jmp	SHORT $LN2@SetMipLeve
$LN1@SetMipLeve:

; 1633 : 	}
; 1634 : 
; 1635 : 	// Fill surface with a unique color representing the mipmap level
; 1636 : 	DDBLTFX bfx;
; 1637 : 	ZeroMemory(&bfx,sizeof(bfx));

	push	100					; 00000064H
	push	0
	lea	edx, DWORD PTR _bfx$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 1638 : 	bfx.dwSize = sizeof(bfx);

	mov	DWORD PTR _bfx$[ebp], 100		; 00000064H

; 1639 : 	bfx.dwFillColor = RGB32ToSurfaceColor(arrMipColors[pCtx->nLevel],pCtx->lpDDSurface,&ddsd);

	lea	eax, DWORD PTR _ddsd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCtx$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _pCtx$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?arrMipColors@?1??SetMipLevelColor@@YAXPAUMipLoadContext@@@Z@4PAKA[ecx*4]
	push	edx
	call	?RGB32ToSurfaceColor@@YAKKPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@@Z ; RGB32ToSurfaceColor
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _bfx$[ebp+80], eax

; 1640 : 
; 1641 : 	hr = pCtx->lpDDSurface->Blt(NULL,NULL,NULL,DDBLT_COLORFILL | DDBLT_WAIT,&bfx);

	lea	eax, DWORD PTR _bfx$[ebp]
	push	eax
	push	16778240				; 01000400H
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _pCtx$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _pCtx$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+20]
	call	eax
	mov	DWORD PTR _hr$[ebp], eax
$LN2@SetMipLeve:

; 1642 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?SetMipLevelColor@@YAXPAUMipLoadContext@@@Z ENDP	; SetMipLevelColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
_ctx$1 = -16						; size = 8
_hr$ = -8						; size = 4
_pCtx$ = -4						; size = 4
_lpDDSurface$ = 8					; size = 4
_lpDDSurfaceDesc$ = 12					; size = 4
_lpContext$ = 16					; size = 4
?MipLoadCallback@@YGJPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@PAX@Z PROC ; MipLoadCallback

; 1645 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 1646 : 	MipLoadContext *pCtx = (MipLoadContext *)lpContext;

	mov	eax, DWORD PTR _lpContext$[ebp]
	mov	DWORD PTR _pCtx$[ebp], eax

; 1647 : 	HRESULT hr;
; 1648 : 
; 1649 : 	if(lpDDSurfaceDesc->ddsCaps.dwCaps & DDSCAPS_MIPMAP)

	mov	ecx, DWORD PTR _lpDDSurfaceDesc$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	and	edx, 4194304				; 00400000H
	je	SHORT $LN5@MipLoadCal

; 1650 : 	{
; 1651 : 		if(g_bShowMipUsage){

	movzx	eax, BYTE PTR ?g_bShowMipUsage@@3_NA	; g_bShowMipUsage
	test	eax, eax
	je	SHORT $LN4@MipLoadCal

; 1652 : 			SetMipLevelColor(pCtx);

	mov	ecx, DWORD PTR _pCtx$[ebp]
	push	ecx
	call	?SetMipLevelColor@@YAXPAUMipLoadContext@@@Z ; SetMipLevelColor
	add	esp, 4

; 1653 : 		}
; 1654 : 		else

	jmp	SHORT $LN3@MipLoadCal
$LN4@MipLoadCal:

; 1655 : 		{
; 1656 : 			// Perform a 2:1 stretch blit from the parent surface
; 1657 : 			hr = lpDDSurface->Blt(NULL,pCtx->lpDDSurface,NULL,DDBLT_WAIT,NULL);

	push	0
	push	16777216				; 01000000H
	push	0
	mov	edx, DWORD PTR _pCtx$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	push	0
	mov	ecx, DWORD PTR _lpDDSurface$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _lpDDSurface$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+20]
	call	ecx
	mov	DWORD PTR _hr$[ebp], eax

; 1658 : 	
; 1659 : 			if(FAILED(hr))

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN3@MipLoadCal

; 1660 : 			{
; 1661 : 				ShiAssert(false);
; 1662 : 				return DDENUMRET_CANCEL;

	xor	eax, eax
	jmp	SHORT $LN6@MipLoadCal
$LN3@MipLoadCal:

; 1663 : 			}
; 1664 : 		}
; 1665 : 
; 1666 : 		// Process next lower mipmap level recursively
; 1667 : 		MipLoadContext ctx = { pCtx->nLevel + 1, lpDDSurface };

	mov	edx, DWORD PTR _pCtx$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	DWORD PTR _ctx$1[ebp], eax
	mov	ecx, DWORD PTR _lpDDSurface$[ebp]
	mov	DWORD PTR _ctx$1[ebp+4], ecx

; 1668 : 		hr = lpDDSurface->EnumAttachedSurfaces(&ctx,MipLoadCallback);

	push	OFFSET ?MipLoadCallback@@YGJPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@PAX@Z ; MipLoadCallback
	lea	edx, DWORD PTR _ctx$1[ebp]
	push	edx
	mov	eax, DWORD PTR _lpDDSurface$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _lpDDSurface$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+36]
	call	eax
	mov	DWORD PTR _hr$[ebp], eax

; 1669 : 
; 1670 : 		if(FAILED(hr))

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN5@MipLoadCal

; 1671 : 		{
; 1672 : 			ShiAssert(false);
; 1673 : 			return DDENUMRET_CANCEL;

	xor	eax, eax
	jmp	SHORT $LN6@MipLoadCal
$LN5@MipLoadCal:

; 1674 : 		}
; 1675 : 	}
; 1676 : 
; 1677 : 	return DDENUMRET_OK;

	mov	eax, 1
$LN6@MipLoadCal:

; 1678 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?MipLoadCallback@@YGJPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@PAX@Z ENDP ; MipLoadCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\nvdxt_options.h
;	COMDAT ??0CompressionOptions@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CompressionOptions@@QAE@XZ PROC			; CompressionOptions::CompressionOptions, COMDAT
; _this$ = ecx

; 237  :     CompressionOptions()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 238  :     {
; 239  : 
; 240  :         bRescaleImageToPower2 = RESCALE_NONE; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 241  :         preScaleX = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+4], xmm0

; 242  :         preScaleY = 1;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+8], xmm0

; 243  : 
; 244  :         bMipMapsInImage = false;    // mip have been loaded in during read

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0

; 245  : 
; 246  :         MipMapType = dGenerateMipMaps;         // dNoMipMaps, dSpecifyMipMaps, dUseExistingMipMaps, dGenerateMipMaps

	mov	ecx, 30					; 0000001eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+14], cx

; 247  :         SpecifiedMipMaps = 0;   // if dSpecifyMipMaps or dUseExistingMipMaps is set (number of mipmaps to generate)

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+16], ax

; 248  : 
; 249  :         MIPFilterType = dMIPFilterBox;      // for MIP maps

	mov	edx, 133				; 00000085H
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+18], dx

; 250  :         /* 
; 251  :         for MIPFilterType, specify one of:
; 252  :         dMIPFilterBox 
; 253  :         dMIPFilterCubic 
; 254  :         dMIPFilterFullDFT 
; 255  :         dMIPFilterKaiser 
; 256  :         dMIPFilterLinearLightKaiser 
; 257  :         */
; 258  : 
; 259  : 
; 260  :         bBinaryAlpha = false;       // zero or one alpha channel

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+20], 0

; 261  : 
; 262  :         bNormalMap= false;         // Is a normal Map

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+21], 0

; 263  :         bDuDvMap= false;           // Is a DuDv (EMBM) map

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+22], 0

; 264  : 
; 265  :         bAlphaBorder= false;       // make an alpha border

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+23], 0

; 266  :         bBorder= false;            // make a color border

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+24], 0

; 267  :         BorderColor.u = 0;        // color of border

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 268  : 
; 269  : 
; 270  :         bFadeColor = false;         // fade color over MIP maps

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+32], 0

; 271  :         bFadeAlpha= false;         // fade alpha over MIP maps

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+33], 0

; 272  : 
; 273  :         FadeToColor.u = 0;        // color to fade to

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 0

; 274  :         FadeToAlpha = 0;        // alpha value to fade to (0-255)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], 0

; 275  : 
; 276  :         FadeToDelay = 0;        // start fading after 'n' MIP maps

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+44], 0

; 277  : 
; 278  :         FadeAmount = 0;         // percentage of color to fade in

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0

; 279  : 
; 280  :         BinaryAlphaThreshold = 0;  // When Binary Alpha is selected, below this value, alpha is zero

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+52], 0

; 281  : 
; 282  : 
; 283  :         bDitherColor = false;       // enable dithering during 16 bit conversion

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+56], 0

; 284  :         bDitherEachMIPLevel = false;// enable dithering during 16 bit conversion for each MIP level (after filtering)

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+57], 0

; 285  :         bGreyScale = false;         // treat image as a grey scale

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+58], 0

; 286  :         bQuickCompress = false;         // Fast compression scheme

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+59], 0

; 287  :         bForceDXT1FourColors = false;  // do not let DXT1 use 3 color representation

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+60], 0

; 288  : 
; 289  : 
; 290  :         // sharpening after creating each MIP map level
; 291  :         // warp sharp filter parameters
; 292  :         // look here for details:
; 293  :         //          
; 294  :         // "Enhancement by Image-Dependent Warping", 
; 295  :         // IEEE Transactions on Image Processing, 1999, Vol. 8, No. 8, S. 1063
; 296  :         // Nur Arad and Craig Gotsman
; 297  :         // http://www.cs.technion.ac.il/~gotsman/AmendedPubl/EnhancementByImage/EnhancementByI-D.pdf
; 298  : 
; 299  : 
; 300  :         bSharpenEachMIPLevel = false;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+61], 0

; 301  :         SharpenEdgeRadius = 2;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+64], 2

; 302  :         SharpenLambda = 10;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [eax+68], xmm0

; 303  :         SharpenMu = 0.01f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR [ecx+72], xmm0

; 304  :         SharpenTheta =  0.75;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f400000
	movss	DWORD PTR [edx+76], xmm0

; 305  :         bSharpenUseTwoComponents = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+80], 0

; 306  :         bSharpenNonMaximalSuppression = false;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+81], 0

; 307  :         bSharpenSharpBlur = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+82], 0

; 308  :         bSharpenFlavor2 = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+83], 0

; 309  : 
; 310  :         // gamma value for Kaiser, Light Linear
; 311  :         FilterGamma = 2.2F;  // MD -- 20031114: add the "F" to fix a truncation warning.

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@400ccccd
	movss	DWORD PTR [ecx+84], xmm0

; 312  :         // alpha value for kaiser filter
; 313  :         FilterKaiserAlpha = 4.0;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [edx+88], xmm0

; 314  :         // width of filter
; 315  :         FilterWidth = 10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+92], 10			; 0000000aH

; 316  : 
; 317  :         TextureType = dTextureType2D;        // regular decal, cube or volume  

	mov	ecx, 80					; 00000050H
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+96], cx

; 318  :         /*
; 319  :         for TextureType, specify one of:
; 320  :         dTextureType2D 
; 321  :         dTextureTypeCube 
; 322  :         dTextureTypeImage 
; 323  :         dTextureTypeVolume
; 324  :         */
; 325  : 
; 326  :         TextureFormat = dDXT1;	    

	mov	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+98], ax

; 327  :         /* 
; 328  :         for TextureFormat, specify any from dTextureFormatFirst to 
; 329  :         dTextureFormatLast
; 330  : 
; 331  :         dDXT1, 
; 332  :         dDXT1a, 
; 333  :         dDXT3, 
; 334  :         dDXT5, 
; 335  :         d4444, 
; 336  :         d1555, 	
; 337  :         d565,	
; 338  :         d8888, 	
; 339  :         d888, 
; 340  :         d555, 
; 341  :         dV8U8, 
; 342  :         dCxV8U8, 
; 343  : 
; 344  :         d8,   // paletted
; 345  :         dA8,            // alpha only
; 346  : 
; 347  :         */
; 348  : 
; 349  :         bSwapRGB = false;           // swap color positions R and G

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+100], 0

; 350  : 
; 351  :     };

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CompressionOptions@@QAE@XZ ENDP			; CompressionOptions::CompressionOptions
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
_this$ = -116						; size = 4
_fp$ = -112						; size = 4
_options$ = -108					; size = 104
__$ArrayPad$ = -4					; size = 4
_szFileName$ = 8					; size = 4
_pDst$ = 12						; size = 4
_dimensions$ = 16					; size = 4
_flags$ = 20						; size = 4
?SaveDDS_DXTn@Texture@@IAE_NPBDPAEHK@Z PROC		; Texture::SaveDDS_DXTn
; _this$ = ecx

; 1681 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1682 : 	FILE *fp;
; 1683 : 
; 1684 : 	fp = fopen(szFileName,"rb");

	push	OFFSET ??_C@_02JDPG@rb?$AA@
	mov	eax, DWORD PTR _szFileName$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 1685 : 
; 1686 : 	if(fp){

	cmp	DWORD PTR _fp$[ebp], 0
	je	SHORT $LN5@SaveDDS_DX

; 1687 : 		fclose(fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	_fclose
	add	esp, 4

; 1688 : 		return false;

	xor	al, al
	jmp	SHORT $LN6@SaveDDS_DX
$LN5@SaveDDS_DX:

; 1689 : 	}
; 1690 : 
; 1691 :     CompressionOptions options;

	lea	ecx, DWORD PTR _options$[ebp]
	call	??0CompressionOptions@@QAE@XZ		; CompressionOptions::CompressionOptions

; 1692 : 
; 1693 : #if _MSC_VER >= 1300
; 1694 : 
; 1695 :     fileout = _open(szFileName,O_WRONLY|O_BINARY|O_CREAT,S_IWRITE);

	push	128					; 00000080H
	push	33025					; 00008101H
	mov	edx, DWORD PTR _szFileName$[ebp]
	push	edx
	call	?_open@@YAHPBDHH@Z			; _open
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?fileout@@3HA, eax		; fileout

; 1696 : 
; 1697 : 	options.MipMapType = dNoMipMaps;

	mov	eax, 32					; 00000020H
	mov	WORD PTR _options$[ebp+14], ax

; 1698 : 	options.bBinaryAlpha = false;

	mov	BYTE PTR _options$[ebp+20], 0

; 1699 : 
; 1700 : 	if(flags&MPR_TI_ALPHA)

	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 64					; 00000040H
	je	SHORT $LN4@SaveDDS_DX

; 1701 : 		options.TextureFormat = dDXT3;

	mov	edx, 12					; 0000000cH
	mov	WORD PTR _options$[ebp+98], dx
	jmp	SHORT $LN3@SaveDDS_DX
$LN4@SaveDDS_DX:

; 1702 : 	else if(flags&MPR_TI_CHROMAKEY)

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN2@SaveDDS_DX

; 1703 : 		options.TextureFormat = dDXT1a;

	mov	ecx, 11					; 0000000bH
	mov	WORD PTR _options$[ebp+98], cx

; 1704 : 	else

	jmp	SHORT $LN3@SaveDDS_DX
$LN2@SaveDDS_DX:

; 1705 : 		options.TextureFormat = dDXT1;

	mov	edx, 10					; 0000000aH
	mov	WORD PTR _options$[ebp+98], dx
$LN3@SaveDDS_DX:

; 1706 : 
; 1707 :     //nvDXTcompress((BYTE *)pDst,dimensions,dimensions,dimensions*4,&options,4,0);
; 1708 : 
; 1709 :     _close(fileout);

	mov	eax, DWORD PTR ?fileout@@3HA		; fileout
	push	eax
	call	__close
	add	esp, 4

; 1710 : 
; 1711 : #endif
; 1712 : 
; 1713 : 	return true;

	mov	al, 1
$LN6@SaveDDS_DX:

; 1714 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SaveDDS_DXTn@Texture@@IAE_NPBDPAEHK@Z ENDP		; Texture::SaveDDS_DXTn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
_pSrc$ = -308						; size = 4
$T1 = -304						; size = 4
$T2 = -300						; size = 4
_pal$ = -296						; size = 4
_bChroma$ = -292					; size = 4
_dwSize$ = -288						; size = 4
_dwTmp$ = -284						; size = 4
_p$3 = -280						; size = 4
_i$ = -276						; size = 4
_pDst$ = -272						; size = 4
_n$ = -268						; size = 4
_this$ = -264						; size = 4
_szFileName$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_szFile$ = 8						; size = 4
_palID$ = 12						; size = 4
?DumpImageToFile@Texture@@QAE_NPADH@Z PROC		; Texture::DumpImageToFile
; _this$ = ecx

; 1717 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 308				; 00000134H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1718 : 	BYTE *pSrc,*pDst;
; 1719 : 	char szFileName[256];
; 1720 : 	BOOL /*bSave,*/bChroma = FALSE;

	mov	DWORD PTR _bChroma$[ebp], 0

; 1721 : 	DWORD *pal,dwSize,dwTmp,i,n;
; 1722 : 
; 1723 : 	ShiAssert(this->imageData);
; 1724 : 	ShiAssert(this->palette);
; 1725 : 	ShiAssert(this->palette->paletteData);
; 1726 : 
; 1727 : 	if(!this->imageData) return false;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN6@DumpImageT
	xor	al, al
	jmp	$LN7@DumpImageT
$LN6@DumpImageT:

; 1728 : 
; 1729 : 	sprintf(szFileName,"%s.dds",szFile);

	mov	ecx, DWORD PTR _szFile$[ebp]
	push	ecx
	push	OFFSET ??_C@_06PDNJPBCN@?$CFs?4dds?$AA@
	lea	edx, DWORD PTR _szFileName$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 1730 : 
; 1731 : 	pSrc = (BYTE *)this->imageData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _pSrc$[ebp], ecx

; 1732 : 	dwSize = dimensions * dimensions;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	imul	ecx, DWORD PTR [eax]
	mov	DWORD PTR _dwSize$[ebp], ecx

; 1733 : 	pDst = new BYTE[dwSize * ARGB_TEXEL_SIZE];

	mov	edx, DWORD PTR _dwSize$[ebp]
	shl	edx, 2
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR _pDst$[ebp], eax

; 1734 : 
; 1735 : 	pal = this->palette->paletteData;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _pal$[ebp], edx

; 1736 : 
; 1737 : 	for(i = 0, n = 0; i < dwSize; i++, n += ARGB_TEXEL_SIZE)

	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN5@DumpImageT
$LN4@DumpImageT:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 4
	mov	DWORD PTR _n$[ebp], ecx
$LN5@DumpImageT:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _dwSize$[ebp]
	jae	$LN3@DumpImageT

; 1738 : 	{
; 1739 : 		dwTmp = pal[pSrc[i]];

	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _pal$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _dwTmp$[ebp], eax

; 1740 : 
; 1741 : 		// Preserve RGB for pre-alpha test filtering 
; 1742 : 		if(dwTmp == chromaKey)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _dwTmp$[ebp]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN2@DumpImageT

; 1743 : 		{	
; 1744 : 			dwTmp &= 0x00ffffff;

	mov	eax, DWORD PTR _dwTmp$[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _dwTmp$[ebp], eax

; 1745 : 			bChroma = TRUE;

	mov	DWORD PTR _bChroma$[ebp], 1
$LN2@DumpImageT:

; 1746 : 		}
; 1747 : 
; 1748 : 		//ABGR to ARGB, Lowendian
; 1749 : 		BYTE *p = (BYTE *)(&dwTmp);

	lea	ecx, DWORD PTR _dwTmp$[ebp]
	mov	DWORD PTR _p$3[ebp], ecx

; 1750 : 		
; 1751 : 		pDst[n+0] = p[2];//B

	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _pDst$[ebp]
	add	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _p$3[ebp]
	mov	dl, BYTE PTR [ecx+edx]
	mov	BYTE PTR [eax], dl

; 1752 : 		pDst[n+1] = p[1];//G

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _pDst$[ebp]
	add	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _p$3[ebp]
	mov	al, BYTE PTR [edx+eax]
	mov	BYTE PTR [ecx+1], al

; 1753 : 		pDst[n+2] = p[0];//R

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _pDst$[ebp]
	add	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR _p$3[ebp]
	mov	cl, BYTE PTR [eax+ecx]
	mov	BYTE PTR [edx+2], cl

; 1754 : 		pDst[n+3] = p[3];//A

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _pDst$[ebp]
	add	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _p$3[ebp]
	mov	dl, BYTE PTR [ecx+edx]
	mov	BYTE PTR [eax+3], dl

; 1755 : 	}

	jmp	$LN4@DumpImageT
$LN3@DumpImageT:

; 1756 : 
; 1757 : 	SaveDDS_DXTn(szFileName,pDst,this->dimensions,this->flags);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _pDst$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szFileName$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SaveDDS_DXTn@Texture@@IAE_NPBDPAEHK@Z	; Texture::SaveDDS_DXTn

; 1758 : 
; 1759 : 	delete[] pDst;

	mov	eax, DWORD PTR _pDst$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 1760 : 
; 1761 : 	// Night texture
; 1762 : /*	if(palID == 3)
; 1763 : 	{
; 1764 : 		BYTE *from;
; 1765 : 		DWORD npal[256],*to,*stop;
; 1766 : 
; 1767 : 		sprintf(szFileName,"%sN.dds",szFile);
; 1768 : 
; 1769 : 		to = npal+1;
; 1770 : 		from = (BYTE *)pal+1;
; 1771 : 		stop = npal + 248;
; 1772 : 		npal[0] = pal[0];
; 1773 : 
; 1774 : 		//FIXME
; 1775 : 		while(to < stop)
; 1776 : 		{
; 1777 : 			*to  =    (FloatToInt32(*(from)   * 0.f))		// Red
; 1778 : 					| (FloatToInt32(*(from+1) * 0.f) << 8)	// Green
; 1779 : 					| (FloatToInt32(*(from+2) * 0.f) << 16)	// Blue
; 1780 : 					| ((*(from+3)) << 24);					// Alpha
; 1781 : 			from += 4;
; 1782 : 			to++;
; 1783 : 		}
; 1784 : 
; 1785 : 		*to	= 0xFF0000FF; to++;
; 1786 : 		*to	= 0xFF0F30BE; to++;
; 1787 : 		*to	= 0xFFFF0000; to++;
; 1788 : 		*to	= 0xFFAD0000; to++;
; 1789 : 		*to	= 0xFFABD34C; to++;
; 1790 : 		*to	= 0xFF9BB432; to++;
; 1791 : 		*to	= 0xFF87C5F0; to++;
; 1792 : 		*to	= 0xFF61B2EA; to++;
; 1793 : 
; 1794 : 		pDst = new BYTE[dwSize * ARGB_TEXEL_SIZE];
; 1795 : 
; 1796 : 		n = 0;
; 1797 : 
; 1798 : 		for(i = 0, n = 0; i < dwSize; i++, n += ARGB_TEXEL_SIZE)
; 1799 : 		{
; 1800 : 			dwTmp = npal[pSrc[i]];
; 1801 : 
; 1802 : 			if(dwTmp == chromaKey)
; 1803 : 			{
; 1804 : 				dwTmp = 0;
; 1805 : 			}
; 1806 : 
; 1807 : 			if(dwTmp & 0x00FFFFFF)
; 1808 : 			{
; 1809 : 				bSave = TRUE;
; 1810 : 				dwTmp &= 0x00FFFFFF;
; 1811 : 				dwTmp |= 0xFF000000;
; 1812 : 			}
; 1813 : 			else
; 1814 : 				dwTmp = 0;
; 1815 : 
; 1816 : 			//ABGR to ARGB, Lowendian
; 1817 : 			BYTE *p = (BYTE *)(&dwTmp);
; 1818 : 			
; 1819 : 			pDst[n+0] = p[2];//B
; 1820 : 			pDst[n+1] = p[1];//G
; 1821 : 			pDst[n+2] = p[0];//R
; 1822 : 			pDst[n+3] = p[3];//A
; 1823 : 		}
; 1824 : 
; 1825 : 		if(bSave)
; 1826 : 			SaveDDS_DXTn(szFileName,pDst,this->dimensions,this->flags);
; 1827 : 
; 1828 : 		delete[] pDst;
; 1829 : 	}
; 1830 : */
; 1831 : 	// Filter out fake chroma textures
; 1832 : 	if(!bChroma){

	cmp	DWORD PTR _bChroma$[ebp], 0
	jne	SHORT $LN1@DumpImageT

; 1833 : 		this->flags &= ~MPR_TI_CHROMAKEY;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, -33				; ffffffdfH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN1@DumpImageT:

; 1834 : 	}
; 1835 : 
; 1836 : 	return true;

	mov	al, 1
$LN7@DumpImageT:

; 1837 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
?DumpImageToFile@Texture@@QAE_NPADH@Z ENDP		; Texture::DumpImageToFile
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RestoreAll@Texture@@QAEXXZ PROC			; Texture::RestoreAll
; _this$ = ecx

; 450  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 451  : 	if (texHandle){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN2@RestoreAll

; 452  : 		texHandle->RestoreAll();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?RestoreAll@TextureHandle@@QAEXXZ	; TextureHandle::RestoreAll
$LN2@RestoreAll:

; 453  : 	}
; 454  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RestoreAll@Texture@@QAEXXZ ENDP			; Texture::RestoreAll
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
tv83 = -16						; size = 4
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?FreePalette@Texture@@QAEXXZ PROC			; Texture::FreePalette
; _this$ = ecx

; 420  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 421  : 	if ((palette != NULL) && (palette->Release() == 0)){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN3@FreePalett
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	call	?Release@Palette@@QAEHXZ		; Palette::Release
	test	eax, eax
	jne	SHORT $LN3@FreePalett

; 422  : 		// sfr: added palette check and corectedx the > to >=
; 423  : 		if (
; 424  : 			(palette < &ThePaletteBank.PalettePool[0]) || 
; 425  : 			(palette >= &ThePaletteBank.PalettePool[ThePaletteBank.nPalettes])
; 426  : 		){

	mov	edx, 1032				; 00000408H
	imul	edx, 0
	add	edx, DWORD PTR ?PalettePool@PaletteBankClass@@2PAVPalette@@A ; PaletteBankClass::PalettePool
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], edx
	jb	SHORT $LN1@FreePalett
	mov	ecx, DWORD PTR ?nPalettes@PaletteBankClass@@2HA ; PaletteBankClass::nPalettes
	imul	ecx, 1032				; 00000408H
	add	ecx, DWORD PTR ?PalettePool@PaletteBankClass@@2PAVPalette@@A ; PaletteBankClass::PalettePool
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+16], ecx
	jb	SHORT $LN3@FreePalett
$LN1@FreePalett:

; 427  : 			// we cannot delete palettes that come from bank
; 428  : 			delete palette;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], edx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN6@FreePalett
	push	1
	mov	ecx, DWORD PTR $T2[ebp]
	call	??_GPalette@@QAEPAXI@Z
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN3@FreePalett
$LN6@FreePalett:
	mov	DWORD PTR tv83[ebp], 0
$LN3@FreePalett:

; 429  : 		}
; 430  : 	}
; 431  : 	palette = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 432  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FreePalette@Texture@@QAEXXZ ENDP			; Texture::FreePalette
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
tv71 = -16						; size = 4
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?FreeTexture@Texture@@QAEXXZ PROC			; Texture::FreeTexture
; _this$ = ecx

; 395  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 396  : 	if( texHandle != NULL ){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN2@FreeTextur

; 397  : 		delete texHandle;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN5@FreeTextur
	push	1
	mov	ecx, DWORD PTR $T2[ebp]
	call	??_GTextureHandle@@QAEPAXI@Z
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN6@FreeTextur
$LN5@FreeTextur:
	mov	DWORD PTR tv71[ebp], 0
$LN6@FreeTextur:

; 398  : 		texHandle = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0
$LN2@FreeTextur:

; 399  : 	}
; 400  : 
; 401  : 	// We're totally gone, so get rid of our palette if we had one
; 402  : 	if (imageData == NULL){

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN3@FreeTextur

; 403  : 		FreePalette();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FreePalette@Texture@@QAEXXZ		; Texture::FreePalette
$LN3@FreeTextur:

; 404  : 	}
; 405  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FreeTexture@Texture@@QAEXXZ ENDP			; Texture::FreeTexture
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?FreeImage@Texture@@QAEXXZ PROC				; Texture::FreeImage
; _this$ = ecx

; 318  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 319  : 	if( imageData )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@FreeImage

; 320  : 	{
; 321  : #ifdef _DEBUG
; 322  : 		InterlockedExchangeAdd((long *)&m_dwTotalBytes,-(dimensions * dimensions));
; 323  : #endif
; 324  : 
; 325  : 		glReleaseMemory(imageData);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4

; 326  : 		imageData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN2@FreeImage:

; 327  : 	}
; 328  : 
; 329  : 	//FIXME - WTF is going on here?
; 330  : 	if (texHandle == NULL){

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	jne	SHORT $LN3@FreeImage

; 331  : 		FreePalette();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FreePalette@Texture@@QAEXXZ		; Texture::FreePalette
$LN3@FreeImage:

; 332  : 	}
; 333  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FreeImage@Texture@@QAEXXZ ENDP				; Texture::FreeImage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?FreeAll@Texture@@QAEXXZ PROC				; Texture::FreeAll
; _this$ = ecx

; 310  : void Texture::FreeAll() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 311  : 	FreeTexture(); 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FreeTexture@Texture@@QAEXXZ		; Texture::FreeTexture

; 312  : 	FreeImage();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FreeImage@Texture@@QAEXXZ		; Texture::FreeImage

; 313  : 	//FreePalette(); 
; 314  : };

	mov	esp, ebp
	pop	ebp
	ret	0
?FreeAll@Texture@@QAEXXZ ENDP				; Texture::FreeAll
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_strName$ = 8						; size = 4
?UpdateMPR@Texture@@QAE_NPAD@Z PROC			; Texture::UpdateMPR
; _this$ = ecx

; 436  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 437  : 	ShiAssert(rc != NULL);
; 438  : 	ShiAssert(imageData);
; 439  : 	ShiAssert(texHandle);
; 440  : 
; 441  : 	if(!texHandle || !imageData){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN1@UpdateMPR
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN2@UpdateMPR
$LN1@UpdateMPR:

; 442  : 		return false;

	xor	al, al
	jmp	SHORT $LN3@UpdateMPR
$LN2@UpdateMPR:

; 443  : 	}
; 444  : 
; 445  : 	return texHandle->Load(0,chromaKey,(BYTE *)imageData);

	push	-1
	push	0
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?Load@TextureHandle@@QAE_NGIPAE_N1H@Z	; TextureHandle::Load
$LN3@UpdateMPR:

; 446  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?UpdateMPR@Texture@@QAE_NPAD@Z ENDP			; Texture::UpdateMPR
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
$T2 = -44						; size = 4
$T3 = -40						; size = 4
tv176 = -36						; size = 4
$T4 = -32						; size = 4
tv80 = -28						; size = 4
$T5 = -24						; size = 4
_width$6 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_strName$ = 8						; size = 4
?CreateTexture@Texture@@QAE_NPAD@Z PROC			; Texture::CreateTexture
; _this$ = ecx

; 337  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateTexture@Texture@@QAE_NPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 338  : 	ShiAssert(rc != NULL);
; 339  :     // Pu239 exception handled somewhere down the code
; 340  : 	//ShiAssert(imageData);
; 341  : 	ShiAssert(texHandle == NULL);
; 342  : 
; 343  : 	// JB 010318 CTD
; 344  : 	if(/* !F4IsBadReadPtr(palette,sizeof(Palette)) &&*/ (flags & MPR_TI_PALETTE) ){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	$LN20@CreateText

; 345  : 		palette->Activate();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	call	?Activate@Palette@@QAEXXZ		; Palette::Activate

; 346  : 		ShiAssert(palette->palHandle);
; 347  : 
; 348  : 		// JB 010616
; 349  : 		if (palette->palHandle == NULL){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx+1024], 0
	jne	SHORT $LN19@CreateText

; 350  : 			return false;

	xor	al, al
	jmp	$LN21@CreateText
$LN19@CreateText:

; 351  : 		}
; 352  : 
; 353  : 		texHandle = new TextureHandle();

	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN23@CreateText
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0TextureHandle@@QAE@XZ		; TextureHandle::TextureHandle
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN24@CreateText
$LN23@CreateText:
	mov	DWORD PTR tv80[ebp], 0
$LN24@CreateText:
	mov	edx, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [eax+20], ecx

; 354  : 		ShiAssert(texHandle);
; 355  : 
; 356  : 		palette->palHandle->AttachToTexture(texHandle);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+1024]
	call	?AttachToTexture@PaletteHandle@@QAEXPAVTextureHandle@@@Z ; PaletteHandle::AttachToTexture

; 357  : 		texHandle->Create(strName,(WORD)flags,8,static_cast<UInt16>(dimensions),static_cast<UInt16>(dimensions));

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx]
	push	eax
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _strName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?Create@TextureHandle@@QAE_NPADKGGGK@Z	; TextureHandle::Create

; 358  : 
; 359  : 		// OW: Prevent a crash
; 360  : 		if (imageData != NULL){

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN18@CreateText

; 361  : 			if(!texHandle->Load(0,chromaKey,(BYTE *)imageData)){

	push	-1
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?Load@TextureHandle@@QAE_NGIPAE_N1H@Z	; TextureHandle::Load
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN18@CreateText

; 362  : 				return false;

	xor	al, al
	jmp	$LN21@CreateText
$LN18@CreateText:

; 363  : 			}
; 364  : 		}
; 365  : 		return true;

	mov	al, 1
	jmp	$LN21@CreateText

; 366  : 	}
; 367  : 	else {

	jmp	$LN21@CreateText
$LN20@CreateText:

; 368  : 		int width = 0;

	mov	DWORD PTR _width$6[ebp], 0

; 369  : 
; 370  : 		if(flags&MPR_TI_16)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 4096				; 00001000H
	je	SHORT $LN15@CreateText

; 371  : 			width = 16;

	mov	DWORD PTR _width$6[ebp], 16		; 00000010H
	jmp	$LN14@CreateText
$LN15@CreateText:

; 372  : 		else if(flags&MPR_TI_32)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 8192				; 00002000H
	je	SHORT $LN13@CreateText

; 373  : 			width = 32;

	mov	DWORD PTR _width$6[ebp], 32		; 00000020H
	jmp	$LN14@CreateText
$LN13@CreateText:

; 374  : 		else if(flags&MPR_TI_64)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 16384				; 00004000H
	je	SHORT $LN11@CreateText

; 375  : 			width = 64;

	mov	DWORD PTR _width$6[ebp], 64		; 00000040H
	jmp	SHORT $LN14@CreateText
$LN11@CreateText:

; 376  : 		else if(flags&MPR_TI_128)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN9@CreateText

; 377  : 			width = 128;

	mov	DWORD PTR _width$6[ebp], 128		; 00000080H
	jmp	SHORT $LN14@CreateText
$LN9@CreateText:

; 378  : 		else if(flags&MPR_TI_256)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 65536				; 00010000H
	je	SHORT $LN7@CreateText

; 379  : 			width = 256;

	mov	DWORD PTR _width$6[ebp], 256		; 00000100H
	jmp	SHORT $LN14@CreateText
$LN7@CreateText:

; 380  : 		else if(flags&MPR_TI_512)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 131072				; 00020000H
	je	SHORT $LN5@CreateText

; 381  : 			width = 512;

	mov	DWORD PTR _width$6[ebp], 512		; 00000200H
	jmp	SHORT $LN14@CreateText
$LN5@CreateText:

; 382  : 		else if(flags&MPR_TI_1024)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN3@CreateText

; 383  : 			width = 1024;

	mov	DWORD PTR _width$6[ebp], 1024		; 00000400H
	jmp	SHORT $LN14@CreateText
$LN3@CreateText:

; 384  : 		else if(flags&MPR_TI_2048)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 524288				; 00080000H
	je	SHORT $LN14@CreateText

; 385  : 			width = 2048;

	mov	DWORD PTR _width$6[ebp], 2048		; 00000800H
$LN14@CreateText:

; 386  : 
; 387  : 		texHandle = new TextureHandle();

	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN25@CreateText
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0TextureHandle@@QAE@XZ		; TextureHandle::TextureHandle
	mov	DWORD PTR tv176[ebp], eax
	jmp	SHORT $LN26@CreateText
$LN25@CreateText:
	mov	DWORD PTR tv176[ebp], 0
$LN26@CreateText:
	mov	ecx, DWORD PTR tv176[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+20], eax

; 388  : 		texHandle->Create(strName,(WORD)flags,32,static_cast<UInt16>(width),static_cast<UInt16>(width));

	push	0
	movzx	ecx, WORD PTR _width$6[ebp]
	push	ecx
	movzx	edx, WORD PTR _width$6[ebp]
	push	edx
	push	32					; 00000020H
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _strName$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?Create@TextureHandle@@QAE_NPADKGGGK@Z	; TextureHandle::Create

; 389  : 		return texHandle->Load(0,0,(BYTE*)imageData,false,false,dimensions);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	0
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?Load@TextureHandle@@QAE_NGIPAE_N1H@Z	; TextureHandle::Load
$LN21@CreateText:

; 390  : 	}
; 391  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateTexture@Texture@@QAE_NPAD@Z$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CreateTexture@Texture@@QAE_NPAD@Z$1:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateTexture@Texture@@QAE_NPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateTexture@Texture@@QAE_NPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateTexture@Texture@@QAE_NPAD@Z ENDP			; Texture::CreateTexture
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
_newFlags$ = 12						; size = 4
?LoadAndCreate@Texture@@QAEHPADK@Z PROC			; Texture::LoadAndCreate
; _this$ = ecx

; 408  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	if( LoadImage(filename,newFlags) )

	push	1
	mov	eax, DWORD PTR _newFlags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadImageA@Texture@@QAEHPADKH@Z	; Texture::LoadImageA
	test	eax, eax
	je	SHORT $LN1@LoadAndCre

; 410  : 	{
; 411  : 		CreateTexture(filename);

	mov	edx, DWORD PTR _filename$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateTexture@Texture@@QAE_NPAD@Z	; Texture::CreateTexture

; 412  : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN2@LoadAndCre
$LN1@LoadAndCre:

; 413  : 	}
; 414  : 	
; 415  : 	return FALSE;

	xor	eax, eax
$LN2@LoadAndCre:

; 416  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?LoadAndCreate@Texture@@QAEHPADK@Z ENDP			; Texture::LoadAndCreate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
$T2 = -864						; size = 4
$T3 = -860						; size = 4
_result$ = -856						; size = 4
tv149 = -852						; size = 4
$T4 = -848						; size = 4
tv155 = -844						; size = 4
tv168 = -840						; size = 4
_this$ = -836						; size = 4
_texFile$ = -832					; size = 432
_ddsd$5 = -400						; size = 124
_fullname$ = -276					; size = 260
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_filename$ = 8						; size = 4
_newFlags$ = 12						; size = 4
_addDefaultPath$ = 16					; size = 4
?LoadImageA@Texture@@QAEHPADKH@Z PROC			; Texture::LoadImageA
; _this$ = ecx

; 181  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LoadImageA@Texture@@QAEHPADKH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 852				; 00000354H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	char				fullname[MAX_PATH];
; 183  : 	CImageFileMemory 	texFile;

	lea	ecx, DWORD PTR _texFile$[ebp]
	call	??0CImageFileMemory@@QAE@XZ		; CImageFileMemory::CImageFileMemory
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 184  : 	int					result;
; 185  : 
; 186  : 
; 187  : 	ShiAssert(filename);
; 188  : 	ShiAssert(imageData == NULL);
; 189  : 
; 190  : 	flags |= newFlags;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, DWORD PTR _newFlags$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 191  : 
; 192  : 	if( addDefaultPath )

	cmp	DWORD PTR _addDefaultPath$[ebp], 0
	je	SHORT $LN26@LoadImageA

; 193  : 	{
; 194  : 		strcpy(fullname,TexturePath);

	push	OFFSET _TexturePath
	lea	eax, DWORD PTR _fullname$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8

; 195  : 		strcat(fullname,filename);

	mov	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	lea	edx, DWORD PTR _fullname$[ebp]
	push	edx
	call	_strcat
	add	esp, 8

; 196  : 	}
; 197  : 	else{

	jmp	SHORT $LN25@LoadImageA
$LN26@LoadImageA:

; 198  : 		strcpy(fullname,filename);

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	lea	ecx, DWORD PTR _fullname$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
$LN25@LoadImageA:

; 199  : 	}
; 200  : 
; 201  : 	texFile.imageType = CheckImageType(fullname);

	lea	edx, DWORD PTR _fullname$[ebp]
	push	edx
	call	?CheckImageType@@YAHPBD@Z		; CheckImageType
	add	esp, 4
	mov	DWORD PTR _texFile$[ebp+28], eax

; 202  : 	ShiAssert(texFile.imageType != IMAGE_TYPE_UNKNOWN);
; 203  : 
; 204  : 	if (texFile.imageType == IMAGE_TYPE_APL) {

	cmp	DWORD PTR _texFile$[ebp+28], 5
	jne	SHORT $LN24@LoadImageA

; 205  : 		flags |= MPR_TI_ALPHA;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, 64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN24@LoadImageA:

; 206  : 	}
; 207  : 
; 208  : 	result = texFile.glOpenFileMem(fullname);

	lea	eax, DWORD PTR _fullname$[ebp]
	push	eax
	lea	ecx, DWORD PTR _texFile$[ebp]
	call	?glOpenFileMem@CFileMemory@@QAEHPBD@Z	; CFileMemory::glOpenFileMem
	mov	DWORD PTR _result$[ebp], eax

; 209  : 	ShiAssert(result == 1)
; 210  : 
; 211  : 	// Note that ReadTextureImage will close texFile for us
; 212  : 	texFile.glReadFileMem();

	lea	ecx, DWORD PTR _texFile$[ebp]
	call	?glReadFileMem@CFileMemory@@QAEXXZ	; CFileMemory::glReadFileMem

; 213  : 	result = ReadTextureImage(&texFile);

	lea	ecx, DWORD PTR _texFile$[ebp]
	push	ecx
	call	?ReadTextureImage@@YAHPAVCImageFileMemory@@@Z ; ReadTextureImage
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax

; 214  : 	ShiAssert(result == GOOD_READ)
; 215  : 
; 216  : 	// We only support square textures
; 217  : 	ShiAssert(texFile.image.width == texFile.image.height)
; 218  : 	dimensions = texFile.image.width;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _texFile$[ebp+32]
	mov	DWORD PTR [edx], eax

; 219  : 	ShiAssert(dimensions <= 2048);
; 220  : 
; 221  : 	if (texFile.image.palette){

	cmp	DWORD PTR _texFile$[ebp+40], 0
	je	SHORT $LN23@LoadImageA

; 222  : 		chromaKey = texFile.image.palette[0];

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _texFile$[ebp+40]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx+12], ecx

; 223  : 	}
; 224  : 	else {

	jmp	SHORT $LN22@LoadImageA
$LN23@LoadImageA:

; 225  : 		// Default to blue chroma key color
; 226  : 		chromaKey = 0xFFFF0000;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], -65536		; ffff0000H
$LN22@LoadImageA:

; 227  : 	}
; 228  : 
; 229  : 	imageData = texFile.image.image;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _texFile$[ebp+44]
	mov	DWORD PTR [eax+4], ecx

; 230  : 
; 231  : 	if( (flags & MPR_TI_DDS) == 0 )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 256				; 00000100H
	jne	$LN21@LoadImageA

; 232  : 	{
; 233  : 		ShiAssert(texFile.image.palette);
; 234  : 		if( palette == NULL )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN20@LoadImageA

; 235  : 		{
; 236  : 			palette = new Palette();

	push	1032					; 00000408H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN29@LoadImageA
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0Palette@@QAE@XZ			; Palette::Palette
	mov	DWORD PTR tv149[ebp], eax
	jmp	SHORT $LN30@LoadImageA
$LN29@LoadImageA:
	mov	DWORD PTR tv149[ebp], 0
$LN30@LoadImageA:
	mov	edx, DWORD PTR tv149[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax+16], ecx

; 237  : 			//paletteFromBank = false;
; 238  : 			palette->Setup32((DWORD *)texFile.image.palette);

	mov	edx, DWORD PTR _texFile$[ebp+40]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	?Setup32@Palette@@QAEXPAK@Z		; Palette::Setup32

; 239  : 		}
; 240  : 
; 241  : 		else {

	jmp	SHORT $LN19@LoadImageA
$LN20@LoadImageA:

; 242  : 			palette->Reference();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	call	?Reference@Palette@@QAEXXZ		; Palette::Reference
$LN19@LoadImageA:

; 243  : 		}
; 244  : 
; 245  : 		// Release the image's palette data now that we've got our own copy
; 246  : 		glReleaseMemory(texFile.image.palette);

	mov	edx, DWORD PTR _texFile$[ebp+40]
	push	edx
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4

; 247  : 	}
; 248  : 	else

	jmp	$LN18@LoadImageA
$LN21@LoadImageA:

; 249  : 	{
; 250  : 		DDSURFACEDESC2 ddsd = texFile.image.ddsd;

	mov	ecx, 31					; 0000001fH
	lea	esi, DWORD PTR _texFile$[ebp+48]
	lea	edi, DWORD PTR _ddsd$5[ebp]
	rep movsd

; 251  : 		ShiAssert(ddsd.dwFlags & DDSD_LINEARSIZE);
; 252  : 
; 253  : 		switch( ddsd.ddpfPixelFormat.dwFourCC )

	mov	eax, DWORD PTR _ddsd$5[ebp+80]
	mov	DWORD PTR tv155[ebp], eax
	cmp	DWORD PTR tv155[ebp], 827611204		; 31545844H
	je	SHORT $LN15@LoadImageA
	cmp	DWORD PTR tv155[ebp], 861165636		; 33545844H
	je	SHORT $LN14@LoadImageA
	cmp	DWORD PTR tv155[ebp], 894720068		; 35545844H
	je	SHORT $LN13@LoadImageA
	jmp	SHORT $LN16@LoadImageA
$LN15@LoadImageA:

; 254  : 		{
; 255  : 		case MAKEFOURCC('D','X','T','1'):
; 256  : 			flags |= MPR_TI_DXT1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	or	edx, 512				; 00000200H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 257  : 			break;

	jmp	SHORT $LN16@LoadImageA
$LN14@LoadImageA:

; 258  : 		case MAKEFOURCC('D','X','T','3'):
; 259  : 			flags |= MPR_TI_DXT3;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	or	edx, 1024				; 00000400H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 260  : 			break;

	jmp	SHORT $LN16@LoadImageA
$LN13@LoadImageA:

; 261  : 		case MAKEFOURCC('D','X','T','5'):
; 262  : 			flags |= MPR_TI_DXT5;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	or	edx, 2048				; 00000800H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx
$LN16@LoadImageA:

; 263  : 			break;
; 264  : 		default:
; 265  : 			ShiAssert(false);
; 266  : 		}
; 267  : 
; 268  : 		switch( ddsd.dwWidth )

	mov	ecx, DWORD PTR _ddsd$5[ebp+12]
	mov	DWORD PTR tv168[ebp], ecx
	cmp	DWORD PTR tv168[ebp], 256		; 00000100H
	ja	SHORT $LN31@LoadImageA
	cmp	DWORD PTR tv168[ebp], 256		; 00000100H
	je	$LN5@LoadImageA
	mov	edx, DWORD PTR tv168[ebp]
	sub	edx, 16					; 00000010H
	mov	DWORD PTR tv168[ebp], edx
	cmp	DWORD PTR tv168[ebp], 112		; 00000070H
	ja	$LN10@LoadImageA
	mov	eax, DWORD PTR tv168[ebp]
	movzx	ecx, BYTE PTR $LN34@LoadImageA[eax]
	jmp	DWORD PTR $LN36@LoadImageA[ecx*4]
$LN31@LoadImageA:
	cmp	DWORD PTR tv168[ebp], 512		; 00000200H
	je	$LN4@LoadImageA
	cmp	DWORD PTR tv168[ebp], 1024		; 00000400H
	je	$LN3@LoadImageA
	cmp	DWORD PTR tv168[ebp], 2048		; 00000800H
	je	$LN2@LoadImageA
	jmp	$LN10@LoadImageA
$LN9@LoadImageA:

; 269  : 		{
; 270  : 		case 16:
; 271  : 			flags |= MPR_TI_16;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	or	eax, 4096				; 00001000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 272  : 			break;

	jmp	$LN10@LoadImageA
$LN8@LoadImageA:

; 273  : 		case 32:
; 274  : 			flags |= MPR_TI_32;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	or	eax, 8192				; 00002000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 275  : 			break;

	jmp	$LN10@LoadImageA
$LN7@LoadImageA:

; 276  : 		case 64:
; 277  : 			flags |= MPR_TI_64;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	or	eax, 16384				; 00004000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 278  : 			break;

	jmp	SHORT $LN10@LoadImageA
$LN6@LoadImageA:

; 279  : 		case 128:
; 280  : 			flags |= MPR_TI_128;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	or	eax, 32768				; 00008000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 281  : 			break;

	jmp	SHORT $LN10@LoadImageA
$LN5@LoadImageA:

; 282  : 		case 256:
; 283  : 			flags |= MPR_TI_256;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	or	eax, 65536				; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 284  : 			break;

	jmp	SHORT $LN10@LoadImageA
$LN4@LoadImageA:

; 285  : 		case 512:
; 286  : 			flags |= MPR_TI_512;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	or	eax, 131072				; 00020000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 287  : 			break;

	jmp	SHORT $LN10@LoadImageA
$LN3@LoadImageA:

; 288  : 		case 1024:
; 289  : 			flags |= MPR_TI_1024;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	or	eax, 262144				; 00040000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 290  : 			break;

	jmp	SHORT $LN10@LoadImageA
$LN2@LoadImageA:

; 291  : 		case 2048:
; 292  : 			flags |= MPR_TI_2048;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	or	eax, 524288				; 00080000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN10@LoadImageA:

; 293  : 			break;
; 294  : 		default:
; 295  : 			ShiAssert(false);
; 296  : 		}
; 297  : 
; 298  : 		palette = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0

; 299  : 		dimensions = ddsd.dwLinearSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ddsd$5[ebp+16]
	mov	DWORD PTR [eax], ecx
$LN18@LoadImageA:

; 300  : 	}
; 301  : 
; 302  : 	#ifdef _DEBUG
; 303  : 	InterlockedExchangeAdd((long *)&m_dwTotalBytes,dimensions * dimensions);
; 304  : 	#endif
; 305  : 
; 306  : 	return TRUE;

	mov	DWORD PTR $T3[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _texFile$[ebp]
	call	??1CImageFileMemory@@UAE@XZ		; CImageFileMemory::~CImageFileMemory
	mov	eax, DWORD PTR $T3[ebp]

; 307  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN36@LoadImageA:
	DD	$LN9@LoadImageA
	DD	$LN8@LoadImageA
	DD	$LN7@LoadImageA
	DD	$LN6@LoadImageA
	DD	$LN10@LoadImageA
$LN34@LoadImageA:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?LoadImageA@Texture@@QAEHPADKH@Z$0:
	lea	ecx, DWORD PTR _texFile$[ebp]
	jmp	??1CImageFileMemory@@UAE@XZ		; CImageFileMemory::~CImageFileMemory
__unwindfunclet$?LoadImageA@Texture@@QAEHPADKH@Z$1:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?LoadImageA@Texture@@QAEHPADKH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-864]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LoadImageA@Texture@@QAEHPADKH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LoadImageA@Texture@@QAEHPADKH@Z ENDP			; Texture::LoadImageA
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
tv65 = -4						; size = 4
?IsSetup@Texture@@SA_NXZ PROC				; Texture::IsSetup

; 175  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 176  : 	return rc != NULL;

	cmp	DWORD PTR _rc, 0
	je	SHORT $LN3@IsSetup
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@IsSetup
$LN3@IsSetup:
	mov	DWORD PTR tv65[ebp], 0
$LN4@IsSetup:
	mov	al, BYTE PTR tv65[ebp]

; 177  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsSetup@Texture@@SA_NXZ ENDP				; Texture::IsSetup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
_texRC$ = 8						; size = 4
?CleanupForDevice@Texture@@SAXPAVDXContext@@@Z PROC	; Texture::CleanupForDevice

; 166  : {

	push	ebp
	mov	ebp, esp

; 167  : 	Palette::CleanupForDevice(texRC);

	mov	eax, DWORD PTR _texRC$[ebp]
	push	eax
	call	?CleanupForDevice@Palette@@SAXPAVDXContext@@@Z ; Palette::CleanupForDevice
	add	esp, 4

; 168  : 	rc = NULL;

	mov	DWORD PTR _rc, 0

; 169  : 
; 170  : 	TextureHandle::StaticCleanup();

	call	?StaticCleanup@TextureHandle@@SAXXZ	; TextureHandle::StaticCleanup

; 171  : }

	pop	ebp
	ret	0
?CleanupForDevice@Texture@@SAXPAVDXContext@@@Z ENDP	; Texture::CleanupForDevice
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
_buffer$1 = -584					; size = 580
__$ArrayPad$ = -4					; size = 4
_texRC$ = 8						; size = 4
_path$ = 12						; size = 4
?SetupForDevice@Texture@@SAXPAVDXContext@@PAD@Z PROC	; Texture::SetupForDevice

; 146  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 584				; 00000248H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 147  : 	// Store the texture path for future reference
; 148  : 	if(strlen(path )+1 >= sizeof(TexturePath)){

	mov	eax, DWORD PTR _path$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	cmp	eax, 256				; 00000100H
	jb	SHORT $LN2@SetupForDe

; 149  : 		ShiError("Texture path name overflow!");

	push	OFFSET ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
	push	OFFSET ??_C@_07FJOCOJGK@Tex?4cpp?$AA@
	push	149					; 00000095H
	push	OFFSET ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
	lea	ecx, DWORD PTR _buffer$1[ebp]
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H
	push	0
	push	OFFSET ??_C@_0BM@LGBCNBPK@Texture?5path?5name?5overflow?$CB?$AA@
	lea	edx, DWORD PTR _buffer$1[ebp]
	push	edx
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	push	-1
	call	_exit
$LN2@SetupForDe:

; 150  : 	}
; 151  : 
; 152  : 	strcpy(TexturePath,path);

	mov	eax, DWORD PTR _path$[ebp]
	push	eax
	push	OFFSET _TexturePath
	call	_strcpy
	add	esp, 8

; 153  : 
; 154  : 	if(TexturePath[strlen(TexturePath)-1] != '\\'){

	push	OFFSET _TexturePath
	call	_strlen
	add	esp, 4
	movsx	ecx, BYTE PTR _TexturePath[eax-1]
	cmp	ecx, 92					; 0000005cH
	je	SHORT $LN1@SetupForDe

; 155  : 		strcat(TexturePath, "\\");

	push	OFFSET ??_C@_01KICIPPFI@?2?$AA@
	push	OFFSET _TexturePath
	call	_strcat
	add	esp, 8
$LN1@SetupForDe:

; 156  : 	}
; 157  : 
; 158  : 	rc = texRC;

	mov	edx, DWORD PTR _texRC$[ebp]
	mov	DWORD PTR _rc, edx

; 159  : 	Palette::SetupForDevice(texRC);

	mov	eax, DWORD PTR _texRC$[ebp]
	push	eax
	call	?SetupForDevice@Palette@@SAXPAVDXContext@@@Z ; Palette::SetupForDevice
	add	esp, 4

; 160  : 
; 161  : 	TextureHandle::StaticInit(texRC->m_pD3DD);

	mov	ecx, DWORD PTR _texRC$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	?StaticInit@TextureHandle@@SAXPAUIDirect3DDevice7@@@Z ; TextureHandle::StaticInit
	add	esp, 4
$LN4@SetupForDe:

; 162  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?SetupForDevice@Texture@@SAXPAVDXContext@@PAD@Z ENDP	; Texture::SetupForDevice
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Texture@@QAE@XZ PROC					; Texture::~Texture
; _this$ = ecx

; 126  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 127  : 	#ifdef _DEBUG
; 128  : 	//InterlockedIncrement((long *)&m_dwNumHandles);		// Number of instances
; 129  : 	//InterlockedExchangeAdd((long *)&m_dwTotalBytes,-sizeof(*this));
; 130  : 	#endif
; 131  : 
; 132  :     // Pu 239
; 133  :     if((texHandle != NULL) || (imageData != NULL)) 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@Texture
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN3@Texture
$LN1@Texture:

; 134  :     {
; 135  :         FreeAll();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FreeAll@Texture@@QAEXXZ		; Texture::FreeAll
$LN3@Texture:

; 136  :     } 
; 137  : 
; 138  : 	//ShiAssert( (texHandle == NULL) && (imageData == NULL) );
; 139  : };

	mov	esp, ebp
	pop	ebp
	ret	0
??1Texture@@QAE@XZ ENDP					; Texture::~Texture
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Texture@@QAE@XZ PROC					; Texture::Texture
; _this$ = ecx

; 114  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 115  : 	texHandle = NULL; imageData = NULL; palette = NULL; flags = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 116  : 	//sfr: added palette control
; 117  : 	//paletteFromBank = thFromBank = false;
; 118  : 
; 119  : 	#ifdef _DEBUG
; 120  : 	InterlockedIncrement((long *)&m_dwNumHandles);		// Number of instances
; 121  : 	InterlockedExchangeAdd((long *)&m_dwTotalBytes,sizeof(*this));
; 122  : 	#endif
; 123  : };

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Texture@@QAE@XZ ENDP					; Texture::Texture
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GPalette@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GPalette@@QAEPAXI@Z PROC				; Palette::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Palette@@QAE@XZ			; Palette::~Palette
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GPalette@@QAEPAXI@Z ENDP				; Palette::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\palette.h
;	COMDAT ?UpdateMPR@Palette@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?UpdateMPR@Palette@@QAEXXZ PROC				; Palette::UpdateMPR, COMDAT
; _this$ = ecx

; 52   : 	void UpdateMPR() { UpdateMPR( paletteData ); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateMPR@Palette@@QAEXPAK@Z		; Palette::UpdateMPR
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateMPR@Palette@@QAEXXZ ENDP				; Palette::UpdateMPR
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\palette.h
;	COMDAT ?Activate@Palette@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Activate@Palette@@QAEXXZ PROC				; Palette::Activate, COMDAT
; _this$ = ecx

; 50   : 	void Activate()	{ if (!palHandle) UpdateMPR(); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1024], 0
	jne	SHORT $LN2@Activate
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateMPR@Palette@@QAEXXZ		; Palette::UpdateMPR
$LN2@Activate:
	mov	esp, ebp
	pop	ebp
	ret	0
?Activate@Palette@@QAEXXZ ENDP				; Palette::Activate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GTextureHandle@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GTextureHandle@@QAEPAXI@Z PROC			; TextureHandle::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TextureHandle@@QAE@XZ		; TextureHandle::~TextureHandle
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTextureHandle@@QAEPAXI@Z ENDP			; TextureHandle::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
$T1 = -4						; size = 4
?StaticCleanup@TextureHandle@@SAXXZ PROC		; TextureHandle::StaticCleanup

; 1434 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1435 : 	if( m_pD3DHWDeviceDesc )

	cmp	DWORD PTR ?m_pD3DHWDeviceDesc@TextureHandle@@1PAU_D3DDeviceDesc7@@A, 0 ; TextureHandle::m_pD3DHWDeviceDesc
	je	SHORT $LN2@StaticClea

; 1436 : 	{
; 1437 : 		delete m_pD3DHWDeviceDesc;

	mov	eax, DWORD PTR ?m_pD3DHWDeviceDesc@TextureHandle@@1PAU_D3DDeviceDesc7@@A ; TextureHandle::m_pD3DHWDeviceDesc
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1438 : 		m_pD3DHWDeviceDesc = NULL;

	mov	DWORD PTR ?m_pD3DHWDeviceDesc@TextureHandle@@1PAU_D3DDeviceDesc7@@A, 0 ; TextureHandle::m_pD3DHWDeviceDesc
$LN2@StaticClea:

; 1439 : 	}
; 1440 : 
; 1441 : 	// sfr: doesnt this leak??
; 1442 : 	if(m_pD3DD){

	cmp	DWORD PTR ?m_pD3DD@TextureHandle@@1PAUIDirect3DDevice7@@A, 0 ; TextureHandle::m_pD3DD
	je	SHORT $LN3@StaticClea

; 1443 : 		m_pD3DD = NULL;

	mov	DWORD PTR ?m_pD3DD@TextureHandle@@1PAUIDirect3DDevice7@@A, 0 ; TextureHandle::m_pD3DD
$LN3@StaticClea:

; 1444 : 	}
; 1445 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?StaticCleanup@TextureHandle@@SAXXZ ENDP		; TextureHandle::StaticCleanup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
_hr$ = -260						; size = 4
$T1 = -256						; size = 4
_ptsi$ = -252						; size = 4
_i$2 = -248						; size = 4
_tsi_16$ = -244						; size = 120
_tsi_32$ = -124						; size = 120
__$ArrayPad$ = -4					; size = 4
_pD3DD$ = 8						; size = 4
?StaticInit@TextureHandle@@SAXPAUIDirect3DDevice7@@@Z PROC ; TextureHandle::StaticInit

; 1386 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1387 : 	// Warning: Not addref'd
; 1388 : 	ShiAssert(pD3DD);
; 1389 : 	m_pD3DD = pD3DD;

	mov	eax, DWORD PTR _pD3DD$[ebp]
	mov	DWORD PTR ?m_pD3DD@TextureHandle@@1PAUIDirect3DDevice7@@A, eax ; TextureHandle::m_pD3DD

; 1390 : 	if(!m_pD3DD)

	cmp	DWORD PTR ?m_pD3DD@TextureHandle@@1PAUIDirect3DDevice7@@A, 0 ; TextureHandle::m_pD3DD
	jne	SHORT $LN7@StaticInit

; 1391 : 		return;

	jmp	$LN8@StaticInit
$LN7@StaticInit:

; 1392 : 
; 1393 : 	m_pD3DHWDeviceDesc = new D3DDEVICEDESC7;

	push	236					; 000000ecH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR ?m_pD3DHWDeviceDesc@TextureHandle@@1PAU_D3DDeviceDesc7@@A, ecx ; TextureHandle::m_pD3DHWDeviceDesc

; 1394 : 	if(!m_pD3DHWDeviceDesc) return;

	cmp	DWORD PTR ?m_pD3DHWDeviceDesc@TextureHandle@@1PAU_D3DDeviceDesc7@@A, 0 ; TextureHandle::m_pD3DHWDeviceDesc
	jne	SHORT $LN6@StaticInit
	jmp	$LN8@StaticInit
$LN6@StaticInit:

; 1395 : 
; 1396 : 	HRESULT hr = m_pD3DD->GetCaps(m_pD3DHWDeviceDesc);

	mov	edx, DWORD PTR ?m_pD3DHWDeviceDesc@TextureHandle@@1PAU_D3DDeviceDesc7@@A ; TextureHandle::m_pD3DHWDeviceDesc
	push	edx
	mov	eax, DWORD PTR ?m_pD3DD@TextureHandle@@1PAUIDirect3DDevice7@@A ; TextureHandle::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@TextureHandle@@1PAUIDirect3DDevice7@@A ; TextureHandle::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	mov	DWORD PTR _hr$[ebp], eax

; 1397 : 	ShiAssert(SUCCEEDED(hr));
; 1398 : 
; 1399 : 	//Note: DDS textures get their own format.If no hardware DXTn support, use one of these.
; 1400 : 	TEXTURESEARCHINFO tsi_16[6] =  
; 1401 : 	{
; 1402 : 		//bpp,alpha,pal
; 1403 : 		{ 16, 0, FALSE, FALSE, &m_arrPF[0] },	//DEFAULT		(DXT1)

	mov	DWORD PTR _tsi_16$[ebp], 16		; 00000010H
	mov	DWORD PTR _tsi_16$[ebp+4], 0
	mov	DWORD PTR _tsi_16$[ebp+8], 0
	mov	DWORD PTR _tsi_16$[ebp+12], 0
	mov	ecx, 32					; 00000020H
	imul	ecx, 0
	add	ecx, OFFSET ?m_arrPF@TextureHandle@@1PAU_DDPIXELFORMAT@@A ; TextureHandle::m_arrPF
	mov	DWORD PTR _tsi_16$[ebp+16], ecx

; 1404 : 		{ 16, 1, FALSE, FALSE, &m_arrPF[1] },	//CHROMA		(DXT1)

	mov	DWORD PTR _tsi_16$[ebp+20], 16		; 00000010H
	mov	DWORD PTR _tsi_16$[ebp+24], 1
	mov	DWORD PTR _tsi_16$[ebp+28], 0
	mov	DWORD PTR _tsi_16$[ebp+32], 0
	mov	edx, 32					; 00000020H
	shl	edx, 0
	add	edx, OFFSET ?m_arrPF@TextureHandle@@1PAU_DDPIXELFORMAT@@A ; TextureHandle::m_arrPF
	mov	DWORD PTR _tsi_16$[ebp+36], edx

; 1405 : 		{ 16, 4, FALSE, FALSE, &m_arrPF[2] },	//ALPHA			(DXT3)

	mov	DWORD PTR _tsi_16$[ebp+40], 16		; 00000010H
	mov	DWORD PTR _tsi_16$[ebp+44], 4
	mov	DWORD PTR _tsi_16$[ebp+48], 0
	mov	DWORD PTR _tsi_16$[ebp+52], 0
	mov	eax, 32					; 00000020H
	shl	eax, 1
	add	eax, OFFSET ?m_arrPF@TextureHandle@@1PAU_DDPIXELFORMAT@@A ; TextureHandle::m_arrPF
	mov	DWORD PTR _tsi_16$[ebp+56], eax

; 1406 : 		{ 16, 4, FALSE, FALSE, &m_arrPF[3] },	//CHROMA_ALPHA	(DXT3)

	mov	DWORD PTR _tsi_16$[ebp+60], 16		; 00000010H
	mov	DWORD PTR _tsi_16$[ebp+64], 4
	mov	DWORD PTR _tsi_16$[ebp+68], 0
	mov	DWORD PTR _tsi_16$[ebp+72], 0
	mov	ecx, 32					; 00000020H
	imul	ecx, 3
	add	ecx, OFFSET ?m_arrPF@TextureHandle@@1PAU_DDPIXELFORMAT@@A ; TextureHandle::m_arrPF
	mov	DWORD PTR _tsi_16$[ebp+76], ecx

; 1407 : 	};

	xor	edx, edx
	mov	DWORD PTR _tsi_16$[ebp+80], edx
	mov	DWORD PTR _tsi_16$[ebp+84], edx
	mov	DWORD PTR _tsi_16$[ebp+88], edx
	mov	DWORD PTR _tsi_16$[ebp+92], edx
	mov	DWORD PTR _tsi_16$[ebp+96], edx
	mov	DWORD PTR _tsi_16$[ebp+100], edx
	mov	DWORD PTR _tsi_16$[ebp+104], edx
	mov	DWORD PTR _tsi_16$[ebp+108], edx
	mov	DWORD PTR _tsi_16$[ebp+112], edx
	mov	DWORD PTR _tsi_16$[ebp+116], edx

; 1408 : 
; 1409 : 	TEXTURESEARCHINFO tsi_32[6] =  
; 1410 : 	{
; 1411 : 		//bpp,alpha,pal
; 1412 : 		{ 32, 0, FALSE, FALSE, &m_arrPF[0] },	//DEFAULT		(DXT1)

	mov	DWORD PTR _tsi_32$[ebp], 32		; 00000020H
	mov	DWORD PTR _tsi_32$[ebp+4], 0
	mov	DWORD PTR _tsi_32$[ebp+8], 0
	mov	DWORD PTR _tsi_32$[ebp+12], 0
	mov	eax, 32					; 00000020H
	imul	eax, 0
	add	eax, OFFSET ?m_arrPF@TextureHandle@@1PAU_DDPIXELFORMAT@@A ; TextureHandle::m_arrPF
	mov	DWORD PTR _tsi_32$[ebp+16], eax

; 1413 : 		{ 32, 8, FALSE, FALSE, &m_arrPF[1] },	//CHROMA		(DXT1)

	mov	DWORD PTR _tsi_32$[ebp+20], 32		; 00000020H
	mov	DWORD PTR _tsi_32$[ebp+24], 8
	mov	DWORD PTR _tsi_32$[ebp+28], 0
	mov	DWORD PTR _tsi_32$[ebp+32], 0
	mov	ecx, 32					; 00000020H
	shl	ecx, 0
	add	ecx, OFFSET ?m_arrPF@TextureHandle@@1PAU_DDPIXELFORMAT@@A ; TextureHandle::m_arrPF
	mov	DWORD PTR _tsi_32$[ebp+36], ecx

; 1414 : 		{ 32, 8, FALSE, FALSE, &m_arrPF[2] },	//ALPHA			(DXT3)

	mov	DWORD PTR _tsi_32$[ebp+40], 32		; 00000020H
	mov	DWORD PTR _tsi_32$[ebp+44], 8
	mov	DWORD PTR _tsi_32$[ebp+48], 0
	mov	DWORD PTR _tsi_32$[ebp+52], 0
	mov	edx, 32					; 00000020H
	shl	edx, 1
	add	edx, OFFSET ?m_arrPF@TextureHandle@@1PAU_DDPIXELFORMAT@@A ; TextureHandle::m_arrPF
	mov	DWORD PTR _tsi_32$[ebp+56], edx

; 1415 : 		{ 32, 8, FALSE, FALSE, &m_arrPF[3] },	//CHROMA_ALPHA	(DXT3)

	mov	DWORD PTR _tsi_32$[ebp+60], 32		; 00000020H
	mov	DWORD PTR _tsi_32$[ebp+64], 8
	mov	DWORD PTR _tsi_32$[ebp+68], 0
	mov	DWORD PTR _tsi_32$[ebp+72], 0
	mov	eax, 32					; 00000020H
	imul	eax, 3
	add	eax, OFFSET ?m_arrPF@TextureHandle@@1PAU_DDPIXELFORMAT@@A ; TextureHandle::m_arrPF
	mov	DWORD PTR _tsi_32$[ebp+76], eax

; 1416 : 	};

	xor	ecx, ecx
	mov	DWORD PTR _tsi_32$[ebp+80], ecx
	mov	DWORD PTR _tsi_32$[ebp+84], ecx
	mov	DWORD PTR _tsi_32$[ebp+88], ecx
	mov	DWORD PTR _tsi_32$[ebp+92], ecx
	mov	DWORD PTR _tsi_32$[ebp+96], ecx
	mov	DWORD PTR _tsi_32$[ebp+100], ecx
	mov	DWORD PTR _tsi_32$[ebp+104], ecx
	mov	DWORD PTR _tsi_32$[ebp+108], ecx
	mov	DWORD PTR _tsi_32$[ebp+112], ecx
	mov	DWORD PTR _tsi_32$[ebp+116], ecx

; 1417 : 
; 1418 : 	TEXTURESEARCHINFO *ptsi;
; 1419 : 
; 1420 : 	if(DisplayOptions.m_texMode == DisplayOptionsClass::TEX_MODE_16){

	cmp	DWORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+24, 70159 ; 0001120fH
	jne	SHORT $LN5@StaticInit

; 1421 : 		ptsi = tsi_16;

	lea	edx, DWORD PTR _tsi_16$[ebp]
	mov	DWORD PTR _ptsi$[ebp], edx

; 1422 : 	}
; 1423 : 	else{

	jmp	SHORT $LN4@StaticInit
$LN5@StaticInit:

; 1424 : 		ptsi = tsi_32;

	lea	eax, DWORD PTR _tsi_32$[ebp]
	mov	DWORD PTR _ptsi$[ebp], eax
$LN4@StaticInit:

; 1425 : 	}
; 1426 : 
; 1427 : 	for( int i = 0; i < TEX_CAT_MAX; i++ ){

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN3@StaticInit
$LN2@StaticInit:
	mov	ecx, DWORD PTR _i$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$2[ebp], ecx
$LN3@StaticInit:
	cmp	DWORD PTR _i$2[ebp], 4
	jge	SHORT $LN8@StaticInit

; 1428 : 		m_pD3DD->EnumTextureFormats(TextureSearchCallback,&ptsi[i]);

	mov	edx, DWORD PTR _i$2[ebp]
	imul	edx, 20					; 00000014H
	add	edx, DWORD PTR _ptsi$[ebp]
	push	edx
	push	OFFSET ?TextureSearchCallback@TextureHandle@@KGJPAU_DDPIXELFORMAT@@PAX@Z ; TextureHandle::TextureSearchCallback
	mov	eax, DWORD PTR ?m_pD3DD@TextureHandle@@1PAUIDirect3DDevice7@@A ; TextureHandle::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@TextureHandle@@1PAUIDirect3DDevice7@@A ; TextureHandle::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+16]
	call	eax

; 1429 : 		ShiAssert(ptsi[i].bFoundGoodFormat)
; 1430 : 	}

	jmp	SHORT $LN2@StaticInit
$LN8@StaticInit:

; 1431 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?StaticInit@TextureHandle@@SAXPAUIDirect3DDevice7@@@Z ENDP ; TextureHandle::StaticInit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
_dwMask$ = -12						; size = 4
_ptsi$ = -8						; size = 4
_wAlphaBits$ = -4					; size = 2
_pddpf$ = 8						; size = 4
_param$ = 12						; size = 4
?TextureSearchCallback@TextureHandle@@KGJPAU_DDPIXELFORMAT@@PAX@Z PROC ; TextureHandle::TextureSearchCallback

; 1448 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1449 : 	if(NULL==pddpf || NULL==param){

	cmp	DWORD PTR _pddpf$[ebp], 0
	je	SHORT $LN13@TextureSea
	cmp	DWORD PTR _param$[ebp], 0
	jne	SHORT $LN14@TextureSea
$LN13@TextureSea:

; 1450 :         return DDENUMRET_OK;

	mov	eax, 1
	jmp	$LN15@TextureSea
$LN14@TextureSea:

; 1451 : 	}
; 1452 : 
; 1453 :     TEXTURESEARCHINFO* ptsi = (TEXTURESEARCHINFO *)param;

	mov	eax, DWORD PTR _param$[ebp]
	mov	DWORD PTR _ptsi$[ebp], eax

; 1454 : 
; 1455 :     // Skip any funky modes
; 1456 : 	if(pddpf->dwFlags & (DDPF_LUMINANCE|DDPF_BUMPLUMINANCE|DDPF_BUMPDUDV)){

	mov	ecx, DWORD PTR _pddpf$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 917504				; 000e0000H
	je	SHORT $LN12@TextureSea

; 1457 :         return DDENUMRET_OK;

	mov	eax, 1
	jmp	$LN15@TextureSea
$LN12@TextureSea:

; 1458 : 	}
; 1459 : 
; 1460 :     // Retired
; 1461 :     if( ptsi->bUsePalette )

	mov	eax, DWORD PTR _ptsi$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN11@TextureSea

; 1462 :     {
; 1463 : 		if(!(pddpf->dwFlags & DDPF_PALETTEINDEXED8)){

	mov	ecx, DWORD PTR _pddpf$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 32					; 00000020H
	jne	SHORT $LN10@TextureSea

; 1464 :             return DDENUMRET_OK;

	mov	eax, 1
	jmp	$LN15@TextureSea
$LN10@TextureSea:

; 1465 : 		}
; 1466 : 
; 1467 :         // Accept the first 8-bit palettized format we get
; 1468 :         memcpy(ptsi->pddpf,pddpf,sizeof(DDPIXELFORMAT));

	push	32					; 00000020H
	mov	eax, DWORD PTR _pddpf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptsi$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1469 :         ptsi->bFoundGoodFormat = TRUE;

	mov	eax, DWORD PTR _ptsi$[ebp]
	mov	DWORD PTR [eax+12], 1

; 1470 :         return DDENUMRET_CANCEL;

	xor	eax, eax
	jmp	$LN15@TextureSea
$LN11@TextureSea:

; 1471 :     }
; 1472 : 
; 1473 :     // Else, skip any paletized formats (all modes under 16bpp)
; 1474 : 	if(pddpf->dwRGBBitCount < 16){

	mov	ecx, DWORD PTR _pddpf$[ebp]
	cmp	DWORD PTR [ecx+12], 16			; 00000010H
	jae	SHORT $LN9@TextureSea

; 1475 :         return DDENUMRET_OK;

	mov	eax, 1
	jmp	$LN15@TextureSea
$LN9@TextureSea:

; 1476 : 	}
; 1477 : 
; 1478 :     // Skip any FourCC formats
; 1479 : 	if(pddpf->dwFourCC != 0){

	mov	edx, DWORD PTR _pddpf$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN8@TextureSea

; 1480 :         return DDENUMRET_OK;

	mov	eax, 1
	jmp	$LN15@TextureSea
$LN8@TextureSea:

; 1481 : 	}
; 1482 : 
; 1483 : 	// Calc alpha depth
; 1484 : 	DWORD dwMask = pddpf->dwRGBAlphaBitMask;

	mov	eax, DWORD PTR _pddpf$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _dwMask$[ebp], ecx

; 1485 : 	WORD wAlphaBits = 0;

	xor	edx, edx
	mov	WORD PTR _wAlphaBits$[ebp], dx
$LN7@TextureSea:

; 1486 : 	while(dwMask) {	

	cmp	DWORD PTR _dwMask$[ebp], 0
	je	SHORT $LN6@TextureSea

; 1487 : 		dwMask = dwMask & ( dwMask - 1 ); wAlphaBits++; 

	mov	eax, DWORD PTR _dwMask$[ebp]
	sub	eax, 1
	and	eax, DWORD PTR _dwMask$[ebp]
	mov	DWORD PTR _dwMask$[ebp], eax
	mov	cx, WORD PTR _wAlphaBits$[ebp]
	add	cx, 1
	mov	WORD PTR _wAlphaBits$[ebp], cx

; 1488 : 	}

	jmp	SHORT $LN7@TextureSea
$LN6@TextureSea:

; 1489 : 
; 1490 :     // Make sure current alpha format agrees with requested format type
; 1491 : 	if((ptsi->dwDesiredAlphaBPP) && !(pddpf->dwFlags&DDPF_ALPHAPIXELS) || wAlphaBits < ptsi->dwDesiredAlphaBPP){

	mov	edx, DWORD PTR _ptsi$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN3@TextureSea
	mov	eax, DWORD PTR _pddpf$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 1
	je	SHORT $LN4@TextureSea
$LN3@TextureSea:
	movzx	edx, WORD PTR _wAlphaBits$[ebp]
	mov	eax, DWORD PTR _ptsi$[ebp]
	cmp	edx, DWORD PTR [eax+4]
	jae	SHORT $LN5@TextureSea
$LN4@TextureSea:

; 1492 :         return DDENUMRET_OK;

	mov	eax, 1
	jmp	SHORT $LN15@TextureSea
$LN5@TextureSea:

; 1493 : 	}
; 1494 : 	if((!ptsi->dwDesiredAlphaBPP) && (pddpf->dwFlags&DDPF_ALPHAPIXELS)){

	mov	ecx, DWORD PTR _ptsi$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN2@TextureSea
	mov	edx, DWORD PTR _pddpf$[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, 1
	je	SHORT $LN2@TextureSea

; 1495 :         return DDENUMRET_OK;

	mov	eax, 1
	jmp	SHORT $LN15@TextureSea
$LN2@TextureSea:

; 1496 : 	}
; 1497 : 
; 1498 :     // Check if we found a good match
; 1499 :     if( pddpf->dwRGBBitCount == ptsi->dwDesiredBPP ){

	mov	ecx, DWORD PTR _pddpf$[ebp]
	mov	edx, DWORD PTR _ptsi$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN1@TextureSea

; 1500 :         memcpy(ptsi->pddpf,pddpf,sizeof(DDPIXELFORMAT));

	push	32					; 00000020H
	mov	ecx, DWORD PTR _pddpf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ptsi$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1501 :         ptsi->bFoundGoodFormat = TRUE;

	mov	ecx, DWORD PTR _ptsi$[ebp]
	mov	DWORD PTR [ecx+12], 1

; 1502 :         return DDENUMRET_CANCEL;

	xor	eax, eax
	jmp	SHORT $LN15@TextureSea
$LN1@TextureSea:

; 1503 :     }
; 1504 : 
; 1505 : 	return DDENUMRET_OK;

	mov	eax, 1
$LN15@TextureSea:

; 1506 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?TextureSearchCallback@TextureHandle@@KGJPAU_DDPIXELFORMAT@@PAX@Z ENDP ; TextureHandle::TextureSearchCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_strReason$ = 8						; size = 4
?ReportTextureLoadError@TextureHandle@@IAEXPAD@Z PROC	; TextureHandle::ReportTextureLoadError
; _this$ = ecx

; 1368 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1369 : 	#ifdef _DEBUG
; 1370 : 	MonoPrint("Texture: %s failed to load (Reason: %X)\n", m_strName.c_str(), strReason);
; 1371 : 	#endif
; 1372 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ReportTextureLoadError@TextureHandle@@IAEXPAD@Z ENDP	; TextureHandle::ReportTextureLoadError
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hr$ = 8						; size = 4
_bDuringLoad$ = 12					; size = 1
?ReportTextureLoadError@TextureHandle@@IAEXJ_N@Z PROC	; TextureHandle::ReportTextureLoadError
; _this$ = ecx

; 1361 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1362 : 	#ifdef _DEBUG
; 1363 : 	MonoPrint("Texture: Failed to %s texture %s (Code: %X)\n", bDuringLoad ? "load" : "create", m_strName.c_str(), hr);
; 1364 : 	#endif
; 1365 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?ReportTextureLoadError@TextureHandle@@IAEXJ_N@Z ENDP	; TextureHandle::ReportTextureLoadError
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
_hr$1 = -8						; size = 4
_this$ = -4						; size = 4
?RestoreAll@TextureHandle@@QAEXXZ PROC			; TextureHandle::RestoreAll
; _this$ = ecx

; 1272 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1273 : 	if( m_pDDS && m_pDDS->IsLost() == DDERR_SURFACELOST )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@RestoreAll
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	eax, -2005532222			; 887601c2H
	jne	SHORT $LN3@RestoreAll

; 1274 : 	{
; 1275 : 		HRESULT hr = m_pDDS->Restore();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+108]
	call	eax
	mov	DWORD PTR _hr$1[ebp], eax

; 1276 : 
; 1277 : 		if(SUCCEEDED(hr))

	cmp	DWORD PTR _hr$1[ebp], 0
	jl	SHORT $LN3@RestoreAll

; 1278 : 		{
; 1279 : 			#ifdef _DEBUG
; 1280 : 			MonoPrint("TextureHandle::RestoreAll - %s restored successfully\n",m_strName.c_str());
; 1281 : 			#endif
; 1282 : 
; 1283 : 			Reload();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reload@TextureHandle@@QAE_NXZ		; TextureHandle::Reload
$LN3@RestoreAll:

; 1284 : 		}
; 1285 : 
; 1286 : 		#ifdef _DEBUG
; 1287 : 		else MonoPrint("TextureHandle::RestoreAll - FAILED to restore %s \n",m_strName.c_str());
; 1288 : 		#endif
; 1289 : 	}
; 1290 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RestoreAll@TextureHandle@@QAEXXZ ENDP			; TextureHandle::RestoreAll
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?PreLoad@TextureHandle@@QAEXXZ PROC			; TextureHandle::PreLoad
; _this$ = ecx

; 1354 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1355 : 	if(m_pDDS && m_pD3DD){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@PreLoad
	cmp	DWORD PTR ?m_pD3DD@TextureHandle@@1PAUIDirect3DDevice7@@A, 0 ; TextureHandle::m_pD3DD
	je	SHORT $LN2@PreLoad

; 1356 : 		m_pD3DD->PreLoad(m_pDDS);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR ?m_pD3DD@TextureHandle@@1PAUIDirect3DDevice7@@A ; TextureHandle::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@TextureHandle@@1PAUIDirect3DDevice7@@A ; TextureHandle::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+96]
	call	eax
$LN2@PreLoad:

; 1357 : 	}
; 1358 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?PreLoad@TextureHandle@@QAEXXZ ENDP			; TextureHandle::PreLoad
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
_e$2 = -200						; size = 16
tv167 = -184						; size = 4
_dwSize$3 = -180					; size = 4
tv168 = -176						; size = 4
_ctx$4 = -172						; size = 8
tv169 = -164						; size = 4
_dwSize$5 = -160					; size = 4
_pDst$6 = -156						; size = 4
_y$7 = -152						; size = 4
_this$ = -148						; size = 4
_ddsd$ = -144						; size = 124
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
?Clear@TextureHandle@@QAEXXZ PROC			; TextureHandle::Clear
; _this$ = ecx

; 1294 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Clear@TextureHandle@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 184				; 000000b8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1295 : 	DDSURFACEDESC2 ddsd;
; 1296 : 	ZeroMemory(&ddsd,sizeof(ddsd));

	push	124					; 0000007cH
	push	0
	lea	eax, DWORD PTR _ddsd$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 1297 : 
; 1298 : 	try
; 1299 : 	{

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1300 : 		// Lock the surface
; 1301 : 		ddsd.dwSize = sizeof(ddsd);

	mov	DWORD PTR _ddsd$[ebp], 124		; 0000007cH

; 1302 : 
; 1303 : 		CheckHR(m_pDDS->Lock(NULL,&ddsd,DDLOCK_WAIT | DDLOCK_WRITEONLY | DDLOCK_SURFACEMEMORYPTR,NULL));

	push	0
	push	33					; 00000021H
	lea	ecx, DWORD PTR _ddsd$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+100]
	call	ecx
	mov	DWORD PTR tv167[ebp], eax
	mov	edx, DWORD PTR tv167[ebp]
	push	edx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 1304 : 
; 1305 : 		// Can be larger but not smaller
; 1306 : 		ShiAssert(m_nWidth <= (int) ddsd.dwWidth && m_nHeight <= (int) ddsd.dwHeight);
; 1307 : 
; 1308 : 		if( ddsd.lPitch == ddsd.dwWidth )

	mov	eax, DWORD PTR _ddsd$[ebp+16]
	cmp	eax, DWORD PTR _ddsd$[ebp+12]
	jne	SHORT $LN8@Clear

; 1309 : 		{
; 1310 : 			// If source and destination pitch match, use single loop
; 1311 : 			DWORD dwSize = ddsd.dwWidth * ddsd.dwHeight * (ddsd.ddpfPixelFormat.dwRGBBitCount >> 3);

	mov	ecx, DWORD PTR _ddsd$[ebp+84]
	shr	ecx, 3
	mov	edx, DWORD PTR _ddsd$[ebp+12]
	imul	edx, DWORD PTR _ddsd$[ebp+8]
	imul	edx, ecx
	mov	DWORD PTR _dwSize$3[ebp], edx

; 1312 : 			memset(ddsd.lpSurface,0,dwSize);

	mov	eax, DWORD PTR _dwSize$3[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _ddsd$[ebp+36]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1313 : 		}
; 1314 : 		else

	jmp	SHORT $LN7@Clear
$LN8@Clear:

; 1315 : 		{
; 1316 : 			BYTE *pDst = (BYTE *)ddsd.lpSurface;

	mov	edx, DWORD PTR _ddsd$[ebp+36]
	mov	DWORD PTR _pDst$6[ebp], edx

; 1317 : 			DWORD dwSize = ddsd.dwWidth * (ddsd.ddpfPixelFormat.dwRGBBitCount >> 3);

	mov	eax, DWORD PTR _ddsd$[ebp+84]
	shr	eax, 3
	imul	eax, DWORD PTR _ddsd$[ebp+12]
	mov	DWORD PTR _dwSize$5[ebp], eax

; 1318 : 
; 1319 : 			for( int y = 0; static_cast<unsigned int>(y) < ddsd.dwHeight; y++ )

	mov	DWORD PTR _y$7[ebp], 0
	jmp	SHORT $LN6@Clear
$LN5@Clear:
	mov	ecx, DWORD PTR _y$7[ebp]
	add	ecx, 1
	mov	DWORD PTR _y$7[ebp], ecx
$LN6@Clear:
	mov	edx, DWORD PTR _y$7[ebp]
	cmp	edx, DWORD PTR _ddsd$[ebp+8]
	jae	SHORT $LN7@Clear

; 1320 : 			{
; 1321 : 				memset(pDst,0,dwSize);

	mov	eax, DWORD PTR _dwSize$5[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pDst$6[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1322 : 				pDst += ddsd.lPitch;

	mov	edx, DWORD PTR _pDst$6[ebp]
	add	edx, DWORD PTR _ddsd$[ebp+16]
	mov	DWORD PTR _pDst$6[ebp], edx

; 1323 : 			}

	jmp	SHORT $LN5@Clear
$LN7@Clear:

; 1324 : 		}
; 1325 : 
; 1326 : 		CheckHR(m_pDDS->Unlock(NULL));

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+128]
	call	edx
	mov	DWORD PTR tv168[ebp], eax
	mov	eax, DWORD PTR tv168[ebp]
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 1327 : 
; 1328 : 		if( m_dwFlags & MPR_TI_MIPMAP )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	and	edx, 1
	je	SHORT $LN3@Clear

; 1329 : 		{
; 1330 : 			MipLoadContext ctx = { 0, m_pDDS };

	mov	DWORD PTR _ctx$4[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ctx$4[ebp+4], ecx

; 1331 : 
; 1332 : 			if(g_bShowMipUsage)

	movzx	edx, BYTE PTR ?g_bShowMipUsage@@3_NA	; g_bShowMipUsage
	test	edx, edx
	je	SHORT $LN2@Clear

; 1333 : 				SetMipLevelColor(&ctx);

	lea	eax, DWORD PTR _ctx$4[ebp]
	push	eax
	call	?SetMipLevelColor@@YAXPAUMipLoadContext@@@Z ; SetMipLevelColor
	add	esp, 4
$LN2@Clear:

; 1334 : 
; 1335 : 			CheckHR(m_pDDS->EnumAttachedSurfaces(&ctx,MipLoadCallback));

	push	OFFSET ?MipLoadCallback@@YGJPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@PAX@Z ; MipLoadCallback
	lea	ecx, DWORD PTR _ctx$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+36]
	call	ecx
	mov	DWORD PTR tv169[ebp], eax
	mov	edx, DWORD PTR tv169[ebp]
	push	edx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4
$LN3@Clear:

; 1336 : 		}
; 1337 : 	}

	jmp	SHORT $LN12@Clear
__catch$?Clear@TextureHandle@@QAEXXZ$0:

; 1338 : 
; 1339 : 	catch(_com_error e)

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 1340 : 	{
; 1341 : 		// Unlock if still locked
; 1342 : 		if(ddsd.lpSurface)

	cmp	DWORD PTR _ddsd$[ebp+36], 0
	je	SHORT $LN1@Clear

; 1343 : 			m_pDDS->Unlock(NULL);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+128]
	call	edx
$LN1@Clear:

; 1344 : 	}

	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _e$2[ebp]
	call	??1_com_error@@UAE@XZ			; _com_error::~_com_error
	mov	eax, $LN16@Clear
	ret	0
$LN12@Clear:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@Clear
$LN16@Clear:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN10@Clear:

; 1345 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Clear@TextureHandle@@QAEXXZ$2:
	lea	ecx, DWORD PTR _e$2[ebp]
	jmp	??1_com_error@@UAE@XZ			; _com_error::~_com_error
__ehhandler$?Clear@TextureHandle@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-204]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Clear@TextureHandle@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Clear@TextureHandle@@QAEXXZ ENDP			; TextureHandle::Clear
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
_dwPrio$ = 8						; size = 4
?SetPriority@TextureHandle@@QAE_NK@Z PROC		; TextureHandle::SetPriority
; _this$ = ecx

; 1348 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1349 : 	if(m_pDDS) return SUCCEEDED(m_pDDS->SetPriority(dwPrio));

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@SetPriorit
	mov	ecx, DWORD PTR _dwPrio$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+180]
	call	ecx
	test	eax, eax
	jl	SHORT $LN4@SetPriorit
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN5@SetPriorit
$LN4@SetPriorit:
	mov	DWORD PTR tv76[ebp], 0
$LN5@SetPriorit:
	mov	al, BYTE PTR tv76[ebp]
	jmp	SHORT $LN2@SetPriorit
$LN1@SetPriorit:

; 1350 : 	return false;

	xor	al, al
$LN2@SetPriorit:

; 1351 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetPriority@TextureHandle@@QAE_NK@Z ENDP		; TextureHandle::SetPriority
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
?PaletteDetach@TextureHandle@@QAEXPAVPaletteHandle@@@Z PROC ; TextureHandle::PaletteDetach
; _this$ = ecx

; 1380 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1381 : 	ShiAssert(p == m_pPalAttach);
; 1382 : 	m_pPalAttach = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0

; 1383 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?PaletteDetach@TextureHandle@@QAEXPAVPaletteHandle@@@Z ENDP ; TextureHandle::PaletteDetach
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
?PaletteAttach@TextureHandle@@QAEXPAVPaletteHandle@@@Z PROC ; TextureHandle::PaletteAttach
; _this$ = ecx

; 1375 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1376 : 	m_pPalAttach = p;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 1377 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?PaletteAttach@TextureHandle@@QAEXPAVPaletteHandle@@@Z ENDP ; TextureHandle::PaletteAttach
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
_e$2 = -3520						; size = 16
$T3 = -3504						; size = 16
_dwSize$4 = -3488					; size = 4
_dwSize$5 = -3484					; size = 4
_pal$6 = -3480						; size = 4
tv665 = -3476						; size = 4
_pDst$7 = -3472						; size = 4
_dwSize$8 = -3468					; size = 4
_pSrc$9 = -3464						; size = 4
tv660 = -3460						; size = 4
tv661 = -3456						; size = 4
_dwSize$10 = -3452					; size = 4
_dwSize$11 = -3448					; size = 4
tv659 = -3444						; size = 4
_ctx$12 = -3440						; size = 8
tv664 = -3432						; size = 4
_dwPitch$13 = -3428					; size = 4
_dwPitch$14 = -3424					; size = 4
_dwPitch$15 = -3420					; size = 4
_dwPitch$16 = -3416					; size = 4
_dwPitch$17 = -3412					; size = 4
_dwPitch$18 = -3408					; size = 4
_y$19 = -3404						; size = 4
_pal$20 = -3400						; size = 4
_dwTmp$21 = -3396					; size = 2
_pal$22 = -3392						; size = 4
_dwTmp$23 = -3388					; size = 4
_y$24 = -3384						; size = 4
_y$25 = -3380						; size = 4
_y$26 = -3376						; size = 4
_dwTmp$27 = -3372					; size = 2
_y$28 = -3368						; size = 4
_hr$29 = -3364						; size = 4
_y$30 = -3360						; size = 4
_pDst$31 = -3356					; size = 4
_pSrc$32 = -3352					; size = 4
_pSrc$33 = -3348					; size = 4
_pSrc$34 = -3344					; size = 4
tv160 = -3340						; size = 4
_pSrc$35 = -3336					; size = 4
_pal$36 = -3332						; size = 4
_pDst$37 = -3328					; size = 4
_pDst$38 = -3324					; size = 4
_pal$39 = -3320						; size = 4
_pSrc$40 = -3316					; size = 4
_pDst$41 = -3312					; size = 4
_pDst$42 = -3308					; size = 4
_i$43 = -3304						; size = 4
_i$44 = -3300						; size = 4
_pDst$45 = -3296					; size = 4
_i$46 = -3292						; size = 4
_pSrc$47 = -3288					; size = 4
_x$48 = -3284						; size = 4
_i$49 = -3280						; size = 4
_x$50 = -3276						; size = 4
_i$51 = -3272						; size = 4
_x$52 = -3268						; size = 4
_x$53 = -3264						; size = 4
_x$54 = -3260						; size = 4
_i$55 = -3256						; size = 4
_dwTmp$56 = -3252					; size = 2
tv662 = -3245						; size = 1
_dwTmp$57 = -3244					; size = 2
_i$58 = -3240						; size = 4
tv663 = -3234						; size = 1
$T59 = -3233						; size = 1
_i$60 = -3232						; size = 4
_i$61 = -3228						; size = 4
_i$62 = -3224						; size = 4
_this$ = -3220						; size = 4
_ddsd$ = -3216						; size = 124
_palette$63 = -3092					; size = 1024
_palette$64 = -2068					; size = 512
_palette$65 = -1556					; size = 512
_palette$66 = -1044					; size = 512
_palette$67 = -532					; size = 512
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
?Reload@TextureHandle@@QAE_NXZ PROC			; TextureHandle::Reload
; _this$ = ecx

; 933  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Reload@TextureHandle@@QAE_NXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 3504				; 00000db0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 934  : 	// No DX context
; 935  : 	if (!m_pDDS) return false;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN105@Reload
	xor	al, al
	jmp	$LN107@Reload
$LN105@Reload:

; 936  : 
; 937  : 	if (!(m_dwFlags & MPR_TI_DDS)){

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	and	edx, 256				; 00000100H
	jne	SHORT $LN104@Reload

; 938  : 		if ( !(m_dwFlags & MPR_TI_PALETTE) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	and	ecx, 128				; 00000080H
	jne	SHORT $LN104@Reload

; 939  : 		{
; 940  : 			ShiAssert(false);
; 941  : 			return true;

	mov	al, 1
	jmp	$LN107@Reload
$LN104@Reload:

; 942  : 		}
; 943  : 	}
; 944  : 
; 945  : 	if (!m_pImageData) return false;

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+36], 0
	jne	SHORT $LN102@Reload
	xor	al, al
	jmp	$LN107@Reload
$LN102@Reload:

; 946  : 
; 947  : 	DDSURFACEDESC2 ddsd;
; 948  : 	ZeroMemory(&ddsd,sizeof(ddsd));

	push	124					; 0000007cH
	push	0
	lea	eax, DWORD PTR _ddsd$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 949  : 
; 950  : 	try
; 951  : 	{

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 952  : 		// Lock the surface
; 953  : 		ddsd.dwSize = sizeof(ddsd);

	mov	DWORD PTR _ddsd$[ebp], 124		; 0000007cH

; 954  : 
; 955  : 		// JB 010305 CTD
; 956  : 		//if(F4IsBadReadPtr(m_pDDS,sizeof(IDirectDrawSurface7))) return false;
; 957  : 
; 958  : 		HRESULT hr = m_pDDS->Lock(NULL,&ddsd,DDLOCK_DONOTWAIT | DDLOCK_WRITEONLY | DDLOCK_SURFACEMEMORYPTR,NULL);

	push	0
	push	16416					; 00004020H
	lea	ecx, DWORD PTR _ddsd$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+100]
	call	ecx
	mov	DWORD PTR tv659[ebp], eax
	mov	edx, DWORD PTR tv659[ebp]
	mov	DWORD PTR _hr$29[ebp], edx

; 959  : 
; 960  : 		if(FAILED(hr)){

	cmp	DWORD PTR _hr$29[ebp], 0
	jge	$LN100@Reload

; 961  : 			if(hr == DDERR_SURFACELOST)	{

	cmp	DWORD PTR _hr$29[ebp], -2005532222	; 887601c2H
	jne	SHORT $LN99@Reload

; 962  : 				// If the surface is lost, restore it and retry
; 963  : 				CheckHR(m_pDDS->Restore());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	mov	DWORD PTR tv660[ebp], eax
	mov	eax, DWORD PTR tv660[ebp]
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 964  : 
; 965  : 				CheckHR(m_pDDS->Lock(NULL,&ddsd,DDLOCK_WAIT | DDLOCK_WRITEONLY | DDLOCK_SURFACEMEMORYPTR,NULL));

	push	0
	push	33					; 00000021H
	lea	ecx, DWORD PTR _ddsd$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+100]
	call	ecx
	mov	DWORD PTR tv661[ebp], eax
	mov	edx, DWORD PTR tv661[ebp]
	push	edx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 966  : 			}
; 967  : 			else {

	jmp	SHORT $LN100@Reload
$LN99@Reload:

; 968  : 				throw _com_error(hr);

	push	0
	push	0
	mov	eax, DWORD PTR _hr$29[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z	; _com_error::_com_error
	push	OFFSET __TI1?AV_com_error@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN100@Reload:

; 969  : 			}
; 970  : 		}
; 971  : 
; 972  : 		// Can be larger but not smaller
; 973  : 		ShiAssert(m_nWidth <= (int) ddsd.dwWidth && m_nHeight <= (int) ddsd.dwHeight);
; 974  : 
; 975  : // Reloading is a different story - because this is called VERY frequently we have to be very fast with whatever we are doing here
; 976  : 
; 977  : 		if( m_dwFlags&MPR_TI_DDS ){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	and	eax, 256				; 00000100H
	je	SHORT $LN97@Reload

; 978  : 			BYTE *pDst = (BYTE *)ddsd.lpSurface;

	mov	ecx, DWORD PTR _ddsd$[ebp+36]
	mov	DWORD PTR _pDst$7[ebp], ecx

; 979  : 			BYTE *pSrc = m_pImageData;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _pSrc$9[ebp], eax

; 980  : 
; 981  : 			memcpy(pDst, pSrc, m_nImageDataStride);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	mov	eax, DWORD PTR _pSrc$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDst$7[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 982  : 			/*for(int i = 0; i < m_nImageDataStride; i++){
; 983  : 				*pDst++ = *pSrc++;
; 984  : 			}*/
; 985  : 		}
; 986  : 		// sfr: weird.. added {} around switch
; 987  : 		else{

	jmp	$LN96@Reload
$LN97@Reload:

; 988  : 			switch(m_eSurfFmt)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv160[ebp], eax
	mov	ecx, DWORD PTR tv160[ebp]
	sub	ecx, 2
	mov	DWORD PTR tv160[ebp], ecx
	cmp	DWORD PTR tv160[ebp], 8
	ja	$LN96@Reload
	mov	edx, DWORD PTR tv160[ebp]
	jmp	DWORD PTR $LN114@Reload[edx*4]
$LN93@Reload:

; 989  : 		{
; 990  : 			case D3DX_SF_PALETTE8:
; 991  : 			{
; 992  : 				BYTE *pSrc = m_pImageData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _pSrc$33[ebp], ecx

; 993  : 				BYTE *pDst = (BYTE *)ddsd.lpSurface;

	mov	edx, DWORD PTR _ddsd$[ebp+36]
	mov	DWORD PTR _pDst$31[ebp], edx

; 994  : 				DWORD dwPitch = ddsd.lPitch;

	mov	eax, DWORD PTR _ddsd$[ebp+16]
	mov	DWORD PTR _dwPitch$13[ebp], eax

; 995  : 
; 996  : 				// If source and destination pitch match, use single loop
; 997  : 				if(dwPitch == m_nWidth && m_nImageDataStride == m_nWidth)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _dwPitch$13[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN92@Reload
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+44]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN92@Reload

; 998  : 					memcpy(pDst,pSrc,m_nWidth * m_nHeight);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	imul	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _pSrc$33[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDst$31[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 999  : 				else

	jmp	SHORT $LN91@Reload
$LN92@Reload:

; 1000 : 				{
; 1001 : 					for( int y = 0; y < m_nHeight; y++ )

	mov	DWORD PTR _y$25[ebp], 0
	jmp	SHORT $LN90@Reload
$LN89@Reload:
	mov	edx, DWORD PTR _y$25[ebp]
	add	edx, 1
	mov	DWORD PTR _y$25[ebp], edx
$LN90@Reload:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _y$25[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN91@Reload

; 1002 : 					{
; 1003 : 						memcpy(pDst,pSrc,m_nWidth);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _pSrc$33[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDst$31[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1004 : 
; 1005 : 						pSrc += m_nImageDataStride;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pSrc$33[ebp]
	add	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _pSrc$33[ebp], ecx

; 1006 : 						pDst += dwPitch;

	mov	edx, DWORD PTR _pDst$31[ebp]
	add	edx, DWORD PTR _dwPitch$13[ebp]
	mov	DWORD PTR _pDst$31[ebp], edx

; 1007 : 					}

	jmp	SHORT $LN89@Reload
$LN91@Reload:

; 1008 : 				}
; 1009 : 
; 1010 : 				break;

	jmp	$LN96@Reload
$LN87@Reload:

; 1011 : 			}
; 1012 : 
; 1013 : 			case D3DX_SF_A8R8G8B8:
; 1014 : 			case D3DX_SF_X8R8G8B8:
; 1015 : 			{
; 1016 : 				DWORD dwTmp;
; 1017 : 
; 1018 : 				// Convert palette to 16bit 
; 1019 : 				DWORD palette[256];
; 1020 : 				DWORD *pal = &m_pPalAttach->m_pPalData[0];

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	add	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _pal$6[ebp], eax

; 1021 : 
; 1022 : 				for( int i = 0; i < m_pPalAttach->m_nNumEntries; i++ )

	mov	DWORD PTR _i$55[ebp], 0
	jmp	SHORT $LN86@Reload
$LN85@Reload:
	mov	eax, DWORD PTR _i$55[ebp]
	add	eax, 1
	mov	DWORD PTR _i$55[ebp], eax
$LN86@Reload:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	movsx	eax, WORD PTR [edx+16]
	cmp	DWORD PTR _i$55[ebp], eax
	jge	SHORT $LN84@Reload

; 1023 : 				{
; 1024 : 					dwTmp = pal[i];

	mov	ecx, DWORD PTR _i$55[ebp]
	mov	edx, DWORD PTR _pal$6[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _dwTmp$23[ebp], eax

; 1025 : 
; 1026 : 					if(dwTmp != m_dwChromaKey)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _dwTmp$23[ebp]
	cmp	edx, DWORD PTR [ecx+28]
	je	SHORT $LN83@Reload

; 1027 : 						palette[i] = dwTmp;

	mov	eax, DWORD PTR _i$55[ebp]
	mov	ecx, DWORD PTR _dwTmp$23[ebp]
	mov	DWORD PTR _palette$63[ebp+eax*4], ecx

; 1028 : 					else

	jmp	SHORT $LN82@Reload
$LN83@Reload:

; 1029 : 						// Zero alpha but preserve RGB for pre-alpha test filtering (0 == full transparent, 0xff == full opaque)
; 1030 : 						palette[i] = dwTmp & 0xffffff;

	mov	edx, DWORD PTR _dwTmp$23[ebp]
	and	edx, 16777215				; 00ffffffH
	mov	eax, DWORD PTR _i$55[ebp]
	mov	DWORD PTR _palette$63[ebp+eax*4], edx
$LN82@Reload:

; 1031 : 				}

	jmp	SHORT $LN85@Reload
$LN84@Reload:

; 1032 : 
; 1033 : 				BYTE *pSrc = m_pImageData;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _pSrc$35[ebp], edx

; 1034 : 				DWORD *pDst = (DWORD *) ddsd.lpSurface;

	mov	eax, DWORD PTR _ddsd$[ebp+36]
	mov	DWORD PTR _pDst$38[ebp], eax

; 1035 : 				DWORD dwPitch = ddsd.lPitch >> 2;

	mov	ecx, DWORD PTR _ddsd$[ebp+16]
	sar	ecx, 2
	mov	DWORD PTR _dwPitch$14[ebp], ecx

; 1036 : 
; 1037 : 				if( dwPitch == m_nWidth && m_nImageDataStride == m_nWidth )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _dwPitch$14[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jne	$LN81@Reload
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN81@Reload

; 1038 : 				{
; 1039 : 					DWORD dwSize = m_nWidth * m_nHeight;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	imul	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _dwSize$4[ebp], eax

; 1040 : 
; 1041 : 					for(int i=0; static_cast<unsigned int>(i)<dwSize; i++){

	mov	DWORD PTR _i$49[ebp], 0
	jmp	SHORT $LN80@Reload
$LN79@Reload:
	mov	ecx, DWORD PTR _i$49[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$49[ebp], ecx
$LN80@Reload:
	mov	edx, DWORD PTR _i$49[ebp]
	cmp	edx, DWORD PTR _dwSize$4[ebp]
	jae	SHORT $LN78@Reload

; 1042 : 						pDst[i] = palette[pSrc[i]];

	mov	eax, DWORD PTR _pSrc$35[ebp]
	add	eax, DWORD PTR _i$49[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _i$49[ebp]
	mov	eax, DWORD PTR _pDst$38[ebp]
	mov	ecx, DWORD PTR _palette$63[ebp+ecx*4]
	mov	DWORD PTR [eax+edx*4], ecx

; 1043 : 					}

	jmp	SHORT $LN79@Reload
$LN78@Reload:

; 1044 : 				}
; 1045 : 				else

	jmp	$LN77@Reload
$LN81@Reload:

; 1046 : 				{
; 1047 : 					for( int y = 0; y < m_nHeight; y++ )

	mov	DWORD PTR _y$30[ebp], 0
	jmp	SHORT $LN76@Reload
$LN75@Reload:
	mov	edx, DWORD PTR _y$30[ebp]
	add	edx, 1
	mov	DWORD PTR _y$30[ebp], edx
$LN76@Reload:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _y$30[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	$LN77@Reload

; 1048 : 					{
; 1049 : 						for(int x=0; x<m_nWidth; x++)

	mov	DWORD PTR _x$53[ebp], 0
	jmp	SHORT $LN73@Reload
$LN72@Reload:
	mov	edx, DWORD PTR _x$53[ebp]
	add	edx, 1
	mov	DWORD PTR _x$53[ebp], edx
$LN73@Reload:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$53[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN71@Reload

; 1050 : 							pDst[x] = palette[pSrc[x]];

	mov	edx, DWORD PTR _pSrc$35[ebp]
	add	edx, DWORD PTR _x$53[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _x$53[ebp]
	mov	edx, DWORD PTR _pDst$38[ebp]
	mov	eax, DWORD PTR _palette$63[ebp+eax*4]
	mov	DWORD PTR [edx+ecx*4], eax
	jmp	SHORT $LN72@Reload
$LN71@Reload:

; 1051 : 
; 1052 : 						pSrc += m_nImageDataStride;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pSrc$35[ebp]
	add	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR _pSrc$35[ebp], edx

; 1053 : 						pDst += dwPitch;

	mov	eax, DWORD PTR _dwPitch$14[ebp]
	mov	ecx, DWORD PTR _pDst$38[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pDst$38[ebp], edx

; 1054 : 					}

	jmp	$LN75@Reload
$LN77@Reload:

; 1055 : 				}
; 1056 : 	
; 1057 : 				break;

	jmp	$LN96@Reload
$LN70@Reload:

; 1058 : 			}
; 1059 : 
; 1060 : 			case D3DX_SF_A1R5G5B5:
; 1061 : 			{
; 1062 : 				WORD dwTmp;
; 1063 : 
; 1064 : 				// Convert palette to 16bit 
; 1065 : 				WORD palette[256];
; 1066 : 				PALETTEENTRY *pal = (PALETTEENTRY *)&m_pPalAttach->m_pPalData[0];

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	add	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _pal$36[ebp], eax

; 1067 : 
; 1068 : 				for( int i = 0; i < m_pPalAttach->m_nNumEntries; i++ )

	mov	DWORD PTR _i$61[ebp], 0
	jmp	SHORT $LN69@Reload
$LN68@Reload:
	mov	eax, DWORD PTR _i$61[ebp]
	add	eax, 1
	mov	DWORD PTR _i$61[ebp], eax
$LN69@Reload:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	movsx	eax, WORD PTR [edx+16]
	cmp	DWORD PTR _i$61[ebp], eax
	jge	$LN67@Reload

; 1069 : 				{
; 1070 : 					dwTmp = (pal[i].peRed >> 3) | ((pal[i].peGreen >> 3) << 5) | ((pal[i].peBlue >> 3) << 10) | ((pal[i].peFlags >> 7) << 15);

	mov	ecx, DWORD PTR _i$61[ebp]
	mov	edx, DWORD PTR _pal$36[ebp]
	movzx	eax, BYTE PTR [edx+ecx*4+3]
	sar	eax, 7
	shl	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _i$61[ebp]
	mov	edx, DWORD PTR _pal$36[ebp]
	movzx	ecx, BYTE PTR [edx+ecx*4+2]
	sar	ecx, 3
	shl	ecx, 10					; 0000000aH
	mov	edx, DWORD PTR _i$61[ebp]
	mov	esi, DWORD PTR _pal$36[ebp]
	movzx	edx, BYTE PTR [esi+edx*4+1]
	sar	edx, 3
	shl	edx, 5
	mov	esi, DWORD PTR _i$61[ebp]
	mov	edi, DWORD PTR _pal$36[ebp]
	movzx	esi, BYTE PTR [edi+esi*4]
	sar	esi, 3
	or	esi, edx
	or	esi, ecx
	or	esi, eax
	mov	WORD PTR _dwTmp$57[ebp], si

; 1071 : 
; 1072 : 					if(dwTmp != (WORD)m_dwChromaKey)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+28]
	movzx	edx, WORD PTR _dwTmp$57[ebp]
	cmp	edx, ecx
	je	SHORT $LN66@Reload

; 1073 : 						palette[i] = dwTmp;

	mov	eax, DWORD PTR _i$61[ebp]
	mov	cx, WORD PTR _dwTmp$57[ebp]
	mov	WORD PTR _palette$66[ebp+eax*2], cx

; 1074 : 					else

	jmp	SHORT $LN65@Reload
$LN66@Reload:

; 1075 : 						// Zero alpha but preserve RGB for pre-alpha test filtering (0 == full transparent, 0xff == full opaque)
; 1076 : 						palette[i] = dwTmp & 0x7fff;

	movzx	edx, WORD PTR _dwTmp$57[ebp]
	and	edx, 32767				; 00007fffH
	mov	eax, DWORD PTR _i$61[ebp]
	mov	WORD PTR _palette$66[ebp+eax*2], dx
$LN65@Reload:

; 1077 : 				}

	jmp	$LN68@Reload
$LN67@Reload:

; 1078 : 
; 1079 : 				BYTE *pSrc = m_pImageData;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _pSrc$47[ebp], edx

; 1080 : 				WORD *pDst = (WORD *)ddsd.lpSurface;

	mov	eax, DWORD PTR _ddsd$[ebp+36]
	mov	DWORD PTR _pDst$45[ebp], eax

; 1081 : 
; 1082 : 				// JB 010404 CTD
; 1083 : 				if(F4IsBadReadPtr(pSrc,sizeof(BYTE)) || F4IsBadReadPtr(pDst,sizeof(WORD))) break;

	push	1
	mov	ecx, DWORD PTR _pSrc$47[ebp]
	push	ecx
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	mov	BYTE PTR tv662[ebp], al
	movzx	edx, BYTE PTR tv662[ebp]
	test	edx, edx
	jne	SHORT $LN63@Reload
	push	2
	mov	eax, DWORD PTR _pDst$45[ebp]
	push	eax
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	mov	BYTE PTR tv663[ebp], al
	movzx	ecx, BYTE PTR tv663[ebp]
	test	ecx, ecx
	je	SHORT $LN64@Reload
$LN63@Reload:
	jmp	$LN96@Reload
$LN64@Reload:

; 1084 : 
; 1085 : 				DWORD dwPitch = ddsd.lPitch >> 1;

	mov	edx, DWORD PTR _ddsd$[ebp+16]
	sar	edx, 1
	mov	DWORD PTR _dwPitch$17[ebp], edx

; 1086 : 
; 1087 : 				if( dwPitch == m_nWidth && m_nImageDataStride == m_nWidth )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwPitch$17[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jne	$LN62@Reload
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+44]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN62@Reload

; 1088 : 				{
; 1089 : 					// If source and destination pitch match, use single loop
; 1090 : 					DWORD dwSize = m_nWidth * m_nHeight;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	imul	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _dwSize$11[ebp], ecx

; 1091 : 
; 1092 : 					for(int i=0; static_cast<unsigned int>(i)<dwSize; i++)

	mov	DWORD PTR _i$51[ebp], 0
	jmp	SHORT $LN61@Reload
$LN60@Reload:
	mov	edx, DWORD PTR _i$51[ebp]
	add	edx, 1
	mov	DWORD PTR _i$51[ebp], edx
$LN61@Reload:
	mov	eax, DWORD PTR _i$51[ebp]
	cmp	eax, DWORD PTR _dwSize$11[ebp]
	jae	SHORT $LN59@Reload

; 1093 : 						pDst[i] = palette[pSrc[i]];

	mov	ecx, DWORD PTR _pSrc$47[ebp]
	add	ecx, DWORD PTR _i$51[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _i$51[ebp]
	mov	ecx, DWORD PTR _pDst$45[ebp]
	mov	dx, WORD PTR _palette$66[ebp+edx*2]
	mov	WORD PTR [ecx+eax*2], dx
	jmp	SHORT $LN60@Reload
$LN59@Reload:

; 1094 : 				}
; 1095 : 				else

	jmp	$LN58@Reload
$LN62@Reload:

; 1096 : 				{
; 1097 : 					for( int y = 0; y < m_nHeight; y++ )

	mov	DWORD PTR _y$19[ebp], 0
	jmp	SHORT $LN57@Reload
$LN56@Reload:
	mov	eax, DWORD PTR _y$19[ebp]
	add	eax, 1
	mov	DWORD PTR _y$19[ebp], eax
$LN57@Reload:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _y$19[ebp]
	cmp	edx, DWORD PTR [ecx+12]
	jge	$LN58@Reload

; 1098 : 					{
; 1099 : 						for(int x=0; x<m_nWidth; x++)

	mov	DWORD PTR _x$54[ebp], 0
	jmp	SHORT $LN54@Reload
$LN53@Reload:
	mov	eax, DWORD PTR _x$54[ebp]
	add	eax, 1
	mov	DWORD PTR _x$54[ebp], eax
$LN54@Reload:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _x$54[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jge	SHORT $LN52@Reload

; 1100 : 							pDst[x] = palette[pSrc[x]];

	mov	eax, DWORD PTR _pSrc$47[ebp]
	add	eax, DWORD PTR _x$54[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _x$54[ebp]
	mov	eax, DWORD PTR _pDst$45[ebp]
	mov	cx, WORD PTR _palette$66[ebp+ecx*2]
	mov	WORD PTR [eax+edx*2], cx
	jmp	SHORT $LN53@Reload
$LN52@Reload:

; 1101 : 
; 1102 : 						pSrc += m_nImageDataStride;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pSrc$47[ebp]
	add	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _pSrc$47[ebp], eax

; 1103 : 						pDst += dwPitch;

	mov	ecx, DWORD PTR _dwPitch$17[ebp]
	mov	edx, DWORD PTR _pDst$45[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _pDst$45[ebp], eax

; 1104 : 					}

	jmp	$LN56@Reload
$LN58@Reload:

; 1105 : 				}
; 1106 : 
; 1107 : 				break;

	jmp	$LN96@Reload
$LN51@Reload:

; 1108 : 			}
; 1109 : 
; 1110 : 			case D3DX_SF_A4R4G4B4:
; 1111 : 			{
; 1112 : 				WORD dwTmp;
; 1113 : 	
; 1114 : 				// Convert palette to 16bit 
; 1115 : 				WORD palette[256];
; 1116 : 				PALETTEENTRY *pal = (PALETTEENTRY *)&m_pPalAttach->m_pPalData[0];

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	add	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _pal$39[ebp], ecx

; 1117 : 	
; 1118 : 				for( int i = 0; i <m_pPalAttach->m_nNumEntries; i++ )

	mov	DWORD PTR _i$62[ebp], 0
	jmp	SHORT $LN50@Reload
$LN49@Reload:
	mov	ecx, DWORD PTR _i$62[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$62[ebp], ecx
$LN50@Reload:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	movsx	ecx, WORD PTR [eax+16]
	cmp	DWORD PTR _i$62[ebp], ecx
	jge	$LN48@Reload

; 1119 : 				{
; 1120 : 					dwTmp = (pal[i].peRed >> 4) | ((pal[i].peGreen >> 4) << 4) | ((pal[i].peBlue >> 4) << 8) | ((pal[i].peFlags >> 4) << 12);

	mov	edx, DWORD PTR _i$62[ebp]
	mov	eax, DWORD PTR _pal$39[ebp]
	movzx	ecx, BYTE PTR [eax+edx*4+3]
	sar	ecx, 4
	shl	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _i$62[ebp]
	mov	eax, DWORD PTR _pal$39[ebp]
	movzx	edx, BYTE PTR [eax+edx*4+2]
	sar	edx, 4
	shl	edx, 8
	mov	eax, DWORD PTR _i$62[ebp]
	mov	esi, DWORD PTR _pal$39[ebp]
	movzx	eax, BYTE PTR [esi+eax*4+1]
	sar	eax, 4
	shl	eax, 4
	mov	esi, DWORD PTR _i$62[ebp]
	mov	edi, DWORD PTR _pal$39[ebp]
	movzx	esi, BYTE PTR [edi+esi*4]
	sar	esi, 4
	or	esi, eax
	or	esi, edx
	or	esi, ecx
	mov	WORD PTR _dwTmp$56[ebp], si

; 1121 : 	
; 1122 : 					if(dwTmp != (WORD) m_dwChromaKey)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+28]
	movzx	eax, WORD PTR _dwTmp$56[ebp]
	cmp	eax, edx
	je	SHORT $LN47@Reload

; 1123 : 						palette[i] = dwTmp;

	mov	ecx, DWORD PTR _i$62[ebp]
	mov	dx, WORD PTR _dwTmp$56[ebp]
	mov	WORD PTR _palette$67[ebp+ecx*2], dx

; 1124 : 					else

	jmp	SHORT $LN46@Reload
$LN47@Reload:

; 1125 : 						// Zero alpha but preserve RGB for pre-alpha test filtering (0 == full transparent, 0xff == full opaque)
; 1126 : 						palette[i] = dwTmp & 0xfff;

	movzx	eax, WORD PTR _dwTmp$56[ebp]
	and	eax, 4095				; 00000fffH
	mov	ecx, DWORD PTR _i$62[ebp]
	mov	WORD PTR _palette$67[ebp+ecx*2], ax
$LN46@Reload:

; 1127 : 				}

	jmp	$LN49@Reload
$LN48@Reload:

; 1128 : 	
; 1129 : 				BYTE *pSrc = m_pImageData;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _pSrc$32[ebp], eax

; 1130 : 				WORD *pDst = (WORD *)ddsd.lpSurface;

	mov	ecx, DWORD PTR _ddsd$[ebp+36]
	mov	DWORD PTR _pDst$37[ebp], ecx

; 1131 : 				DWORD dwPitch = ddsd.lPitch >> 1;

	mov	edx, DWORD PTR _ddsd$[ebp+16]
	sar	edx, 1
	mov	DWORD PTR _dwPitch$15[ebp], edx

; 1132 : 	
; 1133 : 				if( dwPitch == m_nWidth && m_nImageDataStride == m_nWidth )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwPitch$15[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jne	$LN45@Reload
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+44]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN45@Reload

; 1134 : 				{
; 1135 : 					// If source and destination pitch match, use single loop
; 1136 : 					DWORD dwSize = m_nWidth * m_nHeight;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	imul	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _dwSize$8[ebp], ecx

; 1137 : 	
; 1138 : 					for(int i=0; static_cast<unsigned int>(i) <dwSize; i++)

	mov	DWORD PTR _i$43[ebp], 0
	jmp	SHORT $LN44@Reload
$LN43@Reload:
	mov	edx, DWORD PTR _i$43[ebp]
	add	edx, 1
	mov	DWORD PTR _i$43[ebp], edx
$LN44@Reload:
	mov	eax, DWORD PTR _i$43[ebp]
	cmp	eax, DWORD PTR _dwSize$8[ebp]
	jae	SHORT $LN42@Reload

; 1139 : 						pDst[i] = palette[pSrc[i]];

	mov	ecx, DWORD PTR _pSrc$32[ebp]
	add	ecx, DWORD PTR _i$43[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _i$43[ebp]
	mov	ecx, DWORD PTR _pDst$37[ebp]
	mov	dx, WORD PTR _palette$67[ebp+edx*2]
	mov	WORD PTR [ecx+eax*2], dx
	jmp	SHORT $LN43@Reload
$LN42@Reload:

; 1140 : 				}
; 1141 : 				else

	jmp	$LN41@Reload
$LN45@Reload:

; 1142 : 				{
; 1143 : 					for( int y = 0; y < m_nHeight; y++ )

	mov	DWORD PTR _y$28[ebp], 0
	jmp	SHORT $LN40@Reload
$LN39@Reload:
	mov	eax, DWORD PTR _y$28[ebp]
	add	eax, 1
	mov	DWORD PTR _y$28[ebp], eax
$LN40@Reload:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _y$28[ebp]
	cmp	edx, DWORD PTR [ecx+12]
	jge	$LN41@Reload

; 1144 : 					{
; 1145 : 						for(int x=0; x<m_nWidth; x++)

	mov	DWORD PTR _x$52[ebp], 0
	jmp	SHORT $LN37@Reload
$LN36@Reload:
	mov	eax, DWORD PTR _x$52[ebp]
	add	eax, 1
	mov	DWORD PTR _x$52[ebp], eax
$LN37@Reload:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _x$52[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jge	SHORT $LN35@Reload

; 1146 : 							pDst[x] = palette[pSrc[x]];

	mov	eax, DWORD PTR _pSrc$32[ebp]
	add	eax, DWORD PTR _x$52[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _x$52[ebp]
	mov	eax, DWORD PTR _pDst$37[ebp]
	mov	cx, WORD PTR _palette$67[ebp+ecx*2]
	mov	WORD PTR [eax+edx*2], cx
	jmp	SHORT $LN36@Reload
$LN35@Reload:

; 1147 : 	
; 1148 : 						pSrc += m_nImageDataStride;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pSrc$32[ebp]
	add	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _pSrc$32[ebp], eax

; 1149 : 						pDst += dwPitch;

	mov	ecx, DWORD PTR _dwPitch$15[ebp]
	mov	edx, DWORD PTR _pDst$37[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _pDst$37[ebp], eax

; 1150 : 					}

	jmp	$LN39@Reload
$LN41@Reload:

; 1151 : 				}
; 1152 : 	
; 1153 : 				break;

	jmp	$LN96@Reload
$LN34@Reload:

; 1154 : 			}
; 1155 : 
; 1156 : 			case D3DX_SF_R5G6B5:
; 1157 : 			{
; 1158 : 				ShiAssert(!(m_dwFlags & MPR_TI_CHROMAKEY));
; 1159 : 	
; 1160 : 				WORD dwTmp;
; 1161 : 	
; 1162 : 				// Convert palette to 16bit 
; 1163 : 				WORD palette[256];
; 1164 : 				PALETTEENTRY *pal = (PALETTEENTRY *)&m_pPalAttach->m_pPalData[0];

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	add	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _pal$20[ebp], ecx

; 1165 : 	
; 1166 : 				for( int i = 0; i < m_pPalAttach->m_nNumEntries; i++ )

	mov	DWORD PTR _i$60[ebp], 0
	jmp	SHORT $LN33@Reload
$LN32@Reload:
	mov	ecx, DWORD PTR _i$60[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$60[ebp], ecx
$LN33@Reload:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	movsx	ecx, WORD PTR [eax+16]
	cmp	DWORD PTR _i$60[ebp], ecx
	jge	SHORT $LN31@Reload

; 1167 : 				{
; 1168 : 					dwTmp = (pal[i].peRed >> 3) | ((pal[i].peGreen >> 2) << 5) | ((pal[i].peBlue >> 3) << 11);

	mov	edx, DWORD PTR _i$60[ebp]
	mov	eax, DWORD PTR _pal$20[ebp]
	movzx	ecx, BYTE PTR [eax+edx*4+2]
	sar	ecx, 3
	shl	ecx, 11					; 0000000bH
	mov	edx, DWORD PTR _i$60[ebp]
	mov	eax, DWORD PTR _pal$20[ebp]
	movzx	edx, BYTE PTR [eax+edx*4+1]
	sar	edx, 2
	shl	edx, 5
	mov	eax, DWORD PTR _i$60[ebp]
	mov	esi, DWORD PTR _pal$20[ebp]
	movzx	eax, BYTE PTR [esi+eax*4]
	sar	eax, 3
	or	eax, edx
	or	eax, ecx
	mov	WORD PTR _dwTmp$21[ebp], ax

; 1169 : 					palette[i] = (WORD) dwTmp;

	mov	ecx, DWORD PTR _i$60[ebp]
	mov	dx, WORD PTR _dwTmp$21[ebp]
	mov	WORD PTR _palette$64[ebp+ecx*2], dx

; 1170 : 				}

	jmp	$LN32@Reload
$LN31@Reload:

; 1171 : 	
; 1172 : 				BYTE *pSrc = m_pImageData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _pSrc$34[ebp], ecx

; 1173 : 				WORD *pDst = (WORD *)ddsd.lpSurface;

	mov	edx, DWORD PTR _ddsd$[ebp+36]
	mov	DWORD PTR _pDst$41[ebp], edx

; 1174 : 				DWORD dwPitch = ddsd.lPitch >> 1;

	mov	eax, DWORD PTR _ddsd$[ebp+16]
	sar	eax, 1
	mov	DWORD PTR _dwPitch$18[ebp], eax

; 1175 : 	
; 1176 : 				if( dwPitch == m_nWidth && m_nImageDataStride == m_nWidth )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _dwPitch$18[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN30@Reload
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+44]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN30@Reload

; 1177 : 				{
; 1178 : 					// If source and destination pitch match, use single loop
; 1179 : 					DWORD dwSize = m_nWidth * m_nHeight;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	imul	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _dwSize$10[ebp], edx

; 1180 : 	
; 1181 : 					for(int i=0; static_cast<unsigned int>(i)<dwSize; i++)

	mov	DWORD PTR _i$44[ebp], 0
	jmp	SHORT $LN29@Reload
$LN28@Reload:
	mov	eax, DWORD PTR _i$44[ebp]
	add	eax, 1
	mov	DWORD PTR _i$44[ebp], eax
$LN29@Reload:
	mov	ecx, DWORD PTR _i$44[ebp]
	cmp	ecx, DWORD PTR _dwSize$10[ebp]
	jae	SHORT $LN27@Reload

; 1182 : 						pDst[i] = palette[pSrc[i]];

	mov	edx, DWORD PTR _pSrc$34[ebp]
	add	edx, DWORD PTR _i$44[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _i$44[ebp]
	mov	edx, DWORD PTR _pDst$41[ebp]
	mov	ax, WORD PTR _palette$64[ebp+eax*2]
	mov	WORD PTR [edx+ecx*2], ax
	jmp	SHORT $LN28@Reload
$LN27@Reload:

; 1183 : 				}
; 1184 : 				else

	jmp	$LN26@Reload
$LN30@Reload:

; 1185 : 				{
; 1186 : 					for( int y = 0; y < m_nHeight; y++ )

	mov	DWORD PTR _y$26[ebp], 0
	jmp	SHORT $LN25@Reload
$LN24@Reload:
	mov	ecx, DWORD PTR _y$26[ebp]
	add	ecx, 1
	mov	DWORD PTR _y$26[ebp], ecx
$LN25@Reload:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _y$26[ebp]
	cmp	eax, DWORD PTR [edx+12]
	jge	$LN26@Reload

; 1187 : 					{
; 1188 : 						for(int x=0; x<m_nWidth; x++)

	mov	DWORD PTR _x$50[ebp], 0
	jmp	SHORT $LN22@Reload
$LN21@Reload:
	mov	ecx, DWORD PTR _x$50[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$50[ebp], ecx
$LN22@Reload:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _x$50[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jge	SHORT $LN20@Reload

; 1189 : 							pDst[x] = palette[pSrc[x]];

	mov	ecx, DWORD PTR _pSrc$34[ebp]
	add	ecx, DWORD PTR _x$50[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _x$50[ebp]
	mov	ecx, DWORD PTR _pDst$41[ebp]
	mov	dx, WORD PTR _palette$64[ebp+edx*2]
	mov	WORD PTR [ecx+eax*2], dx
	jmp	SHORT $LN21@Reload
$LN20@Reload:

; 1190 : 	
; 1191 : 						pSrc += m_nImageDataStride;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pSrc$34[ebp]
	add	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _pSrc$34[ebp], ecx

; 1192 : 						pDst += dwPitch;

	mov	edx, DWORD PTR _dwPitch$18[ebp]
	mov	eax, DWORD PTR _pDst$41[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _pDst$41[ebp], ecx

; 1193 : 					}

	jmp	$LN24@Reload
$LN26@Reload:

; 1194 : 				}
; 1195 : 	
; 1196 : 				break;

	jmp	$LN96@Reload
$LN19@Reload:

; 1197 : 			}
; 1198 : 
; 1199 : 			case D3DX_SF_R5G5B5:
; 1200 : 			{
; 1201 : 				ShiAssert(!(m_dwFlags & MPR_TI_CHROMAKEY));
; 1202 : 	
; 1203 : 				WORD dwTmp;
; 1204 : 	
; 1205 : 				// Convert palette to 16bit 
; 1206 : 				WORD palette[256];
; 1207 : 				PALETTEENTRY *pal = (PALETTEENTRY *)&m_pPalAttach->m_pPalData[0];

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _pal$22[ebp], edx

; 1208 : 	
; 1209 : 				for( int i = 0; i < m_pPalAttach->m_nNumEntries; i++ )

	mov	DWORD PTR _i$58[ebp], 0
	jmp	SHORT $LN18@Reload
$LN17@Reload:
	mov	edx, DWORD PTR _i$58[ebp]
	add	edx, 1
	mov	DWORD PTR _i$58[ebp], edx
$LN18@Reload:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movsx	edx, WORD PTR [ecx+16]
	cmp	DWORD PTR _i$58[ebp], edx
	jge	SHORT $LN16@Reload

; 1210 : 				{
; 1211 : 					dwTmp = (pal[i].peRed >> 3) | ((pal[i].peGreen >> 3) << 5) | ((pal[i].peBlue >> 3) << 10);

	mov	eax, DWORD PTR _i$58[ebp]
	mov	ecx, DWORD PTR _pal$22[ebp]
	movzx	edx, BYTE PTR [ecx+eax*4+2]
	sar	edx, 3
	shl	edx, 10					; 0000000aH
	mov	eax, DWORD PTR _i$58[ebp]
	mov	ecx, DWORD PTR _pal$22[ebp]
	movzx	eax, BYTE PTR [ecx+eax*4+1]
	sar	eax, 3
	shl	eax, 5
	mov	ecx, DWORD PTR _i$58[ebp]
	mov	esi, DWORD PTR _pal$22[ebp]
	movzx	ecx, BYTE PTR [esi+ecx*4]
	sar	ecx, 3
	or	ecx, eax
	or	ecx, edx
	mov	WORD PTR _dwTmp$27[ebp], cx

; 1212 : 					palette[i] = (WORD) dwTmp;

	mov	edx, DWORD PTR _i$58[ebp]
	mov	ax, WORD PTR _dwTmp$27[ebp]
	mov	WORD PTR _palette$65[ebp+edx*2], ax

; 1213 : 				}

	jmp	$LN17@Reload
$LN16@Reload:

; 1214 : 	
; 1215 : 				BYTE *pSrc = m_pImageData;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _pSrc$40[ebp], edx

; 1216 : 				WORD *pDst = (WORD *)ddsd.lpSurface;

	mov	eax, DWORD PTR _ddsd$[ebp+36]
	mov	DWORD PTR _pDst$42[ebp], eax

; 1217 : 				DWORD dwPitch = ddsd.lPitch >> 1;

	mov	ecx, DWORD PTR _ddsd$[ebp+16]
	sar	ecx, 1
	mov	DWORD PTR _dwPitch$16[ebp], ecx

; 1218 : 	
; 1219 : 				if( dwPitch == m_nWidth && m_nImageDataStride == m_nWidth )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _dwPitch$16[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jne	$LN15@Reload
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN15@Reload

; 1220 : 				{
; 1221 : 					// If source and destination pitch match, use single loop
; 1222 : 					DWORD dwSize = m_nWidth * m_nHeight;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	imul	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _dwSize$5[ebp], eax

; 1223 : 	
; 1224 : 					for(int i=0; static_cast<unsigned int>(i)<dwSize; i++)

	mov	DWORD PTR _i$46[ebp], 0
	jmp	SHORT $LN14@Reload
$LN13@Reload:
	mov	ecx, DWORD PTR _i$46[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$46[ebp], ecx
$LN14@Reload:
	mov	edx, DWORD PTR _i$46[ebp]
	cmp	edx, DWORD PTR _dwSize$5[ebp]
	jae	SHORT $LN12@Reload

; 1225 : 						pDst[i] = palette[pSrc[i]];

	mov	eax, DWORD PTR _pSrc$40[ebp]
	add	eax, DWORD PTR _i$46[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _i$46[ebp]
	mov	eax, DWORD PTR _pDst$42[ebp]
	mov	cx, WORD PTR _palette$65[ebp+ecx*2]
	mov	WORD PTR [eax+edx*2], cx
	jmp	SHORT $LN13@Reload
$LN12@Reload:

; 1226 : 				}
; 1227 : 				else

	jmp	$LN96@Reload
$LN15@Reload:

; 1228 : 				{
; 1229 : 					for( int y = 0; y < m_nHeight; y++ )

	mov	DWORD PTR _y$24[ebp], 0
	jmp	SHORT $LN10@Reload
$LN9@Reload:
	mov	edx, DWORD PTR _y$24[ebp]
	add	edx, 1
	mov	DWORD PTR _y$24[ebp], edx
$LN10@Reload:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _y$24[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	$LN96@Reload

; 1230 : 					{
; 1231 : 						for(int x=0; x<m_nWidth; x++)

	mov	DWORD PTR _x$48[ebp], 0
	jmp	SHORT $LN7@Reload
$LN6@Reload:
	mov	edx, DWORD PTR _x$48[ebp]
	add	edx, 1
	mov	DWORD PTR _x$48[ebp], edx
$LN7@Reload:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$48[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN5@Reload

; 1232 : 							pDst[x] = palette[pSrc[x]];

	mov	edx, DWORD PTR _pSrc$40[ebp]
	add	edx, DWORD PTR _x$48[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _x$48[ebp]
	mov	edx, DWORD PTR _pDst$42[ebp]
	mov	ax, WORD PTR _palette$65[ebp+eax*2]
	mov	WORD PTR [edx+ecx*2], ax
	jmp	SHORT $LN6@Reload
$LN5@Reload:

; 1233 : 	
; 1234 : 						pSrc += m_nImageDataStride;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pSrc$40[ebp]
	add	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR _pSrc$40[ebp], edx

; 1235 : 						pDst += dwPitch;

	mov	eax, DWORD PTR _dwPitch$16[ebp]
	mov	ecx, DWORD PTR _pDst$42[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _pDst$42[ebp], edx

; 1236 : 					}

	jmp	$LN9@Reload
$LN96@Reload:

; 1237 : 				}
; 1238 : 	
; 1239 : 				break;
; 1240 : 			}
; 1241 : 
; 1242 : 			default:
; 1243 : 				ShiAssert(false);
; 1244 : 		}
; 1245 : 
; 1246 : 		}
; 1247 : 		CheckHR(m_pDDS->Unlock(NULL));

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+128]
	call	edx
	mov	DWORD PTR tv664[ebp], eax
	mov	eax, DWORD PTR tv664[ebp]
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 1248 : 
; 1249 : 		if( m_dwFlags & MPR_TI_MIPMAP )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	and	edx, 1
	je	SHORT $LN3@Reload

; 1250 : 		{
; 1251 : 			MipLoadContext ctx = { 0, m_pDDS };

	mov	DWORD PTR _ctx$12[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ctx$12[ebp+4], ecx

; 1252 : 			if(g_bShowMipUsage)

	movzx	edx, BYTE PTR ?g_bShowMipUsage@@3_NA	; g_bShowMipUsage
	test	edx, edx
	je	SHORT $LN2@Reload

; 1253 : 				SetMipLevelColor(&ctx);

	lea	eax, DWORD PTR _ctx$12[ebp]
	push	eax
	call	?SetMipLevelColor@@YAXPAUMipLoadContext@@@Z ; SetMipLevelColor
	add	esp, 4
$LN2@Reload:

; 1254 : 
; 1255 : 			CheckHR(m_pDDS->EnumAttachedSurfaces(&ctx,MipLoadCallback));

	push	OFFSET ?MipLoadCallback@@YGJPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@PAX@Z ; MipLoadCallback
	lea	ecx, DWORD PTR _ctx$12[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+36]
	call	ecx
	mov	DWORD PTR tv665[ebp], eax
	mov	edx, DWORD PTR tv665[ebp]
	push	edx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4
$LN3@Reload:

; 1256 : 		}
; 1257 : 
; 1258 : 		return true;

	mov	al, 1
	jmp	SHORT $LN107@Reload
__catch$?Reload@TextureHandle@@QAE_NXZ$0:

; 1259 : 	}
; 1260 : 
; 1261 : 	catch( _com_error e )

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 1262 : 	{
; 1263 : 		// Unlock if still locked
; 1264 : 		if(ddsd.lpSurface) m_pDDS->Unlock(NULL);

	cmp	DWORD PTR _ddsd$[ebp+36], 0
	je	SHORT $LN1@Reload
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+128]
	call	edx
$LN1@Reload:

; 1265 : 
; 1266 : 		ReportTextureLoadError(e.Error(),true);

	push	1
	lea	ecx, DWORD PTR _e$2[ebp]
	call	?Error@_com_error@@QBEJXZ		; _com_error::Error
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReportTextureLoadError@TextureHandle@@IAEXJ_N@Z ; TextureHandle::ReportTextureLoadError

; 1267 : 		return false;

	mov	BYTE PTR $T59[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _e$2[ebp]
	call	??1_com_error@@UAE@XZ			; _com_error::~_com_error
	mov	eax, $LN112@Reload
	ret	0

; 1268 : 	}

	mov	eax, __tryend$?Reload@TextureHandle@@QAE_NXZ$1
	ret	0
__tryend$?Reload@TextureHandle@@QAE_NXZ$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN107@Reload
$LN112@Reload:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1267 : 		return false;

	mov	al, BYTE PTR $T59[ebp]
$LN107@Reload:

; 1269 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN114@Reload:
	DD	$LN87@Reload
	DD	$LN87@Reload
	DD	$LN34@Reload
	DD	$LN19@Reload
	DD	$LN96@Reload
	DD	$LN93@Reload
	DD	$LN70@Reload
	DD	$LN96@Reload
	DD	$LN51@Reload
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Reload@TextureHandle@@QAE_NXZ$2:
	lea	ecx, DWORD PTR _e$2[ebp]
	jmp	??1_com_error@@UAE@XZ			; _com_error::~_com_error
__ehhandler$?Reload@TextureHandle@@QAE_NXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-3524]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Reload@TextureHandle@@QAE_NXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Reload@TextureHandle@@QAE_NXZ ENDP			; TextureHandle::Reload
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
$T1 = -52						; size = 4
$T2 = -48						; size = 4
$T3 = -44						; size = 4
$T4 = -40						; size = 4
_dwSize$5 = -36						; size = 4
tv215 = -32						; size = 4
_pal$6 = -28						; size = 4
_pal$7 = -24						; size = 4
_pal$8 = -20						; size = 4
_pal$9 = -16						; size = 4
tv79 = -12						; size = 4
_this$ = -8						; size = 4
_bResult$10 = -1					; size = 1
_mip$ = 8						; size = 2
_chroma$ = 12						; size = 4
_TexBuffer$ = 16					; size = 4
_bDoNotLoadBits$ = 20					; size = 1
_bDoNotCopyBits$ = 24					; size = 1
_nImageDataStride$ = 28					; size = 4
?Load@TextureHandle@@QAE_NGIPAE_N1H@Z PROC		; TextureHandle::Load
; _this$ = ecx

; 744  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 745  : 	ShiAssert(TexBuffer);
; 746  : 
; 747  : 	// MLR 2003-10-10 - Prevent CTD.
; 748  : 	if(!TexBuffer){

	cmp	DWORD PTR _TexBuffer$[ebp], 0
	jne	SHORT $LN20@Load

; 749  : 		return false;

	xor	al, al
	jmp	$LN21@Load
$LN20@Load:

; 750  : 	}
; 751  : 
; 752  : #ifdef DEBUG
; 753  : 	if(m_dwFlags & MPR_TI_PALETTE) ShiAssert(m_pPalAttach);
; 754  : #endif
; 755  : 
; 756  : 	// Convert chroma key
; 757  : 	m_dwChromaKey = RGBA_MAKE(RGBA_GETBLUE(chroma),RGBA_GETGREEN(chroma),RGBA_GETRED(chroma),RGBA_GETALPHA(chroma));

	mov	eax, DWORD PTR _chroma$[ebp]
	shr	eax, 24					; 00000018H
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _chroma$[ebp]
	and	ecx, 255				; 000000ffH
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, DWORD PTR _chroma$[ebp]
	shr	edx, 8
	and	edx, 255				; 000000ffH
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _chroma$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	or	eax, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], eax

; 758  : 
; 759  : 	switch(m_eSurfFmt)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv79[ebp], ecx
	mov	edx, DWORD PTR tv79[ebp]
	sub	edx, 4
	mov	DWORD PTR tv79[ebp], edx
	cmp	DWORD PTR tv79[ebp], 6
	ja	$LN18@Load
	mov	eax, DWORD PTR tv79[ebp]
	jmp	DWORD PTR $LN25@Load[eax*4]

; 760  : 	{
; 761  : 		case D3DX_SF_A8R8G8B8:
; 762  : 		case D3DX_SF_X8R8G8B8:
; 763  : 		case D3DX_SF_PALETTE8:
; 764  : 			break;

	jmp	$LN18@Load
$LN16@Load:

; 765  : 
; 766  : 		case D3DX_SF_A1R5G5B5:
; 767  : 		{
; 768  : 			PALETTEENTRY *pal = (PALETTEENTRY *)&m_dwChromaKey;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	mov	DWORD PTR _pal$9[ebp], ecx

; 769  : 			m_dwChromaKey = (pal[0].peRed >> 3) | ((pal[0].peGreen >> 3) << 5) | ((pal[0].peBlue >> 3) << 10) | ((pal[0].peFlags >> 7) << 15);

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _pal$9[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	sar	ecx, 3
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _pal$9[ebp]
	movzx	edx, BYTE PTR [eax+edx+1]
	sar	edx, 3
	shl	edx, 5
	or	ecx, edx
	mov	eax, 4
	imul	eax, 0
	mov	edx, DWORD PTR _pal$9[ebp]
	movzx	eax, BYTE PTR [edx+eax+2]
	sar	eax, 3
	shl	eax, 10					; 0000000aH
	or	ecx, eax
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _pal$9[ebp]
	movzx	edx, BYTE PTR [eax+edx+3]
	sar	edx, 7
	shl	edx, 15					; 0000000fH
	or	ecx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 770  : 			break;

	jmp	$LN18@Load
$LN15@Load:

; 771  : 		}
; 772  : 
; 773  : 		case D3DX_SF_A4R4G4B4:
; 774  : 		{
; 775  : 			PALETTEENTRY *pal = (PALETTEENTRY *) &m_dwChromaKey;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	mov	DWORD PTR _pal$8[ebp], ecx

; 776  : 			m_dwChromaKey = (pal[0].peRed >> 4) | ((pal[0].peGreen >> 4) << 4) | ((pal[0].peBlue >> 4) << 8) | ((pal[0].peFlags >> 4) << 12);

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _pal$8[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	sar	ecx, 4
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _pal$8[ebp]
	movzx	edx, BYTE PTR [eax+edx+1]
	sar	edx, 4
	shl	edx, 4
	or	ecx, edx
	mov	eax, 4
	imul	eax, 0
	mov	edx, DWORD PTR _pal$8[ebp]
	movzx	eax, BYTE PTR [edx+eax+2]
	sar	eax, 4
	shl	eax, 8
	or	ecx, eax
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _pal$8[ebp]
	movzx	edx, BYTE PTR [eax+edx+3]
	sar	edx, 4
	shl	edx, 12					; 0000000cH
	or	ecx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 777  : 			break;

	jmp	$LN18@Load
$LN14@Load:

; 778  : 		}
; 779  : 
; 780  : 		case D3DX_SF_R5G6B5:
; 781  : 		{
; 782  : 			PALETTEENTRY *pal = (PALETTEENTRY *) &m_dwChromaKey;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	mov	DWORD PTR _pal$7[ebp], ecx

; 783  : 			m_dwChromaKey = (pal[0].peRed >> 3) | ((pal[0].peGreen >> 2) << 5) | ((pal[0].peBlue >> 3) << 11);

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _pal$7[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	sar	ecx, 3
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _pal$7[ebp]
	movzx	edx, BYTE PTR [eax+edx+1]
	sar	edx, 2
	shl	edx, 5
	or	ecx, edx
	mov	eax, 4
	imul	eax, 0
	mov	edx, DWORD PTR _pal$7[ebp]
	movzx	eax, BYTE PTR [edx+eax+2]
	sar	eax, 3
	shl	eax, 11					; 0000000bH
	or	ecx, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], ecx

; 784  : 			break;

	jmp	SHORT $LN18@Load
$LN13@Load:

; 785  : 		}
; 786  : 
; 787  : 		case D3DX_SF_R5G5B5:
; 788  : 		{
; 789  : 			PALETTEENTRY *pal = (PALETTEENTRY *) &m_dwChromaKey;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH
	mov	DWORD PTR _pal$6[ebp], eax

; 790  : 			m_dwChromaKey = (pal[0].peRed >> 3) | ((pal[0].peGreen >> 3) << 5) | ((pal[0].peBlue >> 3) << 10);

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _pal$6[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	sar	eax, 3
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _pal$6[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+1]
	sar	ecx, 3
	shl	ecx, 5
	or	eax, ecx
	mov	edx, 4
	imul	edx, 0
	mov	ecx, DWORD PTR _pal$6[ebp]
	movzx	edx, BYTE PTR [ecx+edx+2]
	sar	edx, 3
	shl	edx, 10					; 0000000aH
	or	eax, edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax
$LN18@Load:

; 791  : 			break;
; 792  : 		}
; 793  : 
; 794  : 		case D3DX_SF_DXT1:
; 795  : 		case D3DX_SF_DXT3:
; 796  : 		case D3DX_SF_DXT5:
; 797  : 		break;
; 798  : 
; 799  : 		default: ShiAssert(false);
; 800  : 	}
; 801  : 
; 802  : 	m_nImageDataStride = nImageDataStride != -1 ? nImageDataStride : m_nWidth;

	cmp	DWORD PTR _nImageDataStride$[ebp], -1
	je	SHORT $LN23@Load
	mov	edx, DWORD PTR _nImageDataStride$[ebp]
	mov	DWORD PTR tv215[ebp], edx
	jmp	SHORT $LN24@Load
$LN23@Load:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv215[ebp], ecx
$LN24@Load:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv215[ebp]
	mov	DWORD PTR [edx+44], eax

; 803  : 
; 804  : 	if( (m_dwFlags & MPR_TI_PALETTE) && m_eSurfFmt != D3DX_SF_PALETTE8 )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	and	edx, 128				; 00000080H
	je	$LN10@Load
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 7
	je	$LN10@Load

; 805  : 	{
; 806  : 		DWORD dwSize = m_nImageDataStride * m_nHeight;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	imul	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _dwSize$5[ebp], eax

; 807  : 
; 808  : 		// Free previously allocated surface memory copy
; 809  : 		if(m_pImageData && m_bImageDataOwned)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN9@Load
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+40]
	test	eax, eax
	je	SHORT $LN9@Load

; 810  : 		{
; 811  : 			#ifdef _DEBUG
; 812  : 			//InterlockedExchangeAdd((long *)&m_dwTotalBytes,-dwSize);
; 813  : 			//InterlockedExchangeAdd((long *)&m_dwBitmapBytes,-dwSize);
; 814  : 			#endif
; 815  : 
; 816  : 			delete[] m_pImageData;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR $T4[ebp], edx
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN9@Load:

; 817  : 		}
; 818  : 
; 819  : 		if( !bDoNotCopyBits )

	movzx	ecx, BYTE PTR _bDoNotCopyBits$[ebp]
	test	ecx, ecx
	jne	SHORT $LN8@Load

; 820  : 		{
; 821  : 			m_pImageData = new BYTE[dwSize];

	mov	edx, DWORD PTR _dwSize$5[ebp]
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [eax+36], ecx

; 822  : 
; 823  : 			if( !m_pImageData )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+36], 0
	jne	SHORT $LN7@Load

; 824  : 			{
; 825  : 				ReportTextureLoadError(E_OUTOFMEMORY,true);

	push	1
	push	-2147024882				; 8007000eH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReportTextureLoadError@TextureHandle@@IAEXJ_N@Z ; TextureHandle::ReportTextureLoadError

; 826  : 				return false;

	xor	al, al
	jmp	$LN21@Load
$LN7@Load:

; 827  : 			}
; 828  : 
; 829  : 			memcpy(m_pImageData,TexBuffer,dwSize);

	mov	eax, DWORD PTR _dwSize$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _TexBuffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 830  : 			m_bImageDataOwned = true;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+40], 1

; 831  : 
; 832  : 			#ifdef _DEBUG
; 833  : 			InterlockedExchangeAdd((long *)&m_dwTotalBytes,dwSize);
; 834  : 			InterlockedExchangeAdd((long *)&m_dwBitmapBytes,dwSize);
; 835  : 			#endif
; 836  : 		}
; 837  : 		else

	jmp	SHORT $LN6@Load
$LN8@Load:

; 838  : 		{
; 839  : 			// Owner promises not to delete it while we are using it
; 840  : 			m_pImageData = TexBuffer;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _TexBuffer$[ebp]
	mov	DWORD PTR [edx+36], eax

; 841  : 			m_bImageDataOwned = false;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+40], 0
$LN6@Load:

; 842  : 		}
; 843  : 
; 844  : 		// Load it
; 845  : 		if(!bDoNotLoadBits){

	movzx	edx, BYTE PTR _bDoNotLoadBits$[ebp]
	test	edx, edx
	jne	SHORT $LN5@Load

; 846  : 			if( !Reload() )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reload@TextureHandle@@QAE_NXZ		; TextureHandle::Reload
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN5@Load

; 847  : 			{
; 848  : 				// If loading failed free memory
; 849  : 				if(m_pImageData && m_bImageDataOwned) delete[] m_pImageData;

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN3@Load
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+40]
	test	eax, eax
	je	SHORT $LN3@Load
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN3@Load:

; 850  : 				m_pImageData = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], 0

; 851  : 				m_bImageDataOwned = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+40], 0

; 852  : 
; 853  : 				return false;

	xor	al, al
	jmp	SHORT $LN21@Load
$LN5@Load:

; 854  : 			}
; 855  : 		}
; 856  : 
; 857  : 		return true;

	mov	al, 1
	jmp	SHORT $LN21@Load

; 858  : 	}
; 859  : 	else

	jmp	SHORT $LN21@Load
$LN10@Load:

; 860  : 	{
; 861  : 		// Free previously allocated surface memory copy
; 862  : 		if( m_pImageData && m_bImageDataOwned )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN1@Load
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+40]
	test	edx, edx
	je	SHORT $LN1@Load

; 863  : 		{
; 864  : 			#ifdef _DEBUG
; 865  : 			InterlockedExchangeAdd((long *)&m_dwTotalBytes,-(m_nImageDataStride * m_nHeight));
; 866  : 			#endif
; 867  : 
; 868  : 			delete[] m_pImageData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Load:

; 869  : 		}
; 870  : 
; 871  : 		// Temporary value
; 872  : 		m_pImageData = TexBuffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _TexBuffer$[ebp]
	mov	DWORD PTR [eax+36], ecx

; 873  : 
; 874  : 		// Load it
; 875  : 		bool bResult = Reload();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reload@TextureHandle@@QAE_NXZ		; TextureHandle::Reload
	mov	BYTE PTR _bResult$10[ebp], al

; 876  : 
; 877  : 		// Not copied make invalid
; 878  : 		m_pImageData = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+36], 0

; 879  : 
; 880  : 		return bResult;

	mov	al, BYTE PTR _bResult$10[ebp]
$LN21@Load:

; 881  : 	}
; 882  : }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
	npad	1
$LN25@Load:
	DD	$LN14@Load
	DD	$LN13@Load
	DD	$LN18@Load
	DD	$LN18@Load
	DD	$LN16@Load
	DD	$LN18@Load
	DD	$LN15@Load
?Load@TextureHandle@@QAE_NGIPAE_N1H@Z ENDP		; TextureHandle::Load
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
_e$2 = -380						; size = 16
$T3 = -364						; size = 16
tv351 = -348						; size = 4
tv353 = -344						; size = 4
tv204 = -340						; size = 4
tv350 = -336						; size = 4
tv355 = -332						; size = 4
tv354 = -328						; size = 4
tv323 = -324						; size = 4
tv352 = -320						; size = 4
tv357 = -316						; size = 4
tv356 = -312						; size = 4
tv193 = -308						; size = 4
tv138 = -304						; size = 4
tv209 = -300						; size = 4
tv223 = -296						; size = 4
_pDDS$4 = -292						; size = 4
_pDD$5 = -288						; size = 4
_hr$6 = -284						; size = 4
_nMsb$7 = -280						; size = 4
$T8 = -273						; size = 1
_this$ = -272						; size = 4
_ddsdMode$9 = -268					; size = 124
_ddsd$10 = -144						; size = 124
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_strName$ = 8						; size = 4
_info$ = 12						; size = 4
_bits$ = 16						; size = 2
_width$ = 20						; size = 2
_height$ = 24						; size = 2
_dwFlags$ = 28						; size = 4
?Create@TextureHandle@@QAE_NPADKGGGK@Z PROC		; TextureHandle::Create
; _this$ = ecx

; 526  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Create@TextureHandle@@QAE_NPADKGGGK@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 364				; 0000016cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 527  : 
; 528  : 	if (!rc) // FRB CTD

	cmp	DWORD PTR _rc, 0
	jne	SHORT $LN42@Create

; 529  : 		return false;

	xor	al, al
	jmp	$LN44@Create
$LN42@Create:

; 530  : 
; 531  : 	m_dwFlags = info;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _info$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 532  : 
; 533  : #ifdef _DEBUG
; 534  : 	if( strName ){
; 535  : 		m_strName = strName;
; 536  : 		InterlockedExchangeAdd((long*)&m_dwTotalBytes,m_strName.size());
; 537  : 	}
; 538  : #endif
; 539  : 
; 540  : 	m_nWidth = width;

	movzx	edx, WORD PTR _width$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 541  : 	m_nHeight = height;

	movzx	ecx, WORD PTR _height$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 542  : 
; 543  : 	try
; 544  : 	{

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 545  : 		DDSURFACEDESC2 ddsd;
; 546  : 		ZeroMemory(&ddsd,sizeof(ddsd));

	push	124					; 0000007cH
	push	0
	lea	eax, DWORD PTR _ddsd$10[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 547  : 
; 548  : 		ddsd.dwSize = sizeof(ddsd);

	mov	DWORD PTR _ddsd$10[ebp], 124		; 0000007cH

; 549  : 		ddsd.dwFlags = DDSD_CAPS | DDSD_PIXELFORMAT | DDSD_WIDTH | DDSD_HEIGHT;

	mov	DWORD PTR _ddsd$10[ebp+4], 4103		; 00001007H

; 550  : 		ddsd.ddsCaps.dwCaps = DDSCAPS_TEXTURE; 

	mov	DWORD PTR _ddsd$10[ebp+104], 4096	; 00001000H

; 551  : 		ddsd.dwWidth  = m_nWidth;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _ddsd$10[ebp+12], edx

; 552  : 		ddsd.dwHeight = m_nHeight; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _ddsd$10[ebp+8], ecx

; 553  : 
; 554  : 		if( info & MPR_TI_MIPMAP )

	mov	edx, DWORD PTR _info$[ebp]
	and	edx, 1
	je	SHORT $LN40@Create

; 555  : 		{
; 556  : 			ddsd.dwMipMapCount = 5;

	mov	DWORD PTR _ddsd$10[ebp+24], 5

; 557  : 			ddsd.ddsCaps.dwCaps |= DDSCAPS_MIPMAP | DDSCAPS_COMPLEX;

	mov	eax, DWORD PTR _ddsd$10[ebp+104]
	or	eax, 4194312				; 00400008H
	mov	DWORD PTR _ddsd$10[ebp+104], eax

; 558  : 		}
; 559  : 		else {

	jmp	SHORT $LN39@Create
$LN40@Create:

; 560  : 			ddsd.dwMipMapCount = 1;

	mov	DWORD PTR _ddsd$10[ebp+24], 1
$LN39@Create:

; 561  : 		}
; 562  : 
; 563  : 		// JB 010326 CTD
; 564  : 		//if( F4IsBadReadPtr(m_pD3DHWDeviceDesc,sizeof(_D3DDeviceDesc7)) )
; 565  : 		//{
; 566  : 		//	ReportTextureLoadError("Bad Read Pointer");
; 567  : 		//	return false;
; 568  : 		//}
; 569  : 
; 570  : 		// Force power of 2
; 571  : 		if( (info & MPR_TI_MIPMAP) || (m_pD3DHWDeviceDesc->dpcTriCaps.dwTextureCaps & D3DPTEXTURECAPS_POW2) )

	mov	ecx, DWORD PTR _info$[ebp]
	and	ecx, 1
	jne	SHORT $LN37@Create
	mov	edx, DWORD PTR ?m_pD3DHWDeviceDesc@TextureHandle@@1PAU_D3DDeviceDesc7@@A ; TextureHandle::m_pD3DHWDeviceDesc
	mov	eax, DWORD PTR [edx+92]
	and	eax, 2
	je	$LN38@Create
$LN37@Create:

; 572  : 		{
; 573  : 			int nMsb;
; 574  : 
; 575  : 			nMsb = FindMsb(ddsd.dwWidth);

	mov	ecx, DWORD PTR _ddsd$10[ebp+12]
	push	ecx
	call	?FindMsb@@YAHK@Z			; FindMsb
	add	esp, 4
	mov	DWORD PTR tv350[ebp], eax
	mov	edx, DWORD PTR tv350[ebp]
	mov	DWORD PTR _nMsb$7[ebp], edx

; 576  : 			if(ddsd.dwWidth & ~(1 << nMsb)) ddsd.dwWidth = 1 << (nMsb + 1);

	mov	eax, 1
	mov	ecx, DWORD PTR _nMsb$7[ebp]
	shl	eax, cl
	not	eax
	and	eax, DWORD PTR _ddsd$10[ebp+12]
	je	SHORT $LN36@Create
	mov	ecx, DWORD PTR _nMsb$7[ebp]
	add	ecx, 1
	mov	edx, 1
	shl	edx, cl
	mov	DWORD PTR _ddsd$10[ebp+12], edx
$LN36@Create:

; 577  : 
; 578  : 			nMsb = FindMsb(ddsd.dwHeight);

	mov	eax, DWORD PTR _ddsd$10[ebp+8]
	push	eax
	call	?FindMsb@@YAHK@Z			; FindMsb
	add	esp, 4
	mov	DWORD PTR tv351[ebp], eax
	mov	ecx, DWORD PTR tv351[ebp]
	mov	DWORD PTR _nMsb$7[ebp], ecx

; 579  : 			if(ddsd.dwHeight & ~(1 << nMsb)) ddsd.dwHeight = 1 << (nMsb + 1);

	mov	edx, 1
	mov	ecx, DWORD PTR _nMsb$7[ebp]
	shl	edx, cl
	not	edx
	and	edx, DWORD PTR _ddsd$10[ebp+8]
	je	SHORT $LN38@Create
	mov	ecx, DWORD PTR _nMsb$7[ebp]
	add	ecx, 1
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR _ddsd$10[ebp+8], eax
$LN38@Create:

; 580  : 		}
; 581  : 
; 582  : 		// Force square
; 583  : 		if(ddsd.dwWidth != ddsd.dwHeight && (m_pD3DHWDeviceDesc->dpcTriCaps.dwTextureCaps & D3DPTEXTURECAPS_SQUAREONLY))

	mov	ecx, DWORD PTR _ddsd$10[ebp+12]
	cmp	ecx, DWORD PTR _ddsd$10[ebp+8]
	je	SHORT $LN34@Create
	mov	edx, DWORD PTR ?m_pD3DHWDeviceDesc@TextureHandle@@1PAU_D3DDeviceDesc7@@A ; TextureHandle::m_pD3DHWDeviceDesc
	mov	eax, DWORD PTR [edx+92]
	and	eax, 32					; 00000020H
	je	SHORT $LN34@Create

; 584  : 		{
; 585  : 			ddsd.dwWidth = ddsd.dwHeight = max(ddsd.dwWidth, ddsd.dwHeight);

	mov	ecx, DWORD PTR _ddsd$10[ebp+12]
	cmp	ecx, DWORD PTR _ddsd$10[ebp+8]
	jbe	SHORT $LN45@Create
	mov	edx, DWORD PTR _ddsd$10[ebp+12]
	mov	DWORD PTR tv138[ebp], edx
	jmp	SHORT $LN46@Create
$LN45@Create:
	mov	eax, DWORD PTR _ddsd$10[ebp+8]
	mov	DWORD PTR tv138[ebp], eax
$LN46@Create:
	mov	ecx, DWORD PTR tv138[ebp]
	mov	DWORD PTR _ddsd$10[ebp+8], ecx
	mov	edx, DWORD PTR _ddsd$10[ebp+8]
	mov	DWORD PTR _ddsd$10[ebp+12], edx
$LN34@Create:

; 586  : 		}
; 587  : 
; 588  : 		if(dwFlags & FLAG_RENDERTARGET)

	mov	eax, DWORD PTR _dwFlags$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN33@Create

; 589  : 		{
; 590  : 			// Can't render to managed surfaces
; 591  : 			dwFlags |= FLAG_NOTMANAGED | FLAG_MATCHPRIMARY;

	mov	ecx, DWORD PTR _dwFlags$[ebp]
	or	ecx, 36					; 00000024H
	mov	DWORD PTR _dwFlags$[ebp], ecx

; 592  : 
; 593  : 			// HW devices cannot render to system memory surfaces
; 594  : 			if (rc && (rc->m_eDeviceCategory >= DXContext::D3DDeviceCategory_Hardware))

	cmp	DWORD PTR _rc, 0
	je	SHORT $LN32@Create
	mov	edx, DWORD PTR _rc
	cmp	DWORD PTR [edx+60], 2
	jl	SHORT $LN32@Create

; 595  : 			{
; 596  : 				dwFlags |= FLAG_INLOCALVIDMEM;

	mov	eax, DWORD PTR _dwFlags$[ebp]
	or	eax, 8
	mov	DWORD PTR _dwFlags$[ebp], eax
$LN32@Create:

; 597  : 			}
; 598  : 
; 599  : 			ddsd.ddsCaps.dwCaps |= DDSCAPS_3DDEVICE;

	mov	ecx, DWORD PTR _ddsd$10[ebp+104]
	or	ecx, 8192				; 00002000H
	mov	DWORD PTR _ddsd$10[ebp+104], ecx
$LN33@Create:

; 600  : 		}
; 601  : 
; 602  : 	    // Turn on texture management for HW devices
; 603  : 		if (rc && (rc->m_eDeviceCategory >= DXContext::D3DDeviceCategory_Hardware))

	cmp	DWORD PTR _rc, 0
	je	SHORT $LN31@Create
	mov	edx, DWORD PTR _rc
	cmp	DWORD PTR [edx+60], 2
	jl	SHORT $LN31@Create

; 604  : 		{
; 605  : 			if( !(dwFlags & FLAG_NOTMANAGED) )

	mov	eax, DWORD PTR _dwFlags$[ebp]
	and	eax, 4
	jne	SHORT $LN30@Create

; 606  : 			{
; 607  : 				ddsd.ddsCaps.dwCaps2 |= DDSCAPS2_TEXTUREMANAGE;

	mov	ecx, DWORD PTR _ddsd$10[ebp+108]
	or	ecx, 16					; 00000010H
	mov	DWORD PTR _ddsd$10[ebp+108], ecx

; 608  : 
; 609  : 				// Do not create system memory copies
; 610  : 				if(g_bEnableNonPersistentTextures)

	movzx	edx, BYTE PTR ?g_bEnableNonPersistentTextures@@3_NA ; g_bEnableNonPersistentTextures
	test	edx, edx
	je	SHORT $LN29@Create

; 611  : 					ddsd.ddsCaps.dwCaps2 |= DDSCAPS2_DONOTPERSIST;

	mov	eax, DWORD PTR _ddsd$10[ebp+108]
	or	eax, 262144				; 00040000H
	mov	DWORD PTR _ddsd$10[ebp+108], eax
$LN29@Create:

; 612  : 			}

	jmp	SHORT $LN28@Create
$LN30@Create:

; 613  : 			// Note: mutually exclusive with texture management
; 614  : 			else if(dwFlags & FLAG_INLOCALVIDMEM){

	mov	ecx, DWORD PTR _dwFlags$[ebp]
	and	ecx, 8
	je	SHORT $LN28@Create

; 615  : 				ddsd.ddsCaps.dwCaps |= DDSCAPS_VIDEOMEMORY;

	mov	edx, DWORD PTR _ddsd$10[ebp+104]
	or	edx, 16384				; 00004000H
	mov	DWORD PTR _ddsd$10[ebp+104], edx
$LN28@Create:

; 616  : 			}
; 617  : 		}
; 618  : 		else{

	jmp	SHORT $LN26@Create
$LN31@Create:

; 619  : 			ddsd.ddsCaps.dwCaps  |= DDSCAPS_SYSTEMMEMORY;

	mov	eax, DWORD PTR _ddsd$10[ebp+104]
	or	eax, 2048				; 00000800H
	mov	DWORD PTR _ddsd$10[ebp+104], eax
$LN26@Create:

; 620  : 		}
; 621  : 
; 622  : 		if(dwFlags & FLAG_HINT_STATIC){

	mov	ecx, DWORD PTR _dwFlags$[ebp]
	and	ecx, 2
	je	SHORT $LN25@Create

; 623  : 			ddsd.ddsCaps.dwCaps2 |= DDSCAPS2_HINTSTATIC;

	mov	edx, DWORD PTR _ddsd$10[ebp+108]
	or	edx, 8
	mov	DWORD PTR _ddsd$10[ebp+108], edx
$LN25@Create:

; 624  : 		}
; 625  : 
; 626  : 		if(dwFlags & FLAG_HINT_DYNAMIC){

	mov	eax, DWORD PTR _dwFlags$[ebp]
	and	eax, 1
	je	SHORT $LN24@Create

; 627  : 			ddsd.ddsCaps.dwCaps2 |= DDSCAPS2_HINTDYNAMIC;

	mov	ecx, DWORD PTR _ddsd$10[ebp+108]
	or	ecx, 4
	mov	DWORD PTR _ddsd$10[ebp+108], ecx
$LN24@Create:

; 628  : 		}
; 629  : 
; 630  : 		if( m_dwFlags & MPR_TI_PALETTE ){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	and	eax, 128				; 00000080H
	je	$LN23@Create

; 631  : 			ShiAssert(m_pPalAttach);
; 632  : 
; 633  : 			if( m_dwFlags & MPR_TI_ALPHA ){

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	and	edx, 64					; 00000040H
	je	SHORT $LN22@Create

; 634  : 				if(m_dwFlags & MPR_TI_CHROMAKEY){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	and	ecx, 32					; 00000020H
	je	SHORT $LN21@Create

; 635  : 					ddsd.ddpfPixelFormat = m_arrPF[TEX_CAT_CHROMA_ALPHA];

	mov	esi, 32					; 00000020H
	imul	esi, 3
	add	esi, OFFSET ?m_arrPF@TextureHandle@@1PAU_DDPIXELFORMAT@@A ; TextureHandle::m_arrPF
	mov	ecx, 8
	lea	edi, DWORD PTR _ddsd$10[ebp+72]
	rep movsd

; 636  : 				}
; 637  : 				else{

	jmp	SHORT $LN20@Create
$LN21@Create:

; 638  : 					ddsd.ddpfPixelFormat = m_arrPF[TEX_CAT_ALPHA];

	mov	esi, 32					; 00000020H
	shl	esi, 1
	add	esi, OFFSET ?m_arrPF@TextureHandle@@1PAU_DDPIXELFORMAT@@A ; TextureHandle::m_arrPF
	mov	ecx, 8
	lea	edi, DWORD PTR _ddsd$10[ebp+72]
	rep movsd
$LN20@Create:

; 639  : 				}

	jmp	SHORT $LN19@Create
$LN22@Create:

; 640  : 			}
; 641  : 			else if(m_dwFlags & MPR_TI_CHROMAKEY){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	and	eax, 32					; 00000020H
	je	SHORT $LN18@Create

; 642  : 				ddsd.ddpfPixelFormat = m_arrPF[TEX_CAT_CHROMA];

	mov	esi, 32					; 00000020H
	shl	esi, 0
	add	esi, OFFSET ?m_arrPF@TextureHandle@@1PAU_DDPIXELFORMAT@@A ; TextureHandle::m_arrPF
	mov	ecx, 8
	lea	edi, DWORD PTR _ddsd$10[ebp+72]
	rep movsd

; 643  : 			}
; 644  : 			else{

	jmp	SHORT $LN19@Create
$LN18@Create:

; 645  : 				ddsd.ddpfPixelFormat = m_arrPF[TEX_CAT_DEFAULT];

	mov	esi, 32					; 00000020H
	imul	esi, 0
	add	esi, OFFSET ?m_arrPF@TextureHandle@@1PAU_DDPIXELFORMAT@@A ; TextureHandle::m_arrPF
	mov	ecx, 8
	lea	edi, DWORD PTR _ddsd$10[ebp+72]
	rep movsd
$LN19@Create:

; 646  : 			}
; 647  : 		}
; 648  : 		else{

	jmp	$LN16@Create
$LN23@Create:

; 649  : 			if( dwFlags & FLAG_MATCHPRIMARY )

	mov	ecx, DWORD PTR _dwFlags$[ebp]
	and	ecx, 32					; 00000020H
	je	$LN15@Create

; 650  : 			{
; 651  : 				IDirectDrawSurface7Ptr pDDS;

	lea	ecx, DWORD PTR _pDDS$4[ebp]
	call	??0?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 652  : 				CheckHR(m_pD3DD->GetRenderTarget(&pDDS));

	lea	ecx, DWORD PTR _pDDS$4[ebp]
	call	??I?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEPAPAUIDirectDrawSurface7@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator&
	push	eax
	mov	edx, DWORD PTR ?m_pD3DD@TextureHandle@@1PAUIDirect3DDevice7@@A ; TextureHandle::m_pD3DD
	push	edx
	mov	eax, DWORD PTR ?m_pD3DD@TextureHandle@@1PAUIDirect3DDevice7@@A ; TextureHandle::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	mov	DWORD PTR tv193[ebp], eax
	mov	eax, DWORD PTR tv193[ebp]
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 653  : 
; 654  : 				IDirectDraw7Ptr pDD;

	lea	ecx, DWORD PTR _pDD$5[ebp]
	call	??0?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >
	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 655  : 				CheckHR(pDDS->GetDDInterface((void**)&pDD));

	lea	ecx, DWORD PTR _pDDS$4[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDrawSurface7@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator->
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR tv204[ebp]
	mov	DWORD PTR tv209[ebp], ecx
	lea	ecx, DWORD PTR _pDD$5[ebp]
	call	??I?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEPAPAUIDirectDraw7@@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator&
	push	eax
	mov	edx, DWORD PTR tv209[ebp]
	push	edx
	mov	eax, DWORD PTR tv209[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+144]
	call	edx
	mov	DWORD PTR tv352[ebp], eax
	mov	eax, DWORD PTR tv352[ebp]
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 656  : 
; 657  : 				DDSURFACEDESC2 ddsdMode;
; 658  : 				ZeroMemory(&ddsdMode,sizeof(ddsdMode));

	push	124					; 0000007cH
	push	0
	lea	ecx, DWORD PTR _ddsdMode$9[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 659  : 				ddsdMode.dwSize = sizeof(ddsdMode);

	mov	DWORD PTR _ddsdMode$9[ebp], 124		; 0000007cH

; 660  : 
; 661  : 				CheckHR(pDD->GetDisplayMode(&ddsdMode));

	lea	ecx, DWORD PTR _pDD$5[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDraw7@@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator->
	mov	DWORD PTR tv353[ebp], eax
	mov	edx, DWORD PTR tv353[ebp]
	mov	DWORD PTR tv223[ebp], edx
	lea	eax, DWORD PTR _ddsdMode$9[ebp]
	push	eax
	mov	ecx, DWORD PTR tv223[ebp]
	push	ecx
	mov	edx, DWORD PTR tv223[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+48]
	call	ecx
	mov	DWORD PTR tv354[ebp], eax
	mov	edx, DWORD PTR tv354[ebp]
	push	edx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 662  : 				ddsd.ddpfPixelFormat = ddsdMode.ddpfPixelFormat;

	mov	ecx, 8
	lea	esi, DWORD PTR _ddsdMode$9[ebp+72]
	lea	edi, DWORD PTR _ddsd$10[ebp+72]
	rep movsd

; 663  : 			}

	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _pDD$5[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _pDDS$4[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
	jmp	SHORT $LN16@Create
$LN15@Create:

; 664  : 			else if( m_dwFlags & MPR_TI_DDS ){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	and	ecx, 256				; 00000100H
	je	SHORT $LN16@Create

; 665  : 				ddsd.ddpfPixelFormat.dwSize = 32;

	mov	DWORD PTR _ddsd$10[ebp+72], 32		; 00000020H

; 666  : 				ddsd.ddpfPixelFormat.dwFlags |= DDPF_FOURCC;

	mov	edx, DWORD PTR _ddsd$10[ebp+76]
	or	edx, 4
	mov	DWORD PTR _ddsd$10[ebp+76], edx

; 667  : 
; 668  : 				if( m_dwFlags&MPR_TI_DXT1 )	{

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	and	ecx, 512				; 00000200H
	je	SHORT $LN12@Create

; 669  : 					ddsd.ddpfPixelFormat.dwFourCC = MAKEFOURCC('D','X','T','1');

	mov	DWORD PTR _ddsd$10[ebp+80], 827611204	; 31545844H
	jmp	SHORT $LN16@Create
$LN12@Create:

; 670  : 				}
; 671  : 				else if( m_dwFlags&MPR_TI_DXT3 ){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	and	eax, 1024				; 00000400H
	je	SHORT $LN10@Create

; 672  : 					ddsd.ddpfPixelFormat.dwFourCC = MAKEFOURCC('D','X','T','3');

	mov	DWORD PTR _ddsd$10[ebp+80], 861165636	; 33545844H
	jmp	SHORT $LN16@Create
$LN10@Create:

; 673  : 				}
; 674  : 				else if( m_dwFlags&MPR_TI_DXT5 ){

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	and	edx, 2048				; 00000800H
	je	SHORT $LN16@Create

; 675  : 					ddsd.ddpfPixelFormat.dwFourCC = MAKEFOURCC('D','X','T','5');

	mov	DWORD PTR _ddsd$10[ebp+80], 894720068	; 35545844H
$LN16@Create:

; 676  : 				}
; 677  : 			}
; 678  : 		}
; 679  : 
; 680  : 		// Create the surface
; 681  : 		HRESULT hr = rc->m_pDD->CreateSurface(&ddsd,&m_pDDS, NULL);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ddsd$10[ebp]
	push	ecx
	mov	edx, DWORD PTR _rc
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _rc
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	mov	DWORD PTR tv355[ebp], eax
	mov	edx, DWORD PTR tv355[ebp]
	mov	DWORD PTR _hr$6[ebp], edx

; 682  : 
; 683  : 		if(FAILED(hr)){

	cmp	DWORD PTR _hr$6[ebp], 0
	jge	$LN7@Create

; 684  : 			if(hr == DDERR_OUTOFVIDEOMEMORY){

	cmp	DWORD PTR _hr$6[ebp], -2005532292	; 8876017cH
	jne	SHORT $LN6@Create

; 685  : 				MonoPrint("TextureHandle::Create - EVICTING MANAGED TEXTURES !!\n");

	push	OFFSET ??_C@_0DG@ODIPJGIB@TextureHandle?3?3Create?5?9?5EVICTING@
	call	_MonoPrint
	add	esp, 4

; 686  : 
; 687  : 				// If we are out of video memory, evict all managed textures and retry
; 688  : 				CheckHR(rc->m_pD3D->EvictManagedTextures());

	mov	eax, DWORD PTR _rc
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _rc
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	mov	DWORD PTR tv356[ebp], eax
	mov	eax, DWORD PTR tv356[ebp]
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 689  : 				CheckHR(rc->m_pDD->CreateSurface(&ddsd, &m_pDDS, NULL));

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR _ddsd$10[ebp]
	push	edx
	mov	eax, DWORD PTR _rc
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _rc
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	mov	DWORD PTR tv357[ebp], eax
	mov	eax, DWORD PTR tv357[ebp]
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 690  : 			}
; 691  : 			else {

	jmp	SHORT $LN7@Create
$LN6@Create:

; 692  : 				throw _com_error(hr);

	push	0
	push	0
	mov	ecx, DWORD PTR _hr$6[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z	; _com_error::_com_error
	push	OFFSET __TI1?AV_com_error@@
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	call	__CxxThrowException@8
$LN7@Create:

; 693  : 			}
; 694  : 		}
; 695  : 
; 696  : 		m_eSurfFmt = D3DXMakeSurfaceFormat(&ddsd.ddpfPixelFormat);

	lea	eax, DWORD PTR _ddsd$10[ebp+72]
	push	eax
	call	_D3DXMakeSurfaceFormat@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 697  : 
; 698  : 		m_nActualWidth = ddsd.dwWidth;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _ddsd$10[ebp+12]
	mov	DWORD PTR [edx+16], eax

; 699  : 		m_nActualHeight = ddsd.dwHeight;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ddsd$10[ebp+8]
	mov	DWORD PTR [ecx+20], edx

; 700  : 
; 701  : 		// Attach DirectDraw palette if real palettized texture format created
; 702  : 		switch(m_eSurfFmt)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv323[ebp], ecx
	cmp	DWORD PTR tv323[ebp], 7
	je	SHORT $LN2@Create
	jmp	SHORT $LN3@Create
$LN2@Create:

; 703  : 		{
; 704  : 			case D3DX_SF_PALETTE8:
; 705  : 			{
; 706  : 				if (m_pDDS && m_pPalAttach)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN3@Create
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN3@Create

; 707  : 					m_pDDS->SetPalette(m_pPalAttach->m_pIDDP);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+124]
	call	eax
$LN3@Create:

; 708  : 				break;
; 709  : 			}
; 710  : 		}
; 711  : 
; 712  : 		#ifdef _DEBUG
; 713  : 		if(m_pDDS)
; 714  : 		{
; 715  : 			DDSURFACEDESC2 ddsd;
; 716  : 			ZeroMemory(&ddsd,sizeof(ddsd));
; 717  : 			ddsd.dwSize = sizeof(ddsd);
; 718  : 			HRESULT hr = m_pDDS->GetSurfaceDesc(&ddsd);
; 719  : 			ShiAssert(SUCCEEDED(hr));
; 720  : 
; 721  : #ifdef DEBUG_TEXTURE
; 722  : 			MonoPrint("Texture: %s [%s] created in %s memory\n",
; 723  : 				strName,arrSurfFmt2String[m_eSurfFmt], 
; 724  : 				ddsd.ddsCaps.dwCaps & DDSCAPS_SYSTEMMEMORY  ? "SYSTEM" :
; 725  : 				(ddsd.ddsCaps.dwCaps & DDSCAPS_LOCALVIDMEM ? "VIDEO" : "AGP"));
; 726  : #endif
; 727  : 
; 728  : 			if(ddsd.ddsCaps.dwCaps & DDSCAPS_SYSTEMMEMORY)
; 729  : 				InterlockedExchangeAdd((long *)&m_dwTotalBytes,ddsd.lPitch * ddsd.dwHeight);
; 730  : 		}
; 731  : 		#endif
; 732  : 
; 733  : 		return true;

	mov	al, 1
	jmp	SHORT $LN44@Create
__catch$?Create@TextureHandle@@QAE_NPADKGGGK@Z$0:

; 734  : 	}
; 735  : 
; 736  : 	catch(_com_error e)

	mov	BYTE PTR __$EHRec$[ebp+12], 4

; 737  : 	{
; 738  : 		ReportTextureLoadError(e.Error());

	push	0
	lea	ecx, DWORD PTR _e$2[ebp]
	call	?Error@_com_error@@QBEJXZ		; _com_error::Error
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReportTextureLoadError@TextureHandle@@IAEXJ_N@Z ; TextureHandle::ReportTextureLoadError

; 739  : 		return false;

	mov	BYTE PTR $T8[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _e$2[ebp]
	call	??1_com_error@@UAE@XZ			; _com_error::~_com_error
	mov	eax, $LN53@Create
	ret	0

; 740  : 	}

	mov	eax, __tryend$?Create@TextureHandle@@QAE_NPADKGGGK@Z$1
	ret	0
__tryend$?Create@TextureHandle@@QAE_NPADKGGGK@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN44@Create
$LN53@Create:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 739  : 		return false;

	mov	al, BYTE PTR $T8[ebp]
$LN44@Create:

; 741  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Create@TextureHandle@@QAE_NPADKGGGK@Z$2:
	lea	ecx, DWORD PTR _pDDS$4[ebp]
	jmp	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
__unwindfunclet$?Create@TextureHandle@@QAE_NPADKGGGK@Z$3:
	lea	ecx, DWORD PTR _pDD$5[ebp]
	jmp	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >
__unwindfunclet$?Create@TextureHandle@@QAE_NPADKGGGK@Z$4:
	lea	ecx, DWORD PTR _e$2[ebp]
	jmp	??1_com_error@@UAE@XZ			; _com_error::~_com_error
__ehhandler$?Create@TextureHandle@@QAE_NPADKGGGK@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-384]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Create@TextureHandle@@QAE_NPADKGGGK@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Create@TextureHandle@@QAE_NPADKGGGK@Z ENDP		; TextureHandle::Create
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
??1TextureHandle@@QAE@XZ PROC				; TextureHandle::~TextureHandle
; _this$ = ecx

; 493  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 494  : #ifdef _DEBUG
; 495  : 	InterlockedDecrement((long *)&m_dwNumHandles);	// Number of instances
; 496  : 	//InterlockedExchangeAdd((long *)&m_dwTotalBytes,-sizeof(*this));
; 497  : 	//InterlockedExchangeAdd((long *)&m_dwTotalBytes,-m_strName.size());
; 498  : 
; 499  : 	if( m_pDDS ){
; 500  : 		DDSURFACEDESC2 ddsd;
; 501  : 		ZeroMemory(&ddsd,sizeof(ddsd));
; 502  : 		ddsd.dwSize = sizeof(ddsd);
; 503  : 		HRESULT hr = m_pDDS->GetSurfaceDesc(&ddsd);
; 504  : 		ShiAssert(SUCCEEDED(hr));
; 505  : 
; 506  : 		if(ddsd.ddsCaps.dwCaps & DDSCAPS_SYSTEMMEMORY){
; 507  : 			//InterlockedExchangeAdd((long *)&m_dwTotalBytes,-(ddsd.lPitch * ddsd.dwHeight));
; 508  : 		}
; 509  : 	}
; 510  : 
; 511  : 	if( m_pImageData && m_bImageDataOwned ){
; 512  : 		DWORD dwSize = m_nImageDataStride * m_nHeight;
; 513  : /*		InterlockedExchangeAdd((long *)&m_dwTotalBytes,-dwSize);
; 514  : 		InterlockedExchangeAdd((long *)&m_dwBitmapBytes,-dwSize);	*/	
; 515  : 	}
; 516  : #endif
; 517  : 
; 518  : 	// JB 010318 CTD
; 519  : 	if (m_pDDS && !F4IsBadReadPtr(m_pDDS,sizeof(IDirectDrawSurface7))) m_pDDS->Release();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@TextureHan
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@TextureHan
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN3@TextureHan:

; 520  : 	m_pDDS = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0

; 521  : 	if (m_pPalAttach) m_pPalAttach->DetachFromTexture(this);

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN2@TextureHan
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?DetachFromTexture@PaletteHandle@@QAEXPAVTextureHandle@@@Z ; PaletteHandle::DetachFromTexture
$LN2@TextureHan:

; 522  : 	if (m_pImageData && m_bImageDataOwned) delete[] m_pImageData;

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN4@TextureHan
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+40]
	test	ecx, ecx
	je	SHORT $LN4@TextureHan
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN4@TextureHan:

; 523  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1TextureHandle@@QAE@XZ ENDP				; TextureHandle::~TextureHandle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\tex.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0TextureHandle@@QAE@XZ PROC				; TextureHandle::TextureHandle
; _this$ = ecx

; 475  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 476  : 	m_pDDS = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 477  : 	m_eSurfFmt = D3DX_SF_UNKNOWN;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 478  : 	m_nWidth = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 479  : 	m_nHeight = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 480  : 	m_dwFlags = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0

; 481  : 	m_dwChromaKey = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], 0

; 482  : 	m_pPalAttach = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0

; 483  : 	m_pImageData = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], 0

; 484  : 	m_nImageDataStride = -1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+44], -1

; 485  : 
; 486  : 	#ifdef _DEBUG
; 487  : 	InterlockedIncrement((long *)&m_dwNumHandles);	// Number of instances
; 488  : 	InterlockedExchangeAdd((long *)&m_dwTotalBytes,sizeof(*this));
; 489  : 	#endif
; 490  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0TextureHandle@@QAE@XZ ENDP				; TextureHandle::TextureHandle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\image.h
;	COMDAT ?ReadTextureImage@@YAHPAVCImageFileMemory@@@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
_i$ = -4						; size = 4
_fi$ = 8						; size = 4
?ReadTextureImage@@YAHPAVCImageFileMemory@@@Z PROC	; ReadTextureImage, COMDAT

; 179  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 180  : 	GLint	i;
; 181  : 	switch (fi -> imageType) {

	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR tv65[ebp], ecx
	mov	edx, DWORD PTR tv65[ebp]
	sub	edx, 1
	mov	DWORD PTR tv65[ebp], edx
	cmp	DWORD PTR tv65[ebp], 6
	ja	$LN1@ReadTextur
	mov	eax, DWORD PTR tv65[ebp]
	jmp	DWORD PTR $LN13@ReadTextur[eax*4]
$LN8@ReadTextur:

; 182  : 		case IMAGE_TYPE_GIF:
; 183  : 			i = UnpackGIF (fi);

	mov	ecx, DWORD PTR _fi$[ebp]
	push	ecx
	call	?UnpackGIF@@YAHPAVCImageFileMemory@@@Z	; UnpackGIF
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 184  : 			break;

	jmp	SHORT $LN9@ReadTextur
$LN7@ReadTextur:

; 185  : 		case IMAGE_TYPE_LBM:
; 186  : 			i = UnpackLBM (fi);

	mov	edx, DWORD PTR _fi$[ebp]
	push	edx
	call	?UnpackLBM@@YAHPAVCImageFileMemory@@@Z	; UnpackLBM
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 187  : 			break;

	jmp	SHORT $LN9@ReadTextur
$LN6@ReadTextur:

; 188  : 		case IMAGE_TYPE_PCX:
; 189  : 			i = UnpackPCX (fi);

	mov	eax, DWORD PTR _fi$[ebp]
	push	eax
	call	?UnpackPCX@@YAHPAVCImageFileMemory@@@Z	; UnpackPCX
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 190  : 			break;

	jmp	SHORT $LN9@ReadTextur
$LN5@ReadTextur:

; 191  : 		case IMAGE_TYPE_BMP:
; 192  : 			i = ReadBMP (fi);

	mov	ecx, DWORD PTR _fi$[ebp]
	push	ecx
	call	?ReadBMP@@YAHPAVCImageFileMemory@@@Z	; ReadBMP
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 193  : 			break;

	jmp	SHORT $LN9@ReadTextur
$LN4@ReadTextur:

; 194  : 		case IMAGE_TYPE_APL:
; 195  : 			i = ReadAPL (fi);

	mov	edx, DWORD PTR _fi$[ebp]
	push	edx
	call	?ReadAPL@@YAHPAVCImageFileMemory@@@Z	; ReadAPL
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 196  : 			break;

	jmp	SHORT $LN9@ReadTextur
$LN3@ReadTextur:

; 197  : 		case IMAGE_TYPE_TGA:
; 198  : 			i = ReadTGA (fi);

	mov	eax, DWORD PTR _fi$[ebp]
	push	eax
	call	?ReadTGA@@YAHPAVCImageFileMemory@@@Z	; ReadTGA
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 199  : 			break;

	jmp	SHORT $LN9@ReadTextur
$LN2@ReadTextur:

; 200  : 
; 201  : 		//JAM 22Sep03
; 202  : 		case IMAGE_TYPE_DDS:
; 203  : 			i = ReadDDS (fi);

	mov	ecx, DWORD PTR _fi$[ebp]
	push	ecx
	call	?ReadDDS@@YAHPAVCImageFileMemory@@@Z	; ReadDDS
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 204  : 			break;

	jmp	SHORT $LN9@ReadTextur
$LN1@ReadTextur:

; 205  : 		//JAM
; 206  : 
; 207  : 		default:
; 208  : 			i = NO_CODE;

	mov	DWORD PTR _i$[ebp], -1
$LN9@ReadTextur:

; 209  : 			break;
; 210  : 	}
; 211  : 	fi -> glCloseFileMem ();

	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glCloseFileMem@CFileMemory@@QAEXXZ	; CFileMemory::glCloseFileMem

; 212  : 	return i;

	mov	eax, DWORD PTR _i$[ebp]

; 213  : };

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@ReadTextur:
	DD	$LN8@ReadTextur
	DD	$LN7@ReadTextur
	DD	$LN6@ReadTextur
	DD	$LN5@ReadTextur
	DD	$LN4@ReadTextur
	DD	$LN3@ReadTextur
	DD	$LN2@ReadTextur
?ReadTextureImage@@YAHPAVCImageFileMemory@@@Z ENDP	; ReadTextureImage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\image.h
;	COMDAT ?CheckImageType@@YAHPBD@Z
_TEXT	SEGMENT
_i$ = -20						; size = 4
_ext$ = -16						; size = 10
__$ArrayPad$ = -4					; size = 4
_file$ = 8						; size = 4
?CheckImageType@@YAHPBD@Z PROC				; CheckImageType, COMDAT

; 149  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 150  : 	char	ext[10];
; 151  : 	GLint	i;
; 152  : 
; 153  : 	glGetFileExtension (file, ext);

	lea	eax, DWORD PTR _ext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	call	?glGetFileExtension@@YAXPBDPAD@Z	; glGetFileExtension
	add	esp, 8

; 154  : 	if (!strnicmp (ext, "GIF", 3)) 

	push	3
	push	OFFSET ??_C@_03BBABOKL@GIF?$AA@
	lea	edx, DWORD PTR _ext$[ebp]
	push	edx
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN14@CheckImage

; 155  : 		i = IMAGE_TYPE_GIF;

	mov	DWORD PTR _i$[ebp], 1
	jmp	$LN13@CheckImage
$LN14@CheckImage:

; 156  : 	else if (!strnicmp (ext,"LBM",3)) 

	push	3
	push	OFFSET ??_C@_03DJLAKPIA@LBM?$AA@
	lea	eax, DWORD PTR _ext$[ebp]
	push	eax
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN12@CheckImage

; 157  : 		i = IMAGE_TYPE_LBM;

	mov	DWORD PTR _i$[ebp], 2
	jmp	$LN13@CheckImage
$LN12@CheckImage:

; 158  : 	else if (!strnicmp (ext,"PCX",3)) 

	push	3
	push	OFFSET ??_C@_03BFAIMLIE@PCX?$AA@
	lea	ecx, DWORD PTR _ext$[ebp]
	push	ecx
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN10@CheckImage

; 159  : 		i = IMAGE_TYPE_PCX;

	mov	DWORD PTR _i$[ebp], 3
	jmp	$LN13@CheckImage
$LN10@CheckImage:

; 160  : 	else if (!strnicmp (ext,"BMP",3)) 

	push	3
	push	OFFSET ??_C@_03CNFPPDJC@BMP?$AA@
	lea	edx, DWORD PTR _ext$[ebp]
	push	edx
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN8@CheckImage

; 161  : 		i = IMAGE_TYPE_BMP;

	mov	DWORD PTR _i$[ebp], 4
	jmp	SHORT $LN13@CheckImage
$LN8@CheckImage:

; 162  : 	else if (!strnicmp (ext,"APL",3)) 

	push	3
	push	OFFSET ??_C@_03MNGDDBAC@APL?$AA@
	lea	eax, DWORD PTR _ext$[ebp]
	push	eax
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN6@CheckImage

; 163  : 		i = IMAGE_TYPE_APL;

	mov	DWORD PTR _i$[ebp], 5
	jmp	SHORT $LN13@CheckImage
$LN6@CheckImage:

; 164  : 	else if (!strnicmp (ext,"TGA",3)) 

	push	3
	push	OFFSET ??_C@_03GGDFNBH@TGA?$AA@
	lea	ecx, DWORD PTR _ext$[ebp]
	push	ecx
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN4@CheckImage

; 165  : 		i = IMAGE_TYPE_TGA;

	mov	DWORD PTR _i$[ebp], 6
	jmp	SHORT $LN13@CheckImage
$LN4@CheckImage:

; 166  : 
; 167  : 	//JAM 22Sep03
; 168  : 	else if (!strnicmp (ext,"DDS",3))

	push	3
	push	OFFSET ??_C@_03CMMIMEAC@DDS?$AA@
	lea	edx, DWORD PTR _ext$[ebp]
	push	edx
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN2@CheckImage

; 169  : 		i = IMAGE_TYPE_DDS;

	mov	DWORD PTR _i$[ebp], 7

; 170  : 	//JAM
; 171  : 
; 172  : 	else

	jmp	SHORT $LN13@CheckImage
$LN2@CheckImage:

; 173  : 		i = IMAGE_TYPE_UNKNOWN;

	mov	DWORD PTR _i$[ebp], -1
$LN13@CheckImage:

; 174  : 
; 175  : 	return	i;

	mov	eax, DWORD PTR _i$[ebp]

; 176  : };

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?CheckImageType@@YAHPBD@Z ENDP				; CheckImageType
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GCImageFileMemory@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCImageFileMemory@@UAEPAXI@Z PROC			; CImageFileMemory::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CImageFileMemory@@UAE@XZ		; CImageFileMemory::~CImageFileMemory
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCImageFileMemory@@UAEPAXI@Z ENDP			; CImageFileMemory::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\filemem.h
;	COMDAT ??1CImageFileMemory@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CImageFileMemory@@UAE@XZ PROC			; CImageFileMemory::~CImageFileMemory, COMDAT
; _this$ = ecx

; 42   : 	virtual ~CImageFileMemory() {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CImageFileMemory@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CFileMemory@@UAE@XZ			; CFileMemory::~CFileMemory
	mov	esp, ebp
	pop	ebp
	ret	0
??1CImageFileMemory@@UAE@XZ ENDP			; CImageFileMemory::~CImageFileMemory
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GCFileMemory@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCFileMemory@@UAEPAXI@Z PROC				; CFileMemory::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CFileMemory@@UAE@XZ			; CFileMemory::~CFileMemory
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCFileMemory@@UAEPAXI@Z ENDP				; CFileMemory::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\filemem.h
;	COMDAT ??1CFileMemory@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CFileMemory@@UAE@XZ PROC				; CFileMemory::~CFileMemory, COMDAT
; _this$ = ecx

; 14   : 	virtual ~CFileMemory()	{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CFileMemory@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1CFileIO@@UAE@XZ			; CFileIO::~CFileIO
	mov	esp, ebp
	pop	ebp
	ret	0
??1CFileMemory@@UAE@XZ ENDP				; CFileMemory::~CFileMemory
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GCFileIO@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCFileIO@@UAEPAXI@Z PROC				; CFileIO::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CFileIO@@UAE@XZ			; CFileIO::~CFileIO
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCFileIO@@UAEPAXI@Z ENDP				; CFileIO::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\fileio.h
;	COMDAT ??1CFileIO@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CFileIO@@UAE@XZ PROC					; CFileIO::~CFileIO, COMDAT
; _this$ = ecx

; 25   : 	virtual ~CFileIO () {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CFileIO@@6B@

; 26   : 		if (file != -1) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], -1
	je	SHORT $LN2@CFileIO

; 27   : 			closefile();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?closefile@CFileIO@@QAEXXZ		; CFileIO::closefile
$LN2@CFileIO:

; 28   : 		}
; 29   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??1CFileIO@@UAE@XZ ENDP					; CFileIO::~CFileIO
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\grinline.h
;	COMDAT ?glGetFileExtension@@YAXPBDPAD@Z
_TEXT	SEGMENT
_lastdot$ = -4						; size = 4
_file$ = 8						; size = 4
_ext$ = 12						; size = 4
?glGetFileExtension@@YAXPBDPAD@Z PROC			; glGetFileExtension, COMDAT

; 127  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 128  : #if 0
; 129  : 	char	prevchar, currchar, nextchar;
; 130  : 
; 131  : 	prevchar = '.';
; 132  : 	while (*file != 0) {
; 133  : 		currchar = *file++;
; 134  : 		nextchar = *file;
; 135  : 		if (currchar == '.' && 
; 136  : 			((prevchar != '.' && prevchar != '\\') || 
; 137  : 			 (nextchar != '.' && nextchar != '\\'))) break;
; 138  : 		prevchar = currchar;
; 139  : 	}
; 140  : #else
; 141  : 
; 142  : 
; 143  : // Visual C/C++ 2010 migration fix
; 144  : //pmvstrm this the change
; 145  : 	const char *lastdot;
; 146  : 
; 147  : //pmvstrm this is the original
; 148  : //char *lastdot;
; 149  : 
; 150  : 	lastdot = strrchr(file, '.');

	push	46					; 0000002eH
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_strrchr
	add	esp, 8
	mov	DWORD PTR _lastdot$[ebp], eax

; 151  : 
; 152  : 	if(lastdot) {

	cmp	DWORD PTR _lastdot$[ebp], 0
	je	SHORT $LN4@glGetFileE

; 153  : 		file = lastdot + 1;

	mov	ecx, DWORD PTR _lastdot$[ebp]
	add	ecx, 1
	mov	DWORD PTR _file$[ebp], ecx

; 154  : 	} else {

	jmp	SHORT $LN2@glGetFileE
$LN4@glGetFileE:

; 155  : 		file = file + strlen(file);

	mov	edx, DWORD PTR _file$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _file$[ebp]
	mov	DWORD PTR _file$[ebp], eax
$LN2@glGetFileE:

; 156  : 	}
; 157  : #endif
; 158  : 
; 159  : 	while (*file) *ext++ = *file++;

	mov	eax, DWORD PTR _file$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN1@glGetFileE
	mov	edx, DWORD PTR _ext$[ebp]
	mov	eax, DWORD PTR _file$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx], cl
	mov	edx, DWORD PTR _ext$[ebp]
	add	edx, 1
	mov	DWORD PTR _ext$[ebp], edx
	mov	eax, DWORD PTR _file$[ebp]
	add	eax, 1
	mov	DWORD PTR _file$[ebp], eax
	jmp	SHORT $LN2@glGetFileE
$LN1@glGetFileE:

; 160  : 	*ext = 0;

	mov	ecx, DWORD PTR _ext$[ebp]
	mov	BYTE PTR [ecx], 0

; 161  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?glGetFileExtension@@YAXPBDPAD@Z ENDP			; glGetFileExtension
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\grinline.h
;	COMDAT ?glReleaseMemory@@YAXPAX@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
_memptr$ = 8						; size = 4
?glReleaseMemory@@YAXPAX@Z PROC				; glReleaseMemory, COMDAT

; 32   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 33   : #ifdef USE_SH_POOLS
; 34   : 	if (memptr)
; 35   : 	{
; 36   : 		MemFreePtr( memptr );
; 37   : 	}
; 38   : #else
; 39   : 	if (memptr)

	cmp	DWORD PTR _memptr$[ebp], 0
	je	SHORT $LN2@glReleaseM

; 40   : 	{
; 41   : 		delete[] memptr;

	mov	eax, DWORD PTR _memptr$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@glReleaseM:

; 42   : 	}
; 43   : #endif
; 44   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?glReleaseMemory@@YAXPAX@Z ENDP				; glReleaseMemory
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\smart.h
;	COMDAT ?CheckHR@@YAXJ@Z
_TEXT	SEGMENT
$T1 = -20						; size = 16
_pEI$2 = -4						; size = 4
_hr$ = 8						; size = 4
?CheckHR@@YAXJ@Z PROC					; CheckHR, COMDAT

; 27   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 28   : 	if(FAILED(hr))

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN3@CheckHR

; 29   : 	{
; 30   : 		IErrorInfo *pEI = NULL;

	mov	DWORD PTR _pEI$2[ebp], 0

; 31   : 		::GetErrorInfo(NULL, &pEI);

	lea	eax, DWORD PTR _pEI$2[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__GetErrorInfo@8

; 32   : 		throw _com_error(hr, pEI);

	push	0
	mov	ecx, DWORD PTR _pEI$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _hr$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z	; _com_error::_com_error
	push	OFFSET __TI1?AV_com_error@@
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	__CxxThrowException@8
$LN3@CheckHR:

; 33   : 	}
; 34   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CheckHR@@YAXJ@Z ENDP					; CheckHR
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_com_error@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_com_error@@UAEPAXI@Z PROC				; _com_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_com_error@@UAE@XZ			; _com_error::~_com_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_com_error@@UAEPAXI@Z ENDP				; _com_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comdef.h
;	COMDAT ?Error@_com_error@@QBEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Error@_com_error@@QBEJXZ PROC				; _com_error::Error, COMDAT
; _this$ = ecx

; 313  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 314  :     return m_hresult;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 315  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Error@_com_error@@QBEJXZ ENDP				; _com_error::Error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comdef.h
;	COMDAT ??1_com_error@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_com_error@@UAE@XZ PROC				; _com_error::~_com_error, COMDAT
; _this$ = ecx

; 294  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_com_error@@6B@

; 295  :     if (m_perrinfo != NULL) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN2@com_error

; 296  :         m_perrinfo->Release();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
$LN2@com_error:

; 297  :     }
; 298  :     if (m_pszMsg != NULL) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN3@com_error

; 299  :         LocalFree((HLOCAL)m_pszMsg);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__LocalFree@4
$LN3@com_error:

; 300  :     }
; 301  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1_com_error@@UAE@XZ ENDP				; _com_error::~_com_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comdef.h
;	COMDAT ??0_com_error@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_that$ = 8						; size = 4
??0_com_error@@QAE@ABV0@@Z PROC				; _com_error::_com_error, COMDAT
; _this$ = ecx

; 287  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_com_error@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _that$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 288  :     if (m_perrinfo != NULL) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN2@com_error

; 289  :         m_perrinfo->AddRef();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+4]
	call	edx
$LN2@com_error:

; 290  :     }
; 291  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0_com_error@@QAE@ABV0@@Z ENDP				; _com_error::_com_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comdef.h
;	COMDAT ??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hr$ = 8						; size = 4
_perrinfo$ = 12						; size = 4
_fAddRef$ = 16						; size = 1
??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z PROC		; _com_error::_com_error, COMDAT
; _this$ = ecx

; 279  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_com_error@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _perrinfo$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 280  :     if (m_perrinfo != NULL && fAddRef) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@com_error
	movzx	ecx, BYTE PTR _fAddRef$[ebp]
	test	ecx, ecx
	je	SHORT $LN2@com_error

; 281  :         m_perrinfo->AddRef();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
$LN2@com_error:

; 282  :     }
; 283  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z ENDP		; _com_error::_com_error
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z PROC	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ENDP	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ PROC	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CComBSTR@ATL@@QAE@XZ			; ATL::CComBSTR::~CComBSTR
	mov	esp, ebp
	pop	ebp
	ret	0
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ ENDP	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\atlmfc\include\atlcomcli.h
;	COMDAT ??1CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CComBSTR@ATL@@QAE@XZ PROC				; ATL::CComBSTR::~CComBSTR, COMDAT
; _this$ = ecx

; 1656 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1657 :     ::SysFreeString(m_str);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__SysFreeString@4

; 1658 : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1CComBSTR@ATL@@QAE@XZ ENDP				; ATL::CComBSTR::~CComBSTR
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Where$[ebp]
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
