; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\Graphics\Texture\TerrTex.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?VT@?$CVarTypeInfo@_J@ATL@@2GB			; ATL::CVarTypeInfo<__int64>::VT
PUBLIC	?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ ; ATL::CVarTypeInfo<__int64>::pmField
PUBLIC	___pobjMapEntryFirst
PUBLIC	___pobjMapEntryLast
PUBLIC	?VT@?$CVarTypeInfo@PA_J@ATL@@2GB		; ATL::CVarTypeInfo<__int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ ; ATL::CVarTypeInfo<__int64 *>::pmField
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?VT@?$CVarTypeInfo@_K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned __int64>::VT
PUBLIC	??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@	; `string'
PUBLIC	?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64>::pmField
PUBLIC	??_C@_08PICKODJL@FileType?$AA@			; `string'
PUBLIC	??_C@_09JKPGEJCH@Interface?$AA@			; `string'
PUBLIC	??_C@_08PPIOJEA@Hardware?$AA@			; `string'
PUBLIC	?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA	; ATL::_pPerfRegFunc
PUBLIC	??_C@_04IHBFOLAC@Mime?$AA@			; `string'
PUBLIC	?_pPerfUnRegFunc@ATL@@3P6AJXZA			; ATL::_pPerfUnRegFunc
PUBLIC	??_C@_03DDIMFGBA@SAM?$AA@			; `string'
PUBLIC	?_AtlRegisterPerUser@ATL@@3_NA			; ATL::_AtlRegisterPerUser
PUBLIC	??_C@_08LOPHEHKG@SECURITY?$AA@			; `string'
PUBLIC	??_C@_06FDHFNJBJ@SYSTEM?$AA@			; `string'
PUBLIC	??_C@_08KEKAJNJI@Software?$AA@			; `string'
PUBLIC	??_C@_07KJLOKDKB@TypeLib?$AA@			; `string'
PUBLIC	?VT@?$CVarTypeInfo@PA_K@ATL@@2GB		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
PUBLIC	__GUID_00000000_0000_0000_c000_000000000046
PUBLIC	?VT@?$CVarTypeInfo@M@ATL@@2GB			; ATL::CVarTypeInfo<float>::VT
PUBLIC	?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ ; ATL::CVarTypeInfo<float>::pmField
PUBLIC	__GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
PUBLIC	?VT@?$CVarTypeInfo@PAM@ATL@@2GB			; ATL::CVarTypeInfo<float *>::VT
PUBLIC	__GUID_00020400_0000_0000_c000_000000000046
PUBLIC	?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ ; ATL::CVarTypeInfo<float *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@N@ATL@@2GB			; ATL::CVarTypeInfo<double>::VT
PUBLIC	?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ ; ATL::CVarTypeInfo<double>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAN@ATL@@2GB			; ATL::CVarTypeInfo<double *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ ; ATL::CVarTypeInfo<double *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB	; ATL::CVarTypeInfo<tagVARIANT *>::VT
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	__GUID_0002e012_0000_0000_c000_000000000046
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?VT@?$CVarTypeInfo@PA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ ; ATL::CVarTypeInfo<wchar_t *>::pmField
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t * *>::VT
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ ; ATL::CVarTypeInfo<wchar_t * *>::pmField
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown *>::VT
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown *>::pmField
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown * *>::pmField
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	__GUID_0000010c_0000_0000_c000_000000000046
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch *>::VT
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch *>::pmField
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	??_C@_05GIBEAPNE@CLSID?$AA@			; `string'
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	_IID_IAxWinHostWindow
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch * *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY>::VT
PUBLIC	?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY>::pmField
PUBLIC	??_C@_05PDIKPLII@AppID?$AA@			; `string'
PUBLIC	?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY *>::VT
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY *>::pmField
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?chDirSep@ATL@@3DB				; ATL::chDirSep
PUBLIC	?chRightBracket@ATL@@3DB			; ATL::chRightBracket
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?chLeftBracket@ATL@@3DB				; ATL::chLeftBracket
PUBLIC	?chQuote@ATL@@3DB				; ATL::chQuote
PUBLIC	?chEquals@ATL@@3DB				; ATL::chEquals
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?szStringVal@ATL@@3QBDB				; ATL::szStringVal
PUBLIC	??_C@_01CPLAODJH@S?$AA@				; `string'
PUBLIC	?multiszStringVal@ATL@@3QBDB			; ATL::multiszStringVal
PUBLIC	_IID_IAxWinHostWindowLic
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	??_C@_01PLPBNMEI@M?$AA@				; `string'
PUBLIC	?szDwordVal@ATL@@3QBDB				; ATL::szDwordVal
PUBLIC	??_C@_01CKDDGHAB@D?$AA@				; `string'
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?szBinaryVal@ATL@@3QBDB				; ATL::szBinaryVal
PUBLIC	??_C@_01HMGJMAIH@B?$AA@				; `string'
PUBLIC	?szValToken@ATL@@3QBDB				; ATL::szValToken
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	??_C@_03LAIAPFCB@Val?$AA@			; `string'
PUBLIC	?szForceRemove@ATL@@3QBDB			; ATL::szForceRemove
PUBLIC	??_C@_0M@DBGDLGLL@ForceRemove?$AA@		; `string'
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?szNoRemove@ATL@@3QBDB				; ATL::szNoRemove
PUBLIC	??_C@_08KAAPDIAN@NoRemove?$AA@			; `string'
PUBLIC	?szDelete@ATL@@3QBDB				; ATL::szDelete
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	??_C@_06JBKGCNBB@Delete?$AA@			; `string'
PUBLIC	?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA	; ATL::CComApartment::ATL_CREATE_OBJECT
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	_IID_IAxWinAmbientDispatch
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A ; ATL::_pAtlAutoThreadModule
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?m_bInitFailed@CAtlBaseModule@ATL@@2_NA		; ATL::CAtlBaseModule::m_bInitFailed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	__GUID_00000000_0000_0000_0000_000000000000
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?MAX_VALUE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_VALUE
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?rgszNeverDelete@CRegParser@ATL@@1QBQBDB	; ATL::CRegParser::rgszNeverDelete
PUBLIC	?cbNeverDelete@CRegParser@ATL@@1HB		; ATL::CRegParser::cbNeverDelete
PUBLIC	?MAX_TYPE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_TYPE
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	_IID_IAxWinAmbientDispatchEx
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	_IID_IInternalConnection
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	__GUID_1cf2b120_547d_101b_8e65_08002b2bd119
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?_pAtlModule@ATL@@3PAVCAtlModule@1@A		; ATL::_pAtlModule
PUBLIC	?m_libid@CAtlModule@ATL@@2U_GUID@@A		; ATL::CAtlModule::m_libid
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	__GUID_00000146_0000_0000_c000_000000000046
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?VT@?$CVarTypeInfo@D@ATL@@2GB			; ATL::CVarTypeInfo<char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ ; ATL::CVarTypeInfo<char>::pmField
PUBLIC	?VT@?$CVarTypeInfo@E@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ ; ATL::CVarTypeInfo<unsigned char>::pmField
PUBLIC	_CLSID_Registrar
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?_Min@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Min
PUBLIC	?VT@?$CVarTypeInfo@PAD@ATL@@2GB			; ATL::CVarTypeInfo<char *>::VT
PUBLIC	?_Max@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Max
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ ; ATL::CVarTypeInfo<char *>::pmField
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?_Min@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Min
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?_Max@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Max
PUBLIC	?VT@?$CVarTypeInfo@PAE@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char *>::VT
PUBLIC	__GUID_00000109_0000_0000_c000_000000000046
PUBLIC	?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ ; ATL::CVarTypeInfo<unsigned char *>::pmField
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?_Min@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Min
PUBLIC	__GUID_b196b284_bab4_101a_b69c_00aa00341d07
PUBLIC	?_Max@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Max
PUBLIC	?VT@?$CVarTypeInfo@F@ATL@@2GB			; ATL::CVarTypeInfo<short>::VT
PUBLIC	_IID_IRegistrar
PUBLIC	?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ ; ATL::CVarTypeInfo<short>::pmField
PUBLIC	?_Min@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Min
PUBLIC	?_Max@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Max
PUBLIC	?VT@?$CVarTypeInfo@PAF@ATL@@2GB			; ATL::CVarTypeInfo<short *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ ; ATL::CVarTypeInfo<short *>::pmField
PUBLIC	?_Min@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Min
PUBLIC	__GUID_00000001_0000_0000_c000_000000000046
PUBLIC	?_Max@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Max
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?VT@?$CVarTypeInfo@G@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short>::VT
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ ; ATL::CVarTypeInfo<unsigned short>::pmField
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	__GUID_00020401_0000_0000_c000_000000000046
PUBLIC	?_Min@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Min
PUBLIC	_LIBID_ATLLib
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?_Max@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Max
PUBLIC	__GUID_00020412_0000_0000_c000_000000000046
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?VT@?$CVarTypeInfo@PAG@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short *>::VT
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ ; ATL::CVarTypeInfo<unsigned short *>::pmField
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?VT@?$CVarTypeInfo@H@ATL@@2GB			; ATL::CVarTypeInfo<int>::VT
PUBLIC	?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ ; ATL::CVarTypeInfo<int>::pmField
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?VT@?$CVarTypeInfo@PAH@ATL@@2GB			; ATL::CVarTypeInfo<int *>::VT
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ ; ATL::CVarTypeInfo<int *>::pmField
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?VT@?$CVarTypeInfo@I@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int>::VT
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ ; ATL::CVarTypeInfo<unsigned int>::pmField
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?VT@?$CVarTypeInfo@PAI@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ ; ATL::CVarTypeInfo<unsigned int *>::pmField
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?VT@?$CVarTypeInfo@J@ATL@@2GB			; ATL::CVarTypeInfo<long>::VT
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ ; ATL::CVarTypeInfo<long>::pmField
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?_pModule@ATL@@3PAVCComModule@1@A		; ATL::_pModule
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?VT@?$CVarTypeInfo@PAJ@ATL@@2GB			; ATL::CVarTypeInfo<long *>::VT
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ ; ATL::CVarTypeInfo<long *>::pmField
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	_IID_IDocHostUIHandlerDispatch
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?VT@?$CVarTypeInfo@K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long>::VT
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ ; ATL::CVarTypeInfo<unsigned long>::pmField
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?VT@?$CVarTypeInfo@PAK@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long *>::VT
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ ; ATL::CVarTypeInfo<unsigned long *>::pmField
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA
_BSS	SEGMENT
?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA DD 01H DUP (?) ; ATL::_pPerfRegFunc
_BSS	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZA
_BSS	SEGMENT
?_pPerfUnRegFunc@ATL@@3P6AJXZA DD 01H DUP (?)		; ATL::_pPerfUnRegFunc
_BSS	ENDS
;	COMDAT ?_AtlRegisterPerUser@ATL@@3_NA
_BSS	SEGMENT
?_AtlRegisterPerUser@ATL@@3_NA DB 01H DUP (?)		; ATL::_AtlRegisterPerUser
_BSS	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_BSS	SEGMENT
?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA DD 01H DUP (?) ; ATL::CComApartment::ATL_CREATE_OBJECT
_BSS	ENDS
;	COMDAT ?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A
_BSS	SEGMENT
?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A DD 01H DUP (?) ; ATL::_pAtlAutoThreadModule
_BSS	ENDS
;	COMDAT ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA
_BSS	SEGMENT
?m_bInitFailed@CAtlBaseModule@ATL@@2_NA DB 01H DUP (?)	; ATL::CAtlBaseModule::m_bInitFailed
_BSS	ENDS
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_BSS	SEGMENT
?_pAtlModule@ATL@@3PAVCAtlModule@1@A DD 01H DUP (?)	; ATL::_pAtlModule
_BSS	ENDS
;	COMDAT ?m_libid@CAtlModule@ATL@@2U_GUID@@A
_BSS	SEGMENT
?m_libid@CAtlModule@ATL@@2U_GUID@@A DB 010H DUP (?)	; ATL::CAtlModule::m_libid
_BSS	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_BSS	SEGMENT
?_pModule@ATL@@3PAVCComModule@1@A DD 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long *>::pmField
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAK@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAK@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned long *>::VT
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long>::pmField
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@K@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned long>::VT
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
_IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ DD 08H ; ATL::CVarTypeInfo<long *>::pmField
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAJ@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAJ@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<long *>::VT
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ DD 08H ; ATL::CVarTypeInfo<long>::pmField
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@J@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<long>::VT
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAI@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAI@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned int *>::VT
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int>::pmField
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@I@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@I@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned int>::VT
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ DD 08H ; ATL::CVarTypeInfo<int *>::pmField
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAH@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAH@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<int *>::VT
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ DD 08H ; ATL::CVarTypeInfo<int>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@H@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@H@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<int>::VT
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short *>::pmField
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAG@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAG@ATL@@2GB DW 04012H		; ATL::CVarTypeInfo<unsigned short *>::VT
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT __GUID_00020412_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020412_0000_0000_c000_000000000046 DD 020412H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Max@?$AtlLimits@_K@ATL@@2_KB DQ ffffffffffffffffH	; ATL::AtlLimits<unsigned __int64>::_Max
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT
_LIBID_ATLLib DD 044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Min@?$AtlLimits@_K@ATL@@2_KB DQ 0000000000000000H	; ATL::AtlLimits<unsigned __int64>::_Min
CONST	ENDS
;	COMDAT __GUID_00020401_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020401_0000_0000_c000_000000000046 DD 020401H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short>::pmField
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@G@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@G@ATL@@2GB DW 012H			; ATL::CVarTypeInfo<unsigned short>::VT
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Max@?$AtlLimits@_J@ATL@@2_JB DQ 7fffffffffffffffH	; ATL::AtlLimits<__int64>::_Max
CONST	ENDS
;	COMDAT __GUID_00000001_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000001_0000_0000_c000_000000000046 DD 01H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Min@?$AtlLimits@_J@ATL@@2_JB DQ 8000000000000000H	; ATL::AtlLimits<__int64>::_Min
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ DD 08H ; ATL::CVarTypeInfo<short *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAF@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAF@ATL@@2GB DW 04002H		; ATL::CVarTypeInfo<short *>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Max@?$AtlLimits@K@ATL@@2KB DD 0ffffffffH		; ATL::AtlLimits<unsigned long>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Min@?$AtlLimits@K@ATL@@2KB DD 00H			; ATL::AtlLimits<unsigned long>::_Min
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ DD 08H ; ATL::CVarTypeInfo<short>::pmField
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT
_IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@F@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@F@ATL@@2GB DW 02H			; ATL::CVarTypeInfo<short>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Max@?$AtlLimits@J@ATL@@2JB DD 07fffffffH		; ATL::AtlLimits<long>::_Max
CONST	ENDS
;	COMDAT __GUID_b196b284_bab4_101a_b69c_00aa00341d07
CONST	SEGMENT
__GUID_b196b284_bab4_101a_b69c_00aa00341d07 DD 0b196b284H
	DW	0bab4H
	DW	0101aH
	DB	0b6H
	DB	09cH
	DB	00H
	DB	0aaH
	DB	00H
	DB	034H
	DB	01dH
	DB	07H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Min@?$AtlLimits@J@ATL@@2JB DD 080000000H		; ATL::AtlLimits<long>::_Min
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT __GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
CONST	SEGMENT
__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713 DD 07fd52380H
	DW	04e07H
	DW	0101bH
	DB	0aeH
	DB	02dH
	DB	08H
	DB	00H
	DB	02bH
	DB	02eH
	DB	0c7H
	DB	013H
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char *>::pmField
CONST	ENDS
;	COMDAT __GUID_00000109_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000109_0000_0000_c000_000000000046 DD 0109H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAE@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAE@ATL@@2GB DW 04011H		; ATL::CVarTypeInfo<unsigned char *>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Max@?$AtlLimits@I@ATL@@2IB DD 0ffffffffH		; ATL::AtlLimits<unsigned int>::_Max
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Min@?$AtlLimits@I@ATL@@2IB DD 00H			; ATL::AtlLimits<unsigned int>::_Min
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ DD 08H ; ATL::CVarTypeInfo<char *>::pmField
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Max@?$AtlLimits@H@ATL@@2HB DD 07fffffffH		; ATL::AtlLimits<int>::_Max
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAD@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAD@ATL@@2GB DW 04010H		; ATL::CVarTypeInfo<char *>::VT
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Min@?$AtlLimits@H@ATL@@2HB DD 080000000H		; ATL::AtlLimits<int>::_Min
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT
_CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@E@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@E@ATL@@2GB DW 011H			; ATL::CVarTypeInfo<unsigned char>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ DD 08H ; ATL::CVarTypeInfo<char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@D@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@D@ATL@@2GB DW 010H			; ATL::CVarTypeInfo<char>::VT
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT __GUID_00000146_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000146_0000_0000_c000_000000000046 DD 0146H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT __GUID_1cf2b120_547d_101b_8e65_08002b2bd119
CONST	SEGMENT
__GUID_1cf2b120_547d_101b_8e65_08002b2bd119 DD 01cf2b120H
	DW	0547dH
	DW	0101bH
	DB	08eH
	DB	065H
	DB	08H
	DB	00H
	DB	02bH
	DB	02bH
	DB	0d1H
	DB	019H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT
_IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatchEx
CONST	SEGMENT
_IID_IAxWinAmbientDispatchEx DD 0b2d0778bH
	DW	0ac99H
	DW	04c58H
	DB	0a5H
	DB	0c8H
	DB	0e7H
	DB	072H
	DB	04eH
	DB	053H
	DB	016H
	DB	0b5H
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT __GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
CONST	SEGMENT
__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352 DD 0fc4801a3H
	DW	02ba9H
	DW	011cfH
	DB	0a2H
	DB	029H
	DB	00H
	DB	0aaH
	DB	00H
	DB	03dH
	DB	073H
	DB	052H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?MAX_TYPE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_TYPE@CRegParser@ATL@@1HB DD 01000H			; ATL::CRegParser::MAX_TYPE
CONST	ENDS
;	COMDAT ?cbNeverDelete@CRegParser@ATL@@1HB
CONST	SEGMENT
?cbNeverDelete@CRegParser@ATL@@1HB DD 0cH		; ATL::CRegParser::cbNeverDelete
CONST	ENDS
;	COMDAT ?rgszNeverDelete@CRegParser@ATL@@1QBQBDB
CONST	SEGMENT
?rgszNeverDelete@CRegParser@ATL@@1QBQBDB DD FLAT:??_C@_05PDIKPLII@AppID?$AA@ ; ATL::CRegParser::rgszNeverDelete
	DD	FLAT:??_C@_05GIBEAPNE@CLSID?$AA@
	DD	FLAT:??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
	DD	FLAT:??_C@_08PICKODJL@FileType?$AA@
	DD	FLAT:??_C@_09JKPGEJCH@Interface?$AA@
	DD	FLAT:??_C@_08PPIOJEA@Hardware?$AA@
	DD	FLAT:??_C@_04IHBFOLAC@Mime?$AA@
	DD	FLAT:??_C@_03DDIMFGBA@SAM?$AA@
	DD	FLAT:??_C@_08LOPHEHKG@SECURITY?$AA@
	DD	FLAT:??_C@_06FDHFNJBJ@SYSTEM?$AA@
	DD	FLAT:??_C@_08KEKAJNJI@Software?$AA@
	DD	FLAT:??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?MAX_VALUE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_VALUE@CRegParser@ATL@@1HB DD 01000H		; ATL::CRegParser::MAX_VALUE
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
CONST	SEGMENT
__GUID_00000000_0000_0000_0000_000000000000 DD 00H
	DW	00H
	DW	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT
_IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ??_C@_06JBKGCNBB@Delete?$AA@
CONST	SEGMENT
??_C@_06JBKGCNBB@Delete?$AA@ DB 'Delete', 00H		; `string'
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?szDelete@ATL@@3QBDB
CONST	SEGMENT
?szDelete@ATL@@3QBDB DD FLAT:??_C@_06JBKGCNBB@Delete?$AA@ ; ATL::szDelete
CONST	ENDS
;	COMDAT ??_C@_08KAAPDIAN@NoRemove?$AA@
CONST	SEGMENT
??_C@_08KAAPDIAN@NoRemove?$AA@ DB 'NoRemove', 00H	; `string'
CONST	ENDS
;	COMDAT ?szNoRemove@ATL@@3QBDB
CONST	SEGMENT
?szNoRemove@ATL@@3QBDB DD FLAT:??_C@_08KAAPDIAN@NoRemove?$AA@ ; ATL::szNoRemove
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ??_C@_0M@DBGDLGLL@ForceRemove?$AA@
CONST	SEGMENT
??_C@_0M@DBGDLGLL@ForceRemove?$AA@ DB 'ForceRemove', 00H ; `string'
CONST	ENDS
;	COMDAT ?szForceRemove@ATL@@3QBDB
CONST	SEGMENT
?szForceRemove@ATL@@3QBDB DD FLAT:??_C@_0M@DBGDLGLL@ForceRemove?$AA@ ; ATL::szForceRemove
CONST	ENDS
;	COMDAT ??_C@_03LAIAPFCB@Val?$AA@
CONST	SEGMENT
??_C@_03LAIAPFCB@Val?$AA@ DB 'Val', 00H			; `string'
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?szValToken@ATL@@3QBDB
CONST	SEGMENT
?szValToken@ATL@@3QBDB DD FLAT:??_C@_03LAIAPFCB@Val?$AA@ ; ATL::szValToken
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B?$AA@
CONST	SEGMENT
??_C@_01HMGJMAIH@B?$AA@ DB 'B', 00H			; `string'
CONST	ENDS
;	COMDAT ?szBinaryVal@ATL@@3QBDB
CONST	SEGMENT
?szBinaryVal@ATL@@3QBDB DD FLAT:??_C@_01HMGJMAIH@B?$AA@	; ATL::szBinaryVal
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D?$AA@
CONST	SEGMENT
??_C@_01CKDDGHAB@D?$AA@ DB 'D', 00H			; `string'
CONST	ENDS
;	COMDAT ?szDwordVal@ATL@@3QBDB
CONST	SEGMENT
?szDwordVal@ATL@@3QBDB DD FLAT:??_C@_01CKDDGHAB@D?$AA@	; ATL::szDwordVal
CONST	ENDS
;	COMDAT ??_C@_01PLPBNMEI@M?$AA@
CONST	SEGMENT
??_C@_01PLPBNMEI@M?$AA@ DB 'M', 00H			; `string'
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindowLic
CONST	SEGMENT
_IID_IAxWinHostWindowLic DD 03935bda8H
	DW	04ed9H
	DW	0495cH
	DB	086H
	DB	050H
	DB	0e0H
	DB	01fH
	DB	0c1H
	DB	0e3H
	DB	08aH
	DB	04bH
CONST	ENDS
;	COMDAT ?multiszStringVal@ATL@@3QBDB
CONST	SEGMENT
?multiszStringVal@ATL@@3QBDB DD FLAT:??_C@_01PLPBNMEI@M?$AA@ ; ATL::multiszStringVal
CONST	ENDS
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT
??_C@_01CPLAODJH@S?$AA@ DB 'S', 00H			; `string'
CONST	ENDS
;	COMDAT ?szStringVal@ATL@@3QBDB
CONST	SEGMENT
?szStringVal@ATL@@3QBDB DD FLAT:??_C@_01CPLAODJH@S?$AA@	; ATL::szStringVal
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?chEquals@ATL@@3DB
CONST	SEGMENT
?chEquals@ATL@@3DB DB 03dH				; ATL::chEquals
CONST	ENDS
;	COMDAT ?chQuote@ATL@@3DB
CONST	SEGMENT
?chQuote@ATL@@3DB DB 027H				; ATL::chQuote
CONST	ENDS
;	COMDAT ?chLeftBracket@ATL@@3DB
CONST	SEGMENT
?chLeftBracket@ATL@@3DB DB 07bH				; ATL::chLeftBracket
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?chRightBracket@ATL@@3DB
CONST	SEGMENT
?chRightBracket@ATL@@3DB DB 07dH			; ATL::chRightBracket
CONST	ENDS
;	COMDAT ?chDirSep@ATL@@3DB
CONST	SEGMENT
?chDirSep@ATL@@3DB DB 05cH				; ATL::chDirSep
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY *>::pmField
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB DW 04006H	; ATL::CVarTypeInfo<tagCY *>::VT
CONST	ENDS
;	COMDAT ??_C@_05PDIKPLII@AppID?$AA@
CONST	SEGMENT
??_C@_05PDIKPLII@AppID?$AA@ DB 'AppID', 00H		; `string'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB DW 06H		; ATL::CVarTypeInfo<tagCY>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB DW 04009H	; ATL::CVarTypeInfo<IDispatch * *>::VT
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT
_IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ??_C@_05GIBEAPNE@CLSID?$AA@
CONST	SEGMENT
??_C@_05GIBEAPNE@CLSID?$AA@ DB 'CLSID', 00H		; `string'
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch *>::pmField
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB DW 09H	; ATL::CVarTypeInfo<IDispatch *>::VT
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT __GUID_0000010c_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_0000010c_0000_0000_c000_000000000046 DD 010cH
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB DW 0400dH	; ATL::CVarTypeInfo<IUnknown * *>::VT
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown *>::pmField
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB DW 0dH	; ATL::CVarTypeInfo<IUnknown *>::VT
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t * *>::pmField
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB DW 04008H		; ATL::CVarTypeInfo<wchar_t * *>::VT
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_W@ATL@@2GB DW 08H			; ATL::CVarTypeInfo<wchar_t *>::VT
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT __GUID_0002e012_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_0002e012_0000_0000_c000_000000000046 DD 02e012H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB DW 0400cH	; ATL::CVarTypeInfo<tagVARIANT *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ DD 08H ; ATL::CVarTypeInfo<double *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAN@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAN@ATL@@2GB DW 04005H		; ATL::CVarTypeInfo<double *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ DD 08H ; ATL::CVarTypeInfo<double>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@N@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@N@ATL@@2GB DW 05H			; ATL::CVarTypeInfo<double>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ DD 08H ; ATL::CVarTypeInfo<float *>::pmField
CONST	ENDS
;	COMDAT __GUID_00020400_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020400_0000_0000_c000_000000000046 DD 020400H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAM@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAM@ATL@@2GB DW 04004H		; ATL::CVarTypeInfo<float *>::VT
CONST	ENDS
;	COMDAT __GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
CONST	SEGMENT
__GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851 DD 0a6bc3ac0H
	DW	0dbaaH
	DW	011ceH
	DB	09dH
	DB	0e3H
	DB	00H
	DB	0aaH
	DB	00H
	DB	04bH
	DB	0b8H
	DB	051H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ DD 08H ; ATL::CVarTypeInfo<float>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@M@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@M@ATL@@2GB DW 04H			; ATL::CVarTypeInfo<float>::VT
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000000_0000_0000_c000_000000000046 DD 00H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_K@ATL@@2GB DW 04015H		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
CONST	ENDS
;	COMDAT ??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	SEGMENT
??_C@_07KJLOKDKB@TypeLib?$AA@ DB 'TypeLib', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KEKAJNJI@Software?$AA@
CONST	SEGMENT
??_C@_08KEKAJNJI@Software?$AA@ DB 'Software', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDHFNJBJ@SYSTEM?$AA@
CONST	SEGMENT
??_C@_06FDHFNJBJ@SYSTEM?$AA@ DB 'SYSTEM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LOPHEHKG@SECURITY?$AA@
CONST	SEGMENT
??_C@_08LOPHEHKG@SECURITY?$AA@ DB 'SECURITY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03DDIMFGBA@SAM?$AA@
CONST	SEGMENT
??_C@_03DDIMFGBA@SAM?$AA@ DB 'SAM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IHBFOLAC@Mime?$AA@
CONST	SEGMENT
??_C@_04IHBFOLAC@Mime?$AA@ DB 'Mime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPIOJEA@Hardware?$AA@
CONST	SEGMENT
??_C@_08PPIOJEA@Hardware?$AA@ DB 'Hardware', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JKPGEJCH@Interface?$AA@
CONST	SEGMENT
??_C@_09JKPGEJCH@Interface?$AA@ DB 'Interface', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PICKODJL@FileType?$AA@
CONST	SEGMENT
??_C@_08PICKODJL@FileType?$AA@ DB 'FileType', 00H	; `string'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64>::pmField
CONST	ENDS
;	COMDAT ??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
CONST	SEGMENT
??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@ DB 'Component Categories', 00H ; `string'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_K@ATL@@2GB DW 015H			; ATL::CVarTypeInfo<unsigned __int64>::VT
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_J@ATL@@2GB DW 04014H		; ATL::CVarTypeInfo<__int64 *>::VT
CONST	ENDS
;	COMDAT ___pobjMapEntryLast
ATL$__z	SEGMENT
___pobjMapEntryLast DD 00H
ATL$__z	ENDS
;	COMDAT ___pobjMapEntryFirst
ATL$__a	SEGMENT
___pobjMapEntryFirst DD 00H
ATL$__a	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_J@ATL@@2GB DW 014H			; ATL::CVarTypeInfo<__int64>::VT
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??1CComBSTR@ATL@@QAE@XZ				; ATL::CComBSTR::~CComBSTR
PUBLIC	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
PUBLIC	??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
PUBLIC	_floorf
PUBLIC	?floor@@YAMM@Z					; floor
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?GetNVGmode@CTimeOfDay@@QAEHXZ			; CTimeOfDay::GetNVGmode
PUBLIC	?GetTextureLightingColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ; CTimeOfDay::GetTextureLightingColor
PUBLIC	?GetLightLevel@CTimeOfDay@@QAEMXZ		; CTimeOfDay::GetLightLevel
PUBLIC	?glAllocateMemory@@YAPAXHH@Z			; glAllocateMemory
PUBLIC	?glReleaseMemory@@YAXPAX@Z			; glReleaseMemory
PUBLIC	?glGetFileExtension@@YAXPBDPAD@Z		; glGetFileExtension
PUBLIC	??1CFileIO@@UAE@XZ				; CFileIO::~CFileIO
PUBLIC	??_GCFileIO@@UAEPAXI@Z				; CFileIO::`scalar deleting destructor'
PUBLIC	??1CFileMemory@@UAE@XZ				; CFileMemory::~CFileMemory
PUBLIC	??_GCFileMemory@@UAEPAXI@Z			; CFileMemory::`scalar deleting destructor'
PUBLIC	??1CImageFileMemory@@UAE@XZ			; CImageFileMemory::~CImageFileMemory
PUBLIC	??_GCImageFileMemory@@UAEPAXI@Z			; CImageFileMemory::`scalar deleting destructor'
PUBLIC	?CheckImageType@@YAHPBD@Z			; CheckImageType
PUBLIC	?ReadTextureImage@@YAHPAVCImageFileMemory@@@Z	; ReadTextureImage
PUBLIC	??_GTextureHandle@@QAEPAXI@Z			; TextureHandle::`scalar deleting destructor'
PUBLIC	??_GPaletteHandle@@QAEPAXI@Z			; PaletteHandle::`scalar deleting destructor'
PUBLIC	??0TextureDB@@QAE@XZ				; TextureDB::TextureDB
PUBLIC	??1TextureDB@@QAE@XZ				; TextureDB::~TextureDB
PUBLIC	?Setup@TextureDB@@QAEHPAVDXContext@@PBD@Z	; TextureDB::Setup
PUBLIC	?IsReady@TextureDB@@QAEHXZ			; TextureDB::IsReady
PUBLIC	?Cleanup@TextureDB@@QAEXXZ			; TextureDB::Cleanup
PUBLIC	?Request@TextureDB@@QAEXK@Z			; TextureDB::Request
PUBLIC	?Release@TextureDB@@QAEXK@Z			; TextureDB::Release
PUBLIC	?Select@TextureDB@@QAEXPAVContextMPR@@K@Z	; TextureDB::Select
PUBLIC	?RestoreAll@TextureDB@@QAEXXZ			; TextureDB::RestoreAll
PUBLIC	?SyncDDSTextures@TextureDB@@QAE_N_N@Z		; TextureDB::SyncDDSTextures
PUBLIC	?FlushHandles@TextureDB@@QAEXXZ			; TextureDB::FlushHandles
PUBLIC	?GetPath@TextureDB@@QAEPAUTexPath@@KHH@Z	; TextureDB::GetPath
PUBLIC	?GetArea@TextureDB@@QAEPAUTexArea@@KHH@Z	; TextureDB::GetArea
PUBLIC	?GetTerrainType@TextureDB@@QAEEK@Z		; TextureDB::GetTerrainType
PUBLIC	?Load@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H_N@Z ; TextureDB::Load
PUBLIC	?Activate@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H@Z ; TextureDB::Activate
PUBLIC	?Deactivate@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H@Z ; TextureDB::Deactivate
PUBLIC	?Free@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H@Z ; TextureDB::Free
PUBLIC	?ExtractSet@TextureDB@@IAEHK@Z			; TextureDB::ExtractSet
PUBLIC	?ExtractTile@TextureDB@@IAEHK@Z			; TextureDB::ExtractTile
PUBLIC	?ExtractRes@TextureDB@@IAEHK@Z			; TextureDB::ExtractRes
PUBLIC	?TimeUpdateCallback@TextureDB@@KAXPAX@Z		; TextureDB::TimeUpdateCallback
PUBLIC	?SetLightLevel@TextureDB@@IAEXXZ		; TextureDB::SetLightLevel
PUBLIC	?StoreMPRPalette@TextureDB@@IAEXPAUSetEntry@@@Z	; TextureDB::StoreMPRPalette
PUBLIC	?DumpImageToFile@TextureDB@@IAE_NPAUTileEntry@@PAKH_N@Z ; TextureDB::DumpImageToFile
PUBLIC	?ReadImageDDS@TextureDB@@IAEXPAUTileEntry@@H@Z	; TextureDB::ReadImageDDS
PUBLIC	?SaveDDS_DXTn@TextureDB@@IAE_NPBDPAEH@Z		; TextureDB::SaveDDS_DXTn
PUBLIC	?HSVtoRGB@TextureDB@@IAEXPAM00MMM@Z		; TextureDB::HSVtoRGB
PUBLIC	?RGBtoHSV@TextureDB@@IAEXMMMPAM00@Z		; TextureDB::RGBtoHSV
PUBLIC	??0CompressionOptions@@QAE@XZ			; CompressionOptions::CompressionOptions
PUBLIC	??0F4ScopeLock@@QAE@PAUF4CSECTIONHANDLE@@@Z	; F4ScopeLock::F4ScopeLock
PUBLIC	??1F4ScopeLock@@QAE@XZ				; F4ScopeLock::~F4ScopeLock
PUBLIC	?getDDSWidth@?A0xd5d9628f@@YAHH@Z		; `anonymous namespace'::getDDSWidth
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_7CFileIO@@6B@				; CFileIO::`vftable'
PUBLIC	??_7CFileMemory@@6B@				; CFileMemory::`vftable'
PUBLIC	??_7CImageFileMemory@@6B@			; CImageFileMemory::`vftable'
PUBLIC	??_C@_03BBABOKL@GIF?$AA@			; `string'
PUBLIC	??_C@_03DJLAKPIA@LBM?$AA@			; `string'
PUBLIC	??_C@_03BFAIMLIE@PCX?$AA@			; `string'
PUBLIC	??_C@_03CNFPPDJC@BMP?$AA@			; `string'
PUBLIC	??_C@_03MNGDDBAC@APL?$AA@			; `string'
PUBLIC	??_C@_03GGDFNBH@TGA?$AA@			; `string'
PUBLIC	??_C@_03CMMIMEAC@DDS?$AA@			; `string'
PUBLIC	?TheTerrTextures@@3VTextureDB@@A		; TheTerrTextures
PUBLIC	??_C@_0BA@HDLLCJOI@texturedb?5mutex?$AA@	; `string'
PUBLIC	??_C@_0M@CFLADCE@Feb?518?52013?$AA@		; `string'
PUBLIC	??_C@_0M@HFACBFJD@TerrTex?4cpp?$AA@		; `string'
PUBLIC	??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0BM@LGBCNBPK@Texture?5path?5name?5overflow?$CB?$AA@ ; `string'
PUBLIC	??_C@_01KICIPPFI@?2?$AA@			; `string'
PUBLIC	??_C@_0L@KMKLKCLL@?$CFstexture?2?$AA@		; `string'
PUBLIC	??_C@_0M@ELCGCACE@Texture?4BIN?$AA@		; `string'
PUBLIC	??_C@_0CA@KDKMALDE@?$CFs?3?5Couldn?8d?5read?5texture?5list?4?$AA@ ; `string'
PUBLIC	??_C@_0BL@CKHFAODD@Proceeding?5with?5Empty?5List?$AA@ ; `string'
PUBLIC	??_C@_0DE@HKCLFLMC@Failed?5to?5allocate?5memory?5for?5th@ ; `string'
PUBLIC	??_C@_0DA@CGMFNAOK@?$CFs?3?5Couldn?8t?5read?5set?5descriptio@ ; `string'
PUBLIC	??_C@_0CM@ENOKGICB@?$CFs?3?5Couldn?8t?5read?5tile?5header?5?9?5@ ; `string'
PUBLIC	??_C@_0CL@IDPOCIDB@?$CFs?3?5Couldn?8t?5read?5tile?5areas?5?9?5d@ ; `string'
PUBLIC	??_C@_0CL@BGAMGLNF@?$CFs?3?5Couldn?8t?5read?5tile?5paths?5?9?5d@ ; `string'
PUBLIC	??_C@_0BC@IHKENOG@Failed?5to?5open?5?$CFs?$AA@	; `string'
PUBLIC	??_C@_0CK@EPADCPNN@Failed?5to?5read?5terrain?5texture?4?5@ ; `string'
PUBLIC	??_C@_09LMDFCLDK@TextureDB?$AA@			; `string'
PUBLIC	??_C@_01LFCBOECM@?4?$AA@			; `string'
PUBLIC	??_C@_08GCAFGLGC@?$CFs?$CFs?4dds?$AA@		; `string'
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_09KEBCNFGN@?$CFs?$CFsN?4dds?$AA@		; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CFileIO@@6B@				; CFileIO::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCFileIO@@@8				; CFileIO `RTTI Type Descriptor'
PUBLIC	??_R3CFileIO@@8					; CFileIO::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CFileIO@@8					; CFileIO::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CFileIO@@8			; CFileIO::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CFileMemory@@6B@				; CFileMemory::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCFileMemory@@@8				; CFileMemory `RTTI Type Descriptor'
PUBLIC	??_R3CFileMemory@@8				; CFileMemory::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CFileMemory@@8				; CFileMemory::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CFileMemory@@8			; CFileMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CImageFileMemory@@6B@			; CImageFileMemory::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCImageFileMemory@@@8			; CImageFileMemory `RTTI Type Descriptor'
PUBLIC	??_R3CImageFileMemory@@8			; CImageFileMemory::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CImageFileMemory@@8			; CImageFileMemory::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CImageFileMemory@@8		; CImageFileMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3c23d70a
PUBLIC	__real@3ea8f5c3
PUBLIC	__real@3f000000
PUBLIC	__real@3f340000
PUBLIC	__real@3f400000
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f59999a
PUBLIC	__real@3f666666
PUBLIC	__real@3f800000
PUBLIC	__real@3f99999a
PUBLIC	__real@3fa66666
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3fc999999999999a
PUBLIC	__real@3feccccccccccccd
PUBLIC	__real@40000000
PUBLIC	__real@400ccccd
PUBLIC	__real@40400000
PUBLIC	__real@40800000
PUBLIC	__real@41200000
PUBLIC	__real@41700000
PUBLIC	__real@41f00000
PUBLIC	__real@42340000
PUBLIC	__real@42700000
PUBLIC	__real@43160000
PUBLIC	__real@43200000
PUBLIC	__real@43250000
PUBLIC	__real@43610000
PUBLIC	__real@437f0000
PUBLIC	__real@43b40000
PUBLIC	__real@bf800000
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_exit:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strcpy:PROC
EXTRN	_strcat:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	_strrchr:PROC
EXTRN	_strtok:PROC
EXTRN	_strnicmp:PROC
EXTRN	__imp__CreateDirectoryA@8:PROC
EXTRN	__imp__DeleteFileA@4:PROC
EXTRN	__imp__ReadFile@20:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__FormatMessageA@28:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	__imp__SysFreeString@4:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	_fread:PROC
EXTRN	_printf:PROC
EXTRN	_sprintf:PROC
EXTRN	_floor:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	__close:PROC
EXTRN	?_open@@YAHPBDHH@Z:PROC				; _open
EXTRN	?RegisterTimeUpdateCB@TimeManager@@QAEXP6AXPAX@Z0@Z:PROC ; TimeManager::RegisterTimeUpdateCB
EXTRN	?ReleaseTimeUpdateCB@TimeManager@@QAEXP6AXPAX@Z0@Z:PROC ; TimeManager::ReleaseTimeUpdateCB
EXTRN	?closefile@CFileIO@@QAEXXZ:PROC			; CFileIO::closefile
EXTRN	??_ECFileIO@@UAEPAXI@Z:PROC			; CFileIO::`vector deleting destructor'
EXTRN	?glOpenFileMem@CFileMemory@@QAEHPBD@Z:PROC	; CFileMemory::glOpenFileMem
EXTRN	?glReadFileMem@CFileMemory@@QAEXXZ:PROC		; CFileMemory::glReadFileMem
EXTRN	?glCloseFileMem@CFileMemory@@QAEXXZ:PROC	; CFileMemory::glCloseFileMem
EXTRN	??_ECFileMemory@@UAEPAXI@Z:PROC			; CFileMemory::`vector deleting destructor'
EXTRN	??0CImageFileMemory@@QAE@XZ:PROC		; CImageFileMemory::CImageFileMemory
EXTRN	??_ECImageFileMemory@@UAEPAXI@Z:PROC		; CImageFileMemory::`vector deleting destructor'
EXTRN	?UnpackGIF@@YAHPAVCImageFileMemory@@@Z:PROC	; UnpackGIF
EXTRN	?UnpackLBM@@YAHPAVCImageFileMemory@@@Z:PROC	; UnpackLBM
EXTRN	?UnpackPCX@@YAHPAVCImageFileMemory@@@Z:PROC	; UnpackPCX
EXTRN	?ReadBMP@@YAHPAVCImageFileMemory@@@Z:PROC	; ReadBMP
EXTRN	?ReadAPL@@YAHPAVCImageFileMemory@@@Z:PROC	; ReadAPL
EXTRN	?ReadTGA@@YAHPAVCImageFileMemory@@@Z:PROC	; ReadTGA
EXTRN	?ReadDDS@@YAHPAVCImageFileMemory@@@Z:PROC	; ReadDDS
EXTRN	??0TextureHandle@@QAE@XZ:PROC			; TextureHandle::TextureHandle
EXTRN	??1TextureHandle@@QAE@XZ:PROC			; TextureHandle::~TextureHandle
EXTRN	?Create@TextureHandle@@QAE_NPADKGGGK@Z:PROC	; TextureHandle::Create
EXTRN	?Load@TextureHandle@@QAE_NGIPAE_N1H@Z:PROC	; TextureHandle::Load
EXTRN	?RestoreAll@TextureHandle@@QAEXXZ:PROC		; TextureHandle::RestoreAll
EXTRN	??0PaletteHandle@@QAE@PAUIDirectDraw7@@GG@Z:PROC ; PaletteHandle::PaletteHandle
EXTRN	??1PaletteHandle@@QAE@XZ:PROC			; PaletteHandle::~PaletteHandle
EXTRN	?Load@PaletteHandle@@QAEXGGGGPAE@Z:PROC		; PaletteHandle::Load
EXTRN	?AttachToTexture@PaletteHandle@@QAEXPAVTextureHandle@@@Z:PROC ; PaletteHandle::AttachToTexture
EXTRN	?SelectTexture1@ContextMPR@@QAEXH@Z:PROC	; ContextMPR::SelectTexture1
EXTRN	?SelectTexture2@ContextMPR@@QAEXH@Z:PROC	; ContextMPR::SelectTexture2
EXTRN	?CreateFile_Open@@YAPAXPADKKPAU_SECURITY_ATTRIBUTES@@KKPAX@Z:PROC ; CreateFile_Open
EXTRN	?F4IsBadReadPtr@@YA_NPBXI@Z:PROC		; F4IsBadReadPtr
EXTRN	_F4CreateCriticalSection:PROC
EXTRN	_F4DestroyCriticalSection:PROC
EXTRN	_F4EnterCriticalSection:PROC
EXTRN	_F4LeaveCriticalSection:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__chkstk:PROC
EXTRN	__ftol2_sse:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?TheTimeManager@@3VTimeManager@@A:BYTE		; TheTimeManager
EXTRN	?TheTimeOfDay@@3VCTimeOfDay@@A:BYTE		; TheTimeOfDay
EXTRN	?DisplayOptions@@3VDisplayOptionsClass@@A:BYTE	; DisplayOptions
EXTRN	?g_bEnableStaticTerrainTextures@@3_NA:BYTE	; g_bEnableStaticTerrainTextures
EXTRN	?fileout@@3HA:DWORD				; fileout
EXTRN	?PlayerOptions@@3VPlayerOptionsClass@@A:BYTE	; PlayerOptions
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

?TheTerrTextures@@3VTextureDB@@A DB 0230H DUP (?)	; TheTerrTextures
_bIs092	DB	01H DUP (?)
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@43b40000
CONST	SEGMENT
__real@43b40000 DD 043b40000r			; 360
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@43610000
CONST	SEGMENT
__real@43610000 DD 043610000r			; 225
CONST	ENDS
;	COMDAT __real@43250000
CONST	SEGMENT
__real@43250000 DD 043250000r			; 165
CONST	ENDS
;	COMDAT __real@43200000
CONST	SEGMENT
__real@43200000 DD 043200000r			; 160
CONST	ENDS
;	COMDAT __real@43160000
CONST	SEGMENT
__real@43160000 DD 043160000r			; 150
CONST	ENDS
;	COMDAT __real@42700000
CONST	SEGMENT
__real@42700000 DD 042700000r			; 60
CONST	ENDS
;	COMDAT __real@42340000
CONST	SEGMENT
__real@42340000 DD 042340000r			; 45
CONST	ENDS
;	COMDAT __real@41f00000
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
CONST	ENDS
;	COMDAT __real@41700000
CONST	SEGMENT
__real@41700000 DD 041700000r			; 15
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@400ccccd
CONST	SEGMENT
__real@400ccccd DD 0400ccccdr			; 2.2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3feccccccccccccd
CONST	SEGMENT
__real@3feccccccccccccd DQ 03feccccccccccccdr	; 0.9
CONST	ENDS
;	COMDAT __real@3fc999999999999a
CONST	SEGMENT
__real@3fc999999999999a DQ 03fc999999999999ar	; 0.2
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3fa66666
CONST	SEGMENT
__real@3fa66666 DD 03fa66666r			; 1.3
CONST	ENDS
;	COMDAT __real@3f99999a
CONST	SEGMENT
__real@3f99999a DD 03f99999ar			; 1.2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f59999a
CONST	SEGMENT
__real@3f59999a DD 03f59999ar			; 0.85
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f400000
CONST	SEGMENT
__real@3f400000 DD 03f400000r			; 0.75
CONST	ENDS
;	COMDAT __real@3f340000
CONST	SEGMENT
__real@3f340000 DD 03f340000r			; 0.703125
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ea8f5c3
CONST	SEGMENT
__real@3ea8f5c3 DD 03ea8f5c3r			; 0.33
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CImageFileMemory@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CImageFileMemory@@8 DD FLAT:??_R0?AVCImageFileMemory@@@8 ; CImageFileMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CImageFileMemory@@8
rdata$r	ENDS
;	COMDAT ??_R2CImageFileMemory@@8
rdata$r	SEGMENT
??_R2CImageFileMemory@@8 DD FLAT:??_R1A@?0A@EA@CImageFileMemory@@8 ; CImageFileMemory::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CFileMemory@@8
rdata$r	ENDS
;	COMDAT ??_R3CImageFileMemory@@8
rdata$r	SEGMENT
??_R3CImageFileMemory@@8 DD 00H				; CImageFileMemory::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CImageFileMemory@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCImageFileMemory@@@8
_DATA	SEGMENT
??_R0?AVCImageFileMemory@@@8 DD FLAT:??_7type_info@@6B@	; CImageFileMemory `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCImageFileMemory@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CImageFileMemory@@6B@
rdata$r	SEGMENT
??_R4CImageFileMemory@@6B@ DD 00H			; CImageFileMemory::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCImageFileMemory@@@8
	DD	FLAT:??_R3CImageFileMemory@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CFileMemory@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CFileMemory@@8 DD FLAT:??_R0?AVCFileMemory@@@8 ; CFileMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CFileMemory@@8
rdata$r	ENDS
;	COMDAT ??_R2CFileMemory@@8
rdata$r	SEGMENT
??_R2CFileMemory@@8 DD FLAT:??_R1A@?0A@EA@CFileMemory@@8 ; CFileMemory::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CFileMemory@@8
rdata$r	SEGMENT
??_R3CFileMemory@@8 DD 00H				; CFileMemory::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CFileMemory@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFileMemory@@@8
_DATA	SEGMENT
??_R0?AVCFileMemory@@@8 DD FLAT:??_7type_info@@6B@	; CFileMemory `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFileMemory@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CFileMemory@@6B@
rdata$r	SEGMENT
??_R4CFileMemory@@6B@ DD 00H				; CFileMemory::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCFileMemory@@@8
	DD	FLAT:??_R3CFileMemory@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CFileIO@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CFileIO@@8 DD FLAT:??_R0?AVCFileIO@@@8	; CFileIO::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CFileIO@@8
rdata$r	ENDS
;	COMDAT ??_R2CFileIO@@8
rdata$r	SEGMENT
??_R2CFileIO@@8 DD FLAT:??_R1A@?0A@EA@CFileIO@@8	; CFileIO::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CFileIO@@8
rdata$r	SEGMENT
??_R3CFileIO@@8 DD 00H					; CFileIO::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CFileIO@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFileIO@@@8
_DATA	SEGMENT
??_R0?AVCFileIO@@@8 DD FLAT:??_7type_info@@6B@		; CFileIO `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFileIO@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CFileIO@@6B@
rdata$r	SEGMENT
??_R4CFileIO@@6B@ DD 00H				; CFileIO::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCFileIO@@@8
	DD	FLAT:??_R3CFileIO@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_09KEBCNFGN@?$CFs?$CFsN?4dds?$AA@
CONST	SEGMENT
??_C@_09KEBCNFGN@?$CFs?$CFsN?4dds?$AA@ DB '%s%sN.dds', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08GCAFGLGC@?$CFs?$CFs?4dds?$AA@
CONST	SEGMENT
??_C@_08GCAFGLGC@?$CFs?$CFs?4dds?$AA@ DB '%s%s.dds', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01LFCBOECM@?4?$AA@
CONST	SEGMENT
??_C@_01LFCBOECM@?4?$AA@ DB '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09LMDFCLDK@TextureDB?$AA@
CONST	SEGMENT
??_C@_09LMDFCLDK@TextureDB?$AA@ DB 'TextureDB', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@EPADCPNN@Failed?5to?5read?5terrain?5texture?4?5@
CONST	SEGMENT
??_C@_0CK@EPADCPNN@Failed?5to?5read?5terrain?5texture?4?5@ DB 'Failed to '
	DB	'read terrain texture. CD Error?', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IHKENOG@Failed?5to?5open?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BC@IHKENOG@Failed?5to?5open?5?$CFs?$AA@ DB 'Failed to open %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@BGAMGLNF@?$CFs?3?5Couldn?8t?5read?5tile?5paths?5?9?5d@
CONST	SEGMENT
??_C@_0CL@BGAMGLNF@?$CFs?3?5Couldn?8t?5read?5tile?5paths?5?9?5d@ DB '%s: '
	DB	'Couldn''t read tile paths - disk error?', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@IDPOCIDB@?$CFs?3?5Couldn?8t?5read?5tile?5areas?5?9?5d@
CONST	SEGMENT
??_C@_0CL@IDPOCIDB@?$CFs?3?5Couldn?8t?5read?5tile?5areas?5?9?5d@ DB '%s: '
	DB	'Couldn''t read tile areas - disk error?', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@ENOKGICB@?$CFs?3?5Couldn?8t?5read?5tile?5header?5?9?5@
CONST	SEGMENT
??_C@_0CM@ENOKGICB@?$CFs?3?5Couldn?8t?5read?5tile?5header?5?9?5@ DB '%s: '
	DB	'Couldn''t read tile header - disk error?', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@CGMFNAOK@?$CFs?3?5Couldn?8t?5read?5set?5descriptio@
CONST	SEGMENT
??_C@_0DA@CGMFNAOK@?$CFs?3?5Couldn?8t?5read?5set?5descriptio@ DB '%s: Cou'
	DB	'ldn''t read set description - disk error?', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@HKCLFLMC@Failed?5to?5allocate?5memory?5for?5th@
CONST	SEGMENT
??_C@_0DE@HKCLFLMC@Failed?5to?5allocate?5memory?5for?5th@ DB 'Failed to a'
	DB	'llocate memory for the texture database.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@CKHFAODD@Proceeding?5with?5Empty?5List?$AA@
CONST	SEGMENT
??_C@_0BL@CKHFAODD@Proceeding?5with?5Empty?5List?$AA@ DB 'Proceeding with'
	DB	' Empty List', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KDKMALDE@?$CFs?3?5Couldn?8d?5read?5texture?5list?4?$AA@
CONST	SEGMENT
??_C@_0CA@KDKMALDE@?$CFs?3?5Couldn?8d?5read?5texture?5list?4?$AA@ DB '%s:'
	DB	' Couldn''d read texture list.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ELCGCACE@Texture?4BIN?$AA@
CONST	SEGMENT
??_C@_0M@ELCGCACE@Texture?4BIN?$AA@ DB 'Texture.BIN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KMKLKCLL@?$CFstexture?2?$AA@
CONST	SEGMENT
??_C@_0L@KMKLKCLL@?$CFstexture?2?$AA@ DB '%stexture\', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KICIPPFI@?2?$AA@
CONST	SEGMENT
??_C@_01KICIPPFI@?2?$AA@ DB '\', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@LGBCNBPK@Texture?5path?5name?5overflow?$CB?$AA@
CONST	SEGMENT
??_C@_0BM@LGBCNBPK@Texture?5path?5name?5overflow?$CB?$AA@ DB 'Texture pat'
	DB	'h name overflow!', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@ DB 'Error:  %'
	DB	'0d  %s  %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HFACBFJD@TerrTex?4cpp?$AA@
CONST	SEGMENT
??_C@_0M@HFACBFJD@TerrTex?4cpp?$AA@ DB 'TerrTex.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
CONST	SEGMENT
??_C@_0M@CFLADCE@Feb?518?52013?$AA@ DB 'Feb 18 2013', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HDLLCJOI@texturedb?5mutex?$AA@
CONST	SEGMENT
??_C@_0BA@HDLLCJOI@texturedb?5mutex?$AA@ DB 'texturedb mutex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03CMMIMEAC@DDS?$AA@
CONST	SEGMENT
??_C@_03CMMIMEAC@DDS?$AA@ DB 'DDS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03GGDFNBH@TGA?$AA@
CONST	SEGMENT
??_C@_03GGDFNBH@TGA?$AA@ DB 'TGA', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MNGDDBAC@APL?$AA@
CONST	SEGMENT
??_C@_03MNGDDBAC@APL?$AA@ DB 'APL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CNFPPDJC@BMP?$AA@
CONST	SEGMENT
??_C@_03CNFPPDJC@BMP?$AA@ DB 'BMP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03BFAIMLIE@PCX?$AA@
CONST	SEGMENT
??_C@_03BFAIMLIE@PCX?$AA@ DB 'PCX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03DJLAKPIA@LBM?$AA@
CONST	SEGMENT
??_C@_03DJLAKPIA@LBM?$AA@ DB 'LBM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03BBABOKL@GIF?$AA@
CONST	SEGMENT
??_C@_03BBABOKL@GIF?$AA@ DB 'GIF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7CImageFileMemory@@6B@
CONST	SEGMENT
??_7CImageFileMemory@@6B@ DD FLAT:??_R4CImageFileMemory@@6B@ ; CImageFileMemory::`vftable'
	DD	FLAT:??_ECImageFileMemory@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CFileMemory@@6B@
CONST	SEGMENT
??_7CFileMemory@@6B@ DD FLAT:??_R4CFileMemory@@6B@	; CFileMemory::`vftable'
	DD	FLAT:??_ECFileMemory@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CFileIO@@6B@
CONST	SEGMENT
??_7CFileIO@@6B@ DD FLAT:??_R4CFileIO@@6B@		; CFileIO::`vftable'
	DD	FLAT:??_ECFileIO@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?Load@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H_N@Z$0
__unwindtable$?SyncDDSTextures@TextureDB@@QAE_N_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SyncDDSTextures@TextureDB@@QAE_N_N@Z$0
__unwindtable$?RestoreAll@TextureDB@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RestoreAll@TextureDB@@QAEXXZ$0
__unwindtable$?Release@TextureDB@@QAEXK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Release@TextureDB@@QAEXK@Z$0
__unwindtable$?Cleanup@TextureDB@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Cleanup@TextureDB@@QAEXXZ$0
__unwindtable$?Setup@TextureDB@@QAEHPAVDXContext@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Setup@TextureDB@@QAEHPAVDXContext@@PBD@Z$0
__unwindtable$?Activate@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Activate@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Activate@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Activate@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Activate@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H@Z$3
__ehfuncinfo$?Activate@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?Activate@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Load@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Load@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?SyncDDSTextures@TextureDB@@QAE_N_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SyncDDSTextures@TextureDB@@QAE_N_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?RestoreAll@TextureDB@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RestoreAll@TextureDB@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Release@TextureDB@@QAEXK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Release@TextureDB@@QAEXK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Cleanup@TextureDB@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Cleanup@TextureDB@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Setup@TextureDB@@QAEHPAVDXContext@@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Setup@TextureDB@@QAEHPAVDXContext@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_TheTerrTextures$initializer$ DD FLAT:??__ETheTerrTextures@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\terrtex.cpp
_TEXT	SEGMENT
_flags$ = 8						; size = 4
?getDDSWidth@?A0xd5d9628f@@YAHH@Z PROC			; `anonymous namespace'::getDDSWidth

; 878  :     {

	push	ebp
	mov	ebp, esp

; 879  :         if (flags & MPR_TI_16)

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 4096				; 00001000H
	je	SHORT $LN16@getDDSWidt

; 880  :         {
; 881  :             return 16;

	mov	eax, 16					; 00000010H
	jmp	$LN17@getDDSWidt
	jmp	$LN17@getDDSWidt
$LN16@getDDSWidt:

; 882  :         }
; 883  :         else if (flags & MPR_TI_32)

	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 8192				; 00002000H
	je	SHORT $LN14@getDDSWidt

; 884  :         {
; 885  :             return 32;

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN17@getDDSWidt
	jmp	SHORT $LN17@getDDSWidt
$LN14@getDDSWidt:

; 886  :         }
; 887  :         else if (flags & MPR_TI_64)

	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 16384				; 00004000H
	je	SHORT $LN12@getDDSWidt

; 888  :         {
; 889  :             return 64;

	mov	eax, 64					; 00000040H
	jmp	SHORT $LN17@getDDSWidt
	jmp	SHORT $LN17@getDDSWidt
$LN12@getDDSWidt:

; 890  :         }
; 891  :         else if (flags & MPR_TI_128)

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 32768				; 00008000H
	je	SHORT $LN10@getDDSWidt

; 892  :         {
; 893  :             return 128;

	mov	eax, 128				; 00000080H
	jmp	SHORT $LN17@getDDSWidt
	jmp	SHORT $LN17@getDDSWidt
$LN10@getDDSWidt:

; 894  :         }
; 895  :         else if (flags & MPR_TI_256)

	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN8@getDDSWidt

; 896  :         {
; 897  :             return 256;

	mov	eax, 256				; 00000100H
	jmp	SHORT $LN17@getDDSWidt
	jmp	SHORT $LN17@getDDSWidt
$LN8@getDDSWidt:

; 898  :         }
; 899  :         else if (flags & MPR_TI_512)

	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 131072				; 00020000H
	je	SHORT $LN6@getDDSWidt

; 900  :         {
; 901  :             return 512;

	mov	eax, 512				; 00000200H
	jmp	SHORT $LN17@getDDSWidt
	jmp	SHORT $LN17@getDDSWidt
$LN6@getDDSWidt:

; 902  :         }
; 903  :         else if (flags & MPR_TI_1024)

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 262144				; 00040000H
	je	SHORT $LN4@getDDSWidt

; 904  :         {
; 905  :             return 1024;

	mov	eax, 1024				; 00000400H
	jmp	SHORT $LN17@getDDSWidt
	jmp	SHORT $LN17@getDDSWidt
$LN4@getDDSWidt:

; 906  :         }
; 907  :         else if (flags & MPR_TI_2048)

	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 524288				; 00080000H
	je	SHORT $LN2@getDDSWidt

; 908  :         {
; 909  :             return 2048;

	mov	eax, 2048				; 00000800H
	jmp	SHORT $LN17@getDDSWidt

; 910  :         }
; 911  :         else

	jmp	SHORT $LN17@getDDSWidt
$LN2@getDDSWidt:

; 912  :         {
; 913  :             // BUG!!!
; 914  :             return 4096;

	mov	eax, 4096				; 00001000H
$LN17@getDDSWidt:

; 915  :         }
; 916  :     }

	pop	ebp
	ret	0
?getDDSWidth@?A0xd5d9628f@@YAHH@Z ENDP			; `anonymous namespace'::getDDSWidth
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__FTheTerrTextures@@YAXXZ
text$yd	SEGMENT
??__FTheTerrTextures@@YAXXZ PROC			; `dynamic atexit destructor for 'TheTerrTextures'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?TheTerrTextures@@3VTextureDB@@A ; TheTerrTextures
	call	??1TextureDB@@QAE@XZ			; TextureDB::~TextureDB
	pop	ebp
	ret	0
??__FTheTerrTextures@@YAXXZ ENDP			; `dynamic atexit destructor for 'TheTerrTextures''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\terrtex.cpp
;	COMDAT ??__ETheTerrTextures@@YAXXZ
text$yc	SEGMENT
??__ETheTerrTextures@@YAXXZ PROC			; `dynamic initializer for 'TheTerrTextures'', COMDAT

; 43   : TextureDB TheTerrTextures;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?TheTerrTextures@@3VTextureDB@@A ; TheTerrTextures
	call	??0TextureDB@@QAE@XZ			; TextureDB::TextureDB
	push	OFFSET ??__FTheTerrTextures@@YAXXZ	; `dynamic atexit destructor for 'TheTerrTextures''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__ETheTerrTextures@@YAXXZ ENDP			; `dynamic initializer for 'TheTerrTextures''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\f4thread.h
;	COMDAT ??1F4ScopeLock@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1F4ScopeLock@@QAE@XZ PROC				; F4ScopeLock::~F4ScopeLock, COMDAT
; _this$ = ecx

; 119  : 	~F4ScopeLock(){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		if (mutex != 0){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@F4ScopeLoc

; 121  : 			F4LeaveCriticalSection(mutex);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_F4LeaveCriticalSection
	add	esp, 4
$LN2@F4ScopeLoc:

; 122  : 		}	
; 123  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??1F4ScopeLock@@QAE@XZ ENDP				; F4ScopeLock::~F4ScopeLock
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\f4thread.h
;	COMDAT ??0F4ScopeLock@@QAE@PAUF4CSECTIONHANDLE@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_mutex$ = 8						; size = 4
??0F4ScopeLock@@QAE@PAUF4CSECTIONHANDLE@@@Z PROC	; F4ScopeLock::F4ScopeLock, COMDAT
; _this$ = ecx

; 113  : 	F4ScopeLock(F4CSECTIONHANDLE *mutex) : mutex(mutex){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mutex$[ebp]
	mov	DWORD PTR [eax], ecx

; 114  : 		if (mutex != 0){

	cmp	DWORD PTR _mutex$[ebp], 0
	je	SHORT $LN2@F4ScopeLoc

; 115  : 			F4EnterCriticalSection(mutex);

	mov	edx, DWORD PTR _mutex$[ebp]
	push	edx
	call	_F4EnterCriticalSection
	add	esp, 4
$LN2@F4ScopeLoc:

; 116  : 		}	
; 117  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0F4ScopeLock@@QAE@PAUF4CSECTIONHANDLE@@@Z ENDP	; F4ScopeLock::F4ScopeLock
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\nvdxt_options.h
;	COMDAT ??0CompressionOptions@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CompressionOptions@@QAE@XZ PROC			; CompressionOptions::CompressionOptions, COMDAT
; _this$ = ecx

; 237  :     CompressionOptions()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 238  :     {
; 239  : 
; 240  :         bRescaleImageToPower2 = RESCALE_NONE; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 241  :         preScaleX = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+4], xmm0

; 242  :         preScaleY = 1;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+8], xmm0

; 243  : 
; 244  :         bMipMapsInImage = false;    // mip have been loaded in during read

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0

; 245  : 
; 246  :         MipMapType = dGenerateMipMaps;         // dNoMipMaps, dSpecifyMipMaps, dUseExistingMipMaps, dGenerateMipMaps

	mov	ecx, 30					; 0000001eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+14], cx

; 247  :         SpecifiedMipMaps = 0;   // if dSpecifyMipMaps or dUseExistingMipMaps is set (number of mipmaps to generate)

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+16], ax

; 248  : 
; 249  :         MIPFilterType = dMIPFilterBox;      // for MIP maps

	mov	edx, 133				; 00000085H
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+18], dx

; 250  :         /* 
; 251  :         for MIPFilterType, specify one of:
; 252  :         dMIPFilterBox 
; 253  :         dMIPFilterCubic 
; 254  :         dMIPFilterFullDFT 
; 255  :         dMIPFilterKaiser 
; 256  :         dMIPFilterLinearLightKaiser 
; 257  :         */
; 258  : 
; 259  : 
; 260  :         bBinaryAlpha = false;       // zero or one alpha channel

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+20], 0

; 261  : 
; 262  :         bNormalMap= false;         // Is a normal Map

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+21], 0

; 263  :         bDuDvMap= false;           // Is a DuDv (EMBM) map

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+22], 0

; 264  : 
; 265  :         bAlphaBorder= false;       // make an alpha border

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+23], 0

; 266  :         bBorder= false;            // make a color border

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+24], 0

; 267  :         BorderColor.u = 0;        // color of border

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 268  : 
; 269  : 
; 270  :         bFadeColor = false;         // fade color over MIP maps

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+32], 0

; 271  :         bFadeAlpha= false;         // fade alpha over MIP maps

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+33], 0

; 272  : 
; 273  :         FadeToColor.u = 0;        // color to fade to

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 0

; 274  :         FadeToAlpha = 0;        // alpha value to fade to (0-255)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], 0

; 275  : 
; 276  :         FadeToDelay = 0;        // start fading after 'n' MIP maps

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+44], 0

; 277  : 
; 278  :         FadeAmount = 0;         // percentage of color to fade in

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0

; 279  : 
; 280  :         BinaryAlphaThreshold = 0;  // When Binary Alpha is selected, below this value, alpha is zero

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+52], 0

; 281  : 
; 282  : 
; 283  :         bDitherColor = false;       // enable dithering during 16 bit conversion

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+56], 0

; 284  :         bDitherEachMIPLevel = false;// enable dithering during 16 bit conversion for each MIP level (after filtering)

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+57], 0

; 285  :         bGreyScale = false;         // treat image as a grey scale

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+58], 0

; 286  :         bQuickCompress = false;         // Fast compression scheme

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+59], 0

; 287  :         bForceDXT1FourColors = false;  // do not let DXT1 use 3 color representation

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+60], 0

; 288  : 
; 289  : 
; 290  :         // sharpening after creating each MIP map level
; 291  :         // warp sharp filter parameters
; 292  :         // look here for details:
; 293  :         //          
; 294  :         // "Enhancement by Image-Dependent Warping", 
; 295  :         // IEEE Transactions on Image Processing, 1999, Vol. 8, No. 8, S. 1063
; 296  :         // Nur Arad and Craig Gotsman
; 297  :         // http://www.cs.technion.ac.il/~gotsman/AmendedPubl/EnhancementByImage/EnhancementByI-D.pdf
; 298  : 
; 299  : 
; 300  :         bSharpenEachMIPLevel = false;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+61], 0

; 301  :         SharpenEdgeRadius = 2;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+64], 2

; 302  :         SharpenLambda = 10;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [eax+68], xmm0

; 303  :         SharpenMu = 0.01f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR [ecx+72], xmm0

; 304  :         SharpenTheta =  0.75;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f400000
	movss	DWORD PTR [edx+76], xmm0

; 305  :         bSharpenUseTwoComponents = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+80], 0

; 306  :         bSharpenNonMaximalSuppression = false;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+81], 0

; 307  :         bSharpenSharpBlur = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+82], 0

; 308  :         bSharpenFlavor2 = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+83], 0

; 309  : 
; 310  :         // gamma value for Kaiser, Light Linear
; 311  :         FilterGamma = 2.2F;  // MD -- 20031114: add the "F" to fix a truncation warning.

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@400ccccd
	movss	DWORD PTR [ecx+84], xmm0

; 312  :         // alpha value for kaiser filter
; 313  :         FilterKaiserAlpha = 4.0;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [edx+88], xmm0

; 314  :         // width of filter
; 315  :         FilterWidth = 10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+92], 10			; 0000000aH

; 316  : 
; 317  :         TextureType = dTextureType2D;        // regular decal, cube or volume  

	mov	ecx, 80					; 00000050H
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+96], cx

; 318  :         /*
; 319  :         for TextureType, specify one of:
; 320  :         dTextureType2D 
; 321  :         dTextureTypeCube 
; 322  :         dTextureTypeImage 
; 323  :         dTextureTypeVolume
; 324  :         */
; 325  : 
; 326  :         TextureFormat = dDXT1;	    

	mov	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+98], ax

; 327  :         /* 
; 328  :         for TextureFormat, specify any from dTextureFormatFirst to 
; 329  :         dTextureFormatLast
; 330  : 
; 331  :         dDXT1, 
; 332  :         dDXT1a, 
; 333  :         dDXT3, 
; 334  :         dDXT5, 
; 335  :         d4444, 
; 336  :         d1555, 	
; 337  :         d565,	
; 338  :         d8888, 	
; 339  :         d888, 
; 340  :         d555, 
; 341  :         dV8U8, 
; 342  :         dCxV8U8, 
; 343  : 
; 344  :         d8,   // paletted
; 345  :         dA8,            // alpha only
; 346  : 
; 347  :         */
; 348  : 
; 349  :         bSwapRGB = false;           // swap color positions R and G

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+100], 0

; 350  : 
; 351  :     };

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CompressionOptions@@QAE@XZ ENDP			; CompressionOptions::CompressionOptions
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\terrtex.cpp
_TEXT	SEGMENT
_this$ = -32						; size = 4
tv75 = -28						; size = 4
tv74 = -24						; size = 4
tv72 = -20						; size = 4
tv69 = -16						; size = 4
tv68 = -12						; size = 4
tv66 = -8						; size = 4
_delta$ = -4						; size = 4
_r$ = 8							; size = 4
_g$ = 12						; size = 4
_b$ = 16						; size = 4
_h$ = 20						; size = 4
_s$ = 24						; size = 4
_v$ = 28						; size = 4
?RGBtoHSV@TextureDB@@IAEXMMMPAM00@Z PROC		; TextureDB::RGBtoHSV
; _this$ = ecx

; 1638 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1639 :     float delta;
; 1640 : 
; 1641 :     //Value
; 1642 :     *v = MAXIMUM(r, g, b);

	movss	xmm0, DWORD PTR _r$[ebp]
	comiss	xmm0, DWORD PTR _g$[ebp]
	jbe	SHORT $LN16@RGBtoHSV
	movss	xmm0, DWORD PTR _r$[ebp]
	comiss	xmm0, DWORD PTR _b$[ebp]
	jbe	SHORT $LN12@RGBtoHSV
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR tv66[ebp], xmm0
	jmp	SHORT $LN13@RGBtoHSV
$LN12@RGBtoHSV:
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR tv66[ebp], xmm0
$LN13@RGBtoHSV:
	movss	xmm0, DWORD PTR tv66[ebp]
	movss	DWORD PTR tv69[ebp], xmm0
	jmp	SHORT $LN17@RGBtoHSV
$LN16@RGBtoHSV:
	movss	xmm0, DWORD PTR _g$[ebp]
	comiss	xmm0, DWORD PTR _b$[ebp]
	jbe	SHORT $LN14@RGBtoHSV
	movss	xmm0, DWORD PTR _g$[ebp]
	movss	DWORD PTR tv68[ebp], xmm0
	jmp	SHORT $LN15@RGBtoHSV
$LN14@RGBtoHSV:
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR tv68[ebp], xmm0
$LN15@RGBtoHSV:
	movss	xmm0, DWORD PTR tv68[ebp]
	movss	DWORD PTR tv69[ebp], xmm0
$LN17@RGBtoHSV:
	mov	eax, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR tv69[ebp]
	movss	DWORD PTR [eax], xmm0

; 1643 :     //max = *v
; 1644 : 
; 1645 :     //Saturation
; 1646 :     delta = *v - MINIMUM(r, g, b);

	movss	xmm0, DWORD PTR _g$[ebp]
	comiss	xmm0, DWORD PTR _r$[ebp]
	jbe	SHORT $LN22@RGBtoHSV
	movss	xmm0, DWORD PTR _b$[ebp]
	comiss	xmm0, DWORD PTR _r$[ebp]
	jbe	SHORT $LN18@RGBtoHSV
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR tv72[ebp], xmm0
	jmp	SHORT $LN19@RGBtoHSV
$LN18@RGBtoHSV:
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR tv72[ebp], xmm0
$LN19@RGBtoHSV:
	movss	xmm0, DWORD PTR tv72[ebp]
	movss	DWORD PTR tv75[ebp], xmm0
	jmp	SHORT $LN23@RGBtoHSV
$LN22@RGBtoHSV:
	movss	xmm0, DWORD PTR _b$[ebp]
	comiss	xmm0, DWORD PTR _g$[ebp]
	jbe	SHORT $LN20@RGBtoHSV
	movss	xmm0, DWORD PTR _g$[ebp]
	movss	DWORD PTR tv74[ebp], xmm0
	jmp	SHORT $LN21@RGBtoHSV
$LN20@RGBtoHSV:
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR tv74[ebp], xmm0
$LN21@RGBtoHSV:
	movss	xmm0, DWORD PTR tv74[ebp]
	movss	DWORD PTR tv75[ebp], xmm0
$LN23@RGBtoHSV:
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR tv75[ebp]
	movss	DWORD PTR _delta$[ebp], xmm0

; 1647 : 
; 1648 :     if (*v == 0.0f)

	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [edx]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN9@RGBtoHSV

; 1649 :     {
; 1650 :         *s = 0;

	mov	eax, DWORD PTR _s$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1651 :         *h = -1;

	mov	ecx, DWORD PTR _h$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [ecx], xmm0

; 1652 :         return;

	jmp	$LN10@RGBtoHSV

; 1653 :     }
; 1654 :     else

	jmp	SHORT $LN8@RGBtoHSV
$LN9@RGBtoHSV:

; 1655 :         *s = delta / *v;

	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR _delta$[ebp]
	divss	xmm0, DWORD PTR [edx]
	mov	eax, DWORD PTR _s$[ebp]
	movss	DWORD PTR [eax], xmm0
$LN8@RGBtoHSV:

; 1656 : 
; 1657 :     if (*s == 0.0f)

	mov	ecx, DWORD PTR _s$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN7@RGBtoHSV

; 1658 :     {
; 1659 :         *h = -1;

	mov	edx, DWORD PTR _h$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [edx], xmm0

; 1660 :         return;

	jmp	$LN10@RGBtoHSV

; 1661 :     }
; 1662 :     else

	jmp	SHORT $LN2@RGBtoHSV
$LN7@RGBtoHSV:

; 1663 :     {
; 1664 :         if (r == *v)

	mov	eax, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR _r$[ebp]
	ucomiss	xmm0, DWORD PTR [eax]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN5@RGBtoHSV

; 1665 :             *h = (g - b) / delta; // between yellow & magenta

	movss	xmm0, DWORD PTR _g$[ebp]
	subss	xmm0, DWORD PTR _b$[ebp]
	divss	xmm0, DWORD PTR _delta$[ebp]
	mov	ecx, DWORD PTR _h$[ebp]
	movss	DWORD PTR [ecx], xmm0
	jmp	SHORT $LN2@RGBtoHSV
$LN5@RGBtoHSV:

; 1666 :         else if (g == *v)

	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR _g$[ebp]
	ucomiss	xmm0, DWORD PTR [edx]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@RGBtoHSV

; 1667 :             *h = 2 + (b - r) / delta; // between cyan & yellow

	movss	xmm0, DWORD PTR _b$[ebp]
	subss	xmm0, DWORD PTR _r$[ebp]
	divss	xmm0, DWORD PTR _delta$[ebp]
	addss	xmm0, DWORD PTR __real@40000000
	mov	eax, DWORD PTR _h$[ebp]
	movss	DWORD PTR [eax], xmm0

; 1668 :         else

	jmp	SHORT $LN2@RGBtoHSV
$LN3@RGBtoHSV:

; 1669 :             *h = 4 + (r - g) / delta; // between magenta & cyan

	movss	xmm0, DWORD PTR _r$[ebp]
	subss	xmm0, DWORD PTR _g$[ebp]
	divss	xmm0, DWORD PTR _delta$[ebp]
	addss	xmm0, DWORD PTR __real@40800000
	mov	ecx, DWORD PTR _h$[ebp]
	movss	DWORD PTR [ecx], xmm0
$LN2@RGBtoHSV:

; 1670 :     }
; 1671 : 
; 1672 :     *h *= 60; // degrees

	mov	edx, DWORD PTR _h$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR __real@42700000
	mov	eax, DWORD PTR _h$[ebp]
	movss	DWORD PTR [eax], xmm0

; 1673 : 
; 1674 :     if (*h < 0) *h += 360;

	mov	ecx, DWORD PTR _h$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [ecx]
	jbe	SHORT $LN1@RGBtoHSV
	mov	edx, DWORD PTR _h$[ebp]
	movss	xmm0, DWORD PTR [edx]
	addss	xmm0, DWORD PTR __real@43b40000
	mov	eax, DWORD PTR _h$[ebp]
	movss	DWORD PTR [eax], xmm0
$LN1@RGBtoHSV:
$LN10@RGBtoHSV:

; 1675 : }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?RGBtoHSV@TextureDB@@IAEXMMMPAM00@Z ENDP		; TextureDB::RGBtoHSV
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\terrtex.cpp
_TEXT	SEGMENT
_this$ = -28						; size = 4
tv85 = -24						; size = 4
_i$ = -20						; size = 4
_f$ = -16						; size = 4
_q$ = -12						; size = 4
_t$ = -8						; size = 4
_p$ = -4						; size = 4
_r$ = 8							; size = 4
_g$ = 12						; size = 4
_b$ = 16						; size = 4
_h$ = 20						; size = 4
_s$ = 24						; size = 4
_v$ = 28						; size = 4
?HSVtoRGB@TextureDB@@IAEXPAM00MMM@Z PROC		; TextureDB::HSVtoRGB
; _this$ = ecx

; 1678 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 1679 :     int i;
; 1680 :     float f, p, q, t;
; 1681 : 
; 1682 :     if (s == 0 || h == -1)

	movss	xmm0, DWORD PTR _s$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN9@HSVtoRGB
	movss	xmm0, DWORD PTR _h$[ebp]
	ucomiss	xmm0, DWORD PTR __real@bf800000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN10@HSVtoRGB
$LN9@HSVtoRGB:

; 1683 :     {
; 1684 :         // achromatic (grey)
; 1685 :         *r = *g = *b = v;

	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	ecx, DWORD PTR _g$[ebp]
	movss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR [ecx], xmm0
	mov	edx, DWORD PTR _r$[ebp]
	movss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR [edx], xmm0

; 1686 :         return;

	jmp	$LN11@HSVtoRGB
$LN10@HSVtoRGB:

; 1687 :     }
; 1688 : 
; 1689 :     h /= 60.0f; // sector 0 to 5

	movss	xmm0, DWORD PTR _h$[ebp]
	divss	xmm0, DWORD PTR __real@42700000
	movss	DWORD PTR _h$[ebp], xmm0

; 1690 :     i = static_cast<int>(floor(h));

	push	ecx
	movss	xmm0, DWORD PTR _h$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?floor@@YAMM@Z				; floor
	add	esp, 4
	call	__ftol2_sse
	mov	DWORD PTR _i$[ebp], eax

; 1691 :     f = h - i; // factorial part of h

	cvtsi2ss xmm0, DWORD PTR _i$[ebp]
	movss	xmm1, DWORD PTR _h$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _f$[ebp], xmm1

; 1692 :     p = v * (1 - s);

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR _p$[ebp], xmm0

; 1693 :     q = v * (1 - s * f);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _f$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _v$[ebp]
	movss	DWORD PTR _q$[ebp], xmm1

; 1694 :     t = v * (1 - s * (1 - f));

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _f$[ebp]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _v$[ebp]
	movss	DWORD PTR _t$[ebp], xmm1

; 1695 : 
; 1696 :     switch (i)

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv85[ebp], eax
	cmp	DWORD PTR tv85[ebp], 4
	ja	$LN1@HSVtoRGB
	mov	ecx, DWORD PTR tv85[ebp]
	jmp	DWORD PTR $LN13@HSVtoRGB[ecx*4]
$LN6@HSVtoRGB:

; 1697 :     {
; 1698 :         case 0:
; 1699 :             *r = v;

	mov	edx, DWORD PTR _r$[ebp]
	movss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR [edx], xmm0

; 1700 :             *g = t;

	mov	eax, DWORD PTR _g$[ebp]
	movss	xmm0, DWORD PTR _t$[ebp]
	movss	DWORD PTR [eax], xmm0

; 1701 :             *b = p;

	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 1702 :             break;

	jmp	$LN7@HSVtoRGB
$LN5@HSVtoRGB:

; 1703 : 
; 1704 :         case 1:
; 1705 :             *r = q;

	mov	edx, DWORD PTR _r$[ebp]
	movss	xmm0, DWORD PTR _q$[ebp]
	movss	DWORD PTR [edx], xmm0

; 1706 :             *g = v;

	mov	eax, DWORD PTR _g$[ebp]
	movss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR [eax], xmm0

; 1707 :             *b = p;

	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 1708 :             break;

	jmp	$LN7@HSVtoRGB
$LN4@HSVtoRGB:

; 1709 : 
; 1710 :         case 2:
; 1711 :             *r = p;

	mov	edx, DWORD PTR _r$[ebp]
	movss	xmm0, DWORD PTR _p$[ebp]
	movss	DWORD PTR [edx], xmm0

; 1712 :             *g = v;

	mov	eax, DWORD PTR _g$[ebp]
	movss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR [eax], xmm0

; 1713 :             *b = t;

	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR _t$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 1714 :             break;

	jmp	SHORT $LN7@HSVtoRGB
$LN3@HSVtoRGB:

; 1715 : 
; 1716 :         case 3:
; 1717 :             *r = p;

	mov	edx, DWORD PTR _r$[ebp]
	movss	xmm0, DWORD PTR _p$[ebp]
	movss	DWORD PTR [edx], xmm0

; 1718 :             *g = q;

	mov	eax, DWORD PTR _g$[ebp]
	movss	xmm0, DWORD PTR _q$[ebp]
	movss	DWORD PTR [eax], xmm0

; 1719 :             *b = v;

	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 1720 :             break;

	jmp	SHORT $LN7@HSVtoRGB
$LN2@HSVtoRGB:

; 1721 : 
; 1722 :         case 4:
; 1723 :             *r = t;

	mov	edx, DWORD PTR _r$[ebp]
	movss	xmm0, DWORD PTR _t$[ebp]
	movss	DWORD PTR [edx], xmm0

; 1724 :             *g = p;

	mov	eax, DWORD PTR _g$[ebp]
	movss	xmm0, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax], xmm0

; 1725 :             *b = v;

	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 1726 :             break;

	jmp	SHORT $LN7@HSVtoRGB
$LN1@HSVtoRGB:

; 1727 : 
; 1728 :         default: // case 5:
; 1729 :             *r = v;

	mov	edx, DWORD PTR _r$[ebp]
	movss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR [edx], xmm0

; 1730 :             *g = p;

	mov	eax, DWORD PTR _g$[ebp]
	movss	xmm0, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax], xmm0

; 1731 :             *b = q;

	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR _q$[ebp]
	movss	DWORD PTR [ecx], xmm0
$LN7@HSVtoRGB:
$LN11@HSVtoRGB:

; 1732 :             //break;
; 1733 :     }
; 1734 : }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
	npad	3
$LN13@HSVtoRGB:
	DD	$LN6@HSVtoRGB
	DD	$LN5@HSVtoRGB
	DD	$LN4@HSVtoRGB
	DD	$LN3@HSVtoRGB
	DD	$LN2@HSVtoRGB
?HSVtoRGB@TextureDB@@IAEXPAM00MMM@Z ENDP		; TextureDB::HSVtoRGB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\terrtex.cpp
_TEXT	SEGMENT
_this$ = -112						; size = 4
_options$ = -108					; size = 104
__$ArrayPad$ = -4					; size = 4
_szFileName$ = 8					; size = 4
_pDst$ = 12						; size = 4
_dimensions$ = 16					; size = 4
?SaveDDS_DXTn@TextureDB@@IAE_NPBDPAEH@Z PROC		; TextureDB::SaveDDS_DXTn
; _this$ = ecx

; 1613 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1614 :     CompressionOptions options;

	lea	ecx, DWORD PTR _options$[ebp]
	call	??0CompressionOptions@@QAE@XZ		; CompressionOptions::CompressionOptions

; 1615 : 
; 1616 : #if _MSC_VER >= 1300
; 1617 : 
; 1618 :     fileout = _open(szFileName, O_WRONLY | O_BINARY | O_CREAT, S_IWRITE);

	push	128					; 00000080H
	push	33025					; 00008101H
	mov	eax, DWORD PTR _szFileName$[ebp]
	push	eax
	call	?_open@@YAHPBDHH@Z			; _open
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?fileout@@3HA, eax		; fileout

; 1619 : 
; 1620 :     options.MipMapType = dNoMipMaps;

	mov	ecx, 32					; 00000020H
	mov	WORD PTR _options$[ebp+14], cx

; 1621 :     options.bBinaryAlpha = false;

	mov	BYTE PTR _options$[ebp+20], 0

; 1622 :     options.TextureFormat = dDXT1;

	mov	edx, 10					; 0000000aH
	mov	WORD PTR _options$[ebp+98], dx

; 1623 : 
; 1624 :     //nvDXTcompress((BYTE *)pDst,dimensions,dimensions,dimensions*4,&options,4,0);
; 1625 : 
; 1626 :     _close(fileout);

	mov	eax, DWORD PTR ?fileout@@3HA		; fileout
	push	eax
	call	__close
	add	esp, 4

; 1627 : 
; 1628 : #endif
; 1629 : 
; 1630 :     return true;

	mov	al, 1

; 1631 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SaveDDS_DXTn@TextureDB@@IAE_NPBDPAEH@Z ENDP		; TextureDB::SaveDDS_DXTn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\terrtex.cpp
_TEXT	SEGMENT
_dwMagic$ = -668					; size = 4
_token$ = -664						; size = 4
_sep$ = -660						; size = 2
_this$ = -656						; size = 4
tv293 = -652						; size = 4
tv157 = -648						; size = 4
_fp$ = -644						; size = 4
_ddsd$ = -640						; size = 124
_szTemp$ = -516						; size = 256
_szFileName$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_pTile$ = 8						; size = 4
_res$ = 12						; size = 4
?ReadImageDDS@TextureDB@@IAEXPAUTileEntry@@H@Z PROC	; TextureDB::ReadImageDDS
; _this$ = ecx

; 1423 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 668				; 0000029cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1424 :     DDSURFACEDESC2 ddsd;
; 1425 :     DWORD dwMagic;
; 1426 :     char szFileName[256], szTemp[256], *token;
; 1427 :     char sep[] = ".";

	mov	ax, WORD PTR ??_C@_01LFCBOECM@?4?$AA@
	mov	WORD PTR _sep$[ebp], ax

; 1428 :     FILE *fp;
; 1429 : 
; 1430 : 
; 1431 :     strcpy(szTemp, (char *)pTile->filename);

	mov	ecx, DWORD PTR _pTile$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szTemp$[ebp]
	push	edx
	call	_strcpy
	add	esp, 8

; 1432 :     token = strtok(szTemp, sep);

	lea	eax, DWORD PTR _sep$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szTemp$[ebp]
	push	ecx
	call	_strtok
	add	esp, 8
	mov	DWORD PTR _token$[ebp], eax

; 1433 :     sprintf(szFileName, "%s%s.dds", texturePathD, token);

	mov	edx, DWORD PTR _token$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 260				; 00000104H
	push	eax
	push	OFFSET ??_C@_08GCAFGLGC@?$CFs?$CFs?4dds?$AA@
	lea	ecx, DWORD PTR _szFileName$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 1434 : 
; 1435 :     if (res == 1)

	cmp	DWORD PTR _res$[ebp], 1
	jne	SHORT $LN37@ReadImageD

; 1436 :     {
; 1437 :         szFileName[strlen(texturePathD)] = 'M';

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 260				; 00000104H
	push	edx
	call	_strlen
	add	esp, 4
	mov	BYTE PTR _szFileName$[ebp+eax], 77	; 0000004dH
	jmp	SHORT $LN36@ReadImageD
$LN37@ReadImageD:

; 1438 :     }
; 1439 :     else if (res == 0)

	cmp	DWORD PTR _res$[ebp], 0
	jne	SHORT $LN36@ReadImageD

; 1440 :     {
; 1441 :         szFileName[strlen(texturePathD)] = 'L';

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 260				; 00000104H
	push	eax
	call	_strlen
	add	esp, 4
	mov	BYTE PTR _szFileName$[ebp+eax], 76	; 0000004cH
$LN36@ReadImageD:

; 1442 :     }
; 1443 : 
; 1444 :     fp = fopen(szFileName, "rb");

	push	OFFSET ??_C@_02JDPG@rb?$AA@
	lea	ecx, DWORD PTR _szFileName$[ebp]
	push	ecx
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 1445 : 
; 1446 :     // FRB - bad dds file name
; 1447 :     if (!fp)

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN34@ReadImageD

; 1448 :         return;

	jmp	$LN38@ReadImageD
$LN34@ReadImageD:

; 1449 : 
; 1450 :     fread(&dwMagic, 1, sizeof(DWORD), fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	push	4
	push	1
	lea	eax, DWORD PTR _dwMagic$[ebp]
	push	eax
	call	_fread
	add	esp, 16					; 00000010H

; 1451 :     ShiAssert(dwMagic == MAKEFOURCC('D', 'D', 'S', ' '));
; 1452 : 
; 1453 :     // Read first compressed mipmap
; 1454 :     fread(&ddsd, 1, sizeof(DDSURFACEDESC2), fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	push	124					; 0000007cH
	push	1
	lea	edx, DWORD PTR _ddsd$[ebp]
	push	edx
	call	_fread
	add	esp, 16					; 00000010H

; 1455 : 
; 1456 :     // MLR 1/25/2004 - Little kludge so F4 can read DDS files made by dxtex
; 1457 :     if (ddsd.dwLinearSize == 0)

	cmp	DWORD PTR _ddsd$[ebp+16], 0
	jne	SHORT $LN33@ReadImageD

; 1458 :     {
; 1459 :         if (ddsd.ddpfPixelFormat.dwFourCC == MAKEFOURCC('D', 'X', 'T', '3') ||
; 1460 :             ddsd.ddpfPixelFormat.dwFourCC == MAKEFOURCC('D', 'X', 'T', '5'))

	cmp	DWORD PTR _ddsd$[ebp+80], 861165636	; 33545844H
	je	SHORT $LN31@ReadImageD
	cmp	DWORD PTR _ddsd$[ebp+80], 894720068	; 35545844H
	jne	SHORT $LN32@ReadImageD
$LN31@ReadImageD:

; 1461 :         {
; 1462 :             ddsd.dwLinearSize = ddsd.dwWidth * ddsd.dwWidth;

	mov	eax, DWORD PTR _ddsd$[ebp+12]
	imul	eax, DWORD PTR _ddsd$[ebp+12]
	mov	DWORD PTR _ddsd$[ebp+16], eax

; 1463 :             ddsd.dwFlags |= DDSD_LINEARSIZE;

	mov	ecx, DWORD PTR _ddsd$[ebp+4]
	or	ecx, 524288				; 00080000H
	mov	DWORD PTR _ddsd$[ebp+4], ecx
$LN32@ReadImageD:

; 1464 :         }
; 1465 : 
; 1466 :         if (ddsd.ddpfPixelFormat.dwFourCC == MAKEFOURCC('D', 'X', 'T', '1'))

	cmp	DWORD PTR _ddsd$[ebp+80], 827611204	; 31545844H
	jne	SHORT $LN33@ReadImageD

; 1467 :         {
; 1468 :             ddsd.dwLinearSize = ddsd.dwWidth * ddsd.dwWidth / 2;

	mov	edx, DWORD PTR _ddsd$[ebp+12]
	imul	edx, DWORD PTR _ddsd$[ebp+12]
	shr	edx, 1
	mov	DWORD PTR _ddsd$[ebp+16], edx

; 1469 :             ddsd.dwFlags |= DDSD_LINEARSIZE;

	mov	eax, DWORD PTR _ddsd$[ebp+4]
	or	eax, 524288				; 00080000H
	mov	DWORD PTR _ddsd$[ebp+4], eax
$LN33@ReadImageD:

; 1470 :         }
; 1471 :     }
; 1472 : 
; 1473 : 
; 1474 :     ShiAssert(ddsd.dwFlags & DDSD_LINEARSIZE)
; 1475 : 
; 1476 :     // Note: HACK (using height for flags)
; 1477 :     pTile->height[res] = MPR_TI_DDS;

	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _pTile$[ebp]
	mov	DWORD PTR [edx+ecx*4+48], 256		; 00000100H

; 1478 :     // Note: MUST BE DXT1
; 1479 :     pTile->height[res] |= MPR_TI_DXT1;

	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _pTile$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+48]
	or	edx, 512				; 00000200H
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _pTile$[ebp]
	mov	DWORD PTR [ecx+eax*4+48], edx

; 1480 : 
; 1481 :     // Note: 1024x1024 Max!
; 1482 :     switch (ddsd.dwWidth)

	mov	edx, DWORD PTR _ddsd$[ebp+12]
	mov	DWORD PTR tv157[ebp], edx
	cmp	DWORD PTR tv157[ebp], 256		; 00000100H
	ja	SHORT $LN40@ReadImageD
	cmp	DWORD PTR tv157[ebp], 256		; 00000100H
	je	$LN23@ReadImageD
	mov	eax, DWORD PTR tv157[ebp]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR tv157[ebp], eax
	cmp	DWORD PTR tv157[ebp], 112		; 00000070H
	ja	$LN28@ReadImageD
	mov	ecx, DWORD PTR tv157[ebp]
	movzx	edx, BYTE PTR $LN42@ReadImageD[ecx]
	jmp	DWORD PTR $LN44@ReadImageD[edx*4]
$LN40@ReadImageD:
	cmp	DWORD PTR tv157[ebp], 512		; 00000200H
	je	$LN22@ReadImageD
	cmp	DWORD PTR tv157[ebp], 1024		; 00000400H
	je	$LN21@ReadImageD
	cmp	DWORD PTR tv157[ebp], 2048		; 00000800H
	je	$LN20@ReadImageD
	jmp	$LN28@ReadImageD
$LN27@ReadImageD:

; 1483 :     {
; 1484 :         case 16:
; 1485 :             pTile->height[res] |= MPR_TI_16;

	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _pTile$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+48]
	or	edx, 4096				; 00001000H
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _pTile$[ebp]
	mov	DWORD PTR [ecx+eax*4+48], edx

; 1486 :             break;

	jmp	$LN28@ReadImageD
$LN26@ReadImageD:

; 1487 : 
; 1488 :         case 32:
; 1489 :             pTile->height[res] |= MPR_TI_32;

	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _pTile$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+48]
	or	ecx, 8192				; 00002000H
	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _pTile$[ebp]
	mov	DWORD PTR [eax+edx*4+48], ecx

; 1490 :             break;

	jmp	$LN28@ReadImageD
$LN25@ReadImageD:

; 1491 : 
; 1492 :         case 64:
; 1493 :             pTile->height[res] |= MPR_TI_64;

	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _pTile$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+48]
	or	eax, 16384				; 00004000H
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _pTile$[ebp]
	mov	DWORD PTR [edx+ecx*4+48], eax

; 1494 :             break;

	jmp	$LN28@ReadImageD
$LN24@ReadImageD:

; 1495 : 
; 1496 :         case 128:
; 1497 :             pTile->height[res] |= MPR_TI_128;

	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _pTile$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+48]
	or	edx, 32768				; 00008000H
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _pTile$[ebp]
	mov	DWORD PTR [ecx+eax*4+48], edx

; 1498 :             break;

	jmp	SHORT $LN28@ReadImageD
$LN23@ReadImageD:

; 1499 : 
; 1500 :         case 256:
; 1501 :             pTile->height[res] |= MPR_TI_256;

	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _pTile$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+48]
	or	ecx, 65536				; 00010000H
	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _pTile$[ebp]
	mov	DWORD PTR [eax+edx*4+48], ecx

; 1502 :             break;

	jmp	SHORT $LN28@ReadImageD
$LN22@ReadImageD:

; 1503 : 
; 1504 :         case 512:
; 1505 :             pTile->height[res] |= MPR_TI_512;

	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _pTile$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+48]
	or	eax, 131072				; 00020000H
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _pTile$[ebp]
	mov	DWORD PTR [edx+ecx*4+48], eax

; 1506 :             break;

	jmp	SHORT $LN28@ReadImageD
$LN21@ReadImageD:

; 1507 : 
; 1508 :         case 1024:
; 1509 :             pTile->height[res] |= MPR_TI_1024;

	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _pTile$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+48]
	or	edx, 262144				; 00040000H
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _pTile$[ebp]
	mov	DWORD PTR [ecx+eax*4+48], edx

; 1510 :             break;

	jmp	SHORT $LN28@ReadImageD
$LN20@ReadImageD:

; 1511 : 
; 1512 :         case 2048:
; 1513 :             pTile->height[res] |= MPR_TI_2048;

	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _pTile$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+48]
	or	ecx, 524288				; 00080000H
	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _pTile$[ebp]
	mov	DWORD PTR [eax+edx*4+48], ecx
$LN28@ReadImageD:

; 1514 :             break;
; 1515 : 
; 1516 :         default:
; 1517 :             ShiAssert(false);
; 1518 :     }
; 1519 : 
; 1520 :     // Note: HACK (using width for linear size)
; 1521 :     pTile->width[res] = ddsd.dwLinearSize;

	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _pTile$[ebp]
	mov	eax, DWORD PTR _ddsd$[ebp+16]
	mov	DWORD PTR [edx+ecx*4+36], eax

; 1522 :     pTile->bits[res] = (BYTE *)glAllocateMemory(pTile->width[res], FALSE);

	push	0
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _pTile$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+36]
	push	eax
	call	?glAllocateMemory@@YAPAXHH@Z		; glAllocateMemory
	add	esp, 8
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _pTile$[ebp]
	mov	DWORD PTR [edx+ecx*4+60], eax

; 1523 :     fread(pTile->bits[res], 1, pTile->width[res], fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _pTile$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+36]
	push	eax
	push	1
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _pTile$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+60]
	push	eax
	call	_fread
	add	esp, 16					; 00000010H

; 1524 :     fclose(fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	_fclose
	add	esp, 4

; 1525 : 
; 1526 :     // Night tile, use same flags
; 1527 :     sprintf(szFileName, "%s%sN.dds", texturePathD, token);

	mov	edx, DWORD PTR _token$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 260				; 00000104H
	push	eax
	push	OFFSET ??_C@_09KEBCNFGN@?$CFs?$CFsN?4dds?$AA@
	lea	ecx, DWORD PTR _szFileName$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 1528 : 
; 1529 :     if (res == 1)

	cmp	DWORD PTR _res$[ebp], 1
	jne	SHORT $LN18@ReadImageD

; 1530 :     {
; 1531 :         szFileName[strlen(texturePathD)] = 'M';

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 260				; 00000104H
	push	edx
	call	_strlen
	add	esp, 4
	mov	BYTE PTR _szFileName$[ebp+eax], 77	; 0000004dH
	jmp	SHORT $LN17@ReadImageD
$LN18@ReadImageD:

; 1532 :     }
; 1533 :     else if (res == 0)

	cmp	DWORD PTR _res$[ebp], 0
	jne	SHORT $LN17@ReadImageD

; 1534 :     {
; 1535 :         szFileName[strlen(texturePathD)] = 'L';

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 260				; 00000104H
	push	eax
	call	_strlen
	add	esp, 4
	mov	BYTE PTR _szFileName$[ebp+eax], 76	; 0000004cH
$LN17@ReadImageD:

; 1536 :     }
; 1537 : 
; 1538 :     fp = fopen(szFileName, "rb");

	push	OFFSET ??_C@_02JDPG@rb?$AA@
	lea	ecx, DWORD PTR _szFileName$[ebp]
	push	ecx
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 1539 :     fread(&dwMagic, 1, sizeof(DWORD), fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	push	4
	push	1
	lea	eax, DWORD PTR _dwMagic$[ebp]
	push	eax
	call	_fread
	add	esp, 16					; 00000010H

; 1540 :     ShiAssert(dwMagic == MAKEFOURCC('D', 'D', 'S', ' '));
; 1541 : 
; 1542 :     fread(&ddsd, 1, sizeof(DDSURFACEDESC2), fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	push	124					; 0000007cH
	push	1
	lea	edx, DWORD PTR _ddsd$[ebp]
	push	edx
	call	_fread
	add	esp, 16					; 00000010H

; 1543 : 
; 1544 :     // MLR 1/25/2004 - Little kludge so F4 can read DDS files made by dxtex
; 1545 :     if (ddsd.dwLinearSize == 0)

	cmp	DWORD PTR _ddsd$[ebp+16], 0
	jne	SHORT $LN15@ReadImageD

; 1546 :     {
; 1547 :         if (ddsd.ddpfPixelFormat.dwFourCC == MAKEFOURCC('D', 'X', 'T', '3') ||
; 1548 :             ddsd.ddpfPixelFormat.dwFourCC == MAKEFOURCC('D', 'X', 'T', '5'))

	cmp	DWORD PTR _ddsd$[ebp+80], 861165636	; 33545844H
	je	SHORT $LN13@ReadImageD
	cmp	DWORD PTR _ddsd$[ebp+80], 894720068	; 35545844H
	jne	SHORT $LN14@ReadImageD
$LN13@ReadImageD:

; 1549 :         {
; 1550 :             ddsd.dwLinearSize = ddsd.dwWidth * ddsd.dwWidth;

	mov	eax, DWORD PTR _ddsd$[ebp+12]
	imul	eax, DWORD PTR _ddsd$[ebp+12]
	mov	DWORD PTR _ddsd$[ebp+16], eax

; 1551 :             ddsd.dwFlags |= DDSD_LINEARSIZE;

	mov	ecx, DWORD PTR _ddsd$[ebp+4]
	or	ecx, 524288				; 00080000H
	mov	DWORD PTR _ddsd$[ebp+4], ecx
$LN14@ReadImageD:

; 1552 :         }
; 1553 : 
; 1554 :         if (ddsd.ddpfPixelFormat.dwFourCC == MAKEFOURCC('D', 'X', 'T', '1'))

	cmp	DWORD PTR _ddsd$[ebp+80], 827611204	; 31545844H
	jne	SHORT $LN15@ReadImageD

; 1555 :         {
; 1556 :             ddsd.dwLinearSize = ddsd.dwWidth * ddsd.dwWidth / 2;

	mov	edx, DWORD PTR _ddsd$[ebp+12]
	imul	edx, DWORD PTR _ddsd$[ebp+12]
	shr	edx, 1
	mov	DWORD PTR _ddsd$[ebp+16], edx

; 1557 :             ddsd.dwFlags |= DDSD_LINEARSIZE;

	mov	eax, DWORD PTR _ddsd$[ebp+4]
	or	eax, 524288				; 00080000H
	mov	DWORD PTR _ddsd$[ebp+4], eax
$LN15@ReadImageD:

; 1558 :         }
; 1559 :     }
; 1560 : 
; 1561 :     // Note: HACK (using height for flags)
; 1562 :     pTile->heightN[res] = MPR_TI_DDS;

	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _pTile$[ebp]
	mov	DWORD PTR [edx+ecx*4+96], 256		; 00000100H

; 1563 :     // Note: MUST BE DXT1
; 1564 :     pTile->heightN[res] |= MPR_TI_DXT1;

	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _pTile$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+96]
	or	edx, 512				; 00000200H
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _pTile$[ebp]
	mov	DWORD PTR [ecx+eax*4+96], edx

; 1565 : 
; 1566 :     // Note: 1024x1024 Max!
; 1567 :     switch (ddsd.dwWidth)

	mov	edx, DWORD PTR _ddsd$[ebp+12]
	mov	DWORD PTR tv293[ebp], edx
	cmp	DWORD PTR tv293[ebp], 256		; 00000100H
	ja	SHORT $LN41@ReadImageD
	cmp	DWORD PTR tv293[ebp], 256		; 00000100H
	je	$LN5@ReadImageD
	mov	eax, DWORD PTR tv293[ebp]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR tv293[ebp], eax
	cmp	DWORD PTR tv293[ebp], 112		; 00000070H
	ja	$LN10@ReadImageD
	mov	ecx, DWORD PTR tv293[ebp]
	movzx	edx, BYTE PTR $LN43@ReadImageD[ecx]
	jmp	DWORD PTR $LN45@ReadImageD[edx*4]
$LN41@ReadImageD:
	cmp	DWORD PTR tv293[ebp], 512		; 00000200H
	je	$LN4@ReadImageD
	cmp	DWORD PTR tv293[ebp], 1024		; 00000400H
	je	$LN3@ReadImageD
	cmp	DWORD PTR tv293[ebp], 2048		; 00000800H
	je	$LN2@ReadImageD
	jmp	$LN10@ReadImageD
$LN9@ReadImageD:

; 1568 :     {
; 1569 :         case 16:
; 1570 :             pTile->heightN[res] |= MPR_TI_16;

	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _pTile$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+96]
	or	edx, 4096				; 00001000H
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _pTile$[ebp]
	mov	DWORD PTR [ecx+eax*4+96], edx

; 1571 :             break;

	jmp	$LN10@ReadImageD
$LN8@ReadImageD:

; 1572 : 
; 1573 :         case 32:
; 1574 :             pTile->heightN[res] |= MPR_TI_32;

	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _pTile$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+96]
	or	ecx, 8192				; 00002000H
	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _pTile$[ebp]
	mov	DWORD PTR [eax+edx*4+96], ecx

; 1575 :             break;

	jmp	$LN10@ReadImageD
$LN7@ReadImageD:

; 1576 : 
; 1577 :         case 64:
; 1578 :             pTile->heightN[res] |= MPR_TI_64;

	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _pTile$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+96]
	or	eax, 16384				; 00004000H
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _pTile$[ebp]
	mov	DWORD PTR [edx+ecx*4+96], eax

; 1579 :             break;

	jmp	$LN10@ReadImageD
$LN6@ReadImageD:

; 1580 : 
; 1581 :         case 128:
; 1582 :             pTile->heightN[res] |= MPR_TI_128;

	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _pTile$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+96]
	or	edx, 32768				; 00008000H
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _pTile$[ebp]
	mov	DWORD PTR [ecx+eax*4+96], edx

; 1583 :             break;

	jmp	SHORT $LN10@ReadImageD
$LN5@ReadImageD:

; 1584 : 
; 1585 :         case 256:
; 1586 :             pTile->heightN[res] |= MPR_TI_256;

	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _pTile$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+96]
	or	ecx, 65536				; 00010000H
	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _pTile$[ebp]
	mov	DWORD PTR [eax+edx*4+96], ecx

; 1587 :             break;

	jmp	SHORT $LN10@ReadImageD
$LN4@ReadImageD:

; 1588 : 
; 1589 :         case 512:
; 1590 :             pTile->heightN[res] |= MPR_TI_512;

	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _pTile$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+96]
	or	eax, 131072				; 00020000H
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _pTile$[ebp]
	mov	DWORD PTR [edx+ecx*4+96], eax

; 1591 :             break;

	jmp	SHORT $LN10@ReadImageD
$LN3@ReadImageD:

; 1592 : 
; 1593 :         case 1024:
; 1594 :             pTile->heightN[res] |= MPR_TI_1024;

	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _pTile$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+96]
	or	edx, 262144				; 00040000H
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _pTile$[ebp]
	mov	DWORD PTR [ecx+eax*4+96], edx

; 1595 :             break;

	jmp	SHORT $LN10@ReadImageD
$LN2@ReadImageD:

; 1596 : 
; 1597 :         case 2048:
; 1598 :             pTile->heightN[res] |= MPR_TI_2048;

	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _pTile$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+96]
	or	ecx, 524288				; 00080000H
	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _pTile$[ebp]
	mov	DWORD PTR [eax+edx*4+96], ecx
$LN10@ReadImageD:

; 1599 :             break;
; 1600 : 
; 1601 :         default:
; 1602 :             ShiAssert(false);
; 1603 :     }
; 1604 : 
; 1605 :     ShiAssert(ddsd.dwFlags & DDSD_LINEARSIZE);
; 1606 :     pTile->widthN[res] = ddsd.dwLinearSize;

	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _pTile$[ebp]
	mov	eax, DWORD PTR _ddsd$[ebp+16]
	mov	DWORD PTR [edx+ecx*4+84], eax

; 1607 :     pTile->bitsN[res] = (BYTE *)glAllocateMemory(pTile->widthN[res], FALSE);

	push	0
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _pTile$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+84]
	push	eax
	call	?glAllocateMemory@@YAPAXHH@Z		; glAllocateMemory
	add	esp, 8
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _pTile$[ebp]
	mov	DWORD PTR [edx+ecx*4+108], eax

; 1608 :     fread(pTile->bitsN[res], 1, pTile->widthN[res], fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _pTile$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+84]
	push	eax
	push	1
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _pTile$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+108]
	push	eax
	call	_fread
	add	esp, 16					; 00000010H

; 1609 :     fclose(fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	_fclose
	add	esp, 4
$LN38@ReadImageD:

; 1610 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN44@ReadImageD:
	DD	$LN27@ReadImageD
	DD	$LN26@ReadImageD
	DD	$LN25@ReadImageD
	DD	$LN24@ReadImageD
	DD	$LN28@ReadImageD
$LN42@ReadImageD:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
	npad	3
$LN45@ReadImageD:
	DD	$LN9@ReadImageD
	DD	$LN8@ReadImageD
	DD	$LN7@ReadImageD
	DD	$LN6@ReadImageD
	DD	$LN10@ReadImageD
$LN43@ReadImageD:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
?ReadImageDDS@TextureDB@@IAEXPAUTileEntry@@H@Z ENDP	; TextureDB::ReadImageDDS
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\terrtex.cpp
_TEXT	SEGMENT
$T1 = -1876						; size = 4
$T2 = -1872						; size = 4
$T3 = -1868						; size = 4
_stop$4 = -1864						; size = 4
$T5 = -1860						; size = 4
_sep$ = -1856						; size = 2
_pSrc$ = -1852						; size = 4
_token$ = -1848						; size = 4
_pal$ = -1844						; size = 4
_p$6 = -1840						; size = 4
_dwTmp$ = -1836						; size = 4
_p$7 = -1832						; size = 4
_dwSize$ = -1828					; size = 4
_this$ = -1824						; size = 4
_i$ = -1820						; size = 4
_from$8 = -1816						; size = 4
_fp$ = -1812						; size = 4
_n$ = -1808						; size = 4
_pDst$ = -1804						; size = 4
_to$9 = -1800						; size = 4
_npal$10 = -1796					; size = 1024
_szTemp$ = -772						; size = 256
_szKludge$ = -516					; size = 256
_szFileName$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_pTile$ = 8						; size = 4
_palette$ = 12						; size = 4
_res$ = 16						; size = 4
_bForce$ = 20						; size = 1
?DumpImageToFile@TextureDB@@IAE_NPAUTileEntry@@PAKH_N@Z PROC ; TextureDB::DumpImageToFile
; _this$ = ecx

; 1256 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1876				; 00000754H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1257 :     DWORD dwSize = 0, *pal = NULL, dwTmp = 0, n = 0, i = 0;

	mov	DWORD PTR _dwSize$[ebp], 0
	mov	DWORD PTR _pal$[ebp], 0
	mov	DWORD PTR _dwTmp$[ebp], 0
	mov	DWORD PTR _n$[ebp], 0
	mov	DWORD PTR _i$[ebp], 0

; 1258 :     BYTE *pSrc = NULL, *pDst = NULL;

	mov	DWORD PTR _pSrc$[ebp], 0
	mov	DWORD PTR _pDst$[ebp], 0

; 1259 :     char szFileName[256], szTemp[256], szKludge[256];
; 1260 :     char sep[] = ".";

	mov	ax, WORD PTR ??_C@_01LFCBOECM@?4?$AA@
	mov	WORD PTR _sep$[ebp], ax

; 1261 :     char *token = NULL;

	mov	DWORD PTR _token$[ebp], 0

; 1262 :     FILE *fp = NULL;

	mov	DWORD PTR _fp$[ebp], 0

; 1263 : 
; 1264 :     ShiAssert(pTile->bits[res]);
; 1265 :     ShiAssert(palette);
; 1266 : 
; 1267 :     if (!pTile->bits[res]) return false;

	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _pTile$[ebp]
	cmp	DWORD PTR [edx+ecx*4+60], 0
	jne	SHORT $LN24@DumpImageT
	xor	al, al
	jmp	$LN25@DumpImageT
$LN24@DumpImageT:

; 1268 : 
; 1269 :     strcpy(szTemp, (char *)pTile->filename);

	mov	eax, DWORD PTR _pTile$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szTemp$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8

; 1270 :     token = strtok(szTemp, sep);

	lea	edx, DWORD PTR _sep$[ebp]
	push	edx
	lea	eax, DWORD PTR _szTemp$[ebp]
	push	eax
	call	_strtok
	add	esp, 8
	mov	DWORD PTR _token$[ebp], eax

; 1271 :     sprintf(szFileName, "%s%s.dds", texturePathD, token);

	mov	ecx, DWORD PTR _token$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 260				; 00000104H
	push	edx
	push	OFFSET ??_C@_08GCAFGLGC@?$CFs?$CFs?4dds?$AA@
	lea	eax, DWORD PTR _szFileName$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 1272 : 
; 1273 :     if (res == 1)

	cmp	DWORD PTR _res$[ebp], 1
	jne	SHORT $LN23@DumpImageT

; 1274 :         szFileName[strlen(texturePathD)] = 'M';

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 260				; 00000104H
	push	ecx
	call	_strlen
	add	esp, 4
	mov	BYTE PTR _szFileName$[ebp+eax], 77	; 0000004dH
	jmp	SHORT $LN21@DumpImageT
$LN23@DumpImageT:

; 1275 :     else if (res == 0)

	cmp	DWORD PTR _res$[ebp], 0
	jne	SHORT $LN21@DumpImageT

; 1276 :         szFileName[strlen(texturePathD)] = 'L';

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 260				; 00000104H
	push	edx
	call	_strlen
	add	esp, 4
	mov	BYTE PTR _szFileName$[ebp+eax], 76	; 0000004cH
$LN21@DumpImageT:

; 1277 : 
; 1278 :     // Kludge for 094
; 1279 :     strcpy(szKludge, szFileName);

	lea	eax, DWORD PTR _szFileName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szKludge$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8

; 1280 :     szKludge[strlen(texturePathD)] = 'N';

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 260				; 00000104H
	push	edx
	call	_strlen
	add	esp, 4
	mov	BYTE PTR _szKludge$[ebp+eax], 78	; 0000004eH

; 1281 :     fp = fopen(szKludge, "rb");

	push	OFFSET ??_C@_02JDPG@rb?$AA@
	lea	eax, DWORD PTR _szKludge$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 1282 : 
; 1283 :     if (fp)

	cmp	DWORD PTR _fp$[ebp], 0
	je	SHORT $LN20@DumpImageT

; 1284 :     {
; 1285 :         fclose(fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	_fclose
	add	esp, 4

; 1286 :         DeleteFile(szKludge);

	lea	edx, DWORD PTR _szKludge$[ebp]
	push	edx
	call	DWORD PTR __imp__DeleteFileA@4

; 1287 :         bIs092 = true;

	mov	BYTE PTR _bIs092, 1
$LN20@DumpImageT:

; 1288 :     }
; 1289 : 
; 1290 :     fp = fopen(szFileName, "rb");

	push	OFFSET ??_C@_02JDPG@rb?$AA@
	lea	eax, DWORD PTR _szFileName$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 1291 : 
; 1292 :     if (!fp || bForce || bIs092)

	cmp	DWORD PTR _fp$[ebp], 0
	je	SHORT $LN18@DumpImageT
	movzx	ecx, BYTE PTR _bForce$[ebp]
	test	ecx, ecx
	jne	SHORT $LN18@DumpImageT
	movzx	edx, BYTE PTR _bIs092
	test	edx, edx
	je	$LN19@DumpImageT
$LN18@DumpImageT:

; 1293 :     {
; 1294 :         if (fp)

	cmp	DWORD PTR _fp$[ebp], 0
	je	SHORT $LN17@DumpImageT

; 1295 :             fclose(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4
$LN17@DumpImageT:

; 1296 : 
; 1297 :         dwSize = pTile->width[res] * pTile->height[res];

	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _pTile$[ebp]
	mov	eax, DWORD PTR _res$[ebp]
	mov	esi, DWORD PTR _pTile$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+36]
	imul	ecx, DWORD PTR [esi+eax*4+48]
	mov	DWORD PTR _dwSize$[ebp], ecx

; 1298 : 
; 1299 :         pSrc = (BYTE *)pTile->bits[res];

	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _pTile$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+60]
	mov	DWORD PTR _pSrc$[ebp], ecx

; 1300 :         pDst = new BYTE[dwSize * ARGB_TEXEL_SIZE];

	mov	edx, DWORD PTR _dwSize$[ebp]
	shl	edx, 2
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR _pDst$[ebp], eax

; 1301 : 
; 1302 :         pal = palette;

	mov	ecx, DWORD PTR _palette$[ebp]
	mov	DWORD PTR _pal$[ebp], ecx

; 1303 : 
; 1304 :         // Day texture
; 1305 :         for (i = 0, n = 0; i < dwSize; i++, n += ARGB_TEXEL_SIZE)

	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN16@DumpImageT
$LN15@DumpImageT:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 4
	mov	DWORD PTR _n$[ebp], eax
$LN16@DumpImageT:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _dwSize$[ebp]
	jae	$LN14@DumpImageT

; 1306 :         {
; 1307 :             dwTmp = pal[pSrc[i]];

	mov	edx, DWORD PTR _pSrc$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _pal$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _dwTmp$[ebp], edx

; 1308 : 
; 1309 :             //ABGR to ARGB, Lowendian
; 1310 :             BYTE *p = (BYTE *)(&dwTmp);

	lea	eax, DWORD PTR _dwTmp$[ebp]
	mov	DWORD PTR _p$6[ebp], eax

; 1311 : 
; 1312 :             pDst[n + 0] = p[2]; //B

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _pDst$[ebp]
	add	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR _p$6[ebp]
	mov	cl, BYTE PTR [eax+ecx]
	mov	BYTE PTR [edx], cl

; 1313 :             pDst[n + 1] = p[1]; //G

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _pDst$[ebp]
	add	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _p$6[ebp]
	mov	dl, BYTE PTR [ecx+edx]
	mov	BYTE PTR [eax+1], dl

; 1314 :             pDst[n + 2] = p[0]; //R

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _pDst$[ebp]
	add	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _p$6[ebp]
	mov	al, BYTE PTR [edx+eax]
	mov	BYTE PTR [ecx+2], al

; 1315 :             pDst[n + 3] = p[3]; //A

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _pDst$[ebp]
	add	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR _p$6[ebp]
	mov	cl, BYTE PTR [eax+ecx]
	mov	BYTE PTR [edx+3], cl

; 1316 :         }

	jmp	$LN15@DumpImageT
$LN14@DumpImageT:

; 1317 : 
; 1318 :         SaveDDS_DXTn(szFileName, pDst, pTile->width[res]);

	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _pTile$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+36]
	push	ecx
	mov	edx, DWORD PTR _pDst$[ebp]
	push	edx
	lea	eax, DWORD PTR _szFileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SaveDDS_DXTn@TextureDB@@IAE_NPBDPAEH@Z	; TextureDB::SaveDDS_DXTn

; 1319 : 
; 1320 :         delete[] pDst;

	mov	ecx, DWORD PTR _pDst$[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 1321 :     }
; 1322 :     else

	jmp	SHORT $LN13@DumpImageT
$LN19@DumpImageT:

; 1323 :         fclose(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4
$LN13@DumpImageT:

; 1324 : 
; 1325 :     // Night texture
; 1326 :     sprintf(szFileName, "%s%sN.dds", texturePathD, token);

	mov	ecx, DWORD PTR _token$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 260				; 00000104H
	push	edx
	push	OFFSET ??_C@_09KEBCNFGN@?$CFs?$CFsN?4dds?$AA@
	lea	eax, DWORD PTR _szFileName$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 1327 : 
; 1328 :     if (res == 1)

	cmp	DWORD PTR _res$[ebp], 1
	jne	SHORT $LN12@DumpImageT

; 1329 :         szFileName[strlen(texturePathD)] = 'M';

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 260				; 00000104H
	push	ecx
	call	_strlen
	add	esp, 4
	mov	BYTE PTR _szFileName$[ebp+eax], 77	; 0000004dH
	jmp	SHORT $LN10@DumpImageT
$LN12@DumpImageT:

; 1330 :     else if (res == 0)

	cmp	DWORD PTR _res$[ebp], 0
	jne	SHORT $LN10@DumpImageT

; 1331 :         szFileName[strlen(texturePathD)] = 'L';

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 260				; 00000104H
	push	edx
	call	_strlen
	add	esp, 4
	mov	BYTE PTR _szFileName$[ebp+eax], 76	; 0000004cH
$LN10@DumpImageT:

; 1332 : 
; 1333 :     fp = fopen(szFileName, "rb");

	push	OFFSET ??_C@_02JDPG@rb?$AA@
	lea	eax, DWORD PTR _szFileName$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 1334 : 
; 1335 :     if (!fp || bForce || bIs092)

	cmp	DWORD PTR _fp$[ebp], 0
	je	SHORT $LN8@DumpImageT
	movzx	ecx, BYTE PTR _bForce$[ebp]
	test	ecx, ecx
	jne	SHORT $LN8@DumpImageT
	movzx	edx, BYTE PTR _bIs092
	test	edx, edx
	je	$LN9@DumpImageT
$LN8@DumpImageT:

; 1336 :     {
; 1337 :         if (fp)

	cmp	DWORD PTR _fp$[ebp], 0
	je	SHORT $LN7@DumpImageT

; 1338 :             fclose(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4
$LN7@DumpImageT:

; 1339 : 
; 1340 :         BYTE  *to, *from, *stop;
; 1341 :         DWORD npal[256];
; 1342 : 
; 1343 :         from = (BYTE *)pal;

	mov	ecx, DWORD PTR _pal$[ebp]
	mov	DWORD PTR _from$8[ebp], ecx

; 1344 :         to  = (BYTE *)npal;

	lea	edx, DWORD PTR _npal$10[ebp]
	mov	DWORD PTR _to$9[ebp], edx

; 1345 :         stop = to + 256 * 4;

	mov	eax, DWORD PTR _to$9[ebp]
	add	eax, 1024				; 00000400H
	mov	DWORD PTR _stop$4[ebp], eax
$LN6@DumpImageT:

; 1346 : 
; 1347 :         //FIXME
; 1348 :         while (to < stop)

	mov	ecx, DWORD PTR _to$9[ebp]
	cmp	ecx, DWORD PTR _stop$4[ebp]
	jae	$LN5@DumpImageT

; 1349 :         {
; 1350 :             *to = static_cast<BYTE>(FloatToInt32(*from * 0.f));

	mov	edx, DWORD PTR _from$8[ebp]
	movzx	eax, BYTE PTR [edx]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@00000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, DWORD PTR _to$9[ebp]
	mov	BYTE PTR [ecx], al

; 1351 :             to++, from++; // Red

	mov	edx, DWORD PTR _to$9[ebp]
	add	edx, 1
	mov	DWORD PTR _to$9[ebp], edx
	mov	eax, DWORD PTR _from$8[ebp]
	add	eax, 1
	mov	DWORD PTR _from$8[ebp], eax

; 1352 :             *to = static_cast<BYTE>(FloatToInt32(*from * 0.f));

	mov	ecx, DWORD PTR _from$8[ebp]
	movzx	edx, BYTE PTR [ecx]
	cvtsi2ss xmm0, edx
	mulss	xmm0, DWORD PTR __real@00000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, DWORD PTR _to$9[ebp]
	mov	BYTE PTR [ecx], al

; 1353 :             to++, from++; // Green

	mov	edx, DWORD PTR _to$9[ebp]
	add	edx, 1
	mov	DWORD PTR _to$9[ebp], edx
	mov	eax, DWORD PTR _from$8[ebp]
	add	eax, 1
	mov	DWORD PTR _from$8[ebp], eax

; 1354 :             *to = static_cast<BYTE>(FloatToInt32(*from * 0.f));

	mov	ecx, DWORD PTR _from$8[ebp]
	movzx	edx, BYTE PTR [ecx]
	cvtsi2ss xmm0, edx
	mulss	xmm0, DWORD PTR __real@00000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, DWORD PTR _to$9[ebp]
	mov	BYTE PTR [ecx], al

; 1355 :             to++, from++; // Blue

	mov	edx, DWORD PTR _to$9[ebp]
	add	edx, 1
	mov	DWORD PTR _to$9[ebp], edx
	mov	eax, DWORD PTR _from$8[ebp]
	add	eax, 1
	mov	DWORD PTR _from$8[ebp], eax

; 1356 :             to++, from++; // Alpha

	mov	ecx, DWORD PTR _to$9[ebp]
	add	ecx, 1
	mov	DWORD PTR _to$9[ebp], ecx
	mov	edx, DWORD PTR _from$8[ebp]
	add	edx, 1
	mov	DWORD PTR _from$8[ebp], edx

; 1357 :         }

	jmp	$LN6@DumpImageT
$LN5@DumpImageT:

; 1358 : 
; 1359 :         to = (BYTE *) & (npal[252]);

	mov	eax, 4
	imul	eax, 252				; 000000fcH
	lea	ecx, DWORD PTR _npal$10[ebp+eax]
	mov	DWORD PTR _to$9[ebp], ecx

; 1360 : 
; 1361 :         *to = 115;

	mov	edx, DWORD PTR _to$9[ebp]
	mov	BYTE PTR [edx], 115			; 00000073H

; 1362 :         to++; // Red

	mov	eax, DWORD PTR _to$9[ebp]
	add	eax, 1
	mov	DWORD PTR _to$9[ebp], eax

; 1363 :         *to = 171;

	mov	ecx, DWORD PTR _to$9[ebp]
	mov	BYTE PTR [ecx], 171			; 000000abH

; 1364 :         to++; // Green

	mov	edx, DWORD PTR _to$9[ebp]
	add	edx, 1
	mov	DWORD PTR _to$9[ebp], edx

; 1365 :         *to = 155;

	mov	eax, DWORD PTR _to$9[ebp]
	mov	BYTE PTR [eax], 155			; 0000009bH

; 1366 :         to++; // Blue

	mov	ecx, DWORD PTR _to$9[ebp]
	add	ecx, 1
	mov	DWORD PTR _to$9[ebp], ecx

; 1367 :         *to = 255;

	mov	edx, DWORD PTR _to$9[ebp]
	mov	BYTE PTR [edx], 255			; 000000ffH

; 1368 :         to++; // Alpha

	mov	eax, DWORD PTR _to$9[ebp]
	add	eax, 1
	mov	DWORD PTR _to$9[ebp], eax

; 1369 : 
; 1370 :         *to = 183;

	mov	ecx, DWORD PTR _to$9[ebp]
	mov	BYTE PTR [ecx], 183			; 000000b7H

; 1371 :         to++; // Red

	mov	edx, DWORD PTR _to$9[ebp]
	add	edx, 1
	mov	DWORD PTR _to$9[ebp], edx

; 1372 :         *to = 127;

	mov	eax, DWORD PTR _to$9[ebp]
	mov	BYTE PTR [eax], 127			; 0000007fH

; 1373 :         to++; // Green

	mov	ecx, DWORD PTR _to$9[ebp]
	add	ecx, 1
	mov	DWORD PTR _to$9[ebp], ecx

; 1374 :         *to = 83;

	mov	edx, DWORD PTR _to$9[ebp]
	mov	BYTE PTR [edx], 83			; 00000053H

; 1375 :         to++; // Blue

	mov	eax, DWORD PTR _to$9[ebp]
	add	eax, 1
	mov	DWORD PTR _to$9[ebp], eax

; 1376 :         *to = 255;

	mov	ecx, DWORD PTR _to$9[ebp]
	mov	BYTE PTR [ecx], 255			; 000000ffH

; 1377 :         to++; // Alpha

	mov	edx, DWORD PTR _to$9[ebp]
	add	edx, 1
	mov	DWORD PTR _to$9[ebp], edx

; 1378 : 
; 1379 :         *to = 171;

	mov	eax, DWORD PTR _to$9[ebp]
	mov	BYTE PTR [eax], 171			; 000000abH

; 1380 :         to++; // Red

	mov	ecx, DWORD PTR _to$9[ebp]
	add	ecx, 1
	mov	DWORD PTR _to$9[ebp], ecx

; 1381 :         *to = 179;

	mov	edx, DWORD PTR _to$9[ebp]
	mov	BYTE PTR [edx], 179			; 000000b3H

; 1382 :         to++; // Green

	mov	eax, DWORD PTR _to$9[ebp]
	add	eax, 1
	mov	DWORD PTR _to$9[ebp], eax

; 1383 :         *to = 139;

	mov	ecx, DWORD PTR _to$9[ebp]
	mov	BYTE PTR [ecx], 139			; 0000008bH

; 1384 :         to++; // Blue

	mov	edx, DWORD PTR _to$9[ebp]
	add	edx, 1
	mov	DWORD PTR _to$9[ebp], edx

; 1385 :         *to = 255;

	mov	eax, DWORD PTR _to$9[ebp]
	mov	BYTE PTR [eax], 255			; 000000ffH

; 1386 :         to++; // Alpha

	mov	ecx, DWORD PTR _to$9[ebp]
	add	ecx, 1
	mov	DWORD PTR _to$9[ebp], ecx

; 1387 : 
; 1388 :         *to = 171;

	mov	edx, DWORD PTR _to$9[ebp]
	mov	BYTE PTR [edx], 171			; 000000abH

; 1389 :         to++; // Red

	mov	eax, DWORD PTR _to$9[ebp]
	add	eax, 1
	mov	DWORD PTR _to$9[ebp], eax

; 1390 :         *to = 171;

	mov	ecx, DWORD PTR _to$9[ebp]
	mov	BYTE PTR [ecx], 171			; 000000abH

; 1391 :         to++; // Green

	mov	edx, DWORD PTR _to$9[ebp]
	add	edx, 1
	mov	DWORD PTR _to$9[ebp], edx

; 1392 :         *to = 171;

	mov	eax, DWORD PTR _to$9[ebp]
	mov	BYTE PTR [eax], 171			; 000000abH

; 1393 :         to++; // Blue

	mov	ecx, DWORD PTR _to$9[ebp]
	add	ecx, 1
	mov	DWORD PTR _to$9[ebp], ecx

; 1394 :         *to = 255;

	mov	edx, DWORD PTR _to$9[ebp]
	mov	BYTE PTR [edx], 255			; 000000ffH

; 1395 :         to++; // Alpha

	mov	eax, DWORD PTR _to$9[ebp]
	add	eax, 1
	mov	DWORD PTR _to$9[ebp], eax

; 1396 : 
; 1397 :         pDst = new BYTE[dwSize * ARGB_TEXEL_SIZE];

	mov	ecx, DWORD PTR _dwSize$[ebp]
	shl	ecx, 2
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	edx, DWORD PTR $T5[ebp]
	mov	DWORD PTR _pDst$[ebp], edx

; 1398 : 
; 1399 :         for (i = 0, n = 0; i < dwSize; i++, n += ARGB_TEXEL_SIZE)

	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN4@DumpImageT
$LN3@DumpImageT:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 4
	mov	DWORD PTR _n$[ebp], ecx
$LN4@DumpImageT:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _dwSize$[ebp]
	jae	$LN2@DumpImageT

; 1400 :         {
; 1401 :             dwTmp = npal[pSrc[i]];

	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _npal$10[ebp+ecx*4]
	mov	DWORD PTR _dwTmp$[ebp], edx

; 1402 : 
; 1403 :             //ABGR to ARGB, Lowendian
; 1404 :             BYTE *p = (BYTE *)(&dwTmp);

	lea	eax, DWORD PTR _dwTmp$[ebp]
	mov	DWORD PTR _p$7[ebp], eax

; 1405 : 
; 1406 :             pDst[n + 0] = p[2]; //B

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _pDst$[ebp]
	add	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR _p$7[ebp]
	mov	cl, BYTE PTR [eax+ecx]
	mov	BYTE PTR [edx], cl

; 1407 :             pDst[n + 1] = p[1]; //G

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _pDst$[ebp]
	add	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _p$7[ebp]
	mov	dl, BYTE PTR [ecx+edx]
	mov	BYTE PTR [eax+1], dl

; 1408 :             pDst[n + 2] = p[0]; //R

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _pDst$[ebp]
	add	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _p$7[ebp]
	mov	al, BYTE PTR [edx+eax]
	mov	BYTE PTR [ecx+2], al

; 1409 :             pDst[n + 3] = p[3]; //A

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _pDst$[ebp]
	add	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR _p$7[ebp]
	mov	cl, BYTE PTR [eax+ecx]
	mov	BYTE PTR [edx+3], cl

; 1410 :         }

	jmp	$LN3@DumpImageT
$LN2@DumpImageT:

; 1411 : 
; 1412 :         SaveDDS_DXTn(szFileName, pDst, pTile->width[res]);

	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _pTile$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+36]
	push	ecx
	mov	edx, DWORD PTR _pDst$[ebp]
	push	edx
	lea	eax, DWORD PTR _szFileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SaveDDS_DXTn@TextureDB@@IAE_NPBDPAEH@Z	; TextureDB::SaveDDS_DXTn

; 1413 : 
; 1414 :         delete[] pDst;

	mov	ecx, DWORD PTR _pDst$[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 1415 :     }
; 1416 :     else

	jmp	SHORT $LN1@DumpImageT
$LN9@DumpImageT:

; 1417 :         fclose(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4
$LN1@DumpImageT:

; 1418 : 
; 1419 :     return true;

	mov	al, 1
$LN25@DumpImageT:

; 1420 : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?DumpImageToFile@TextureDB@@IAE_NPAUTileEntry@@PAKH_N@Z ENDP ; TextureDB::DumpImageToFile
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\terrtex.cpp
_TEXT	SEGMENT
_stop$ = -1068						; size = 4
_tmpB$ = -1064						; size = 4
_this$ = -1060						; size = 4
_tmpR$ = -1056						; size = 4
_from$ = -1052						; size = 4
_tmpG$ = -1048						; size = 4
_h$ = -1044						; size = 4
_v$ = -1040						; size = 4
_s$ = -1036						; size = 4
_to$ = -1032						; size = 4
_palette$ = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
_pSet$ = 8						; size = 4
?StoreMPRPalette@TextureDB@@IAEXPAUSetEntry@@@Z PROC	; TextureDB::StoreMPRPalette
; _this$ = ecx

; 398  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1068				; 0000042cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 399  :     DWORD palette[256];
; 400  :     BYTE  *to, *from, *stop;
; 401  :     FLOAT tmpR, tmpG, tmpB, h, s, v;
; 402  : 
; 403  :     ShiAssert(pSet->palette);
; 404  :     ShiAssert(pSet->palHandle);
; 405  : 
; 406  :     // Apply the current lighting
; 407  :     from = (BYTE *)pSet->palette;

	mov	eax, DWORD PTR _pSet$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _from$[ebp], ecx

; 408  : 
; 409  :     // JB 010408 CTD
; 410  :     if (F4IsBadReadPtr(from, sizeof(BYTE))) return;

	push	1
	mov	edx, DWORD PTR _from$[ebp]
	push	edx
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN29@StoreMPRPa
	jmp	$LN30@StoreMPRPa
$LN29@StoreMPRPa:

; 411  : 
; 412  :     to  = (BYTE *)palette;

	lea	ecx, DWORD PTR _palette$[ebp]
	mov	DWORD PTR _to$[ebp], ecx

; 413  :     stop = to + 256 * 4;

	mov	edx, DWORD PTR _to$[ebp]
	add	edx, 1024				; 00000400H
	mov	DWORD PTR _stop$[ebp], edx
$LN28@StoreMPRPa:

; 414  : 
; 415  :     while (to < stop)

	mov	eax, DWORD PTR _to$[ebp]
	cmp	eax, DWORD PTR _stop$[ebp]
	jae	$LN27@StoreMPRPa

; 416  :     {
; 417  :         // *to = static_cast<BYTE>(FloatToInt32(*from * lightColor.r)); to++, from++; // Red
; 418  :         // *to = static_cast<BYTE>(FloatToInt32(*from * lightColor.g)); to++, from++; // Green
; 419  :         // *to = static_cast<BYTE>(FloatToInt32(*from * lightColor.b)); to++, from++; // Blue
; 420  :         //  to++, from++; // Alpha
; 421  :         // tmpR = static_cast<BYTE>(FloatToInt32(*from * lightColor.r)); from++; // Red
; 422  :         // tmpG = static_cast<BYTE>(FloatToInt32(*from * lightColor.g)); from++; // Green
; 423  :         // tmpB = static_cast<BYTE>(FloatToInt32(*from * lightColor.b)); from++; // Blue
; 424  :         // from++; // Alpha
; 425  : 
; 426  :         tmpR = *from * 1.0f;

	mov	ecx, DWORD PTR _from$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cvtsi2ss xmm0, edx
	mulss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _tmpR$[ebp], xmm0

; 427  :         from++; // Red

	mov	eax, DWORD PTR _from$[ebp]
	add	eax, 1
	mov	DWORD PTR _from$[ebp], eax

; 428  :         tmpG = *from * 1.0f;

	mov	ecx, DWORD PTR _from$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cvtsi2ss xmm0, edx
	mulss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _tmpG$[ebp], xmm0

; 429  :         from++; // Green

	mov	eax, DWORD PTR _from$[ebp]
	add	eax, 1
	mov	DWORD PTR _from$[ebp], eax

; 430  :         tmpB = *from * 1.0f;

	mov	ecx, DWORD PTR _from$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cvtsi2ss xmm0, edx
	mulss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _tmpB$[ebp], xmm0

; 431  :         from++; // Blue

	mov	eax, DWORD PTR _from$[ebp]
	add	eax, 1
	mov	DWORD PTR _from$[ebp], eax

; 432  :         from++; // Alpha

	mov	ecx, DWORD PTR _from$[ebp]
	add	ecx, 1
	mov	DWORD PTR _from$[ebp], ecx

; 433  : 
; 434  :         // 0:Summer, 1:Fall, 2:Winter, 3:Spring
; 435  : 
; 436  :         if (PlayerOptions.Season == 1) //Autumn

	cmp	DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+48, 1
	jne	$LN26@StoreMPRPa

; 437  :         {
; 438  :             if (!((tmpR == tmpG && tmpG == tmpB) || tmpG < 60 || (tmpR + tmpG + tmpB) / 3 > 225)) //Not Greyscale / green / not very bright

	movss	xmm0, DWORD PTR _tmpR$[ebp]
	ucomiss	xmm0, DWORD PTR _tmpG$[ebp]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN24@StoreMPRPa
	movss	xmm0, DWORD PTR _tmpG$[ebp]
	ucomiss	xmm0, DWORD PTR _tmpB$[ebp]
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN25@StoreMPRPa
$LN24@StoreMPRPa:
	movss	xmm0, DWORD PTR __real@42700000
	comiss	xmm0, DWORD PTR _tmpG$[ebp]
	ja	$LN25@StoreMPRPa
	movss	xmm0, DWORD PTR _tmpR$[ebp]
	addss	xmm0, DWORD PTR _tmpG$[ebp]
	addss	xmm0, DWORD PTR _tmpB$[ebp]
	divss	xmm0, DWORD PTR __real@40400000
	comiss	xmm0, DWORD PTR __real@43610000
	ja	$LN25@StoreMPRPa

; 439  :             {
; 440  :                 RGBtoHSV(tmpR, tmpG, tmpB, &h, &s, &v);

	lea	edx, DWORD PTR _v$[ebp]
	push	edx
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	lea	ecx, DWORD PTR _h$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _tmpB$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _tmpG$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _tmpR$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RGBtoHSV@TextureDB@@IAEXMMMPAM00@Z	; TextureDB::RGBtoHSV

; 441  : 
; 442  :                 if (h >= 30 && h <= 165)  //Green

	movss	xmm0, DWORD PTR _h$[ebp]
	comiss	xmm0, DWORD PTR __real@41f00000
	jb	SHORT $LN23@StoreMPRPa
	movss	xmm0, DWORD PTR __real@43250000
	comiss	xmm0, DWORD PTR _h$[ebp]
	jb	SHORT $LN23@StoreMPRPa

; 443  :                 {
; 444  :                     //h *= 0.6f; // min27 (yellow/orange/terracota/brown)
; 445  :                     h = h * 0.33f + 15; //Shift to brown

	movss	xmm0, DWORD PTR _h$[ebp]
	mulss	xmm0, DWORD PTR __real@3ea8f5c3
	addss	xmm0, DWORD PTR __real@41700000
	movss	DWORD PTR _h$[ebp], xmm0

; 446  :                     s *= 1.2f; //more saturated (intenser brown, just mudy green otherwise

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR __real@3f99999a
	movss	DWORD PTR _s$[ebp], xmm0

; 447  :                     v *= 0.9f; //darker

	movss	xmm0, DWORD PTR _v$[ebp]
	mulss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR _v$[ebp], xmm0
	jmp	SHORT $LN21@StoreMPRPa
$LN23@StoreMPRPa:

; 448  :                 }
; 449  :                 else if (!(v > 0.9 && s > 0.9)) //Not a strong green, but neither very bright

	cvtss2sd xmm0, DWORD PTR _v$[ebp]
	comisd	xmm0, QWORD PTR __real@3feccccccccccccd
	jbe	SHORT $LN20@StoreMPRPa
	cvtss2sd xmm0, DWORD PTR _s$[ebp]
	comisd	xmm0, QWORD PTR __real@3feccccccccccccd
	ja	SHORT $LN21@StoreMPRPa
$LN20@StoreMPRPa:

; 450  :                 {
; 451  :                     s *= 0.9f; //less saturated

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR _s$[ebp], xmm0

; 452  :                     v *= 0.85f; //darken a bit

	movss	xmm0, DWORD PTR _v$[ebp]
	mulss	xmm0, DWORD PTR __real@3f59999a
	movss	DWORD PTR _v$[ebp], xmm0
$LN21@StoreMPRPa:

; 453  :                 }
; 454  : 
; 455  :                 if (s > 255) s = 255;

	movss	xmm0, DWORD PTR _s$[ebp]
	comiss	xmm0, DWORD PTR __real@437f0000
	jbe	SHORT $LN19@StoreMPRPa
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _s$[ebp], xmm0
$LN19@StoreMPRPa:

; 456  : 
; 457  :                 if (h > 255) h = 255;

	movss	xmm0, DWORD PTR _h$[ebp]
	comiss	xmm0, DWORD PTR __real@437f0000
	jbe	SHORT $LN18@StoreMPRPa
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _h$[ebp], xmm0
$LN18@StoreMPRPa:

; 458  : 
; 459  :                 HSVtoRGB(&tmpR, &tmpG, &tmpB, h, s, v);

	push	ecx
	movss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _h$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _tmpB$[ebp]
	push	edx
	lea	eax, DWORD PTR _tmpG$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmpR$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HSVtoRGB@TextureDB@@IAEXPAM00MMM@Z	; TextureDB::HSVtoRGB
$LN25@StoreMPRPa:

; 460  :             }
; 461  :         }

	jmp	$LN7@StoreMPRPa
$LN26@StoreMPRPa:

; 462  :         else if (PlayerOptions.Season == 2) //Winter

	cmp	DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+48, 2
	jne	$LN16@StoreMPRPa

; 463  :         {
; 464  :             if (!(tmpR == tmpG && tmpR == tmpB) || tmpG < 60) //((tmpR+tmpG+tmpB)/3)>225) //|| (tmpR == 255 && tmpG == 255))) //Greyscale //or pure color

	movss	xmm0, DWORD PTR _tmpR$[ebp]
	ucomiss	xmm0, DWORD PTR _tmpG$[ebp]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN14@StoreMPRPa
	movss	xmm0, DWORD PTR _tmpR$[ebp]
	ucomiss	xmm0, DWORD PTR _tmpB$[ebp]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN14@StoreMPRPa
	movss	xmm0, DWORD PTR __real@42700000
	comiss	xmm0, DWORD PTR _tmpG$[ebp]
	jbe	$LN15@StoreMPRPa
$LN14@StoreMPRPa:

; 465  :             {
; 466  :                 RGBtoHSV(tmpR, tmpG, tmpB, &h, &s, &v);

	lea	edx, DWORD PTR _v$[ebp]
	push	edx
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	lea	ecx, DWORD PTR _h$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _tmpB$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _tmpG$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _tmpR$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RGBtoHSV@TextureDB@@IAEXMMMPAM00@Z	; TextureDB::RGBtoHSV

; 467  : 
; 468  :                 if (!(s <= 0.2 || h == -1))  //If Not Greyscale

	cvtss2sd xmm0, DWORD PTR _s$[ebp]
	movsd	xmm1, QWORD PTR __real@3fc999999999999a
	comisd	xmm1, xmm0
	jae	SHORT $LN13@StoreMPRPa
	movss	xmm0, DWORD PTR _h$[ebp]
	ucomiss	xmm0, DWORD PTR __real@bf800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN13@StoreMPRPa

; 469  :                 {
; 470  :                     if (h >= 45 && h <= 150) //If Green

	movss	xmm0, DWORD PTR _h$[ebp]
	comiss	xmm0, DWORD PTR __real@42340000
	jb	SHORT $LN12@StoreMPRPa
	movss	xmm0, DWORD PTR __real@43160000
	comiss	xmm0, DWORD PTR _h$[ebp]
	jb	SHORT $LN12@StoreMPRPa

; 471  :                     {
; 472  :                         s = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _s$[ebp], xmm0

; 473  :                         v = 255; //Make white

	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _v$[ebp], xmm0
$LN12@StoreMPRPa:

; 474  :                     }
; 475  :                 }
; 476  :                 else

	jmp	SHORT $LN11@StoreMPRPa
$LN13@StoreMPRPa:

; 477  :                 {
; 478  :                     v *= 1.3f; //Make brighter

	movss	xmm0, DWORD PTR _v$[ebp]
	mulss	xmm0, DWORD PTR __real@3fa66666
	movss	DWORD PTR _v$[ebp], xmm0
$LN11@StoreMPRPa:

; 479  :                 }
; 480  : 
; 481  :                 //else if (v<=200) v *= 0.9f; //Greyscale, but not white: darken a bit (to increase contrast)
; 482  :                 //else if (v>=200) v *= 1.2f; //bright...make even brighter
; 483  : 
; 484  :                 //if (s==0 && v < 240) v *= 0.85f; //Greyscale, but not white: darken a bit (to increase contrast)
; 485  :                 //if (s>230) s = 255; //bright...make even brighter
; 486  :                 if (v > 255) v = 255;

	movss	xmm0, DWORD PTR _v$[ebp]
	comiss	xmm0, DWORD PTR __real@437f0000
	jbe	SHORT $LN10@StoreMPRPa
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _v$[ebp], xmm0
$LN10@StoreMPRPa:

; 487  : 
; 488  :                 HSVtoRGB(&tmpR, &tmpG, &tmpB, h, s, v);

	push	ecx
	movss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _h$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _tmpB$[ebp]
	push	edx
	lea	eax, DWORD PTR _tmpG$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmpR$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HSVtoRGB@TextureDB@@IAEXPAM00MMM@Z	; TextureDB::HSVtoRGB
$LN15@StoreMPRPa:

; 489  :             }
; 490  :         }

	jmp	$LN7@StoreMPRPa
$LN16@StoreMPRPa:

; 491  :         else if (PlayerOptions.Season == 3) //Spring

	cmp	DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+48, 3
	jne	$LN7@StoreMPRPa

; 492  :         {
; 493  :             RGBtoHSV(tmpR, tmpG, tmpB, &h, &s, &v);

	lea	edx, DWORD PTR _v$[ebp]
	push	edx
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	lea	ecx, DWORD PTR _h$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _tmpB$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _tmpG$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _tmpR$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RGBtoHSV@TextureDB@@IAEXMMMPAM00@Z	; TextureDB::RGBtoHSV

; 494  : 
; 495  :             if (!(s <= 0.1 || h == -1))  //Not Greyscale

	cvtss2sd xmm0, DWORD PTR _s$[ebp]
	movsd	xmm1, QWORD PTR __real@3fb999999999999a
	comisd	xmm1, xmm0
	jae	$LN7@StoreMPRPa
	movss	xmm0, DWORD PTR _h$[ebp]
	ucomiss	xmm0, DWORD PTR __real@bf800000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN7@StoreMPRPa

; 496  :             {
; 497  :                 if (h >= 45 && h <= 160) //Green

	movss	xmm0, DWORD PTR _h$[ebp]
	comiss	xmm0, DWORD PTR __real@42340000
	jb	SHORT $LN6@StoreMPRPa
	movss	xmm0, DWORD PTR __real@43200000
	comiss	xmm0, DWORD PTR _h$[ebp]
	jb	SHORT $LN6@StoreMPRPa

; 498  :                 {
; 499  :                     s *= 0.8f;

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR _s$[ebp], xmm0

; 500  :                     v *= 1.2f;

	movss	xmm0, DWORD PTR _v$[ebp]
	mulss	xmm0, DWORD PTR __real@3f99999a
	movss	DWORD PTR _v$[ebp], xmm0
$LN6@StoreMPRPa:

; 501  :                 }
; 502  : 
; 503  :                 if (s > 255) s = 255;

	movss	xmm0, DWORD PTR _s$[ebp]
	comiss	xmm0, DWORD PTR __real@437f0000
	jbe	SHORT $LN5@StoreMPRPa
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _s$[ebp], xmm0
$LN5@StoreMPRPa:

; 504  : 
; 505  :                 if (v > 255) v = 255;

	movss	xmm0, DWORD PTR _v$[ebp]
	comiss	xmm0, DWORD PTR __real@437f0000
	jbe	SHORT $LN4@StoreMPRPa
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _v$[ebp], xmm0
$LN4@StoreMPRPa:

; 506  : 
; 507  :                 HSVtoRGB(&tmpR, &tmpG, &tmpB, h, s, v);

	push	ecx
	movss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _h$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _tmpB$[ebp]
	push	edx
	lea	eax, DWORD PTR _tmpG$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmpR$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HSVtoRGB@TextureDB@@IAEXPAM00MMM@Z	; TextureDB::HSVtoRGB
$LN7@StoreMPRPa:

; 508  :             }
; 509  :         }
; 510  : 
; 511  :         *to = static_cast<BYTE>(FloatToInt32(tmpR * lightColor.r));

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _tmpR$[ebp]
	mulss	xmm0, DWORD PTR [edx+536]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, DWORD PTR _to$[ebp]
	mov	BYTE PTR [ecx], al

; 512  :         to++;

	mov	edx, DWORD PTR _to$[ebp]
	add	edx, 1
	mov	DWORD PTR _to$[ebp], edx

; 513  :         *to = static_cast<BYTE>(FloatToInt32(tmpG * lightColor.g));

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _tmpG$[ebp]
	mulss	xmm0, DWORD PTR [eax+540]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, DWORD PTR _to$[ebp]
	mov	BYTE PTR [ecx], al

; 514  :         to++;

	mov	edx, DWORD PTR _to$[ebp]
	add	edx, 1
	mov	DWORD PTR _to$[ebp], edx

; 515  :         *to = static_cast<BYTE>(FloatToInt32(tmpB * lightColor.b));

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _tmpB$[ebp]
	mulss	xmm0, DWORD PTR [eax+544]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, DWORD PTR _to$[ebp]
	mov	BYTE PTR [ecx], al

; 516  :         to++;

	mov	edx, DWORD PTR _to$[ebp]
	add	edx, 1
	mov	DWORD PTR _to$[ebp], edx

; 517  :         to++; // Alpha

	mov	eax, DWORD PTR _to$[ebp]
	add	eax, 1
	mov	DWORD PTR _to$[ebp], eax

; 518  :     }

	jmp	$LN28@StoreMPRPa
$LN27@StoreMPRPa:

; 519  : 
; 520  :     // Turn on the lights if it is dark enough
; 521  :     if (lightLevel < 0.5f)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f000000
	comiss	xmm0, DWORD PTR [ecx+556]
	jbe	$LN1@StoreMPRPa

; 522  :     {
; 523  :         to = (BYTE *) & (palette[252]);

	mov	edx, 4
	imul	edx, 252				; 000000fcH
	lea	eax, DWORD PTR _palette$[ebp+edx]
	mov	DWORD PTR _to$[ebp], eax

; 524  : 
; 525  :         if (TheTimeOfDay.GetNVGmode())

	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetNVGmode@CTimeOfDay@@QAEHXZ		; CTimeOfDay::GetNVGmode
	test	eax, eax
	je	$LN2@StoreMPRPa

; 526  :         {
; 527  :             *to = 0;

	mov	ecx, DWORD PTR _to$[ebp]
	mov	BYTE PTR [ecx], 0

; 528  :             to++; // Red

	mov	edx, DWORD PTR _to$[ebp]
	add	edx, 1
	mov	DWORD PTR _to$[ebp], edx

; 529  :             *to = 255;

	mov	eax, DWORD PTR _to$[ebp]
	mov	BYTE PTR [eax], 255			; 000000ffH

; 530  :             to++; // Green

	mov	ecx, DWORD PTR _to$[ebp]
	add	ecx, 1
	mov	DWORD PTR _to$[ebp], ecx

; 531  :             *to = 0;

	mov	edx, DWORD PTR _to$[ebp]
	mov	BYTE PTR [edx], 0

; 532  :             to++; // Blue

	mov	eax, DWORD PTR _to$[ebp]
	add	eax, 1
	mov	DWORD PTR _to$[ebp], eax

; 533  :             *to = 255;

	mov	ecx, DWORD PTR _to$[ebp]
	mov	BYTE PTR [ecx], 255			; 000000ffH

; 534  :             to++; // Alpha

	mov	edx, DWORD PTR _to$[ebp]
	add	edx, 1
	mov	DWORD PTR _to$[ebp], edx

; 535  : 
; 536  :             *to = 0;

	mov	eax, DWORD PTR _to$[ebp]
	mov	BYTE PTR [eax], 0

; 537  :             to++; // Red

	mov	ecx, DWORD PTR _to$[ebp]
	add	ecx, 1
	mov	DWORD PTR _to$[ebp], ecx

; 538  :             *to = 255;

	mov	edx, DWORD PTR _to$[ebp]
	mov	BYTE PTR [edx], 255			; 000000ffH

; 539  :             to++; // Green

	mov	eax, DWORD PTR _to$[ebp]
	add	eax, 1
	mov	DWORD PTR _to$[ebp], eax

; 540  :             *to = 0;

	mov	ecx, DWORD PTR _to$[ebp]
	mov	BYTE PTR [ecx], 0

; 541  :             to++; // Blue

	mov	edx, DWORD PTR _to$[ebp]
	add	edx, 1
	mov	DWORD PTR _to$[ebp], edx

; 542  :             *to = 255;

	mov	eax, DWORD PTR _to$[ebp]
	mov	BYTE PTR [eax], 255			; 000000ffH

; 543  :             to++; // Alpha

	mov	ecx, DWORD PTR _to$[ebp]
	add	ecx, 1
	mov	DWORD PTR _to$[ebp], ecx

; 544  : 
; 545  :             *to = 0;

	mov	edx, DWORD PTR _to$[ebp]
	mov	BYTE PTR [edx], 0

; 546  :             to++; // Red

	mov	eax, DWORD PTR _to$[ebp]
	add	eax, 1
	mov	DWORD PTR _to$[ebp], eax

; 547  :             *to = 255;

	mov	ecx, DWORD PTR _to$[ebp]
	mov	BYTE PTR [ecx], 255			; 000000ffH

; 548  :             to++; // Green

	mov	edx, DWORD PTR _to$[ebp]
	add	edx, 1
	mov	DWORD PTR _to$[ebp], edx

; 549  :             *to = 0;

	mov	eax, DWORD PTR _to$[ebp]
	mov	BYTE PTR [eax], 0

; 550  :             to++; // Blue

	mov	ecx, DWORD PTR _to$[ebp]
	add	ecx, 1
	mov	DWORD PTR _to$[ebp], ecx

; 551  :             *to = 255;

	mov	edx, DWORD PTR _to$[ebp]
	mov	BYTE PTR [edx], 255			; 000000ffH

; 552  :             to++; // Alpha

	mov	eax, DWORD PTR _to$[ebp]
	add	eax, 1
	mov	DWORD PTR _to$[ebp], eax

; 553  : 
; 554  :             *to = 0;

	mov	ecx, DWORD PTR _to$[ebp]
	mov	BYTE PTR [ecx], 0

; 555  :             to++; // Red

	mov	edx, DWORD PTR _to$[ebp]
	add	edx, 1
	mov	DWORD PTR _to$[ebp], edx

; 556  :             *to = 255;

	mov	eax, DWORD PTR _to$[ebp]
	mov	BYTE PTR [eax], 255			; 000000ffH

; 557  :             to++; // Green

	mov	ecx, DWORD PTR _to$[ebp]
	add	ecx, 1
	mov	DWORD PTR _to$[ebp], ecx

; 558  :             *to = 0;

	mov	edx, DWORD PTR _to$[ebp]
	mov	BYTE PTR [edx], 0

; 559  :             to++; // Blue

	mov	eax, DWORD PTR _to$[ebp]
	add	eax, 1
	mov	DWORD PTR _to$[ebp], eax

; 560  :             *to = 255;

	mov	ecx, DWORD PTR _to$[ebp]
	mov	BYTE PTR [ecx], 255			; 000000ffH

; 561  :             to++; // Alpha

	mov	edx, DWORD PTR _to$[ebp]
	add	edx, 1
	mov	DWORD PTR _to$[ebp], edx

; 562  :         }
; 563  :         else

	jmp	$LN1@StoreMPRPa
$LN2@StoreMPRPa:

; 564  :         {
; 565  :             *to = 115;

	mov	eax, DWORD PTR _to$[ebp]
	mov	BYTE PTR [eax], 115			; 00000073H

; 566  :             to++; // Red

	mov	ecx, DWORD PTR _to$[ebp]
	add	ecx, 1
	mov	DWORD PTR _to$[ebp], ecx

; 567  :             *to = 171;

	mov	edx, DWORD PTR _to$[ebp]
	mov	BYTE PTR [edx], 171			; 000000abH

; 568  :             to++; // Green

	mov	eax, DWORD PTR _to$[ebp]
	add	eax, 1
	mov	DWORD PTR _to$[ebp], eax

; 569  :             *to = 155;

	mov	ecx, DWORD PTR _to$[ebp]
	mov	BYTE PTR [ecx], 155			; 0000009bH

; 570  :             to++; // Blue

	mov	edx, DWORD PTR _to$[ebp]
	add	edx, 1
	mov	DWORD PTR _to$[ebp], edx

; 571  :             *to = 255;

	mov	eax, DWORD PTR _to$[ebp]
	mov	BYTE PTR [eax], 255			; 000000ffH

; 572  :             to++; // Alpha

	mov	ecx, DWORD PTR _to$[ebp]
	add	ecx, 1
	mov	DWORD PTR _to$[ebp], ecx

; 573  : 
; 574  :             *to = 183;

	mov	edx, DWORD PTR _to$[ebp]
	mov	BYTE PTR [edx], 183			; 000000b7H

; 575  :             to++; // Red

	mov	eax, DWORD PTR _to$[ebp]
	add	eax, 1
	mov	DWORD PTR _to$[ebp], eax

; 576  :             *to = 127;

	mov	ecx, DWORD PTR _to$[ebp]
	mov	BYTE PTR [ecx], 127			; 0000007fH

; 577  :             to++; // Green

	mov	edx, DWORD PTR _to$[ebp]
	add	edx, 1
	mov	DWORD PTR _to$[ebp], edx

; 578  :             *to = 83;

	mov	eax, DWORD PTR _to$[ebp]
	mov	BYTE PTR [eax], 83			; 00000053H

; 579  :             to++; // Blue

	mov	ecx, DWORD PTR _to$[ebp]
	add	ecx, 1
	mov	DWORD PTR _to$[ebp], ecx

; 580  :             *to = 255;

	mov	edx, DWORD PTR _to$[ebp]
	mov	BYTE PTR [edx], 255			; 000000ffH

; 581  :             to++; // Alpha

	mov	eax, DWORD PTR _to$[ebp]
	add	eax, 1
	mov	DWORD PTR _to$[ebp], eax

; 582  : 
; 583  :             *to = 171;

	mov	ecx, DWORD PTR _to$[ebp]
	mov	BYTE PTR [ecx], 171			; 000000abH

; 584  :             to++; // Red

	mov	edx, DWORD PTR _to$[ebp]
	add	edx, 1
	mov	DWORD PTR _to$[ebp], edx

; 585  :             *to = 179;

	mov	eax, DWORD PTR _to$[ebp]
	mov	BYTE PTR [eax], 179			; 000000b3H

; 586  :             to++; // Green

	mov	ecx, DWORD PTR _to$[ebp]
	add	ecx, 1
	mov	DWORD PTR _to$[ebp], ecx

; 587  :             *to = 139;

	mov	edx, DWORD PTR _to$[ebp]
	mov	BYTE PTR [edx], 139			; 0000008bH

; 588  :             to++; // Blue

	mov	eax, DWORD PTR _to$[ebp]
	add	eax, 1
	mov	DWORD PTR _to$[ebp], eax

; 589  :             *to = 255;

	mov	ecx, DWORD PTR _to$[ebp]
	mov	BYTE PTR [ecx], 255			; 000000ffH

; 590  :             to++; // Alpha

	mov	edx, DWORD PTR _to$[ebp]
	add	edx, 1
	mov	DWORD PTR _to$[ebp], edx

; 591  : 
; 592  :             *to = 171;

	mov	eax, DWORD PTR _to$[ebp]
	mov	BYTE PTR [eax], 171			; 000000abH

; 593  :             to++; // Red

	mov	ecx, DWORD PTR _to$[ebp]
	add	ecx, 1
	mov	DWORD PTR _to$[ebp], ecx

; 594  :             *to = 171;

	mov	edx, DWORD PTR _to$[ebp]
	mov	BYTE PTR [edx], 171			; 000000abH

; 595  :             to++; // Green

	mov	eax, DWORD PTR _to$[ebp]
	add	eax, 1
	mov	DWORD PTR _to$[ebp], eax

; 596  :             *to = 171;

	mov	ecx, DWORD PTR _to$[ebp]
	mov	BYTE PTR [ecx], 171			; 000000abH

; 597  :             to++; // Blue

	mov	edx, DWORD PTR _to$[ebp]
	add	edx, 1
	mov	DWORD PTR _to$[ebp], edx

; 598  :             *to = 255;

	mov	eax, DWORD PTR _to$[ebp]
	mov	BYTE PTR [eax], 255			; 000000ffH

; 599  :             to++; // Alpha

	mov	ecx, DWORD PTR _to$[ebp]
	add	ecx, 1
	mov	DWORD PTR _to$[ebp], ecx
$LN1@StoreMPRPa:

; 600  :         }
; 601  :     }
; 602  : 
; 603  :     ((PaletteHandle *)pSet->palHandle)->Load(
; 604  :         MPR_TI_PALETTE, // Palette info
; 605  :         32, // Bits per entry
; 606  :         0, // Start index
; 607  :         256, // Number of entries
; 608  :         (BYTE *)&palette);

	lea	edx, DWORD PTR _palette$[ebp]
	push	edx
	push	256					; 00000100H
	push	0
	push	32					; 00000020H
	push	128					; 00000080H
	mov	eax, DWORD PTR _pSet$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?Load@PaletteHandle@@QAEXGGGGPAE@Z	; PaletteHandle::Load
$LN30@StoreMPRPa:

; 609  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?StoreMPRPalette@TextureDB@@IAEXPAUSetEntry@@@Z ENDP	; TextureDB::StoreMPRPalette
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\terrtex.cpp
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
?SetLightLevel@TextureDB@@IAEXXZ PROC			; TextureDB::SetLightLevel
; _this$ = ecx

; 370  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 371  :     // Store the new light level
; 372  : 
; 373  :     // Decide what color to use for lighting
; 374  :     if (TheTimeOfDay.GetNVGmode())

	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetNVGmode@CTimeOfDay@@QAEHXZ		; CTimeOfDay::GetNVGmode
	test	eax, eax
	je	SHORT $LN7@SetLightLe

; 375  :     {
; 376  :         lightLevel = NVG_LIGHT_LEVEL;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f340000
	movss	DWORD PTR [eax+556], xmm0

; 377  :         lightColor.r = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+536], xmm0

; 378  :         lightColor.g = NVG_LIGHT_LEVEL;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f340000
	movss	DWORD PTR [edx+540], xmm0

; 379  :         lightColor.b = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+544], xmm0

; 380  :     }
; 381  :     else

	jmp	SHORT $LN6@SetLightLe
$LN7@SetLightLe:

; 382  :     {
; 383  :         lightLevel = TheTimeOfDay.GetLightLevel();

	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetLightLevel@CTimeOfDay@@QAEMXZ	; CTimeOfDay::GetLightLevel
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+556]

; 384  :         TheTimeOfDay.GetTextureLightingColor(&lightColor);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 536				; 00000218H
	push	edx
	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetTextureLightingColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ; CTimeOfDay::GetTextureLightingColor
$LN6@SetLightLe:

; 385  :     }
; 386  : 
; 387  :     // Update all the currently loaded textures
; 388  :     if (DisplayOptions.m_texMode != DisplayOptionsClass::TEX_MODE_DDS)

	cmp	DWORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+24, 70161 ; 00011211H
	je	SHORT $LN2@SetLightLe

; 389  :     {
; 390  :         for (int i = 0; i < numSets; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@SetLightLe
$LN3@SetLightLe:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@SetLightLe:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$1[ebp]
	cmp	edx, DWORD PTR [ecx+524]
	jge	SHORT $LN2@SetLightLe

; 391  :             if (TextureSets[i].palHandle)

	mov	eax, DWORD PTR _i$1[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	cmp	DWORD PTR [edx+eax+8], 0
	je	SHORT $LN1@SetLightLe

; 392  :                 StoreMPRPalette(&TextureSets[i]);

	mov	eax, DWORD PTR _i$1[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+528]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StoreMPRPalette@TextureDB@@IAEXPAUSetEntry@@@Z ; TextureDB::StoreMPRPalette
$LN1@SetLightLe:

; 393  :     }

	jmp	SHORT $LN3@SetLightLe
$LN2@SetLightLe:

; 394  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SetLightLevel@TextureDB@@IAEXXZ ENDP			; TextureDB::SetLightLevel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\terrtex.cpp
_TEXT	SEGMENT
_self$ = 8						; size = 4
?TimeUpdateCallback@TextureDB@@KAXPAX@Z PROC		; TextureDB::TimeUpdateCallback

; 365  : {

	push	ebp
	mov	ebp, esp

; 366  :     ((TextureDB*)self)->SetLightLevel();

	mov	ecx, DWORD PTR _self$[ebp]
	call	?SetLightLevel@TextureDB@@IAEXXZ	; TextureDB::SetLightLevel

; 367  : }

	pop	ebp
	ret	0
?TimeUpdateCallback@TextureDB@@KAXPAX@Z ENDP		; TextureDB::TimeUpdateCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\terrtex.h
;	COMDAT ?ExtractRes@TextureDB@@IAEHK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_texID$ = 8						; size = 4
?ExtractRes@TextureDB@@IAEHK@Z PROC			; TextureDB::ExtractRes, COMDAT
; _this$ = ecx

; 143  : 	int	ExtractRes(TextureID texID)	 { return (texID >> 12) & 0xF; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _texID$[ebp]
	shr	eax, 12					; 0000000cH
	and	eax, 15					; 0000000fH
	mov	esp, ebp
	pop	ebp
	ret	4
?ExtractRes@TextureDB@@IAEHK@Z ENDP			; TextureDB::ExtractRes
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\terrtex.h
;	COMDAT ?ExtractTile@TextureDB@@IAEHK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_texID$ = 8						; size = 4
?ExtractTile@TextureDB@@IAEHK@Z PROC			; TextureDB::ExtractTile, COMDAT
; _this$ = ecx

; 142  : 	int	ExtractTile(TextureID texID) { return texID & 0xF;		   };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _texID$[ebp]
	and	eax, 15					; 0000000fH
	mov	esp, ebp
	pop	ebp
	ret	4
?ExtractTile@TextureDB@@IAEHK@Z ENDP			; TextureDB::ExtractTile
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\terrtex.h
;	COMDAT ?ExtractSet@TextureDB@@IAEHK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_texID$ = 8						; size = 4
?ExtractSet@TextureDB@@IAEHK@Z PROC			; TextureDB::ExtractSet, COMDAT
; _this$ = ecx

; 141  : 	int	ExtractSet(TextureID texID)	 { return (texID >> 4) & 0xFF; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _texID$[ebp]
	shr	eax, 4
	and	eax, 255				; 000000ffH
	mov	esp, ebp
	pop	ebp
	ret	4
?ExtractSet@TextureDB@@IAEHK@Z ENDP			; TextureDB::ExtractSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\terrtex.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv134 = -12						; size = 4
$T1 = -8						; size = 4
$T2 = -4						; size = 4
_pSet$ = 8						; size = 4
_pTile$ = 12						; size = 4
_res$ = 16						; size = 4
?Free@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H@Z PROC ; TextureDB::Free
; _this$ = ecx

; 1070 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1071 :     ShiAssert(IsReady());
; 1072 :     ShiAssert(pSet);
; 1073 :     ShiAssert(pTile);
; 1074 : 
; 1075 :     // make sure we're not freeing a tile that is in use
; 1076 :     ShiAssert(pTile->refCount[res] == 0);
; 1077 :     ShiAssert(pTile->handle[res] == NULL);
; 1078 : 
; 1079 :     // KLUDGE to prevent release runtime crash
; 1080 :     if (pTile)

	cmp	DWORD PTR _pTile$[ebp], 0
	je	SHORT $LN8@Free

; 1081 : 	{
; 1082 : 		// Release the image memory if it isn't already gone
; 1083 : 		if ((char*)pTile->bits[res])

	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _pTile$[ebp]
	cmp	DWORD PTR [ecx+eax*4+60], 0
	je	SHORT $LN7@Free

; 1084 : 		{
; 1085 : 			glReleaseMemory((char *)pTile->bits[res]);

	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _pTile$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+60]
	push	ecx
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4

; 1086 : 			pTile->bits[res] = NULL;

	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _pTile$[ebp]
	mov	DWORD PTR [eax+edx*4+60], 0

; 1087 : 
; 1088 : 			// Night pixels
; 1089 : 			if ((char*)pTile->bitsN[res])

	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _pTile$[ebp]
	cmp	DWORD PTR [edx+ecx*4+108], 0
	je	SHORT $LN7@Free

; 1090 : 			{
; 1091 : 				glReleaseMemory((char *)pTile->bitsN[res]);

	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _pTile$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+108]
	push	edx
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4

; 1092 : 				pTile->bitsN[res] = NULL;

	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _pTile$[ebp]
	mov	DWORD PTR [ecx+eax*4+108], 0
$LN7@Free:

; 1093 : 			}
; 1094 : 
; 1095 : #ifdef _DEBUG
; 1096 : 			LoadedTextureCount--;
; 1097 : #endif
; 1098 : 		}
; 1099 : 
; 1100 : 		pSet->refCount--;

	mov	edx, DWORD PTR _pSet$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, 1
	mov	ecx, DWORD PTR _pSet$[ebp]
	mov	DWORD PTR [ecx], eax
$LN8@Free:

; 1101 : 	}
; 1102 : 
; 1103 : 	if(pSet)

	cmp	DWORD PTR _pSet$[ebp], 0
	je	SHORT $LN5@Free

; 1104 : 	{
; 1105 : 		// Free the set palette if no tiles are in use
; 1106 : 		if (pSet->refCount == 0)

	mov	edx, DWORD PTR _pSet$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN4@Free

; 1107 : 		{
; 1108 : 			if (DisplayOptions.m_texMode != DisplayOptionsClass::TEX_MODE_DDS)

	cmp	DWORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+24, 70161 ; 00011211H
	je	SHORT $LN4@Free

; 1109 : 			{
; 1110 : 				if (pSet->palHandle)

	mov	eax, DWORD PTR _pSet$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@Free

; 1111 : 				{
; 1112 : 					delete(PaletteHandle *)pSet->palHandle;

	mov	ecx, DWORD PTR _pSet$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN11@Free
	push	1
	mov	ecx, DWORD PTR $T2[ebp]
	call	??_GPaletteHandle@@QAEPAXI@Z
	mov	DWORD PTR tv134[ebp], eax
	jmp	SHORT $LN12@Free
$LN11@Free:
	mov	DWORD PTR tv134[ebp], 0
$LN12@Free:

; 1113 : 					pSet->palHandle = NULL;

	mov	ecx, DWORD PTR _pSet$[ebp]
	mov	DWORD PTR [ecx+8], 0
$LN2@Free:

; 1114 : 				}
; 1115 : 
; 1116 : 				glReleaseMemory(pSet->palette);

	mov	edx, DWORD PTR _pSet$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4

; 1117 : 				pSet->palette = NULL;

	mov	ecx, DWORD PTR _pSet$[ebp]
	mov	DWORD PTR [ecx+4], 0
$LN4@Free:

; 1118 : 			}
; 1119 : 		}
; 1120 : #ifdef _DEBUG
; 1121 : 			LoadedSetCount--;
; 1122 : #endif
; 1123 : 	}
; 1124 : 	else

	jmp	SHORT $LN9@Free
$LN5@Free:

; 1125 : 	{
; 1126 : 		printf("");

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	call	_printf
	add	esp, 4
$LN9@Free:

; 1127 : 		return;
; 1128 : 	}
; 1129 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Free@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H@Z ENDP ; TextureDB::Free
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\terrtex.cpp
_TEXT	SEGMENT
_this$ = -28						; size = 4
tv90 = -24						; size = 4
$T1 = -20						; size = 4
tv75 = -16						; size = 4
$T2 = -12						; size = 4
$T3 = -8						; size = 4
$T4 = -4						; size = 4
_pSet$ = 8						; size = 4
_pTile$ = 12						; size = 4
_res$ = 16						; size = 4
?Deactivate@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H@Z PROC ; TextureDB::Deactivate
; _this$ = ecx

; 1023 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 1024 :     ShiAssert(IsReady());
; 1025 :     ShiAssert(pSet);
; 1026 :     ShiAssert(pTile);
; 1027 : 
; 1028 :     // Make sure we're not freeing a tile that is in use
; 1029 :     ShiAssert(pTile->refCount[res] == 0);
; 1030 : 
; 1031 :     // Day texture handle
; 1032 :     if (pTile->handle[res])

	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _pTile$[ebp]
	cmp	DWORD PTR [ecx+eax*4+72], 0
	je	$LN4@Deactivate

; 1033 :     {
; 1034 :         delete(TextureHandle *)pTile->handle[res];

	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _pTile$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+72]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T4[ebp], edx
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN7@Deactivate
	push	1
	mov	ecx, DWORD PTR $T4[ebp]
	call	??_GTextureHandle@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN8@Deactivate
$LN7@Deactivate:
	mov	DWORD PTR tv75[ebp], 0
$LN8@Deactivate:

; 1035 :         pTile->handle[res] = NULL;

	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _pTile$[ebp]
	mov	DWORD PTR [ecx+eax*4+72], 0

; 1036 : 
; 1037 :         // Night texture handle
; 1038 :         if (pTile->handleN[res])

	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _pTile$[ebp]
	cmp	DWORD PTR [eax+edx*4+120], 0
	je	SHORT $LN4@Deactivate

; 1039 :         {
; 1040 :             delete(TextureHandle *)pTile->handleN[res];

	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _pTile$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+120]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN9@Deactivate
	push	1
	mov	ecx, DWORD PTR $T3[ebp]
	call	??_GTextureHandle@@QAEPAXI@Z
	mov	DWORD PTR tv90[ebp], eax
	jmp	SHORT $LN10@Deactivate
$LN9@Deactivate:
	mov	DWORD PTR tv90[ebp], 0
$LN10@Deactivate:

; 1041 :             pTile->handleN[res] = NULL;

	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _pTile$[ebp]
	mov	DWORD PTR [eax+edx*4+120], 0
$LN4@Deactivate:

; 1042 :         }
; 1043 : 
; 1044 : #ifdef _DEBUG
; 1045 :         ActiveTextureCount--;
; 1046 : #endif
; 1047 :     }
; 1048 : 
; 1049 :     // Day pixels
; 1050 :     if ((char *)pTile->bits[res])

	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _pTile$[ebp]
	cmp	DWORD PTR [edx+ecx*4+60], 0
	je	SHORT $LN5@Deactivate

; 1051 :     {
; 1052 :         glReleaseMemory((char *)pTile->bits[res]);

	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _pTile$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+60]
	push	edx
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4

; 1053 :         pTile->bits[res] = NULL;

	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _pTile$[ebp]
	mov	DWORD PTR [ecx+eax*4+60], 0

; 1054 : 
; 1055 :         // Night pixels
; 1056 :         if ((char *)pTile->bitsN[res])

	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _pTile$[ebp]
	cmp	DWORD PTR [eax+edx*4+108], 0
	je	SHORT $LN5@Deactivate

; 1057 :         {
; 1058 :             glReleaseMemory((char *)pTile->bitsN[res]);

	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _pTile$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+108]
	push	eax
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4

; 1059 :             pTile->bitsN[res] = NULL;

	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _pTile$[ebp]
	mov	DWORD PTR [edx+ecx*4+108], 0
$LN5@Deactivate:

; 1060 :         }
; 1061 : 
; 1062 : #ifdef _DEBUG
; 1063 :         LoadedTextureCount--;
; 1064 : #endif
; 1065 :     }
; 1066 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Deactivate@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H@Z ENDP ; TextureDB::Deactivate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\terrtex.cpp
_TEXT	SEGMENT
$T2 = -80						; size = 4
$T3 = -76						; size = 4
$T4 = -72						; size = 4
$T5 = -68						; size = 4
_widthN$6 = -64						; size = 4
tv229 = -60						; size = 4
$T7 = -56						; size = 4
_width$8 = -52						; size = 4
tv190 = -48						; size = 4
$T9 = -44						; size = 4
tv92 = -40						; size = 4
$T10 = -36						; size = 4
_this$ = -32						; size = 4
tv80 = -28						; size = 4
$T11 = -24						; size = 4
_dwFlags$12 = -20					; size = 4
_info$13 = -16						; size = 2
__$EHRec$ = -12						; size = 12
_pSet$ = 8						; size = 4
_pTile$ = 12						; size = 4
_res$ = 16						; size = 4
?Activate@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H@Z PROC ; TextureDB::Activate
; _this$ = ecx

; 921  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Activate@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 922  :     ShiAssert(IsReady());
; 923  :     ShiAssert(private_rc);
; 924  :     ShiAssert(pSet);
; 925  :     ShiAssert(pTile);
; 926  :     ShiAssert(res < TEX_LEVELS);
; 927  :     ShiAssert(!pTile->handle[res]);
; 928  :     ShiAssert(pTile->bits[res]);
; 929  : 
; 930  :     if (DisplayOptions.m_texMode != DisplayOptionsClass::TEX_MODE_DDS)

	cmp	DWORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+24, 70161 ; 00011211H
	je	$LN4@Activate

; 931  :     {
; 932  :         // Pass the palette to MPR if it isn't already there
; 933  :         if (pSet->palHandle == 0)

	mov	eax, DWORD PTR _pSet$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN3@Activate

; 934  :         {
; 935  :             pSet->palHandle = (UInt)new PaletteHandle(private_rc->m_pDD, 32, 256);

	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T11[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T11[ebp], 0
	je	SHORT $LN7@Activate
	push	256					; 00000100H
	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+548]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR $T11[ebp]
	call	??0PaletteHandle@@QAE@PAUIDirectDraw7@@GG@Z ; PaletteHandle::PaletteHandle
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN8@Activate
$LN7@Activate:
	mov	DWORD PTR tv80[ebp], 0
$LN8@Activate:
	mov	ecx, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T5[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _pSet$[ebp]
	mov	eax, DWORD PTR $T5[ebp]
	mov	DWORD PTR [edx+8], eax

; 936  :             ShiAssert(pSet->palHandle);
; 937  :             StoreMPRPalette(pSet);

	mov	ecx, DWORD PTR _pSet$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StoreMPRPalette@TextureDB@@IAEXPAUSetEntry@@@Z ; TextureDB::StoreMPRPalette
$LN3@Activate:

; 938  :         }
; 939  : 
; 940  :         pTile->handle[res] = (UInt)new TextureHandle;

	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T10[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T10[ebp], 0
	je	SHORT $LN9@Activate
	mov	ecx, DWORD PTR $T10[ebp]
	call	??0TextureHandle@@QAE@XZ		; TextureHandle::TextureHandle
	mov	DWORD PTR tv92[ebp], eax
	jmp	SHORT $LN10@Activate
$LN9@Activate:
	mov	DWORD PTR tv92[ebp], 0
$LN10@Activate:
	mov	edx, DWORD PTR tv92[ebp]
	mov	DWORD PTR $T4[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _pTile$[ebp]
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR [ecx+eax*4+72], edx

; 941  :         ShiAssert(pTile->handle[res]);
; 942  : 
; 943  :         // Attach the palette
; 944  :         ((PaletteHandle *)pSet->palHandle)->AttachToTexture((TextureHandle *)pTile->handle[res]);

	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _pTile$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+72]
	push	edx
	mov	eax, DWORD PTR _pSet$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?AttachToTexture@PaletteHandle@@QAEXPAVTextureHandle@@@Z ; PaletteHandle::AttachToTexture

; 945  : 
; 946  :         DWORD dwFlags = NULL;

	mov	DWORD PTR _dwFlags$12[ebp], 0

; 947  :         WORD info = MPR_TI_PALETTE;

	mov	ecx, 128				; 00000080H
	mov	WORD PTR _info$13[ebp], cx

; 948  : 
; 949  :         if (g_bEnableStaticTerrainTextures)

	movzx	edx, BYTE PTR ?g_bEnableStaticTerrainTextures@@3_NA ; g_bEnableStaticTerrainTextures
	test	edx, edx
	je	SHORT $LN2@Activate

; 950  :             dwFlags |= TextureHandle::FLAG_HINT_STATIC;

	mov	eax, DWORD PTR _dwFlags$12[ebp]
	or	eax, 2
	mov	DWORD PTR _dwFlags$12[ebp], eax
$LN2@Activate:

; 951  : 
; 952  :         ((TextureHandle *)pTile->handle[res])->Create("TextureDB", info, 8, static_cast<UInt16>(pTile->width[res]), static_cast<UInt16>(pTile->height[res]), dwFlags);

	mov	ecx, DWORD PTR _dwFlags$12[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _pTile$[ebp]
	movzx	ecx, WORD PTR [eax+edx*4+48]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _pTile$[ebp]
	movzx	ecx, WORD PTR [eax+edx*4+36]
	push	ecx
	push	8
	movzx	edx, WORD PTR _info$13[ebp]
	push	edx
	push	OFFSET ??_C@_09LMDFCLDK@TextureDB?$AA@
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _pTile$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4+72]
	call	?Create@TextureHandle@@QAE_NPADKGGGK@Z	; TextureHandle::Create

; 953  : 
; 954  :         ((TextureHandle *)pTile->handle[res])->Load(0, 0, (BYTE*)pTile->bits[res]);

	push	-1
	push	0
	push	0
	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _pTile$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+60]
	push	ecx
	push	0
	push	0
	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _pTile$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+72]
	call	?Load@TextureHandle@@QAE_NGIPAE_N1H@Z	; TextureHandle::Load

; 955  : 
; 956  :         // Now that we don't need the local copy of the image, drop it
; 957  :         glReleaseMemory((char*)pTile->bits[res]);

	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _pTile$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+60]
	push	eax
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4

; 958  :         pTile->bits[res] = NULL;

	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _pTile$[ebp]
	mov	DWORD PTR [edx+ecx*4+60], 0

; 959  : 
; 960  : #ifdef _DEBUG
; 961  :         LoadedTextureCount--;
; 962  : #endif
; 963  :     }
; 964  :     else

	jmp	$LN5@Activate
$LN4@Activate:

; 965  :     {
; 966  :         // sfr: guess, hackers placed the flags in height member variable... sigh
; 967  :         int width = getDDSWidth(pTile->height[res]);

	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _pTile$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+48]
	push	edx
	call	?getDDSWidth@?A0xd5d9628f@@YAHH@Z	; `anonymous namespace'::getDDSWidth
	add	esp, 4
	mov	DWORD PTR _width$8[ebp], eax

; 968  :         int widthN = getDDSWidth(pTile->heightN[res]);

	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _pTile$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+96]
	push	edx
	call	?getDDSWidth@?A0xd5d9628f@@YAHH@Z	; `anonymous namespace'::getDDSWidth
	add	esp, 4
	mov	DWORD PTR _widthN$6[ebp], eax

; 969  : 
; 970  : #if 0
; 971  : 
; 972  :         if (pTile->height[res]&MPR_TI_16)
; 973  :             width = 16;
; 974  :         else if (pTile->height[res]&MPR_TI_32)
; 975  :             width = 32;
; 976  :         else if (pTile->height[res]&MPR_TI_64)
; 977  :             width = 64;
; 978  :         else if (pTile->height[res]&MPR_TI_128)
; 979  :             width = 128;
; 980  :         else if (pTile->height[res]&MPR_TI_256)
; 981  :             width = 256;
; 982  :         else if (pTile->height[res]&MPR_TI_512)
; 983  :             width = 512;
; 984  :         else if (pTile->height[res]&MPR_TI_1024)
; 985  :             width = 1024;
; 986  :         else if (pTile->height[res]&MPR_TI_2048)
; 987  :             width = 2048;
; 988  : 
; 989  : #endif
; 990  : 
; 991  : 
; 992  : 
; 993  :         // Day texture
; 994  :         pTile->handle[res] = (UInt)new TextureHandle;

	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T9[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN11@Activate
	mov	ecx, DWORD PTR $T9[ebp]
	call	??0TextureHandle@@QAE@XZ		; TextureHandle::TextureHandle
	mov	DWORD PTR tv190[ebp], eax
	jmp	SHORT $LN12@Activate
$LN11@Activate:
	mov	DWORD PTR tv190[ebp], 0
$LN12@Activate:
	mov	eax, DWORD PTR tv190[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _pTile$[ebp]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+ecx*4+72], eax

; 995  :         ShiAssert(pTile->handle[res]);
; 996  : 
; 997  :         ((TextureHandle *)pTile->handle[res])->Create(
; 998  :             "TextureDB", (DWORD)pTile->height[res], 32, static_cast<UInt16>(width), static_cast<UInt16>(width)
; 999  :         );

	push	0
	movzx	ecx, WORD PTR _width$8[ebp]
	push	ecx
	movzx	edx, WORD PTR _width$8[ebp]
	push	edx
	push	32					; 00000020H
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _pTile$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+48]
	push	edx
	push	OFFSET ??_C@_09LMDFCLDK@TextureDB?$AA@
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _pTile$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4+72]
	call	?Create@TextureHandle@@QAE_NPADKGGGK@Z	; TextureHandle::Create

; 1000 :         ((TextureHandle *)pTile->handle[res])->Load(
; 1001 :             0, 0, (BYTE*)pTile->bits[res], false, false, pTile->width[res]
; 1002 :         );

	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _pTile$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+36]
	push	ecx
	push	0
	push	0
	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _pTile$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+60]
	push	ecx
	push	0
	push	0
	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _pTile$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+72]
	call	?Load@TextureHandle@@QAE_NGIPAE_N1H@Z	; TextureHandle::Load

; 1003 : 
; 1004 :         // Night texture
; 1005 :         pTile->handleN[res] = (UInt)new TextureHandle;

	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN13@Activate
	mov	ecx, DWORD PTR $T7[ebp]
	call	??0TextureHandle@@QAE@XZ		; TextureHandle::TextureHandle
	mov	DWORD PTR tv229[ebp], eax
	jmp	SHORT $LN14@Activate
$LN13@Activate:
	mov	DWORD PTR tv229[ebp], 0
$LN14@Activate:
	mov	ecx, DWORD PTR tv229[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _pTile$[ebp]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax+edx*4+120], ecx

; 1006 :         ShiAssert(pTile->handleN[res]);
; 1007 : 
; 1008 :         ((TextureHandle *)pTile->handleN[res])->Create(
; 1009 :             "TextureDB", (DWORD)pTile->heightN[res], 32, static_cast<UInt16>(widthN), static_cast<UInt16>(widthN)
; 1010 :         );

	push	0
	movzx	edx, WORD PTR _widthN$6[ebp]
	push	edx
	movzx	eax, WORD PTR _widthN$6[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _pTile$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+96]
	push	eax
	push	OFFSET ??_C@_09LMDFCLDK@TextureDB?$AA@
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _pTile$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+120]
	call	?Create@TextureHandle@@QAE_NPADKGGGK@Z	; TextureHandle::Create

; 1011 :         ((TextureHandle *)pTile->handleN[res])->Load(
; 1012 :             0, 0, (BYTE*)pTile->bitsN[res], false, false, pTile->widthN[res]
; 1013 :         );

	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _pTile$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+84]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _pTile$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+108]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _pTile$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4+120]
	call	?Load@TextureHandle@@QAE_NGIPAE_N1H@Z	; TextureHandle::Load
$LN5@Activate:

; 1014 :     }
; 1015 : 
; 1016 : #ifdef _DEBUG
; 1017 :     ActiveTextureCount++;
; 1018 : #endif
; 1019 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Activate@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H@Z$0:
	mov	eax, DWORD PTR $T11[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Activate@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H@Z$1:
	mov	eax, DWORD PTR $T10[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Activate@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H@Z$2:
	mov	eax, DWORD PTR $T9[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Activate@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H@Z$3:
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Activate@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Activate@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Activate@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H@Z ENDP ; TextureDB::Activate
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\terrtex.cpp
_TEXT	SEGMENT
_result$ = -2132					; size = 4
_this$ = -2128						; size = 4
_texFile$ = -2124					; size = 432
_buffer$2 = -1692					; size = 580
_buffer$3 = -1112					; size = 580
_message$4 = -532					; size = 256
_filename$ = -276					; size = 260
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pSet$ = 8						; size = 4
_pTile$ = 12						; size = 4
_res$ = 16						; size = 4
_forceNoDDS$ = 20					; size = 1
?Load@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H_N@Z PROC ; TextureDB::Load
; _this$ = ecx

; 780  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Load@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 2120				; 00000848H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 781  :     char filename[MAX_PATH];
; 782  :     int result;
; 783  :     CImageFileMemory  texFile;

	lea	ecx, DWORD PTR _texFile$[ebp]
	call	??0CImageFileMemory@@QAE@XZ		; CImageFileMemory::CImageFileMemory
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 784  : 
; 785  : 
; 786  :     ShiAssert(IsReady());
; 787  :     ShiAssert(pSet);
; 788  :     ShiAssert(pTile);
; 789  :     ShiAssert(!pTile->handle[res]);
; 790  :     ShiAssert(!pTile->handle[res]);
; 791  : 
; 792  :     if (!forceNoDDS && DisplayOptions.m_texMode == DisplayOptionsClass::TEX_MODE_DDS)

	movzx	eax, BYTE PTR _forceNoDDS$[ebp]
	test	eax, eax
	jne	SHORT $LN9@Load
	cmp	DWORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+24, 70161 ; 00011211H
	jne	SHORT $LN9@Load

; 793  :     {
; 794  :         ReadImageDDS(pTile, res);

	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pTile$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadImageDDS@TextureDB@@IAEXPAUTileEntry@@H@Z ; TextureDB::ReadImageDDS

; 795  :         pSet->palette = NULL;

	mov	eax, DWORD PTR _pSet$[ebp]
	mov	DWORD PTR [eax+4], 0

; 796  :     }
; 797  :     else

	jmp	$LN8@Load
$LN9@Load:

; 798  :     {
; 799  :         // Construct the full texture file name including path
; 800  :         strcpy(filename, texturePath);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR _filename$[ebp]
	push	edx
	call	_strcpy
	add	esp, 8

; 801  :         strcat(filename, pTile->filename);

	mov	eax, DWORD PTR _pTile$[ebp]
	push	eax
	lea	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8

; 802  : 
; 803  :         if (res == 1)

	cmp	DWORD PTR _res$[ebp], 1
	jne	SHORT $LN7@Load

; 804  :             filename[strlen(texturePath)] = 'M';

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	BYTE PTR _filename$[ebp+eax], 77	; 0000004dH
	jmp	SHORT $LN6@Load
$LN7@Load:

; 805  :         else if (res == 0)

	cmp	DWORD PTR _res$[ebp], 0
	jne	SHORT $LN6@Load

; 806  :             filename[strlen(texturePath)] = 'L';

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	BYTE PTR _filename$[ebp+eax], 76	; 0000004cH
$LN6@Load:

; 807  : 
; 808  :         // Make sure we recognize this file type
; 809  :         texFile.imageType = CheckImageType(filename);

	lea	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	call	?CheckImageType@@YAHPBD@Z		; CheckImageType
	add	esp, 4
	mov	DWORD PTR _texFile$[ebp+28], eax

; 810  :         ShiAssert(texFile.imageType != IMAGE_TYPE_UNKNOWN);
; 811  : 
; 812  :         // Open the input file
; 813  :         result = texFile.glOpenFileMem(filename);

	lea	edx, DWORD PTR _filename$[ebp]
	push	edx
	lea	ecx, DWORD PTR _texFile$[ebp]
	call	?glOpenFileMem@CFileMemory@@QAEHPBD@Z	; CFileMemory::glOpenFileMem
	mov	DWORD PTR _result$[ebp], eax

; 814  : 
; 815  :         if (result != 1)

	cmp	DWORD PTR _result$[ebp], 1
	je	SHORT $LN4@Load

; 816  :         {
; 817  :             char message[256];
; 818  :             sprintf(message, "Failed to open %s", filename);

	lea	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0BC@IHKENOG@Failed?5to?5open?5?$CFs?$AA@
	lea	ecx, DWORD PTR _message$4[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 819  :             ShiError(message);

	push	OFFSET ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
	push	OFFSET ??_C@_0M@HFACBFJD@TerrTex?4cpp?$AA@
	push	819					; 00000333H
	push	OFFSET ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
	lea	edx, DWORD PTR _buffer$3[ebp]
	push	edx
	call	_sprintf
	add	esp, 20					; 00000014H
	push	0
	lea	eax, DWORD PTR _message$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _buffer$3[ebp]
	push	ecx
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	push	-1
	call	_exit

; 820  : 			return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _texFile$[ebp]
	call	??1CImageFileMemory@@UAE@XZ		; CImageFileMemory::~CImageFileMemory
	jmp	$LN11@Load
$LN4@Load:

; 821  :         }
; 822  : 
; 823  :         // Read the image data (note that ReadTextureImage will close texFile for us)
; 824  :         texFile.glReadFileMem();

	lea	ecx, DWORD PTR _texFile$[ebp]
	call	?glReadFileMem@CFileMemory@@QAEXXZ	; CFileMemory::glReadFileMem

; 825  :         result = ReadTextureImage(&texFile);

	lea	edx, DWORD PTR _texFile$[ebp]
	push	edx
	call	?ReadTextureImage@@YAHPAVCImageFileMemory@@@Z ; ReadTextureImage
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax

; 826  : 
; 827  :         if (result != GOOD_READ)

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN3@Load

; 828  : 		{
; 829  :             ShiError("Failed to read terrain texture. CD Error?");

	push	OFFSET ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
	push	OFFSET ??_C@_0M@HFACBFJD@TerrTex?4cpp?$AA@
	push	829					; 0000033dH
	push	OFFSET ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
	lea	eax, DWORD PTR _buffer$2[ebp]
	push	eax
	call	_sprintf
	add	esp, 20					; 00000014H
	push	0
	push	OFFSET ??_C@_0CK@EPADCPNN@Failed?5to?5read?5terrain?5texture?4?5@
	lea	ecx, DWORD PTR _buffer$2[ebp]
	push	ecx
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	push	-1
	call	_exit

; 830  : 			return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _texFile$[ebp]
	call	??1CImageFileMemory@@UAE@XZ		; CImageFileMemory::~CImageFileMemory
	jmp	SHORT $LN11@Load
$LN3@Load:

; 831  : 		}
; 832  : 
; 833  :         // Store pointer to the image data
; 834  :         pTile->bits[res] = (BYTE*)texFile.image.image;

	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _pTile$[ebp]
	mov	ecx, DWORD PTR _texFile$[ebp+44]
	mov	DWORD PTR [eax+edx*4+60], ecx

; 835  :         ShiAssert(pTile->bits[res]);
; 836  : 
; 837  :         // Store the width and height of the texture for use when loading the texture
; 838  :         ShiAssert(texFile.image.width == texFile.image.height);
; 839  :         ShiAssert(texFile.image.width < 2048);
; 840  :         pTile->width[res] = texFile.image.width;

	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _pTile$[ebp]
	mov	ecx, DWORD PTR _texFile$[ebp+32]
	mov	DWORD PTR [eax+edx*4+36], ecx

; 841  :         pTile->height[res] = texFile.image.height;

	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _pTile$[ebp]
	mov	ecx, DWORD PTR _texFile$[ebp+36]
	mov	DWORD PTR [eax+edx*4+48], ecx

; 842  : 
; 843  :         // Make sure this texture is palettized
; 844  :         ShiAssert(texFile.image.palette);
; 845  : 
; 846  :         // If we already have this palette, we don't need it again
; 847  :         if (pSet->palette)

	mov	edx, DWORD PTR _pSet$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN2@Load

; 848  :             glReleaseMemory(texFile.image.palette);

	mov	eax, DWORD PTR _texFile$[ebp+40]
	push	eax
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4

; 849  :         else

	jmp	SHORT $LN8@Load
$LN2@Load:

; 850  :         {
; 851  :             // This must be the first reference to this tile since we don't have a palette
; 852  :             ShiAssert(pSet->refCount == 0);
; 853  :             ShiAssert(pSet->palHandle == 0);
; 854  : 
; 855  :             // Save the palette from this image for future use
; 856  :             pSet->palette = (DWORD*)texFile.image.palette;

	mov	ecx, DWORD PTR _pSet$[ebp]
	mov	edx, DWORD PTR _texFile$[ebp+40]
	mov	DWORD PTR [ecx+4], edx
$LN8@Load:

; 857  :         }
; 858  : 
; 859  :         ShiAssert(pSet->palette);
; 860  :     }
; 861  : 
; 862  : #ifdef _DEBUG
; 863  :     LoadedSetCount++;
; 864  : #endif
; 865  : 
; 866  :     // Note that this tile is referencing it's parent set
; 867  :     pSet->refCount++;

	mov	eax, DWORD PTR _pSet$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _pSet$[ebp]
	mov	DWORD PTR [edx], ecx

; 868  : 
; 869  : #ifdef _DEBUG
; 870  :     LoadedTextureCount++;
; 871  : #endif
; 872  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _texFile$[ebp]
	call	??1CImageFileMemory@@UAE@XZ		; CImageFileMemory::~CImageFileMemory
$LN11@Load:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Load@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H_N@Z$0:
	lea	ecx, DWORD PTR _texFile$[ebp]
	jmp	??1CImageFileMemory@@UAE@XZ		; CImageFileMemory::~CImageFileMemory
__ehhandler$?Load@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-2124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Load@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Load@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H_N@Z ENDP ; TextureDB::Load
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\terrtex.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_set$ = -4						; size = 4
_texID$ = 8						; size = 4
?GetTerrainType@TextureDB@@QAEEK@Z PROC			; TextureDB::GetTerrainType
; _this$ = ecx

; 766  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 767  :     int set = ExtractSet(texID);

	mov	eax, DWORD PTR _texID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExtractSet@TextureDB@@IAEHK@Z		; TextureDB::ExtractSet
	mov	DWORD PTR _set$[ebp], eax

; 768  : 
; 769  :     if ((set < 0) || (set >= numSets))

	cmp	DWORD PTR _set$[ebp], 0
	jl	SHORT $LN1@GetTerrain
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _set$[ebp]
	cmp	edx, DWORD PTR [ecx+524]
	jl	SHORT $LN2@GetTerrain
$LN1@GetTerrain:

; 770  :         return 0;

	xor	al, al
	jmp	SHORT $LN3@GetTerrain
$LN2@GetTerrain:

; 771  : 
; 772  :     ShiAssert(set >= 0);
; 773  :     ShiAssert(set < numSets);
; 774  : 
; 775  :     return TextureSets[set].terrainType;

	mov	eax, DWORD PTR _set$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	al, BYTE PTR [edx+eax+12]
$LN3@GetTerrain:

; 776  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetTerrainType@TextureDB@@QAEEK@Z ENDP			; TextureDB::GetTerrainType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\terrtex.cpp
_TEXT	SEGMENT
_stop$ = -20						; size = 4
_tile$ = -16						; size = 4
_set$ = -12						; size = 4
_this$ = -8						; size = 4
_a$ = -4						; size = 4
_texID$ = 8						; size = 4
_type$ = 12						; size = 4
_offset$ = 16						; size = 4
?GetArea@TextureDB@@QAEPAUTexArea@@KHH@Z PROC		; TextureDB::GetArea
; _this$ = ecx

; 736  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 737  :     TexArea *a;
; 738  :     TexArea *stop;
; 739  : 
; 740  :     int set = ExtractSet(texID);

	mov	eax, DWORD PTR _texID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExtractSet@TextureDB@@IAEHK@Z		; TextureDB::ExtractSet
	mov	DWORD PTR _set$[ebp], eax

; 741  :     int tile = ExtractTile(texID);

	mov	ecx, DWORD PTR _texID$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExtractTile@TextureDB@@IAEHK@Z		; TextureDB::ExtractTile
	mov	DWORD PTR _tile$[ebp], eax

; 742  : 
; 743  :     ShiAssert(set >= 0);
; 744  :     ShiAssert(set < numSets);
; 745  : 
; 746  :     a = TextureSets[set].tiles[tile].Areas;

	mov	edx, DWORD PTR _set$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	eax, DWORD PTR _tile$[ebp]
	imul	eax, 144				; 00000090H
	mov	ecx, DWORD PTR [ecx+edx+20]
	mov	edx, DWORD PTR [ecx+eax+24]
	mov	DWORD PTR _a$[ebp], edx

; 747  :     stop = a + TextureSets[set].tiles[tile].nAreas;

	mov	eax, DWORD PTR _set$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	ecx, DWORD PTR _tile$[ebp]
	imul	ecx, 144				; 00000090H
	mov	edx, DWORD PTR [edx+eax+20]
	mov	eax, DWORD PTR [edx+ecx+20]
	shl	eax, 4
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _stop$[ebp], eax

; 748  : 
; 749  :     // Find the first entry of the required type
; 750  :     if (type)

	cmp	DWORD PTR _type$[ebp], 0
	je	SHORT $LN5@GetArea
$LN4@GetArea:

; 751  :         while ((a < stop) && (a->type != type))

	mov	ecx, DWORD PTR _a$[ebp]
	cmp	ecx, DWORD PTR _stop$[ebp]
	jae	SHORT $LN5@GetArea
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _type$[ebp]
	je	SHORT $LN5@GetArea

; 752  :             a++;

	mov	ecx, DWORD PTR _a$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _a$[ebp], ecx
	jmp	SHORT $LN4@GetArea
$LN5@GetArea:

; 753  : 
; 754  :     // Step to the requested offset
; 755  :     a += offset;

	mov	edx, DWORD PTR _offset$[ebp]
	shl	edx, 4
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _a$[ebp], edx

; 756  : 
; 757  :     // We didn't find enough (or any) matching types
; 758  :     if ((a >= stop) || ((type) && (a->type != type)))

	mov	eax, DWORD PTR _a$[ebp]
	cmp	eax, DWORD PTR _stop$[ebp]
	jae	SHORT $LN1@GetArea
	cmp	DWORD PTR _type$[ebp], 0
	je	SHORT $LN2@GetArea
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _type$[ebp]
	je	SHORT $LN2@GetArea
$LN1@GetArea:

; 759  :         return NULL;

	xor	eax, eax
	jmp	SHORT $LN6@GetArea
$LN2@GetArea:

; 760  : 
; 761  :     // We found a match
; 762  :     return a;

	mov	eax, DWORD PTR _a$[ebp]
$LN6@GetArea:

; 763  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetArea@TextureDB@@QAEPAUTexArea@@KHH@Z ENDP		; TextureDB::GetArea
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\terrtex.cpp
_TEXT	SEGMENT
_stop$ = -20						; size = 4
_tile$ = -16						; size = 4
_set$ = -12						; size = 4
_this$ = -8						; size = 4
_a$ = -4						; size = 4
_texID$ = 8						; size = 4
_type$ = 12						; size = 4
_offset$ = 16						; size = 4
?GetPath@TextureDB@@QAEPAUTexPath@@KHH@Z PROC		; TextureDB::GetPath
; _this$ = ecx

; 705  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 706  :     TexPath *a;
; 707  :     TexPath *stop;
; 708  : 
; 709  :     int set = ExtractSet(texID);

	mov	eax, DWORD PTR _texID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExtractSet@TextureDB@@IAEHK@Z		; TextureDB::ExtractSet
	mov	DWORD PTR _set$[ebp], eax

; 710  :     int tile = ExtractTile(texID);

	mov	ecx, DWORD PTR _texID$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExtractTile@TextureDB@@IAEHK@Z		; TextureDB::ExtractTile
	mov	DWORD PTR _tile$[ebp], eax

; 711  : 
; 712  :     ShiAssert(set >= 0);
; 713  :     ShiAssert(set < numSets);
; 714  : 
; 715  :     a = TextureSets[set].tiles[tile].Paths;

	mov	edx, DWORD PTR _set$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	eax, DWORD PTR _tile$[ebp]
	imul	eax, 144				; 00000090H
	mov	ecx, DWORD PTR [ecx+edx+20]
	mov	edx, DWORD PTR [ecx+eax+32]
	mov	DWORD PTR _a$[ebp], edx

; 716  :     stop = a + TextureSets[set].tiles[tile].nPaths;

	mov	eax, DWORD PTR _set$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	ecx, DWORD PTR _tile$[ebp]
	imul	ecx, 144				; 00000090H
	mov	edx, DWORD PTR [edx+eax+20]
	mov	eax, DWORD PTR [edx+ecx+28]
	imul	eax, 24					; 00000018H
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _stop$[ebp], eax

; 717  : 
; 718  :     // Find the first entry of the required type
; 719  :     if (type)

	cmp	DWORD PTR _type$[ebp], 0
	je	SHORT $LN5@GetPath
$LN4@GetPath:

; 720  :         while ((a < stop) && (a->type != type))

	mov	ecx, DWORD PTR _a$[ebp]
	cmp	ecx, DWORD PTR _stop$[ebp]
	jae	SHORT $LN5@GetPath
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _type$[ebp]
	je	SHORT $LN5@GetPath

; 721  :             a++;

	mov	ecx, DWORD PTR _a$[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR _a$[ebp], ecx
	jmp	SHORT $LN4@GetPath
$LN5@GetPath:

; 722  : 
; 723  :     // Step to the requested offset
; 724  :     a += offset;

	mov	edx, DWORD PTR _offset$[ebp]
	imul	edx, 24					; 00000018H
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _a$[ebp], edx

; 725  : 
; 726  :     // We didn't find enough (or any) matching types
; 727  :     if ((a >= stop) || ((type) && (a->type != type)))

	mov	eax, DWORD PTR _a$[ebp]
	cmp	eax, DWORD PTR _stop$[ebp]
	jae	SHORT $LN1@GetPath
	cmp	DWORD PTR _type$[ebp], 0
	je	SHORT $LN2@GetPath
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _type$[ebp]
	je	SHORT $LN2@GetPath
$LN1@GetPath:

; 728  :         return NULL;

	xor	eax, eax
	jmp	SHORT $LN6@GetPath
$LN2@GetPath:

; 729  : 
; 730  :     // We found a match
; 731  :     return a;

	mov	eax, DWORD PTR _a$[ebp]
$LN6@GetPath:

; 732  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetPath@TextureDB@@QAEPAUTexPath@@KHH@Z ENDP		; TextureDB::GetPath
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\terrtex.cpp
_TEXT	SEGMENT
_r$1 = -16						; size = 4
_j$2 = -12						; size = 4
_this$ = -8						; size = 4
_i$3 = -4						; size = 4
?FlushHandles@TextureDB@@QAEXXZ PROC			; TextureDB::FlushHandles
; _this$ = ecx

; 1202 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1203 :     for (int i = 0; i < numSets; i++)

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN12@FlushHandl
$LN11@FlushHandl:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN12@FlushHandl:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$3[ebp]
	cmp	edx, DWORD PTR [ecx+524]
	jge	$LN13@FlushHandl

; 1204 :     {
; 1205 :         for (int j = 0; j < TextureSets[i].numTiles; j++)

	mov	DWORD PTR _j$2[ebp], 0
	jmp	SHORT $LN9@FlushHandl
$LN8@FlushHandl:
	mov	eax, DWORD PTR _j$2[ebp]
	add	eax, 1
	mov	DWORD PTR _j$2[ebp], eax
$LN9@FlushHandl:
	mov	ecx, DWORD PTR _i$3[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+528]
	mov	edx, DWORD PTR _j$2[ebp]
	cmp	edx, DWORD PTR [eax+ecx+16]
	jge	$LN7@FlushHandl

; 1206 :         {
; 1207 :             for (int r = TEX_LEVELS - 1; r >= 0; r--)

	mov	DWORD PTR _r$1[ebp], 2
	jmp	SHORT $LN6@FlushHandl
$LN5@FlushHandl:
	mov	eax, DWORD PTR _r$1[ebp]
	sub	eax, 1
	mov	DWORD PTR _r$1[ebp], eax
$LN6@FlushHandl:
	cmp	DWORD PTR _r$1[ebp], 0
	jl	$LN4@FlushHandl

; 1208 :             {
; 1209 :                 // Free the texture data
; 1210 :                 if (TextureSets[i].tiles[j].handle[r])

	mov	ecx, DWORD PTR _i$3[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+528]
	mov	edx, DWORD PTR _j$2[ebp]
	imul	edx, 144				; 00000090H
	add	edx, DWORD PTR [eax+ecx+20]
	mov	eax, DWORD PTR _r$1[ebp]
	cmp	DWORD PTR [edx+eax*4+72], 0
	je	SHORT $LN3@FlushHandl

; 1211 :                     Deactivate(&TextureSets[i], &TextureSets[i].tiles[j], r);

	mov	ecx, DWORD PTR _r$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$3[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	eax, DWORD PTR _j$2[ebp]
	imul	eax, 144				; 00000090H
	add	eax, DWORD PTR [ecx+edx+20]
	push	eax
	mov	ecx, DWORD PTR _i$3[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+528]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Deactivate@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H@Z ; TextureDB::Deactivate
$LN3@FlushHandl:

; 1212 : 
; 1213 :                 if (TextureSets[i].tiles[j].bits[r])

	mov	eax, DWORD PTR _i$3[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	ecx, DWORD PTR _j$2[ebp]
	imul	ecx, 144				; 00000090H
	add	ecx, DWORD PTR [edx+eax+20]
	mov	edx, DWORD PTR _r$1[ebp]
	cmp	DWORD PTR [ecx+edx*4+60], 0
	je	SHORT $LN2@FlushHandl

; 1214 :                     Free(&TextureSets[i], &TextureSets[i].tiles[j], r);

	mov	eax, DWORD PTR _r$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$3[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+528]
	mov	edx, DWORD PTR _j$2[ebp]
	imul	edx, 144				; 00000090H
	add	edx, DWORD PTR [eax+ecx+20]
	push	edx
	mov	eax, DWORD PTR _i$3[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+528]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H@Z ; TextureDB::Free
$LN2@FlushHandl:

; 1215 : 
; 1216 :                 if (TextureSets[i].tiles[j].refCount[r] > 0) TextureSets[i].tiles[j].refCount[r]--;

	mov	edx, DWORD PTR _i$3[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	eax, DWORD PTR _j$2[ebp]
	imul	eax, 144				; 00000090H
	add	eax, DWORD PTR [ecx+edx+20]
	mov	ecx, DWORD PTR _r$1[ebp]
	cmp	DWORD PTR [eax+ecx*4+132], 0
	jle	SHORT $LN1@FlushHandl
	mov	edx, DWORD PTR _i$3[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	eax, DWORD PTR _j$2[ebp]
	imul	eax, 144				; 00000090H
	mov	ecx, DWORD PTR [ecx+edx+20]
	add	ecx, eax
	mov	edx, DWORD PTR _r$1[ebp]
	mov	eax, DWORD PTR [ecx+edx*4+132]
	sub	eax, 1
	mov	ecx, DWORD PTR _i$3[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+528]
	mov	esi, DWORD PTR _j$2[ebp]
	imul	esi, 144				; 00000090H
	add	esi, DWORD PTR [edx+ecx+20]
	mov	ecx, DWORD PTR _r$1[ebp]
	mov	DWORD PTR [esi+ecx*4+132], eax
$LN1@FlushHandl:

; 1217 :             }

	jmp	$LN5@FlushHandl
$LN4@FlushHandl:

; 1218 :         }

	jmp	$LN8@FlushHandl
$LN7@FlushHandl:

; 1219 :     }

	jmp	$LN11@FlushHandl
$LN13@FlushHandl:

; 1220 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?FlushHandles@TextureDB@@QAEXXZ ENDP			; TextureDB::FlushHandles
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\terrtex.cpp
_TEXT	SEGMENT
_sl$ = -36						; size = 4
_r$2 = -32						; size = 4
_j$3 = -28						; size = 4
_i$4 = -24						; size = 4
_this$ = -20						; size = 4
$T5 = -13						; size = 1
__$EHRec$ = -12						; size = 12
_bForce$ = 8						; size = 1
?SyncDDSTextures@TextureDB@@QAE_N_N@Z PROC		; TextureDB::SyncDDSTextures
; _this$ = ecx

; 1223 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SyncDDSTextures@TextureDB@@QAE_N_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1224 :     ShiAssert(IsReady());
; 1225 : 
; 1226 :     if (!IsReady())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsReady@TextureDB@@QAEHXZ		; TextureDB::IsReady
	test	eax, eax
	jne	SHORT $LN10@SyncDDSTex

; 1227 :         return false;

	xor	al, al
	jmp	$LN11@SyncDDSTex
$LN10@SyncDDSTex:

; 1228 : 
; 1229 :     CreateDirectory(texturePathD, NULL);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 260				; 00000104H
	push	eax
	call	DWORD PTR __imp__CreateDirectoryA@8

; 1230 : 
; 1231 :     //EnterCriticalSection(&cs_textureList);
; 1232 :     F4ScopeLock sl(cs_textureList);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+552]
	push	edx
	lea	ecx, DWORD PTR _sl$[ebp]
	call	??0F4ScopeLock@@QAE@PAUF4CSECTIONHANDLE@@@Z ; F4ScopeLock::F4ScopeLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1233 : 
; 1234 :     // Dump the entire texture list
; 1235 :     for (int i = 0; i < numSets; i++)

	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN9@SyncDDSTex
$LN8@SyncDDSTex:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN9@SyncDDSTex:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$4[ebp]
	cmp	edx, DWORD PTR [ecx+524]
	jge	$LN7@SyncDDSTex

; 1236 :     {
; 1237 :         for (int j = 0; j < TextureSets[i].numTiles; j++)

	mov	DWORD PTR _j$3[ebp], 0
	jmp	SHORT $LN6@SyncDDSTex
$LN5@SyncDDSTex:
	mov	eax, DWORD PTR _j$3[ebp]
	add	eax, 1
	mov	DWORD PTR _j$3[ebp], eax
$LN6@SyncDDSTex:
	mov	ecx, DWORD PTR _i$4[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+528]
	mov	edx, DWORD PTR _j$3[ebp]
	cmp	edx, DWORD PTR [eax+ecx+16]
	jge	$LN4@SyncDDSTex

; 1238 :         {
; 1239 :             for (int r = TEX_LEVELS - 1; r >= 0; r--)

	mov	DWORD PTR _r$2[ebp], 2
	jmp	SHORT $LN3@SyncDDSTex
$LN2@SyncDDSTex:
	mov	eax, DWORD PTR _r$2[ebp]
	sub	eax, 1
	mov	DWORD PTR _r$2[ebp], eax
$LN3@SyncDDSTex:
	cmp	DWORD PTR _r$2[ebp], 0
	jl	$LN1@SyncDDSTex

; 1240 :             {
; 1241 :                 Load(&TextureSets[i], &TextureSets[i].tiles[j], r, true);

	push	1
	mov	ecx, DWORD PTR _r$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$4[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	eax, DWORD PTR _j$3[ebp]
	imul	eax, 144				; 00000090H
	add	eax, DWORD PTR [ecx+edx+20]
	push	eax
	mov	ecx, DWORD PTR _i$4[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+528]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Load@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H_N@Z ; TextureDB::Load

; 1242 :                 TextureSets[i].tiles[j].refCount[r]++;

	mov	eax, DWORD PTR _i$4[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	ecx, DWORD PTR _j$3[ebp]
	imul	ecx, 144				; 00000090H
	mov	edx, DWORD PTR [edx+eax+20]
	add	edx, ecx
	mov	eax, DWORD PTR _r$2[ebp]
	mov	ecx, DWORD PTR [edx+eax*4+132]
	add	ecx, 1
	mov	edx, DWORD PTR _i$4[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+528]
	mov	esi, DWORD PTR _j$3[ebp]
	imul	esi, 144				; 00000090H
	add	esi, DWORD PTR [eax+edx+20]
	mov	edx, DWORD PTR _r$2[ebp]
	mov	DWORD PTR [esi+edx*4+132], ecx

; 1243 :                 DumpImageToFile(&TextureSets[i].tiles[j], TextureSets[i].palette, r, bForce);

	movzx	eax, BYTE PTR _bForce$[ebp]
	push	eax
	mov	ecx, DWORD PTR _r$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$4[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	edx, DWORD PTR [ecx+edx+4]
	push	edx
	mov	eax, DWORD PTR _i$4[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	ecx, DWORD PTR _j$3[ebp]
	imul	ecx, 144				; 00000090H
	add	ecx, DWORD PTR [edx+eax+20]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DumpImageToFile@TextureDB@@IAE_NPAUTileEntry@@PAKH_N@Z ; TextureDB::DumpImageToFile

; 1244 :                 Free(&TextureSets[i], &TextureSets[i].tiles[j], r);

	mov	edx, DWORD PTR _r$2[ebp]
	push	edx
	mov	eax, DWORD PTR _i$4[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	ecx, DWORD PTR _j$3[ebp]
	imul	ecx, 144				; 00000090H
	add	ecx, DWORD PTR [edx+eax+20]
	push	ecx
	mov	edx, DWORD PTR _i$4[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+528]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H@Z ; TextureDB::Free

; 1245 :                 TextureSets[i].tiles[j].refCount[r]--;

	mov	ecx, DWORD PTR _i$4[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+528]
	mov	edx, DWORD PTR _j$3[ebp]
	imul	edx, 144				; 00000090H
	mov	eax, DWORD PTR [eax+ecx+20]
	add	eax, edx
	mov	ecx, DWORD PTR _r$2[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+132]
	sub	edx, 1
	mov	eax, DWORD PTR _i$4[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+528]
	mov	esi, DWORD PTR _j$3[ebp]
	imul	esi, 144				; 00000090H
	add	esi, DWORD PTR [ecx+eax+20]
	mov	eax, DWORD PTR _r$2[ebp]
	mov	DWORD PTR [esi+eax*4+132], edx

; 1246 :             }

	jmp	$LN2@SyncDDSTex
$LN1@SyncDDSTex:

; 1247 :         }

	jmp	$LN5@SyncDDSTex
$LN4@SyncDDSTex:

; 1248 :     }

	jmp	$LN8@SyncDDSTex
$LN7@SyncDDSTex:

; 1249 : 
; 1250 :     //LeaveCriticalSection(&cs_textureList);
; 1251 : 
; 1252 :     return true;

	mov	BYTE PTR $T5[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sl$[ebp]
	call	??1F4ScopeLock@@QAE@XZ			; F4ScopeLock::~F4ScopeLock
	mov	al, BYTE PTR $T5[ebp]
$LN11@SyncDDSTex:

; 1253 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SyncDDSTextures@TextureDB@@QAE_N_N@Z$0:
	lea	ecx, DWORD PTR _sl$[ebp]
	jmp	??1F4ScopeLock@@QAE@XZ			; F4ScopeLock::~F4ScopeLock
__ehhandler$?SyncDDSTextures@TextureDB@@QAE_N_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SyncDDSTextures@TextureDB@@QAE_N_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SyncDDSTextures@TextureDB@@QAE_N_N@Z ENDP		; TextureDB::SyncDDSTextures
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\terrtex.cpp
_TEXT	SEGMENT
_sl$ = -32						; size = 4
_r$2 = -28						; size = 4
_j$3 = -24						; size = 4
_this$ = -20						; size = 4
_i$4 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?RestoreAll@TextureDB@@QAEXXZ PROC			; TextureDB::RestoreAll
; _this$ = ecx

; 1170 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?RestoreAll@TextureDB@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1171 :     ShiAssert(IsReady());
; 1172 : 
; 1173 :     if (!IsReady()) return;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsReady@TextureDB@@QAEHXZ		; TextureDB::IsReady
	test	eax, eax
	jne	SHORT $LN12@RestoreAll
	jmp	$LN13@RestoreAll
$LN12@RestoreAll:

; 1174 : 
; 1175 :     //   EnterCriticalSection(&cs_textureList);
; 1176 :     F4ScopeLock sl(cs_textureList);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+552]
	push	ecx
	lea	ecx, DWORD PTR _sl$[ebp]
	call	??0F4ScopeLock@@QAE@PAUF4CSECTIONHANDLE@@@Z ; F4ScopeLock::F4ScopeLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1177 : 
; 1178 :     // Restore the entire texture list
; 1179 :     for (int i = 0; i < numSets; i++)

	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN11@RestoreAll
$LN10@RestoreAll:
	mov	edx, DWORD PTR _i$4[ebp]
	add	edx, 1
	mov	DWORD PTR _i$4[ebp], edx
$LN11@RestoreAll:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$4[ebp]
	cmp	ecx, DWORD PTR [eax+524]
	jge	$LN9@RestoreAll

; 1180 :     {
; 1181 :         for (int j = 0; j < TextureSets[i].numTiles; j++)

	mov	DWORD PTR _j$3[ebp], 0
	jmp	SHORT $LN8@RestoreAll
$LN7@RestoreAll:
	mov	edx, DWORD PTR _j$3[ebp]
	add	edx, 1
	mov	DWORD PTR _j$3[ebp], edx
$LN8@RestoreAll:
	mov	eax, DWORD PTR _i$4[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	ecx, DWORD PTR _j$3[ebp]
	cmp	ecx, DWORD PTR [edx+eax+16]
	jge	$LN6@RestoreAll

; 1182 :         {
; 1183 :             for (int r = TEX_LEVELS - 1; r >= 0; r--)

	mov	DWORD PTR _r$2[ebp], 2
	jmp	SHORT $LN5@RestoreAll
$LN4@RestoreAll:
	mov	edx, DWORD PTR _r$2[ebp]
	sub	edx, 1
	mov	DWORD PTR _r$2[ebp], edx
$LN5@RestoreAll:
	cmp	DWORD PTR _r$2[ebp], 0
	jl	$LN3@RestoreAll

; 1184 :             {
; 1185 :                 if (TextureSets[i].tiles[j].handle[r])

	mov	eax, DWORD PTR _i$4[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	ecx, DWORD PTR _j$3[ebp]
	imul	ecx, 144				; 00000090H
	add	ecx, DWORD PTR [edx+eax+20]
	mov	edx, DWORD PTR _r$2[ebp]
	cmp	DWORD PTR [ecx+edx*4+72], 0
	je	SHORT $LN2@RestoreAll

; 1186 :                 {
; 1187 :                     ((TextureHandle *)TextureSets[i].tiles[j].handle[r])->RestoreAll();

	mov	eax, DWORD PTR _i$4[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	ecx, DWORD PTR _j$3[ebp]
	imul	ecx, 144				; 00000090H
	mov	edx, DWORD PTR [edx+eax+20]
	add	edx, ecx
	mov	eax, DWORD PTR _r$2[ebp]
	mov	ecx, DWORD PTR [edx+eax*4+72]
	call	?RestoreAll@TextureHandle@@QAEXXZ	; TextureHandle::RestoreAll

; 1188 : 
; 1189 :                     if (DisplayOptions.m_texMode == DisplayOptionsClass::TEX_MODE_DDS)

	cmp	DWORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+24, 70161 ; 00011211H
	jne	SHORT $LN2@RestoreAll

; 1190 :                     {
; 1191 :                         ((TextureHandle *)TextureSets[i].tiles[j].handleN[r])->RestoreAll();

	mov	ecx, DWORD PTR _i$4[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+528]
	mov	edx, DWORD PTR _j$3[ebp]
	imul	edx, 144				; 00000090H
	mov	eax, DWORD PTR [eax+ecx+20]
	add	eax, edx
	mov	ecx, DWORD PTR _r$2[ebp]
	mov	ecx, DWORD PTR [eax+ecx*4+120]
	call	?RestoreAll@TextureHandle@@QAEXXZ	; TextureHandle::RestoreAll
$LN2@RestoreAll:

; 1192 :                     }
; 1193 :                 }
; 1194 :             }

	jmp	$LN4@RestoreAll
$LN3@RestoreAll:

; 1195 :         }

	jmp	$LN7@RestoreAll
$LN6@RestoreAll:

; 1196 :     }

	jmp	$LN10@RestoreAll
$LN9@RestoreAll:

; 1197 : 
; 1198 :     // LeaveCriticalSection(&cs_textureList);
; 1199 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sl$[ebp]
	call	??1F4ScopeLock@@QAE@XZ			; F4ScopeLock::~F4ScopeLock
$LN13@RestoreAll:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?RestoreAll@TextureDB@@QAEXXZ$0:
	lea	ecx, DWORD PTR _sl$[ebp]
	jmp	??1F4ScopeLock@@QAE@XZ			; F4ScopeLock::~F4ScopeLock
__ehhandler$?RestoreAll@TextureDB@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?RestoreAll@TextureDB@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?RestoreAll@TextureDB@@QAEXXZ ENDP			; TextureDB::RestoreAll
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\terrtex.cpp
_TEXT	SEGMENT
_res$ = -16						; size = 4
_tile$ = -12						; size = 4
_set$ = -8						; size = 4
_this$ = -4						; size = 4
_localContext$ = 8					; size = 4
_texID$ = 12						; size = 4
?Select@TextureDB@@QAEXPAVContextMPR@@K@Z PROC		; TextureDB::Select
; _this$ = ecx

; 1133 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1134 :     ShiAssert(IsReady());
; 1135 :     ShiAssert(localContext);
; 1136 : 
; 1137 :     int set = ExtractSet(texID);

	mov	eax, DWORD PTR _texID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExtractSet@TextureDB@@IAEHK@Z		; TextureDB::ExtractSet
	mov	DWORD PTR _set$[ebp], eax

; 1138 :     int tile = ExtractTile(texID);

	mov	ecx, DWORD PTR _texID$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExtractTile@TextureDB@@IAEHK@Z		; TextureDB::ExtractTile
	mov	DWORD PTR _tile$[ebp], eax

; 1139 :     int res = ExtractRes(texID);

	mov	edx, DWORD PTR _texID$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExtractRes@TextureDB@@IAEHK@Z		; TextureDB::ExtractRes
	mov	DWORD PTR _res$[ebp], eax

; 1140 : 
; 1141 :     ShiAssert(set >= 0);
; 1142 :     ShiAssert(set < numSets);
; 1143 :     ShiAssert(tile >= 0);
; 1144 :     ShiAssert(tile < TextureSets[set].numTiles);
; 1145 : 
; 1146 :     // JB 010318 CTD
; 1147 :     if (!(set >= 0 && set < numSets && tile >= 0 && tile < TextureSets[set].numTiles))

	cmp	DWORD PTR _set$[ebp], 0
	jl	SHORT $LN3@Select
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _set$[ebp]
	cmp	ecx, DWORD PTR [eax+524]
	jge	SHORT $LN3@Select
	cmp	DWORD PTR _tile$[ebp], 0
	jl	SHORT $LN3@Select
	mov	edx, DWORD PTR _set$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	eax, DWORD PTR _tile$[ebp]
	cmp	eax, DWORD PTR [ecx+edx+16]
	jl	SHORT $LN4@Select
$LN3@Select:

; 1148 :         return;

	jmp	$LN5@Select
$LN4@Select:

; 1149 : 
; 1150 :     // Make sure the texture we're trying to use is local to MPR
; 1151 :     if (TextureSets[set].tiles[tile].handle[res] == NULL)

	mov	ecx, DWORD PTR _set$[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+528]
	mov	edx, DWORD PTR _tile$[ebp]
	imul	edx, 144				; 00000090H
	add	edx, DWORD PTR [eax+ecx+20]
	mov	eax, DWORD PTR _res$[ebp]
	cmp	DWORD PTR [edx+eax*4+72], 0
	jne	SHORT $LN2@Select

; 1152 :     {
; 1153 :         ShiAssert(TextureSets[set].tiles[tile].bits[res]);
; 1154 :         Activate(&TextureSets[set], &TextureSets[set].tiles[tile], res);

	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	eax, DWORD PTR _tile$[ebp]
	imul	eax, 144				; 00000090H
	add	eax, DWORD PTR [ecx+edx+20]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+528]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Activate@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H@Z ; TextureDB::Activate
$LN2@Select:

; 1155 :     }
; 1156 : 
; 1157 :     // Day texture
; 1158 :     ShiAssert(TextureSets[set].tiles[tile].handle[res]);
; 1159 :     localContext->SelectTexture1(TextureSets[set].tiles[tile].handle[res]);

	mov	eax, DWORD PTR _set$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	ecx, DWORD PTR _tile$[ebp]
	imul	ecx, 144				; 00000090H
	mov	edx, DWORD PTR [edx+eax+20]
	add	edx, ecx
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4+72]
	push	ecx
	mov	ecx, DWORD PTR _localContext$[ebp]
	call	?SelectTexture1@ContextMPR@@QAEXH@Z	; ContextMPR::SelectTexture1

; 1160 : 
; 1161 :     // Night texture
; 1162 :     if (DisplayOptions.m_texMode == DisplayOptionsClass::TEX_MODE_DDS && lightLevel < 0.5f)

	cmp	DWORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+24, 70161 ; 00011211H
	jne	SHORT $LN1@Select
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f000000
	comiss	xmm0, DWORD PTR [edx+556]
	jbe	SHORT $LN1@Select

; 1163 :     {
; 1164 :         ShiAssert(TextureSets[set].tiles[tile].handleN[res]);
; 1165 :         localContext->SelectTexture2(TextureSets[set].tiles[tile].handleN[res]);

	mov	eax, DWORD PTR _set$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	ecx, DWORD PTR _tile$[ebp]
	imul	ecx, 144				; 00000090H
	mov	edx, DWORD PTR [edx+eax+20]
	add	edx, ecx
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4+120]
	push	ecx
	mov	ecx, DWORD PTR _localContext$[ebp]
	call	?SelectTexture2@ContextMPR@@QAEXH@Z	; ContextMPR::SelectTexture2
$LN1@Select:
$LN5@Select:

; 1166 :     }
; 1167 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Select@TextureDB@@QAEXPAVContextMPR@@K@Z ENDP		; TextureDB::Select
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\terrtex.cpp
_TEXT	SEGMENT
_sl$ = -32						; size = 4
_tile$ = -28						; size = 4
_set$ = -24						; size = 4
_res$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_texID$ = 8						; size = 4
?Release@TextureDB@@QAEXK@Z PROC			; TextureDB::Release
; _this$ = ecx

; 662  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Release@TextureDB@@QAEXK@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 663  :     int set = ExtractSet(texID);

	mov	eax, DWORD PTR _texID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExtractSet@TextureDB@@IAEHK@Z		; TextureDB::ExtractSet
	mov	DWORD PTR _set$[ebp], eax

; 664  :     int tile = ExtractTile(texID);

	mov	ecx, DWORD PTR _texID$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExtractTile@TextureDB@@IAEHK@Z		; TextureDB::ExtractTile
	mov	DWORD PTR _tile$[ebp], eax

; 665  :     int res = ExtractRes(texID);

	mov	edx, DWORD PTR _texID$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExtractRes@TextureDB@@IAEHK@Z		; TextureDB::ExtractRes
	mov	DWORD PTR _res$[ebp], eax

; 666  : 
; 667  :     ShiAssert(IsReady());
; 668  :     ShiAssert(set >= 0);
; 669  :     ShiAssert(set < numSets);
; 670  :     ShiAssert(tile < TextureSets[set].numTiles);
; 671  :     ShiAssert(res < TEX_LEVELS);
; 672  : 
; 673  : 
; 674  :     //EnterCriticalSection(&cs_textureList);
; 675  :     F4ScopeLock sl(cs_textureList);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+552]
	push	ecx
	lea	ecx, DWORD PTR _sl$[ebp]
	call	??0F4ScopeLock@@QAE@PAUF4CSECTIONHANDLE@@@Z ; F4ScopeLock::F4ScopeLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
$LN5@Release:

; 676  : 
; 677  :     // Release our hold on this texture and all mips
; 678  :     while (res >= 0)

	cmp	DWORD PTR _res$[ebp], 0
	jl	$LN4@Release

; 679  :     {
; 680  :         TextureSets[set].tiles[tile].refCount[res]--;

	mov	edx, DWORD PTR _set$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	eax, DWORD PTR _tile$[ebp]
	imul	eax, 144				; 00000090H
	mov	ecx, DWORD PTR [ecx+edx+20]
	add	ecx, eax
	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4+132]
	sub	eax, 1
	mov	ecx, DWORD PTR _set$[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+528]
	mov	esi, DWORD PTR _tile$[ebp]
	imul	esi, 144				; 00000090H
	add	esi, DWORD PTR [edx+ecx+20]
	mov	ecx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [esi+ecx*4+132], eax

; 681  : 
; 682  :         if (TextureSets[set].tiles[tile].refCount[res] == 0)

	mov	edx, DWORD PTR _set$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	eax, DWORD PTR _tile$[ebp]
	imul	eax, 144				; 00000090H
	add	eax, DWORD PTR [ecx+edx+20]
	mov	ecx, DWORD PTR _res$[ebp]
	cmp	DWORD PTR [eax+ecx*4+132], 0
	jne	$LN3@Release

; 683  :         {
; 684  :             if (overrideHandle == NULL)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+532], 0
	jne	SHORT $LN2@Release

; 685  :             {
; 686  :                 Deactivate(&TextureSets[set], &TextureSets[set].tiles[tile], res);

	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+528]
	mov	edx, DWORD PTR _tile$[ebp]
	imul	edx, 144				; 00000090H
	add	edx, DWORD PTR [eax+ecx+20]
	push	edx
	mov	eax, DWORD PTR _set$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+528]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Deactivate@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H@Z ; TextureDB::Deactivate

; 687  :                 Free(&TextureSets[set], &TextureSets[set].tiles[tile], res);

	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	mov	eax, DWORD PTR _set$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	ecx, DWORD PTR _tile$[ebp]
	imul	ecx, 144				; 00000090H
	add	ecx, DWORD PTR [edx+eax+20]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+528]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H@Z ; TextureDB::Free

; 688  :             }
; 689  :             else

	jmp	SHORT $LN3@Release
$LN2@Release:

; 690  :             {
; 691  :                 // When using an override texture, we don't clean up just drop our handle.
; 692  :                 TextureSets[set].tiles[tile].handle[res] = NULL;

	mov	ecx, DWORD PTR _set$[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+528]
	mov	edx, DWORD PTR _tile$[ebp]
	imul	edx, 144				; 00000090H
	add	edx, DWORD PTR [eax+ecx+20]
	mov	eax, DWORD PTR _res$[ebp]
	mov	DWORD PTR [edx+eax*4+72], 0

; 693  :                 TextureSets[set].tiles[tile].bits[res] = NULL;

	mov	ecx, DWORD PTR _set$[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+528]
	mov	edx, DWORD PTR _tile$[ebp]
	imul	edx, 144				; 00000090H
	add	edx, DWORD PTR [eax+ecx+20]
	mov	eax, DWORD PTR _res$[ebp]
	mov	DWORD PTR [edx+eax*4+60], 0
$LN3@Release:

; 694  :             }
; 695  :         }
; 696  : 
; 697  :         res--;

	mov	ecx, DWORD PTR _res$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _res$[ebp], ecx

; 698  :     }

	jmp	$LN5@Release
$LN4@Release:

; 699  : 
; 700  :     //LeaveCriticalSection(&cs_textureList);
; 701  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sl$[ebp]
	call	??1F4ScopeLock@@QAE@XZ			; F4ScopeLock::~F4ScopeLock
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Release@TextureDB@@QAEXK@Z$0:
	lea	ecx, DWORD PTR _sl$[ebp]
	jmp	??1F4ScopeLock@@QAE@XZ			; F4ScopeLock::~F4ScopeLock
__ehhandler$?Release@TextureDB@@QAEXK@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Release@TextureDB@@QAEXK@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Release@TextureDB@@QAEXK@Z ENDP			; TextureDB::Release
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\terrtex.cpp
_TEXT	SEGMENT
_sl$1 = -48						; size = 4
tv92 = -44						; size = 4
_res$ = -40						; size = 4
_r$2 = -36						; size = 4
_tile$ = -32						; size = 4
_r$3 = -28						; size = 4
_set$ = -24						; size = 4
_this$ = -20						; size = 4
_needToLoad$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_texID$ = 8						; size = 4
?Request@TextureDB@@QAEXK@Z PROC			; TextureDB::Request
; _this$ = ecx

; 613  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 614  :     int set = ExtractSet(texID);

	mov	eax, DWORD PTR _texID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExtractSet@TextureDB@@IAEHK@Z		; TextureDB::ExtractSet
	mov	DWORD PTR _set$[ebp], eax

; 615  :     int tile = ExtractTile(texID);

	mov	ecx, DWORD PTR _texID$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExtractTile@TextureDB@@IAEHK@Z		; TextureDB::ExtractTile
	mov	DWORD PTR _tile$[ebp], eax

; 616  :     int res = ExtractRes(texID);

	mov	edx, DWORD PTR _texID$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExtractRes@TextureDB@@IAEHK@Z		; TextureDB::ExtractRes
	mov	DWORD PTR _res$[ebp], eax

; 617  :     BOOL needToLoad[TEX_LEVELS];
; 618  : 
; 619  :     ShiAssert(IsReady());
; 620  :     ShiAssert(set >= 0);
; 621  :     ShiAssert(set < numSets);
; 622  :     ShiAssert(tile < TextureSets[set].numTiles);
; 623  :     ShiAssert(res < TEX_LEVELS);
; 624  : 
; 625  :     {
; 626  :         F4ScopeLock sl(cs_textureList);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+552]
	push	ecx
	lea	ecx, DWORD PTR _sl$1[ebp]
	call	??0F4ScopeLock@@QAE@PAUF4CSECTIONHANDLE@@@Z ; F4ScopeLock::F4ScopeLock

; 627  :         //EnterCriticalSection(&cs_textureList);
; 628  : 
; 629  :         // Decide if anyone needs to be loaded and increment our reference counts.
; 630  :         // sfr: @todo it seems we are reading one texture more than we should
; 631  :         for (int r = res; r >= 0; r--)

	mov	edx, DWORD PTR _res$[ebp]
	mov	DWORD PTR _r$3[ebp], edx
	jmp	SHORT $LN9@Request
$LN8@Request:
	mov	eax, DWORD PTR _r$3[ebp]
	sub	eax, 1
	mov	DWORD PTR _r$3[ebp], eax
$LN9@Request:
	cmp	DWORD PTR _r$3[ebp], 0
	jl	$LN7@Request

; 632  :         {
; 633  :             needToLoad[r] = (TextureSets[set].tiles[tile].refCount[r] == 0);

	mov	ecx, DWORD PTR _set$[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+528]
	mov	edx, DWORD PTR _tile$[ebp]
	imul	edx, 144				; 00000090H
	add	edx, DWORD PTR [eax+ecx+20]
	mov	eax, DWORD PTR _r$3[ebp]
	cmp	DWORD PTR [edx+eax*4+132], 0
	jne	SHORT $LN12@Request
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN13@Request
$LN12@Request:
	mov	DWORD PTR tv92[ebp], 0
$LN13@Request:
	mov	ecx, DWORD PTR _r$3[ebp]
	mov	edx, DWORD PTR tv92[ebp]
	mov	DWORD PTR _needToLoad$[ebp+ecx*4], edx

; 634  :             TextureSets[set].tiles[tile].refCount[r]++;

	mov	eax, DWORD PTR _set$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	ecx, DWORD PTR _tile$[ebp]
	imul	ecx, 144				; 00000090H
	mov	edx, DWORD PTR [edx+eax+20]
	add	edx, ecx
	mov	eax, DWORD PTR _r$3[ebp]
	mov	ecx, DWORD PTR [edx+eax*4+132]
	add	ecx, 1
	mov	edx, DWORD PTR _set$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+528]
	mov	esi, DWORD PTR _tile$[ebp]
	imul	esi, 144				; 00000090H
	add	esi, DWORD PTR [eax+edx+20]
	mov	edx, DWORD PTR _r$3[ebp]
	mov	DWORD PTR [esi+edx*4+132], ecx

; 635  :         }

	jmp	$LN8@Request
$LN7@Request:

; 636  : 
; 637  :         //LeaveCriticalSection( &cs_textureList );
; 638  :     }

	lea	ecx, DWORD PTR _sl$1[ebp]
	call	??1F4ScopeLock@@QAE@XZ			; F4ScopeLock::~F4ScopeLock

; 639  : 
; 640  :     // Get the data for this bitmap and any lower res bitmaps required
; 641  :     for (int r = res; r >= 0; r--)

	mov	eax, DWORD PTR _res$[ebp]
	mov	DWORD PTR _r$2[ebp], eax
	jmp	SHORT $LN6@Request
$LN5@Request:
	mov	ecx, DWORD PTR _r$2[ebp]
	sub	ecx, 1
	mov	DWORD PTR _r$2[ebp], ecx
$LN6@Request:
	cmp	DWORD PTR _r$2[ebp], 0
	jl	$LN10@Request

; 642  :     {
; 643  :         if (needToLoad[r])

	mov	edx, DWORD PTR _r$2[ebp]
	cmp	DWORD PTR _needToLoad$[ebp+edx*4], 0
	je	$LN3@Request

; 644  :         {
; 645  :             ShiAssert(TextureSets[set].tiles[tile].bits[r] == NULL);
; 646  :             ShiAssert(TextureSets[set].tiles[tile].handle[r] == NULL);
; 647  : 
; 648  :             if (overrideHandle == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+532], 0
	jne	SHORT $LN2@Request

; 649  :                 Load(&TextureSets[set], &TextureSets[set].tiles[tile], r);

	push	0
	mov	ecx, DWORD PTR _r$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	eax, DWORD PTR _tile$[ebp]
	imul	eax, 144				; 00000090H
	add	eax, DWORD PTR [ecx+edx+20]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+528]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Load@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H_N@Z ; TextureDB::Load

; 650  :             else

	jmp	SHORT $LN3@Request
$LN2@Request:

; 651  :             {
; 652  :                 // When using an override texture, we just assume its handle.
; 653  :                 TextureSets[set].tiles[tile].handle[res] = overrideHandle;

	mov	eax, DWORD PTR _set$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	ecx, DWORD PTR _tile$[ebp]
	imul	ecx, 144				; 00000090H
	add	ecx, DWORD PTR [edx+eax+20]
	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+532]
	mov	DWORD PTR [ecx+edx*4+72], eax

; 654  :                 TextureSets[set].tiles[tile].bits[res] = NULL;

	mov	ecx, DWORD PTR _set$[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+528]
	mov	edx, DWORD PTR _tile$[ebp]
	imul	edx, 144				; 00000090H
	add	edx, DWORD PTR [eax+ecx+20]
	mov	eax, DWORD PTR _res$[ebp]
	mov	DWORD PTR [edx+eax*4+60], 0
$LN3@Request:

; 655  :             }
; 656  :         }
; 657  :     }

	jmp	$LN5@Request
$LN10@Request:

; 658  : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?Request@TextureDB@@QAEXK@Z ENDP			; TextureDB::Request
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\terrtex.cpp
_TEXT	SEGMENT
$T2 = -48						; size = 4
$T3 = -44						; size = 4
$T4 = -40						; size = 4
$T5 = -36						; size = 4
_sl$ = -32						; size = 4
_r$6 = -28						; size = 4
_j$ = -24						; size = 4
_i$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Cleanup@TextureDB@@QAEXXZ PROC				; TextureDB::Cleanup
; _this$ = ecx

; 273  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Cleanup@TextureDB@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 274  :     int i, j;
; 275  : 
; 276  :     ShiAssert(IsReady());
; 277  :     ShiAssert(TextureSets);
; 278  : 
; 279  :     // sfr: lock texturedb for cleanup
; 280  :     F4ScopeLock sl(cs_textureList);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+552]
	push	ecx
	lea	ecx, DWORD PTR _sl$[ebp]
	call	??0F4ScopeLock@@QAE@PAUF4CSECTIONHANDLE@@@Z ; F4ScopeLock::F4ScopeLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 281  : 
; 282  : 
; 283  :     if (!TextureSets) 

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+528], 0
	jne	SHORT $LN12@Cleanup

; 284  : 		return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sl$[ebp]
	call	??1F4ScopeLock@@QAE@XZ			; F4ScopeLock::~F4ScopeLock
	jmp	$LN13@Cleanup
$LN12@Cleanup:

; 285  : 
; 286  : 
; 287  :     // Stop receiving time updates
; 288  :     TheTimeManager.ReleaseTimeUpdateCB(TimeUpdateCallback, this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	OFFSET ?TimeUpdateCallback@TextureDB@@KAXPAX@Z ; TextureDB::TimeUpdateCallback
	mov	ecx, OFFSET ?TheTimeManager@@3VTimeManager@@A ; TheTimeManager
	call	?ReleaseTimeUpdateCB@TimeManager@@QAEXP6AXPAX@Z0@Z ; TimeManager::ReleaseTimeUpdateCB

; 289  : 
; 290  : 
; 291  :     // Free the entire texture list (palettes will be freed as textures go away)
; 292  :     for (i = 0; i < numSets; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@Cleanup
$LN10@Cleanup:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN11@Cleanup:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+524]
	jge	$LN9@Cleanup

; 293  :     {
; 294  :         for (j = 0; j < TextureSets[i].numTiles; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN8@Cleanup
$LN7@Cleanup:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN8@Cleanup:
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR [ecx+edx+16]
	jge	$LN6@Cleanup

; 295  :         {
; 296  :             // Free the area descriptions
; 297  : #ifdef USE_SH_POOLS
; 298  :             if (TextureSets[i].tiles[j].Areas) MemFreePtr(TextureSets[i].tiles[j].Areas);
; 299  : 
; 300  :             TextureSets[i].tiles[j].Areas = NULL;
; 301  : 
; 302  :             if (TextureSets[i].tiles[j].Paths) MemFreePtr(TextureSets[i].tiles[j].Paths);
; 303  : 
; 304  :             TextureSets[i].tiles[j].Paths = NULL;
; 305  : #else
; 306  :             delete [] TextureSets[i].tiles[j].Areas;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+528]
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 144				; 00000090H
	mov	eax, DWORD PTR [eax+ecx+20]
	mov	ecx, DWORD PTR [eax+edx+24]
	mov	DWORD PTR $T5[ebp], ecx
	mov	edx, DWORD PTR $T5[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 307  :             TextureSets[i].tiles[j].Areas = NULL;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 144				; 00000090H
	mov	edx, DWORD PTR [edx+eax+20]
	mov	DWORD PTR [edx+ecx+24], 0

; 308  :             delete [] TextureSets[i].tiles[j].Paths;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 144				; 00000090H
	mov	edx, DWORD PTR [edx+eax+20]
	mov	eax, DWORD PTR [edx+ecx+32]
	mov	DWORD PTR $T4[ebp], eax
	mov	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 309  :             TextureSets[i].tiles[j].Paths = NULL;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 144				; 00000090H
	mov	ecx, DWORD PTR [ecx+edx+20]
	mov	DWORD PTR [ecx+eax+32], 0

; 310  : #endif
; 311  : 
; 312  :             // Free the texture data
; 313  :             for (int r = TEX_LEVELS - 1; r >= 0; r--)

	mov	DWORD PTR _r$6[ebp], 2
	jmp	SHORT $LN5@Cleanup
$LN4@Cleanup:
	mov	edx, DWORD PTR _r$6[ebp]
	sub	edx, 1
	mov	DWORD PTR _r$6[ebp], edx
$LN5@Cleanup:
	cmp	DWORD PTR _r$6[ebp], 0
	jl	$LN3@Cleanup

; 314  :             {
; 315  :                 if (TextureSets[i].tiles[j].handle[r])

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 144				; 00000090H
	add	ecx, DWORD PTR [edx+eax+20]
	mov	edx, DWORD PTR _r$6[ebp]
	cmp	DWORD PTR [ecx+edx*4+72], 0
	je	SHORT $LN2@Cleanup

; 316  :                     Deactivate(&TextureSets[i], &TextureSets[i].tiles[j], r);

	mov	eax, DWORD PTR _r$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+528]
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 144				; 00000090H
	add	edx, DWORD PTR [eax+ecx+20]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+528]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Deactivate@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H@Z ; TextureDB::Deactivate
$LN2@Cleanup:

; 317  : 
; 318  :                 if (TextureSets[i].tiles[j].bits[r])

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 144				; 00000090H
	add	eax, DWORD PTR [ecx+edx+20]
	mov	ecx, DWORD PTR _r$6[ebp]
	cmp	DWORD PTR [eax+ecx*4+60], 0
	je	SHORT $LN1@Cleanup

; 319  :                     Free(&TextureSets[i], &TextureSets[i].tiles[j], r);

	mov	edx, DWORD PTR _r$6[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 144				; 00000090H
	add	ecx, DWORD PTR [edx+eax+20]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+528]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@TextureDB@@IAEXPAUSetEntry@@PAUTileEntry@@H@Z ; TextureDB::Free
$LN1@Cleanup:

; 320  :             }

	jmp	$LN4@Cleanup
$LN3@Cleanup:

; 321  :         }

	jmp	$LN7@Cleanup
$LN6@Cleanup:

; 322  : 
; 323  : #ifdef USE_SH_POOLS
; 324  : 
; 325  :         if (TextureSets[i].tiles) MemFreePtr(TextureSets[i].tiles);
; 326  : 
; 327  : #else
; 328  :         delete [] TextureSets[i].tiles;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+528]
	mov	ecx, DWORD PTR [eax+ecx+20]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 329  : #endif
; 330  :         TextureSets[i].tiles = NULL;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	DWORD PTR [edx+eax+20], 0

; 331  :     }

	jmp	$LN10@Cleanup
$LN9@Cleanup:

; 332  : 
; 333  : #ifdef USE_SH_POOLS
; 334  : 
; 335  :     if (TextureSets) MemFreePtr(TextureSets);
; 336  : 
; 337  : #else
; 338  :     delete[] TextureSets;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 339  : #endif
; 340  :     TextureSets = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+528], 0

; 341  : 
; 342  :     // We no longer need our texture managment RC
; 343  :     private_rc = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+548], 0

; 344  : 
; 345  :     ShiAssert(ActiveTextureCount == 0);
; 346  :     ShiAssert(LoadedTextureCount == 0);
; 347  :     ShiAssert(LoadedSetCount == 0);
; 348  : 
; 349  : #ifdef USE_SH_POOLS
; 350  : 
; 351  :     if (gTexDBMemPool != NULL)
; 352  :     {
; 353  :         MemPoolFree(gTexDBMemPool);
; 354  :         gTexDBMemPool = NULL;
; 355  :     }
; 356  : 
; 357  : #endif
; 358  : 
; 359  :     // Release the sychronization objects we've been using
; 360  :     // DeleteCriticalSection(&cs_textureList);
; 361  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sl$[ebp]
	call	??1F4ScopeLock@@QAE@XZ			; F4ScopeLock::~F4ScopeLock
$LN13@Cleanup:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Cleanup@TextureDB@@QAEXXZ$0:
	lea	ecx, DWORD PTR _sl$[ebp]
	jmp	??1F4ScopeLock@@QAE@XZ			; F4ScopeLock::~F4ScopeLock
__ehhandler$?Cleanup@TextureDB@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Cleanup@TextureDB@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Cleanup@TextureDB@@QAEXXZ ENDP				; TextureDB::Cleanup
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\terrtex.h
;	COMDAT ?IsReady@TextureDB@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
?IsReady@TextureDB@@QAEHXZ PROC				; TextureDB::IsReady, COMDAT
; _this$ = ecx

; 94   : 	BOOL IsReady(void) { return (TextureSets != NULL); };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+528], 0
	je	SHORT $LN3@IsReady
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@IsReady
$LN3@IsReady:
	mov	DWORD PTR tv66[ebp], 0
$LN4@IsReady:
	mov	eax, DWORD PTR tv66[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsReady@TextureDB@@QAEHXZ ENDP				; TextureDB::IsReady
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\terrtex.cpp
_TEXT	SEGMENT
_sl$ = -4812						; size = 4
$T2 = -4808						; size = 4
$T3 = -4804						; size = 4
$T4 = -4800						; size = 4
$T5 = -4796						; size = 4
$T6 = -4792						; size = 4
_dataSize$ = -4788					; size = 4
_bytesRead$ = -4784					; size = 4
_k$7 = -4780						; size = 4
_listFile$ = -4776					; size = 4
_result$ = -4772					; size = 4
_j$ = -4768						; size = 4
_i$ = -4764						; size = 4
_this$ = -4760						; size = 4
_buffer$8 = -4756					; size = 580
_buffer$9 = -4176					; size = 580
_buffer$10 = -3596					; size = 580
_buffer$11 = -3016					; size = 580
_buffer$12 = -2436					; size = 580
_buffer$13 = -1856					; size = 580
_filename$ = -1276					; size = 260
_message$14 = -1016					; size = 120
_message$15 = -896					; size = 120
_message$16 = -776					; size = 120
_message$17 = -656					; size = 120
_message$18 = -536					; size = 120
_string$19 = -416					; size = 80
_string$20 = -336					; size = 80
_string$21 = -256					; size = 80
_string$22 = -176					; size = 80
_string$23 = -96					; size = 80
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_hrc$ = 8						; size = 4
_path$ = 12						; size = 4
?Setup@TextureDB@@QAEHPAVDXContext@@PBD@Z PROC		; TextureDB::Setup
; _this$ = ecx

; 60   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Setup@TextureDB@@QAEHPAVDXContext@@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, 4800				; 000012c0H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 61   :     char filename[MAX_PATH];
; 62   :     HANDLE listFile;
; 63   :     BOOL result;
; 64   :     DWORD bytesRead;
; 65   :     int dataSize = 0;

	mov	DWORD PTR _dataSize$[ebp], 0

; 66   :     int i = 0, j = 0;

	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _j$[ebp], 0

; 67   : 
; 68   : 
; 69   :     ShiAssert(hrc);
; 70   :     ShiAssert(path);
; 71   : 
; 72   :     // sfr: lock texture for setup
; 73   :     F4ScopeLock sl(cs_textureList);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+552]
	push	ecx
	lea	ecx, DWORD PTR _sl$[ebp]
	call	??0F4ScopeLock@@QAE@PAUF4CSECTIONHANDLE@@@Z ; F4ScopeLock::F4ScopeLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 74   : 
; 75   : #ifdef USE_SH_POOLS
; 76   : 
; 77   :     if (gTexDBMemPool == NULL)
; 78   :         gTexDBMemPool = MemPoolInit(0);
; 79   : 
; 80   : #endif
; 81   : 
; 82   :     // Store the texture path for future reference
; 83   :     if (strlen(path) + 1 >= sizeof(texturePath))

	mov	edx, DWORD PTR _path$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	add	eax, 1
	cmp	eax, 260				; 00000104H
	jb	SHORT $LN27@Setup

; 84   :         ShiError("Texture path name overflow!");

	push	OFFSET ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
	push	OFFSET ??_C@_0M@HFACBFJD@TerrTex?4cpp?$AA@
	push	84					; 00000054H
	push	OFFSET ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
	lea	eax, DWORD PTR _buffer$11[ebp]
	push	eax
	call	_sprintf
	add	esp, 20					; 00000014H
	push	0
	push	OFFSET ??_C@_0BM@LGBCNBPK@Texture?5path?5name?5overflow?$CB?$AA@
	lea	ecx, DWORD PTR _buffer$11[ebp]
	push	ecx
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	push	-1
	call	_exit
$LN27@Setup:

; 85   : 
; 86   :     strcpy(texturePath, path);

	mov	edx, DWORD PTR _path$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8

; 87   : 
; 88   :     if (texturePath[strlen(texturePath) - 1] != '\\')

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, BYTE PTR [edx+eax-1]
	cmp	eax, 92					; 0000005cH
	je	SHORT $LN26@Setup

; 89   :         strcat(texturePath, "\\");

	push	OFFSET ??_C@_01KICIPPFI@?2?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8
$LN26@Setup:

; 90   : 
; 91   :     sprintf(texturePathD, "%stexture\\", texturePath);

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	push	OFFSET ??_C@_0L@KMKLKCLL@?$CFstexture?2?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 260				; 00000104H
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 92   : 
; 93   :     // Store the rendering context to be used just for managing our textures
; 94   :     private_rc = hrc;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _hrc$[ebp]
	mov	DWORD PTR [ecx+548], edx

; 95   :     ShiAssert(private_rc != NULL);
; 96   : 
; 97   :     // Initialize data members to default values
; 98   :     overrideHandle = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+532], 0

; 99   :     numSets = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+524], 0

; 100  : 
; 101  : #ifdef _DEBUG
; 102  :     LoadedSetCount = 0;
; 103  :     LoadedTextureCount = 0;
; 104  :     ActiveTextureCount = 0;
; 105  : #endif
; 106  : 
; 107  :     // Initialize the lighting conditions and register for future time of day updates
; 108  :     TimeUpdateCallback(this);

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?TimeUpdateCallback@TextureDB@@KAXPAX@Z	; TextureDB::TimeUpdateCallback
	add	esp, 4

; 109  :     TheTimeManager.RegisterTimeUpdateCB(TimeUpdateCallback, this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	OFFSET ?TimeUpdateCallback@TextureDB@@KAXPAX@Z ; TextureDB::TimeUpdateCallback
	mov	ecx, OFFSET ?TheTimeManager@@3VTimeManager@@A ; TheTimeManager
	call	?RegisterTimeUpdateCB@TimeManager@@QAEXP6AXPAX@Z0@Z ; TimeManager::RegisterTimeUpdateCB

; 110  : 
; 111  :     // Create the synchronization objects we'll need
; 112  :     //InitializeCriticalSection(&cs_textureList);
; 113  : 
; 114  :     // Open the texture database description file
; 115  :     strcpy(filename, texturePath);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR _filename$[ebp]
	push	edx
	call	_strcpy
	add	esp, 8

; 116  :     strcat(filename, "Texture.BIN");

	push	OFFSET ??_C@_0M@ELCGCACE@Texture?4BIN?$AA@
	lea	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_strcat
	add	esp, 8

; 117  :     listFile = CreateFile_Open(filename, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);

	push	0
	push	128					; 00000080H
	push	3
	push	0
	push	1
	push	-2147483648				; 80000000H
	lea	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	call	?CreateFile_Open@@YAPAXPADKKPAU_SECURITY_ATTRIBUTES@@KKPAX@Z ; CreateFile_Open
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _listFile$[ebp], eax

; 118  : 
; 119  :     // Read the number of texture sets and tiles in the database.
; 120  :     result = ReadFile(listFile, &numSets, sizeof(numSets), &bytesRead, NULL);

	push	0
	lea	edx, DWORD PTR _bytesRead$[ebp]
	push	edx
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 524				; 0000020cH
	push	eax
	mov	ecx, DWORD PTR _listFile$[ebp]
	push	ecx
	call	DWORD PTR __imp__ReadFile@20
	mov	DWORD PTR _result$[ebp], eax

; 121  : 
; 122  :     if (result)

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN25@Setup

; 123  :         result = ReadFile(listFile, &totalTiles, sizeof(totalTiles), &bytesRead, NULL);

	push	0
	lea	edx, DWORD PTR _bytesRead$[ebp]
	push	edx
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 520				; 00000208H
	push	eax
	mov	ecx, DWORD PTR _listFile$[ebp]
	push	ecx
	call	DWORD PTR __imp__ReadFile@20
	mov	DWORD PTR _result$[ebp], eax
$LN25@Setup:

; 124  : 
; 125  :     if (!result)

	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN24@Setup

; 126  :     {
; 127  :         char string[80];
; 128  :         char message[120];
; 129  :         PutErrorString(string);

	push	0
	push	80					; 00000050H
	lea	edx, DWORD PTR _string$22[ebp]
	push	edx
	push	1024					; 00000400H
	call	DWORD PTR __imp__GetLastError@0
	push	eax
	push	0
	push	4096					; 00001000H
	call	DWORD PTR __imp__FormatMessageA@28

; 130  :         sprintf(message, "%s: Couldn'd read texture list.", string);

	lea	eax, DWORD PTR _string$22[ebp]
	push	eax
	push	OFFSET ??_C@_0CA@KDKMALDE@?$CFs?3?5Couldn?8d?5read?5texture?5list?4?$AA@
	lea	ecx, DWORD PTR _message$15[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 131  :         MessageBox(NULL, message, "Proceeding with Empty List", MB_OK);

	push	0
	push	OFFSET ??_C@_0BL@CKHFAODD@Proceeding?5with?5Empty?5List?$AA@
	lea	edx, DWORD PTR _message$15[ebp]
	push	edx
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 132  :         numSets = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+524], 0
$LN24@Setup:

; 133  :     }
; 134  : 
; 135  :     // Allocate memory for the texture set records.
; 136  : #ifdef USE_SH_POOLS
; 137  :     TextureSets = (SetEntry *)MemAllocPtr(gTexDBMemPool, sizeof(SetEntry) * numSets, 0) ;
; 138  : #else
; 139  :     TextureSets = new SetEntry[numSets];

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+524]
	mov	edx, 24					; 00000018H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [eax+528], ecx

; 140  : #endif
; 141  : 
; 142  :     if (!TextureSets)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+528], 0
	jne	SHORT $LN23@Setup

; 143  :         ShiError("Failed to allocate memory for the texture database.");

	push	OFFSET ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
	push	OFFSET ??_C@_0M@HFACBFJD@TerrTex?4cpp?$AA@
	push	143					; 0000008fH
	push	OFFSET ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
	lea	eax, DWORD PTR _buffer$13[ebp]
	push	eax
	call	_sprintf
	add	esp, 20					; 00000014H
	push	0
	push	OFFSET ??_C@_0DE@HKCLFLMC@Failed?5to?5allocate?5memory?5for?5th@
	lea	ecx, DWORD PTR _buffer$13[ebp]
	push	ecx
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	push	-1
	call	_exit
$LN23@Setup:

; 144  : 
; 145  :     // Read the descriptions for the sets.
; 146  :     for (i = 0; i < numSets; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN22@Setup
$LN21@Setup:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN22@Setup:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+524]
	jge	$LN20@Setup

; 147  :     {
; 148  :         // Read the description
; 149  :         result = ReadFile(listFile, &TextureSets[i].numTiles, sizeof(TextureSets[i].numTiles), &bytesRead, NULL);

	push	0
	lea	edx, DWORD PTR _bytesRead$[ebp]
	push	edx
	push	4
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	lea	eax, DWORD PTR [edx+eax+16]
	push	eax
	mov	ecx, DWORD PTR _listFile$[ebp]
	push	ecx
	call	DWORD PTR __imp__ReadFile@20
	mov	DWORD PTR _result$[ebp], eax

; 150  : 
; 151  :         if (result)

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN19@Setup

; 152  :             result = ReadFile(listFile, &TextureSets[i].terrainType, sizeof(TextureSets[i].terrainType), &bytesRead, NULL);

	push	0
	lea	edx, DWORD PTR _bytesRead$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	lea	eax, DWORD PTR [edx+eax+12]
	push	eax
	mov	ecx, DWORD PTR _listFile$[ebp]
	push	ecx
	call	DWORD PTR __imp__ReadFile@20
	mov	DWORD PTR _result$[ebp], eax
$LN19@Setup:

; 153  : 
; 154  :         if (!result)

	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN18@Setup

; 155  :         {
; 156  :             char string[80];
; 157  :             char message[120];
; 158  :             PutErrorString(string);

	push	0
	push	80					; 00000050H
	lea	edx, DWORD PTR _string$23[ebp]
	push	edx
	push	1024					; 00000400H
	call	DWORD PTR __imp__GetLastError@0
	push	eax
	push	0
	push	4096					; 00001000H
	call	DWORD PTR __imp__FormatMessageA@28

; 159  :             sprintf(message, "%s: Couldn't read set description - disk error?", string);

	lea	eax, DWORD PTR _string$23[ebp]
	push	eax
	push	OFFSET ??_C@_0DA@CGMFNAOK@?$CFs?3?5Couldn?8t?5read?5set?5descriptio@
	lea	ecx, DWORD PTR _message$17[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 160  :             ShiError(message);

	push	OFFSET ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
	push	OFFSET ??_C@_0M@HFACBFJD@TerrTex?4cpp?$AA@
	push	160					; 000000a0H
	push	OFFSET ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
	lea	edx, DWORD PTR _buffer$12[ebp]
	push	edx
	call	_sprintf
	add	esp, 20					; 00000014H
	push	0
	lea	eax, DWORD PTR _message$17[ebp]
	push	eax
	lea	ecx, DWORD PTR _buffer$12[ebp]
	push	ecx
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	push	-1
	call	_exit
$LN18@Setup:

; 161  :         }
; 162  : 
; 163  :         // Mark the set as unused
; 164  :         TextureSets[i].refCount  = 0;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	DWORD PTR [ecx+edx], 0

; 165  :         TextureSets[i].palette   = NULL;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	DWORD PTR [ecx+edx+4], 0

; 166  :         TextureSets[i].palHandle = NULL;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	DWORD PTR [ecx+edx+8], 0

; 167  : 
; 168  :         // Allocate memory for the tile headers in this set
; 169  :         if (TextureSets[i].numTiles > 0)

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	cmp	DWORD PTR [ecx+edx+16], 0
	jle	SHORT $LN17@Setup

; 170  :         {
; 171  : #ifdef USE_SH_POOLS
; 172  :             TextureSets[i].tiles = (TileEntry *)MemAllocPtr(gTexDBMemPool, sizeof(TileEntry) * TextureSets[i].numTiles, 0);
; 173  : #else
; 174  :             TextureSets[i].tiles = new TileEntry[TextureSets[i].numTiles];

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	xor	ebx, ebx
	mov	eax, DWORD PTR [ecx+edx+16]
	mov	edx, 144				; 00000090H
	mul	edx
	seto	bl
	neg	ebx
	or	ebx, eax
	push	ebx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+eax+20], ecx

; 175  : #endif
; 176  :             ShiAssert(TextureSets[i].tiles);
; 177  :         }
; 178  :         else

	jmp	SHORT $LN16@Setup
$LN17@Setup:

; 179  :             TextureSets[i].tiles = NULL;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	DWORD PTR [ecx+edx+20], 0
$LN16@Setup:

; 180  : 
; 181  :         // Read the descriptions for the tiles within the sets.
; 182  :         for (j = 0; j < TextureSets[i].numTiles; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN15@Setup
$LN14@Setup:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN15@Setup:
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [edx+eax+16]
	jge	$LN13@Setup

; 183  :         {
; 184  :             // Read the tile name and area and path counts
; 185  :             result = ReadFile(listFile, &TextureSets[i].tiles[j].filename, sizeof(TextureSets[i].tiles[j].filename), &bytesRead, NULL);

	push	0
	lea	edx, DWORD PTR _bytesRead$[ebp]
	push	edx
	push	20					; 00000014H
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 144				; 00000090H
	mov	edx, DWORD PTR [edx+eax+20]
	add	edx, ecx
	push	edx
	mov	eax, DWORD PTR _listFile$[ebp]
	push	eax
	call	DWORD PTR __imp__ReadFile@20
	mov	DWORD PTR _result$[ebp], eax

; 186  : 
; 187  :             if (result)

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN12@Setup

; 188  :                 result = ReadFile(listFile, &TextureSets[i].tiles[j].nAreas, sizeof(TextureSets[i].tiles[j].nAreas), &bytesRead, NULL);

	push	0
	lea	ecx, DWORD PTR _bytesRead$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 144				; 00000090H
	mov	ecx, DWORD PTR [ecx+edx+20]
	lea	edx, DWORD PTR [ecx+eax+20]
	push	edx
	mov	eax, DWORD PTR _listFile$[ebp]
	push	eax
	call	DWORD PTR __imp__ReadFile@20
	mov	DWORD PTR _result$[ebp], eax
$LN12@Setup:

; 189  : 
; 190  :             if (result)

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN11@Setup

; 191  :                 result = ReadFile(listFile, &TextureSets[i].tiles[j].nPaths, sizeof(TextureSets[i].tiles[j].nPaths), &bytesRead, NULL);

	push	0
	lea	ecx, DWORD PTR _bytesRead$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 144				; 00000090H
	mov	ecx, DWORD PTR [ecx+edx+20]
	lea	edx, DWORD PTR [ecx+eax+28]
	push	edx
	mov	eax, DWORD PTR _listFile$[ebp]
	push	eax
	call	DWORD PTR __imp__ReadFile@20
	mov	DWORD PTR _result$[ebp], eax
$LN11@Setup:

; 192  : 
; 193  :             if (!result)

	cmp	DWORD PTR _result$[ebp], 0
	jne	$LN10@Setup

; 194  :             {
; 195  :                 char string[80];
; 196  :                 char message[120];
; 197  :                 PutErrorString(string);

	push	0
	push	80					; 00000050H
	lea	ecx, DWORD PTR _string$21[ebp]
	push	ecx
	push	1024					; 00000400H
	call	DWORD PTR __imp__GetLastError@0
	push	eax
	push	0
	push	4096					; 00001000H
	call	DWORD PTR __imp__FormatMessageA@28

; 198  :                 sprintf(message, "%s: Couldn't read tile header - disk error?", string);

	lea	edx, DWORD PTR _string$21[ebp]
	push	edx
	push	OFFSET ??_C@_0CM@ENOKGICB@?$CFs?3?5Couldn?8t?5read?5tile?5header?5?9?5@
	lea	eax, DWORD PTR _message$18[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 199  :                 ShiError(message);

	push	OFFSET ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
	push	OFFSET ??_C@_0M@HFACBFJD@TerrTex?4cpp?$AA@
	push	199					; 000000c7H
	push	OFFSET ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
	lea	ecx, DWORD PTR _buffer$10[ebp]
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H
	push	0
	lea	edx, DWORD PTR _message$18[ebp]
	push	edx
	lea	eax, DWORD PTR _buffer$10[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	push	-1
	call	_exit
$LN10@Setup:

; 200  :             }
; 201  : 
; 202  :             // Start with this tile unused
; 203  :             for (int k = 0; k < TEX_LEVELS; k++)

	mov	DWORD PTR _k$7[ebp], 0
	jmp	SHORT $LN9@Setup
$LN8@Setup:
	mov	ecx, DWORD PTR _k$7[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$7[ebp], ecx
$LN9@Setup:
	cmp	DWORD PTR _k$7[ebp], 3
	jge	$LN7@Setup

; 204  :             {
; 205  :                 TextureSets[i].tiles[j].refCount[k] = 0;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 144				; 00000090H
	add	eax, DWORD PTR [ecx+edx+20]
	mov	ecx, DWORD PTR _k$7[ebp]
	mov	DWORD PTR [eax+ecx*4+132], 0

; 206  :                 TextureSets[i].tiles[j].bits[k] = NULL;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 144				; 00000090H
	add	eax, DWORD PTR [ecx+edx+20]
	mov	ecx, DWORD PTR _k$7[ebp]
	mov	DWORD PTR [eax+ecx*4+60], 0

; 207  :                 TextureSets[i].tiles[j].bitsN[k] = NULL;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 144				; 00000090H
	add	eax, DWORD PTR [ecx+edx+20]
	mov	ecx, DWORD PTR _k$7[ebp]
	mov	DWORD PTR [eax+ecx*4+108], 0

; 208  :                 TextureSets[i].tiles[j].handle[k] = NULL;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 144				; 00000090H
	add	eax, DWORD PTR [ecx+edx+20]
	mov	ecx, DWORD PTR _k$7[ebp]
	mov	DWORD PTR [eax+ecx*4+72], 0

; 209  :                 TextureSets[i].tiles[j].handleN[k] = NULL;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 144				; 00000090H
	add	eax, DWORD PTR [ecx+edx+20]
	mov	ecx, DWORD PTR _k$7[ebp]
	mov	DWORD PTR [eax+ecx*4+120], 0

; 210  :             }

	jmp	$LN8@Setup
$LN7@Setup:

; 211  : 
; 212  :             // Now read all the areas
; 213  :             if (TextureSets[i].tiles[j].nAreas == 0)

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 144				; 00000090H
	mov	ecx, DWORD PTR [ecx+edx+20]
	cmp	DWORD PTR [ecx+eax+20], 0
	jne	SHORT $LN6@Setup

; 214  :                 TextureSets[i].tiles[j].Areas = NULL;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 144				; 00000090H
	mov	ecx, DWORD PTR [ecx+edx+20]
	mov	DWORD PTR [ecx+eax+24], 0

; 215  :             else

	jmp	$LN5@Setup
$LN6@Setup:

; 216  :             {
; 217  :                 dataSize = TextureSets[i].tiles[j].nAreas * sizeof(TexArea);

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 144				; 00000090H
	mov	ecx, DWORD PTR [ecx+edx+20]
	mov	edx, DWORD PTR [ecx+eax+20]
	shl	edx, 4
	mov	DWORD PTR _dataSize$[ebp], edx

; 218  : 
; 219  : #ifdef USE_SH_POOLS
; 220  :                 TextureSets[i].tiles[j].Areas = (TexArea *)MemAllocPtr(gTexDBMemPool, sizeof(char) * dataSize, 0);
; 221  : #else
; 222  :                 TextureSets[i].tiles[j].Areas = (TexArea *)new char[dataSize];

	mov	eax, DWORD PTR _dataSize$[ebp]
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+528]
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 144				; 00000090H
	mov	eax, DWORD PTR [eax+ecx+20]
	mov	ecx, DWORD PTR $T5[ebp]
	mov	DWORD PTR [eax+edx+24], ecx

; 223  : #endif
; 224  :                 ShiAssert(TextureSets[i].tiles[j].Areas);
; 225  : 
; 226  :                 result = ReadFile(listFile, TextureSets[i].tiles[j].Areas, dataSize, &bytesRead, NULL);

	push	0
	lea	edx, DWORD PTR _bytesRead$[ebp]
	push	edx
	mov	eax, DWORD PTR _dataSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+528]
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 144				; 00000090H
	mov	eax, DWORD PTR [eax+ecx+20]
	mov	ecx, DWORD PTR [eax+edx+24]
	push	ecx
	mov	edx, DWORD PTR _listFile$[ebp]
	push	edx
	call	DWORD PTR __imp__ReadFile@20
	mov	DWORD PTR _result$[ebp], eax

; 227  : 
; 228  :                 if (!result)

	cmp	DWORD PTR _result$[ebp], 0
	jne	$LN5@Setup

; 229  :                 {
; 230  :                     char string[80];
; 231  :                     char message[120];
; 232  :                     PutErrorString(string);

	push	0
	push	80					; 00000050H
	lea	eax, DWORD PTR _string$19[ebp]
	push	eax
	push	1024					; 00000400H
	call	DWORD PTR __imp__GetLastError@0
	push	eax
	push	0
	push	4096					; 00001000H
	call	DWORD PTR __imp__FormatMessageA@28

; 233  :                     sprintf(message, "%s: Couldn't read tile areas - disk error?", string);

	lea	ecx, DWORD PTR _string$19[ebp]
	push	ecx
	push	OFFSET ??_C@_0CL@IDPOCIDB@?$CFs?3?5Couldn?8t?5read?5tile?5areas?5?9?5d@
	lea	edx, DWORD PTR _message$16[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 234  :                     ShiError(message);

	push	OFFSET ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
	push	OFFSET ??_C@_0M@HFACBFJD@TerrTex?4cpp?$AA@
	push	234					; 000000eaH
	push	OFFSET ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
	lea	eax, DWORD PTR _buffer$8[ebp]
	push	eax
	call	_sprintf
	add	esp, 20					; 00000014H
	push	0
	lea	ecx, DWORD PTR _message$16[ebp]
	push	ecx
	lea	edx, DWORD PTR _buffer$8[ebp]
	push	edx
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	push	-1
	call	_exit
$LN5@Setup:

; 235  :                 }
; 236  :             }
; 237  : 
; 238  :             // Now read all the paths
; 239  :             if (TextureSets[i].tiles[j].nPaths == 0)

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 144				; 00000090H
	mov	edx, DWORD PTR [edx+eax+20]
	cmp	DWORD PTR [edx+ecx+28], 0
	jne	SHORT $LN3@Setup

; 240  :                 TextureSets[i].tiles[j].Paths = NULL;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 144				; 00000090H
	mov	edx, DWORD PTR [edx+eax+20]
	mov	DWORD PTR [edx+ecx+32], 0

; 241  :             else

	jmp	$LN2@Setup
$LN3@Setup:

; 242  :             {
; 243  :                 dataSize = TextureSets[i].tiles[j].nPaths * sizeof(TexPath);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 144				; 00000090H
	mov	edx, DWORD PTR [edx+eax+20]
	mov	eax, DWORD PTR [edx+ecx+28]
	imul	eax, 24					; 00000018H
	mov	DWORD PTR _dataSize$[ebp], eax

; 244  : 
; 245  : #ifdef USE_SH_POOLS
; 246  :                 TextureSets[i].tiles[j].Paths = (TexPath *)MemAllocPtr(gTexDBMemPool, sizeof(char) * dataSize, 0);
; 247  : #else
; 248  :                 TextureSets[i].tiles[j].Paths = (TexPath *)new char[dataSize];

	mov	ecx, DWORD PTR _dataSize$[ebp]
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 144				; 00000090H
	mov	ecx, DWORD PTR [ecx+edx+20]
	mov	edx, DWORD PTR $T6[ebp]
	mov	DWORD PTR [ecx+eax+32], edx

; 249  : #endif
; 250  :                 ShiAssert(TextureSets[i].tiles[j].Paths);
; 251  : 
; 252  :                 result = ReadFile(listFile, TextureSets[i].tiles[j].Paths, dataSize, &bytesRead, NULL);

	push	0
	lea	eax, DWORD PTR _bytesRead$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dataSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 144				; 00000090H
	mov	ecx, DWORD PTR [ecx+edx+20]
	mov	edx, DWORD PTR [ecx+eax+32]
	push	edx
	mov	eax, DWORD PTR _listFile$[ebp]
	push	eax
	call	DWORD PTR __imp__ReadFile@20
	mov	DWORD PTR _result$[ebp], eax

; 253  : 
; 254  :                 if (!result)

	cmp	DWORD PTR _result$[ebp], 0
	jne	$LN2@Setup

; 255  :                 {
; 256  :                     char string[80];
; 257  :                     char message[120];
; 258  :                     PutErrorString(string);

	push	0
	push	80					; 00000050H
	lea	ecx, DWORD PTR _string$20[ebp]
	push	ecx
	push	1024					; 00000400H
	call	DWORD PTR __imp__GetLastError@0
	push	eax
	push	0
	push	4096					; 00001000H
	call	DWORD PTR __imp__FormatMessageA@28

; 259  :                     sprintf(message, "%s: Couldn't read tile paths - disk error?", string);

	lea	edx, DWORD PTR _string$20[ebp]
	push	edx
	push	OFFSET ??_C@_0CL@BGAMGLNF@?$CFs?3?5Couldn?8t?5read?5tile?5paths?5?9?5d@
	lea	eax, DWORD PTR _message$14[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 260  :                     ShiError(message);

	push	OFFSET ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
	push	OFFSET ??_C@_0M@HFACBFJD@TerrTex?4cpp?$AA@
	push	260					; 00000104H
	push	OFFSET ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
	lea	ecx, DWORD PTR _buffer$9[ebp]
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H
	push	0
	lea	edx, DWORD PTR _message$14[ebp]
	push	edx
	lea	eax, DWORD PTR _buffer$9[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	push	-1
	call	_exit
$LN2@Setup:

; 261  :                 }
; 262  :             }
; 263  : 
; 264  :         }

	jmp	$LN14@Setup
$LN13@Setup:

; 265  :     }

	jmp	$LN21@Setup
$LN20@Setup:

; 266  : 
; 267  :     CloseHandle(listFile);

	mov	ecx, DWORD PTR _listFile$[ebp]
	push	ecx
	call	DWORD PTR __imp__CloseHandle@4

; 268  : 
; 269  :     return TRUE;

	mov	DWORD PTR $T4[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sl$[ebp]
	call	??1F4ScopeLock@@QAE@XZ			; F4ScopeLock::~F4ScopeLock
	mov	eax, DWORD PTR $T4[ebp]
$LN29@Setup:

; 270  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Setup@TextureDB@@QAEHPAVDXContext@@PBD@Z$0:
	lea	ecx, DWORD PTR _sl$[ebp]
	jmp	??1F4ScopeLock@@QAE@XZ			; F4ScopeLock::~F4ScopeLock
__ehhandler$?Setup@TextureDB@@QAEHPAVDXContext@@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4808]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Setup@TextureDB@@QAEHPAVDXContext@@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Setup@TextureDB@@QAEHPAVDXContext@@PBD@Z ENDP		; TextureDB::Setup
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\terrtex.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1TextureDB@@QAE@XZ PROC				; TextureDB::~TextureDB
; _this$ = ecx

; 54   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 55   :     F4DestroyCriticalSection(cs_textureList);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+552]
	push	ecx
	call	_F4DestroyCriticalSection
	add	esp, 4

; 56   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1TextureDB@@QAE@XZ ENDP				; TextureDB::~TextureDB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\texture\terrtex.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0TextureDB@@QAE@XZ PROC				; TextureDB::TextureDB
; _this$ = ecx

; 50   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+528], 0
	push	OFFSET ??_C@_0BA@HDLLCJOI@texturedb?5mutex?$AA@
	call	_F4CreateCriticalSection
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+552], eax

; 51   : 
; 52   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0TextureDB@@QAE@XZ ENDP				; TextureDB::TextureDB
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GPaletteHandle@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GPaletteHandle@@QAEPAXI@Z PROC			; PaletteHandle::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1PaletteHandle@@QAE@XZ		; PaletteHandle::~PaletteHandle
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GPaletteHandle@@QAEPAXI@Z ENDP			; PaletteHandle::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GTextureHandle@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GTextureHandle@@QAEPAXI@Z PROC			; TextureHandle::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TextureHandle@@QAE@XZ		; TextureHandle::~TextureHandle
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTextureHandle@@QAEPAXI@Z ENDP			; TextureHandle::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\image.h
;	COMDAT ?ReadTextureImage@@YAHPAVCImageFileMemory@@@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
_i$ = -4						; size = 4
_fi$ = 8						; size = 4
?ReadTextureImage@@YAHPAVCImageFileMemory@@@Z PROC	; ReadTextureImage, COMDAT

; 179  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 180  : 	GLint	i;
; 181  : 	switch (fi -> imageType) {

	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR tv65[ebp], ecx
	mov	edx, DWORD PTR tv65[ebp]
	sub	edx, 1
	mov	DWORD PTR tv65[ebp], edx
	cmp	DWORD PTR tv65[ebp], 6
	ja	$LN1@ReadTextur
	mov	eax, DWORD PTR tv65[ebp]
	jmp	DWORD PTR $LN13@ReadTextur[eax*4]
$LN8@ReadTextur:

; 182  : 		case IMAGE_TYPE_GIF:
; 183  : 			i = UnpackGIF (fi);

	mov	ecx, DWORD PTR _fi$[ebp]
	push	ecx
	call	?UnpackGIF@@YAHPAVCImageFileMemory@@@Z	; UnpackGIF
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 184  : 			break;

	jmp	SHORT $LN9@ReadTextur
$LN7@ReadTextur:

; 185  : 		case IMAGE_TYPE_LBM:
; 186  : 			i = UnpackLBM (fi);

	mov	edx, DWORD PTR _fi$[ebp]
	push	edx
	call	?UnpackLBM@@YAHPAVCImageFileMemory@@@Z	; UnpackLBM
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 187  : 			break;

	jmp	SHORT $LN9@ReadTextur
$LN6@ReadTextur:

; 188  : 		case IMAGE_TYPE_PCX:
; 189  : 			i = UnpackPCX (fi);

	mov	eax, DWORD PTR _fi$[ebp]
	push	eax
	call	?UnpackPCX@@YAHPAVCImageFileMemory@@@Z	; UnpackPCX
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 190  : 			break;

	jmp	SHORT $LN9@ReadTextur
$LN5@ReadTextur:

; 191  : 		case IMAGE_TYPE_BMP:
; 192  : 			i = ReadBMP (fi);

	mov	ecx, DWORD PTR _fi$[ebp]
	push	ecx
	call	?ReadBMP@@YAHPAVCImageFileMemory@@@Z	; ReadBMP
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 193  : 			break;

	jmp	SHORT $LN9@ReadTextur
$LN4@ReadTextur:

; 194  : 		case IMAGE_TYPE_APL:
; 195  : 			i = ReadAPL (fi);

	mov	edx, DWORD PTR _fi$[ebp]
	push	edx
	call	?ReadAPL@@YAHPAVCImageFileMemory@@@Z	; ReadAPL
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 196  : 			break;

	jmp	SHORT $LN9@ReadTextur
$LN3@ReadTextur:

; 197  : 		case IMAGE_TYPE_TGA:
; 198  : 			i = ReadTGA (fi);

	mov	eax, DWORD PTR _fi$[ebp]
	push	eax
	call	?ReadTGA@@YAHPAVCImageFileMemory@@@Z	; ReadTGA
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 199  : 			break;

	jmp	SHORT $LN9@ReadTextur
$LN2@ReadTextur:

; 200  : 
; 201  : 		//JAM 22Sep03
; 202  : 		case IMAGE_TYPE_DDS:
; 203  : 			i = ReadDDS (fi);

	mov	ecx, DWORD PTR _fi$[ebp]
	push	ecx
	call	?ReadDDS@@YAHPAVCImageFileMemory@@@Z	; ReadDDS
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 204  : 			break;

	jmp	SHORT $LN9@ReadTextur
$LN1@ReadTextur:

; 205  : 		//JAM
; 206  : 
; 207  : 		default:
; 208  : 			i = NO_CODE;

	mov	DWORD PTR _i$[ebp], -1
$LN9@ReadTextur:

; 209  : 			break;
; 210  : 	}
; 211  : 	fi -> glCloseFileMem ();

	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glCloseFileMem@CFileMemory@@QAEXXZ	; CFileMemory::glCloseFileMem

; 212  : 	return i;

	mov	eax, DWORD PTR _i$[ebp]

; 213  : };

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@ReadTextur:
	DD	$LN8@ReadTextur
	DD	$LN7@ReadTextur
	DD	$LN6@ReadTextur
	DD	$LN5@ReadTextur
	DD	$LN4@ReadTextur
	DD	$LN3@ReadTextur
	DD	$LN2@ReadTextur
?ReadTextureImage@@YAHPAVCImageFileMemory@@@Z ENDP	; ReadTextureImage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\image.h
;	COMDAT ?CheckImageType@@YAHPBD@Z
_TEXT	SEGMENT
_i$ = -20						; size = 4
_ext$ = -16						; size = 10
__$ArrayPad$ = -4					; size = 4
_file$ = 8						; size = 4
?CheckImageType@@YAHPBD@Z PROC				; CheckImageType, COMDAT

; 149  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 150  : 	char	ext[10];
; 151  : 	GLint	i;
; 152  : 
; 153  : 	glGetFileExtension (file, ext);

	lea	eax, DWORD PTR _ext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	call	?glGetFileExtension@@YAXPBDPAD@Z	; glGetFileExtension
	add	esp, 8

; 154  : 	if (!strnicmp (ext, "GIF", 3)) 

	push	3
	push	OFFSET ??_C@_03BBABOKL@GIF?$AA@
	lea	edx, DWORD PTR _ext$[ebp]
	push	edx
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN14@CheckImage

; 155  : 		i = IMAGE_TYPE_GIF;

	mov	DWORD PTR _i$[ebp], 1
	jmp	$LN13@CheckImage
$LN14@CheckImage:

; 156  : 	else if (!strnicmp (ext,"LBM",3)) 

	push	3
	push	OFFSET ??_C@_03DJLAKPIA@LBM?$AA@
	lea	eax, DWORD PTR _ext$[ebp]
	push	eax
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN12@CheckImage

; 157  : 		i = IMAGE_TYPE_LBM;

	mov	DWORD PTR _i$[ebp], 2
	jmp	$LN13@CheckImage
$LN12@CheckImage:

; 158  : 	else if (!strnicmp (ext,"PCX",3)) 

	push	3
	push	OFFSET ??_C@_03BFAIMLIE@PCX?$AA@
	lea	ecx, DWORD PTR _ext$[ebp]
	push	ecx
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN10@CheckImage

; 159  : 		i = IMAGE_TYPE_PCX;

	mov	DWORD PTR _i$[ebp], 3
	jmp	$LN13@CheckImage
$LN10@CheckImage:

; 160  : 	else if (!strnicmp (ext,"BMP",3)) 

	push	3
	push	OFFSET ??_C@_03CNFPPDJC@BMP?$AA@
	lea	edx, DWORD PTR _ext$[ebp]
	push	edx
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN8@CheckImage

; 161  : 		i = IMAGE_TYPE_BMP;

	mov	DWORD PTR _i$[ebp], 4
	jmp	SHORT $LN13@CheckImage
$LN8@CheckImage:

; 162  : 	else if (!strnicmp (ext,"APL",3)) 

	push	3
	push	OFFSET ??_C@_03MNGDDBAC@APL?$AA@
	lea	eax, DWORD PTR _ext$[ebp]
	push	eax
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN6@CheckImage

; 163  : 		i = IMAGE_TYPE_APL;

	mov	DWORD PTR _i$[ebp], 5
	jmp	SHORT $LN13@CheckImage
$LN6@CheckImage:

; 164  : 	else if (!strnicmp (ext,"TGA",3)) 

	push	3
	push	OFFSET ??_C@_03GGDFNBH@TGA?$AA@
	lea	ecx, DWORD PTR _ext$[ebp]
	push	ecx
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN4@CheckImage

; 165  : 		i = IMAGE_TYPE_TGA;

	mov	DWORD PTR _i$[ebp], 6
	jmp	SHORT $LN13@CheckImage
$LN4@CheckImage:

; 166  : 
; 167  : 	//JAM 22Sep03
; 168  : 	else if (!strnicmp (ext,"DDS",3))

	push	3
	push	OFFSET ??_C@_03CMMIMEAC@DDS?$AA@
	lea	edx, DWORD PTR _ext$[ebp]
	push	edx
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN2@CheckImage

; 169  : 		i = IMAGE_TYPE_DDS;

	mov	DWORD PTR _i$[ebp], 7

; 170  : 	//JAM
; 171  : 
; 172  : 	else

	jmp	SHORT $LN13@CheckImage
$LN2@CheckImage:

; 173  : 		i = IMAGE_TYPE_UNKNOWN;

	mov	DWORD PTR _i$[ebp], -1
$LN13@CheckImage:

; 174  : 
; 175  : 	return	i;

	mov	eax, DWORD PTR _i$[ebp]

; 176  : };

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?CheckImageType@@YAHPBD@Z ENDP				; CheckImageType
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GCImageFileMemory@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCImageFileMemory@@UAEPAXI@Z PROC			; CImageFileMemory::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CImageFileMemory@@UAE@XZ		; CImageFileMemory::~CImageFileMemory
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCImageFileMemory@@UAEPAXI@Z ENDP			; CImageFileMemory::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\filemem.h
;	COMDAT ??1CImageFileMemory@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CImageFileMemory@@UAE@XZ PROC			; CImageFileMemory::~CImageFileMemory, COMDAT
; _this$ = ecx

; 42   : 	virtual ~CImageFileMemory() {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CImageFileMemory@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CFileMemory@@UAE@XZ			; CFileMemory::~CFileMemory
	mov	esp, ebp
	pop	ebp
	ret	0
??1CImageFileMemory@@UAE@XZ ENDP			; CImageFileMemory::~CImageFileMemory
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GCFileMemory@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCFileMemory@@UAEPAXI@Z PROC				; CFileMemory::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CFileMemory@@UAE@XZ			; CFileMemory::~CFileMemory
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCFileMemory@@UAEPAXI@Z ENDP				; CFileMemory::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\filemem.h
;	COMDAT ??1CFileMemory@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CFileMemory@@UAE@XZ PROC				; CFileMemory::~CFileMemory, COMDAT
; _this$ = ecx

; 14   : 	virtual ~CFileMemory()	{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CFileMemory@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1CFileIO@@UAE@XZ			; CFileIO::~CFileIO
	mov	esp, ebp
	pop	ebp
	ret	0
??1CFileMemory@@UAE@XZ ENDP				; CFileMemory::~CFileMemory
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GCFileIO@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCFileIO@@UAEPAXI@Z PROC				; CFileIO::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CFileIO@@UAE@XZ			; CFileIO::~CFileIO
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCFileIO@@UAEPAXI@Z ENDP				; CFileIO::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\fileio.h
;	COMDAT ??1CFileIO@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CFileIO@@UAE@XZ PROC					; CFileIO::~CFileIO, COMDAT
; _this$ = ecx

; 25   : 	virtual ~CFileIO () {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CFileIO@@6B@

; 26   : 		if (file != -1) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], -1
	je	SHORT $LN2@CFileIO

; 27   : 			closefile();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?closefile@CFileIO@@QAEXXZ		; CFileIO::closefile
$LN2@CFileIO:

; 28   : 		}
; 29   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??1CFileIO@@UAE@XZ ENDP					; CFileIO::~CFileIO
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\grinline.h
;	COMDAT ?glGetFileExtension@@YAXPBDPAD@Z
_TEXT	SEGMENT
_lastdot$ = -4						; size = 4
_file$ = 8						; size = 4
_ext$ = 12						; size = 4
?glGetFileExtension@@YAXPBDPAD@Z PROC			; glGetFileExtension, COMDAT

; 127  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 128  : #if 0
; 129  : 	char	prevchar, currchar, nextchar;
; 130  : 
; 131  : 	prevchar = '.';
; 132  : 	while (*file != 0) {
; 133  : 		currchar = *file++;
; 134  : 		nextchar = *file;
; 135  : 		if (currchar == '.' && 
; 136  : 			((prevchar != '.' && prevchar != '\\') || 
; 137  : 			 (nextchar != '.' && nextchar != '\\'))) break;
; 138  : 		prevchar = currchar;
; 139  : 	}
; 140  : #else
; 141  : 
; 142  : 
; 143  : // Visual C/C++ 2010 migration fix
; 144  : //pmvstrm this the change
; 145  : 	const char *lastdot;
; 146  : 
; 147  : //pmvstrm this is the original
; 148  : //char *lastdot;
; 149  : 
; 150  : 	lastdot = strrchr(file, '.');

	push	46					; 0000002eH
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_strrchr
	add	esp, 8
	mov	DWORD PTR _lastdot$[ebp], eax

; 151  : 
; 152  : 	if(lastdot) {

	cmp	DWORD PTR _lastdot$[ebp], 0
	je	SHORT $LN4@glGetFileE

; 153  : 		file = lastdot + 1;

	mov	ecx, DWORD PTR _lastdot$[ebp]
	add	ecx, 1
	mov	DWORD PTR _file$[ebp], ecx

; 154  : 	} else {

	jmp	SHORT $LN2@glGetFileE
$LN4@glGetFileE:

; 155  : 		file = file + strlen(file);

	mov	edx, DWORD PTR _file$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _file$[ebp]
	mov	DWORD PTR _file$[ebp], eax
$LN2@glGetFileE:

; 156  : 	}
; 157  : #endif
; 158  : 
; 159  : 	while (*file) *ext++ = *file++;

	mov	eax, DWORD PTR _file$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN1@glGetFileE
	mov	edx, DWORD PTR _ext$[ebp]
	mov	eax, DWORD PTR _file$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx], cl
	mov	edx, DWORD PTR _ext$[ebp]
	add	edx, 1
	mov	DWORD PTR _ext$[ebp], edx
	mov	eax, DWORD PTR _file$[ebp]
	add	eax, 1
	mov	DWORD PTR _file$[ebp], eax
	jmp	SHORT $LN2@glGetFileE
$LN1@glGetFileE:

; 160  : 	*ext = 0;

	mov	ecx, DWORD PTR _ext$[ebp]
	mov	BYTE PTR [ecx], 0

; 161  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?glGetFileExtension@@YAXPBDPAD@Z ENDP			; glGetFileExtension
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\grinline.h
;	COMDAT ?glReleaseMemory@@YAXPAX@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
_memptr$ = 8						; size = 4
?glReleaseMemory@@YAXPAX@Z PROC				; glReleaseMemory, COMDAT

; 32   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 33   : #ifdef USE_SH_POOLS
; 34   : 	if (memptr)
; 35   : 	{
; 36   : 		MemFreePtr( memptr );
; 37   : 	}
; 38   : #else
; 39   : 	if (memptr)

	cmp	DWORD PTR _memptr$[ebp], 0
	je	SHORT $LN2@glReleaseM

; 40   : 	{
; 41   : 		delete[] memptr;

	mov	eax, DWORD PTR _memptr$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@glReleaseM:

; 42   : 	}
; 43   : #endif
; 44   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?glReleaseMemory@@YAXPAX@Z ENDP				; glReleaseMemory
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\grinline.h
;	COMDAT ?glAllocateMemory@@YAPAXHH@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_buf$ = -4						; size = 4
_totalbytes$ = 8					; size = 4
_clearit$ = 12						; size = 4
?glAllocateMemory@@YAPAXHH@Z PROC			; glAllocateMemory, COMDAT

; 21   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 22   : #ifdef USE_SH_POOLS
; 23   : 	char *buf = (char *)MemAllocPtr( glMemPool, totalbytes, 0 );
; 24   : #else
; 25   : 	char *buf = new char[totalbytes];

	mov	eax, DWORD PTR _totalbytes$[ebp]
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR _buf$[ebp], ecx

; 26   : #endif
; 27   : 	if (buf && clearit) memset (buf, 0, totalbytes);

	cmp	DWORD PTR _buf$[ebp], 0
	je	SHORT $LN1@glAllocate
	cmp	DWORD PTR _clearit$[ebp], 0
	je	SHORT $LN1@glAllocate
	mov	edx, DWORD PTR _totalbytes$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
$LN1@glAllocate:

; 28   : 	return buf;

	mov	eax, DWORD PTR _buf$[ebp]

; 29   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?glAllocateMemory@@YAPAXHH@Z ENDP			; glAllocateMemory
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tod.h
;	COMDAT ?GetLightLevel@CTimeOfDay@@QAEMXZ
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
?GetLightLevel@CTimeOfDay@@QAEMXZ PROC			; CTimeOfDay::GetLightLevel, COMDAT
; _this$ = ecx

; 108  : 	float GetLightLevel()						{ return Ambient + Diffuse; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+220]
	addss	xmm0, DWORD PTR [ecx+224]
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLightLevel@CTimeOfDay@@QAEMXZ ENDP			; CTimeOfDay::GetLightLevel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tod.h
;	COMDAT ?GetTextureLightingColor@CTimeOfDay@@QAEXPAUTcolor@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rgb$ = 8						; size = 4
?GetTextureLightingColor@CTimeOfDay@@QAEXPAUTcolor@@@Z PROC ; CTimeOfDay::GetTextureLightingColor, COMDAT
; _this$ = ecx

; 94   : 	void GetTextureLightingColor(Tcolor *rgb)	{ *rgb = TextureLighting; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 196				; 000000c4H
	mov	ecx, DWORD PTR _rgb$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?GetTextureLightingColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ENDP ; CTimeOfDay::GetTextureLightingColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tod.h
;	COMDAT ?GetNVGmode@CTimeOfDay@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNVGmode@CTimeOfDay@@QAEHXZ PROC			; CTimeOfDay::GetNVGmode, COMDAT
; _this$ = ecx

; 69   : 	BOOL GetNVGmode()							{ return NVGmode; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+348]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNVGmode@CTimeOfDay@@QAEHXZ ENDP			; CTimeOfDay::GetNVGmode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?floor@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?floor@@YAMM@Z PROC					; floor, COMDAT

; 519  :         {return (floorf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_floorf
	add	esp, 4
	pop	ebp
	ret	0
?floor@@YAMM@Z ENDP					; floor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _floorf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_floorf	PROC						; COMDAT

; 416  :         {return ((float)floor((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_floor
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_floorf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z PROC	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ENDP	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ PROC	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CComBSTR@ATL@@QAE@XZ			; ATL::CComBSTR::~CComBSTR
	mov	esp, ebp
	pop	ebp
	ret	0
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ ENDP	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\atlmfc\include\atlcomcli.h
;	COMDAT ??1CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CComBSTR@ATL@@QAE@XZ PROC				; ATL::CComBSTR::~CComBSTR, COMDAT
; _this$ = ecx

; 1656 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1657 :     ::SysFreeString(m_str);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__SysFreeString@4

; 1658 : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1CComBSTR@ATL@@QAE@XZ ENDP				; ATL::CComBSTR::~CComBSTR
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Where$[ebp]
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
