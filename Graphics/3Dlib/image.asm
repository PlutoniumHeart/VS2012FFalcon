; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\Graphics\3Dlib\image.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?VT@?$CVarTypeInfo@_J@ATL@@2GB			; ATL::CVarTypeInfo<__int64>::VT
PUBLIC	?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ ; ATL::CVarTypeInfo<__int64>::pmField
PUBLIC	___pobjMapEntryFirst
PUBLIC	___pobjMapEntryLast
PUBLIC	?VT@?$CVarTypeInfo@PA_J@ATL@@2GB		; ATL::CVarTypeInfo<__int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ ; ATL::CVarTypeInfo<__int64 *>::pmField
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?VT@?$CVarTypeInfo@_K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned __int64>::VT
PUBLIC	??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@	; `string'
PUBLIC	?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64>::pmField
PUBLIC	??_C@_08PICKODJL@FileType?$AA@			; `string'
PUBLIC	??_C@_09JKPGEJCH@Interface?$AA@			; `string'
PUBLIC	??_C@_08PPIOJEA@Hardware?$AA@			; `string'
PUBLIC	?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA	; ATL::_pPerfRegFunc
PUBLIC	??_C@_04IHBFOLAC@Mime?$AA@			; `string'
PUBLIC	?_pPerfUnRegFunc@ATL@@3P6AJXZA			; ATL::_pPerfUnRegFunc
PUBLIC	??_C@_03DDIMFGBA@SAM?$AA@			; `string'
PUBLIC	?_AtlRegisterPerUser@ATL@@3_NA			; ATL::_AtlRegisterPerUser
PUBLIC	??_C@_08LOPHEHKG@SECURITY?$AA@			; `string'
PUBLIC	??_C@_06FDHFNJBJ@SYSTEM?$AA@			; `string'
PUBLIC	??_C@_08KEKAJNJI@Software?$AA@			; `string'
PUBLIC	??_C@_07KJLOKDKB@TypeLib?$AA@			; `string'
PUBLIC	?VT@?$CVarTypeInfo@PA_K@ATL@@2GB		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
PUBLIC	__GUID_00000000_0000_0000_c000_000000000046
PUBLIC	?VT@?$CVarTypeInfo@M@ATL@@2GB			; ATL::CVarTypeInfo<float>::VT
PUBLIC	?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ ; ATL::CVarTypeInfo<float>::pmField
PUBLIC	__GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
PUBLIC	?VT@?$CVarTypeInfo@PAM@ATL@@2GB			; ATL::CVarTypeInfo<float *>::VT
PUBLIC	__GUID_00020400_0000_0000_c000_000000000046
PUBLIC	?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ ; ATL::CVarTypeInfo<float *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@N@ATL@@2GB			; ATL::CVarTypeInfo<double>::VT
PUBLIC	?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ ; ATL::CVarTypeInfo<double>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAN@ATL@@2GB			; ATL::CVarTypeInfo<double *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ ; ATL::CVarTypeInfo<double *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB	; ATL::CVarTypeInfo<tagVARIANT *>::VT
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	__GUID_0002e012_0000_0000_c000_000000000046
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?VT@?$CVarTypeInfo@PA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ ; ATL::CVarTypeInfo<wchar_t *>::pmField
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t * *>::VT
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ ; ATL::CVarTypeInfo<wchar_t * *>::pmField
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown *>::VT
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown *>::pmField
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown * *>::pmField
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	__GUID_0000010c_0000_0000_c000_000000000046
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch *>::VT
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch *>::pmField
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	??_C@_05GIBEAPNE@CLSID?$AA@			; `string'
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	_IID_IAxWinHostWindow
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch * *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY>::VT
PUBLIC	?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY>::pmField
PUBLIC	??_C@_05PDIKPLII@AppID?$AA@			; `string'
PUBLIC	?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY *>::VT
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY *>::pmField
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?chDirSep@ATL@@3DB				; ATL::chDirSep
PUBLIC	?chRightBracket@ATL@@3DB			; ATL::chRightBracket
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?chLeftBracket@ATL@@3DB				; ATL::chLeftBracket
PUBLIC	?chQuote@ATL@@3DB				; ATL::chQuote
PUBLIC	?chEquals@ATL@@3DB				; ATL::chEquals
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?szStringVal@ATL@@3QBDB				; ATL::szStringVal
PUBLIC	??_C@_01CPLAODJH@S?$AA@				; `string'
PUBLIC	?multiszStringVal@ATL@@3QBDB			; ATL::multiszStringVal
PUBLIC	_IID_IAxWinHostWindowLic
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	??_C@_01PLPBNMEI@M?$AA@				; `string'
PUBLIC	?szDwordVal@ATL@@3QBDB				; ATL::szDwordVal
PUBLIC	??_C@_01CKDDGHAB@D?$AA@				; `string'
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?szBinaryVal@ATL@@3QBDB				; ATL::szBinaryVal
PUBLIC	??_C@_01HMGJMAIH@B?$AA@				; `string'
PUBLIC	?szValToken@ATL@@3QBDB				; ATL::szValToken
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	??_C@_03LAIAPFCB@Val?$AA@			; `string'
PUBLIC	?szForceRemove@ATL@@3QBDB			; ATL::szForceRemove
PUBLIC	??_C@_0M@DBGDLGLL@ForceRemove?$AA@		; `string'
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?szNoRemove@ATL@@3QBDB				; ATL::szNoRemove
PUBLIC	??_C@_08KAAPDIAN@NoRemove?$AA@			; `string'
PUBLIC	?szDelete@ATL@@3QBDB				; ATL::szDelete
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	??_C@_06JBKGCNBB@Delete?$AA@			; `string'
PUBLIC	?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA	; ATL::CComApartment::ATL_CREATE_OBJECT
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	_IID_IAxWinAmbientDispatch
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A ; ATL::_pAtlAutoThreadModule
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?m_bInitFailed@CAtlBaseModule@ATL@@2_NA		; ATL::CAtlBaseModule::m_bInitFailed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	__GUID_00000000_0000_0000_0000_000000000000
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?MAX_VALUE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_VALUE
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?rgszNeverDelete@CRegParser@ATL@@1QBQBDB	; ATL::CRegParser::rgszNeverDelete
PUBLIC	?cbNeverDelete@CRegParser@ATL@@1HB		; ATL::CRegParser::cbNeverDelete
PUBLIC	?MAX_TYPE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_TYPE
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	_IID_IAxWinAmbientDispatchEx
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	_IID_IInternalConnection
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	__GUID_1cf2b120_547d_101b_8e65_08002b2bd119
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?_pAtlModule@ATL@@3PAVCAtlModule@1@A		; ATL::_pAtlModule
PUBLIC	?m_libid@CAtlModule@ATL@@2U_GUID@@A		; ATL::CAtlModule::m_libid
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	__GUID_00000146_0000_0000_c000_000000000046
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?VT@?$CVarTypeInfo@D@ATL@@2GB			; ATL::CVarTypeInfo<char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ ; ATL::CVarTypeInfo<char>::pmField
PUBLIC	?VT@?$CVarTypeInfo@E@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ ; ATL::CVarTypeInfo<unsigned char>::pmField
PUBLIC	_CLSID_Registrar
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?_Min@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Min
PUBLIC	?VT@?$CVarTypeInfo@PAD@ATL@@2GB			; ATL::CVarTypeInfo<char *>::VT
PUBLIC	?_Max@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Max
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ ; ATL::CVarTypeInfo<char *>::pmField
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?_Min@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Min
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?_Max@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Max
PUBLIC	?VT@?$CVarTypeInfo@PAE@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char *>::VT
PUBLIC	__GUID_00000109_0000_0000_c000_000000000046
PUBLIC	?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ ; ATL::CVarTypeInfo<unsigned char *>::pmField
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?_Min@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Min
PUBLIC	__GUID_b196b284_bab4_101a_b69c_00aa00341d07
PUBLIC	?_Max@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Max
PUBLIC	?VT@?$CVarTypeInfo@F@ATL@@2GB			; ATL::CVarTypeInfo<short>::VT
PUBLIC	_IID_IRegistrar
PUBLIC	?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ ; ATL::CVarTypeInfo<short>::pmField
PUBLIC	?_Min@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Min
PUBLIC	?_Max@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Max
PUBLIC	?VT@?$CVarTypeInfo@PAF@ATL@@2GB			; ATL::CVarTypeInfo<short *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ ; ATL::CVarTypeInfo<short *>::pmField
PUBLIC	?_Min@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Min
PUBLIC	__GUID_00000001_0000_0000_c000_000000000046
PUBLIC	?_Max@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Max
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?VT@?$CVarTypeInfo@G@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short>::VT
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ ; ATL::CVarTypeInfo<unsigned short>::pmField
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	__GUID_00020401_0000_0000_c000_000000000046
PUBLIC	?_Min@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Min
PUBLIC	_LIBID_ATLLib
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?_Max@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Max
PUBLIC	__GUID_00020412_0000_0000_c000_000000000046
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?VT@?$CVarTypeInfo@PAG@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short *>::VT
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ ; ATL::CVarTypeInfo<unsigned short *>::pmField
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?VT@?$CVarTypeInfo@H@ATL@@2GB			; ATL::CVarTypeInfo<int>::VT
PUBLIC	?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ ; ATL::CVarTypeInfo<int>::pmField
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?VT@?$CVarTypeInfo@PAH@ATL@@2GB			; ATL::CVarTypeInfo<int *>::VT
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ ; ATL::CVarTypeInfo<int *>::pmField
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?VT@?$CVarTypeInfo@I@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int>::VT
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ ; ATL::CVarTypeInfo<unsigned int>::pmField
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?VT@?$CVarTypeInfo@PAI@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ ; ATL::CVarTypeInfo<unsigned int *>::pmField
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?VT@?$CVarTypeInfo@J@ATL@@2GB			; ATL::CVarTypeInfo<long>::VT
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ ; ATL::CVarTypeInfo<long>::pmField
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?_pModule@ATL@@3PAVCComModule@1@A		; ATL::_pModule
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?VT@?$CVarTypeInfo@PAJ@ATL@@2GB			; ATL::CVarTypeInfo<long *>::VT
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ ; ATL::CVarTypeInfo<long *>::pmField
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	_IID_IDocHostUIHandlerDispatch
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?VT@?$CVarTypeInfo@K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long>::VT
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ ; ATL::CVarTypeInfo<unsigned long>::pmField
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?VT@?$CVarTypeInfo@PAK@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long *>::VT
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ ; ATL::CVarTypeInfo<unsigned long *>::pmField
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA
_BSS	SEGMENT
?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA DD 01H DUP (?) ; ATL::_pPerfRegFunc
_BSS	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZA
_BSS	SEGMENT
?_pPerfUnRegFunc@ATL@@3P6AJXZA DD 01H DUP (?)		; ATL::_pPerfUnRegFunc
_BSS	ENDS
;	COMDAT ?_AtlRegisterPerUser@ATL@@3_NA
_BSS	SEGMENT
?_AtlRegisterPerUser@ATL@@3_NA DB 01H DUP (?)		; ATL::_AtlRegisterPerUser
_BSS	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_BSS	SEGMENT
?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA DD 01H DUP (?) ; ATL::CComApartment::ATL_CREATE_OBJECT
_BSS	ENDS
;	COMDAT ?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A
_BSS	SEGMENT
?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A DD 01H DUP (?) ; ATL::_pAtlAutoThreadModule
_BSS	ENDS
;	COMDAT ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA
_BSS	SEGMENT
?m_bInitFailed@CAtlBaseModule@ATL@@2_NA DB 01H DUP (?)	; ATL::CAtlBaseModule::m_bInitFailed
_BSS	ENDS
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_BSS	SEGMENT
?_pAtlModule@ATL@@3PAVCAtlModule@1@A DD 01H DUP (?)	; ATL::_pAtlModule
_BSS	ENDS
;	COMDAT ?m_libid@CAtlModule@ATL@@2U_GUID@@A
_BSS	SEGMENT
?m_libid@CAtlModule@ATL@@2U_GUID@@A DB 010H DUP (?)	; ATL::CAtlModule::m_libid
_BSS	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_BSS	SEGMENT
?_pModule@ATL@@3PAVCComModule@1@A DD 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long *>::pmField
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAK@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAK@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned long *>::VT
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long>::pmField
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@K@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned long>::VT
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
_IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ DD 08H ; ATL::CVarTypeInfo<long *>::pmField
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAJ@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAJ@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<long *>::VT
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ DD 08H ; ATL::CVarTypeInfo<long>::pmField
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@J@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<long>::VT
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAI@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAI@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned int *>::VT
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int>::pmField
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@I@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@I@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned int>::VT
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ DD 08H ; ATL::CVarTypeInfo<int *>::pmField
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAH@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAH@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<int *>::VT
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ DD 08H ; ATL::CVarTypeInfo<int>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@H@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@H@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<int>::VT
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short *>::pmField
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAG@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAG@ATL@@2GB DW 04012H		; ATL::CVarTypeInfo<unsigned short *>::VT
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT __GUID_00020412_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020412_0000_0000_c000_000000000046 DD 020412H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Max@?$AtlLimits@_K@ATL@@2_KB DQ ffffffffffffffffH	; ATL::AtlLimits<unsigned __int64>::_Max
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT
_LIBID_ATLLib DD 044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Min@?$AtlLimits@_K@ATL@@2_KB DQ 0000000000000000H	; ATL::AtlLimits<unsigned __int64>::_Min
CONST	ENDS
;	COMDAT __GUID_00020401_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020401_0000_0000_c000_000000000046 DD 020401H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short>::pmField
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@G@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@G@ATL@@2GB DW 012H			; ATL::CVarTypeInfo<unsigned short>::VT
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Max@?$AtlLimits@_J@ATL@@2_JB DQ 7fffffffffffffffH	; ATL::AtlLimits<__int64>::_Max
CONST	ENDS
;	COMDAT __GUID_00000001_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000001_0000_0000_c000_000000000046 DD 01H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Min@?$AtlLimits@_J@ATL@@2_JB DQ 8000000000000000H	; ATL::AtlLimits<__int64>::_Min
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ DD 08H ; ATL::CVarTypeInfo<short *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAF@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAF@ATL@@2GB DW 04002H		; ATL::CVarTypeInfo<short *>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Max@?$AtlLimits@K@ATL@@2KB DD 0ffffffffH		; ATL::AtlLimits<unsigned long>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Min@?$AtlLimits@K@ATL@@2KB DD 00H			; ATL::AtlLimits<unsigned long>::_Min
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ DD 08H ; ATL::CVarTypeInfo<short>::pmField
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT
_IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@F@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@F@ATL@@2GB DW 02H			; ATL::CVarTypeInfo<short>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Max@?$AtlLimits@J@ATL@@2JB DD 07fffffffH		; ATL::AtlLimits<long>::_Max
CONST	ENDS
;	COMDAT __GUID_b196b284_bab4_101a_b69c_00aa00341d07
CONST	SEGMENT
__GUID_b196b284_bab4_101a_b69c_00aa00341d07 DD 0b196b284H
	DW	0bab4H
	DW	0101aH
	DB	0b6H
	DB	09cH
	DB	00H
	DB	0aaH
	DB	00H
	DB	034H
	DB	01dH
	DB	07H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Min@?$AtlLimits@J@ATL@@2JB DD 080000000H		; ATL::AtlLimits<long>::_Min
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT __GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
CONST	SEGMENT
__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713 DD 07fd52380H
	DW	04e07H
	DW	0101bH
	DB	0aeH
	DB	02dH
	DB	08H
	DB	00H
	DB	02bH
	DB	02eH
	DB	0c7H
	DB	013H
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char *>::pmField
CONST	ENDS
;	COMDAT __GUID_00000109_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000109_0000_0000_c000_000000000046 DD 0109H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAE@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAE@ATL@@2GB DW 04011H		; ATL::CVarTypeInfo<unsigned char *>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Max@?$AtlLimits@I@ATL@@2IB DD 0ffffffffH		; ATL::AtlLimits<unsigned int>::_Max
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Min@?$AtlLimits@I@ATL@@2IB DD 00H			; ATL::AtlLimits<unsigned int>::_Min
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ DD 08H ; ATL::CVarTypeInfo<char *>::pmField
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Max@?$AtlLimits@H@ATL@@2HB DD 07fffffffH		; ATL::AtlLimits<int>::_Max
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAD@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAD@ATL@@2GB DW 04010H		; ATL::CVarTypeInfo<char *>::VT
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Min@?$AtlLimits@H@ATL@@2HB DD 080000000H		; ATL::AtlLimits<int>::_Min
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT
_CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@E@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@E@ATL@@2GB DW 011H			; ATL::CVarTypeInfo<unsigned char>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ DD 08H ; ATL::CVarTypeInfo<char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@D@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@D@ATL@@2GB DW 010H			; ATL::CVarTypeInfo<char>::VT
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT __GUID_00000146_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000146_0000_0000_c000_000000000046 DD 0146H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT __GUID_1cf2b120_547d_101b_8e65_08002b2bd119
CONST	SEGMENT
__GUID_1cf2b120_547d_101b_8e65_08002b2bd119 DD 01cf2b120H
	DW	0547dH
	DW	0101bH
	DB	08eH
	DB	065H
	DB	08H
	DB	00H
	DB	02bH
	DB	02bH
	DB	0d1H
	DB	019H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT
_IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatchEx
CONST	SEGMENT
_IID_IAxWinAmbientDispatchEx DD 0b2d0778bH
	DW	0ac99H
	DW	04c58H
	DB	0a5H
	DB	0c8H
	DB	0e7H
	DB	072H
	DB	04eH
	DB	053H
	DB	016H
	DB	0b5H
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT __GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
CONST	SEGMENT
__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352 DD 0fc4801a3H
	DW	02ba9H
	DW	011cfH
	DB	0a2H
	DB	029H
	DB	00H
	DB	0aaH
	DB	00H
	DB	03dH
	DB	073H
	DB	052H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?MAX_TYPE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_TYPE@CRegParser@ATL@@1HB DD 01000H			; ATL::CRegParser::MAX_TYPE
CONST	ENDS
;	COMDAT ?cbNeverDelete@CRegParser@ATL@@1HB
CONST	SEGMENT
?cbNeverDelete@CRegParser@ATL@@1HB DD 0cH		; ATL::CRegParser::cbNeverDelete
CONST	ENDS
;	COMDAT ?rgszNeverDelete@CRegParser@ATL@@1QBQBDB
CONST	SEGMENT
?rgszNeverDelete@CRegParser@ATL@@1QBQBDB DD FLAT:??_C@_05PDIKPLII@AppID?$AA@ ; ATL::CRegParser::rgszNeverDelete
	DD	FLAT:??_C@_05GIBEAPNE@CLSID?$AA@
	DD	FLAT:??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
	DD	FLAT:??_C@_08PICKODJL@FileType?$AA@
	DD	FLAT:??_C@_09JKPGEJCH@Interface?$AA@
	DD	FLAT:??_C@_08PPIOJEA@Hardware?$AA@
	DD	FLAT:??_C@_04IHBFOLAC@Mime?$AA@
	DD	FLAT:??_C@_03DDIMFGBA@SAM?$AA@
	DD	FLAT:??_C@_08LOPHEHKG@SECURITY?$AA@
	DD	FLAT:??_C@_06FDHFNJBJ@SYSTEM?$AA@
	DD	FLAT:??_C@_08KEKAJNJI@Software?$AA@
	DD	FLAT:??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?MAX_VALUE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_VALUE@CRegParser@ATL@@1HB DD 01000H		; ATL::CRegParser::MAX_VALUE
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
CONST	SEGMENT
__GUID_00000000_0000_0000_0000_000000000000 DD 00H
	DW	00H
	DW	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT
_IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ??_C@_06JBKGCNBB@Delete?$AA@
CONST	SEGMENT
??_C@_06JBKGCNBB@Delete?$AA@ DB 'Delete', 00H		; `string'
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?szDelete@ATL@@3QBDB
CONST	SEGMENT
?szDelete@ATL@@3QBDB DD FLAT:??_C@_06JBKGCNBB@Delete?$AA@ ; ATL::szDelete
CONST	ENDS
;	COMDAT ??_C@_08KAAPDIAN@NoRemove?$AA@
CONST	SEGMENT
??_C@_08KAAPDIAN@NoRemove?$AA@ DB 'NoRemove', 00H	; `string'
CONST	ENDS
;	COMDAT ?szNoRemove@ATL@@3QBDB
CONST	SEGMENT
?szNoRemove@ATL@@3QBDB DD FLAT:??_C@_08KAAPDIAN@NoRemove?$AA@ ; ATL::szNoRemove
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ??_C@_0M@DBGDLGLL@ForceRemove?$AA@
CONST	SEGMENT
??_C@_0M@DBGDLGLL@ForceRemove?$AA@ DB 'ForceRemove', 00H ; `string'
CONST	ENDS
;	COMDAT ?szForceRemove@ATL@@3QBDB
CONST	SEGMENT
?szForceRemove@ATL@@3QBDB DD FLAT:??_C@_0M@DBGDLGLL@ForceRemove?$AA@ ; ATL::szForceRemove
CONST	ENDS
;	COMDAT ??_C@_03LAIAPFCB@Val?$AA@
CONST	SEGMENT
??_C@_03LAIAPFCB@Val?$AA@ DB 'Val', 00H			; `string'
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?szValToken@ATL@@3QBDB
CONST	SEGMENT
?szValToken@ATL@@3QBDB DD FLAT:??_C@_03LAIAPFCB@Val?$AA@ ; ATL::szValToken
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B?$AA@
CONST	SEGMENT
??_C@_01HMGJMAIH@B?$AA@ DB 'B', 00H			; `string'
CONST	ENDS
;	COMDAT ?szBinaryVal@ATL@@3QBDB
CONST	SEGMENT
?szBinaryVal@ATL@@3QBDB DD FLAT:??_C@_01HMGJMAIH@B?$AA@	; ATL::szBinaryVal
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D?$AA@
CONST	SEGMENT
??_C@_01CKDDGHAB@D?$AA@ DB 'D', 00H			; `string'
CONST	ENDS
;	COMDAT ?szDwordVal@ATL@@3QBDB
CONST	SEGMENT
?szDwordVal@ATL@@3QBDB DD FLAT:??_C@_01CKDDGHAB@D?$AA@	; ATL::szDwordVal
CONST	ENDS
;	COMDAT ??_C@_01PLPBNMEI@M?$AA@
CONST	SEGMENT
??_C@_01PLPBNMEI@M?$AA@ DB 'M', 00H			; `string'
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindowLic
CONST	SEGMENT
_IID_IAxWinHostWindowLic DD 03935bda8H
	DW	04ed9H
	DW	0495cH
	DB	086H
	DB	050H
	DB	0e0H
	DB	01fH
	DB	0c1H
	DB	0e3H
	DB	08aH
	DB	04bH
CONST	ENDS
;	COMDAT ?multiszStringVal@ATL@@3QBDB
CONST	SEGMENT
?multiszStringVal@ATL@@3QBDB DD FLAT:??_C@_01PLPBNMEI@M?$AA@ ; ATL::multiszStringVal
CONST	ENDS
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT
??_C@_01CPLAODJH@S?$AA@ DB 'S', 00H			; `string'
CONST	ENDS
;	COMDAT ?szStringVal@ATL@@3QBDB
CONST	SEGMENT
?szStringVal@ATL@@3QBDB DD FLAT:??_C@_01CPLAODJH@S?$AA@	; ATL::szStringVal
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?chEquals@ATL@@3DB
CONST	SEGMENT
?chEquals@ATL@@3DB DB 03dH				; ATL::chEquals
CONST	ENDS
;	COMDAT ?chQuote@ATL@@3DB
CONST	SEGMENT
?chQuote@ATL@@3DB DB 027H				; ATL::chQuote
CONST	ENDS
;	COMDAT ?chLeftBracket@ATL@@3DB
CONST	SEGMENT
?chLeftBracket@ATL@@3DB DB 07bH				; ATL::chLeftBracket
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?chRightBracket@ATL@@3DB
CONST	SEGMENT
?chRightBracket@ATL@@3DB DB 07dH			; ATL::chRightBracket
CONST	ENDS
;	COMDAT ?chDirSep@ATL@@3DB
CONST	SEGMENT
?chDirSep@ATL@@3DB DB 05cH				; ATL::chDirSep
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY *>::pmField
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB DW 04006H	; ATL::CVarTypeInfo<tagCY *>::VT
CONST	ENDS
;	COMDAT ??_C@_05PDIKPLII@AppID?$AA@
CONST	SEGMENT
??_C@_05PDIKPLII@AppID?$AA@ DB 'AppID', 00H		; `string'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB DW 06H		; ATL::CVarTypeInfo<tagCY>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB DW 04009H	; ATL::CVarTypeInfo<IDispatch * *>::VT
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT
_IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ??_C@_05GIBEAPNE@CLSID?$AA@
CONST	SEGMENT
??_C@_05GIBEAPNE@CLSID?$AA@ DB 'CLSID', 00H		; `string'
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch *>::pmField
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB DW 09H	; ATL::CVarTypeInfo<IDispatch *>::VT
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT __GUID_0000010c_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_0000010c_0000_0000_c000_000000000046 DD 010cH
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB DW 0400dH	; ATL::CVarTypeInfo<IUnknown * *>::VT
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown *>::pmField
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB DW 0dH	; ATL::CVarTypeInfo<IUnknown *>::VT
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t * *>::pmField
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB DW 04008H		; ATL::CVarTypeInfo<wchar_t * *>::VT
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_W@ATL@@2GB DW 08H			; ATL::CVarTypeInfo<wchar_t *>::VT
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT __GUID_0002e012_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_0002e012_0000_0000_c000_000000000046 DD 02e012H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB DW 0400cH	; ATL::CVarTypeInfo<tagVARIANT *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ DD 08H ; ATL::CVarTypeInfo<double *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAN@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAN@ATL@@2GB DW 04005H		; ATL::CVarTypeInfo<double *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ DD 08H ; ATL::CVarTypeInfo<double>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@N@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@N@ATL@@2GB DW 05H			; ATL::CVarTypeInfo<double>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ DD 08H ; ATL::CVarTypeInfo<float *>::pmField
CONST	ENDS
;	COMDAT __GUID_00020400_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020400_0000_0000_c000_000000000046 DD 020400H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAM@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAM@ATL@@2GB DW 04004H		; ATL::CVarTypeInfo<float *>::VT
CONST	ENDS
;	COMDAT __GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
CONST	SEGMENT
__GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851 DD 0a6bc3ac0H
	DW	0dbaaH
	DW	011ceH
	DB	09dH
	DB	0e3H
	DB	00H
	DB	0aaH
	DB	00H
	DB	04bH
	DB	0b8H
	DB	051H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ DD 08H ; ATL::CVarTypeInfo<float>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@M@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@M@ATL@@2GB DW 04H			; ATL::CVarTypeInfo<float>::VT
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000000_0000_0000_c000_000000000046 DD 00H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_K@ATL@@2GB DW 04015H		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
CONST	ENDS
;	COMDAT ??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	SEGMENT
??_C@_07KJLOKDKB@TypeLib?$AA@ DB 'TypeLib', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KEKAJNJI@Software?$AA@
CONST	SEGMENT
??_C@_08KEKAJNJI@Software?$AA@ DB 'Software', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDHFNJBJ@SYSTEM?$AA@
CONST	SEGMENT
??_C@_06FDHFNJBJ@SYSTEM?$AA@ DB 'SYSTEM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LOPHEHKG@SECURITY?$AA@
CONST	SEGMENT
??_C@_08LOPHEHKG@SECURITY?$AA@ DB 'SECURITY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03DDIMFGBA@SAM?$AA@
CONST	SEGMENT
??_C@_03DDIMFGBA@SAM?$AA@ DB 'SAM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IHBFOLAC@Mime?$AA@
CONST	SEGMENT
??_C@_04IHBFOLAC@Mime?$AA@ DB 'Mime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPIOJEA@Hardware?$AA@
CONST	SEGMENT
??_C@_08PPIOJEA@Hardware?$AA@ DB 'Hardware', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JKPGEJCH@Interface?$AA@
CONST	SEGMENT
??_C@_09JKPGEJCH@Interface?$AA@ DB 'Interface', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PICKODJL@FileType?$AA@
CONST	SEGMENT
??_C@_08PICKODJL@FileType?$AA@ DB 'FileType', 00H	; `string'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64>::pmField
CONST	ENDS
;	COMDAT ??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
CONST	SEGMENT
??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@ DB 'Component Categories', 00H ; `string'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_K@ATL@@2GB DW 015H			; ATL::CVarTypeInfo<unsigned __int64>::VT
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_J@ATL@@2GB DW 04014H		; ATL::CVarTypeInfo<__int64 *>::VT
CONST	ENDS
;	COMDAT ___pobjMapEntryLast
ATL$__z	SEGMENT
___pobjMapEntryLast DD 00H
ATL$__z	ENDS
;	COMDAT ___pobjMapEntryFirst
ATL$__a	SEGMENT
___pobjMapEntryFirst DD 00H
ATL$__a	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_J@ATL@@2GB DW 014H			; ATL::CVarTypeInfo<__int64>::VT
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??1CComBSTR@ATL@@QAE@XZ				; ATL::CComBSTR::~CComBSTR
PUBLIC	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
PUBLIC	??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?glAllocateMemory@@YAPAXHH@Z			; glAllocateMemory
PUBLIC	?glReleaseMemory@@YAXPAX@Z			; glReleaseMemory
PUBLIC	?ConvertImage@@YAPAEPAUGLImageInfo@@HPAI@Z	; ConvertImage
PUBLIC	?UnpackGIF@@YAHPAVCImageFileMemory@@@Z		; UnpackGIF
PUBLIC	?UnpackLBM@@YAHPAVCImageFileMemory@@@Z		; UnpackLBM
PUBLIC	?UnpackPCX@@YAHPAVCImageFileMemory@@@Z		; UnpackPCX
PUBLIC	?ReadBMP@@YAHPAVCImageFileMemory@@@Z		; ReadBMP
PUBLIC	?ReadAPL@@YAHPAVCImageFileMemory@@@Z		; ReadAPL
PUBLIC	?ReadTGA@@YAHPAVCImageFileMemory@@@Z		; ReadTGA
PUBLIC	?ReadDDS@@YAHPAVCImageFileMemory@@@Z		; ReadDDS
PUBLIC	?WritePCX@@YAHHPAUGLImageInfo@@@Z		; WritePCX
PUBLIC	?GIF_UnpackImage@@YAHHPAVCImageFileMemory@@H@Z	; GIF_UnpackImage
PUBLIC	?GIF_SkipExtension@@YAXPAVCImageFileMemory@@@Z	; GIF_SkipExtension
PUBLIC	?ReadLBMColorMap@@YAPAKPAVCImageFileMemory@@@Z	; ReadLBMColorMap
PUBLIC	?ReadLBMBody@@YAPAEPAVCImageFileMemory@@PAULBM_BMHD@@H@Z ; ReadLBMBody
PUBLIC	?motr2intl@@YAHH@Z				; motr2intl
PUBLIC	?motr2inti@@YAHH@Z				; motr2inti
PUBLIC	?WriteAPL@@YAHHPAUGLImageInfo@@@Z		; WriteAPL
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_C@_03BBABOKL@GIF?$AA@			; `string'
PUBLIC	??_C@_04NNBFGNKO@PBM?5?$AA@			; `string'
PUBLIC	??_C@_04JIAMNFFC@BMHD?$AA@			; `string'
PUBLIC	??_C@_04IEBDBADI@CMAP?$AA@			; `string'
PUBLIC	??_C@_04MEHDIIKB@BODY?$AA@			; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_memcmp:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	__imp__SysFreeString@4:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	_write:PROC
EXTRN	?glReadCharMem@CFileMemory@@QAEIXZ:PROC		; CFileMemory::glReadCharMem
EXTRN	?glReadMem@CFileMemory@@QAEHPAXH@Z:PROC		; CFileMemory::glReadMem
EXTRN	?glSetFilePosMem@CFileMemory@@QAEHHH@Z:PROC	; CFileMemory::glSetFilePosMem
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__chkstk:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ?magic@?1??WriteAPL@@YAHHPAUGLImageInfo@@@Z@4KB
CONST	SEGMENT
?magic@?1??WriteAPL@@YAHHPAUGLImageInfo@@@Z@4KB DD 030870H ; `WriteAPL'::`2'::magic
CONST	ENDS
;	COMDAT ??_C@_04MEHDIIKB@BODY?$AA@
CONST	SEGMENT
??_C@_04MEHDIIKB@BODY?$AA@ DB 'BODY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IEBDBADI@CMAP?$AA@
CONST	SEGMENT
??_C@_04IEBDBADI@CMAP?$AA@ DB 'CMAP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JIAMNFFC@BMHD?$AA@
CONST	SEGMENT
??_C@_04JIAMNFFC@BMHD?$AA@ DB 'BMHD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NNBFGNKO@PBM?5?$AA@
CONST	SEGMENT
??_C@_04NNBFGNKO@PBM?5?$AA@ DB 'PBM ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03BBABOKL@GIF?$AA@
CONST	SEGMENT
??_C@_03BBABOKL@GIF?$AA@ DB 'GIF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\image.cpp
_TEXT	SEGMENT
_result$ = -4						; size = 4
_fileHandle$ = 8					; size = 4
_image$ = 12						; size = 4
?WriteAPL@@YAHHPAUGLImageInfo@@@Z PROC			; WriteAPL

; 1010 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1011 : 	int					result;
; 1012 : 	static const UInt32	magic = 0x030870;
; 1013 : 
; 1014 : 	// Write the magic number and the width and height to the file
; 1015 : 	result = write( fileHandle, &magic, sizeof(magic) );

	push	4
	push	OFFSET ?magic@?1??WriteAPL@@YAHHPAUGLImageInfo@@@Z@4KB
	mov	eax, DWORD PTR _fileHandle$[ebp]
	push	eax
	call	_write
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax

; 1016 : 	ShiAssert( result == sizeof(magic) );
; 1017 : 	result = write( fileHandle, &image->width, sizeof(image->width) );

	push	4
	mov	ecx, DWORD PTR _image$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fileHandle$[ebp]
	push	edx
	call	_write
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax

; 1018 : 	ShiAssert( result == sizeof(image->width) );
; 1019 : 	result = write( fileHandle, &image->height, sizeof(image->height) );

	push	4
	mov	eax, DWORD PTR _image$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _fileHandle$[ebp]
	push	ecx
	call	_write
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax

; 1020 : 	ShiAssert( result == sizeof(image->height) );
; 1021 : 
; 1022 : 	// Write the palette data
; 1023 : 	result = write( fileHandle, image->palette, 1024 );

	push	1024					; 00000400H
	mov	edx, DWORD PTR _image$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _fileHandle$[ebp]
	push	ecx
	call	_write
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax

; 1024 : 	ShiAssert( result == 1024 );
; 1025 : 
; 1026 : 	// Write the image data
; 1027 : 	result = write( fileHandle, image->image, image->width * image->height );

	mov	edx, DWORD PTR _image$[ebp]
	mov	eax, DWORD PTR _image$[ebp]
	mov	ecx, DWORD PTR [edx]
	imul	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _image$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _fileHandle$[ebp]
	push	ecx
	call	_write
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax

; 1028 : 	ShiAssert( result == image->width * image->height );
; 1029 : 
; 1030 : 	return (GOOD_WRITE);

	xor	eax, eax

; 1031 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?WriteAPL@@YAHHPAUGLImageInfo@@@Z ENDP			; WriteAPL
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\image.h
;	COMDAT ?motr2inti@@YAHH@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?motr2inti@@YAHH@Z PROC					; motr2inti, COMDAT

; 222  : {

	push	ebp
	mov	ebp, esp

; 223  : 	return(((n & 0xff00) >> 8) | ((n & 0x00ff) << 8));

	mov	eax, DWORD PTR _n$[ebp]
	and	eax, 65280				; 0000ff00H
	sar	eax, 8
	mov	ecx, DWORD PTR _n$[ebp]
	and	ecx, 255				; 000000ffH
	shl	ecx, 8
	or	eax, ecx

; 224  : }

	pop	ebp
	ret	0
?motr2inti@@YAHH@Z ENDP					; motr2inti
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\image.h
;	COMDAT ?motr2intl@@YAHH@Z
_TEXT	SEGMENT
_l$ = 8							; size = 4
?motr2intl@@YAHH@Z PROC					; motr2intl, COMDAT

; 216  : {

	push	ebp
	mov	ebp, esp

; 217  : 	return(((l & 0xff000000L) >> 24) + ((l & 0x00ff0000L) >> 8) +
; 218  : 		   ((l & 0x0000ff00L) << 8) +   ((l & 0x000000ffL) << 24));

	mov	eax, DWORD PTR _l$[ebp]
	and	eax, -16777216				; ff000000H
	shr	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _l$[ebp]
	and	ecx, 16711680				; 00ff0000H
	sar	ecx, 8
	add	eax, ecx
	mov	edx, DWORD PTR _l$[ebp]
	and	edx, 65280				; 0000ff00H
	shl	edx, 8
	add	eax, edx
	mov	ecx, DWORD PTR _l$[ebp]
	and	ecx, 255				; 000000ffH
	shl	ecx, 24					; 00000018H
	add	eax, ecx

; 219  : }

	pop	ebp
	ret	0
?motr2intl@@YAHH@Z ENDP					; motr2intl
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\image.cpp
_TEXT	SEGMENT
tv210 = -4244						; size = 4
tv218 = -4240						; size = 4
_header$ = -4236					; size = 4
_p$1 = -4232						; size = 4
_BODY$ = -4228						; size = 4
_LBMBody$ = -4224					; size = 4
_bytes$ = -4220						; size = 4
_i$ = -4216						; size = 4
_offset$ = -4212					; size = 4
_line$2 = -4208						; size = 4
_m$3 = -4204						; size = 4
_lpLine$ = -4200					; size = 4
_l$4 = -4196						; size = 4
_lpBmp$ = -4192						; size = 4
_size$ = -4188						; size = 4
_c$5 = -4184						; size = 4
_j$6 = -4180						; size = 4
_n$7 = -4176						; size = 4
_imageSize$ = -4172					; size = 4
_k$8 = -4168						; size = 4
_masktable$9 = -4164					; size = 32
_bittable$10 = -4132					; size = 32
_linebuffer$ = -4100					; size = 4096
__$ArrayPad$ = -4					; size = 4
_fi$ = 8						; size = 4
_lpHeader$ = 12						; size = 4
_doIFF$ = 16						; size = 4
?ReadLBMBody@@YAPAEPAVCImageFileMemory@@PAULBM_BMHD@@H@Z PROC ; ReadLBMBody

; 722  : {

	push	ebp
	mov	ebp, esp
	mov	eax, 4244				; 00001094H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 723  : 	GLbyte  linebuffer[4096];
; 724  : 	GLint	BODY;
; 725  : 	GLint	size;
; 726  : 	GLint	imageSize;
; 727  : 	GLint	offset;
; 728  : 	GLint	bytes, i;
; 729  : 	GLbyte	header [4];
; 730  : 	GLbyte 	*lpLine;
; 731  : 	GLubyte	*lpBmp;
; 732  : 	GLubyte *LBMBody;
; 733  : 
; 734  : 	BODY = 0;

	mov	DWORD PTR _BODY$[ebp], 0

; 735  : 	fi->glSetFilePosMem (12L, SEEK_SET );         // Jump to first Chunk

	push	0
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glSetFilePosMem@CFileMemory@@QAEHHH@Z	; CFileMemory::glSetFilePosMem
$LN36@ReadLBMBod:

; 736  : 	do      {
; 737  : 		fi->glReadMem ( (GLubyte *) header, 4);

	push	4
	lea	eax, DWORD PTR _header$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem

; 738  : 		fi->glReadMem ( (GLubyte *) &size, 4 );

	push	4
	lea	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem

; 739  : 		size = motr2intl ( size );

	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	call	?motr2intl@@YAHH@Z			; motr2intl
	add	esp, 4
	mov	DWORD PTR _size$[ebp], eax

; 740  : 		if (memcmp ( (GLubyte *) header, (GLubyte *)  "BODY", 4)) {

	push	4
	push	OFFSET ??_C@_04MEHDIIKB@BODY?$AA@
	lea	eax, DWORD PTR _header$[ebp]
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN33@ReadLBMBod

; 741  : 			if (size & 1)   size++;                 // All offsets on an even boundary                      

	mov	ecx, DWORD PTR _size$[ebp]
	and	ecx, 1
	je	SHORT $LN32@ReadLBMBod
	mov	edx, DWORD PTR _size$[ebp]
	add	edx, 1
	mov	DWORD PTR _size$[ebp], edx
$LN32@ReadLBMBod:

; 742  : 			fi->glSetFilePosMem (size, SEEK_CUR );

	push	1
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glSetFilePosMem@CFileMemory@@QAEHHH@Z	; CFileMemory::glSetFilePosMem
	jmp	SHORT $LN35@ReadLBMBod
$LN33@ReadLBMBod:

; 743  : 		}
; 744  : 		else BODY = 1;

	mov	DWORD PTR _BODY$[ebp], 1
$LN35@ReadLBMBod:

; 745  : 	} while (!BODY);

	cmp	DWORD PTR _BODY$[ebp], 0
	je	$LN36@ReadLBMBod

; 746  : 
; 747  : 	if (lpHeader->masking == 1)

	mov	ecx, DWORD PTR _lpHeader$[ebp]
	movsx	edx, BYTE PTR [ecx+9]
	cmp	edx, 1
	jne	SHORT $LN30@ReadLBMBod

; 748  : 		bytes = ((fi->image.width + 7) / 8) * (lpHeader->nPlanes + 1);

	mov	eax, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR [eax+32]
	add	eax, 7
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	ecx, DWORD PTR _lpHeader$[ebp]
	movsx	edx, BYTE PTR [ecx+8]
	add	edx, 1
	imul	eax, edx
	mov	DWORD PTR _bytes$[ebp], eax

; 749  : 	else

	jmp	SHORT $LN29@ReadLBMBod
$LN30@ReadLBMBod:

; 750  : 		bytes = ((fi->image.width + 7) / 8) * lpHeader->nPlanes;

	mov	eax, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR [eax+32]
	add	eax, 7
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	ecx, DWORD PTR _lpHeader$[ebp]
	movsx	edx, BYTE PTR [ecx+8]
	imul	eax, edx
	mov	DWORD PTR _bytes$[ebp], eax
$LN29@ReadLBMBod:

; 751  : 
; 752  : //      Buffer to hold uncompressed data without mask info
; 753  : 	imageSize =   ((fi->image.width + 7) / 8);

	mov	eax, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR [eax+32]
	add	eax, 7
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _imageSize$[ebp], eax

; 754  : 
; 755  : 	if (lpHeader->nPlanes <= 4) imageSize *= lpHeader->nPlanes ;

	mov	ecx, DWORD PTR _lpHeader$[ebp]
	movsx	edx, BYTE PTR [ecx+8]
	cmp	edx, 4
	jg	SHORT $LN28@ReadLBMBod
	mov	eax, DWORD PTR _lpHeader$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	imul	ecx, DWORD PTR _imageSize$[ebp]
	mov	DWORD PTR _imageSize$[ebp], ecx
	jmp	SHORT $LN27@ReadLBMBod
$LN28@ReadLBMBod:

; 756  : 	else if (lpHeader->nPlanes <= 8) imageSize <<= 3;

	mov	edx, DWORD PTR _lpHeader$[ebp]
	movsx	eax, BYTE PTR [edx+8]
	cmp	eax, 8
	jg	SHORT $LN27@ReadLBMBod
	mov	ecx, DWORD PTR _imageSize$[ebp]
	shl	ecx, 3
	mov	DWORD PTR _imageSize$[ebp], ecx
$LN27@ReadLBMBod:

; 757  : 	offset = fi->image.width;

	mov	edx, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _offset$[ebp], eax

; 758  : 	offset = imageSize;             //      Set the offset to equal the number of bytes

	mov	ecx, DWORD PTR _imageSize$[ebp]
	mov	DWORD PTR _offset$[ebp], ecx

; 759  : 	imageSize *= fi->image.height ;

	mov	edx, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR _imageSize$[ebp]
	imul	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _imageSize$[ebp], eax

; 760  : 	LBMBody = (GLubyte *) glAllocateMemory ( imageSize, 0 );

	push	0
	mov	ecx, DWORD PTR _imageSize$[ebp]
	push	ecx
	call	?glAllocateMemory@@YAPAXHH@Z		; glAllocateMemory
	add	esp, 8
	mov	DWORD PTR _LBMBody$[ebp], eax

; 761  : 	lpLine = linebuffer;

	lea	edx, DWORD PTR _linebuffer$[ebp]
	mov	DWORD PTR _lpLine$[ebp], edx

; 762  : 	lpBmp = LBMBody;

	mov	eax, DWORD PTR _LBMBody$[ebp]
	mov	DWORD PTR _lpBmp$[ebp], eax

; 763  : 	for (i=0; i<fi->image.height; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN25@ReadLBMBod
$LN24@ReadLBMBod:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN25@ReadLBMBod:
	mov	edx, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+36]
	jge	$LN23@ReadLBMBod

; 764  : 		if (lpHeader->compression == 0)

	mov	ecx, DWORD PTR _lpHeader$[ebp]
	movsx	edx, BYTE PTR [ecx+10]
	test	edx, edx
	jne	SHORT $LN22@ReadLBMBod

; 765  : 			fi->glReadMem ( lpLine, bytes );

	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lpLine$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem

; 766  : 		else {

	jmp	$LN21@ReadLBMBod
$LN22@ReadLBMBod:

; 767  : 			GLbyte 	*p;
; 768  : 			GLint 	c, j, n;
; 769  : 			p = lpLine;

	mov	edx, DWORD PTR _lpLine$[ebp]
	mov	DWORD PTR _p$1[ebp], edx

; 770  : 			n = 0;

	mov	DWORD PTR _n$7[ebp], 0
$LN20@ReadLBMBod:

; 771  : 			do {
; 772  : 				c = fi->glReadCharMem () & 0xff;

	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadCharMem@CFileMemory@@QAEIXZ	; CFileMemory::glReadCharMem
	and	eax, 255				; 000000ffH
	mov	DWORD PTR _c$5[ebp], eax

; 773  : 				if (c & 0x80) {

	mov	eax, DWORD PTR _c$5[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN17@ReadLBMBod

; 774  : 					if ( c != 0x80 ) {

	cmp	DWORD PTR _c$5[ebp], 128		; 00000080H
	je	SHORT $LN16@ReadLBMBod

; 775  : 						j = ((~c) & 0xff ) + 2;

	mov	ecx, DWORD PTR _c$5[ebp]
	not	ecx
	and	ecx, 255				; 000000ffH
	add	ecx, 2
	mov	DWORD PTR _j$6[ebp], ecx

; 776  : 						c = fi->glReadCharMem( );

	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadCharMem@CFileMemory@@QAEIXZ	; CFileMemory::glReadCharMem
	mov	DWORD PTR _c$5[ebp], eax
$LN15@ReadLBMBod:

; 777  : 						while (j--) p[n++] = (GLubyte) c;

	mov	edx, DWORD PTR _j$6[ebp]
	mov	DWORD PTR tv210[ebp], edx
	mov	eax, DWORD PTR _j$6[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$6[ebp], eax
	cmp	DWORD PTR tv210[ebp], 0
	je	SHORT $LN16@ReadLBMBod
	mov	ecx, DWORD PTR _p$1[ebp]
	add	ecx, DWORD PTR _n$7[ebp]
	mov	dl, BYTE PTR _c$5[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _n$7[ebp]
	add	eax, 1
	mov	DWORD PTR _n$7[ebp], eax
	jmp	SHORT $LN15@ReadLBMBod
$LN16@ReadLBMBod:

; 778  : 					}
; 779  : 				}
; 780  : 				else {

	jmp	SHORT $LN19@ReadLBMBod
$LN17@ReadLBMBod:

; 781  : 					j = ( c & 0xff ) + 1;

	mov	ecx, DWORD PTR _c$5[ebp]
	and	ecx, 255				; 000000ffH
	add	ecx, 1
	mov	DWORD PTR _j$6[ebp], ecx
$LN12@ReadLBMBod:

; 782  : 					while (j--) 

	mov	edx, DWORD PTR _j$6[ebp]
	mov	DWORD PTR tv218[ebp], edx
	mov	eax, DWORD PTR _j$6[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$6[ebp], eax
	cmp	DWORD PTR tv218[ebp], 0
	je	SHORT $LN19@ReadLBMBod

; 783  : 						p[n++] = (GLubyte) fi->glReadCharMem();

	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadCharMem@CFileMemory@@QAEIXZ	; CFileMemory::glReadCharMem
	mov	ecx, DWORD PTR _p$1[ebp]
	add	ecx, DWORD PTR _n$7[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _n$7[ebp]
	add	edx, 1
	mov	DWORD PTR _n$7[ebp], edx
	jmp	SHORT $LN12@ReadLBMBod
$LN19@ReadLBMBod:

; 784  : 				}
; 785  : 			} while ( n < bytes );

	mov	eax, DWORD PTR _n$7[ebp]
	cmp	eax, DWORD PTR _bytes$[ebp]
	jl	$LN20@ReadLBMBod
$LN21@ReadLBMBod:

; 786  : 		}
; 787  : 
; 788  : 		if ( doIFF )    // Old format, don't unleave

	cmp	DWORD PTR _doIFF$[ebp], 0
	je	SHORT $LN10@ReadLBMBod

; 789  : 			memcpy ( lpBmp, lpLine, (size_t) offset );

	mov	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpLine$[ebp]
	push	edx
	mov	eax, DWORD PTR _lpBmp$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 790  : 		else {

	jmp	$LN9@ReadLBMBod
$LN10@ReadLBMBod:

; 791  : GLint	masktable[8] = {0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01};

	mov	DWORD PTR _masktable$9[ebp], 128	; 00000080H
	mov	DWORD PTR _masktable$9[ebp+4], 64	; 00000040H
	mov	DWORD PTR _masktable$9[ebp+8], 32	; 00000020H
	mov	DWORD PTR _masktable$9[ebp+12], 16	; 00000010H
	mov	DWORD PTR _masktable$9[ebp+16], 8
	mov	DWORD PTR _masktable$9[ebp+20], 4
	mov	DWORD PTR _masktable$9[ebp+24], 2
	mov	DWORD PTR _masktable$9[ebp+28], 1

; 792  : GLint  	bittable[8]  = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};

	mov	DWORD PTR _bittable$10[ebp], 1
	mov	DWORD PTR _bittable$10[ebp+4], 2
	mov	DWORD PTR _bittable$10[ebp+8], 4
	mov	DWORD PTR _bittable$10[ebp+12], 8
	mov	DWORD PTR _bittable$10[ebp+16], 16	; 00000010H
	mov	DWORD PTR _bittable$10[ebp+20], 32	; 00000020H
	mov	DWORD PTR _bittable$10[ebp+24], 64	; 00000040H
	mov	DWORD PTR _bittable$10[ebp+28], 128	; 00000080H

; 793  : GLint 	k, l, m;
; 794  : GLbyte	*line;
; 795  : 
; 796  : 			m = fi->image.width >> 3;

	mov	ecx, DWORD PTR _fi$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	sar	edx, 3
	mov	DWORD PTR _m$3[ebp], edx

; 797  : 			if (fi->image.width & 0x07) m++;

	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	and	ecx, 7
	je	SHORT $LN8@ReadLBMBod
	mov	edx, DWORD PTR _m$3[ebp]
	add	edx, 1
	mov	DWORD PTR _m$3[ebp], edx
$LN8@ReadLBMBod:

; 798  : 			for (k=0; k<fi->image.width; k++) {

	mov	DWORD PTR _k$8[ebp], 0
	jmp	SHORT $LN7@ReadLBMBod
$LN6@ReadLBMBod:
	mov	eax, DWORD PTR _k$8[ebp]
	add	eax, 1
	mov	DWORD PTR _k$8[ebp], eax
$LN7@ReadLBMBod:
	mov	ecx, DWORD PTR _fi$[ebp]
	mov	edx, DWORD PTR _k$8[ebp]
	cmp	edx, DWORD PTR [ecx+32]
	jge	$LN9@ReadLBMBod

; 799  : 				line = lpLine;

	mov	eax, DWORD PTR _lpLine$[ebp]
	mov	DWORD PTR _line$2[ebp], eax

; 800  : 				lpBmp[k] = 0;

	mov	ecx, DWORD PTR _lpBmp$[ebp]
	add	ecx, DWORD PTR _k$8[ebp]
	mov	BYTE PTR [ecx], 0

; 801  : 				for (l=0; l<lpHeader->nPlanes; l++) {

	mov	DWORD PTR _l$4[ebp], 0
	jmp	SHORT $LN4@ReadLBMBod
$LN3@ReadLBMBod:
	mov	edx, DWORD PTR _l$4[ebp]
	add	edx, 1
	mov	DWORD PTR _l$4[ebp], edx
$LN4@ReadLBMBod:
	mov	eax, DWORD PTR _lpHeader$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	DWORD PTR _l$4[ebp], ecx
	jge	SHORT $LN2@ReadLBMBod

; 802  : 					if (line[k>>3] & masktable[k & 0x0007]) 

	mov	edx, DWORD PTR _k$8[ebp]
	sar	edx, 3
	mov	eax, DWORD PTR _line$2[ebp]
	movsx	ecx, BYTE PTR [eax+edx]
	mov	edx, DWORD PTR _k$8[ebp]
	and	edx, 7
	and	ecx, DWORD PTR _masktable$9[ebp+edx*4]
	je	SHORT $LN1@ReadLBMBod

; 803  : 					lpBmp[k] |= bittable[l];

	mov	eax, DWORD PTR _lpBmp$[ebp]
	add	eax, DWORD PTR _k$8[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _l$4[ebp]
	or	ecx, DWORD PTR _bittable$10[ebp+edx*4]
	mov	eax, DWORD PTR _lpBmp$[ebp]
	add	eax, DWORD PTR _k$8[ebp]
	mov	BYTE PTR [eax], cl
$LN1@ReadLBMBod:

; 804  : 					line += m;

	mov	ecx, DWORD PTR _line$2[ebp]
	add	ecx, DWORD PTR _m$3[ebp]
	mov	DWORD PTR _line$2[ebp], ecx

; 805  : 				}

	jmp	$LN3@ReadLBMBod
$LN2@ReadLBMBod:

; 806  : 			}

	jmp	$LN6@ReadLBMBod
$LN9@ReadLBMBod:

; 807  : 		}
; 808  : 		lpBmp += offset;

	mov	edx, DWORD PTR _lpBmp$[ebp]
	add	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _lpBmp$[ebp], edx

; 809  : 	}

	jmp	$LN24@ReadLBMBod
$LN23@ReadLBMBod:

; 810  : 	return LBMBody;

	mov	eax, DWORD PTR _LBMBody$[ebp]

; 811  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ReadLBMBody@@YAPAEPAVCImageFileMemory@@PAULBM_BMHD@@H@Z ENDP ; ReadLBMBody
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\image.cpp
_TEXT	SEGMENT
_palStop$ = -800					; size = 4
_header$ = -796						; size = 4
_CMAP$ = -792						; size = 4
_palOut$ = -788						; size = 4
_finalPalette$ = -784					; size = 4
_palIn$ = -780						; size = 4
_size$ = -776						; size = 4
_LBMPalette$ = -772					; size = 768
__$ArrayPad$ = -4					; size = 4
_fi$ = 8						; size = 4
?ReadLBMColorMap@@YAPAKPAVCImageFileMemory@@@Z PROC	; ReadLBMColorMap

; 682  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 800				; 00000320H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 683  : 	GLint	CMAP;
; 684  : 	GLint 	size;
; 685  : 	GLubyte	header [4];
; 686  : 	GLubyte	LBMPalette[768];
; 687  : 	GLubyte	*palIn;
; 688  : 	GLulong	*finalPalette;
; 689  : 	GLulong	*palOut, *palStop;
; 690  : 
; 691  : 	CMAP = 0;

	mov	DWORD PTR _CMAP$[ebp], 0

; 692  : 	fi->glSetFilePosMem (12L, SEEK_SET ); // Jump to the first Chunk

	push	0
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glSetFilePosMem@CFileMemory@@QAEHHH@Z	; CFileMemory::glSetFilePosMem
$LN9@ReadLBMCol:

; 693  : 	do      {
; 694  : 		fi->glReadMem ( header, 4 );

	push	4
	lea	eax, DWORD PTR _header$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem

; 695  : 		fi->glReadMem ( (GLubyte *) &size, 4 );

	push	4
	lea	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem

; 696  : 		size = motr2intl ( size );

	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	call	?motr2intl@@YAHH@Z			; motr2intl
	add	esp, 4
	mov	DWORD PTR _size$[ebp], eax

; 697  : 		if (memcmp ( header, (GLubyte *) "CMAP", 4)) {

	push	4
	push	OFFSET ??_C@_04IEBDBADI@CMAP?$AA@
	lea	eax, DWORD PTR _header$[ebp]
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN6@ReadLBMCol

; 698  : 			if (size & 1)   size++;                 // All offsets on an even boundary                      

	mov	ecx, DWORD PTR _size$[ebp]
	and	ecx, 1
	je	SHORT $LN5@ReadLBMCol
	mov	edx, DWORD PTR _size$[ebp]
	add	edx, 1
	mov	DWORD PTR _size$[ebp], edx
$LN5@ReadLBMCol:

; 699  : 			fi->glSetFilePosMem ( size, SEEK_CUR );

	push	1
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glSetFilePosMem@CFileMemory@@QAEHHH@Z	; CFileMemory::glSetFilePosMem
	jmp	SHORT $LN8@ReadLBMCol
$LN6@ReadLBMCol:

; 700  : 		}
; 701  : 		else CMAP = 1;

	mov	DWORD PTR _CMAP$[ebp], 1
$LN8@ReadLBMCol:

; 702  : 	} while (!CMAP);

	cmp	DWORD PTR _CMAP$[ebp], 0
	je	$LN9@ReadLBMCol

; 703  : 
; 704  : 	fi->glReadMem ( LBMPalette, size );

	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	lea	edx, DWORD PTR _LBMPalette$[ebp]
	push	edx
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem

; 705  : 	finalPalette = (GLulong *)glAllocateMemory ( 1024 );

	push	1
	push	1024					; 00000400H
	call	?glAllocateMemory@@YAPAXHH@Z		; glAllocateMemory
	add	esp, 8
	mov	DWORD PTR _finalPalette$[ebp], eax

; 706  : 	if (!finalPalette) {

	cmp	DWORD PTR _finalPalette$[ebp], 0
	jne	SHORT $LN3@ReadLBMCol

; 707  : 		return NULL;

	xor	eax, eax
	jmp	$LN10@ReadLBMCol
$LN3@ReadLBMCol:

; 708  : 	}
; 709  : 
; 710  : 	palOut = finalPalette;

	mov	eax, DWORD PTR _finalPalette$[ebp]
	mov	DWORD PTR _palOut$[ebp], eax

; 711  : 	palStop = finalPalette + 256;

	mov	ecx, DWORD PTR _finalPalette$[ebp]
	add	ecx, 1024				; 00000400H
	mov	DWORD PTR _palStop$[ebp], ecx

; 712  : 	palIn = LBMPalette;

	lea	edx, DWORD PTR _LBMPalette$[ebp]
	mov	DWORD PTR _palIn$[ebp], edx
$LN2@ReadLBMCol:

; 713  : 	while (palOut < palStop) {

	mov	eax, DWORD PTR _palOut$[ebp]
	cmp	eax, DWORD PTR _palStop$[ebp]
	jae	SHORT $LN1@ReadLBMCol

; 714  : 		*palOut++ = (palIn[2] << 16) | (palIn[1] << 8) | palIn[0];

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _palIn$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 16					; 00000010H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _palIn$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	shl	ecx, 8
	or	eax, ecx
	mov	edx, 1
	imul	edx, 0
	mov	ecx, DWORD PTR _palIn$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	or	eax, edx
	mov	ecx, DWORD PTR _palOut$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _palOut$[ebp]
	add	edx, 4
	mov	DWORD PTR _palOut$[ebp], edx

; 715  : 		palIn += 3;

	mov	eax, DWORD PTR _palIn$[ebp]
	add	eax, 3
	mov	DWORD PTR _palIn$[ebp], eax

; 716  : 	}

	jmp	SHORT $LN2@ReadLBMCol
$LN1@ReadLBMCol:

; 717  : 
; 718  : 	return finalPalette;

	mov	eax, DWORD PTR _finalPalette$[ebp]
$LN10@ReadLBMCol:

; 719  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ReadLBMColorMap@@YAPAKPAVCImageFileMemory@@@Z ENDP	; ReadLBMColorMap
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\image.cpp
_TEXT	SEGMENT
_cb$ = -56						; size = 6
_c$ = -48						; size = 4
tv70 = -44						; size = 4
_i$ = -40						; size = 4
_n$ = -36						; size = 4
_pt$ = -32						; size = 13
_ap$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_fi$ = 8						; size = 4
?GIF_SkipExtension@@YAXPAVCImageFileMemory@@@Z PROC	; GIF_SkipExtension

; 587  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 588  : 	PLAINTEXT       pt;
; 589  : 	CONTROLBLOCK    cb;
; 590  : 	APPLICATION     ap;
; 591  : 	GLuint c,n,i;
; 592  : 
; 593  : 	switch((c=fi->glReadCharMem())) {

	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadCharMem@CFileMemory@@QAEIXZ	; CFileMemory::glReadCharMem
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR tv70[ebp], eax
	mov	ecx, DWORD PTR tv70[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	cmp	DWORD PTR tv70[ebp], 254		; 000000feH
	ja	$LN4@GIF_SkipEx
	mov	edx, DWORD PTR tv70[ebp]
	movzx	eax, BYTE PTR $LN39@GIF_SkipEx[edx]
	jmp	DWORD PTR $LN40@GIF_SkipEx[eax*4]
$LN34@GIF_SkipEx:

; 594  : 		case 0x0001:            /* plain text descriptor */
; 595  : 			if(fi->glReadMem((GLubyte *)&pt, sizeof(pt)) == sizeof(pt)) {

	push	13					; 0000000dH
	lea	ecx, DWORD PTR _pt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem
	cmp	eax, 13					; 0000000dH
	jne	SHORT $LN33@GIF_SkipEx
$LN32@GIF_SkipEx:

; 596  : 				do {
; 597  : 					if((n=fi->glReadCharMem()) != EOF) {

	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadCharMem@CFileMemory@@QAEIXZ	; CFileMemory::glReadCharMem
	mov	DWORD PTR _n$[ebp], eax
	cmp	DWORD PTR _n$[ebp], -1
	je	SHORT $LN31@GIF_SkipEx

; 598  : 						for(i=0;i<n;++i) fi->glReadCharMem();

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN28@GIF_SkipEx
$LN27@GIF_SkipEx:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN28@GIF_SkipEx:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jae	SHORT $LN31@GIF_SkipEx
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadCharMem@CFileMemory@@QAEIXZ	; CFileMemory::glReadCharMem
	jmp	SHORT $LN27@GIF_SkipEx
$LN31@GIF_SkipEx:

; 599  : 					}
; 600  : 				} while(n > 0 && n != EOF);

	cmp	DWORD PTR _n$[ebp], 0
	jbe	SHORT $LN33@GIF_SkipEx
	cmp	DWORD PTR _n$[ebp], -1
	jne	SHORT $LN32@GIF_SkipEx
$LN33@GIF_SkipEx:

; 601  : 			}
; 602  : 			break;

	jmp	$LN37@GIF_SkipEx
$LN24@GIF_SkipEx:

; 603  : 		case 0x00f9:            /* graphic control block */
; 604  : 			fi->glReadMem((GLubyte *)&cb, sizeof(cb));

	push	6
	lea	ecx, DWORD PTR _cb$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem

; 605  : 			break;

	jmp	$LN37@GIF_SkipEx
$LN22@GIF_SkipEx:

; 606  : 		case 0x00fe:            /* comment extension */
; 607  : 			do {
; 608  : 				if((n=fi->glReadCharMem()) != EOF) {

	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadCharMem@CFileMemory@@QAEIXZ	; CFileMemory::glReadCharMem
	mov	DWORD PTR _n$[ebp], eax
	cmp	DWORD PTR _n$[ebp], -1
	je	SHORT $LN21@GIF_SkipEx

; 609  : 					for(i=0;i<n;++i) fi->glReadCharMem();

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN18@GIF_SkipEx
$LN17@GIF_SkipEx:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN18@GIF_SkipEx:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jae	SHORT $LN21@GIF_SkipEx
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadCharMem@CFileMemory@@QAEIXZ	; CFileMemory::glReadCharMem
	jmp	SHORT $LN17@GIF_SkipEx
$LN21@GIF_SkipEx:

; 610  : 				}
; 611  : 			} while(n > 0 && n != EOF);

	cmp	DWORD PTR _n$[ebp], 0
	jbe	SHORT $LN20@GIF_SkipEx
	cmp	DWORD PTR _n$[ebp], -1
	jne	SHORT $LN22@GIF_SkipEx
$LN20@GIF_SkipEx:

; 612  : 			break;

	jmp	$LN37@GIF_SkipEx
$LN14@GIF_SkipEx:

; 613  : 		case 0x00ff:            /* application extension */
; 614  : 			if(fi->glReadMem((GLubyte *)&ap, sizeof(ap)) == sizeof(ap)) {

	push	12					; 0000000cH
	lea	ecx, DWORD PTR _ap$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem
	cmp	eax, 12					; 0000000cH
	jne	SHORT $LN13@GIF_SkipEx
$LN12@GIF_SkipEx:

; 615  : 				do {
; 616  : 					if((n=fi->glReadCharMem()) != EOF) {

	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadCharMem@CFileMemory@@QAEIXZ	; CFileMemory::glReadCharMem
	mov	DWORD PTR _n$[ebp], eax
	cmp	DWORD PTR _n$[ebp], -1
	je	SHORT $LN11@GIF_SkipEx

; 617  : 						for(i=0;i<n;++i) fi->glReadCharMem();

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@GIF_SkipEx
$LN7@GIF_SkipEx:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN8@GIF_SkipEx:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jae	SHORT $LN11@GIF_SkipEx
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadCharMem@CFileMemory@@QAEIXZ	; CFileMemory::glReadCharMem
	jmp	SHORT $LN7@GIF_SkipEx
$LN11@GIF_SkipEx:

; 618  : 					}
; 619  : 				} while(n > 0 && n != EOF);

	cmp	DWORD PTR _n$[ebp], 0
	jbe	SHORT $LN13@GIF_SkipEx
	cmp	DWORD PTR _n$[ebp], -1
	jne	SHORT $LN12@GIF_SkipEx
$LN13@GIF_SkipEx:

; 620  : 			}
; 621  : 			break;

	jmp	SHORT $LN37@GIF_SkipEx
$LN4@GIF_SkipEx:

; 622  : 		default:                /* something else */
; 623  : 			n=fi->glReadCharMem();

	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadCharMem@CFileMemory@@QAEIXZ	; CFileMemory::glReadCharMem
	mov	DWORD PTR _n$[ebp], eax

; 624  : 			for(i=0;i<n;++i) fi->glReadCharMem();

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@GIF_SkipEx
$LN2@GIF_SkipEx:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@GIF_SkipEx:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _n$[ebp]
	jae	SHORT $LN37@GIF_SkipEx
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadCharMem@CFileMemory@@QAEIXZ	; CFileMemory::glReadCharMem
	jmp	SHORT $LN2@GIF_SkipEx
$LN37@GIF_SkipEx:

; 625  : 			break;
; 626  : 	}
; 627  : }       /* GIF_SkipExtension */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN40@GIF_SkipEx:
	DD	$LN34@GIF_SkipEx
	DD	$LN24@GIF_SkipEx
	DD	$LN22@GIF_SkipEx
	DD	$LN14@GIF_SkipEx
	DD	$LN4@GIF_SkipEx
$LN39@GIF_SkipEx:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	3
?GIF_SkipExtension@@YAXPAVCImageFileMemory@@@Z ENDP	; GIF_SkipExtension
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\image.cpp
_TEXT	SEGMENT
_offset$ = -29108					; size = 4
_buffer$ = -29104					; size = 4
_codesize2$ = -29100					; size = 4
_pass$ = -29096						; size = 4
_bits2$ = -29092					; size = 4
_oldtoken$ = -29088					; size = 4
_byte$ = -29084						; size = 4
_oldcode$ = -29080					; size = 4
_currentcode$ = -29076					; size = 4
_line$ = -29072						; size = 4
_nextcode$ = -29068					; size = 4
_codesize$ = -29064					; size = 4
_bitsleft$ = -29060					; size = 4
_u$ = -29056						; size = 4
_q$ = -29052						; size = 4
_blocksize$ = -29048					; size = 4
_thiscode$ = -29044					; size = 4
_p$ = -29040						; size = 4
_codestack$ = -29036					; size = 16384
_wordmasktable$ = -12652				; size = 64
_startable$ = -12588					; size = 20
_inctable$ = -12568					; size = 20
_firstcodestack$ = -12548				; size = 4096
_lastcodestack$ = -8452					; size = 4096
_linebuffer$ = -4356					; size = 4096
_b$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_bits$ = 8						; size = 4
_fi$ = 12						; size = 4
_currentFlag$ = 16					; size = 4
?GIF_UnpackImage@@YAHHPAVCImageFileMemory@@H@Z PROC	; GIF_UnpackImage

; 420  : {

	push	ebp
	mov	ebp, esp
	mov	eax, 29108				; 000071b4H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 421  : 	GLbyte  linebuffer[4096];
; 422  : 	GLubyte	firstcodestack[4096];	/* Stack for first codes */
; 423  : 	GLubyte	lastcodestack[4096];  	/* Stack for previous code */
; 424  : 	GLuint 	codestack[4096];     	/* Stack for links */
; 425  : 	GLuint 	wordmasktable[] = {       
; 426  : 		0x0000,0x0001,0x0003,0x0007,0x000f,0x001f,0x003f,0x007f,

	mov	DWORD PTR _wordmasktable$[ebp], 0
	mov	DWORD PTR _wordmasktable$[ebp+4], 1
	mov	DWORD PTR _wordmasktable$[ebp+8], 3
	mov	DWORD PTR _wordmasktable$[ebp+12], 7
	mov	DWORD PTR _wordmasktable$[ebp+16], 15	; 0000000fH
	mov	DWORD PTR _wordmasktable$[ebp+20], 31	; 0000001fH
	mov	DWORD PTR _wordmasktable$[ebp+24], 63	; 0000003fH
	mov	DWORD PTR _wordmasktable$[ebp+28], 127	; 0000007fH

; 427  : 		0x00ff,0x01ff,0x03ff,0x07ff,0x0fff,0x1fff,0x3fff,0x7fff

	mov	DWORD PTR _wordmasktable$[ebp+32], 255	; 000000ffH
	mov	DWORD PTR _wordmasktable$[ebp+36], 511	; 000001ffH
	mov	DWORD PTR _wordmasktable$[ebp+40], 1023	; 000003ffH
	mov	DWORD PTR _wordmasktable$[ebp+44], 2047	; 000007ffH
	mov	DWORD PTR _wordmasktable$[ebp+48], 4095	; 00000fffH
	mov	DWORD PTR _wordmasktable$[ebp+52], 8191	; 00001fffH
	mov	DWORD PTR _wordmasktable$[ebp+56], 16383 ; 00003fffH

; 428  : 	};

	mov	DWORD PTR _wordmasktable$[ebp+60], 32767 ; 00007fffH

; 429  : 	GLuint 	inctable[] = { 8,8,4,2,0 }; 

	mov	DWORD PTR _inctable$[ebp], 8
	mov	DWORD PTR _inctable$[ebp+4], 8
	mov	DWORD PTR _inctable$[ebp+8], 4
	mov	DWORD PTR _inctable$[ebp+12], 2
	mov	DWORD PTR _inctable$[ebp+16], 0

; 430  : 	GLuint 	startable[] = { 0,4,2,1,0 };

	mov	DWORD PTR _startable$[ebp], 0
	mov	DWORD PTR _startable$[ebp+4], 4
	mov	DWORD PTR _startable$[ebp+8], 2
	mov	DWORD PTR _startable$[ebp+12], 1
	mov	DWORD PTR _startable$[ebp+16], 0

; 431  : 
; 432  : 	GLuint	offset;
; 433  : 	GLuint 	bits2;			/* Bits plus 1 */
; 434  : 	GLuint 	codesize;      	/* Current code size in bits */
; 435  : 	GLuint 	codesize2;     	/* Next codesize */
; 436  : 	GLuint 	nextcode;      	/* Next available table entry */
; 437  : 	GLuint 	thiscode;      	/* Code being expanded */
; 438  : 	GLuint 	oldtoken;      	/* Last symbol decoded */
; 439  : 	GLuint 	currentcode;   	/* Code just read */
; 440  : 	GLuint 	oldcode;       	/* Code read before this one */
; 441  : 	GLuint 	bitsleft;      	/* Number of bits left in *p */
; 442  : 	GLuint 	blocksize;     	/* Bytes in next block */
; 443  : 	GLuint 	line=0;        	/* next line to write */

	mov	DWORD PTR _line$[ebp], 0

; 444  : 	GLuint 	byte=0;        	/* next byte to write */

	mov	DWORD PTR _byte$[ebp], 0

; 445  : 	GLuint 	pass=0;        	/* pass number for interlaced pictures */

	mov	DWORD PTR _pass$[ebp], 0

; 446  : 	GLubyte 	*p;            	/* Pointer to current byte in read buffer */
; 447  : 	GLubyte 	*q;             /* Pointer past last byte in read buffer */
; 448  : 	GLubyte 	b[256];         /* Read buffer */
; 449  : 	GLubyte 	*u;             /* Stack pointer into firstcodestack */
; 450  : 	GLubyte 	*buffer;        /* Pointer to image buffer */
; 451  : 
; 452  : 	if (bits < 2 || bits > 8) return(BAD_SYMBOLSIZE);

	cmp	DWORD PTR _bits$[ebp], 2
	jl	SHORT $LN30@GIF_Unpack
	cmp	DWORD PTR _bits$[ebp], 8
	jle	SHORT $LN31@GIF_Unpack
$LN30@GIF_Unpack:
	mov	eax, 7
	jmp	$LN32@GIF_Unpack
$LN31@GIF_Unpack:

; 453  : 	p=q=b;

	lea	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _q$[ebp], eax
	mov	ecx, DWORD PTR _q$[ebp]
	mov	DWORD PTR _p$[ebp], ecx

; 454  : 	bitsleft = 8;

	mov	DWORD PTR _bitsleft$[ebp], 8

; 455  : 	bits2 = 1 << bits;

	mov	edx, 1
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	mov	DWORD PTR _bits2$[ebp], edx

; 456  : 	nextcode = bits2 + 2;

	mov	eax, DWORD PTR _bits2$[ebp]
	add	eax, 2
	mov	DWORD PTR _nextcode$[ebp], eax

; 457  : 	codesize = bits + 1;

	mov	ecx, DWORD PTR _bits$[ebp]
	add	ecx, 1
	mov	DWORD PTR _codesize$[ebp], ecx

; 458  : 	codesize2 = 1 << codesize;

	mov	edx, 1
	mov	ecx, DWORD PTR _codesize$[ebp]
	shl	edx, cl
	mov	DWORD PTR _codesize2$[ebp], edx

; 459  : 	oldcode=oldtoken=(GLuint) NO_CODE;

	mov	DWORD PTR _oldtoken$[ebp], -1
	mov	eax, DWORD PTR _oldtoken$[ebp]
	mov	DWORD PTR _oldcode$[ebp], eax

; 460  : 	buffer = (GLubyte *) fi->image.image;

	mov	ecx, DWORD PTR _fi$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR _buffer$[ebp], edx
$LN29@GIF_Unpack:

; 461  : 
; 462  : 	for(;;) {
; 463  : 		if(bitsleft==8) {

	cmp	DWORD PTR _bitsleft$[ebp], 8
	jne	$LN27@GIF_Unpack

; 464  : 			if(++p >= q && (((blocksize = fi->glReadCharMem()) < 1) ||
; 465  : 				(q=(p=b)+fi->glReadMem(b,blocksize))< (b+blocksize))) 

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	ecx, DWORD PTR _q$[ebp]
	jb	SHORT $LN26@GIF_Unpack
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadCharMem@CFileMemory@@QAEIXZ	; CFileMemory::glReadCharMem
	mov	DWORD PTR _blocksize$[ebp], eax
	cmp	DWORD PTR _blocksize$[ebp], 1
	jb	SHORT $LN25@GIF_Unpack
	lea	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, DWORD PTR _blocksize$[ebp]
	push	eax
	lea	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _q$[ebp], eax
	mov	edx, DWORD PTR _blocksize$[ebp]
	lea	eax, DWORD PTR _b$[ebp+edx]
	cmp	DWORD PTR _q$[ebp], eax
	jae	SHORT $LN26@GIF_Unpack
$LN25@GIF_Unpack:

; 466  : 				return(UNEXPECTED_EOF);

	mov	eax, 3
	jmp	$LN32@GIF_Unpack
$LN26@GIF_Unpack:

; 467  : 			bitsleft = 0;

	mov	DWORD PTR _bitsleft$[ebp], 0
$LN27@GIF_Unpack:

; 468  : 		}
; 469  : 		thiscode = *p;

	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _thiscode$[ebp], edx

; 470  : 		if ((currentcode=(codesize+bitsleft)) <= 8) {

	mov	eax, DWORD PTR _codesize$[ebp]
	add	eax, DWORD PTR _bitsleft$[ebp]
	mov	DWORD PTR _currentcode$[ebp], eax
	cmp	DWORD PTR _currentcode$[ebp], 8
	ja	SHORT $LN24@GIF_Unpack

; 471  : 			*p >>= codesize;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	cl, BYTE PTR _codesize$[ebp]
	shr	dl, cl
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax], dl

; 472  : 			bitsleft = currentcode;

	mov	ecx, DWORD PTR _currentcode$[ebp]
	mov	DWORD PTR _bitsleft$[ebp], ecx

; 473  : 		}
; 474  : 		else {

	jmp	$LN23@GIF_Unpack
$LN24@GIF_Unpack:

; 475  : 			if(++p >= q &&  (((blocksize = fi->glReadCharMem()) < 1) ||
; 476  : 			  (q=(p=b)+fi->glReadMem(b,blocksize)) < (b+blocksize))) 

	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR _q$[ebp]
	jb	SHORT $LN22@GIF_Unpack
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadCharMem@CFileMemory@@QAEIXZ	; CFileMemory::glReadCharMem
	mov	DWORD PTR _blocksize$[ebp], eax
	cmp	DWORD PTR _blocksize$[ebp], 1
	jb	SHORT $LN21@GIF_Unpack
	lea	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, DWORD PTR _blocksize$[ebp]
	push	edx
	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _q$[ebp], eax
	mov	ecx, DWORD PTR _blocksize$[ebp]
	lea	edx, DWORD PTR _b$[ebp+ecx]
	cmp	DWORD PTR _q$[ebp], edx
	jae	SHORT $LN22@GIF_Unpack
$LN21@GIF_Unpack:

; 477  : 				return(UNEXPECTED_EOF);

	mov	eax, 3
	jmp	$LN32@GIF_Unpack
$LN22@GIF_Unpack:

; 478  : 			thiscode |= (*p << (8 - bitsleft));

	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, 8
	sub	ecx, DWORD PTR _bitsleft$[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _thiscode$[ebp]
	mov	DWORD PTR _thiscode$[ebp], edx

; 479  : 			if(currentcode <= 16) {

	cmp	DWORD PTR _currentcode$[ebp], 16	; 00000010H
	ja	SHORT $LN20@GIF_Unpack

; 480  : 				bitsleft=currentcode-8;

	mov	eax, DWORD PTR _currentcode$[ebp]
	sub	eax, 8
	mov	DWORD PTR _bitsleft$[ebp], eax

; 481  : 				*p >>= bitsleft;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	cl, BYTE PTR _bitsleft$[ebp]
	shr	dl, cl
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax], dl

; 482  : 			}
; 483  : 			else {

	jmp	$LN23@GIF_Unpack
$LN20@GIF_Unpack:

; 484  : 				if(++p >= q &&  (((blocksize = fi->glReadCharMem()) < 1) ||
; 485  : 				  (q=(p=b) + fi->glReadMem(b,blocksize)) < (b+blocksize))) 

	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	cmp	edx, DWORD PTR _q$[ebp]
	jb	SHORT $LN18@GIF_Unpack
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadCharMem@CFileMemory@@QAEIXZ	; CFileMemory::glReadCharMem
	mov	DWORD PTR _blocksize$[ebp], eax
	cmp	DWORD PTR _blocksize$[ebp], 1
	jb	SHORT $LN17@GIF_Unpack
	lea	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _blocksize$[ebp]
	push	ecx
	lea	edx, DWORD PTR _b$[ebp]
	push	edx
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _q$[ebp], eax
	mov	eax, DWORD PTR _blocksize$[ebp]
	lea	ecx, DWORD PTR _b$[ebp+eax]
	cmp	DWORD PTR _q$[ebp], ecx
	jae	SHORT $LN18@GIF_Unpack
$LN17@GIF_Unpack:

; 486  : 					return(UNEXPECTED_EOF);

	mov	eax, 3
	jmp	$LN32@GIF_Unpack
$LN18@GIF_Unpack:

; 487  : 				thiscode |= (*p << (16 - bitsleft));

	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, 16					; 00000010H
	sub	ecx, DWORD PTR _bitsleft$[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _thiscode$[ebp]
	mov	DWORD PTR _thiscode$[ebp], eax

; 488  : 				bitsleft = currentcode - 16;

	mov	ecx, DWORD PTR _currentcode$[ebp]
	sub	ecx, 16					; 00000010H
	mov	DWORD PTR _bitsleft$[ebp], ecx

; 489  : 				*p >>= bitsleft;

	mov	edx, DWORD PTR _p$[ebp]
	mov	al, BYTE PTR [edx]
	mov	cl, BYTE PTR _bitsleft$[ebp]
	shr	al, cl
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], al
$LN23@GIF_Unpack:

; 490  : 			}
; 491  : 		}
; 492  : 		thiscode &= wordmasktable[codesize];

	mov	edx, DWORD PTR _codesize$[ebp]
	mov	eax, DWORD PTR _thiscode$[ebp]
	and	eax, DWORD PTR _wordmasktable$[ebp+edx*4]
	mov	DWORD PTR _thiscode$[ebp], eax

; 493  : 		currentcode = thiscode;

	mov	ecx, DWORD PTR _thiscode$[ebp]
	mov	DWORD PTR _currentcode$[ebp], ecx

; 494  : 		if(thiscode == (bits2+1)) break;        /* found EOI */

	mov	edx, DWORD PTR _bits2$[ebp]
	add	edx, 1
	cmp	DWORD PTR _thiscode$[ebp], edx
	jne	SHORT $LN16@GIF_Unpack
	jmp	$LN28@GIF_Unpack
$LN16@GIF_Unpack:

; 495  : 		if(thiscode > nextcode) return(BAD_CODE);

	mov	eax, DWORD PTR _thiscode$[ebp]
	cmp	eax, DWORD PTR _nextcode$[ebp]
	jbe	SHORT $LN15@GIF_Unpack
	mov	eax, 4
	jmp	$LN32@GIF_Unpack
$LN15@GIF_Unpack:

; 496  : 		if(thiscode == bits2) {

	mov	ecx, DWORD PTR _thiscode$[ebp]
	cmp	ecx, DWORD PTR _bits2$[ebp]
	jne	SHORT $LN14@GIF_Unpack

; 497  : 			nextcode = bits2 + 2;

	mov	edx, DWORD PTR _bits2$[ebp]
	add	edx, 2
	mov	DWORD PTR _nextcode$[ebp], edx

; 498  : 			codesize = bits + 1;

	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 1
	mov	DWORD PTR _codesize$[ebp], eax

; 499  : 			codesize2 = 1 << codesize;

	mov	edx, 1
	mov	ecx, DWORD PTR _codesize$[ebp]
	shl	edx, cl
	mov	DWORD PTR _codesize2$[ebp], edx

; 500  : 			oldtoken = oldcode = (GLuint) NO_CODE;

	mov	DWORD PTR _oldcode$[ebp], -1
	mov	eax, DWORD PTR _oldcode$[ebp]
	mov	DWORD PTR _oldtoken$[ebp], eax

; 501  : 			continue;

	jmp	$LN29@GIF_Unpack
$LN14@GIF_Unpack:

; 502  : 		}
; 503  : 		u = firstcodestack;

	lea	ecx, DWORD PTR _firstcodestack$[ebp]
	mov	DWORD PTR _u$[ebp], ecx

; 504  : 		if(thiscode==nextcode) {

	mov	edx, DWORD PTR _thiscode$[ebp]
	cmp	edx, DWORD PTR _nextcode$[ebp]
	jne	SHORT $LN11@GIF_Unpack

; 505  : 			if(oldcode==NO_CODE) return(BAD_FIRSTCODE);

	cmp	DWORD PTR _oldcode$[ebp], -1
	jne	SHORT $LN12@GIF_Unpack
	mov	eax, 5
	jmp	$LN32@GIF_Unpack
$LN12@GIF_Unpack:

; 506  : 			*u++ = (GLubyte) oldtoken;

	mov	eax, DWORD PTR _u$[ebp]
	mov	cl, BYTE PTR _oldtoken$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _u$[ebp]
	add	edx, 1
	mov	DWORD PTR _u$[ebp], edx

; 507  : 			thiscode = oldcode;

	mov	eax, DWORD PTR _oldcode$[ebp]
	mov	DWORD PTR _thiscode$[ebp], eax
$LN11@GIF_Unpack:

; 508  : 		}
; 509  : 		while (thiscode >= bits2) {

	mov	ecx, DWORD PTR _thiscode$[ebp]
	cmp	ecx, DWORD PTR _bits2$[ebp]
	jb	SHORT $LN10@GIF_Unpack

; 510  : 			*u++ = lastcodestack[thiscode];

	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR _thiscode$[ebp]
	mov	cl, BYTE PTR _lastcodestack$[ebp+eax]
	mov	BYTE PTR [edx], cl
	mov	edx, DWORD PTR _u$[ebp]
	add	edx, 1
	mov	DWORD PTR _u$[ebp], edx

; 511  : 			thiscode = codestack[thiscode];

	mov	eax, DWORD PTR _thiscode$[ebp]
	mov	ecx, DWORD PTR _codestack$[ebp+eax*4]
	mov	DWORD PTR _thiscode$[ebp], ecx

; 512  : 		}

	jmp	SHORT $LN11@GIF_Unpack
$LN10@GIF_Unpack:

; 513  : 		oldtoken = thiscode;

	mov	edx, DWORD PTR _thiscode$[ebp]
	mov	DWORD PTR _oldtoken$[ebp], edx
$LN9@GIF_Unpack:

; 514  : #if 0
; 515  : 		do
; 516  : 		{
; 517  : 			linebuffer[byte++]=(GLubyte) thiscode;
; 518  : 			if(byte >= (GLuint) fi->image.width)
; 519  : 			{
; 520  : 				if ( line < (GLuint) fi -> image.height ) {
; 521  : 					offset = (GLint) line * fi -> image.width;
; 522  : 					memcpy(buffer+offset,linebuffer,fi -> image.width);
; 523  : 				}
; 524  : 				byte=0;
; 525  : 				if(currentFlag & 0x40) {
; 526  : 					line+=inctable[pass];
; 527  : 					if(line >= (GLuint) fi->image.height) line=startable[++pass];
; 528  : 				}
; 529  : 				else ++line;
; 530  : 			}
; 531  : 
; 532  : 			if (u <= firstcodestack)
; 533  : 			{
; 534  : 				break;
; 535  : 			}
; 536  : 
; 537  : 			thiscode = *--u;
; 538  : 		} while(1);
; 539  : #endif
; 540  : 		while (u >= firstcodestack)

	lea	eax, DWORD PTR _firstcodestack$[ebp]
	cmp	DWORD PTR _u$[ebp], eax
	jb	$LN8@GIF_Unpack

; 541  : 		{
; 542  : 			linebuffer[byte++]=(GLubyte) thiscode;

	mov	ecx, DWORD PTR _byte$[ebp]
	mov	dl, BYTE PTR _thiscode$[ebp]
	mov	BYTE PTR _linebuffer$[ebp+ecx], dl
	mov	eax, DWORD PTR _byte$[ebp]
	add	eax, 1
	mov	DWORD PTR _byte$[ebp], eax

; 543  : 			if(byte >= (GLuint) fi->image.width)

	mov	ecx, DWORD PTR _fi$[ebp]
	mov	edx, DWORD PTR _byte$[ebp]
	cmp	edx, DWORD PTR [ecx+32]
	jb	$LN7@GIF_Unpack

; 544  : 			{
; 545  : 				if ( line < (GLuint) fi -> image.height )

	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR _line$[ebp]
	cmp	ecx, DWORD PTR [eax+36]
	jae	SHORT $LN6@GIF_Unpack

; 546  : 				{
; 547  : 					offset = (GLint) line * fi -> image.width;

	mov	edx, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR _line$[ebp]
	imul	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _offset$[ebp], eax

; 548  : 					memcpy(buffer+offset,linebuffer,fi -> image.width);

	mov	ecx, DWORD PTR _fi$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	lea	eax, DWORD PTR _linebuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	add	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN6@GIF_Unpack:

; 549  : 				}
; 550  : 				byte=0;

	mov	DWORD PTR _byte$[ebp], 0

; 551  : 
; 552  : 				if(currentFlag & 0x40)

	mov	edx, DWORD PTR _currentFlag$[ebp]
	and	edx, 64					; 00000040H
	je	SHORT $LN5@GIF_Unpack

; 553  : 				{
; 554  : 					line+=inctable[pass];

	mov	eax, DWORD PTR _pass$[ebp]
	mov	ecx, DWORD PTR _line$[ebp]
	add	ecx, DWORD PTR _inctable$[ebp+eax*4]
	mov	DWORD PTR _line$[ebp], ecx

; 555  : 					if(line >= (GLuint) fi->image.height) line=startable[++pass];

	mov	edx, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR _line$[ebp]
	cmp	eax, DWORD PTR [edx+36]
	jb	SHORT $LN4@GIF_Unpack
	mov	ecx, DWORD PTR _pass$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pass$[ebp], ecx
	mov	edx, DWORD PTR _pass$[ebp]
	mov	eax, DWORD PTR _startable$[ebp+edx*4]
	mov	DWORD PTR _line$[ebp], eax
$LN4@GIF_Unpack:

; 556  : 				}
; 557  : 				else

	jmp	SHORT $LN7@GIF_Unpack
$LN5@GIF_Unpack:

; 558  : 					++line;

	mov	ecx, DWORD PTR _line$[ebp]
	add	ecx, 1
	mov	DWORD PTR _line$[ebp], ecx
$LN7@GIF_Unpack:

; 559  : 			}
; 560  : 
; 561  : 			thiscode = *--u;

	mov	edx, DWORD PTR _u$[ebp]
	sub	edx, 1
	mov	DWORD PTR _u$[ebp], edx
	mov	eax, DWORD PTR _u$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _thiscode$[ebp], ecx

; 562  : 		};

	jmp	$LN9@GIF_Unpack
$LN8@GIF_Unpack:

; 563  : 
; 564  : 		if(nextcode < 4096 && oldcode != NO_CODE)

	cmp	DWORD PTR _nextcode$[ebp], 4096		; 00001000H
	jae	SHORT $LN2@GIF_Unpack
	cmp	DWORD PTR _oldcode$[ebp], -1
	je	SHORT $LN2@GIF_Unpack

; 565  : 		{
; 566  : 			codestack[nextcode] = oldcode;

	mov	edx, DWORD PTR _nextcode$[ebp]
	mov	eax, DWORD PTR _oldcode$[ebp]
	mov	DWORD PTR _codestack$[ebp+edx*4], eax

; 567  : 			lastcodestack[nextcode] = (GLubyte) oldtoken;

	mov	ecx, DWORD PTR _nextcode$[ebp]
	mov	dl, BYTE PTR _oldtoken$[ebp]
	mov	BYTE PTR _lastcodestack$[ebp+ecx], dl

; 568  : 			if (++nextcode >= codesize2 && codesize < 12)

	mov	eax, DWORD PTR _nextcode$[ebp]
	add	eax, 1
	mov	DWORD PTR _nextcode$[ebp], eax
	mov	ecx, DWORD PTR _nextcode$[ebp]
	cmp	ecx, DWORD PTR _codesize2$[ebp]
	jb	SHORT $LN2@GIF_Unpack
	cmp	DWORD PTR _codesize$[ebp], 12		; 0000000cH
	jae	SHORT $LN2@GIF_Unpack

; 569  : 			    codesize2 = 1 << ++codesize;

	mov	edx, DWORD PTR _codesize$[ebp]
	add	edx, 1
	mov	DWORD PTR _codesize$[ebp], edx
	mov	eax, 1
	mov	ecx, DWORD PTR _codesize$[ebp]
	shl	eax, cl
	mov	DWORD PTR _codesize2$[ebp], eax
$LN2@GIF_Unpack:

; 570  : 		}
; 571  : 		oldcode = currentcode;

	mov	ecx, DWORD PTR _currentcode$[ebp]
	mov	DWORD PTR _oldcode$[ebp], ecx

; 572  : 	}

	jmp	$LN29@GIF_Unpack
$LN28@GIF_Unpack:

; 573  : 	return(GOOD_READ);

	xor	eax, eax
$LN32@GIF_Unpack:

; 574  : }       /* GIF_UnpackImage */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?GIF_UnpackImage@@YAHHPAVCImageFileMemory@@H@Z ENDP	; GIF_UnpackImage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\image.cpp
_TEXT	SEGMENT
_maxRLLdata$ = -948					; size = 4
$T1 = -944						; size = 4
$T2 = -940						; size = 4
_result$ = -936						; size = 4
_RLLdata$ = -932					; size = 4
_run$ = -928						; size = 4
_c$ = -924						; size = 4
_inP$ = -920						; size = 4
_outP$ = -916						; size = 4
_i$ = -912						; size = 4
_value$ = -905						; size = 1
_pcxHeader$ = -904					; size = 128
_palette24$ = -776					; size = 769
__$ArrayPad$ = -4					; size = 4
_fileHandle$ = 8					; size = 4
_image$ = 12						; size = 4
?WritePCX@@YAHHPAUGLImageInfo@@@Z PROC			; WritePCX

; 905  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 948				; 000003b4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 906  : 	int			result;
; 907  : 	PCXHEAD		pcxHeader;
; 908  : 	BYTE		*RLLdata;
; 909  : 	int			maxRLLdata;
; 910  : 	BYTE		palette24[1 + 3*256];
; 911  : 	BYTE		*outP;
; 912  : 	BYTE		*inP;
; 913  : 	int			i;
; 914  : 	int			c;
; 915  : 	BYTE		value;
; 916  : 	int			run;
; 917  : 
; 918  : 	// Write the PCX header
; 919  : 	memset( &pcxHeader, 0, sizeof(pcxHeader) );

	push	128					; 00000080H
	push	0
	lea	eax, DWORD PTR _pcxHeader$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 920  : 	pcxHeader.manufacturer		= 10;

	mov	BYTE PTR _pcxHeader$[ebp], 10		; 0000000aH

; 921  : 	pcxHeader.version			= 5;

	mov	BYTE PTR _pcxHeader$[ebp+1], 5

; 922  : 	pcxHeader.encoding			= 1;

	mov	BYTE PTR _pcxHeader$[ebp+2], 1

; 923  : 	pcxHeader.bits_per_pixel	= 8;

	mov	BYTE PTR _pcxHeader$[ebp+3], 8

; 924  : 	pcxHeader.xmax				= (short)(image->width-1);

	mov	ecx, DWORD PTR _image$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, 1
	mov	WORD PTR _pcxHeader$[ebp+8], dx

; 925  : 	pcxHeader.ymax				= (short)(image->height-1);

	mov	eax, DWORD PTR _image$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	WORD PTR _pcxHeader$[ebp+10], cx

; 926  : 	pcxHeader.hres				= (short)image->width;

	mov	edx, DWORD PTR _image$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR _pcxHeader$[ebp+12], ax

; 927  : 	pcxHeader.vres				= (short)image->height;

	mov	ecx, DWORD PTR _image$[ebp]
	mov	dx, WORD PTR [ecx+4]
	mov	WORD PTR _pcxHeader$[ebp+14], dx

; 928  : 	pcxHeader.colour_planes		= 1;

	mov	BYTE PTR _pcxHeader$[ebp+65], 1

; 929  : 	pcxHeader.bytes_per_line	= (short)image->width;

	mov	eax, DWORD PTR _image$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _pcxHeader$[ebp+66], cx

; 930  : 	pcxHeader.palette_type		= 1;

	mov	edx, 1
	mov	WORD PTR _pcxHeader$[ebp+68], dx

; 931  : 	result = write( fileHandle, &pcxHeader, sizeof(pcxHeader) );

	push	128					; 00000080H
	lea	eax, DWORD PTR _pcxHeader$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fileHandle$[ebp]
	push	ecx
	call	_write
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax

; 932  : 	ShiAssert( result == sizeof(pcxHeader) );
; 933  : 
; 934  : 	// Allocate space for the compressed image data
; 935  : 	maxRLLdata = image->width * image->height * 2;

	mov	edx, DWORD PTR _image$[ebp]
	mov	eax, DWORD PTR _image$[ebp]
	mov	ecx, DWORD PTR [edx]
	imul	ecx, DWORD PTR [eax+4]
	shl	ecx, 1
	mov	DWORD PTR _maxRLLdata$[ebp], ecx

; 936  : 	RLLdata = new BYTE[maxRLLdata];

	mov	edx, DWORD PTR _maxRLLdata$[ebp]
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR _RLLdata$[ebp], eax

; 937  : 
; 938  : 	// Run length encode the image a line at a time then write it
; 939  : 	// Counts are written with top two bits set.  Image bytes are written
; 940  : 	// with the top two bits clear.  If an image byte has the top two bits set, it
; 941  : 	// must be preceeded by a count byte even if the count is 1.
; 942  : 	inP		= image->image;

	mov	ecx, DWORD PTR _image$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _inP$[ebp], edx

; 943  : 	outP	= RLLdata;

	mov	eax, DWORD PTR _RLLdata$[ebp]
	mov	DWORD PTR _outP$[ebp], eax

; 944  : 	for (i = 0; i<image->height; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN12@WritePCX
$LN11@WritePCX:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN12@WritePCX:
	mov	edx, DWORD PTR _image$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jge	$LN10@WritePCX

; 945  : 
; 946  : 		run		= 0;

	mov	DWORD PTR _run$[ebp], 0

; 947  : 		c		= 0;

	mov	DWORD PTR _c$[ebp], 0
$LN9@WritePCX:

; 948  : 
; 949  : 		ShiAssert( inP - image->image == i*image->width+c );
; 950  : 
; 951  : 		while (c < image->width) {

	mov	ecx, DWORD PTR _image$[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jge	$LN8@WritePCX

; 952  : 			// Start a new run
; 953  : 			run = 1;

	mov	DWORD PTR _run$[ebp], 1

; 954  : 			value = *inP++;

	mov	eax, DWORD PTR _inP$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _value$[ebp], cl
	mov	edx, DWORD PTR _inP$[ebp]
	add	edx, 1
	mov	DWORD PTR _inP$[ebp], edx

; 955  : 			c++;

	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
$LN7@WritePCX:

; 956  : 
; 957  : 			ShiAssert( inP - image->image == i*image->width+c );
; 958  : 
; 959  : 			// Add to the current run
; 960  : 			while ( (value == *inP)		&&	// Must have same value
; 961  : 					(c < image->width)	&&	// Must not cross row boundries
; 962  : 					(run+1 < 64)		) {	// Run less than 64 bytes

	movzx	ecx, BYTE PTR _value$[ebp]
	mov	edx, DWORD PTR _inP$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	jne	SHORT $LN6@WritePCX
	mov	ecx, DWORD PTR _image$[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN6@WritePCX
	mov	eax, DWORD PTR _run$[ebp]
	add	eax, 1
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN6@WritePCX

; 963  : 				inP++;

	mov	ecx, DWORD PTR _inP$[ebp]
	add	ecx, 1
	mov	DWORD PTR _inP$[ebp], ecx

; 964  : 				run++;

	mov	edx, DWORD PTR _run$[ebp]
	add	edx, 1
	mov	DWORD PTR _run$[ebp], edx

; 965  : 				c++;

	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax

; 966  : 			}

	jmp	SHORT $LN7@WritePCX
$LN6@WritePCX:

; 967  : 
; 968  : 			ShiAssert( inP - image->image == i*image->width+c );
; 969  : 
; 970  : 			// Write out the run
; 971  : 			if ((run == 1) && ((value & 0xC0) != 0xC0)) {

	cmp	DWORD PTR _run$[ebp], 1
	jne	SHORT $LN5@WritePCX
	movzx	ecx, BYTE PTR _value$[ebp]
	and	ecx, 192				; 000000c0H
	cmp	ecx, 192				; 000000c0H
	je	SHORT $LN5@WritePCX

; 972  : 				// Can just write the value byte
; 973  : 				*outP++ = value;

	mov	edx, DWORD PTR _outP$[ebp]
	mov	al, BYTE PTR _value$[ebp]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR _outP$[ebp]
	add	ecx, 1
	mov	DWORD PTR _outP$[ebp], ecx

; 974  : 			} else {

	jmp	SHORT $LN4@WritePCX
$LN5@WritePCX:

; 975  : 				// Require a count byte
; 976  : 				*outP++ = (BYTE)(0xC0 | run);

	mov	edx, DWORD PTR _run$[ebp]
	or	edx, 192				; 000000c0H
	mov	eax, DWORD PTR _outP$[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _outP$[ebp]
	add	ecx, 1
	mov	DWORD PTR _outP$[ebp], ecx

; 977  : 				*outP++ = value;

	mov	edx, DWORD PTR _outP$[ebp]
	mov	al, BYTE PTR _value$[ebp]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR _outP$[ebp]
	add	ecx, 1
	mov	DWORD PTR _outP$[ebp], ecx
$LN4@WritePCX:

; 978  : 			}
; 979  : 
; 980  : 			ShiAssert( inP - image->image == i*image->width+c );
; 981  : 
; 982  : 		}

	jmp	$LN9@WritePCX
$LN8@WritePCX:

; 983  : 	}

	jmp	$LN11@WritePCX
$LN10@WritePCX:

; 984  : 	ShiAssert( outP - RLLdata <= maxRLLdata );
; 985  : 	result = write( fileHandle, RLLdata, outP - RLLdata );

	mov	edx, DWORD PTR _outP$[ebp]
	sub	edx, DWORD PTR _RLLdata$[ebp]
	push	edx
	mov	eax, DWORD PTR _RLLdata$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fileHandle$[ebp]
	push	ecx
	call	_write
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax

; 986  : 	ShiAssert( result == outP - RLLdata );
; 987  : 
; 988  : 	// Free the compression buffer
; 989  : 	delete[] RLLdata;

	mov	edx, DWORD PTR _RLLdata$[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 990  : 	
; 991  : 	// Convert the palette to 24 bit and write it
; 992  : 	palette24[0] = 0xC;		// Palette signature

	mov	ecx, 1
	imul	ecx, 0
	mov	BYTE PTR _palette24$[ebp+ecx], 12	; 0000000cH

; 993  : 	for (i=0; i<256; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@WritePCX
$LN2@WritePCX:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@WritePCX:
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jge	SHORT $LN1@WritePCX

; 994  : 		palette24[i*3 + 1] = (BYTE)(image->palette[i]);				// Red

	mov	eax, DWORD PTR _image$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 3
	mov	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [ecx+eax*4]
	mov	BYTE PTR _palette24$[ebp+edx+1], cl

; 995  : 		palette24[i*3 + 2] = (BYTE)(image->palette[i] >> 8);		// Green

	mov	edx, DWORD PTR _image$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	shr	edx, 8
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 3
	mov	BYTE PTR _palette24$[ebp+eax+2], dl

; 996  : 		palette24[i*3 + 3] = (BYTE)(image->palette[i] >> 16);		// Blue

	mov	ecx, DWORD PTR _image$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	shr	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 3
	mov	BYTE PTR _palette24$[ebp+edx+3], cl

; 997  : 	}

	jmp	SHORT $LN2@WritePCX
$LN1@WritePCX:

; 998  : 	result = write( fileHandle, palette24, sizeof(palette24) );

	push	769					; 00000301H
	lea	eax, DWORD PTR _palette24$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fileHandle$[ebp]
	push	ecx
	call	_write
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax

; 999  : 	ShiAssert( result == sizeof(palette24) );
; 1000 : 
; 1001 : 	return (GOOD_WRITE);

	xor	eax, eax

; 1002 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?WritePCX@@YAHHPAUGLImageInfo@@@Z ENDP			; WritePCX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\image.cpp
_TEXT	SEGMENT
_dwMagic$ = -132					; size = 4
_ddsd$ = -128						; size = 124
__$ArrayPad$ = -4					; size = 4
_fi$ = 8						; size = 4
?ReadDDS@@YAHPAVCImageFileMemory@@@Z PROC		; ReadDDS

; 158  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi

; 159  : 	DDSURFACEDESC2 ddsd;
; 160  : 	DWORD dwMagic;
; 161  : 
; 162  : 	fi->glReadMem(&dwMagic,sizeof(DWORD));

	push	4
	lea	eax, DWORD PTR _dwMagic$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem

; 163  :     if(dwMagic != MAKEFOURCC('D','D','S',' ')) return BAD_FORMAT;

	cmp	DWORD PTR _dwMagic$[ebp], 542327876	; 20534444H
	je	SHORT $LN7@ReadDDS
	mov	eax, 11					; 0000000bH
	jmp	$LN8@ReadDDS
$LN7@ReadDDS:

; 164  : 
; 165  : 	if(!fi->glReadMem(&ddsd,sizeof(DDSURFACEDESC2))) return BAD_FORMAT;

	push	124					; 0000007cH
	lea	ecx, DWORD PTR _ddsd$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem
	test	eax, eax
	jne	SHORT $LN6@ReadDDS
	mov	eax, 11					; 0000000bH
	jmp	$LN8@ReadDDS
$LN6@ReadDDS:

; 166  : 
; 167  : 	 // MLR 1/25/2004 - Little kludge so F4 can read DDS files made by dxtex 
; 168  : 	if( ddsd.dwLinearSize == 0)

	cmp	DWORD PTR _ddsd$[ebp+16], 0
	jne	SHORT $LN5@ReadDDS

; 169  : 	{
; 170  : 		if( ddsd.ddpfPixelFormat.dwFourCC == MAKEFOURCC('D','X','T','3') ||
; 171  : 			ddsd.ddpfPixelFormat.dwFourCC == MAKEFOURCC('D','X','T','5'))

	cmp	DWORD PTR _ddsd$[ebp+80], 861165636	; 33545844H
	je	SHORT $LN3@ReadDDS
	cmp	DWORD PTR _ddsd$[ebp+80], 894720068	; 35545844H
	jne	SHORT $LN4@ReadDDS
$LN3@ReadDDS:

; 172  : 		{
; 173  : 			ddsd.dwLinearSize = ddsd.dwWidth*ddsd.dwWidth;

	mov	edx, DWORD PTR _ddsd$[ebp+12]
	imul	edx, DWORD PTR _ddsd$[ebp+12]
	mov	DWORD PTR _ddsd$[ebp+16], edx

; 174  : 			ddsd.dwFlags |= DDSD_LINEARSIZE;

	mov	eax, DWORD PTR _ddsd$[ebp+4]
	or	eax, 524288				; 00080000H
	mov	DWORD PTR _ddsd$[ebp+4], eax
$LN4@ReadDDS:

; 175  : 		}
; 176  : 
; 177  : 		if( ddsd.ddpfPixelFormat.dwFourCC == MAKEFOURCC('D','X','T','1'))

	cmp	DWORD PTR _ddsd$[ebp+80], 827611204	; 31545844H
	jne	SHORT $LN5@ReadDDS

; 178  : 		{
; 179  : 			ddsd.dwLinearSize = ddsd.dwWidth*ddsd.dwWidth/2;

	mov	ecx, DWORD PTR _ddsd$[ebp+12]
	imul	ecx, DWORD PTR _ddsd$[ebp+12]
	shr	ecx, 1
	mov	DWORD PTR _ddsd$[ebp+16], ecx

; 180  : 			ddsd.dwFlags |= DDSD_LINEARSIZE;

	mov	edx, DWORD PTR _ddsd$[ebp+4]
	or	edx, 524288				; 00080000H
	mov	DWORD PTR _ddsd$[ebp+4], edx
$LN5@ReadDDS:

; 181  : 		}
; 182  : 	}
; 183  : 
; 184  : 
; 185  : 	fi->image.width = ddsd.dwWidth;

	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR _ddsd$[ebp+12]
	mov	DWORD PTR [eax+32], ecx

; 186  : 	fi->image.height = ddsd.dwHeight;

	mov	edx, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR _ddsd$[ebp+8]
	mov	DWORD PTR [edx+36], eax

; 187  : 	fi->image.ddsd = ddsd;

	mov	edi, DWORD PTR _fi$[ebp]
	add	edi, 48					; 00000030H
	mov	ecx, 31					; 0000001fH
	lea	esi, DWORD PTR _ddsd$[ebp]
	rep movsd

; 188  : 	fi->image.palette = NULL;

	mov	ecx, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [ecx+40], 0

; 189  : 
; 190  : 	// Read first compressed mipmap
; 191  : 	ShiAssert(ddsd.dwFlags & DDSD_LINEARSIZE);
; 192  : 
; 193  : 	fi->image.image = (GLubyte *)glAllocateMemory(ddsd.dwLinearSize,0);

	push	0
	mov	edx, DWORD PTR _ddsd$[ebp+16]
	push	edx
	call	?glAllocateMemory@@YAPAXHH@Z		; glAllocateMemory
	add	esp, 8
	mov	ecx, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [ecx+44], eax

; 194  : 	if(!fi->image.image) return BAD_ALLOC;

	mov	edx, DWORD PTR _fi$[ebp]
	cmp	DWORD PTR [edx+44], 0
	jne	SHORT $LN1@ReadDDS
	mov	eax, 6
	jmp	SHORT $LN8@ReadDDS
$LN1@ReadDDS:

; 195  : 
; 196  : 	fi->glReadMem(fi->image.image,ddsd.dwLinearSize);

	mov	eax, DWORD PTR _ddsd$[ebp+16]
	push	eax
	mov	ecx, DWORD PTR _fi$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem

; 197  : 
; 198  : 	return GOOD_READ;

	xor	eax, eax
$LN8@ReadDDS:

; 199  : }

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ReadDDS@@YAHPAVCImageFileMemory@@@Z ENDP		; ReadDDS
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\image.cpp
_TEXT	SEGMENT
_i$ = -28						; size = 4
_tgaheader$ = -24					; size = 18
__$ArrayPad$ = -4					; size = 4
_fi$ = 8						; size = 4
?ReadTGA@@YAHPAVCImageFileMemory@@@Z PROC		; ReadTGA

; 138  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 139  : 	TGA_HEADER	tgaheader;
; 140  : 
; 141  : 	fi -> glReadMem (&tgaheader, sizeof(tgaheader));

	push	18					; 00000012H
	lea	eax, DWORD PTR _tgaheader$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem

; 142  : 	if (tgaheader.imagetype != 0x2) return BAD_FORMAT;

	movzx	ecx, BYTE PTR _tgaheader$[ebp+2]
	cmp	ecx, 2
	je	SHORT $LN4@ReadTGA
	mov	eax, 11					; 0000000bH
	jmp	$LN5@ReadTGA
$LN4@ReadTGA:

; 143  : 	fi -> glSetFilePosMem ((GLuint) tgaheader.identsize, SEEK_CUR);

	push	1
	movzx	edx, BYTE PTR _tgaheader$[ebp]
	push	edx
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glSetFilePosMem@CFileMemory@@QAEHHH@Z	; CFileMemory::glSetFilePosMem

; 144  : 	if (tgaheader.colormaptype) return BAD_FORMAT;

	movzx	eax, BYTE PTR _tgaheader$[ebp+1]
	test	eax, eax
	je	SHORT $LN3@ReadTGA
	mov	eax, 11					; 0000000bH
	jmp	SHORT $LN5@ReadTGA
$LN3@ReadTGA:

; 145  : 	if (tgaheader.bits != 24) return BAD_FORMAT;

	movzx	ecx, BYTE PTR _tgaheader$[ebp+16]
	cmp	ecx, 24					; 00000018H
	je	SHORT $LN2@ReadTGA
	mov	eax, 11					; 0000000bH
	jmp	SHORT $LN5@ReadTGA
$LN2@ReadTGA:

; 146  : 	GLint i = tgaheader.height * tgaheader.width * 3;

	movzx	edx, WORD PTR _tgaheader$[ebp+14]
	movzx	eax, WORD PTR _tgaheader$[ebp+12]
	imul	edx, eax
	imul	edx, 3
	mov	DWORD PTR _i$[ebp], edx

; 147  : 	fi -> image.width = tgaheader.width;

	movzx	ecx, WORD PTR _tgaheader$[ebp+12]
	mov	edx, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [edx+32], ecx

; 148  : 	fi -> image.height = tgaheader.height;

	movzx	eax, WORD PTR _tgaheader$[ebp+14]
	mov	ecx, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [ecx+36], eax

; 149  : 	fi -> image.palette = NULL;

	mov	edx, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [edx+40], 0

; 150  : 	fi -> image.image = (GLubyte *) glAllocateMemory (i ,0);

	push	0
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	call	?glAllocateMemory@@YAPAXHH@Z		; glAllocateMemory
	add	esp, 8
	mov	ecx, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [ecx+44], eax

; 151  : 	if (!fi -> image.image) return BAD_ALLOC;

	mov	edx, DWORD PTR _fi$[ebp]
	cmp	DWORD PTR [edx+44], 0
	jne	SHORT $LN1@ReadTGA
	mov	eax, 6
	jmp	SHORT $LN5@ReadTGA
$LN1@ReadTGA:

; 152  : 	fi -> glReadMem (fi -> image.image, i);

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fi$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem

; 153  : 	return GOOD_READ;

	xor	eax, eax
$LN5@ReadTGA:

; 154  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ReadTGA@@YAHPAVCImageFileMemory@@@Z ENDP		; ReadTGA
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\image.cpp
_TEXT	SEGMENT
_aplheader$ = -12					; size = 8
_imageSize$ = -4					; size = 4
_fi$ = 8						; size = 4
?ReadAPL@@YAHPAVCImageFileMemory@@@Z PROC		; ReadAPL

; 268  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 269  : 	APL_HEADER	aplheader;
; 270  : 	int			imageSize;
; 271  : 
; 272  : 	// Read and validate the image header
; 273  : 	fi -> glReadMem (&aplheader, sizeof(aplheader));

	push	8
	lea	eax, DWORD PTR _aplheader$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem

; 274  : 	if (aplheader.magic != 0x030870) {

	cmp	DWORD PTR _aplheader$[ebp], 198768	; 00030870H
	je	SHORT $LN5@ReadAPL

; 275  : 		return BAD_FORMAT;

	mov	eax, 11					; 0000000bH
	jmp	$LN6@ReadAPL
$LN5@ReadAPL:

; 276  : 	}
; 277  : 	fi -> image.width = aplheader.width;

	movzx	ecx, WORD PTR _aplheader$[ebp+4]
	mov	edx, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [edx+32], ecx

; 278  : 	fi -> image.height = aplheader.height;

	movzx	eax, WORD PTR _aplheader$[ebp+6]
	mov	ecx, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [ecx+36], eax

; 279  : 	imageSize = aplheader.width*aplheader.height;

	movzx	edx, WORD PTR _aplheader$[ebp+4]
	movzx	eax, WORD PTR _aplheader$[ebp+6]
	imul	edx, eax
	mov	DWORD PTR _imageSize$[ebp], edx

; 280  : 
; 281  : 	// Allocate memory for the image and its palette
; 282  : 	fi -> image.palette = (GLulong*)glAllocateMemory( 1024, 0 );

	push	0
	push	1024					; 00000400H
	call	?glAllocateMemory@@YAPAXHH@Z		; glAllocateMemory
	add	esp, 8
	mov	ecx, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [ecx+40], eax

; 283  : 	if (!fi -> image.palette) {

	mov	edx, DWORD PTR _fi$[ebp]
	cmp	DWORD PTR [edx+40], 0
	jne	SHORT $LN4@ReadAPL

; 284  : 		return (BAD_ALLOC);

	mov	eax, 6
	jmp	$LN6@ReadAPL
$LN4@ReadAPL:

; 285  : 	}
; 286  : 	fi -> image.image = (GLubyte *)glAllocateMemory( imageSize, 0 );

	push	0
	mov	eax, DWORD PTR _imageSize$[ebp]
	push	eax
	call	?glAllocateMemory@@YAPAXHH@Z		; glAllocateMemory
	add	esp, 8
	mov	ecx, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [ecx+44], eax

; 287  : 	if (!fi -> image.image) {

	mov	edx, DWORD PTR _fi$[ebp]
	cmp	DWORD PTR [edx+44], 0
	jne	SHORT $LN3@ReadAPL

; 288  : 		glReleaseMemory( fi -> image.palette );

	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4

; 289  : 		return (BAD_ALLOC);

	mov	eax, 6
	jmp	SHORT $LN6@ReadAPL
$LN3@ReadAPL:

; 290  : 	}
; 291  : 
; 292  : 	// Read the palette then the image data
; 293  : 	if ((fi -> glReadMem ( fi -> image.palette, 1024 )      != 1024)       ||
; 294  : 		(fi -> glReadMem ( fi -> image.image,   imageSize ) != imageSize)) {

	push	1024					; 00000400H
	mov	edx, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem
	cmp	eax, 1024				; 00000400H
	jne	SHORT $LN1@ReadAPL
	mov	ecx, DWORD PTR _imageSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem
	cmp	eax, DWORD PTR _imageSize$[ebp]
	je	SHORT $LN2@ReadAPL
$LN1@ReadAPL:

; 295  : 		glReleaseMemory( fi -> image.palette );

	mov	ecx, DWORD PTR _fi$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4

; 296  : 		glReleaseMemory( fi -> image.palette );

	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4

; 297  : 		return BAD_READ;

	mov	eax, 2
	jmp	SHORT $LN6@ReadAPL
$LN2@ReadAPL:

; 298  : 	}
; 299  : 
; 300  : 	return (GOOD_READ);

	xor	eax, eax
$LN6@ReadAPL:

; 301  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ReadAPL@@YAHPAVCImageFileMemory@@@Z ENDP		; ReadAPL
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\image.cpp
_TEXT	SEGMENT
_paddings$ = -96					; size = 4
tv184 = -92						; size = 4
tv87 = -88						; size = 4
_padBytes$ = -84					; size = 4
_ptr$ = -80						; size = 4
_bmprgb$ = -76						; size = 4
_palptr$ = -72						; size = 4
_j$ = -68						; size = 4
_i$ = -64						; size = 4
_bmpheader$ = -60					; size = 14
_bmpinfo$ = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_fi$ = 8						; size = 4
?ReadBMP@@YAHPAVCImageFileMemory@@@Z PROC		; ReadBMP

; 204  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 205  : 	BMP_HEADER	bmpheader;
; 206  : 	BMP_INFO	bmpinfo;
; 207  : 	BMP_RGBQUAD	bmprgb;
; 208  : 	GLubyte		*ptr, paddings[4];
; 209  : 	GLulong		*palptr;
; 210  : 	GLint		i, j, padBytes;
; 211  : 
; 212  : 	fi -> glReadMem (&bmpheader, sizeof(bmpheader));

	push	14					; 0000000eH
	lea	eax, DWORD PTR _bmpheader$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem

; 213  : 	fi -> glReadMem (&bmpinfo, sizeof(bmpinfo));

	push	40					; 00000028H
	lea	ecx, DWORD PTR _bmpinfo$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem

; 214  : 	if (bmpinfo.biCompression) return (BAD_COMPRESSION);

	cmp	DWORD PTR _bmpinfo$[ebp+16], 0
	je	SHORT $LN15@ReadBMP
	mov	eax, 9
	jmp	$LN16@ReadBMP
$LN15@ReadBMP:

; 215  : 	if (bmpinfo.biBitCount != 8 && bmpinfo.biBitCount != 24) 

	movsx	edx, WORD PTR _bmpinfo$[ebp+14]
	cmp	edx, 8
	je	SHORT $LN14@ReadBMP
	movsx	eax, WORD PTR _bmpinfo$[ebp+14]
	cmp	eax, 24					; 00000018H
	je	SHORT $LN14@ReadBMP

; 216  : 		return (BAD_COLORDEPTH);

	mov	eax, 10					; 0000000aH
	jmp	$LN16@ReadBMP
$LN14@ReadBMP:

; 217  : 	i = bmpinfo.biClrUsed;

	mov	ecx, DWORD PTR _bmpinfo$[ebp+32]
	mov	DWORD PTR _i$[ebp], ecx

; 218  : 	if (bmpinfo.biBitCount == 24) {

	movsx	edx, WORD PTR _bmpinfo$[ebp+14]
	cmp	edx, 24					; 00000018H
	jne	SHORT $LN13@ReadBMP
$LN12@ReadBMP:

; 219  : 		while (i--) fi -> glReadMem (&bmprgb, sizeof(bmprgb));

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv87[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	cmp	DWORD PTR tv87[ebp], 0
	je	SHORT $LN11@ReadBMP
	push	4
	lea	edx, DWORD PTR _bmprgb$[ebp]
	push	edx
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem
	jmp	SHORT $LN12@ReadBMP
$LN11@ReadBMP:

; 220  : 		fi -> image.palette = NULL;

	mov	eax, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [eax+40], 0

; 221  : 	}
; 222  : 	else {

	jmp	$LN10@ReadBMP
$LN13@ReadBMP:

; 223  : 		if (!i) i = 256;

	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN9@ReadBMP
	mov	DWORD PTR _i$[ebp], 256			; 00000100H
$LN9@ReadBMP:

; 224  : 		palptr = (GLulong *) glAllocateMemory (1024);

	push	1
	push	1024					; 00000400H
	call	?glAllocateMemory@@YAPAXHH@Z		; glAllocateMemory
	add	esp, 8
	mov	DWORD PTR _palptr$[ebp], eax

; 225  : 		if (!palptr) return (BAD_ALLOC);

	cmp	DWORD PTR _palptr$[ebp], 0
	jne	SHORT $LN8@ReadBMP
	mov	eax, 6
	jmp	$LN16@ReadBMP
$LN8@ReadBMP:

; 226  : 		fi -> image.palette = palptr;

	mov	ecx, DWORD PTR _fi$[ebp]
	mov	edx, DWORD PTR _palptr$[ebp]
	mov	DWORD PTR [ecx+40], edx

; 227  : 		for (j=0;j < i;j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@ReadBMP
$LN6@ReadBMP:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN7@ReadBMP:
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR _i$[ebp]
	jge	SHORT $LN10@ReadBMP

; 228  : 			fi -> glReadMem (&bmprgb, sizeof(bmprgb));

	push	4
	lea	edx, DWORD PTR _bmprgb$[ebp]
	push	edx
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem

; 229  : 			*palptr++ = (bmprgb.rgbBlue << 16) | (bmprgb.rgbGreen << 8) | bmprgb.rgbRed;

	movzx	eax, BYTE PTR _bmprgb$[ebp]
	shl	eax, 16					; 00000010H
	movzx	ecx, BYTE PTR _bmprgb$[ebp+1]
	shl	ecx, 8
	or	eax, ecx
	movzx	edx, BYTE PTR _bmprgb$[ebp+2]
	or	eax, edx
	mov	ecx, DWORD PTR _palptr$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _palptr$[ebp]
	add	edx, 4
	mov	DWORD PTR _palptr$[ebp], edx

; 230  : 		}

	jmp	SHORT $LN6@ReadBMP
$LN10@ReadBMP:

; 231  : 	}
; 232  : 
; 233  : 	fi -> image.width = bmpinfo.biWidth;

	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR _bmpinfo$[ebp+4]
	mov	DWORD PTR [eax+32], ecx

; 234  : 	fi -> image.height = bmpinfo.biHeight;

	mov	edx, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR _bmpinfo$[ebp+8]
	mov	DWORD PTR [edx+36], eax

; 235  : 
; 236  : 	padBytes = bmpinfo.biWidth & 0x3;

	mov	ecx, DWORD PTR _bmpinfo$[ebp+4]
	and	ecx, 3
	mov	DWORD PTR _padBytes$[ebp], ecx

; 237  : 
; 238  : 	j = bmpinfo.biBitCount >> 3;

	movsx	edx, WORD PTR _bmpinfo$[ebp+14]
	sar	edx, 3
	mov	DWORD PTR _j$[ebp], edx

; 239  : 	i = j * (fi -> image.width * fi -> image.height);

	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR _fi$[ebp]
	mov	edx, DWORD PTR [eax+32]
	imul	edx, DWORD PTR [ecx+36]
	imul	edx, DWORD PTR _j$[ebp]
	mov	DWORD PTR _i$[ebp], edx

; 240  : 	fi -> image.image = (GLubyte *) glAllocateMemory (i, 0);

	push	0
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	call	?glAllocateMemory@@YAPAXHH@Z		; glAllocateMemory
	add	esp, 8
	mov	ecx, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [ecx+44], eax

; 241  : 	if (!fi -> image.image) return (BAD_ALLOC);

	mov	edx, DWORD PTR _fi$[ebp]
	cmp	DWORD PTR [edx+44], 0
	jne	SHORT $LN4@ReadBMP
	mov	eax, 6
	jmp	SHORT $LN16@ReadBMP
$LN4@ReadBMP:

; 242  : 
; 243  : 	ptr = (unsigned char *) fi -> image.image + i;

	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _ptr$[ebp], ecx

; 244  : 	i = j * fi -> image.width;

	mov	edx, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _i$[ebp], eax

; 245  : 	j = fi -> image.height;

	mov	ecx, DWORD PTR _fi$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _j$[ebp], edx
$LN3@ReadBMP:

; 246  : 	while (j--) {

	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR tv184[ebp], eax
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
	cmp	DWORD PTR tv184[ebp], 0
	je	SHORT $LN2@ReadBMP

; 247  : 		ptr -= i;

	mov	edx, DWORD PTR _ptr$[ebp]
	sub	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _ptr$[ebp], edx

; 248  : 		fi -> glReadMem (ptr, i);

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem

; 249  : 		if (padBytes) fi -> glReadMem (&paddings, padBytes);

	cmp	DWORD PTR _padBytes$[ebp], 0
	je	SHORT $LN1@ReadBMP
	mov	edx, DWORD PTR _padBytes$[ebp]
	push	edx
	lea	eax, DWORD PTR _paddings$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem
$LN1@ReadBMP:

; 250  : 	}

	jmp	SHORT $LN3@ReadBMP
$LN2@ReadBMP:

; 251  : 	return (GOOD_READ);

	xor	eax, eax
$LN16@ReadBMP:

; 252  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ReadBMP@@YAHPAVCImageFileMemory@@@Z ENDP		; ReadBMP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\image.cpp
_TEXT	SEGMENT
_totalsize$ = -944					; size = 4
tv162 = -940						; size = 4
_bytes$ = -936						; size = 4
_palStop$ = -932					; size = 4
_i$ = -928						; size = 4
_j$1 = -924						; size = 4
_palOut$ = -920						; size = 4
_image$ = -916						; size = 4
_palIn$ = -912						; size = 4
_n$2 = -908						; size = 4
_c$3 = -901						; size = 1
_pcx$ = -900						; size = 128
_pcxPalette$ = -772					; size = 768
__$ArrayPad$ = -4					; size = 4
_fi$ = 8						; size = 4
?UnpackPCX@@YAHPAVCImageFileMemory@@@Z PROC		; UnpackPCX

; 825  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 944				; 000003b0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 826  : 	PCXHEAD		pcx;
; 827  : 	GLint		bytes;
; 828  : 	GLint		i;
; 829  : 	GLint		totalsize;
; 830  : 	GLubyte		*image;
; 831  : 	GLubyte		pcxPalette[768];
; 832  : 	GLubyte		*palIn;
; 833  : 	GLulong		*palOut, *palStop;
; 834  : 	
; 835  : 	if( (fi->glReadMem((GLubyte *)&pcx, sizeof(PCXHEAD)) != sizeof(PCXHEAD))	||
; 836  : 	    (pcx.manufacturer != 10)												||
; 837  : 		(pcx.version != 5) )		{

	push	128					; 00000080H
	lea	eax, DWORD PTR _pcx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem
	cmp	eax, 128				; 00000080H
	jne	SHORT $LN17@UnpackPCX
	movsx	ecx, BYTE PTR _pcx$[ebp]
	cmp	ecx, 10					; 0000000aH
	jne	SHORT $LN17@UnpackPCX
	movsx	edx, BYTE PTR _pcx$[ebp+1]
	cmp	edx, 5
	je	SHORT $LN18@UnpackPCX
$LN17@UnpackPCX:

; 838  : 
; 839  : 		// The header data didn't match our expectations
; 840  : 		return (BAD_READ);

	mov	eax, 2
	jmp	$LN19@UnpackPCX
$LN18@UnpackPCX:

; 841  : 	}
; 842  : 
; 843  : 	bytes = pcx.bytes_per_line;

	movsx	eax, WORD PTR _pcx$[ebp+66]
	mov	DWORD PTR _bytes$[ebp], eax

; 844  : 	fi->image.width = pcx.xmax - pcx.xmin + 1;

	movsx	ecx, WORD PTR _pcx$[ebp+8]
	movsx	edx, WORD PTR _pcx$[ebp+4]
	sub	ecx, edx
	add	ecx, 1
	mov	eax, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 845  : 	fi->image.height = pcx.ymax - pcx.ymin + 1;

	movsx	ecx, WORD PTR _pcx$[ebp+10]
	movsx	edx, WORD PTR _pcx$[ebp+6]
	sub	ecx, edx
	add	ecx, 1
	mov	eax, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [eax+36], ecx

; 846  : 	totalsize = (GLint) fi->image.width * (GLint) fi->image.height;

	mov	ecx, DWORD PTR _fi$[ebp]
	mov	edx, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR [ecx+32]
	imul	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _totalsize$[ebp], eax

; 847  : 
; 848  : 	// Allocate memory for the image data
; 849  : 	fi->image.image = (GLubyte *) glAllocateMemory ( totalsize, 0 );

	push	0
	mov	ecx, DWORD PTR _totalsize$[ebp]
	push	ecx
	call	?glAllocateMemory@@YAPAXHH@Z		; glAllocateMemory
	add	esp, 8
	mov	edx, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [edx+44], eax

; 850  : 	if (!fi->image.image) {

	mov	eax, DWORD PTR _fi$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jne	SHORT $LN16@UnpackPCX

; 851  : 		return (BAD_ALLOC);

	mov	eax, 6
	jmp	$LN19@UnpackPCX
$LN16@UnpackPCX:

; 852  : 	}
; 853  : 
; 854  : 	// Read the image data
; 855  : 	image = fi->image.image;

	mov	ecx, DWORD PTR _fi$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR _image$[ebp], edx

; 856  : 	for(i=0;i<fi->image.height;i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN15@UnpackPCX
$LN14@UnpackPCX:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN15@UnpackPCX:
	mov	ecx, DWORD PTR _fi$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+36]
	jge	$LN13@UnpackPCX

; 857  : 		GLint	n, j;
; 858  : 		GLubyte	c;
; 859  : 		n = 0;

	mov	DWORD PTR _n$2[ebp], 0
$LN12@UnpackPCX:

; 860  : 		do {
; 861  : 			c = (GLubyte) fi->glReadCharMem();

	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadCharMem@CFileMemory@@QAEIXZ	; CFileMemory::glReadCharMem
	mov	BYTE PTR _c$3[ebp], al

; 862  : 			if ((c & 0xc0) == 0xc0) {

	movzx	eax, BYTE PTR _c$3[ebp]
	and	eax, 192				; 000000c0H
	cmp	eax, 192				; 000000c0H
	jne	SHORT $LN9@UnpackPCX

; 863  : 				j = c & 0x3f;

	movzx	ecx, BYTE PTR _c$3[ebp]
	and	ecx, 63					; 0000003fH
	mov	DWORD PTR _j$1[ebp], ecx

; 864  : 				c = (GLubyte) fi->glReadCharMem();

	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadCharMem@CFileMemory@@QAEIXZ	; CFileMemory::glReadCharMem
	mov	BYTE PTR _c$3[ebp], al
$LN8@UnpackPCX:

; 865  : 				while (j--) image[n++] = c;

	mov	edx, DWORD PTR _j$1[ebp]
	mov	DWORD PTR tv162[ebp], edx
	mov	eax, DWORD PTR _j$1[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$1[ebp], eax
	cmp	DWORD PTR tv162[ebp], 0
	je	SHORT $LN7@UnpackPCX
	mov	ecx, DWORD PTR _image$[ebp]
	add	ecx, DWORD PTR _n$2[ebp]
	mov	dl, BYTE PTR _c$3[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _n$2[ebp]
	add	eax, 1
	mov	DWORD PTR _n$2[ebp], eax
	jmp	SHORT $LN8@UnpackPCX
$LN7@UnpackPCX:

; 866  : 			}
; 867  : 			else image[n++] = c;

	jmp	SHORT $LN11@UnpackPCX
$LN9@UnpackPCX:
	mov	ecx, DWORD PTR _image$[ebp]
	add	ecx, DWORD PTR _n$2[ebp]
	mov	dl, BYTE PTR _c$3[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _n$2[ebp]
	add	eax, 1
	mov	DWORD PTR _n$2[ebp], eax
$LN11@UnpackPCX:

; 868  : 		} while (n < bytes);

	mov	ecx, DWORD PTR _n$2[ebp]
	cmp	ecx, DWORD PTR _bytes$[ebp]
	jl	$LN12@UnpackPCX

; 869  : 		image += fi->image.width;

	mov	edx, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR _image$[ebp]
	add	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _image$[ebp], eax

; 870  : 	}

	jmp	$LN14@UnpackPCX
$LN13@UnpackPCX:

; 871  : 
; 872  : 
; 873  : 	// Read the palette data
; 874  : 	if ( (fi->glReadCharMem() != 0xc) || (!fi->glReadMem(pcxPalette,768)) ) {

	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadCharMem@CFileMemory@@QAEIXZ	; CFileMemory::glReadCharMem
	cmp	eax, 12					; 0000000cH
	jne	SHORT $LN4@UnpackPCX
	push	768					; 00000300H
	lea	ecx, DWORD PTR _pcxPalette$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem
	test	eax, eax
	jne	SHORT $LN5@UnpackPCX
$LN4@UnpackPCX:

; 875  : 		glReleaseMemory ( (char *) fi->image.image );

	mov	edx, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4

; 876  : 		return (BAD_ALLOC);

	mov	eax, 6
	jmp	$LN19@UnpackPCX
$LN5@UnpackPCX:

; 877  : 	}
; 878  : 
; 879  : 	// Allocate memory for the palette
; 880  : 	fi->image.palette = (GLulong *) glAllocateMemory ( 1024 );

	push	1
	push	1024					; 00000400H
	call	?glAllocateMemory@@YAPAXHH@Z		; glAllocateMemory
	add	esp, 8
	mov	ecx, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [ecx+40], eax

; 881  : 	if (!fi->image.palette) {

	mov	edx, DWORD PTR _fi$[ebp]
	cmp	DWORD PTR [edx+40], 0
	jne	SHORT $LN3@UnpackPCX

; 882  : 		glReleaseMemory ( (char *) fi->image.image );

	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4

; 883  : 		return (BAD_ALLOC);

	mov	eax, 6
	jmp	$LN19@UnpackPCX
$LN3@UnpackPCX:

; 884  : 	}
; 885  : 
; 886  : 	// Unpack the palette (24 bit to 32 bit)
; 887  : 	palOut = fi->image.palette;

	mov	edx, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR _palOut$[ebp], eax

; 888  : 	palStop = fi->image.palette + 256;

	mov	ecx, DWORD PTR _fi$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1024				; 00000400H
	mov	DWORD PTR _palStop$[ebp], edx

; 889  : 	palIn = pcxPalette;

	lea	eax, DWORD PTR _pcxPalette$[ebp]
	mov	DWORD PTR _palIn$[ebp], eax
$LN2@UnpackPCX:

; 890  : 	while (palOut < palStop) {

	mov	ecx, DWORD PTR _palOut$[ebp]
	cmp	ecx, DWORD PTR _palStop$[ebp]
	jae	SHORT $LN1@UnpackPCX

; 891  : 		*palOut++ = 0xFF000000 | (palIn[2] << 16) | (palIn[1] << 8) | palIn[0];

	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _palIn$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	shl	ecx, 16					; 00000010H
	or	ecx, -16777216				; ff000000H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _palIn$[ebp]
	movzx	edx, BYTE PTR [eax+edx]
	shl	edx, 8
	or	ecx, edx
	mov	eax, 1
	imul	eax, 0
	mov	edx, DWORD PTR _palIn$[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	or	ecx, eax
	mov	edx, DWORD PTR _palOut$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _palOut$[ebp]
	add	eax, 4
	mov	DWORD PTR _palOut$[ebp], eax

; 892  : 		palIn += 3;

	mov	ecx, DWORD PTR _palIn$[ebp]
	add	ecx, 3
	mov	DWORD PTR _palIn$[ebp], ecx

; 893  : 	}

	jmp	SHORT $LN2@UnpackPCX
$LN1@UnpackPCX:

; 894  : 
; 895  : 
; 896  : 	return (GOOD_READ);

	xor	eax, eax
$LN19@UnpackPCX:

; 897  : }       /* UnpackPCX */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?UnpackPCX@@YAHPAVCImageFileMemory@@@Z ENDP		; UnpackPCX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\image.cpp
_TEXT	SEGMENT
_doIFF$ = -36						; size = 4
_lpBitmap$ = -32					; size = 4
_lpPalette$ = -28					; size = 4
_size$ = -24						; size = 4
_lpHeader$ = -20					; size = 4
_header$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_fi$ = 8						; size = 4
?UnpackLBM@@YAHPAVCImageFileMemory@@@Z PROC		; UnpackLBM

; 641  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 642  : 	GLbyte		header [12];
; 643  : 	GLint		size;
; 644  : 	LBM_BMHD	*lpHeader;
; 645  : 	GLint 		doIFF;
; 646  : 
; 647  : 	fi->glSetFilePosMem (0, SEEK_SET );

	push	0
	push	0
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glSetFilePosMem@CFileMemory@@QAEHHH@Z	; CFileMemory::glSetFilePosMem

; 648  : 	fi->glReadMem ( (GLubyte *) header, 12);

	push	12					; 0000000cH
	lea	eax, DWORD PTR _header$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem

; 649  : 	if (memcmp ((GLubyte *) &header[8], (GLubyte *) "PBM ", 4)) doIFF = 0;

	push	4
	push	OFFSET ??_C@_04NNBFGNKO@PBM?5?$AA@
	mov	ecx, 1
	shl	ecx, 3
	lea	edx, DWORD PTR _header$[ebp+ecx]
	push	edx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN6@UnpackLBM
	mov	DWORD PTR _doIFF$[ebp], 0
	jmp	SHORT $LN5@UnpackLBM
$LN6@UnpackLBM:

; 650  : 	else doIFF = 1;

	mov	DWORD PTR _doIFF$[ebp], 1
$LN5@UnpackLBM:

; 651  : 	fi->glReadMem ( (GLubyte *) header, 4 );

	push	4
	lea	eax, DWORD PTR _header$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem

; 652  : 	if (memcmp ((GLubyte *) header, (GLubyte *) "BMHD", 4)) return NULL;

	push	4
	push	OFFSET ??_C@_04JIAMNFFC@BMHD?$AA@
	lea	ecx, DWORD PTR _header$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN4@UnpackLBM
	xor	eax, eax
	jmp	$LN7@UnpackLBM
$LN4@UnpackLBM:

; 653  : 	fi->glReadMem ( (GLubyte *) &size, 4 );

	push	4
	lea	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem

; 654  : 	size = motr2intl ( size );

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	?motr2intl@@YAHH@Z			; motr2intl
	add	esp, 4
	mov	DWORD PTR _size$[ebp], eax

; 655  : 	lpHeader = (LBM_BMHD *) glAllocateMemory ( size, 0 );

	push	0
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	call	?glAllocateMemory@@YAPAXHH@Z		; glAllocateMemory
	add	esp, 8
	mov	DWORD PTR _lpHeader$[ebp], eax

; 656  : 	if (lpHeader == NULL) return (BAD_READ);

	cmp	DWORD PTR _lpHeader$[ebp], 0
	jne	SHORT $LN3@UnpackLBM
	mov	eax, 2
	jmp	$LN7@UnpackLBM
$LN3@UnpackLBM:

; 657  : 	fi->glReadMem ( lpHeader, size );

	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _lpHeader$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem

; 658  : 	fi->image.width = (GLshort) motr2inti ( lpHeader->width );

	mov	ecx, DWORD PTR _lpHeader$[ebp]
	movsx	edx, WORD PTR [ecx]
	push	edx
	call	?motr2inti@@YAHH@Z			; motr2inti
	add	esp, 4
	cwde
	mov	ecx, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [ecx+32], eax

; 659  : 	fi->image.height = (GLshort) motr2inti ( lpHeader->height );

	mov	edx, DWORD PTR _lpHeader$[ebp]
	movsx	eax, WORD PTR [edx+2]
	push	eax
	call	?motr2inti@@YAHH@Z			; motr2inti
	add	esp, 4
	movsx	ecx, ax
	mov	edx, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [edx+36], ecx

; 660  : 
; 661  : 	GLulong	*lpPalette;
; 662  : 	lpPalette = ReadLBMColorMap (fi);

	mov	eax, DWORD PTR _fi$[ebp]
	push	eax
	call	?ReadLBMColorMap@@YAPAKPAVCImageFileMemory@@@Z ; ReadLBMColorMap
	add	esp, 4
	mov	DWORD PTR _lpPalette$[ebp], eax

; 663  : 	if (lpPalette == NULL) {

	cmp	DWORD PTR _lpPalette$[ebp], 0
	jne	SHORT $LN2@UnpackLBM

; 664  : 		glReleaseMemory ( (char *) lpHeader );

	mov	ecx, DWORD PTR _lpHeader$[ebp]
	push	ecx
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4

; 665  : 		return (BAD_READ);

	mov	eax, 2
	jmp	SHORT $LN7@UnpackLBM
$LN2@UnpackLBM:

; 666  : 	}
; 667  : 	fi->image.palette = lpPalette;

	mov	edx, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR _lpPalette$[ebp]
	mov	DWORD PTR [edx+40], eax

; 668  : 
; 669  : 	GLubyte	*lpBitmap;
; 670  : 	lpBitmap = ReadLBMBody (fi, lpHeader, doIFF);

	mov	ecx, DWORD PTR _doIFF$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpHeader$[ebp]
	push	edx
	mov	eax, DWORD PTR _fi$[ebp]
	push	eax
	call	?ReadLBMBody@@YAPAEPAVCImageFileMemory@@PAULBM_BMHD@@H@Z ; ReadLBMBody
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _lpBitmap$[ebp], eax

; 671  : 	if (lpBitmap == NULL) {

	cmp	DWORD PTR _lpBitmap$[ebp], 0
	jne	SHORT $LN1@UnpackLBM

; 672  : 		glReleaseMemory ( (char *) lpHeader );

	mov	ecx, DWORD PTR _lpHeader$[ebp]
	push	ecx
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4

; 673  : 		glReleaseMemory ( (char *) lpPalette );

	mov	edx, DWORD PTR _lpPalette$[ebp]
	push	edx
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4

; 674  : 		return (BAD_READ);

	mov	eax, 2
	jmp	SHORT $LN7@UnpackLBM
$LN1@UnpackLBM:

; 675  : 	}
; 676  : 	fi->image.image = lpBitmap;

	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR _lpBitmap$[ebp]
	mov	DWORD PTR [eax+44], ecx

; 677  : 	glReleaseMemory ( (char *) lpHeader );

	mov	edx, DWORD PTR _lpHeader$[ebp]
	push	edx
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4

; 678  : 	return (GOOD_READ);

	xor	eax, eax
$LN7@UnpackLBM:

; 679  : }       /* UnpackLBM */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?UnpackLBM@@YAHPAVCImageFileMemory@@@Z ENDP		; UnpackLBM
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\image.cpp
_TEXT	SEGMENT
_b$ = -824						; size = 4
_t$ = -820						; size = 4
_palStop$ = -816					; size = 4
_palIn$ = -812						; size = 4
_c$ = -808						; size = 4
_palOut$ = -804						; size = 4
_gh$ = -800						; size = 13
_iblk$ = -784						; size = 9
_tempPalette$ = -772					; size = 768
__$ArrayPad$ = -4					; size = 4
_fi$ = 8						; size = 4
?UnpackGIF@@YAHPAVCImageFileMemory@@@Z PROC		; UnpackGIF

; 316  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 824				; 00000338H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 317  : 	GIFHEADER       gh;
; 318  : 	IMAGEBLOCK      iblk;
; 319  : 	GLint           t, b, c;
; 320  : 	GLulong			*palOut, *palStop;
; 321  : 	GLubyte			*palIn;
; 322  : 	GLubyte			tempPalette[768];
; 323  : 
; 324  : // make sure it's a GIF file
; 325  : 	if (fi -> glReadMem((GLubyte *)&gh, sizeof(gh)) != sizeof(gh) || memcmp(gh.sig, "GIF", 3)) {

	push	13					; 0000000dH
	lea	eax, DWORD PTR _gh$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem
	cmp	eax, 13					; 0000000dH
	jne	SHORT $LN21@UnpackGIF
	push	3
	push	OFFSET ??_C@_03BBABOKL@GIF?$AA@
	lea	ecx, DWORD PTR _gh$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN22@UnpackGIF
$LN21@UnpackGIF:

; 326  : 		return(BAD_FILE);

	mov	eax, 1
	jmp	$LN23@UnpackGIF
$LN22@UnpackGIF:

; 327  : 	}
; 328  : 
; 329  : // get screen dimensions
; 330  : 	fi -> image.width = gh.screenwidth;

	movzx	edx, WORD PTR _gh$[ebp+6]
	mov	eax, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [eax+32], edx

; 331  : 	fi -> image.height = gh.screenheight;

	movzx	ecx, WORD PTR _gh$[ebp+8]
	mov	edx, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [edx+36], ecx

; 332  : 	fi -> image.palette = NULL;

	mov	eax, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [eax+40], 0

; 333  : 
; 334  : // get colour map if there is one
; 335  : 	if (gh.flags & 0x80)    {

	movzx	ecx, BYTE PTR _gh$[ebp+10]
	and	ecx, 128				; 00000080H
	je	$LN15@UnpackGIF

; 336  : 		c = 3 * (1 << ((gh.flags & 7) + 1));

	movzx	ecx, BYTE PTR _gh$[ebp+10]
	and	ecx, 7
	add	ecx, 1
	mov	edx, 1
	shl	edx, cl
	imul	edx, 3
	mov	DWORD PTR _c$[ebp], edx

; 337  : 		if (fi -> glReadMem(tempPalette,c) != c) {

	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempPalette$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem
	cmp	eax, DWORD PTR _c$[ebp]
	je	SHORT $LN19@UnpackGIF

; 338  : 			return(BAD_READ);

	mov	eax, 2
	jmp	$LN23@UnpackGIF
$LN19@UnpackGIF:

; 339  : 		}
; 340  : 
; 341  : 		palOut = (GLulong *) glAllocateMemory ( 1024 );

	push	1
	push	1024					; 00000400H
	call	?glAllocateMemory@@YAPAXHH@Z		; glAllocateMemory
	add	esp, 8
	mov	DWORD PTR _palOut$[ebp], eax

; 342  : 		if ( !palOut ) {

	cmp	DWORD PTR _palOut$[ebp], 0
	jne	SHORT $LN18@UnpackGIF

; 343  : 			return BAD_ALLOC;

	mov	eax, 6
	jmp	$LN23@UnpackGIF
$LN18@UnpackGIF:

; 344  : 		}
; 345  : 
; 346  : 		palIn = tempPalette;

	lea	edx, DWORD PTR _tempPalette$[ebp]
	mov	DWORD PTR _palIn$[ebp], edx

; 347  : 		fi->image.palette = palOut;

	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR _palOut$[ebp]
	mov	DWORD PTR [eax+40], ecx

; 348  : 		palStop = palOut+256;

	mov	edx, DWORD PTR _palOut$[ebp]
	add	edx, 1024				; 00000400H
	mov	DWORD PTR _palStop$[ebp], edx
$LN17@UnpackGIF:

; 349  : 		while (palOut < palStop) {

	mov	eax, DWORD PTR _palOut$[ebp]
	cmp	eax, DWORD PTR _palStop$[ebp]
	jae	SHORT $LN15@UnpackGIF

; 350  : 			*palOut++ = 0xFF000000 | (palIn[2] << 16) | (palIn[1] << 8) | palIn[0];

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _palIn$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 16					; 00000010H
	or	eax, -16777216				; ff000000H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _palIn$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	shl	ecx, 8
	or	eax, ecx
	mov	edx, 1
	imul	edx, 0
	mov	ecx, DWORD PTR _palIn$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	or	eax, edx
	mov	ecx, DWORD PTR _palOut$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _palOut$[ebp]
	add	edx, 4
	mov	DWORD PTR _palOut$[ebp], edx

; 351  : 			palIn += 3;

	mov	eax, DWORD PTR _palIn$[ebp]
	add	eax, 3
	mov	DWORD PTR _palIn$[ebp], eax

; 352  : 		}

	jmp	SHORT $LN17@UnpackGIF
$LN15@UnpackGIF:

; 353  : 	}
; 354  : 
; 355  : 	while((c = fi -> glReadCharMem()) == ',' || c == '!' || c == 0) {

	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadCharMem@CFileMemory@@QAEIXZ	; CFileMemory::glReadCharMem
	mov	DWORD PTR _c$[ebp], eax
	cmp	DWORD PTR _c$[ebp], 44			; 0000002cH
	je	SHORT $LN13@UnpackGIF
	cmp	DWORD PTR _c$[ebp], 33			; 00000021H
	je	SHORT $LN13@UnpackGIF
	cmp	DWORD PTR _c$[ebp], 0
	jne	$LN14@UnpackGIF
$LN13@UnpackGIF:

; 356  : 		if (c == ',') {

	cmp	DWORD PTR _c$[ebp], 44			; 0000002cH
	jne	$LN12@UnpackGIF

; 357  : 			if(fi -> glReadMem(&iblk, sizeof(iblk)) !=  sizeof(iblk)) {

	push	9
	lea	ecx, DWORD PTR _iblk$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem
	cmp	eax, 9
	je	SHORT $LN11@UnpackGIF

; 358  : 				glReleaseMemory ((char *) fi -> image.palette);

	mov	edx, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4

; 359  : 				return(BAD_READ);

	mov	eax, 2
	jmp	$LN23@UnpackGIF
$LN11@UnpackGIF:

; 360  : 			}
; 361  : 			fi -> image.width = iblk.width;

	movzx	ecx, WORD PTR _iblk$[ebp+4]
	mov	edx, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [edx+32], ecx

; 362  : 			fi -> image.height=iblk.height;

	movzx	eax, WORD PTR _iblk$[ebp+6]
	mov	ecx, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [ecx+36], eax

; 363  : 			fi -> image.image = (GLubyte *) glAllocateMemory ( fi->image.width * fi->image.height, 0 );

	push	0
	mov	edx, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	imul	ecx, DWORD PTR [eax+36]
	push	ecx
	call	?glAllocateMemory@@YAPAXHH@Z		; glAllocateMemory
	add	esp, 8
	mov	edx, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [edx+44], eax

; 364  : 			if (!fi -> image.image) {

	mov	eax, DWORD PTR _fi$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jne	SHORT $LN10@UnpackGIF

; 365  : 				glReleaseMemory ( (char *) fi->image.palette );

	mov	ecx, DWORD PTR _fi$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4

; 366  : 				return (BAD_ALLOC);

	mov	eax, 6
	jmp	$LN23@UnpackGIF
$LN10@UnpackGIF:

; 367  : 			}
; 368  : 			if(iblk.flags & 0x80) {

	movzx	eax, BYTE PTR _iblk$[ebp+8]
	and	eax, 128				; 00000080H
	je	$LN9@UnpackGIF

; 369  : 				b = 3*(1<<((iblk.flags & 0x0007) + 1));

	movzx	ecx, BYTE PTR _iblk$[ebp+8]
	and	ecx, 7
	add	ecx, 1
	mov	edx, 1
	shl	edx, cl
	imul	edx, 3
	mov	DWORD PTR _b$[ebp], edx

; 370  : 				if(fi->glReadMem(tempPalette,b) != c) {

	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempPalette$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadMem@CFileMemory@@QAEHPAXH@Z	; CFileMemory::glReadMem
	cmp	eax, DWORD PTR _c$[ebp]
	je	SHORT $LN8@UnpackGIF

; 371  : 					glReleaseMemory ( (char *) fi->image.palette );

	mov	edx, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4

; 372  : 					glReleaseMemory ( (char *) fi->image.image );

	mov	ecx, DWORD PTR _fi$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4

; 373  : 					return(BAD_READ);

	mov	eax, 2
	jmp	$LN23@UnpackGIF
$LN8@UnpackGIF:

; 374  : 				}
; 375  : 
; 376  : 				glReleaseMemory ( (char *) fi->image.palette );

	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4

; 377  : 				palOut = (GLulong *) glAllocateMemory ( 1024 );

	push	1
	push	1024					; 00000400H
	call	?glAllocateMemory@@YAPAXHH@Z		; glAllocateMemory
	add	esp, 8
	mov	DWORD PTR _palOut$[ebp], eax

; 378  : 				if ( !palOut ) {

	cmp	DWORD PTR _palOut$[ebp], 0
	jne	SHORT $LN7@UnpackGIF

; 379  : 					return BAD_ALLOC;

	mov	eax, 6
	jmp	$LN23@UnpackGIF
$LN7@UnpackGIF:

; 380  : 				}
; 381  : 
; 382  : 				palIn = tempPalette;

	lea	edx, DWORD PTR _tempPalette$[ebp]
	mov	DWORD PTR _palIn$[ebp], edx

; 383  : 				fi->image.palette = palOut;

	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR _palOut$[ebp]
	mov	DWORD PTR [eax+40], ecx

; 384  : 				palStop = palOut+256;

	mov	edx, DWORD PTR _palOut$[ebp]
	add	edx, 1024				; 00000400H
	mov	DWORD PTR _palStop$[ebp], edx
$LN6@UnpackGIF:

; 385  : 				while (palOut < palStop) {

	mov	eax, DWORD PTR _palOut$[ebp]
	cmp	eax, DWORD PTR _palStop$[ebp]
	jae	SHORT $LN9@UnpackGIF

; 386  : 					*palOut = 0xFF000000 | (palIn[2] << 16) | (palIn[1] << 8) | palIn[0];

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _palIn$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 16					; 00000010H
	or	eax, -16777216				; ff000000H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _palIn$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	shl	ecx, 8
	or	eax, ecx
	mov	edx, 1
	imul	edx, 0
	mov	ecx, DWORD PTR _palIn$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	or	eax, edx
	mov	ecx, DWORD PTR _palOut$[ebp]
	mov	DWORD PTR [ecx], eax

; 387  : 					palIn += 3;

	mov	edx, DWORD PTR _palIn$[ebp]
	add	edx, 3
	mov	DWORD PTR _palIn$[ebp], edx

; 388  : 				}

	jmp	SHORT $LN6@UnpackGIF
$LN9@UnpackGIF:

; 389  : 			}
; 390  : 			if((c=fi->glReadCharMem())==EOF) {

	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glReadCharMem@CFileMemory@@QAEIXZ	; CFileMemory::glReadCharMem
	mov	DWORD PTR _c$[ebp], eax
	cmp	DWORD PTR _c$[ebp], -1
	jne	SHORT $LN4@UnpackGIF

; 391  : 				glReleaseMemory ( (char *) fi->image.palette );

	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4

; 392  : 				glReleaseMemory ( (char *) fi->image.image );

	mov	edx, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4

; 393  : 				return(BAD_FILE);

	mov	eax, 1
	jmp	SHORT $LN23@UnpackGIF
$LN4@UnpackGIF:

; 394  : 			}
; 395  : 			t = GIF_UnpackImage(c,fi,iblk.flags);

	movzx	ecx, BYTE PTR _iblk$[ebp+8]
	push	ecx
	mov	edx, DWORD PTR _fi$[ebp]
	push	edx
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	call	?GIF_UnpackImage@@YAHHPAVCImageFileMemory@@H@Z ; GIF_UnpackImage
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _t$[ebp], eax

; 396  : 			if(t != GOOD_READ) {

	cmp	DWORD PTR _t$[ebp], 0
	je	SHORT $LN3@UnpackGIF

; 397  : 				glReleaseMemory ( (char *) fi->image.palette );

	mov	ecx, DWORD PTR _fi$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4

; 398  : 				glReleaseMemory ( (char *) fi->image.image );

	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4

; 399  : 				return(t);              /* quit if there was an error */        

	mov	eax, DWORD PTR _t$[ebp]
	jmp	SHORT $LN23@UnpackGIF
$LN3@UnpackGIF:

; 400  : 			}
; 401  : 		}

	jmp	SHORT $LN2@UnpackGIF
$LN12@UnpackGIF:

; 402  : 		else if(c == '!') GIF_SkipExtension(fi);

	cmp	DWORD PTR _c$[ebp], 33			; 00000021H
	jne	SHORT $LN2@UnpackGIF
	mov	edx, DWORD PTR _fi$[ebp]
	push	edx
	call	?GIF_SkipExtension@@YAXPAVCImageFileMemory@@@Z ; GIF_SkipExtension
	add	esp, 4
$LN2@UnpackGIF:

; 403  : 	}

	jmp	$LN15@UnpackGIF
$LN14@UnpackGIF:

; 404  : 	return(GOOD_READ);

	xor	eax, eax
$LN23@UnpackGIF:

; 405  : }       /* UnpackGIF */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?UnpackGIF@@YAHPAVCImageFileMemory@@@Z ENDP		; UnpackGIF
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\image.cpp
_TEXT	SEGMENT
_a$ = -1112						; size = 4
tv175 = -1108						; size = 4
tv209 = -1104						; size = 4
tv159 = -1100						; size = 4
tv192 = -1096						; size = 4
tv151 = -1092						; size = 4
tv89 = -1088						; size = 4
tv64 = -1084						; size = 4
tv172 = -1080						; size = 4
tv148 = -1076						; size = 4
_i$ = -1072						; size = 4
_sizebmp$ = -1068					; size = 4
_bmpptr$ = -1064					; size = 4
_g$ = -1060						; size = 4
_b$ = -1056						; size = 4
_j$ = -1052						; size = 4
_sptr$ = -1048						; size = 4
_lptr$ = -1044						; size = 4
_r$ = -1040						; size = 4
_totalsize$ = -1036					; size = 4
_ptr$ = -1032						; size = 4
_rgbval$ = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
_fi$ = 8						; size = 4
_mode$ = 12						; size = 4
_chromakey$ = 16					; size = 4
?ConvertImage@@YAPAEPAUGLImageInfo@@HPAI@Z PROC		; ConvertImage

; 28   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1112				; 00000458H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 29   : 	GLuint		i, j, r, g, b, a;
; 30   : 	GLuint		totalsize, sizebmp=1, rgbval[256];

	mov	DWORD PTR _sizebmp$[ebp], 1

; 31   : 	GLubyte		*bmpptr;
; 32   : 	GLubyte		*ptr;
; 33   : 	GLushort	*sptr;
; 34   : 	GLulong		*lptr;
; 35   : 
; 36   : 	switch (mode) {

	mov	eax, DWORD PTR _mode$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	jle	SHORT $LN35@ConvertIma
	cmp	DWORD PTR tv64[ebp], 2
	jle	SHORT $LN34@ConvertIma
	cmp	DWORD PTR tv64[ebp], 3
	je	SHORT $LN33@ConvertIma
$LN35@ConvertIma:

; 37   : 		default:
; 38   : 		case COLOR_256:
; 39   : 			return (0);

	xor	eax, eax
	jmp	$LN38@ConvertIma
$LN34@ConvertIma:

; 40   : 		case COLOR_32K:
; 41   : 		case COLOR_64K:
; 42   : 			sizebmp = 2;

	mov	DWORD PTR _sizebmp$[ebp], 2

; 43   : 			break;

	jmp	SHORT $LN36@ConvertIma
$LN33@ConvertIma:

; 44   : 		case COLOR_16M:
; 45   : 			sizebmp = 4;

	mov	DWORD PTR _sizebmp$[ebp], 4
$LN36@ConvertIma:

; 46   : 			break;
; 47   : 	}
; 48   : 	totalsize = fi -> width * fi -> height;

	mov	ecx, DWORD PTR _fi$[ebp]
	mov	edx, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR [ecx]
	imul	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _totalsize$[ebp], eax

; 49   : 	sizebmp *= totalsize;

	mov	ecx, DWORD PTR _sizebmp$[ebp]
	imul	ecx, DWORD PTR _totalsize$[ebp]
	mov	DWORD PTR _sizebmp$[ebp], ecx

; 50   : 	bmpptr = (unsigned char *) glAllocateMemory (sizebmp, 0);

	push	0
	mov	edx, DWORD PTR _sizebmp$[ebp]
	push	edx
	call	?glAllocateMemory@@YAPAXHH@Z		; glAllocateMemory
	add	esp, 8
	mov	DWORD PTR _bmpptr$[ebp], eax

; 51   : 	if (!bmpptr) return (0);

	cmp	DWORD PTR _bmpptr$[ebp], 0
	jne	SHORT $LN32@ConvertIma
	xor	eax, eax
	jmp	$LN38@ConvertIma
$LN32@ConvertIma:

; 52   : 
; 53   : 	if (fi -> palette) {				// bitmap has palette

	mov	eax, DWORD PTR _fi$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$LN31@ConvertIma

; 54   : 		lptr = fi -> palette;

	mov	ecx, DWORD PTR _fi$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _lptr$[ebp], edx

; 55   : 		for (i=0;i < 256;i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN30@ConvertIma
$LN29@ConvertIma:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN30@ConvertIma:
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jae	$LN28@ConvertIma

; 56   : 			r = (GLint)(*lptr++);

	mov	ecx, DWORD PTR _lptr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _r$[ebp], edx
	mov	eax, DWORD PTR _lptr$[ebp]
	add	eax, 4
	mov	DWORD PTR _lptr$[ebp], eax

; 57   : 			g = (r >>  8) & 0xFF;

	mov	ecx, DWORD PTR _r$[ebp]
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	mov	DWORD PTR _g$[ebp], ecx

; 58   : 			b = (r >> 16) & 0xFF;

	mov	edx, DWORD PTR _r$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 255				; 000000ffH
	mov	DWORD PTR _b$[ebp], edx

; 59   : 			a = (r >> 24) & 0xFF;

	mov	eax, DWORD PTR _r$[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 255				; 000000ffH
	mov	DWORD PTR _a$[ebp], eax

; 60   : 			r &= 0xFF;

	mov	ecx, DWORD PTR _r$[ebp]
	and	ecx, 255				; 000000ffH
	mov	DWORD PTR _r$[ebp], ecx

; 61   : 			j = 0;

	mov	DWORD PTR _j$[ebp], 0

; 62   : 			switch (mode) {

	mov	edx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR tv89[ebp], edx
	cmp	DWORD PTR tv89[ebp], 1
	je	SHORT $LN25@ConvertIma
	cmp	DWORD PTR tv89[ebp], 2
	je	SHORT $LN24@ConvertIma
	cmp	DWORD PTR tv89[ebp], 3
	je	SHORT $LN23@ConvertIma
	jmp	$LN26@ConvertIma
$LN25@ConvertIma:

; 63   : 				case COLOR_32K:	// 555 16 bit color
; 64   : 					j = ((r >> 3) << 10) + ((g >> 3) << 5) + (b >> 3);

	mov	eax, DWORD PTR _r$[ebp]
	shr	eax, 3
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _g$[ebp]
	shr	ecx, 3
	shl	ecx, 5
	add	eax, ecx
	mov	edx, DWORD PTR _b$[ebp]
	shr	edx, 3
	add	eax, edx
	mov	DWORD PTR _j$[ebp], eax

; 65   : 					break;

	jmp	SHORT $LN26@ConvertIma
$LN24@ConvertIma:

; 66   : 				case COLOR_64K:	// 565 16 bit color
; 67   : 					j = ((r >> 3) << 11) + ((g >> 2) << 5) + (b >> 3);

	mov	eax, DWORD PTR _r$[ebp]
	shr	eax, 3
	shl	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR _g$[ebp]
	shr	ecx, 2
	shl	ecx, 5
	add	eax, ecx
	mov	edx, DWORD PTR _b$[ebp]
	shr	edx, 3
	add	eax, edx
	mov	DWORD PTR _j$[ebp], eax

; 68   : 					break;

	jmp	SHORT $LN26@ConvertIma
$LN23@ConvertIma:

; 69   : 				case COLOR_16M:	// RGBA 32 bit color
; 70   : 					j = (a << 24) | (b << 16) | (g << 8) | r;

	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _b$[ebp]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, DWORD PTR _g$[ebp]
	shl	edx, 8
	or	eax, edx
	or	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR _j$[ebp], eax
$LN26@ConvertIma:

; 71   : 					break;
; 72   : 			}
; 73   : 			rgbval[i] = j;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	DWORD PTR _rgbval$[ebp+eax*4], ecx

; 74   : 		}

	jmp	$LN29@ConvertIma
$LN28@ConvertIma:

; 75   : 		ptr = (unsigned char *) fi -> image;

	mov	edx, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _ptr$[ebp], eax

; 76   : 		switch (mode) {

	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR tv148[ebp], ecx
	cmp	DWORD PTR tv148[ebp], 0
	jle	$LN21@ConvertIma
	cmp	DWORD PTR tv148[ebp], 2
	jle	SHORT $LN20@ConvertIma
	cmp	DWORD PTR tv148[ebp], 3
	je	SHORT $LN17@ConvertIma
	jmp	$LN21@ConvertIma
$LN20@ConvertIma:

; 77   : 			case COLOR_32K:
; 78   : 			case COLOR_64K:
; 79   : 				sptr = (GLushort *) bmpptr;

	mov	edx, DWORD PTR _bmpptr$[ebp]
	mov	DWORD PTR _sptr$[ebp], edx
$LN19@ConvertIma:

; 80   : 				while (totalsize--) {

	mov	eax, DWORD PTR _totalsize$[ebp]
	mov	DWORD PTR tv151[ebp], eax
	mov	ecx, DWORD PTR _totalsize$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _totalsize$[ebp], ecx
	cmp	DWORD PTR tv151[ebp], 0
	je	SHORT $LN18@ConvertIma

; 81   : 					*sptr++ = (GLushort) rgbval[*ptr++];

	mov	edx, DWORD PTR _ptr$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _sptr$[ebp]
	mov	dx, WORD PTR _rgbval$[ebp+eax*4]
	mov	WORD PTR [ecx], dx
	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 2
	mov	DWORD PTR _sptr$[ebp], eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _ptr$[ebp], ecx

; 82   : 				}

	jmp	SHORT $LN19@ConvertIma
$LN18@ConvertIma:

; 83   : 				break;

	jmp	SHORT $LN21@ConvertIma
$LN17@ConvertIma:

; 84   : 			case COLOR_16M:
; 85   : 				lptr = (GLulong *) bmpptr;

	mov	edx, DWORD PTR _bmpptr$[ebp]
	mov	DWORD PTR _lptr$[ebp], edx
$LN16@ConvertIma:

; 86   : 				while (totalsize--) {

	mov	eax, DWORD PTR _totalsize$[ebp]
	mov	DWORD PTR tv159[ebp], eax
	mov	ecx, DWORD PTR _totalsize$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _totalsize$[ebp], ecx
	cmp	DWORD PTR tv159[ebp], 0
	je	SHORT $LN21@ConvertIma

; 87   : 					*lptr++ = (GLuint) rgbval[*ptr++];

	mov	edx, DWORD PTR _ptr$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _lptr$[ebp]
	mov	edx, DWORD PTR _rgbval$[ebp+eax*4]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _lptr$[ebp]
	add	eax, 4
	mov	DWORD PTR _lptr$[ebp], eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _ptr$[ebp], ecx

; 88   : 				}

	jmp	SHORT $LN16@ConvertIma
$LN21@ConvertIma:

; 89   : 				break;
; 90   : 		}
; 91   : 		if (chromakey) {

	cmp	DWORD PTR _chromakey$[ebp], 0
	je	SHORT $LN14@ConvertIma

; 92   : 			*chromakey = rgbval[0];

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _chromakey$[ebp]
	mov	ecx, DWORD PTR _rgbval$[ebp+edx]
	mov	DWORD PTR [eax], ecx
$LN14@ConvertIma:

; 93   : 		}
; 94   : 	}
; 95   : 	else {

	jmp	$LN13@ConvertIma
$LN31@ConvertIma:

; 96   : 		ptr = (unsigned char *) fi -> image;

	mov	edx, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _ptr$[ebp], eax

; 97   : 		switch (mode) {

	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR tv172[ebp], ecx
	cmp	DWORD PTR tv172[ebp], 1
	je	SHORT $LN10@ConvertIma
	cmp	DWORD PTR tv172[ebp], 2
	je	$LN7@ConvertIma
	cmp	DWORD PTR tv172[ebp], 3
	je	$LN4@ConvertIma
	jmp	$LN11@ConvertIma
$LN10@ConvertIma:

; 98   : 			case COLOR_32K:
; 99   : 				sptr = (GLushort *) bmpptr;

	mov	edx, DWORD PTR _bmpptr$[ebp]
	mov	DWORD PTR _sptr$[ebp], edx
$LN9@ConvertIma:

; 100  : 				while (totalsize--) {

	mov	eax, DWORD PTR _totalsize$[ebp]
	mov	DWORD PTR tv175[ebp], eax
	mov	ecx, DWORD PTR _totalsize$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _totalsize$[ebp], ecx
	cmp	DWORD PTR tv175[ebp], 0
	je	$LN8@ConvertIma

; 101  : 					b = *ptr++;

	mov	edx, DWORD PTR _ptr$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _ptr$[ebp], ecx

; 102  : 					g = *ptr++;

	mov	edx, DWORD PTR _ptr$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _g$[ebp], eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _ptr$[ebp], ecx

; 103  : 					r = *ptr++;

	mov	edx, DWORD PTR _ptr$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _r$[ebp], eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _ptr$[ebp], ecx

; 104  : 					j = ((r >> 3) << 10) + ((g >> 3) << 5) + (b >> 3);

	mov	edx, DWORD PTR _r$[ebp]
	shr	edx, 3
	shl	edx, 10					; 0000000aH
	mov	eax, DWORD PTR _g$[ebp]
	shr	eax, 3
	shl	eax, 5
	add	edx, eax
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 3
	add	edx, ecx
	mov	DWORD PTR _j$[ebp], edx

; 105  : 					*sptr++ = (GLushort) j;

	mov	edx, DWORD PTR _sptr$[ebp]
	mov	ax, WORD PTR _j$[ebp]
	mov	WORD PTR [edx], ax
	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _sptr$[ebp], ecx

; 106  : 				}

	jmp	$LN9@ConvertIma
$LN8@ConvertIma:

; 107  : 				break;

	jmp	$LN11@ConvertIma
$LN7@ConvertIma:

; 108  : 			case COLOR_64K:
; 109  : 				sptr = (GLushort *) bmpptr;

	mov	edx, DWORD PTR _bmpptr$[ebp]
	mov	DWORD PTR _sptr$[ebp], edx
$LN6@ConvertIma:

; 110  : 				while (totalsize--) {

	mov	eax, DWORD PTR _totalsize$[ebp]
	mov	DWORD PTR tv192[ebp], eax
	mov	ecx, DWORD PTR _totalsize$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _totalsize$[ebp], ecx
	cmp	DWORD PTR tv192[ebp], 0
	je	$LN5@ConvertIma

; 111  : 					b = *ptr++;

	mov	edx, DWORD PTR _ptr$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _ptr$[ebp], ecx

; 112  : 					g = *ptr++;

	mov	edx, DWORD PTR _ptr$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _g$[ebp], eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _ptr$[ebp], ecx

; 113  : 					r = *ptr++;

	mov	edx, DWORD PTR _ptr$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _r$[ebp], eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _ptr$[ebp], ecx

; 114  : 					j = ((r >> 3) << 11) + ((g >> 2) << 5) + (b >> 3);

	mov	edx, DWORD PTR _r$[ebp]
	shr	edx, 3
	shl	edx, 11					; 0000000bH
	mov	eax, DWORD PTR _g$[ebp]
	shr	eax, 2
	shl	eax, 5
	add	edx, eax
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 3
	add	edx, ecx
	mov	DWORD PTR _j$[ebp], edx

; 115  : 					*sptr++ = (GLushort) j;

	mov	edx, DWORD PTR _sptr$[ebp]
	mov	ax, WORD PTR _j$[ebp]
	mov	WORD PTR [edx], ax
	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _sptr$[ebp], ecx

; 116  : 				}

	jmp	$LN6@ConvertIma
$LN5@ConvertIma:

; 117  : 				break;

	jmp	$LN11@ConvertIma
$LN4@ConvertIma:

; 118  : 			case COLOR_16M:
; 119  : 				lptr = (GLulong *) bmpptr;

	mov	edx, DWORD PTR _bmpptr$[ebp]
	mov	DWORD PTR _lptr$[ebp], edx
$LN3@ConvertIma:

; 120  : 				while (totalsize--) {

	mov	eax, DWORD PTR _totalsize$[ebp]
	mov	DWORD PTR tv209[ebp], eax
	mov	ecx, DWORD PTR _totalsize$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _totalsize$[ebp], ecx
	cmp	DWORD PTR tv209[ebp], 0
	je	$LN11@ConvertIma

; 121  : 					b = *ptr++;

	mov	edx, DWORD PTR _ptr$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _ptr$[ebp], ecx

; 122  : 					g = *ptr++;

	mov	edx, DWORD PTR _ptr$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _g$[ebp], eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _ptr$[ebp], ecx

; 123  : 					r = *ptr++;

	mov	edx, DWORD PTR _ptr$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _r$[ebp], eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _ptr$[ebp], ecx

; 124  : 					j = (b << 16) + (g << 8) + r + 0xff000000;

	mov	edx, DWORD PTR _b$[ebp]
	shl	edx, 16					; 00000010H
	mov	eax, DWORD PTR _g$[ebp]
	shl	eax, 8
	add	edx, DWORD PTR _r$[ebp]
	lea	ecx, DWORD PTR [eax+edx-16777216]
	mov	DWORD PTR _j$[ebp], ecx

; 125  : 					*lptr++ = (GLuint) j;

	mov	edx, DWORD PTR _lptr$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _lptr$[ebp]
	add	ecx, 4
	mov	DWORD PTR _lptr$[ebp], ecx

; 126  : 				}

	jmp	$LN3@ConvertIma
$LN11@ConvertIma:

; 127  : 				break;
; 128  : 		}
; 129  : 		if (chromakey) {

	cmp	DWORD PTR _chromakey$[ebp], 0
	je	SHORT $LN13@ConvertIma

; 130  : 			*chromakey = 0xff000000;

	mov	edx, DWORD PTR _chromakey$[ebp]
	mov	DWORD PTR [edx], -16777216		; ff000000H
$LN13@ConvertIma:

; 131  : 		}
; 132  : 	}
; 133  : 	return ((GLubyte *) bmpptr);

	mov	eax, DWORD PTR _bmpptr$[ebp]
$LN38@ConvertIma:

; 134  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ConvertImage@@YAPAEPAUGLImageInfo@@HPAI@Z ENDP		; ConvertImage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\grinline.h
;	COMDAT ?glReleaseMemory@@YAXPAX@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
_memptr$ = 8						; size = 4
?glReleaseMemory@@YAXPAX@Z PROC				; glReleaseMemory, COMDAT

; 32   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 33   : #ifdef USE_SH_POOLS
; 34   : 	if (memptr)
; 35   : 	{
; 36   : 		MemFreePtr( memptr );
; 37   : 	}
; 38   : #else
; 39   : 	if (memptr)

	cmp	DWORD PTR _memptr$[ebp], 0
	je	SHORT $LN2@glReleaseM

; 40   : 	{
; 41   : 		delete[] memptr;

	mov	eax, DWORD PTR _memptr$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@glReleaseM:

; 42   : 	}
; 43   : #endif
; 44   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?glReleaseMemory@@YAXPAX@Z ENDP				; glReleaseMemory
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\grinline.h
;	COMDAT ?glAllocateMemory@@YAPAXHH@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_buf$ = -4						; size = 4
_totalbytes$ = 8					; size = 4
_clearit$ = 12						; size = 4
?glAllocateMemory@@YAPAXHH@Z PROC			; glAllocateMemory, COMDAT

; 21   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 22   : #ifdef USE_SH_POOLS
; 23   : 	char *buf = (char *)MemAllocPtr( glMemPool, totalbytes, 0 );
; 24   : #else
; 25   : 	char *buf = new char[totalbytes];

	mov	eax, DWORD PTR _totalbytes$[ebp]
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR _buf$[ebp], ecx

; 26   : #endif
; 27   : 	if (buf && clearit) memset (buf, 0, totalbytes);

	cmp	DWORD PTR _buf$[ebp], 0
	je	SHORT $LN1@glAllocate
	cmp	DWORD PTR _clearit$[ebp], 0
	je	SHORT $LN1@glAllocate
	mov	edx, DWORD PTR _totalbytes$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
$LN1@glAllocate:

; 28   : 	return buf;

	mov	eax, DWORD PTR _buf$[ebp]

; 29   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?glAllocateMemory@@YAPAXHH@Z ENDP			; glAllocateMemory
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z PROC	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ENDP	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ PROC	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CComBSTR@ATL@@QAE@XZ			; ATL::CComBSTR::~CComBSTR
	mov	esp, ebp
	pop	ebp
	ret	0
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ ENDP	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\atlmfc\include\atlcomcli.h
;	COMDAT ??1CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CComBSTR@ATL@@QAE@XZ PROC				; ATL::CComBSTR::~CComBSTR, COMDAT
; _this$ = ecx

; 1656 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1657 :     ::SysFreeString(m_str);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__SysFreeString@4

; 1658 : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1CComBSTR@ATL@@QAE@XZ ENDP				; ATL::CComBSTR::~CComBSTR
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Where$[ebp]
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
