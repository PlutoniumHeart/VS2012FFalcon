; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\Graphics\3Dlib\context.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?VT@?$CVarTypeInfo@_J@ATL@@2GB			; ATL::CVarTypeInfo<__int64>::VT
PUBLIC	?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ ; ATL::CVarTypeInfo<__int64>::pmField
PUBLIC	___pobjMapEntryFirst
PUBLIC	___pobjMapEntryLast
PUBLIC	?VT@?$CVarTypeInfo@PA_J@ATL@@2GB		; ATL::CVarTypeInfo<__int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ ; ATL::CVarTypeInfo<__int64 *>::pmField
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?VT@?$CVarTypeInfo@_K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned __int64>::VT
PUBLIC	??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@	; `string'
PUBLIC	?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64>::pmField
PUBLIC	??_C@_08PICKODJL@FileType?$AA@			; `string'
PUBLIC	??_C@_09JKPGEJCH@Interface?$AA@			; `string'
PUBLIC	??_C@_08PPIOJEA@Hardware?$AA@			; `string'
PUBLIC	?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA	; ATL::_pPerfRegFunc
PUBLIC	??_C@_04IHBFOLAC@Mime?$AA@			; `string'
PUBLIC	?_pPerfUnRegFunc@ATL@@3P6AJXZA			; ATL::_pPerfUnRegFunc
PUBLIC	??_C@_03DDIMFGBA@SAM?$AA@			; `string'
PUBLIC	?_AtlRegisterPerUser@ATL@@3_NA			; ATL::_AtlRegisterPerUser
PUBLIC	??_C@_08LOPHEHKG@SECURITY?$AA@			; `string'
PUBLIC	??_C@_06FDHFNJBJ@SYSTEM?$AA@			; `string'
PUBLIC	??_C@_08KEKAJNJI@Software?$AA@			; `string'
PUBLIC	??_C@_07KJLOKDKB@TypeLib?$AA@			; `string'
PUBLIC	?VT@?$CVarTypeInfo@PA_K@ATL@@2GB		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
PUBLIC	__GUID_00000000_0000_0000_c000_000000000046
PUBLIC	?VT@?$CVarTypeInfo@M@ATL@@2GB			; ATL::CVarTypeInfo<float>::VT
PUBLIC	?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ ; ATL::CVarTypeInfo<float>::pmField
PUBLIC	__GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
PUBLIC	?VT@?$CVarTypeInfo@PAM@ATL@@2GB			; ATL::CVarTypeInfo<float *>::VT
PUBLIC	__GUID_00020400_0000_0000_c000_000000000046
PUBLIC	?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ ; ATL::CVarTypeInfo<float *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@N@ATL@@2GB			; ATL::CVarTypeInfo<double>::VT
PUBLIC	?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ ; ATL::CVarTypeInfo<double>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAN@ATL@@2GB			; ATL::CVarTypeInfo<double *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ ; ATL::CVarTypeInfo<double *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB	; ATL::CVarTypeInfo<tagVARIANT *>::VT
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	__GUID_0002e012_0000_0000_c000_000000000046
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?VT@?$CVarTypeInfo@PA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ ; ATL::CVarTypeInfo<wchar_t *>::pmField
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t * *>::VT
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ ; ATL::CVarTypeInfo<wchar_t * *>::pmField
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown *>::VT
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown *>::pmField
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown * *>::pmField
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	__GUID_0000010c_0000_0000_c000_000000000046
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch *>::VT
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch *>::pmField
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	??_C@_05GIBEAPNE@CLSID?$AA@			; `string'
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	_IID_IAxWinHostWindow
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch * *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY>::VT
PUBLIC	?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY>::pmField
PUBLIC	??_C@_05PDIKPLII@AppID?$AA@			; `string'
PUBLIC	?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY *>::VT
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY *>::pmField
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?chDirSep@ATL@@3DB				; ATL::chDirSep
PUBLIC	?chRightBracket@ATL@@3DB			; ATL::chRightBracket
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?chLeftBracket@ATL@@3DB				; ATL::chLeftBracket
PUBLIC	?chQuote@ATL@@3DB				; ATL::chQuote
PUBLIC	?chEquals@ATL@@3DB				; ATL::chEquals
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?szStringVal@ATL@@3QBDB				; ATL::szStringVal
PUBLIC	??_C@_01CPLAODJH@S?$AA@				; `string'
PUBLIC	?multiszStringVal@ATL@@3QBDB			; ATL::multiszStringVal
PUBLIC	_IID_IAxWinHostWindowLic
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	??_C@_01PLPBNMEI@M?$AA@				; `string'
PUBLIC	?szDwordVal@ATL@@3QBDB				; ATL::szDwordVal
PUBLIC	??_C@_01CKDDGHAB@D?$AA@				; `string'
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?szBinaryVal@ATL@@3QBDB				; ATL::szBinaryVal
PUBLIC	??_C@_01HMGJMAIH@B?$AA@				; `string'
PUBLIC	?szValToken@ATL@@3QBDB				; ATL::szValToken
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	??_C@_03LAIAPFCB@Val?$AA@			; `string'
PUBLIC	?szForceRemove@ATL@@3QBDB			; ATL::szForceRemove
PUBLIC	??_C@_0M@DBGDLGLL@ForceRemove?$AA@		; `string'
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?szNoRemove@ATL@@3QBDB				; ATL::szNoRemove
PUBLIC	??_C@_08KAAPDIAN@NoRemove?$AA@			; `string'
PUBLIC	?szDelete@ATL@@3QBDB				; ATL::szDelete
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	??_C@_06JBKGCNBB@Delete?$AA@			; `string'
PUBLIC	?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA	; ATL::CComApartment::ATL_CREATE_OBJECT
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	_IID_IAxWinAmbientDispatch
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A ; ATL::_pAtlAutoThreadModule
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?m_bInitFailed@CAtlBaseModule@ATL@@2_NA		; ATL::CAtlBaseModule::m_bInitFailed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	__GUID_00000000_0000_0000_0000_000000000000
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?MAX_VALUE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_VALUE
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?rgszNeverDelete@CRegParser@ATL@@1QBQBDB	; ATL::CRegParser::rgszNeverDelete
PUBLIC	?cbNeverDelete@CRegParser@ATL@@1HB		; ATL::CRegParser::cbNeverDelete
PUBLIC	?MAX_TYPE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_TYPE
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	_IID_IAxWinAmbientDispatchEx
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	_IID_IInternalConnection
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	__GUID_1cf2b120_547d_101b_8e65_08002b2bd119
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?_pAtlModule@ATL@@3PAVCAtlModule@1@A		; ATL::_pAtlModule
PUBLIC	?m_libid@CAtlModule@ATL@@2U_GUID@@A		; ATL::CAtlModule::m_libid
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?VCounter@@3KA					; VCounter
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	__GUID_00000146_0000_0000_c000_000000000046
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?VT@?$CVarTypeInfo@D@ATL@@2GB			; ATL::CVarTypeInfo<char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ ; ATL::CVarTypeInfo<char>::pmField
PUBLIC	?VT@?$CVarTypeInfo@E@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ ; ATL::CVarTypeInfo<unsigned char>::pmField
PUBLIC	_CLSID_Registrar
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?_Min@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Min
PUBLIC	?VT@?$CVarTypeInfo@PAD@ATL@@2GB			; ATL::CVarTypeInfo<char *>::VT
PUBLIC	?_Max@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Max
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ ; ATL::CVarTypeInfo<char *>::pmField
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?_Min@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Min
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?_Max@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Max
PUBLIC	?VT@?$CVarTypeInfo@PAE@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char *>::VT
PUBLIC	?bInBeginScene@@3_NA				; bInBeginScene
PUBLIC	__GUID_00000109_0000_0000_c000_000000000046
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ ; ATL::CVarTypeInfo<unsigned char *>::pmField
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?_Min@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Min
PUBLIC	__GUID_b196b284_bab4_101a_b69c_00aa00341d07
PUBLIC	?_Max@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Max
PUBLIC	?VT@?$CVarTypeInfo@F@ATL@@2GB			; ATL::CVarTypeInfo<short>::VT
PUBLIC	_IID_IRegistrar
PUBLIC	?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ ; ATL::CVarTypeInfo<short>::pmField
PUBLIC	?_Min@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Min
PUBLIC	?_Max@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Max
PUBLIC	?VT@?$CVarTypeInfo@PAF@ATL@@2GB			; ATL::CVarTypeInfo<short *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ ; ATL::CVarTypeInfo<short *>::pmField
PUBLIC	?_Min@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Min
PUBLIC	__GUID_00000001_0000_0000_c000_000000000046
PUBLIC	?_Max@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Max
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?VT@?$CVarTypeInfo@G@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short>::VT
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ ; ATL::CVarTypeInfo<unsigned short>::pmField
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	__GUID_00020401_0000_0000_c000_000000000046
PUBLIC	?_Min@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Min
PUBLIC	_LIBID_ATLLib
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?_Max@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Max
PUBLIC	__GUID_00020412_0000_0000_c000_000000000046
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?VT@?$CVarTypeInfo@PAG@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short *>::VT
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ ; ATL::CVarTypeInfo<unsigned short *>::pmField
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?VT@?$CVarTypeInfo@H@ATL@@2GB			; ATL::CVarTypeInfo<int>::VT
PUBLIC	?StateSetupCounter@ContextMPR@@2HA		; ContextMPR::StateSetupCounter
PUBLIC	?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ ; ATL::CVarTypeInfo<int>::pmField
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?VT@?$CVarTypeInfo@PAH@ATL@@2GB			; ATL::CVarTypeInfo<int *>::VT
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ ; ATL::CVarTypeInfo<int *>::pmField
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?VT@?$CVarTypeInfo@I@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int>::VT
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ ; ATL::CVarTypeInfo<unsigned int>::pmField
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?StateTable@ContextMPR@@2PAIA			; ContextMPR::StateTable
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?VT@?$CVarTypeInfo@PAI@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ ; ATL::CVarTypeInfo<unsigned int *>::pmField
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?VT@?$CVarTypeInfo@J@ATL@@2GB			; ATL::CVarTypeInfo<long>::VT
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ ; ATL::CVarTypeInfo<long>::pmField
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?_pModule@ATL@@3PAVCComModule@1@A		; ATL::_pModule
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?VT@?$CVarTypeInfo@PAJ@ATL@@2GB			; ATL::CVarTypeInfo<long *>::VT
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ ; ATL::CVarTypeInfo<long *>::pmField
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	_IID_IDocHostUIHandlerDispatch
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?VT@?$CVarTypeInfo@K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long>::VT
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ ; ATL::CVarTypeInfo<unsigned long>::pmField
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?VT@?$CVarTypeInfo@PAK@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long *>::VT
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ ; ATL::CVarTypeInfo<unsigned long *>::pmField
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA
_BSS	SEGMENT
?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA DD 01H DUP (?) ; ATL::_pPerfRegFunc
_BSS	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZA
_BSS	SEGMENT
?_pPerfUnRegFunc@ATL@@3P6AJXZA DD 01H DUP (?)		; ATL::_pPerfUnRegFunc
_BSS	ENDS
;	COMDAT ?_AtlRegisterPerUser@ATL@@3_NA
_BSS	SEGMENT
?_AtlRegisterPerUser@ATL@@3_NA DB 01H DUP (?)		; ATL::_AtlRegisterPerUser
_BSS	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_BSS	SEGMENT
?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA DD 01H DUP (?) ; ATL::CComApartment::ATL_CREATE_OBJECT
_BSS	ENDS
;	COMDAT ?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A
_BSS	SEGMENT
?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A DD 01H DUP (?) ; ATL::_pAtlAutoThreadModule
_BSS	ENDS
;	COMDAT ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA
_BSS	SEGMENT
?m_bInitFailed@CAtlBaseModule@ATL@@2_NA DB 01H DUP (?)	; ATL::CAtlBaseModule::m_bInitFailed
_BSS	ENDS
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_BSS	SEGMENT
?_pAtlModule@ATL@@3PAVCAtlModule@1@A DD 01H DUP (?)	; ATL::_pAtlModule
_BSS	ENDS
;	COMDAT ?m_libid@CAtlModule@ATL@@2U_GUID@@A
_BSS	SEGMENT
?m_libid@CAtlModule@ATL@@2U_GUID@@A DB 010H DUP (?)	; ATL::CAtlModule::m_libid
_BSS	ENDS
_BSS	SEGMENT
?VCounter@@3KA DD 01H DUP (?)				; VCounter
?bInBeginScene@@3_NA DB 01H DUP (?)			; bInBeginScene
	ALIGN	4

?StateSetupCounter@ContextMPR@@2HA DD 01H DUP (?)	; ContextMPR::StateSetupCounter
?StateTable@ContextMPR@@2PAIA DD 026H DUP (?)		; ContextMPR::StateTable
_BSS	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_BSS	SEGMENT
?_pModule@ATL@@3PAVCComModule@1@A DD 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long *>::pmField
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAK@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAK@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned long *>::VT
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long>::pmField
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@K@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned long>::VT
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
_DATA	SEGMENT
_cloudPntList DD 0c5bcc000r			; -6040
	DD	0c4070000r			; -540
	DD	0c694ac00r			; -19030
	DD	0c6de1c00r			; -28430
	DD	0c4dfc000r			; -1790
	DD	046dcc800r			; 28260
	DD	047104200r			; 36930
	DD	045732000r			; 3890
	DD	04744ea00r			; 50410
	DD	045336000r			; 2870
	DD	0c4d48000r			; -1700
	DD	04736da00r			; 46810
	DD	0c763ee00r			; -58350
	DD	0c4d48000r			; -1700
	DD	0c64c1000r			; -13060
	DD	046f2bc00r			; 31070
	DD	045480000r			; 3200
	DD	0c7293800r			; -43320
	DD	0c7bdc400r			; -97160
	DD	0c4d48000r			; -1700
	DD	04576e000r			; 3950
	DD	0c792e000r			; -75200
	DD	0c4bb8000r			; -1500
	DD	047957400r			; 76520
	DD	04759ee00r			; 55790
	DD	0c5a1e000r			; -5180
	DD	0c7a24e00r			; -83100
	DD	0c7473800r			; -51000
	DD	0c3a00000r			; -320
	DD	0c7829100r			; -66850
	DD	047733400r			; 62260
	DD	0c3a00000r			; -320
	DD	047708200r			; 61570
	DD	0c7710e00r			; -61710
	DD	0c550c000r			; -3340
	DD	046fb7c00r			; 32190
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	0c5bcc000r			; -6040
	DD	0c7495400r			; -51540
	DD	0c694ac00r			; -19030
	DD	0c6a7a800r			; -21460
	DD	0c74b0200r			; -51970
	DD	0468e8000r			; 18240
	DD	047298800r			; 43400
	DD	0c74bf200r			; -52210
	DD	046bc7000r			; 24120
	DD	0c749f400r			; -51700
	DD	0c74bc000r			; -52160
	DD	046948400r			; 19010
	DD	0c605e800r			; -8570
	DD	0c7488200r			; -51330
	DD	0c74ca600r			; -52390
	DD	04731bc00r			; 45500
	DD	0c7509800r			; -53400
	DD	0c6725800r			; -15510
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	0c7a1ae00r			; -82780
	DD	0c749ea00r			; -51690
	DD	0c7bce300r			; -96710
	DD	0c6126800r			; -9370
	DD	0c7495400r			; -51540
	DD	043cd0000r			; 410
	DD	0c6a7a800r			; -21460
	DD	0c74a8a00r			; -51850
	DD	0473fae00r			; 49070
	DD	0457c8000r			; 4040
	DD	0c74e4a00r			; -52810
	DD	047871e00r			; 69180
	DD	0c6cbc000r			; -26080
	DD	0c74bc000r			; -52160
	DD	046984400r			; 19490
	DD	0452fa000r			; 2810
	DD	0c7488200r			; -51330
	DD	0c7081800r			; -34840
	DD	0c7719a00r			; -61850
	DD	0c749d600r			; -51670
	DD	047b17600r			; 90860
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	047c04e00r			; 98460
	DD	0c74d1400r			; -52500
	DD	0c732a200r			; -45730
	DD	0467b9000r			; 16100
	DD	0c7487800r			; -51320
	DD	0c749a400r			; -51620
	DD	047636c00r			; 58220
	DD	0c74e0400r			; -52740
	DD	0c760b000r			; -57520
	DD	0c6126800r			; -9370
	DD	0c4070000r			; -540
	DD	043cd0000r			; 410
	DD	0c4e60000r			; -1840
	DD	0c6a30c00r			; -20870
	DD	0470a6600r			; 35430
	DD	0c7230c00r			; -41740
	DD	046924000r			; 18720
	DD	04797d600r			; 77740
	DD	0460d9000r			; 9060
	DD	0c616c800r			; -9650
	DD	0c7921300r			; -74790
_lightningPosList DD 041300000r			; 11
	DD	000000000r			; 0
	DD	040e00000r			; 7
	DD	040a00000r			; 5
	DD	041100000r			; 9
	DD	041000000r			; 8
	DD	041000000r			; 8
	DD	041600000r			; 14
	DD	041800000r			; 16
	DD	041a00000r			; 20
	DD	041200000r			; 10
	DD	041c00000r			; 24
	DD	041300000r			; 11
	DD	041d80000r			; 27
	DD	040c00000r			; 6
	DD	041f00000r			; 30
	DD	040e00000r			; 7
	DD	042040000r			; 33
	DD	03f800000r			; 1
	DD	042180000r			; 38
	DD	040a00000r			; 5
	DD	042280000r			; 42
	DD	040a00000r			; 5
	DD	042340000r			; 45
	DD	041400000r			; 12
	DD	042400000r			; 48
	DD	041a00000r			; 20
	DD	042500000r			; 52
	DD	041a00000r			; 20
	DD	042680000r			; 58
	DD	041b80000r			; 23
	DD	042740000r			; 61
	DD	041b00000r			; 22
	DD	0427c0000r			; 63
	DD	041b00000r			; 22
	DD	042840000r			; 66
	DD	041c80000r			; 25
	DD	042880000r			; 68
	DD	041a00000r			; 20
	DD	0428c0000r			; 70
	DD	041c00000r			; 24
	DD	042960000r			; 75
	DD	041c00000r			; 24
	DD	0429a0000r			; 77
	DD	041f80000r			; 31
	DD	042a00000r			; 80
	DD	041f80000r			; 31
	DD	042a60000r			; 83
	DD	042040000r			; 33
	DD	042b00000r			; 88
	DD	041f80000r			; 31
	DD	042b80000r			; 92
	DD	0423c0000r			; 47
	DD	042ce0000r			; 103
	DD	042380000r			; 46
	DD	042d20000r			; 105
	DD	0423c0000r			; 47
	DD	042d60000r			; 107
	DD	042340000r			; 45
	DD	042e00000r			; 112
	DD	042400000r			; 48
	DD	042e40000r			; 114
	DD	042380000r			; 46
	DD	042ea0000r			; 117
	DD	0422c0000r			; 43
	DD	043000000r			; 128
_DATA	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
_IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ DD 08H ; ATL::CVarTypeInfo<long *>::pmField
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAJ@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAJ@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<long *>::VT
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ DD 08H ; ATL::CVarTypeInfo<long>::pmField
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@J@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<long>::VT
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAI@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAI@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned int *>::VT
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int>::pmField
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@I@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@I@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned int>::VT
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ DD 08H ; ATL::CVarTypeInfo<int *>::pmField
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAH@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAH@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<int *>::VT
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ DD 08H ; ATL::CVarTypeInfo<int>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@H@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@H@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<int>::VT
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short *>::pmField
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAG@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAG@ATL@@2GB DW 04012H		; ATL::CVarTypeInfo<unsigned short *>::VT
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT __GUID_00020412_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020412_0000_0000_c000_000000000046 DD 020412H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Max@?$AtlLimits@_K@ATL@@2_KB DQ ffffffffffffffffH	; ATL::AtlLimits<unsigned __int64>::_Max
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT
_LIBID_ATLLib DD 044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Min@?$AtlLimits@_K@ATL@@2_KB DQ 0000000000000000H	; ATL::AtlLimits<unsigned __int64>::_Min
CONST	ENDS
;	COMDAT __GUID_00020401_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020401_0000_0000_c000_000000000046 DD 020401H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short>::pmField
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@G@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@G@ATL@@2GB DW 012H			; ATL::CVarTypeInfo<unsigned short>::VT
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Max@?$AtlLimits@_J@ATL@@2_JB DQ 7fffffffffffffffH	; ATL::AtlLimits<__int64>::_Max
CONST	ENDS
;	COMDAT __GUID_00000001_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000001_0000_0000_c000_000000000046 DD 01H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Min@?$AtlLimits@_J@ATL@@2_JB DQ 8000000000000000H	; ATL::AtlLimits<__int64>::_Min
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ DD 08H ; ATL::CVarTypeInfo<short *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAF@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAF@ATL@@2GB DW 04002H		; ATL::CVarTypeInfo<short *>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Max@?$AtlLimits@K@ATL@@2KB DD 0ffffffffH		; ATL::AtlLimits<unsigned long>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Min@?$AtlLimits@K@ATL@@2KB DD 00H			; ATL::AtlLimits<unsigned long>::_Min
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ DD 08H ; ATL::CVarTypeInfo<short>::pmField
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT
_IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@F@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@F@ATL@@2GB DW 02H			; ATL::CVarTypeInfo<short>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Max@?$AtlLimits@J@ATL@@2JB DD 07fffffffH		; ATL::AtlLimits<long>::_Max
CONST	ENDS
;	COMDAT __GUID_b196b284_bab4_101a_b69c_00aa00341d07
CONST	SEGMENT
__GUID_b196b284_bab4_101a_b69c_00aa00341d07 DD 0b196b284H
	DW	0bab4H
	DW	0101aH
	DB	0b6H
	DB	09cH
	DB	00H
	DB	0aaH
	DB	00H
	DB	034H
	DB	01dH
	DB	07H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Min@?$AtlLimits@J@ATL@@2JB DD 080000000H		; ATL::AtlLimits<long>::_Min
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT __GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
CONST	SEGMENT
__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713 DD 07fd52380H
	DW	04e07H
	DW	0101bH
	DB	0aeH
	DB	02dH
	DB	08H
	DB	00H
	DB	02bH
	DB	02eH
	DB	0c7H
	DB	013H
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char *>::pmField
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT __GUID_00000109_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000109_0000_0000_c000_000000000046 DD 0109H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAE@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAE@ATL@@2GB DW 04011H		; ATL::CVarTypeInfo<unsigned char *>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Max@?$AtlLimits@I@ATL@@2IB DD 0ffffffffH		; ATL::AtlLimits<unsigned int>::_Max
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Min@?$AtlLimits@I@ATL@@2IB DD 00H			; ATL::AtlLimits<unsigned int>::_Min
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ DD 08H ; ATL::CVarTypeInfo<char *>::pmField
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Max@?$AtlLimits@H@ATL@@2HB DD 07fffffffH		; ATL::AtlLimits<int>::_Max
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAD@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAD@ATL@@2GB DW 04010H		; ATL::CVarTypeInfo<char *>::VT
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Min@?$AtlLimits@H@ATL@@2HB DD 080000000H		; ATL::AtlLimits<int>::_Min
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT
_CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@E@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@E@ATL@@2GB DW 011H			; ATL::CVarTypeInfo<unsigned char>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ DD 08H ; ATL::CVarTypeInfo<char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@D@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@D@ATL@@2GB DW 010H			; ATL::CVarTypeInfo<char>::VT
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT __GUID_00000146_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000146_0000_0000_c000_000000000046 DD 0146H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT __GUID_1cf2b120_547d_101b_8e65_08002b2bd119
CONST	SEGMENT
__GUID_1cf2b120_547d_101b_8e65_08002b2bd119 DD 01cf2b120H
	DW	0547dH
	DW	0101bH
	DB	08eH
	DB	065H
	DB	08H
	DB	00H
	DB	02bH
	DB	02bH
	DB	0d1H
	DB	019H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT
_IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatchEx
CONST	SEGMENT
_IID_IAxWinAmbientDispatchEx DD 0b2d0778bH
	DW	0ac99H
	DW	04c58H
	DB	0a5H
	DB	0c8H
	DB	0e7H
	DB	072H
	DB	04eH
	DB	053H
	DB	016H
	DB	0b5H
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT __GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
CONST	SEGMENT
__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352 DD 0fc4801a3H
	DW	02ba9H
	DW	011cfH
	DB	0a2H
	DB	029H
	DB	00H
	DB	0aaH
	DB	00H
	DB	03dH
	DB	073H
	DB	052H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?MAX_TYPE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_TYPE@CRegParser@ATL@@1HB DD 01000H			; ATL::CRegParser::MAX_TYPE
CONST	ENDS
;	COMDAT ?cbNeverDelete@CRegParser@ATL@@1HB
CONST	SEGMENT
?cbNeverDelete@CRegParser@ATL@@1HB DD 0cH		; ATL::CRegParser::cbNeverDelete
CONST	ENDS
;	COMDAT ?rgszNeverDelete@CRegParser@ATL@@1QBQBDB
CONST	SEGMENT
?rgszNeverDelete@CRegParser@ATL@@1QBQBDB DD FLAT:??_C@_05PDIKPLII@AppID?$AA@ ; ATL::CRegParser::rgszNeverDelete
	DD	FLAT:??_C@_05GIBEAPNE@CLSID?$AA@
	DD	FLAT:??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
	DD	FLAT:??_C@_08PICKODJL@FileType?$AA@
	DD	FLAT:??_C@_09JKPGEJCH@Interface?$AA@
	DD	FLAT:??_C@_08PPIOJEA@Hardware?$AA@
	DD	FLAT:??_C@_04IHBFOLAC@Mime?$AA@
	DD	FLAT:??_C@_03DDIMFGBA@SAM?$AA@
	DD	FLAT:??_C@_08LOPHEHKG@SECURITY?$AA@
	DD	FLAT:??_C@_06FDHFNJBJ@SYSTEM?$AA@
	DD	FLAT:??_C@_08KEKAJNJI@Software?$AA@
	DD	FLAT:??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?MAX_VALUE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_VALUE@CRegParser@ATL@@1HB DD 01000H		; ATL::CRegParser::MAX_VALUE
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
CONST	SEGMENT
__GUID_00000000_0000_0000_0000_000000000000 DD 00H
	DW	00H
	DW	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT
_IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ??_C@_06JBKGCNBB@Delete?$AA@
CONST	SEGMENT
??_C@_06JBKGCNBB@Delete?$AA@ DB 'Delete', 00H		; `string'
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?szDelete@ATL@@3QBDB
CONST	SEGMENT
?szDelete@ATL@@3QBDB DD FLAT:??_C@_06JBKGCNBB@Delete?$AA@ ; ATL::szDelete
CONST	ENDS
;	COMDAT ??_C@_08KAAPDIAN@NoRemove?$AA@
CONST	SEGMENT
??_C@_08KAAPDIAN@NoRemove?$AA@ DB 'NoRemove', 00H	; `string'
CONST	ENDS
;	COMDAT ?szNoRemove@ATL@@3QBDB
CONST	SEGMENT
?szNoRemove@ATL@@3QBDB DD FLAT:??_C@_08KAAPDIAN@NoRemove?$AA@ ; ATL::szNoRemove
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ??_C@_0M@DBGDLGLL@ForceRemove?$AA@
CONST	SEGMENT
??_C@_0M@DBGDLGLL@ForceRemove?$AA@ DB 'ForceRemove', 00H ; `string'
CONST	ENDS
;	COMDAT ?szForceRemove@ATL@@3QBDB
CONST	SEGMENT
?szForceRemove@ATL@@3QBDB DD FLAT:??_C@_0M@DBGDLGLL@ForceRemove?$AA@ ; ATL::szForceRemove
CONST	ENDS
;	COMDAT ??_C@_03LAIAPFCB@Val?$AA@
CONST	SEGMENT
??_C@_03LAIAPFCB@Val?$AA@ DB 'Val', 00H			; `string'
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?szValToken@ATL@@3QBDB
CONST	SEGMENT
?szValToken@ATL@@3QBDB DD FLAT:??_C@_03LAIAPFCB@Val?$AA@ ; ATL::szValToken
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B?$AA@
CONST	SEGMENT
??_C@_01HMGJMAIH@B?$AA@ DB 'B', 00H			; `string'
CONST	ENDS
;	COMDAT ?szBinaryVal@ATL@@3QBDB
CONST	SEGMENT
?szBinaryVal@ATL@@3QBDB DD FLAT:??_C@_01HMGJMAIH@B?$AA@	; ATL::szBinaryVal
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D?$AA@
CONST	SEGMENT
??_C@_01CKDDGHAB@D?$AA@ DB 'D', 00H			; `string'
CONST	ENDS
;	COMDAT ?szDwordVal@ATL@@3QBDB
CONST	SEGMENT
?szDwordVal@ATL@@3QBDB DD FLAT:??_C@_01CKDDGHAB@D?$AA@	; ATL::szDwordVal
CONST	ENDS
;	COMDAT ??_C@_01PLPBNMEI@M?$AA@
CONST	SEGMENT
??_C@_01PLPBNMEI@M?$AA@ DB 'M', 00H			; `string'
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindowLic
CONST	SEGMENT
_IID_IAxWinHostWindowLic DD 03935bda8H
	DW	04ed9H
	DW	0495cH
	DB	086H
	DB	050H
	DB	0e0H
	DB	01fH
	DB	0c1H
	DB	0e3H
	DB	08aH
	DB	04bH
CONST	ENDS
;	COMDAT ?multiszStringVal@ATL@@3QBDB
CONST	SEGMENT
?multiszStringVal@ATL@@3QBDB DD FLAT:??_C@_01PLPBNMEI@M?$AA@ ; ATL::multiszStringVal
CONST	ENDS
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT
??_C@_01CPLAODJH@S?$AA@ DB 'S', 00H			; `string'
CONST	ENDS
;	COMDAT ?szStringVal@ATL@@3QBDB
CONST	SEGMENT
?szStringVal@ATL@@3QBDB DD FLAT:??_C@_01CPLAODJH@S?$AA@	; ATL::szStringVal
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?chEquals@ATL@@3DB
CONST	SEGMENT
?chEquals@ATL@@3DB DB 03dH				; ATL::chEquals
CONST	ENDS
;	COMDAT ?chQuote@ATL@@3DB
CONST	SEGMENT
?chQuote@ATL@@3DB DB 027H				; ATL::chQuote
CONST	ENDS
;	COMDAT ?chLeftBracket@ATL@@3DB
CONST	SEGMENT
?chLeftBracket@ATL@@3DB DB 07bH				; ATL::chLeftBracket
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?chRightBracket@ATL@@3DB
CONST	SEGMENT
?chRightBracket@ATL@@3DB DB 07dH			; ATL::chRightBracket
CONST	ENDS
;	COMDAT ?chDirSep@ATL@@3DB
CONST	SEGMENT
?chDirSep@ATL@@3DB DB 05cH				; ATL::chDirSep
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY *>::pmField
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB DW 04006H	; ATL::CVarTypeInfo<tagCY *>::VT
CONST	ENDS
;	COMDAT ??_C@_05PDIKPLII@AppID?$AA@
CONST	SEGMENT
??_C@_05PDIKPLII@AppID?$AA@ DB 'AppID', 00H		; `string'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB DW 06H		; ATL::CVarTypeInfo<tagCY>::VT
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
_NEAR_CLIP DD	03f800000r			; 1
_Q_SCALE DD	03a51b717r			; 0.0008
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB DW 04009H	; ATL::CVarTypeInfo<IDispatch * *>::VT
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT
_IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ??_C@_05GIBEAPNE@CLSID?$AA@
CONST	SEGMENT
??_C@_05GIBEAPNE@CLSID?$AA@ DB 'CLSID', 00H		; `string'
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch *>::pmField
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB DW 09H	; ATL::CVarTypeInfo<IDispatch *>::VT
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT __GUID_0000010c_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_0000010c_0000_0000_c000_000000000046 DD 010cH
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB DW 0400dH	; ATL::CVarTypeInfo<IUnknown * *>::VT
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown *>::pmField
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB DW 0dH	; ATL::CVarTypeInfo<IUnknown *>::VT
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t * *>::pmField
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB DW 04008H		; ATL::CVarTypeInfo<wchar_t * *>::VT
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_W@ATL@@2GB DW 08H			; ATL::CVarTypeInfo<wchar_t *>::VT
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT __GUID_0002e012_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_0002e012_0000_0000_c000_000000000046 DD 02e012H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB DW 0400cH	; ATL::CVarTypeInfo<tagVARIANT *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ DD 08H ; ATL::CVarTypeInfo<double *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAN@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAN@ATL@@2GB DW 04005H		; ATL::CVarTypeInfo<double *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ DD 08H ; ATL::CVarTypeInfo<double>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@N@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@N@ATL@@2GB DW 05H			; ATL::CVarTypeInfo<double>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ DD 08H ; ATL::CVarTypeInfo<float *>::pmField
CONST	ENDS
;	COMDAT __GUID_00020400_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020400_0000_0000_c000_000000000046 DD 020400H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAM@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAM@ATL@@2GB DW 04004H		; ATL::CVarTypeInfo<float *>::VT
CONST	ENDS
;	COMDAT __GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
CONST	SEGMENT
__GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851 DD 0a6bc3ac0H
	DW	0dbaaH
	DW	011ceH
	DB	09dH
	DB	0e3H
	DB	00H
	DB	0aaH
	DB	00H
	DB	04bH
	DB	0b8H
	DB	051H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ DD 08H ; ATL::CVarTypeInfo<float>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@M@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@M@ATL@@2GB DW 04H			; ATL::CVarTypeInfo<float>::VT
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000000_0000_0000_c000_000000000046 DD 00H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_K@ATL@@2GB DW 04015H		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
CONST	ENDS
;	COMDAT ??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	SEGMENT
??_C@_07KJLOKDKB@TypeLib?$AA@ DB 'TypeLib', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KEKAJNJI@Software?$AA@
CONST	SEGMENT
??_C@_08KEKAJNJI@Software?$AA@ DB 'Software', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDHFNJBJ@SYSTEM?$AA@
CONST	SEGMENT
??_C@_06FDHFNJBJ@SYSTEM?$AA@ DB 'SYSTEM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LOPHEHKG@SECURITY?$AA@
CONST	SEGMENT
??_C@_08LOPHEHKG@SECURITY?$AA@ DB 'SECURITY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03DDIMFGBA@SAM?$AA@
CONST	SEGMENT
??_C@_03DDIMFGBA@SAM?$AA@ DB 'SAM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IHBFOLAC@Mime?$AA@
CONST	SEGMENT
??_C@_04IHBFOLAC@Mime?$AA@ DB 'Mime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPIOJEA@Hardware?$AA@
CONST	SEGMENT
??_C@_08PPIOJEA@Hardware?$AA@ DB 'Hardware', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JKPGEJCH@Interface?$AA@
CONST	SEGMENT
??_C@_09JKPGEJCH@Interface?$AA@ DB 'Interface', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PICKODJL@FileType?$AA@
CONST	SEGMENT
??_C@_08PICKODJL@FileType?$AA@ DB 'FileType', 00H	; `string'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64>::pmField
CONST	ENDS
;	COMDAT ??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
CONST	SEGMENT
??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@ DB 'Component Categories', 00H ; `string'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_K@ATL@@2GB DW 015H			; ATL::CVarTypeInfo<unsigned __int64>::VT
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_J@ATL@@2GB DW 04014H		; ATL::CVarTypeInfo<__int64 *>::VT
CONST	ENDS
;	COMDAT ___pobjMapEntryLast
ATL$__z	SEGMENT
___pobjMapEntryLast DD 00H
ATL$__z	ENDS
;	COMDAT ___pobjMapEntryFirst
ATL$__a	SEGMENT
___pobjMapEntryFirst DD 00H
ATL$__a	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_J@ATL@@2GB DW 014H			; ATL::CVarTypeInfo<__int64>::VT
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??1CComBSTR@ATL@@QAE@XZ				; ATL::CComBSTR::~CComBSTR
PUBLIC	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
PUBLIC	??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
PUBLIC	??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z		; _com_error::_com_error
PUBLIC	??0_com_error@@QAE@ABV0@@Z			; _com_error::_com_error
PUBLIC	??1_com_error@@UAE@XZ				; _com_error::~_com_error
PUBLIC	?Error@_com_error@@QBEJXZ			; _com_error::Error
PUBLIC	??_G_com_error@@UAEPAXI@Z			; _com_error::`scalar deleting destructor'
PUBLIC	??0_D3DMATRIX@@QAE@XZ				; _D3DMATRIX::_D3DMATRIX
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?CheckHR@@YAXJ@Z				; CheckHR
PUBLIC	?CalcPolyZ@SPolygon@@QAEXM@Z			; SPolygon::CalcPolyZ
PUBLIC	?CopyToVertexBuffer@SPolygon@@QAEPAUTLVERTEX@@PAU2@@Z ; SPolygon::CopyToVertexBuffer
PUBLIC	??0ContextMPR@@QAE@XZ				; ContextMPR::ContextMPR
PUBLIC	??1ContextMPR@@UAE@XZ				; ContextMPR::~ContextMPR
PUBLIC	?Setup@ContextMPR@@QAEHPAVImageBuffer@@PAVDXContext@@@Z ; ContextMPR::Setup
PUBLIC	?Cleanup@ContextMPR@@QAEXXZ			; ContextMPR::Cleanup
PUBLIC	?NewImageBuffer@ContextMPR@@QAEXI@Z		; ContextMPR::NewImageBuffer
PUBLIC	?SetView@ContextMPR@@QAEXPAU_D3DMATRIX@@@Z	; ContextMPR::SetView
PUBLIC	?SetWorld@ContextMPR@@QAEXPAU_D3DMATRIX@@@Z	; ContextMPR::SetWorld
PUBLIC	?SetProjection@ContextMPR@@QAEXPAU_D3DMATRIX@@@Z ; ContextMPR::SetProjection
PUBLIC	?SetState@ContextMPR@@QAEXGK@Z			; ContextMPR::SetState
PUBLIC	?SetStateInternal@ContextMPR@@QAEXGK@Z		; ContextMPR::SetStateInternal
PUBLIC	?ClearBuffers@ContextMPR@@QAEXG@Z		; ContextMPR::ClearBuffers
PUBLIC	?StartDraw@ContextMPR@@QAEXXZ			; ContextMPR::StartDraw
PUBLIC	?EndDraw@ContextMPR@@QAEXXZ			; ContextMPR::EndDraw
PUBLIC	?StartFrame@ContextMPR@@QAEXXZ			; ContextMPR::StartFrame
PUBLIC	?FinishFrame@ContextMPR@@QAEXPAX@Z		; ContextMPR::FinishFrame
PUBLIC	?SetupMPRState@ContextMPR@@QAEXH@Z		; ContextMPR::SetupMPRState
PUBLIC	?SelectForegroundColor@ContextMPR@@QAEXH@Z	; ContextMPR::SelectForegroundColor
PUBLIC	?SelectBackgroundColor@ContextMPR@@QAEXH@Z	; ContextMPR::SelectBackgroundColor
PUBLIC	?SelectTexture1@ContextMPR@@QAEXH@Z		; ContextMPR::SelectTexture1
PUBLIC	?SelectTexture2@ContextMPR@@QAEXH@Z		; ContextMPR::SelectTexture2
PUBLIC	?SetTexture1@ContextMPR@@QAEXH@Z		; ContextMPR::SetTexture1
PUBLIC	?SetTexture2@ContextMPR@@QAEXH@Z		; ContextMPR::SetTexture2
PUBLIC	?RestoreState@ContextMPR@@QAEXH@Z		; ContextMPR::RestoreState
PUBLIC	?ApplyStateBlock@ContextMPR@@QAEXH@Z		; ContextMPR::ApplyStateBlock
PUBLIC	?UpdateSpecularFog@ContextMPR@@QAEXK@Z		; ContextMPR::UpdateSpecularFog
PUBLIC	?SetZBuffering@ContextMPR@@QAEXH@Z		; ContextMPR::SetZBuffering
PUBLIC	?SetNVGmode@ContextMPR@@QAEXH@Z			; ContextMPR::SetNVGmode
PUBLIC	?SetTVmode@ContextMPR@@QAEXH@Z			; ContextMPR::SetTVmode
PUBLIC	?SetIRmode@ContextMPR@@QAEXH@Z			; ContextMPR::SetIRmode
PUBLIC	?SetPalID@ContextMPR@@QAEXH@Z			; ContextMPR::SetPalID
PUBLIC	?SetTexID@ContextMPR@@QAEXH@Z			; ContextMPR::SetTexID
PUBLIC	?setGlobalZBias@ContextMPR@@QAEXM@Z		; ContextMPR::setGlobalZBias
PUBLIC	?InvalidateState@ContextMPR@@QAEXXZ		; ContextMPR::InvalidateState
PUBLIC	?Render2DBitmap@ContextMPR@@QAEXHHHHHHHPAK_N@Z	; ContextMPR::Render2DBitmap
PUBLIC	?ZCX_Calculate@ContextMPR@@QAEXXZ		; ContextMPR::ZCX_Calculate
PUBLIC	?TexColorDiffuse@ContextMPR@@QAEXXZ		; ContextMPR::TexColorDiffuse
PUBLIC	??0State@ContextMPR@@QAE@XZ			; ContextMPR::State::State
PUBLIC	?SetStateTable@ContextMPR@@IAEXHH@Z		; ContextMPR::SetStateTable
PUBLIC	?ClearStateTable@ContextMPR@@IAEXH@Z		; ContextMPR::ClearStateTable
PUBLIC	?SetCurrentState@ContextMPR@@IAEXHH@Z		; ContextMPR::SetCurrentState
PUBLIC	?CleanupMPRState@ContextMPR@@IAEXH@Z		; ContextMPR::CleanupMPRState
PUBLIC	?SetPrimitiveType@ContextMPR@@IAEXH@Z		; ContextMPR::SetPrimitiveType
PUBLIC	?AllocatePolygon@ContextMPR@@IAEXAAPAVSPolygon@@K@Z ; ContextMPR::AllocatePolygon
PUBLIC	?AddPolygon@ContextMPR@@IAEXAAPAVSPolygon@@0@Z	; ContextMPR::AddPolygon
PUBLIC	?RenderPolyList@ContextMPR@@IAEXAAPAVSPolygon@@@Z ; ContextMPR::RenderPolyList
PUBLIC	??0Stats@ContextMPR@@QAE@XZ			; ContextMPR::Stats::Stats
PUBLIC	?MPRColor2D3DRGBA@ContextMPR@@IAEKH@Z		; ContextMPR::MPRColor2D3DRGBA
PUBLIC	?UpdateViewport@ContextMPR@@IAEXXZ		; ContextMPR::UpdateViewport
PUBLIC	?LockVB@ContextMPR@@IAE_NHPAPAX@Z		; ContextMPR::LockVB
PUBLIC	?UnlockVB@ContextMPR@@IAEXXZ			; ContextMPR::UnlockVB
PUBLIC	?FlushVB@ContextMPR@@IAEXXZ			; ContextMPR::FlushVB
PUBLIC	?EnumSurfacesCB2@ContextMPR@@KGJPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@PAX@Z ; ContextMPR::EnumSurfacesCB2
PUBLIC	?Stats@ContextMPR@@IAEXXZ			; ContextMPR::Stats
PUBLIC	?DrawPoly@ContextMPR@@QAEXKPAUPoly@@PAH11PAUPtexcoord@@_N@Z ; ContextMPR::DrawPoly
PUBLIC	?Draw2DPoint@ContextMPR@@QAEXPAUTpoint@@@Z	; ContextMPR::Draw2DPoint
PUBLIC	?Draw2DPoint@ContextMPR@@QAEXMM@Z		; ContextMPR::Draw2DPoint
PUBLIC	?Draw2DLine@ContextMPR@@QAEXPAUTpoint@@0@Z	; ContextMPR::Draw2DLine
PUBLIC	?Draw2DLine@ContextMPR@@QAEXMMMM@Z		; ContextMPR::Draw2DLine
PUBLIC	?DrawPrimitive2D@ContextMPR@@QAEXHHPAH@Z	; ContextMPR::DrawPrimitive2D
PUBLIC	?DrawPrimitive@ContextMPR@@QAEXHGGPAUMPRVtx_t@@G@Z ; ContextMPR::DrawPrimitive
PUBLIC	?DrawPrimitive@ContextMPR@@QAEXHGGPAUMPRVtxTexClr_t@@G@Z ; ContextMPR::DrawPrimitive
PUBLIC	?DrawPrimitive@ContextMPR@@QAEXHGGPAPAUMPRVtxTexClr_t@@_N@Z ; ContextMPR::DrawPrimitive
PUBLIC	?TextOutA@ContextMPR@@QAEXFFKPAD@Z		; ContextMPR::TextOutA
PUBLIC	?SetViewportAbs@ContextMPR@@QAEXHHHH@Z		; ContextMPR::SetViewportAbs
PUBLIC	?LockViewport@ContextMPR@@QAEXXZ		; ContextMPR::LockViewport
PUBLIC	?UnlockViewport@ContextMPR@@QAEXXZ		; ContextMPR::UnlockViewport
PUBLIC	?GetViewport@ContextMPR@@QAEXPAUtagRECT@@@Z	; ContextMPR::GetViewport
PUBLIC	?FlushPolyLists@ContextMPR@@QAEXXZ		; ContextMPR::FlushPolyLists
PUBLIC	?ZeroViewport@ContextMPR@@QAEXXZ		; ContextMPR::ZeroViewport
PUBLIC	??_GContextMPR@@UAEPAXI@Z			; ContextMPR::`scalar deleting destructor'
PUBLIC	?targetSurface@ImageBuffer@@QAEPAUIDirectDrawSurface7@@XZ ; ImageBuffer::targetSurface
PUBLIC	?FilteringOn@PlayerOptionsClass@@QAEHXZ		; PlayerOptionsClass::FilteringOn
PUBLIC	?GetLightLevel@CTimeOfDay@@QAEMXZ		; CTimeOfDay::GetLightLevel
PUBLIC	?LinearFogEnd@RealWeather@@QAEMXZ		; RealWeather::LinearFogEnd
PUBLIC	?LinearFog@CDXEngine@@QAE_NXZ			; CDXEngine::LinearFog
PUBLIC	??0?$_com_ptr_t@V?$_com_IIID@UIDirect3DVertexBuffer7@@$1?IID_IDirect3DVertexBuffer7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirect3DVertexBuffer7,&IID_IDirect3DVertexBuffer7> >::_com_ptr_t<_com_IIID<IDirect3DVertexBuffer7,&IID_IDirect3DVertexBuffer7> >
PUBLIC	??1?$_com_ptr_t@V?$_com_IIID@UIDirect3DVertexBuffer7@@$1?IID_IDirect3DVertexBuffer7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirect3DVertexBuffer7,&IID_IDirect3DVertexBuffer7> >::~_com_ptr_t<_com_IIID<IDirect3DVertexBuffer7,&IID_IDirect3DVertexBuffer7> >
PUBLIC	?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirect3DVertexBuffer7@@$1?IID_IDirect3DVertexBuffer7@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirect3DVertexBuffer7,&IID_IDirect3DVertexBuffer7> >::_Release
PUBLIC	??0?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
PUBLIC	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
PUBLIC	??B?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDrawSurface7@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator IDirectDrawSurface7 *
PUBLIC	??I?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEPAPAUIDirectDrawSurface7@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator&
PUBLIC	?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::_Release
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7_com_error@@6B@				; _com_error::`vftable'
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	__TI1?AV_com_error@@
PUBLIC	__CTA1?AV_com_error@@
PUBLIC	??_R0?AV_com_error@@@8				; _com_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AV_com_error@@@8??0_com_error@@QAE@ABV0@@Z16
PUBLIC	?StateTableInternal@ContextMPR@@2PAVState@1@A	; ContextMPR::StateTableInternal
PUBLIC	??_7ContextMPR@@6B@				; ContextMPR::`vftable'
PUBLIC	??_C@_0CA@IMCKJHEG@ContextMPR?3?3Setup?5?9?5Error?50x?$CFX?6?$AA@ ; `string'
PUBLIC	??_C@_0DC@OCNOBFOG@ContextMPR?3?3FinishFrame?5?9?5BeginS@ ; `string'
PUBLIC	??_C@_0DB@KDPJANEM@ContextMPR?3?3StartFrame?5?9?5Restori@ ; `string'
PUBLIC	??_C@_0DA@LPDBAKLM@ContextMPR?3?3FinishFrame?5?9?5EndSce@ ; `string'
PUBLIC	??_C@_0DC@NBBIMCLB@ContextMPR?3?3FinishFrame?5?9?5Restor@ ; `string'
PUBLIC	??_C@_0DK@LMBIKOPJ@ContextMPR?3?3FinishFrame?5?9?5Retry?5@ ; `string'
PUBLIC	??_C@_0CJ@BLNLALNC@ContextMPR?3?3Render2DBitmap?5?9?5Err@ ; `string'
PUBLIC	??_C@_0CF@KKHAFFIM@ContextMPR?5?9?5Setting?5up?5state?5ta@ ; `string'
PUBLIC	??_C@_0CD@PPAKMLDH@ContextMPR?5?9?5Clearing?5state?5tabl@ ; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4_com_error@@6B@				; _com_error::`RTTI Complete Object Locator'
PUBLIC	??_R3_com_error@@8				; _com_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_com_error@@8				; _com_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_com_error@@8			; _com_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ContextMPR@@6B@				; ContextMPR::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVContextMPR@@@8				; ContextMPR `RTTI Type Descriptor'
PUBLIC	??_R3ContextMPR@@8				; ContextMPR::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ContextMPR@@8				; ContextMPR::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ContextMPR@@8			; ContextMPR::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3ca3d70a
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@40a00000
PUBLIC	__real@437f0000
PUBLIC	__real@4888b800
PUBLIC	__real@4b7fffff
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	__imp__LocalFree@4:PROC
EXTRN	__imp__SetBkMode@8:PROC
EXTRN	__imp__SetTextColor@8:PROC
EXTRN	__imp__MoveToEx@16:PROC
EXTRN	__imp__DrawTextA@20:PROC
EXTRN	__imp__SysFreeString@4:PROC
EXTRN	__imp__GetErrorInfo@8:PROC
EXTRN	??_E_com_error@@UAEPAXI@Z:PROC			; _com_error::`vector deleting destructor'
EXTRN	_D3DXCreateTexture@32:PROC
EXTRN	_D3DXLoadTextureFromMemory@36:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	_AllocInit:PROC
EXTRN	_Alloc:PROC
EXTRN	_AllocResetPool:PROC
EXTRN	?SetRenderTarget@DXContext@@QAE_NPAUIDirectDrawSurface7@@@Z:PROC ; DXContext::SetRenderTarget
EXTRN	??_EContextMPR@@UAEPAXI@Z:PROC			; ContextMPR::`vector deleting destructor'
EXTRN	_RadixReset:PROC
EXTRN	_RadixSortDescending:PROC
EXTRN	?RestoreAll@TextureBankClass@@SAXXZ:PROC	; TextureBankClass::RestoreAll
EXTRN	?RestoreAll@TextureDB@@QAEXXZ:PROC		; TextureDB::RestoreAll
EXTRN	?RestoreAll@FarTexDB@@QAEXXZ:PROC		; FarTexDB::RestoreAll
EXTRN	_MonoPrint:PROC
EXTRN	?F4IsBadReadPtr@@YA_NPBXI@Z:PROC		; F4IsBadReadPtr
EXTRN	?GetOTWDisplayMode@OTWDriverClass@@QAE?AW4OTWDisplayMode@1@XZ:PROC ; OTWDriverClass::GetOTWDisplayMode
EXTRN	?FlushBuffers@CDXEngine@@QAEXXZ:PROC		; CDXEngine::FlushBuffers
EXTRN	?SetStencilMode@CDXEngine@@QAEKK@Z:PROC		; CDXEngine::SetStencilMode
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ColorPool@ColorBankClass@@2PAUPcolor@@A:DWORD	; ColorBankClass::ColorPool
EXTRN	?TODcolor@ColorBankClass@@2KA:DWORD		; ColorBankClass::TODcolor
EXTRN	?PitLightLevel@ColorBankClass@@2HA:DWORD	; ColorBankClass::PitLightLevel
EXTRN	?XformedPosPool@StateStackClass@@2PAUSpoint@@A:DWORD ; StateStackClass::XformedPosPool
EXTRN	?IntensityPool@StateStackClass@@2PAMA:DWORD	; StateStackClass::IntensityPool
EXTRN	?TheTerrTextures@@3VTextureDB@@A:BYTE		; TheTerrTextures
EXTRN	?TheFarTextures@@3VFarTexDB@@A:BYTE		; TheFarTextures
EXTRN	?PlayerOptions@@3VPlayerOptionsClass@@A:BYTE	; PlayerOptions
EXTRN	?DisplayOptions@@3VDisplayOptionsClass@@A:BYTE	; DisplayOptions
EXTRN	?TheTimeOfDay@@3VCTimeOfDay@@A:BYTE		; TheTimeOfDay
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	?realWeather@@3PAVRealWeather@@A:DWORD		; realWeather
EXTRN	?p3DpitHilite@@3KA:DWORD			; p3DpitHilite
EXTRN	?p3DpitLolite@@3KA:DWORD			; p3DpitLolite
EXTRN	?m_LinearFog@CDXEngine@@0_NA:BYTE		; CDXEngine::m_LinearFog
EXTRN	?TheDXEngine@@3VCDXEngine@@A:BYTE		; TheDXEngine
EXTRN	?g_bUse_DX_Engine@@3_NA:BYTE			; g_bUse_DX_Engine
EXTRN	?g_bSlowButSafe@@3_NA:BYTE			; g_bSlowButSafe
EXTRN	?g_fMipLodBias@@3MA:DWORD			; g_fMipLodBias
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

?StateTableInternal@ContextMPR@@2PAVState@1@A DB 02f8H DUP (?) ; ContextMPR::StateTableInternal
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@4b7fffff
CONST	SEGMENT
__real@4b7fffff DD 04b7fffffr			; 1.67772e+007
CONST	ENDS
;	COMDAT __real@4888b800
CONST	SEGMENT
__real@4888b800 DD 04888b800r			; 280000
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3ca3d70a
CONST	SEGMENT
__real@3ca3d70a DD 03ca3d70ar			; 0.02
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@ContextMPR@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ContextMPR@@8 DD FLAT:??_R0?AVContextMPR@@@8 ; ContextMPR::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ContextMPR@@8
rdata$r	ENDS
;	COMDAT ??_R2ContextMPR@@8
rdata$r	SEGMENT
??_R2ContextMPR@@8 DD FLAT:??_R1A@?0A@EA@ContextMPR@@8	; ContextMPR::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ContextMPR@@8
rdata$r	SEGMENT
??_R3ContextMPR@@8 DD 00H				; ContextMPR::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ContextMPR@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVContextMPR@@@8
_DATA	SEGMENT
??_R0?AVContextMPR@@@8 DD FLAT:??_7type_info@@6B@	; ContextMPR `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVContextMPR@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ContextMPR@@6B@
rdata$r	SEGMENT
??_R4ContextMPR@@6B@ DD 00H				; ContextMPR::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVContextMPR@@@8
	DD	FLAT:??_R3ContextMPR@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_com_error@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_com_error@@8 DD FLAT:??_R0?AV_com_error@@@8 ; _com_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_com_error@@8
rdata$r	ENDS
;	COMDAT ??_R2_com_error@@8
rdata$r	SEGMENT
??_R2_com_error@@8 DD FLAT:??_R1A@?0A@EA@_com_error@@8	; _com_error::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_com_error@@8
rdata$r	SEGMENT
??_R3_com_error@@8 DD 00H				; _com_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_com_error@@8
rdata$r	ENDS
;	COMDAT ??_R4_com_error@@6B@
rdata$r	SEGMENT
??_R4_com_error@@6B@ DD 00H				; _com_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_com_error@@@8
	DD	FLAT:??_R3_com_error@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@PPAKMLDH@ContextMPR?5?9?5Clearing?5state?5tabl@
CONST	SEGMENT
??_C@_0CD@PPAKMLDH@ContextMPR?5?9?5Clearing?5state?5tabl@ DB 'ContextMPR '
	DB	'- Clearing state table', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@KKHAFFIM@ContextMPR?5?9?5Setting?5up?5state?5ta@
CONST	SEGMENT
??_C@_0CF@KKHAFFIM@ContextMPR?5?9?5Setting?5up?5state?5ta@ DB 'ContextMPR'
	DB	' - Setting up state table', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@BLNLALNC@ContextMPR?3?3Render2DBitmap?5?9?5Err@
CONST	SEGMENT
??_C@_0CJ@BLNLALNC@ContextMPR?3?3Render2DBitmap?5?9?5Err@ DB 'ContextMPR:'
	DB	':Render2DBitmap - Error 0x%X', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@LMBIKOPJ@ContextMPR?3?3FinishFrame?5?9?5Retry?5@
CONST	SEGMENT
??_C@_0DK@LMBIKOPJ@ContextMPR?3?3FinishFrame?5?9?5Retry?5@ DB 'ContextMPR'
	DB	'::FinishFrame - Retry for EndScene failed 0x%X', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@NBBIMCLB@ContextMPR?3?3FinishFrame?5?9?5Restor@
CONST	SEGMENT
??_C@_0DC@NBBIMCLB@ContextMPR?3?3FinishFrame?5?9?5Restor@ DB 'ContextMPR:'
	DB	':FinishFrame - Restoring all surfaces', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@LPDBAKLM@ContextMPR?3?3FinishFrame?5?9?5EndSce@
CONST	SEGMENT
??_C@_0DA@LPDBAKLM@ContextMPR?3?3FinishFrame?5?9?5EndSce@ DB 'ContextMPR:'
	DB	':FinishFrame - EndScene failed 0x%X', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@KDPJANEM@ContextMPR?3?3StartFrame?5?9?5Restori@
CONST	SEGMENT
??_C@_0DB@KDPJANEM@ContextMPR?3?3StartFrame?5?9?5Restori@ DB 'ContextMPR:'
	DB	':StartFrame - Restoring all surfaces', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@OCNOBFOG@ContextMPR?3?3FinishFrame?5?9?5BeginS@
CONST	SEGMENT
??_C@_0DC@OCNOBFOG@ContextMPR?3?3FinishFrame?5?9?5BeginS@ DB 'ContextMPR:'
	DB	':FinishFrame - BeginScene failed 0x%X', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@IMCKJHEG@ContextMPR?3?3Setup?5?9?5Error?50x?$CFX?6?$AA@
CONST	SEGMENT
??_C@_0CA@IMCKJHEG@ContextMPR?3?3Setup?5?9?5Error?50x?$CFX?6?$AA@ DB 'Con'
	DB	'textMPR::Setup - Error 0x%X', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_7ContextMPR@@6B@
CONST	SEGMENT
??_7ContextMPR@@6B@ DD FLAT:??_R4ContextMPR@@6B@	; ContextMPR::`vftable'
	DD	FLAT:??_EContextMPR@@UAEPAXI@Z
CONST	ENDS
;	COMDAT __CT??_R0?AV_com_error@@@8??0_com_error@@QAE@ABV0@@Z16
xdata$x	SEGMENT
__CT??_R0?AV_com_error@@@8??0_com_error@@QAE@ABV0@@Z16 DD 00H
	DD	FLAT:??_R0?AV_com_error@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	010H
	DD	FLAT:??0_com_error@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AV_com_error@@@8
_DATA	SEGMENT
??_R0?AV_com_error@@@8 DD FLAT:??_7type_info@@6B@	; _com_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_com_error@@', 00H
_DATA	ENDS
;	COMDAT __CTA1?AV_com_error@@
xdata$x	SEGMENT
__CTA1?AV_com_error@@ DD 01H
	DD	FLAT:__CT??_R0?AV_com_error@@@8??0_com_error@@QAE@ABV0@@Z16
xdata$x	ENDS
;	COMDAT __TI1?AV_com_error@@
xdata$x	SEGMENT
__TI1?AV_com_error@@ DD 00H
	DD	FLAT:??1_com_error@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA1?AV_com_error@@
xdata$x	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7_com_error@@6B@
CONST	SEGMENT
??_7_com_error@@6B@ DD FLAT:??_R4_com_error@@6B@	; _com_error::`vftable'
	DD	FLAT:??_E_com_error@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?NewImageBuffer@ContextMPR@@QAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?NewImageBuffer@ContextMPR@@QAEXI@Z$0
__catchsym$?TextOutA@ContextMPR@@QAEXFFKPAD@Z$3 DD 00H
	DD	FLAT:??_R0?AV_com_error@@@8
	DD	0ffffffd0H
	DD	FLAT:__catch$?TextOutA@ContextMPR@@QAEXFFKPAD@Z$0
__unwindtable$?TextOutA@ContextMPR@@QAEXFFKPAD@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__catchsym$?Render2DBitmap@ContextMPR@@QAEXHHHHHHHPAK_N@Z$4 DD 00H
	DD	FLAT:??_R0?AV_com_error@@@8
	DD	0fffffef4H
	DD	FLAT:__catch$?Render2DBitmap@ContextMPR@@QAEXHHHHHHHPAK_N@Z$0
__catchsym$?Setup@ContextMPR@@QAEHPAVImageBuffer@@PAVDXContext@@@Z$4 DD 00H
	DD	FLAT:??_R0?AV_com_error@@@8
	DD	0ffffff94H
	DD	FLAT:__catch$?Setup@ContextMPR@@QAEHPAVImageBuffer@@PAVDXContext@@@Z$0
__tryblocktable$?TextOutA@ContextMPR@@QAEXFFKPAD@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?TextOutA@ContextMPR@@QAEXFFKPAD@Z$3
__tryblocktable$?Render2DBitmap@ContextMPR@@QAEXHHHHHHHPAK_N@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?Render2DBitmap@ContextMPR@@QAEXHHHHHHHPAK_N@Z$4
__tryblocktable$?Setup@ContextMPR@@QAEHPAVImageBuffer@@PAVDXContext@@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?Setup@ContextMPR@@QAEHPAVImageBuffer@@PAVDXContext@@@Z$4
__unwindtable$?Render2DBitmap@ContextMPR@@QAEXHHHHHHHPAK_N@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?Render2DBitmap@ContextMPR@@QAEXHHHHHHHPAK_N@Z$2
	DD	0ffffffffH
	DD	00H
__unwindtable$?Setup@ContextMPR@@QAEHPAVImageBuffer@@PAVDXContext@@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?Setup@ContextMPR@@QAEHPAVImageBuffer@@PAVDXContext@@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?TextOutA@ContextMPR@@QAEXFFKPAD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?TextOutA@ContextMPR@@QAEXFFKPAD@Z
	DD	01H
	DD	FLAT:__tryblocktable$?TextOutA@ContextMPR@@QAEXFFKPAD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Render2DBitmap@ContextMPR@@QAEXHHHHHHHPAK_N@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?Render2DBitmap@ContextMPR@@QAEXHHHHHHHPAK_N@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Render2DBitmap@ContextMPR@@QAEXHHHHHHHPAK_N@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?NewImageBuffer@ContextMPR@@QAEXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?NewImageBuffer@ContextMPR@@QAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Setup@ContextMPR@@QAEHPAVImageBuffer@@PAVDXContext@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?Setup@ContextMPR@@QAEHPAVImageBuffer@@PAVDXContext@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Setup@ContextMPR@@QAEHPAVImageBuffer@@PAVDXContext@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?StateTableInternal$initializer$@ContextMPR@@2P6AXXZA DD FLAT:??__E?StateTableInternal@ContextMPR@@2PAVState@1@A@@YAXXZ ; ContextMPR::StateTableInternal$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ PROC ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::_Release, COMDAT
; _this$ = ecx

; 780  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 781  :         if (m_pInterface != NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release

; 782  :             m_pInterface->Release();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN2@Release:

; 783  :         }
; 784  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ ENDP ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??I?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEPAPAUIDirectDrawSurface7@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEPAPAUIDirectDrawSurface7@@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator&, COMDAT
; _this$ = ecx

; 391  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 392  :         _Release();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::_Release

; 393  :         m_pInterface = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 394  :         return &m_pInterface;

	mov	eax, DWORD PTR _this$[ebp]

; 395  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??I?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEPAPAUIDirectDrawSurface7@@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator&
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??B?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDrawSurface7@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDrawSurface7@@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator IDirectDrawSurface7 *, COMDAT
; _this$ = ecx

; 358  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 359  :         return m_pInterface; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 360  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDrawSurface7@@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator IDirectDrawSurface7 *
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >, COMDAT
; _this$ = ecx

; 315  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 316  :         _Release(); 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::_Release

; 317  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??0?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >, COMDAT
; _this$ = ecx

; 135  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 136  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirect3DVertexBuffer7@@$1?IID_IDirect3DVertexBuffer7@@3U_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirect3DVertexBuffer7@@$1?IID_IDirect3DVertexBuffer7@@3U_GUID@@B@@@@AAEXXZ PROC ; _com_ptr_t<_com_IIID<IDirect3DVertexBuffer7,&IID_IDirect3DVertexBuffer7> >::_Release, COMDAT
; _this$ = ecx

; 780  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 781  :         if (m_pInterface != NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release

; 782  :             m_pInterface->Release();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN2@Release:

; 783  :         }
; 784  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirect3DVertexBuffer7@@$1?IID_IDirect3DVertexBuffer7@@3U_GUID@@B@@@@AAEXXZ ENDP ; _com_ptr_t<_com_IIID<IDirect3DVertexBuffer7,&IID_IDirect3DVertexBuffer7> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??1?$_com_ptr_t@V?$_com_IIID@UIDirect3DVertexBuffer7@@$1?IID_IDirect3DVertexBuffer7@@3U_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_com_ptr_t@V?$_com_IIID@UIDirect3DVertexBuffer7@@$1?IID_IDirect3DVertexBuffer7@@3U_GUID@@B@@@@QAE@XZ PROC ; _com_ptr_t<_com_IIID<IDirect3DVertexBuffer7,&IID_IDirect3DVertexBuffer7> >::~_com_ptr_t<_com_IIID<IDirect3DVertexBuffer7,&IID_IDirect3DVertexBuffer7> >, COMDAT
; _this$ = ecx

; 315  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 316  :         _Release(); 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirect3DVertexBuffer7@@$1?IID_IDirect3DVertexBuffer7@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirect3DVertexBuffer7,&IID_IDirect3DVertexBuffer7> >::_Release

; 317  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_com_ptr_t@V?$_com_IIID@UIDirect3DVertexBuffer7@@$1?IID_IDirect3DVertexBuffer7@@3U_GUID@@B@@@@QAE@XZ ENDP ; _com_ptr_t<_com_IIID<IDirect3DVertexBuffer7,&IID_IDirect3DVertexBuffer7> >::~_com_ptr_t<_com_IIID<IDirect3DVertexBuffer7,&IID_IDirect3DVertexBuffer7> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??0?$_com_ptr_t@V?$_com_IIID@UIDirect3DVertexBuffer7@@$1?IID_IDirect3DVertexBuffer7@@3U_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_com_ptr_t@V?$_com_IIID@UIDirect3DVertexBuffer7@@$1?IID_IDirect3DVertexBuffer7@@3U_GUID@@B@@@@QAE@XZ PROC ; _com_ptr_t<_com_IIID<IDirect3DVertexBuffer7,&IID_IDirect3DVertexBuffer7> >::_com_ptr_t<_com_IIID<IDirect3DVertexBuffer7,&IID_IDirect3DVertexBuffer7> >, COMDAT
; _this$ = ecx

; 135  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 136  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_com_ptr_t@V?$_com_IIID@UIDirect3DVertexBuffer7@@$1?IID_IDirect3DVertexBuffer7@@3U_GUID@@B@@@@QAE@XZ ENDP ; _com_ptr_t<_com_IIID<IDirect3DVertexBuffer7,&IID_IDirect3DVertexBuffer7> >::_com_ptr_t<_com_IIID<IDirect3DVertexBuffer7,&IID_IDirect3DVertexBuffer7> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
;	COMDAT ??__E?StateTableInternal@ContextMPR@@2PAVState@1@A@@YAXXZ
text$yc	SEGMENT
??__E?StateTableInternal@ContextMPR@@2PAVState@1@A@@YAXXZ PROC ; `dynamic initializer for 'ContextMPR::StateTableInternal'', COMDAT

; 65   : ContextMPR::State ContextMPR::StateTableInternal[MAXIMUM_MPR_STATE];

	push	ebp
	mov	ebp, esp
	push	OFFSET ??0State@ContextMPR@@QAE@XZ	; ContextMPR::State::State
	push	38					; 00000026H
	push	20					; 00000014H
	push	OFFSET ?StateTableInternal@ContextMPR@@2PAVState@1@A ; ContextMPR::StateTableInternal
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	pop	ebp
	ret	0
??__E?StateTableInternal@ContextMPR@@2PAVState@1@A@@YAXXZ ENDP ; `dynamic initializer for 'ContextMPR::StateTableInternal''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.h
;	COMDAT ?LinearFog@CDXEngine@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?LinearFog@CDXEngine@@QAE_NXZ PROC			; CDXEngine::LinearFog, COMDAT
; _this$ = ecx

; 120  : 	bool LinearFog(void) { return m_LinearFog; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, BYTE PTR ?m_LinearFog@CDXEngine@@0_NA ; CDXEngine::m_LinearFog
	mov	esp, ebp
	pop	ebp
	ret	0
?LinearFog@CDXEngine@@QAE_NXZ ENDP			; CDXEngine::LinearFog
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\realweather.h
;	COMDAT ?LinearFogEnd@RealWeather@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?LinearFogEnd@RealWeather@@QAEMXZ PROC			; RealWeather::LinearFogEnd, COMDAT
; _this$ = ecx

; 144  : 	float	LinearFogEnd(void) { return LinearFogUsed; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+15964]
	mov	esp, ebp
	pop	ebp
	ret	0
?LinearFogEnd@RealWeather@@QAEMXZ ENDP			; RealWeather::LinearFogEnd
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tod.h
;	COMDAT ?GetLightLevel@CTimeOfDay@@QAEMXZ
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
?GetLightLevel@CTimeOfDay@@QAEMXZ PROC			; CTimeOfDay::GetLightLevel, COMDAT
; _this$ = ecx

; 108  : 	float GetLightLevel()						{ return Ambient + Diffuse; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+220]
	addss	xmm0, DWORD PTR [ecx+224]
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLightLevel@CTimeOfDay@@QAEMXZ ENDP			; CTimeOfDay::GetLightLevel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?FilteringOn@PlayerOptionsClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?FilteringOn@PlayerOptionsClass@@QAEHXZ PROC		; PlayerOptionsClass::FilteringOn, COMDAT
; _this$ = ecx

; 116  : 	int FilteringOn (void)									{ return (DispFlags & DISP_BILINEAR) && TRUE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 16					; 00000010H
	je	SHORT $LN3@FilteringO
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@FilteringO
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@FilteringO
$LN3@FilteringO:
	mov	DWORD PTR tv68[ebp], 0
$LN4@FilteringO:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?FilteringOn@PlayerOptionsClass@@QAEHXZ ENDP		; PlayerOptionsClass::FilteringOn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\imagebuf.h
;	COMDAT ?targetSurface@ImageBuffer@@QAEPAUIDirectDrawSurface7@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?targetSurface@ImageBuffer@@QAEPAUIDirectDrawSurface7@@XZ PROC ; ImageBuffer::targetSurface, COMDAT
; _this$ = ecx

; 42   : 	IDirectDrawSurface7 *targetSurface()	{ return m_pDDSBack; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+164]
	mov	esp, ebp
	pop	ebp
	ret	0
?targetSurface@ImageBuffer@@QAEPAUIDirectDrawSurface7@@XZ ENDP ; ImageBuffer::targetSurface
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GContextMPR@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GContextMPR@@UAEPAXI@Z PROC				; ContextMPR::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ContextMPR@@UAE@XZ			; ContextMPR::~ContextMPR
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GContextMPR@@UAEPAXI@Z ENDP				; ContextMPR::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZeroViewport@ContextMPR@@QAEXXZ PROC			; ContextMPR::ZeroViewport
; _this$ = ecx

; 2396 : {	

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2397 : 	//ZeroMemory(&m_rcVP,sizeof(m_rcVP));
; 2398 : 	m_rcVP.right = m_rcVP.left;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262408]
	mov	DWORD PTR [eax+262416], edx

; 2399 : 	m_rcVP.bottom = m_rcVP.top;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262412]
	mov	DWORD PTR [eax+262420], edx

; 2400 : 
; 2401 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ZeroViewport@ContextMPR@@QAEXXZ ENDP			; ContextMPR::ZeroViewport
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_k$1 = -2						; size = 1
tv84 = -1						; size = 1
?FlushPolyLists@ContextMPR@@QAEXXZ PROC			; ContextMPR::FlushPolyLists
; _this$ = ecx

; 2290 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2291 : 	VCounter=0;

	mov	DWORD PTR ?VCounter@@3KA, 0		; VCounter

; 2292 : 
; 2293 : 
; 2294 : 
; 2295 : //	START_PROFILE(BSP_ENGINE_PROF);
; 2296 : 
; 2297 : 	SetState(MPR_STA_ENABLES,MPR_SE_Z_WRITE);

	push	512					; 00000200H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 2298 : 	SetState(MPR_STA_ENABLES,MPR_SE_Z_BUFFERING);

	push	8
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 2299 : 
; 2300 : 	if(plainPolys != NULL) RenderPolyList(plainPolys);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+262480], 0
	je	SHORT $LN4@FlushPolyL
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262480				; 00040150H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RenderPolyList@ContextMPR@@IAEXAAPAVSPolygon@@@Z ; ContextMPR::RenderPolyList
$LN4@FlushPolyL:

; 2301 : 	if(texturedPolys != NULL) RenderPolyList(texturedPolys);

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+262484], 0
	je	SHORT $LN3@FlushPolyL
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 262484				; 00040154H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RenderPolyList@ContextMPR@@IAEXAAPAVSPolygon@@@Z ; ContextMPR::RenderPolyList
$LN3@FlushPolyL:

; 2302 : 
; 2303 : //	STOP_PROFILE(BSP_ENGINE_PROF);
; 2304 : 
; 2305 : 	// COBRA - DX - Switching btw Old and New Engine - Flush of the objects
; 2306 : 	if(g_bUse_DX_Engine){

	movzx	ecx, BYTE PTR ?g_bUse_DX_Engine@@3_NA	; g_bUse_DX_Engine
	test	ecx, ecx
	je	SHORT $LN2@FlushPolyL

; 2307 : 		//START_PROFILE(DX_ENGINE_PROF);
; 2308 : 		bool	k=bZBuffering?true:false;

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+40], 0
	je	SHORT $LN7@FlushPolyL
	mov	BYTE PTR tv84[ebp], 1
	jmp	SHORT $LN8@FlushPolyL
$LN7@FlushPolyL:
	mov	BYTE PTR tv84[ebp], 0
$LN8@FlushPolyL:
	mov	al, BYTE PTR tv84[ebp]
	mov	BYTE PTR _k$1[ebp], al

; 2309 : 		bZBuffering = false;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], 0

; 2310 : 		TheDXEngine.FlushBuffers();

	mov	ecx, OFFSET ?TheDXEngine@@3VCDXEngine@@A ; TheDXEngine
	call	?FlushBuffers@CDXEngine@@QAEXXZ		; CDXEngine::FlushBuffers

; 2311 : 		bZBuffering = k;

	movzx	edx, BYTE PTR _k$1[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], edx

; 2312 : 		InvalidateState();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InvalidateState@ContextMPR@@QAEXXZ	; ContextMPR::InvalidateState
$LN2@FlushPolyL:

; 2313 : 		//STOP_PROFILE(DX_ENGINE_PROF);
; 2314 : 	}
; 2315 : 
; 2316 : //	START_PROFILE(BSP_ENGINE_PROF);
; 2317 : 
; 2318 : 	SetState(MPR_STA_DISABLES,MPR_SE_Z_WRITE);

	push	512					; 00000200H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 2319 : 	//TheDXEngine.SetStencilMode(STENCIL_CHECK);
; 2320 : 
; 2321 : 	if(translucentPolys != NULL) RenderPolyList(translucentPolys);

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+262488], 0
	je	SHORT $LN1@FlushPolyL
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 262488				; 00040158H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RenderPolyList@ContextMPR@@IAEXAAPAVSPolygon@@@Z ; ContextMPR::RenderPolyList
$LN1@FlushPolyL:

; 2322 : 	
; 2323 : 	TheDXEngine.SetStencilMode(STENCIL_OFF);

	push	0
	mov	ecx, OFFSET ?TheDXEngine@@3VCDXEngine@@A ; TheDXEngine
	call	?SetStencilMode@CDXEngine@@QAEKK@Z	; CDXEngine::SetStencilMode

; 2324 : 
; 2325 : 	mIdx = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262464], 0

; 2326 : 	plainPolys = texturedPolys = translucentPolys = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262488], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262484], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262480], 0

; 2327 : 	plainPolyVCnt = texturedPolyVCnt = translucentPolyVCnt = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262476], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262472], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262468], 0

; 2328 : 
; 2329 : 
; 2330 : 
; 2331 : 	AllocResetPool();

	call	_AllocResetPool

; 2332 : 	SetZBuffering(FALSE);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetZBuffering@ContextMPR@@QAEXH@Z	; ContextMPR::SetZBuffering

; 2333 : 	SetState(MPR_STA_DISABLES,MPR_SE_Z_BUFFERING);

	push	8
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 2334 : 
; 2335 : //	STOP_PROFILE(BSP_ENGINE_PROF);
; 2336 : 
; 2337 : 	//REPORT_VALUE("Vertices", VCounter);
; 2338 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FlushPolyLists@ContextMPR@@QAEXXZ ENDP			; ContextMPR::FlushPolyLists
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_prc$ = 8						; size = 4
?GetViewport@ContextMPR@@QAEXPAUtagRECT@@@Z PROC	; ContextMPR::GetViewport
; _this$ = ecx

; 2170 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2171 :     ShiAssert(FALSE == F4IsBadWritePtr(prc,sizeof *prc));
; 2172 : 	*prc = m_rcVP;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 262408				; 00040108H
	mov	ecx, DWORD PTR _prc$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 2173 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetViewport@ContextMPR@@QAEXPAUtagRECT@@@Z ENDP	; ContextMPR::GetViewport
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?UnlockViewport@ContextMPR@@QAEXXZ PROC			; ContextMPR::UnlockViewport
; _this$ = ecx

; 2165 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2166 : 	m_bViewportLocked = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+262502], 0

; 2167 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?UnlockViewport@ContextMPR@@QAEXXZ ENDP			; ContextMPR::UnlockViewport
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?LockViewport@ContextMPR@@QAEXXZ PROC			; ContextMPR::LockViewport
; _this$ = ecx

; 2160 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2161 : 	m_bViewportLocked = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+262502], 1

; 2162 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?LockViewport@ContextMPR@@QAEXXZ ENDP			; ContextMPR::LockViewport
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nLeft$ = 8						; size = 4
_nTop$ = 12						; size = 4
_nRight$ = 16						; size = 4
_nBottom$ = 20						; size = 4
?SetViewportAbs@ContextMPR@@QAEXHHHH@Z PROC		; ContextMPR::SetViewportAbs
; _this$ = ecx

; 2147 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2148 : 	if(m_bViewportLocked)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+262502]
	test	ecx, ecx
	je	SHORT $LN1@SetViewpor

; 2149 : 		return;

	jmp	SHORT $LN2@SetViewpor
$LN1@SetViewpor:

; 2150 : 
; 2151 : 	m_rcVP.left = nLeft;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _nLeft$[ebp]
	mov	DWORD PTR [edx+262408], eax

; 2152 : 	m_rcVP.right = nRight;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _nRight$[ebp]
	mov	DWORD PTR [ecx+262416], edx

; 2153 : 	m_rcVP.top = nTop;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nTop$[ebp]
	mov	DWORD PTR [eax+262412], ecx

; 2154 : 	m_rcVP.bottom = nBottom;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _nBottom$[ebp]
	mov	DWORD PTR [edx+262420], eax

; 2155 : 
; 2156 : 	UpdateViewport();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateViewport@ContextMPR@@IAEXXZ	; ContextMPR::UpdateViewport
$LN2@SetViewpor:

; 2157 : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetViewportAbs@ContextMPR@@QAEXHHHH@Z ENDP		; ContextMPR::SetViewportAbs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_e$2 = -48						; size = 16
tv140 = -32						; size = 4
tv139 = -28						; size = 4
_this$ = -24						; size = 4
_hdc$3 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_x$ = 8							; size = 2
_y$ = 12						; size = 2
_col$ = 16						; size = 4
_str$ = 20						; size = 4
?TextOutA@ContextMPR@@QAEXFFKPAD@Z PROC			; ContextMPR::TextOutA
; _this$ = ecx

; 2195 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?TextOutA@ContextMPR@@QAEXFFKPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2196 : 	#ifdef _CONTEXT_TRACE_ALL
; 2197 : 	MonoPrint("ContextMPR::TextOut(%d,%d,0x%X,%s)\n",x,y,col,str);
; 2198 : 	#endif
; 2199 : 
; 2200 : 	if(!str) return;

	cmp	DWORD PTR _str$[ebp], 0
	jne	SHORT $LN3@TextOutA
	jmp	$LN4@TextOutA
$LN3@TextOutA:

; 2201 : 
; 2202 : 	try
; 2203 : 	{

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2204 : 		HDC hdc;
; 2205 : 
; 2206 : 		// Get GDI Device context for Surface
; 2207 : 		CheckHR(m_pRenderTarget->GetDC(&hdc));

	lea	eax, DWORD PTR _hdc$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262364]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262364]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	mov	DWORD PTR tv139[ebp], eax
	mov	ecx, DWORD PTR tv139[ebp]
	push	ecx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 2208 : 
; 2209 : 		if(hdc)

	cmp	DWORD PTR _hdc$3[ebp], 0
	je	$LN1@TextOutA

; 2210 : 		{
; 2211 : 			::SetBkMode(hdc,TRANSPARENT);

	push	1
	mov	edx, DWORD PTR _hdc$3[ebp]
	push	edx
	call	DWORD PTR __imp__SetBkMode@8

; 2212 : 			::SetTextColor(hdc,col);

	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hdc$3[ebp]
	push	ecx
	call	DWORD PTR __imp__SetTextColor@8

; 2213 : 			::MoveToEx(hdc,x,y,NULL);

	push	0
	movsx	edx, WORD PTR _y$[ebp]
	push	edx
	movsx	eax, WORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hdc$3[ebp]
	push	ecx
	call	DWORD PTR __imp__MoveToEx@16

; 2214 : 
; 2215 : 			::DrawText(hdc,str,strlen(str),&m_rcVP,DT_LEFT);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 262408				; 00040108H
	push	edx
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hdc$3[ebp]
	push	edx
	call	DWORD PTR __imp__DrawTextA@20

; 2216 : 
; 2217 : 			CheckHR(m_pRenderTarget->ReleaseDC(hdc));

	mov	eax, DWORD PTR _hdc$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262364]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262364]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+104]
	call	eax
	mov	DWORD PTR tv140[ebp], eax
	mov	ecx, DWORD PTR tv140[ebp]
	push	ecx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4
$LN1@TextOutA:

; 2218 : 		}
; 2219 : 	}

	jmp	SHORT $LN6@TextOutA
__catch$?TextOutA@ContextMPR@@QAEXFFKPAD@Z$0:

; 2220 : 
; 2221 : 	catch(_com_error e)
; 2222 : 	{
; 2223 : 	}

	lea	ecx, DWORD PTR _e$2[ebp]
	call	??1_com_error@@UAE@XZ			; _com_error::~_com_error
	mov	eax, $LN10@TextOutA
	ret	0
$LN6@TextOutA:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN4@TextOutA
$LN10@TextOutA:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN4@TextOutA:

; 2224 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?TextOutA@ContextMPR@@QAEXFFKPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?TextOutA@ContextMPR@@QAEXFFKPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?TextOutA@ContextMPR@@QAEXFFKPAD@Z ENDP			; ContextMPR::TextOutA
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_gCX1$1 = -72						; size = 4
_gCX2$2 = -68						; size = 4
tv390 = -64						; size = 4
tv343 = -60						; size = 4
tv221 = -56						; size = 4
tv174 = -52						; size = 4
_PolyZAvg$ = -48					; size = 4
_pIdx$3 = -44						; size = 4
_x$4 = -40						; size = 4
_gzNear$5 = -36						; size = 4
_x$6 = -32						; size = 4
_pIdx$7 = -28						; size = 4
_sPolygon$ = -24					; size = 4
_sVertex$ = -20						; size = 4
_pVtx$ = -16						; size = 4
_i$8 = -12						; size = 4
_i$9 = -8						; size = 4
_this$ = -4						; size = 4
_nPrimType$ = 8						; size = 4
_VtxInfo$ = 12						; size = 2
_nVerts$ = 16						; size = 2
_pData$ = 20						; size = 4
_terrain$ = 24						; size = 1
?DrawPrimitive@ContextMPR@@QAEXHGGPAPAUMPRVtxTexClr_t@@_N@Z PROC ; ContextMPR::DrawPrimitive
; _this$ = ecx

; 3529 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	mov	DWORD PTR _this$[ebp], ecx

; 3530 : 	TLVERTEX *pVtx;
; 3531 : 	TLVERTEX *sVertex;
; 3532 : 	SPolygon *sPolygon;
; 3533 : 	float	PolyZAvg=0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _PolyZAvg$[ebp], xmm0

; 3534 : 
; 3535 : 	// Ensure no degenerate nPrimTypeitives
; 3536 : 	ShiAssert((nVerts >=3) || (nPrimType==MPR_PRM_POINTS && nVerts >=1) || (nPrimType<=MPR_PRM_POLYLINE && nVerts >=2));
; 3537 : 
; 3538 : #ifdef _CONTEXT_TRACE_ALL
; 3539 : 	MonoPrint("ContextMPR::DrawPrimitive3(%d,0x%X,%d,0x%X)\n",nPrimType,VtxInfo,nVerts,pData);
; 3540 : #endif
; 3541 : 
; 3542 : #ifdef _CONTEXT_ENABLE_STATS
; 3543 : 	m_stats.Primitive(m_nCurPrimType,nVerts);
; 3544 : #endif
; 3545 : 
; 3546 : 	if(!bZBuffering)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jne	SHORT $LN55@DrawPrimit

; 3547 : 	{
; 3548 : 		// Lock VB
; 3549 : 		if(!LockVB(nVerts,(void **)&m_pTLVtx))

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262460				; 0004013cH
	push	ecx
	movzx	edx, WORD PTR _nVerts$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LockVB@ContextMPR@@IAE_NHPAPAX@Z	; ContextMPR::LockVB
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN54@DrawPrimit

; 3550 : 		{
; 3551 : 			m_colFOG = 0xFFFFFFFF;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262404], -1

; 3552 : 			return;

	jmp	$LN56@DrawPrimit
$LN54@DrawPrimit:

; 3553 : 		}
; 3554 : 
; 3555 : 		ShiAssert(FALSE == F4IsBadWritePtr(m_pTLVtx,sizeof *m_pTLVtx));	
; 3556 : 		ShiAssert(m_dwStartVtx < m_dwVBSize);
; 3557 : 		pVtx = &m_pTLVtx[m_dwStartVtx + m_dwNumVtx];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262444]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+262436]
	imul	eax, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+262460]
	mov	DWORD PTR _pVtx$[ebp], eax

; 3558 : 
; 3559 : 		ShiAssert(FALSE == F4IsBadWritePtr(pVtx,nVerts * sizeof *pVtx));
; 3560 : 
; 3561 : 		// JB 011124 CTD
; 3562 : 		if (!pVtx)

	jne	SHORT $LN53@DrawPrimit

; 3563 : 		{
; 3564 : 			m_colFOG = 0xFFFFFFFF;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262404], -1

; 3565 : 			return;

	jmp	$LN56@DrawPrimit
$LN53@DrawPrimit:

; 3566 : 		}
; 3567 : 
; 3568 : 		SetPrimitiveType(nPrimType);

	mov	ecx, DWORD PTR _nPrimType$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetPrimitiveType@ContextMPR@@IAEXH@Z	; ContextMPR::SetPrimitiveType

; 3569 : 	}
; 3570 : 	else

	jmp	SHORT $LN52@DrawPrimit
$LN55@DrawPrimit:

; 3571 : 	{
; 3572 : 		AllocatePolygon(sPolygon,nVerts);

	movzx	edx, WORD PTR _nVerts$[ebp]
	push	edx
	lea	eax, DWORD PTR _sPolygon$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AllocatePolygon@ContextMPR@@IAEXAAPAVSPolygon@@K@Z ; ContextMPR::AllocatePolygon

; 3573 : 		sPolygon->renderState = currentState;

	mov	ecx, DWORD PTR _sPolygon$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+12], eax

; 3574 : 		sPolygon->textureID0 = currentTexture1;

	mov	ecx, DWORD PTR _sPolygon$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+16], eax

; 3575 : 
; 3576 : 		if(currentState >= STATE_MULTITEXTURE)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], 37			; 00000025H
	jl	SHORT $LN51@DrawPrimit

; 3577 : 			sPolygon->textureID1 = currentTexture2;

	mov	edx, DWORD PTR _sPolygon$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+20], ecx

; 3578 : 		else

	jmp	SHORT $LN50@DrawPrimit
$LN51@DrawPrimit:

; 3579 : 			sPolygon->textureID1 = -1;

	mov	edx, DWORD PTR _sPolygon$[ebp]
	mov	DWORD PTR [edx+20], -1
$LN50@DrawPrimit:

; 3580 : 
; 3581 : 		sPolygon->pNext = NULL;

	mov	eax, DWORD PTR _sPolygon$[ebp]
	mov	DWORD PTR [eax], 0

; 3582 : 		sVertex = sPolygon->pVertexList;

	mov	ecx, DWORD PTR _sPolygon$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _sVertex$[ebp], edx
$LN52@DrawPrimit:

; 3583 : 	}
; 3584 : 
; 3585 : 	if(!bZBuffering)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jne	$LN49@DrawPrimit

; 3586 : 	{
; 3587 : 		// Iterate for each vertex
; 3588 : 		for(int i = 0; i < nVerts; i++)

	mov	DWORD PTR _i$9[ebp], 0
	jmp	SHORT $LN48@DrawPrimit
$LN47@DrawPrimit:
	mov	ecx, DWORD PTR _i$9[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$9[ebp], ecx
$LN48@DrawPrimit:
	movzx	edx, WORD PTR _nVerts$[ebp]
	cmp	DWORD PTR _i$9[ebp], edx
	jge	$LN46@DrawPrimit

; 3589 : 		{
; 3590 : 			// Check for overrun
; 3591 : 			ShiAssert((BYTE *)pVtx < m_pVtxEnd);
; 3592 : 	
; 3593 : 			// JB 010712 CTD second try
; 3594 : 			if(!pData[i]) break;

	mov	eax, DWORD PTR _i$9[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	jne	SHORT $LN45@DrawPrimit
	jmp	$LN46@DrawPrimit
$LN45@DrawPrimit:

; 3595 : 	
; 3596 : 			if(DisplayOptions.bScreenCoordinateBiasFix)

	movzx	edx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+20
	test	edx, edx
	je	SHORT $LN44@DrawPrimit

; 3597 : 			{
; 3598 : 				pVtx->sx = pData[i]->x-0.5f;

	mov	eax, DWORD PTR _i$9[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	movss	xmm0, DWORD PTR [edx]
	subss	xmm0, DWORD PTR __real@3f000000
	mov	eax, DWORD PTR _pVtx$[ebp]
	movss	DWORD PTR [eax], xmm0

; 3599 : 				pVtx->sy = pData[i]->y-0.5f;

	mov	ecx, DWORD PTR _i$9[ebp]
	mov	edx, DWORD PTR _pData$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR __real@3f000000
	mov	ecx, DWORD PTR _pVtx$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 3600 : 			}
; 3601 : 			else

	jmp	SHORT $LN43@DrawPrimit
$LN44@DrawPrimit:

; 3602 : 			{
; 3603 : 				pVtx->sx = pData[i]->x;

	mov	edx, DWORD PTR _i$9[ebp]
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _pVtx$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 3604 : 				pVtx->sy = pData[i]->y;

	mov	ecx, DWORD PTR _i$9[ebp]
	mov	edx, DWORD PTR _pData$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _pVtx$[ebp]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
$LN43@DrawPrimit:

; 3605 : 			}
; 3606 : 
; 3607 : 			// NOTE: HACK!!
; 3608 : 			pVtx->sz = 1.0f;

	mov	eax, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+8], xmm0

; 3609 : 			pVtx->rhw = pData[i]->q > 0.0f ? 1.0f / (pData[i]->q / Q_SCALE) : 1.0f;

	mov	ecx, DWORD PTR _i$9[ebp]
	mov	edx, DWORD PTR _pData$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	movss	xmm0, DWORD PTR [eax+32]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN58@DrawPrimit
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	edx, DWORD PTR _pData$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	movss	xmm0, DWORD PTR [eax+32]
	divss	xmm0, DWORD PTR _Q_SCALE
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movss	DWORD PTR tv174[ebp], xmm1
	jmp	SHORT $LN59@DrawPrimit
$LN58@DrawPrimit:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv174[ebp], xmm0
$LN59@DrawPrimit:
	mov	ecx, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR tv174[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 3610 : 
; 3611 : 			if(terrain)

	movzx	edx, BYTE PTR _terrain$[ebp]
	test	edx, edx
	je	$LN42@DrawPrimit

; 3612 : 			{
; 3613 : 				if(VtxInfo & MPR_VI_COLOR)

	movzx	eax, WORD PTR _VtxInfo$[ebp]
	and	eax, 2
	je	SHORT $LN41@DrawPrimit

; 3614 : 					pVtx->color = D3DRGBA(pData[i]->r,pData[i]->g,pData[i]->b,1.f);

	mov	ecx, DWORD PTR _i$9[ebp]
	mov	edx, DWORD PTR _pData$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si ecx, xmm0
	shl	ecx, 16					; 00000010H
	or	ecx, -16777216				; ff000000H
	mov	edx, DWORD PTR _i$9[ebp]
	mov	eax, DWORD PTR _pData$[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	movss	xmm0, DWORD PTR [edx+12]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si eax, xmm0
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _i$9[ebp]
	mov	eax, DWORD PTR _pData$[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	movss	xmm0, DWORD PTR [edx+16]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si eax, xmm0
	or	ecx, eax
	mov	edx, DWORD PTR _pVtx$[ebp]
	mov	DWORD PTR [edx+16], ecx
$LN41@DrawPrimit:

; 3615 : 
; 3616 : 				pVtx->specular = (min(255,FloatToInt32(pData[i]->a * 255.f)) << 24) + 0xFFFFFF;

	mov	eax, DWORD PTR _i$9[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	movss	xmm0, DWORD PTR [edx+20]
	mulss	xmm0, DWORD PTR __real@437f0000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	cmp	eax, 255				; 000000ffH
	jle	SHORT $LN60@DrawPrimit
	mov	DWORD PTR tv221[ebp], 255		; 000000ffH
	jmp	SHORT $LN61@DrawPrimit
$LN60@DrawPrimit:
	mov	eax, DWORD PTR _i$9[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	movss	xmm0, DWORD PTR [edx+20]
	mulss	xmm0, DWORD PTR __real@437f0000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR tv221[ebp], eax
$LN61@DrawPrimit:
	mov	eax, DWORD PTR tv221[ebp]
	shl	eax, 24					; 00000018H
	add	eax, 16777215				; 00ffffffH
	mov	ecx, DWORD PTR _pVtx$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 3617 : 			}
; 3618 : 			else

	jmp	$LN40@DrawPrimit
$LN42@DrawPrimit:

; 3619 : 			{
; 3620 : 				if(VtxInfo & MPR_VI_COLOR)

	movzx	edx, WORD PTR _VtxInfo$[ebp]
	and	edx, 2
	je	SHORT $LN39@DrawPrimit

; 3621 : 					pVtx->color = D3DRGBA(pData[i]->r,pData[i]->g,pData[i]->b,pData[i]->a);

	mov	eax, DWORD PTR _i$9[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	movss	xmm0, DWORD PTR [edx+20]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si eax, xmm0
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	edx, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si edx, xmm0
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	edx, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	movss	xmm0, DWORD PTR [ecx+12]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si edx, xmm0
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	edx, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	movss	xmm0, DWORD PTR [ecx+16]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si edx, xmm0
	or	eax, edx
	mov	ecx, DWORD PTR _pVtx$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN39@DrawPrimit:

; 3622 : 
; 3623 : 				pVtx->specular = m_colFOG;

	mov	edx, DWORD PTR _pVtx$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262404]
	mov	DWORD PTR [edx+20], ecx
$LN40@DrawPrimit:

; 3624 : 			}
; 3625 : 	
; 3626 : 			if(VtxInfo & MPR_VI_TEXTURE)

	movzx	edx, WORD PTR _VtxInfo$[ebp]
	and	edx, 4
	je	SHORT $LN38@DrawPrimit

; 3627 : 			{
; 3628 : 				if(terrain)

	movzx	eax, BYTE PTR _terrain$[ebp]
	test	eax, eax
	je	SHORT $LN36@DrawPrimit

; 3629 : 				{
; 3630 : 					if(DisplayOptions.m_texMode == DisplayOptionsClass::TEX_MODE_DDS)

	cmp	DWORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+24, 70161 ; 00011211H
	jne	SHORT $LN36@DrawPrimit

; 3631 : 					{
; 3632 : 						// Tex coords for night texture
; 3633 : 						pVtx->tu1 = pData[i]->u;

	mov	ecx, DWORD PTR _i$9[ebp]
	mov	edx, DWORD PTR _pData$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _pVtx$[ebp]
	mov	edx, DWORD PTR [eax+24]
	mov	DWORD PTR [ecx+32], edx

; 3634 : 						pVtx->tv1 = pData[i]->v;

	mov	eax, DWORD PTR _i$9[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _pVtx$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	mov	DWORD PTR [eax+36], ecx
$LN36@DrawPrimit:

; 3635 : 					}
; 3636 : 				}
; 3637 : 
; 3638 : 				pVtx->tu0 = pData[i]->u;

	mov	edx, DWORD PTR _i$9[ebp]
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _pVtx$[ebp]
	mov	eax, DWORD PTR [ecx+24]
	mov	DWORD PTR [edx+24], eax

; 3639 : 				pVtx->tv0 = pData[i]->v;

	mov	ecx, DWORD PTR _i$9[ebp]
	mov	edx, DWORD PTR _pData$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _pVtx$[ebp]
	mov	edx, DWORD PTR [eax+28]
	mov	DWORD PTR [ecx+28], edx
$LN38@DrawPrimit:

; 3640 : 			}
; 3641 : 
; 3642 : 		#ifdef _CONTEXT_ENABLE_RENDERSTATE_HIGHLIGHT
; 3643 : 			pVtx->color = currentState != -1 ? RGBA_MAKE((currentState << 1) + 50,(currentState << 1) + 50,(currentState << 1) + 50,(currentState << 1) + 50) : D3DRGBA(1.0f,1.0f,1.0f,1.0f);
; 3644 : 		#endif
; 3645 : 	
; 3646 : 			pVtx++;

	mov	eax, DWORD PTR _pVtx$[ebp]
	add	eax, 40					; 00000028H
	mov	DWORD PTR _pVtx$[ebp], eax

; 3647 : 		}

	jmp	$LN47@DrawPrimit
$LN46@DrawPrimit:

; 3648 : 	}
; 3649 : 	else

	jmp	$LN30@DrawPrimit
$LN49@DrawPrimit:

; 3650 : 	{
; 3651 : 		// COBRA - RED - These are to be calculated ONCE for poly, not for Vertex
; 3652 : 		float gzNear,gCX1,gCX2;
; 3653 : 
; 3654 : 		if(terrain)

	movzx	ecx, BYTE PTR _terrain$[ebp]
	test	ecx, ecx
	je	SHORT $LN34@DrawPrimit

; 3655 : 			gzNear = ZNEAR-.02f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+262340]
	subss	xmm0, DWORD PTR __real@3ca3d70a
	movss	DWORD PTR _gzNear$5[ebp], xmm0

; 3656 : 		else

	jmp	SHORT $LN33@DrawPrimit
$LN34@DrawPrimit:

; 3657 : 			gzNear = ZNEAR;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+262340]
	movss	DWORD PTR _gzNear$5[ebp], xmm0
$LN33@DrawPrimit:

; 3658 : 
; 3659 : 		gCX1=(ZFAR/(ZFAR-gzNear));

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+262336]
	subss	xmm0, DWORD PTR _gzNear$5[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+262336]
	divss	xmm1, xmm0
	movss	DWORD PTR _gCX1$1[ebp], xmm1

; 3660 : 		gCX2=(ZFAR*gzNear/(gzNear-ZFAR));

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+262336]
	mulss	xmm0, DWORD PTR _gzNear$5[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR _gzNear$5[ebp]
	subss	xmm1, DWORD PTR [ecx+262336]
	divss	xmm0, xmm1
	movss	DWORD PTR _gCX2$2[ebp], xmm0

; 3661 : 		// COBRA - RED -End2
; 3662 : 
; 3663 : 
; 3664 : 		// Iterate for each vertex
; 3665 : 		for(int i = 0; i < nVerts; i++)

	mov	DWORD PTR _i$8[ebp], 0
	jmp	SHORT $LN32@DrawPrimit
$LN31@DrawPrimit:
	mov	edx, DWORD PTR _i$8[ebp]
	add	edx, 1
	mov	DWORD PTR _i$8[ebp], edx
$LN32@DrawPrimit:
	movzx	eax, WORD PTR _nVerts$[ebp]
	cmp	DWORD PTR _i$8[ebp], eax
	jge	$LN30@DrawPrimit

; 3666 : 		{
; 3667 : 			// JB 010712 CTD
; 3668 : 			if(!pData[i]) break;

	mov	ecx, DWORD PTR _i$8[ebp]
	mov	edx, DWORD PTR _pData$[ebp]
	cmp	DWORD PTR [edx+ecx*4], 0
	jne	SHORT $LN29@DrawPrimit
	jmp	$LN30@DrawPrimit
$LN29@DrawPrimit:

; 3669 : 	
; 3670 : 			sVertex->sx = pData[i]->x;

	mov	eax, DWORD PTR _i$8[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _sVertex$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx

; 3671 : 			sVertex->sy = pData[i]->y;

	mov	edx, DWORD PTR _i$8[ebp]
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _sVertex$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax

; 3672 : 
; 3673 : 			// NOTE: HACK!!
; 3674 : 			if(pData[i]->q)

	mov	ecx, DWORD PTR _i$8[ebp]
	mov	edx, DWORD PTR _pData$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	movss	xmm0, DWORD PTR [eax+32]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN28@DrawPrimit

; 3675 : 				sVertex->sz = gCX1+gCX2/(pData[i]->q/Q_SCALE);

	mov	ecx, DWORD PTR _i$8[ebp]
	mov	edx, DWORD PTR _pData$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	movss	xmm0, DWORD PTR [eax+32]
	divss	xmm0, DWORD PTR _Q_SCALE
	movss	xmm1, DWORD PTR _gCX2$2[ebp]
	divss	xmm1, xmm0
	addss	xmm1, DWORD PTR _gCX1$1[ebp]
	mov	ecx, DWORD PTR _sVertex$[ebp]
	movss	DWORD PTR [ecx+8], xmm1

; 3676 : 			else

	jmp	SHORT $LN27@DrawPrimit
$LN28@DrawPrimit:

; 3677 : 				sVertex->sz = 0.f;

	mov	edx, DWORD PTR _sVertex$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+8], xmm0
$LN27@DrawPrimit:

; 3678 : 
; 3679 : 			sVertex->rhw = pData[i]->q > 0.0f ? 1.0f / (pData[i]->q / Q_SCALE) : 1.0f;

	mov	eax, DWORD PTR _i$8[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	movss	xmm0, DWORD PTR [edx+32]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN62@DrawPrimit
	mov	eax, DWORD PTR _i$8[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	movss	xmm0, DWORD PTR [edx+32]
	divss	xmm0, DWORD PTR _Q_SCALE
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movss	DWORD PTR tv343[ebp], xmm1
	jmp	SHORT $LN63@DrawPrimit
$LN62@DrawPrimit:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv343[ebp], xmm0
$LN63@DrawPrimit:
	mov	eax, DWORD PTR _sVertex$[ebp]
	movss	xmm0, DWORD PTR tv343[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 3680 : 
; 3681 : 			if(terrain)

	movzx	ecx, BYTE PTR _terrain$[ebp]
	test	ecx, ecx
	je	$LN26@DrawPrimit

; 3682 : 			{
; 3683 : 				if(VtxInfo & MPR_VI_COLOR)

	movzx	edx, WORD PTR _VtxInfo$[ebp]
	and	edx, 2
	je	SHORT $LN25@DrawPrimit

; 3684 : 					sVertex->color = D3DRGBA(pData[i]->r,pData[i]->g,pData[i]->b,1.f);

	mov	eax, DWORD PTR _i$8[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	movss	xmm0, DWORD PTR [edx+8]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si eax, xmm0
	shl	eax, 16					; 00000010H
	or	eax, -16777216				; ff000000H
	mov	ecx, DWORD PTR _i$8[ebp]
	mov	edx, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	movss	xmm0, DWORD PTR [ecx+12]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si edx, xmm0
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _i$8[ebp]
	mov	edx, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	movss	xmm0, DWORD PTR [ecx+16]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si edx, xmm0
	or	eax, edx
	mov	ecx, DWORD PTR _sVertex$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN25@DrawPrimit:

; 3685 : 
; 3686 : 				sVertex->specular = (min(255,FloatToInt32(pData[i]->a * 255.f)) << 24) + 0xFFFFFF;

	mov	edx, DWORD PTR _i$8[ebp]
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	movss	xmm0, DWORD PTR [ecx+20]
	mulss	xmm0, DWORD PTR __real@437f0000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	cmp	eax, 255				; 000000ffH
	jle	SHORT $LN64@DrawPrimit
	mov	DWORD PTR tv390[ebp], 255		; 000000ffH
	jmp	SHORT $LN65@DrawPrimit
$LN64@DrawPrimit:
	mov	edx, DWORD PTR _i$8[ebp]
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	movss	xmm0, DWORD PTR [ecx+20]
	mulss	xmm0, DWORD PTR __real@437f0000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR tv390[ebp], eax
$LN65@DrawPrimit:
	mov	edx, DWORD PTR tv390[ebp]
	shl	edx, 24					; 00000018H
	add	edx, 16777215				; 00ffffffH
	mov	eax, DWORD PTR _sVertex$[ebp]
	mov	DWORD PTR [eax+20], edx

; 3687 : 			}
; 3688 : 			else

	jmp	$LN24@DrawPrimit
$LN26@DrawPrimit:

; 3689 : 			{
; 3690 : 				if(VtxInfo & MPR_VI_COLOR)

	movzx	ecx, WORD PTR _VtxInfo$[ebp]
	and	ecx, 2
	je	SHORT $LN23@DrawPrimit

; 3691 : 					sVertex->color = D3DRGBA(pData[i]->r,pData[i]->g,pData[i]->b,pData[i]->a);

	mov	edx, DWORD PTR _i$8[ebp]
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	movss	xmm0, DWORD PTR [ecx+20]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si edx, xmm0
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _i$8[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si ecx, xmm0
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _i$8[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si ecx, xmm0
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _i$8[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si ecx, xmm0
	or	edx, ecx
	mov	eax, DWORD PTR _sVertex$[ebp]
	mov	DWORD PTR [eax+16], edx
$LN23@DrawPrimit:

; 3692 : 
; 3693 : 				sVertex->specular = m_colFOG;

	mov	ecx, DWORD PTR _sVertex$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262404]
	mov	DWORD PTR [ecx+20], eax
$LN24@DrawPrimit:

; 3694 : 			}
; 3695 : 
; 3696 : 			if(VtxInfo & MPR_VI_TEXTURE)

	movzx	ecx, WORD PTR _VtxInfo$[ebp]
	and	ecx, 4
	je	SHORT $LN22@DrawPrimit

; 3697 : 			{
; 3698 : 				if(terrain)

	movzx	edx, BYTE PTR _terrain$[ebp]
	test	edx, edx
	je	SHORT $LN20@DrawPrimit

; 3699 : 				{
; 3700 : 					if(DisplayOptions.m_texMode == DisplayOptionsClass::TEX_MODE_DDS)

	cmp	DWORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+24, 70161 ; 00011211H
	jne	SHORT $LN20@DrawPrimit

; 3701 : 					{
; 3702 : 						sVertex->tu1 = pData[i]->u;

	mov	eax, DWORD PTR _i$8[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _sVertex$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR [eax+32], ecx

; 3703 : 						sVertex->tv1 = pData[i]->v;

	mov	edx, DWORD PTR _i$8[ebp]
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _sVertex$[ebp]
	mov	eax, DWORD PTR [ecx+28]
	mov	DWORD PTR [edx+36], eax
$LN20@DrawPrimit:

; 3704 : 					}
; 3705 : 				}
; 3706 : 
; 3707 : 				sVertex->tu0 = pData[i]->u;				

	mov	ecx, DWORD PTR _i$8[ebp]
	mov	edx, DWORD PTR _pData$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _sVertex$[ebp]
	mov	edx, DWORD PTR [eax+24]
	mov	DWORD PTR [ecx+24], edx

; 3708 : 				sVertex->tv0 = pData[i]->v;

	mov	eax, DWORD PTR _i$8[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _sVertex$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	mov	DWORD PTR [eax+28], ecx
$LN22@DrawPrimit:

; 3709 : 			}
; 3710 : 
; 3711 : 		#ifdef _CONTEXT_ENABLE_RENDERSTATE_HIGHLIGHT
; 3712 : 			sVertex->color = currentState != -1 ? RGBA_MAKE((currentState << 1) + 50,(currentState << 1) + 50,(currentState << 1) + 50,(currentState << 1) + 50) : D3DRGBA(1.0f,1.0f,1.0f,1.0f);
; 3713 : 		#endif
; 3714 : 			PolyZAvg+=sVertex->sz;							// COBRA - RED - Poly Z Sum is calculated onthe fly

	mov	edx, DWORD PTR _sVertex$[ebp]
	movss	xmm0, DWORD PTR _PolyZAvg$[ebp]
	addss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR _PolyZAvg$[ebp], xmm0

; 3715 : 
; 3716 : 			// COBRA - RED - No More Linking of vertexes, as single ARRAYS of TLVERTEX structures
; 3717 : 			sVertex++;

	mov	eax, DWORD PTR _sVertex$[ebp]
	add	eax, 40					; 00000028H
	mov	DWORD PTR _sVertex$[ebp], eax

; 3718 : 		}

	jmp	$LN31@DrawPrimit
$LN30@DrawPrimit:

; 3719 : 	}
; 3720 : 
; 3721 : 	// Generate Indices
; 3722 : 	if(!bZBuffering)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	jne	$LN19@DrawPrimit

; 3723 : 	{
; 3724 : 		if(m_nCurPrimType == D3DPT_TRIANGLEFAN)

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+262452]
	cmp	eax, 6
	jne	$LN18@DrawPrimit

; 3725 : 		{
; 3726 : 			WORD *pIdx = &m_pIdx[m_dwNumIdx];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262440]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262432]
	lea	edx, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR _pIdx$7[ebp], edx

; 3727 : 
; 3728 : 			for(int x=0;x<nVerts-2;x++)

	mov	DWORD PTR _x$6[ebp], 0
	jmp	SHORT $LN17@DrawPrimit
$LN16@DrawPrimit:
	mov	eax, DWORD PTR _x$6[ebp]
	add	eax, 1
	mov	DWORD PTR _x$6[ebp], eax
$LN17@DrawPrimit:
	movzx	ecx, WORD PTR _nVerts$[ebp]
	sub	ecx, 2
	cmp	DWORD PTR _x$6[ebp], ecx
	jge	SHORT $LN15@DrawPrimit

; 3729 : 			{
; 3730 : 				pIdx[0] = (WORD)m_dwNumVtx;

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _pIdx$7[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [ecx+262436]
	mov	WORD PTR [eax+edx], cx

; 3731 : 				pIdx[1] = (WORD)(m_dwNumVtx + x + 1);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262436]
	mov	ecx, DWORD PTR _x$6[ebp]
	lea	edx, DWORD PTR [eax+ecx+1]
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _pIdx$7[ebp]
	mov	WORD PTR [ecx+eax], dx

; 3732 : 				pIdx[2] = (WORD)(m_dwNumVtx + x + 2);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262436]
	mov	ecx, DWORD PTR _x$6[ebp]
	lea	edx, DWORD PTR [eax+ecx+2]
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _pIdx$7[ebp]
	mov	WORD PTR [ecx+eax], dx

; 3733 : 				pIdx += 3;

	mov	edx, DWORD PTR _pIdx$7[ebp]
	add	edx, 6
	mov	DWORD PTR _pIdx$7[ebp], edx

; 3734 : 			}

	jmp	SHORT $LN16@DrawPrimit
$LN15@DrawPrimit:

; 3735 : 
; 3736 : 			m_dwNumIdx += pIdx - &m_pIdx[m_dwNumIdx];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262440]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262432]
	lea	ecx, DWORD PTR [eax+ecx*2]
	mov	edx, DWORD PTR _pIdx$7[ebp]
	sub	edx, ecx
	sar	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+262440]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262440], edx
	jmp	SHORT $LN13@DrawPrimit
$LN18@DrawPrimit:

; 3737 : 		}
; 3738 : 		else if(m_nCurPrimType == D3DPT_LINESTRIP)

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+262452]
	cmp	eax, 3
	jne	SHORT $LN13@DrawPrimit

; 3739 : 		{
; 3740 : 			WORD *pIdx = &m_pIdx[m_dwNumIdx];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262440]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262432]
	lea	edx, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR _pIdx$3[ebp], edx

; 3741 : 
; 3742 : 			for(int x=0;x<nVerts;x++)

	mov	DWORD PTR _x$4[ebp], 0
	jmp	SHORT $LN12@DrawPrimit
$LN11@DrawPrimit:
	mov	eax, DWORD PTR _x$4[ebp]
	add	eax, 1
	mov	DWORD PTR _x$4[ebp], eax
$LN12@DrawPrimit:
	movzx	ecx, WORD PTR _nVerts$[ebp]
	cmp	DWORD PTR _x$4[ebp], ecx
	jge	SHORT $LN10@DrawPrimit

; 3743 : 				*pIdx++ = (WORD)(m_dwNumVtx + x);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262436]
	add	eax, DWORD PTR _x$4[ebp]
	mov	ecx, DWORD PTR _pIdx$3[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pIdx$3[ebp]
	add	edx, 2
	mov	DWORD PTR _pIdx$3[ebp], edx
	jmp	SHORT $LN11@DrawPrimit
$LN10@DrawPrimit:

; 3744 : 
; 3745 : 			m_dwNumIdx += nVerts;

	movzx	eax, WORD PTR _nVerts$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+262440]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262440], eax
$LN13@DrawPrimit:

; 3746 : 		}
; 3747 : 
; 3748 : 		m_dwNumVtx += nVerts;

	movzx	eax, WORD PTR _nVerts$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+262436]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262436], eax

; 3749 : 
; 3750 : 	#ifdef _CONTEXT_FLUSH_EVERY_PRIMITIVE
; 3751 : 		FlushVB();
; 3752 : 	#endif
; 3753 : 	}
; 3754 : 	else

	jmp	$LN1@DrawPrimit
$LN19@DrawPrimit:

; 3755 : 	{
; 3756 : 		// COBRA - RED - Here calculates the Average Z
; 3757 : 		sPolygon->CalcPolyZ(PolyZAvg);

	push	ecx
	movss	xmm0, DWORD PTR _PolyZAvg$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _sPolygon$[ebp]
	call	?CalcPolyZ@SPolygon@@QAEXM@Z		; SPolygon::CalcPolyZ

; 3758 : 
; 3759 : 		// Double-textured
; 3760 : 		if(sPolygon->renderState >= STATE_MULTITEXTURE)

	mov	eax, DWORD PTR _sPolygon$[ebp]
	cmp	DWORD PTR [eax+12], 37			; 00000025H
	jl	SHORT $LN8@DrawPrimit

; 3761 : 		{
; 3762 : 			texturedPolyVCnt += nVerts;

	movzx	ecx, WORD PTR _nVerts$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+262472]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262472], ecx

; 3763 : 			AddPolygon(texturedPolys,sPolygon);

	lea	ecx, DWORD PTR _sPolygon$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 262484				; 00040154H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddPolygon@ContextMPR@@IAEXAAPAVSPolygon@@0@Z ; ContextMPR::AddPolygon
	jmp	$LN1@DrawPrimit
$LN8@DrawPrimit:

; 3764 : 		}
; 3765 : 		// Translucent
; 3766 : 		else if(sPolygon->renderState >= STATE_ALPHA_SOLID)

	mov	eax, DWORD PTR _sPolygon$[ebp]
	cmp	DWORD PTR [eax+12], 16			; 00000010H
	jl	SHORT $LN6@DrawPrimit

; 3767 : 		{
; 3768 : 			translucentPolyVCnt += nVerts;

	movzx	ecx, WORD PTR _nVerts$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+262476]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262476], ecx

; 3769 : 			AddPolygon(translucentPolys,sPolygon);

	lea	ecx, DWORD PTR _sPolygon$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 262488				; 00040158H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddPolygon@ContextMPR@@IAEXAAPAVSPolygon@@0@Z ; ContextMPR::AddPolygon
	jmp	SHORT $LN1@DrawPrimit
$LN6@DrawPrimit:

; 3770 : 		}
; 3771 : 		// Textured
; 3772 : 		else if(sPolygon->renderState >= STATE_TEXTURE)

	mov	eax, DWORD PTR _sPolygon$[ebp]
	cmp	DWORD PTR [eax+12], 3
	jl	SHORT $LN4@DrawPrimit

; 3773 : 		{
; 3774 : 			texturedPolyVCnt += nVerts;

	movzx	ecx, WORD PTR _nVerts$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+262472]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262472], ecx

; 3775 : 			AddPolygon(texturedPolys,sPolygon);

	lea	ecx, DWORD PTR _sPolygon$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 262484				; 00040154H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddPolygon@ContextMPR@@IAEXAAPAVSPolygon@@0@Z ; ContextMPR::AddPolygon
	jmp	SHORT $LN1@DrawPrimit
$LN4@DrawPrimit:

; 3776 : 		}
; 3777 : 		// Plain
; 3778 : 		else if(sPolygon->renderState >= STATE_SOLID)

	mov	eax, DWORD PTR _sPolygon$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jl	SHORT $LN2@DrawPrimit

; 3779 : 		{
; 3780 : 			plainPolyVCnt += nVerts;

	movzx	ecx, WORD PTR _nVerts$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+262468]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262468], ecx

; 3781 : 			AddPolygon(plainPolys,sPolygon);

	lea	ecx, DWORD PTR _sPolygon$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 262480				; 00040150H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddPolygon@ContextMPR@@IAEXAAPAVSPolygon@@0@Z ; ContextMPR::AddPolygon

; 3782 : 		}
; 3783 : 		else

	jmp	SHORT $LN1@DrawPrimit
$LN2@DrawPrimit:

; 3784 : 			INT3;

	int	3
$LN1@DrawPrimit:

; 3785 : 	}
; 3786 : 
; 3787 : 	m_colFOG = 0xFFFFFFFF;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262404], -1
$LN56@DrawPrimit:

; 3788 : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?DrawPrimitive@ContextMPR@@QAEXHGGPAPAUMPRVtxTexClr_t@@_N@Z ENDP ; ContextMPR::DrawPrimitive
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_pIdx$1 = -28						; size = 4
_i$2 = -24						; size = 4
_x$3 = -20						; size = 4
_x$4 = -16						; size = 4
_pIdx$5 = -12						; size = 4
_pVtx$ = -8						; size = 4
_this$ = -4						; size = 4
_nPrimType$ = 8						; size = 4
_VtxInfo$ = 12						; size = 2
_nVerts$ = 16						; size = 2
_pData$ = 20						; size = 4
_Stride$ = 24						; size = 2
?DrawPrimitive@ContextMPR@@QAEXHGGPAUMPRVtxTexClr_t@@G@Z PROC ; ContextMPR::DrawPrimitive
; _this$ = ecx

; 3410 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 3411 : 	TLVERTEX *pVtx;
; 3412 : 	
; 3413 : 	// Ensure no degenerate nPrimTypeitives
; 3414 : 	ShiAssert((nVerts >=3) || (nPrimType==MPR_PRM_POINTS && nVerts >=1) || (nPrimType<=MPR_PRM_POLYLINE && nVerts >=2));
; 3415 : 
; 3416 : #ifdef _CONTEXT_TRACE_ALL
; 3417 : 	MonoPrint("ContextMPR::DrawPrimitive2(%d,0x%X,%d,0x%X,%d)\n",nPrimType,VtxInfo,nVerts,pData,Stride);
; 3418 : #endif
; 3419 : 
; 3420 : #ifdef _CONTEXT_ENABLE_STATS
; 3421 : 	m_stats.Primitive(m_nCurPrimType,nVerts);
; 3422 : #endif
; 3423 : 
; 3424 : 	// Lock VB
; 3425 : 	if(!LockVB(nVerts,(void **)&m_pTLVtx))

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 262460				; 0004013cH
	push	eax
	movzx	ecx, WORD PTR _nVerts$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LockVB@ContextMPR@@IAE_NHPAPAX@Z	; ContextMPR::LockVB
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN20@DrawPrimit

; 3426 : 	{
; 3427 : 		m_colFOG = 0xFFFFFFFF;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262404], -1

; 3428 : 		return;

	jmp	$LN21@DrawPrimit
$LN20@DrawPrimit:

; 3429 : 	}
; 3430 : 
; 3431 : 	ShiAssert(FALSE == F4IsBadWritePtr(m_pTLVtx,sizeof *m_pTLVtx));	
; 3432 : 	ShiAssert(m_dwStartVtx < m_dwVBSize);
; 3433 : 	pVtx = &m_pTLVtx[m_dwStartVtx + m_dwNumVtx];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262444]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+262436]
	imul	edx, 40					; 00000028H
	mov	ecx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [ecx+262460]
	mov	DWORD PTR _pVtx$[ebp], edx

; 3434 : 
; 3435 : 	ShiAssert(FALSE == F4IsBadWritePtr(pVtx,nVerts * sizeof *pVtx));
; 3436 : 
; 3437 : 	// JB 011124 CTD
; 3438 : 	if (!pVtx) 

	jne	SHORT $LN19@DrawPrimit

; 3439 : 	{
; 3440 : 		m_colFOG = 0xFFFFFFFF;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262404], -1

; 3441 : 		return;

	jmp	$LN21@DrawPrimit
$LN19@DrawPrimit:

; 3442 : 	}
; 3443 : 
; 3444 : 	SetPrimitiveType(nPrimType);

	mov	eax, DWORD PTR _nPrimType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetPrimitiveType@ContextMPR@@IAEXH@Z	; ContextMPR::SetPrimitiveType

; 3445 : 
; 3446 : 	// Iterate for each vertex
; 3447 : 	for(int i = 0; i < nVerts; i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN18@DrawPrimit
$LN17@DrawPrimit:
	mov	ecx, DWORD PTR _i$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$2[ebp], ecx
$LN18@DrawPrimit:
	movzx	edx, WORD PTR _nVerts$[ebp]
	cmp	DWORD PTR _i$2[ebp], edx
	jge	$LN16@DrawPrimit

; 3448 : 	{
; 3449 : 		// Check for overrun
; 3450 : 		ShiAssert((BYTE *)pVtx < m_pVtxEnd);
; 3451 : 	
; 3452 : 		if(DisplayOptions.bScreenCoordinateBiasFix)		//Wombat778 4-01-04

	movzx	eax, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+20
	test	eax, eax
	je	SHORT $LN15@DrawPrimit

; 3453 : 		{
; 3454 : 			pVtx->sx = pData->x-0.5f;

	mov	ecx, DWORD PTR _pData$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR __real@3f000000
	mov	edx, DWORD PTR _pVtx$[ebp]
	movss	DWORD PTR [edx], xmm0

; 3455 : 			pVtx->sy = pData->y-0.5f;

	mov	eax, DWORD PTR _pData$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR __real@3f000000
	mov	ecx, DWORD PTR _pVtx$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 3456 : 		}
; 3457 : 		else

	jmp	SHORT $LN14@DrawPrimit
$LN15@DrawPrimit:

; 3458 : 		{
; 3459 : 			pVtx->sx = pData->x;

	mov	edx, DWORD PTR _pVtx$[ebp]
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 3460 : 			pVtx->sy = pData->y;

	mov	edx, DWORD PTR _pVtx$[ebp]
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
$LN14@DrawPrimit:

; 3461 : 		}
; 3462 : 		pVtx->sz = 0.f;

	mov	edx, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+8], xmm0

; 3463 : 
; 3464 : 		// OW FIXME: this should be 1.0f / pData->z
; 3465 : 		pVtx->rhw = 1.0f;

	mov	eax, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+12], xmm0

; 3466 : 
; 3467 : 		if(VtxInfo == (MPR_VI_COLOR | MPR_VI_TEXTURE))

	movzx	ecx, WORD PTR _VtxInfo$[ebp]
	cmp	ecx, 6
	jne	$LN13@DrawPrimit

; 3468 : 		{
; 3469 : 			pVtx->color = D3DRGBA(pData->r,pData->g,pData->b,pData->a);

	mov	edx, DWORD PTR _pData$[ebp]
	movss	xmm0, DWORD PTR [edx+20]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si eax, xmm0
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _pData$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si edx, xmm0
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _pData$[ebp]
	movss	xmm0, DWORD PTR [ecx+12]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si edx, xmm0
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _pData$[ebp]
	movss	xmm0, DWORD PTR [ecx+16]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si edx, xmm0
	or	eax, edx
	mov	ecx, DWORD PTR _pVtx$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 3470 : 			pVtx->specular = m_colFOG;

	mov	edx, DWORD PTR _pVtx$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262404]
	mov	DWORD PTR [edx+20], ecx

; 3471 : 
; 3472 : 			pVtx->tu0 = pData->u;

	mov	edx, DWORD PTR _pVtx$[ebp]
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+24], ecx

; 3473 : 			pVtx->tv0 = pData->v;

	mov	edx, DWORD PTR _pVtx$[ebp]
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+28], ecx
	jmp	$LN10@DrawPrimit
$LN13@DrawPrimit:

; 3474 : 		}
; 3475 : 		else if(VtxInfo == MPR_VI_COLOR)

	movzx	edx, WORD PTR _VtxInfo$[ebp]
	cmp	edx, 2
	jne	SHORT $LN11@DrawPrimit

; 3476 : 		{
; 3477 : 			pVtx->color = D3DRGBA(pData->r,pData->g,pData->b,pData->a);

	mov	eax, DWORD PTR _pData$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si ecx, xmm0
	shl	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _pData$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si eax, xmm0
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _pData$[ebp]
	movss	xmm0, DWORD PTR [edx+12]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si eax, xmm0
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _pData$[ebp]
	movss	xmm0, DWORD PTR [edx+16]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si eax, xmm0
	or	ecx, eax
	mov	edx, DWORD PTR _pVtx$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 3478 : 			pVtx->specular = m_colFOG;

	mov	eax, DWORD PTR _pVtx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262404]
	mov	DWORD PTR [eax+20], edx

; 3479 : 		}
; 3480 : 		else

	jmp	SHORT $LN10@DrawPrimit
$LN11@DrawPrimit:

; 3481 : 		{
; 3482 : 			pVtx->color = m_colFG;

	mov	eax, DWORD PTR _pVtx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262396]
	mov	DWORD PTR [eax+16], edx

; 3483 : 			pVtx->specular = m_colFOG;

	mov	eax, DWORD PTR _pVtx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262404]
	mov	DWORD PTR [eax+20], edx
$LN10@DrawPrimit:

; 3484 : 		}
; 3485 : 
; 3486 : 	#ifdef _CONTEXT_ENABLE_RENDERSTATE_HIGHLIGHT
; 3487 : 		pVtx->color = currentState != -1 ? RGBA_MAKE((currentState << 1) + 50,(currentState << 1) + 50,,(currentState << 1) + 50,(currentState << 1) + 50) : D3DRGBA(1.0f,1.0f,1.0f,1.0f);
; 3488 : 	#endif
; 3489 : 
; 3490 : 		pVtx++;

	mov	eax, DWORD PTR _pVtx$[ebp]
	add	eax, 40					; 00000028H
	mov	DWORD PTR _pVtx$[ebp], eax

; 3491 : 		pData = (MPRVtxTexClr_t *)((BYTE *)pData + Stride);

	movzx	ecx, WORD PTR _Stride$[ebp]
	add	ecx, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pData$[ebp], ecx

; 3492 : 	}

	jmp	$LN17@DrawPrimit
$LN16@DrawPrimit:

; 3493 : 
; 3494 : 	// Generate Indices (in advance)
; 3495 : 	if(m_nCurPrimType == D3DPT_TRIANGLEFAN)

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+262452]
	cmp	eax, 6
	jne	$LN9@DrawPrimit

; 3496 : 	{
; 3497 : 		WORD *pIdx = &m_pIdx[m_dwNumIdx];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262440]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262432]
	lea	edx, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR _pIdx$5[ebp], edx

; 3498 : 
; 3499 : 		for(int x=0;x<nVerts-2;x++)

	mov	DWORD PTR _x$4[ebp], 0
	jmp	SHORT $LN8@DrawPrimit
$LN7@DrawPrimit:
	mov	eax, DWORD PTR _x$4[ebp]
	add	eax, 1
	mov	DWORD PTR _x$4[ebp], eax
$LN8@DrawPrimit:
	movzx	ecx, WORD PTR _nVerts$[ebp]
	sub	ecx, 2
	cmp	DWORD PTR _x$4[ebp], ecx
	jge	SHORT $LN6@DrawPrimit

; 3500 : 		{
; 3501 : 			pIdx[0] = (WORD)m_dwNumVtx;

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _pIdx$5[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [ecx+262436]
	mov	WORD PTR [eax+edx], cx

; 3502 : 			pIdx[1] = (WORD)(m_dwNumVtx + x + 1);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262436]
	mov	ecx, DWORD PTR _x$4[ebp]
	lea	edx, DWORD PTR [eax+ecx+1]
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _pIdx$5[ebp]
	mov	WORD PTR [ecx+eax], dx

; 3503 : 			pIdx[2] = (WORD)(m_dwNumVtx + x + 2);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262436]
	mov	ecx, DWORD PTR _x$4[ebp]
	lea	edx, DWORD PTR [eax+ecx+2]
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _pIdx$5[ebp]
	mov	WORD PTR [ecx+eax], dx

; 3504 : 			pIdx += 3;

	mov	edx, DWORD PTR _pIdx$5[ebp]
	add	edx, 6
	mov	DWORD PTR _pIdx$5[ebp], edx

; 3505 : 		}

	jmp	SHORT $LN7@DrawPrimit
$LN6@DrawPrimit:

; 3506 : 
; 3507 : 		m_dwNumIdx += pIdx - &m_pIdx[m_dwNumIdx];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262440]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262432]
	lea	ecx, DWORD PTR [eax+ecx*2]
	mov	edx, DWORD PTR _pIdx$5[ebp]
	sub	edx, ecx
	sar	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+262440]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262440], edx
	jmp	SHORT $LN4@DrawPrimit
$LN9@DrawPrimit:

; 3508 : 	}
; 3509 : 	else if(m_nCurPrimType == D3DPT_LINESTRIP)

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+262452]
	cmp	eax, 3
	jne	SHORT $LN4@DrawPrimit

; 3510 : 	{
; 3511 : 		WORD *pIdx = &m_pIdx[m_dwNumIdx];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262440]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262432]
	lea	edx, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR _pIdx$1[ebp], edx

; 3512 : 
; 3513 : 		for(int x=0;x<nVerts;x++)

	mov	DWORD PTR _x$3[ebp], 0
	jmp	SHORT $LN3@DrawPrimit
$LN2@DrawPrimit:
	mov	eax, DWORD PTR _x$3[ebp]
	add	eax, 1
	mov	DWORD PTR _x$3[ebp], eax
$LN3@DrawPrimit:
	movzx	ecx, WORD PTR _nVerts$[ebp]
	cmp	DWORD PTR _x$3[ebp], ecx
	jge	SHORT $LN1@DrawPrimit

; 3514 : 			*pIdx++ = (WORD)(m_dwNumVtx + x);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262436]
	add	eax, DWORD PTR _x$3[ebp]
	mov	ecx, DWORD PTR _pIdx$1[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pIdx$1[ebp]
	add	edx, 2
	mov	DWORD PTR _pIdx$1[ebp], edx
	jmp	SHORT $LN2@DrawPrimit
$LN1@DrawPrimit:

; 3515 : 
; 3516 : 		m_dwNumIdx += nVerts;

	movzx	eax, WORD PTR _nVerts$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+262440]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262440], eax
$LN4@DrawPrimit:

; 3517 : 	}
; 3518 : 
; 3519 : 	m_dwNumVtx += nVerts;

	movzx	eax, WORD PTR _nVerts$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+262436]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262436], eax

; 3520 : 
; 3521 : #ifdef _CONTEXT_FLUSH_EVERY_PRIMITIVE
; 3522 : 	FlushVB();
; 3523 : #endif
; 3524 : 
; 3525 : 	m_colFOG = 0xFFFFFFFF;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262404], -1
$LN21@DrawPrimit:

; 3526 : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?DrawPrimitive@ContextMPR@@QAEXHGGPAUMPRVtxTexClr_t@@G@Z ENDP ; ContextMPR::DrawPrimitive
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_pIdx$1 = -28						; size = 4
_i$2 = -24						; size = 4
_x$3 = -20						; size = 4
_x$4 = -16						; size = 4
_pIdx$5 = -12						; size = 4
_pVtx$ = -8						; size = 4
_this$ = -4						; size = 4
_nPrimType$ = 8						; size = 4
_VtxInfo$ = 12						; size = 2
_nVerts$ = 16						; size = 2
_pData$ = 20						; size = 4
_Stride$ = 24						; size = 2
?DrawPrimitive@ContextMPR@@QAEXHGGPAUMPRVtx_t@@G@Z PROC	; ContextMPR::DrawPrimitive
; _this$ = ecx

; 3312 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 3313 : 	// Impossible
; 3314 : 	ShiAssert(!(VtxInfo & MPR_VI_COLOR));
; 3315 : 
; 3316 : 	// Ensure no degenerate nPrimTypeitives
; 3317 : 	ShiAssert((nVerts >=3) || (nPrimType==MPR_PRM_POINTS && nVerts >=1) || (nPrimType<=MPR_PRM_POLYLINE && nVerts >=2));
; 3318 : 
; 3319 : 	#ifdef _CONTEXT_TRACE_ALL
; 3320 : 	MonoPrint("ContextMPR::DrawPrimitive(%d,0x%X,%d,0x%X,%d)\n",nPrimType,VtxInfo,nVerts,pData,Stride);
; 3321 : 	#endif
; 3322 : 
; 3323 : 	SetPrimitiveType(nPrimType);

	mov	eax, DWORD PTR _nPrimType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetPrimitiveType@ContextMPR@@IAEXH@Z	; ContextMPR::SetPrimitiveType

; 3324 : 
; 3325 : 	#ifdef _CONTEXT_ENABLE_STATS
; 3326 : 	m_stats.Primitive(m_nCurPrimType,nVerts);
; 3327 : 	#endif
; 3328 : 
; 3329 : 	// Lock VB
; 3330 : 	TLVERTEX *pVtx;
; 3331 : 	if(!LockVB(nVerts,(void **)&m_pTLVtx))

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262460				; 0004013cH
	push	ecx
	movzx	edx, WORD PTR _nVerts$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LockVB@ContextMPR@@IAE_NHPAPAX@Z	; ContextMPR::LockVB
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN15@DrawPrimit

; 3332 : 	{ 
; 3333 : 		m_colFOG = 0xFFFFFFFF;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262404], -1

; 3334 : 		return;

	jmp	$LN16@DrawPrimit
$LN15@DrawPrimit:

; 3335 : 	}
; 3336 : 
; 3337 : 	ShiAssert(FALSE == F4IsBadWritePtr(m_pTLVtx,sizeof *m_pTLVtx));	
; 3338 : 	ShiAssert(m_dwStartVtx < m_dwVBSize);
; 3339 : 	pVtx = &m_pTLVtx[m_dwStartVtx + m_dwNumVtx];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262444]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+262436]
	imul	eax, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+262460]
	mov	DWORD PTR _pVtx$[ebp], eax

; 3340 : 	ShiAssert(FALSE == F4IsBadWritePtr(pVtx,nVerts * sizeof *pVtx));
; 3341 : 
; 3342 : 	// Iterate for each vertex
; 3343 : 	for(int i=0;i<nVerts;i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN14@DrawPrimit
$LN13@DrawPrimit:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN14@DrawPrimit:
	movzx	ecx, WORD PTR _nVerts$[ebp]
	cmp	DWORD PTR _i$2[ebp], ecx
	jge	$LN12@DrawPrimit

; 3344 : 	{
; 3345 : 		// Check for overrun
; 3346 : 		ShiAssert((BYTE *)pVtx < m_pVtxEnd);
; 3347 : 
; 3348 : 		if(DisplayOptions.bScreenCoordinateBiasFix)		//Wombat778 4-01-04

	movzx	edx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+20
	test	edx, edx
	je	SHORT $LN11@DrawPrimit

; 3349 : 		{
; 3350 : 
; 3351 : 			pVtx->sx = pData->x-0.5f;

	mov	eax, DWORD PTR _pData$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR __real@3f000000
	mov	ecx, DWORD PTR _pVtx$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 3352 : 			pVtx->sy = pData->y-0.5f;

	mov	edx, DWORD PTR _pData$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	subss	xmm0, DWORD PTR __real@3f000000
	mov	eax, DWORD PTR _pVtx$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 3353 : 		}
; 3354 : 		else

	jmp	SHORT $LN10@DrawPrimit
$LN11@DrawPrimit:

; 3355 : 		{
; 3356 : 			pVtx->sx = pData->x;

	mov	ecx, DWORD PTR _pVtx$[ebp]
	mov	edx, DWORD PTR _pData$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 3357 : 			pVtx->sy = pData->y;

	mov	ecx, DWORD PTR _pVtx$[ebp]
	mov	edx, DWORD PTR _pData$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
$LN10@DrawPrimit:

; 3358 : 		}
; 3359 : 		pVtx->sz = 0.f;

	mov	ecx, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+8], xmm0

; 3360 : 		pVtx->rhw = 1.0f;

	mov	edx, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+12], xmm0

; 3361 : 		pVtx->color = m_colFG;

	mov	eax, DWORD PTR _pVtx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262396]
	mov	DWORD PTR [eax+16], edx

; 3362 : 		pVtx->specular = m_colFOG;

	mov	eax, DWORD PTR _pVtx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262404]
	mov	DWORD PTR [eax+20], edx

; 3363 : 		pVtx->tu0 = 0;

	mov	eax, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+24], xmm0

; 3364 : 		pVtx->tv0 = 0;

	mov	ecx, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+28], xmm0

; 3365 : 
; 3366 : 		#ifdef _CONTEXT_ENABLE_RENDERSTATE_HIGHLIGHT
; 3367 : 		pVtx->color = currentState != -1 ? RGBA_MAKE((currentState << 1) + 50,(currentState << 1) + 50,(currentState << 1) + 50,(currentState << 1) + 50) : D3DRGBA(1.0f,1.0f,1.0f,1.0f);
; 3368 : 		#endif
; 3369 : 
; 3370 : 		pVtx++;

	mov	edx, DWORD PTR _pVtx$[ebp]
	add	edx, 40					; 00000028H
	mov	DWORD PTR _pVtx$[ebp], edx

; 3371 : 		pData = (MPRVtx_t *)((BYTE *)pData + Stride);

	movzx	eax, WORD PTR _Stride$[ebp]
	add	eax, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pData$[ebp], eax

; 3372 : 	}

	jmp	$LN13@DrawPrimit
$LN12@DrawPrimit:

; 3373 : 
; 3374 : 	// Generate Indices
; 3375 : 	if(m_nCurPrimType == D3DPT_TRIANGLEFAN)

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+262452]
	cmp	edx, 6
	jne	$LN9@DrawPrimit

; 3376 : 	{
; 3377 : 		WORD *pIdx = &m_pIdx[m_dwNumIdx];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262440]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262432]
	lea	ecx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR _pIdx$5[ebp], ecx

; 3378 : 
; 3379 : 		for(int x=0;x<nVerts-2;x++)

	mov	DWORD PTR _x$4[ebp], 0
	jmp	SHORT $LN8@DrawPrimit
$LN7@DrawPrimit:
	mov	edx, DWORD PTR _x$4[ebp]
	add	edx, 1
	mov	DWORD PTR _x$4[ebp], edx
$LN8@DrawPrimit:
	movzx	eax, WORD PTR _nVerts$[ebp]
	sub	eax, 2
	cmp	DWORD PTR _x$4[ebp], eax
	jge	SHORT $LN6@DrawPrimit

; 3380 : 		{
; 3381 : 			pIdx[0] = (WORD)m_dwNumVtx;

	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _pIdx$5[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+262436]
	mov	WORD PTR [edx+ecx], ax

; 3382 : 			pIdx[1] = (WORD)(m_dwNumVtx + x + 1);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262436]
	mov	eax, DWORD PTR _x$4[ebp]
	lea	ecx, DWORD PTR [edx+eax+1]
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _pIdx$5[ebp]
	mov	WORD PTR [eax+edx], cx

; 3383 : 			pIdx[2] = (WORD)(m_dwNumVtx + x + 2);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262436]
	mov	eax, DWORD PTR _x$4[ebp]
	lea	ecx, DWORD PTR [edx+eax+2]
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _pIdx$5[ebp]
	mov	WORD PTR [eax+edx], cx

; 3384 : 			pIdx += 3;

	mov	ecx, DWORD PTR _pIdx$5[ebp]
	add	ecx, 6
	mov	DWORD PTR _pIdx$5[ebp], ecx

; 3385 : 		}

	jmp	SHORT $LN7@DrawPrimit
$LN6@DrawPrimit:

; 3386 : 
; 3387 : 		m_dwNumIdx += pIdx - &m_pIdx[m_dwNumIdx];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262440]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262432]
	lea	eax, DWORD PTR [edx+eax*2]
	mov	ecx, DWORD PTR _pIdx$5[ebp]
	sub	ecx, eax
	sar	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+262440]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262440], ecx
	jmp	SHORT $LN4@DrawPrimit
$LN9@DrawPrimit:

; 3388 : 	}
; 3389 : 
; 3390 : 	else if(m_nCurPrimType == D3DPT_LINESTRIP)

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+262452]
	cmp	edx, 3
	jne	SHORT $LN4@DrawPrimit

; 3391 : 	{
; 3392 : 		WORD *pIdx = &m_pIdx[m_dwNumIdx];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262440]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262432]
	lea	ecx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR _pIdx$1[ebp], ecx

; 3393 : 
; 3394 : 		for(int x=0;x<nVerts;x++)

	mov	DWORD PTR _x$3[ebp], 0
	jmp	SHORT $LN3@DrawPrimit
$LN2@DrawPrimit:
	mov	edx, DWORD PTR _x$3[ebp]
	add	edx, 1
	mov	DWORD PTR _x$3[ebp], edx
$LN3@DrawPrimit:
	movzx	eax, WORD PTR _nVerts$[ebp]
	cmp	DWORD PTR _x$3[ebp], eax
	jge	SHORT $LN1@DrawPrimit

; 3395 : 			*pIdx++ = (WORD)(m_dwNumVtx + x);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262436]
	add	edx, DWORD PTR _x$3[ebp]
	mov	eax, DWORD PTR _pIdx$1[ebp]
	mov	WORD PTR [eax], dx
	mov	ecx, DWORD PTR _pIdx$1[ebp]
	add	ecx, 2
	mov	DWORD PTR _pIdx$1[ebp], ecx
	jmp	SHORT $LN2@DrawPrimit
$LN1@DrawPrimit:

; 3396 : 
; 3397 : 		m_dwNumIdx += nVerts;

	movzx	edx, WORD PTR _nVerts$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+262440]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262440], edx
$LN4@DrawPrimit:

; 3398 : 	}
; 3399 : 
; 3400 : 	m_dwNumVtx += nVerts;

	movzx	edx, WORD PTR _nVerts$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+262436]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262436], edx

; 3401 : 
; 3402 : 	#ifdef _CONTEXT_FLUSH_EVERY_PRIMITIVE
; 3403 : 	FlushVB();
; 3404 : 	#endif
; 3405 : 
; 3406 : 	m_colFOG = 0xFFFFFFFF;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262404], -1
$LN16@DrawPrimit:

; 3407 : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?DrawPrimitive@ContextMPR@@QAEXHGGPAUMPRVtx_t@@G@Z ENDP	; ContextMPR::DrawPrimitive
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
tv92 = -32						; size = 4
tv66 = -28						; size = 4
_pIdx$1 = -24						; size = 4
_i$2 = -20						; size = 4
_x$3 = -16						; size = 4
_xyz$ = -12						; size = 4
_pVtx$ = -8						; size = 4
_this$ = -4						; size = 4
_type$ = 8						; size = 4
_nVerts$ = 12						; size = 4
_xyzIdxPtr$ = 16					; size = 4
?DrawPrimitive2D@ContextMPR@@QAEXHHPAH@Z PROC		; ContextMPR::DrawPrimitive2D
; _this$ = ecx

; 3222 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 3223 : 	ShiAssert(xyzIdxPtr);
; 3224 : 
; 3225 : 	#ifdef _CONTEXT_TRACE_ALL
; 3226 : 	MonoPrint("ContextMPR::DrawPrimitive2D(%d,%d,0x%X)\n",type,nVerts,xyzIdxPtr);
; 3227 : 	#endif
; 3228 : 
; 3229 : 	SetPrimitiveType(type == LineF ? D3DPT_LINESTRIP : D3DPT_POINTLIST);

	cmp	DWORD PTR _type$[ebp], 1
	jne	SHORT $LN16@DrawPrimit
	mov	DWORD PTR tv66[ebp], 3
	jmp	SHORT $LN17@DrawPrimit
$LN16@DrawPrimit:
	mov	DWORD PTR tv66[ebp], 1
$LN17@DrawPrimit:
	mov	eax, DWORD PTR tv66[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetPrimitiveType@ContextMPR@@IAEXH@Z	; ContextMPR::SetPrimitiveType

; 3230 : 
; 3231 : 	#ifdef _CONTEXT_ENABLE_STATS
; 3232 : 	m_stats.Primitive(m_nCurPrimType,nVerts);
; 3233 : 	#endif
; 3234 : 
; 3235 : 	// Lock VB
; 3236 : 	TLVERTEX *pVtx;
; 3237 : 	if(!LockVB(nVerts,(void **)&m_pTLVtx))

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262460				; 0004013cH
	push	ecx
	mov	edx, DWORD PTR _nVerts$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LockVB@ContextMPR@@IAE_NHPAPAX@Z	; ContextMPR::LockVB
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN13@DrawPrimit

; 3238 : 	{
; 3239 : 		m_colFOG = 0xFFFFFFFF;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262404], -1

; 3240 : 		return;

	jmp	$LN14@DrawPrimit
$LN13@DrawPrimit:

; 3241 : 	}
; 3242 : 
; 3243 : 	ShiAssert(FALSE == F4IsBadWritePtr(m_pTLVtx,sizeof *m_pTLVtx));	
; 3244 : 	ShiAssert(m_dwStartVtx < m_dwVBSize);
; 3245 : 	pVtx = &m_pTLVtx[m_dwStartVtx + m_dwNumVtx];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262444]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+262436]
	imul	eax, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+262460]
	mov	DWORD PTR _pVtx$[ebp], eax

; 3246 : 	ShiAssert(FALSE == F4IsBadWritePtr(pVtx,nVerts * sizeof *pVtx));
; 3247 : 
; 3248 : 	Ppoint *xyz;
; 3249 : 
; 3250 : 	// Iterate for each vertex
; 3251 : 	for(int i=0;i<nVerts;i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN12@DrawPrimit
$LN11@DrawPrimit:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN12@DrawPrimit:
	mov	ecx, DWORD PTR _i$2[ebp]
	cmp	ecx, DWORD PTR _nVerts$[ebp]
	jge	$LN10@DrawPrimit

; 3252 : 	{
; 3253 : 	    ShiAssert(*xyzIdxPtr < MAX_VERT_POOL_SIZE);
; 3254 : 		xyz = &TheStateStack.XformedPosPool[*xyzIdxPtr++];

	mov	edx, DWORD PTR _xyzIdxPtr$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 4
	add	eax, DWORD PTR ?XformedPosPool@StateStackClass@@2PAUSpoint@@A ; StateStackClass::XformedPosPool
	mov	DWORD PTR tv92[ebp], eax
	mov	ecx, DWORD PTR _xyzIdxPtr$[ebp]
	add	ecx, 4
	mov	DWORD PTR _xyzIdxPtr$[ebp], ecx
	mov	edx, DWORD PTR tv92[ebp]
	mov	DWORD PTR _xyz$[ebp], edx

; 3255 : 
; 3256 : 		// Check for overrun
; 3257 : 		ShiAssert((BYTE *)pVtx < m_pVtxEnd);
; 3258 : 
; 3259 : 		if(DisplayOptions.bScreenCoordinateBiasFix)		//Wombat778 4-01-04

	movzx	eax, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+20
	test	eax, eax
	je	SHORT $LN9@DrawPrimit

; 3260 : 		{
; 3261 : 			pVtx->sx = xyz->x-0.5f;

	mov	ecx, DWORD PTR _xyz$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR __real@3f000000
	mov	edx, DWORD PTR _pVtx$[ebp]
	movss	DWORD PTR [edx], xmm0

; 3262 : 			pVtx->sy = xyz->y-0.5f;

	mov	eax, DWORD PTR _xyz$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR __real@3f000000
	mov	ecx, DWORD PTR _pVtx$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 3263 : 		}
; 3264 : 		else

	jmp	SHORT $LN8@DrawPrimit
$LN9@DrawPrimit:

; 3265 : 		{
; 3266 : 			pVtx->sx = xyz->x;

	mov	edx, DWORD PTR _pVtx$[ebp]
	mov	eax, DWORD PTR _xyz$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 3267 : 			pVtx->sy = xyz->y;

	mov	edx, DWORD PTR _pVtx$[ebp]
	mov	eax, DWORD PTR _xyz$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
$LN8@DrawPrimit:

; 3268 : 		}
; 3269 : 
; 3270 : 		if(xyz->z)

	mov	edx, DWORD PTR _xyz$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@DrawPrimit

; 3271 : 			pVtx->sz = SCALE_SZ(xyz->z);					// COBRA - RED - Using precomputed CXs;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _xyz$[ebp]
	movss	xmm0, DWORD PTR [eax+262352]
	divss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+262348]
	mov	eax, DWORD PTR _pVtx$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 3272 : 		else

	jmp	SHORT $LN6@DrawPrimit
$LN7@DrawPrimit:

; 3273 : 			pVtx->sz = 0.f;

	mov	ecx, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+8], xmm0
$LN6@DrawPrimit:

; 3274 : 
; 3275 : 		// JB 010305
; 3276 : 		if (xyz->z)

	mov	edx, DWORD PTR _xyz$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN5@DrawPrimit

; 3277 : 			pVtx->rhw = 1.0f / xyz->z;

	mov	eax, DWORD PTR _xyz$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _pVtx$[ebp]
	movss	DWORD PTR [ecx+12], xmm0
$LN5@DrawPrimit:

; 3278 : 
; 3279 : 		pVtx->color = m_colFG;

	mov	edx, DWORD PTR _pVtx$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262396]
	mov	DWORD PTR [edx+16], ecx

; 3280 : 		pVtx->specular = m_colFOG;

	mov	edx, DWORD PTR _pVtx$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262404]
	mov	DWORD PTR [edx+20], ecx

; 3281 : 		pVtx->tu0 = 0;

	mov	edx, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+24], xmm0

; 3282 : 		pVtx->tv0 = 0;

	mov	eax, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+28], xmm0

; 3283 : 
; 3284 : 		#ifdef _CONTEXT_ENABLE_RENDERSTATE_HIGHLIGHT
; 3285 : 		pVtx->color = currentState != -1 ? RGBA_MAKE((currentState << 1) + 50,(currentState << 1) + 50,(currentState << 1) + 50,(currentState << 1) + 50) : D3DRGBA(1.0f,1.0f,1.0f,1.0f);
; 3286 : 		#endif
; 3287 : 
; 3288 : 		pVtx++;

	mov	ecx, DWORD PTR _pVtx$[ebp]
	add	ecx, 40					; 00000028H
	mov	DWORD PTR _pVtx$[ebp], ecx

; 3289 : 	}

	jmp	$LN11@DrawPrimit
$LN10@DrawPrimit:

; 3290 : 
; 3291 : 	// Generate Indices
; 3292 : 	if(m_nCurPrimType == D3DPT_LINESTRIP)

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+262452]
	cmp	eax, 3
	jne	SHORT $LN4@DrawPrimit

; 3293 : 	{
; 3294 : 		WORD *pIdx = &m_pIdx[m_dwNumIdx];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262440]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262432]
	lea	edx, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR _pIdx$1[ebp], edx

; 3295 : 
; 3296 : 		for(int x=0;x<nVerts;x++)

	mov	DWORD PTR _x$3[ebp], 0
	jmp	SHORT $LN3@DrawPrimit
$LN2@DrawPrimit:
	mov	eax, DWORD PTR _x$3[ebp]
	add	eax, 1
	mov	DWORD PTR _x$3[ebp], eax
$LN3@DrawPrimit:
	mov	ecx, DWORD PTR _x$3[ebp]
	cmp	ecx, DWORD PTR _nVerts$[ebp]
	jge	SHORT $LN1@DrawPrimit

; 3297 : 			*pIdx++ = (WORD)(m_dwNumVtx + x);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262436]
	add	eax, DWORD PTR _x$3[ebp]
	mov	ecx, DWORD PTR _pIdx$1[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pIdx$1[ebp]
	add	edx, 2
	mov	DWORD PTR _pIdx$1[ebp], edx
	jmp	SHORT $LN2@DrawPrimit
$LN1@DrawPrimit:

; 3298 : 
; 3299 : 		m_dwNumIdx += nVerts;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262440]
	add	ecx, DWORD PTR _nVerts$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262440], ecx
$LN4@DrawPrimit:

; 3300 : 	}
; 3301 : 
; 3302 : 	m_dwNumVtx += nVerts;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262436]
	add	ecx, DWORD PTR _nVerts$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262436], ecx

; 3303 : 
; 3304 : 	#ifdef _CONTEXT_FLUSH_EVERY_PRIMITIVE
; 3305 : 	FlushVB();
; 3306 : 	#endif
; 3307 : 
; 3308 : 	m_colFOG = 0xFFFFFFFF;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262404], -1
$LN14@DrawPrimit:

; 3309 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?DrawPrimitive2D@ContextMPR@@QAEXHHPAH@Z ENDP		; ContextMPR::DrawPrimitive2D
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_pIdx$ = -12						; size = 4
_this$ = -8						; size = 4
_pVtx$ = -4						; size = 4
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
?Draw2DLine@ContextMPR@@QAEXMMMM@Z PROC			; ContextMPR::Draw2DLine
; _this$ = ecx

; 3137 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 3138 : 	#ifdef _CONTEXT_TRACE_ALL
; 3139 : 	MonoPrint("ContextMPR::Draw2DLine(0x%X,0x%X)\n",x0,y0);
; 3140 : 	#endif
; 3141 : 
; 3142 : 	SetPrimitiveType(D3DPT_LINESTRIP);

	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetPrimitiveType@ContextMPR@@IAEXH@Z	; ContextMPR::SetPrimitiveType

; 3143 : 
; 3144 : 	#ifdef _CONTEXT_ENABLE_STATS
; 3145 : 	m_stats.Primitive(m_nCurPrimType,2);
; 3146 : 	#endif
; 3147 : 
; 3148 : 	// Lock VB
; 3149 : 	TLVERTEX *pVtx;
; 3150 : 	if(!LockVB(2,(void **)&m_pTLVtx))

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 262460				; 0004013cH
	push	eax
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LockVB@ContextMPR@@IAE_NHPAPAX@Z	; ContextMPR::LockVB
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN5@Draw2DLine

; 3151 : 	{
; 3152 : 		m_colFOG = 0xFFFFFFFF;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262404], -1

; 3153 : 		return;

	jmp	$LN6@Draw2DLine
$LN5@Draw2DLine:

; 3154 : 	}
; 3155 : 
; 3156 : 	ShiAssert(FALSE == F4IsBadWritePtr(m_pTLVtx,sizeof *m_pTLVtx));	
; 3157 : 	ShiAssert(m_dwStartVtx < m_dwVBSize);
; 3158 : 	pVtx = &m_pTLVtx[m_dwStartVtx + m_dwNumVtx];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262444]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+262436]
	imul	ecx, 40					; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+262460]
	mov	DWORD PTR _pVtx$[ebp], ecx

; 3159 : 	ShiAssert(FALSE == F4IsBadWritePtr(pVtx,2* sizeof *pVtx));
; 3160 : 
; 3161 : 	// Check for overrun
; 3162 : 	ShiAssert((BYTE *)pVtx < m_pVtxEnd);
; 3163 : 
; 3164 : 	if(DisplayOptions.bScreenCoordinateBiasFix)		//Wombat778 4-01-04

	movzx	ecx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+20
	test	ecx, ecx
	je	SHORT $LN4@Draw2DLine

; 3165 : 	{
; 3166 : 		pVtx->sx = x0-0.5f;

	movss	xmm0, DWORD PTR _x0$[ebp]
	subss	xmm0, DWORD PTR __real@3f000000
	mov	edx, DWORD PTR _pVtx$[ebp]
	movss	DWORD PTR [edx], xmm0

; 3167 : 		pVtx->sy = y0-0.5f;

	movss	xmm0, DWORD PTR _y0$[ebp]
	subss	xmm0, DWORD PTR __real@3f000000
	mov	eax, DWORD PTR _pVtx$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 3168 : 	}
; 3169 : 	else

	jmp	SHORT $LN3@Draw2DLine
$LN4@Draw2DLine:

; 3170 : 	{
; 3171 : 		pVtx->sx = x0;

	mov	ecx, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR _x0$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 3172 : 		pVtx->sy = y0;

	mov	edx, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR _y0$[ebp]
	movss	DWORD PTR [edx+4], xmm0
$LN3@Draw2DLine:

; 3173 : 	}
; 3174 : 	pVtx->sz = 0.0f;

	mov	eax, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0

; 3175 : 	pVtx->rhw = 1.0f;

	mov	ecx, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+12], xmm0

; 3176 : 	pVtx->color = m_colFG;

	mov	edx, DWORD PTR _pVtx$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262396]
	mov	DWORD PTR [edx+16], ecx

; 3177 : 	pVtx->specular = m_colFOG;

	mov	edx, DWORD PTR _pVtx$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262404]
	mov	DWORD PTR [edx+20], ecx

; 3178 : 	pVtx->tu0 = 0;

	mov	edx, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+24], xmm0

; 3179 : 	pVtx->tv0 = 0;

	mov	eax, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+28], xmm0

; 3180 : 	pVtx++;

	mov	ecx, DWORD PTR _pVtx$[ebp]
	add	ecx, 40					; 00000028H
	mov	DWORD PTR _pVtx$[ebp], ecx

; 3181 : 
; 3182 : 	#ifdef _CONTEXT_ENABLE_RENDERSTATE_HIGHLIGHT
; 3183 : 	pVtx->color = currentState != -1 ? RGBA_MAKE((currentState << 1) + 50,(currentState << 1) + 50,(currentState << 1) + 50,(currentState << 1) + 50) : D3DRGBA(1.0f,1.0f,1.0f,1.0f);
; 3184 : 	#endif
; 3185 : 
; 3186 : 	if(DisplayOptions.bScreenCoordinateBiasFix)		//Wombat778 4-01-04

	movzx	edx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+20
	test	edx, edx
	je	SHORT $LN2@Draw2DLine

; 3187 : 	{
; 3188 : 		pVtx->sx = x1-0.5f;

	movss	xmm0, DWORD PTR _x1$[ebp]
	subss	xmm0, DWORD PTR __real@3f000000
	mov	eax, DWORD PTR _pVtx$[ebp]
	movss	DWORD PTR [eax], xmm0

; 3189 : 		pVtx->sy = y1-0.5f;

	movss	xmm0, DWORD PTR _y1$[ebp]
	subss	xmm0, DWORD PTR __real@3f000000
	mov	ecx, DWORD PTR _pVtx$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 3190 : 	}
; 3191 : 	else

	jmp	SHORT $LN1@Draw2DLine
$LN2@Draw2DLine:

; 3192 : 	{
; 3193 : 		pVtx->sx = x1;

	mov	edx, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR _x1$[ebp]
	movss	DWORD PTR [edx], xmm0

; 3194 : 		pVtx->sy = y1;

	mov	eax, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR _y1$[ebp]
	movss	DWORD PTR [eax+4], xmm0
$LN1@Draw2DLine:

; 3195 : 	}
; 3196 : 	pVtx->sz = 0.0f;

	mov	ecx, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+8], xmm0

; 3197 : 	pVtx->rhw = 1.0f;

	mov	edx, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+12], xmm0

; 3198 : 	pVtx->color = m_colFG;

	mov	eax, DWORD PTR _pVtx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262396]
	mov	DWORD PTR [eax+16], edx

; 3199 : 	pVtx->specular = m_colFOG;

	mov	eax, DWORD PTR _pVtx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262404]
	mov	DWORD PTR [eax+20], edx

; 3200 : 	pVtx->tu0 = 0;

	mov	eax, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+24], xmm0

; 3201 : 	pVtx->tv0 = 0;

	mov	ecx, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+28], xmm0

; 3202 : 
; 3203 : 	#ifdef _CONTEXT_ENABLE_RENDERSTATE_HIGHLIGHT
; 3204 : 	pVtx->color = currentState != -1 ? RGBA_MAKE((currentState << 1) + 50,(currentState << 1) + 50,(currentState << 1) + 50,(currentState << 1) + 50) : D3DRGBA(1.0f,1.0f,1.0f,1.0f);
; 3205 : 	#endif
; 3206 : 
; 3207 : 	WORD *pIdx = &m_pIdx[m_dwNumIdx];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262440]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262432]
	lea	eax, DWORD PTR [edx+eax*2]
	mov	DWORD PTR _pIdx$[ebp], eax

; 3208 : 	*pIdx++ = (WORD)m_dwNumVtx;

	mov	ecx, DWORD PTR _pIdx$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+262436]
	mov	WORD PTR [ecx], ax
	mov	ecx, DWORD PTR _pIdx$[ebp]
	add	ecx, 2
	mov	DWORD PTR _pIdx$[ebp], ecx

; 3209 : 	*pIdx++ = (WORD)(m_dwNumVtx + 1);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262436]
	add	eax, 1
	mov	ecx, DWORD PTR _pIdx$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pIdx$[ebp]
	add	edx, 2
	mov	DWORD PTR _pIdx$[ebp], edx

; 3210 : 
; 3211 : 	m_dwNumIdx += 2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262440]
	add	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262440], ecx

; 3212 : 	m_dwNumVtx += 2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262436]
	add	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262436], ecx

; 3213 : 
; 3214 : 	#ifdef _CONTEXT_FLUSH_EVERY_PRIMITIVE
; 3215 : 	FlushVB();
; 3216 : 	#endif
; 3217 : 
; 3218 : 	m_colFOG = 0xFFFFFFFF;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262404], -1
$LN6@Draw2DLine:

; 3219 : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Draw2DLine@ContextMPR@@QAEXMMMM@Z ENDP			; ContextMPR::Draw2DLine
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_pIdx$ = -12						; size = 4
_pVtx$ = -8						; size = 4
_this$ = -4						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
?Draw2DLine@ContextMPR@@QAEXPAUTpoint@@0@Z PROC		; ContextMPR::Draw2DLine
; _this$ = ecx

; 3036 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 3037 : 	ShiAssert(v0 && v1);
; 3038 : 
; 3039 : 	#ifdef _CONTEXT_TRACE_ALL
; 3040 : 	MonoPrint("ContextMPR::Draw2DLine(0x%X,0x%X)\n",v0,v1);
; 3041 : 	#endif
; 3042 : 
; 3043 : 	SetPrimitiveType(D3DPT_LINESTRIP);

	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetPrimitiveType@ContextMPR@@IAEXH@Z	; ContextMPR::SetPrimitiveType

; 3044 : 
; 3045 : 	#ifdef _CONTEXT_ENABLE_STATS
; 3046 : 	m_stats.Primitive(m_nCurPrimType,2);
; 3047 : 	#endif
; 3048 : 
; 3049 : 	// Lock VB
; 3050 : 	TLVERTEX *pVtx;
; 3051 : 	if(!LockVB(2,(void **)&m_pTLVtx))

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 262460				; 0004013cH
	push	eax
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LockVB@ContextMPR@@IAE_NHPAPAX@Z	; ContextMPR::LockVB
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN10@Draw2DLine

; 3052 : 	{
; 3053 : 		m_colFOG = 0xFFFFFFFF;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262404], -1

; 3054 : 		return;

	jmp	$LN11@Draw2DLine
$LN10@Draw2DLine:

; 3055 : 	}
; 3056 : 
; 3057 : 	ShiAssert(FALSE == F4IsBadWritePtr(m_pTLVtx,sizeof *m_pTLVtx));	
; 3058 : 	ShiAssert(m_dwStartVtx < m_dwVBSize);
; 3059 : 	pVtx = &m_pTLVtx[m_dwStartVtx + m_dwNumVtx];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262444]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+262436]
	imul	ecx, 40					; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+262460]
	mov	DWORD PTR _pVtx$[ebp], ecx

; 3060 : 
; 3061 : 	// Check for overrun
; 3062 : 	ShiAssert((BYTE *)pVtx < m_pVtxEnd);	
; 3063 : 	ShiAssert(FALSE == F4IsBadWritePtr(pVtx,2*sizeof *pVtx));
; 3064 : 
; 3065 : 	if(DisplayOptions.bScreenCoordinateBiasFix)		//Wombat778 4-01-04

	movzx	ecx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+20
	test	ecx, ecx
	je	SHORT $LN9@Draw2DLine

; 3066 : 	{
; 3067 : 		pVtx->sx = v0->x-0.5f;

	mov	edx, DWORD PTR _v0$[ebp]
	movss	xmm0, DWORD PTR [edx]
	subss	xmm0, DWORD PTR __real@3f000000
	mov	eax, DWORD PTR _pVtx$[ebp]
	movss	DWORD PTR [eax], xmm0

; 3068 : 		pVtx->sy = v0->y-0.5f;

	mov	ecx, DWORD PTR _v0$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, DWORD PTR __real@3f000000
	mov	edx, DWORD PTR _pVtx$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 3069 : 	}
; 3070 : 	else

	jmp	SHORT $LN8@Draw2DLine
$LN9@Draw2DLine:

; 3071 : 	{
; 3072 : 		pVtx->sx = v0->x;

	mov	eax, DWORD PTR _pVtx$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 3073 : 		pVtx->sy = v0->y;

	mov	eax, DWORD PTR _pVtx$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
$LN8@Draw2DLine:

; 3074 : 	}
; 3075 : 
; 3076 : 	if(v0->z)

	mov	eax, DWORD PTR _v0$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@Draw2DLine

; 3077 : 		pVtx->sz = SCALE_SZ(v0->z);					// COBRA - RED - Using precomputed CXs

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v0$[ebp]
	movss	xmm0, DWORD PTR [ecx+262352]
	divss	xmm0, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+262348]
	mov	ecx, DWORD PTR _pVtx$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 3078 : 	else

	jmp	SHORT $LN6@Draw2DLine
$LN7@Draw2DLine:

; 3079 : 		pVtx->sz = 0.f;

	mov	edx, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+8], xmm0
$LN6@Draw2DLine:

; 3080 : 
; 3081 : 	// JB 010220 CTD
; 3082 : 	if (v0->z)

	mov	eax, DWORD PTR _v0$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN5@Draw2DLine

; 3083 : 		pVtx->rhw = 1.0f / v0->z;

	mov	ecx, DWORD PTR _v0$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _pVtx$[ebp]
	movss	DWORD PTR [edx+12], xmm0
$LN5@Draw2DLine:

; 3084 : 
; 3085 : 	pVtx->color = m_colFG;

	mov	eax, DWORD PTR _pVtx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262396]
	mov	DWORD PTR [eax+16], edx

; 3086 : 	pVtx->specular = m_colFOG;

	mov	eax, DWORD PTR _pVtx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262404]
	mov	DWORD PTR [eax+20], edx

; 3087 : 	pVtx->tu0 = 0;

	mov	eax, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+24], xmm0

; 3088 : 	pVtx->tv0 = 0;

	mov	ecx, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+28], xmm0

; 3089 : 	pVtx++;

	mov	edx, DWORD PTR _pVtx$[ebp]
	add	edx, 40					; 00000028H
	mov	DWORD PTR _pVtx$[ebp], edx

; 3090 : 
; 3091 : 	#ifdef _CONTEXT_ENABLE_RENDERSTATE_HIGHLIGHT
; 3092 : 	pVtx->color = currentState != -1 ? RGBA_MAKE((currentState << 1) + 50,(currentState << 1) + 50,(currentState << 1) + 50,(currentState << 1) + 50) : D3DRGBA(1.0f,1.0f,1.0f,1.0f);
; 3093 : 	#endif
; 3094 : 
; 3095 : 	if(DisplayOptions.bScreenCoordinateBiasFix)		//Wombat778 4-01-04

	movzx	eax, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+20
	test	eax, eax
	je	SHORT $LN4@Draw2DLine

; 3096 : 	{
; 3097 : 		pVtx->sx = v1->x-0.5f;

	mov	ecx, DWORD PTR _v1$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR __real@3f000000
	mov	edx, DWORD PTR _pVtx$[ebp]
	movss	DWORD PTR [edx], xmm0

; 3098 : 		pVtx->sy = v1->y-0.5f;

	mov	eax, DWORD PTR _v1$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR __real@3f000000
	mov	ecx, DWORD PTR _pVtx$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 3099 : 	}
; 3100 : 	else

	jmp	SHORT $LN3@Draw2DLine
$LN4@Draw2DLine:

; 3101 : 	{
; 3102 : 		pVtx->sx = v1->x;

	mov	edx, DWORD PTR _pVtx$[ebp]
	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 3103 : 		pVtx->sy = v1->y;

	mov	edx, DWORD PTR _pVtx$[ebp]
	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
$LN3@Draw2DLine:

; 3104 : 	}
; 3105 : 
; 3106 : 	if(v1->z)

	mov	edx, DWORD PTR _v1$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@Draw2DLine

; 3107 : 		pVtx->sz = (ZFAR/(ZFAR-ZNEAR))+(ZFAR*ZNEAR/(ZNEAR-ZFAR))/v1->z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+262336]
	subss	xmm0, DWORD PTR [ecx+262340]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+262336]
	divss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+262336]
	mulss	xmm0, DWORD PTR [ecx+262340]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [edx+262340]
	subss	xmm2, DWORD PTR [eax+262336]
	divss	xmm0, xmm2
	mov	ecx, DWORD PTR _v1$[ebp]
	divss	xmm0, DWORD PTR [ecx+8]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _pVtx$[ebp]
	movss	DWORD PTR [edx+8], xmm1

; 3108 : 	else

	jmp	SHORT $LN1@Draw2DLine
$LN2@Draw2DLine:

; 3109 : 		pVtx->sz = 0.f;

	mov	eax, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0
$LN1@Draw2DLine:

; 3110 : 
; 3111 : 	pVtx->rhw = 1.0f / v1->z;

	mov	ecx, DWORD PTR _v1$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _pVtx$[ebp]
	movss	DWORD PTR [edx+12], xmm0

; 3112 : 	pVtx->color = m_colFG;

	mov	eax, DWORD PTR _pVtx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262396]
	mov	DWORD PTR [eax+16], edx

; 3113 : 	pVtx->specular = m_colFOG;

	mov	eax, DWORD PTR _pVtx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262404]
	mov	DWORD PTR [eax+20], edx

; 3114 : 	pVtx->tu0 = 0;

	mov	eax, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+24], xmm0

; 3115 : 	pVtx->tv0 = 0;

	mov	ecx, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+28], xmm0

; 3116 : 
; 3117 : 	#ifdef _CONTEXT_ENABLE_RENDERSTATE_HIGHLIGHT
; 3118 : 	pVtx->color = currentState != -1 ? RGBA_MAKE((currentState << 1) + 50,(currentState << 1) + 50,(currentState << 1) + 50,(currentState << 1) + 50) : D3DRGBA(1.0f,1.0f,1.0f,1.0f);
; 3119 : 	#endif
; 3120 : 
; 3121 : 	WORD *pIdx = &m_pIdx[m_dwNumIdx];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262440]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262432]
	lea	eax, DWORD PTR [edx+eax*2]
	mov	DWORD PTR _pIdx$[ebp], eax

; 3122 : 	*pIdx++ = (WORD)m_dwNumVtx;

	mov	ecx, DWORD PTR _pIdx$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+262436]
	mov	WORD PTR [ecx], ax
	mov	ecx, DWORD PTR _pIdx$[ebp]
	add	ecx, 2
	mov	DWORD PTR _pIdx$[ebp], ecx

; 3123 : 	*pIdx++ = (WORD)(m_dwNumVtx + 1);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262436]
	add	eax, 1
	mov	ecx, DWORD PTR _pIdx$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pIdx$[ebp]
	add	edx, 2
	mov	DWORD PTR _pIdx$[ebp], edx

; 3124 : 
; 3125 : 	m_dwNumIdx += 2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262440]
	add	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262440], ecx

; 3126 : 	m_dwNumVtx += 2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262436]
	add	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262436], ecx

; 3127 : 
; 3128 : 	#ifdef _CONTEXT_FLUSH_EVERY_PRIMITIVE
; 3129 : 	FlushVB();
; 3130 : 	#endif
; 3131 : 
; 3132 : 	m_colFOG = 0xFFFFFFFF;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262404], -1
$LN11@Draw2DLine:

; 3133 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Draw2DLine@ContextMPR@@QAEXPAUTpoint@@0@Z ENDP		; ContextMPR::Draw2DLine
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_pVtx$ = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?Draw2DPoint@ContextMPR@@QAEXMM@Z PROC			; ContextMPR::Draw2DPoint
; _this$ = ecx

; 2976 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2977 : 	#ifdef _CONTEXT_TRACE_ALL
; 2978 : 	MonoPrint("ContextMPR::Draw2DPoint(%f,%f)\n",x,y);
; 2979 : 	#endif
; 2980 : 
; 2981 : //	COUNT_PROFILE("POINTS");
; 2982 : 
; 2983 : 	SetPrimitiveType(D3DPT_POINTLIST);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetPrimitiveType@ContextMPR@@IAEXH@Z	; ContextMPR::SetPrimitiveType

; 2984 : 
; 2985 : 	#ifdef _CONTEXT_ENABLE_STATS
; 2986 : 	m_stats.Primitive(m_nCurPrimType,1);
; 2987 : 	#endif
; 2988 : 
; 2989 : 	// Lock VB
; 2990 : 	TLVERTEX *pVtx;
; 2991 : 	if(!LockVB(1,(void **)&m_pTLVtx))

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 262460				; 0004013cH
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LockVB@ContextMPR@@IAE_NHPAPAX@Z	; ContextMPR::LockVB
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@Draw2DPoin

; 2992 : 	{
; 2993 : 		m_colFOG = 0xFFFFFFFF;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262404], -1

; 2994 : 		return;

	jmp	$LN4@Draw2DPoin
$LN3@Draw2DPoin:

; 2995 : 	}
; 2996 : 
; 2997 : 	ShiAssert(FALSE == F4IsBadWritePtr(m_pTLVtx,sizeof *m_pTLVtx));	
; 2998 : 	ShiAssert(m_dwStartVtx < m_dwVBSize);
; 2999 : 	pVtx = &m_pTLVtx[m_dwStartVtx + m_dwNumVtx];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262444]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+262436]
	imul	ecx, 40					; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+262460]
	mov	DWORD PTR _pVtx$[ebp], ecx

; 3000 : 
; 3001 : 	// Check for overrun
; 3002 : 	ShiAssert((BYTE *)pVtx < m_pVtxEnd);	
; 3003 : 	ShiAssert(FALSE == F4IsBadWritePtr(pVtx,sizeof *pVtx));
; 3004 : 
; 3005 : 	if(DisplayOptions.bScreenCoordinateBiasFix)		//Wombat778 4-01-04

	movzx	ecx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+20
	test	ecx, ecx
	je	SHORT $LN2@Draw2DPoin

; 3006 : 	{
; 3007 : 		pVtx->sx = x-0.5f;

	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR __real@3f000000
	mov	edx, DWORD PTR _pVtx$[ebp]
	movss	DWORD PTR [edx], xmm0

; 3008 : 		pVtx->sy = y-0.5f;

	movss	xmm0, DWORD PTR _y$[ebp]
	subss	xmm0, DWORD PTR __real@3f000000
	mov	eax, DWORD PTR _pVtx$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 3009 : 	}
; 3010 : 	else

	jmp	SHORT $LN1@Draw2DPoin
$LN2@Draw2DPoin:

; 3011 : 	{
; 3012 : 		pVtx->sx = x;

	mov	ecx, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 3013 : 		pVtx->sy = y;

	mov	edx, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [edx+4], xmm0
$LN1@Draw2DPoin:

; 3014 : 	}
; 3015 : 	pVtx->sz = 0.0f;

	mov	eax, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0

; 3016 : 	pVtx->rhw = 1.0f;

	mov	ecx, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+12], xmm0

; 3017 : 	pVtx->color = m_colFG;

	mov	edx, DWORD PTR _pVtx$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262396]
	mov	DWORD PTR [edx+16], ecx

; 3018 : 	pVtx->specular = m_colFOG;

	mov	edx, DWORD PTR _pVtx$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262404]
	mov	DWORD PTR [edx+20], ecx

; 3019 : 	pVtx->tu0 = 0;

	mov	edx, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+24], xmm0

; 3020 : 	pVtx->tv0 = 0;

	mov	eax, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+28], xmm0

; 3021 : 
; 3022 : 	#ifdef _CONTEXT_ENABLE_RENDERSTATE_HIGHLIGHT
; 3023 : 	pVtx->color = currentState != -1 ? RGBA_MAKE((currentState << 1) + 50,(currentState << 1) + 50,(currentState << 1) + 50,(currentState << 1) + 50) : D3DRGBA(1.0f,1.0f,1.0f,1.0f);
; 3024 : 	#endif
; 3025 : 
; 3026 : 	m_dwNumVtx++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262436]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262436], edx

; 3027 : 
; 3028 : 	#ifdef _CONTEXT_FLUSH_EVERY_PRIMITIVE
; 3029 : 	FlushVB();
; 3030 : 	#endif
; 3031 : 
; 3032 : 	m_colFOG = 0xFFFFFFFF;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262404], -1
$LN4@Draw2DPoin:

; 3033 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Draw2DPoint@ContextMPR@@QAEXMM@Z ENDP			; ContextMPR::Draw2DPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_pVtx$ = -8						; size = 4
_this$ = -4						; size = 4
_v0$ = 8						; size = 4
?Draw2DPoint@ContextMPR@@QAEXPAUTpoint@@@Z PROC		; ContextMPR::Draw2DPoint
; _this$ = ecx

; 2909 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2910 : 	ShiAssert(v0);
; 2911 : 
; 2912 : //	COUNT_PROFILE("BSP POINTS");
; 2913 : 
; 2914 : 	#ifdef _CONTEXT_TRACE_ALL
; 2915 : 	MonoPrint("ContextMPR::Draw2DPoint(0x%X)\n",v0);
; 2916 : 	#endif
; 2917 : 
; 2918 : 	SetPrimitiveType(D3DPT_POINTLIST);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetPrimitiveType@ContextMPR@@IAEXH@Z	; ContextMPR::SetPrimitiveType

; 2919 : 
; 2920 : 	#ifdef _CONTEXT_ENABLE_STATS
; 2921 : 	m_stats.Primitive(m_nCurPrimType,1);
; 2922 : 	#endif
; 2923 : 
; 2924 : 	// Lock VB
; 2925 : 	TLVERTEX *pVtx;
; 2926 : 	if(!LockVB(1,(void **)&m_pTLVtx))

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 262460				; 0004013cH
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LockVB@ContextMPR@@IAE_NHPAPAX@Z	; ContextMPR::LockVB
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN5@Draw2DPoin

; 2927 : 	{
; 2928 : 		m_colFOG = 0xFFFFFFFF;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262404], -1

; 2929 : 		return;

	jmp	$LN6@Draw2DPoin
$LN5@Draw2DPoin:

; 2930 : 	}
; 2931 : 
; 2932 : 	ShiAssert(FALSE == F4IsBadWritePtr(m_pTLVtx,sizeof *m_pTLVtx));	
; 2933 : 	ShiAssert(m_dwStartVtx < m_dwVBSize);
; 2934 : 	pVtx = &m_pTLVtx[m_dwStartVtx + m_dwNumVtx];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262444]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+262436]
	imul	ecx, 40					; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+262460]
	mov	DWORD PTR _pVtx$[ebp], ecx

; 2935 : 	ShiAssert(FALSE == F4IsBadWritePtr(pVtx,sizeof *pVtx));
; 2936 : 
; 2937 : 	// Check for overrun
; 2938 : 	ShiAssert((BYTE *)pVtx < m_pVtxEnd);
; 2939 : 
; 2940 : 	if (DisplayOptions.bScreenCoordinateBiasFix)		//Wombat778 4-01-04

	movzx	ecx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+20
	test	ecx, ecx
	je	SHORT $LN4@Draw2DPoin

; 2941 : 	{
; 2942 : 		pVtx->sx = v0->x-0.5f;

	mov	edx, DWORD PTR _v0$[ebp]
	movss	xmm0, DWORD PTR [edx]
	subss	xmm0, DWORD PTR __real@3f000000
	mov	eax, DWORD PTR _pVtx$[ebp]
	movss	DWORD PTR [eax], xmm0

; 2943 : 		pVtx->sy = v0->y-0.5f;

	mov	ecx, DWORD PTR _v0$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, DWORD PTR __real@3f000000
	mov	edx, DWORD PTR _pVtx$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 2944 : 	}
; 2945 : 	else

	jmp	SHORT $LN3@Draw2DPoin
$LN4@Draw2DPoin:

; 2946 : 	{
; 2947 : 		pVtx->sx = v0->x;

	mov	eax, DWORD PTR _pVtx$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 2948 : 		pVtx->sy = v0->y;

	mov	eax, DWORD PTR _pVtx$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
$LN3@Draw2DPoin:

; 2949 : 	}
; 2950 : 
; 2951 : 	if(v0->z)

	mov	eax, DWORD PTR _v0$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@Draw2DPoin

; 2952 : 		pVtx->sz = SCALE_SZ(v0->z);					// COBRA - RED - Using precomputed CXs

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v0$[ebp]
	movss	xmm0, DWORD PTR [ecx+262352]
	divss	xmm0, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+262348]
	mov	ecx, DWORD PTR _pVtx$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 2953 : 	else

	jmp	SHORT $LN1@Draw2DPoin
$LN2@Draw2DPoin:

; 2954 : 		pVtx->sz = 0.f;

	mov	edx, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+8], xmm0
$LN1@Draw2DPoin:

; 2955 : 
; 2956 : 	pVtx->rhw = 1.0f;

	mov	eax, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+12], xmm0

; 2957 : 	pVtx->color = m_colFG;

	mov	ecx, DWORD PTR _pVtx$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262396]
	mov	DWORD PTR [ecx+16], eax

; 2958 : 	pVtx->specular = m_colFOG;

	mov	ecx, DWORD PTR _pVtx$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262404]
	mov	DWORD PTR [ecx+20], eax

; 2959 : 	pVtx->tu0 = 0;

	mov	ecx, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+24], xmm0

; 2960 : 	pVtx->tv0 = 0;

	mov	edx, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+28], xmm0

; 2961 : 
; 2962 : 	#ifdef _CONTEXT_ENABLE_RENDERSTATE_HIGHLIGHT
; 2963 : 	pVtx->color = currentState != -1 ? RGBA_MAKE((currentState << 1) + 50,(currentState << 1) + 50,(currentState << 1) + 50,(currentState << 1) + 50) : D3DRGBA(1.0f,1.0f,1.0f,1.0f);
; 2964 : 	#endif
; 2965 : 
; 2966 : 	m_dwNumVtx++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262436]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262436], ecx

; 2967 : 
; 2968 : 	#ifdef _CONTEXT_FLUSH_EVERY_PRIMITIVE
; 2969 : 	FlushVB();
; 2970 : 	#endif
; 2971 : 
; 2972 : 	m_colFOG = 0xFFFFFFFF;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262404], -1
$LN6@Draw2DPoin:

; 2973 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Draw2DPoint@ContextMPR@@QAEXPAUTpoint@@@Z ENDP		; ContextMPR::Draw2DPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
tv727 = -56						; size = 4
_PolyZAvg$ = -52					; size = 4
_i$1 = -48						; size = 4
_i$2 = -44						; size = 4
_x$3 = -40						; size = 4
_pIdx$4 = -36						; size = 4
_xyz$ = -32						; size = 4
_src$5 = -28						; size = 4
_sPolygon$ = -24					; size = 4
_I$ = -20						; size = 4
_rgba$ = -16						; size = 4
_sVertex$ = -12						; size = 4
_pVtx$ = -8						; size = 4
_this$ = -4						; size = 4
_opFlag$ = 8						; size = 4
_poly$ = 12						; size = 4
_xyzIdxPtr$ = 16					; size = 4
_rgbaIdxPtr$ = 20					; size = 4
_IIdxPtr$ = 24						; size = 4
_uv$ = 28						; size = 4
_bUseFGColor$ = 32					; size = 1
?DrawPoly@ContextMPR@@QAEXKPAUPoly@@PAH11PAUPtexcoord@@_N@Z PROC ; ContextMPR::DrawPoly
; _this$ = ecx

; 2551 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 2552 : 	float *I;
; 2553 : 	Spoint *xyz;
; 2554 : 	Pcolor *rgba;
; 2555 : 	TLVERTEX *pVtx;
; 2556 : 	TLVERTEX *sVertex;
; 2557 : 	SPolygon *sPolygon;
; 2558 : 	float	PolyZAvg=0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _PolyZAvg$[ebp], xmm0

; 2559 : 
; 2560 : 	// Incoming type is always MPR_PRM_TRIFAN
; 2561 : 	ShiAssert(FALSE == F4IsBadReadPtr(poly,sizeof *poly));
; 2562 : 	ShiAssert(poly->nVerts >= 3);
; 2563 : 	ShiAssert(xyzIdxPtr);
; 2564 : 	ShiAssert(!bUseFGColor || (bUseFGColor && rgbaIdxPtr == NULL));
; 2565 : 
; 2566 : #ifdef _CONTEXT_TRACE_ALL
; 2567 : 	MonoPrint("ContextMPR::DrawPoly(0x%X,0x%X,0x%X,0x%X,0x%X,0x%X,%s)\n",
; 2568 : 		opFlag,poly,xyzIdxPtr,rgbaIdxPtr,IIdxPtr,uv,bUseFGColor ? "true" : "false");
; 2569 : #endif
; 2570 : 
; 2571 : #ifdef _CONTEXT_ENABLE_STATS
; 2572 : 	m_stats.Primitive(D3DPT_TRIANGLEFAN,poly->nVerts);
; 2573 : #endif
; 2574 : 
; 2575 : 	if(!bZBuffering)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jne	SHORT $LN79@DrawPoly

; 2576 : 	{
; 2577 : 		// Lock VB
; 2578 : 		if(!LockVB(poly->nVerts,(void **)&m_pTLVtx))

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262460				; 0004013cH
	push	ecx
	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LockVB@ContextMPR@@IAE_NHPAPAX@Z	; ContextMPR::LockVB
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN78@DrawPoly

; 2579 : 		{
; 2580 : 			m_colFOG = 0xFFFFFFFF;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262404], -1

; 2581 : 			return;

	jmp	$LN80@DrawPoly
$LN78@DrawPoly:

; 2582 : 		}
; 2583 : 
; 2584 : 		ShiAssert(FALSE == F4IsBadWritePtr(m_pTLVtx,sizeof *m_pTLVtx));	
; 2585 : 		ShiAssert(m_dwStartVtx < m_dwVBSize);
; 2586 : 		pVtx = &m_pTLVtx[m_dwStartVtx + m_dwNumVtx];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262444]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+262436]
	imul	ecx, 40					; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+262460]
	mov	DWORD PTR _pVtx$[ebp], ecx

; 2587 : 		ShiAssert(FALSE == F4IsBadWritePtr(pVtx,poly->nVerts * sizeof *pVtx));
; 2588 : 
; 2589 : 		// JB 011124 CTD
; 2590 : 		if(!pVtx)

	jne	SHORT $LN77@DrawPoly

; 2591 : 		{
; 2592 : 			m_colFOG = 0xFFFFFFFF;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262404], -1

; 2593 : 			return;

	jmp	$LN80@DrawPoly
$LN77@DrawPoly:

; 2594 : 		}
; 2595 : 
; 2596 : 		SetPrimitiveType(D3DPT_TRIANGLEFAN);

	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetPrimitiveType@ContextMPR@@IAEXH@Z	; ContextMPR::SetPrimitiveType

; 2597 : 	}
; 2598 : 	else

	jmp	SHORT $LN76@DrawPoly
$LN79@DrawPoly:

; 2599 : 	{
; 2600 : 		AllocatePolygon(sPolygon,poly->nVerts);

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	lea	ecx, DWORD PTR _sPolygon$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AllocatePolygon@ContextMPR@@IAEXAAPAVSPolygon@@K@Z ; ContextMPR::AllocatePolygon

; 2601 : 		sPolygon->renderState = currentState;

	mov	edx, DWORD PTR _sPolygon$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+12], ecx

; 2602 : 		sPolygon->textureID0 = currentTexture1;

	mov	edx, DWORD PTR _sPolygon$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+16], ecx

; 2603 : 		sPolygon->pNext = NULL;

	mov	edx, DWORD PTR _sPolygon$[ebp]
	mov	DWORD PTR [edx], 0

; 2604 : 		sVertex = sPolygon->pVertexList;

	mov	eax, DWORD PTR _sPolygon$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _sVertex$[ebp], ecx
$LN76@DrawPoly:

; 2605 : 	}
; 2606 : 
; 2607 : 	// Iterate for each vertex
; 2608 : 	if(!bZBuffering)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+40], 0
	jne	$LN75@DrawPoly

; 2609 : 	{
; 2610 : 		for(int i = 0; i < poly->nVerts; i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN74@DrawPoly
$LN73@DrawPoly:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN74@DrawPoly:
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR _i$2[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jge	$LN72@DrawPoly

; 2611 : 		{
; 2612 : 			// Check for overrun
; 2613 : 			ShiAssert((BYTE *)pVtx < m_pVtxEnd);
; 2614 : 	
; 2615 : 			xyz  = &TheStateStack.XformedPosPool[*xyzIdxPtr++];

	mov	eax, DWORD PTR _xyzIdxPtr$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 4
	add	ecx, DWORD PTR ?XformedPosPool@StateStackClass@@2PAUSpoint@@A ; StateStackClass::XformedPosPool
	mov	DWORD PTR _xyz$[ebp], ecx
	mov	edx, DWORD PTR _xyzIdxPtr$[ebp]
	add	edx, 4
	mov	DWORD PTR _xyzIdxPtr$[ebp], edx

; 2616 : 	
; 2617 : 						
; 2618 : 			if (DisplayOptions.bScreenCoordinateBiasFix)		//Wombat778 4-01-04

	movzx	eax, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+20
	test	eax, eax
	je	SHORT $LN71@DrawPoly

; 2619 : 			{
; 2620 : 				pVtx->sx = xyz->x-0.5f;

	mov	ecx, DWORD PTR _xyz$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR __real@3f000000
	mov	edx, DWORD PTR _pVtx$[ebp]
	movss	DWORD PTR [edx], xmm0

; 2621 : 				pVtx->sy = xyz->y-0.5f;

	mov	eax, DWORD PTR _xyz$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR __real@3f000000
	mov	ecx, DWORD PTR _pVtx$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 2622 : 			}
; 2623 : 			else

	jmp	SHORT $LN70@DrawPoly
$LN71@DrawPoly:

; 2624 : 			{
; 2625 : 				pVtx->sx = xyz->x;

	mov	edx, DWORD PTR _pVtx$[ebp]
	mov	eax, DWORD PTR _xyz$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 2626 : 				pVtx->sy = xyz->y;

	mov	edx, DWORD PTR _pVtx$[ebp]
	mov	eax, DWORD PTR _xyz$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
$LN70@DrawPoly:

; 2627 : 			}
; 2628 : 
; 2629 : 			// NOTE: HACK!!
; 2630 : 			if(xyz->z > 5)

	mov	edx, DWORD PTR _xyz$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	comiss	xmm0, DWORD PTR __real@40a00000
	jbe	SHORT $LN69@DrawPoly

; 2631 : 				pVtx->sz = SCALE_SZ(xyz->z);					// COBRA - RED - Using precomputed CXs

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _xyz$[ebp]
	movss	xmm0, DWORD PTR [eax+262352]
	divss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+262348]
	mov	eax, DWORD PTR _pVtx$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 2632 : 			else

	jmp	SHORT $LN68@DrawPoly
$LN69@DrawPoly:

; 2633 : 				pVtx->sz = 0.f;

	mov	ecx, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+8], xmm0
$LN68@DrawPoly:

; 2634 : 
; 2635 : 			pVtx->rhw = 1.f/xyz->z;

	mov	edx, DWORD PTR _xyz$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _pVtx$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 2636 : 			pVtx->specular = m_colFOG;

	mov	ecx, DWORD PTR _pVtx$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262404]
	mov	DWORD PTR [ecx+20], eax

; 2637 : 
; 2638 : 			// End Mission box
; 2639 : 			if(texID > 25 && texID < 32)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+60], 25			; 00000019H
	jle	SHORT $LN67@DrawPoly
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+60], 32			; 00000020H
	jge	SHORT $LN67@DrawPoly

; 2640 : 				pVtx->color = 0xFFFFFFFF;

	mov	eax, DWORD PTR _pVtx$[ebp]
	mov	DWORD PTR [eax+16], -1
	jmp	$LN54@DrawPoly
$LN67@DrawPoly:

; 2641 : 			else if (OTWDriver.GetOTWDisplayMode() == OTWDriverClass::Mode3DCockpit)

	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetOTWDisplayMode@OTWDriverClass@@QAE?AW4OTWDisplayMode@1@XZ ; OTWDriverClass::GetOTWDisplayMode
	cmp	eax, 3
	jne	$LN65@DrawPoly

; 2642 : 			{
; 2643 : 				// Cobra - unshaded 3D cockpit nodes (verts) need full intensity at night
; 2644 : 				// Cobra - Added adjustable instrument/interior lighting in 3D pit
; 2645 : 				// AARRGGBB
; 2646 : 				if (TheTimeOfDay.GetLightLevel() > 0.5f)

	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetLightLevel@CTimeOfDay@@QAEMXZ	; CTimeOfDay::GetLightLevel
	fstp	DWORD PTR tv727[ebp]
	movss	xmm0, DWORD PTR tv727[ebp]
	comiss	xmm0, DWORD PTR __real@3f000000
	jbe	SHORT $LN64@DrawPoly

; 2647 : 				{
; 2648 : 					if (TheColorBank.PitLightLevel == 0)

	cmp	DWORD PTR ?PitLightLevel@ColorBankClass@@2HA, 0 ; ColorBankClass::PitLightLevel
	jne	SHORT $LN63@DrawPoly

; 2649 : 						pVtx->color = TheColorBank.TODcolor;

	mov	ecx, DWORD PTR _pVtx$[ebp]
	mov	edx, DWORD PTR ?TODcolor@ColorBankClass@@2KA ; ColorBankClass::TODcolor
	mov	DWORD PTR [ecx+16], edx
	jmp	SHORT $LN60@DrawPoly
$LN63@DrawPoly:

; 2650 : 					else if (TheColorBank.PitLightLevel == 1)

	cmp	DWORD PTR ?PitLightLevel@ColorBankClass@@2HA, 1 ; ColorBankClass::PitLightLevel
	jne	SHORT $LN61@DrawPoly

; 2651 : 						pVtx->color = 0xFF808080;

	mov	eax, DWORD PTR _pVtx$[ebp]
	mov	DWORD PTR [eax+16], -8355712		; ff808080H

; 2652 : 					else

	jmp	SHORT $LN60@DrawPoly
$LN61@DrawPoly:

; 2653 : 						pVtx->color = 0xFFFFFFFF;

	mov	ecx, DWORD PTR _pVtx$[ebp]
	mov	DWORD PTR [ecx+16], -1
$LN60@DrawPoly:

; 2654 : 				}
; 2655 : 				else

	jmp	$LN55@DrawPoly
$LN64@DrawPoly:

; 2656 : 				{
; 2657 : 					DWORD	src;
; 2658 : 
; 2659 : 					if (TheColorBank.PitLightLevel == 0)

	cmp	DWORD PTR ?PitLightLevel@ColorBankClass@@2HA, 0 ; ColorBankClass::PitLightLevel
	jne	SHORT $LN58@DrawPoly

; 2660 : 						pVtx->color = TheColorBank.TODcolor;

	mov	edx, DWORD PTR _pVtx$[ebp]
	mov	eax, DWORD PTR ?TODcolor@ColorBankClass@@2KA ; ColorBankClass::TODcolor
	mov	DWORD PTR [edx+16], eax
	jmp	$LN55@DrawPoly
$LN58@DrawPoly:

; 2661 : 					else if (TheColorBank.PitLightLevel == 1)

	cmp	DWORD PTR ?PitLightLevel@ColorBankClass@@2HA, 1 ; ColorBankClass::PitLightLevel
	jne	SHORT $LN56@DrawPoly

; 2662 : 					{
; 2663 : 						src = p3DpitLolite;

	mov	ecx, DWORD PTR ?p3DpitLolite@@3KA	; p3DpitLolite
	mov	DWORD PTR _src$5[ebp], ecx

; 2664 : 						pVtx->color = (src&0xFF000000)+((src&0x00FF0000)>>16)+(src&0x0000FF00)+((src&0x000000FF)<<16);

	mov	edx, DWORD PTR _src$5[ebp]
	and	edx, -16777216				; ff000000H
	mov	eax, DWORD PTR _src$5[ebp]
	and	eax, 16711680				; 00ff0000H
	shr	eax, 16					; 00000010H
	add	edx, eax
	mov	ecx, DWORD PTR _src$5[ebp]
	and	ecx, 65280				; 0000ff00H
	add	edx, ecx
	mov	eax, DWORD PTR _src$5[ebp]
	and	eax, 255				; 000000ffH
	shl	eax, 16					; 00000010H
	add	edx, eax
	mov	ecx, DWORD PTR _pVtx$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 2665 : 					}
; 2666 : 					else

	jmp	SHORT $LN55@DrawPoly
$LN56@DrawPoly:

; 2667 : 					{
; 2668 : 						src = p3DpitHilite;

	mov	edx, DWORD PTR ?p3DpitHilite@@3KA	; p3DpitHilite
	mov	DWORD PTR _src$5[ebp], edx

; 2669 : 						pVtx->color = (src&0xFF000000)+((src&0x00FF0000)>>16)+(src&0x0000FF00)+((src&0x000000FF)<<16);

	mov	eax, DWORD PTR _src$5[ebp]
	and	eax, -16777216				; ff000000H
	mov	ecx, DWORD PTR _src$5[ebp]
	and	ecx, 16711680				; 00ff0000H
	shr	ecx, 16					; 00000010H
	add	eax, ecx
	mov	edx, DWORD PTR _src$5[ebp]
	and	edx, 65280				; 0000ff00H
	add	eax, edx
	mov	ecx, DWORD PTR _src$5[ebp]
	and	ecx, 255				; 000000ffH
	shl	ecx, 16					; 00000010H
	add	eax, ecx
	mov	edx, DWORD PTR _pVtx$[ebp]
	mov	DWORD PTR [edx+16], eax
$LN55@DrawPoly:

; 2670 : 					}
; 2671 : 				}
; 2672 : 			}
; 2673 : 			else

	jmp	SHORT $LN54@DrawPoly
$LN65@DrawPoly:

; 2674 : 				pVtx->color = TheColorBank.TODcolor;

	mov	eax, DWORD PTR _pVtx$[ebp]
	mov	ecx, DWORD PTR ?TODcolor@ColorBankClass@@2KA ; ColorBankClass::TODcolor
	mov	DWORD PTR [eax+16], ecx
$LN54@DrawPoly:

; 2675 : 
; 2676 : 
; 2677 : 			if(opFlag&PRIM_COLOP_COLOR)

	mov	edx, DWORD PTR _opFlag$[ebp]
	and	edx, 1
	je	$LN53@DrawPoly

; 2678 : 			{
; 2679 : 				ShiAssert(rgbaIdxPtr);
; 2680 : 				rgba = &TheColorBank.ColorPool[*rgbaIdxPtr++];

	mov	eax, DWORD PTR _rgbaIdxPtr$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 4
	add	ecx, DWORD PTR ?ColorPool@ColorBankClass@@2PAUPcolor@@A ; ColorBankClass::ColorPool
	mov	DWORD PTR _rgba$[ebp], ecx
	mov	edx, DWORD PTR _rgbaIdxPtr$[ebp]
	add	edx, 4
	mov	DWORD PTR _rgbaIdxPtr$[ebp], edx

; 2681 : 				
; 2682 : 				ShiAssert(rgba);
; 2683 : 				if(rgba)

	cmp	DWORD PTR _rgba$[ebp], 0
	je	$LN50@DrawPoly

; 2684 : 				{
; 2685 : 					if(opFlag & PRIM_COLOP_INTENSITY)

	mov	eax, DWORD PTR _opFlag$[ebp]
	and	eax, 2
	je	$LN51@DrawPoly

; 2686 : 					{
; 2687 : 						ShiAssert(IIdxPtr);
; 2688 : 						I = &TheStateStack.IntensityPool[*IIdxPtr++];

	mov	ecx, DWORD PTR _IIdxPtr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?IntensityPool@StateStackClass@@2PAMA ; StateStackClass::IntensityPool
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _I$[ebp], ecx
	mov	edx, DWORD PTR _IIdxPtr$[ebp]
	add	edx, 4
	mov	DWORD PTR _IIdxPtr$[ebp], edx

; 2689 : 						pVtx->color = D3DRGBA(rgba->r * *I,rgba->g * *I,rgba->b * *I,rgba->a);

	mov	eax, DWORD PTR _rgba$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si ecx, xmm0
	shl	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _rgba$[ebp]
	mov	eax, DWORD PTR _I$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si edx, xmm0
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, DWORD PTR _rgba$[ebp]
	mov	edx, DWORD PTR _I$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si eax, xmm0
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _rgba$[ebp]
	mov	eax, DWORD PTR _I$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	mulss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si edx, xmm0
	or	ecx, edx
	mov	eax, DWORD PTR _pVtx$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 2690 : 					}
; 2691 : 
; 2692 : 					else

	jmp	SHORT $LN50@DrawPoly
$LN51@DrawPoly:

; 2693 : 					{
; 2694 : 						pVtx->color = D3DRGBA(rgba->r,rgba->g,rgba->b,rgba->a);

	mov	ecx, DWORD PTR _rgba$[ebp]
	movss	xmm0, DWORD PTR [ecx+12]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si edx, xmm0
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _rgba$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si ecx, xmm0
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _rgba$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si ecx, xmm0
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _rgba$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si ecx, xmm0
	or	edx, ecx
	mov	eax, DWORD PTR _pVtx$[ebp]
	mov	DWORD PTR [eax+16], edx
$LN50@DrawPoly:

; 2695 : 					}
; 2696 : 				}
; 2697 : 			}

	jmp	$LN42@DrawPoly
$LN53@DrawPoly:

; 2698 : 			else if(opFlag&PRIM_COLOP_INTENSITY)

	mov	ecx, DWORD PTR _opFlag$[ebp]
	and	ecx, 2
	je	SHORT $LN48@DrawPoly

; 2699 : 			{
; 2700 : 				ShiAssert(IIdxPtr);
; 2701 : 	
; 2702 : 				I = &TheStateStack.IntensityPool[*IIdxPtr++];

	mov	edx, DWORD PTR _IIdxPtr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?IntensityPool@StateStackClass@@2PAMA ; StateStackClass::IntensityPool
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _I$[ebp], edx
	mov	eax, DWORD PTR _IIdxPtr$[ebp]
	add	eax, 4
	mov	DWORD PTR _IIdxPtr$[ebp], eax

; 2703 : 				pVtx->color = D3DRGBA(*I,*I,*I,1.f);

	mov	ecx, DWORD PTR _I$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si edx, xmm0
	shl	edx, 16					; 00000010H
	or	edx, -16777216				; ff000000H
	mov	eax, DWORD PTR _I$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si ecx, xmm0
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _I$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si ecx, xmm0
	or	edx, ecx
	mov	eax, DWORD PTR _pVtx$[ebp]
	mov	DWORD PTR [eax+16], edx
	jmp	SHORT $LN42@DrawPoly
$LN48@DrawPoly:

; 2704 : 			}
; 2705 : 			else if(bUseFGColor)

	movzx	ecx, BYTE PTR _bUseFGColor$[ebp]
	test	ecx, ecx
	je	SHORT $LN46@DrawPoly

; 2706 : 				pVtx->color = m_colFG;

	mov	edx, DWORD PTR _pVtx$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262396]
	mov	DWORD PTR [edx+16], ecx

; 2707 : 			else

	jmp	SHORT $LN42@DrawPoly
$LN46@DrawPoly:

; 2708 : 			{
; 2709 : 				// Set the light level for the "special building lights"
; 2710 : 	 			if(palID == 3)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+56], 3
	jne	SHORT $LN44@DrawPoly

; 2711 : 	 				pVtx->color = TheColorBank.TODcolor;

	mov	eax, DWORD PTR _pVtx$[ebp]
	mov	ecx, DWORD PTR ?TODcolor@ColorBankClass@@2KA ; ColorBankClass::TODcolor
	mov	DWORD PTR [eax+16], ecx
	jmp	SHORT $LN42@DrawPoly
$LN44@DrawPoly:

; 2712 : 					// Set the light level with "special cockpit reflection alpha"
; 2713 : 				else if(palID == 2)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+56], 2
	jne	SHORT $LN42@DrawPoly

; 2714 : 					pVtx->color = TheColorBank.TODcolor&0x26FFFFFF;

	mov	eax, DWORD PTR ?TODcolor@ColorBankClass@@2KA ; ColorBankClass::TODcolor
	and	eax, 654311423				; 26ffffffH
	mov	ecx, DWORD PTR _pVtx$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN42@DrawPoly:

; 2715 : 			}
; 2716 : 
; 2717 : 			if(opFlag&PRIM_COLOP_TEXTURE)

	mov	edx, DWORD PTR _opFlag$[ebp]
	and	edx, 4
	je	SHORT $LN41@DrawPoly

; 2718 : 			{
; 2719 : 				// NVG_LIGHT_LEVEL = 0.703125f
; 2720 : 				if(NVGmode || TVmode || IRmode)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jne	SHORT $LN39@DrawPoly
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	jne	SHORT $LN39@DrawPoly
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+52], 0
	je	SHORT $LN40@DrawPoly
$LN39@DrawPoly:

; 2721 : 				{
; 2722 : 					pVtx->color &= 0xFF00FF00;

	mov	eax, DWORD PTR _pVtx$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, -16711936				; ff00ff00H
	mov	edx, DWORD PTR _pVtx$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 2723 : 					pVtx->color |= 0x0000B400;

	mov	eax, DWORD PTR _pVtx$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	or	ecx, 46080				; 0000b400H
	mov	edx, DWORD PTR _pVtx$[ebp]
	mov	DWORD PTR [edx+16], ecx
$LN40@DrawPoly:

; 2724 : 				}
; 2725 : 
; 2726 : 				ShiAssert(uv);
; 2727 : 	
; 2728 : 				pVtx->tu0 = pVtx->tu1 = uv->u;

	mov	eax, DWORD PTR _pVtx$[ebp]
	mov	ecx, DWORD PTR _uv$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _pVtx$[ebp]
	mov	ecx, DWORD PTR _pVtx$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+24], edx

; 2729 : 				pVtx->tv0 = pVtx->tv1 = uv->v;

	mov	eax, DWORD PTR _pVtx$[ebp]
	mov	ecx, DWORD PTR _uv$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+36], edx
	mov	eax, DWORD PTR _pVtx$[ebp]
	mov	ecx, DWORD PTR _pVtx$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+28], edx

; 2730 : 
; 2731 : 				uv++;

	mov	eax, DWORD PTR _uv$[ebp]
	add	eax, 8
	mov	DWORD PTR _uv$[ebp], eax

; 2732 : 			}
; 2733 : 			else

	jmp	SHORT $LN38@DrawPoly
$LN41@DrawPoly:

; 2734 : 			{
; 2735 : 				pVtx->tu0 = 0;

	mov	ecx, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+24], xmm0

; 2736 : 				pVtx->tv0 = 0;

	mov	edx, DWORD PTR _pVtx$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+28], xmm0
$LN38@DrawPoly:

; 2737 : 			}
; 2738 : 	
; 2739 : 			pVtx++;

	mov	eax, DWORD PTR _pVtx$[ebp]
	add	eax, 40					; 00000028H
	mov	DWORD PTR _pVtx$[ebp], eax

; 2740 : 		}

	jmp	$LN73@DrawPoly
$LN72@DrawPoly:

; 2741 : 	}
; 2742 : 	else

	jmp	$LN34@DrawPoly
$LN75@DrawPoly:

; 2743 : 	{	
; 2744 : 		for(int i = 0; i < poly->nVerts; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN36@DrawPoly
$LN35@DrawPoly:
	mov	ecx, DWORD PTR _i$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$1[ebp], ecx
$LN36@DrawPoly:
	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jge	$LN34@DrawPoly

; 2745 : 		{
; 2746 : 
; 2747 : //********************************************************************************************************************
; 2748 : // COBRA - RED - The following part of code is a tranformed in a direcct COPY from Statestack to sVertex of x,y,z
; 2749 : 
; 2750 : /*			xyz  = &TheStateStack.XformedPosPool[*xyzIdxPtr++];
; 2751 : 	
; 2752 : 			sVertex->sx = xyz->x;
; 2753 : 			sVertex->sy = xyz->y;
; 2754 : 	
; 2755 : 			// NOTE: HACK!!
; 2756 : 			if(xyz->z > 5)
; 2757 : 				sVertex->sz = SCALE_SZ(xyz->z);					
; 2758 : 			else
; 2759 : 				sVertex->sz = 0.f;
; 2760 : 
; 2761 : 			sVertex->rhw = 1.f/xyz->z;
; 2762 : */
; 2763 : // COBRA - RED - New Version
; 2764 : 
; 2765 : 			*(Spoint*)&(sVertex->sx) = *(Spoint*)&TheStateStack.XformedPosPool[*xyzIdxPtr++];

	mov	ecx, DWORD PTR _xyzIdxPtr$[ebp]
	mov	edx, DWORD PTR [ecx]
	shl	edx, 4
	add	edx, DWORD PTR ?XformedPosPool@StateStackClass@@2PAUSpoint@@A ; StateStackClass::XformedPosPool
	mov	eax, DWORD PTR _sVertex$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _xyzIdxPtr$[ebp]
	add	eax, 4
	mov	DWORD PTR _xyzIdxPtr$[ebp], eax

; 2766 : 			sVertex->rhw = 1.f/sVertex->sz;

	mov	ecx, DWORD PTR _sVertex$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _sVertex$[ebp]
	movss	DWORD PTR [edx+12], xmm0

; 2767 : 	
; 2768 : 			// NOTE: HACK!!
; 2769 : 			if(sVertex->sz > 5)

	mov	eax, DWORD PTR _sVertex$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	comiss	xmm0, DWORD PTR __real@40a00000
	jbe	SHORT $LN33@DrawPoly

; 2770 : 				sVertex->sz = SCALE_SZ(sVertex->sz);					// COBRA - RED - Using precomputed CXs;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _sVertex$[ebp]
	movss	xmm0, DWORD PTR [ecx+262352]
	divss	xmm0, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+262348]
	mov	ecx, DWORD PTR _sVertex$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 2771 : 			else

	jmp	SHORT $LN32@DrawPoly
$LN33@DrawPoly:

; 2772 : 				sVertex->sz = 0.f;

	mov	edx, DWORD PTR _sVertex$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+8], xmm0
$LN32@DrawPoly:

; 2773 : 
; 2774 : // COBRA - RED - End
; 2775 : //********************************************************************************************************************
; 2776 : 			sVertex->specular = m_colFOG;

	mov	eax, DWORD PTR _sVertex$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262404]
	mov	DWORD PTR [eax+20], edx

; 2777 : 
; 2778 : 			// End Mission box
; 2779 : 			if(texID > 25 && texID < 32)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+60], 25			; 00000019H
	jle	SHORT $LN31@DrawPoly
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+60], 32			; 00000020H
	jge	SHORT $LN31@DrawPoly

; 2780 : 				sVertex->color = 0xFFFFFFFF;

	mov	edx, DWORD PTR _sVertex$[ebp]
	mov	DWORD PTR [edx+16], -1

; 2781 : 			else

	jmp	SHORT $LN30@DrawPoly
$LN31@DrawPoly:

; 2782 : 				sVertex->color = TheColorBank.TODcolor;

	mov	eax, DWORD PTR _sVertex$[ebp]
	mov	ecx, DWORD PTR ?TODcolor@ColorBankClass@@2KA ; ColorBankClass::TODcolor
	mov	DWORD PTR [eax+16], ecx
$LN30@DrawPoly:

; 2783 : 
; 2784 : 			if(opFlag&PRIM_COLOP_COLOR)

	mov	edx, DWORD PTR _opFlag$[ebp]
	and	edx, 1
	je	$LN29@DrawPoly

; 2785 : 			{
; 2786 : 				ShiAssert(rgbaIdxPtr);
; 2787 : 				rgba = &TheColorBank.ColorPool[*rgbaIdxPtr++];

	mov	eax, DWORD PTR _rgbaIdxPtr$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 4
	add	ecx, DWORD PTR ?ColorPool@ColorBankClass@@2PAUPcolor@@A ; ColorBankClass::ColorPool
	mov	DWORD PTR _rgba$[ebp], ecx
	mov	edx, DWORD PTR _rgbaIdxPtr$[ebp]
	add	edx, 4
	mov	DWORD PTR _rgbaIdxPtr$[ebp], edx

; 2788 : 				
; 2789 : 				ShiAssert(rgba);
; 2790 : 				if(rgba)

	cmp	DWORD PTR _rgba$[ebp], 0
	je	$LN26@DrawPoly

; 2791 : 				{
; 2792 : 					if(opFlag & PRIM_COLOP_INTENSITY)

	mov	eax, DWORD PTR _opFlag$[ebp]
	and	eax, 2
	je	$LN27@DrawPoly

; 2793 : 					{
; 2794 : 						ShiAssert(IIdxPtr);
; 2795 : 						I = &TheStateStack.IntensityPool[*IIdxPtr++];

	mov	ecx, DWORD PTR _IIdxPtr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?IntensityPool@StateStackClass@@2PAMA ; StateStackClass::IntensityPool
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _I$[ebp], ecx
	mov	edx, DWORD PTR _IIdxPtr$[ebp]
	add	edx, 4
	mov	DWORD PTR _IIdxPtr$[ebp], edx

; 2796 : 						sVertex->color = D3DRGBA(rgba->r * *I,rgba->g * *I,rgba->b * *I,rgba->a);

	mov	eax, DWORD PTR _rgba$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si ecx, xmm0
	shl	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _rgba$[ebp]
	mov	eax, DWORD PTR _I$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si edx, xmm0
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, DWORD PTR _rgba$[ebp]
	mov	edx, DWORD PTR _I$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si eax, xmm0
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _rgba$[ebp]
	mov	eax, DWORD PTR _I$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	mulss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si edx, xmm0
	or	ecx, edx
	mov	eax, DWORD PTR _sVertex$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 2797 : 					}
; 2798 : 
; 2799 : 					else

	jmp	SHORT $LN26@DrawPoly
$LN27@DrawPoly:

; 2800 : 					{
; 2801 : 						sVertex->color = D3DRGBA(rgba->r,rgba->g,rgba->b,rgba->a);

	mov	ecx, DWORD PTR _rgba$[ebp]
	movss	xmm0, DWORD PTR [ecx+12]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si edx, xmm0
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _rgba$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si ecx, xmm0
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _rgba$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si ecx, xmm0
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _rgba$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si ecx, xmm0
	or	edx, ecx
	mov	eax, DWORD PTR _sVertex$[ebp]
	mov	DWORD PTR [eax+16], edx
$LN26@DrawPoly:

; 2802 : 					}
; 2803 : 				}
; 2804 : 			}

	jmp	$LN18@DrawPoly
$LN29@DrawPoly:

; 2805 : 			else if(opFlag&PRIM_COLOP_INTENSITY)

	mov	ecx, DWORD PTR _opFlag$[ebp]
	and	ecx, 2
	je	SHORT $LN24@DrawPoly

; 2806 : 			{
; 2807 : 				ShiAssert(IIdxPtr);
; 2808 : 	
; 2809 : 				I = &TheStateStack.IntensityPool[*IIdxPtr++];

	mov	edx, DWORD PTR _IIdxPtr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?IntensityPool@StateStackClass@@2PAMA ; StateStackClass::IntensityPool
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _I$[ebp], edx
	mov	eax, DWORD PTR _IIdxPtr$[ebp]
	add	eax, 4
	mov	DWORD PTR _IIdxPtr$[ebp], eax

; 2810 : 				sVertex->color = D3DRGBA(*I,*I,*I,1.f);

	mov	ecx, DWORD PTR _I$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si edx, xmm0
	shl	edx, 16					; 00000010H
	or	edx, -16777216				; ff000000H
	mov	eax, DWORD PTR _I$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si ecx, xmm0
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _I$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si ecx, xmm0
	or	edx, ecx
	mov	eax, DWORD PTR _sVertex$[ebp]
	mov	DWORD PTR [eax+16], edx
	jmp	SHORT $LN18@DrawPoly
$LN24@DrawPoly:

; 2811 : 			}
; 2812 : 			else if(bUseFGColor)

	movzx	ecx, BYTE PTR _bUseFGColor$[ebp]
	test	ecx, ecx
	je	SHORT $LN22@DrawPoly

; 2813 : 				sVertex->color = m_colFG;

	mov	edx, DWORD PTR _sVertex$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262396]
	mov	DWORD PTR [edx+16], ecx

; 2814 : 			else

	jmp	SHORT $LN18@DrawPoly
$LN22@DrawPoly:

; 2815 : 			{
; 2816 : 				// Set the light level for the "special building lights"
; 2817 : 	 			if(palID == 3)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+56], 3
	jne	SHORT $LN20@DrawPoly

; 2818 : 	 				sVertex->color = TheColorBank.TODcolor;

	mov	eax, DWORD PTR _sVertex$[ebp]
	mov	ecx, DWORD PTR ?TODcolor@ColorBankClass@@2KA ; ColorBankClass::TODcolor
	mov	DWORD PTR [eax+16], ecx
	jmp	SHORT $LN18@DrawPoly
$LN20@DrawPoly:

; 2819 : 				// Set the light level with "special cockpit reflection alpha"
; 2820 : 				else if(palID == 2)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+56], 2
	jne	SHORT $LN18@DrawPoly

; 2821 : 					sVertex->color = TheColorBank.TODcolor&0x26FFFFFF;

	mov	eax, DWORD PTR ?TODcolor@ColorBankClass@@2KA ; ColorBankClass::TODcolor
	and	eax, 654311423				; 26ffffffH
	mov	ecx, DWORD PTR _sVertex$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN18@DrawPoly:

; 2822 : 			}
; 2823 : 
; 2824 : 			if(opFlag&PRIM_COLOP_TEXTURE)

	mov	edx, DWORD PTR _opFlag$[ebp]
	and	edx, 4
	je	SHORT $LN17@DrawPoly

; 2825 : 			{
; 2826 : 				// NVG_LIGHT_LEVEL = 0.703125f
; 2827 : 				if(NVGmode || TVmode || IRmode)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jne	SHORT $LN15@DrawPoly
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	jne	SHORT $LN15@DrawPoly
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+52], 0
	je	SHORT $LN16@DrawPoly
$LN15@DrawPoly:

; 2828 : 				{
; 2829 : 					sVertex->color &= 0xFF00FF00;

	mov	eax, DWORD PTR _sVertex$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, -16711936				; ff00ff00H
	mov	edx, DWORD PTR _sVertex$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 2830 : 					sVertex->color |= 0x0000B400;

	mov	eax, DWORD PTR _sVertex$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	or	ecx, 46080				; 0000b400H
	mov	edx, DWORD PTR _sVertex$[ebp]
	mov	DWORD PTR [edx+16], ecx
$LN16@DrawPoly:

; 2831 : 				}
; 2832 : 
; 2833 : 				ShiAssert(uv);
; 2834 : 	
; 2835 : 				sVertex->tu0 = sVertex->tu1 = uv->u;

	mov	eax, DWORD PTR _sVertex$[ebp]
	mov	ecx, DWORD PTR _uv$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _sVertex$[ebp]
	mov	ecx, DWORD PTR _sVertex$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+24], edx

; 2836 : 				sVertex->tv0 = sVertex->tv1 = uv->v;

	mov	eax, DWORD PTR _sVertex$[ebp]
	mov	ecx, DWORD PTR _uv$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+36], edx
	mov	eax, DWORD PTR _sVertex$[ebp]
	mov	ecx, DWORD PTR _sVertex$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+28], edx

; 2837 : 
; 2838 : 				uv++;

	mov	eax, DWORD PTR _uv$[ebp]
	add	eax, 8
	mov	DWORD PTR _uv$[ebp], eax

; 2839 : 			}
; 2840 : 			else

	jmp	SHORT $LN14@DrawPoly
$LN17@DrawPoly:

; 2841 : 			{
; 2842 : 				sVertex->tu0 = 0;

	mov	ecx, DWORD PTR _sVertex$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+24], xmm0

; 2843 : 				sVertex->tv0 = 0;

	mov	edx, DWORD PTR _sVertex$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+28], xmm0
$LN14@DrawPoly:

; 2844 : 			}
; 2845 : 			PolyZAvg+=sVertex->sz;			// COBRA - RED - Poly Z Sum is calculated on the fly

	mov	eax, DWORD PTR _sVertex$[ebp]
	movss	xmm0, DWORD PTR _PolyZAvg$[ebp]
	addss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _PolyZAvg$[ebp], xmm0

; 2846 : 
; 2847 : 			// COBRA - RED - No More Linking of vertexes, as single ARRAYS of TLVERTEX structures
; 2848 : 			sVertex++;

	mov	ecx, DWORD PTR _sVertex$[ebp]
	add	ecx, 40					; 00000028H
	mov	DWORD PTR _sVertex$[ebp], ecx

; 2849 : 		}

	jmp	$LN35@DrawPoly
$LN34@DrawPoly:

; 2850 : 	}
; 2851 : 
; 2852 : 	// Generate Indices
; 2853 : 	if(!bZBuffering)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+40], 0
	jne	$LN13@DrawPoly

; 2854 : 	{
; 2855 : 		WORD *pIdx = &m_pIdx[m_dwNumIdx];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262440]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262432]
	lea	ecx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR _pIdx$4[ebp], ecx

; 2856 : 
; 2857 : 		for(int x = 0; x < poly->nVerts-2; x++)

	mov	DWORD PTR _x$3[ebp], 0
	jmp	SHORT $LN12@DrawPoly
$LN11@DrawPoly:
	mov	edx, DWORD PTR _x$3[ebp]
	add	edx, 1
	mov	DWORD PTR _x$3[ebp], edx
$LN12@DrawPoly:
	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 2
	cmp	DWORD PTR _x$3[ebp], ecx
	jge	SHORT $LN10@DrawPoly

; 2858 : 		{
; 2859 : 			pIdx[0] = (WORD)m_dwNumVtx;

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _pIdx$4[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [ecx+262436]
	mov	WORD PTR [eax+edx], cx

; 2860 : 			pIdx[1] = (WORD)(m_dwNumVtx + x + 1);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262436]
	mov	ecx, DWORD PTR _x$3[ebp]
	lea	edx, DWORD PTR [eax+ecx+1]
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _pIdx$4[ebp]
	mov	WORD PTR [ecx+eax], dx

; 2861 : 			pIdx[2] = (WORD)(m_dwNumVtx + x + 2);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262436]
	mov	ecx, DWORD PTR _x$3[ebp]
	lea	edx, DWORD PTR [eax+ecx+2]
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _pIdx$4[ebp]
	mov	WORD PTR [ecx+eax], dx

; 2862 : 			pIdx += 3;

	mov	edx, DWORD PTR _pIdx$4[ebp]
	add	edx, 6
	mov	DWORD PTR _pIdx$4[ebp], edx

; 2863 : 		}

	jmp	SHORT $LN11@DrawPoly
$LN10@DrawPoly:

; 2864 : 
; 2865 : 		m_dwNumIdx += pIdx - &m_pIdx[m_dwNumIdx];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262440]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262432]
	lea	ecx, DWORD PTR [eax+ecx*2]
	mov	edx, DWORD PTR _pIdx$4[ebp]
	sub	edx, ecx
	sar	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+262440]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262440], edx

; 2866 : 		m_dwNumVtx += poly->nVerts;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262436]
	mov	ecx, DWORD PTR _poly$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262436], eax

; 2867 : 
; 2868 : 	#ifdef _CONTEXT_FLUSH_EVERY_PRIMITIVE
; 2869 : 		FlushVB();
; 2870 : 	#endif
; 2871 : 	}
; 2872 : 	else

	jmp	$LN1@DrawPoly
$LN13@DrawPoly:

; 2873 : 	{
; 2874 : 		// COBRA - RED - Here calculates the Average Z
; 2875 : 		sPolygon->CalcPolyZ(PolyZAvg);

	push	ecx
	movss	xmm0, DWORD PTR _PolyZAvg$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _sPolygon$[ebp]
	call	?CalcPolyZ@SPolygon@@QAEXM@Z		; SPolygon::CalcPolyZ

; 2876 : 
; 2877 : 		// Double-textured
; 2878 : 		if(sPolygon->renderState >= STATE_MULTITEXTURE)

	mov	eax, DWORD PTR _sPolygon$[ebp]
	cmp	DWORD PTR [eax+12], 37			; 00000025H
	jl	SHORT $LN8@DrawPoly

; 2879 : 		{
; 2880 : 			texturedPolyVCnt += poly->nVerts;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262472]
	mov	eax, DWORD PTR _poly$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262472], edx

; 2881 : 			AddPolygon(texturedPolys,sPolygon);

	lea	edx, DWORD PTR _sPolygon$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 262484				; 00040154H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddPolygon@ContextMPR@@IAEXAAPAVSPolygon@@0@Z ; ContextMPR::AddPolygon
	jmp	$LN1@DrawPoly
$LN8@DrawPoly:

; 2882 : 		}
; 2883 : 		// Translucent
; 2884 : 		else if(sPolygon->renderState >= STATE_ALPHA_SOLID)

	mov	ecx, DWORD PTR _sPolygon$[ebp]
	cmp	DWORD PTR [ecx+12], 16			; 00000010H
	jl	SHORT $LN6@DrawPoly

; 2885 : 		{
; 2886 : 			translucentPolyVCnt += poly->nVerts;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262476]
	mov	ecx, DWORD PTR _poly$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262476], eax

; 2887 : 			AddPolygon(translucentPolys,sPolygon);

	lea	eax, DWORD PTR _sPolygon$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262488				; 00040158H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddPolygon@ContextMPR@@IAEXAAPAVSPolygon@@0@Z ; ContextMPR::AddPolygon
	jmp	SHORT $LN1@DrawPoly
$LN6@DrawPoly:

; 2888 : 		}
; 2889 : 		// Textured
; 2890 : 		else if(sPolygon->renderState >= STATE_TEXTURE)

	mov	edx, DWORD PTR _sPolygon$[ebp]
	cmp	DWORD PTR [edx+12], 3
	jl	SHORT $LN4@DrawPoly

; 2891 : 		{
; 2892 : 			texturedPolyVCnt += poly->nVerts;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262472]
	mov	edx, DWORD PTR _poly$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262472], ecx

; 2893 : 			AddPolygon(texturedPolys,sPolygon);

	lea	ecx, DWORD PTR _sPolygon$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 262484				; 00040154H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddPolygon@ContextMPR@@IAEXAAPAVSPolygon@@0@Z ; ContextMPR::AddPolygon
	jmp	SHORT $LN1@DrawPoly
$LN4@DrawPoly:

; 2894 : 		}
; 2895 : 		// Plain
; 2896 : 		else if(sPolygon->renderState >= STATE_SOLID)

	mov	eax, DWORD PTR _sPolygon$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jl	SHORT $LN2@DrawPoly

; 2897 : 		{
; 2898 : 			plainPolyVCnt += poly->nVerts;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262468]
	mov	eax, DWORD PTR _poly$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262468], edx

; 2899 : 			AddPolygon(plainPolys,sPolygon);

	lea	edx, DWORD PTR _sPolygon$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 262480				; 00040150H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddPolygon@ContextMPR@@IAEXAAPAVSPolygon@@0@Z ; ContextMPR::AddPolygon

; 2900 : 		}
; 2901 : 		else

	jmp	SHORT $LN1@DrawPoly
$LN2@DrawPoly:

; 2902 : 			INT3;

	int	3
$LN1@DrawPoly:

; 2903 : 	}
; 2904 : 
; 2905 : 	m_colFOG = 0xFFFFFFFF;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262404], -1
$LN80@DrawPoly:

; 2906 : }

	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
?DrawPoly@ContextMPR@@QAEXKPAUPoly@@PAH11PAUPtexcoord@@_N@Z ENDP ; ContextMPR::DrawPoly
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Stats@ContextMPR@@IAEXXZ PROC				; ContextMPR::Stats
; _this$ = ecx

; 2176 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2177 : 	#ifdef _DEBUG
; 2178 : 	if(m_bNoD3DStatsAvail)
; 2179 : 		return;
; 2180 : 
; 2181 : 	HRESULT hr;
; 2182 : 	#ifdef _CONTEXT_USE_MANAGED_TEXTURES
; 2183 : 	D3DDEVINFO_TEXTUREMANAGER ditexman;
; 2184 : 	hr = m_pD3DD->GetInfo(D3DDEVINFOID_TEXTUREMANAGER,&ditexman,sizeof(ditexman));
; 2185 : 	m_bNoD3DStatsAvail = FAILED(hr) || hr == S_FALSE;
; 2186 : 	#endif
; 2187 : 
; 2188 : 	D3DDEVINFO_TEXTURING ditex;
; 2189 : 	hr = m_pD3DD->GetInfo(D3DDEVINFOID_TEXTURING,&ditex,sizeof(ditex));
; 2190 : 	m_bNoD3DStatsAvail = FAILED(hr) || hr == S_FALSE;
; 2191 : 	#endif
; 2192 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Stats@ContextMPR@@IAEXXZ ENDP				; ContextMPR::Stats
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_pThis$ = -4						; size = 4
_lpDDSurface$ = 8					; size = 4
_lpDDSurfaceDesc$ = 12					; size = 4
_lpContext$ = 16					; size = 4
?EnumSurfacesCB2@ContextMPR@@KGJPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@PAX@Z PROC ; ContextMPR::EnumSurfacesCB2

; 2086 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 2087 : 	ContextMPR *pThis = (ContextMPR *)lpContext;

	mov	eax, DWORD PTR _lpContext$[ebp]
	mov	DWORD PTR _pThis$[ebp], eax

; 2088 : 	ShiAssert(FALSE == F4IsBadReadPtr(pThis,sizeof *pThis));
; 2089 : 	ShiAssert(FALSE == F4IsBadReadPtr(lpDDSurfaceDesc,sizeof *lpDDSurfaceDesc));
; 2090 : 
; 2091 : 	if(lpDDSurfaceDesc->ddsCaps.dwCaps & DDSCAPS_PRIMARYSURFACE)

	mov	ecx, DWORD PTR _lpDDSurfaceDesc$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	and	edx, 512				; 00000200H
	je	SHORT $LN1@EnumSurfac

; 2092 : 	{
; 2093 : 		pThis->m_pDDSP = lpDDSurface;

	mov	eax, DWORD PTR _pThis$[ebp]
	mov	ecx, DWORD PTR _lpDDSurface$[ebp]
	mov	DWORD PTR [eax+262496], ecx

; 2094 : 		return DDENUMRET_CANCEL;

	xor	eax, eax
	jmp	SHORT $LN2@EnumSurfac
$LN1@EnumSurfac:

; 2095 : 	}
; 2096 : 
; 2097 : 	return DDENUMRET_OK;

	mov	eax, 1
$LN2@EnumSurfac:

; 2098 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?EnumSurfacesCB2@ContextMPR@@KGJPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@PAX@Z ENDP ; ContextMPR::EnumSurfacesCB2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
;	COMDAT ?FlushVB@ContextMPR@@IAEXXZ
_TEXT	SEGMENT
_hr$ = -12						; size = 4
_nPrimType$ = -8					; size = 4
_this$ = -4						; size = 4
?FlushVB@ContextMPR@@IAEXXZ PROC			; ContextMPR::FlushVB, COMDAT
; _this$ = ecx

; 2341 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2342 : 	if(!m_dwNumVtx) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+262436], 0
	jne	SHORT $LN6@FlushVB
	jmp	$LN7@FlushVB
$LN6@FlushVB:

; 2343 : 	ShiAssert(m_nCurPrimType != 0);
; 2344 : 
; 2345 : #ifdef _CONTEXT_TRACE_ALL
; 2346 : 	MonoPrint("ContextMPR::FlushVB()\n");
; 2347 : #endif
; 2348 : 
; 2349 : 	int nPrimType = m_nCurPrimType;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+262452]
	mov	DWORD PTR _nPrimType$[ebp], edx

; 2350 : 
; 2351 : 	// Convert triangle fans to triangle lists to make them batchable
; 2352 : 	if(nPrimType == D3DPT_TRIANGLEFAN)

	cmp	DWORD PTR _nPrimType$[ebp], 6
	jne	SHORT $LN5@FlushVB

; 2353 : 	{
; 2354 : 		nPrimType = D3DPT_TRIANGLELIST;

	mov	DWORD PTR _nPrimType$[ebp], 4
	jmp	SHORT $LN4@FlushVB
$LN5@FlushVB:

; 2355 : 		ShiAssert(m_dwNumIdx);
; 2356 : 	}
; 2357 : 
; 2358 : 	// Convert line strips to line lists to make them batchable
; 2359 : 	else if(nPrimType == D3DPT_LINESTRIP)

	cmp	DWORD PTR _nPrimType$[ebp], 3
	jne	SHORT $LN4@FlushVB

; 2360 : 	{
; 2361 : 		nPrimType = D3DPT_LINELIST;

	mov	DWORD PTR _nPrimType$[ebp], 2
$LN4@FlushVB:

; 2362 : 		ShiAssert(m_dwNumIdx);
; 2363 : 	}
; 2364 : 
; 2365 : 	HRESULT hr;
; 2366 : 
; 2367 : 	UnlockVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UnlockVB@ContextMPR@@IAEXXZ		; ContextMPR::UnlockVB

; 2368 : 
; 2369 : #ifdef _VALIDATE_DEVICE
; 2370 : 	if(!m_pCtxDX->ValidateD3DDevice())
; 2371 : 		MonoPrint("ContextMPR::FlushVB() - Validate Device failed - currentState=%d,currentTexture=0x%\n",currentState,currentTexture);
; 2372 : #endif
; 2373 : 
; 2374 : #ifdef _CONTEXT_ENABLE_RENDERSTATE_HIGHLIGHT
; 2375 : 	hr = m_pD3DD->ApplyStateBlock(StateTable[STATE_SOLID]);
; 2376 : 	ShiAssert(SUCCEEDED(hr));
; 2377 : #endif
; 2378 : 
; 2379 : 	if(m_dwNumIdx)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+262440], 0
	je	SHORT $LN2@FlushVB

; 2380 : 		hr = m_pD3DD->DrawIndexedPrimitiveVB((D3DPRIMITIVETYPE)nPrimType,m_pVB,m_dwStartVtx,m_dwNumVtx,m_pIdx,m_dwNumIdx,NULL);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262440]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262432]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262436]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262444]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262384]
	push	ecx
	mov	edx, DWORD PTR _nPrimType$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+128]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax

; 2381 : 	else

	jmp	SHORT $LN1@FlushVB
$LN2@FlushVB:

; 2382 : 		hr = m_pD3DD->DrawPrimitiveVB((D3DPRIMITIVETYPE) nPrimType,m_pVB,m_dwStartVtx,m_dwNumVtx,NULL);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262436]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262444]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262384]
	push	edx
	mov	eax, DWORD PTR _nPrimType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+124]
	call	eax
	mov	DWORD PTR _hr$[ebp], eax
$LN1@FlushVB:

; 2383 : 
; 2384 : 	ShiAssert(SUCCEEDED(hr));
; 2385 : 
; 2386 : #ifdef _CONTEXT_ENABLE_STATS
; 2387 : 	m_stats.StartBatch();
; 2388 : #endif
; 2389 : 
; 2390 : 	m_dwStartVtx += m_dwNumVtx;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262444]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+262436]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262444], edx

; 2391 : 	m_dwNumVtx = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262436], 0

; 2392 : 	m_dwNumIdx = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262440], 0
$LN7@FlushVB:

; 2393 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FlushVB@ContextMPR@@IAEXXZ ENDP			; ContextMPR::FlushVB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
;	COMDAT ?UnlockVB@ContextMPR@@IAEXXZ
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_this$ = -4						; size = 4
?UnlockVB@ContextMPR@@IAEXXZ PROC			; ContextMPR::UnlockVB, COMDAT
; _this$ = ecx

; 2276 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2277 : #ifdef _CONTEXT_TRACE_ALL
; 2278 : 	MonoPrint("ContextMPR::UnlockVB()\n");
; 2279 : #endif
; 2280 : 
; 2281 : 	// Unlock VB
; 2282 : 	HRESULT hr = m_pVB->Unlock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262384]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262384]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax

; 2283 : 	ShiAssert(SUCCEEDED(hr));
; 2284 : 	m_pTLVtx = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262460], 0

; 2285 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?UnlockVB@ContextMPR@@IAEXXZ ENDP			; ContextMPR::UnlockVB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
;	COMDAT ?LockVB@ContextMPR@@IAE_NHPAPAX@Z
_TEXT	SEGMENT
tv142 = -16						; size = 4
_hr$ = -12						; size = 4
_dwSize$ = -8						; size = 4
_this$ = -4						; size = 4
_nVtxCount$ = 8						; size = 4
_p$ = 12						; size = 4
?LockVB@ContextMPR@@IAE_NHPAPAX@Z PROC			; ContextMPR::LockVB, COMDAT
; _this$ = ecx

; 2227 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 2228 : #ifdef _CONTEXT_TRACE_ALL
; 2229 : 	MonoPrint("ContextMPR::LockVB(%d,0x%X) (m_dwStartVtx = %d,m_dwNumVtx = %d)\n",nVtxCount,p,m_dwStartVtx,m_dwNumVtx);
; 2230 : #endif
; 2231 : 
; 2232 : 	HRESULT hr;
; 2233 : 	DWORD dwSize = 0;

	mov	DWORD PTR _dwSize$[ebp], 0

; 2234 : 
; 2235 : 	ShiAssert(FALSE == F4IsBadReadPtr (m_pVB,sizeof *m_pVB));
; 2236 : 
; 2237 : 	// Check for VB overflow
; 2238 : 	if((m_dwStartVtx + m_dwNumVtx + nVtxCount) >= m_dwVBSize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262444]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+262436]
	add	ecx, DWORD PTR _nVtxCount$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [eax+262428]
	jb	SHORT $LN6@LockVB

; 2239 : 	{
; 2240 : 		// would overflow
; 2241 : 		FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 2242 : 		m_dwStartVtx = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262444], 0

; 2243 : 
; 2244 : 		// we are done with this VB, hint driver that he can use a another memory block to prevent breaking DMA activity
; 2245 : 		hr = m_pVB->Lock(DDLOCK_SURFACEMEMORYPTR|DDLOCK_WRITEONLY|DDLOCK_WAIT|DDLOCK_DISCARDCONTENTS,p,&dwSize);

	lea	edx, DWORD PTR _dwSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	push	8225					; 00002021H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262384]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262384]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR _hr$[ebp], eax
	jmp	SHORT $LN5@LockVB
$LN6@LockVB:

; 2246 : 	}
; 2247 : 
; 2248 : 	else if(m_pTLVtx)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+262460], 0
	je	SHORT $LN4@LockVB

; 2249 : 	{
; 2250 : 		// already locked, excellent
; 2251 : 		return true;

	mov	al, 1
	jmp	SHORT $LN7@LockVB

; 2252 : 	}
; 2253 : 
; 2254 : 	else

	jmp	SHORT $LN5@LockVB
$LN4@LockVB:

; 2255 : 	{
; 2256 : 		// we will only append data, dont interrupt DMA
; 2257 : 		if(m_dwStartVtx)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+262444], 0
	je	SHORT $LN2@LockVB

; 2258 : 			hr = m_pVB->Lock(DDLOCK_SURFACEMEMORYPTR|DDLOCK_WRITEONLY|DDLOCK_WAIT|DDLOCK_NOOVERWRITE,p,&dwSize);

	lea	eax, DWORD PTR _dwSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	push	4129					; 00001021H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262384]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262384]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	mov	DWORD PTR _hr$[ebp], eax

; 2259 : 		// ok this is the first lock
; 2260 : 		else

	jmp	SHORT $LN5@LockVB
$LN2@LockVB:

; 2261 : 			hr = m_pVB->Lock(DDLOCK_SURFACEMEMORYPTR|DDLOCK_WRITEONLY|DDLOCK_WAIT|DDLOCK_DISCARDCONTENTS,p,&dwSize);

	lea	edx, DWORD PTR _dwSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	push	8225					; 00002021H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262384]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262384]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR _hr$[ebp], eax
$LN5@LockVB:

; 2262 : 	}
; 2263 : 
; 2264 : 	ShiAssert(SUCCEEDED(hr));
; 2265 : 
; 2266 : #ifdef _DEBUG
; 2267 : 	if(SUCCEEDED(hr)) m_pVtxEnd = (BYTE *)*p + dwSize;
; 2268 : 	else m_pVtxEnd = NULL;
; 2269 : #endif
; 2270 : 
; 2271 : 
; 2272 : 	return SUCCEEDED(hr);

	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN9@LockVB
	mov	DWORD PTR tv142[ebp], 1
	jmp	SHORT $LN10@LockVB
$LN9@LockVB:
	mov	DWORD PTR tv142[ebp], 0
$LN10@LockVB:
	mov	al, BYTE PTR tv142[ebp]
$LN7@LockVB:

; 2273 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?LockVB@ContextMPR@@IAE_NHPAPAX@Z ENDP			; ContextMPR::LockVB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
;	COMDAT ?UpdateViewport@ContextMPR@@IAEXXZ
_TEXT	SEGMENT
_hr$ = -160						; size = 4
_this$ = -156						; size = 4
_ddsd$1 = -152						; size = 124
_vp$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
?UpdateViewport@ContextMPR@@IAEXXZ PROC			; ContextMPR::UpdateViewport, COMDAT
; _this$ = ecx

; 2101 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 160				; 000000a0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 2102 : 	#ifdef _CONTEXT_TRACE_ALL
; 2103 : 	MonoPrint("ContextMPR::UpdateViewport()\n");
; 2104 : 	#endif
; 2105 : 
; 2106 : 	if(m_bViewportLocked || !m_pD3DD)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+262502]
	test	ecx, ecx
	jne	SHORT $LN7@UpdateView
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+262380], 0
	jne	SHORT $LN8@UpdateView
$LN7@UpdateView:

; 2107 : 		return;

	jmp	$LN9@UpdateView
$LN8@UpdateView:

; 2108 : 
; 2109 : 	// get current viewport
; 2110 : 	D3DVIEWPORT7 vp;
; 2111 : 	HRESULT hr = m_pD3DD->GetViewport(&vp);

	lea	eax, DWORD PTR _vp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+60]
	call	eax
	mov	DWORD PTR _hr$[ebp], eax

; 2112 : 	ShiAssert(SUCCEEDED(hr));
; 2113 : 	if(FAILED(hr)) return;	

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN6@UpdateView
	jmp	$LN9@UpdateView
$LN6@UpdateView:

; 2114 : 
; 2115 : 	if(m_bEnableScissors)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+262424]
	test	edx, edx
	je	SHORT $LN5@UpdateView

; 2116 : 	{
; 2117 : 		// Set the viewport to the specified dimensions
; 2118 : 		vp.dwX = m_rcVP.left;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262408]
	mov	DWORD PTR _vp$[ebp], ecx

; 2119 : 		vp.dwY = m_rcVP.top;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262412]
	mov	DWORD PTR _vp$[ebp+4], eax

; 2120 : 		vp.dwWidth = m_rcVP.right - m_rcVP.left;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+262416]
	sub	eax, DWORD PTR [edx+262408]
	mov	DWORD PTR _vp$[ebp+8], eax

; 2121 : 		vp.dwHeight = m_rcVP.bottom - m_rcVP.top;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+262420]
	sub	eax, DWORD PTR [edx+262412]
	mov	DWORD PTR _vp$[ebp+12], eax

; 2122 : 
; 2123 : 		if(!vp.dwWidth || !vp.dwHeight)

	cmp	DWORD PTR _vp$[ebp+8], 0
	je	SHORT $LN3@UpdateView
	cmp	DWORD PTR _vp$[ebp+12], 0
	jne	SHORT $LN4@UpdateView
$LN3@UpdateView:

; 2124 : 			return;

	jmp	$LN9@UpdateView
$LN4@UpdateView:

; 2125 : 	}
; 2126 : 	else

	jmp	SHORT $LN2@UpdateView
$LN5@UpdateView:

; 2127 : 	{
; 2128 : 		// Set the viewport to the full target surface dimensions
; 2129 : 		DDSURFACEDESC2 ddsd;
; 2130 : 		ZeroMemory(&ddsd,sizeof(ddsd));

	push	124					; 0000007cH
	push	0
	lea	ecx, DWORD PTR _ddsd$1[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 2131 : 		ddsd.dwSize = sizeof(ddsd);

	mov	DWORD PTR _ddsd$1[ebp], 124		; 0000007cH

; 2132 : 		hr = m_pRenderTarget->GetSurfaceDesc(&ddsd);

	lea	edx, DWORD PTR _ddsd$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262364]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262364]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+88]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax

; 2133 : 		ShiAssert(SUCCEEDED(hr));
; 2134 : 		if(FAILED(hr)) return;	

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@UpdateView
	jmp	SHORT $LN9@UpdateView
$LN1@UpdateView:

; 2135 : 
; 2136 : 		vp.dwX = 0;

	mov	DWORD PTR _vp$[ebp], 0

; 2137 : 		vp.dwY = 0;

	mov	DWORD PTR _vp$[ebp+4], 0

; 2138 : 		vp.dwWidth = ddsd.dwWidth;

	mov	eax, DWORD PTR _ddsd$1[ebp+12]
	mov	DWORD PTR _vp$[ebp+8], eax

; 2139 : 		vp.dwHeight = ddsd.dwHeight;

	mov	ecx, DWORD PTR _ddsd$1[ebp+8]
	mov	DWORD PTR _vp$[ebp+12], ecx
$LN2@UpdateView:

; 2140 : 	}	
; 2141 : 
; 2142 : 	hr = m_pD3DD->SetViewport(&vp);

	lea	edx, DWORD PTR _vp$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+52]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax
$LN9@UpdateView:

; 2143 : 	ShiAssert(SUCCEEDED(hr));
; 2144 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateViewport@ContextMPR@@IAEXXZ ENDP			; ContextMPR::UpdateViewport
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
;	COMDAT ?MPRColor2D3DRGBA@ContextMPR@@IAEKH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_color$ = 8						; size = 4
?MPRColor2D3DRGBA@ContextMPR@@IAEKH@Z PROC		; ContextMPR::MPRColor2D3DRGBA, COMDAT
; _this$ = ecx

; 2081 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2082 : 	return RGBA_MAKE(RGBA_GETBLUE(color),RGBA_GETGREEN(color),RGBA_GETRED(color),RGBA_GETALPHA(color));

	mov	eax, DWORD PTR _color$[ebp]
	sar	eax, 24					; 00000018H
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _color$[ebp]
	and	ecx, 255				; 000000ffH
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, DWORD PTR _color$[ebp]
	sar	edx, 8
	and	edx, 255				; 000000ffH
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _color$[ebp]
	sar	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	or	eax, ecx

; 2083 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?MPRColor2D3DRGBA@ContextMPR@@IAEKH@Z ENDP		; ContextMPR::MPRColor2D3DRGBA
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Stats@ContextMPR@@QAE@XZ PROC			; ContextMPR::Stats::Stats
; _this$ = ecx

; 3791 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3792 : 	#ifdef _CONTEXT_ENABLE_STATS
; 3793 : 	Init();
; 3794 : 	#endif
; 3795 : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Stats@ContextMPR@@QAE@XZ ENDP			; ContextMPR::Stats::Stats
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_FogLevel$1 = -40					; size = 4
_FogStart$2 = -36					; size = 4
_offset$ = -32						; size = 4
_pIns$ = -28						; size = 4
_pStart$ = -24						; size = 4
_verttot$ = -20						; size = 4
_vertcnt$ = -16						; size = 4
_pEnd$ = -12						; size = 4
_pCur$ = -8						; size = 4
_this$ = -4						; size = 4
_pHead$ = 8						; size = 4
?RenderPolyList@ContextMPR@@IAEXAAPAVSPolygon@@@Z PROC	; ContextMPR::RenderPolyList
; _this$ = ecx

; 2473 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 2474 : 	TLVERTEX *pIns;
; 2475 : 	SPolygon *pStart,*pEnd,*pCur;
; 2476 : 	DWORD offset,vertcnt = 0,verttot = 0;

	mov	DWORD PTR _vertcnt$[ebp], 0
	mov	DWORD PTR _verttot$[ebp], 0

; 2477 : 
; 2478 : 
; 2479 : 
; 2480 : 	if((pHead->renderState >= STATE_ALPHA_SOLID) && (pHead->renderState <= STATE_ALPHA_TEXTURE_PERSPECTIVE_CLAMP))

	mov	eax, DWORD PTR _pHead$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+12], 16			; 00000010H
	jl	SHORT $LN16@RenderPoly
	mov	edx, DWORD PTR _pHead$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+12], 36			; 00000024H
	jg	SHORT $LN16@RenderPoly

; 2481 : 	{
; 2482 : 		offset = DWORD(&pHead->zBuffer)-DWORD(pHead);

	mov	ecx, DWORD PTR _pHead$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 24					; 00000018H
	mov	eax, DWORD PTR _pHead$[ebp]
	sub	edx, DWORD PTR [eax]
	mov	DWORD PTR _offset$[ebp], edx

; 2483 : 		pHead = (SPolygon *)RadixSortDescending((radix_sort_t *)pHead,offset);

	mov	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pHead$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_RadixSortDescending
	add	esp, 8
	mov	ecx, DWORD PTR _pHead$[ebp]
	mov	DWORD PTR [ecx], eax
$LN16@RenderPoly:

; 2484 : 	}
; 2485 : 
; 2486 : 	// if Linear Fog is enabled, add it
; 2487 : 	if(TheDXEngine.LinearFog()){

	mov	ecx, OFFSET ?TheDXEngine@@3VCDXEngine@@A ; TheDXEngine
	call	?LinearFog@CDXEngine@@QAE_NXZ		; CDXEngine::LinearFog
	movzx	edx, al
	test	edx, edx
	je	$LN15@RenderPoly

; 2488 : 		float	FogLevel = realWeather->LinearFogEnd();

	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?LinearFogEnd@RealWeather@@QAEMXZ	; RealWeather::LinearFogEnd
	fstp	DWORD PTR _FogLevel$1[ebp]

; 2489 : 		float	FogStart = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _FogStart$2[ebp], xmm0

; 2490 : 		m_pD3DD->SetRenderState(D3DRENDERSTATE_FOGENABLE,TRUE);

	push	1
	push	28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+80]
	call	edx

; 2491 : 		m_pD3DD->SetRenderState(D3DRENDERSTATE_RANGEFOGENABLE,TRUE);

	push	1
	push	48					; 00000030H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+80]
	call	edx

; 2492 : 		m_pD3DD->SetRenderState(D3DRENDERSTATE_FOGVERTEXMODE, D3DFOG_LINEAR);

	push	3
	push	140					; 0000008cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+80]
	call	edx

; 2493 : 		m_pD3DD->SetRenderState(D3DRENDERSTATE_FOGTABLEMODE, D3DFOG_LINEAR);

	push	3
	push	35					; 00000023H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+80]
	call	edx

; 2494 : 		m_pD3DD->SetRenderState(D3DRENDERSTATE_FOGSTART, *(DWORD *)(&FogStart));

	mov	eax, DWORD PTR _FogStart$2[ebp]
	push	eax
	push	36					; 00000024H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+80]
	call	eax

; 2495 : 		m_pD3DD->SetRenderState(D3DRENDERSTATE_FOGEND,   *(DWORD *)&FogLevel	);

	mov	ecx, DWORD PTR _FogLevel$1[ebp]
	push	ecx
	push	37					; 00000025H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+80]
	call	ecx

; 2496 : 	} else {

	jmp	SHORT $LN14@RenderPoly
$LN15@RenderPoly:

; 2497 : 		m_pD3DD->SetRenderState(D3DRENDERSTATE_FOGTABLEMODE, D3DFOG_NONE);

	push	0
	push	35					; 00000023H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+80]
	call	ecx
$LN14@RenderPoly:

; 2498 : 	}
; 2499 : 	pStart = pEnd = pCur = pHead;

	mov	edx, DWORD PTR _pHead$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _pCur$[ebp], eax
	mov	ecx, DWORD PTR _pCur$[ebp]
	mov	DWORD PTR _pEnd$[ebp], ecx
	mov	edx, DWORD PTR _pEnd$[ebp]
	mov	DWORD PTR _pStart$[ebp], edx
$LN13@RenderPoly:

; 2500 : 	while(pEnd != NULL){

	cmp	DWORD PTR _pEnd$[ebp], 0
	je	$LN12@RenderPoly

; 2501 : 		vertcnt += pEnd->numVertices;

	mov	eax, DWORD PTR _pEnd$[ebp]
	mov	ecx, DWORD PTR _vertcnt$[ebp]
	add	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _vertcnt$[ebp], ecx

; 2502 : 		VCounter+= pEnd->numVertices;

	mov	edx, DWORD PTR _pEnd$[ebp]
	mov	eax, DWORD PTR ?VCounter@@3KA		; VCounter
	add	eax, DWORD PTR [edx+8]
	mov	DWORD PTR ?VCounter@@3KA, eax		; VCounter

; 2503 : 		pEnd = pEnd->pNext;

	mov	ecx, DWORD PTR _pEnd$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _pEnd$[ebp], edx

; 2504 : 		// was 1024
; 2505 : 		if((pEnd == NULL) || (vertcnt + pEnd->numVertices > 32768)){ 

	cmp	DWORD PTR _pEnd$[ebp], 0
	je	SHORT $LN10@RenderPoly
	mov	eax, DWORD PTR _pEnd$[ebp]
	mov	ecx, DWORD PTR _vertcnt$[ebp]
	add	ecx, DWORD PTR [eax+8]
	cmp	ecx, 32768				; 00008000H
	jbe	$LN11@RenderPoly
$LN10@RenderPoly:

; 2506 : 
; 2507 : 			m_pVBB->Lock(DDLOCK_WRITEONLY|DDLOCK_SURFACEMEMORYPTR|DDLOCK_DISCARDCONTENTS,(LPVOID *)&pIns,NULL);

	push	0
	lea	edx, DWORD PTR _pIns$[ebp]
	push	edx
	push	8224					; 00002020H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262392]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262392]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+12]
	call	edx
$LN9@RenderPoly:

; 2508 : 			while(pEnd != pCur){

	mov	eax, DWORD PTR _pEnd$[ebp]
	cmp	eax, DWORD PTR _pCur$[ebp]
	je	SHORT $LN8@RenderPoly

; 2509 : 				pIns = pCur->CopyToVertexBuffer(pIns);

	mov	ecx, DWORD PTR _pIns$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pCur$[ebp]
	call	?CopyToVertexBuffer@SPolygon@@QAEPAUTLVERTEX@@PAU2@@Z ; SPolygon::CopyToVertexBuffer
	mov	DWORD PTR _pIns$[ebp], eax

; 2510 : 				pCur = pCur->pNext;

	mov	edx, DWORD PTR _pCur$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _pCur$[ebp], eax

; 2511 : 			}

	jmp	SHORT $LN9@RenderPoly
$LN8@RenderPoly:

; 2512 : 			m_pVBB->Unlock();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262392]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262392]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+16]
	call	eax

; 2513 : 	
; 2514 : 			vertcnt = 0;

	mov	DWORD PTR _vertcnt$[ebp], 0

; 2515 : 			pCur = pStart;

	mov	ecx, DWORD PTR _pStart$[ebp]
	mov	DWORD PTR _pCur$[ebp], ecx
$LN7@RenderPoly:

; 2516 : 
; 2517 : 			while(pEnd != pCur){

	mov	edx, DWORD PTR _pEnd$[ebp]
	cmp	edx, DWORD PTR _pCur$[ebp]
	je	$LN6@RenderPoly

; 2518 : 				ApplyStateBlock(pCur->renderState);

	mov	eax, DWORD PTR _pCur$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ApplyStateBlock@ContextMPR@@QAEXH@Z	; ContextMPR::ApplyStateBlock

; 2519 : 				
; 2520 : 				if(
; 2521 : 					(pCur->renderState > STATE_GOURAUD && pCur->renderState < STATE_ALPHA_SOLID) 
; 2522 : 					|| pCur->renderState > STATE_ALPHA_GOURAUD
; 2523 : 				){

	mov	edx, DWORD PTR _pCur$[ebp]
	cmp	DWORD PTR [edx+12], 2
	jle	SHORT $LN3@RenderPoly
	mov	eax, DWORD PTR _pCur$[ebp]
	cmp	DWORD PTR [eax+12], 16			; 00000010H
	jl	SHORT $LN4@RenderPoly
$LN3@RenderPoly:
	mov	ecx, DWORD PTR _pCur$[ebp]
	cmp	DWORD PTR [ecx+12], 18			; 00000012H
	jle	SHORT $LN5@RenderPoly
$LN4@RenderPoly:

; 2524 : 					SetTexture1(pCur->textureID0);

	mov	edx, DWORD PTR _pCur$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTexture1@ContextMPR@@QAEXH@Z	; ContextMPR::SetTexture1

; 2525 : 				}
; 2526 : 				else {

	jmp	SHORT $LN2@RenderPoly
$LN5@RenderPoly:

; 2527 : 					SetTexture1(-1);

	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTexture1@ContextMPR@@QAEXH@Z	; ContextMPR::SetTexture1
$LN2@RenderPoly:

; 2528 : 				}
; 2529 : 
; 2530 : 				if(pCur->renderState >=	STATE_MULTITEXTURE){

	mov	ecx, DWORD PTR _pCur$[ebp]
	cmp	DWORD PTR [ecx+12], 37			; 00000025H
	jl	SHORT $LN1@RenderPoly

; 2531 : 					SetTexture2(pCur->textureID1);

	mov	edx, DWORD PTR _pCur$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTexture2@ContextMPR@@QAEXH@Z	; ContextMPR::SetTexture2
$LN1@RenderPoly:

; 2532 : 				}
; 2533 : 
; 2534 : 
; 2535 : 				verttot = pCur->numVertices;

	mov	ecx, DWORD PTR _pCur$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _verttot$[ebp], edx

; 2536 : 				m_pD3DD->DrawPrimitiveVB(D3DPT_TRIANGLEFAN,m_pVBB,vertcnt,verttot,0);

	push	0
	mov	eax, DWORD PTR _verttot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vertcnt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262392]
	push	eax
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+124]
	call	eax

; 2537 : 		
; 2538 : 				vertcnt += verttot;

	mov	ecx, DWORD PTR _vertcnt$[ebp]
	add	ecx, DWORD PTR _verttot$[ebp]
	mov	DWORD PTR _vertcnt$[ebp], ecx

; 2539 : 				pCur = pCur->pNext;

	mov	edx, DWORD PTR _pCur$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _pCur$[ebp], eax

; 2540 : 			}

	jmp	$LN7@RenderPoly
$LN6@RenderPoly:

; 2541 : 
; 2542 : 			pCur = pStart = pEnd;

	mov	ecx, DWORD PTR _pEnd$[ebp]
	mov	DWORD PTR _pStart$[ebp], ecx
	mov	edx, DWORD PTR _pStart$[ebp]
	mov	DWORD PTR _pCur$[ebp], edx

; 2543 : 			vertcnt = 0;

	mov	DWORD PTR _vertcnt$[ebp], 0
$LN11@RenderPoly:

; 2544 : 		}
; 2545 : 	}

	jmp	$LN13@RenderPoly
$LN12@RenderPoly:

; 2546 : 	// Disable Fog
; 2547 : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_FOGTABLEMODE, D3DFOG_NONE);

	push	0
	push	35					; 00000023H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+80]
	call	edx

; 2548 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?RenderPolyList@ContextMPR@@IAEXAAPAVSPolygon@@@Z ENDP	; ContextMPR::RenderPolyList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
;	COMDAT ?AddPolygon@ContextMPR@@IAEXAAPAVSPolygon@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_polyList$ = 8						; size = 4
_curPoly$ = 12						; size = 4
?AddPolygon@ContextMPR@@IAEXAAPAVSPolygon@@0@Z PROC	; ContextMPR::AddPolygon, COMDAT
; _this$ = ecx

; 2466 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2467 : 	curPoly->pNext = polyList;

	mov	eax, DWORD PTR _curPoly$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _polyList$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 2468 : 	polyList = curPoly;

	mov	ecx, DWORD PTR _polyList$[ebp]
	mov	edx, DWORD PTR _curPoly$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 2469 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?AddPolygon@ContextMPR@@IAEXAAPAVSPolygon@@0@Z ENDP	; ContextMPR::AddPolygon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_curPoly$ = 8						; size = 4
_numVertices$ = 12					; size = 4
?AllocatePolygon@ContextMPR@@IAEXAAPAVSPolygon@@K@Z PROC ; ContextMPR::AllocatePolygon
; _this$ = ecx

; 2459 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2460 : 	curPoly = (SPolygon *)Alloc(sizeof(SPolygon)+numVertices*sizeof(TLVERTEX));

	mov	eax, DWORD PTR _numVertices$[ebp]
	imul	eax, 40					; 00000028H
	add	eax, 28					; 0000001cH
	push	eax
	call	_Alloc
	add	esp, 4
	mov	ecx, DWORD PTR _curPoly$[ebp]
	mov	DWORD PTR [ecx], eax

; 2461 : 	curPoly->numVertices = numVertices;

	mov	edx, DWORD PTR _curPoly$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _numVertices$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 2462 : 	curPoly->pVertexList = (TLVERTEX *)(DWORD(curPoly)+sizeof(SPolygon));

	mov	edx, DWORD PTR _curPoly$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _curPoly$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+4], eax

; 2463 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?AllocatePolygon@ContextMPR@@IAEXAAPAVSPolygon@@K@Z ENDP ; ContextMPR::AllocatePolygon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
;	COMDAT ?SetPrimitiveType@ContextMPR@@IAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nType$ = 8						; size = 4
?SetPrimitiveType@ContextMPR@@IAEXH@Z PROC		; ContextMPR::SetPrimitiveType, COMDAT
; _this$ = ecx

; 2404 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2405 : #ifdef _CONTEXT_TRACE_ALL
; 2406 : 	MonoPrint("ContextMPR::SetPrimitiveType(%d)\n",nType);
; 2407 : #endif
; 2408 : 
; 2409 : 	if(m_nCurPrimType != nType)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+262452]
	cmp	ecx, DWORD PTR _nType$[ebp]
	je	SHORT $LN2@SetPrimiti

; 2410 : 	{
; 2411 : 		// Flush on changed primitive type
; 2412 : 		FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 2413 : 		m_nCurPrimType = nType;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR _nType$[ebp]
	mov	WORD PTR [edx+262452], ax
$LN2@SetPrimiti:

; 2414 : 	}
; 2415 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetPrimitiveType@ContextMPR@@IAEXH@Z ENDP		; ContextMPR::SetPrimitiveType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$1 = -4						; size = 4
_flag$ = 8						; size = 4
?CleanupMPRState@ContextMPR@@IAEXH@Z PROC		; ContextMPR::CleanupMPRState
; _this$ = ecx

; 1829 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1830 : 	if(!StateSetupCounter)

	cmp	DWORD PTR ?StateSetupCounter@ContextMPR@@2HA, 0 ; ContextMPR::StateSetupCounter
	jne	SHORT $LN6@CleanupMPR

; 1831 : 	{
; 1832 : 		ShiWarning("MPR not initialized!");
; 1833 : 		return;

	jmp	SHORT $LN7@CleanupMPR
$LN6@CleanupMPR:

; 1834 : 	}
; 1835 : 
; 1836 : 	if(flag & CHECK_PREVIOUS_STATE)

	mov	eax, DWORD PTR _flag$[ebp]
	and	eax, 1
	je	SHORT $LN5@CleanupMPR

; 1837 : 	{
; 1838 : 		StateSetupCounter--;

	mov	ecx, DWORD PTR ?StateSetupCounter@ContextMPR@@2HA ; ContextMPR::StateSetupCounter
	sub	ecx, 1
	mov	DWORD PTR ?StateSetupCounter@ContextMPR@@2HA, ecx ; ContextMPR::StateSetupCounter

; 1839 : 		if(StateSetupCounter > 0)

	cmp	DWORD PTR ?StateSetupCounter@ContextMPR@@2HA, 0 ; ContextMPR::StateSetupCounter
	jle	SHORT $LN5@CleanupMPR

; 1840 : 			return;

	jmp	SHORT $LN7@CleanupMPR
$LN5@CleanupMPR:

; 1841 : 	}
; 1842 : 
; 1843 : 	MonoPrint("ContextMPR - Clearing state table\n");

	push	OFFSET ??_C@_0CD@PPAKMLDH@ContextMPR?5?9?5Clearing?5state?5tabl@
	call	_MonoPrint
	add	esp, 4

; 1844 : 	for(int i=STATE_SOLID; i<MAXIMUM_MPR_STATE; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@CleanupMPR
$LN2@CleanupMPR:
	mov	edx, DWORD PTR _i$1[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
$LN3@CleanupMPR:
	cmp	DWORD PTR _i$1[ebp], 38			; 00000026H
	jge	SHORT $LN7@CleanupMPR

; 1845 : 		ClearStateTable(i);

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearStateTable@ContextMPR@@IAEXH@Z	; ContextMPR::ClearStateTable
	jmp	SHORT $LN2@CleanupMPR
$LN7@CleanupMPR:

; 1846 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CleanupMPRState@ContextMPR@@IAEXH@Z ENDP		; ContextMPR::CleanupMPRState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_i$ = -12						; size = 4
tv133 = -8						; size = 4
_this$ = -4						; size = 4
_state$ = 8						; size = 4
_flag$ = 12						; size = 4
?SetCurrentState@ContextMPR@@IAEXHH@Z PROC		; ContextMPR::SetCurrentState
; _this$ = ecx

; 927  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 928  : 	UInt32	i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 929  : 
; 930  : 	#ifdef _CONTEXT_TRACE_ALL
; 931  : 	MonoPrint("ContextMPR::SetCurrentState (%d,0x%X)\n",state,flag);
; 932  : 	#endif
; 933  : 
; 934  : 	ShiAssert(FALSE == F4IsBadReadPtr(m_pD3DD,sizeof *m_pD3DD));
; 935  : 
; 936  : 	//Disable secondary stage
; 937  : 	m_pD3DD->SetTextureStageState(1,D3DTSS_ALPHAOP,D3DTOP_DISABLE);

	push	1
	push	4
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+148]
	call	edx

; 938  : 	m_pD3DD->SetTextureStageState(1,D3DTSS_COLOROP,D3DTOP_DISABLE);

	push	1
	push	1
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+148]
	call	edx

; 939  : 
; 940  : 	m_pD3DD->SetTextureStageState(0,D3DTSS_ADDRESS,D3DTADDRESS_WRAP);

	push	1
	push	12					; 0000000cH
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+148]
	call	edx

; 941  : 	m_pD3DD->SetTextureStageState(0,D3DTSS_COLORARG1,D3DTA_TEXTURE);

	push	2
	push	2
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+148]
	call	edx

; 942  : 
; 943  : 	switch(state)

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR tv133[ebp], eax
	cmp	DWORD PTR tv133[ebp], 38		; 00000026H
	ja	$LN78@SetCurrent
	mov	ecx, DWORD PTR tv133[ebp]
	jmp	DWORD PTR $LN80@SetCurrent[ecx*4]
$LN75@SetCurrent:

; 944  : 	{
; 945  : 		case STATE_SOLID:
; 946  : 			SetState(MPR_STA_DISABLES,
; 947  : 				MPR_SE_FILTERING |
; 948  : 				MPR_SE_ALPHA |
; 949  : 				MPR_SE_TEXTURING | 
; 950  : 				MPR_SE_MODULATION | 
; 951  : 				MPR_SE_SHADING);

	push	327					; 00000147H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 952  : 
; 953  : 			break;

	jmp	$LN78@SetCurrent
$LN74@SetCurrent:

; 954  : 
; 955  : 		case STATE_LIT:
; 956  : 			SetState(MPR_STA_DISABLES,
; 957  : 				MPR_SE_FILTERING |
; 958  : 				MPR_SE_ALPHA |
; 959  : 				MPR_SE_TEXTURING | 
; 960  : 				MPR_SE_SHADING);

	push	323					; 00000143H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 961  : 
; 962  : 			SetState(MPR_STA_ENABLES,
; 963  : 				MPR_SE_MODULATION);

	push	4
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 964  : 
; 965  : 			break;

	jmp	$LN78@SetCurrent
$LN73@SetCurrent:

; 966  : 
; 967  : 		case STATE_GOURAUD:
; 968  : 			SetState(MPR_STA_DISABLES, 
; 969  : 				MPR_SE_FILTERING |
; 970  : 				MPR_SE_ALPHA |
; 971  : 				MPR_SE_TEXTURING |
; 972  : 				MPR_SE_MODULATION);

	push	326					; 00000146H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 973  : 
; 974  : 			SetState(MPR_STA_ENABLES,
; 975  : 				MPR_SE_SHADING);

	push	1
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 976  : 
; 977  : 			break;

	jmp	$LN78@SetCurrent
$LN72@SetCurrent:

; 978  : 
; 979  : 		case STATE_TEXTURE:
; 980  : 			SetState(MPR_STA_DISABLES, 
; 981  : 				MPR_SE_FILTERING |
; 982  : 				MPR_SE_ALPHA |
; 983  : 				MPR_SE_MODULATION | 
; 984  : 				MPR_SE_SHADING);

	push	325					; 00000145H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 985  : 
; 986  : 			SetState(MPR_STA_ENABLES,
; 987  : 				MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE | 
; 988  : 				MPR_SE_TEXTURING);

	push	1026					; 00000402H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 989  : 
; 990  : 			SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_NEAREST);

	push	10					; 0000000aH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 991  : 			if(PlayerOptions.FilteringOn())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?FilteringOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::FilteringOn
	test	eax, eax
	je	SHORT $LN71@SetCurrent

; 992  : 			{
; 993  : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_BILINEAR_NOCLAMP);

	push	14					; 0000000eH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 994  : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_LINEAR);

	push	11					; 0000000bH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
$LN71@SetCurrent:

; 995  : 			}
; 996  : 
; 997  : 			break;

	jmp	$LN78@SetCurrent
$LN70@SetCurrent:

; 998  : 
; 999  : 		case STATE_TEXTURE_LIT:
; 1000 : 			SetState(MPR_STA_DISABLES, 
; 1001 : 				MPR_SE_FILTERING |
; 1002 : 				MPR_SE_ALPHA |
; 1003 : 				MPR_SE_SHADING);

	push	321					; 00000141H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1004 : 
; 1005 : 			SetState(MPR_STA_ENABLES,
; 1006 : 				MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE |
; 1007 : 				MPR_SE_TEXTURING | 
; 1008 : 				MPR_SE_MODULATION);

	push	1030					; 00000406H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1009 : 
; 1010 : 			SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_NEAREST);

	push	10					; 0000000aH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1011 : 			if(PlayerOptions.FilteringOn())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?FilteringOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::FilteringOn
	test	eax, eax
	je	SHORT $LN69@SetCurrent

; 1012 : 			{
; 1013 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_BILINEAR_NOCLAMP);

	push	14					; 0000000eH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1014 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_LINEAR);

	push	11					; 0000000bH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
$LN69@SetCurrent:

; 1015 : 			}
; 1016 : 
; 1017 : 			break;

	jmp	$LN78@SetCurrent
$LN68@SetCurrent:

; 1018 : 
; 1019 : 		case STATE_TEXTURE_LIT_PERSPECTIVE:
; 1020 : 			SetState(MPR_STA_DISABLES, 
; 1021 : 				MPR_SE_FILTERING |
; 1022 : 				MPR_SE_ALPHA |
; 1023 : 				MPR_SE_SHADING |
; 1024 : 				MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE);

	push	1345					; 00000541H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1025 : 
; 1026 : 			SetState(MPR_STA_ENABLES,
; 1027 : 				MPR_SE_TEXTURING |
; 1028 : 				MPR_SE_MODULATION);

	push	6
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1029 : 
; 1030 : 			SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_NEAREST);

	push	10					; 0000000aH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1031 : 			if(PlayerOptions.FilteringOn())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?FilteringOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::FilteringOn
	test	eax, eax
	je	SHORT $LN67@SetCurrent

; 1032 : 			{
; 1033 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_BILINEAR_NOCLAMP);

	push	14					; 0000000eH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1034 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_LINEAR);

	push	11					; 0000000bH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
$LN67@SetCurrent:

; 1035 : 			}
; 1036 : 
; 1037 : 			break;

	jmp	$LN78@SetCurrent
$LN66@SetCurrent:

; 1038 : 
; 1039 :  		case STATE_TEXTURE_SMOOTH:
; 1040 :  			SetState(MPR_STA_DISABLES, 
; 1041 :    				MPR_SE_FILTERING |
; 1042 :  				MPR_SE_MODULATION | 
; 1043 :  				MPR_SE_ALPHA);

	push	324					; 00000144H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1044 :  
; 1045 :  			SetState(MPR_STA_ENABLES,
; 1046 :  				MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE | 
; 1047 :   				MPR_SE_TEXTURING | 
; 1048 :  				MPR_SE_SHADING);

	push	1027					; 00000403H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1049 :  
; 1050 :  			SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_NEAREST);

	push	10					; 0000000aH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1051 :  			if(PlayerOptions.FilteringOn())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?FilteringOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::FilteringOn
	test	eax, eax
	je	SHORT $LN65@SetCurrent

; 1052 :  			{
; 1053 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_BILINEAR_NOCLAMP);

	push	14					; 0000000eH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1054 :  				SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_LINEAR);

	push	11					; 0000000bH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
$LN65@SetCurrent:

; 1055 :  			}
; 1056 :  
; 1057 :  			break;

	jmp	$LN78@SetCurrent
$LN64@SetCurrent:

; 1058 : 
; 1059 : 		case STATE_TEXTURE_GOURAUD:
; 1060 : 			SetState(MPR_STA_DISABLES, 
; 1061 : 				MPR_SE_FILTERING |
; 1062 : 				MPR_SE_ALPHA);

	push	320					; 00000140H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1063 : 
; 1064 : 			SetState(MPR_STA_ENABLES,
; 1065 : 				MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE |
; 1066 : 				MPR_SE_TEXTURING | 
; 1067 : 				MPR_SE_SHADING | 
; 1068 : 				MPR_SE_MODULATION);

	push	1031					; 00000407H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1069 : 
; 1070 : 			SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_NEAREST);

	push	10					; 0000000aH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1071 : 			if(PlayerOptions.FilteringOn())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?FilteringOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::FilteringOn
	test	eax, eax
	je	SHORT $LN63@SetCurrent

; 1072 : 			{
; 1073 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_BILINEAR_NOCLAMP);

	push	14					; 0000000eH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1074 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_LINEAR);

	push	11					; 0000000bH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
$LN63@SetCurrent:

; 1075 : 			}
; 1076 : 
; 1077 : 			break;

	jmp	$LN78@SetCurrent
$LN62@SetCurrent:

; 1078 : 
; 1079 : 		case STATE_TEXTURE_PERSPECTIVE:
; 1080 : 			SetState(MPR_STA_DISABLES, 
; 1081 : 				MPR_SE_FILTERING |
; 1082 : 				MPR_SE_ALPHA |
; 1083 : 				MPR_SE_MODULATION | 
; 1084 : 				MPR_SE_SHADING |
; 1085 : 				MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE);

	push	1349					; 00000545H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1086 : 
; 1087 : 			SetState(MPR_STA_ENABLES,
; 1088 : 				MPR_SE_TEXTURING);

	push	2
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1089 : 
; 1090 : 			SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_NEAREST);

	push	10					; 0000000aH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1091 : 			if(PlayerOptions.FilteringOn())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?FilteringOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::FilteringOn
	test	eax, eax
	je	SHORT $LN61@SetCurrent

; 1092 : 			{
; 1093 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_BILINEAR_NOCLAMP);

	push	14					; 0000000eH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1094 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_LINEAR);

	push	11					; 0000000bH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
$LN61@SetCurrent:

; 1095 : 			}
; 1096 : 
; 1097 : 			break;

	jmp	$LN78@SetCurrent
$LN60@SetCurrent:

; 1098 : 
; 1099 :  		case STATE_TEXTURE_SMOOTH_PERSPECTIVE:
; 1100 :  			SetState(MPR_STA_DISABLES, 
; 1101 :    				MPR_SE_FILTERING |
; 1102 :  				MPR_SE_MODULATION | 
; 1103 : 				MPR_SE_ALPHA |
; 1104 :  				MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE);

	push	1348					; 00000544H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1105 :  
; 1106 :  			SetState(MPR_STA_ENABLES,
; 1107 :   				MPR_SE_TEXTURING | 
; 1108 :  				MPR_SE_SHADING);

	push	3
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1109 :  
; 1110 :  			SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_NEAREST);

	push	10					; 0000000aH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1111 :  			if(PlayerOptions.FilteringOn())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?FilteringOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::FilteringOn
	test	eax, eax
	je	SHORT $LN59@SetCurrent

; 1112 :  			{
; 1113 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_BILINEAR_NOCLAMP);

	push	14					; 0000000eH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1114 :  				SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_LINEAR);

	push	11					; 0000000bH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
$LN59@SetCurrent:

; 1115 :  			}
; 1116 :  
; 1117 :  			break;

	jmp	$LN78@SetCurrent
$LN58@SetCurrent:

; 1118 : 
; 1119 : 		case STATE_TEXTURE_GOURAUD_PERSPECTIVE:
; 1120 : 			SetState(MPR_STA_DISABLES, 
; 1121 : 				MPR_SE_FILTERING |
; 1122 : 				MPR_SE_ALPHA |
; 1123 : 				MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE);

	push	1344					; 00000540H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1124 : 
; 1125 : 			SetState(MPR_STA_ENABLES,
; 1126 : 				MPR_SE_TEXTURING | 
; 1127 : 				MPR_SE_SHADING | 
; 1128 : 				MPR_SE_MODULATION);

	push	7
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1129 : 
; 1130 : 			SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_NEAREST);

	push	10					; 0000000aH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1131 : 			if(PlayerOptions.FilteringOn())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?FilteringOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::FilteringOn
	test	eax, eax
	je	SHORT $LN57@SetCurrent

; 1132 : 			{
; 1133 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_BILINEAR_NOCLAMP);

	push	14					; 0000000eH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1134 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_LINEAR);

	push	11					; 0000000bH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
$LN57@SetCurrent:

; 1135 : 			}
; 1136 : 
; 1137 : 			break;

	jmp	$LN78@SetCurrent
$LN56@SetCurrent:

; 1138 : 
; 1139 : 		case STATE_ALPHA_SOLID:
; 1140 : 			SetState(MPR_STA_DISABLES, 
; 1141 : 				MPR_SE_FILTERING |
; 1142 : 				MPR_SE_TEXTURING | 
; 1143 : 				MPR_SE_MODULATION | 
; 1144 : 				MPR_SE_SHADING);

	push	263					; 00000107H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1145 : 
; 1146 : 			SetState(MPR_STA_ENABLES,
; 1147 : 				MPR_SE_ALPHA);

	push	64					; 00000040H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1148 : 
; 1149 : 			break;

	jmp	$LN78@SetCurrent
$LN55@SetCurrent:

; 1150 : 
; 1151 : 		case STATE_ALPHA_LIT:
; 1152 : 			SetState(MPR_STA_DISABLES, 
; 1153 : 				MPR_SE_FILTERING |
; 1154 : 				MPR_SE_TEXTURING | 
; 1155 : 				MPR_SE_SHADING);

	push	259					; 00000103H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1156 : 
; 1157 : 			SetState(MPR_STA_ENABLES,
; 1158 : 				MPR_SE_MODULATION | 
; 1159 : 				MPR_SE_ALPHA);

	push	68					; 00000044H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1160 : 
; 1161 : 			break;

	jmp	$LN78@SetCurrent
$LN54@SetCurrent:

; 1162 : 
; 1163 : 		case STATE_ALPHA_GOURAUD:
; 1164 : 			SetState(MPR_STA_DISABLES, 
; 1165 : 				MPR_SE_FILTERING |
; 1166 : 				MPR_SE_TEXTURING);

	push	258					; 00000102H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1167 : 
; 1168 : 			SetState(MPR_STA_ENABLES,
; 1169 : 				MPR_SE_SHADING |
; 1170 : 				MPR_SE_MODULATION |
; 1171 : 				MPR_SE_ALPHA);

	push	69					; 00000045H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1172 : 
; 1173 : 			break;

	jmp	$LN78@SetCurrent
$LN53@SetCurrent:

; 1174 : 
; 1175 : 		// ASSO: new color blending state for 3D pit HUD
; 1176 : 		case STATE_CHROMA_TEXTURE_GOURAUD2:
; 1177 : 			SetState(MPR_STA_DISABLES, 
; 1178 : //				MPR_SE_LIGHTING |
; 1179 : 				MPR_SE_FILTERING);

	push	256					; 00000100H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1180 : 
; 1181 : 			SetState(MPR_STA_ENABLES,
; 1182 : 				MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE | 
; 1183 : 				MPR_SE_TEXTURING | 
; 1184 : 				MPR_SE_SHADING | 
; 1185 : 				MPR_SE_MODULATION |
; 1186 : 				MPR_SE_CHROMA2);

	push	3079					; 00000c07H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1187 : 
; 1188 : 			SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_NEAREST);

	push	10					; 0000000aH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1189 : 			SetState(MPR_STA_TEX_FILTER,MPR_TX_BILINEAR_NOCLAMP);

	push	14					; 0000000eH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1190 : 			SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_LINEAR);

	push	11					; 0000000bH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1191 : 
; 1192 : 			break;

	jmp	$LN78@SetCurrent
$LN52@SetCurrent:

; 1193 : 
; 1194 : 		case STATE_CHROMA_TEXTURE:
; 1195 : 			SetState(MPR_STA_DISABLES, 
; 1196 : 				MPR_SE_FILTERING |
; 1197 : 				MPR_SE_MODULATION | 
; 1198 : 				MPR_SE_SHADING);

	push	261					; 00000105H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1199 : 
; 1200 : 			SetState(MPR_STA_ENABLES,
; 1201 : 				MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE |
; 1202 : 				MPR_SE_TEXTURING |
; 1203 : 				MPR_SE_CHROMA);

	push	1154					; 00000482H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1204 : 
; 1205 : 			SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_NEAREST);

	push	10					; 0000000aH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1206 : 			if(PlayerOptions.FilteringOn() && DisplayOptions.m_texMode == DisplayOptionsClass::TEX_MODE_DDS)

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?FilteringOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::FilteringOn
	test	eax, eax
	je	SHORT $LN51@SetCurrent
	cmp	DWORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+24, 70161 ; 00011211H
	jne	SHORT $LN51@SetCurrent

; 1207 : 			{
; 1208 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_BILINEAR_NOCLAMP);

	push	14					; 0000000eH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1209 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_LINEAR);

	push	11					; 0000000bH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
$LN51@SetCurrent:

; 1210 : 			}
; 1211 : 
; 1212 : 			break;

	jmp	$LN78@SetCurrent
$LN50@SetCurrent:

; 1213 : 
; 1214 : 		case STATE_ALPHA_TEXTURE:
; 1215 : 			SetState(MPR_STA_DISABLES, 
; 1216 : 				MPR_SE_FILTERING |
; 1217 : 				MPR_SE_MODULATION | 
; 1218 : 				MPR_SE_SHADING);

	push	261					; 00000105H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1219 : 
; 1220 : 			SetState(MPR_STA_ENABLES,
; 1221 : 				MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE |
; 1222 : 				MPR_SE_TEXTURING |
; 1223 : 				MPR_SE_ALPHA);

	push	1090					; 00000442H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1224 : 
; 1225 : 			SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_NEAREST);

	push	10					; 0000000aH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1226 : 			if(PlayerOptions.FilteringOn())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?FilteringOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::FilteringOn
	test	eax, eax
	je	SHORT $LN49@SetCurrent

; 1227 : 			{
; 1228 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_BILINEAR_NOCLAMP);

	push	14					; 0000000eH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1229 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_LINEAR);

	push	11					; 0000000bH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
$LN49@SetCurrent:

; 1230 : 			}
; 1231 : 
; 1232 : 			break;

	jmp	$LN78@SetCurrent
$LN48@SetCurrent:

; 1233 : 
; 1234 : 		case STATE_CHROMA_TEXTURE_LIT:
; 1235 : 			SetState(MPR_STA_DISABLES, 
; 1236 : 				MPR_SE_FILTERING |
; 1237 : 				MPR_SE_SHADING);

	push	257					; 00000101H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1238 : 
; 1239 : 			SetState(MPR_STA_ENABLES,
; 1240 : 				MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE |
; 1241 : 				MPR_SE_TEXTURING | 
; 1242 : 				MPR_SE_MODULATION |
; 1243 : 				MPR_SE_CHROMA);

	push	1158					; 00000486H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1244 : 
; 1245 : 			SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_NEAREST);

	push	10					; 0000000aH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1246 : 			if(PlayerOptions.FilteringOn() && DisplayOptions.m_texMode == DisplayOptionsClass::TEX_MODE_DDS)

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?FilteringOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::FilteringOn
	test	eax, eax
	je	SHORT $LN47@SetCurrent
	cmp	DWORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+24, 70161 ; 00011211H
	jne	SHORT $LN47@SetCurrent

; 1247 : 			{
; 1248 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_BILINEAR_NOCLAMP);

	push	14					; 0000000eH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1249 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_LINEAR);

	push	11					; 0000000bH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
$LN47@SetCurrent:

; 1250 : 			}
; 1251 : 
; 1252 : 			break;

	jmp	$LN78@SetCurrent
$LN46@SetCurrent:

; 1253 : 
; 1254 : 		case STATE_ALPHA_TEXTURE_LIT:
; 1255 : 			SetState(MPR_STA_DISABLES, 
; 1256 : 				MPR_SE_FILTERING |
; 1257 : 				MPR_SE_SHADING);

	push	257					; 00000101H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1258 : 
; 1259 : 			SetState(MPR_STA_ENABLES,
; 1260 : 				MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE |
; 1261 : 				MPR_SE_TEXTURING | 
; 1262 : 				MPR_SE_MODULATION |
; 1263 : 				MPR_SE_ALPHA);

	push	1094					; 00000446H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1264 : 
; 1265 : 			SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_NEAREST);

	push	10					; 0000000aH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1266 : 			if(PlayerOptions.FilteringOn())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?FilteringOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::FilteringOn
	test	eax, eax
	je	SHORT $LN45@SetCurrent

; 1267 : 			{
; 1268 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_BILINEAR_NOCLAMP);

	push	14					; 0000000eH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1269 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_LINEAR);

	push	11					; 0000000bH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
$LN45@SetCurrent:

; 1270 : 			}
; 1271 : 
; 1272 : 			break;

	jmp	$LN78@SetCurrent
$LN44@SetCurrent:

; 1273 : 
; 1274 : 		case STATE_CHROMA_TEXTURE_LIT_PERSPECTIVE:
; 1275 : 			SetState(MPR_STA_DISABLES, 
; 1276 : 				MPR_SE_FILTERING |
; 1277 : 				MPR_SE_SHADING |
; 1278 : 				MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE);

	push	1281					; 00000501H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1279 : 
; 1280 : 			SetState(MPR_STA_ENABLES,
; 1281 : 				MPR_SE_TEXTURING | 
; 1282 : 				MPR_SE_MODULATION |
; 1283 : 				MPR_SE_CHROMA);

	push	134					; 00000086H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1284 : 
; 1285 : 			SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_NEAREST);

	push	10					; 0000000aH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1286 : 			if(PlayerOptions.FilteringOn() && DisplayOptions.m_texMode == DisplayOptionsClass::TEX_MODE_DDS)

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?FilteringOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::FilteringOn
	test	eax, eax
	je	SHORT $LN43@SetCurrent
	cmp	DWORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+24, 70161 ; 00011211H
	jne	SHORT $LN43@SetCurrent

; 1287 : 			{
; 1288 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_BILINEAR_NOCLAMP);

	push	14					; 0000000eH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1289 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_LINEAR);

	push	11					; 0000000bH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
$LN43@SetCurrent:

; 1290 : 			}
; 1291 : 
; 1292 : 			break;

	jmp	$LN78@SetCurrent
$LN42@SetCurrent:

; 1293 : 
; 1294 : 		case STATE_ALPHA_TEXTURE_LIT_PERSPECTIVE:
; 1295 : 			SetState(MPR_STA_DISABLES, 
; 1296 : 				MPR_SE_FILTERING |
; 1297 : 				MPR_SE_SHADING |
; 1298 : 				MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE);

	push	1281					; 00000501H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1299 : 
; 1300 : 			SetState(MPR_STA_ENABLES,
; 1301 : 				MPR_SE_TEXTURING | 
; 1302 : 				MPR_SE_MODULATION |
; 1303 : 				MPR_SE_ALPHA);

	push	70					; 00000046H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1304 : 
; 1305 : 			SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_NEAREST);

	push	10					; 0000000aH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1306 : 			if(PlayerOptions.FilteringOn())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?FilteringOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::FilteringOn
	test	eax, eax
	je	SHORT $LN41@SetCurrent

; 1307 : 			{
; 1308 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_BILINEAR_NOCLAMP);

	push	14					; 0000000eH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1309 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_LINEAR);

	push	11					; 0000000bH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
$LN41@SetCurrent:

; 1310 : 			}
; 1311 : 
; 1312 : 			break;

	jmp	$LN78@SetCurrent
$LN40@SetCurrent:

; 1313 : 
; 1314 : 		case STATE_ALPHA_TEXTURE_SMOOTH:
; 1315 : 			SetState(MPR_STA_DISABLES, 
; 1316 : 				MPR_SE_FILTERING |
; 1317 : 				MPR_SE_MODULATION);

	push	260					; 00000104H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1318 : 
; 1319 : 			SetState(MPR_STA_ENABLES,
; 1320 : 				MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE |
; 1321 : 				MPR_SE_TEXTURING | 
; 1322 : 				MPR_SE_SHADING |
; 1323 : 				MPR_SE_ALPHA);

	push	1091					; 00000443H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1324 : 
; 1325 : 			SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_NEAREST);

	push	10					; 0000000aH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1326 : 			if(PlayerOptions.FilteringOn())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?FilteringOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::FilteringOn
	test	eax, eax
	je	SHORT $LN39@SetCurrent

; 1327 : 			{
; 1328 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_BILINEAR_NOCLAMP);

	push	14					; 0000000eH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1329 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_LINEAR);

	push	11					; 0000000bH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
$LN39@SetCurrent:

; 1330 : 			}
; 1331 : 
; 1332 : 			break;

	jmp	$LN78@SetCurrent
$LN38@SetCurrent:

; 1333 : 
; 1334 : 		case STATE_ALPHA_TEXTURE_SMOOTH_PERSPECTIVE:
; 1335 : 			SetState(MPR_STA_DISABLES, 
; 1336 : 				MPR_SE_FILTERING |
; 1337 : 				MPR_SE_MODULATION | 
; 1338 : 				MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE);

	push	1284					; 00000504H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1339 : 
; 1340 : 			SetState(MPR_STA_ENABLES,
; 1341 : 				MPR_SE_TEXTURING | 
; 1342 : 				MPR_SE_SHADING |
; 1343 : 				MPR_SE_ALPHA);

	push	67					; 00000043H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1344 : 
; 1345 : 			SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_NEAREST);

	push	10					; 0000000aH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1346 : 			if(PlayerOptions.FilteringOn())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?FilteringOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::FilteringOn
	test	eax, eax
	je	SHORT $LN37@SetCurrent

; 1347 : 			{
; 1348 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_BILINEAR_NOCLAMP);

	push	14					; 0000000eH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1349 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_LINEAR);

	push	11					; 0000000bH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
$LN37@SetCurrent:

; 1350 : 			}
; 1351 : 
; 1352 : 			break;

	jmp	$LN78@SetCurrent
$LN36@SetCurrent:

; 1353 : 
; 1354 : 		case STATE_CHROMA_TEXTURE_GOURAUD:
; 1355 : 			SetState(MPR_STA_DISABLES, 
; 1356 : 				MPR_SE_FILTERING);

	push	256					; 00000100H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1357 : 
; 1358 : 			SetState(MPR_STA_ENABLES,
; 1359 : 				MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE | 
; 1360 : 				MPR_SE_TEXTURING | 
; 1361 : 				MPR_SE_SHADING | 
; 1362 : 				MPR_SE_MODULATION |
; 1363 : 				MPR_SE_CHROMA);

	push	1159					; 00000487H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1364 : 
; 1365 : 			SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_NEAREST);

	push	10					; 0000000aH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1366 : 			if(PlayerOptions.FilteringOn() && DisplayOptions.m_texMode == DisplayOptionsClass::TEX_MODE_DDS)

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?FilteringOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::FilteringOn
	test	eax, eax
	je	SHORT $LN35@SetCurrent
	cmp	DWORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+24, 70161 ; 00011211H
	jne	SHORT $LN35@SetCurrent

; 1367 : 			{
; 1368 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_BILINEAR_NOCLAMP);

	push	14					; 0000000eH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1369 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_LINEAR);

	push	11					; 0000000bH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
$LN35@SetCurrent:

; 1370 : 			}
; 1371 : 
; 1372 : 			break;

	jmp	$LN78@SetCurrent
$LN34@SetCurrent:

; 1373 : 
; 1374 : 		case STATE_ALPHA_TEXTURE_GOURAUD:
; 1375 : 			SetState(MPR_STA_DISABLES, 
; 1376 : 				MPR_SE_FILTERING);

	push	256					; 00000100H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1377 : 
; 1378 : 			SetState(MPR_STA_ENABLES,
; 1379 : 				MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE | 
; 1380 : 				MPR_SE_TEXTURING | 
; 1381 : 				MPR_SE_SHADING | 
; 1382 : 				MPR_SE_MODULATION |
; 1383 : 				MPR_SE_ALPHA);

	push	1095					; 00000447H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1384 : 
; 1385 : 			SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_NEAREST);

	push	10					; 0000000aH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1386 : 			if(PlayerOptions.FilteringOn())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?FilteringOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::FilteringOn
	test	eax, eax
	je	SHORT $LN33@SetCurrent

; 1387 : 			{
; 1388 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_BILINEAR_NOCLAMP);

	push	14					; 0000000eH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1389 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_LINEAR);

	push	11					; 0000000bH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
$LN33@SetCurrent:

; 1390 : 			}
; 1391 : 
; 1392 : 			break;

	jmp	$LN78@SetCurrent
$LN32@SetCurrent:

; 1393 : 
; 1394 : 		case STATE_CHROMA_TEXTURE_PERSPECTIVE:
; 1395 : 			SetState(MPR_STA_DISABLES, 
; 1396 : 				MPR_SE_FILTERING |
; 1397 : 				MPR_SE_MODULATION | 
; 1398 : 				MPR_SE_SHADING |
; 1399 : 				MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE);

	push	1285					; 00000505H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1400 : 
; 1401 : 			SetState(MPR_STA_ENABLES,
; 1402 : 				MPR_SE_TEXTURING |
; 1403 : 				MPR_SE_CHROMA);

	push	130					; 00000082H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1404 : 
; 1405 : 			SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_NEAREST);

	push	10					; 0000000aH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1406 : 			if(PlayerOptions.FilteringOn() && DisplayOptions.m_texMode == DisplayOptionsClass::TEX_MODE_DDS)

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?FilteringOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::FilteringOn
	test	eax, eax
	je	SHORT $LN31@SetCurrent
	cmp	DWORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+24, 70161 ; 00011211H
	jne	SHORT $LN31@SetCurrent

; 1407 : 			{
; 1408 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_BILINEAR_NOCLAMP);

	push	14					; 0000000eH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1409 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_LINEAR);

	push	11					; 0000000bH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
$LN31@SetCurrent:

; 1410 : 			}
; 1411 : 
; 1412 : 			break;

	jmp	$LN78@SetCurrent
$LN30@SetCurrent:

; 1413 : 
; 1414 : 		case STATE_ALPHA_TEXTURE_PERSPECTIVE:
; 1415 : 			SetState(MPR_STA_DISABLES, 
; 1416 : 				MPR_SE_FILTERING |
; 1417 : 				MPR_SE_MODULATION | 
; 1418 : 				MPR_SE_SHADING |
; 1419 : 				MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE);

	push	1285					; 00000505H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1420 : 
; 1421 : 			SetState(MPR_STA_ENABLES,
; 1422 : 				MPR_SE_TEXTURING |
; 1423 : 				MPR_SE_ALPHA);

	push	66					; 00000042H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1424 : 
; 1425 : 			SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_NEAREST);

	push	10					; 0000000aH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1426 : 			if(PlayerOptions.FilteringOn())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?FilteringOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::FilteringOn
	test	eax, eax
	je	SHORT $LN29@SetCurrent

; 1427 : 			{
; 1428 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_BILINEAR_NOCLAMP);

	push	14					; 0000000eH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1429 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_LINEAR);

	push	11					; 0000000bH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
$LN29@SetCurrent:

; 1430 : 			}
; 1431 : 
; 1432 : 			break;

	jmp	$LN78@SetCurrent
$LN28@SetCurrent:

; 1433 : 
; 1434 : 		case STATE_CHROMA_TEXTURE_GOURAUD_PERSPECTIVE:
; 1435 : 			SetState(MPR_STA_DISABLES, 
; 1436 : 				MPR_SE_FILTERING |
; 1437 : 				MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE);

	push	1280					; 00000500H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1438 : 
; 1439 : 			SetState(MPR_STA_ENABLES,
; 1440 : 				MPR_SE_TEXTURING | 
; 1441 : 				MPR_SE_SHADING | 
; 1442 : 				MPR_SE_MODULATION |
; 1443 : 				MPR_SE_CHROMA);

	push	135					; 00000087H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1444 : 
; 1445 : 			SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_NEAREST);

	push	10					; 0000000aH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1446 : 			if(PlayerOptions.FilteringOn() && DisplayOptions.m_texMode == DisplayOptionsClass::TEX_MODE_DDS)

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?FilteringOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::FilteringOn
	test	eax, eax
	je	SHORT $LN27@SetCurrent
	cmp	DWORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+24, 70161 ; 00011211H
	jne	SHORT $LN27@SetCurrent

; 1447 : 			{
; 1448 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_BILINEAR_NOCLAMP);

	push	14					; 0000000eH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1449 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_LINEAR);

	push	11					; 0000000bH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
$LN27@SetCurrent:

; 1450 : 			}
; 1451 : 
; 1452 : 			break;

	jmp	$LN78@SetCurrent
$LN26@SetCurrent:

; 1453 : 
; 1454 : 		case STATE_ALPHA_TEXTURE_GOURAUD_PERSPECTIVE:
; 1455 : 			SetState(MPR_STA_DISABLES, 
; 1456 : 				MPR_SE_FILTERING |
; 1457 : 				MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE);

	push	1280					; 00000500H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1458 : 
; 1459 : 			SetState(MPR_STA_ENABLES,
; 1460 : 				MPR_SE_TEXTURING | 
; 1461 : 				MPR_SE_SHADING | 
; 1462 : 				MPR_SE_MODULATION |
; 1463 : 				MPR_SE_ALPHA);

	push	71					; 00000047H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1464 : 
; 1465 : 			SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_NEAREST);

	push	10					; 0000000aH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1466 : 			if(PlayerOptions.FilteringOn())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?FilteringOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::FilteringOn
	test	eax, eax
	je	SHORT $LN25@SetCurrent

; 1467 : 			{
; 1468 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_BILINEAR_NOCLAMP);

	push	14					; 0000000eH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1469 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_LINEAR);

	push	11					; 0000000bH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
$LN25@SetCurrent:

; 1470 : 			}
; 1471 : 
; 1472 : 			break;

	jmp	$LN78@SetCurrent
$LN24@SetCurrent:

; 1473 : 
; 1474 : 		case STATE_TEXTURE_NOFILTER:
; 1475 : 			SetState(MPR_STA_DISABLES, 
; 1476 : 				MPR_SE_FILTERING |
; 1477 : 				MPR_SE_ALPHA |
; 1478 : 				MPR_SE_SHADING);

	push	321					; 00000141H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1479 : 
; 1480 : 			SetState(MPR_STA_ENABLES,
; 1481 : 				MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE | 
; 1482 : 				MPR_SE_TEXTURING |
; 1483 : 				MPR_SE_MODULATION);

	push	1030					; 00000406H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1484 : 
; 1485 : 			SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_NEAREST);

	push	10					; 0000000aH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1486 : 
; 1487 : 			break;

	jmp	$LN78@SetCurrent
$LN23@SetCurrent:

; 1488 : 
; 1489 : 		case STATE_TEXTURE_NOFILTER_PERSPECTIVE:
; 1490 : 			SetState(MPR_STA_DISABLES,
; 1491 : 				MPR_SE_FILTERING |
; 1492 : 				MPR_SE_ALPHA |
; 1493 : 				MPR_SE_SHADING |
; 1494 : 				MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE);

	push	1345					; 00000541H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1495 : 
; 1496 : 			SetState(MPR_STA_ENABLES,
; 1497 : 				MPR_SE_TEXTURING |
; 1498 : 				MPR_SE_MODULATION);

	push	6
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1499 : 
; 1500 : 			SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_NEAREST);

	push	10					; 0000000aH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1501 : 
; 1502 : 			break;

	jmp	$LN78@SetCurrent
$LN22@SetCurrent:

; 1503 : 
; 1504 : 		case STATE_ALPHA_TEXTURE_NOFILTER:
; 1505 : 			SetState(MPR_STA_DISABLES, 
; 1506 : 				MPR_SE_FILTERING |
; 1507 : 				MPR_SE_MODULATION |
; 1508 : 				MPR_SE_SHADING);

	push	261					; 00000105H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1509 : 
; 1510 : 			SetState(MPR_STA_ENABLES,
; 1511 : 				MPR_SE_TEXTURING |
; 1512 : 				MPR_SE_ALPHA |
; 1513 : 				MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE);

	push	1090					; 00000442H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1514 : 
; 1515 : 			SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_NEAREST);

	push	10					; 0000000aH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1516 : 
; 1517 : 			break;

	jmp	$LN78@SetCurrent
$LN21@SetCurrent:

; 1518 : 
; 1519 : 		case STATE_ALPHA_TEXTURE_NOFILTER_PERSPECTIVE:
; 1520 : 			SetState(MPR_STA_DISABLES, 
; 1521 : 				MPR_SE_FILTERING |
; 1522 : 				MPR_SE_MODULATION | 
; 1523 : 				MPR_SE_SHADING |
; 1524 : 				MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE);

	push	1285					; 00000505H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1525 : 
; 1526 : 			SetState(MPR_STA_ENABLES,
; 1527 : 				MPR_SE_TEXTURING |
; 1528 : 				MPR_SE_ALPHA);

	push	66					; 00000042H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1529 : 
; 1530 : 			SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_NEAREST);

	push	10					; 0000000aH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1531 : 
; 1532 : 			break;

	jmp	$LN78@SetCurrent
$LN20@SetCurrent:

; 1533 : 
; 1534 : 		case STATE_LANDSCAPE_LIT:
; 1535 : 			SetState(MPR_STA_DISABLES, 
; 1536 : 				MPR_SE_FILTERING |
; 1537 : 				MPR_SE_ALPHA |
; 1538 : 				MPR_SE_SHADING |
; 1539 : 				MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE);

	push	1345					; 00000541H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1540 : 
; 1541 : 			SetState(MPR_STA_ENABLES,
; 1542 : 				MPR_SE_TEXTURING |
; 1543 : 				MPR_SE_MODULATION);

	push	6
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1544 : 
; 1545 : 			SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_NEAREST);

	push	10					; 0000000aH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1546 : 			if(PlayerOptions.FilteringOn())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?FilteringOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::FilteringOn
	test	eax, eax
	je	SHORT $LN19@SetCurrent

; 1547 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_BILINEAR);

	push	1
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
$LN19@SetCurrent:

; 1548 : 
; 1549 : 			if(DisplayOptions.m_texMode != DisplayOptionsClass::TEX_MODE_DDS)

	cmp	DWORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+24, 70161 ; 00011211H
	je	SHORT $LN18@SetCurrent

; 1550 : 				SetState(MPR_STA_DISABLES,MPR_SE_MODULATION);

	push	4
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
$LN18@SetCurrent:

; 1551 : 
; 1552 : 			break;

	jmp	$LN78@SetCurrent
$LN17@SetCurrent:

; 1553 : 
; 1554 : 		case STATE_LANDSCAPE_GOURAUD:
; 1555 : 			SetState(MPR_STA_DISABLES, 
; 1556 : 				MPR_SE_FILTERING |
; 1557 : 				MPR_SE_ALPHA |
; 1558 : 				MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE);

	push	1344					; 00000540H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1559 : 
; 1560 : 			SetState(MPR_STA_ENABLES,
; 1561 : 				MPR_SE_TEXTURING | 
; 1562 : 				MPR_SE_SHADING | 
; 1563 : 				MPR_SE_MODULATION);

	push	7
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1564 : 
; 1565 : 			SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_NEAREST);

	push	10					; 0000000aH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1566 : 			if(PlayerOptions.FilteringOn())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?FilteringOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::FilteringOn
	test	eax, eax
	je	SHORT $LN16@SetCurrent

; 1567 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_BILINEAR);

	push	1
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
$LN16@SetCurrent:

; 1568 : 
; 1569 : 			if(DisplayOptions.m_texMode != DisplayOptionsClass::TEX_MODE_DDS)

	cmp	DWORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+24, 70161 ; 00011211H
	je	SHORT $LN15@SetCurrent

; 1570 : 				SetState(MPR_STA_DISABLES,MPR_SE_MODULATION);

	push	4
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
$LN15@SetCurrent:

; 1571 : 
; 1572 : 			break;

	jmp	$LN78@SetCurrent
$LN14@SetCurrent:

; 1573 : 
; 1574 : 		case STATE_MULTITEXTURE:
; 1575 : 			SetState(MPR_STA_DISABLES, 
; 1576 : 				MPR_SE_FILTERING |
; 1577 : 				MPR_SE_ALPHA |
; 1578 : 				MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE);

	push	1344					; 00000540H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1579 : 
; 1580 : 			SetState(MPR_STA_ENABLES,
; 1581 : 				MPR_SE_TEXTURING | 
; 1582 : 				MPR_SE_SHADING | 
; 1583 : 				MPR_SE_MODULATION);

	push	7
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1584 : 
; 1585 : 			SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_NEAREST);

	push	10					; 0000000aH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1586 : 			if(PlayerOptions.FilteringOn())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?FilteringOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::FilteringOn
	test	eax, eax
	je	SHORT $LN13@SetCurrent

; 1587 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_BILINEAR);

	push	1
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
$LN13@SetCurrent:

; 1588 : 
; 1589 : 			//TEXTURESTAGE1
; 1590 : 			m_pD3DD->SetTextureStageState(1,D3DTSS_COLORARG2,D3DTA_TEXTURE);

	push	2
	push	3
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+148]
	call	ecx

; 1591 : 			m_pD3DD->SetTextureStageState(1,D3DTSS_COLORARG1,D3DTA_CURRENT);

	push	1
	push	2
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+148]
	call	ecx

; 1592 : 			m_pD3DD->SetTextureStageState(1,D3DTSS_COLOROP,D3DTOP_ADD);

	push	7
	push	1
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+148]
	call	ecx

; 1593 : 			m_pD3DD->SetTextureStageState(1,D3DTSS_ALPHAOP,D3DTOP_DISABLE);

	push	1
	push	4
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+148]
	call	ecx

; 1594 : 
; 1595 : 			m_pD3DD->SetTextureStageState(1,D3DTSS_MINFILTER,D3DTFN_POINT);

	push	1
	push	17					; 00000011H
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+148]
	call	ecx

; 1596 : 			m_pD3DD->SetTextureStageState(1,D3DTSS_MAGFILTER,D3DTFG_POINT);

	push	1
	push	16					; 00000010H
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+148]
	call	ecx

; 1597 : 			m_pD3DD->SetTextureStageState(1,D3DTSS_MIPFILTER,D3DTFP_NONE);

	push	1
	push	18					; 00000012H
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+148]
	call	ecx

; 1598 : 
; 1599 : 			if(PlayerOptions.FilteringOn())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?FilteringOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::FilteringOn
	test	eax, eax
	je	$LN12@SetCurrent

; 1600 : 			{
; 1601 : 				if(DisplayOptions.bAnisotropicFiltering)

	movzx	edx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+13
	test	edx, edx
	je	SHORT $LN11@SetCurrent

; 1602 : 				{
; 1603 : 					m_pD3DD->SetTextureStageState(1,D3DTSS_MAGFILTER,D3DTFG_ANISOTROPIC);

	push	5
	push	16					; 00000010H
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+148]
	call	edx

; 1604 : 					m_pD3DD->SetTextureStageState(1,D3DTSS_MINFILTER,D3DTFN_ANISOTROPIC);

	push	3
	push	17					; 00000011H
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+148]
	call	edx

; 1605 : 					m_pD3DD->SetTextureStageState(1,D3DTSS_MAXANISOTROPY,m_pCtxDX->m_pD3DHWDeviceDesc->dwMaxAnisotropy);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262360]
	mov	edx, DWORD PTR [ecx+68]
	mov	eax, DWORD PTR [edx+148]
	push	eax
	push	21					; 00000015H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+148]
	call	eax

; 1606 : 				}
; 1607 : 				else

	jmp	SHORT $LN12@SetCurrent
$LN11@SetCurrent:

; 1608 : 				{
; 1609 : 					m_pD3DD->SetTextureStageState(1,D3DTSS_MAGFILTER,D3DTFG_LINEAR);

	push	2
	push	16					; 00000010H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+148]
	call	eax

; 1610 : 					m_pD3DD->SetTextureStageState(1,D3DTSS_MINFILTER,D3DTFN_LINEAR);

	push	2
	push	17					; 00000011H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+148]
	call	eax
$LN12@SetCurrent:

; 1611 : 				}
; 1612 : 			}
; 1613 : 
; 1614 : 			break;

	jmp	$LN78@SetCurrent
$LN9@SetCurrent:

; 1615 : 
; 1616 : 		case STATE_MULTITEXTURE_ALPHA:
; 1617 : 			SetState(MPR_STA_DISABLES, 
; 1618 : 				MPR_SE_FILTERING |
; 1619 : 				MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE);

	push	1280					; 00000500H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1620 : 
; 1621 : 			SetState(MPR_STA_ENABLES,
; 1622 : 				MPR_SE_TEXTURING | 
; 1623 : 				MPR_SE_ALPHA |
; 1624 : 				MPR_SE_SHADING | 
; 1625 : 				MPR_SE_MODULATION);

	push	71					; 00000047H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1626 : 
; 1627 : 			SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_NEAREST);

	push	10					; 0000000aH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1628 : 			if(PlayerOptions.FilteringOn())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?FilteringOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::FilteringOn
	test	eax, eax
	je	SHORT $LN8@SetCurrent

; 1629 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_BILINEAR);

	push	1
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
$LN8@SetCurrent:

; 1630 : 
; 1631 : 			//TEXTURESTAGE1
; 1632 : 			m_pD3DD->SetTextureStageState(1,D3DTSS_COLORARG1,D3DTA_CURRENT);

	push	1
	push	2
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+148]
	call	eax

; 1633 : 			m_pD3DD->SetTextureStageState(1,D3DTSS_COLORARG2,D3DTA_TEXTURE);

	push	2
	push	3
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+148]
	call	eax

; 1634 : 			m_pD3DD->SetTextureStageState(1,D3DTSS_COLOROP,D3DTOP_ADD);

	push	7
	push	1
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+148]
	call	eax

; 1635 : 
; 1636 : 			m_pD3DD->SetTextureStageState(1,D3DTSS_ALPHAARG1,D3DTA_CURRENT);

	push	1
	push	5
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+148]
	call	eax

; 1637 : 			m_pD3DD->SetTextureStageState(1,D3DTSS_ALPHAOP,D3DTOP_SELECTARG1);

	push	2
	push	4
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+148]
	call	eax

; 1638 : 
; 1639 : 			m_pD3DD->SetTextureStageState(1,D3DTSS_MINFILTER,D3DTFN_POINT);

	push	1
	push	17					; 00000011H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+148]
	call	eax

; 1640 : 			m_pD3DD->SetTextureStageState(1,D3DTSS_MAGFILTER,D3DTFG_POINT);

	push	1
	push	16					; 00000010H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+148]
	call	eax

; 1641 : 			m_pD3DD->SetTextureStageState(1,D3DTSS_MIPFILTER,D3DTFP_NONE);

	push	1
	push	18					; 00000012H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+148]
	call	eax

; 1642 : 
; 1643 : 			if(PlayerOptions.FilteringOn())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?FilteringOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::FilteringOn
	test	eax, eax
	je	$LN7@SetCurrent

; 1644 : 			{
; 1645 : 				if(DisplayOptions.bAnisotropicFiltering)

	movzx	ecx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+13
	test	ecx, ecx
	je	SHORT $LN6@SetCurrent

; 1646 : 				{
; 1647 : 					m_pD3DD->SetTextureStageState(1,D3DTSS_MAGFILTER,D3DTFG_ANISOTROPIC);

	push	5
	push	16					; 00000010H
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+148]
	call	ecx

; 1648 : 					m_pD3DD->SetTextureStageState(1,D3DTSS_MINFILTER,D3DTFN_ANISOTROPIC);

	push	3
	push	17					; 00000011H
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+148]
	call	ecx

; 1649 : 					m_pD3DD->SetTextureStageState(1,D3DTSS_MAXANISOTROPY,m_pCtxDX->m_pD3DHWDeviceDesc->dwMaxAnisotropy);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262360]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR [ecx+148]
	push	edx
	push	21					; 00000015H
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+148]
	call	edx

; 1650 : 				}
; 1651 : 				else

	jmp	SHORT $LN7@SetCurrent
$LN6@SetCurrent:

; 1652 : 				{
; 1653 : 					m_pD3DD->SetTextureStageState(1,D3DTSS_MAGFILTER,D3DTFG_LINEAR);

	push	2
	push	16					; 00000010H
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+148]
	call	edx

; 1654 : 					m_pD3DD->SetTextureStageState(1,D3DTSS_MINFILTER,D3DTFN_LINEAR);

	push	2
	push	17					; 00000011H
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+148]
	call	edx
$LN7@SetCurrent:

; 1655 : 				}
; 1656 : 			}
; 1657 : 
; 1658 : 			break;

	jmp	SHORT $LN78@SetCurrent
$LN4@SetCurrent:

; 1659 : 
; 1660 : 		case STATE_TEXTURE_TEXT:
; 1661 : 			SetState(MPR_STA_DISABLES, 
; 1662 : 				MPR_SE_SHADING | 
; 1663 : 				MPR_SE_FILTERING);

	push	257					; 00000101H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1664 : 
; 1665 : 			SetState(MPR_STA_ENABLES,
; 1666 : 				MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE | 
; 1667 : 				MPR_SE_TEXTURING | 
; 1668 : 				MPR_SE_MODULATION |
; 1669 : 				MPR_SE_ALPHA);

	push	1094					; 00000446H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1670 : 
; 1671 : 			SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_NEAREST);

	push	10					; 0000000aH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1672 : 
; 1673 : 			break;

	jmp	SHORT $LN78@SetCurrent
$LN3@SetCurrent:

; 1674 : 
; 1675 : 		case STATE_ALPHA_TEXTURE_PERSPECTIVE_CLAMP:
; 1676 : 			SetState(MPR_STA_DISABLES, 
; 1677 : 				MPR_SE_FILTERING |
; 1678 : 				MPR_SE_SHADING |
; 1679 : 				MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE);

	push	1281					; 00000501H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1680 : 
; 1681 : 			SetState(MPR_STA_ENABLES,
; 1682 : 				MPR_SE_TEXTURING |
; 1683 : 				MPR_SE_MODULATION | 
; 1684 : 				MPR_SE_ALPHA);

	push	70					; 00000046H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1685 : 
; 1686 : 			SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_NEAREST);

	push	10					; 0000000aH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1687 : 			if(PlayerOptions.FilteringOn())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?FilteringOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::FilteringOn
	test	eax, eax
	je	SHORT $LN78@SetCurrent

; 1688 : 			{
; 1689 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_BILINEAR);

	push	1
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1690 : 				SetState(MPR_STA_TEX_FILTER,MPR_TX_MIPMAP_LINEAR);

	push	11					; 0000000bH
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
$LN78@SetCurrent:

; 1691 : 			}
; 1692 : 
; 1693 : 			break;
; 1694 : 
; 1695 : 		default:
; 1696 : 			ShiWarning("BAD OR MISSING CONTEXT STATE");
; 1697 : 	}
; 1698 : }

	mov	esp, ebp
	pop	ebp
	ret	8
$LN80@SetCurrent:
	DD	$LN75@SetCurrent
	DD	$LN74@SetCurrent
	DD	$LN73@SetCurrent
	DD	$LN72@SetCurrent
	DD	$LN62@SetCurrent
	DD	$LN70@SetCurrent
	DD	$LN68@SetCurrent
	DD	$LN66@SetCurrent
	DD	$LN60@SetCurrent
	DD	$LN64@SetCurrent
	DD	$LN58@SetCurrent
	DD	$LN24@SetCurrent
	DD	$LN23@SetCurrent
	DD	$LN4@SetCurrent
	DD	$LN20@SetCurrent
	DD	$LN17@SetCurrent
	DD	$LN56@SetCurrent
	DD	$LN55@SetCurrent
	DD	$LN54@SetCurrent
	DD	$LN52@SetCurrent
	DD	$LN32@SetCurrent
	DD	$LN48@SetCurrent
	DD	$LN44@SetCurrent
	DD	$LN36@SetCurrent
	DD	$LN28@SetCurrent
	DD	$LN53@SetCurrent
	DD	$LN50@SetCurrent
	DD	$LN30@SetCurrent
	DD	$LN46@SetCurrent
	DD	$LN42@SetCurrent
	DD	$LN40@SetCurrent
	DD	$LN38@SetCurrent
	DD	$LN34@SetCurrent
	DD	$LN26@SetCurrent
	DD	$LN22@SetCurrent
	DD	$LN21@SetCurrent
	DD	$LN3@SetCurrent
	DD	$LN14@SetCurrent
	DD	$LN9@SetCurrent
?SetCurrentState@ContextMPR@@IAEXHH@Z ENDP		; ContextMPR::SetCurrentState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
;	COMDAT ?ClearStateTable@ContextMPR@@IAEXH@Z
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_this$ = -4						; size = 4
_state$ = 8						; size = 4
?ClearStateTable@ContextMPR@@IAEXH@Z PROC		; ContextMPR::ClearStateTable, COMDAT
; _this$ = ecx

; 1800 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1801 : 	HRESULT hr = m_pD3DD->DeleteStateBlock(StateTable[state]);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR ?StateTable@ContextMPR@@2PAIA[eax*4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+164]
	call	ecx
	mov	DWORD PTR _hr$[ebp], eax

; 1802 : 	ShiAssert(SUCCEEDED(hr));
; 1803 : 
; 1804 : 	StateTable[state] = 0;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR ?StateTable@ContextMPR@@2PAIA[edx*4], 0

; 1805 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ClearStateTable@ContextMPR@@IAEXH@Z ENDP		; ContextMPR::ClearStateTable
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
;	COMDAT ?SetStateTable@ContextMPR@@IAEXHH@Z
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_this$ = -4						; size = 4
_state$ = 8						; size = 4
_flag$ = 12						; size = 4
?SetStateTable@ContextMPR@@IAEXHH@Z PROC		; ContextMPR::SetStateTable, COMDAT
; _this$ = ecx

; 1780 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1781 : 	if (!m_pD3DD)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+262380], 0
	jne	SHORT $LN1@SetStateTa

; 1782 : 		return;

	jmp	SHORT $LN2@SetStateTa
$LN1@SetStateTa:

; 1783 : 		
; 1784 : 	// Record a stateblock
; 1785 : 	HRESULT hr = m_pD3DD->BeginStateBlock();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+88]
	call	eax
	mov	DWORD PTR _hr$[ebp], eax

; 1786 : 	ShiAssert(SUCCEEDED(hr));
; 1787 : 
; 1788 : 	SetCurrentState(state,flag);

	mov	ecx, DWORD PTR _flag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCurrentState@ContextMPR@@IAEXHH@Z	; ContextMPR::SetCurrentState

; 1789 : 
; 1790 : 	hr = m_pD3DD->EndStateBlock((DWORD *)&StateTable[state]);

	mov	eax, DWORD PTR _state$[ebp]
	lea	ecx, DWORD PTR ?StateTable@ContextMPR@@2PAIA[eax*4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+92]
	call	ecx
	mov	DWORD PTR _hr$[ebp], eax

; 1791 : 	ShiAssert(SUCCEEDED(hr) && StateTable[state]);
; 1792 : 
; 1793 : 	// Record internal state
; 1794 : 	m_bUseSetStateInternal = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+4], 1

; 1795 : 	SetCurrentState(state,flag);

	mov	eax, DWORD PTR _flag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCurrentState@ContextMPR@@IAEXHH@Z	; ContextMPR::SetCurrentState

; 1796 : 	m_bUseSetStateInternal = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+4], 0
$LN2@SetStateTa:

; 1797 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetStateTable@ContextMPR@@IAEXHH@Z ENDP		; ContextMPR::SetStateTable
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\context.h
;	COMDAT ??0State@ContextMPR@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0State@ContextMPR@@QAE@XZ PROC			; ContextMPR::State::State, COMDAT
; _this$ = ecx

; 719  : 		State() { ZeroMemory(this, sizeof(*this)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	20					; 00000014H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0State@ContextMPR@@QAE@XZ ENDP			; ContextMPR::State::State
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?TexColorDiffuse@ContextMPR@@QAEXXZ PROC		; ContextMPR::TexColorDiffuse
; _this$ = ecx

; 482  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 483  : 	m_pD3DD->SetTextureStageState(0,D3DTSS_COLORARG1,D3DTA_DIFFUSE);

	push	0
	push	2
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+148]
	call	edx

; 484  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?TexColorDiffuse@ContextMPR@@QAEXXZ ENDP		; ContextMPR::TexColorDiffuse
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
;	COMDAT ?ZCX_Calculate@ContextMPR@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZCX_Calculate@ContextMPR@@QAEXXZ PROC			; ContextMPR::ZCX_Calculate, COMDAT
; _this$ = ecx

; 74   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 	zNear = ZNEAR + gZBias;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+262340]
	addss	xmm0, DWORD PTR [ecx+262344]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+262356], xmm0

; 76   : 	szCX1=ZFAR/(ZFAR-zNear);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+262336]
	subss	xmm0, DWORD PTR [ecx+262356]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+262336]
	divss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+262348], xmm1

; 77   : 	szCX2=ZFAR*zNear/(zNear-ZFAR);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+262336]
	mulss	xmm0, DWORD PTR [edx+262356]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+262356]
	subss	xmm1, DWORD PTR [ecx+262336]
	divss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+262352], xmm0

; 78   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ZCX_Calculate@ContextMPR@@QAEXXZ ENDP			; ContextMPR::ZCX_Calculate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_e$2 = -268						; size = 16
$T3 = -252						; size = 16
_dwActualHeight$4 = -236				; size = 4
$T5 = -232						; size = 4
_dwNumMipMaps$6 = -228					; size = 4
_dwActualWidth$7 = -224					; size = 4
$T8 = -220						; size = 4
tv458 = -216						; size = 4
tv146 = -212						; size = 4
_dwFlags$9 = -208					; size = 4
_fmt$10 = -204						; size = 4
_y$11 = -200						; size = 4
_pDDSTex$12 = -196					; size = 4
_pDst$ = -192						; size = 4
_x$13 = -188						; size = 4
_this$ = -184						; size = 4
_pVtx$14 = -180						; size = 160
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_sX$ = 8						; size = 4
_sY$ = 12						; size = 4
_dX$ = 16						; size = 4
_dY$ = 20						; size = 4
_w$ = 24						; size = 4
_h$ = 28						; size = 4
_totalWidth$ = 32					; size = 4
_pSrc$ = 36						; size = 4
_Fit$ = 40						; size = 1
?Render2DBitmap@ContextMPR@@QAEXHHHHHHHPAK_N@Z PROC	; ContextMPR::Render2DBitmap
; _this$ = ecx

; 1701 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Render2DBitmap@ContextMPR@@QAEXHHHHHHHPAK_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 252				; 000000fcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1702 : 	DWORD *pDst = NULL;

	mov	DWORD PTR _pDst$[ebp], 0

; 1703 : 
; 1704 : 	#ifdef _CONTEXT_TRACE_ALL
; 1705 : 	MonoPrint("ContextMPR::Render2DBitmap(%d,%d,%d,%d,%d,%d,%d,0x%X)\n",sX,sY,dX,dY,w,h,totalWidth,pSrc);
; 1706 : 	#endif
; 1707 : 	ShiAssert(FALSE == F4IsBadReadPtr(m_pD3DD,sizeof *m_pD3DD));
; 1708 : 	try
; 1709 : 	{

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1710 : 		// Convert from ABGR to ARGB ;(
; 1711 : 		pSrc = (DWORD *)(((BYTE *)pSrc) + (sY * (totalWidth << 2)) + sX);

	mov	eax, DWORD PTR _totalWidth$[ebp]
	shl	eax, 2
	imul	eax, DWORD PTR _sY$[ebp]
	add	eax, DWORD PTR _pSrc$[ebp]
	add	eax, DWORD PTR _sX$[ebp]
	mov	DWORD PTR _pSrc$[ebp], eax

; 1712 : 		pDst = new DWORD[w * h];

	mov	eax, DWORD PTR _w$[ebp]
	imul	eax, DWORD PTR _h$[ebp]
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR tv458[ebp], eax
	mov	eax, DWORD PTR tv458[ebp]
	mov	DWORD PTR $T5[ebp], eax
	mov	ecx, DWORD PTR $T5[ebp]
	mov	DWORD PTR _pDst$[ebp], ecx

; 1713 : 		if(!pDst) throw _com_error(E_OUTOFMEMORY);

	cmp	DWORD PTR _pDst$[ebp], 0
	jne	SHORT $LN9@Render2DBi
	push	0
	push	0
	push	-2147024882				; 8007000eH
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z	; _com_error::_com_error
	push	OFFSET __TI1?AV_com_error@@
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	call	__CxxThrowException@8
$LN9@Render2DBi:

; 1714 : 
; 1715 : 		for(int y=0;y<h;y++)

	mov	DWORD PTR _y$11[ebp], 0
	jmp	SHORT $LN8@Render2DBi
$LN7@Render2DBi:
	mov	eax, DWORD PTR _y$11[ebp]
	add	eax, 1
	mov	DWORD PTR _y$11[ebp], eax
$LN8@Render2DBi:
	mov	ecx, DWORD PTR _y$11[ebp]
	cmp	ecx, DWORD PTR _h$[ebp]
	jge	$LN6@Render2DBi

; 1716 : 		{
; 1717 : 			for(int x=0;x<w;x++)

	mov	DWORD PTR _x$13[ebp], 0
	jmp	SHORT $LN5@Render2DBi
$LN4@Render2DBi:
	mov	edx, DWORD PTR _x$13[ebp]
	add	edx, 1
	mov	DWORD PTR _x$13[ebp], edx
$LN5@Render2DBi:
	mov	eax, DWORD PTR _x$13[ebp]
	cmp	eax, DWORD PTR _w$[ebp]
	jge	SHORT $LN3@Render2DBi

; 1718 : 				pDst[y * w + x] = RGBA_MAKE(RGBA_GETBLUE(pSrc[x]),RGBA_GETGREEN(pSrc[x]),
; 1719 : 					RGBA_GETRED(pSrc[x]),RGBA_GETALPHA(pSrc[x]));

	mov	ecx, DWORD PTR _x$13[ebp]
	mov	edx, DWORD PTR _pSrc$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	shr	eax, 16					; 00000010H
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _x$13[ebp]
	mov	edx, DWORD PTR _pSrc$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	shl	ecx, 8
	mov	edx, DWORD PTR _x$13[ebp]
	mov	esi, DWORD PTR _pSrc$[ebp]
	mov	edx, DWORD PTR [esi+edx*4]
	and	edx, 255				; 000000ffH
	shl	edx, 16					; 00000010H
	mov	esi, DWORD PTR _x$13[ebp]
	mov	edi, DWORD PTR _pSrc$[ebp]
	mov	esi, DWORD PTR [edi+esi*4]
	shr	esi, 24					; 00000018H
	shl	esi, 24					; 00000018H
	or	esi, edx
	or	esi, ecx
	or	esi, eax
	mov	eax, DWORD PTR _y$11[ebp]
	imul	eax, DWORD PTR _w$[ebp]
	add	eax, DWORD PTR _x$13[ebp]
	mov	ecx, DWORD PTR _pDst$[ebp]
	mov	DWORD PTR [ecx+eax*4], esi
	jmp	$LN4@Render2DBi
$LN3@Render2DBi:

; 1720 : 
; 1721 : 			pSrc = (DWORD *)(((BYTE *)pSrc) + (totalWidth << 2));

	mov	edx, DWORD PTR _totalWidth$[ebp]
	mov	eax, DWORD PTR _pSrc$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _pSrc$[ebp], ecx

; 1722 : 		}

	jmp	$LN7@Render2DBi
$LN6@Render2DBi:

; 1723 : 
; 1724 : 		// Create tmp texture
; 1725 : 		DWORD dwFlags = D3DX_TEXTURE_NOMIPMAP;

	mov	DWORD PTR _dwFlags$9[ebp], 256		; 00000100H

; 1726 : 		DWORD dwActualWidth = w;

	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR _dwActualWidth$7[ebp], edx

; 1727 : 		DWORD dwActualHeight = h;

	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR _dwActualHeight$4[ebp], eax

; 1728 : 		D3DX_SURFACEFORMAT fmt = D3DX_SF_A8R8G8B8;

	mov	DWORD PTR _fmt$10[ebp], 2

; 1729 : 		DWORD dwNumMipMaps = 0;

	mov	DWORD PTR _dwNumMipMaps$6[ebp], 0

; 1730 : 
; 1731 : 		IDirectDrawSurface7Ptr pDDSTex;

	lea	ecx, DWORD PTR _pDDSTex$12[ebp]
	call	??0?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 1732 : 		CheckHR(D3DXCreateTexture(m_pD3DD,&dwFlags,&dwActualWidth,&dwActualHeight,
; 1733 : 			&fmt,NULL,&pDDSTex,&dwNumMipMaps));

	lea	ecx, DWORD PTR _dwNumMipMaps$6[ebp]
	push	ecx
	lea	ecx, DWORD PTR _pDDSTex$12[ebp]
	call	??I?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEPAPAUIDirectDrawSurface7@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator&
	push	eax
	push	0
	lea	edx, DWORD PTR _fmt$10[ebp]
	push	edx
	lea	eax, DWORD PTR _dwActualHeight$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _dwActualWidth$7[ebp]
	push	ecx
	lea	edx, DWORD PTR _dwFlags$9[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	push	ecx
	call	_D3DXCreateTexture@32
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 1734 : 
; 1735 : 		ShiAssert(FALSE==F4IsBadReadPtr(pDDSTex,sizeof *pDDSTex));
; 1736 : 		CheckHR(D3DXLoadTextureFromMemory(m_pD3DD,pDDSTex,0,pDst,NULL,
; 1737 : 			D3DX_SF_A8R8G8B8,w << 2,NULL,D3DX_FT_LINEAR));

	push	2
	push	0
	mov	edx, DWORD PTR _w$[ebp]
	shl	edx, 2
	push	edx
	push	2
	push	0
	mov	eax, DWORD PTR _pDst$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _pDDSTex$12[ebp]
	call	??B?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDrawSurface7@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator IDirectDrawSurface7 *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	push	edx
	call	_D3DXLoadTextureFromMemory@36
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 1738 : 
; 1739 : 		// Setup vertices
; 1740 : 		TwoDVertex pVtx[4];
; 1741 : 		ZeroMemory(pVtx,sizeof(pVtx));

	push	160					; 000000a0H
	push	0
	lea	eax, DWORD PTR _pVtx$14[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 1742 : 
; 1743 : 		// RV - RED - Scaling stuff if Fit to screen Requested
; 1744 : 		if(Fit){

	movzx	ecx, BYTE PTR _Fit$[ebp]
	test	ecx, ecx
	je	SHORT $LN2@Render2DBi

; 1745 : 			w=m_pCtxDX->m_nWidth;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262360]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _w$[ebp], ecx

; 1746 : 			h=m_pCtxDX->m_nHeight;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262360]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _h$[ebp], ecx
$LN2@Render2DBi:

; 1747 : 		}
; 1748 : 
; 1749 : 		pVtx[0].x = (Float_t)dX;		pVtx[0].y = (Float_t)dY;		pVtx[0].u = (Float_t)0.0f;	pVtx[0].v = (Float_t)0.0f;

	cvtsi2ss xmm0, DWORD PTR _dX$[ebp]
	mov	edx, 40					; 00000028H
	imul	edx, 0
	movss	DWORD PTR _pVtx$14[ebp+edx], xmm0
	cvtsi2ss xmm0, DWORD PTR _dY$[ebp]
	mov	eax, 40					; 00000028H
	imul	eax, 0
	movss	DWORD PTR _pVtx$14[ebp+eax+4], xmm0
	mov	ecx, 40					; 00000028H
	imul	ecx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _pVtx$14[ebp+ecx+24], xmm0
	mov	edx, 40					; 00000028H
	imul	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _pVtx$14[ebp+edx+28], xmm0

; 1750 : 		pVtx[1].x = (Float_t)(dX + w);	pVtx[1].y = (Float_t)dY;		pVtx[1].u = (Float_t)1.0f;	pVtx[1].v = (Float_t)0.0f;

	mov	eax, DWORD PTR _dX$[ebp]
	add	eax, DWORD PTR _w$[ebp]
	cvtsi2ss xmm0, eax
	mov	ecx, 40					; 00000028H
	shl	ecx, 0
	movss	DWORD PTR _pVtx$14[ebp+ecx], xmm0
	cvtsi2ss xmm0, DWORD PTR _dY$[ebp]
	mov	edx, 40					; 00000028H
	shl	edx, 0
	movss	DWORD PTR _pVtx$14[ebp+edx+4], xmm0
	mov	eax, 40					; 00000028H
	shl	eax, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$14[ebp+eax+24], xmm0
	mov	ecx, 40					; 00000028H
	shl	ecx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _pVtx$14[ebp+ecx+28], xmm0

; 1751 : 		pVtx[2].x = (Float_t)(dX + w);	pVtx[2].y = (Float_t)(dY + h);	pVtx[2].u = (Float_t)1.0f;	pVtx[2].v = (Float_t)1.0f;

	mov	edx, DWORD PTR _dX$[ebp]
	add	edx, DWORD PTR _w$[ebp]
	cvtsi2ss xmm0, edx
	mov	eax, 40					; 00000028H
	shl	eax, 1
	movss	DWORD PTR _pVtx$14[ebp+eax], xmm0
	mov	ecx, DWORD PTR _dY$[ebp]
	add	ecx, DWORD PTR _h$[ebp]
	cvtsi2ss xmm0, ecx
	mov	edx, 40					; 00000028H
	shl	edx, 1
	movss	DWORD PTR _pVtx$14[ebp+edx+4], xmm0
	mov	eax, 40					; 00000028H
	shl	eax, 1
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$14[ebp+eax+24], xmm0
	mov	ecx, 40					; 00000028H
	shl	ecx, 1
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$14[ebp+ecx+28], xmm0

; 1752 : 		pVtx[3].x = (Float_t)dX;		pVtx[3].y = (Float_t)(dY + h);	pVtx[3].u = (Float_t)0.0f;	pVtx[3].v = (Float_t)1.0f;

	cvtsi2ss xmm0, DWORD PTR _dX$[ebp]
	mov	edx, 40					; 00000028H
	imul	edx, 3
	movss	DWORD PTR _pVtx$14[ebp+edx], xmm0
	mov	eax, DWORD PTR _dY$[ebp]
	add	eax, DWORD PTR _h$[ebp]
	cvtsi2ss xmm0, eax
	mov	ecx, 40					; 00000028H
	imul	ecx, 3
	movss	DWORD PTR _pVtx$14[ebp+ecx+4], xmm0
	mov	edx, 40					; 00000028H
	imul	edx, 3
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _pVtx$14[ebp+edx+24], xmm0
	mov	eax, 40					; 00000028H
	imul	eax, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$14[ebp+eax+28], xmm0

; 1753 : 
; 1754 : 		pVtx[0].a = pVtx[0].r = pVtx[0].g = pVtx[0].b = (Float_t)1.0f;

	mov	ecx, 40					; 00000028H
	imul	ecx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$14[ebp+ecx+16], xmm0
	mov	edx, 40					; 00000028H
	imul	edx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$14[ebp+edx+12], xmm0
	mov	eax, 40					; 00000028H
	imul	eax, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$14[ebp+eax+8], xmm0
	mov	ecx, 40					; 00000028H
	imul	ecx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$14[ebp+ecx+20], xmm0

; 1755 : 		pVtx[1].a = pVtx[1].r = pVtx[1].g = pVtx[1].b = (Float_t)1.0f;

	mov	edx, 40					; 00000028H
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$14[ebp+edx+16], xmm0
	mov	eax, 40					; 00000028H
	shl	eax, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$14[ebp+eax+12], xmm0
	mov	ecx, 40					; 00000028H
	shl	ecx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$14[ebp+ecx+8], xmm0
	mov	edx, 40					; 00000028H
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$14[ebp+edx+20], xmm0

; 1756 : 		pVtx[2].a = pVtx[2].r = pVtx[2].g = pVtx[2].b = (Float_t)1.0f;

	mov	eax, 40					; 00000028H
	shl	eax, 1
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$14[ebp+eax+16], xmm0
	mov	ecx, 40					; 00000028H
	shl	ecx, 1
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$14[ebp+ecx+12], xmm0
	mov	edx, 40					; 00000028H
	shl	edx, 1
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$14[ebp+edx+8], xmm0
	mov	eax, 40					; 00000028H
	shl	eax, 1
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$14[ebp+eax+20], xmm0

; 1757 : 		pVtx[3].a = pVtx[3].r = pVtx[3].g = pVtx[3].b = (Float_t)1.0f;

	mov	ecx, 40					; 00000028H
	imul	ecx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$14[ebp+ecx+16], xmm0
	mov	edx, 40					; 00000028H
	imul	edx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$14[ebp+edx+12], xmm0
	mov	eax, 40					; 00000028H
	imul	eax, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$14[ebp+eax+8], xmm0
	mov	ecx, 40					; 00000028H
	imul	ecx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$14[ebp+ecx+20], xmm0

; 1758 : 
; 1759 : 		// Setup state
; 1760 : 		RestoreState(STATE_TEXTURE);

	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 1761 : 
; 1762 : 		CheckHR(m_pD3DD->SetTexture(0,pDDSTex));

	lea	ecx, DWORD PTR _pDDSTex$12[ebp]
	call	??B?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDrawSurface7@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator IDirectDrawSurface7 *
	push	eax
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+140]
	call	ecx
	mov	DWORD PTR tv146[ebp], eax
	mov	edx, DWORD PTR tv146[ebp]
	push	edx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 1763 : 
; 1764 : 		// Render it (finally)
; 1765 : 		DrawPrimitive(MPR_PRM_TRIFAN,MPR_VI_COLOR | MPR_VI_TEXTURE,4,pVtx,sizeof(pVtx[0]));

	push	40					; 00000028H
	lea	eax, DWORD PTR _pVtx$14[ebp]
	push	eax
	push	4
	push	6
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawPrimitive@ContextMPR@@QAEXHGGPAUMPRVtxTexClr_t@@G@Z ; ContextMPR::DrawPrimitive

; 1766 : 
; 1767 : 		FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 1768 : 		InvalidateState();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InvalidateState@ContextMPR@@QAEXXZ	; ContextMPR::InvalidateState

; 1769 : 	}

	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _pDDSTex$12[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
	jmp	SHORT $LN13@Render2DBi
__catch$?Render2DBitmap@ContextMPR@@QAEXHHHHHHHPAK_N@Z$0:

; 1770 : 
; 1771 : 	catch(_com_error e)
; 1772 : 	{
; 1773 : 		MonoPrint("ContextMPR::Render2DBitmap - Error 0x%X\n",e.Error());

	lea	ecx, DWORD PTR _e$2[ebp]
	call	?Error@_com_error@@QBEJXZ		; _com_error::Error
	push	eax
	push	OFFSET ??_C@_0CJ@BLNLALNC@ContextMPR?3?3Render2DBitmap?5?9?5Err@
	call	_MonoPrint
	add	esp, 8

; 1774 : 	}

	lea	ecx, DWORD PTR _e$2[ebp]
	call	??1_com_error@@UAE@XZ			; _com_error::~_com_error
	mov	eax, $LN18@Render2DBi
	ret	0
$LN13@Render2DBi:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN17@Render2DBi
$LN18@Render2DBi:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN17@Render2DBi:

; 1775 : 
; 1776 : 	if(pDst) delete[] pDst;

	cmp	DWORD PTR _pDst$[ebp], 0
	je	SHORT $LN1@Render2DBi
	mov	ecx, DWORD PTR _pDst$[ebp]
	mov	DWORD PTR $T8[ebp], ecx
	mov	edx, DWORD PTR $T8[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Render2DBi:
$LN11@Render2DBi:

; 1777 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Render2DBitmap@ContextMPR@@QAEXHHHHHHHPAK_N@Z$2:
	lea	ecx, DWORD PTR _pDDSTex$12[ebp]
	jmp	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
__ehhandler$?Render2DBitmap@ContextMPR@@QAEXHHHHHHHPAK_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-272]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Render2DBitmap@ContextMPR@@QAEXHHHHHHHPAK_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Render2DBitmap@ContextMPR@@QAEXHHHHHHHPAK_N@Z ENDP	; ContextMPR::Render2DBitmap
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\context.h
;	COMDAT ?InvalidateState@ContextMPR@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InvalidateState@ContextMPR@@QAEXXZ PROC		; ContextMPR::InvalidateState, COMDAT
; _this$ = ecx

; 707  : 	void InvalidateState () { currentTexture1 = currentTexture2 = lastTexture1 = lastTexture2 = -1; m_colFG_Raw = 0x00ffffff; currentState = lastState = -1; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 16777215		; 00ffffffH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], -1
	mov	esp, ebp
	pop	ebp
	ret	0
?InvalidateState@ContextMPR@@QAEXXZ ENDP		; ContextMPR::InvalidateState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_zBias$ = 8						; size = 4
?setGlobalZBias@ContextMPR@@QAEXM@Z PROC		; ContextMPR::setGlobalZBias
; _this$ = ecx

; 2435 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2436 : 	if(gZBias != zBias) gZBias = zBias;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+262344]
	ucomiss	xmm0, DWORD PTR _zBias$[ebp]
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN1@setGlobalZ
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _zBias$[ebp]
	movss	DWORD PTR [ecx+262344], xmm0
$LN1@setGlobalZ:

; 2437 : 	ZCX_Calculate();							// COBRA - RED - Drawing CXs update

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZCX_Calculate@ContextMPR@@QAEXXZ	; ContextMPR::ZCX_Calculate

; 2438 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setGlobalZBias@ContextMPR@@QAEXM@Z ENDP		; ContextMPR::setGlobalZBias
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?SetTexID@ContextMPR@@QAEXH@Z PROC			; ContextMPR::SetTexID
; _this$ = ecx

; 2076 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2077 : 	/*if(id != texID)*/ texID = id;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [eax+60], ecx

; 2078 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetTexID@ContextMPR@@QAEXH@Z ENDP			; ContextMPR::SetTexID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?SetPalID@ContextMPR@@QAEXH@Z PROC			; ContextMPR::SetPalID
; _this$ = ecx

; 2071 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2072 : 	/*if(id != palID)*/ palID = id;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [eax+56], ecx

; 2073 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetPalID@ContextMPR@@QAEXH@Z ENDP			; ContextMPR::SetPalID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_state$ = 8						; size = 4
?SetIRmode@ContextMPR@@QAEXH@Z PROC			; ContextMPR::SetIRmode
; _this$ = ecx

; 2065 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2066 : 	IRmode = state;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+52], ecx

; 2067 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetIRmode@ContextMPR@@QAEXH@Z ENDP			; ContextMPR::SetIRmode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_state$ = 8						; size = 4
?SetTVmode@ContextMPR@@QAEXH@Z PROC			; ContextMPR::SetTVmode
; _this$ = ecx

; 2060 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2061 : 	TVmode = state;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+48], ecx

; 2062 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetTVmode@ContextMPR@@QAEXH@Z ENDP			; ContextMPR::SetTVmode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_state$ = 8						; size = 4
?SetNVGmode@ContextMPR@@QAEXH@Z PROC			; ContextMPR::SetNVGmode
; _this$ = ecx

; 2055 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2056 : 	NVGmode = state;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+44], ecx

; 2057 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetNVGmode@ContextMPR@@QAEXH@Z ENDP			; ContextMPR::SetNVGmode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_state$ = 8						; size = 4
?SetZBuffering@ContextMPR@@QAEXH@Z PROC			; ContextMPR::SetZBuffering
; _this$ = ecx

; 2042 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2043 : 	if(!bZBuffering && state)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jne	SHORT $LN3@SetZBuffer
	cmp	DWORD PTR _state$[ebp], 0
	je	SHORT $LN3@SetZBuffer

; 2044 : 	{
; 2045 : 		FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 2046 : 		bZBuffering = state;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN4@SetZBuffer
$LN3@SetZBuffer:

; 2047 : 	}
; 2048 : 	else if(bZBuffering && !state)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN4@SetZBuffer
	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN4@SetZBuffer

; 2049 : 	{
; 2050 : 		bZBuffering = state;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+40], edx
$LN4@SetZBuffer:

; 2051 : 	}
; 2052 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetZBuffering@ContextMPR@@QAEXH@Z ENDP			; ContextMPR::SetZBuffering
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_specular$ = 8						; size = 4
?UpdateSpecularFog@ContextMPR@@QAEXK@Z PROC		; ContextMPR::UpdateSpecularFog
; _this$ = ecx

; 2037 : {	

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2038 : 	/*if(specular != m_colFOG)*/ m_colFOG = specular;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _specular$[ebp]
	mov	DWORD PTR [eax+262404], ecx

; 2039 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?UpdateSpecularFog@ContextMPR@@QAEXK@Z ENDP		; ContextMPR::UpdateSpecularFog
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_hr$1 = -8						; size = 4
_this$ = -4						; size = 4
_state$ = 8						; size = 4
?ApplyStateBlock@ContextMPR@@QAEXH@Z PROC		; ContextMPR::ApplyStateBlock
; _this$ = ecx

; 1977 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1978 : 	if(state == -1) return;

	cmp	DWORD PTR _state$[ebp], -1
	jne	SHORT $LN3@ApplyState
	jmp	SHORT $LN4@ApplyState
$LN3@ApplyState:

; 1979 : 	ShiAssert(state >= 0 && state < MAXIMUM_MPR_STATE);
; 1980 : 
; 1981 : 	if(state != lastState)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	je	SHORT $LN4@ApplyState

; 1982 : 	{
; 1983 : 		lastState = state;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+20], eax

; 1984 : 
; 1985 : 		HRESULT hr = m_pD3DD->ApplyStateBlock(StateTable[state]);

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR ?StateTable@ContextMPR@@2PAIA[ecx*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+156]
	call	edx
	mov	DWORD PTR _hr$1[ebp], eax

; 1986 : 		if(!SUCCEEDED(hr)) INT3;

	cmp	DWORD PTR _hr$1[ebp], 0
	jge	SHORT $LN4@ApplyState
	int	3
$LN4@ApplyState:

; 1987 : 	}
; 1988 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ApplyStateBlock@ContextMPR@@QAEXH@Z ENDP		; ContextMPR::ApplyStateBlock
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_hr$1 = -8						; size = 4
_this$ = -4						; size = 4
_state$ = 8						; size = 4
?RestoreState@ContextMPR@@QAEXH@Z PROC			; ContextMPR::RestoreState
; _this$ = ecx

; 1991 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1992 : 	ShiAssert(state != -1);
; 1993 : 	ShiAssert(state >= 0 && state < MAXIMUM_MPR_STATE);
; 1994 : 
; 1995 : #if defined _DEBUG && defined _CONTEXT_ENABLE_RENDERSTATE_HIGHLIGHT_REPLACE
; 1996 : 	if(GetKeyState(VK_F4) & ~1)
; 1997 : 	{
; 1998 : 		if(!bEnableRenderStateHighlightReplace)
; 1999 : 			bEnableRenderStateHighlightReplace = true;
; 2000 : 	}
; 2001 : 	
; 2002 : 	if(bEnableRenderStateHighlightReplace && (state == bRenderStateHighlightReplaceTargetState))
; 2003 : 	{
; 2004 : 		state = STATE_SOLID;
; 2005 : 		m_colFG = 0xffff0000;
; 2006 : 		currentState = -1;
; 2007 : 	}
; 2008 : #endif
; 2009 : 
; 2010 : 	if(state != currentState)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	je	$LN5@RestoreSta

; 2011 : 	{
; 2012 : 	#ifdef _CONTEXT_TRACE_ALL
; 2013 : 		MonoPrint("ContextMPR::RestoreState(%d)\n",state);
; 2014 : 	#endif
; 2015 : 
; 2016 : 	#ifdef _CONTEXT_RECORD_USED_STATES
; 2017 : 		m_setStatesUsed.insert(state);
; 2018 : 	#endif
; 2019 : 
; 2020 : 		if(currentState == -1 || (StateTableInternal[currentState].SE_TEXTURING && !StateTableInternal[state].SE_TEXTURING))

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+16], -1
	je	SHORT $LN2@RestoreSta
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	imul	ecx, 20					; 00000014H
	movzx	edx, BYTE PTR ?StateTableInternal@ContextMPR@@2PAVState@1@A[ecx+1]
	test	edx, edx
	je	SHORT $LN3@RestoreSta
	mov	eax, DWORD PTR _state$[ebp]
	imul	eax, 20					; 00000014H
	movzx	ecx, BYTE PTR ?StateTableInternal@ContextMPR@@2PAVState@1@A[eax+1]
	test	ecx, ecx
	jne	SHORT $LN3@RestoreSta
$LN2@RestoreSta:

; 2021 : 			currentTexture1 = -1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], -1
$LN3@RestoreSta:

; 2022 : 
; 2023 : 		currentState = state;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 2024 : 
; 2025 : 		if(!bZBuffering)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+40], 0
	jne	SHORT $LN5@RestoreSta

; 2026 : 		{
; 2027 : 			FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 2028 : 
; 2029 : 			HRESULT hr = m_pD3DD->ApplyStateBlock(StateTable[currentState]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR ?StateTable@ContextMPR@@2PAIA[ecx*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+156]
	call	edx
	mov	DWORD PTR _hr$1[ebp], eax
$LN5@RestoreSta:

; 2030 : 			ShiAssert(SUCCEEDED(hr));
; 2031 : 		}
; 2032 : 	}
; 2033 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?RestoreState@ContextMPR@@QAEXH@Z ENDP			; ContextMPR::RestoreState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_hr$1 = -8						; size = 4
_this$ = -4						; size = 4
_texID$ = 8						; size = 4
?SetTexture2@ContextMPR@@QAEXH@Z PROC			; ContextMPR::SetTexture2
; _this$ = ecx

; 1868 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1869 : 	if(texID != lastTexture2)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _texID$[ebp]
	cmp	ecx, DWORD PTR [eax+36]
	je	SHORT $LN5@SetTexture

; 1870 : 	{
; 1871 : 		HRESULT hr;
; 1872 : 		
; 1873 : 		lastTexture2 = texID;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _texID$[ebp]
	mov	DWORD PTR [edx+36], eax

; 1874 : 
; 1875 : 		if(texID == -1)

	cmp	DWORD PTR _texID$[ebp], -1
	jne	SHORT $LN3@SetTexture

; 1876 : 			hr = m_pD3DD->SetTexture(1,NULL);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+140]
	call	eax
	mov	DWORD PTR _hr$1[ebp], eax

; 1877 : 		else

	jmp	SHORT $LN2@SetTexture
$LN3@SetTexture:

; 1878 : 			hr = m_pD3DD->SetTexture(1,(IDirectDrawSurface7 *)texID);

	mov	ecx, DWORD PTR _texID$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+140]
	call	ecx
	mov	DWORD PTR _hr$1[ebp], eax
$LN2@SetTexture:

; 1879 : 
; 1880 : 		if(!SUCCEEDED(hr)) INT3;

	cmp	DWORD PTR _hr$1[ebp], 0
	jge	SHORT $LN5@SetTexture
	int	3
$LN5@SetTexture:

; 1881 : 	}
; 1882 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetTexture2@ContextMPR@@QAEXH@Z ENDP			; ContextMPR::SetTexture2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_hr$1 = -8						; size = 4
_this$ = -4						; size = 4
_texID$ = 8						; size = 4
?SetTexture1@ContextMPR@@QAEXH@Z PROC			; ContextMPR::SetTexture1
; _this$ = ecx

; 1849 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1850 : 	if(texID != lastTexture1)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _texID$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	je	$LN5@SetTexture

; 1851 : 	{
; 1852 : 		HRESULT hr;
; 1853 : 		
; 1854 : 		lastTexture1 = texID;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _texID$[ebp]
	mov	DWORD PTR [edx+32], eax

; 1855 : 
; 1856 : 		if(texID == -1)

	cmp	DWORD PTR _texID$[ebp], -1
	jne	SHORT $LN3@SetTexture

; 1857 : 			hr = m_pD3DD->SetTexture(0,NULL);

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+140]
	call	eax
	mov	DWORD PTR _hr$1[ebp], eax

; 1858 : 		else

	jmp	SHORT $LN2@SetTexture
$LN3@SetTexture:

; 1859 : 			hr = m_pD3DD->SetTexture(0,(IDirectDrawSurface7 *)texID);

	mov	ecx, DWORD PTR _texID$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+140]
	call	ecx
	mov	DWORD PTR _hr$1[ebp], eax
$LN2@SetTexture:

; 1860 : 
; 1861 : 		if(!SUCCEEDED(hr)) INT3;

	cmp	DWORD PTR _hr$1[ebp], 0
	jge	SHORT $LN1@SetTexture
	int	3
$LN1@SetTexture:

; 1862 : 
; 1863 : 		m_pD3DD->SetTexture(1,NULL);

	push	0
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+140]
	call	ecx
$LN5@SetTexture:

; 1864 : 	}
; 1865 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetTexture1@ContextMPR@@QAEXH@Z ENDP			; ContextMPR::SetTexture1
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_hr$1 = -8						; size = 4
_this$ = -4						; size = 4
_texID$ = 8						; size = 4
?SelectTexture2@ContextMPR@@QAEXH@Z PROC		; ContextMPR::SelectTexture2
; _this$ = ecx

; 1925 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1926 : #ifdef _CONTEXT_TRACE_ALL
; 1927 : 	MonoPrint("ContextMPR::ApplyTexture2(0x%X)\n",texID);
; 1928 : #endif
; 1929 : 
; 1930 : 	if(texID)

	cmp	DWORD PTR _texID$[ebp], 0
	je	SHORT $LN4@SelectText

; 1931 : 		texID = (GLint)((TextureHandle *)texID)->m_pDDS;

	mov	eax, DWORD PTR _texID$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _texID$[ebp], ecx
$LN4@SelectText:

; 1932 : 
; 1933 : 	if(texID != currentTexture2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _texID$[ebp]
	cmp	eax, DWORD PTR [edx+28]
	je	SHORT $LN5@SelectText

; 1934 : 	{
; 1935 : 		currentTexture2 = texID;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _texID$[ebp]
	mov	DWORD PTR [ecx+28], edx

; 1936 : 
; 1937 : 	#ifdef _CONTEXT_ENABLE_STATS
; 1938 : 		m_stats.PutTexture(false);
; 1939 : 	#endif
; 1940 : 
; 1941 : 		if(!bZBuffering)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jne	SHORT $LN5@SelectText

; 1942 : 		{
; 1943 : 			// JB 010326 CTD (too much CPU)
; 1944 : 			if(g_bSlowButSafe && F4IsBadReadPtr((TextureHandle *)texID,sizeof(TextureHandle)))

	movzx	ecx, BYTE PTR ?g_bSlowButSafe@@3_NA	; g_bSlowButSafe
	test	ecx, ecx
	je	SHORT $LN1@SelectText
	push	48					; 00000030H
	mov	edx, DWORD PTR _texID$[ebp]
	push	edx
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@SelectText

; 1945 : 				return;

	jmp	SHORT $LN5@SelectText
$LN1@SelectText:

; 1946 : 
; 1947 : 			FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 1948 : 
; 1949 : 			HRESULT hr = m_pD3DD->SetTexture(1,(IDirectDrawSurface7 *)texID);

	mov	ecx, DWORD PTR _texID$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+140]
	call	ecx
	mov	DWORD PTR _hr$1[ebp], eax
$LN5@SelectText:

; 1950 : 			ShiAssert(SUCCEEDED(hr));
; 1951 : 		}
; 1952 : 	}	
; 1953 : #ifdef _CONTEXT_ENABLE_STATS
; 1954 : 	else m_stats.PutTexture(true);
; 1955 : #endif
; 1956 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SelectTexture2@ContextMPR@@QAEXH@Z ENDP		; ContextMPR::SelectTexture2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_hr$1 = -12						; size = 4
_OriginalID$ = -8					; size = 4
_this$ = -4						; size = 4
_texID$ = 8						; size = 4
?SelectTexture1@ContextMPR@@QAEXH@Z PROC		; ContextMPR::SelectTexture1
; _this$ = ecx

; 1885 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1886 : #ifdef _CONTEXT_TRACE_ALL
; 1887 : 	MonoPrint("ContextMPR::ApplyTexture1(0x%X)\n",texID);
; 1888 : #endif
; 1889 : 
; 1890 : 	GLint OriginalID=texID;

	mov	eax, DWORD PTR _texID$[ebp]
	mov	DWORD PTR _OriginalID$[ebp], eax

; 1891 : 
; 1892 : 	if(texID)

	cmp	DWORD PTR _texID$[ebp], 0
	je	SHORT $LN4@SelectText

; 1893 : 		texID = (GLint)((TextureHandle *)texID)->m_pDDS;

	mov	ecx, DWORD PTR _texID$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _texID$[ebp], edx
$LN4@SelectText:

; 1894 : 
; 1895 : 	if(texID != currentTexture1)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _texID$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	je	$LN3@SelectText

; 1896 : 	{
; 1897 : 		currentTexture1 = texID;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _texID$[ebp]
	mov	DWORD PTR [edx+24], eax

; 1898 : 
; 1899 : 	#ifdef _CONTEXT_ENABLE_STATS
; 1900 : 		m_stats.PutTexture(false);
; 1901 : 	#endif
; 1902 : 
; 1903 : 		if(!bZBuffering)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	jne	SHORT $LN3@SelectText

; 1904 : 		{
; 1905 : 			// JB 010326 CTD (too much CPU)
; 1906 : 			if(g_bSlowButSafe && F4IsBadReadPtr((TextureHandle *)texID,sizeof(TextureHandle)))

	movzx	edx, BYTE PTR ?g_bSlowButSafe@@3_NA	; g_bSlowButSafe
	test	edx, edx
	je	SHORT $LN1@SelectText
	push	48					; 00000030H
	mov	eax, DWORD PTR _texID$[ebp]
	push	eax
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@SelectText

; 1907 : 				return;

	jmp	SHORT $LN5@SelectText
$LN1@SelectText:

; 1908 : 
; 1909 : 			FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 1910 : 
; 1911 : 			HRESULT hr = m_pD3DD->SetTexture(0,(IDirectDrawSurface7 *)texID);

	mov	edx, DWORD PTR _texID$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+140]
	call	edx
	mov	DWORD PTR _hr$1[ebp], eax

; 1912 : 			ShiAssert(SUCCEEDED(hr));
; 1913 : 
; 1914 : 			m_pD3DD->SetTexture(1,NULL);

	push	0
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+140]
	call	edx
$LN3@SelectText:

; 1915 : 		}
; 1916 : 	}	
; 1917 : #ifdef _CONTEXT_ENABLE_STATS
; 1918 : 	else m_stats.PutTexture(true);
; 1919 : #endif
; 1920 : 
; 1921 : 	currentTexture2 = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], -1
$LN5@SelectText:

; 1922 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SelectTexture1@ContextMPR@@QAEXH@Z ENDP		; ContextMPR::SelectTexture1
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_color$ = 8						; size = 4
?SelectBackgroundColor@ContextMPR@@QAEXH@Z PROC		; ContextMPR::SelectBackgroundColor
; _this$ = ecx

; 1968 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1969 : 	if(color != m_colBG_Raw)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _color$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	je	SHORT $LN2@SelectBack

; 1970 : 	{
; 1971 : 		m_colBG_Raw = color;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _color$[ebp]
	mov	DWORD PTR [edx+12], eax

; 1972 : 		m_colBG = MPRColor2D3DRGBA(color);

	mov	ecx, DWORD PTR _color$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MPRColor2D3DRGBA@ContextMPR@@IAEKH@Z	; ContextMPR::MPRColor2D3DRGBA
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262400], eax
$LN2@SelectBack:

; 1973 : 	}
; 1974 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SelectBackgroundColor@ContextMPR@@QAEXH@Z ENDP		; ContextMPR::SelectBackgroundColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_color$ = 8						; size = 4
?SelectForegroundColor@ContextMPR@@QAEXH@Z PROC		; ContextMPR::SelectForegroundColor
; _this$ = ecx

; 1959 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1960 : 	if(color != m_colFG_Raw)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _color$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	je	SHORT $LN2@SelectFore

; 1961 : 	{
; 1962 : 		m_colFG_Raw = color;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _color$[ebp]
	mov	DWORD PTR [edx+8], eax

; 1963 : 		m_colFG = MPRColor2D3DRGBA(color);

	mov	ecx, DWORD PTR _color$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MPRColor2D3DRGBA@ContextMPR@@IAEKH@Z	; ContextMPR::MPRColor2D3DRGBA
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262396], eax
$LN2@SelectFore:

; 1964 : 	}
; 1965 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SelectForegroundColor@ContextMPR@@QAEXH@Z ENDP		; ContextMPR::SelectForegroundColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?SetupMPRState@ContextMPR@@QAEXH@Z PROC			; ContextMPR::SetupMPRState
; _this$ = ecx

; 1809 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1810 : 	if(flag & CHECK_PREVIOUS_STATE)

	mov	eax, DWORD PTR _flag$[ebp]
	and	eax, 1
	je	SHORT $LN7@SetupMPRSt

; 1811 : 	{
; 1812 : 		StateSetupCounter++;

	mov	ecx, DWORD PTR ?StateSetupCounter@ContextMPR@@2HA ; ContextMPR::StateSetupCounter
	add	ecx, 1
	mov	DWORD PTR ?StateSetupCounter@ContextMPR@@2HA, ecx ; ContextMPR::StateSetupCounter

; 1813 : 		if(StateSetupCounter > 1)

	cmp	DWORD PTR ?StateSetupCounter@ContextMPR@@2HA, 1 ; ContextMPR::StateSetupCounter
	jle	SHORT $LN6@SetupMPRSt

; 1814 : 			return;

	jmp	SHORT $LN8@SetupMPRSt
$LN6@SetupMPRSt:

; 1815 : 	}

	jmp	SHORT $LN5@SetupMPRSt
$LN7@SetupMPRSt:

; 1816 : 	else if(StateSetupCounter)

	cmp	DWORD PTR ?StateSetupCounter@ContextMPR@@2HA, 0 ; ContextMPR::StateSetupCounter
	je	SHORT $LN5@SetupMPRSt

; 1817 : 		CleanupMPRState();

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CleanupMPRState@ContextMPR@@IAEXH@Z	; ContextMPR::CleanupMPRState
$LN5@SetupMPRSt:

; 1818 : 
; 1819 : 	// Record one stateblock per poly type
; 1820 : 	MonoPrint("ContextMPR - Setting up state table\n");

	push	OFFSET ??_C@_0CF@KKHAFFIM@ContextMPR?5?9?5Setting?5up?5state?5ta@
	call	_MonoPrint
	add	esp, 4

; 1821 : 
; 1822 : 	for(currentState = STATE_SOLID; currentState < MAXIMUM_MPR_STATE; currentState++)

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	jmp	SHORT $LN3@SetupMPRSt
$LN2@SetupMPRSt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx
$LN3@SetupMPRSt:
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 38			; 00000026H
	jge	SHORT $LN1@SetupMPRSt

; 1823 : 		SetStateTable(currentState,flag);

	mov	ecx, DWORD PTR _flag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStateTable@ContextMPR@@IAEXHH@Z	; ContextMPR::SetStateTable
	jmp	SHORT $LN2@SetupMPRSt
$LN1@SetupMPRSt:

; 1824 : 
; 1825 : 	InvalidateState();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InvalidateState@ContextMPR@@QAEXXZ	; ContextMPR::InvalidateState
$LN8@SetupMPRSt:

; 1826 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetupMPRState@ContextMPR@@QAEXH@Z ENDP			; ContextMPR::SetupMPRState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_hr$ = -4						; size = 4
_lpFnPtr$ = 8						; size = 4
?FinishFrame@ContextMPR@@QAEXPAX@Z PROC			; ContextMPR::FinishFrame
; _this$ = ecx

; 434  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 435  : 	#ifdef _CONTEXT_TRACE_ALL
; 436  : 	MonoPrint("ContextMPR::FinishFrame(0x%X)\n",lpFnPtr);
; 437  : 	#endif
; 438  : 
; 439  : 	FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 440  : 
; 441  : 	//if( !bInBeginScene ) INT3;	// ASSO: break if not in BeginScene
; 442  : 	HRESULT hr = m_pD3DD->EndScene();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax

; 443  : 	bInBeginScene = false;	// ASSO:

	mov	BYTE PTR ?bInBeginScene@@3_NA, 0	; bInBeginScene

; 444  : 
; 445  : 	if(FAILED(hr))

	cmp	DWORD PTR _hr$[ebp], 0
	jge	$LN4@FinishFram

; 446  : 	{
; 447  : 		MonoPrint("ContextMPR::FinishFrame - EndScene failed 0x%X\n",hr);

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	push	OFFSET ??_C@_0DA@LPDBAKLM@ContextMPR?3?3FinishFrame?5?9?5EndSce@
	call	_MonoPrint
	add	esp, 8

; 448  : 
; 449  : 		if(hr == DDERR_SURFACELOST)

	cmp	DWORD PTR _hr$[ebp], -2005532222	; 887601c2H
	jne	SHORT $LN4@FinishFram

; 450  : 		{
; 451  : 			MonoPrint("ContextMPR::FinishFrame - Restoring all surfaces\n",hr);

	mov	ecx, DWORD PTR _hr$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DC@NBBIMCLB@ContextMPR?3?3FinishFrame?5?9?5Restor@
	call	_MonoPrint
	add	esp, 8

; 452  : 
; 453  : 			TheTextureBank.RestoreAll();

	call	?RestoreAll@TextureBankClass@@SAXXZ	; TextureBankClass::RestoreAll

; 454  : 			TheTerrTextures.RestoreAll();

	mov	ecx, OFFSET ?TheTerrTextures@@3VTextureDB@@A ; TheTerrTextures
	call	?RestoreAll@TextureDB@@QAEXXZ		; TextureDB::RestoreAll

; 455  : 			TheFarTextures.RestoreAll();

	mov	ecx, OFFSET ?TheFarTextures@@3VFarTexDB@@A ; TheFarTextures
	call	?RestoreAll@FarTexDB@@QAEXXZ		; FarTexDB::RestoreAll

; 456  : 
; 457  : 			if( !bInBeginScene ) INT3;	// ASSO: break if not in BeginScene

	movzx	edx, BYTE PTR ?bInBeginScene@@3_NA	; bInBeginScene
	test	edx, edx
	jne	SHORT $LN2@FinishFram
	int	3
$LN2@FinishFram:

; 458  : 			hr = m_pD3DD->EndScene();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax

; 459  : 			bInBeginScene = false;	// ASSO:

	mov	BYTE PTR ?bInBeginScene@@3_NA, 0	; bInBeginScene

; 460  : 
; 461  : 			if(FAILED(hr))

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN4@FinishFram

; 462  : 			{
; 463  : 				MonoPrint("ContextMPR::FinishFrame - Retry for EndScene failed 0x%X\n",hr);

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	push	OFFSET ??_C@_0DK@LMBIKOPJ@ContextMPR?3?3FinishFrame?5?9?5Retry?5@
	call	_MonoPrint
	add	esp, 8

; 464  : 				return;

	jmp	SHORT $LN5@FinishFram
$LN4@FinishFram:

; 465  : 			}
; 466  : 		}
; 467  : 	}
; 468  : 
; 469  : 	#ifdef _CONTEXT_ENABLE_STATS
; 470  : 	m_stats.StartFrame();
; 471  : 	#endif
; 472  : 
; 473  : 	ShiAssert(lpFnPtr == NULL);
; 474  : 	Stats();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Stats@ContextMPR@@IAEXXZ		; ContextMPR::Stats
$LN5@FinishFram:

; 475  : 
; 476  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?FinishFrame@ContextMPR@@QAEXPAX@Z ENDP			; ContextMPR::FinishFrame
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_this$ = -4						; size = 4
?StartFrame@ContextMPR@@QAEXXZ PROC			; ContextMPR::StartFrame
; _this$ = ecx

; 374  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 375  : 	#ifdef _CONTEXT_TRACE_ALL
; 376  : 	MonoPrint("ContextMPR::StartFrame()\n");
; 377  : 	#endif
; 378  : 
; 379  : 	// Returns false if render target unchanged
; 380  : 	if(m_pCtxDX->SetRenderTarget(m_pRenderTarget))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262364]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+262360]
	call	?SetRenderTarget@DXContext@@QAE_NPAUIDirectDrawSurface7@@@Z ; DXContext::SetRenderTarget
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@StartFrame

; 381  : 		UpdateViewport();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateViewport@ContextMPR@@IAEXXZ	; ContextMPR::UpdateViewport
$LN4@StartFrame:

; 382  : 
; 383  : 	InvalidateState();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InvalidateState@ContextMPR@@QAEXXZ	; ContextMPR::InvalidateState

; 384  : 
; 385  : 	// COBRA - RED - Passed in InvalidateState();
; 386  : 	//currentState = lastState = currentTexture1 = currentTexture2 = lastTexture1 = lastTexture2 = -1;
; 387  : 
; 388  : 	HRESULT hr;
; 389  : 	
; 390  : 	hr = m_pD3DD->Clear(NULL,NULL,D3DCLEAR_ZBUFFER,0,1.f,NULL);

	push	0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	0
	push	2
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+40]
	call	eax
	mov	DWORD PTR _hr$[ebp], eax

; 391  : //	if( bInBeginScene ) INT3;	// ASSO: break if already in BeginScene
; 392  : 	if( bInBeginScene ) m_pD3DD->EndScene(); // MD -- BUGBUG INT3;	// ASSO: break if already in BeginScene

	movzx	ecx, BYTE PTR ?bInBeginScene@@3_NA	; bInBeginScene
	test	ecx, ecx
	je	SHORT $LN3@StartFrame
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
$LN3@StartFrame:

; 393  : 	hr = m_pD3DD->BeginScene();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	mov	DWORD PTR _hr$[ebp], eax

; 394  : 	bInBeginScene = true;	// ASSO:

	mov	BYTE PTR ?bInBeginScene@@3_NA, 1	; bInBeginScene

; 395  : 
; 396  : 	if(FAILED(hr))

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@StartFrame

; 397  : 	{
; 398  : 		MonoPrint("ContextMPR::FinishFrame - BeginScene failed 0x%X\n",hr);

	mov	edx, DWORD PTR _hr$[ebp]
	push	edx
	push	OFFSET ??_C@_0DC@OCNOBFOG@ContextMPR?3?3FinishFrame?5?9?5BeginS@
	call	_MonoPrint
	add	esp, 8

; 399  : 
; 400  : 		if(hr == DDERR_SURFACELOST)

	cmp	DWORD PTR _hr$[ebp], -2005532222	; 887601c2H
	jne	SHORT $LN1@StartFrame

; 401  : 		{
; 402  : 			MonoPrint("ContextMPR::StartFrame - Restoring all surfaces\n",hr);

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	push	OFFSET ??_C@_0DB@KDPJANEM@ContextMPR?3?3StartFrame?5?9?5Restori@
	call	_MonoPrint
	add	esp, 8

; 403  : 
; 404  : 			TheTextureBank.RestoreAll();

	call	?RestoreAll@TextureBankClass@@SAXXZ	; TextureBankClass::RestoreAll

; 405  : 			TheTerrTextures.RestoreAll();

	mov	ecx, OFFSET ?TheTerrTextures@@3VTextureDB@@A ; TheTerrTextures
	call	?RestoreAll@TextureDB@@QAEXXZ		; TextureDB::RestoreAll

; 406  : 			TheFarTextures.RestoreAll();

	mov	ecx, OFFSET ?TheFarTextures@@3VFarTexDB@@A ; TheFarTextures
	call	?RestoreAll@FarTexDB@@QAEXXZ		; FarTexDB::RestoreAll

; 407  : 
; 408  : 			//if( !bInBeginScene ) INT3;	// ASSO: break if not in BeginScene
; 409  : 			hr = m_pD3DD->EndScene();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+24]
	call	eax
	mov	DWORD PTR _hr$[ebp], eax

; 410  : 			bInBeginScene = true;	// ASSO:

	mov	BYTE PTR ?bInBeginScene@@3_NA, 1	; bInBeginScene
$LN1@StartFrame:

; 411  : 
; 412  : 			/*if(FAILED(hr))
; 413  : 			{
; 414  : 				//UNLOCK_VB_MANAGER;
; 415  : 				MonoPrint("ContextMPR::StartFrame - Retry for BeginScene failed 0x%X\n",hr);
; 416  : 				return;
; 417  : 			}*/
; 418  : 		}
; 419  : 	}
; 420  : 
; 421  : 	#if defined _DEBUG && defined _CONTEXT_ENABLE_RENDERSTATE_HIGHLIGHT_REPLACE
; 422  : 	if(bEnableRenderStateHighlightReplace)
; 423  : 	{
; 424  : 		Sleep(1000);
; 425  : 		if(GetKeyState(VK_F4) & ~1)
; 426  : 			DebugBreak();
; 427  : 		bRenderStateHighlightReplaceTargetState++;
; 428  : 	}
; 429  : 	#endif
; 430  : 
; 431  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?StartFrame@ContextMPR@@QAEXXZ ENDP			; ContextMPR::StartFrame
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EndDraw@ContextMPR@@QAEXXZ PROC			; ContextMPR::EndDraw
; _this$ = ecx

; 368  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 369  : 	FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 370  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?EndDraw@ContextMPR@@QAEXXZ ENDP			; ContextMPR::EndDraw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?StartDraw@ContextMPR@@QAEXXZ PROC			; ContextMPR::StartDraw
; _this$ = ecx

; 357  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 358  : 
; 359  : 	// Returns false if render target unchanged
; 360  : 	if(m_pCtxDX->SetRenderTarget(m_pRenderTarget)){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262364]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+262360]
	call	?SetRenderTarget@DXContext@@QAE_NPAUIDirectDrawSurface7@@@Z ; DXContext::SetRenderTarget
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@StartDraw

; 361  : 		m_pD3DD->Clear(NULL,NULL,D3DCLEAR_ZBUFFER,0,1.f,NULL);

	push	0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	0
	push	2
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+40]
	call	eax
$LN1@StartDraw:

; 362  : 	}
; 363  : 	UpdateViewport();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateViewport@ContextMPR@@IAEXXZ	; ContextMPR::UpdateViewport

; 364  : 	InvalidateState();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InvalidateState@ContextMPR@@QAEXXZ	; ContextMPR::InvalidateState

; 365  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?StartDraw@ContextMPR@@QAEXXZ ENDP			; ContextMPR::StartDraw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_hr$ = -12						; size = 4
_this$ = -8						; size = 4
_dwClearFlags$ = -4					; size = 4
_ClearInfo$ = 8						; size = 2
?ClearBuffers@ContextMPR@@QAEXG@Z PROC			; ContextMPR::ClearBuffers
; _this$ = ecx

; 342  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 343  : 	#ifdef _CONTEXT_TRACE_ALL
; 344  : 	MonoPrint("ContextMPR::ClearBuffers(0x%X)\n",ClearInfo);
; 345  : 	#endif
; 346  : 
; 347  : 	DWORD dwClearFlags = 0;

	mov	DWORD PTR _dwClearFlags$[ebp], 0

; 348  : 	if(ClearInfo & MPR_CI_DRAW_BUFFER) dwClearFlags |= D3DCLEAR_TARGET;

	movzx	eax, WORD PTR _ClearInfo$[ebp]
	and	eax, 1
	je	SHORT $LN2@ClearBuffe
	mov	ecx, DWORD PTR _dwClearFlags$[ebp]
	or	ecx, 1
	mov	DWORD PTR _dwClearFlags$[ebp], ecx
$LN2@ClearBuffe:

; 349  : 	if(ClearInfo & MPR_CI_ZBUFFER) dwClearFlags |= D3DCLEAR_ZBUFFER;

	movzx	edx, WORD PTR _ClearInfo$[ebp]
	and	edx, 4
	je	SHORT $LN1@ClearBuffe
	mov	eax, DWORD PTR _dwClearFlags$[ebp]
	or	eax, 2
	mov	DWORD PTR _dwClearFlags$[ebp], eax
$LN1@ClearBuffe:

; 350  : 
; 351  : 	HRESULT hr = m_pD3DD->Clear(NULL,NULL,dwClearFlags,m_colBG,1.0f,NULL);

	push	0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262400]
	push	edx
	mov	eax, DWORD PTR _dwClearFlags$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+40]
	call	eax
	mov	DWORD PTR _hr$[ebp], eax

; 352  : 	ShiAssert(SUCCEEDED(hr));
; 353  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ClearBuffers@ContextMPR@@QAEXG@Z ENDP			; ContextMPR::ClearBuffers
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
tv68 = -2						; size = 1
_bNewVal$1 = -1						; size = 1
_State$ = 8						; size = 2
_Value$ = 12						; size = 4
?SetStateInternal@ContextMPR@@QAEXGK@Z PROC		; ContextMPR::SetStateInternal
; _this$ = ecx

; 880  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 881  : 	switch(State)

	movzx	eax, WORD PTR _State$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	cmp	DWORD PTR tv65[ebp], 0
	jle	$LN14@SetStateIn
	cmp	DWORD PTR tv65[ebp], 2
	jle	SHORT $LN10@SetStateIn
	jmp	$LN14@SetStateIn

; 882  : 	{
; 883  : 		case MPR_STA_NONE:
; 884  : 		{
; 885  : 			break;

	jmp	$LN14@SetStateIn
$LN10@SetStateIn:

; 886  : 		}
; 887  : 
; 888  : 		case MPR_STA_DISABLES:
; 889  : 		case MPR_STA_ENABLES:
; 890  : 		{
; 891  : 			bool bNewVal = (State == MPR_STA_ENABLES) ? true : false;

	movzx	ecx, WORD PTR _State$[ebp]
	cmp	ecx, 1
	jne	SHORT $LN16@SetStateIn
	mov	BYTE PTR tv68[ebp], 1
	jmp	SHORT $LN17@SetStateIn
$LN16@SetStateIn:
	mov	BYTE PTR tv68[ebp], 0
$LN17@SetStateIn:
	mov	dl, BYTE PTR tv68[ebp]
	mov	BYTE PTR _bNewVal$1[ebp], dl

; 892  : 
; 893  : 			if(Value & MPR_SE_SCISSORING)

	mov	eax, DWORD PTR _Value$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN9@SetStateIn

; 894  : 				StateTableInternal[currentState].SE_SCISSORING = bNewVal;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	imul	edx, 20					; 00000014H
	mov	al, BYTE PTR _bNewVal$1[ebp]
	mov	BYTE PTR ?StateTableInternal@ContextMPR@@2PAVState@1@A[edx+8], al
$LN9@SetStateIn:

; 895  : 
; 896  : 			if(Value & MPR_SE_MODULATION)

	mov	ecx, DWORD PTR _Value$[ebp]
	and	ecx, 4
	je	SHORT $LN8@SetStateIn

; 897  : 				StateTableInternal[currentState].SE_MODULATION = bNewVal;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	imul	eax, 20					; 00000014H
	mov	cl, BYTE PTR _bNewVal$1[ebp]
	mov	BYTE PTR ?StateTableInternal@ContextMPR@@2PAVState@1@A[eax+2], cl
$LN8@SetStateIn:

; 898  : 
; 899  : 			if(Value & MPR_SE_TEXTURING)

	mov	edx, DWORD PTR _Value$[ebp]
	and	edx, 2
	je	SHORT $LN7@SetStateIn

; 900  : 				StateTableInternal[currentState].SE_TEXTURING = bNewVal;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	imul	ecx, 20					; 00000014H
	mov	dl, BYTE PTR _bNewVal$1[ebp]
	mov	BYTE PTR ?StateTableInternal@ContextMPR@@2PAVState@1@A[ecx+1], dl
$LN7@SetStateIn:

; 901  : 
; 902  : 			if(Value & MPR_SE_SHADING)

	mov	eax, DWORD PTR _Value$[ebp]
	and	eax, 1
	je	SHORT $LN6@SetStateIn

; 903  : 				StateTableInternal[currentState].SE_SHADING = bNewVal;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	imul	edx, 20					; 00000014H
	mov	al, BYTE PTR _bNewVal$1[ebp]
	mov	BYTE PTR ?StateTableInternal@ContextMPR@@2PAVState@1@A[edx], al
$LN6@SetStateIn:

; 904  : 
; 905  : 			if(Value & MPR_SE_Z_BUFFERING)

	mov	ecx, DWORD PTR _Value$[ebp]
	and	ecx, 8
	je	SHORT $LN5@SetStateIn

; 906  : 				StateTableInternal[currentState].SE_Z_BUFFERING = bNewVal;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	imul	eax, 20					; 00000014H
	mov	cl, BYTE PTR _bNewVal$1[ebp]
	mov	BYTE PTR ?StateTableInternal@ContextMPR@@2PAVState@1@A[eax+3], cl
$LN5@SetStateIn:

; 907  : 
; 908  : 			if(Value & MPR_SE_Z_WRITE)

	mov	edx, DWORD PTR _Value$[ebp]
	and	edx, 512				; 00000200H
	je	SHORT $LN4@SetStateIn

; 909  : 				StateTableInternal[currentState].SE_Z_WRITE = bNewVal;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	imul	ecx, 20					; 00000014H
	mov	dl, BYTE PTR _bNewVal$1[ebp]
	mov	BYTE PTR ?StateTableInternal@ContextMPR@@2PAVState@1@A[ecx+4], dl
$LN4@SetStateIn:

; 910  : 
; 911  : 			if(Value & MPR_SE_FILTERING)

	mov	eax, DWORD PTR _Value$[ebp]
	and	eax, 256				; 00000100H
	je	SHORT $LN3@SetStateIn

; 912  : 				StateTableInternal[currentState].SE_FILTERING = bNewVal;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	imul	edx, 20					; 00000014H
	mov	al, BYTE PTR _bNewVal$1[ebp]
	mov	BYTE PTR ?StateTableInternal@ContextMPR@@2PAVState@1@A[edx+11], al
$LN3@SetStateIn:

; 913  : 
; 914  : 			if(Value & MPR_SE_ALPHA)

	mov	ecx, DWORD PTR _Value$[ebp]
	and	ecx, 64					; 00000040H
	je	SHORT $LN2@SetStateIn

; 915  : 				StateTableInternal[currentState].SE_ALPHA = bNewVal;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	imul	eax, 20					; 00000014H
	mov	cl, BYTE PTR _bNewVal$1[ebp]
	mov	BYTE PTR ?StateTableInternal@ContextMPR@@2PAVState@1@A[eax+12], cl
$LN2@SetStateIn:

; 916  : 
; 917  : 			if(Value & MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE)

	mov	edx, DWORD PTR _Value$[ebp]
	and	edx, 1024				; 00000400H
	je	SHORT $LN14@SetStateIn

; 918  : 				StateTableInternal[currentState].SE_NON_PERSPECTIVE_CORRECTION_MODE = bNewVal;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	imul	ecx, 20					; 00000014H
	mov	dl, BYTE PTR _bNewVal$1[ebp]
	mov	BYTE PTR ?StateTableInternal@ContextMPR@@2PAVState@1@A[ecx+13], dl
$LN14@SetStateIn:

; 919  : 
; 920  : 			break;
; 921  : 		}
; 922  : 	}
; 923  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetStateInternal@ContextMPR@@QAEXGK@Z ENDP		; ContextMPR::SetStateInternal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
tv674 = -12						; size = 4
tv73 = -8						; size = 4
_this$ = -4						; size = 4
_State$ = 8						; size = 2
_Value$ = 12						; size = 4
?SetState@ContextMPR@@QAEXGK@Z PROC			; ContextMPR::SetState
; _this$ = ecx

; 489  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 490  : 	if(m_bUseSetStateInternal)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	je	SHORT $LN57@SetState

; 491  : 	{
; 492  : 		SetStateInternal(State,Value);

	mov	edx, DWORD PTR _Value$[ebp]
	push	edx
	movzx	eax, WORD PTR _State$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStateInternal@ContextMPR@@QAEXGK@Z	; ContextMPR::SetStateInternal

; 493  : 		return;

	jmp	$LN58@SetState
$LN57@SetState:

; 494  : 	}
; 495  : 
; 496  : 	#ifdef _CONTEXT_TRACE_ALL
; 497  : 	MonoPrint("ContextMPR::SetState(%d,0x%X)\n",State,Value);
; 498  : 	#endif
; 499  : 	ShiAssert(FALSE == F4IsBadReadPtr(m_pD3DD,sizeof *m_pD3DD));
; 500  : 
; 501  : 	if (!m_pD3DD)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+262380], 0
	jne	SHORT $LN56@SetState

; 502  : 		return;

	jmp	$LN58@SetState
$LN56@SetState:

; 503  : 
; 504  : 	switch(State)

	movzx	edx, WORD PTR _State$[ebp]
	mov	DWORD PTR tv73[ebp], edx
	mov	eax, DWORD PTR tv73[ebp]
	sub	eax, 1
	mov	DWORD PTR tv73[ebp], eax
	cmp	DWORD PTR tv73[ebp], 15			; 0000000fH
	ja	$LN58@SetState
	mov	ecx, DWORD PTR tv73[ebp]
	jmp	DWORD PTR $LN61@SetState[ecx*4]
$LN53@SetState:

; 505  : 	{
; 506  : 		case MPR_STA_ENABLES:
; 507  : 		{
; 508  : 			if(Value & MPR_SE_MODULATION)

	mov	edx, DWORD PTR _Value$[ebp]
	and	edx, 4
	je	SHORT $LN52@SetState

; 509  : 			{
; 510  : 				FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 511  : 
; 512  : 				m_pD3DD->SetTextureStageState(0,D3DTSS_COLOROP,D3DTOP_MODULATE);

	push	4
	push	1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+148]
	call	edx
$LN52@SetState:

; 513  : 			}
; 514  : 
; 515  : 			if(Value & MPR_SE_ALPHA)

	mov	eax, DWORD PTR _Value$[ebp]
	and	eax, 64					; 00000040H
	je	$LN51@SetState

; 516  : 			{
; 517  : 				FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 518  : 
; 519  : 				if(m_pCtxDX->m_pD3DHWDeviceDesc->dpcTriCaps.dwAlphaCmpCaps & D3DCMP_GREATEREQUAL)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262360]
	mov	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR [eax+84]
	and	ecx, 7
	je	SHORT $LN50@SetState

; 520  : 				{
; 521  : 					m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHATESTENABLE,TRUE);

	push	1
	push	15					; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+80]
	call	ecx

; 522  : 					m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHAREF,(DWORD)1);

	push	1
	push	24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+80]
	call	ecx

; 523  : 					m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHAFUNC,D3DCMP_GREATEREQUAL);

	push	7
	push	25					; 00000019H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+80]
	call	ecx
$LN50@SetState:

; 524  : 				}
; 525  : 
; 526  : 				m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE,TRUE);

	push	1
	push	27					; 0000001bH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+80]
	call	ecx

; 527  : 				m_pD3DD->SetRenderState(D3DRENDERSTATE_SRCBLEND,D3DBLEND_SRCALPHA);

	push	5
	push	19					; 00000013H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+80]
	call	ecx

; 528  : 				m_pD3DD->SetRenderState(D3DRENDERSTATE_DESTBLEND,D3DBLEND_INVSRCALPHA);

	push	6
	push	20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+80]
	call	ecx

; 529  : 				m_pD3DD->SetTextureStageState(0,D3DTSS_ALPHAOP,D3DTOP_MODULATE);

	push	4
	push	4
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+148]
	call	ecx
$LN51@SetState:

; 530  : 			}
; 531  : 
; 532  : 			// ASSO: new color blending state for 3D pit HUD
; 533  : 			if(Value & MPR_SE_CHROMA2)

	mov	edx, DWORD PTR _Value$[ebp]
	and	edx, 2048				; 00000800H
	je	$LN49@SetState

; 534  : 			{
; 535  : 				FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 536  : 
; 537  : 				if(m_pCtxDX->m_pD3DHWDeviceDesc->dpcTriCaps.dwAlphaCmpCaps & D3DCMP_GREATEREQUAL)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262360]
	mov	edx, DWORD PTR [ecx+68]
	mov	eax, DWORD PTR [edx+84]
	and	eax, 7
	je	SHORT $LN48@SetState

; 538  : 				{
; 539  : 					m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHATESTENABLE,TRUE);

	push	1
	push	15					; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+80]
	call	eax

; 540  : 					m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHAREF,(DWORD)1);

	push	1
	push	24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+80]
	call	eax

; 541  : 					m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHAFUNC,D3DCMP_GREATEREQUAL);

	push	7
	push	25					; 00000019H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+80]
	call	eax
$LN48@SetState:

; 542  : 				}
; 543  : 				// Original CODE
; 544  : /*				m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE,TRUE);
; 545  : 				m_pD3DD->SetRenderState(D3DRENDERSTATE_SRCBLEND,D3DBLEND_ONE);
; 546  : 				m_pD3DD->SetRenderState(D3DRENDERSTATE_DESTBLEND,D3DBLEND_ONE);
; 547  : 				m_pD3DD->SetTextureStageState(0,D3DTSS_COLOROP,D3DTOP_SELECTARG1);*/
; 548  : 				m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE,TRUE);

	push	1
	push	27					; 0000001bH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+80]
	call	eax

; 549  : 				m_pD3DD->SetRenderState(D3DRENDERSTATE_SRCBLEND,D3DBLEND_SRCALPHA);

	push	5
	push	19					; 00000013H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+80]
	call	eax

; 550  : 				m_pD3DD->SetRenderState(D3DRENDERSTATE_DESTBLEND,D3DBLEND_ONE);

	push	2
	push	20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+80]
	call	eax

; 551  : 				m_pD3DD->SetTextureStageState(0,D3DTSS_COLOROP,D3DTOP_SELECTARG1);

	push	2
	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+148]
	call	eax

; 552  : 				m_pD3DD->SetTextureStageState(0,D3DTSS_ALPHAOP,D3DTOP_MODULATE);

	push	4
	push	4
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+148]
	call	eax
$LN49@SetState:

; 553  : 			}
; 554  : 
; 555  : 			if(Value & MPR_SE_CHROMA)

	mov	ecx, DWORD PTR _Value$[ebp]
	and	ecx, 128				; 00000080H
	je	$LN47@SetState

; 556  : 			{
; 557  : 				FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 558  : 
; 559  : 				if(m_pCtxDX->m_pD3DHWDeviceDesc->dpcTriCaps.dwAlphaCmpCaps & D3DCMP_GREATEREQUAL)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262360]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR [ecx+84]
	and	edx, 7
	je	SHORT $LN46@SetState

; 560  : 				{
; 561  : 					m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHATESTENABLE,TRUE);

	push	1
	push	15					; 0000000fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+80]
	call	edx

; 562  : 					m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHAREF,(DWORD)1);

	push	1
	push	24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+80]
	call	edx

; 563  : 					m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHAFUNC,D3DCMP_GREATEREQUAL);

	push	7
	push	25					; 00000019H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+80]
	call	edx
$LN46@SetState:

; 564  : 				}
; 565  : 
; 566  : 				m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE,TRUE);

	push	1
	push	27					; 0000001bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+80]
	call	edx

; 567  : 				m_pD3DD->SetRenderState(D3DRENDERSTATE_SRCBLEND,D3DBLEND_SRCALPHA);

	push	5
	push	19					; 00000013H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+80]
	call	edx

; 568  : 				m_pD3DD->SetRenderState(D3DRENDERSTATE_DESTBLEND,D3DBLEND_INVSRCALPHA);

	push	6
	push	20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+80]
	call	edx

; 569  : 				m_pD3DD->SetTextureStageState(0,D3DTSS_ALPHAOP,D3DTOP_SELECTARG1);

	push	2
	push	4
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+148]
	call	edx
$LN47@SetState:

; 570  : 			}
; 571  : 
; 572  : 			if(Value & MPR_SE_CHROMA_ALPHATEST)	//Wombat778 3-30-04 new state to avoid blue line around chroma gifs

	mov	eax, DWORD PTR _Value$[ebp]
	and	eax, 4096				; 00001000H
	je	$LN45@SetState

; 573  : 			{
; 574  : 				FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 575  : 
; 576  : 				if(m_pCtxDX->m_pD3DHWDeviceDesc->dpcTriCaps.dwAlphaCmpCaps & D3DCMP_GREATEREQUAL)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262360]
	mov	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR [eax+84]
	and	ecx, 7
	je	SHORT $LN44@SetState

; 577  : 				{
; 578  : 					m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHATESTENABLE,TRUE);					

	push	1
	push	15					; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+80]
	call	ecx

; 579  : 					m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHAREF,(DWORD)0xBF);

	push	191					; 000000bfH
	push	24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+80]
	call	ecx

; 580  : 					m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHAFUNC,D3DCMP_GREATER);

	push	5
	push	25					; 00000019H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+80]
	call	ecx
$LN44@SetState:

; 581  : 				}
; 582  : 
; 583  : 				m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE,TRUE);

	push	1
	push	27					; 0000001bH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+80]
	call	ecx

; 584  : 				m_pD3DD->SetRenderState(D3DRENDERSTATE_SRCBLEND,D3DBLEND_SRCALPHA);

	push	5
	push	19					; 00000013H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+80]
	call	ecx

; 585  : 				m_pD3DD->SetRenderState(D3DRENDERSTATE_DESTBLEND,D3DBLEND_INVSRCALPHA);

	push	6
	push	20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+80]
	call	ecx

; 586  : 				m_pD3DD->SetTextureStageState(0,D3DTSS_ALPHAOP,D3DTOP_SELECTARG1);

	push	2
	push	4
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+148]
	call	ecx
$LN45@SetState:

; 587  : 			}
; 588  : 
; 589  : 			if(Value & MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE)

	mov	edx, DWORD PTR _Value$[ebp]
	and	edx, 1024				; 00000400H
	je	SHORT $LN43@SetState

; 590  : 			{
; 591  : 				FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 592  : 
; 593  : 				m_pD3DD->SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE,FALSE);

	push	0
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+80]
	call	edx
$LN43@SetState:

; 594  : 			}
; 595  : 
; 596  : 			if(Value & MPR_SE_SHADING)

	mov	eax, DWORD PTR _Value$[ebp]
	and	eax, 1
	je	SHORT $LN42@SetState

; 597  : 			{
; 598  : 				FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 599  : 
; 600  : 				m_pD3DD->SetRenderState(D3DRENDERSTATE_SHADEMODE,D3DSHADE_GOURAUD);

	push	2
	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+80]
	call	eax
$LN42@SetState:

; 601  : 			}
; 602  : 
; 603  : 			if((Value & MPR_SE_SCISSORING) && !m_bEnableScissors)

	mov	ecx, DWORD PTR _Value$[ebp]
	and	ecx, 32					; 00000020H
	je	SHORT $LN41@SetState
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+262424]
	test	eax, eax
	jne	SHORT $LN41@SetState

; 604  : 			{
; 605  : 				FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 606  : 
; 607  : 				m_bEnableScissors = true;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+262424], 1

; 608  : 				UpdateViewport();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateViewport@ContextMPR@@IAEXXZ	; ContextMPR::UpdateViewport
$LN41@SetState:

; 609  : 			}
; 610  : 
; 611  : 			if(Value & MPR_SE_Z_BUFFERING)

	mov	edx, DWORD PTR _Value$[ebp]
	and	edx, 8
	je	SHORT $LN40@SetState

; 612  : 			{
; 613  : 				FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 614  : 
; 615  : 				m_pD3DD->SetRenderState(D3DRENDERSTATE_ZFUNC,D3DCMP_LESSEQUAL); 

	push	4
	push	23					; 00000017H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+80]
	call	edx
$LN40@SetState:

; 616  : 			}
; 617  : 
; 618  : 			if(Value & MPR_SE_Z_WRITE)

	mov	eax, DWORD PTR _Value$[ebp]
	and	eax, 512				; 00000200H
	je	SHORT $LN39@SetState

; 619  : 			{
; 620  : 				FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 621  : 
; 622  : 				m_pD3DD->SetRenderState(D3DRENDERSTATE_ZWRITEENABLE,TRUE);

	push	1
	push	14					; 0000000eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+80]
	call	eax
$LN39@SetState:

; 623  : 			}
; 624  : 
; 625  : 			break;

	jmp	$LN58@SetState
$LN38@SetState:

; 626  : 		}
; 627  : 
; 628  : 		case MPR_STA_DISABLES:
; 629  : 		{
; 630  : 			if(Value & MPR_SE_MODULATION)

	mov	ecx, DWORD PTR _Value$[ebp]
	and	ecx, 4
	je	SHORT $LN37@SetState

; 631  : 			{
; 632  : 				FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 633  : 
; 634  : 				m_pD3DD->SetTextureStageState(0,D3DTSS_COLOROP,D3DTOP_SELECTARG1);

	push	2
	push	1
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+148]
	call	ecx
$LN37@SetState:

; 635  : 			}
; 636  : 
; 637  : 			if(Value & MPR_SE_TEXTURING)

	mov	edx, DWORD PTR _Value$[ebp]
	and	edx, 2
	je	SHORT $LN36@SetState

; 638  : 			{
; 639  : 				FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 640  : 
; 641  : 				m_pD3DD->SetTexture(0,NULL);

	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+140]
	call	edx
$LN36@SetState:

; 642  : 			}
; 643  : 
; 644  : 			if(Value & MPR_SE_SHADING)

	mov	eax, DWORD PTR _Value$[ebp]
	and	eax, 1
	je	SHORT $LN35@SetState

; 645  : 			{
; 646  : 				FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 647  : 
; 648  : 				m_pD3DD->SetRenderState(D3DRENDERSTATE_SHADEMODE,D3DSHADE_FLAT);

	push	1
	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+80]
	call	eax
$LN35@SetState:

; 649  : 			}
; 650  : 
; 651  : 			if(Value & MPR_SE_FILTERING)

	mov	ecx, DWORD PTR _Value$[ebp]
	and	ecx, 256				; 00000100H
	je	SHORT $LN34@SetState

; 652  : 			{
; 653  : 				FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 654  : 
; 655  : 				m_pD3DD->SetTextureStageState(0,D3DTSS_MAGFILTER,D3DTFG_POINT);

	push	1
	push	16					; 00000010H
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+148]
	call	ecx

; 656  : 				m_pD3DD->SetTextureStageState(0,D3DTSS_MINFILTER,D3DTFN_POINT);

	push	1
	push	17					; 00000011H
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+148]
	call	ecx
$LN34@SetState:

; 657  : 			}
; 658  : 
; 659  : 			if(Value & MPR_SE_ALPHA)

	mov	edx, DWORD PTR _Value$[ebp]
	and	edx, 64					; 00000040H
	je	$LN33@SetState

; 660  : 			{
; 661  : 				FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 662  : 
; 663  : 				m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE,FALSE);

	push	0
	push	27					; 0000001bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+80]
	call	edx

; 664  : 				m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHATESTENABLE,FALSE);

	push	0
	push	15					; 0000000fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+80]
	call	edx

; 665  : 				m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHAFUNC,D3DCMP_ALWAYS);

	push	8
	push	25					; 00000019H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+80]
	call	edx

; 666  : 				m_pD3DD->SetTextureStageState(0,D3DTSS_ALPHAOP,D3DTOP_SELECTARG1);

	push	2
	push	4
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+148]
	call	edx
$LN33@SetState:

; 667  : 			}
; 668  : 
; 669  : 			if(Value & MPR_SE_NON_PERSPECTIVE_CORRECTION_MODE)

	mov	eax, DWORD PTR _Value$[ebp]
	and	eax, 1024				; 00000400H
	je	SHORT $LN32@SetState

; 670  : 			{
; 671  : 				FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 672  : 
; 673  : 				m_pD3DD->SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE,TRUE);

	push	1
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+80]
	call	eax
$LN32@SetState:

; 674  : 			}
; 675  : 
; 676  : 			if((Value & MPR_SE_SCISSORING) && m_bEnableScissors)

	mov	ecx, DWORD PTR _Value$[ebp]
	and	ecx, 32					; 00000020H
	je	SHORT $LN31@SetState
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+262424]
	test	eax, eax
	je	SHORT $LN31@SetState

; 677  : 			{
; 678  : 				FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 679  : 
; 680  : 				m_bEnableScissors = false;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+262424], 0

; 681  : 				UpdateViewport();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateViewport@ContextMPR@@IAEXXZ	; ContextMPR::UpdateViewport
$LN31@SetState:

; 682  : 			}
; 683  : 
; 684  : 			if(Value & MPR_SE_Z_BUFFERING)

	mov	edx, DWORD PTR _Value$[ebp]
	and	edx, 8
	je	SHORT $LN30@SetState

; 685  : 			{
; 686  : 				FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 687  : 
; 688  : 				m_pD3DD->SetRenderState(D3DRENDERSTATE_ZFUNC,D3DCMP_ALWAYS);

	push	8
	push	23					; 00000017H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+80]
	call	edx
$LN30@SetState:

; 689  : 			}
; 690  : 
; 691  : 			if(Value & MPR_SE_Z_WRITE)

	mov	eax, DWORD PTR _Value$[ebp]
	and	eax, 512				; 00000200H
	je	SHORT $LN29@SetState

; 692  : 			{
; 693  : 				FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 694  : 
; 695  : 				m_pD3DD->SetRenderState(D3DRENDERSTATE_ZWRITEENABLE,FALSE);

	push	0
	push	14					; 0000000eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+80]
	call	eax
$LN29@SetState:

; 696  : 			}
; 697  : 
; 698  : 			break;

	jmp	$LN58@SetState
$LN28@SetState:

; 699  : 		}
; 700  : 
; 701  : 		case MPR_STA_SRC_BLEND_FUNCTION:
; 702  : 		{
; 703  : 			FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 704  : 
; 705  : 			m_pD3DD->SetRenderState(D3DRENDERSTATE_SRCBLEND,Value);

	mov	ecx, DWORD PTR _Value$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+80]
	call	ecx

; 706  : 
; 707  : 			break;

	jmp	$LN58@SetState
$LN27@SetState:

; 708  : 		}
; 709  : 
; 710  : 		case MPR_STA_DST_BLEND_FUNCTION:
; 711  : 		{
; 712  : 			FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 713  : 
; 714  : 			m_pD3DD->SetRenderState(D3DRENDERSTATE_DESTBLEND,Value);

	mov	edx, DWORD PTR _Value$[ebp]
	push	edx
	push	20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+80]
	call	edx

; 715  : 
; 716  : 			break;

	jmp	$LN58@SetState
$LN26@SetState:

; 717  : 		}
; 718  : 
; 719  : 		case MPR_STA_ALPHA_OP_FUNCTION:
; 720  : 		{
; 721  : 			FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 722  : 
; 723  : 			m_pD3DD->SetTextureStageState(0,D3DTSS_ALPHAOP,Value);

	mov	eax, DWORD PTR _Value$[ebp]
	push	eax
	push	4
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+148]
	call	eax

; 724  : 
; 725  : 			break;

	jmp	$LN58@SetState
$LN25@SetState:

; 726  : 		}
; 727  : 
; 728  : 		case MPR_STA_COLOR_OP_FUNCTION:
; 729  : 		{
; 730  : 			FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 731  : 
; 732  : 			m_pD3DD->SetTextureStageState(0,D3DTSS_COLOROP,Value);

	mov	ecx, DWORD PTR _Value$[ebp]
	push	ecx
	push	1
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+148]
	call	ecx

; 733  : 
; 734  : 			break;

	jmp	$LN58@SetState
$LN24@SetState:

; 735  : 		}
; 736  : 
; 737  : 		case MPR_STA_TEXTURE_FACTOR:
; 738  : 		{
; 739  : 			FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 740  : 
; 741  : 			m_pD3DD->SetRenderState(D3DRENDERSTATE_TEXTUREFACTOR,Value);

	mov	edx, DWORD PTR _Value$[ebp]
	push	edx
	push	60					; 0000003cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+80]
	call	edx

; 742  : 
; 743  : 			break;

	jmp	$LN58@SetState
$LN23@SetState:

; 744  : 		}
; 745  : 		
; 746  : 		case MPR_STA_TEX_FILTER:
; 747  : 		{
; 748  : 			FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 749  : 
; 750  : 			switch(Value)

	mov	eax, DWORD PTR _Value$[ebp]
	mov	DWORD PTR tv674[ebp], eax
	cmp	DWORD PTR tv674[ebp], 14		; 0000000eH
	ja	$LN21@SetState
	mov	ecx, DWORD PTR tv674[ebp]
	movzx	edx, BYTE PTR $LN60@SetState[ecx]
	jmp	DWORD PTR $LN62@SetState[edx*4]
$LN20@SetState:

; 751  : 			{
; 752  : 				case MPR_TX_NONE:
; 753  : 				{
; 754  : 					m_pD3DD->SetTextureStageState(0,D3DTSS_MAGFILTER,D3DTFG_POINT);

	push	1
	push	16					; 00000010H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+148]
	call	edx

; 755  : 					m_pD3DD->SetTextureStageState(0,D3DTSS_MINFILTER,D3DTFN_POINT);

	push	1
	push	17					; 00000011H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+148]
	call	edx

; 756  : 					break;

	jmp	$LN21@SetState
$LN19@SetState:

; 757  : 				}
; 758  : 
; 759  : 				case MPR_TX_BILINEAR:
; 760  : 				case MPR_TX_BILINEAR_NOCLAMP:
; 761  : 				{
; 762  : 					if(DisplayOptions.bAnisotropicFiltering)

	movzx	eax, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+13
	test	eax, eax
	je	SHORT $LN18@SetState

; 763  : 					{
; 764  : 						m_pD3DD->SetTextureStageState(0,D3DTSS_MAGFILTER,D3DTFG_ANISOTROPIC);

	push	5
	push	16					; 00000010H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+148]
	call	eax

; 765  : 						m_pD3DD->SetTextureStageState(0,D3DTSS_MINFILTER,D3DTFN_ANISOTROPIC);

	push	3
	push	17					; 00000011H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+148]
	call	eax

; 766  : 						m_pD3DD->SetTextureStageState(0,D3DTSS_MAXANISOTROPY,m_pCtxDX->m_pD3DHWDeviceDesc->dwMaxAnisotropy);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262360]
	mov	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR [eax+148]
	push	ecx
	push	21					; 00000015H
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+148]
	call	ecx

; 767  : 					}
; 768  : 
; 769  : 					else

	jmp	SHORT $LN17@SetState
$LN18@SetState:

; 770  : 					{
; 771  : 						m_pD3DD->SetTextureStageState(0,D3DTSS_MAGFILTER,D3DTFG_LINEAR);

	push	2
	push	16					; 00000010H
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+148]
	call	ecx

; 772  : 						m_pD3DD->SetTextureStageState(0,D3DTSS_MINFILTER,D3DTFN_LINEAR);

	push	2
	push	17					; 00000011H
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+148]
	call	ecx
$LN17@SetState:

; 773  : 					}
; 774  : 
; 775  : 					if(Value == MPR_TX_BILINEAR)

	cmp	DWORD PTR _Value$[ebp], 1
	jne	SHORT $LN16@SetState

; 776  : 					{
; 777  : 						m_pD3DD->SetTextureStageState(0,D3DTSS_ADDRESS,D3DTADDRESS_CLAMP);

	push	3
	push	12					; 0000000cH
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+148]
	call	ecx
$LN16@SetState:

; 778  : 					}
; 779  : 
; 780  : 					break;

	jmp	SHORT $LN21@SetState
$LN15@SetState:

; 781  : 				}
; 782  : 
; 783  : 				case MPR_TX_MIPMAP_NEAREST:
; 784  : 				{
; 785  : 					m_pD3DD->SetTextureStageState(0,D3DTSS_MIPFILTER,D3DTFP_NONE);

	push	1
	push	18					; 00000012H
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+148]
	call	ecx

; 786  : 					break;

	jmp	SHORT $LN21@SetState
$LN14@SetState:

; 787  : 				}
; 788  : 
; 789  : 				case MPR_TX_MIPMAP_LINEAR:
; 790  : 				{
; 791  : 					if(DisplayOptions.bLinearMipFiltering)

	movzx	edx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+14
	test	edx, edx
	je	SHORT $LN21@SetState

; 792  : 						m_pD3DD->SetTextureStageState(0,D3DTSS_MIPFILTER,D3DTFP_LINEAR);

	push	3
	push	18					; 00000012H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+148]
	call	edx
$LN21@SetState:

; 793  : 
; 794  : 					break;
; 795  : 				}
; 796  : 			}
; 797  : 
; 798  : 			break;

	jmp	$LN58@SetState
$LN12@SetState:

; 799  : 		}
; 800  : 
; 801  : 		case MPR_STA_FG_COLOR:
; 802  : 		{
; 803  : 			SelectForegroundColor(Value);

	mov	eax, DWORD PTR _Value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectForegroundColor@ContextMPR@@QAEXH@Z ; ContextMPR::SelectForegroundColor

; 804  : 			break;

	jmp	$LN58@SetState
$LN11@SetState:

; 805  : 		}
; 806  : 
; 807  : 		case MPR_STA_BG_COLOR:
; 808  : 		{
; 809  : 			SelectBackgroundColor(Value);

	mov	ecx, DWORD PTR _Value$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectBackgroundColor@ContextMPR@@QAEXH@Z ; ContextMPR::SelectBackgroundColor

; 810  : 			break;

	jmp	$LN58@SetState
$LN10@SetState:

; 811  : 		}
; 812  : 
; 813  : 		case MPR_STA_FOG_COLOR:
; 814  : 		{
; 815  : 			FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 816  : 
; 817  : 			m_pD3DD->SetRenderState(D3DRENDERSTATE_FOGCOLOR,MPRColor2D3DRGBA(Value));

	mov	edx, DWORD PTR _Value$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MPRColor2D3DRGBA@ContextMPR@@IAEKH@Z	; ContextMPR::MPRColor2D3DRGBA
	push	eax
	push	34					; 00000022H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+80]
	call	edx

; 818  : 			break;

	jmp	$LN58@SetState
$LN9@SetState:

; 819  : 		}
; 820  : 
; 821  : 		case MPR_STA_SCISSOR_LEFT:  
; 822  : 		{
; 823  : 			if(Value != m_rcVP.left)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Value$[ebp]
	cmp	ecx, DWORD PTR [eax+262408]
	je	SHORT $LN8@SetState

; 824  : 			{
; 825  : 				FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 826  : 
; 827  : 				m_rcVP.left = Value;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _Value$[ebp]
	mov	DWORD PTR [edx+262408], eax

; 828  : 				UpdateViewport();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateViewport@ContextMPR@@IAEXXZ	; ContextMPR::UpdateViewport
$LN8@SetState:

; 829  : 			}
; 830  : 			break;

	jmp	$LN58@SetState
$LN7@SetState:

; 831  : 		}
; 832  : 
; 833  : 		case MPR_STA_SCISSOR_TOP:  
; 834  : 		{
; 835  : 			if(Value != m_rcVP.top)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _Value$[ebp]
	cmp	edx, DWORD PTR [ecx+262412]
	je	SHORT $LN6@SetState

; 836  : 			{
; 837  : 				FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 838  : 
; 839  : 				m_rcVP.top = Value;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Value$[ebp]
	mov	DWORD PTR [eax+262412], ecx

; 840  : 				UpdateViewport();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateViewport@ContextMPR@@IAEXXZ	; ContextMPR::UpdateViewport
$LN6@SetState:

; 841  : 			}
; 842  : 
; 843  : 			break;

	jmp	SHORT $LN58@SetState
$LN5@SetState:

; 844  : 		}
; 845  : 
; 846  : 		case MPR_STA_SCISSOR_RIGHT:
; 847  : 		{
; 848  : 			if(Value != m_rcVP.right)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _Value$[ebp]
	cmp	eax, DWORD PTR [edx+262416]
	je	SHORT $LN4@SetState

; 849  : 			{
; 850  : 				FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 851  : 
; 852  : 				m_rcVP.right = Value;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _Value$[ebp]
	mov	DWORD PTR [ecx+262416], edx

; 853  : 				UpdateViewport();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateViewport@ContextMPR@@IAEXXZ	; ContextMPR::UpdateViewport
$LN4@SetState:

; 854  : 			}
; 855  : 
; 856  : 			break;

	jmp	SHORT $LN58@SetState
$LN3@SetState:

; 857  : 		}
; 858  : 
; 859  : 		case MPR_STA_SCISSOR_BOTTOM:
; 860  : 		{
; 861  : 			if(Value != m_rcVP.bottom)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Value$[ebp]
	cmp	ecx, DWORD PTR [eax+262420]
	je	SHORT $LN58@SetState

; 862  : 			{
; 863  : 				FlushVB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushVB@ContextMPR@@IAEXXZ		; ContextMPR::FlushVB

; 864  : 
; 865  : 				m_rcVP.bottom = Value;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _Value$[ebp]
	mov	DWORD PTR [edx+262420], eax

; 866  : 				UpdateViewport();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateViewport@ContextMPR@@IAEXXZ	; ContextMPR::UpdateViewport
$LN58@SetState:

; 867  : 			}
; 868  : 
; 869  : 			break;
; 870  : 		}
; 871  : 
; 872  : 		case MPR_STA_NONE:
; 873  : 		{
; 874  : 			break;
; 875  : 		}
; 876  : 	}
; 877  : }

	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN61@SetState:
	DD	$LN53@SetState
	DD	$LN38@SetState
	DD	$LN28@SetState
	DD	$LN27@SetState
	DD	$LN26@SetState
	DD	$LN25@SetState
	DD	$LN24@SetState
	DD	$LN23@SetState
	DD	$LN12@SetState
	DD	$LN11@SetState
	DD	$LN58@SetState
	DD	$LN10@SetState
	DD	$LN9@SetState
	DD	$LN7@SetState
	DD	$LN5@SetState
	DD	$LN3@SetState
$LN62@SetState:
	DD	$LN20@SetState
	DD	$LN19@SetState
	DD	$LN15@SetState
	DD	$LN14@SetState
	DD	$LN21@SetState
$LN60@SetState:
	DB	0
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	3
	DB	4
	DB	4
	DB	1
?SetState@ContextMPR@@QAEXGK@Z ENDP			; ContextMPR::SetState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_l_pMP$ = 8						; size = 4
?SetProjection@ContextMPR@@QAEXPAU_D3DMATRIX@@@Z PROC	; ContextMPR::SetProjection
; _this$ = ecx

; 2430 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2431 : 	memcpy(&mP,l_pMP,sizeof(D3DMATRIX));

	push	64					; 00000040H
	mov	eax, DWORD PTR _l_pMP$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 2432 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetProjection@ContextMPR@@QAEXPAU_D3DMATRIX@@@Z ENDP	; ContextMPR::SetProjection
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
tv77 = -8						; size = 4
_this$ = -4						; size = 4
_l_pMW$ = 8						; size = 4
?SetWorld@ContextMPR@@QAEXPAU_D3DMATRIX@@@Z PROC	; ContextMPR::SetWorld
; _this$ = ecx

; 2423 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2424 : 	ShiAssert(mIdx < 4096);
; 2425 : 
; 2426 : 	memcpy(&mW[mIdx++],l_pMW,sizeof(D3DMATRIX));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262464]
	shl	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+192]
	mov	DWORD PTR tv77[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262464]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262464], edx
	push	64					; 00000040H
	mov	ecx, DWORD PTR _l_pMW$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv77[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 2427 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetWorld@ContextMPR@@QAEXPAU_D3DMATRIX@@@Z ENDP	; ContextMPR::SetWorld
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_l_pMV$ = 8						; size = 4
?SetView@ContextMPR@@QAEXPAU_D3DMATRIX@@@Z PROC		; ContextMPR::SetView
; _this$ = ecx

; 2418 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2419 : 	memcpy(&mV,l_pMV,sizeof(D3DMATRIX));

	push	64					; 00000040H
	mov	eax, DWORD PTR _l_pMV$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 2420 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetView@ContextMPR@@QAEXPAU_D3DMATRIX@@@Z ENDP		; ContextMPR::SetView
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_pDDS$2 = -44						; size = 4
tv90 = -40						; size = 4
_this$ = -36						; size = 4
_ddscaps$3 = -32					; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_lpDDSBack$ = 8						; size = 4
?NewImageBuffer@ContextMPR@@QAEXI@Z PROC		; ContextMPR::NewImageBuffer
; _this$ = ecx

; 319  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?NewImageBuffer@ContextMPR@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 320  : 	#ifdef _CONTEXT_TRACE_ALL
; 321  : 	MonoPrint("ContextMPR::NewImageBuffer(0x%X)\n",lpDDSBack);
; 322  : 	#endif
; 323  : 
; 324  : 	if(m_pRenderTarget)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+262364], 0
	je	SHORT $LN2@NewImageBu

; 325  : 		m_pRenderTarget = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262364], 0
$LN2@NewImageBu:

; 326  : 
; 327  : 	m_pRenderTarget = (IDirectDrawSurface7 *)lpDDSBack;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _lpDDSBack$[ebp]
	mov	DWORD PTR [edx+262364], eax

; 328  : 
; 329  : 	// Some drivers (like the 3.68 detonators) implicitly create Z buffers
; 330  : 	if(m_pRenderTarget)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+262364], 0
	je	SHORT $LN3@NewImageBu

; 331  : 	{
; 332  : 		IDirectDrawSurface7Ptr pDDS;

	lea	ecx, DWORD PTR _pDDS$2[ebp]
	call	??0?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 333  : 
; 334  : 		DDSCAPS2 ddscaps;
; 335  : 		ZeroMemory(&ddscaps,sizeof(ddscaps));

	push	16					; 00000010H
	push	0
	lea	edx, DWORD PTR _ddscaps$3[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 336  : 		ddscaps.dwCaps = DDSCAPS_ZBUFFER; 

	mov	DWORD PTR _ddscaps$3[ebp], 131072	; 00020000H

; 337  : 		m_bRenderTargetHasZBuffer = SUCCEEDED(m_pRenderTarget->GetAttachedSurface(&ddscaps,&pDDS)); 

	lea	ecx, DWORD PTR _pDDS$2[ebp]
	call	??I?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEPAPAUIDirectDrawSurface7@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator&
	push	eax
	lea	eax, DWORD PTR _ddscaps$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262364]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262364]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+48]
	call	eax
	test	eax, eax
	jl	SHORT $LN5@NewImageBu
	mov	DWORD PTR tv90[ebp], 1
	jmp	SHORT $LN6@NewImageBu
$LN5@NewImageBu:
	mov	DWORD PTR tv90[ebp], 0
$LN6@NewImageBu:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR tv90[ebp]
	mov	BYTE PTR [ecx+262501], dl

; 338  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pDDS$2[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
$LN3@NewImageBu:

; 339  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?NewImageBuffer@ContextMPR@@QAEXI@Z$0:
	lea	ecx, DWORD PTR _pDDS$2[ebp]
	jmp	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
__ehhandler$?NewImageBuffer@ContextMPR@@QAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?NewImageBuffer@ContextMPR@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?NewImageBuffer@ContextMPR@@QAEXI@Z ENDP		; ContextMPR::NewImageBuffer
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
?Cleanup@ContextMPR@@QAEXXZ PROC			; ContextMPR::Cleanup
; _this$ = ecx

; 256  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 	#ifdef _CONTEXT_TRACE_ALL
; 258  : 	MonoPrint("ContextMPR::Cleanup()\n");
; 259  : 	#endif
; 260  : 
; 261  : 	#ifdef _DEBUG
; 262  : 	#ifdef _CONTEXT_ENABLE_STATS
; 263  : 	m_stats.Report();
; 264  : 	#endif
; 265  : 	#endif
; 266  : 
; 267  : 	if(StateSetupCounter)

	cmp	DWORD PTR ?StateSetupCounter@ContextMPR@@2HA, 0 ; ContextMPR::StateSetupCounter
	je	SHORT $LN4@Cleanup

; 268  : 		CleanupMPRState(CHECK_PREVIOUS_STATE);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CleanupMPRState@ContextMPR@@IAEXH@Z	; ContextMPR::CleanupMPRState
$LN4@Cleanup:

; 269  : 
; 270  : // Warning: The SIM code uses a shared DXContext which might be already toast when this function gets called!!
; 271  : // Under no circumstances access m_pCtxDX here
; 272  : // Btw: this was causing the infamous LGB CTD
; 273  : 
; 274  : 	m_pCtxDX = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262360], 0

; 275  : 
; 276  : 	if(m_pVB)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+262384], 0
	je	SHORT $LN3@Cleanup

; 277  : 	{
; 278  : 		m_pVB->Release();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262384]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262384]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx

; 279  : 		m_pVB = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262384], 0
$LN3@Cleanup:

; 280  : 	}
; 281  : 
; 282  : 	if(m_pVBB)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+262392], 0
	je	SHORT $LN2@Cleanup

; 283  : 	{
; 284  : 		m_pVBB->Release();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262392]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262392]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 285  : 		m_pVBB = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262392], 0
$LN2@Cleanup:

; 286  : 	}
; 287  : 
; 288  : 	if(m_pIdx)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+262432], 0
	je	SHORT $LN1@Cleanup

; 289  : 	{
; 290  : 		delete[] m_pIdx;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262432]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 291  : 		m_pIdx = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262432], 0
$LN1@Cleanup:

; 292  : 	}
; 293  : 
; 294  : 	m_pIdx = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262432], 0

; 295  : 	m_dwNumVtx = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262436], 0

; 296  : 	m_dwNumIdx = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262440], 0

; 297  : 	m_dwStartVtx = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262444], 0

; 298  : 	m_nCurPrimType = 0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+262452], dx

; 299  : 	m_pIB = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262372], 0

; 300  : 	m_nFrameDepth = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262368], 0

; 301  : 	m_pTLVtx = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262460], 0

; 302  : 	m_bRenderTargetHasZBuffer = false;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+262501], 0

; 303  : 
; 304  : 	#ifdef _DEBUG
; 305  : 	m_pVtxEnd = NULL;
; 306  : 	#endif
; 307  : 
; 308  : 	#ifdef _CONTEXT_RECORD_USED_STATES
; 309  : 	MonoPrint("ContextMPR::Cleanup - Report of used states follows\n	");
; 310  : 	std::set<int>::iterator it;
; 311  : 	for(it = m_setStatesUsed.begin(); it != m_setStatesUsed.end(); it++)
; 312  : 		MonoPrint("%d,",*it);
; 313  : 	m_setStatesUsed.clear();
; 314  : 	MonoPrint("\nContextMPR::Cleanup - End of report\n	");
; 315  : 	#endif
; 316  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Cleanup@ContextMPR@@QAEXXZ ENDP			; ContextMPR::Cleanup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_e$2 = -108						; size = 16
$T3 = -92						; size = 16
tv383 = -76						; size = 4
tv80 = -72						; size = 4
_lpDDSBack$4 = -68					; size = 4
tv381 = -64						; size = 4
_p$5 = -60						; size = 4
$T6 = -56						; size = 4
tv382 = -52						; size = 4
_bRetval$ = -48						; size = 4
_i$7 = -44						; size = 4
_this$ = -40						; size = 4
_vbdesc$8 = -36						; size = 16
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_pIB$ = 8						; size = 4
_c$ = 12						; size = 4
?Setup@ContextMPR@@QAEHPAVImageBuffer@@PAVDXContext@@@Z PROC ; ContextMPR::Setup
; _this$ = ecx

; 144  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Setup@ContextMPR@@QAEHPAVImageBuffer@@PAVDXContext@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 92					; 0000005cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 	BOOL bRetval = FALSE;

	mov	DWORD PTR _bRetval$[ebp], 0

; 146  : 
; 147  : 	#ifdef _CONTEXT_TRACE_ALL
; 148  : 	MonoPrint("ContextMPR::Setup(0x%X,0x%X)\n",pIB,c);
; 149  : 	#endif
; 150  : 
; 151  : 	try
; 152  : 	{

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 153  : 		m_pCtxDX = c;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax+262360], ecx

; 154  : 
; 155  : 		if(!m_pCtxDX)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+262360], 0
	jne	SHORT $LN7@Setup

; 156  : 		{
; 157  : 			ShiWarning("Failed to create device!");
; 158  : 			return FALSE;

	xor	eax, eax
	jmp	$LN10@Setup
$LN7@Setup:

; 159  : 		}
; 160  : 
; 161  : 		ShiAssert(m_pTLVtx == NULL);
; 162  : 
; 163  : 		ShiAssert(pIB);
; 164  : 
; 165  : 		if(!pIB) return FALSE;

	cmp	DWORD PTR _pIB$[ebp], 0
	jne	SHORT $LN6@Setup
	xor	eax, eax
	jmp	$LN10@Setup
$LN6@Setup:

; 166  : 
; 167  : 		m_pIB = pIB;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pIB$[ebp]
	mov	DWORD PTR [eax+262372], ecx

; 168  : 		IDirectDrawSurface7 *lpDDSBack = pIB->targetSurface();

	mov	ecx, DWORD PTR _pIB$[ebp]
	call	?targetSurface@ImageBuffer@@QAEPAUIDirectDrawSurface7@@XZ ; ImageBuffer::targetSurface
	mov	DWORD PTR tv381[ebp], eax
	mov	edx, DWORD PTR tv381[ebp]
	mov	DWORD PTR _lpDDSBack$4[ebp], edx

; 169  : 		NewImageBuffer((UInt)lpDDSBack);

	mov	eax, DWORD PTR _lpDDSBack$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NewImageBuffer@ContextMPR@@QAEXI@Z	; ContextMPR::NewImageBuffer

; 170  : 
; 171  : 		m_pDD = m_pCtxDX->m_pDD;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262360]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax+262376], ecx

; 172  : 		m_pD3DD = m_pCtxDX->m_pD3DD;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262360]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+262380], edx

; 173  : 
; 174  : 		// Setup the vertex buffer
; 175  : 		IDirect3DVertexBuffer7Ptr p;

	lea	ecx, DWORD PTR _p$5[ebp]
	call	??0?$_com_ptr_t@V?$_com_IIID@UIDirect3DVertexBuffer7@@$1?IID_IDirect3DVertexBuffer7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirect3DVertexBuffer7,&IID_IDirect3DVertexBuffer7> >::_com_ptr_t<_com_IIID<IDirect3DVertexBuffer7,&IID_IDirect3DVertexBuffer7> >
	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 176  : 		D3DVERTEXBUFFERDESC vbdesc;
; 177  : 		ZeroMemory(&vbdesc,sizeof(vbdesc));

	push	16					; 00000010H
	push	0
	lea	eax, DWORD PTR _vbdesc$8[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 178  : 		vbdesc.dwSize = sizeof(vbdesc);

	mov	DWORD PTR _vbdesc$8[ebp], 16		; 00000010H

; 179  : 		vbdesc.dwFVF = D3DFVF_XYZRHW | D3DFVF_DIFFUSE | D3DFVF_TEX2 | D3DFVF_SPECULAR;

	mov	DWORD PTR _vbdesc$8[ebp+8], 708		; 000002c4H

; 180  : 		vbdesc.dwCaps = D3DVBCAPS_WRITEONLY | D3DVBCAPS_DONOTCLIP ;//| D3DVBCAPS_VIDEOMEMORY;

	mov	DWORD PTR _vbdesc$8[ebp+4], 65537	; 00010001H

; 181  : 
; 182  : 		//m_dwVBSize = 1024;
; 183  : 		m_dwVBSize = 32768;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262428], 32768		; 00008000H

; 184  : 		vbdesc.dwNumVertices = m_dwVBSize;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262428]
	mov	DWORD PTR _vbdesc$8[ebp+12], eax

; 185  : 
; 186  : 		CheckHR(m_pCtxDX->m_pD3D->CreateVertexBuffer(&vbdesc,&m_pVB,NULL));

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262384				; 000400f0H
	push	ecx
	lea	edx, DWORD PTR _vbdesc$8[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262360]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262360]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	mov	DWORD PTR tv80[ebp], eax
	mov	edx, DWORD PTR tv80[ebp]
	push	edx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 187  : 		CheckHR(m_pCtxDX->m_pD3D->CreateVertexBuffer(&vbdesc,&m_pVBB,NULL));

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 262392				; 000400f8H
	push	eax
	lea	ecx, DWORD PTR _vbdesc$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262360]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262360]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	mov	DWORD PTR tv382[ebp], eax
	mov	ecx, DWORD PTR tv382[ebp]
	push	ecx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 188  : 
; 189  : 		m_pIdx = new WORD[vbdesc.dwNumVertices * 3];

	mov	eax, DWORD PTR _vbdesc$8[ebp+12]
	imul	eax, 3
	xor	ecx, ecx
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR tv383[ebp], eax
	mov	eax, DWORD PTR tv383[ebp]
	mov	DWORD PTR $T6[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T6[ebp]
	mov	DWORD PTR [ecx+262432], edx

; 190  : 		if(!m_pIdx) throw _com_error(E_OUTOFMEMORY);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+262432], 0
	jne	SHORT $LN5@Setup
	push	0
	push	0
	push	-2147024882				; 8007000eH
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z	; _com_error::_com_error
	push	OFFSET __TI1?AV_com_error@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN5@Setup:

; 191  : 
; 192  : 		// Setup our set of cached rendering states
; 193  : 		SetupMPRState(CHECK_PREVIOUS_STATE);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetupMPRState@ContextMPR@@QAEXH@Z	; ContextMPR::SetupMPRState

; 194  : 
; 195  : 		// Initialise render states
; 196  : 		m_pD3DD->SetRenderState(D3DRENDERSTATE_COLORVERTEX,TRUE);

	push	1
	push	141					; 0000008dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+80]
	call	ecx

; 197  : 		m_pD3DD->SetRenderState(D3DRENDERSTATE_LIGHTING,FALSE);

	push	0
	push	137					; 00000089H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+80]
	call	ecx

; 198  : 		m_pD3DD->SetRenderState(D3DRENDERSTATE_CULLMODE,D3DCULL_NONE);

	push	1
	push	22					; 00000016H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+80]
	call	ecx

; 199  : 		m_pD3DD->SetRenderState(D3DRENDERSTATE_FOGENABLE,TRUE);

	push	1
	push	28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+80]
	call	ecx

; 200  : 		m_pD3DD->SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE,TRUE);

	push	1
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+80]
	call	ecx

; 201  : 		m_pD3DD->SetRenderState(D3DRENDERSTATE_STIPPLEDALPHA,FALSE);

	push	0
	push	33					; 00000021H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+80]
	call	ecx

; 202  : 		m_pD3DD->SetRenderState(D3DRENDERSTATE_COLORKEYENABLE,FALSE);

	push	0
	push	41					; 00000029H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+80]
	call	ecx

; 203  : 		m_pD3DD->SetRenderState(D3DRENDERSTATE_STENCILENABLE,FALSE);

	push	0
	push	52					; 00000034H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+80]
	call	ecx

; 204  : 		m_pD3DD->SetRenderState(D3DRENDERSTATE_DITHERENABLE,FALSE);

	push	0
	push	26					; 0000001aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+80]
	call	ecx

; 205  : 		m_pD3DD->SetRenderState(D3DRENDERSTATE_CLIPPING,FALSE);

	push	0
	push	136					; 00000088H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+80]
	call	ecx

; 206  : 		m_pD3DD->SetRenderState(D3DRENDERSTATE_ZWRITEENABLE,FALSE);

	push	0
	push	14					; 0000000eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+80]
	call	ecx

; 207  : 		m_pD3DD->SetRenderState(D3DRENDERSTATE_ZFUNC,D3DCMP_ALWAYS); 

	push	8
	push	23					; 00000017H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+80]
	call	ecx

; 208  : 
; 209  : 		// Disable all stages
; 210  : 		for(int i = 0; i < 8; i++)

	mov	DWORD PTR _i$7[ebp], 0
	jmp	SHORT $LN4@Setup
$LN3@Setup:
	mov	edx, DWORD PTR _i$7[ebp]
	add	edx, 1
	mov	DWORD PTR _i$7[ebp], edx
$LN4@Setup:
	cmp	DWORD PTR _i$7[ebp], 8
	jge	SHORT $LN2@Setup

; 211  : 		{
; 212  : 			m_pD3DD->SetTextureStageState(i,D3DTSS_COLOROP,D3DTOP_DISABLE);

	push	1
	push	1
	mov	eax, DWORD PTR _i$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+148]
	call	eax

; 213  : 			m_pD3DD->SetTextureStageState(i,D3DTSS_ALPHAOP,D3DTOP_DISABLE);

	push	1
	push	4
	mov	ecx, DWORD PTR _i$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+148]
	call	ecx

; 214  : 		}

	jmp	SHORT $LN3@Setup
$LN2@Setup:

; 215  : 
; 216  : 		// Setup stage 0
; 217  : 		m_pD3DD->SetTextureStageState(0,D3DTSS_COLORARG2,D3DTA_TEXTURE);

	push	2
	push	3
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+148]
	call	ecx

; 218  : 		m_pD3DD->SetTextureStageState(0,D3DTSS_COLORARG2,D3DTA_CURRENT);

	push	1
	push	3
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+148]
	call	ecx

; 219  : 		m_pD3DD->SetTextureStageState(0,D3DTSS_ALPHAARG1,D3DTA_TEXTURE);

	push	2
	push	5
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+148]
	call	ecx

; 220  : 		m_pD3DD->SetTextureStageState(0,D3DTSS_ALPHAARG2,D3DTA_CURRENT);

	push	1
	push	6
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262380]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+148]
	call	ecx

; 221  : 
; 222  : 		// Set Mipmap LOD Bias
; 223  : 		if(DisplayOptions.bMipmapping)

	movzx	edx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+15
	test	edx, edx
	je	SHORT $LN1@Setup

; 224  : 			m_pD3DD->SetTextureStageState(0,D3DTSS_MIPMAPLODBIAS,*((LPDWORD)(&g_fMipLodBias)));

	mov	eax, DWORD PTR ?g_fMipLodBias@@3MA
	push	eax
	push	19					; 00000013H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262380]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262380]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+148]
	call	eax
$LN1@Setup:

; 225  : 
; 226  : 		// Initialize our poly, mem, and radix buckets
; 227  : 		mIdx = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262464], 0

; 228  : 		plainPolys = texturedPolys = translucentPolys = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262488], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262484], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262480], 0

; 229  : 		plainPolyVCnt = texturedPolyVCnt = translucentPolyVCnt = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262476], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262472], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262468], 0

; 230  : 		currentState = lastState = currentTexture1 = currentTexture2 = lastTexture1 = lastTexture2 = -1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+36], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], -1

; 231  : 		memPool = AllocInit();

	call	_AllocInit
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262492], eax

; 232  : 		RadixReset();

	call	_RadixReset

; 233  : 
; 234  : 		InvalidateState();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InvalidateState@ContextMPR@@QAEXXZ	; ContextMPR::InvalidateState

; 235  : 		RestoreState(STATE_SOLID);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 236  : 		ZeroMemory(&m_rcVP,sizeof(m_rcVP));

	push	16					; 00000010H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 262408				; 00040108H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 237  : 		m_bViewportLocked = false;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+262502], 0

; 238  : 
; 239  : 		#ifdef _CONTEXT_ENABLE_STATS
; 240  : 		m_stats.Init();
; 241  : 		m_stats.StartBatch();
; 242  : 		#endif
; 243  : 
; 244  : 		bRetval = TRUE;

	mov	DWORD PTR _bRetval$[ebp], 1

; 245  : 	}

	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _p$5[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@UIDirect3DVertexBuffer7@@$1?IID_IDirect3DVertexBuffer7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirect3DVertexBuffer7,&IID_IDirect3DVertexBuffer7> >::~_com_ptr_t<_com_IIID<IDirect3DVertexBuffer7,&IID_IDirect3DVertexBuffer7> >
	jmp	SHORT $LN11@Setup
__catch$?Setup@ContextMPR@@QAEHPAVImageBuffer@@PAVDXContext@@@Z$0:

; 246  : 
; 247  : 	catch(_com_error e)
; 248  : 	{
; 249  : 		MonoPrint("ContextMPR::Setup - Error 0x%X\n",e.Error());

	lea	ecx, DWORD PTR _e$2[ebp]
	call	?Error@_com_error@@QBEJXZ		; _com_error::Error
	push	eax
	push	OFFSET ??_C@_0CA@IMCKJHEG@ContextMPR?3?3Setup?5?9?5Error?50x?$CFX?6?$AA@
	call	_MonoPrint
	add	esp, 8

; 250  : 	}

	lea	ecx, DWORD PTR _e$2[ebp]
	call	??1_com_error@@UAE@XZ			; _com_error::~_com_error
	mov	eax, $LN16@Setup
	ret	0
$LN11@Setup:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?Setup@ContextMPR@@QAEHPAVImageBuffer@@PAVDXContext@@@Z$1
$LN16@Setup:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?Setup@ContextMPR@@QAEHPAVImageBuffer@@PAVDXContext@@@Z$1:

; 251  : 
; 252  : 	return bRetval;

	mov	eax, DWORD PTR _bRetval$[ebp]
$LN10@Setup:

; 253  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Setup@ContextMPR@@QAEHPAVImageBuffer@@PAVDXContext@@@Z$2:
	lea	ecx, DWORD PTR _p$5[ebp]
	jmp	??1?$_com_ptr_t@V?$_com_IIID@UIDirect3DVertexBuffer7@@$1?IID_IDirect3DVertexBuffer7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirect3DVertexBuffer7,&IID_IDirect3DVertexBuffer7> >::~_com_ptr_t<_com_IIID<IDirect3DVertexBuffer7,&IID_IDirect3DVertexBuffer7> >
__ehhandler$?Setup@ContextMPR@@QAEHPAVImageBuffer@@PAVDXContext@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-112]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Setup@ContextMPR@@QAEHPAVImageBuffer@@PAVDXContext@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Setup@ContextMPR@@QAEHPAVImageBuffer@@PAVDXContext@@@Z ENDP ; ContextMPR::Setup
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1ContextMPR@@UAE@XZ PROC				; ContextMPR::~ContextMPR
; _this$ = ecx

; 137  : { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ContextMPR@@6B@

; 138  : 	#ifdef _DEBUG
; 139  : 	m_nInstCount--;
; 140  : 	#endif
; 141  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1ContextMPR@@UAE@XZ ENDP				; ContextMPR::~ContextMPR
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ContextMPR@@QAE@XZ PROC				; ContextMPR::ContextMPR
; _this$ = ecx

; 88   : { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ContextMPR@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0_D3DMATRIX@@QAE@XZ			; _D3DMATRIX::_D3DMATRIX
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??0_D3DMATRIX@@QAE@XZ			; _D3DMATRIX::_D3DMATRIX
	push	OFFSET ??0_D3DMATRIX@@QAE@XZ		; _D3DMATRIX::_D3DMATRIX
	push	4096					; 00001000H
	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 192				; 000000c0H
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262504				; 00040168H
	call	??0Stats@ContextMPR@@QAE@XZ		; ContextMPR::Stats::Stats

; 89   : 	#ifdef _DEBUG
; 90   : 	m_nInstCount++;
; 91   : 	#endif
; 92   : 
; 93   : 	m_pCtxDX = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262360], 0

; 94   : 	m_pDD = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262376], 0

; 95   : 	m_pD3DD = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262380], 0

; 96   : 	m_pVB = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262384], 0

; 97   : 	m_pVBH = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262388], 0

; 98   : 	m_pVBB = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262392], 0

; 99   : 	m_dwVBSize = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262428], 0

; 100  : 	m_pIdx = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262432], 0

; 101  : 	m_dwNumVtx = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262436], 0

; 102  : 	m_dwNumIdx = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262440], 0

; 103  : 	m_dwStartVtx = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262444], 0

; 104  : 	m_nCurPrimType = 0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+262452], cx

; 105  : 	m_pRenderTarget = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262364], 0

; 106  : 	m_bEnableScissors = false;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+262424], 0

; 107  : 	m_pDDSP = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262496], 0

; 108  : 	m_bNoD3DStatsAvail = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+262500], 0

; 109  : 	m_bUseSetStateInternal = false;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+4], 0

; 110  : 	m_pIB = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262372], 0

; 111  : 	m_nFrameDepth = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262368], 0

; 112  : 	m_pTLVtx = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262460], 0

; 113  : 	m_bRenderTargetHasZBuffer = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+262501], 0

; 114  : 	m_bViewportLocked = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+262502], 0

; 115  : 	m_colFG = m_colBG = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262400], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262396], 0

; 116  : 	m_colFG_Raw = m_colBG_Raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 117  : 	bZBuffering = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+40], 0

; 118  : 	gZBias = 0.f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+262344], xmm0

; 119  : 	ZFAR = 280000.f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@4888b800
	movss	DWORD PTR [ecx+262336], xmm0

; 120  : 	// COBRA - RED - TEST 
; 121  : 	//ZNEAR = 1.f;
; 122  : 	ZNEAR = 0.2f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [edx+262340], xmm0

; 123  : 	NVGmode = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 0

; 124  : 	TVmode = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+48], 0

; 125  : 	IRmode = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+52], 0

; 126  : 	palID = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], 0

; 127  : 	texID = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], 0

; 128  : 
; 129  : 	ZCX_Calculate();				// COBRA - RED - Drawing CXs update

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZCX_Calculate@ContextMPR@@QAEXXZ	; ContextMPR::ZCX_Calculate

; 130  : 
; 131  : 	#ifdef _DEBUG
; 132  : 	m_pVtxEnd = NULL;
; 133  : 	#endif
; 134  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0ContextMPR@@QAE@XZ ENDP				; ContextMPR::ContextMPR
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
;	COMDAT ?CopyToVertexBuffer@SPolygon@@QAEPAUTLVERTEX@@PAU2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bufferPos$ = 8						; size = 4
?CopyToVertexBuffer@SPolygon@@QAEPAUTLVERTEX@@PAU2@@Z PROC ; SPolygon::CopyToVertexBuffer, COMDAT
; _this$ = ecx

; 2441 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2442 : 	if (!bufferPos)

	cmp	DWORD PTR _bufferPos$[ebp], 0
	jne	SHORT $LN1@CopyToVert

; 2443 : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN2@CopyToVert
$LN1@CopyToVert:

; 2444 : 	// COBRA - RED - Using arrays of TLVERTEX it is possible to copy directly into DX Buffer
; 2445 : 	memcpy(bufferPos,pVertexList,sizeof(TLVERTEX)*numVertices); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	imul	ecx, 40					; 00000028H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _bufferPos$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 2446 : 	return bufferPos+numVertices;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	imul	eax, 40					; 00000028H
	add	eax, DWORD PTR _bufferPos$[ebp]
$LN2@CopyToVert:

; 2447 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CopyToVertexBuffer@SPolygon@@QAEPAUTLVERTEX@@PAU2@@Z ENDP ; SPolygon::CopyToVertexBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\context.cpp
;	COMDAT ?CalcPolyZ@SPolygon@@QAEXM@Z
_TEXT	SEGMENT
tv76 = -16						; size = 8
_this$ = -8						; size = 4
tv72 = -4						; size = 4
_Avg$ = 8						; size = 4
?CalcPolyZ@SPolygon@@QAEXM@Z PROC			; SPolygon::CalcPolyZ, COMDAT
; _this$ = ecx

; 2453 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 2454 : 	Avg /= float(numVertices);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv72[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv72[ebp]
	mov	edx, DWORD PTR tv72[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv76[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv76[ebp]
	movss	xmm1, DWORD PTR _Avg$[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _Avg$[ebp], xmm1

; 2455 : 	zBuffer = FloatToInt32(Avg * 16777215.f);

	movss	xmm0, DWORD PTR _Avg$[ebp]
	mulss	xmm0, DWORD PTR __real@4b7fffff
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 2456 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CalcPolyZ@SPolygon@@QAEXM@Z ENDP			; SPolygon::CalcPolyZ
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\smart.h
;	COMDAT ?CheckHR@@YAXJ@Z
_TEXT	SEGMENT
$T1 = -20						; size = 16
_pEI$2 = -4						; size = 4
_hr$ = 8						; size = 4
?CheckHR@@YAXJ@Z PROC					; CheckHR, COMDAT

; 27   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 28   : 	if(FAILED(hr))

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN3@CheckHR

; 29   : 	{
; 30   : 		IErrorInfo *pEI = NULL;

	mov	DWORD PTR _pEI$2[ebp], 0

; 31   : 		::GetErrorInfo(NULL, &pEI);

	lea	eax, DWORD PTR _pEI$2[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__GetErrorInfo@8

; 32   : 		throw _com_error(hr, pEI);

	push	0
	mov	ecx, DWORD PTR _pEI$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _hr$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z	; _com_error::_com_error
	push	OFFSET __TI1?AV_com_error@@
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	__CxxThrowException@8
$LN3@CheckHR:

; 33   : 	}
; 34   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CheckHR@@YAXJ@Z ENDP					; CheckHR
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.0\include\um\d3dtypes.h
;	COMDAT ??0_D3DMATRIX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_D3DMATRIX@@QAE@XZ PROC				; _D3DMATRIX::_D3DMATRIX, COMDAT
; _this$ = ecx

; 516  :     _D3DMATRIX() { }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_D3DMATRIX@@QAE@XZ ENDP				; _D3DMATRIX::_D3DMATRIX
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_com_error@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_com_error@@UAEPAXI@Z PROC				; _com_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_com_error@@UAE@XZ			; _com_error::~_com_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_com_error@@UAEPAXI@Z ENDP				; _com_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comdef.h
;	COMDAT ?Error@_com_error@@QBEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Error@_com_error@@QBEJXZ PROC				; _com_error::Error, COMDAT
; _this$ = ecx

; 313  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 314  :     return m_hresult;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 315  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Error@_com_error@@QBEJXZ ENDP				; _com_error::Error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comdef.h
;	COMDAT ??1_com_error@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_com_error@@UAE@XZ PROC				; _com_error::~_com_error, COMDAT
; _this$ = ecx

; 294  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_com_error@@6B@

; 295  :     if (m_perrinfo != NULL) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN2@com_error

; 296  :         m_perrinfo->Release();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
$LN2@com_error:

; 297  :     }
; 298  :     if (m_pszMsg != NULL) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN3@com_error

; 299  :         LocalFree((HLOCAL)m_pszMsg);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__LocalFree@4
$LN3@com_error:

; 300  :     }
; 301  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1_com_error@@UAE@XZ ENDP				; _com_error::~_com_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comdef.h
;	COMDAT ??0_com_error@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_that$ = 8						; size = 4
??0_com_error@@QAE@ABV0@@Z PROC				; _com_error::_com_error, COMDAT
; _this$ = ecx

; 287  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_com_error@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _that$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 288  :     if (m_perrinfo != NULL) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN2@com_error

; 289  :         m_perrinfo->AddRef();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+4]
	call	edx
$LN2@com_error:

; 290  :     }
; 291  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0_com_error@@QAE@ABV0@@Z ENDP				; _com_error::_com_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comdef.h
;	COMDAT ??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hr$ = 8						; size = 4
_perrinfo$ = 12						; size = 4
_fAddRef$ = 16						; size = 1
??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z PROC		; _com_error::_com_error, COMDAT
; _this$ = ecx

; 279  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_com_error@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _perrinfo$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 280  :     if (m_perrinfo != NULL && fAddRef) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@com_error
	movzx	ecx, BYTE PTR _fAddRef$[ebp]
	test	ecx, ecx
	je	SHORT $LN2@com_error

; 281  :         m_perrinfo->AddRef();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
$LN2@com_error:

; 282  :     }
; 283  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z ENDP		; _com_error::_com_error
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z PROC	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ENDP	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ PROC	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CComBSTR@ATL@@QAE@XZ			; ATL::CComBSTR::~CComBSTR
	mov	esp, ebp
	pop	ebp
	ret	0
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ ENDP	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\atlmfc\include\atlcomcli.h
;	COMDAT ??1CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CComBSTR@ATL@@QAE@XZ PROC				; ATL::CComBSTR::~CComBSTR, COMDAT
; _this$ = ecx

; 1656 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1657 :     ::SysFreeString(m_str);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__SysFreeString@4

; 1658 : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1CComBSTR@ATL@@QAE@XZ ENDP				; ATL::CComBSTR::~CComBSTR
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Where$[ebp]
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
