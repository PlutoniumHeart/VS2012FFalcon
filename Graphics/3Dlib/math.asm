; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\Graphics\3Dlib\math.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?VT@?$CVarTypeInfo@_J@ATL@@2GB			; ATL::CVarTypeInfo<__int64>::VT
PUBLIC	?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ ; ATL::CVarTypeInfo<__int64>::pmField
PUBLIC	___pobjMapEntryFirst
PUBLIC	___pobjMapEntryLast
PUBLIC	?VT@?$CVarTypeInfo@PA_J@ATL@@2GB		; ATL::CVarTypeInfo<__int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ ; ATL::CVarTypeInfo<__int64 *>::pmField
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?VT@?$CVarTypeInfo@_K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned __int64>::VT
PUBLIC	??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@	; `string'
PUBLIC	?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64>::pmField
PUBLIC	??_C@_08PICKODJL@FileType?$AA@			; `string'
PUBLIC	??_C@_09JKPGEJCH@Interface?$AA@			; `string'
PUBLIC	??_C@_08PPIOJEA@Hardware?$AA@			; `string'
PUBLIC	?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA	; ATL::_pPerfRegFunc
PUBLIC	??_C@_04IHBFOLAC@Mime?$AA@			; `string'
PUBLIC	?_pPerfUnRegFunc@ATL@@3P6AJXZA			; ATL::_pPerfUnRegFunc
PUBLIC	??_C@_03DDIMFGBA@SAM?$AA@			; `string'
PUBLIC	?_AtlRegisterPerUser@ATL@@3_NA			; ATL::_AtlRegisterPerUser
PUBLIC	??_C@_08LOPHEHKG@SECURITY?$AA@			; `string'
PUBLIC	??_C@_06FDHFNJBJ@SYSTEM?$AA@			; `string'
PUBLIC	??_C@_08KEKAJNJI@Software?$AA@			; `string'
PUBLIC	??_C@_07KJLOKDKB@TypeLib?$AA@			; `string'
PUBLIC	?VT@?$CVarTypeInfo@PA_K@ATL@@2GB		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
PUBLIC	__GUID_00000000_0000_0000_c000_000000000046
PUBLIC	?VT@?$CVarTypeInfo@M@ATL@@2GB			; ATL::CVarTypeInfo<float>::VT
PUBLIC	?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ ; ATL::CVarTypeInfo<float>::pmField
PUBLIC	__GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
PUBLIC	?VT@?$CVarTypeInfo@PAM@ATL@@2GB			; ATL::CVarTypeInfo<float *>::VT
PUBLIC	__GUID_00020400_0000_0000_c000_000000000046
PUBLIC	?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ ; ATL::CVarTypeInfo<float *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@N@ATL@@2GB			; ATL::CVarTypeInfo<double>::VT
PUBLIC	?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ ; ATL::CVarTypeInfo<double>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAN@ATL@@2GB			; ATL::CVarTypeInfo<double *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ ; ATL::CVarTypeInfo<double *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB	; ATL::CVarTypeInfo<tagVARIANT *>::VT
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	__GUID_0002e012_0000_0000_c000_000000000046
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?VT@?$CVarTypeInfo@PA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ ; ATL::CVarTypeInfo<wchar_t *>::pmField
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t * *>::VT
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ ; ATL::CVarTypeInfo<wchar_t * *>::pmField
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown *>::VT
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown *>::pmField
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown * *>::pmField
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	__GUID_0000010c_0000_0000_c000_000000000046
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch *>::VT
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch *>::pmField
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	??_C@_05GIBEAPNE@CLSID?$AA@			; `string'
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	_IID_IAxWinHostWindow
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch * *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY>::VT
PUBLIC	?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY>::pmField
PUBLIC	??_C@_05PDIKPLII@AppID?$AA@			; `string'
PUBLIC	?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY *>::VT
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY *>::pmField
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?chDirSep@ATL@@3DB				; ATL::chDirSep
PUBLIC	?chRightBracket@ATL@@3DB			; ATL::chRightBracket
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?chLeftBracket@ATL@@3DB				; ATL::chLeftBracket
PUBLIC	?chQuote@ATL@@3DB				; ATL::chQuote
PUBLIC	?chEquals@ATL@@3DB				; ATL::chEquals
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?szStringVal@ATL@@3QBDB				; ATL::szStringVal
PUBLIC	??_C@_01CPLAODJH@S?$AA@				; `string'
PUBLIC	?multiszStringVal@ATL@@3QBDB			; ATL::multiszStringVal
PUBLIC	_IID_IAxWinHostWindowLic
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	??_C@_01PLPBNMEI@M?$AA@				; `string'
PUBLIC	?szDwordVal@ATL@@3QBDB				; ATL::szDwordVal
PUBLIC	??_C@_01CKDDGHAB@D?$AA@				; `string'
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?szBinaryVal@ATL@@3QBDB				; ATL::szBinaryVal
PUBLIC	??_C@_01HMGJMAIH@B?$AA@				; `string'
PUBLIC	?szValToken@ATL@@3QBDB				; ATL::szValToken
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	??_C@_03LAIAPFCB@Val?$AA@			; `string'
PUBLIC	?szForceRemove@ATL@@3QBDB			; ATL::szForceRemove
PUBLIC	??_C@_0M@DBGDLGLL@ForceRemove?$AA@		; `string'
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?szNoRemove@ATL@@3QBDB				; ATL::szNoRemove
PUBLIC	??_C@_08KAAPDIAN@NoRemove?$AA@			; `string'
PUBLIC	?szDelete@ATL@@3QBDB				; ATL::szDelete
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	??_C@_06JBKGCNBB@Delete?$AA@			; `string'
PUBLIC	?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA	; ATL::CComApartment::ATL_CREATE_OBJECT
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	_IID_IAxWinAmbientDispatch
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?CosineTable@@3PANA				; CosineTable
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A ; ATL::_pAtlAutoThreadModule
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?m_bInitFailed@CAtlBaseModule@ATL@@2_NA		; ATL::CAtlBaseModule::m_bInitFailed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	__GUID_00000000_0000_0000_0000_000000000000
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?MAX_VALUE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_VALUE
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?rgszNeverDelete@CRegParser@ATL@@1QBQBDB	; ATL::CRegParser::rgszNeverDelete
PUBLIC	?cbNeverDelete@CRegParser@ATL@@1HB		; ATL::CRegParser::cbNeverDelete
PUBLIC	?MAX_TYPE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_TYPE
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	_IID_IAxWinAmbientDispatchEx
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	_IID_IInternalConnection
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	__GUID_1cf2b120_547d_101b_8e65_08002b2bd119
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?_pAtlModule@ATL@@3PAVCAtlModule@1@A		; ATL::_pAtlModule
PUBLIC	?m_libid@CAtlModule@ATL@@2U_GUID@@A		; ATL::CAtlModule::m_libid
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	__GUID_00000146_0000_0000_c000_000000000046
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?VT@?$CVarTypeInfo@D@ATL@@2GB			; ATL::CVarTypeInfo<char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ ; ATL::CVarTypeInfo<char>::pmField
PUBLIC	?VT@?$CVarTypeInfo@E@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ ; ATL::CVarTypeInfo<unsigned char>::pmField
PUBLIC	_CLSID_Registrar
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?_Min@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Min
PUBLIC	?VT@?$CVarTypeInfo@PAD@ATL@@2GB			; ATL::CVarTypeInfo<char *>::VT
PUBLIC	?_Max@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Max
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ ; ATL::CVarTypeInfo<char *>::pmField
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?_Min@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Min
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?_Max@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Max
PUBLIC	?VT@?$CVarTypeInfo@PAE@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char *>::VT
PUBLIC	__GUID_00000109_0000_0000_c000_000000000046
PUBLIC	?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ ; ATL::CVarTypeInfo<unsigned char *>::pmField
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?_Min@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Min
PUBLIC	__GUID_b196b284_bab4_101a_b69c_00aa00341d07
PUBLIC	?_Max@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Max
PUBLIC	?VT@?$CVarTypeInfo@F@ATL@@2GB			; ATL::CVarTypeInfo<short>::VT
PUBLIC	_IID_IRegistrar
PUBLIC	?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ ; ATL::CVarTypeInfo<short>::pmField
PUBLIC	?_Min@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Min
PUBLIC	?_Max@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Max
PUBLIC	?VT@?$CVarTypeInfo@PAF@ATL@@2GB			; ATL::CVarTypeInfo<short *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ ; ATL::CVarTypeInfo<short *>::pmField
PUBLIC	?_Min@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Min
PUBLIC	__GUID_00000001_0000_0000_c000_000000000046
PUBLIC	?_Max@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Max
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?VT@?$CVarTypeInfo@G@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short>::VT
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ ; ATL::CVarTypeInfo<unsigned short>::pmField
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	__GUID_00020401_0000_0000_c000_000000000046
PUBLIC	?_Min@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Min
PUBLIC	_LIBID_ATLLib
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?_Max@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Max
PUBLIC	__GUID_00020412_0000_0000_c000_000000000046
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?VT@?$CVarTypeInfo@PAG@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short *>::VT
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ ; ATL::CVarTypeInfo<unsigned short *>::pmField
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?VT@?$CVarTypeInfo@H@ATL@@2GB			; ATL::CVarTypeInfo<int>::VT
PUBLIC	?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ ; ATL::CVarTypeInfo<int>::pmField
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?VT@?$CVarTypeInfo@PAH@ATL@@2GB			; ATL::CVarTypeInfo<int *>::VT
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ ; ATL::CVarTypeInfo<int *>::pmField
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?VT@?$CVarTypeInfo@I@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int>::VT
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ ; ATL::CVarTypeInfo<unsigned int>::pmField
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?VT@?$CVarTypeInfo@PAI@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ ; ATL::CVarTypeInfo<unsigned int *>::pmField
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?VT@?$CVarTypeInfo@J@ATL@@2GB			; ATL::CVarTypeInfo<long>::VT
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ ; ATL::CVarTypeInfo<long>::pmField
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?_pModule@ATL@@3PAVCComModule@1@A		; ATL::_pModule
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?VT@?$CVarTypeInfo@PAJ@ATL@@2GB			; ATL::CVarTypeInfo<long *>::VT
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ ; ATL::CVarTypeInfo<long *>::pmField
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	_IID_IDocHostUIHandlerDispatch
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?VT@?$CVarTypeInfo@K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long>::VT
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ ; ATL::CVarTypeInfo<unsigned long>::pmField
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?VT@?$CVarTypeInfo@PAK@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long *>::VT
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ ; ATL::CVarTypeInfo<unsigned long *>::pmField
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA
_BSS	SEGMENT
?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA DD 01H DUP (?) ; ATL::_pPerfRegFunc
_BSS	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZA
_BSS	SEGMENT
?_pPerfUnRegFunc@ATL@@3P6AJXZA DD 01H DUP (?)		; ATL::_pPerfUnRegFunc
_BSS	ENDS
;	COMDAT ?_AtlRegisterPerUser@ATL@@3_NA
_BSS	SEGMENT
?_AtlRegisterPerUser@ATL@@3_NA DB 01H DUP (?)		; ATL::_AtlRegisterPerUser
_BSS	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_BSS	SEGMENT
?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA DD 01H DUP (?) ; ATL::CComApartment::ATL_CREATE_OBJECT
_BSS	ENDS
;	COMDAT ?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A
_BSS	SEGMENT
?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A DD 01H DUP (?) ; ATL::_pAtlAutoThreadModule
_BSS	ENDS
;	COMDAT ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA
_BSS	SEGMENT
?m_bInitFailed@CAtlBaseModule@ATL@@2_NA DB 01H DUP (?)	; ATL::CAtlBaseModule::m_bInitFailed
_BSS	ENDS
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_BSS	SEGMENT
?_pAtlModule@ATL@@3PAVCAtlModule@1@A DD 01H DUP (?)	; ATL::_pAtlModule
_BSS	ENDS
;	COMDAT ?m_libid@CAtlModule@ATL@@2U_GUID@@A
_BSS	SEGMENT
?m_libid@CAtlModule@ATL@@2U_GUID@@A DB 010H DUP (?)	; ATL::CAtlModule::m_libid
_BSS	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_BSS	SEGMENT
?_pModule@ATL@@3PAVCComModule@1@A DD 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long *>::pmField
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAK@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAK@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned long *>::VT
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long>::pmField
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@K@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned long>::VT
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
_IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ DD 08H ; ATL::CVarTypeInfo<long *>::pmField
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAJ@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAJ@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<long *>::VT
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ DD 08H ; ATL::CVarTypeInfo<long>::pmField
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@J@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<long>::VT
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAI@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAI@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned int *>::VT
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int>::pmField
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@I@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@I@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned int>::VT
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ DD 08H ; ATL::CVarTypeInfo<int *>::pmField
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAH@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAH@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<int *>::VT
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ DD 08H ; ATL::CVarTypeInfo<int>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@H@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@H@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<int>::VT
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short *>::pmField
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAG@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAG@ATL@@2GB DW 04012H		; ATL::CVarTypeInfo<unsigned short *>::VT
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT __GUID_00020412_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020412_0000_0000_c000_000000000046 DD 020412H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Max@?$AtlLimits@_K@ATL@@2_KB DQ ffffffffffffffffH	; ATL::AtlLimits<unsigned __int64>::_Max
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT
_LIBID_ATLLib DD 044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Min@?$AtlLimits@_K@ATL@@2_KB DQ 0000000000000000H	; ATL::AtlLimits<unsigned __int64>::_Min
CONST	ENDS
;	COMDAT __GUID_00020401_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020401_0000_0000_c000_000000000046 DD 020401H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short>::pmField
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@G@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@G@ATL@@2GB DW 012H			; ATL::CVarTypeInfo<unsigned short>::VT
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Max@?$AtlLimits@_J@ATL@@2_JB DQ 7fffffffffffffffH	; ATL::AtlLimits<__int64>::_Max
CONST	ENDS
;	COMDAT __GUID_00000001_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000001_0000_0000_c000_000000000046 DD 01H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Min@?$AtlLimits@_J@ATL@@2_JB DQ 8000000000000000H	; ATL::AtlLimits<__int64>::_Min
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ DD 08H ; ATL::CVarTypeInfo<short *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAF@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAF@ATL@@2GB DW 04002H		; ATL::CVarTypeInfo<short *>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Max@?$AtlLimits@K@ATL@@2KB DD 0ffffffffH		; ATL::AtlLimits<unsigned long>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Min@?$AtlLimits@K@ATL@@2KB DD 00H			; ATL::AtlLimits<unsigned long>::_Min
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ DD 08H ; ATL::CVarTypeInfo<short>::pmField
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT
_IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@F@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@F@ATL@@2GB DW 02H			; ATL::CVarTypeInfo<short>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Max@?$AtlLimits@J@ATL@@2JB DD 07fffffffH		; ATL::AtlLimits<long>::_Max
CONST	ENDS
;	COMDAT __GUID_b196b284_bab4_101a_b69c_00aa00341d07
CONST	SEGMENT
__GUID_b196b284_bab4_101a_b69c_00aa00341d07 DD 0b196b284H
	DW	0bab4H
	DW	0101aH
	DB	0b6H
	DB	09cH
	DB	00H
	DB	0aaH
	DB	00H
	DB	034H
	DB	01dH
	DB	07H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Min@?$AtlLimits@J@ATL@@2JB DD 080000000H		; ATL::AtlLimits<long>::_Min
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT __GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
CONST	SEGMENT
__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713 DD 07fd52380H
	DW	04e07H
	DW	0101bH
	DB	0aeH
	DB	02dH
	DB	08H
	DB	00H
	DB	02bH
	DB	02eH
	DB	0c7H
	DB	013H
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char *>::pmField
CONST	ENDS
;	COMDAT __GUID_00000109_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000109_0000_0000_c000_000000000046 DD 0109H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAE@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAE@ATL@@2GB DW 04011H		; ATL::CVarTypeInfo<unsigned char *>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Max@?$AtlLimits@I@ATL@@2IB DD 0ffffffffH		; ATL::AtlLimits<unsigned int>::_Max
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Min@?$AtlLimits@I@ATL@@2IB DD 00H			; ATL::AtlLimits<unsigned int>::_Min
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ DD 08H ; ATL::CVarTypeInfo<char *>::pmField
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Max@?$AtlLimits@H@ATL@@2HB DD 07fffffffH		; ATL::AtlLimits<int>::_Max
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAD@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAD@ATL@@2GB DW 04010H		; ATL::CVarTypeInfo<char *>::VT
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Min@?$AtlLimits@H@ATL@@2HB DD 080000000H		; ATL::AtlLimits<int>::_Min
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT
_CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@E@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@E@ATL@@2GB DW 011H			; ATL::CVarTypeInfo<unsigned char>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ DD 08H ; ATL::CVarTypeInfo<char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@D@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@D@ATL@@2GB DW 010H			; ATL::CVarTypeInfo<char>::VT
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT __GUID_00000146_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000146_0000_0000_c000_000000000046 DD 0146H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT __GUID_1cf2b120_547d_101b_8e65_08002b2bd119
CONST	SEGMENT
__GUID_1cf2b120_547d_101b_8e65_08002b2bd119 DD 01cf2b120H
	DW	0547dH
	DW	0101bH
	DB	08eH
	DB	065H
	DB	08H
	DB	00H
	DB	02bH
	DB	02bH
	DB	0d1H
	DB	019H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT
_IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatchEx
CONST	SEGMENT
_IID_IAxWinAmbientDispatchEx DD 0b2d0778bH
	DW	0ac99H
	DW	04c58H
	DB	0a5H
	DB	0c8H
	DB	0e7H
	DB	072H
	DB	04eH
	DB	053H
	DB	016H
	DB	0b5H
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT __GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
CONST	SEGMENT
__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352 DD 0fc4801a3H
	DW	02ba9H
	DW	011cfH
	DB	0a2H
	DB	029H
	DB	00H
	DB	0aaH
	DB	00H
	DB	03dH
	DB	073H
	DB	052H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?MAX_TYPE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_TYPE@CRegParser@ATL@@1HB DD 01000H			; ATL::CRegParser::MAX_TYPE
CONST	ENDS
;	COMDAT ?cbNeverDelete@CRegParser@ATL@@1HB
CONST	SEGMENT
?cbNeverDelete@CRegParser@ATL@@1HB DD 0cH		; ATL::CRegParser::cbNeverDelete
CONST	ENDS
;	COMDAT ?rgszNeverDelete@CRegParser@ATL@@1QBQBDB
CONST	SEGMENT
?rgszNeverDelete@CRegParser@ATL@@1QBQBDB DD FLAT:??_C@_05PDIKPLII@AppID?$AA@ ; ATL::CRegParser::rgszNeverDelete
	DD	FLAT:??_C@_05GIBEAPNE@CLSID?$AA@
	DD	FLAT:??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
	DD	FLAT:??_C@_08PICKODJL@FileType?$AA@
	DD	FLAT:??_C@_09JKPGEJCH@Interface?$AA@
	DD	FLAT:??_C@_08PPIOJEA@Hardware?$AA@
	DD	FLAT:??_C@_04IHBFOLAC@Mime?$AA@
	DD	FLAT:??_C@_03DDIMFGBA@SAM?$AA@
	DD	FLAT:??_C@_08LOPHEHKG@SECURITY?$AA@
	DD	FLAT:??_C@_06FDHFNJBJ@SYSTEM?$AA@
	DD	FLAT:??_C@_08KEKAJNJI@Software?$AA@
	DD	FLAT:??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?MAX_VALUE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_VALUE@CRegParser@ATL@@1HB DD 01000H		; ATL::CRegParser::MAX_VALUE
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
CONST	SEGMENT
__GUID_00000000_0000_0000_0000_000000000000 DD 00H
	DW	00H
	DW	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
_DATA	SEGMENT
?CosineTable@@3PANA DQ 03ff0000000000000r	; 1	; CosineTable
	DQ	03fefffffd8458477r		; 1
	DQ	03fefffff6228f29br		; 1
	DQ	03feffffe9c9769adr		; 0.999999
	DQ	03feffffd881a5a0dr		; 0.999999
	DQ	03feffffc253b341ar		; 0.999998
	DQ	03feffffa72e71715r		; 0.999997
	DQ	03feffff871a7735dr		; 0.999996
	DQ	03feffff6217c48f3r		; 0.999995
	DQ	03feffff3826597d7r		; 0.999994
	DQ	03feffff094636008r		; 0.999993
	DQ	03fefffed56ec3127r		; 0.999991
	DQ	03fefffe9cb12ebf4r		; 0.999989
	DQ	03fefffe5f04e200dr		; 0.999988
	DQ	03fefffe1c6145d15r		; 0.999986
	DQ	03fefffdd4d7883car		; 0.999983
	DQ	03fefffd88567b36er		; 0.999981
	DQ	03fefffd36ef4ccbdr		; 0.999979
	DQ	03fefffce090ceefcr		; 0.999976
	DQ	03fefffc854398a88r		; 0.999973
	DQ	03fefffc2507a9f61r		; 0.999971
	DQ	03fefffbbfe599de7r		; 0.999968
	DQ	03fefffb55cc3a55cr		; 0.999964
	DQ	03fefffae6c42261er		; 0.999961
	DQ	03fefffa72cd5202dr		; 0.999958
	DQ	03fefff9f9df3232br		; 0.999954
	DQ	03fefff97c0af0fd6r		; 0.99995
	DQ	03fefff8f947f75cer		; 0.999946
	DQ	03fefff8719645514r		; 0.999942
	DQ	03fefff7e4ed43d48r		; 0.999938
	DQ	03fefff7535e20f29r		; 0.999934
	DQ	03fefff6bcd7ae9f8r		; 0.999929
	DQ	03fefff6216b1ae75r		; 0.999925
	DQ	03fefff5810737bdfr		; 0.99992
	DQ	03fefff4dbbd332f6r		; 0.999915
	DQ	03fefff4317bdf2fbr		; 0.99991
	DQ	03fefff3824bd2c4er		; 0.999905
	DQ	03fefff2ce2d0deefr		; 0.999899
	DQ	03fefff2151f90addr		; 0.999894
	DQ	03fefff157235b019r		; 0.999888
	DQ	03fefff094386cea2r		; 0.999882
	DQ	03feffefcc5ec6679r		; 0.999876
	DQ	03feffeeff966779dr		; 0.99987
	DQ	03feffee2ddf5020fr		; 0.999864
	DQ	03feffed5739805cer		; 0.999858
	DQ	03feffec7ba4f82dbr		; 0.999851
	DQ	03feffeb9b19208d7r		; 0.999844
	DQ	03feffeab5a72787fr		; 0.999838
	DQ	03feffe9cb4676174r		; 0.999831
	DQ	03feffe8dbee75358r		; 0.999823
	DQ	03feffe7e7b052ee9r		; 0.999816
	DQ	03feffe6ee7ae1368r		; 0.999809
	DQ	03feffe5f05f4e194r		; 0.999801
	DQ	03feffe4ed4c6b8aer		; 0.999793
	DQ	03feffe3e55367975r		; 0.999786
	DQ	03feffe2d8631432ar		; 0.999778
	DQ	03feffe1c6840862dr		; 0.999769
	DQ	03feffe0afbedb2ddr		; 0.999761
	DQ	03feffdf94025e87br		; 0.999753
	DQ	03feffde735729766r		; 0.999744
	DQ	03feffdd4dbd3bf9fr		; 0.999735
	DQ	03feffdc233496126r		; 0.999726
	DQ	03feffdaf3c5cec59r		; 0.999717
	DQ	03feffd9bf5fb807br		; 0.999708
	DQ	03feffd8860ae8dear		; 0.999699
	DQ	03feffd747c7614a7r		; 0.999689
	DQ	03feffd60495214b1r		; 0.99968
	DQ	03feffd4bc7428e09r		; 0.99967
	DQ	03feffd36f64780aer		; 0.99966
	DQ	03feffd21d660eca1r		; 0.99965
	DQ	03feffd0c678ed1e2r		; 0.99964
	DQ	03feffcf6a9d13070r		; 0.999629
	DQ	03feffce09c9e97ecr		; 0.999619
	DQ	03feffcca4109e916r		; 0.999608
	DQ	03feffcb39689b38cr		; 0.999597
	DQ	03feffc9c9d1df751r		; 0.999586
	DQ	03feffc8554c6b462r		; 0.999575
	DQ	03feffc6dbd83eac2r		; 0.999564
	DQ	03feffc55d7559a6fr		; 0.999553
	DQ	03feffc3da23bc369r		; 0.999541
	DQ	03feffc251e3665b1r		; 0.999529
	DQ	03feffc0c4abc10e8r		; 0.999518
	DQ	03feffbf328dfa5cbr		; 0.999506
	DQ	03feffbd9b817b3fcr		; 0.999493
	DQ	03feffbbff8643b7ar		; 0.999481
	DQ	03feffba5e9c53c46r		; 0.999469
	DQ	03feffb8b8c3ab65fr		; 0.999456
	DQ	03feffb70dfc4a9c6r		; 0.999443
	DQ	03feffb55e463167br		; 0.999431
	DQ	03feffb3a998c8c1er		; 0.999418
	DQ	03feffb1f0053eb6dr		; 0.999404
	DQ	03feffb03182fc40ar		; 0.999391
	DQ	03feffae6e12015f5r		; 0.999378
	DQ	03feffaca5b24e12dr		; 0.999364
	DQ	03feffaad863e25b3r		; 0.99935
	DQ	03feffa90626be387r		; 0.999336
	DQ	03feffa72f0378b07r		; 0.999322
	DQ	03feffa552e8e3b75r		; 0.999308
	DQ	03feffa371df96531r		; 0.999294
	DQ	03feffa18be79083br		; 0.999279
	DQ	03feff9fa100d2492r		; 0.999265
	DQ	03feff9db133f2a96r		; 0.99925
	DQ	03feff9bbc6fc3988r		; 0.999235
	DQ	03feff99c2bcdc1c8r		; 0.99922
	DQ	03feff97c423d33b5r		; 0.999205
	DQ	03feff95c0937ae8fr		; 0.999189
	DQ	03feff93b81d01317r		; 0.999174
	DQ	03feff91aaaf3808dr		; 0.999158
	DQ	03feff8f985b4d7b0r		; 0.999142
	DQ	03feff8d8110137c1r		; 0.999126
	DQ	03feff8b64deb817fr		; 0.99911
	DQ	03feff8943bea448ar		; 0.999094
	DQ	03feff871dafd80e4r		; 0.999078
	DQ	03feff84f2b25368ar		; 0.999061
	DQ	03feff82c2c61657er		; 0.999045
	DQ	03feff808deb20dc0r		; 0.999028
	DQ	03feff7e542172f4fr		; 0.999011
	DQ	03feff7c15690ca2cr		; 0.998994
	DQ	03feff79d1c1ede56r		; 0.998976
	DQ	03feff778934adc2dr		; 0.998959
	DQ	03feff753bb01e2f3r		; 0.998941
	DQ	03feff72e9456d365r		; 0.998924
	DQ	03feff7091e36ccc6r		; 0.998906
	DQ	03feff6e359b4afd3r		; 0.998888
	DQ	03feff6bd46470c2er		; 0.99887
	DQ	03feff696e3ede1d7r		; 0.998851
	DQ	03feff67032a930cdr		; 0.998833
	DQ	03feff6493278f910r		; 0.998814
	DQ	03feff621e35d3aa1r		; 0.998795
	DQ	03feff5fa45df65dfr		; 0.998777
	DQ	03feff5d258ec9a0br		; 0.998758
	DQ	03feff5aa1d97b7e4r		; 0.998738
	DQ	03feff58192cddeacr		; 0.998719
	DQ	03feff558b9a1ef20r		; 0.9987
	DQ	03feff52f918a78e2r		; 0.99868
	DQ	03feff5061a877bf1r		; 0.99866
	DQ	03feff4dc5498f84er		; 0.99864
	DQ	03feff4b23fbeedf8r		; 0.99862
	DQ	03feff487dc82cd4fr		; 0.9986
	DQ	03feff45d2a5b25f4r		; 0.99858
	DQ	03feff43228be8787r		; 0.998559
	DQ	03feff406d8bfd2c7r		; 0.998538
	DQ	03feff3db39d59754r		; 0.998518
	DQ	03feff3af4bffd52fr		; 0.998497
	DQ	03feff3830fc7fcb7r		; 0.998476
	DQ	03feff356841b2d2dr		; 0.998454
	DQ	03feff329aa0c4750r		; 0.998433
	DQ	03feff2fc80886a61r		; 0.998411
	DQ	03feff2cf08a2771fr		; 0.99839
	DQ	03feff2a1425a6d8ar		; 0.998368
	DQ	03feff2732c9d6ce3r		; 0.998346
	DQ	03feff244c7f4e589r		; 0.998324
	DQ	03feff21614ea47ddr		; 0.998302
	DQ	03feff1e712f4237er		; 0.998279
	DQ	03feff1b7c212786cr		; 0.998257
	DQ	03feff188224546a8r		; 0.998234
	DQ	03feff158338c8e32r		; 0.998211
	DQ	03feff127f671bf69r		; 0.998188
	DQ	03feff0f76a6b69edr		; 0.998165
	DQ	03feff0c68f798dber		; 0.998142
	DQ	03feff095659c2addr		; 0.998118
	DQ	03feff063ecd3414ar		; 0.998095
	DQ	03feff03225a84163r		; 0.998071
	DQ	03feff0000f91bacar		; 0.998047
	DQ	03fefefcdaa8fad7fr		; 0.998023
	DQ	03fefef9af6a21981r		; 0.997999
	DQ	03fefef67f4526f30r		; 0.997974
	DQ	03fefef34a28dcdcdr		; 0.99795
	DQ	03fefef0102671617r		; 0.997925
	DQ	03fefeecd1354d7afr		; 0.997901
	DQ	03fefee98d5e082f3r		; 0.997876
	DQ	03fefee6448f73726r		; 0.997851
	DQ	03fefee2f6dabd506r		; 0.997825
	DQ	03fefedfa43fe5c92r		; 0.9978
	DQ	03fefedc4cadbed0cr		; 0.997775
	DQ	03fefed8f03576734r		; 0.997749
	DQ	03fefed58ece75aa9r		; 0.997723
	DQ	03fefed22878bc76br		; 0.997697
	DQ	03fefecebd344ad7br		; 0.997671
	DQ	03fefecb4d09b7d38r		; 0.997645
	DQ	03fefec7d7f06c643r		; 0.997618
	DQ	03fefec45de86889br		; 0.997592
	DQ	03fefec0defa434a0r		; 0.997565
	DQ	03fefebd5b1d659f2r		; 0.997538
	DQ	03fefeb9d251cf892r		; 0.997511
	DQ	03fefeb644a0180dfr		; 0.997484
	DQ	03fefeb2b1f71121ar		; 0.997457
	DQ	03fefeaf1a707fd61r		; 0.99743
	DQ	03fefeab7df29f196r		; 0.997402
	DQ	03fefea7dc8e9cf78r		; 0.997374
	DQ	03fefea4363be26a8r		; 0.997347
	DQ	03fefea08afa6f725r		; 0.997319
	DQ	03fefe9cdad2db14fr		; 0.99729
	DQ	03fefe9925bc8e4c7r		; 0.997262
	DQ	03fefe956bb78918cr		; 0.997234
	DQ	03fefe91accc627fer		; 0.997205
	DQ	03fefe8de8f2837ber		; 0.997176
	DQ	03fefe8a2029ec0cbr		; 0.997148
	DQ	03fefe86527b33385r		; 0.997119
	DQ	03fefe827fddc1f8cr		; 0.997089
	DQ	03fefe7ea851984e1r		; 0.99706
	DQ	03fefe7acbdf4d3e3r		; 0.997031
	DQ	03fefe76ea7e49c33r		; 0.997001
	DQ	03fefe73043724e2fr		; 0.996971
	DQ	03fefe6f190147979r		; 0.996941
	DQ	03fefe6b28dcb1e10r		; 0.996911
	DQ	03fefe6733d1fac54r		; 0.996881
	DQ	03fefe6339d88b3e6r		; 0.996851
	DQ	03fefe5f3af0634c5r		; 0.99682
	DQ	03fefe5b372219f51r		; 0.99679
	DQ	03fefe572e651832ar		; 0.996759
	DQ	03fefe5320c1f50b1r		; 0.996728
	DQ	03fefe4f0e3019785r		; 0.996697
	DQ	03fefe4af6b81c806r		; 0.996666
	DQ	03fefe46da51671d4r		; 0.996634
	DQ	03fefe42b8fbf94f0r		; 0.996603
	DQ	03fefe3e92c06a1b8r		; 0.996571
	DQ	03fefe3a6796227cfr		; 0.996539
	DQ	03fefe363785b9792r		; 0.996507
	DQ	03fefe320286980a2r		; 0.996475
	DQ	03fefe2dc898be300r		; 0.996443
	DQ	03fefe2989c4c2f0br		; 0.996411
	DQ	03fefe25460aa64c3r		; 0.996378
	DQ	03fefe20fd61d13c8r		; 0.996345
	DQ	03fefe1cafca43c1br		; 0.996313
	DQ	03fefe185d4c94e1br		; 0.99628
	DQ	03fefe1405e02d968r		; 0.996247
	DQ	03fefe0fa98da4e62r		; 0.996213
	DQ	03fefe0b4854fad09r		; 0.99618
	DQ	03fefe06e2250149er		; 0.996146
	DQ	03fefe0277177d63fr		; 0.996113
	DQ	03fefdfe071b4112er		; 0.996079
	DQ	03fefdf992304c56ar		; 0.996045
	DQ	03fefdf5185f36353r		; 0.996011
	DQ	03fefdf0999f67a8ar		; 0.995976
	DQ	03fefdec15f977b6dr		; 0.995942
	DQ	03fefde78d64cf59er		; 0.995907
	DQ	03fefde2ffea0597cr		; 0.995872
	DQ	03fefdde6d891a707r		; 0.995838
	DQ	03fefdd9d63976ddfr		; 0.995803
	DQ	03fefdd539fb1ae05r		; 0.995767
	DQ	03fefdd098df34837r		; 0.995732
	DQ	03fefdcbf2cbfeb57r		; 0.995697
	DQ	03fefdc747db3e883r		; 0.995661
	DQ	03fefdc297f32ee9dr		; 0.995625
	DQ	03fefdbde32d94ec4r		; 0.995589
	DQ	03fefdb9297942838r		; 0.995553
	DQ	03fefdb46ad637afar		; 0.995517
	DQ	03fefdafa74d0b768r		; 0.995481
	DQ	03fefdaadeddbdd83r		; 0.995444
	DQ	03fefda611884ed4br		; 0.995408
	DQ	03fefda13f4427661r		; 0.995371
	DQ	03fefd9c6811478c4r		; 0.995334
	DQ	03fefd978bf8464d4r		; 0.995297
	DQ	03fefd92aaf923a91r		; 0.99526
	DQ	03fefd8dc513df9far		; 0.995222
	DQ	03fefd88da3fe32b2r		; 0.995185
	DQ	03fefd83ea7d2e4b6r		; 0.995147
	DQ	03fefd7ef5dcef0c7r		; 0.995109
	DQ	03fefd79fc4df7625r		; 0.995071
	DQ	03fefd74fdd0474d1r		; 0.995033
	DQ	03fefd6ffa750cd89r		; 0.994995
	DQ	03fefd6af22b19f8fr		; 0.994957
	DQ	03fefd65e4f26eae2r		; 0.994918
	DQ	03fefd60d2dc39041r		; 0.994879
	DQ	03fefd5bbbd74aeedr		; 0.99484
	DQ	03fefd569fec3b747r		; 0.994802
	DQ	03fefd517f12738eer		; 0.994762
	DQ	03fefd4c59528a442r		; 0.994723
	DQ	03fefd472eac7f942r		; 0.994684
	DQ	03fefd41ff17bc790r		; 0.994644
	DQ	03fefd3ccaa56efebr		; 0.994604
	DQ	03fefd37914469192r		; 0.994565
	DQ	03fefd3252f4aac88r		; 0.994525
	DQ	03fefd2d0fc762189r		; 0.994484
	DQ	03fefd27c7ab60fd8r		; 0.994444
	DQ	03fefd227aa93e7d4r		; 0.994404
	DQ	03fefd1d28c0fa97cr		; 0.994363
	DQ	03fefd17d1e9fe473r		; 0.994322
	DQ	03fefd12762ce0916r		; 0.994281
	DQ	03fefd0d1589a1765r		; 0.99424
	DQ	03fefd07b00040f62r		; 0.994199
	DQ	03fefd024590bf10br		; 0.994158
	DQ	03fefcfcd63284c02r		; 0.994116
	DQ	03fefcf761ee290a6r		; 0.994075
	DQ	03fefcf1e8c3abef6r		; 0.994033
	DQ	03fefcec6ab30d6f4r		; 0.993991
	DQ	03fefce6e7bc4d89er		; 0.993949
	DQ	03fefce15fd6d5395r		; 0.993907
	DQ	03fefcdbd30b3b83ar		; 0.993865
	DQ	03fefcd641598068br		; 0.993822
	DQ	03fefcd0aac1a3e89r		; 0.99378
	DQ	03fefccb0f43a6034r		; 0.993737
	DQ	03fefcc56edf86b8cr		; 0.993694
	DQ	03fefcbfc98caf031r		; 0.993651
	DQ	03fefcba1f53b5e83r		; 0.993608
	DQ	03fefcb4703d326e2r		; 0.993564
	DQ	03fefcaebc37f688dr		; 0.993521
	DQ	03fefca9034c993e6r		; 0.993477
	DQ	03fefca345728388cr		; 0.993433
	DQ	03fefc9d82bae373er		; 0.993389
	DQ	03fefc97bb1d21f9dr		; 0.993345
	DQ	03fefc91ee90a8149r		; 0.993301
	DQ	03fefc8c1d26a3d02r		; 0.993256
	DQ	03fefc8646cde7208r		; 0.993212
	DQ	03fefc806b97a011ar		; 0.993167
	DQ	03fefc7a8b72a097ar		; 0.993122
	DQ	03fefc74a6677fb87r		; 0.993077
	DQ	03fefc6ebc763d740r		; 0.993032
	DQ	03fefc68cd9ed9ca6r		; 0.992987
	DQ	03fefc62d9e154bb9r		; 0.992942
	DQ	03fefc5ce13dae479r		; 0.992896
	DQ	03fefc56e3b3e66e5r		; 0.99285
	DQ	03fefc50e143fd2ffr		; 0.992805
	DQ	03fefc4ad9edf28c5r		; 0.992759
	DQ	03fefc44cdb1c6838r		; 0.992712
	DQ	03fefc3ebc8f79158r		; 0.992666
	DQ	03fefc38a6870a424r		; 0.99262
	DQ	03fefc328b987a09er		; 0.992573
	DQ	03fefc2c6bcc5f723r		; 0.992526
	DQ	03fefc2647118c6f6r		; 0.99248
	DQ	03fefc201d7098076r		; 0.992433
	DQ	03fefc19eee9823a3r		; 0.992385
	DQ	03fefc13bb7c4b07cr		; 0.992338
	DQ	03fefc0d8328f2703r		; 0.992291
	DQ	03fefc0745f80f795r		; 0.992243
	DQ	03fefc0103d874175r		; 0.992195
	DQ	03fefbfabcdb4e561r		; 0.992147
	DQ	03fefbf470ef7029ar		; 0.992099
	DQ	03fefbee2026079e0r		; 0.992051
	DQ	03fefbe7ca767dad2r		; 0.992003
	DQ	03fefbe16fd83b512r		; 0.991954
	DQ	03fefbdb105c6e95er		; 0.991906
	DQ	03fefbd4ac03177b6r		; 0.991857
	DQ	03fefbce42bb07f5cr		; 0.991808
	DQ	03fefbc7d48cd70aer		; 0.991759
	DQ	03fefbc161811bc0dr		; 0.99171
	DQ	03fefbbae986a80b9r		; 0.99166
	DQ	03fefbb46caea9f71r		; 0.991611
	DQ	03fefbadeaf08a7d6r		; 0.991561
	DQ	03fefba7644c499e7r		; 0.991511
	DQ	03fefba0d8ca7e605r		; 0.991462
	DQ	03fefb9a4859fab70r		; 0.991411
	DQ	03fefb93b30becae8r		; 0.991361
	DQ	03fefb8d18d7bd40cr		; 0.991311
	DQ	03fefb8679bd6c6ddr		; 0.99126
	DQ	03fefb7fd5bcfa35br		; 0.99121
	DQ	03fefb792cdefd9e5r		; 0.991159
	DQ	03fefb727f1adfa1br		; 0.991108
	DQ	03fefb6bcc70a03ffr		; 0.991057
	DQ	03fefb6514e03f78fr		; 0.991006
	DQ	03fefb5e58725452br		; 0.990954
	DQ	03fefb579715b0c15r		; 0.990903
	DQ	03fefb50d0e419d6ar		; 0.990851
	DQ	03fefb4a05c3ca80dr		; 0.990799
	DQ	03fefb4335c5f0cbcr		; 0.990747
	DQ	03fefb3c60d95eab8r		; 0.990695
	DQ	03fefb358717d9320r		; 0.990643
	DQ	03fefb2ea8679b4d5r		; 0.99059
	DQ	03fefb27c4d9d3097r		; 0.990538
	DQ	03fefb20dc65e9605r		; 0.990485
	DQ	03fefb19ef147557fr		; 0.990432
	DQ	03fefb12fcdcdfea6r		; 0.990379
	DQ	03fefb0c05bf2917ar		; 0.990326
	DQ	03fefb0509bb50dfar		; 0.990273
	DQ	03fefafe08d9ee487r		; 0.990219
	DQ	03fefaf7031b01520r		; 0.990166
	DQ	03fefaeff86d5bf06r		; 0.990112
	DQ	03fefae8e8e22c2f9r		; 0.990058
	DQ	03fefae1d479720f7r		; 0.990004
	DQ	03fefadabb2a968a2r		; 0.98995
	DQ	03fefad39cf5999far		; 0.989896
	DQ	03fefacc79da7b4ffr		; 0.989841
	DQ	03fefac551ea69a6fr		; 0.989787
	DQ	03fefabe250b9f92dr		; 0.989732
	DQ	03fefab6f34f4b1f7r		; 0.989677
	DQ	03fefaafbcacd546dr		; 0.989622
	DQ	03fefaa8812cd50f0r		; 0.989567
	DQ	03fefaa140cf4a77fr		; 0.989512
	DQ	03fefa99fb830775br		; 0.989456
	DQ	03fefa92b161d11a3r		; 0.9894
	DQ	03fefa8b625a79597r		; 0.989345
	DQ	03fefa840e6d00338r		; 0.989289
	DQ	03fefa7cb5a1fcae5r		; 0.989233
	DQ	03fefa7557f0d7c3fr		; 0.989177
	DQ	03fefa6df562287a6r		; 0.98912
	DQ	03fefa668ded57cb8r		; 0.989064
	DQ	03fefa5f219afcbd7r		; 0.989007
	DQ	03fefa57b06b17503r		; 0.98895
	DQ	03fefa503a55107dar		; 0.988893
	DQ	03fefa48bf58e845fr		; 0.988836
	DQ	03fefa413f7f35af0r		; 0.988779
	DQ	03fefa39bac7f8b8dr		; 0.988722
	DQ	03fefa32312a9a5d6r		; 0.988664
	DQ	03fefa2aa2afb1a2cr		; 0.988607
	DQ	03fefa230f573e88er		; 0.988549
	DQ	03fefa1b7718aa09cr		; 0.988491
	DQ	03fefa13d9fc8b2b7r		; 0.988433
	DQ	03fefa0c37fa4ae7er		; 0.988374
	DQ	03fefa04911a80452r		; 0.988316
	DQ	03fef9fce55d2b431r		; 0.988258
	DQ	03fef9f534b9b4dber		; 0.988199
	DQ	03fef9ed7f38b4156r		; 0.98814
	DQ	03fef9e5c4da28efar		; 0.988081
	DQ	03fef9de05957c64cr		; 0.988022
	DQ	03fef9d64173457a9r		; 0.987963
	DQ	03fef9ce787384312r		; 0.987903
	DQ	03fef9c6aa8da1829r		; 0.987844
	DQ	03fef9bed7d2cb7aar		; 0.987784
	DQ	03fef9b70031d40d9r		; 0.987724
	DQ	03fef9af23aabb3b4r		; 0.987664
	DQ	03fef9a7424eaf0far		; 0.987604
	DQ	03fef99f5c0c817edr		; 0.987544
	DQ	03fef99770ecc98edr		; 0.987484
	DQ	03fef98f80e6f0399r		; 0.987423
	DQ	03fef9878c0c238b0r		; 0.987362
	DQ	03fef97f924b35775r		; 0.987301
	DQ	03fef97793acbd045r		; 0.98724
	DQ	03fef96f9030ba321r		; 0.987179
	DQ	03fef96787d72d00ar		; 0.987118
	DQ	03fef95f7a977e69fr		; 0.987057
	DQ	03fef9576882dc7a0r		; 0.986995
	DQ	03fef94f51881924dr		; 0.986933
	DQ	03fef94735afcb706r		; 0.986871
	DQ	03fef93f14f9f35ccr		; 0.986809
	DQ	03fef936ef6690e9er		; 0.986747
	DQ	03fef92ec4ed0d11cr		; 0.986685
	DQ	03fef926959e95e06r		; 0.986623
	DQ	03fef91e6169fd49cr		; 0.98656
	DQ	03fef91628607159er		; 0.986497
	DQ	03fef90dea70c404dr		; 0.986434
	DQ	03fef905a7a38c507r		; 0.986371
	DQ	03fef8fd5ff8ca3cer		; 0.986308
	DQ	03fef8f513707dca1r		; 0.986245
	DQ	03fef8ecc20aa6f80r		; 0.986181
	DQ	03fef8e46bc745c6br		; 0.986118
	DQ	03fef8dc10a65a362r		; 0.986054
	DQ	03fef8d3b0a7e4465r		; 0.98599
	DQ	03fef8cb4bcbe3f74r		; 0.985926
	DQ	03fef8c2e2125948fr		; 0.985862
	DQ	03fef8ba737b443b6r		; 0.985798
	DQ	03fef8b20006a4cear		; 0.985733
	DQ	03fef8a987b47b029r		; 0.985668
	DQ	03fef8a10a84c6d75r		; 0.985604
	DQ	03fef8988877884ccr		; 0.985539
	DQ	03fef890018cbf630r		; 0.985474
	DQ	03fef88775cd031fer		; 0.985408
	DQ	03fef87ee5272577ar		; 0.985343
	DQ	03fef8764fa3bd702r		; 0.985278
	DQ	03fef86db54b620f5r		; 0.985212
	DQ	03fef865160ce5495r		; 0.985146
	DQ	03fef85c71f9752a0r		; 0.98508
	DQ	03fef853c9087aab7r		; 0.985014
	DQ	03fef84b1b39f5cdbr		; 0.984948
	DQ	03fef842688de690ar		; 0.984882
	DQ	03fef839b1044cf46r		; 0.984815
	DQ	03fef830f4a5bffecr		; 0.984749
	DQ	03fef828336111a40r		; 0.984682
	DQ	03fef81f6d476feffr		; 0.984615
	DQ	03fef816a25043dcar		; 0.984548
	DQ	03fef80dd27b8d6a1r		; 0.98448
	DQ	03fef804fdd1e39e3r		; 0.984413
	DQ	03fef7fc2442186d2r		; 0.984346
	DQ	03fef7f345dd59e2dr		; 0.984278
	DQ	03fef7ea629b10f93r		; 0.98421
	DQ	03fef7e17a83d4b65r		; 0.984142
	DQ	03fef7d88d86770e4r		; 0.984074
	DQ	03fef7cf9bb4260cer		; 0.984006
	DQ	03fef7c6a5044aac4r		; 0.983937
	DQ	03fef7bda97f7bf25r		; 0.983869
	DQ	03fef7b4a91d22d92r		; 0.9838
	DQ	03fef7aba3dd3f60cr		; 0.983731
	DQ	03fef7a299bfd1891r		; 0.983662
	DQ	03fef7998acd70582r		; 0.983593
	DQ	03fef79076fd84c7fr		; 0.983524
	DQ	03fef7875e58a5de7r		; 0.983455
	DQ	03fef77e40cda58fcr		; 0.983385
	DQ	03fef7751e7648edcr		; 0.983315
	DQ	03fef76bf738cae68r		; 0.983246
	DQ	03fef762cb2659860r		; 0.983176
	DQ	03fef7599a365dc64r		; 0.983105
	DQ	03fef75064716ead3r		; 0.983035
	DQ	03fef74729cef534er		; 0.982965
	DQ	03fef73dea5788635r		; 0.982894
	DQ	03fef734a60291327r		; 0.982824
	DQ	03fef72b5cd8a6a85r		; 0.982753
	DQ	03fef7220ed131befr		; 0.982682
	DQ	03fef718bbec32765r		; 0.982611
	DQ	03fef70f64323fd46r		; 0.982539
	DQ	03fef70607a359d93r		; 0.982468
	DQ	03fef6fca636e97ecr		; 0.982396
	DQ	03fef6f33feceec51r		; 0.982325
	DQ	03fef6e9d4ce00b21r		; 0.982253
	DQ	03fef6e064da1f45cr		; 0.982181
	DQ	03fef6d6f008b37a3r		; 0.982109
	DQ	03fef6cd766254556r		; 0.982036
	DQ	03fef6c3f7de6ad15r		; 0.981964
	DQ	03fef6ba74858df3fr		; 0.981891
	DQ	03fef6b0ec4f26b75r		; 0.981819
	DQ	03fef6a75f4c63276r		; 0.981746
	DQ	03fef69dcd637e324r		; 0.981673
	DQ	03fef69436ae3ce9cr		; 0.9816
	DQ	03fef68a9b12da3c1r		; 0.981526
	DQ	03fef680faab1b3b1r		; 0.981453
	DQ	03fef6775565d1dacr		; 0.981379
	DQ	03fef66dab4b95213r		; 0.981305
	DQ	03fef663fc5c650e5r		; 0.981232
	DQ	03fef65a488faa9c4r		; 0.981158
	DQ	03fef6508fedfcd0dr		; 0.981083
	DQ	03fef646d2775bac2r		; 0.981009
	DQ	03fef63d102330283r		; 0.980935
	DQ	03fef63348fa114b0r		; 0.98086
	DQ	03fef6297cfbff147r		; 0.980785
	DQ	03fef61fac28f984ar		; 0.98071
	DQ	03fef615d681009b8r		; 0.980635
	DQ	03fef60bfbfb7d533r		; 0.98056
	DQ	03fef6021ca106b18r		; 0.980485
	DQ	03fef5f838719cb69r		; 0.980409
	DQ	03fef5ee4f64a85c6r		; 0.980334
	DQ	03fef5e4618b57aeer		; 0.980258
	DQ	03fef5da6ed47ca22r		; 0.980182
	DQ	03fef5d07748ae3c1r		; 0.980106
	DQ	03fef5c67ae7ec7cbr		; 0.98003
	DQ	03fef5bc79b237641r		; 0.979954
	DQ	03fef5b273a78ef22r		; 0.979877
	DQ	03fef5a868bf5c20fr		; 0.9798
	DQ	03fef59e590accfc6r		; 0.979724
	DQ	03fef5944478b378ar		; 0.979647
	DQ	03fef58a2b1a3da18r		; 0.97957
	DQ	03fef5800cde3d6b2r		; 0.979493
	DQ	03fef575e9cd49db8r		; 0.979415
	DQ	03fef56bc1e762f29r		; 0.979338
	DQ	03fef56195351fb64r		; 0.97926
	DQ	03fef55763a5521acr		; 0.979182
	DQ	03fef54d2d409125fr		; 0.979104
	DQ	03fef542f206dcd7dr		; 0.979026
	DQ	03fef538b1f835306r		; 0.978948
	DQ	03fef52e6d1d3135ar		; 0.97887
	DQ	03fef5242364a2dbar		; 0.978791
	DQ	03fef519d4d721286r		; 0.978713
	DQ	03fef50f8174ac1bdr		; 0.978634
	DQ	03fef5052945dabber		; 0.978555
	DQ	03fef4facc397efcbr		; 0.978476
	DQ	03fef4f06a60c6ea3r		; 0.978397
	DQ	03fef4e603b31b7e7r		; 0.978317
	DQ	03fef4db98307cb95r		; 0.978238
	DQ	03fef4d127d8ea9afr		; 0.978158
	DQ	03fef4c6b2ac65234r		; 0.978078
	DQ	03fef4bc38aaec525r		; 0.977999
	DQ	03fef4b1b9d480281r		; 0.977918
	DQ	03fef4a73631b7aa7r		; 0.977838
	DQ	03fef49cadb9fbd39r		; 0.977758
	DQ	03fef492206d4ca36r		; 0.977677
	DQ	03fef4878e4baa19er		; 0.977597
	DQ	03fef47cf75dab3d1r		; 0.977516
	DQ	03fef4725b9222010r		; 0.977435
	DQ	03fef467bafa3c71ar		; 0.977354
	DQ	03fef45d158d6388fr		; 0.977273
	DQ	03fef4526b542e4cer		; 0.977191
	DQ	03fef447bc4605b79r		; 0.97711
	DQ	03fef43d0862e9c8fr		; 0.977028
	DQ	03fef4324faada811r		; 0.976946
	DQ	03fef42792266ee5dr		; 0.976864
	DQ	03fef41ccfcd0ff14r		; 0.976782
	DQ	03fef412089ebda37r		; 0.9767
	DQ	03fef4073ca40f024r		; 0.976618
	DQ	03fef3fc6bd46d07dr		; 0.976535
	DQ	03fef3f1962fd7b40r		; 0.976453
	DQ	03fef3e6bbbee60cfr		; 0.97637
	DQ	03fef3dbdc8198128r		; 0.976287
	DQ	03fef3d0f866bfb8dr		; 0.976204
	DQ	03fef3c60f7f8b0bdr		; 0.97612
	DQ	03fef3bb21cbfa0b7r		; 0.976037
	DQ	03fef3b02f4375b1cr		; 0.975954
	DQ	03fef3a537ee9504cr		; 0.97587
	DQ	03fef39a3bc4c0fe8r		; 0.975786
	DQ	03fef38f3ac5f99eer		; 0.975702
	DQ	03fef38434fad5ec0r		; 0.975618
	DQ	03fef3792a6355e5cr		; 0.975534
	DQ	03fef36e1af6e2863r		; 0.975449
	DQ	03fef36306b57bcd5r		; 0.975365
	DQ	03fef357eda7b8c12r		; 0.97528
	DQ	03fef34ccfcd9961ar		; 0.975195
	DQ	03fef341ad1e86a8dr		; 0.97511
	DQ	03fef33685a3179cbr		; 0.975025
	DQ	03fef32b595b4c3d3r		; 0.97494
	DQ	03fef320283e8d846r		; 0.974855
	DQ	03fef314f24cdb725r		; 0.974769
	DQ	03fef309b7976412dr		; 0.974684
	DQ	03fef2fe780cf95a1r		; 0.974598
	DQ	03fef2f333ad9b481r		; 0.974512
	DQ	03fef2e7ea8a77e8ar		; 0.974426
	DQ	03fef2dc9c92612fer		; 0.974339
	DQ	03fef2d149cdee23dr		; 0.974253
	DQ	03fef2c5f23487be7r		; 0.974166
	DQ	03fef2ba95cec505cr		; 0.97408
	DQ	03fef2af349ca5f9br		; 0.973993
	DQ	03fef2a3ce9e2a9a5r		; 0.973906
	DQ	03fef29863cabbe1br		; 0.973819
	DQ	03fef28cf43387dbar		; 0.973732
	DQ	03fef2817fc7607c4r		; 0.973644
	DQ	03fef276068edcc99r		; 0.973557
	DQ	03fef26a888165bd9r		; 0.973469
	DQ	03fef25f05b029644r		; 0.973381
	DQ	03fef2537e09f9b19r		; 0.973293
	DQ	03fef247f1976dab9r		; 0.973205
	DQ	03fef23c605885524r		; 0.973117
	DQ	03fef230ca4d40a59r		; 0.973028
	DQ	03fef2252f759fa59r		; 0.97294
	DQ	03fef2198fd1a2523r		; 0.972851
	DQ	03fef20deb6148ab8r		; 0.972762
	DQ	03fef202421bfbab8r		; 0.972673
	DQ	03fef1f69412e95e2r		; 0.972584
	DQ	03fef1eae134e3b77r		; 0.972495
	DQ	03fef1df299318c36r		; 0.972406
	DQ	03fef1d36d24f17c0r		; 0.972316
	DQ	03fef1c7abe1d6db5r		; 0.972226
	DQ	03fef1bbe5daf6ed4r		; 0.972137
	DQ	03fef1b01aff23a5er		; 0.972047
	DQ	03fef1a44b5f8b112r		; 0.971957
	DQ	03fef19876eaff232r		; 0.971866
	DQ	03fef18c9db2ade7br		; 0.971776
	DQ	03fef180bfae0058fr		; 0.971685
	DQ	03fef174dcdcf676dr		; 0.971595
	DQ	03fef168f53f90416r		; 0.971504
	DQ	03fef15d08d5cdb89r		; 0.971413
	DQ	03fef151179faedc7r		; 0.971322
	DQ	03fef14521a5cab2fr		; 0.971231
	DQ	03fef13926d6f3302r		; 0.971139
	DQ	03fef12d2744565ffr		; 0.971048
	DQ	03fef12122e55d3c7r		; 0.970956
	DQ	03fef11519ba07c59r		; 0.970864
	DQ	03fef1090bcaed015r		; 0.970772
	DQ	03fef0fcf906dee3dr		; 0.97068
	DQ	03fef0f0e17f0b78er		; 0.970588
	DQ	03fef0e4c52adbba9r		; 0.970495
	DQ	03fef0d8a412e6aefr		; 0.970403
	DQ	03fef0cc7e25fe4a0r		; 0.97031
	DQ	03fef0c053755097ar		; 0.970217
	DQ	03fef0b42400dd97fr		; 0.970124
	DQ	03fef0a7efb7773efr		; 0.970031
	DQ	03fef09bb6aa4b988r		; 0.969938
	DQ	03fef08f78d0c39edr		; 0.969845
	DQ	03fef08336337657br		; 0.969751
	DQ	03fef076eec9ccbd3r		; 0.969657
	DQ	03fef06aa29c5dd56r		; 0.969564
	DQ	03fef05e5199fb943r		; 0.96947
	DQ	03fef051fbdc6b0bar		; 0.969375
	DQ	03fef045a149e729cr		; 0.969281
	DQ	03fef03941f39dfa8r		; 0.969187
	DQ	03fef02cddd98f7der		; 0.969092
	DQ	03fef02074f324ader		; 0.968998
	DQ	03fef0140748f4909r		; 0.968903
	DQ	03fef00794d2681fdr		; 0.968808
	DQ	03feeffb1d8f7f5bdr		; 0.968713
	DQ	03feefeea19168505r		; 0.968617
	DQ	03feefe220be5deb9r		; 0.968522
	DQ	03feefd59b30253f6r		; 0.968427
	DQ	03feefc910ccf939er		; 0.968331
	DQ	03feefbc81ae9eecfr		; 0.968235
	DQ	03feefafedc3e84cbr		; 0.968139
	DQ	03feefa3550cd5591r		; 0.968043
	DQ	03feef96b79a941e1r		; 0.967947
	DQ	03feef8a155bf68fbr		; 0.96785
	DQ	03feef7d6e50fcadfr		; 0.967754
	DQ	03feef70c2823d7eer		; 0.967657
	DQ	03feef6411efb9026r		; 0.96756
	DQ	03feef575c996f388r		; 0.967463
	DQ	03feef4aa276c91b5r		; 0.967366
	DQ	03feef3de3905db0br		; 0.967269
	DQ	03feef311fe62cf8cr		; 0.967172
	DQ	03feef24577836f36r		; 0.967074
	DQ	03feef178a3de49aar		; 0.966976
	DQ	03feef0ab83fccf49r		; 0.966879
	DQ	03feeefde17df0011r		; 0.966781
	DQ	03feeef105f84dc04r		; 0.966683
	DQ	03feeee425a64f2c0r		; 0.966584
	DQ	03feeed7409922506r		; 0.966486
	DQ	03feeeca56bf99217r		; 0.966387
	DQ	03feeebd68224aa51r		; 0.966289
	DQ	03feeeb074c136db5r		; 0.96619
	DQ	03feeea37c9c5dc43r		; 0.966091
	DQ	03feee967fb3bf5far		; 0.965992
	DQ	03feee897e075badcr		; 0.965893
	DQ	03feee7c779732ae7r		; 0.965793
	DQ	03feee6f6c634461dr		; 0.965694
	DQ	03feee625c62f9c1cr		; 0.965594
	DQ	03feee5547a780da5r		; 0.965494
	DQ	03feee482e2842a58r		; 0.965394
	DQ	03feee3b0fdca81d5r		; 0.965294
	DQ	03feee2decd5df4dbr		; 0.965194
	DQ	03feee20c50b5130cr		; 0.965094
	DQ	03feee13987cfdc66r		; 0.964993
	DQ	03feee06672ae50e9r		; 0.964893
	DQ	03feedf9311507097r		; 0.964792
	DQ	03feedebf63b63b6er		; 0.964691
	DQ	03feeddeb69dfb170r		; 0.96459
	DQ	03feedd17245642far		; 0.964489
	DQ	03feedc4292070f4fr		; 0.964387
	DQ	03feedb6db404f72dr		; 0.964286
	DQ	03feeda9889c68a35r		; 0.964184
	DQ	03feed9c3134bc867r		; 0.964082
	DQ	03feed8ed5094b1c2r		; 0.96398
	DQ	03feed817422ab6a7r		; 0.963878
	DQ	03feed740e78466b5r		; 0.963776
	DQ	03feed66a40a1c1edr		; 0.963674
	DQ	03feed5934d82c84fr		; 0.963571
	DQ	03feed4bc0eb0ea3br		; 0.963469
	DQ	03feed3e483a2b750r		; 0.963366
	DQ	03feed30cac582f8er		; 0.963263
	DQ	03feed234895ac356r		; 0.96316
	DQ	03feed15c1a210248r		; 0.963057
	DQ	03feed0835eaaec63r		; 0.962953
	DQ	03feecfaa5781f208r		; 0.96285
	DQ	03feeced1041ca2d7r		; 0.962746
	DQ	03feecdf7647afecfr		; 0.962642
	DQ	03feecd1d79267650r		; 0.962538
	DQ	03feecc43419598fbr		; 0.962434
	DQ	03feecb68be51d730r		; 0.96233
	DQ	03feeca8deed1c08er		; 0.962226
	DQ	03feec9b2d39ec575r		; 0.962121
	DQ	03feec8d76cb8e5e5r		; 0.962017
	DQ	03feec7fbb90d4120r		; 0.961912
	DQ	03feec71fba382843r		; 0.961807
	DQ	03feec6436f26ba90r		; 0.961702
	DQ	03feec566d7d8f807r		; 0.961597
	DQ	03feec489f4d85107r		; 0.961492
	DQ	03feec3acc624c590r		; 0.961386
	DQ	03feec2cf4b34e543r		; 0.96128
	DQ	03feec1f18492207er		; 0.961175
	DQ	03feec11371b306e4r		; 0.961069
	DQ	03feec035132108d3r		; 0.960963
	DQ	03feebf5668dc264br		; 0.960857
	DQ	03feebe7772e45f4cr		; 0.96075
	DQ	03feebd9830b04377r		; 0.960644
	DQ	03feebcb8a2c9432ar		; 0.960537
	DQ	03feebbd8c8a5ee08r		; 0.960431
	DQ	03feebaf8a35924cer		; 0.960324
	DQ	03feeba1831d006ber		; 0.960217
	DQ	03feeb93774940437r		; 0.960109
	DQ	03feeb8566ba51d39r		; 0.960002
	DQ	03feeb7751679e165r		; 0.959895
	DQ	03feeb69376253179r		; 0.959787
	DQ	03feeb5b189942cb7r		; 0.959679
	DQ	03feeb4cf5150437er		; 0.959572
	DQ	03feeb3eccd5975cer		; 0.959464
	DQ	03feeb309fdafc3a8r		; 0.959355
	DQ	03feeb226e2532d0ar		; 0.959247
	DQ	03feeb1437aba4196r		; 0.959139
	DQ	03feeb05fc7f7e20br		; 0.95903
	DQ	03feeaf7bc9829e08r		; 0.958921
	DQ	03feeae977ed10530r		; 0.958812
	DQ	03feeadb2e8f5f83fr		; 0.958703
	DQ	03feeacce06de9679r		; 0.958594
	DQ	03feeabe8d99dc09br		; 0.958485
	DQ	03feeab0360aa0646r		; 0.958376
	DQ	03feeaa1d9b79f71br		; 0.958266
	DQ	03feea9378b2073d8r		; 0.958156
	DQ	03feea8512f140c1er		; 0.958047
	DQ	03feea76a8754bfedr		; 0.957937
	DQ	03feea68393e28f46r		; 0.957826
	DQ	03feea59c54bd7a27r		; 0.957716
	DQ	03feea4b4ca6ef0f1r		; 0.957606
	DQ	03feea3ccf3e412e5r		; 0.957495
	DQ	03feea2e4d22fc0c1r		; 0.957385
	DQ	03feea1fc64c88a26r		; 0.957274
	DQ	03feea113abae6f14r		; 0.957163
	DQ	03feea02aa6e16f8br		; 0.957052
	DQ	03fee9f4156eafbear		; 0.95694
	DQ	03fee9e57bb41a3d3r		; 0.956829
	DQ	03fee9d6dd3e56745r		; 0.956717
	DQ	03fee9c83a0d64640r		; 0.956606
	DQ	03fee9b99229db123r		; 0.956494
	DQ	03fee9aae58b2378fr		; 0.956382
	DQ	03fee99c34313d984r		; 0.95627
	DQ	03fee98d7e24c0762r		; 0.956158
	DQ	03fee97ec35d150c9r		; 0.956045
	DQ	03fee97003e2d2618r		; 0.955933
	DQ	03fee9613fad616f0r		; 0.95582
	DQ	03fee95276bcc2351r		; 0.955707
	DQ	03fee943a9198bb9br		; 0.955594
	DQ	03fee934d6bb26f6dr		; 0.955481
	DQ	03fee925ffaa2af28r		; 0.955368
	DQ	03fee91723de00a6cr		; 0.955255
	DQ	03fee908435f3f199r		; 0.955141
	DQ	03fee8f95e2de64adr		; 0.955028
	DQ	03fee8ea7438c82ecr		; 0.954914
	DQ	03fee8db8599a9d72r		; 0.9548
	DQ	03fee8cc923f5d381r		; 0.954686
	DQ	03fee8bd9a3279579r		; 0.954572
	DQ	03fee8ae9d6a672f9r		; 0.954457
	DQ	03fee89f9befbdc62r		; 0.954343
	DQ	03fee89095b9e6155r		; 0.954228
	DQ	03fee8818ad17722fr		; 0.954113
	DQ	03fee8727b3670ef2r		; 0.953998
	DQ	03fee86366e8d379dr		; 0.953883
	DQ	03fee8544de007bd1r		; 0.953768
	DQ	03fee8453024a4bedr		; 0.953653
	DQ	03fee8360db6aa7f2r		; 0.953537
	DQ	03fee826e68d81f80r		; 0.953422
	DQ	03fee817bab1c22f6r		; 0.953306
	DQ	03fee8088a236b255r		; 0.95319
	DQ	03fee7f954e27cd9cr		; 0.953074
	DQ	03fee7ea1aeef74cbr		; 0.952958
	DQ	03fee7dadc48da7e3r		; 0.952842
	DQ	03fee7cb98e78f683r		; 0.952725
	DQ	03fee7bc50d3ad10cr		; 0.952609
	DQ	03fee7ad0415ca7ddr		; 0.952492
	DQ	03fee79db29cb9a37r		; 0.952375
	DQ	03fee78e5c7111879r		; 0.952258
	DQ	03fee77f0192d22a3r		; 0.952141
	DQ	03fee76fa201fb8b6r		; 0.952024
	DQ	03fee7603dbe8dab1r		; 0.951906
	DQ	03fee750d4c888894r		; 0.951789
	DQ	03fee741671fec260r		; 0.951671
	DQ	03fee731f4c4b8814r		; 0.951553
	DQ	03fee7227db6ed9b0r		; 0.951435
	DQ	03fee71301f68b735r		; 0.951317
	DQ	03fee7038183920a2r		; 0.951199
	DQ	03fee6f3fc6698656r		; 0.95108
	DQ	03fee6e4728e70794r		; 0.950962
	DQ	03fee6d4e40c48519r		; 0.950843
	DQ	03fee6c550d788e87r		; 0.950724
	DQ	03fee6b5b8f0323ddr		; 0.950605
	DQ	03fee6a61c564451br		; 0.950486
	DQ	03fee6967b09bf242r		; 0.950367
	DQ	03fee686d51339bb0r		; 0.950247
	DQ	03fee6772a6a1d107r		; 0.950128
	DQ	03fee6677b0e69246r		; 0.950008
	DQ	03fee657c7001df6dr		; 0.949888
	DQ	03fee6480e47d28dcr		; 0.949768
	DQ	03fee63850dcefe33r		; 0.949648
	DQ	03fee6288ec80cfd2r		; 0.949528
	DQ	03fee618c7f7fbcfar		; 0.949408
	DQ	03fee608fc7dea669r		; 0.949287
	DQ	03fee5f92c59d8c20r		; 0.949167
	DQ	03fee5e957832fdbfr		; 0.949046
	DQ	03fee5d97df9efb47r		; 0.948925
	DQ	03fee5c99fc6af516r		; 0.948804
	DQ	03fee5b9bce0d7acer		; 0.948683
	DQ	03fee5a9d550ffccdr		; 0.948561
	DQ	03fee599e90e90ab5r		; 0.94844
	DQ	03fee589f822214e4r		; 0.948318
	DQ	03fee57a02831aafbr		; 0.948196
	DQ	03fee56a083a13d5br		; 0.948075
	DQ	03fee55a093e75ba2r		; 0.947953
	DQ	03fee54a0598d7631r		; 0.94783
	DQ	03fee539fd4938d08r		; 0.947708
	DQ	03fee529f04702fc6r		; 0.947586
	DQ	03fee519de9accecdr		; 0.947463
	DQ	03fee509c83bff9bcr		; 0.94734
	DQ	03fee4f9ad33320f2r		; 0.947217
	DQ	03fee4e98d8064470r		; 0.947094
	DQ	03fee4d9692396436r		; 0.946971
	DQ	03fee4c9401430fe4r		; 0.946848
	DQ	03fee4b9125acb7d9r		; 0.946724
	DQ	03fee4a8dff765c17r		; 0.946601
	DQ	03fee498a8e9ffc9br		; 0.946477
	DQ	03fee4886d2a02908r		; 0.946353
	DQ	03fee4782cc0051bdr		; 0.946229
	DQ	03fee467e7ac076b9r		; 0.946105
	DQ	03fee4579dee097fdr		; 0.945981
	DQ	03fee4474f860b589r		; 0.945857
	DQ	03fee436fc740cf5cr		; 0.945732
	DQ	03fee426a4af77517r		; 0.945607
	DQ	03fee416484978779r		; 0.945483
	DQ	03fee405e730e25c4r		; 0.945358
	DQ	03fee3f58176e30b5r		; 0.945232
	DQ	03fee3e5170a4c78fr		; 0.945107
	DQ	03fee3d4a7fc4cb0fr		; 0.944982
	DQ	03fee3c4343bb5a78r		; 0.944856
	DQ	03fee3b3bbd9b5688r		; 0.944731
	DQ	03fee3a33ec51de80r		; 0.944605
	DQ	03fee392bd0f1d31fr		; 0.944479
	DQ	03fee38236af1c406r		; 0.944353
	DQ	03fee371ab9c840d5r		; 0.944227
	DQ	03fee3611be882a4ar		; 0.9441
	DQ	03fee350879318067r		; 0.943974
	DQ	03fee33fee8b1626cr		; 0.943847
	DQ	03fee32f50d9140b8r		; 0.94372
	DQ	03fee31eae85a8bacr		; 0.943593
	DQ	03fee30e07883d2e6r		; 0.943466
	DQ	03fee2fd5be0d1669r		; 0.943339
	DQ	03fee2ecab97fc692r		; 0.943212
	DQ	03fee2dbf69c902a4r		; 0.943084
	DQ	03fee2cb3cffbab5dr		; 0.942957
	DQ	03fee2ba7ec17c0bcr		; 0.942829
	DQ	03fee2a9bbd93d263r		; 0.942701
	DQ	03fee298f446fe051r		; 0.942573
	DQ	03fee288280abea88r		; 0.942445
	DQ	03fee277572d16165r		; 0.942317
	DQ	03fee26681a56d489r		; 0.942188
	DQ	03fee255a77c5b455r		; 0.94206
	DQ	03fee244c8a949068r		; 0.941931
	DQ	03fee233e52c368c2r		; 0.941802
	DQ	03fee222fd1651e23r		; 0.941673
	DQ	03fee212104dd5f6cr		; 0.941544
	DQ	03fee2011ee3f0d5cr		; 0.941415
	DQ	03fee1f028d8a27f3r		; 0.941285
	DQ	03fee1df2e2353ed1r		; 0.941156
	DQ	03fee1ce2ecc9c256r		; 0.941026
	DQ	03fee1bd2acbe4223r		; 0.940896
	DQ	03fee1ac223259ef6r		; 0.940766
	DQ	03fee19b14e6387b1r		; 0.940636
	DQ	03fee18a030144d73r		; 0.940506
	DQ	03fee178ec7250f7br		; 0.940376
	DQ	03fee167d1395cdccr		; 0.940245
	DQ	03fee156b16796923r		; 0.940115
	DQ	03fee1458cebd00c1r		; 0.939984
	DQ	03fee13463cea0506r		; 0.939853
	DQ	03fee1233610075f2r		; 0.939722
	DQ	03fee11203a76e325r		; 0.939591
	DQ	03fee100cca602d5fr		; 0.939459
	DQ	03fee0ef90fa973e0r		; 0.939328
	DQ	03fee0de50adc2708r		; 0.939196
	DQ	03fee0cd0bbf846d7r		; 0.939064
	DQ	03fee0bbc22fdd34cr		; 0.938932
	DQ	03fee0aa73f635c0ar		; 0.9388
	DQ	03fee0992123bc1cdr		; 0.938668
	DQ	03fee087c9a7423d8r		; 0.938536
	DQ	03fee0766d91f62e9r		; 0.938404
	DQ	03fee0650cdb40ea1r		; 0.938271
	DQ	03fee053a77a8b6a1r		; 0.938138
	DQ	03fee0423d8103ba6r		; 0.938005
	DQ	03fee030cedd7bcf3r		; 0.937872
	DQ	03fee01f5ba121b47r		; 0.937739
	DQ	03fee00de3c35e641r		; 0.937606
	DQ	03fedffc674431de2r		; 0.937473
	DQ	03fedfeae6239c22ar		; 0.937339
	DQ	03fedfd960619d318r		; 0.937205
	DQ	03fedfc7d5fe350aer		; 0.937072
	DQ	03fedfb64701fab4ar		; 0.936938
	DQ	03fedfa4b3645728cr		; 0.936803
	DQ	03fedf931b254a675r		; 0.936669
	DQ	03fedf817e44d4706r		; 0.936535
	DQ	03fedf6fdcc2f543dr		; 0.9364
	DQ	03fedf5e36a843e7ar		; 0.936266
	DQ	03fedf4c8bec2955er		; 0.936131
	DQ	03fedf3adc973c948r		; 0.935996
	DQ	03fedf2928984f979r		; 0.935861
	DQ	03fedf177000906b1r		; 0.935726
	DQ	03fedf05b2cfff0efr		; 0.93559
	DQ	03fedef3f0fe047d4r		; 0.935455
	DQ	03fedee22a8aa0b5fr		; 0.935319
	DQ	03feded05f7e6abf1r		; 0.935184
	DQ	03fedebe8fd0cb92ar		; 0.935048
	DQ	03fedeacbb8a5a368r		; 0.934912
	DQ	03fede9ae2a27fa4er		; 0.934775
	DQ	03fede890521d2e39r		; 0.934639
	DQ	03fede7722ffbceccr		; 0.934503
	DQ	03fede653c44d4c64r		; 0.934366
	DQ	03fede5350e8836a3r		; 0.934229
	DQ	03fede4160f35fde9r		; 0.934093
	DQ	03fede2f6c656a234r		; 0.933956
	DQ	03fede1d73360b327r		; 0.933818
	DQ	03fede0b756dda11fr		; 0.933681
	DQ	03feddf9730cd6c1er		; 0.933544
	DQ	03fedde76c0a6a3c3r		; 0.933406
	DQ	03feddd5606f2b86fr		; 0.933269
	DQ	03feddc3503b1aa20r		; 0.933131
	DQ	03feddb13b6e378d8r		; 0.932993
	DQ	03fedd9f21ffeb437r		; 0.932855
	DQ	03fedd8d03f8ccc9br		; 0.932716
	DQ	03fedd7ae158dc206r		; 0.932578
	DQ	03fedd68ba2019477r		; 0.93244
	DQ	03fedd568e4e843eer		; 0.932301
	DQ	03fedd445de41d06br		; 0.932162
	DQ	03fedd3228d84c98fr		; 0.932023
	DQ	03fedd1fef3c41018r		; 0.931884
	DQ	03fedd0db0fecc348r		; 0.931745
	DQ	03fedcfb6e288537fr		; 0.931606
	DQ	03fedce926c20311ar		; 0.931466
	DQ	03fedcd6daba17b5dr		; 0.931327
	DQ	03fedcc48a195a2a5r		; 0.931187
	DQ	03fedcb234e861753r		; 0.931047
	DQ	03fedc9fdb15ff8a8r		; 0.930907
	DQ	03fedc8d7cb362762r		; 0.930767
	DQ	03fedc7b19b7f3322r		; 0.930627
	DQ	03fedc68b223b1be8r		; 0.930486
	DQ	03fedc5645f69e1b5r		; 0.930346
	DQ	03fedc43d530b8487r		; 0.930205
	DQ	03fedc315fd200460r		; 0.930064
	DQ	03fedc1ee5e30d19er		; 0.929923
	DQ	03fedc0c675b47be2r		; 0.929782
	DQ	03fedbf9e43ab032cr		; 0.929641
	DQ	03fedbe75c814677cr		; 0.9295
	DQ	03fedbd4d037a1932r		; 0.929358
	DQ	03fedbc23f552a7eer		; 0.929216
	DQ	03fedbafa9d9e13afr		; 0.929075
	DQ	03fedb9d0fce5ccd7r		; 0.928933
	DQ	03fedb8a712a06304r		; 0.928791
	DQ	03fedb77cdf574696r		; 0.928648
	DQ	03fedb65261f796d0r		; 0.928506
	DQ	03fedb5279c1da4cer		; 0.928364
	DQ	03fedb3fc8cb68fd2r		; 0.928221
	DQ	03fedb2d133c257dcr		; 0.928078
	DQ	03fedb1a591ca6d4cr		; 0.927935
	DQ	03fedb079a6455fc2r		; 0.927792
	DQ	03fedaf4d71bc9f9dr		; 0.927649
	DQ	03fedae20f4302cddr		; 0.927506
	DQ	03fedacf42d169724r		; 0.927363
	DQ	03fedabc71c6fde70r		; 0.927219
	DQ	03fedaa99c34ee382r		; 0.927075
	DQ	03feda96c20a0c599r		; 0.926931
	DQ	03feda83e346584b6r		; 0.926787
	DQ	03feda70fffb00199r		; 0.926643
	DQ	03feda5e1816d5b81r		; 0.926499
	DQ	03feda4b2ba2702cer		; 0.926355
	DQ	03feda383a9538722r		; 0.92621
	DQ	03feda2544f7c58dbr		; 0.926066
	DQ	03feda124ad2ae858r		; 0.925921
	DQ	03fed9ff4c14c54dcr		; 0.925776
	DQ	03fed9ec48be09e66r		; 0.925631
	DQ	03fed9d940dfaa5b4r		; 0.925486
	DQ	03fed9c634710fa68r		; 0.92534
	DQ	03fed9b32369a2c22r		; 0.925195
	DQ	03fed9a00dda91ba0r		; 0.925049
	DQ	03fed98cf3b2ae825r		; 0.924904
	DQ	03fed979d5032726er		; 0.924758
	DQ	03fed966b1bacd9bdr		; 0.924612
	DQ	03fed95389e238e72r		; 0.924465
	DQ	03fed9405d82000ebr		; 0.924319
	DQ	03fed92d2c88f506ar		; 0.924173
	DQ	03fed919f70845daer		; 0.924026
	DQ	03fed906bceec47f8r		; 0.92388
	DQ	03fed8f37e4d9f007r		; 0.923733
	DQ	03fed8e03b1c3e57br		; 0.923586
	DQ	03fed8ccf35aa2854r		; 0.923439
	DQ	03fed8b9a711628f2r		; 0.923291
	DQ	03fed8a6562f50697r		; 0.923144
	DQ	03fed89300c59a1ffr		; 0.922997
	DQ	03fed87fa6cba8acdr		; 0.922849
	DQ	03fed86c48417c101r		; 0.922701
	DQ	03fed858e52fab4f9r		; 0.922553
	DQ	03fed8457d8d9f656r		; 0.922405
	DQ	03fed832115b58519r		; 0.922257
	DQ	03fed81ea0a16d1a0r		; 0.922109
	DQ	03fed80b2b5746b8dr		; 0.92196
	DQ	03fed7f7b17ce52dfr		; 0.921812
	DQ	03fed7e4331adf7f5r		; 0.921663
	DQ	03fed7d0b0289ea71r		; 0.921514
	DQ	03fed7bd28aeb9ab2r		; 0.921365
	DQ	03fed7a99ca499858r		; 0.921216
	DQ	03fed7960c12d53c3r		; 0.921067
	DQ	03fed78276f96ccf2r		; 0.920917
	DQ	03fed76edd4732327r		; 0.920768
	DQ	03fed75b3f15ea780r		; 0.920618
	DQ	03fed7479c546793fr		; 0.920468
	DQ	03fed733f50b408c2r		; 0.920318
	DQ	03fed7204931de5aar		; 0.920168
	DQ	03fed70c98d0d8057r		; 0.920018
	DQ	03fed6f8e3e82d8c9r		; 0.919868
	DQ	03fed6e52a6f47ea0r		; 0.919717
	DQ	03fed6d16c6ebe23cr		; 0.919567
	DQ	03fed6bda9e69039cr		; 0.919416
	DQ	03fed6a9e2d6be2c1r		; 0.919265
	DQ	03fed696173f47faar		; 0.919114
	DQ	03fed6824717969f9r		; 0.918963
	DQ	03fed66e72684120dr		; 0.918811
	DQ	03fed65a9931477e5r		; 0.91866
	DQ	03fed646bb72a9b81r		; 0.918508
	DQ	03fed632d92c67ce3r		; 0.918357
	DQ	03fed61ef25e81c09r		; 0.918205
	DQ	03fed60b0708f78f3r		; 0.918053
	DQ	03fed5f7172bc93a2r		; 0.917901
	DQ	03fed5e322be5fbb7r		; 0.917749
	DQ	03fed5cf29d1e91efr		; 0.917596
	DQ	03fed5bb2c5dce5ecr		; 0.917444
	DQ	03fed5a72a620f7aer		; 0.917291
	DQ	03fed59323deac734r		; 0.917138
	DQ	03fed57f18d3a547er		; 0.916985
	DQ	03fed56b0940f9f8er		; 0.916832
	DQ	03fed556f52f418c1r		; 0.916679
	DQ	03fed542dc95e4fb9r		; 0.916526
	DQ	03fed52ebf6c4d416r		; 0.916372
	DQ	03fed51a9dc3a8697r		; 0.916219
	DQ	03fed506779bf673cr		; 0.916065
	DQ	03fed4f24ce409546r		; 0.915911
	DQ	03fed4de1dad0f175r		; 0.915757
	DQ	03fed4c9e9f707bc7r		; 0.915603
	DQ	03fed4b5b1b0c537er		; 0.915449
	DQ	03fed4a174eb75959r		; 0.915294
	DQ	03fed48d339e81cf9r		; 0.91514
	DQ	03fed478edd280ebdr		; 0.914985
	DQ	03fed464a37edbe45r		; 0.91483
	DQ	03fed45054ac29bf1r		; 0.914675
	DQ	03fed43c0151d3762r		; 0.91452
	DQ	03fed427a978700f7r		; 0.914365
	DQ	03fed4134d1768850r		; 0.91421
	DQ	03fed3feec2ebcd6er		; 0.914054
	DQ	03fed3ea86cf9b10fr		; 0.913899
	DQ	03fed3d61ce03e215r		; 0.913743
	DQ	03fed3c1ae7a6b19fr		; 0.913587
	DQ	03fed3ad3b8cf3eedr		; 0.913431
	DQ	03fed398c4206fa5fr		; 0.913275
	DQ	03fed384482c47396r		; 0.913119
	DQ	03fed36fc7b911af0r		; 0.912962
	DQ	03fed35b42c6cf06er		; 0.912806
	DQ	03fed346b9557f410r		; 0.912649
	DQ	03fed3322b5c8b577r		; 0.912492
	DQ	03fed31d98ed21561r		; 0.912335
	DQ	03fed30901f613310r		; 0.912178
	DQ	03fed2f4667ff7ee2r		; 0.912021
	DQ	03fed2dfc68238879r		; 0.911864
	DQ	03fed2cb220e03093r		; 0.911706
	DQ	03fed2b6791ac06d1r		; 0.911548
	DQ	03fed2a1cb9fd9ad4r		; 0.911391
	DQ	03fed28d19ae7cd59r		; 0.911233
	DQ	03fed27863357bda4r		; 0.911075
	DQ	03fed263a84604c71r		; 0.910917
	DQ	03fed24ee8cee9903r		; 0.910758
	DQ	03fed23a24e158418r		; 0.9106
	DQ	03fed2255c6c22cf2r		; 0.910441
	DQ	03fed2108f807744fr		; 0.910283
	DQ	03fed1fbbe15be9d0r		; 0.910124
	DQ	03fed1e6e82bf8d74r		; 0.909965
	DQ	03fed1d20dc325f3dr		; 0.909806
	DQ	03fed1bd2edb45f29r		; 0.909646
	DQ	03fed1a84b7cefd98r		; 0.909487
	DQ	03fed193639f8ca2cr		; 0.909328
	DQ	03fed17e77431c4e3r		; 0.909168
	DQ	03fed16986679edber		; 0.909008
	DQ	03fed1549115ab51cr		; 0.908848
	DQ	03fed13f9744aaa9er		; 0.908688
	DQ	03fed12a98fd33ea3r		; 0.908528
	DQ	03fed1159636b00ccr		; 0.908368
	DQ	03fed1008ef11f119r		; 0.908207
	DQ	03fed0eb832c80f8ar		; 0.908047
	DQ	03fed0d672f16cc7er		; 0.907886
	DQ	03fed0c15e3fe27f5r		; 0.907725
	DQ	03fed0ac450f4b190r		; 0.907564
	DQ	03fed09727683d9aer		; 0.907403
	DQ	03fed082054222fefr		; 0.907242
	DQ	03fed06cdea5924b4r		; 0.907081
	DQ	03fed057b389f479dr		; 0.906919
	DQ	03fed04283f7e0909r		; 0.906757
	DQ	03fed02d4fe6bf899r		; 0.906596
	DQ	03fed0181767bf70br		; 0.906434
	DQ	03fed002da69b23a1r		; 0.906272
	DQ	03fecfed98ec97e5br		; 0.90611
	DQ	03fecfd853019e7f7r		; 0.905947
	DQ	03fecfc3089797fb8r		; 0.905785
	DQ	03fecfadb9b71b5fbr		; 0.905622
	DQ	03fecf98666028ac1r		; 0.90546
	DQ	03fecf830e8a28dabr		; 0.905297
	DQ	03fecf6db24649f78r		; 0.905134
	DQ	03fecf5851835df69r		; 0.904971
	DQ	03fecf42ec49fbddcr		; 0.904807
	DQ	03fecf2d82a2bab32r		; 0.904644
	DQ	03fecf18147c6c6acr		; 0.904481
	DQ	03fecf02a1dfa80a9r		; 0.904317
	DQ	03feceed2acc6d929r		; 0.904153
	DQ	03feced7af42bd02cr		; 0.903989
	DQ	03fecec22f42965b3r		; 0.903825
	DQ	03feceacaad490a1br		; 0.903661
	DQ	03fece9721e77dca8r		; 0.903497
	DQ	03fece819483f4db8r		; 0.903332
	DQ	03fece6c02b28cdaar		; 0.903168
	DQ	03fece566c6aaec1fr		; 0.903003
	DQ	03fece40d1ac5a917r		; 0.902838
	DQ	03fece2b327790492r		; 0.902673
	DQ	03fece158ed4e6ef0r		; 0.902508
	DQ	03fecdffe6b330772r		; 0.902343
	DQ	03fecdea3a2c31f35r		; 0.902178
	DQ	03fecdd489262651cr		; 0.902012
	DQ	03fecdbed3b23b9e6r		; 0.901847
	DQ	03fecda919c7dad33r		; 0.901681
	DQ	03fecd935b6703f02r		; 0.901515
	DQ	03fecd7d98984dfb4r		; 0.901349
	DQ	03fecd67d15321eear		; 0.901183
	DQ	03fecd5205a016d01r		; 0.901016
	DQ	03fecd3c35769599cr		; 0.90085
	DQ	03fecd2660df35519r		; 0.900683
	DQ	03fecd1087d9f5f79r		; 0.900517
	DQ	03feccfaaa55a97fcr		; 0.90035
	DQ	03fecce4c86c14fc1r		; 0.900183
	DQ	03fecccee20c0a609r		; 0.900016
	DQ	03feccb8f73e20b34r		; 0.899849
	DQ	03fecca307f9c0ee1r		; 0.899681
	DQ	03fecc8d144782171r		; 0.899514
	DQ	03fecc771c27642e4r		; 0.899346
	DQ	03fecc611f90d02d9r		; 0.899178
	DQ	03fecc4b1e94f4210r		; 0.899011
	DQ	03fecc351922a1fcar		; 0.898843
	DQ	03fecc1f0f4270c67r		; 0.898674
	DQ	03fecc0900ebc9787r		; 0.898506
	DQ	03fecbf2ee2fda1e8r		; 0.898338
	DQ	03fecbdcd6fd74accr		; 0.898169
	DQ	03fecbc6bb65c72f3r		; 0.898001
	DQ	03fecbb09b57a399cr		; 0.897832
	DQ	03fecb9a76dba0f27r		; 0.897663
	DQ	03fecb844df1bf395r		; 0.897494
	DQ	03fecb6e20a295745r		; 0.897325
	DQ	03fecb57eedcf5978r		; 0.897155
	DQ	03fecb41b8a976a8dr		; 0.896986
	DQ	03fecb2b7e10afae3r		; 0.896816
	DQ	03fecb153f01729bdr		; 0.896646
	DQ	03fecafefb8ced7d9r		; 0.896477
	DQ	03fecae8b3aa894d7r		; 0.896307
	DQ	03fecad2675a460b7r		; 0.896137
	DQ	03fecabc169c23b79r		; 0.895966
	DQ	03fecaa5c1702251er		; 0.895796
	DQ	03feca8f67ded8e05r		; 0.895625
	DQ	03feca7909dfb05cer		; 0.895455
	DQ	03feca62a772a8c79r		; 0.895284
	DQ	03feca4c40a059266r		; 0.895113
	DQ	03feca35d5602a735r		; 0.894942
	DQ	03feca1f65b21cae7r		; 0.894771
	DQ	03feca08f19ec6ddbr		; 0.894599
	DQ	03fec9f2791d91fb0r		; 0.894428
	DQ	03fec9dbfc2e7e068r		; 0.894256
	DQ	03fec9c57ae2b90c1r		; 0.894085
	DQ	03fec9aef5207df9dr		; 0.893913
	DQ	03fec9986af8fadbbr		; 0.893741
	DQ	03fec981dc6c2fb1ar		; 0.893569
	DQ	03fec96b49718575cr		; 0.893397
	DQ	03fec954b211932e0r		; 0.893224
	DQ	03fec93e164c58da4r		; 0.893052
	DQ	03fec92776193f74cr		; 0.892879
	DQ	03fec910d180de035r		; 0.892706
	DQ	03fec8fa287a9d800r		; 0.892534
	DQ	03fec8e37b17abf6cr		; 0.892361
	DQ	03fec8ccc946db5bbr		; 0.892187
	DQ	03fec8b61310c2b4br		; 0.892014
	DQ	03fec89f586ccafber		; 0.891841
	DQ	03fec888996c223d1r		; 0.891667
	DQ	03fec871d5fd9a6c7r		; 0.891493
	DQ	03fec85b0e326195er		; 0.89132
	DQ	03fec84441f949ad7r		; 0.891146
	DQ	03fec82d715ae9b92r		; 0.890972
	DQ	03fec8169c5741b8er		; 0.890798
	DQ	03fec7ffc2ee51accr		; 0.890623
	DQ	03fec7e8e5201994cr		; 0.890449
	DQ	03fec7d202ec9970dr		; 0.890274
	DQ	03fec7bb1c5c6846fr		; 0.890099
	DQ	03fec7a4315e580b4r		; 0.889925
	DQ	03fec78d41faffc3ar		; 0.88975
	DQ	03fec7764e3af6761r		; 0.889574
	DQ	03fec75f5615a51car		; 0.889399
	DQ	03fec748598b0bb74r		; 0.889224
	DQ	03fec731589b2a460r		; 0.889048
	DQ	03fec71a534600c8er		; 0.888873
	DQ	03fec70349942645cr		; 0.888697
	DQ	03fec6ec3b7d03b6cr		; 0.888521
	DQ	03fec6d52900991ber		; 0.888345
	DQ	03fec6be12277d7b1r		; 0.888169
	DQ	03fec6a6f6e919ce5r		; 0.887993
	DQ	03fec68fd7456e15br		; 0.887816
	DQ	03fec678b34511571r		; 0.88764
	DQ	03fec6618ae803929r		; 0.887463
	DQ	03fec64a5e25adc22r		; 0.887286
	DQ	03fec6332cfe0fe5dr		; 0.887109
	DQ	03fec61bf779c1039r		; 0.886932
	DQ	03fec604bd902a156r		; 0.886755
	DQ	03fec5ed7f49e2214r		; 0.886578
	DQ	03fec5d63ca6e9274r		; 0.8864
	DQ	03fec5bef59ea8214r		; 0.886223
	DQ	03fec5a7aa39b6156r		; 0.886045
	DQ	03fec5905a7813039r		; 0.885867
	DQ	03fec579065127e5dr		; 0.885689
	DQ	03fec561adcd8bc22r		; 0.885511
	DQ	03fec54a50ed3e988r		; 0.885333
	DQ	03fec532efb04068fr		; 0.885154
	DQ	03fec51b8a0dfa2d7r		; 0.884976
	DQ	03fec504200f02ec0r		; 0.884797
	DQ	03fec4ecb1bbf1aaar		; 0.884618
	DQ	03fec4d53f03985d5r		; 0.884439
	DQ	03fec4bdc7ee8e0a1r		; 0.88426
	DQ	03fec4a64c7cd2b0er		; 0.884081
	DQ	03fec48eccae6651cr		; 0.883902
	DQ	03fec477488348ecar		; 0.883723
	DQ	03fec45fbffb7a81ar		; 0.883543
	DQ	03fec4483316fb10ar		; 0.883363
	DQ	03fec430a1d5ca99cr		; 0.883184
	DQ	03fec4190c37e91cer		; 0.883004
	DQ	03fec401723d569a1r		; 0.882824
	DQ	03fec3e9d3eeaa174r		; 0.882643
	DQ	03fec3d231434c8e8r		; 0.882463
	DQ	03fec3ba8a3b3dffdr		; 0.882283
	DQ	03fec3a2ded67e6b3r		; 0.882102
	DQ	03fec38b2f150dd0ar		; 0.881921
	DQ	03fec3737aff83361r		; 0.88174
	DQ	03fec35bc28d47958r		; 0.881559
	DQ	03fec34405c6f1f50r		; 0.881378
	DQ	03fec32c449b5448ar		; 0.881197
	DQ	03fec3147f2433a23r		; 0.881016
	DQ	03fec2fcb547caefdr		; 0.880834
	DQ	03fec2e4e717483d8r		; 0.880653
	DQ	03fec2cd1492ab8b3r		; 0.880471
	DQ	03fec2b53db15dd2er		; 0.880289
	DQ	03fec29d627bf61aar		; 0.880107
	DQ	03fec28582e9dd5c7r		; 0.879925
	DQ	03fec26d9f03aa9e4r		; 0.879743
	DQ	03fec255b6c0c6da2r		; 0.87956
	DQ	03fec23dca29c915fr		; 0.879378
	DQ	03fec225d93eb151er		; 0.879195
	DQ	03fec20de3f6e887cr		; 0.879012
	DQ	03fec1f5ea639cc3br		; 0.878829
	DQ	03fec1ddec6b08f3br		; 0.878646
	DQ	03fec1c5ea26f229ar		; 0.878463
	DQ	03fec1ade38ec15f9r		; 0.87828
	DQ	03fec195d899df8far		; 0.878096
	DQ	03fec17dc950e3bfar		; 0.877913
	DQ	03fec165b5b3cdefbr		; 0.877729
	DQ	03fec14d9dc29e1fcr		; 0.877545
	DQ	03fec135817d544fdr		; 0.877361
	DQ	03fec11d60e3f07fer		; 0.877177
	DQ	03fec1053bf672affr		; 0.876993
	DQ	03fec0ed12b4dae00r		; 0.876809
	DQ	03fec0d4e51f29102r		; 0.876624
	DQ	03fec0bcb3355d403r		; 0.87644
	DQ	03fec0a47cf777705r		; 0.876255
	DQ	03fec08c426577a07r		; 0.87607
	DQ	03fec0740387f4d68r		; 0.875885
	DQ	03fec05bc04dc106ar		; 0.8757
	DQ	03fec04378c80a3ccr		; 0.875515
	DQ	03fec02b2cee3972dr		; 0.875329
	DQ	03fec012dcc04ea8fr		; 0.875144
	DQ	03febffa8846e0e50r		; 0.874958
	DQ	03febfe22f7959212r		; 0.874773
	DQ	03febfc9d257b75d3r		; 0.874587
	DQ	03febfb170ea929f4r		; 0.874401
	DQ	03febf990b2953e15r		; 0.874215
	DQ	03febf80a113fb236r		; 0.874028
	DQ	03febf6832b31f6b7r		; 0.873842
	DQ	03febf4fc006c0b97r		; 0.873655
	DQ	03febf37490648077r		; 0.873469
	DQ	03febf1ecdb1b5557r		; 0.873282
	DQ	03febf064e119fa97r		; 0.873095
	DQ	03febeedca2607036r		; 0.872908
	DQ	03febed541e6545d5r		; 0.872721
	DQ	03febebcb55b1ebd4r		; 0.872533
	DQ	03febea4248466231r		; 0.872346
	DQ	03febe8b8f5993890r		; 0.872159
	DQ	03febe72f5e33df4dr		; 0.871971
	DQ	03febe5a58216566ar		; 0.871783
	DQ	03febe41b61409de6r		; 0.871595
	DQ	03febe290fb294562r		; 0.871407
	DQ	03febe1065059bd3er		; 0.871219
	DQ	03febdf7b60d20579r		; 0.871031
	DQ	03febddf02c921e14r		; 0.870842
	DQ	03febdc64b39a070er		; 0.870653
	DQ	03febdad8f5e9c067r		; 0.870465
	DQ	03febd94cf3814a20r		; 0.870276
	DQ	03febd7c0ac60a438r		; 0.870087
	DQ	03febd6342087ceb0r		; 0.869898
	DQ	03febd4a74ff6c987r		; 0.869709
	DQ	03febd31a3aad94bdr		; 0.869519
	DQ	03febd18ce0ac3053r		; 0.86933
	DQ	03febcfff427c0ca7r		; 0.86914
	DQ	03febce715f0a48fcr		; 0.868951
	DQ	03febcce33769c60fr		; 0.868761
	DQ	03febcb54cb111381r		; 0.868571
	DQ	03febc9c61a003153r		; 0.868381
	DQ	03febc83724c08fe4r		; 0.86819
	DQ	03febc6a7eac8bed4r		; 0.868
	DQ	03febc5186c18be23r		; 0.867809
	DQ	03febc388a8b08dd2r		; 0.867619
	DQ	03febc1f8a1199e3fr		; 0.867428
	DQ	03febc0685553ef6br		; 0.867237
	DQ	03febbed7c44ca098r		; 0.867046
	DQ	03febbd46efa002e2r		; 0.866855
	DQ	03febbbb5d63b358br		; 0.866664
	DQ	03febba24781e3894r		; 0.866472
	DQ	03febb892d5d27c5cr		; 0.866281
	DQ	03febb700ef5800e2r		; 0.866089
	DQ	03febb56ec42555c7r		; 0.865898
	DQ	03febb3dc54c3eb6cr		; 0.865706
	DQ	03febb249a0aa516fr		; 0.865514
	DQ	03febb0b6a861f831r		; 0.865321
	DQ	03febaf236beadfb2r		; 0.865129
	DQ	03febad8feb4507f2r		; 0.864937
	DQ	03febabfc25e70091r		; 0.864744
	DQ	03febaa681ce3aa4er		; 0.864552
	DQ	03feba8d3cf28246ar		; 0.864359
	DQ	03feba73f3d3ddf45r		; 0.864166
	DQ	03feba5aa6724dader		; 0.863973
	DQ	03feba4154cdd1737r		; 0.86378
	DQ	03feba27fee66944dr		; 0.863586
	DQ	03feba0ea4bc15223r		; 0.863393
	DQ	03feb9f5464ed50b7r		; 0.863199
	DQ	03feb9dbe39ea900ar		; 0.863006
	DQ	03feb9c27cab9101br		; 0.862812
	DQ	03feb9a911758d0ebr		; 0.862618
	DQ	03feb98fa1fc9d27ar		; 0.862424
	DQ	03feb9762e4958527r		; 0.86223
	DQ	03feb95cb64a90833r		; 0.862035
	DQ	03feb9433a1173c5dr		; 0.861841
	DQ	03feb929b9956b145r		; 0.861646
	DQ	03feb91034d6766ecr		; 0.861452
	DQ	03feb8f6abdd2cdb2r		; 0.861257
	DQ	03feb8dd1ea0f7535r		; 0.861062
	DQ	03feb8c38d2a6cdd7r		; 0.860867
	DQ	03feb8a9f7685f6d8r		; 0.860672
	DQ	03feb8905d7494156r		; 0.860476
	DQ	03feb876bf3545c34r		; 0.860281
	DQ	03feb85d1cbba282fr		; 0.860085
	DQ	03feb8437607aa549r		; 0.85989
	DQ	03feb829cb10c6321r		; 0.859694
	DQ	03feb8101bdf8d217r		; 0.859498
	DQ	03feb7f6686b681ccr		; 0.859302
	DQ	03feb7dcb0bcee29er		; 0.859106
	DQ	03feb7c2f4d41f48er		; 0.858909
	DQ	03feb7a934a86473er		; 0.858713
	DQ	03feb78f704254b0br		; 0.858516
	DQ	03feb775a7a1efff5r		; 0.85832
	DQ	03feb75bdac7365fer		; 0.858123
	DQ	03feb74209a990cc6r		; 0.857926
	DQ	03feb7283451964abr		; 0.857729
	DQ	03feb70e5abf46daer		; 0.857531
	DQ	03feb6f47cf2a27cfr		; 0.857334
	DQ	03feb6da9aeba930er		; 0.857137
	DQ	03feb6c0b4a1c3f0cr		; 0.856939
	DQ	03feb6a6ca2620c87r		; 0.856741
	DQ	03feb68cdb7028b20r		; 0.856543
	DQ	03feb672e87fdbad6r		; 0.856345
	DQ	03feb658f14ca2b4cr		; 0.856147
	DQ	03feb63ef5e7abd3er		; 0.855949
	DQ	03feb624f6486004er		; 0.855751
	DQ	03feb60af26ebf47dr		; 0.855552
	DQ	03feb5f0ea6360a28r		; 0.855354
	DQ	03feb5d6de1516092r		; 0.855155
	DQ	03feb5bccd950d879r		; 0.854956
	DQ	03feb5a2b8dab017fr		; 0.854757
	DQ	03feb5889fe5fdba2r		; 0.854558
	DQ	03feb56e82bf8d742r		; 0.854359
	DQ	03feb554615ec8400r		; 0.854159
	DQ	03feb53a3bc3ae1dcr		; 0.85396
	DQ	03feb52011f6d6135r		; 0.85376
	DQ	03feb505e3efa91acr		; 0.853561
	DQ	03feb4ebb1b6be3a0r		; 0.853361
	DQ	03feb4d17b437e6b2r		; 0.853161
	DQ	03feb4b7409e80b42r		; 0.852961
	DQ	03feb49d01bf2e0efr		; 0.85276
	DQ	03feb482beae1d819r		; 0.85256
	DQ	03feb4687762b8061r		; 0.85236
	DQ	03feb44e2bee2ba86r		; 0.852159
	DQ	03feb433dc36b3569r		; 0.851958
	DQ	03feb419885614229r		; 0.851757
	DQ	03feb3ff303b20007r		; 0.851556
	DQ	03feb3e4d3ee6df61r		; 0.851355
	DQ	03feb3ca736ffe039r		; 0.851154
	DQ	03feb3b00eb73922fr		; 0.850953
	DQ	03feb395a5d54d601r		; 0.850751
	DQ	03feb37b38b90caf2r		; 0.850549
	DQ	03feb360c76b0e15fr		; 0.850348
	DQ	03feb34651f3e89a9r		; 0.850146
	DQ	03feb32bd8426e310r		; 0.849944
	DQ	03feb3115a5f35df5r		; 0.849742
	DQ	03feb2f6d84a3fa57r		; 0.84954
	DQ	03feb2dc52038b836r		; 0.849337
	DQ	03feb2c1c793b07f1r		; 0.849135
	DQ	03feb2a738e9808cbr		; 0.848932
	DQ	03feb28ca61629b81r		; 0.848729
	DQ	03feb2720f1114fb4r		; 0.848526
	DQ	03feb25773da42564r		; 0.848323
	DQ	03feb23cd471b1c91r		; 0.84812
	DQ	03feb22230d76353br		; 0.847917
	DQ	03feb2078913edfc2r		; 0.847714
	DQ	03feb1ecdd1ebabc6r		; 0.84751
	DQ	03feb1d22d00609a7r		; 0.847307
	DQ	03feb1b778b048904r		; 0.847103
	DQ	03feb19cc02e729dfr		; 0.846899
	DQ	03feb182038375c96r		; 0.846695
	DQ	03feb16742a6bb0cbr		; 0.846491
	DQ	03feb14c7d984267cr		; 0.846287
	DQ	03feb131b46939e69r		; 0.846082
	DQ	03feb116e708737d3r		; 0.845878
	DQ	03feb0fc1575ef2bbr		; 0.845673
	DQ	03feb0e13fba43f7fr		; 0.845469
	DQ	03feb0c665d571e1fr		; 0.845264
	DQ	03feb0ab87bee1e3cr		; 0.845059
	DQ	03feb090a57f2b036r		; 0.844854
	DQ	03feb075bf164d40cr		; 0.844648
	DQ	03feb05ad484489bfr		; 0.844443
	DQ	03feb03fe5c0860efr		; 0.844237
	DQ	03feb024f2d39c9fbr		; 0.844032
	DQ	03feb009fbc623543r		; 0.843826
	DQ	03feafef0086ec208r		; 0.84362
	DQ	03feafd4011e8e0aar		; 0.843414
	DQ	03feafb8fd8d09128r		; 0.843208
	DQ	03feaf9df5d25d382r		; 0.843002
	DQ	03feaf82e9ee8a7b9r		; 0.842796
	DQ	03feaf67d9e190dccr		; 0.842589
	DQ	03feaf4cc5ab705bbr		; 0.842383
	DQ	03feaf31ad4c28f87r		; 0.842176
	DQ	03feaf1690c3bab2fr		; 0.841969
	DQ	03feaefb701abc913r		; 0.841762
	DQ	03feaee04b4000875r		; 0.841555
	DQ	03feaec52244b4a12r		; 0.841348
	DQ	03feaea9f528d8dear		; 0.84114
	DQ	03feae8ec3db3f340r		; 0.840933
	DQ	03feae738e6d15ad1r		; 0.840725
	DQ	03feae5854d5c543fr		; 0.840518
	DQ	03feae3d171de4fe8r		; 0.84031
	DQ	03feae21d53cddd6er		; 0.840102
	DQ	03feae068f32afcd0r		; 0.839894
	DQ	03feadeb4507f1e6er		; 0.839686
	DQ	03feadcff6bca4248r		; 0.839477
	DQ	03feadb4a43f9879er		; 0.839269
	DQ	03fead994daa93f90r		; 0.83906
	DQ	03fead7df2ec6895er		; 0.838852
	DQ	03fead62940dad568r		; 0.838643
	DQ	03fead473105cb34er		; 0.838434
	DQ	03fead2bc9e5f03cfr		; 0.838225
	DQ	03fead105e94575cdr		; 0.838016
	DQ	03feacf4ef2ac5a66r		; 0.837806
	DQ	03feacd97b980d0dcr		; 0.837597
	DQ	03feacbe03ed5b9edr		; 0.837387
	DQ	03feaca28819834d9r		; 0.837178
	DQ	03feac8708251b202r		; 0.836968
	DQ	03feac6b84078c107r		; 0.836758
	DQ	03feac4ffbd2042a7r		; 0.836548
	DQ	03feac346f7bec682r		; 0.836338
	DQ	03feac18df0544c9ar		; 0.836127
	DQ	03feabfd4a657648dr		; 0.835917
	DQ	03feabe1b1adaef1cr		; 0.835706
	DQ	03feabc614d557be6r		; 0.835496
	DQ	03feabaa73dc70aecr		; 0.835285
	DQ	03feab8ececb90c8dr		; 0.835074
	DQ	03feab7325918a00ar		; 0.834863
	DQ	03feab57783f8a622r		; 0.834652
	DQ	03feab3bc6c463e17r		; 0.83444
	DQ	03feab201139db905r		; 0.834229
	DQ	03feab0457862c5d1r		; 0.834018
	DQ	03feaae899ba84537r		; 0.833806
	DQ	03feaaccd7ce4c6d8r		; 0.833594
	DQ	03feaab111ca1bb15r		; 0.833382
	DQ	03feaa9547a55b18dr		; 0.83317
	DQ	03feaa7979600aa41r		; 0.832958
	DQ	03feaa5da702c1590r		; 0.832746
	DQ	03feaa41d08d7f37ar		; 0.832533
	DQ	03feaa25f5f7ad3a0r		; 0.832321
	DQ	03feaa0a17414b601r		; 0.832108
	DQ	03fea9ee347b87b5cr		; 0.831895
	DQ	03fea9d24d95342f3r		; 0.831683
	DQ	03fea9b6628e50cc6r		; 0.83147
	DQ	03fea99a73780b993r		; 0.831256
	DQ	03fea97e80413689br		; 0.831043
	DQ	03fea96288f268a3fr		; 0.83083
	DQ	03fea9468d830ae1er		; 0.830616
	DQ	03fea92a8e044b4f7r		; 0.830403
	DQ	03fea90e8a64fbe0cr		; 0.830189
	DQ	03fea8f282b64aa1br		; 0.829975
	DQ	03fea8d676e709866r		; 0.829761
	DQ	03fea8ba66ffcf94cr		; 0.829547
	DQ	03fea89e53009ccccr		; 0.829333
	DQ	03fea8823ae9712e8r		; 0.829119
	DQ	03fea8661ec2e3bfer		; 0.828904
	DQ	03fea849fe7bc674fr		; 0.82869
	DQ	03fea82dda254759br		; 0.828475
	DQ	03fea811b1ae38622r		; 0.82826
	DQ	03fea7f58527c79a3r		; 0.828045
	DQ	03fea7d954895dfc0r		; 0.82783
	DQ	03fea7bd1fdb928d6r		; 0.827615
	DQ	03fea7a0e70d37428r		; 0.827399
	DQ	03fea784aa2f7a275r		; 0.827184
	DQ	03fea76869425b3bbr		; 0.826968
	DQ	03fea74c2434ac73dr		; 0.826753
	DQ	03fea72fdb179bdbar		; 0.826537
	DQ	03fea7138deb29730r		; 0.826321
	DQ	03fea6f73ca6be342r		; 0.826105
	DQ	03fea6dae74a5a1eer		; 0.825889
	DQ	03fea6be8dde94395r		; 0.825673
	DQ	03fea6a230636c836r		; 0.825456
	DQ	03fea685ced04bf71r		; 0.82524
	DQ	03fea669692dc99a7r		; 0.825023
	DQ	03fea64cff7be56d7r		; 0.824806
	DQ	03fea63091b2086a2r		; 0.824589
	DQ	03fea6141fd8c9967r		; 0.824372
	DQ	03fea5f7a9e791ec7r		; 0.824155
	DQ	03fea5db2fef8f781r		; 0.823938
	DQ	03fea5beb1df942d5r		; 0.823721
	DQ	03fea5a22fc037124r		; 0.823503
	DQ	03fea585a9917826cr		; 0.823285
	DQ	03fea5691f53576afr		; 0.823068
	DQ	03fea54c9105d4decr		; 0.82285
	DQ	03fea52ffea8f0824r		; 0.822632
	DQ	03fea513683caa555r		; 0.822414
	DQ	03fea4f6cdc102581r		; 0.822195
	DQ	03fea4da2f35f88a7r		; 0.821977
	DQ	03fea4bd8c9b8cec7r		; 0.821759
	DQ	03fea4a0e5fa56840r		; 0.82154
	DQ	03fea4843b4127454r		; 0.821321
	DQ	03fea4678c812d3c2r		; 0.821103
	DQ	03fea44ad9b1d162ar		; 0.820884
	DQ	03fea42e22d313b8cr		; 0.820664
	DQ	03fea41167ed8b448r		; 0.820445
	DQ	03fea3f4a8f8a0ffer		; 0.820226
	DQ	03fea3d7e5f454eadr		; 0.820007
	DQ	03fea3bb1ee0a7058r		; 0.819787
	DQ	03fea39e53c62e55br		; 0.819567
	DQ	03fea38184a4eadb8r		; 0.819348
	DQ	03fea364b1744590fr		; 0.819128
	DQ	03fea347da3cd57c0r		; 0.818908
	DQ	03fea32afef60396ar		; 0.818687
	DQ	03fea30e1fa866e6fr		; 0.818467
	DQ	03fea2f13c4b6866dr		; 0.818247
	DQ	03fea2d454e79f1c5r		; 0.818026
	DQ	03fea2b7697d0b076r		; 0.817806
	DQ	03fea29a7a0315221r		; 0.817585
	DQ	03fea27d868254726r		; 0.817364
	DQ	03fea2608efac8f84r		; 0.817143
	DQ	03fea243936c72b3cr		; 0.816922
	DQ	03fea22693d751a4dr		; 0.816701
	DQ	03fea2099032cec58r		; 0.816479
	DQ	03fea1ec88901821cr		; 0.816258
	DQ	03fea1cf7cddffadbr		; 0.816036
	DQ	03fea1b26d2db3751r		; 0.815814
	DQ	03fea195596e056c2r		; 0.815593
	DQ	03fea17841b0239ecr		; 0.815371
	DQ	03fea15b25e2e0010r		; 0.815149
	DQ	03fea13e0617689ecr		; 0.814926
	DQ	03fea120e24526722r		; 0.814704
	DQ	03fea103ba6c197b2r		; 0.814482
	DQ	03fea0e68e8c41b9br		; 0.814259
	DQ	03fea0c95eae3633cr		; 0.814036
	DQ	03fea0ac2ac0c8dd8r		; 0.813814
	DQ	03fea08ef2ddbec8cr		; 0.813591
	DQ	03fea071b6eb52e39r		; 0.813368
	DQ	03fea05476fab33a0r		; 0.813144
	DQ	03fea037330348c60r		; 0.812921
	DQ	03fea019eb0daa8d8r		; 0.812698
	DQ	03fe9ffc9f11418abr		; 0.812474
	DQ	03fe9fdf4f16a4c35r		; 0.812251
	DQ	03fe9fc1fb153d319r		; 0.812027
	DQ	03fe9fa4a315a1db6r		; 0.811803
	DQ	03fe9f87470f3bbadr		; 0.811579
	DQ	03fe9f69e70aa1d5cr		; 0.811355
	DQ	03fe9f4c8307d42c3r		; 0.811131
	DQ	03fe9f2f1afe3bb84r		; 0.810906
	DQ	03fe9f11aef66f7fer		; 0.810682
	DQ	03fe9ef43ef06f831r		; 0.810457
	DQ	03fe9ed6caec3bc1cr		; 0.810232
	DQ	03fe9eb952e9d43c0r		; 0.810008
	DQ	03fe9e9bd6e0a1ebdr		; 0.809783
	DQ	03fe9e7e56d93bd73r		; 0.809558
	DQ	03fe9e60d2dc39041r		; 0.809332
	DQ	03fe9e434ad86b668r		; 0.809107
	DQ	03fe9e25bed66a048r		; 0.808882
	DQ	03fe9e082edecbe40r		; 0.808656
	DQ	03fe9dea9ae062f91r		; 0.808431
	DQ	03fe9dcd02e3c649br		; 0.808205
	DQ	03fe9daf66f18cdbdr		; 0.807979
	DQ	03fe9d91c7011fa98r		; 0.807753
	DQ	03fe9d7423127eb2cr		; 0.807527
	DQ	03fe9d567b25a9f78r		; 0.8073
	DQ	03fe9d38cf43387dcr		; 0.807074
	DQ	03fe9d1b1f59fc399r		; 0.806848
	DQ	03fe9cfd6b83ba3cer		; 0.806621
	DQ	03fe9cdfb3a6ad75cr		; 0.806394
	DQ	03fe9cc1f7d403f02r		; 0.806167
	DQ	03fe9ca4380bbdac0r		; 0.80594
	DQ	03fe9c86743cac9d7r		; 0.805713
	DQ	03fe9c68ac8095d66r		; 0.805486
	DQ	03fe9c4ae0c64b4adr		; 0.805259
	DQ	03fe9c2d110dccfadr		; 0.805031
	DQ	03fe9c0f3d5fb1ec5r		; 0.804804
	DQ	03fe9bf165bbfa1f5r		; 0.804576
	DQ	03fe9bd38a1a0e8ddr		; 0.804348
	DQ	03fe9bb5aa82863der		; 0.80412
	DQ	03fe9b97c6f5612f6r		; 0.803892
	DQ	03fe9b79df729f626r		; 0.803664
	DQ	03fe9b5bf3f1a9d0fr		; 0.803436
	DQ	03fe9b3e047b17810r		; 0.803208
	DQ	03fe9b2011177f788r		; 0.802979
	DQ	03fe9b0219b5b3ab9r		; 0.80275
	DQ	03fe9ae41e5e4b202r		; 0.802522
	DQ	03fe9ac61f08aed03r		; 0.802293
	DQ	03fe9aa81bc60cc7cr		; 0.802064
	DQ	03fe9a8a148dce00dr		; 0.801835
	DQ	03fe9a6c095ff27b5r		; 0.801606
	DQ	03fe9a4dfa45113d5r		; 0.801376
	DQ	03fe9a2fe72bfc3adr		; 0.801147
	DQ	03fe9a11d01d4a79er		; 0.800917
	DQ	03fe99f3b52193005r		; 0.800687
	DQ	03fe99d596303ec85r		; 0.800458
	DQ	03fe99b773494dd1cr		; 0.800228
	DQ	03fe99994c755722br		; 0.799998
	DQ	03fe997b21abc3b52r		; 0.799768
	DQ	03fe995cf2ec93890r		; 0.799537
	DQ	03fe993ec0405da46r		; 0.799307
	DQ	03fe9920899e8b013r		; 0.799076
	DQ	03fe99024f071b9f9r		; 0.798846
	DQ	03fe98e4108b3d8b5r		; 0.798615
	DQ	03fe98c5ce112bb2ar		; 0.798384
	DQ	03fe98a787b2ab275r		; 0.798153
	DQ	03fe98893d55f6d79r		; 0.797922
	DQ	03fe986aef14d3d53r		; 0.797691
	DQ	03fe984c9cde14145r		; 0.79746
	DQ	03fe982e46ba4e9afr		; 0.797228
	DQ	03fe980feca983690r		; 0.796996
	DQ	03fe97f18ea31b788r		; 0.796765
	DQ	03fe97d32cafadcf8r		; 0.796533
	DQ	03fe97b4c6d7d173er		; 0.796301
	DQ	03fe97965d0a5859cr		; 0.796069
	DQ	03fe9777ef4fd9872r		; 0.795837
	DQ	03fe97597d9fbdf5fr		; 0.795605
	DQ	03fe973b080b33b23r		; 0.795372
	DQ	03fe971c8e89a3b5er		; 0.79514
	DQ	03fe96fe111b0e010r		; 0.794907
	DQ	03fe96df8fbf72939r		; 0.794674
	DQ	03fe96c10a7f68739r		; 0.794442
	DQ	03fe96a28149c1951r		; 0.794209
	DQ	03fe9683f42fac03fr		; 0.793975
	DQ	03fe9665631ff9b45r		; 0.793742
	DQ	03fe9646ce2bd8b22r		; 0.793509
	DQ	03fe9628355348fd5r		; 0.793276
	DQ	03fe960998851c8a0r		; 0.793042
	DQ	03fe95eaf7d281641r		; 0.792808
	DQ	03fe95cc533b778b9r		; 0.792575
	DQ	03fe95adaab767fa8r		; 0.792341
	DQ	03fe958efe4652b0er		; 0.792107
	DQ	03fe95704df0ceb4br		; 0.791872
	DQ	03fe955199b6dc05er		; 0.791638
	DQ	03fe9532e18fe39e8r		; 0.791404
	DQ	03fe9514257be57ear		; 0.791169
	DQ	03fe94f5658378ac2r		; 0.790935
	DQ	03fe94d6a1a69d270r		; 0.7907
	DQ	03fe94b7d9e552ef5r		; 0.790465
	DQ	03fe94990e3702ff1r		; 0.79023
	DQ	03fe947a3eacdb623r		; 0.789995
	DQ	03fe945b6b35ae0ccr		; 0.78976
	DQ	03fe943c93d17afecr		; 0.789525
	DQ	03fe941db89170442r		; 0.789289
	DQ	03fe93fed96cf6d6fr		; 0.789054
	DQ	03fe93dff65b77b12r		; 0.788818
	DQ	03fe93c10f6e20debr		; 0.788582
	DQ	03fe93a2249c5b59br		; 0.788346
	DQ	03fe938335dd901c2r		; 0.78811
	DQ	03fe93644342ed31fr		; 0.787874
	DQ	03fe93454cc3db952r		; 0.787638
	DQ	03fe932652605b45br		; 0.787402
	DQ	03fe930754186c43br		; 0.787165
	DQ	03fe92e851f4a5951r		; 0.786929
	DQ	03fe92c94be3d92der		; 0.786692
	DQ	03fe92aa41ffcc1ffr		; 0.786455
	DQ	03fe928b342eb9598r		; 0.786218
	DQ	03fe926c2281cee67r		; 0.785981
	DQ	03fe924d0cf075c0cr		; 0.785744
	DQ	03fe922df38344ee7r		; 0.785507
	DQ	03fe920ed631a5698r		; 0.785269
	DQ	03fe91efb4fb97320r		; 0.785032
	DQ	03fe91d08fe9b14der		; 0.784794
	DQ	03fe91b166fbf3bd1r		; 0.784557
	DQ	03fe91923a29c779ar		; 0.784319
	DQ	03fe9173097bc389ar		; 0.784081
	DQ	03fe9153d4f1e7ecfr		; 0.783843
	DQ	03fe91349c8c34a3ar		; 0.783605
	DQ	03fe9115604212a7br		; 0.783366
	DQ	03fe90f6201c18ff2r		; 0.783128
	DQ	03fe90d6dc11b0a3fr		; 0.782889
	DQ	03fe90b7943407a21r		; 0.782651
	DQ	03fe9098487a86f39r		; 0.782412
	DQ	03fe9078f8dc97928r		; 0.782173
	DQ	03fe9059a56b678abr		; 0.781934
	DQ	03fe903a4e15c8d05r		; 0.781695
	DQ	03fe901af2e452695r		; 0.781456
	DQ	03fe8ffb93df9b5b9r		; 0.781216
	DQ	03fe8fdc30ff0ca13r		; 0.780977
	DQ	03fe8fbcca42a63a3r		; 0.780737
	DQ	03fe8f9d5fa1d120ar		; 0.780498
	DQ	03fe8f7df13652664r		; 0.780258
	DQ	03fe8f5e7ee664f95r		; 0.780018
	DQ	03fe8f3f08c336e5br		; 0.779778
	DQ	03fe8f1f8ec431257r		; 0.779538
	DQ	03fe8f0010e953b88r		; 0.779297
	DQ	03fe8ee08f3b35a4fr		; 0.779057
	DQ	03fe8ec109b13fe4br		; 0.778817
	DQ	03fe8ea18054097dcr		; 0.778576
	DQ	03fe8e81f31afb6a3r		; 0.778335
	DQ	03fe8e62620eacafer		; 0.778094
	DQ	03fe8e42cd2686490r		; 0.777853
	DQ	03fe8e23346b1f3b6r		; 0.777612
	DQ	03fe8e0397dc77871r		; 0.777371
	DQ	03fe8de3f771f8263r		; 0.77713
	DQ	03fe8dc45334381e9r		; 0.776888
	DQ	03fe8da4ab1aa06a4r		; 0.776647
	DQ	03fe8d84ff365f154r		; 0.776405
	DQ	03fe8d654f764613ar		; 0.776164
	DQ	03fe8d459be2ec6b4r		; 0.775922
	DQ	03fe8d25e47c521c4r		; 0.77568
	DQ	03fe8d06294277268r		; 0.775438
	DQ	03fe8ce66a355b8a2r		; 0.775195
	DQ	03fe8cc6a754ff470r		; 0.774953
	DQ	03fe8ca6e098cb574r		; 0.774711
	DQ	03fe8c871611edc6dr		; 0.774468
	DQ	03fe8c6747b7cf8far		; 0.774225
	DQ	03fe8c47759307b7br		; 0.773983
	DQ	03fe8c279f9268333r		; 0.77374
	DQ	03fe8c07c5be8807fr		; 0.773497
	DQ	03fe8be7e81ffe3bfr		; 0.773254
	DQ	03fe8bc806ae33c95r		; 0.77301
	DQ	03fe8ba82171bfb5er		; 0.772767
	DQ	03fe8b88385973f5dr		; 0.772524
	DQ	03fe8b684b7f159b0r		; 0.77228
	DQ	03fe8b485ac8df939r		; 0.772036
	DQ	03fe8b286647ffeb5r		; 0.771793
	DQ	03fe8b086dfc76a26r		; 0.771549
	DQ	03fe8ae871ddacb2cr		; 0.771305
	DQ	03fe8ac871eba21c7r		; 0.771061
	DQ	03fe8aa86e2eede56r		; 0.770816
	DQ	03fe8a8866a7900d9r		; 0.770572
	DQ	03fe8a685b5588950r		; 0.770327
	DQ	03fe8a484c304075dr		; 0.770083
	DQ	03fe8a2839404eb5dr		; 0.769838
	DQ	03fe8a082285b3552r		; 0.769593
	DQ	03fe89e807f7d74dcr		; 0.769348
	DQ	03fe89c7e9a7e8ab9r		; 0.769103
	DQ	03fe89a7c784b962br		; 0.768858
	DQ	03fe8987a196e0792r		; 0.768613
	DQ	03fe896777de5deedr		; 0.768368
	DQ	03fe89474a5b31c3br		; 0.768122
	DQ	03fe89271915f2fder		; 0.767876
	DQ	03fe8906e3fd73915r		; 0.767631
	DQ	03fe88e6ab1a4a840r		; 0.767385
	DQ	03fe88c66e750edbfr		; 0.767139
	DQ	03fe88a62e0529933r		; 0.766893
	DQ	03fe8885e9ca9aa9ar		; 0.766647
	DQ	03fe8865a1c5621f6r		; 0.7664
	DQ	03fe884555f57ff45r		; 0.766154
	DQ	03fe882506638b2e9r		; 0.765907
	DQ	03fe8804b306ecc80r		; 0.765661
	DQ	03fe87e45be83bc6br		; 0.765414
	DQ	03fe87c400fee124ar		; 0.765167
	DQ	03fe87a3a24adce1er		; 0.76492
	DQ	03fe87833fd4c6045r		; 0.764673
	DQ	03fe8762d99405860r		; 0.764426
	DQ	03fe87426f91326cer		; 0.764179
	DQ	03fe872201cc4cb90r		; 0.763931
	DQ	03fe8701903cbd647r		; 0.763684
	DQ	03fe86e11aeb1b750r		; 0.763436
	DQ	03fe86c0a1d766eadr		; 0.763188
	DQ	03fe86a025019fc5er		; 0.762941
	DQ	03fe867fa4612f003r		; 0.762693
	DQ	03fe865f1ffeab9fbr		; 0.762444
	DQ	03fe863e97da15a47r		; 0.762196
	DQ	03fe861e0bf36d0e6r		; 0.761948
	DQ	03fe85fd7c4ab1dd9r		; 0.7617
	DQ	03fe85dce8dfe411fr		; 0.761451
	DQ	03fe85bc51aa6ca5ar		; 0.761202
	DQ	03fe859bb6bb79a47r		; 0.760954
	DQ	03fe857b180a74087r		; 0.760705
	DQ	03fe855a75975bd1br		; 0.760456
	DQ	03fe8539cf6ac8062r		; 0.760207
	DQ	03fe851925738a99dr		; 0.759957
	DQ	03fe84f877c2d198br		; 0.759708
	DQ	03fe84d7c65005fccr		; 0.759459
	DQ	03fe84b7111b27c61r		; 0.759209
	DQ	03fe8496582ccdfa8r		; 0.75896
	DQ	03fe84759b7c61943r		; 0.75871
	DQ	03fe8454db09e2932r		; 0.75846
	DQ	03fe843416dde7fd3r		; 0.75821
	DQ	03fe84134eefdacc7r		; 0.75796
	DQ	03fe83f283485206er		; 0.75771
	DQ	03fe83d1b3deb6a69r		; 0.757459
	DQ	03fe83b0e0bb9fb17r		; 0.757209
	DQ	03fe839009df0d277r		; 0.756958
	DQ	03fe836f2f406802ar		; 0.756708
	DQ	03fe834e50f0de4f0r		; 0.756457
	DQ	03fe832d6ed6aafaar		; 0.756206
	DQ	03fe830c890b93176r		; 0.755955
	DQ	03fe82eb9f7e68995r		; 0.755704
	DQ	03fe82cab240598c6r		; 0.755453
	DQ	03fe82a9c14037e4br		; 0.755201
	DQ	03fe8288cc869aa82r		; 0.75495
	DQ	03fe8267d41381d6dr		; 0.754698
	DQ	03fe8246d7e6ed709r		; 0.754447
	DQ	03fe8225d800dd759r		; 0.754195
	DQ	03fe8204d46151e5br		; 0.753943
	DQ	03fe81e3cd10e1c70r		; 0.753691
	DQ	03fe81c2c1fe5f0d8r		; 0.753439
	DQ	03fe81a1b33af7c51r		; 0.753187
	DQ	03fe8180a0be14e7er		; 0.752934
	DQ	03fe815f8a87b675dr		; 0.752682
	DQ	03fe813e70a07374er		; 0.75243
	DQ	03fe811d52f71dd93r		; 0.752177
	DQ	03fe80fc31a57ab49r		; 0.751924
	DQ	03fe80db0c91c4f52r		; 0.751671
	DQ	03fe80b9e3cd2aa6er		; 0.751418
	DQ	03fe8098b757abc9br		; 0.751165
	DQ	03fe80778728b157br		; 0.750912
	DQ	03fe80565348d256dr		; 0.750659
	DQ	03fe80351baf77c12r		; 0.750405
	DQ	03fe8013e065389c8r		; 0.750152
	DQ	03fe7ff2a1617de32r		; 0.749898
	DQ	03fe7fd15eb575a0dr		; 0.749644
	DQ	03fe7fb0184ff1c9ar		; 0.74939
	DQ	03fe7f8ece30f25dar		; 0.749136
	DQ	03fe7f6d8069a568cr		; 0.748882
	DQ	03fe7f4c2ef173e4fr		; 0.748628
	DQ	03fe7f2ad9bfc6cc5r		; 0.748374
	DQ	03fe7f0980dd3524dr		; 0.748119
	DQ	03fe7ee8245255f46r		; 0.747865
	DQ	03fe7ec6c40dfb2f2r		; 0.74761
	DQ	03fe7ea56018bbdb0r		; 0.747355
	DQ	03fe7e83f87b2efdfr		; 0.747101
	DQ	03fe7e628d2cbd921r		; 0.746846
	DQ	03fe7e411e24d0915r		; 0.746591
	DQ	03fe7e1fab749607ar		; 0.746335
	DQ	03fe7dfe351376ef1r		; 0.74608
	DQ	03fe7ddcbb0a0a4d9r		; 0.745825
	DQ	03fe7dbb3d4fb91d4r		; 0.745569
	DQ	03fe7d99bbe4835e0r		; 0.745314
	DQ	03fe7d7836c8690fer		; 0.745058
	DQ	03fe7d56ae040138er		; 0.744802
	DQ	03fe7d3521974bd8fr		; 0.744546
	DQ	03fe7d139179b1ea1r		; 0.74429
	DQ	03fe7cf1fdab336c6r		; 0.744034
	DQ	03fe7cd066346765cr		; 0.743777
	DQ	03fe7caecb154dd63r		; 0.743521
	DQ	03fe7c8d2c454fb7cr		; 0.743265
	DQ	03fe7c6b89cd04107r		; 0.743008
	DQ	03fe7c49e3ac6ae02r		; 0.742751
	DQ	03fe7c2839daed210r		; 0.742494
	DQ	03fe7c068c69b8deer		; 0.742237
	DQ	03fe7be4db47a00der		; 0.74198
	DQ	03fe7bc3267d39b40r		; 0.741723
	DQ	03fe7ba16e0a85d12r		; 0.741466
	DQ	03fe7b7fb1e6ed5f7r		; 0.741209
	DQ	03fe7b5df2239e6acr		; 0.740951
	DQ	03fe7b3c2eb801ed2r		; 0.740694
	DQ	03fe7b1a67a417e69r		; 0.740436
	DQ	03fe7af89ce7e0572r		; 0.740178
	DQ	03fe7ad6ce835b3ecr		; 0.73992
	DQ	03fe7ab4fc7f1fa36r		; 0.739662
	DQ	03fe7a9326c9ff793r		; 0.739404
	DQ	03fe7a714d7528cc0r		; 0.739146
	DQ	03fe7a4f70780495er		; 0.738887
	DQ	03fe7a2d8fdb29dcdr		; 0.738629
	DQ	03fe7a0bab96019acr		; 0.73837
	DQ	03fe79e9c3a88bcfdr		; 0.738112
	DQ	03fe79c7d81b5f81fr		; 0.737853
	DQ	03fe79a5e8e5e5ab2r		; 0.737594
	DQ	03fe7983f610b5515r		; 0.737335
	DQ	03fe7961ff93376ear		; 0.737076
	DQ	03fe794005760308fr		; 0.736817
	DQ	03fe791e07b0811a5r		; 0.736557
	DQ	03fe78fc0653dfaebr		; 0.736298
	DQ	03fe78da014659b43r		; 0.736038
	DQ	03fe78b7f8a1b43cbr		; 0.735779
	DQ	03fe7895ec5d58423r		; 0.735519
	DQ	03fe7873dc70aebecr		; 0.735259
	DQ	03fe7851c8e44eb86r		; 0.734999
	DQ	03fe782fb1b8382f1r		; 0.734739
	DQ	03fe780d96ec6b22cr		; 0.734479
	DQ	03fe77eb7880e7937r		; 0.734218
	DQ	03fe77c95675ad813r		; 0.733958
	DQ	03fe77a730cabcebfr		; 0.733697
	DQ	03fe7785078015d3cr		; 0.733437
	DQ	03fe7762da95b8389r		; 0.733176
	DQ	03fe7740aa143b206r		; 0.732915
	DQ	03fe771e75f307854r		; 0.732654
	DQ	03fe76fc3e321d672r		; 0.732393
	DQ	03fe76da02d17cc61r		; 0.732132
	DQ	03fe76b7c3d125a20r		; 0.731871
	DQ	03fe76958139af00er		; 0.731609
	DQ	03fe76733b0281dcer		; 0.731348
	DQ	03fe7650f134353bdr		; 0.731086
	DQ	03fe762ea3c63217cr		; 0.730825
	DQ	03fe760c52c10f76br		; 0.730563
	DQ	03fe75e9fe1c3652br		; 0.730301
	DQ	03fe75c7a5e03db1br		; 0.730039
	DQ	03fe75a54a0d2593ar		; 0.729777
	DQ	03fe7582ea9a56f2ar		; 0.729514
	DQ	03fe7560879068d49r		; 0.729252
	DQ	03fe753e20ef5b398r		; 0.72899
	DQ	03fe751bb6ae971b8r		; 0.728727
	DQ	03fe74f948d6b3807r		; 0.728464
	DQ	03fe74d6d770476e6r		; 0.728202
	DQ	03fe74b4626a24d95r		; 0.727939
	DQ	03fe7491e9cce2c73r		; 0.727676
	DQ	03fe746f6d9881382r		; 0.727413
	DQ	03fe744cedcd002c0r		; 0.727149
	DQ	03fe742a6a6a5fa2er		; 0.726886
	DQ	03fe7407e3709f9cbr		; 0.726623
	DQ	03fe73e558dfc0199r		; 0.726359
	DQ	03fe73c2cab7c1196r		; 0.726096
	DQ	03fe73a0390139a22r		; 0.725832
	DQ	03fe737da3b392ader		; 0.725568
	DQ	03fe735b0acecc3c9r		; 0.725304
	DQ	03fe73386e5b7d544r		; 0.72504
	DQ	03fe7315ce510eeeer		; 0.724776
	DQ	03fe72f32aaf810c8r		; 0.724511
	DQ	03fe72d0837f6ab31r		; 0.724247
	DQ	03fe72add8b834dcar		; 0.723983
	DQ	03fe728b2a62768f2r		; 0.723718
	DQ	03fe7268787598c4ar		; 0.723453
	DQ	03fe7245c2fa32830r		; 0.723188
	DQ	03fe722309f043ca6r		; 0.722924
	DQ	03fe72004d4f3594br		; 0.722659
	DQ	03fe71dd8d1f9ee7fr		; 0.722393
	DQ	03fe71bac9617fc42r		; 0.722128
	DQ	03fe7198020c41236r		; 0.721863
	DQ	03fe7175373111117r		; 0.721597
	DQ	03fe715268bec1828r		; 0.721332
	DQ	03fe712f96bde97c8r		; 0.721066
	DQ	03fe710cc12e88ff7r		; 0.7208
	DQ	03fe70e9e81937114r		; 0.720535
	DQ	03fe70c70b6cc5a61r		; 0.720269
	DQ	03fe70a42b31cbc3dr		; 0.720003
	DQ	03fe70814768496a8r		; 0.719736
	DQ	03fe705e6018d5a01r		; 0.71947
	DQ	03fe703b75324258ar		; 0.719204
	DQ	03fe701886c5bda02r		; 0.718937
	DQ	03fe6ff594cab0708r		; 0.718671
	DQ	03fe6fd29f49b1cfcr		; 0.718404
	DQ	03fe6fafa63a2ab80r		; 0.718137
	DQ	03fe6f8ca99c1b292r		; 0.71787
	DQ	03fe6f69a9781a293r		; 0.717603
	DQ	03fe6f46a5c590b23r		; 0.717336
	DQ	03fe6f239e847ec42r		; 0.717069
	DQ	03fe6f0093bd7b64fr		; 0.716801
	DQ	03fe6edd85708694ar		; 0.716534
	DQ	03fe6eba739da0533r		; 0.716266
	DQ	03fe6e975e3c319acr		; 0.715999
	DQ	03fe6e74454c3a6b3r		; 0.715731
	DQ	03fe6e5128dee8d08r		; 0.715463
	DQ	03fe6e2e08e30ebecr		; 0.715195
	DQ	03fe6e0ae561433bfr		; 0.714927
	DQ	03fe6de7be598647fr		; 0.714659
	DQ	03fe6dc493cbd7e2er		; 0.71439
	DQ	03fe6da165afa106cr		; 0.714122
	DQ	03fe6d7e34160fbf7r		; 0.713853
	DQ	03fe6d5afef68d070r		; 0.713585
	DQ	03fe6d37c64881d79r		; 0.713316
	DQ	03fe6d148a1d1c3cfr		; 0.713047
	DQ	03fe6cf14a6bc5313r		; 0.712778
	DQ	03fe6cce07347cb46r		; 0.712509
	DQ	03fe6caac07fd9cc6r		; 0.71224
	DQ	03fe6c87764545734r		; 0.711971
	DQ	03fe6c64287c28a31r		; 0.711702
	DQ	03fe6c40d73e486dbr		; 0.711432
	DQ	03fe6c1d8271dfc14r		; 0.711163
	DQ	03fe6bfa2a281ca9br		; 0.710893
	DQ	03fe6bd6ce60ff26fr		; 0.710623
	DQ	03fe6bb36f13f0331r		; 0.710353
	DQ	03fe6b900c40efce2r		; 0.710083
	DQ	03fe6b6ca5f094fe0r		; 0.709813
	DQ	03fe6b493c22dfc2br		; 0.709543
	DQ	03fe6b25cecf39165r		; 0.709273
	DQ	03fe6b025dfe37fedr		; 0.709002
	DQ	03fe6adee9afdc7c1r		; 0.708732
	DQ	03fe6abb71e4268e4r		; 0.708461
	DQ	03fe6a97f6927f2f4r		; 0.708191
	DQ	03fe6a7477c37d652r		; 0.70792
	DQ	03fe6a50f577212fer		; 0.707649
	DQ	03fe6a2d6fad6a8f7r		; 0.707378
	DQ	03fe6a09e6665983er		; 0.707107
	DQ	03fe69e659a1ee0d2r		; 0.706836
	DQ	03fe69c2c960282b4r		; 0.706564
	DQ	03fe699f35a107de3r		; 0.706293
	DQ	03fe697b9e648d25fr		; 0.706021
	DQ	03fe695803b34f089r		; 0.70575
	DQ	03fe6934657c1f7a0r		; 0.705478
	DQ	03fe6910c3d02c865r		; 0.705206
	DQ	03fe68ed1ea6df277r		; 0.704934
	DQ	03fe68c97608ce636r		; 0.704662
	DQ	03fe68a5c9ed63342r		; 0.70439
	DQ	03fe68821a549d99br		; 0.704118
	DQ	03fe685e673e7d943r		; 0.703845
	DQ	03fe683ab0bc312f6r		; 0.703573
	DQ	03fe6816f6b3f3597r		; 0.7033
	DQ	03fe67f3393f89245r		; 0.703028
	DQ	03fe67cf78452d7e1r		; 0.702755
	DQ	03fe67abb3dea5788r		; 0.702482
	DQ	03fe6787ebfac307er		; 0.702209
	DQ	03fe676420a21d320r		; 0.701936
	DQ	03fe674051d4b3f6er		; 0.701663
	DQ	03fe671c7f89f050br		; 0.701389
	DQ	03fe66f8a9ca69454r		; 0.701116
	DQ	03fe66d4d09eb5da9r		; 0.700842
	DQ	03fe66b0f3f5a804cr		; 0.700569
	DQ	03fe668d13d7d6c9br		; 0.700295
	DQ	03fe6669304542297r		; 0.700021
	DQ	03fe6645493dea240r		; 0.699747
	DQ	03fe66215eca65bf5r		; 0.699473
	DQ	03fe65fd70d986ef7r		; 0.699199
	DQ	03fe65d97f7c7bc06r		; 0.698925
	DQ	03fe65b58aa216262r		; 0.698651
	DQ	03fe6591925b842c9r		; 0.698376
	DQ	03fe656d96a8c5d3dr		; 0.698102
	DQ	03fe65499778ad0ffr		; 0.697827
	DQ	03fe652594dc67eccr		; 0.697552
	DQ	03fe65018ed3f66a6r		; 0.697278
	DQ	03fe64dd8556c182cr		; 0.697003
	DQ	03fe64b97864c935fr		; 0.696728
	DQ	03fe64956806a489er		; 0.696452
	DQ	03fe64715433bc78ar		; 0.696177
	DQ	03fe644d3cfd3f0e1r		; 0.695902
	DQ	03fe6429224967386r		; 0.695626
	DQ	03fe64050431fa095r		; 0.695351
	DQ	03fe63e0e2a5c9752r		; 0.695075
	DQ	03fe63bcbdad6c81br		; 0.694799
	DQ	03fe63989548e32efr		; 0.694523
	DQ	03fe6374696f96771r		; 0.694248
	DQ	03fe63503a32b465dr		; 0.693971
	DQ	03fe632c07810eef7r		; 0.693695
	DQ	03fe6307d16bd41fcr		; 0.693419
	DQ	03fe62e397e1d5eadr		; 0.693143
	DQ	03fe62bf5af4425car		; 0.692866
	DQ	03fe629b1a91eb693r		; 0.69259
	DQ	03fe6276d6cbff1c8r		; 0.692313
	DQ	03fe62528f99e6709r		; 0.692036
	DQ	03fe622e44fba1656r		; 0.691759
	DQ	03fe6209f6f9c700er		; 0.691482
	DQ	03fe61e5a58329373r		; 0.691205
	DQ	03fe61c150b18d1a2r		; 0.690928
	DQ	03fe619cf86b2d97er		; 0.690651
	DQ	03fe61789cc138bc5r		; 0.690373
	DQ	03fe61543dab17819r		; 0.690096
	DQ	03fe612fdb3160ed8r		; 0.689818
	DQ	03fe610b755415001r		; 0.689541
	DQ	03fe60e70c0a9cb37r		; 0.689263
	DQ	03fe60c29f54f8079r		; 0.688985
	DQ	03fe609e2f4455086r		; 0.688707
	DQ	03fe6079bbc785a9er		; 0.688429
	DQ	03fe605544e720f22r		; 0.688151
	DQ	03fe6030ca9a8fdb2r		; 0.687872
	DQ	03fe600c4cf30070cr		; 0.687594
	DQ	03fe5fe7cbdf44a73r		; 0.687315
	DQ	03fe5fc34767f3844r		; 0.687037
	DQ	03fe5f9ebf8d0d081r		; 0.686758
	DQ	03fe5f7a344e91329r		; 0.686479
	DQ	03fe5f55a5b51709cr		; 0.6862
	DQ	03fe5f3113af7081br		; 0.685921
	DQ	03fe5f0c7e4634a05r		; 0.685642
	DQ	03fe5ee7e581fa6b9r		; 0.685363
	DQ	03fe5ec3495a2add9r		; 0.685084
	DQ	03fe5e9ea9cec5f64r		; 0.684804
	DQ	03fe5e7a06dfcbb5br		; 0.684525
	DQ	03fe5e556095d321br		; 0.684245
	DQ	03fe5e30b6e845348r		; 0.683965
	DQ	03fe5e0c09d721edfr		; 0.683686
	DQ	03fe5de7596b00541r		; 0.683406
	DQ	03fe5dc2a59b4960er		; 0.683126
	DQ	03fe5d9dee70941a6r		; 0.682846
	DQ	03fe5d7933eae0808r		; 0.682565
	DQ	03fe5d547601978d6r		; 0.682285
	DQ	03fe5d2fb4bd5046er		; 0.682005
	DQ	03fe5d0af01573a71r		; 0.681724
	DQ	03fe5ce6281298b3fr		; 0.681443
	DQ	03fe5cc15cb4bf6d7r		; 0.681163
	DQ	03fe5c9c8dfbe7d3ar		; 0.680882
	DQ	03fe5c77bbe811e67r		; 0.680601
	DQ	03fe5c52e670a6a00r		; 0.68032
	DQ	03fe5c2e0da6d40c3r		; 0.680039
	DQ	03fe5c0931796c1f0r		; 0.679758
	DQ	03fe5be451f99ce48r		; 0.679476
	DQ	03fe5bbf6f163850br		; 0.679195
	DQ	03fe5b9a88e06c6f7r		; 0.678913
	DQ	03fe5b759f4fa23aer		; 0.678632
	DQ	03fe5b50b263d9b30r		; 0.67835
	DQ	03fe5b2bc21d12d7cr		; 0.678068
	DQ	03fe5b06ce83e4af2r		; 0.677786
	DQ	03fe5ae1d78fb8332r		; 0.677504
	DQ	03fe5abcdd408d63dr		; 0.677222
	DQ	03fe5a97df9efb472r		; 0.67694
	DQ	03fe5a72dea26ad71r		; 0.676658
	DQ	03fe5a4dda4adc13br		; 0.676375
	DQ	03fe5a28d2a0e602fr		; 0.676093
	DQ	03fe5a03c7a488a4cr		; 0.67581
	DQ	03fe59deb94d2cf34r		; 0.675527
	DQ	03fe59b9a7a369f46r		; 0.675245
	DQ	03fe599492a73fa81r		; 0.674962
	DQ	03fe596f7a5017087r		; 0.674679
	DQ	03fe594a5eaf1e216r		; 0.674396
	DQ	03fe59253faa8fe11r		; 0.674112
	DQ	03fe59001d5c31594r		; 0.673829
	DQ	03fe58daf7bb6b841r		; 0.673546
	DQ	03fe58b5cec83e618r		; 0.673262
	DQ	03fe5890a27a12eb9r		; 0.672978
	DQ	03fe586b72e2172e4r		; 0.672695
	DQ	03fe58463ff7b4238r		; 0.672411
	DQ	03fe582109bae9cb6r		; 0.672127
	DQ	03fe57fbd02bb825er		; 0.671843
	DQ	03fe57d6934a1f32fr		; 0.671559
	DQ	03fe57b153161ef2br		; 0.671275
	DQ	03fe578c0f984e6afr		; 0.67099
	DQ	03fe5766c8c81695dr		; 0.670706
	DQ	03fe57417ea577735r		; 0.670422
	DQ	03fe571c313908096r		; 0.670137
	DQ	03fe56f6e07a31521r		; 0.669852
	DQ	03fe56d18c718a535r		; 0.669567
	DQ	03fe56ac35167c072r		; 0.669283
	DQ	03fe5686da719d739r		; 0.668998
	DQ	03fe56617c7a57929r		; 0.668713
	DQ	03fe563c1b41d8702r		; 0.668427
	DQ	03fe5616b6ae5afa5r		; 0.668142
	DQ	03fe55f14ed9a4431r		; 0.667857
	DQ	03fe55cbe3b2863e6r		; 0.667571
	DQ	03fe55a6754197f24r		; 0.667286
	DQ	03fe55810386d95ecr		; 0.667
	DQ	03fe555b8e824a83cr		; 0.666714
	DQ	03fe55361633eb616r		; 0.666428
	DQ	03fe55109a9bbbf78r		; 0.666142
	DQ	03fe54eb1bb9bc464r		; 0.665856
	DQ	03fe54c5998dec4d8r		; 0.66557
	DQ	03fe54a014184c0d6r		; 0.665284
	DQ	03fe547a8b58db85cr		; 0.664997
	DQ	03fe5454ff4f9ab6cr		; 0.664711
	DQ	03fe542f700520a64r		; 0.664424
	DQ	03fe5409dd70d64e5r		; 0.664138
	DQ	03fe53e44792bbaefr		; 0.663851
	DQ	03fe53beae7367ce1r		; 0.663564
	DQ	03fe5399120a43a5cr		; 0.663277
	DQ	03fe537372574f361r		; 0.66299
	DQ	03fe534dcf632184dr		; 0.662703
	DQ	03fe5328292dba922r		; 0.662416
	DQ	03fe53027fae83580r		; 0.662128
	DQ	03fe52dcd2e57bd67r		; 0.661841
	DQ	03fe52b722e3d2196r		; 0.661553
	DQ	03fe52916f985814er		; 0.661266
	DQ	03fe526bb90ba4cedr		; 0.660978
	DQ	03fe5245ff3521416r		; 0.66069
	DQ	03fe52204225fb787r		; 0.660402
	DQ	03fe51fa81cd05680r		; 0.660114
	DQ	03fe51d4be32d6162r		; 0.659826
	DQ	03fe51aef7576d82cr		; 0.659538
	DQ	03fe51892d4362b3er		; 0.65925
	DQ	03fe51635fe5879d8r		; 0.658961
	DQ	03fe513d8f467345br		; 0.658673
	DQ	03fe5117bb6ebcb26r		; 0.658384
	DQ	03fe50f1e44d35d79r		; 0.658095
	DQ	03fe50cc09f30cc15r		; 0.657807
	DQ	03fe50a62c57aa698r		; 0.657518
	DQ	03fe50804b83a5d63r		; 0.657229
	DQ	03fe505a676e68016r		; 0.65694
	DQ	03fe50348017f0eb1r		; 0.656651
	DQ	03fe500e958040935r		; 0.656361
	DQ	03fe4fe8a7afee001r		; 0.656072
	DQ	03fe4fc2b6a6f9313r		; 0.655782
	DQ	03fe4f9cc25ccb20fr		; 0.655493
	DQ	03fe4f76cad9fad51r		; 0.655203
	DQ	03fe4f50d015f147cr		; 0.654913
	DQ	03fe4f2ad219457efr		; 0.654624
	DQ	03fe4f04d0e3f77a9r		; 0.654334
	DQ	03fe4edecc6d7034br		; 0.654044
	DQ	03fe4eb8c4c6ddb94r		; 0.653753
	DQ	03fe4e92b9df11fc6r		; 0.653463
	DQ	03fe4e6cabbea403fr		; 0.653173
	DQ	03fe4e469a6593d00r		; 0.652882
	DQ	03fe4e2085d3e1608r		; 0.652592
	DQ	03fe4dfa6e098cb57r		; 0.652301
	DQ	03fe4dd4530695ceer		; 0.652011
	DQ	03fe4dae34cafcacdr		; 0.65172
	DQ	03fe4d88135f58553r		; 0.651429
	DQ	03fe4d61eeb27abc1r		; 0.651138
	DQ	03fe4d3bc6d591ed5r		; 0.650847
	DQ	03fe4d159bc006e31r		; 0.650555
	DQ	03fe4cef6d71d99d5r		; 0.650264
	DQ	03fe4cc93bf3a1220r		; 0.649973
	DQ	03fe4ca3073cc66b2r		; 0.649681
	DQ	03fe4c7ccf55e07ear		; 0.64939
	DQ	03fe4c5694365856br		; 0.649098
	DQ	03fe4c3055e6c4f92r		; 0.648806
	DQ	03fe4c0a145e8f601r		; 0.648514
	DQ	03fe4be3cfa64e916r		; 0.648222
	DQ	03fe4bbd87b56b873r		; 0.64793
	DQ	03fe4b973c9d144d7r		; 0.647638
	DQ	03fe4b70ee4c1ad81r		; 0.647346
	DQ	03fe4b4a9cc27f274r		; 0.647054
	DQ	03fe4b2448116f46cr		; 0.646761
	DQ	03fe4afdf027bd2acr		; 0.646469
	DQ	03fe4ad7951696df2r		; 0.646176
	DQ	03fe4ab136ccce57fr		; 0.645883
	DQ	03fe4a8ad55b91a12r		; 0.64559
	DQ	03fe4a6470b1b2aeer		; 0.645298
	DQ	03fe4a3e08e05f8cfr		; 0.645005
	DQ	03fe4a179dd66a2f7r		; 0.644711
	DQ	03fe49f12fa500a26r		; 0.644418
	DQ	03fe49cabe438bdfbr		; 0.644125
	DQ	03fe49a449baa2ed7r		; 0.643832
	DQ	03fe497dd1f917bfar		; 0.643538
	DQ	03fe49575718af682r		; 0.643244
	DQ	03fe4930d8ffa4d52r		; 0.642951
	DQ	03fe490a57bf26128r		; 0.642657
	DQ	03fe48e3d34e9c1a5r		; 0.642363
	DQ	03fe48bd4bb69df28r		; 0.642069
	DQ	03fe4896c0f72b9b1r		; 0.641775
	DQ	03fe48703307ae0e1r		; 0.641481
	DQ	03fe4849a1e8254b7r		; 0.641187
	DQ	03fe48230da9bf5f3r		; 0.640892
	DQ	03fe47fc763b4e3d6r		; 0.640598
	DQ	03fe47d5dba568eber		; 0.640303
	DQ	03fe47af3de80f6adr		; 0.640009
	DQ	03fe47889d0341ba2r		; 0.639714
	DQ	03fe4761f8ee68d3dr		; 0.639419
	DQ	03fe473b51bab2c3er		; 0.639124
	DQ	03fe4714a756f17e6r		; 0.638829
	DQ	03fe46edf9d4530f3r		; 0.638534
	DQ	03fe46c7492a40706r		; 0.638239
	DQ	03fe46a09558b9a1fr		; 0.637944
	DQ	03fe4679de5fbea3er		; 0.637649
	DQ	03fe4653243f4f763r		; 0.637353
	DQ	03fe462c66f76c18fr		; 0.637058
	DQ	03fe4605a690ab91fr		; 0.636762
	DQ	03fe45dee30276db6r		; 0.636466
	DQ	03fe45b81c5564fb2r		; 0.63617
	DQ	03fe45915280deeb4r		; 0.635874
	DQ	03fe456a8584e4abcr		; 0.635578
	DQ	03fe4543b56a0d429r		; 0.635282
	DQ	03fe451ce23058afcr		; 0.634986
	DQ	03fe44f60bcf2fed4r		; 0.63469
	DQ	03fe44cf324f2a012r		; 0.634393
	DQ	03fe44a855b046eb6r		; 0.634097
	DQ	03fe448175e9efa5fr		; 0.6338
	DQ	03fe445a9304bb36er		; 0.633504
	DQ	03fe4433ad00a99e2r		; 0.633207
	DQ	03fe440cc3ddbadbbr		; 0.63291
	DQ	03fe43e5d79357e9br		; 0.632613
	DQ	03fe43bee832aed3fr		; 0.632316
	DQ	03fe4397f5b328948r		; 0.632019
	DQ	03fe43710014c52b6r		; 0.631721
	DQ	03fe434a074eed92br		; 0.631424
	DQ	03fe43230b72cfd64r		; 0.631127
	DQ	03fe42fc0c806bf62r		; 0.630829
	DQ	03fe42d50a6693e66r		; 0.630532
	DQ	03fe42ae053675b2er		; 0.630234
	DQ	03fe4286fce77a55cr		; 0.629936
	DQ	03fe425ff179a1cefr		; 0.629638
	DQ	03fe4238e2f583246r		; 0.62934
	DQ	03fe4211d15287503r		; 0.629042
	DQ	03fe41eabc90ae525r		; 0.628744
	DQ	03fe41c3a4c12636br		; 0.628446
	DQ	03fe419c89ca29eb7r		; 0.628147
	DQ	03fe41756bc57e827r		; 0.627849
	DQ	03fe414e4aa1f5efcr		; 0.62755
	DQ	03fe4127265f90337r		; 0.627252
	DQ	03fe40ffff0f7b595r		; 0.626953
	DQ	03fe40d8d4a089558r		; 0.626654
	DQ	03fe40b1a71b512e1r		; 0.626355
	DQ	03fe408a767fd2e2dr		; 0.626056
	DQ	03fe406342ce0e73fr		; 0.625757
	DQ	03fe403c0c0603e14r		; 0.625458
	DQ	03fe4014d227b32afr		; 0.625159
	DQ	03fe3fed95331c50er		; 0.624859
	DQ	03fe3fc655283f531r		; 0.62456
	DQ	03fe3f9f12071c319r		; 0.62426
	DQ	03fe3f77cbd849f25r		; 0.623961
	DQ	03fe3f50828a9a897r		; 0.623661
	DQ	03fe3f29362f3c02cr		; 0.623361
	DQ	03fe3f01e6c62e5e5r		; 0.623061
	DQ	03fe3eda943e43903r		; 0.622761
	DQ	03fe3eb33ea8a9a45r		; 0.622461
	DQ	03fe3e8be605609abr		; 0.622161
	DQ	03fe3e648a4bd16d5r		; 0.621861
	DQ	03fe3e3d2b7bfc1c4r		; 0.62156
	DQ	03fe3e15c99e77ad7r		; 0.62126
	DQ	03fe3dee64b34420dr		; 0.620959
	DQ	03fe3dc6fcba61768r		; 0.620659
	DQ	03fe3d9f91ab38a87r		; 0.620358
	DQ	03fe3d78238e60bc9r		; 0.620057
	DQ	03fe3d50b25b42ad1r		; 0.619756
	DQ	03fe3d293e230c85br		; 0.619455
	DQ	03fe3d01c6d4903aar		; 0.619154
	DQ	03fe3cda4c80fbd7cr		; 0.618853
	DQ	03fe3cb2cf1721513r		; 0.618552
	DQ	03fe3c8b4ea82eb2cr		; 0.61825
	DQ	03fe3c63cb22f5f0br		; 0.617949
	DQ	03fe3c3c4498a516cr		; 0.617647
	DQ	03fe3c14bb00a51f1r		; 0.617346
	DQ	03fe3bed2e5af609ar		; 0.617044
	DQ	03fe3bc59ea797d67r		; 0.616742
	DQ	03fe3b9e0be68a857r		; 0.61644
	DQ	03fe3b767620651cbr		; 0.616138
	DQ	03fe3b4edd55279c2r		; 0.615836
	DQ	03fe3b274173a3f7dr		; 0.615534
	DQ	03fe3affa28d083bcr		; 0.615232
	DQ	03fe3ad800a15467dr		; 0.614929
	DQ	03fe3ab05ba7f1762r		; 0.614627
	DQ	03fe3a88b3a9766cbr		; 0.614324
	DQ	03fe3a6108a5e34b6r		; 0.614022
	DQ	03fe3a395a94a10c5r		; 0.613719
	DQ	03fe3a11a97e46b58r		; 0.613416
	DQ	03fe39e9f562d446dr		; 0.613113
	DQ	03fe39c23e39b2ba6r		; 0.61281
	DQ	03fe399a8414101c2r		; 0.612507
	DQ	03fe3972c6e0be601r		; 0.612204
	DQ	03fe394b06a8548c4r		; 0.611901
	DQ	03fe3923437369a68r		; 0.611597
	DQ	03fe38fb7d30cfa31r		; 0.611294
	DQ	03fe38d3b3f1b48dcr		; 0.61099
	DQ	03fe38abe7a4ea5aar		; 0.610687
	DQ	03fe3884185b9f15cr		; 0.610383
	DQ	03fe385c460d3bb90r		; 0.610079
	DQ	03fe383470c2574a6r		; 0.609775
	DQ	03fe380c9869c3be0r		; 0.609471
	DQ	03fe37e4bd14af1fdr		; 0.609167
	DQ	03fe37bcdec3196fcr		; 0.608863
	DQ	03fe3794fd6c6ba7er		; 0.608559
	DQ	03fe376d1910a5c83r		; 0.608254
	DQ	03fe374531b85ed6ar		; 0.60795
	DQ	03fe371d475affcd5r		; 0.607645
	DQ	03fe36f55a09b6b81r		; 0.607341
	DQ	03fe36cd69aabe851r		; 0.607036
	DQ	03fe36a57657dc462r		; 0.606731
	DQ	03fe367d7fffe1ef7r		; 0.606426
	DQ	03fe365586ab6686er		; 0.606121
	DQ	03fe362d8a5a6a0c7r		; 0.605816
	DQ	03fe36058b0cec802r		; 0.605511
	DQ	03fe35dd88c2ede20r		; 0.605206
	DQ	03fe35b5837c6e320r		; 0.6049
	DQ	03fe358d7b396d703r		; 0.604595
	DQ	03fe35656ff9eb9c8r		; 0.60429
	DQ	03fe353d61bde8b6fr		; 0.603984
	DQ	03fe3515508564bf8r		; 0.603678
	DQ	03fe34ed3c58f6bc3r		; 0.603372
	DQ	03fe34c5252770a11r		; 0.603067
	DQ	03fe349d0b02007a1r		; 0.602761
	DQ	03fe3474ede8a6472r		; 0.602455
	DQ	03fe344ccdd2cb026r		; 0.602148
	DQ	03fe3424aac06eabcr		; 0.601842
	DQ	03fe33fc84ba28494r		; 0.601536
	DQ	03fe33d45bb760d4dr		; 0.60123
	DQ	03fe33ac2fc0af549r		; 0.600923
	DQ	03fe338400cd7cc27r		; 0.600616
	DQ	03fe335bcee660246r		; 0.60031
	DQ	03fe33339a0b597a7r		; 0.600003
	DQ	03fe330b623c68c4ar		; 0.599696
	DQ	03fe32e32770f6fcer		; 0.599389
	DQ	03fe32bae9ba322f4r		; 0.599082
	DQ	03fe3292a906ec4fcr		; 0.598775
	DQ	03fe326a655fbc646r		; 0.598468
	DQ	03fe32421ec4a26d1r		; 0.598161
	DQ	03fe3219d5359e69er		; 0.597853
	DQ	03fe31f188b2b05acr		; 0.597546
	DQ	03fe31c9393bd83fcr		; 0.597238
	DQ	03fe31a0e6d9ad1edr		; 0.596931
	DQ	03fe3178918397f1fr		; 0.596623
	DQ	03fe3150393998b93r		; 0.596315
	DQ	03fe3127ddfbaf749r		; 0.596007
	DQ	03fe30ff7fc9dc240r		; 0.595699
	DQ	03fe30d71eacb5cd8r		; 0.595391
	DQ	03fe30aebaa43c710r		; 0.595083
	DQ	03fe308653a7d908br		; 0.594775
	DQ	03fe305de9b78b947r		; 0.594466
	DQ	03fe30357cdbeb1a3r		; 0.594158
	DQ	03fe300d0d14f79a1r		; 0.59385
	DQ	03fe2fe49a5a1a0e0r		; 0.593541
	DQ	03fe2fbc24b3e97c0r		; 0.593232
	DQ	03fe2f93ac2265e41r		; 0.592924
	DQ	03fe2f6b309cf8404r		; 0.592615
	DQ	03fe2f42b234ce9c6r		; 0.592306
	DQ	03fe2f1a30d8baecar		; 0.591997
	DQ	03fe2ef1ac915436fr		; 0.591688
	DQ	03fe2ec9255e9a7b5r		; 0.591378
	DQ	03fe2ea09b408db9cr		; 0.591069
	DQ	03fe2e780e3fc4f83r		; 0.59076
	DQ	03fe2e4f7e4b122abr		; 0.59045
	DQ	03fe2e26eb73a35d3r		; 0.590141
	DQ	03fe2dfe55b0e189dr		; 0.589831
	DQ	03fe2dd5bd02ccb07r		; 0.589521
	DQ	03fe2dad216964d12r		; 0.589212
	DQ	03fe2d8482ed40f1dr		; 0.588902
	DQ	03fe2d5be185ca0c8r		; 0.588592
	DQ	03fe2d333d3300215r		; 0.588282
	DQ	03fe2d0a95fd7a362r		; 0.587971
	DQ	03fe2ce1ebe5384afr		; 0.587661
	DQ	03fe2cb93ee1a359dr		; 0.587351
	DQ	03fe2c908ef2bb62br		; 0.58704
	DQ	03fe2c67dc29ae719r		; 0.58673
	DQ	03fe2c3f26754e7a8r		; 0.586419
	DQ	03fe2c166dde32837r		; 0.586109
	DQ	03fe2bedb25bc3866r		; 0.585798
	DQ	03fe2bc4f3ff2f8f5r		; 0.585487
	DQ	03fe2b9c32b748925r		; 0.585176
	DQ	03fe2b736e953c9b4r		; 0.584865
	DQ	03fe2b4aa787dd9e4r		; 0.584554
	DQ	03fe2b21dd97c2a14r		; 0.584243
	DQ	03fe2af910cd82aa4r		; 0.583931
	DQ	03fe2ad04117efad4r		; 0.58362
	DQ	03fe2aa76e8837b64r		; 0.583309
	DQ	03fe2a7e9915c3bf4r		; 0.582997
	DQ	03fe2a55c0c093c84r		; 0.582685
	DQ	03fe2a2ce588a7d13r		; 0.582374
	DQ	03fe2a04077696e03r		; 0.582062
	DQ	03fe29db2681c9ef2r		; 0.58175
	DQ	03fe29b242b2d8041r		; 0.581438
	DQ	03fe29895c012a190r		; 0.581126
	DQ	03fe296072755733er		; 0.580814
	DQ	03fe29378606c84ecr		; 0.580502
	DQ	03fe290e96be146far		; 0.580189
	DQ	03fe28e5a49b3b967r		; 0.579877
	DQ	03fe28bcaf95a6bd4r		; 0.579565
	DQ	03fe2893b7b5ecea0r		; 0.579252
	DQ	03fe286abcfc0e1ccr		; 0.578939
	DQ	03fe2841bf680a557r		; 0.578627
	DQ	03fe2818bef14a8e2r		; 0.578314
	DQ	03fe27efbba8fcd2cr		; 0.578001
	DQ	03fe27c6b57df3176r		; 0.577688
	DQ	03fe279dac815b67er		; 0.577375
	DQ	03fe2774a0aa9ebe6r		; 0.577062
	DQ	03fe274b91f9bd1adr		; 0.576748
	DQ	03fe2722806eb67d4r		; 0.576435
	DQ	03fe26f96c098ae5ar		; 0.576122
	DQ	03fe26d054ca3a53fr		; 0.575808
	DQ	03fe26a73ab95bce3r		; 0.575495
	DQ	03fe267e1dce584e6r		; 0.575181
	DQ	03fe2654fe11c6da8r		; 0.574867
	DQ	03fe262bdb7b106c9r		; 0.574553
	DQ	03fe2602b60a35049r		; 0.574239
	DQ	03fe25d98dd062ae7r		; 0.573925
	DQ	03fe25b062b3d4586r		; 0.573611
	DQ	03fe258734ce4f142r		; 0.573297
	DQ	03fe255e040ea4d5er		; 0.572983
	DQ	03fe2534d074d59d9r		; 0.572669
	DQ	03fe250b9a120f771r		; 0.572354
	DQ	03fe24e260d52456ar		; 0.57204
	DQ	03fe24b924c6ab420r		; 0.571725
	DQ	03fe248fe5ef3b3f5r		; 0.57141
	DQ	03fe2466a43da6429r		; 0.571096
	DQ	03fe243d5fba8351br		; 0.570781
	DQ	03fe24141865d26cdr		; 0.570466
	DQ	03fe23eace3f9393cr		; 0.570151
	DQ	03fe23c181505dccar		; 0.569836
	DQ	03fe23983187030b7r		; 0.569521
	DQ	03fe236edef4b15c2r		; 0.569205
	DQ	03fe23458990d1b8br		; 0.56889
	DQ	03fe231c3163fb273r		; 0.568574
	DQ	03fe22f2d66596a18r		; 0.568259
	DQ	03fe22c97895a427dr		; 0.567943
	DQ	03fe22a017fcbabffr		; 0.567628
	DQ	03fe2276b49243640r		; 0.567312
	DQ	03fe224d4e5ed519fr		; 0.566996
	DQ	03fe2223e559d8dbcr		; 0.56668
	DQ	03fe21fa798be5af8r		; 0.566364
	DQ	03fe21d10af4fb951r		; 0.566048
	DQ	03fe21a799951a8c8r		; 0.565732
	DQ	03fe217e2563ab8fdr		; 0.565416
	DQ	03fe2154ae6945a51r		; 0.565099
	DQ	03fe212b34a5e8cc2r		; 0.564783
	DQ	03fe2101b81995051r		; 0.564466
	DQ	03fe20d838c44a4fer		; 0.56415
	DQ	03fe20aeb6ae9fb28r		; 0.563833
	DQ	03fe208531c767211r		; 0.563516
	DQ	03fe205baa1737a18r		; 0.563199
	DQ	03fe20321f9e1133cr		; 0.562882
	DQ	03fe200892648adder		; 0.562565
	DQ	03fe1fdf02620d99dr		; 0.562248
	DQ	03fe1fb56f969967ar		; 0.561931
	DQ	03fe1f8bda0ac54d5r		; 0.561614
	DQ	03fe1f6241b5fa44dr		; 0.561297
	DQ	03fe1f38a698384e3r		; 0.560979
	DQ	03fe1f0f08ba166f6r		; 0.560662
	DQ	03fe1ee5681b94a86r		; 0.560344
	DQ	03fe1ebbc4b41bf35r		; 0.560026
	DQ	03fe1e921e83ac501r		; 0.559709
	DQ	03fe1e68759b73ca9r		; 0.559391
	DQ	03fe1e3ec9ea4456fr		; 0.559073
	DQ	03fe1e151b78b4fb2r		; 0.558755
	DQ	03fe1deb6a46c5b73r		; 0.558437
	DQ	03fe1dc1b64bdf851r		; 0.558119
	DQ	03fe1d97ff993070cr		; 0.5578
	DQ	03fe1d6e461d8a6e4r		; 0.557482
	DQ	03fe1d4489ea1b899r		; 0.557164
	DQ	03fe1d1acaedb5b6cr		; 0.556845
	DQ	03fe1cf109398701br		; 0.556526
	DQ	03fe1cc744c4f8647r		; 0.556208
	DQ	03fe1c9d7d9009df1r		; 0.555889
	DQ	03fe1c73b39abb717r		; 0.55557
	DQ	03fe1c49e6e50d1bbr		; 0.555251
	DQ	03fe1c20177795e3br		; 0.554932
	DQ	03fe1bf6455255c97r		; 0.554613
	DQ	03fe1bcc70641ec11r		; 0.554294
	DQ	03fe1ba298c6b5dc7r		; 0.553975
	DQ	03fe1b78be605609br		; 0.553656
	DQ	03fe1b4ee14ac45aar		; 0.553336
	DQ	03fe1b25016c3bbd7r		; 0.553017
	DQ	03fe1afb1ede81440r		; 0.552697
	DQ	03fe1ad1399066e26r		; 0.552378
	DQ	03fe1aa7518a839e8r		; 0.552058
	DQ	03fe1a7d66ccd7786r		; 0.551738
	DQ	03fe1a53795762701r		; 0.551418
	DQ	03fe1a29892a24859r		; 0.551098
	DQ	03fe19ff963c86b2dr		; 0.550778
	DQ	03fe19d5a09fb703dr		; 0.550458
	DQ	03fe19aba842876car		; 0.550138
	DQ	03fe1981ad3625f93r		; 0.549817
	DQ	03fe1957af71fba38r		; 0.549497
	DQ	03fe192daef6086bar		; 0.549177
	DQ	03fe1903abc24c518r		; 0.548856
	DQ	03fe18d9a5df5e5b1r		; 0.548536
	DQ	03fe18af9d44a7827r		; 0.548215
	DQ	03fe188591f227c79r		; 0.547894
	DQ	03fe185b83f076307r		; 0.547573
	DQ	03fe18317336fbb71r		; 0.547252
	DQ	03fe18075fce4f617r		; 0.546931
	DQ	03fe17dd49adda299r		; 0.54661
	DQ	03fe17b330de33157r		; 0.546289
	DQ	03fe17891556c31f1r		; 0.545968
	DQ	03fe175ef720214c7r		; 0.545646
	DQ	03fe1734d63a4d9d8r		; 0.545325
	DQ	03fe170ab2a548125r		; 0.545003
	DQ	03fe16e08c6110aaer		; 0.544682
	DQ	03fe16b6636510613r		; 0.54436
	DQ	03fe168c37c275413r		; 0.544039
	DQ	03fe16620968113efr		; 0.543717
	DQ	03fe1637d86712666r		; 0.543395
	DQ	03fe160da4ae4aabar		; 0.543073
	DQ	03fe15e36e4ee81a8r		; 0.542751
	DQ	03fe15b9354053ad2r		; 0.542429
	DQ	03fe158ef9828d638r		; 0.542106
	DQ	03fe1564bb15953d9r		; 0.541784
	DQ	03fe153a7a0202415r		; 0.541462
	DQ	03fe1510363f3d68dr		; 0.541139
	DQ	03fe14e5efcd46b41r		; 0.540817
	DQ	03fe14bba6b4b528fr		; 0.540494
	DQ	03fe14915af588c78r		; 0.540171
	DQ	03fe14670c872a89dr		; 0.539849
	DQ	03fe143cbb699a6fdr		; 0.539526
	DQ	03fe141267a56f7f8r		; 0.539203
	DQ	03fe13e8113aa9b8er		; 0.53888
	DQ	03fe13bdb829491bfr		; 0.538557
	DQ	03fe13935c714da8br		; 0.538234
	DQ	03fe1368fe0a20593r		; 0.53791
	DQ	03fe133e9cfc58335r		; 0.537587
	DQ	03fe13143947f5372r		; 0.537264
	DQ	03fe12e9d2f58e6aar		; 0.53694
	DQ	03fe12bf69f3f5c1dr		; 0.536617
	DQ	03fe1294fe4bc242ar		; 0.536293
	DQ	03fe126a8ffcf3ed3r		; 0.535969
	DQ	03fe12401f1021c76r		; 0.535645
	DQ	03fe1215ab7cb4cb4r		; 0.535322
	DQ	03fe11eb3542acf8cr		; 0.534998
	DQ	03fe11c0bc620a500r		; 0.534674
	DQ	03fe119640e363d6er		; 0.534349
	DQ	03fe116bc2be22876r		; 0.534025
	DQ	03fe114141fadd679r		; 0.533701
	DQ	03fe1116be90fd716r		; 0.533377
	DQ	03fe10ec388919aaer		; 0.533052
	DQ	03fe10c1afda9b0e0r		; 0.532728
	DQ	03fe1097248e18a0dr		; 0.532403
	DQ	03fe106c969afb5d4r		; 0.532078
	DQ	03fe10420612714f5r		; 0.531754
	DQ	03fe101772e34c6b1r		; 0.531429
	DQ	03fe0fecdd1623b67r		; 0.531104
	DQ	03fe0fc244aaf7317r		; 0.530779
	DQ	03fe0f97a9a1c6dc1r		; 0.530454
	DQ	03fe0f6d0bfa92b66r		; 0.530129
	DQ	03fe0f426bb55ac04r		; 0.529804
	DQ	03fe0f17c8d21ef9dr		; 0.529478
	DQ	03fe0eed2350df62fr		; 0.529153
	DQ	03fe0ec27b319bfbcr		; 0.528828
	DQ	03fe0e97d07454c43r		; 0.528502
	DQ	03fe0e6d2321a0c23r		; 0.528176
	DQ	03fe0e427330e8efer		; 0.527851
	DQ	03fe0e17c0aac4532r		; 0.527525
	DQ	03fe0ded0b869be60r		; 0.527199
	DQ	03fe0dc253c46fa88r		; 0.526873
	DQ	03fe0d97996cd6a09r		; 0.526547
	DQ	03fe0d6cdc7739c85r		; 0.526221
	DQ	03fe0d421cec3025ar		; 0.525895
	DQ	03fe0d175acbb9b88r		; 0.525569
	DQ	03fe0cec960d3f7b1r		; 0.525243
	DQ	03fe0cc1cec1ef792r		; 0.524916
	DQ	03fe0c9704d89ba6dr		; 0.52459
	DQ	03fe0c6c385144043r		; 0.524263
	DQ	03fe0c41693d169d1r		; 0.523937
	DQ	03fe0c1697937c6b8r		; 0.52361
	DQ	03fe0bebc34bde69ar		; 0.523283
	DQ	03fe0bc0ec776aa34r		; 0.522956
	DQ	03fe0b96130d8a128r		; 0.522629
	DQ	03fe0b6b370e3cb75r		; 0.522302
	DQ	03fe0b4058798291br		; 0.521975
	DQ	03fe0b15774f5ba1br		; 0.521648
	DQ	03fe0aea93985eed3r		; 0.521321
	DQ	03fe0abfad4bf56e5r		; 0.520994
	DQ	03fe0a94c46a1f250r		; 0.520666
	DQ	03fe0a69d8fb73174r		; 0.520339
	DQ	03fe0a3eeaf75a3f1r		; 0.520011
	DQ	03fe0a13fa666ba27r		; 0.519684
	DQ	03fe09e90740103b6r		; 0.519356
	DQ	03fe09be118cdf0fer		; 0.519028
	DQ	03fe0993194cd81fer		; 0.5187
	DQ	03fe09681e7764658r		; 0.518372
	DQ	03fe093d21151ae6br		; 0.518045
	DQ	03fe09122125fba36r		; 0.517716
	DQ	03fe08e71eaa069bar		; 0.517388
	DQ	03fe08bc1998a4c97r		; 0.51706
	DQ	03fe089112030438cr		; 0.516732
	DQ	03fe086607e08de3ar		; 0.516403
	DQ	03fe083afb28aac41r		; 0.516075
	DQ	03fe080febec88e60r		; 0.515746
	DQ	03fe07e4da2391438r		; 0.515418
	DQ	03fe07b9c5cdc3dc8r		; 0.515089
	DQ	03fe078eaeeb20b11r		; 0.51476
	DQ	03fe076395843ec72r		; 0.514432
	DQ	03fe073879908718br		; 0.514103
	DQ	03fe070d5b0ff9a5dr		; 0.513774
	DQ	03fe06e23a0b2d747r		; 0.513445
	DQ	03fe06b7168222849r		; 0.513116
	DQ	03fe068bf06c41d03r		; 0.512786
	DQ	03fe0660c7c98b577r		; 0.512457
	DQ	03fe06359ca296202r		; 0.512128
	DQ	03fe060a6ef7622a5r		; 0.511798
	DQ	03fe05df3ebf58700r		; 0.511469
	DQ	03fe05b40c0ba6fd3r		; 0.511139
	DQ	03fe0588d6cb1fc5er		; 0.51081
	DQ	03fe055d9f0659d02r		; 0.51048
	DQ	03fe053264bd551bdr		; 0.51015
	DQ	03fe050727e77aa31r		; 0.50982
	DQ	03fe04dbe895f871cr		; 0.50949
	DQ	03fe04b0a6c03781er		; 0.50916
	DQ	03fe0485626637d39r		; 0.50883
	DQ	03fe045a1b90906cbr		; 0.5085
	DQ	03fe042ed22e13416r		; 0.50817
	DQ	03fe0403864fee5d7r		; 0.507839
	DQ	03fe03d837ed8abb1r		; 0.507509
	DQ	03fe03ace706e85a2r		; 0.507179
	DQ	03fe038193a49e40br		; 0.506848
	DQ	03fe03563dbe1568br		; 0.506517
	DQ	03fe032ae55be4d83r		; 0.506187
	DQ	03fe02ff8a7e0c8f2r		; 0.505856
	DQ	03fe02d42d1bf5879r		; 0.505525
	DQ	03fe02a8cd359fc17r		; 0.505194
	DQ	03fe027d6ad3a242dr		; 0.504863
	DQ	03fe025205f5fd0bar		; 0.504532
	DQ	03fe02269e9cb01ber		; 0.504201
	DQ	03fe01fb34c7bb739r		; 0.50387
	DQ	03fe01cfc8771f12br		; 0.503538
	DQ	03fe01a459a243f36r		; 0.503207
	DQ	03fe0178e85a58216r		; 0.502876
	DQ	03fe014d748e2d90fr		; 0.502544
	DQ	03fe0121fe4ef24der		; 0.502212
	DQ	03fe00f685940f524r		; 0.501881
	DQ	03fe00cb0a5d849e1r		; 0.501549
	DQ	03fe009f8cab52316r		; 0.501217
	DQ	03fe00740c7d780c1r		; 0.500885
	DQ	03fe004889dc8d343r		; 0.500553
	DQ	03fe001d04c891a9br		; 0.500221
	DQ	03fdffe2fa60aec17r		; 0.499889
	DQ	03fdff8be64a18ca5r		; 0.499557
	DQ	03fdff34cd4d616dfr		; 0.499225
	DQ	03fdfeddaf595aa07r		; 0.498893
	DQ	03fdfe868c7f326dcr		; 0.49856
	DQ	03fdfe2f64bee8d5er		; 0.498228
	DQ	03fdfdd838074fccfr		; 0.497895
	DQ	03fdfd810669955ecr		; 0.497563
	DQ	03fdfd29cfe5b98b6r		; 0.49723
	DQ	03fdfcd2947bbc52cr		; 0.496897
	DQ	03fdfc7b542b9db50r		; 0.496564
	DQ	03fdfc240ee42fa62r		; 0.496231
	DQ	03fdfbccc4c7ce3dfr		; 0.495898
	DQ	03fdfb7575c54b709r		; 0.495565
	DQ	03fdfb1e21dca73e0r		; 0.495232
	DQ	03fdfac6c90de1a63r		; 0.494899
	DQ	03fdfa6f6b58faa94r		; 0.494566
	DQ	03fdfa1808bdf2471r		; 0.494232
	DQ	03fdf9c0a14df68b9r		; 0.493899
	DQ	03fdf96934f7d96afr		; 0.493565
	DQ	03fdf911c3ccc8f0fr		; 0.493232
	DQ	03fdf8ba4dbb9711dr		; 0.492898
	DQ	03fdf862d2d571d96r		; 0.492564
	DQ	03fdf80b53092b3bbr		; 0.492231
	DQ	03fdf7b3ce67f144cr		; 0.491897
	DQ	03fdf75c44e095e8ar		; 0.491563
	DQ	03fdf704b68447333r		; 0.491229
	DQ	03fdf6ad235305247r		; 0.490895
	DQ	03fdf6558b4ccfbc7r		; 0.490561
	DQ	03fdf5fdee6078ef3r		; 0.490226
	DQ	03fdf5a64cb05cd49r		; 0.489892
	DQ	03fdf54ea61a1f54dr		; 0.489558
	DQ	03fdf4f6faaeee7bbr		; 0.489223
	DQ	03fdf49f4a7ff8553r		; 0.488889
	DQ	03fdf447956ae0c98r		; 0.488554
	DQ	03fdf3efdb9203f07r		; 0.48822
	DQ	03fdf3981ce433be1r		; 0.487885
	DQ	03fdf340596170327r		; 0.48755
	DQ	03fdf2e89109b94d8r		; 0.487215
	DQ	03fdf290c3ee3d1b2r		; 0.48688
	DQ	03fdf238f1fdcd8f8r		; 0.486545
	DQ	03fdf1e11b4998b68r		; 0.48621
	DQ	03fdf1893fc070843r		; 0.485875
	DQ	03fdf1315f7383048r		; 0.48554
	DQ	03fdf0d97a51a22b8r		; 0.485205
	DQ	03fdf081906bfc052r		; 0.484869
	DQ	03fdf029a1b162858r		; 0.484534
	DQ	03fdefd1ae4431c46r		; 0.484198
	DQ	03fdef79b6020da9fr		; 0.483863
	DQ	03fdef21b8fc24422r		; 0.483527
	DQ	03fdeec9b732758cer		; 0.483191
	DQ	03fdee71b093d37e6r		; 0.482856
	DQ	03fdee19a5429a2e7r		; 0.48252
	DQ	03fdedc1952d9b911r		; 0.482184
	DQ	03fded698054d7a65r		; 0.481848
	DQ	03fded1166b84e6e3r		; 0.481512
	DQ	03fdecb94857ffe8ar		; 0.481176
	DQ	03fdec612533ec15cr		; 0.480839
	DQ	03fdec08fd5d41016r		; 0.480503
	DQ	03fdebb0d0c2d09f9r		; 0.480167
	DQ	03fdeb589f75c8fc5r		; 0.47983
	DQ	03fdeb006964fc0bbr		; 0.479494
	DQ	03fdeaa82e9069cdbr		; 0.479157
	DQ	03fdea4fef09404e3r		; 0.478821
	DQ	03fde9f7aabe51815r		; 0.478484
	DQ	03fde99f61c0cb72fr		; 0.478147
	DQ	03fde9471410ae231r		; 0.47781
	DQ	03fde8eec1adf991cr		; 0.477473
	DQ	03fde8966a877fb31r		; 0.477136
	DQ	03fde83e0eae6e92er		; 0.476799
	DQ	03fde7e5ae22c6313r		; 0.476462
	DQ	03fde78d48e4868e1r		; 0.476125
	DQ	03fde734def3afa97r		; 0.475788
	DQ	03fde6dc705041835r		; 0.47545
	DQ	03fde683fcfa3c1bcr		; 0.475113
	DQ	03fde62b84f19f72br		; 0.474775
	DQ	03fde5d308366b882r		; 0.474438
	DQ	03fde57a86d9ce680r		; 0.4741
	DQ	03fde52200b96bfa8r		; 0.473763
	DQ	03fde4c975f7a0577r		; 0.473425
	DQ	03fde470e6946b7edr		; 0.473087
	DQ	03fde418527e9f64br		; 0.472749
	DQ	03fde3bfb9b63c091r		; 0.472411
	DQ	03fde3671c4c6f77er		; 0.472073
	DQ	03fde30e7a4139b12r		; 0.471735
	DQ	03fde2b5d3836ca8fr		; 0.471397
	DQ	03fde25d2813085f4r		; 0.471058
	DQ	03fde204781268eber		; 0.47072
	DQ	03fde1abc35f32370r		; 0.470382
	DQ	03fde1530a0a924c9r		; 0.470043
	DQ	03fde0fa4c14892c9r		; 0.469705
	DQ	03fde0a1897d16d70r		; 0.469366
	DQ	03fde048c2443b4ber		; 0.469028
	DQ	03fddfeff669f68b3r		; 0.468689
	DQ	03fddf9725ee4894er		; 0.46835
	DQ	03fddf3e50d131691r		; 0.468011
	DQ	03fddee57712b107ar		; 0.467672
	DQ	03fdde8c98c3f57c9r		; 0.467333
	DQ	03fdde33b5c2a2affr		; 0.466994
	DQ	03fddddace3114b9cr		; 0.466655
	DQ	03fddd81e20f4b99dr		; 0.466316
	DQ	03fddd28f14c19446r		; 0.465976
	DQ	03fddccffbe77db95r		; 0.465637
	DQ	03fddc7701f2a704ar		; 0.465298
	DQ	03fddc1e035c671a5r		; 0.464958
	DQ	03fddbc50035ec066r		; 0.464619
	DQ	03fddb6bf87f35c8cr		; 0.464279
	DQ	03fddb12ec2716559r		; 0.463939
	DQ	03fddab9db3ebbb8cr		; 0.4636
	DQ	03fdda60c5c625f23r		; 0.46326
	DQ	03fdda07abbd55020r		; 0.46292
	DQ	03fdd9ae8d2448e83r		; 0.46258
	DQ	03fdd95569fb01a4br		; 0.46224
	DQ	03fdd8fc42417f378r		; 0.4619
	DQ	03fdd8a315e69394cr		; 0.46156
	DQ	03fdd849e50c9ad44r		; 0.461219
	DQ	03fdd7f0afa266ea1r		; 0.460879
	DQ	03fdd79775b925e22r		; 0.460539
	DQ	03fdd73e372e7ba4ar		; 0.460198
	DQ	03fdd6e4f424c4496r		; 0.459858
	DQ	03fdd68bac9bffd06r		; 0.459517
	DQ	03fdd6326071d221cr		; 0.459177
	DQ	03fdd5d90fd9c5615r		; 0.458836
	DQ	03fdd57fbaa04f6b5r		; 0.458495
	DQ	03fdd52660f8fa637r		; 0.458154
	DQ	03fdd4cd02b03c260r		; 0.457813
	DQ	03fdd4739ff99ed6br		; 0.457472
	DQ	03fdd41a38b2c65dcr		; 0.457131
	DQ	03fdd3c0ccece0c71r		; 0.45679
	DQ	03fdd3675ca7ee129r		; 0.456449
	DQ	03fdd30de7e3ee405r		; 0.456108
	DQ	03fdd2b46ea0e1505r		; 0.455766
	DQ	03fdd25af0cd9936br		; 0.455425
	DQ	03fdd2016e8c720b3r		; 0.455084
	DQ	03fdd1a7e7cc3dc1fr		; 0.454742
	DQ	03fdd14e5c8cfc5aer		; 0.4544
	DQ	03fdd0f4ccceadd62r		; 0.454059
	DQ	03fdd09b389152339r		; 0.453717
	DQ	03fdd0419fd4e9734r		; 0.453375
	DQ	03fdcfe802aaa1a12r		; 0.453033
	DQ	03fdcf8e61014cb13r		; 0.452692
	DQ	03fdcf34baea18af7r		; 0.45235
	DQ	03fdcedb1053d78ffr		; 0.452008
	DQ	03fdce81614fb75e9r		; 0.451665
	DQ	03fdce27adcc8a0f7r		; 0.451323
	DQ	03fdcdcdf5db7dae7r		; 0.450981
	DQ	03fdcd74396b642fbr		; 0.450639
	DQ	03fdcd1a789e99ab0r		; 0.450296
	DQ	03fdccc0b352c2089r		; 0.449954
	DQ	03fdcc66e9990b544r		; 0.449611
	DQ	03fdcc0d1b6047824r		; 0.449269
	DQ	03fdcbb348cad2aa4r		; 0.448926
	DQ	03fdcb5971c77ec06r		; 0.448583
	DQ	03fdcaff96451db8cr		; 0.448241
	DQ	03fdcaa5b6660bab3r		; 0.447898
	DQ	03fdca4bd2191a8bdr		; 0.447555
	DQ	03fdc9f1e95e4a5a9r		; 0.447212
	DQ	03fdc997fc359b177r		; 0.446869
	DQ	03fdc93e0ab03ace6r		; 0.446526
	DQ	03fdc8e414abcd679r		; 0.446183
	DQ	03fdc88a1a5bdd06cr		; 0.445839
	DQ	03fdc8301b8cdf882r		; 0.445496
	DQ	03fdc7d618725f0f8r		; 0.445153
	DQ	03fdc77c10d8d1791r		; 0.444809
	DQ	03fdc72204f3c0e8ar		; 0.444466
	DQ	03fdc6c7f48fa33a7r		; 0.444122
	DQ	03fdc66ddfe002923r		; 0.443779
	DQ	03fdc613c6c282d82r		; 0.443435
	DQ	03fdc5b9a94852181r		; 0.443091
	DQ	03fdc55f877170522r		; 0.442747
	DQ	03fdc505613ddd863r		; 0.442403
	DQ	03fdc4ab36ad99b45r		; 0.442059
	DQ	03fdc45107c0a4dc8r		; 0.441715
	DQ	03fdc3f6d476fefecr		; 0.441371
	DQ	03fdc39c9cbf7a0f2r		; 0.441027
	DQ	03fdc34260cda0316r		; 0.440683
	DQ	03fdc2e8206de741dr		; 0.440339
	DQ	03fdc28ddbb17d4c4r		; 0.439994
	DQ	03fdc23392a9905cbr		; 0.43965
	DQ	03fdc1d94544f2673r		; 0.439305
	DQ	03fdc17ef383a36bbr		; 0.438961
	DQ	03fdc1249d76d1763r		; 0.438616
	DQ	03fdc0ca431e7c86br		; 0.438272
	DQ	03fdc06fe46976913r		; 0.437927
	DQ	03fdc0158157bf95cr		; 0.437582
	DQ	03fdbfbb1a0bb3ac3r		; 0.437237
	DQ	03fdbf60ae51c8b0cr		; 0.436892
	DQ	03fdbf063e5d88c74r		; 0.436547
	DQ	03fdbeabca1dc5e3ar		; 0.436202
	DQ	03fdbe51518151fa2r		; 0.435857
	DQ	03fdbdf6d4995b169r		; 0.435512
	DQ	03fdbd9c5365e138fr		; 0.435167
	DQ	03fdbd41cde6e4615r		; 0.434821
	DQ	03fdbce7441c648far		; 0.434476
	DQ	03fdbc8cb6178fcfdr		; 0.434131
	DQ	03fdbc3223b60a0a1r		; 0.433785
	DQ	03fdbbd78d1a2f563r		; 0.433439
	DQ	03fdbb7cf232d1a84r		; 0.433094
	DQ	03fdbb2252fff1005r		; 0.432748
	DQ	03fdbac7af818d5e5r		; 0.432402
	DQ	03fdba6d07c8d4ce3r		; 0.432057
	DQ	03fdba125bd5c74ffr		; 0.431711
	DQ	03fdb9b7ab9736d7ar		; 0.431365
	DQ	03fdb95cf70d23654r		; 0.431019
	DQ	03fdb9023e48bb04dr		; 0.430673
	DQ	03fdb8a78149fdb63r		; 0.430326
	DQ	03fdb84cc010eb798r		; 0.42998
	DQ	03fdb7f1fa8c5642br		; 0.429634
	DQ	03fdb79730cd6c1ddr		; 0.429288
	DQ	03fdb73c62d42d0acr		; 0.428941
	DQ	03fdb6e190a09909ar		; 0.428595
	DQ	03fdb686ba32b01a5r		; 0.428248
	DQ	03fdb62bdf7944310r		; 0.427902
	DQ	03fdb5d10096b1657r		; 0.427555
	DQ	03fdb5761d79c9abcr		; 0.427208
	DQ	03fdb51b3633bb0fer		; 0.426862
	DQ	03fdb4c04aa22979er		; 0.426515
	DQ	03fdb4655ae77101cr		; 0.426168
	DQ	03fdb40a66f2639b7r		; 0.425821
	DQ	03fdb3af6ec301470r		; 0.425474
	DQ	03fdb354726a78105r		; 0.425127
	DQ	03fdb2f971d799eb9r		; 0.42478
	DQ	03fdb29e6d1b94e48r		; 0.424432
	DQ	03fdb24364253aef6r		; 0.424085
	DQ	03fdb1e85705ba180r		; 0.423738
	DQ	03fdb18d45bd125e7r		; 0.42339
	DQ	03fdb132303a15b6br		; 0.423043
	DQ	03fdb0d7169f2038ar		; 0.422695
	DQ	03fdb07bf8c9d5cc8r		; 0.422348
	DQ	03fdb020d6cb647e1r		; 0.422
	DQ	03fdafc5b0a3cc4d7r		; 0.421653
	DQ	03fdaf6a8641df2ebr		; 0.421305
	DQ	03fdaf0f57c7f939ar		; 0.420957
	DQ	03fdaeb42524ec626r		; 0.420609
	DQ	03fdae58ee58b8a8dr		; 0.420261
	DQ	03fdadfdb3748c190r		; 0.419913
	DQ	03fdada274560a9b0r		; 0.419565
	DQ	03fdad47311f9046cr		; 0.419217
	DQ	03fdacebe9bfef104r		; 0.418869
	DQ	03fdac909e4855036r		; 0.41852
	DQ	03fdac354ea794146r		; 0.418172
	DQ	03fdabd9faeeda4f0r		; 0.417824
	DQ	03fdab7ea30cf9a76r		; 0.417475
	DQ	03fdab23471320298r		; 0.417127
	DQ	03fdaac7e6f01fc96r		; 0.416778
	DQ	03fdaa6c82b52692er		; 0.41643
	DQ	03fdaa111a6234862r		; 0.416081
	DQ	03fda9b5ade61b972r		; 0.415732
	DQ	03fda95a3d6337ddcr		; 0.415383
	DQ	03fda8fec8b72d422r		; 0.415034
	DQ	03fda8a3500457dc1r		; 0.414685
	DQ	03fda847d3285b93dr		; 0.414336
	DQ	03fda7ec524594812r		; 0.413987
	DQ	03fda790cd39a68c4r		; 0.413638
	DQ	03fda7354426edccfr		; 0.413289
	DQ	03fda6d9b6fc3c375r		; 0.41294
	DQ	03fda67e25b991cb6r		; 0.412591
	DQ	03fda62290701c950r		; 0.412241
	DQ	03fda5c6f6fd807c7r		; 0.411892
	DQ	03fda56b599547a56r		; 0.411542
	DQ	03fda50fb81515f7fr		; 0.411193
	DQ	03fda4b4127ceb744r		; 0.410843
	DQ	03fda45868ddf6262r		; 0.410494
	DQ	03fda3fcbb270801br		; 0.410144
	DQ	03fda3a1097a7d1ecr		; 0.409794
	DQ	03fda34553b5f9657r		; 0.409444
	DQ	03fda2e999d97cd5er		; 0.409094
	DQ	03fda28ddc076387dr		; 0.408744
	DQ	03fda2321a1d51636r		; 0.408394
	DQ	03fda1d6543da2808r		; 0.408044
	DQ	03fda17a8a45fac74r		; 0.407694
	DQ	03fda11ebc58b64f8r		; 0.407344
	DQ	03fda0c2ea5379018r		; 0.406994
	DQ	03fda06714589ef4fr		; 0.406643
	DQ	03fda00b3a56fa1e0r		; 0.406293
	DQ	03fd9faf5c4e8a7car		; 0.405942
	DQ	03fd9f537a3f5010dr		; 0.405592
	DQ	03fd9ef7943a78e69r		; 0.405241
	DQ	03fd9e9baa2ed6f1er		; 0.404891
	DQ	03fd9e3fbc2d983ear		; 0.40454
	DQ	03fd9de3ca258ec11r		; 0.404189
	DQ	03fd9d87d416ba790r		; 0.403838
	DQ	03fd9d2bda23777e6r		; 0.403488
	DQ	03fd9ccfdc2969b96r		; 0.403137
	DQ	03fd9c73da289129fr		; 0.402786
	DQ	03fd9c17d44349e7er		; 0.402435
	DQ	03fd9bbbca5737db7r		; 0.402084
	DQ	03fd9b5fbc7589108r		; 0.401732
	DQ	03fd9b03aa9e3d871r		; 0.401381
	DQ	03fd9aa794d1553f2r		; 0.40103
	DQ	03fd9a4b7b0ed038ar		; 0.400679
	DQ	03fd99ef5d56ae73br		; 0.400327
	DQ	03fd99933ba8eff03r		; 0.399976
	DQ	03fd99371616c2ba2r		; 0.399624
	DQ	03fd98daec7dcab9br		; 0.399273
	DQ	03fd987ebf006406ar		; 0.398921
	DQ	03fd98228d8d60950r		; 0.398569
	DQ	03fd97c65835ee70er		; 0.398218
	DQ	03fd976a1ee8df8e3r		; 0.397866
	DQ	03fd970de1b761f8er		; 0.397514
	DQ	03fd96b1a09047a52r		; 0.397162
	DQ	03fd96555b739092dr		; 0.39681
	DQ	03fd95f9128398d9er		; 0.396458
	DQ	03fd959cc59e04626r		; 0.396106
	DQ	03fd954074c2d32c7r		; 0.395754
	DQ	03fd94e42014614fcr		; 0.395401
	DQ	03fd9487c77052b49r		; 0.395049
	DQ	03fd942b6ae7d566dr		; 0.394697
	DQ	03fd93cf0a8c17726r		; 0.394344
	DQ	03fd9372a63abcbf6r		; 0.393992
	DQ	03fd93163e04f359dr		; 0.39364
	DQ	03fd92b9d1fbe94d9r		; 0.393287
	DQ	03fd925d61fd4282dr		; 0.392934
	DQ	03fd9200ee2b5b116r		; 0.392582
	DQ	03fd91a4767504ed6r		; 0.392229
	DQ	03fd9147fada4016br		; 0.391876
	DQ	03fd90eb7b6c3a996r		; 0.391523
	DQ	03fd908ef819c6697r		; 0.39117
	DQ	03fd903270f41192er		; 0.390817
	DQ	03fd8fd5e5e9ee09ar		; 0.390464
	DQ	03fd8f79570c89d9cr		; 0.390111
	DQ	03fd8f1cc44ab6f74r		; 0.389758
	DQ	03fd8ec02db5a36e1r		; 0.389405
	DQ	03fd8e63934d4f3e3r		; 0.389052
	DQ	03fd8e06f5008c5bbr		; 0.388698
	DQ	03fd8daa52f1b6de7r		; 0.388345
	DQ	03fd8d4dacfe72ae9r		; 0.387992
	DQ	03fd8cf10337edd81r		; 0.387638
	DQ	03fd8c94559e285adr		; 0.387285
	DQ	03fd8c37a4312236er		; 0.386931
	DQ	03fd8bdaef0209783r		; 0.386577
	DQ	03fd8b7e35ee8206er		; 0.386224
	DQ	03fd8b217918e7facr		; 0.38587
	DQ	03fd8ac4b8700d480r		; 0.385516
	DQ	03fd8a67f3f3f1ee9r		; 0.385162
	DQ	03fd8a0b2ba495ee6r		; 0.384808
	DQ	03fd89ae5f9327537r		; 0.384454
	DQ	03fd89518fbfa61dbr		; 0.3841
	DQ	03fd88f4bc18e4415r		; 0.383746
	DQ	03fd8897e49ee1be3r		; 0.383392
	DQ	03fd883b0962cca05r		; 0.383038
	DQ	03fd87de2a64a4e7ar		; 0.382683
	DQ	03fd878147a46a943r		; 0.382329
	DQ	03fd87246110ef9a1r		; 0.381975
	DQ	03fd86c776bb62052r		; 0.38162
	DQ	03fd866a88a3c1d56r		; 0.381266
	DQ	03fd860d96ca0f0afr		; 0.380911
	DQ	03fd85b0a12e49a5ar		; 0.380557
	DQ	03fd8553a7d071a59r		; 0.380202
	DQ	03fd84f6aab0870acr		; 0.379847
	DQ	03fd8499a9ce89d52r		; 0.379492
	DQ	03fd843ca52a7a04br		; 0.379138
	DQ	03fd83df9cd585a57r		; 0.378783
	DQ	03fd838290be7eab5r		; 0.378428
	DQ	03fd832580e565168r		; 0.378073
	DQ	03fd82c86d4a38e6er		; 0.377718
	DQ	03fd826b560f56344r		; 0.377363
	DQ	03fd820e3b0132dafr		; 0.377007
	DQ	03fd81b11c422af2cr		; 0.376652
	DQ	03fd8153f9d23e7bcr		; 0.376297
	DQ	03fd80f6d3a03f69er		; 0.375942
	DQ	03fd8099a9bd5bc93r		; 0.375586
	DQ	03fd803c7c299399ar		; 0.375231
	DQ	03fd7fdf4ae4e6db2r		; 0.374875
	DQ	03fd7f8215de2781fr		; 0.37452
	DQ	03fd7f24dd37b1a5br		; 0.374164
	DQ	03fd7ec7a0cf292ebr		; 0.373808
	DQ	03fd7e6a60c6ea34cr		; 0.373453
	DQ	03fd7e0d1cfc98a00r		; 0.373097
	DQ	03fd7dafd59290884r		; 0.372741
	DQ	03fd7d528a77a3e1br		; 0.372385
	DQ	03fd7cf53babd2ac3r		; 0.372029
	DQ	03fd7c97e92f1ce7er		; 0.371673
	DQ	03fd7c3a9312b0a09r		; 0.371317
	DQ	03fd7bdd39455fca6r		; 0.370961
	DQ	03fd7b7fdbc72a655r		; 0.370605
	DQ	03fd7b227aa93e7d4r		; 0.370249
	DQ	03fd7ac515eb9c124r		; 0.369892
	DQ	03fd7a67ad7d15186r		; 0.369536
	DQ	03fd7a0a416ed79b8r		; 0.36918
	DQ	03fd79acd1c0e39bbr		; 0.368823
	DQ	03fd794f5e620b0d0r		; 0.368467
	DQ	03fd78f1e7637bfb5r		; 0.36811
	DQ	03fd78946cc53666br		; 0.367754
	DQ	03fd7836ee873a4f1r		; 0.367397
	DQ	03fd77d96ca987b48r		; 0.36704
	DQ	03fd777be71af08b0r		; 0.366684
	DQ	03fd771e5dfdd0ea8r		; 0.366327
	DQ	03fd76c0d140fac70r		; 0.36597
	DQ	03fd766340f59c2c8r		; 0.365613
	DQ	03fd7605acf959031r		; 0.365256
	DQ	03fd75a8156e8d629r		; 0.364899
	DQ	03fd754a7a440b3f2r		; 0.364542
	DQ	03fd74ecdb79d298br		; 0.364185
	DQ	03fd748f3921117b3r		; 0.363828
	DQ	03fd74319339c7e6ar		; 0.36347
	DQ	03fd73d3e9b2c7cf2r		; 0.363113
	DQ	03fd73763c8c1134ar		; 0.362756
	DQ	03fd73188bd6d2231r		; 0.362398
	DQ	03fd72bad7930a9a7r		; 0.362041
	DQ	03fd725d1fc0ba9acr		; 0.361683
	DQ	03fd71ff644eb4182r		; 0.361326
	DQ	03fd71a1a55f532a5r		; 0.360968
	DQ	03fd7143e2d03bb99r		; 0.360611
	DQ	03fd70e61cb29bd1br		; 0.360253
	DQ	03fd708853067372dr		; 0.359895
	DQ	03fd702a85dcf0a8cr		; 0.359537
	DQ	03fd6fccb513b75bcr		; 0.359179
	DQ	03fd6f6ee0cd23a39r		; 0.358821
	DQ	03fd6f1108e6d9686r		; 0.358463
	DQ	03fd6eb32d9462ce0r		; 0.358105
	DQ	03fd6e554ea235b0ar		; 0.357747
	DQ	03fd6df76c32ae282r		; 0.357389
	DQ	03fd6d9986349e288r		; 0.357031
	DQ	03fd6d3b9cb933bdcr		; 0.356673
	DQ	03fd6cddafaf40dc0r		; 0.356314
	DQ	03fd6c7fbf27f38f0r		; 0.355956
	DQ	03fd6c21cb234bd6er		; 0.355598
	DQ	03fd6bc3d3901ba7br		; 0.355239
	DQ	03fd6b65d87f910d6r		; 0.354881
	DQ	03fd6b07d9f1ac07er		; 0.354522
	DQ	03fd6aa9d7d53e8b5r		; 0.354164
	DQ	03fd6a4bd24ca4af9r		; 0.353805
	DQ	03fd69edc935825cbr		; 0.353446
	DQ	03fd698fbcb233aa9r		; 0.353087
	DQ	03fd6931acb18a8d5r		; 0.352729
	DQ	03fd68d3992258f8fr		; 0.35237
	DQ	03fd68758226fb056r		; 0.352011
	DQ	03fd681767ae42a6ar		; 0.351652
	DQ	03fd67b949c95de8ar		; 0.351293
	DQ	03fd675b28671ebf8r		; 0.350934
	DQ	03fd66fd0387852b3r		; 0.350575
	DQ	03fd669edb3bbf37ar		; 0.350215
	DQ	03fd6640af729ed8fr		; 0.349856
	DQ	03fd65e2802c240f1r		; 0.349497
	DQ	03fd65844d8aaaf1er		; 0.349138
	DQ	03fd6526175aa95dar		; 0.348778
	DQ	03fd64c7ddcfa9760r		; 0.348419
	DQ	03fd6469a0c74f234r		; 0.348059
	DQ	03fd640b6063f67d2r		; 0.3477
	DQ	03fd63ad1c83436ber		; 0.34734
	DQ	03fd634ed53663fb6r		; 0.34698
	DQ	03fd62f08a7d582bar		; 0.346621
	DQ	03fd62923c581ffcar		; 0.346261
	DQ	03fd6233eac6bb6e6r		; 0.345901
	DQ	03fd61d595c92a80er		; 0.345541
	DQ	03fd61773d5f6d342r		; 0.345181
	DQ	03fd6118e19ab1940r		; 0.344821
	DQ	03fd60ba8269c994br		; 0.344461
	DQ	03fd605c1fccb5361r		; 0.344101
	DQ	03fd5ffdb9c374784r		; 0.343741
	DQ	03fd5f9f50706372fr		; 0.343381
	DQ	03fd5f40e39ff8028r		; 0.343021
	DQ	03fd5ee273748e3ecr		; 0.342661
	DQ	03fd5e83ffee2627ar		; 0.3423
	DQ	03fd5e2588fb91b14r		; 0.34194
	DQ	03fd5dc70eadfee79r		; 0.34158
	DQ	03fd5d6891056dca8r		; 0.341219
	DQ	03fd5d0a1001de5a2r		; 0.340859
	DQ	03fd5cab8b92228a7r		; 0.340498
	DQ	03fd5c4d03d896736r		; 0.340138
	DQ	03fd5bee78b2ddfd1r		; 0.339777
	DQ	03fd5b8fea43553f5r		; 0.339416
	DQ	03fd5b315867a0225r		; 0.339055
	DQ	03fd5ad2c3421abddr		; 0.338695
	DQ	03fd5a742ac197061r		; 0.338334
	DQ	03fd5a158ee614fafr		; 0.337973
	DQ	03fd59b6efaf949c7r		; 0.337612
	DQ	03fd59584d2f43f69r		; 0.337251
	DQ	03fd58f9a753f4fd5r		; 0.33689
	DQ	03fd589afe2ed5bcar		; 0.336529
	DQ	03fd583c51aeb8289r		; 0.336168
	DQ	03fd57dda1e4ca4d2r		; 0.335806
	DQ	03fd577eeebfde1e5r		; 0.335445
	DQ	03fd5720385121a81r		; 0.335084
	DQ	03fd56c17e9894ea6r		; 0.334722
	DQ	03fd5662c18509d96r		; 0.334361
	DQ	03fd56040127ae80fr		; 0.334
	DQ	03fd55a53d8082e11r		; 0.333638
	DQ	03fd554676a0b505ar		; 0.333277
	DQ	03fd54e7ac65e8d6er		; 0.332915
	DQ	03fd5488dee14c60br		; 0.332553
	DQ	03fd542a0e12dfa31r		; 0.332192
	DQ	03fd53cb39faa29e0r		; 0.33183
	DQ	03fd536c62a9c35d6r		; 0.331468
	DQ	03fd530d880f13d56r		; 0.331106
	DQ	03fd52aeaa2a9405er		; 0.330744
	DQ	03fd524fc8fc43ef0r		; 0.330382
	DQ	03fd51f0e495519c9r		; 0.33002
	DQ	03fd5191fce48f02br		; 0.329658
	DQ	03fd513311fb2a2d5r		; 0.329296
	DQ	03fd50d423d9231c6r		; 0.328934
	DQ	03fd5075326d4bc41r		; 0.328572
	DQ	03fd50163db7a4244r		; 0.32821
	DQ	03fd4fb745da8854dr		; 0.327848
	DQ	03fd4f584ab39c3e0r		; 0.327485
	DQ	03fd4ef94c540debar		; 0.327123
	DQ	03fd4e9a4abbdd5dbr		; 0.32676
	DQ	03fd4e3b45eb0a944r		; 0.326398
	DQ	03fd4ddc3de1958f5r		; 0.326035
	DQ	03fd4d7d329f7e4edr		; 0.325673
	DQ	03fd4d1e2424c4d2dr		; 0.32531
	DQ	03fd4cbf1271691b4r		; 0.324948
	DQ	03fd4c5ffd9699342r		; 0.324585
	DQ	03fd4c00e571f9058r		; 0.324222
	DQ	03fd4ba1ca25e4a74r		; 0.323859
	DQ	03fd4b42abb25c197r		; 0.323497
	DQ	03fd4ae38a0631501r		; 0.323134
	DQ	03fd4a846521644b2r		; 0.322771
	DQ	03fd4a253d152316ar		; 0.322408
	DQ	03fd49c611d03fa69r		; 0.322045
	DQ	03fd4966e363e806er		; 0.321682
	DQ	03fd4907b1d01c37ar		; 0.321318
	DQ	03fd48a87d03ae2ccr		; 0.320955
	DQ	03fd48494520f9fe4r		; 0.320592
	DQ	03fd47ea0a05a3943r		; 0.320229
	DQ	03fd478acbc2d8fa8r		; 0.319865
	DQ	03fd472b8a589a313r		; 0.319502
	DQ	03fd46cc45c6e7384r		; 0.319139
	DQ	03fd466cfe0dc00fbr		; 0.318775
	DQ	03fd460db32d24b78r		; 0.318412
	DQ	03fd45ae6525152fbr		; 0.318048
	DQ	03fd454f1406bf843r		; 0.317684
	DQ	03fd44efbfc0f5a91r		; 0.317321
	DQ	03fd44906853b79e5r		; 0.316957
	DQ	03fd44310dbf0563fr		; 0.316593
	DQ	03fd43d1b0140d05dr		; 0.31623
	DQ	03fd43724f52ce840r		; 0.315866
	DQ	03fd4312eb6a1bd2ar		; 0.315502
	DQ	03fd42b3846b22fd7r		; 0.315138
	DQ	03fd42541a44b5f8br		; 0.314774
	DQ	03fd41f4ad0802d03r		; 0.31441
	DQ	03fd41953cb509840r		; 0.314046
	DQ	03fd4135c93a9c083r		; 0.313682
	DQ	03fd40d652bb16749r		; 0.313318
	DQ	03fd4076d9141cb15r		; 0.312953
	DQ	03fd40175c56dcca6r		; 0.312589
	DQ	03fd3fb7dc9484cbar		; 0.312225
	DQ	03fd3f5859aab89d3r		; 0.31186
	DQ	03fd3ef8d3bbd4570r		; 0.311496
	DQ	03fd3e994ab6a9ed2r		; 0.311132
	DQ	03fd3e39be9b395f8r		; 0.310767
	DQ	03fd3dda2f6982ae2r		; 0.310403
	DQ	03fd3d7a9d32b3e50r		; 0.310038
	DQ	03fd3d1b07e59ef82r		; 0.309673
	DQ	03fd3cbb6f8243e79r		; 0.309309
	DQ	03fd3c5bd419d0bf3r		; 0.308944
	DQ	03fd3bfc35ac457efr		; 0.308579
	DQ	03fd3b9c9428741b1r		; 0.308214
	DQ	03fd3b3cef9f8a9f5r		; 0.30785
	DQ	03fd3add48005affer		; 0.307485
	DQ	03fd3a7d9d6d41549r		; 0.30712
	DQ	03fd3a1defc3e1858r		; 0.306755
	DQ	03fd39be3f15699ebr		; 0.30639
	DQ	03fd395e8b61d9a00r		; 0.306025
	DQ	03fd38fed4a931898r		; 0.30566
	DQ	03fd389f1aeb715b4r		; 0.305294
	DQ	03fd383f5e39c7211r		; 0.304929
	DQ	03fd37df9e71d6c33r		; 0.304564
	DQ	03fd377fdba4ce4d7r		; 0.304199
	DQ	03fd372015e3dbcber		; 0.303833
	DQ	03fd36c04d1dd1327r		; 0.303468
	DQ	03fd36608163dc8d2r		; 0.303103
	DQ	03fd3600b2a4cfd00r		; 0.302737
	DQ	03fd35a0e0e0aafb1r		; 0.302372
	DQ	03fd35410c289c1a4r		; 0.302006
	DQ	03fd34e1347ca32d8r		; 0.30164
	DQ	03fd348159cb92290r		; 0.301275
	DQ	03fd34217c2697189r		; 0.300909
	DQ	03fd33c19b7c83f05r		; 0.300543
	DQ	03fd3361b7efb4c81r		; 0.300177
	DQ	03fd3301d15dcd880r		; 0.299812
	DQ	03fd32a1e7d7fc3c1r		; 0.299446
	DQ	03fd3241fb5e40e43r		; 0.29908
	DQ	03fd31e20bf09b807r		; 0.298714
	DQ	03fd3182198f0c10dr		; 0.298348
	DQ	03fd3122244ac0a12r		; 0.297982
	DQ	03fd30c22c015d19br		; 0.297616
	DQ	03fd306230d53d924r		; 0.29725
	DQ	03fd300232b533feer		; 0.296883
	DQ	03fd2fa231a1405far		; 0.296517
	DQ	03fd2f422daa90c06r		; 0.296151
	DQ	03fd2ee226bff7154r		; 0.295785
	DQ	03fd2e821cf2a16a1r		; 0.295418
	DQ	03fd2e22103161b31r		; 0.295052
	DQ	03fd2dc2008d65fc0r		; 0.294685
	DQ	03fd2d61ee06ae44fr		; 0.294319
	DQ	03fd2d01d88c0c821r		; 0.293952
	DQ	03fd2ca1c02eaebf2r		; 0.293586
	DQ	03fd2c41a4ee94fc3r		; 0.293219
	DQ	03fd2be186ba912d6r		; 0.292853
	DQ	03fd2b8165b4ff6a7r		; 0.292486
	DQ	03fd2b2141bb839bar		; 0.292119
	DQ	03fd2ac11af079d8cr		; 0.291752
	DQ	03fd2a60f142b415dr		; 0.291385
	DQ	03fd2a00c4b23252fr		; 0.291019
	DQ	03fd29a0953ef4901r		; 0.290652
	DQ	03fd294062e8facd3r		; 0.290285
	DQ	03fd28e02dc173164r		; 0.289918
	DQ	03fd287ff5b72f5f4r		; 0.289551
	DQ	03fd281fbaca2fa85r		; 0.289184
	DQ	03fd27bf7d0ba1fd5r		; 0.288816
	DQ	03fd275f3c6a58524r		; 0.288449
	DQ	03fd26fef8f780b32r		; 0.288082
	DQ	03fd269eb2b31b1ffr		; 0.287715
	DQ	03fd263e698bf98ccr		; 0.287347
	DQ	03fd25de1d934a057r		; 0.28698
	DQ	03fd257dcec90c8a1r		; 0.286613
	DQ	03fd251d7d2d411a9r		; 0.286245
	DQ	03fd24bd28bfe7b71r		; 0.285878
	DQ	03fd245cd16fd2538r		; 0.28551
	DQ	03fd23fc775f5d07cr		; 0.285143
	DQ	03fd239c1a6c2bbc1r		; 0.284775
	DQ	03fd233bbab89a882r		; 0.284408
	DQ	03fd22db58337b602r		; 0.28404
	DQ	03fd227af2dcce441r		; 0.283672
	DQ	03fd221a8ac5c13fdr		; 0.283304
	DQ	03fd21ba1fcbf83b9r		; 0.282937
	DQ	03fd2159b211cf4f2r		; 0.282569
	DQ	03fd20f94197467a8r		; 0.282201
	DQ	03fd2098ce4b2fb1dr		; 0.281833
	DQ	03fd2038583eb900fr		; 0.281465
	DQ	03fd1fd7df60b45c0r		; 0.281097
	DQ	03fd1f7763c24fcedr		; 0.280729
	DQ	03fd1f16e5638b598r		; 0.280361
	DQ	03fd1eb6643338f01r		; 0.279993
	DQ	03fd1e55e042869e8r		; 0.279624
	DQ	03fd1df559917464br		; 0.279256
	DQ	03fd1d94d0200242cr		; 0.278888
	DQ	03fd1d3443ee3038ar		; 0.27852
	DQ	03fd1cd3b4fbfe465r		; 0.278151
	DQ	03fd1c7323496c6bdr		; 0.277783
	DQ	03fd1c128ee7a8b50r		; 0.277415
	DQ	03fd1bb1f7b4570a2r		; 0.277046
	DQ	03fd1b515dd1d3830r		; 0.276678
	DQ	03fd1af0c12ef013br		; 0.276309
	DQ	03fd1a9021cbacbc3r		; 0.27594
	DQ	03fd1a2f7fb937887r		; 0.275572
	DQ	03fd19cedae6626c8r		; 0.275203
	DQ	03fd196e33645b744r		; 0.274834
	DQ	03fd190d8933229fcr		; 0.274466
	DQ	03fd18acdc4189e32r		; 0.274097
	DQ	03fd184c2c8f913e4r		; 0.273728
	DQ	03fd17eb7a3f94c90r		; 0.273359
	DQ	03fd178ac52f386bar		; 0.27299
	DQ	03fd172a0d6faa31fr		; 0.272621
	DQ	03fd16c95300ea1c0r		; 0.272252
	DQ	03fd166895e2f829cr		; 0.271883
	DQ	03fd1607d615d45b4r		; 0.271514
	DQ	03fd15a713997eb08r		; 0.271145
	DQ	03fd15464e7f25355r		; 0.270776
	DQ	03fd14e586a46bd20r		; 0.270407
	DQ	03fd1484bc2bae9e5r		; 0.270038
	DQ	03fd1423eef291827r		; 0.269668
	DQ	03fd13c31f2c9ea22r		; 0.269299
	DQ	03fd13624ca64bd9ar		; 0.26893
	DQ	03fd13017781f540cr		; 0.26856
	DQ	03fd12a09fbf9ad78r		; 0.268191
	DQ	03fd123fc54e0e920r		; 0.267821
	DQ	03fd11dee83e7e7c2r		; 0.267452
	DQ	03fd117e087fbc89fr		; 0.267082
	DQ	03fd111d2622f6c77r		; 0.266713
	DQ	03fd10bc41282d348r		; 0.266343
	DQ	03fd105b598f5fd14r		; 0.265973
	DQ	03fd0ffa6f588e9dar		; 0.265604
	DQ	03fd0f9982728b8dcr		; 0.265234
	DQ	03fd0f3892ffb2b96r		; 0.264864
	DQ	03fd0ed7a0dda808cr		; 0.264494
	DQ	03fd0e76ac2ec793ar		; 0.264125
	DQ	03fd0e15b4e1e34e3r		; 0.263755
	DQ	03fd0db4baf6fb386r		; 0.263385
	DQ	03fd0d53be6e0f523r		; 0.263015
	DQ	03fd0cf2bf584da78r		; 0.262645
	DQ	03fd0c91bda4882c8r		; 0.262275
	DQ	03fd0c30b952bee12r		; 0.261905
	DQ	03fd0bcfb2741fd14r		; 0.261534
	DQ	03fd0b6ea908aafcfr		; 0.261164
	DQ	03fd0b0d9cff32585r		; 0.260794
	DQ	03fd0aac8e57b5e34r		; 0.260424
	DQ	03fd0a4b7d3491b5br		; 0.260054
	DQ	03fd09ea697369b7br		; 0.259683
	DQ	03fd098953256bf54r		; 0.259313
	DQ	03fd09283a4a986e6r		; 0.258943
	DQ	03fd08c71ee2ef231r		; 0.258572
	DQ	03fd086600dd42076r		; 0.258202
	DQ	03fd0804e05bed331r		; 0.257831
	DQ	03fd07a3bd4dc29a6r		; 0.257461
	DQ	03fd074297b2c23d3r		; 0.25709
	DQ	03fd06e16f8aec1b9r		; 0.256719
	DQ	03fd068044d640357r		; 0.256349
	DQ	03fd061f17a5ec96dr		; 0.255978
	DQ	03fd05bde7e8c333br		; 0.255607
	DQ	03fd055cb5aff2180r		; 0.255236
	DQ	03fd04fb80d91d2c0r		; 0.254866
	DQ	03fd049a4997ce935r		; 0.254495
	DQ	03fd04390fc9aa362r		; 0.254124
	DQ	03fd03d7d37fde207r		; 0.253753
	DQ	03fd037694a93c465r		; 0.253382
	DQ	03fd03155356f2b3ar		; 0.253011
	DQ	03fd02b40f8901685r		; 0.25264
	DQ	03fd0252c92e3a58ar		; 0.252269
	DQ	03fd01f18068f99c4r		; 0.251898
	DQ	03fd0190352811275r		; 0.251527
	DQ	03fd012ee75a52edfr		; 0.251155
	DQ	03fd00cd97221b07fr		; 0.250784
	DQ	03fd006c445d0d5d7r		; 0.250413
	DQ	03fd000aef2d86065r		; 0.250042
	DQ	03fcff532f04aded4r		; 0.24967
	DQ	03fcfe907ad95c749r		; 0.249299
	DQ	03fcfdcdc1b6bb8adr		; 0.248928
	DQ	03fcfd0b039ccb2ffr		; 0.248556
	DQ	03fcfc48408b8b63fr		; 0.248185
	DQ	03fcfb8578a5583ebr		; 0.247813
	DQ	03fcfac2abea31c02r		; 0.247442
	DQ	03fcf9ffda37bbd07r		; 0.24707
	DQ	03fcf93d03b052878r		; 0.246698
	DQ	03fcf87a2853f5e54r		; 0.246327
	DQ	03fcf7b7480049d1er		; 0.245955
	DQ	03fcf6f462d7aa653r		; 0.245583
	DQ	03fcf63178fc73b71r		; 0.245212
	DQ	03fcf56e8a29ed97dr		; 0.24484
	DQ	03fcf4ab9682741f4r		; 0.244468
	DQ	03fcf3e89e06074d7r		; 0.244096
	DQ	03fcf325a0b4a7225r		; 0.243724
	DQ	03fcf2629e8e539dfr		; 0.243352
	DQ	03fcf19f97b568d80r		; 0.24298
	DQ	03fcf0dc8c078ab8dr		; 0.242608
	DQ	03fcf0197b84b9406r		; 0.242236
	DQ	03fcef56662cf46e9r		; 0.241864
	DQ	03fcee934c22985b5r		; 0.241492
	DQ	03fcedd02d65a506ar		; 0.24112
	DQ	03fced0d09d3be589r		; 0.240748
	DQ	03fcec49e16ce4514r		; 0.240375
	DQ	03fceb86b45373088r		; 0.240003
	DQ	03fceac382876a7e3r		; 0.239631
	DQ	03fcea004c08cab27r		; 0.239258
	DQ	03fce93d10b5378d7r		; 0.238886
	DQ	03fce879d0d1693ebr		; 0.238514
	DQ	03fce7b68c18a796br		; 0.238141
	DQ	03fce6f342ad4ead3r		; 0.237769
	DQ	03fce62ff48f5e824r		; 0.237396
	DQ	03fce56ca1e1332dar		; 0.237024
	DQ	03fce4a94a5e147fbr		; 0.236651
	DQ	03fce3e5ee4abaa82r		; 0.236278
	DQ	03fce3228d84c98f1r		; 0.235906
	DQ	03fce25f280c41348r		; 0.235533
	DQ	03fce19bbe037db05r		; 0.23516
	DQ	03fce0d84f4822eaar		; 0.234788
	DQ	03fce014dbda30e37r		; 0.234415
	DQ	03fcdf5163dc03b2ar		; 0.234042
	DQ	03fcde8de74d9b582r		; 0.233669
	DQ	03fcddca660c9bbc3r		; 0.233296
	DQ	03fcdd06e03b60f68r		; 0.232923
	DQ	03fcdc4355d9eb074r		; 0.23255
	DQ	03fcdb7fc6c5ddd67r		; 0.232177
	DQ	03fcdabc3343f193dr		; 0.231804
	DQ	03fcd9f89b0f6e0fbr		; 0.231431
	DQ	03fcd934fe4aaf61fr		; 0.231058
	DQ	03fcd8715cf5b58a7r		; 0.230685
	DQ	03fcd7adb732dca13r		; 0.230312
	DQ	03fcd6ea0cbd6c766r		; 0.229939
	DQ	03fcd6265dda1d39cr		; 0.229565
	DQ	03fcd562aa4436bbbr		; 0.229192
	DQ	03fcd49ef262cd438r		; 0.228819
	DQ	03fcd3db35cecc89er		; 0.228445
	DQ	03fcd31774ccecbe7r		; 0.228072
	DQ	03fcd253af3ad1c94r		; 0.227699
	DQ	03fcd18fe53ad7c25r		; 0.227325
	DQ	03fcd0cc16ccfea97r		; 0.226952
	DQ	03fcd00843ceea66fr		; 0.226578
	DQ	03fccf446c409afacr		; 0.226205
	DQ	03fcce809066c8949r		; 0.225831
	DQ	03fccdbcaffcbb04br		; 0.225458
	DQ	03fcccf8cb24ce62fr		; 0.225084
	DQ	03fccc34e1df02af6r		; 0.22471
	DQ	03fccb70f42b57e9fr		; 0.224337
	DQ	03fccaad0209ce12ar		; 0.223963
	DQ	03fcc9e90b7a65298r		; 0.223589
	DQ	03fcc925107d1d2e8r		; 0.223215
	DQ	03fcc8611111f621br		; 0.222841
	DQ	03fcc79d0d5b4c1adr		; 0.222468
	DQ	03fcc6d90536c3021r		; 0.222094
	DQ	03fcc614f8a45ad78r		; 0.22172
	DQ	03fcc550e7a4139b1r		; 0.221346
	DQ	03fcc48cd2584964ar		; 0.220972
	DQ	03fcc3c8b8c0fc342r		; 0.220598
	DQ	03fcc3049abbcff1cr		; 0.220224
	DQ	03fcc240786b20b55r		; 0.21985
	DQ	03fcc17c51ac92671r		; 0.219475
	DQ	03fcc0b826a2811edr		; 0.219101
	DQ	03fcbff3f74cecdc8r		; 0.218727
	DQ	03fcbf2fc38979885r		; 0.218353
	DQ	03fcbe6b8b9cdf51fr		; 0.217979
	DQ	03fcbda74f426609ar		; 0.217604
	DQ	03fcbce30ebec5df3r		; 0.21723
	DQ	03fcbc1ec9cd46a2er		; 0.216856
	DQ	03fcbb5a80b2a0845r		; 0.216481
	DQ	03fcba96334c776bbr		; 0.216107
	DQ	03fcb9d1e19acb591r		; 0.215732
	DQ	03fcb90d8b9d9c4c7r		; 0.215358
	DQ	03fcb8493177465d8r		; 0.214983
	DQ	03fcb784d3056d74ar		; 0.214609
	DQ	03fcb6c070481191ar		; 0.214234
	DQ	03fcb5fc09618ecc7r		; 0.21386
	DQ	03fcb5379e51e5251r		; 0.213485
	DQ	03fcb4732ef6b8839r		; 0.21311
	DQ	03fcb3aebb5008e81r		; 0.212736
	DQ	03fcb2ea43a28e823r		; 0.212361
	DQ	03fcb225c7a991224r		; 0.211986
	DQ	03fcb16147876ce01r		; 0.211611
	DQ	03fcb09cc33c21bbbr		; 0.211237
	DQ	03fcafd83ac7afb51r		; 0.210862
	DQ	03fcaf13ae2a16cc4r		; 0.210487
	DQ	03fcae4f1d6357013r		; 0.210112
	DQ	03fcad8a88737053fr		; 0.209737
	DQ	03fcacc5ef5a62c46r		; 0.209362
	DQ	03fcac0152182e52br		; 0.208987
	DQ	03fcab3cb0cf2f168r		; 0.208612
	DQ	03fcaa780b5d08f83r		; 0.208237
	DQ	03fca9b361c1bbf79r		; 0.207862
	DQ	03fca8eeb41fa42c9r		; 0.207487
	DQ	03fca82a0254657f6r		; 0.207111
	DQ	03fca7654c825c07br		; 0.206736
	DQ	03fca6a092872bader		; 0.206361
	DQ	03fca5dbd48530899r		; 0.205986
	DQ	03fca517127c6a9aer		; 0.20561
	DQ	03fca4524c4a7dca0r		; 0.205235
	DQ	03fca38d823422468r		; 0.20486
	DQ	03fca2c8b3f49fe0cr		; 0.204484
	DQ	03fca203e1ae52b0ar		; 0.204109
	DQ	03fca13f0b613ab61r		; 0.203734
	DQ	03fca07a310d57f12r		; 0.203358
	DQ	03fc9fb552b2aa61cr		; 0.202983
	DQ	03fc9ef070738e1fcr		; 0.202607
	DQ	03fc9e2b8a0b4afb9r		; 0.202231
	DQ	03fc9d669fbe9924dr		; 0.201856
	DQ	03fc9ca1b16b1c83ar		; 0.20148
	DQ	03fc9bdcbf33312fdr		; 0.201105
	DQ	03fc9b17c8f47b11ar		; 0.200729
	DQ	03fc9a52ceaefa290r		; 0.200353
	DQ	03fc998dd0850a8dcr		; 0.199978
	DQ	03fc98c8ce5450282r		; 0.199602
	DQ	03fc9803c8618327cr		; 0.199226
	DQ	03fc973ebe458f452r		; 0.19885
	DQ	03fc9679b06788c7br		; 0.198474
	DQ	03fc95b49ea51397br		; 0.198098
	DQ	03fc94ef88dbd39d4r		; 0.197723
	DQ	03fc942a6f2e24f04r		; 0.197347
	DQ	03fc9365519c0790ar		; 0.196971
	DQ	03fc92a030257b7e7r		; 0.196595
	DQ	03fc91db0aecdcd17r		; 0.196219
	DQ	03fc9115e1ad735a0r		; 0.195843
	DQ	03fc9050b4abf747dr		; 0.195466
	DQ	03fc8f8b83c60c831r		; 0.19509
	DQ	03fc8ec64efbb30bar		; 0.194714
	DQ	03fc8e01166f46f98r		; 0.194338
	DQ	03fc8d3bd9fe6c34cr		; 0.193962
	DQ	03fc8c7699a922bd6r		; 0.193586
	DQ	03fc8bb15591c6ab4r		; 0.193209
	DQ	03fc8aec0db857fe5r		; 0.192833
	DQ	03fc8a26c1fa7a9ecr		; 0.192457
	DQ	03fc8961727a8aa48r		; 0.19208
	DQ	03fc889c1f38880f6r		; 0.191704
	DQ	03fc87d6c81216c7br		; 0.191328
	DQ	03fc87116d2992e54r		; 0.190951
	DQ	03fc864c0ea1587fdr		; 0.190575
	DQ	03fc8586ac34af67cr		; 0.190198
	DQ	03fc84c14605f3b4fr		; 0.189822
	DQ	03fc83fbdc1525675r		; 0.189445
	DQ	03fc83366e84a096cr		; 0.189069
	DQ	03fc8270fd32092b6r		; 0.188692
	DQ	03fc81ab881d5f254r		; 0.188315
	DQ	03fc80e60f46a2845r		; 0.187939
	DQ	03fc802092add348ar		; 0.187562
	DQ	03fc7f5b12754d89fr		; 0.187185
	DQ	03fc7e958e9d11485r		; 0.186809
	DQ	03fc7dd00702c26ber		; 0.186432
	DQ	03fc7d0a7ba660f4br		; 0.186055
	DQ	03fc7c44eccca5125r		; 0.185678
	DQ	03fc7b7f5a30d6953r		; 0.185301
	DQ	03fc7ab9c3d2f57d4r		; 0.184925
	DQ	03fc79f429f7b9fa2r		; 0.184548
	DQ	03fc792e8c5a6bdc4r		; 0.184171
	DQ	03fc7868eb1d673b7r		; 0.183794
	DQ	03fc77a34663082f7r		; 0.183417
	DQ	03fc76dd9de69688br		; 0.18304
	DQ	03fc7617f1ca6e5efr		; 0.182663
	DQ	03fc75524230ebca0r		; 0.182286
	DQ	03fc748c8ed5569a5r		; 0.181909
	DQ	03fc73c6d7fc66ff8r		; 0.181532
	DQ	03fc73011d83c0e1br		; 0.181154
	DQ	03fc723b5f8dc058br		; 0.180777
	DQ	03fc71759df8094ccr		; 0.1804
	DQ	03fc70afd8c29bbder		; 0.180023
	DQ	03fc6fea100fd3c3dr		; 0.179646
	DQ	03fc6f2443dfb15e9r		; 0.179268
	DQ	03fc6e5e740fd8766r		; 0.178891
	DQ	03fc6d98a0c2a5230r		; 0.178514
	DQ	03fc6cd2c9d5bb4cbr		; 0.178136
	DQ	03fc6c0cef8dd3231r		; 0.177759
	DQ	03fc6b4711a634767r		; 0.177382
	DQ	03fc6a8130413b5ear		; 0.177004
	DQ	03fc69bb4b5ee7dbbr		; 0.176627
	DQ	03fc68f5632196057r		; 0.176249
	DQ	03fc682f77448dac3r		; 0.175872
	DQ	03fc676987ea2ae7cr		; 0.175494
	DQ	03fc66a39534c9d00r		; 0.175117
	DQ	03fc65dd9f020e4d2r		; 0.174739
	DQ	03fc6517a551f85f1r		; 0.174362
	DQ	03fc6451a8248805er		; 0.173984
	DQ	03fc638ba79c19595r		; 0.173606
	DQ	03fc62c5a39650419r		; 0.173229
	DQ	03fc61ff9c3588d68r		; 0.172851
	DQ	03fc61399179c3182r		; 0.172473
	DQ	03fc60738340a2ee9r		; 0.172095
	DQ	03fc5fad71ac8471br		; 0.171718
	DQ	03fc5ee75c9b0b89ar		; 0.17134
	DQ	03fc5e214450f0661r		; 0.170962
	DQ	03fc5d5b28897ad75r		; 0.170584
	DQ	03fc5c95096706f54r		; 0.170206
	DQ	03fc5bcee6e994bfdr		; 0.169828
	DQ	03fc5b08c11124371r		; 0.16945
	DQ	03fc5a4297ddb55afr		; 0.169072
	DQ	03fc597c6b71a4435r		; 0.168694
	DQ	03fc58b63b8838c09r		; 0.168316
	DQ	03fc57f008662b023r		; 0.167938
	DQ	03fc5729d1e91ef09r		; 0.16756
	DQ	03fc56639811148b9r		; 0.167182
	DQ	03fc559d5b0067eb0r		; 0.166804
	DQ	03fc54d71a94bcf72r		; 0.166426
	DQ	03fc5410d6f06fc7cr		; 0.166048
	DQ	03fc534a9013805cdr		; 0.16567
	DQ	03fc528445db929e9r		; 0.165291
	DQ	03fc51bdf848a68cfr		; 0.164913
	DQ	03fc50f7a79f7457ar		; 0.164535
	DQ	03fc5031539b43cefr		; 0.164157
	DQ	03fc4f6afc5e710acr		; 0.163778
	DQ	03fc4ea4a1e8fc0b0r		; 0.1634
	DQ	03fc4dde443ae4cfcr		; 0.163022
	DQ	03fc4d17e3542b590r		; 0.162643
	DQ	03fc4c517f34cfa6br		; 0.162265
	DQ	03fc4b8b17ff2dd0ar		; 0.161886
	DQ	03fc4ac4ad6e8da75r		; 0.161508
	DQ	03fc49fe3fc7a75a3r		; 0.161129
	DQ	03fc4937cee81ed19r		; 0.160751
	DQ	03fc48715acff40d7r		; 0.160372
	DQ	03fc47aae3a183259r		; 0.159994
	DQ	03fc46e4693a70023r		; 0.159615
	DQ	03fc461debbd16bb2r		; 0.159237
	DQ	03fc45576b071b388r		; 0.158858
	DQ	03fc4490e73ad9922r		; 0.15848
	DQ	03fc43ca605851c81r		; 0.158101
	DQ	03fc4303d63d27c28r		; 0.157722
	DQ	03fc423d490bb7993r		; 0.157343
	DQ	03fc4176b8e65d640r		; 0.156965
	DQ	03fc40b0258860f34r		; 0.156586
	DQ	03fc3fe98ef1c2470r		; 0.156207
	DQ	03fc3f22f567398eer		; 0.155828
	DQ	03fc3e5c58e8c6cadr		; 0.15545
	DQ	03fc3d95b931b1cb3r		; 0.155071
	DQ	03fc3ccf166456a7fr		; 0.154692
	DQ	03fc3c0870a31178br		; 0.154313
	DQ	03fc3b41c7cb8625dr		; 0.153934
	DQ	03fc3a7b1bddb4af2r		; 0.153555
	DQ	03fc39b46cfbf92car		; 0.153176
	DQ	03fc38edbb03f7866r		; 0.152797
	DQ	03fc382706180bd44r		; 0.152418
	DQ	03fc37604e15d9fe6r		; 0.152039
	DQ	03fc3699931fbe1c9r		; 0.15166
	DQ	03fc35d2d535b82efr		; 0.151281
	DQ	03fc350c14356c1d9r		; 0.150902
	DQ	03fc3445504136004r		; 0.150523
	DQ	03fc337e895915d71r		; 0.150144
	DQ	03fc32b7bf7d0ba20r		; 0.149765
	DQ	03fc31f0f2ad17610r		; 0.149385
	DQ	03fc312a22e939142r		; 0.149006
	DQ	03fc30635053ccd32r		; 0.148627
	DQ	03fc2f9c7aa81a6e7r		; 0.148248
	DQ	03fc2ed5a2087dfder		; 0.147868
	DQ	03fc2e0ec69753993r		; 0.147489
	DQ	03fc2d47e8323f28ar		; 0.14711
	DQ	03fc2c8106d940ac2r		; 0.14673
	DQ	03fc2bba22aeb43b9r		; 0.146351
	DQ	03fc2af33b903dbf1r		; 0.145972
	DQ	03fc2a2c51a0394e9r		; 0.145592
	DQ	03fc296564bc4ad21r		; 0.145213
	DQ	03fc289e7506ce619r		; 0.144833
	DQ	03fc27d7827fc3fcer		; 0.144454
	DQ	03fc27108d272ba43r		; 0.144075
	DQ	03fc264994daa93f9r		; 0.143695
	DQ	03fc258299bc98e6er		; 0.143316
	DQ	03fc24bb9bccfa9a1r		; 0.142936
	DQ	03fc23f49b0bce593r		; 0.142556
	DQ	03fc232d977914243r		; 0.142177
	DQ	03fc226691372812fr		; 0.141797
	DQ	03fc219f880151f5dr		; 0.141418
	DQ	03fc20d87bf9ede49r		; 0.141038
	DQ	03fc20116d4357f71r		; 0.140658
	DQ	03fc1f4a5bbb34158r		; 0.140279
	DQ	03fc1e834783de57ar		; 0.139899
	DQ	03fc1dbc307afaa5br		; 0.139519
	DQ	03fc1cf516a088ffar		; 0.139139
	DQ	03fc1c2dfa16e57d5r		; 0.13876
	DQ	03fc1b66dabbb406fr		; 0.13838
	DQ	03fc1a9fb8d3accc1r		; 0.138
	DQ	03fc19d893f7bb855r		; 0.13762
	DQ	03fc19116c8ef47a1r		; 0.13724
	DQ	03fc184a42549f7acr		; 0.13686
	DQ	03fc1783158d74b70r		; 0.13648
	DQ	03fc16bbe5f4bbff2r		; 0.136101
	DQ	03fc15f4b3acd16b0r		; 0.135721
	DQ	03fc152d7eb5b4fa9r		; 0.135341
	DQ	03fc14664731c2c5br		; 0.134961
	DQ	03fc139f0cdc429ccr		; 0.134581
	DQ	03fc12d7cff9ecaf6r		; 0.134201
	DQ	03fc1210906864e5br		; 0.133821
	DQ	03fc11494e27ab3fbr		; 0.133441
	DQ	03fc1082095a1bd55r		; 0.133061
	DQ	03fc0fbac1dd5a8e9r		; 0.13268
	DQ	03fc0ef377d3c3837r		; 0.1323
	DQ	03fc0e2c2b1afa9c0r		; 0.13192
	DQ	03fc0d64dbd55bf02r		; 0.13154
	DQ	03fc0c9d89e08b67fr		; 0.13116
	DQ	03fc0bd6355ee51b5r		; 0.13078
	DQ	03fc0b0ede50690a4r		; 0.130399
	DQ	03fc0a4784b51734br		; 0.130019
	DQ	03fc0980286a9382er		; 0.129639
	DQ	03fc08b8c9b596247r		; 0.129259
	DQ	03fc07f1685166e9br		; 0.128878
	DQ	03fc072a0482be025r		; 0.128498
	DQ	03fc06629e04e33ebr		; 0.128118
	DQ	03fc059b351c8ece6r		; 0.127737
	DQ	03fc04d3c9a76499ar		; 0.127357
	DQ	03fc040c5ba564a06r		; 0.126977
	DQ	03fc0344eb38eafa8r		; 0.126596
	DQ	03fc027d783f9b903r		; 0.126216
	DQ	03fc01b602b976616r		; 0.125835
	DQ	03fc00ee8ac8d785fr		; 0.125455
	DQ	03fc0027106dbefder		; 0.125075
	DQ	03fbfebf270ba162br		; 0.124694
	DQ	03fbfd3028221940br		; 0.124314
	DQ	03fbfba124a855f50r		; 0.123933
	DQ	03fbfa121c14e7207r		; 0.123552
	DQ	03fbf8830eac84f28r		; 0.123172
	DQ	03fbf6f3fc6f2f6b6r		; 0.122791
	DQ	03fbf564e55ce68aer		; 0.122411
	DQ	03fbf3d5c975aa512r		; 0.12203
	DQ	03fbf246a8b97abe1r		; 0.121649
	DQ	03fbf0b7832857d1cr		; 0.121269
	DQ	03fbef2858c2418c2r		; 0.120888
	DQ	03fbed99298737ed3r		; 0.120507
	DQ	03fbec09f5bbf3249r		; 0.120127
	DQ	03fbea7abd1bbb02br		; 0.119746
	DQ	03fbe8eb7feb47b72r		; 0.119365
	DQ	03fbe75c3da128e2br		; 0.118984
	DQ	03fbe5ccf70b87143r		; 0.118604
	DQ	03fbe43daba0f1ec6r		; 0.118223
	DQ	03fbe2ae5b61696b4r		; 0.117842
	DQ	03fbe11f06d65df02r		; 0.117461
	DQ	03fbdf8fad31a6ec1r		; 0.11708
	DQ	03fbde004f416cee0r		; 0.1167
	DQ	03fbdc70ecc0f7c64r		; 0.116319
	DQ	03fbdae1856b8f453r		; 0.115938
	DQ	03fbd95219caa3ca1r		; 0.115557
	DQ	03fbd7c2a954c4f5br		; 0.115176
	DQ	03fbd633344eaaf7br		; 0.114795
	DQ	03fbd4a3bafd0dff9r		; 0.114414
	DQ	03fbd3143d1b35dddr		; 0.114033
	DQ	03fbd184baa922927r		; 0.113652
	DQ	03fbcff533a6d41d5r		; 0.113271
	DQ	03fbce65a85902ae4r		; 0.11289
	DQ	03fbccd6187af6157r		; 0.112509
	DQ	03fbcb46840cae530r		; 0.112128
	DQ	03fbc9b6eb52e3968r		; 0.111747
	DQ	03fbc8274e4d95e00r		; 0.111366
	DQ	03fbc697acb80cffdr		; 0.110984
	DQ	03fbc50806d701259r		; 0.110603
	DQ	03fbc3785c65ba21br		; 0.110222
	DQ	03fbc1e8ada8f023cr		; 0.109841
	DQ	03fbc058fae55b5b6r		; 0.10946
	DQ	03fbbec943918b696r		; 0.109079
	DQ	03fbbd3987f2387d6r		; 0.108697
	DQ	03fbbba9c80762974r		; 0.108316
	DQ	03fbba1a03d109b72r		; 0.107935
	DQ	03fbb88a3b4f2ddd0r		; 0.107554
	DQ	03fbb6fa6ec687387r		; 0.107172
	DQ	03fbb56a9dada56a3r		; 0.106791
	DQ	03fbb3dac88df8d19r		; 0.10641
	DQ	03fbb24aef67816e8r		; 0.106028
	DQ	03fbb0bb11f587116r		; 0.105647
	DQ	03fbaf2b303809ba4r		; 0.105266
	DQ	03fbad9b4a2f09692r		; 0.104884
	DQ	03fbac0b6063f67d2r		; 0.104503
	DQ	03fbaa7b724d60973r		; 0.104122
	DQ	03fba8eb7feb47b72r		; 0.10374
	DQ	03fba75b89c71c3c5r		; 0.103359
	DQ	03fba5cb8f576dc78r		; 0.102977
	DQ	03fba43b90e0f4884r		; 0.102596
	DQ	03fba2ab8e63b07e9r		; 0.102214
	DQ	03fba11b87dfa1aa8r		; 0.101833
	DQ	03fb9f8b7d54c80c0r		; 0.101451
	DQ	03fb9dfb6ec323a31r		; 0.10107
	DQ	03fb9c6b5c2ab46fcr		; 0.100688
	DQ	03fb9adb458b7a721r		; 0.100307
	DQ	03fb994b2b2a2dd99r		; 0.0999252
	DQ	03fb97bb0c7d5e470r		; 0.0995436
	DQ	03fb962aea5334495r		; 0.099162
	DQ	03fb949ac3dd87519r		; 0.0987804
	DQ	03fb930a99a5c7bf1r		; 0.0983988
	DQ	03fb917a6babf591cr		; 0.0980171
	DQ	03fb8fea39ab589a0r		; 0.0976355
	DQ	03fb8e5a03e8a9078r		; 0.0972538
	DQ	03fb8cc9ca63e6da4r		; 0.0968721
	DQ	03fb8b398cd859e29r		; 0.0964904
	DQ	03fb89a94b8aba501r		; 0.0961087
	DQ	03fb8819067b0822dr		; 0.095727
	DQ	03fb8688bda9435adr		; 0.0953453
	DQ	03fb84f871156bf7fr		; 0.0949635
	DQ	03fb836820bf81fa6r		; 0.0945817
	DQ	03fb81d7cca78561fr		; 0.0941999
	DQ	03fb804774cd762edr		; 0.0938181
	DQ	03fb7eb719760c907r		; 0.0934363
	DQ	03fb7d26ba17d827cr		; 0.0930545
	DQ	03fb7b96573c4953dr		; 0.0926727
	DQ	03fb7a05f0e36014cr		; 0.0922908
	DQ	03fb78758683ac0b5r		; 0.091909
	DQ	03fb76e518eb55c65r		; 0.0915271
	DQ	03fb7554a74c34b6fr		; 0.0911452
	DQ	03fb73c43274716c0r		; 0.0907633
	DQ	03fb7233b9da9b864r		; 0.0903814
	DQ	03fb70a33d7eb305dr		; 0.0899994
	DQ	03fb6f12bdea2849cr		; 0.0896175
	DQ	03fb6d823a938af2fr		; 0.0892355
	DQ	03fb6bf1b3bf93310r		; 0.0888536
	DQ	03fb6a6129b2f9338r		; 0.0884716
	DQ	03fb68d09be44c9b4r		; 0.0880896
	DQ	03fb67400a984597dr		; 0.0877076
	DQ	03fb65af75cee4293r		; 0.0873255
	DQ	03fb641edd88284f7r		; 0.0869435
	DQ	03fb628e4208ca3a3r		; 0.0865614
	DQ	03fb60fda30c11b9cr		; 0.0861794
	DQ	03fb5f6d0091fece3r		; 0.0857973
	DQ	03fb5ddc5adf49a71r		; 0.0854152
	DQ	03fb5c4bb1af3a14dr		; 0.0850331
	DQ	03fb5abb0501d0176r		; 0.084651
	DQ	03fb592a551bc3de7r		; 0.0842689
	DQ	03fb5799a1fd1569fr		; 0.0838867
	DQ	03fb5608eb610c8a5r		; 0.0835046
	DQ	03fb547831d1199edr		; 0.0831224
	DQ	03fb52e7747f14187r		; 0.0827403
	DQ	03fb5156b43924864r		; 0.0823581
	DQ	03fb4fc5f0ba92b88r		; 0.0819759
	DQ	03fb4e3529bea67f9r		; 0.0815937
	DQ	03fb4ca45fced03adr		; 0.0812114
	DQ	03fb4b1392619f8adr		; 0.0808292
	DQ	03fb4982c20084cefr		; 0.080447
	DQ	03fb47f1ee66c7d79r		; 0.0800647
	DQ	03fb4661179468a4ar		; 0.0796824
	DQ	03fb44d03d8967363r		; 0.0793002
	DQ	03fb433f608a7bbber		; 0.0789179
	DQ	03fb41ae8052ee060r		; 0.0785356
	DQ	03fb401d9ce2be149r		; 0.0781532
	DQ	03fb3e8cb67ea4174r		; 0.0777709
	DQ	03fb3cfbcd26a00e1r		; 0.0773886
	DQ	03fb3b6ae095f9c95r		; 0.0770062
	DQ	03fb39d9f1116978br		; 0.0766239
	DQ	03fb3848fe98ef1c2r		; 0.0762415
	DQ	03fb36b808e7d2841r		; 0.0758591
	DQ	03fb35271042cbe02r		; 0.0754767
	DQ	03fb339614ee935fer		; 0.0750943
	DQ	03fb32051661b8a42r		; 0.0747119
	DQ	03fb307414e0f3dc7r		; 0.0743295
	DQ	03fb2ee3106c4508er		; 0.073947
	DQ	03fb2d520903ac296r		; 0.0735646
	DQ	03fb2bc0feebe16dar		; 0.0731821
	DQ	03fb2a2ff1e02ca60r		; 0.0727996
	DQ	03fb289ee1e08dd27r		; 0.0724171
	DQ	03fb270dceed04f30r		; 0.0720347
	DQ	03fb257cb94a4a374r		; 0.0716521
	DQ	03fb23eba0b3a56far		; 0.0712696
	DQ	03fb225a856dcecbcr		; 0.0708871
	DQ	03fb20c967340e1bfr		; 0.0705046
	DQ	03fb1f38464b1b8fer		; 0.070122
	DQ	03fb1da722b2f7278r		; 0.0697395
	DQ	03fb1c15fc26e8b34r		; 0.0693569
	DQ	03fb1a84d2eba862cr		; 0.0689743
	DQ	03fb18f3a7013635fr		; 0.0685917
	DQ	03fb17627867922cer		; 0.0682091
	DQ	03fb15d1471ebc479r		; 0.0678265
	DQ	03fb14401326b485fr		; 0.0674439
	DQ	03fb12aedc7f7ae80r		; 0.0670613
	DQ	03fb111da36dc79d8r		; 0.0666787
	DQ	03fb0f8c67682a471r		; 0.066296
	DQ	03fb0dfb28f81343fr		; 0.0659134
	DQ	03fb0c69e7d8ca64ar		; 0.0655307
	DQ	03fb0ad8a40a4fa90r		; 0.065148
	DQ	03fb09475dd15b40br		; 0.0647653
	DQ	03fb07b614e934fc2r		; 0.0643826
	DQ	03fb0624c951dcdb5r		; 0.0639999
	DQ	03fb04937b94c33d8r		; 0.0636172
	DQ	03fb03022b2877c36r		; 0.0632345
	DQ	03fb0170d80cfa6cfr		; 0.0628518
	DQ	03faffbf059777332r		; 0.062469
	DQ	03fafc9c55b695d3cr		; 0.0620863
	DQ	03faf979a100c11b1r		; 0.0617035
	DQ	03faf656e775f9092r		; 0.0613207
	DQ	03faf33429163d9der		; 0.060938
	DQ	03faf01165e18ed95r		; 0.0605552
	DQ	03faecee9dd7ecbb8r		; 0.0601724
	DQ	03fae9cbd182c7a3ar		; 0.0597896
	DQ	03fae6a8ffcf3ed33r		; 0.0594068
	DQ	03fae38629d03308cr		; 0.0590239
	DQ	03fae0634efc33e50r		; 0.0586411
	DQ	03fadd406f534167fr		; 0.0582583
	DQ	03fada1d8b5ecbf0er		; 0.0578754
	DQ	03fad6faa31ed37fcr		; 0.0574926
	DQ	03fad3d7b58077562r		; 0.0571097
	DQ	03fad0b4c4200891ar		; 0.0567268
	DQ	03facd91cdeaa673fr		; 0.0563439
	DQ	03faca6ed369c15c2r		; 0.055961
	DQ	03fac74bd49d594a5r		; 0.0555782
	DQ	03fac428d0fbfddf3r		; 0.0551952
	DQ	03fac105c9988fd95r		; 0.0548123
	DQ	03fabde2bd602e7a2r		; 0.0544294
	DQ	03fababfacdc4a20fr		; 0.0540465
	DQ	03fab79c980ce2cdar		; 0.0536635
	DQ	03fab4797f7b68dfar		; 0.0532806
	DQ	03fab156629e6bf78r		; 0.0528976
	DQ	03faae3340ec7bb62r		; 0.0525147
	DQ	03faab101b7878da0r		; 0.0521317
	DQ	03faa7ecf24263631r		; 0.0517487
	DQ	03faa4c9c4c0caf21r		; 0.0513657
	DQ	03faa1a692f3af871r		; 0.0509827
	DQ	03fa9e835d6481814r		; 0.0505997
	DQ	03fa9b602389d0817r		; 0.0502167
	DQ	03fa983ce5ed0ce6dr		; 0.0498337
	DQ	03fa9519a48e36b16r		; 0.0494507
	DQ	03fa91f65ee3dd81fr		; 0.0490677
	DQ	03fa8ed3157771b7cr		; 0.0486846
	DQ	03fa8bafc848f352br		; 0.0483016
	DQ	03fa888c77586252fr		; 0.0479185
	DQ	03fa856922a5beb86r		; 0.0475355
	DQ	03fa8245ca3108830r		; 0.0471524
	DQ	03fa7f226dfa3fb2er		; 0.0467693
	DQ	03fa7bff0e016447fr		; 0.0463863
	DQ	03fa78dbaa4676423r		; 0.0460032
	DQ	03fa75b842c975a1cr		; 0.0456201
	DQ	03fa7294d813d2c5br		; 0.045237
	DQ	03fa6f71699c1d4eer		; 0.0448539
	DQ	03fa6c4df7ebc59c9r		; 0.0444708
	DQ	03fa692a82795b4f7r		; 0.0440877
	DQ	03fa66070944de679r		; 0.0437045
	DQ	03fa62e38cd7bf442r		; 0.0433214
	DQ	03fa5fc00d31fde53r		; 0.0429383
	DQ	03fa5c9c89ca29eb7r		; 0.0425551
	DQ	03fa59790329b3b63r		; 0.042172
	DQ	03fa565579509b456r		; 0.0417888
	DQ	03fa5331ec3ee0991r		; 0.0414056
	DQ	03fa500e5b6b1351fr		; 0.0410225
	DQ	03fa4ceac7e8142e9r		; 0.0406393
	DQ	03fa49c7312c72cfbr		; 0.0402561
	DQ	03fa46a396aebed60r		; 0.0398729
	DQ	03fa437ff981d9000r		; 0.0394897
	DQ	03fa405c591c50ee8r		; 0.0391065
	DQ	03fa3d38b6079700cr		; 0.0387233
	DQ	03fa3a150f30ca783r		; 0.0383401
	DQ	03fa36f165aacc136r		; 0.0379569
	DQ	03fa33cdb9759bd24r		; 0.0375737
	DQ	03fa30aa097e58f66r		; 0.0371905
	DQ	03fa2d865761549d8r		; 0.0368072
	DQ	03fa2a62a20bae091r		; 0.036424
	DQ	03fa273ee97d65392r		; 0.0360407
	DQ	03fa241b2ec95aec2r		; 0.0356575
	DQ	03fa20f770dcae63ar		; 0.0352742
	DQ	03fa1dd3b040cffeer		; 0.034891
	DQ	03fa1aafec6c4f5e9r		; 0.0345077
	DQ	03fa178c26720d414r		; 0.0341244
	DQ	03fa14685dc89947ar		; 0.0337412
	DQ	03fa114491e683128r		; 0.0333579
	DQ	03fa0e20c3deab606r		; 0.0329746
	DQ	03fa0afcf327a1d1fr		; 0.0325913
	DQ	03fa07d91fc166674r		; 0.032208
	DQ	03fa04b54a35697f8r		; 0.0318247
	DQ	03fa01917170ca5c5r		; 0.0314414
	DQ	03f9fcdb2d0cd3781r		; 0.0310581
	DQ	03f9f69372ec8f3d8r		; 0.0306748
	DQ	03f9f04bb36de74a6r		; 0.0302915
	DQ	03f9ea03efa3bc5d4r		; 0.0299082
	DQ	03f9e3bc267b2db79r		; 0.0295248
	DQ	03f9dd7459071c17dr		; 0.0291415
	DQ	03f9d72c8634a6bf9r		; 0.0287582
	DQ	03f9d0e4af16ae6d4r		; 0.0283748
	DQ	03f9ca9cd4c013df6r		; 0.0279915
	DQ	03f9c454f50b15990r		; 0.0276081
	DQ	03f9be0d110a94589r		; 0.0272248
	DQ	03f9b7c527abaf5far		; 0.0268414
	DQ	03f9b17d3c2708e9ar		; 0.0264581
	DQ	03f9ab354b43febb1r		; 0.0260747
	DQ	03f9a4ed561571928r		; 0.0256914
	DQ	03f99ea55c9b616fer		; 0.025308
	DQ	03f9985d5fe8af11br		; 0.0249246
	DQ	03f992155eea79b98r		; 0.0245412
	DQ	03f98bcd5ab3a225dr		; 0.0241578
	DQ	03f98585523147981r		; 0.0237745
	DQ	03f97f3d45636a104r		; 0.0233911
	DQ	03f978f5355cea4cfr		; 0.0230077
	DQ	03f972ad221dc84e2r		; 0.0226243
	DQ	03f96c650a9323554r		; 0.0222409
	DQ	03f9661cefcfdc20dr		; 0.0218575
	DQ	03f95fd4d1d3f2b0er		; 0.0214741
	DQ	03f9598cb09f67057r		; 0.0210907
	DQ	03f953448b1f585ffr		; 0.0207073
	DQ	03f94cfc6379883d6r		; 0.0203238
	DQ	03f946b437883520dr		; 0.0199404
	DQ	03f9406c097120874r		; 0.019557
	DQ	03f93a23d82169b22r		; 0.0191736
	DQ	03f933dba39910a18r		; 0.0187902
	DQ	03f92d936bd815555r		; 0.0184067
	DQ	03f9274b30de77cdar		; 0.0180233
	DQ	03f92102f3bf18c8fr		; 0.0176399
	DQ	03f91abab3671788br		; 0.0172564
	DQ	03f9147270e954cb6r		; 0.016873
	DQ	03f90e2a2b32efd2ar		; 0.0164895
	DQ	03f907e1e356c95cdr		; 0.0161061
	DQ	03f90199984200ab7r		; 0.0157227
	DQ	03f8f6a2960eecfa3r		; 0.0153392
	DQ	03f8ea11f74e55a37r		; 0.0149558
	DQ	03f8dd81521c79d5ar		; 0.0145723
	DQ	03f8d0f0aac4dc8adr		; 0.0141888
	DQ	03f8c45ffcfbfac8fr		; 0.0138054
	DQ	03f8b7cf4d0d578a1r		; 0.0134219
	DQ	03f8ab3e96ad6fd41r		; 0.0130385
	DQ	03f89eaddc0205241r		; 0.012655
	DQ	03f8921d1f30d8f71r		; 0.0122715
	DQ	03f8858c5e1429d00r		; 0.0118881
	DQ	03f878fb98abf7aeer		; 0.0115046
	DQ	03f86c6acef84293cr		; 0.0111211
	DQ	03f85fda031ecbfbar		; 0.0107377
	DQ	03f8534932f9d2697r		; 0.0103542
	DQ	03f846b860af175a4r		; 0.00997071
	DQ	03f83a278a18d9510r		; 0.00958723
	DQ	03f82d96b15cd9cabr		; 0.00920375
	DQ	03f82105d455574a7r		; 0.00882028
	DQ	03f81474f528134d1r		; 0.00843679
	DQ	03f807e413d50dd2cr		; 0.00805331
	DQ	03f7f6a660b88db6dr		; 0.00766983
	DQ	03f7dd84912ff9d40r		; 0.00728634
	DQ	03f7c462c1a765f13r		; 0.00690286
	DQ	03f7ab40e987cc1a5r		; 0.00651937
	DQ	03f7921f0d1caf497r		; 0.00613588
	DQ	03f778fd30b192788r		; 0.0057524
	DQ	03f75fdb4ffaf2ad9r		; 0.00536891
	DQ	03f746b96af8cfe89r		; 0.00498542
	DQ	03f72d9781ab2a299r		; 0.00460193
	DQ	03f71475941201708r		; 0.00421843
	DQ	03f6f6a74cf1b16eer		; 0.00383494
	DQ	03f6c46371bf5ffccr		; 0.00345145
	DQ	03f6921f8df608969r		; 0.00306796
	DQ	03f65fdba195ab3c5r		; 0.00268446
	DQ	03f62d97b5354de20r		; 0.00230097
	DQ	03f5f6a791a9e10f8r		; 0.00191748
	DQ	03f5921fa7bb1a72cr		; 0.00153398
	DQ	03f52d97bdcc53d61r		; 0.00115048
	DQ	03f4921fa7bb1a72cr		; 0.00076699
	DQ	03f3921fa7bb1a72cr		; 0.000383495
	DQ	00000000000000000r		; 0
_DATA	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT
_IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ??_C@_06JBKGCNBB@Delete?$AA@
CONST	SEGMENT
??_C@_06JBKGCNBB@Delete?$AA@ DB 'Delete', 00H		; `string'
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?szDelete@ATL@@3QBDB
CONST	SEGMENT
?szDelete@ATL@@3QBDB DD FLAT:??_C@_06JBKGCNBB@Delete?$AA@ ; ATL::szDelete
CONST	ENDS
;	COMDAT ??_C@_08KAAPDIAN@NoRemove?$AA@
CONST	SEGMENT
??_C@_08KAAPDIAN@NoRemove?$AA@ DB 'NoRemove', 00H	; `string'
CONST	ENDS
;	COMDAT ?szNoRemove@ATL@@3QBDB
CONST	SEGMENT
?szNoRemove@ATL@@3QBDB DD FLAT:??_C@_08KAAPDIAN@NoRemove?$AA@ ; ATL::szNoRemove
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ??_C@_0M@DBGDLGLL@ForceRemove?$AA@
CONST	SEGMENT
??_C@_0M@DBGDLGLL@ForceRemove?$AA@ DB 'ForceRemove', 00H ; `string'
CONST	ENDS
;	COMDAT ?szForceRemove@ATL@@3QBDB
CONST	SEGMENT
?szForceRemove@ATL@@3QBDB DD FLAT:??_C@_0M@DBGDLGLL@ForceRemove?$AA@ ; ATL::szForceRemove
CONST	ENDS
;	COMDAT ??_C@_03LAIAPFCB@Val?$AA@
CONST	SEGMENT
??_C@_03LAIAPFCB@Val?$AA@ DB 'Val', 00H			; `string'
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?szValToken@ATL@@3QBDB
CONST	SEGMENT
?szValToken@ATL@@3QBDB DD FLAT:??_C@_03LAIAPFCB@Val?$AA@ ; ATL::szValToken
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B?$AA@
CONST	SEGMENT
??_C@_01HMGJMAIH@B?$AA@ DB 'B', 00H			; `string'
CONST	ENDS
;	COMDAT ?szBinaryVal@ATL@@3QBDB
CONST	SEGMENT
?szBinaryVal@ATL@@3QBDB DD FLAT:??_C@_01HMGJMAIH@B?$AA@	; ATL::szBinaryVal
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D?$AA@
CONST	SEGMENT
??_C@_01CKDDGHAB@D?$AA@ DB 'D', 00H			; `string'
CONST	ENDS
;	COMDAT ?szDwordVal@ATL@@3QBDB
CONST	SEGMENT
?szDwordVal@ATL@@3QBDB DD FLAT:??_C@_01CKDDGHAB@D?$AA@	; ATL::szDwordVal
CONST	ENDS
;	COMDAT ??_C@_01PLPBNMEI@M?$AA@
CONST	SEGMENT
??_C@_01PLPBNMEI@M?$AA@ DB 'M', 00H			; `string'
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindowLic
CONST	SEGMENT
_IID_IAxWinHostWindowLic DD 03935bda8H
	DW	04ed9H
	DW	0495cH
	DB	086H
	DB	050H
	DB	0e0H
	DB	01fH
	DB	0c1H
	DB	0e3H
	DB	08aH
	DB	04bH
CONST	ENDS
;	COMDAT ?multiszStringVal@ATL@@3QBDB
CONST	SEGMENT
?multiszStringVal@ATL@@3QBDB DD FLAT:??_C@_01PLPBNMEI@M?$AA@ ; ATL::multiszStringVal
CONST	ENDS
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT
??_C@_01CPLAODJH@S?$AA@ DB 'S', 00H			; `string'
CONST	ENDS
;	COMDAT ?szStringVal@ATL@@3QBDB
CONST	SEGMENT
?szStringVal@ATL@@3QBDB DD FLAT:??_C@_01CPLAODJH@S?$AA@	; ATL::szStringVal
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?chEquals@ATL@@3DB
CONST	SEGMENT
?chEquals@ATL@@3DB DB 03dH				; ATL::chEquals
CONST	ENDS
;	COMDAT ?chQuote@ATL@@3DB
CONST	SEGMENT
?chQuote@ATL@@3DB DB 027H				; ATL::chQuote
CONST	ENDS
;	COMDAT ?chLeftBracket@ATL@@3DB
CONST	SEGMENT
?chLeftBracket@ATL@@3DB DB 07bH				; ATL::chLeftBracket
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?chRightBracket@ATL@@3DB
CONST	SEGMENT
?chRightBracket@ATL@@3DB DB 07dH			; ATL::chRightBracket
CONST	ENDS
;	COMDAT ?chDirSep@ATL@@3DB
CONST	SEGMENT
?chDirSep@ATL@@3DB DB 05cH				; ATL::chDirSep
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY *>::pmField
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB DW 04006H	; ATL::CVarTypeInfo<tagCY *>::VT
CONST	ENDS
;	COMDAT ??_C@_05PDIKPLII@AppID?$AA@
CONST	SEGMENT
??_C@_05PDIKPLII@AppID?$AA@ DB 'AppID', 00H		; `string'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB DW 06H		; ATL::CVarTypeInfo<tagCY>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB DW 04009H	; ATL::CVarTypeInfo<IDispatch * *>::VT
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT
_IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ??_C@_05GIBEAPNE@CLSID?$AA@
CONST	SEGMENT
??_C@_05GIBEAPNE@CLSID?$AA@ DB 'CLSID', 00H		; `string'
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch *>::pmField
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB DW 09H	; ATL::CVarTypeInfo<IDispatch *>::VT
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT __GUID_0000010c_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_0000010c_0000_0000_c000_000000000046 DD 010cH
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB DW 0400dH	; ATL::CVarTypeInfo<IUnknown * *>::VT
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown *>::pmField
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB DW 0dH	; ATL::CVarTypeInfo<IUnknown *>::VT
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t * *>::pmField
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB DW 04008H		; ATL::CVarTypeInfo<wchar_t * *>::VT
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_W@ATL@@2GB DW 08H			; ATL::CVarTypeInfo<wchar_t *>::VT
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT __GUID_0002e012_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_0002e012_0000_0000_c000_000000000046 DD 02e012H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB DW 0400cH	; ATL::CVarTypeInfo<tagVARIANT *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ DD 08H ; ATL::CVarTypeInfo<double *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAN@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAN@ATL@@2GB DW 04005H		; ATL::CVarTypeInfo<double *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ DD 08H ; ATL::CVarTypeInfo<double>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@N@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@N@ATL@@2GB DW 05H			; ATL::CVarTypeInfo<double>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ DD 08H ; ATL::CVarTypeInfo<float *>::pmField
CONST	ENDS
;	COMDAT __GUID_00020400_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020400_0000_0000_c000_000000000046 DD 020400H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAM@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAM@ATL@@2GB DW 04004H		; ATL::CVarTypeInfo<float *>::VT
CONST	ENDS
;	COMDAT __GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
CONST	SEGMENT
__GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851 DD 0a6bc3ac0H
	DW	0dbaaH
	DW	011ceH
	DB	09dH
	DB	0e3H
	DB	00H
	DB	0aaH
	DB	00H
	DB	04bH
	DB	0b8H
	DB	051H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ DD 08H ; ATL::CVarTypeInfo<float>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@M@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@M@ATL@@2GB DW 04H			; ATL::CVarTypeInfo<float>::VT
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000000_0000_0000_c000_000000000046 DD 00H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_K@ATL@@2GB DW 04015H		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
CONST	ENDS
;	COMDAT ??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	SEGMENT
??_C@_07KJLOKDKB@TypeLib?$AA@ DB 'TypeLib', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KEKAJNJI@Software?$AA@
CONST	SEGMENT
??_C@_08KEKAJNJI@Software?$AA@ DB 'Software', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDHFNJBJ@SYSTEM?$AA@
CONST	SEGMENT
??_C@_06FDHFNJBJ@SYSTEM?$AA@ DB 'SYSTEM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LOPHEHKG@SECURITY?$AA@
CONST	SEGMENT
??_C@_08LOPHEHKG@SECURITY?$AA@ DB 'SECURITY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03DDIMFGBA@SAM?$AA@
CONST	SEGMENT
??_C@_03DDIMFGBA@SAM?$AA@ DB 'SAM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IHBFOLAC@Mime?$AA@
CONST	SEGMENT
??_C@_04IHBFOLAC@Mime?$AA@ DB 'Mime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPIOJEA@Hardware?$AA@
CONST	SEGMENT
??_C@_08PPIOJEA@Hardware?$AA@ DB 'Hardware', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JKPGEJCH@Interface?$AA@
CONST	SEGMENT
??_C@_09JKPGEJCH@Interface?$AA@ DB 'Interface', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PICKODJL@FileType?$AA@
CONST	SEGMENT
??_C@_08PICKODJL@FileType?$AA@ DB 'FileType', 00H	; `string'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64>::pmField
CONST	ENDS
;	COMDAT ??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
CONST	SEGMENT
??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@ DB 'Component Categories', 00H ; `string'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_K@ATL@@2GB DW 015H			; ATL::CVarTypeInfo<unsigned __int64>::VT
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_J@ATL@@2GB DW 04014H		; ATL::CVarTypeInfo<__int64 *>::VT
CONST	ENDS
;	COMDAT ___pobjMapEntryLast
ATL$__z	SEGMENT
___pobjMapEntryLast DD 00H
ATL$__z	ENDS
;	COMDAT ___pobjMapEntryFirst
ATL$__a	SEGMENT
___pobjMapEntryFirst DD 00H
ATL$__a	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_J@ATL@@2GB DW 014H			; ATL::CVarTypeInfo<__int64>::VT
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??1CComBSTR@ATL@@QAE@XZ				; ATL::CComBSTR::~CComBSTR
PUBLIC	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
PUBLIC	??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?glGetSine@@YANH@Z				; glGetSine
PUBLIC	?glGetCosine@@YANH@Z				; glGetCosine
PUBLIC	?glGetSinCos@@YAXPAM0H@Z			; glGetSinCos
PUBLIC	?glGetSinCos@@YAXPAN0H@Z			; glGetSinCos
PUBLIC	?CalculateArcTan@@YAHMM@Z			; CalculateArcTan
PUBLIC	?glCalculateAngle@@YAHMM@Z			; glCalculateAngle
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@46800000
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	__imp__SysFreeString@4:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@46800000
CONST	SEGMENT
__real@46800000 DD 046800000r			; 16384
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\math.cpp
_TEXT	SEGMENT
_sign_opp$ = -12					; size = 4
_sign_adj$ = -8						; size = 4
_angle$ = -4						; size = 4
_opposite$ = 8						; size = 4
_adjacent$ = 12						; size = 4
?glCalculateAngle@@YAHMM@Z PROC				; glCalculateAngle

; 253  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 254  :   GLint       sign_opp, sign_adj;
; 255  :   GLFixed0_14 angle;
; 256  :   
; 257  :   if (!opposite)	{

	movss	xmm0, DWORD PTR _opposite$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN15@glCalculat

; 258  :     if (adjacent < 0.0f) return (8192);	// 180 degree

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _adjacent$[ebp]
	jbe	SHORT $LN14@glCalculat
	mov	eax, 8192				; 00002000H
	jmp	$LN16@glCalculat
$LN14@glCalculat:

; 259  :     return(0);

	xor	eax, eax
	jmp	$LN16@glCalculat
$LN15@glCalculat:

; 260  :   }
; 261  :   if (!adjacent) {

	movss	xmm0, DWORD PTR _adjacent$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN13@glCalculat

; 262  :     if (opposite < 0.0f) return (12288);	// 270 degree

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _opposite$[ebp]
	jbe	SHORT $LN12@glCalculat
	mov	eax, 12288				; 00003000H
	jmp	$LN16@glCalculat
$LN12@glCalculat:

; 263  :     return(4096);						// 90 degree

	mov	eax, 4096				; 00001000H
	jmp	$LN16@glCalculat
$LN13@glCalculat:

; 264  :   }
; 265  :   if (opposite < 0.0f)	{

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _opposite$[ebp]
	jbe	SHORT $LN11@glCalculat

; 266  :     sign_opp = 1;

	mov	DWORD PTR _sign_opp$[ebp], 1

; 267  :     opposite = -opposite;

	movss	xmm0, DWORD PTR _opposite$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _opposite$[ebp], xmm0
	jmp	SHORT $LN10@glCalculat
$LN11@glCalculat:

; 268  :   }
; 269  :   else sign_opp = 0;

	mov	DWORD PTR _sign_opp$[ebp], 0
$LN10@glCalculat:

; 270  :   if (adjacent < 0.0f) {

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _adjacent$[ebp]
	jbe	SHORT $LN9@glCalculat

; 271  :     sign_adj = 1;

	mov	DWORD PTR _sign_adj$[ebp], 1

; 272  :     adjacent = -adjacent;

	movss	xmm0, DWORD PTR _adjacent$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _adjacent$[ebp], xmm0
	jmp	SHORT $LN8@glCalculat
$LN9@glCalculat:

; 273  :   }
; 274  :   else sign_adj = 0;

	mov	DWORD PTR _sign_adj$[ebp], 0
$LN8@glCalculat:

; 275  :   angle = CalculateArcTan (opposite, adjacent);

	push	ecx
	movss	xmm0, DWORD PTR _adjacent$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _opposite$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?CalculateArcTan@@YAHMM@Z		; CalculateArcTan
	add	esp, 8
	mov	DWORD PTR _angle$[ebp], eax

; 276  :   if (!angle)	{								// either 0 or 180

	cmp	DWORD PTR _angle$[ebp], 0
	jne	SHORT $LN7@glCalculat

; 277  :     if (sign_adj) return (8192);			// 180 degree

	cmp	DWORD PTR _sign_adj$[ebp], 0
	je	SHORT $LN6@glCalculat
	mov	eax, 8192				; 00002000H
	jmp	SHORT $LN16@glCalculat
$LN6@glCalculat:

; 278  :     return(0);

	xor	eax, eax
	jmp	SHORT $LN16@glCalculat
$LN7@glCalculat:

; 279  :   }
; 280  :   if (sign_opp) {								// quadrant 3 or 4

	cmp	DWORD PTR _sign_opp$[ebp], 0
	je	SHORT $LN5@glCalculat

; 281  :     if (sign_adj) angle += 8192;			// quadrant 3

	cmp	DWORD PTR _sign_adj$[ebp], 0
	je	SHORT $LN4@glCalculat
	mov	eax, DWORD PTR _angle$[ebp]
	add	eax, 8192				; 00002000H
	mov	DWORD PTR _angle$[ebp], eax
	jmp	SHORT $LN3@glCalculat
$LN4@glCalculat:

; 282  :     else angle = 16384 - angle;				// quadrant 4

	mov	ecx, 16384				; 00004000H
	sub	ecx, DWORD PTR _angle$[ebp]
	mov	DWORD PTR _angle$[ebp], ecx
$LN3@glCalculat:
	jmp	SHORT $LN1@glCalculat
$LN5@glCalculat:

; 283  :   }
; 284  :   else if (sign_adj) angle = 8192 - angle;	// quadrant 2

	cmp	DWORD PTR _sign_adj$[ebp], 0
	je	SHORT $LN1@glCalculat
	mov	edx, 8192				; 00002000H
	sub	edx, DWORD PTR _angle$[ebp]
	mov	DWORD PTR _angle$[ebp], edx
$LN1@glCalculat:

; 285  :   return (angle);								// quadrant 1

	mov	eax, DWORD PTR _angle$[ebp]
$LN16@glCalculat:

; 286  : }	/* glCalculateAngle */

	mov	esp, ebp
	pop	ebp
	ret	0
?glCalculateAngle@@YAHMM@Z ENDP				; glCalculateAngle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\math.cpp
_TEXT	SEGMENT
_angle$ = -4						; size = 4
_opposite$ = 8						; size = 4
_adjacent$ = 12						; size = 4
?CalculateArcTan@@YAHMM@Z PROC				; CalculateArcTan

; 206  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 207  :   GLFixed0_14	angle;
; 208  :   
; 209  :   if (opposite < adjacent)	{

	movss	xmm0, DWORD PTR _adjacent$[ebp]
	comiss	xmm0, DWORD PTR _opposite$[ebp]
	jbe	SHORT $LN2@CalculateA

; 210  :     angle = FloatToInt32((opposite * 16384.0f) / adjacent);

	movss	xmm0, DWORD PTR _opposite$[ebp]
	mulss	xmm0, DWORD PTR __real@46800000
	divss	xmm0, DWORD PTR _adjacent$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _angle$[ebp], eax

; 211  :     angle += (((16384-angle)*angle)/46080l);

	mov	eax, 16384				; 00004000H
	sub	eax, DWORD PTR _angle$[ebp]
	imul	eax, DWORD PTR _angle$[ebp]
	cdq
	mov	ecx, 46080				; 0000b400H
	idiv	ecx
	add	eax, DWORD PTR _angle$[ebp]
	mov	DWORD PTR _angle$[ebp], eax

; 212  :     angle >>= 3;

	mov	edx, DWORD PTR _angle$[ebp]
	sar	edx, 3
	mov	DWORD PTR _angle$[ebp], edx

; 213  :   }
; 214  :   else {

	jmp	SHORT $LN1@CalculateA
$LN2@CalculateA:

; 215  :     angle = FloatToInt32((adjacent * 16384.0f) / opposite);

	movss	xmm0, DWORD PTR _adjacent$[ebp]
	mulss	xmm0, DWORD PTR __real@46800000
	divss	xmm0, DWORD PTR _opposite$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _angle$[ebp], eax

; 216  :     angle += (((16384-angle)*angle)/46080l);

	mov	eax, 16384				; 00004000H
	sub	eax, DWORD PTR _angle$[ebp]
	imul	eax, DWORD PTR _angle$[ebp]
	cdq
	mov	ecx, 46080				; 0000b400H
	idiv	ecx
	add	eax, DWORD PTR _angle$[ebp]
	mov	DWORD PTR _angle$[ebp], eax

; 217  :     angle = 4096 - (angle >> 3);

	mov	edx, DWORD PTR _angle$[ebp]
	sar	edx, 3
	mov	eax, 4096				; 00001000H
	sub	eax, edx
	mov	DWORD PTR _angle$[ebp], eax
$LN1@CalculateA:

; 218  :   }
; 219  : 
; 220  :   return (angle);

	mov	eax, DWORD PTR _angle$[ebp]

; 221  : }	/* CalculateArcTan */

	mov	esp, ebp
	pop	ebp
	ret	0
?CalculateArcTan@@YAHMM@Z ENDP				; CalculateArcTan
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\math.cpp
_TEXT	SEGMENT
_sinOut$ = 8						; size = 4
_cosOut$ = 12						; size = 4
_angle$ = 16						; size = 4
?glGetSinCos@@YAXPAN0H@Z PROC				; glGetSinCos

; 90   : {

	push	ebp
	mov	ebp, esp

; 91   :   angle &= 0x3fff;

	mov	eax, DWORD PTR _angle$[ebp]
	and	eax, 16383				; 00003fffH
	mov	DWORD PTR _angle$[ebp], eax

; 92   :   if (angle & 0x1000) {

	mov	ecx, DWORD PTR _angle$[ebp]
	and	ecx, 4096				; 00001000H
	je	SHORT $LN6@glGetSinCo

; 93   :     // angle between 270-360
; 94   :     if (angle & 0x2000) {	

	mov	edx, DWORD PTR _angle$[ebp]
	and	edx, 8192				; 00002000H
	je	SHORT $LN5@glGetSinCo

; 95   :       *sinOut = -CosineTable[angle-0x3000];

	mov	eax, DWORD PTR _angle$[ebp]
	movsd	xmm0, QWORD PTR ?CosineTable@@3PANA[eax*8-98304]
	xorpd	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	mov	ecx, DWORD PTR _sinOut$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 96   :       *cosOut = CosineTable[0x4000-angle];

	mov	edx, 16384				; 00004000H
	sub	edx, DWORD PTR _angle$[ebp]
	mov	eax, DWORD PTR _cosOut$[ebp]
	movsd	xmm0, QWORD PTR ?CosineTable@@3PANA[edx*8]
	movsd	QWORD PTR [eax], xmm0

; 97   :     }
; 98   :     // angle between 90-180
; 99   :     else {

	jmp	SHORT $LN4@glGetSinCo
$LN5@glGetSinCo:

; 100  :       *sinOut = CosineTable[angle-0x1000];

	mov	ecx, DWORD PTR _sinOut$[ebp]
	mov	edx, DWORD PTR _angle$[ebp]
	movsd	xmm0, QWORD PTR ?CosineTable@@3PANA[edx*8-32768]
	movsd	QWORD PTR [ecx], xmm0

; 101  :       *cosOut = -CosineTable[0x2000-angle];

	mov	eax, 8192				; 00002000H
	sub	eax, DWORD PTR _angle$[ebp]
	movsd	xmm0, QWORD PTR ?CosineTable@@3PANA[eax*8]
	xorpd	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	mov	ecx, DWORD PTR _cosOut$[ebp]
	movsd	QWORD PTR [ecx], xmm0
$LN4@glGetSinCo:

; 102  :     }
; 103  :   }
; 104  :   else {

	jmp	SHORT $LN1@glGetSinCo
$LN6@glGetSinCo:

; 105  :     if (angle & 0x2000) {	

	mov	edx, DWORD PTR _angle$[ebp]
	and	edx, 8192				; 00002000H
	je	SHORT $LN2@glGetSinCo

; 106  :       // angle between 180-270
; 107  :       *sinOut = -CosineTable[0x3000-angle];

	mov	eax, 12288				; 00003000H
	sub	eax, DWORD PTR _angle$[ebp]
	movsd	xmm0, QWORD PTR ?CosineTable@@3PANA[eax*8]
	xorpd	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	mov	ecx, DWORD PTR _sinOut$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 108  :       *cosOut = -CosineTable[angle-0x2000];

	mov	edx, DWORD PTR _angle$[ebp]
	movsd	xmm0, QWORD PTR ?CosineTable@@3PANA[edx*8-65536]
	xorpd	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	mov	eax, DWORD PTR _cosOut$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 109  :     }
; 110  :     else {

	jmp	SHORT $LN1@glGetSinCo
$LN2@glGetSinCo:

; 111  :       // angle between 0-90
; 112  :       *sinOut = CosineTable[0x1000-angle];

	mov	ecx, 4096				; 00001000H
	sub	ecx, DWORD PTR _angle$[ebp]
	mov	edx, DWORD PTR _sinOut$[ebp]
	movsd	xmm0, QWORD PTR ?CosineTable@@3PANA[ecx*8]
	movsd	QWORD PTR [edx], xmm0

; 113  :       *cosOut = CosineTable[angle];

	mov	eax, DWORD PTR _cosOut$[ebp]
	mov	ecx, DWORD PTR _angle$[ebp]
	movsd	xmm0, QWORD PTR ?CosineTable@@3PANA[ecx*8]
	movsd	QWORD PTR [eax], xmm0
$LN1@glGetSinCo:

; 114  :     }
; 115  :   }
; 116  : }	/* glGetSinCos */

	pop	ebp
	ret	0
?glGetSinCos@@YAXPAN0H@Z ENDP				; glGetSinCos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\math.cpp
_TEXT	SEGMENT
_sinOut$ = 8						; size = 4
_cosOut$ = 12						; size = 4
_angle$ = 16						; size = 4
?glGetSinCos@@YAXPAM0H@Z PROC				; glGetSinCos

; 60   : {

	push	ebp
	mov	ebp, esp

; 61   :   angle &= 0x3fff;

	mov	eax, DWORD PTR _angle$[ebp]
	and	eax, 16383				; 00003fffH
	mov	DWORD PTR _angle$[ebp], eax

; 62   :   if (angle & 0x1000) {

	mov	ecx, DWORD PTR _angle$[ebp]
	and	ecx, 4096				; 00001000H
	je	SHORT $LN6@glGetSinCo

; 63   :     // angle between 270-360
; 64   :     if (angle & 0x2000) {	

	mov	edx, DWORD PTR _angle$[ebp]
	and	edx, 8192				; 00002000H
	je	SHORT $LN5@glGetSinCo

; 65   :       *sinOut = (GLfloat) -CosineTable[angle-0x3000];

	mov	eax, DWORD PTR _angle$[ebp]
	movsd	xmm0, QWORD PTR ?CosineTable@@3PANA[eax*8-98304]
	xorpd	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	cvtsd2ss xmm0, xmm0
	mov	ecx, DWORD PTR _sinOut$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 66   :       *cosOut = (GLfloat) CosineTable[0x4000-angle];

	mov	edx, 16384				; 00004000H
	sub	edx, DWORD PTR _angle$[ebp]
	cvtsd2ss xmm0, QWORD PTR ?CosineTable@@3PANA[edx*8]
	mov	eax, DWORD PTR _cosOut$[ebp]
	movss	DWORD PTR [eax], xmm0

; 67   :     }
; 68   :     // angle between 90-180
; 69   :     else {

	jmp	SHORT $LN4@glGetSinCo
$LN5@glGetSinCo:

; 70   :       *sinOut = (GLfloat) CosineTable[angle-0x1000];

	mov	ecx, DWORD PTR _angle$[ebp]
	cvtsd2ss xmm0, QWORD PTR ?CosineTable@@3PANA[ecx*8-32768]
	mov	edx, DWORD PTR _sinOut$[ebp]
	movss	DWORD PTR [edx], xmm0

; 71   :       *cosOut = (GLfloat) -CosineTable[0x2000-angle];

	mov	eax, 8192				; 00002000H
	sub	eax, DWORD PTR _angle$[ebp]
	movsd	xmm0, QWORD PTR ?CosineTable@@3PANA[eax*8]
	xorpd	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	cvtsd2ss xmm0, xmm0
	mov	ecx, DWORD PTR _cosOut$[ebp]
	movss	DWORD PTR [ecx], xmm0
$LN4@glGetSinCo:

; 72   :     }
; 73   :   }
; 74   :   else {

	jmp	SHORT $LN1@glGetSinCo
$LN6@glGetSinCo:

; 75   :     if (angle & 0x2000) {	

	mov	edx, DWORD PTR _angle$[ebp]
	and	edx, 8192				; 00002000H
	je	SHORT $LN2@glGetSinCo

; 76   :       // angle between 180-270
; 77   :       *sinOut = (GLfloat) -CosineTable[0x3000-angle];

	mov	eax, 12288				; 00003000H
	sub	eax, DWORD PTR _angle$[ebp]
	movsd	xmm0, QWORD PTR ?CosineTable@@3PANA[eax*8]
	xorpd	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	cvtsd2ss xmm0, xmm0
	mov	ecx, DWORD PTR _sinOut$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 78   :       *cosOut = (GLfloat) -CosineTable[angle-0x2000];

	mov	edx, DWORD PTR _angle$[ebp]
	movsd	xmm0, QWORD PTR ?CosineTable@@3PANA[edx*8-65536]
	xorpd	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _cosOut$[ebp]
	movss	DWORD PTR [eax], xmm0

; 79   :     }
; 80   :     else {

	jmp	SHORT $LN1@glGetSinCo
$LN2@glGetSinCo:

; 81   :       // angle between 0-90
; 82   :       *sinOut = (GLfloat) CosineTable[0x1000-angle];

	mov	ecx, 4096				; 00001000H
	sub	ecx, DWORD PTR _angle$[ebp]
	cvtsd2ss xmm0, QWORD PTR ?CosineTable@@3PANA[ecx*8]
	mov	edx, DWORD PTR _sinOut$[ebp]
	movss	DWORD PTR [edx], xmm0

; 83   :       *cosOut = (GLfloat) CosineTable[angle];

	mov	eax, DWORD PTR _angle$[ebp]
	cvtsd2ss xmm0, QWORD PTR ?CosineTable@@3PANA[eax*8]
	mov	ecx, DWORD PTR _cosOut$[ebp]
	movss	DWORD PTR [ecx], xmm0
$LN1@glGetSinCo:

; 84   :     }
; 85   :   }
; 86   : }

	pop	ebp
	ret	0
?glGetSinCos@@YAXPAM0H@Z ENDP				; glGetSinCos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\math.cpp
_TEXT	SEGMENT
tv131 = -16						; size = 8
tv93 = -8						; size = 8
_angle$ = 8						; size = 4
?glGetCosine@@YANH@Z PROC				; glGetCosine

; 150  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 151  :   angle &= 0x3fff;

	mov	eax, DWORD PTR _angle$[ebp]
	and	eax, 16383				; 00003fffH
	mov	DWORD PTR _angle$[ebp], eax

; 152  :   if (angle & 0x1000) {

	mov	ecx, DWORD PTR _angle$[ebp]
	and	ecx, 4096				; 00001000H
	je	SHORT $LN6@glGetCosin

; 153  :     // angle between 270-360
; 154  :     if (angle & 0x2000) {	

	mov	edx, DWORD PTR _angle$[ebp]
	and	edx, 8192				; 00002000H
	je	SHORT $LN5@glGetCosin

; 155  :       return CosineTable[0x4000-angle];

	mov	eax, 16384				; 00004000H
	sub	eax, DWORD PTR _angle$[ebp]
	fld	QWORD PTR ?CosineTable@@3PANA[eax*8]
	jmp	SHORT $LN1@glGetCosin

; 156  :     }
; 157  :     // angle between 90-180
; 158  :     else {

	jmp	SHORT $LN4@glGetCosin
$LN5@glGetCosin:

; 159  :       return -CosineTable[0x2000-angle];

	mov	ecx, 8192				; 00002000H
	sub	ecx, DWORD PTR _angle$[ebp]
	movsd	xmm0, QWORD PTR ?CosineTable@@3PANA[ecx*8]
	xorpd	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	QWORD PTR tv93[ebp], xmm0
	fld	QWORD PTR tv93[ebp]
	jmp	SHORT $LN1@glGetCosin
$LN4@glGetCosin:

; 160  :     }
; 161  :   }
; 162  :   else {

	jmp	SHORT $LN1@glGetCosin
$LN6@glGetCosin:

; 163  :     if (angle & 0x2000) {	

	mov	edx, DWORD PTR _angle$[ebp]
	and	edx, 8192				; 00002000H
	je	SHORT $LN2@glGetCosin

; 164  :       // angle between 180-270
; 165  :       return -CosineTable[angle-0x2000];

	mov	eax, DWORD PTR _angle$[ebp]
	movsd	xmm0, QWORD PTR ?CosineTable@@3PANA[eax*8-65536]
	xorpd	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	QWORD PTR tv131[ebp], xmm0
	fld	QWORD PTR tv131[ebp]
	jmp	SHORT $LN1@glGetCosin

; 166  :     }
; 167  :     else {

	jmp	SHORT $LN1@glGetCosin
$LN2@glGetCosin:

; 168  :       // angle between 0-90
; 169  :       return CosineTable[angle];

	mov	ecx, DWORD PTR _angle$[ebp]
	fld	QWORD PTR ?CosineTable@@3PANA[ecx*8]
$LN1@glGetCosin:

; 170  :     }
; 171  :   }
; 172  : }	/* glGetCosine */

	mov	esp, ebp
	pop	ebp
	ret	0
?glGetCosine@@YANH@Z ENDP				; glGetCosine
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\3dlib\math.cpp
_TEXT	SEGMENT
tv132 = -16						; size = 8
tv92 = -8						; size = 8
_angle$ = 8						; size = 4
?glGetSine@@YANH@Z PROC					; glGetSine

; 122  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 123  :   angle &= 0x3fff;

	mov	eax, DWORD PTR _angle$[ebp]
	and	eax, 16383				; 00003fffH
	mov	DWORD PTR _angle$[ebp], eax

; 124  :   if (angle & 0x1000) {

	mov	ecx, DWORD PTR _angle$[ebp]
	and	ecx, 4096				; 00001000H
	je	SHORT $LN6@glGetSine

; 125  :     // angle between 270-360
; 126  :     if (angle & 0x2000) {	

	mov	edx, DWORD PTR _angle$[ebp]
	and	edx, 8192				; 00002000H
	je	SHORT $LN5@glGetSine

; 127  :       return -CosineTable[angle-0x3000];

	mov	eax, DWORD PTR _angle$[ebp]
	movsd	xmm0, QWORD PTR ?CosineTable@@3PANA[eax*8-98304]
	xorpd	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	QWORD PTR tv92[ebp], xmm0
	fld	QWORD PTR tv92[ebp]
	jmp	SHORT $LN1@glGetSine

; 128  :     }
; 129  :     // angle between 90-180
; 130  :     else {

	jmp	SHORT $LN4@glGetSine
$LN5@glGetSine:

; 131  :       return CosineTable[angle-0x1000];

	mov	ecx, DWORD PTR _angle$[ebp]
	fld	QWORD PTR ?CosineTable@@3PANA[ecx*8-32768]
	jmp	SHORT $LN1@glGetSine
$LN4@glGetSine:

; 132  :     }
; 133  :   }
; 134  :   else {

	jmp	SHORT $LN1@glGetSine
$LN6@glGetSine:

; 135  :     if (angle & 0x2000) {	

	mov	edx, DWORD PTR _angle$[ebp]
	and	edx, 8192				; 00002000H
	je	SHORT $LN2@glGetSine

; 136  :       // angle between 180-270
; 137  :       return -CosineTable[0x3000-angle];

	mov	eax, 12288				; 00003000H
	sub	eax, DWORD PTR _angle$[ebp]
	movsd	xmm0, QWORD PTR ?CosineTable@@3PANA[eax*8]
	xorpd	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	QWORD PTR tv132[ebp], xmm0
	fld	QWORD PTR tv132[ebp]
	jmp	SHORT $LN1@glGetSine

; 138  :     }
; 139  :     else {

	jmp	SHORT $LN1@glGetSine
$LN2@glGetSine:

; 140  :       // angle between 0-90
; 141  :       return CosineTable[0x1000-angle];

	mov	ecx, 4096				; 00001000H
	sub	ecx, DWORD PTR _angle$[ebp]
	fld	QWORD PTR ?CosineTable@@3PANA[ecx*8]
$LN1@glGetSine:

; 142  :     }
; 143  :   }
; 144  : }	/* glGetSine */

	mov	esp, ebp
	pop	ebp
	ret	0
?glGetSine@@YANH@Z ENDP					; glGetSine
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z PROC	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ENDP	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ PROC	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CComBSTR@ATL@@QAE@XZ			; ATL::CComBSTR::~CComBSTR
	mov	esp, ebp
	pop	ebp
	ret	0
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ ENDP	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\atlmfc\include\atlcomcli.h
;	COMDAT ??1CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CComBSTR@ATL@@QAE@XZ PROC				; ATL::CComBSTR::~CComBSTR, COMDAT
; _this$ = ecx

; 1656 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1657 :     ::SysFreeString(m_str);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__SysFreeString@4

; 1658 : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1CComBSTR@ATL@@QAE@XZ ENDP				; ATL::CComBSTR::~CComBSTR
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Where$[ebp]
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
