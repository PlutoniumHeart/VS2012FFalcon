; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\Graphics\Terrain\Tmap.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_MaximumTheaterAltitude@@3MA			; g_MaximumTheaterAltitude
PUBLIC	?g_LargeTheater@@3_NA				; g_LargeTheater
PUBLIC	?FeetPerPost@@3MA				; FeetPerPost
PUBLIC	?g_LargeTerrainFormat@@3_NA			; g_LargeTerrainFormat
_BSS	SEGMENT
?g_MaximumTheaterAltitude@@3MA DD 01H DUP (?)		; g_MaximumTheaterAltitude
?g_LargeTheater@@3_NA DB 01H DUP (?)			; g_LargeTheater
	ALIGN	4

?FeetPerPost@@3MA DD 01H DUP (?)			; FeetPerPost
?g_LargeTerrainFormat@@3_NA DB 01H DUP (?)		; g_LargeTerrainFormat
_BSS	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
PUBLIC	?GetTextureLightingColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ; CTimeOfDay::GetTextureLightingColor
PUBLIC	??0PostFile@@QAE@XZ				; PostFile::PostFile
PUBLIC	??1PostFile@@QAE@XZ				; PostFile::~PostFile
PUBLIC	??0TLevel@@QAE@XZ				; TLevel::TLevel
PUBLIC	??1TLevel@@QAE@XZ				; TLevel::~TLevel
PUBLIC	??_ETLevel@@QAEPAXI@Z				; TLevel::`vector deleting destructor'
PUBLIC	??0TMap@@QAE@XZ					; TMap::TMap
PUBLIC	??1TMap@@QAE@XZ					; TMap::~TMap
PUBLIC	?Setup@TMap@@QAEHPBD@Z				; TMap::Setup
PUBLIC	?Cleanup@TMap@@QAEXXZ				; TMap::Cleanup
PUBLIC	?GetMEA@TMap@@QAEMMM@Z				; TMap::GetMEA
PUBLIC	?LoadMEAtable@TMap@@IAEXPBD@Z			; TMap::LoadMEAtable
PUBLIC	?LoadColorTable@TMap@@IAEXPAX@Z			; TMap::LoadColorTable
PUBLIC	?TimeUpdateCallback@TMap@@KAXPAX@Z		; TMap::TimeUpdateCallback
PUBLIC	?UpdateLighting@TMap@@IAEXXZ			; TMap::UpdateLighting
PUBLIC	?TheMap@@3VTMap@@A				; TheMap
PUBLIC	??_C@_0N@KMOOENJC@?2Theater?4map?$AA@		; `string'
PUBLIC	??_C@_0DA@ODIJOHBL@?$CFs?3?5?5Bad?5terrain?5header?5read?5?$CIfe@ ; `string'
PUBLIC	??_C@_0M@CFLADCE@Feb?518?52013?$AA@		; `string'
PUBLIC	??_C@_08HHOJNMPP@Tmap?4cpp?$AA@			; `string'
PUBLIC	??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0DD@EEAOJENP@?$CFs?3?5?5Bad?5terrain?5header?5read?5?$CIME@ ; `string'
PUBLIC	??_C@_0CG@BJEMNHLN@?$CFs?3?5?5Bad?5terrain?5header?5read?5?$CIle@ ; `string'
PUBLIC	??_C@_0DB@MIKKPPLN@?$CFs?3?5?5Bad?5terrain?5header?5read?5?$CIne@ ; `string'
PUBLIC	??_C@_0DA@CADMAEPM@?$CFs?3?5?5Bad?5terrain?5header?5read?5?$CIfa@ ; `string'
PUBLIC	??_C@_0CJ@EEMAKEHN@Failed?5to?5allocate?5memory?5for?5ma@ ; `string'
PUBLIC	??_C@_0CJ@KJMJLICM@?$CFs?3?5?5Bad?5terrain?5header?5read?5?9?5C@ ; `string'
PUBLIC	??_C@_0CL@IBDBGCBD@?$CFs?3?5?5Bad?5terrain?5header?5read?5?$CIco@ ; `string'
PUBLIC	??_C@_0N@PFMFALCC@?2Theater?4MEA?$AA@		; `string'
PUBLIC	??_C@_0CE@DKEJCPNO@?$CFs?3?5?5Bad?5MEA?5table?5read?5?9?5CD?5Err@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3e800000
PUBLIC	__real@3f000000
PUBLIC	__real@437f0000
PUBLIC	__real@463b8000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_exit:PROC
EXTRN	_strcpy:PROC
EXTRN	_strcat:PROC
EXTRN	__imp__ReadFile@20:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__FormatMessageA@28:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	_sprintf:PROC
EXTRN	?RegisterTimeUpdateCB@TimeManager@@QAEXP6AXPAX@Z0@Z:PROC ; TimeManager::RegisterTimeUpdateCB
EXTRN	?ReleaseTimeUpdateCB@TimeManager@@QAEXP6AXPAX@Z0@Z:PROC ; TimeManager::ReleaseTimeUpdateCB
EXTRN	?WaitForLoader@Loader@@QAEXXZ:PROC		; Loader::WaitForLoader
EXTRN	??0FileMemMap@@QAE@XZ:PROC			; FileMemMap::FileMemMap
EXTRN	??1FileMemMap@@QAE@XZ:PROC			; FileMemMap::~FileMemMap
EXTRN	?Setup@TLevel@@QAEXHHHPBD@Z:PROC		; TLevel::Setup
EXTRN	?Cleanup@TLevel@@QAEXXZ:PROC			; TLevel::Cleanup
EXTRN	?CreateFile_Open@@YAPAXPADKKPAU_SECURITY_ATTRIBUTES@@KKPAX@Z:PROC ; CreateFile_Open
EXTRN	?SetLatLong@@YAXMM@Z:PROC			; SetLatLong
EXTRN	?ResetLatLong@@YAXXZ:PROC			; ResetLatLong
EXTRN	?GetLatLong@@YAXPAM0@Z:PROC			; GetLatLong
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__chkstk:PROC
EXTRN	_memset:PROC
EXTRN	?TheTimeManager@@3VTimeManager@@A:BYTE		; TheTimeManager
EXTRN	?TheTimeOfDay@@3VCTimeOfDay@@A:BYTE		; TheTimeOfDay
EXTRN	?TheLoader@@3VLoader@@A:BYTE			; TheLoader
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
	ALIGN	4

?TheMap@@3VTMap@@A DB 03028H DUP (?)			; TheMap
_BSS	ENDS
CRT$XCU	SEGMENT
_TheMap$initializer$ DD FLAT:??__ETheMap@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@463b8000
CONST	SEGMENT
__real@463b8000 DD 0463b8000r			; 12000
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_0CE@DKEJCPNO@?$CFs?3?5?5Bad?5MEA?5table?5read?5?9?5CD?5Err@
CONST	SEGMENT
??_C@_0CE@DKEJCPNO@?$CFs?3?5?5Bad?5MEA?5table?5read?5?9?5CD?5Err@ DB '%s:'
	DB	'  Bad MEA table read - CD Error?', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PFMFALCC@?2Theater?4MEA?$AA@
CONST	SEGMENT
??_C@_0N@PFMFALCC@?2Theater?4MEA?$AA@ DB '\Theater.MEA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@IBDBGCBD@?$CFs?3?5?5Bad?5terrain?5header?5read?5?$CIco@
CONST	SEGMENT
??_C@_0CL@IBDBGCBD@?$CFs?3?5?5Bad?5terrain?5header?5read?5?$CIco@ DB '%s:'
	DB	'  Bad terrain header read (color table)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@KJMJLICM@?$CFs?3?5?5Bad?5terrain?5header?5read?5?9?5C@
CONST	SEGMENT
??_C@_0CJ@KJMJLICM@?$CFs?3?5?5Bad?5terrain?5header?5read?5?9?5C@ DB '%s: '
	DB	' Bad terrain header read - CD Error?', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@EEMAKEHN@Failed?5to?5allocate?5memory?5for?5ma@
CONST	SEGMENT
??_C@_0CJ@EEMAKEHN@Failed?5to?5allocate?5memory?5for?5ma@ DB 'Failed to a'
	DB	'llocate memory for map levels', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@CADMAEPM@?$CFs?3?5?5Bad?5terrain?5header?5read?5?$CIfa@
CONST	SEGMENT
??_C@_0DA@CADMAEPM@?$CFs?3?5?5Bad?5terrain?5header?5read?5?$CIfa@ DB '%s:'
	DB	'  Bad terrain header read (far textured LOD)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@MIKKPPLN@?$CFs?3?5?5Bad?5terrain?5header?5read?5?$CIne@
CONST	SEGMENT
??_C@_0DB@MIKKPPLN@?$CFs?3?5?5Bad?5terrain?5header?5read?5?$CIne@ DB '%s:'
	DB	'  Bad terrain header read (near textured LOD)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@BJEMNHLN@?$CFs?3?5?5Bad?5terrain?5header?5read?5?$CIle@
CONST	SEGMENT
??_C@_0CG@BJEMNHLN@?$CFs?3?5?5Bad?5terrain?5header?5read?5?$CIle@ DB '%s:'
	DB	'  Bad terrain header read (levels)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@EEAOJENP@?$CFs?3?5?5Bad?5terrain?5header?5read?5?$CIME@
CONST	SEGMENT
??_C@_0DD@EEAOJENP@?$CFs?3?5?5Bad?5terrain?5header?5read?5?$CIME@ DB '%s:'
	DB	'  Bad terrain header read (MEAsize) - CD Error?', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@ DB 'Error:  %'
	DB	'0d  %s  %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08HHOJNMPP@Tmap?4cpp?$AA@
CONST	SEGMENT
??_C@_08HHOJNMPP@Tmap?4cpp?$AA@ DB 'Tmap.cpp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
CONST	SEGMENT
??_C@_0M@CFLADCE@Feb?518?52013?$AA@ DB 'Feb 18 2013', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@ODIJOHBL@?$CFs?3?5?5Bad?5terrain?5header?5read?5?$CIfe@
CONST	SEGMENT
??_C@_0DA@ODIJOHBL@?$CFs?3?5?5Bad?5terrain?5header?5read?5?$CIfe@ DB '%s:'
	DB	'  Bad terrain header read (feet) - CD Error?', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KMOOENJC@?2Theater?4map?$AA@
CONST	SEGMENT
??_C@_0N@KMOOENJC@?2Theater?4map?$AA@ DB '\Theater.map', 00H ; `string'
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$?Setup@TMap@@QAEHPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Setup@TMap@@QAEHPBD@Z$0
__ehfuncinfo$?Setup@TMap@@QAEHPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Setup@TMap@@QAEHPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__FTheMap@@YAXXZ
text$yd	SEGMENT
??__FTheMap@@YAXXZ PROC					; `dynamic atexit destructor for 'TheMap'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?TheMap@@3VTMap@@A		; TheMap
	call	??1TMap@@QAE@XZ				; TMap::~TMap
	pop	ebp
	ret	0
??__FTheMap@@YAXXZ ENDP					; `dynamic atexit destructor for 'TheMap''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\terrain\tmap.cpp
;	COMDAT ??__ETheMap@@YAXXZ
text$yc	SEGMENT
??__ETheMap@@YAXXZ PROC					; `dynamic initializer for 'TheMap'', COMDAT

; 16   : TMap	TheMap;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?TheMap@@3VTMap@@A		; TheMap
	call	??0TMap@@QAE@XZ				; TMap::TMap
	push	OFFSET ??__FTheMap@@YAXXZ		; `dynamic atexit destructor for 'TheMap''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__ETheMap@@YAXXZ ENDP					; `dynamic initializer for 'TheMap''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\terrain\tmap.cpp
_TEXT	SEGMENT
_end$ = -32						; size = 4
_this$ = -28						; size = 4
_dst$ = -24						; size = 4
_src$ = -20						; size = 4
_lightColor$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
?UpdateLighting@TMap@@IAEXXZ PROC			; TMap::UpdateLighting
; _this$ = ecx

; 347  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 348  : 	Tcolor	lightColor;
; 349  : 	Tcolor	*src, *dst, *end;
; 350  : 
; 351  : 	// Get the light level from the time of day manager
; 352  : 	TheTimeOfDay.GetTextureLightingColor( &lightColor );

	lea	eax, DWORD PTR _lightColor$[ebp]
	push	eax
	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetTextureLightingColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ; CTimeOfDay::GetTextureLightingColor

; 353  : 
; 354  : 	// Light the color table
; 355  : 	src = ColorTable;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR _src$[ebp], ecx

; 356  : 	dst = DarkColorTable;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 3072				; 00000c00H
	mov	DWORD PTR _dst$[ebp], edx

; 357  : 	end = ColorTable+256;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3072				; 00000c00H
	mov	DWORD PTR _end$[ebp], eax
$LN4@UpdateLigh:

; 358  : 	while (src < end) {

	mov	ecx, DWORD PTR _src$[ebp]
	cmp	ecx, DWORD PTR _end$[ebp]
	jae	SHORT $LN3@UpdateLigh

; 359  : 		dst->r = src->r * lightColor.r;

	mov	edx, DWORD PTR _src$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR _lightColor$[ebp]
	mov	eax, DWORD PTR _dst$[ebp]
	movss	DWORD PTR [eax], xmm0

; 360  : 		dst->g = src->g * lightColor.g;

	mov	ecx, DWORD PTR _src$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR _lightColor$[ebp+4]
	mov	edx, DWORD PTR _dst$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 361  : 		dst->b = src->b * lightColor.b;

	mov	eax, DWORD PTR _src$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _lightColor$[ebp+8]
	mov	ecx, DWORD PTR _dst$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 362  : 		src++;

	mov	edx, DWORD PTR _src$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _src$[ebp], edx

; 363  : 		dst++;

	mov	eax, DWORD PTR _dst$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _dst$[ebp], eax

; 364  : 	}

	jmp	SHORT $LN4@UpdateLigh
$LN3@UpdateLigh:

; 365  : 
; 366  : 	// Light the green table
; 367  : 	src = GreenTable;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 6144				; 00001800H
	mov	DWORD PTR _src$[ebp], ecx

; 368  : 	dst = DarkGreenTable;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 9216				; 00002400H
	mov	DWORD PTR _dst$[ebp], edx

; 369  : 	end = GreenTable+256;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 9216				; 00002400H
	mov	DWORD PTR _end$[ebp], eax
$LN2@UpdateLigh:

; 370  : 	while (src < end) {

	mov	ecx, DWORD PTR _src$[ebp]
	cmp	ecx, DWORD PTR _end$[ebp]
	jae	SHORT $LN1@UpdateLigh

; 371  : 		dst->g = src->g * lightColor.g;

	mov	edx, DWORD PTR _src$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR _lightColor$[ebp+4]
	mov	eax, DWORD PTR _dst$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 372  : 		src++;

	mov	ecx, DWORD PTR _src$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _src$[ebp], ecx

; 373  : 		dst++;

	mov	edx, DWORD PTR _dst$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _dst$[ebp], edx

; 374  : 	}

	jmp	SHORT $LN2@UpdateLigh
$LN1@UpdateLigh:

; 375  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateLighting@TMap@@IAEXXZ ENDP			; TMap::UpdateLighting
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\terrain\tmap.cpp
_TEXT	SEGMENT
_self$ = 8						; size = 4
?TimeUpdateCallback@TMap@@KAXPAX@Z PROC			; TMap::TimeUpdateCallback

; 343  : void TMap::TimeUpdateCallback( void *self ) {

	push	ebp
	mov	ebp, esp

; 344  : 	((TMap*)self)->UpdateLighting();

	mov	ecx, DWORD PTR _self$[ebp]
	call	?UpdateLighting@TMap@@IAEXXZ		; TMap::UpdateLighting

; 345  : }

	pop	ebp
	ret	0
?TimeUpdateCallback@TMap@@KAXPAX@Z ENDP			; TMap::TimeUpdateCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\terrain\tmap.cpp
_TEXT	SEGMENT
tv204 = -1872						; size = 8
tv193 = -1864						; size = 8
tv182 = -1856						; size = 8
_bytesRead$ = -1848					; size = 4
_retval$ = -1844					; size = 4
tv201 = -1840						; size = 4
tv190 = -1836						; size = 4
tv179 = -1832						; size = 4
_end$ = -1828						; size = 4
_packedSrc$ = -1824					; size = 4
_this$ = -1820						; size = 4
_src$ = -1816						; size = 4
_dst$ = -1812						; size = 4
_palette$ = -1808					; size = 1024
_buffer$1 = -784					; size = 580
_message$2 = -204					; size = 120
_string$3 = -84						; size = 80
__$ArrayPad$ = -4					; size = 4
_inputFile$ = 8						; size = 4
?LoadColorTable@TMap@@IAEXPAX@Z PROC			; TMap::LoadColorTable
; _this$ = ecx

; 230  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1872				; 00000750H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 231  : 	UInt32	bytesRead;
; 232  : 	BOOL	retval;
; 233  : 	UInt32	*packedSrc;
; 234  : 	Tcolor	*src, *dst, *end;
; 235  : 	UInt32	palette[256];
; 236  : 
; 237  : 	// Read the original color data
; 238  : 	retval = ReadFile( inputFile, palette, sizeof(palette), &bytesRead, NULL );

	push	0
	lea	eax, DWORD PTR _bytesRead$[ebp]
	push	eax
	push	1024					; 00000400H
	lea	ecx, DWORD PTR _palette$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inputFile$[ebp]
	push	edx
	call	DWORD PTR __imp__ReadFile@20
	mov	DWORD PTR _retval$[ebp], eax

; 239  : 	if (( !retval ) || ( bytesRead != sizeof(palette) )) {

	cmp	DWORD PTR _retval$[ebp], 0
	je	SHORT $LN5@LoadColorT
	cmp	DWORD PTR _bytesRead$[ebp], 1024	; 00000400H
	je	SHORT $LN6@LoadColorT
$LN5@LoadColorT:

; 240  : 		char	string[80];
; 241  : 		char	message[120];
; 242  : 		PutErrorString( string );

	push	0
	push	80					; 00000050H
	lea	eax, DWORD PTR _string$3[ebp]
	push	eax
	push	1024					; 00000400H
	call	DWORD PTR __imp__GetLastError@0
	push	eax
	push	0
	push	4096					; 00001000H
	call	DWORD PTR __imp__FormatMessageA@28

; 243  : 		sprintf( message, "%s:  Bad terrain header read (color table)", string );

	lea	ecx, DWORD PTR _string$3[ebp]
	push	ecx
	push	OFFSET ??_C@_0CL@IBDBGCBD@?$CFs?3?5?5Bad?5terrain?5header?5read?5?$CIco@
	lea	edx, DWORD PTR _message$2[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 244  : 		ShiError( message );

	push	OFFSET ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
	push	OFFSET ??_C@_08HHOJNMPP@Tmap?4cpp?$AA@
	push	244					; 000000f4H
	push	OFFSET ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
	lea	eax, DWORD PTR _buffer$1[ebp]
	push	eax
	call	_sprintf
	add	esp, 20					; 00000014H
	push	0
	lea	ecx, DWORD PTR _message$2[ebp]
	push	ecx
	lea	edx, DWORD PTR _buffer$1[ebp]
	push	edx
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	push	-1
	call	_exit
$LN6@LoadColorT:

; 245  : 	}
; 246  : 
; 247  : 	// Convert from 4 byte packed to floating format
; 248  : 	packedSrc = palette;

	lea	eax, DWORD PTR _palette$[ebp]
	mov	DWORD PTR _packedSrc$[ebp], eax

; 249  : 	dst = ColorTable;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR _dst$[ebp], ecx

; 250  : 	end = ColorTable+256;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 3072				; 00000c00H
	mov	DWORD PTR _end$[ebp], edx
$LN4@LoadColorT:

; 251  : 	while (dst < end) {

	mov	eax, DWORD PTR _dst$[ebp]
	cmp	eax, DWORD PTR _end$[ebp]
	jae	$LN3@LoadColorT

; 252  : 		dst->r = ((*packedSrc)       & 0xFF) / 255.0f;

	mov	ecx, DWORD PTR _packedSrc$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 255				; 000000ffH
	mov	DWORD PTR tv179[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv179[ebp]
	mov	eax, DWORD PTR tv179[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv182[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv182[ebp]
	divss	xmm0, DWORD PTR __real@437f0000
	mov	ecx, DWORD PTR _dst$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 253  : 		dst->g = ((*packedSrc >> 8)  & 0xFF) / 255.0f;

	mov	edx, DWORD PTR _packedSrc$[ebp]
	mov	eax, DWORD PTR [edx]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	DWORD PTR tv190[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv190[ebp]
	mov	ecx, DWORD PTR tv190[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv193[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv193[ebp]
	divss	xmm0, DWORD PTR __real@437f0000
	mov	edx, DWORD PTR _dst$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 254  : 		dst->b = ((*packedSrc >> 16) & 0xFF) / 255.0f;

	mov	eax, DWORD PTR _packedSrc$[ebp]
	mov	ecx, DWORD PTR [eax]
	shr	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	mov	DWORD PTR tv201[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv201[ebp]
	mov	edx, DWORD PTR tv201[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv204[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv204[ebp]
	divss	xmm0, DWORD PTR __real@437f0000
	mov	eax, DWORD PTR _dst$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 255  : 		packedSrc++;

	mov	ecx, DWORD PTR _packedSrc$[ebp]
	add	ecx, 4
	mov	DWORD PTR _packedSrc$[ebp], ecx

; 256  : 		dst++;

	mov	edx, DWORD PTR _dst$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _dst$[ebp], edx

; 257  : 	}

	jmp	$LN4@LoadColorT
$LN3@LoadColorT:

; 258  : 
; 259  : 	// Construct the green version
; 260  : 	src = ColorTable;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _src$[ebp], eax

; 261  : 	dst = GreenTable;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 6144				; 00001800H
	mov	DWORD PTR _dst$[ebp], ecx

; 262  : 	end = ColorTable+256;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 3072				; 00000c00H
	mov	DWORD PTR _end$[ebp], edx
$LN2@LoadColorT:

; 263  : 	while (src < end) {

	mov	eax, DWORD PTR _src$[ebp]
	cmp	eax, DWORD PTR _end$[ebp]
	jae	$LN1@LoadColorT

; 264  : 		dst->r = 0.0f;

	mov	ecx, DWORD PTR _dst$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx], xmm0

; 265  : 		dst->g = src->r*0.25f + src->g*0.5f + src->b*0.25f;

	mov	edx, DWORD PTR _src$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR __real@3e800000
	mov	eax, DWORD PTR _src$[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	mulss	xmm1, DWORD PTR __real@3f000000
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _src$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR __real@3e800000
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _dst$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 266  : 		dst->b = 0.0f;

	mov	eax, DWORD PTR _dst$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0

; 267  : 		src++;

	mov	ecx, DWORD PTR _src$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _src$[ebp], ecx

; 268  : 		dst++;

	mov	edx, DWORD PTR _dst$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _dst$[ebp], edx

; 269  : 	}

	jmp	$LN2@LoadColorT
$LN1@LoadColorT:
$LN7@LoadColorT:

; 270  : 
; 271  : 	// The lit versions will be created on the first time update callback...
; 272  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?LoadColorTable@TMap@@IAEXPAX@Z ENDP			; TMap::LoadColorTable
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\terrain\tmap.cpp
_TEXT	SEGMENT
_target$ = -1072					; size = 4
$T1 = -1068						; size = 4
_bytesRead$ = -1064					; size = 4
_retval$ = -1060					; size = 4
_dataFile$ = -1056					; size = 4
_row$ = -1052						; size = 4
_this$ = -1048						; size = 4
_buffer$2 = -1044					; size = 580
_filename$ = -464					; size = 260
_message$3 = -204					; size = 120
_string$4 = -84						; size = 80
__$ArrayPad$ = -4					; size = 4
_mapPath$ = 8						; size = 4
?LoadMEAtable@TMap@@IAEXPBD@Z PROC			; TMap::LoadMEAtable
; _this$ = ecx

; 276  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1072				; 00000430H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 277  : 	char	filename[MAX_PATH];
; 278  : 	HANDLE	dataFile;
; 279  : 	DWORD	bytesRead;
; 280  : 	BOOL	retval;
; 281  : 	Int16	*target;
; 282  : 	int		row;
; 283  : 
; 284  : 	
; 285  : 	// Constuct the storage for the array
; 286  : 	MEAarray = new Int16[ MEAwidth * MEAheight ];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12312]
	imul	eax, DWORD PTR [ecx+12316]
	xor	ecx, ecx
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [eax+12308], ecx

; 287  : 	ShiAssert( MEAarray );
; 288  : 
; 289  : 	// Open the MEA data file
; 290  : 	strcpy( filename, mapPath );

	mov	edx, DWORD PTR _mapPath$[ebp]
	push	edx
	lea	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8

; 291  : 	strcat( filename, "\\Theater.MEA" );

	push	OFFSET ??_C@_0N@PFMFALCC@?2Theater?4MEA?$AA@
	lea	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8

; 292  : 	dataFile = CreateFile_Open( filename, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL );

	push	0
	push	128					; 00000080H
	push	3
	push	0
	push	1
	push	-2147483648				; 80000000H
	lea	edx, DWORD PTR _filename$[ebp]
	push	edx
	call	?CreateFile_Open@@YAPAXPADKKPAU_SECURITY_ATTRIBUTES@@KKPAX@Z ; CreateFile_Open
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _dataFile$[ebp], eax

; 293  : 	if (dataFile == INVALID_HANDLE_VALUE) {
; 294  : 		//char	string[80];
; 295  : 		//char	message[120];
; 296  : 		//PutErrorString( string );
; 297  : 		//sprintf( message, "%s:  Couldn't open MEA table - disk error?", string );
; 298  : 		//int len = strlen( message );
; 299  : 		//ShiError( message );
; 300  : 		// We need to exit the game if they select cancel/abort from the file open dialog
; 301  : 	}
; 302  : 
; 303  : 
; 304  : 	// Read in the MEA data (vertical flip in the process)
; 305  : 	for (row=MEAheight-1; row>=0; row--) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12316]
	sub	ecx, 1
	mov	DWORD PTR _row$[ebp], ecx
	jmp	SHORT $LN5@LoadMEAtab
$LN4@LoadMEAtab:
	mov	edx, DWORD PTR _row$[ebp]
	sub	edx, 1
	mov	DWORD PTR _row$[ebp], edx
$LN5@LoadMEAtab:
	cmp	DWORD PTR _row$[ebp], 0
	jl	$LN3@LoadMEAtab

; 306  : 		target = &MEAarray[row*MEAwidth];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _row$[ebp]
	imul	ecx, DWORD PTR [eax+12312]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12308]
	lea	ecx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR _target$[ebp], ecx

; 307  : 		retval = ReadFile( dataFile, target, MEAwidth*sizeof(*MEAarray), &bytesRead, NULL );

	push	0
	lea	edx, DWORD PTR _bytesRead$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12312]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	mov	eax, DWORD PTR _dataFile$[ebp]
	push	eax
	call	DWORD PTR __imp__ReadFile@20
	mov	DWORD PTR _retval$[ebp], eax

; 308  : 		if (( !retval ) || ( bytesRead != MEAwidth*sizeof(*MEAarray) )) {

	cmp	DWORD PTR _retval$[ebp], 0
	je	SHORT $LN1@LoadMEAtab
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12312]
	shl	edx, 1
	cmp	DWORD PTR _bytesRead$[ebp], edx
	je	SHORT $LN2@LoadMEAtab
$LN1@LoadMEAtab:

; 309  : 			char	string[80];
; 310  : 			char	message[120];
; 311  : 			PutErrorString( string );

	push	0
	push	80					; 00000050H
	lea	eax, DWORD PTR _string$4[ebp]
	push	eax
	push	1024					; 00000400H
	call	DWORD PTR __imp__GetLastError@0
	push	eax
	push	0
	push	4096					; 00001000H
	call	DWORD PTR __imp__FormatMessageA@28

; 312  : 			sprintf( message, "%s:  Bad MEA table read - CD Error?", string );

	lea	ecx, DWORD PTR _string$4[ebp]
	push	ecx
	push	OFFSET ??_C@_0CE@DKEJCPNO@?$CFs?3?5?5Bad?5MEA?5table?5read?5?9?5CD?5Err@
	lea	edx, DWORD PTR _message$3[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 313  : 			ShiError( message );

	push	OFFSET ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
	push	OFFSET ??_C@_08HHOJNMPP@Tmap?4cpp?$AA@
	push	313					; 00000139H
	push	OFFSET ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
	lea	eax, DWORD PTR _buffer$2[ebp]
	push	eax
	call	_sprintf
	add	esp, 20					; 00000014H
	push	0
	lea	ecx, DWORD PTR _message$3[ebp]
	push	ecx
	lea	edx, DWORD PTR _buffer$2[ebp]
	push	edx
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	push	-1
	call	_exit
$LN2@LoadMEAtab:

; 314  : 		}
; 315  : 	}

	jmp	$LN4@LoadMEAtab
$LN3@LoadMEAtab:

; 316  : 
; 317  : 	// Close the input file
; 318  : 	CloseHandle( dataFile );

	mov	eax, DWORD PTR _dataFile$[ebp]
	push	eax
	call	DWORD PTR __imp__CloseHandle@4
$LN8@LoadMEAtab:

; 319  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?LoadMEAtable@TMap@@IAEXPBD@Z ENDP			; TMap::LoadMEAtable
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\terrain\tmap.cpp
_TEXT	SEGMENT
tv162 = -44						; size = 4
tv161 = -40						; size = 4
tv91 = -36						; size = 4
tv88 = -32						; size = 4
tv83 = -28						; size = 4
tv81 = -24						; size = 4
tv78 = -20						; size = 4
tv73 = -16						; size = 4
_c$ = -12						; size = 4
_r$ = -8						; size = 4
_this$ = -4						; size = 4
_FTnorth$ = 8						; size = 4
_FTeast$ = 12						; size = 4
?GetMEA@TMap@@QAEMMM@Z PROC				; TMap::GetMEA
; _this$ = ecx

; 323  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 324  : 	int r, c;
; 325  : 
; 326  : 
; 327  : 	ShiAssert( IsReady() );
; 328  : 
; 329  : 	// Convert to the units used by the MEA array
; 330  : 	r = FloatToInt32( FTnorth * FTtoMEAcell );

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _FTnorth$[ebp]
	mulss	xmm0, DWORD PTR [eax+12320]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _r$[ebp], eax

; 331  : 	c = FloatToInt32( FTeast  * FTtoMEAcell );

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _FTeast$[ebp]
	mulss	xmm0, DWORD PTR [ecx+12320]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _c$[ebp], eax

; 332  : 
; 333  : 	// Snap onto the map
; 334  : 	r = min( max( r, 0 ), MEAheight-1);

	cmp	DWORD PTR _r$[ebp], 0
	jle	SHORT $LN3@GetMEA
	mov	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR tv73[ebp], edx
	jmp	SHORT $LN4@GetMEA
$LN3@GetMEA:
	mov	DWORD PTR tv73[ebp], 0
$LN4@GetMEA:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12316]
	sub	ecx, 1
	cmp	DWORD PTR tv73[ebp], ecx
	jge	SHORT $LN7@GetMEA
	cmp	DWORD PTR _r$[ebp], 0
	jle	SHORT $LN5@GetMEA
	mov	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR tv78[ebp], edx
	jmp	SHORT $LN6@GetMEA
$LN5@GetMEA:
	mov	DWORD PTR tv78[ebp], 0
$LN6@GetMEA:
	mov	eax, DWORD PTR tv78[ebp]
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN8@GetMEA
$LN7@GetMEA:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12316]
	sub	edx, 1
	mov	DWORD PTR tv81[ebp], edx
$LN8@GetMEA:
	mov	eax, DWORD PTR tv81[ebp]
	mov	DWORD PTR _r$[ebp], eax

; 335  : 	c = min( max( c, 0 ), MEAwidth-1);

	cmp	DWORD PTR _c$[ebp], 0
	jle	SHORT $LN9@GetMEA
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR tv83[ebp], ecx
	jmp	SHORT $LN10@GetMEA
$LN9@GetMEA:
	mov	DWORD PTR tv83[ebp], 0
$LN10@GetMEA:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12312]
	sub	eax, 1
	cmp	DWORD PTR tv83[ebp], eax
	jge	SHORT $LN13@GetMEA
	cmp	DWORD PTR _c$[ebp], 0
	jle	SHORT $LN11@GetMEA
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR tv88[ebp], ecx
	jmp	SHORT $LN12@GetMEA
$LN11@GetMEA:
	mov	DWORD PTR tv88[ebp], 0
$LN12@GetMEA:
	mov	edx, DWORD PTR tv88[ebp]
	mov	DWORD PTR tv91[ebp], edx
	jmp	SHORT $LN14@GetMEA
$LN13@GetMEA:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12312]
	sub	ecx, 1
	mov	DWORD PTR tv91[ebp], ecx
$LN14@GetMEA:
	mov	edx, DWORD PTR tv91[ebp]
	mov	DWORD PTR _c$[ebp], edx

; 336  : 
; 337  : 	// Return the requested value
; 338  : 	return MEAarray[ r*MEAwidth + c ];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _r$[ebp]
	imul	ecx, DWORD PTR [eax+12312]
	add	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12308]
	movsx	ecx, WORD PTR [eax+ecx*2]
	mov	DWORD PTR tv161[ebp], ecx
	fild	DWORD PTR tv161[ebp]
	fstp	DWORD PTR tv162[ebp]
	fld	DWORD PTR tv162[ebp]

; 339  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetMEA@TMap@@QAEMMM@Z ENDP				; TMap::GetMEA
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\terrain\tmap.cpp
_TEXT	SEGMENT
$T1 = -24						; size = 4
tv86 = -20						; size = 4
$T2 = -16						; size = 4
tv74 = -12						; size = 4
$T3 = -8						; size = 4
_this$ = -4						; size = 4
?Cleanup@TMap@@QAEXXZ PROC				; TMap::Cleanup
; _this$ = ecx

; 204  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 205  : 	// Note that we're shutting down
; 206  : 	initialized = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12288], 0

; 207  : 
; 208  : 	// Stop receiving time updates
; 209  : 	TheTimeManager.ReleaseTimeUpdateCB( TimeUpdateCallback, this );

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	push	OFFSET ?TimeUpdateCallback@TMap@@KAXPAX@Z ; TMap::TimeUpdateCallback
	mov	ecx, OFFSET ?TheTimeManager@@3VTimeManager@@A ; TheTimeManager
	call	?ReleaseTimeUpdateCB@TimeManager@@QAEXP6AXPAX@Z0@Z ; TimeManager::ReleaseTimeUpdateCB

; 210  : 
; 211  : 	// Wait for the loader queue to be empty so it won't send us more data
; 212  : 	TheLoader.WaitForLoader();

	mov	ecx, OFFSET ?TheLoader@@3VLoader@@A	; TheLoader
	call	?WaitForLoader@Loader@@QAEXXZ		; Loader::WaitForLoader
$LN2@Cleanup:

; 213  : 
; 214  : 	// Cleanup each level of the map
; 215  : 	while (nLevels-- > 0) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12300]
	mov	DWORD PTR tv74[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12300]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12300], edx
	cmp	DWORD PTR tv74[ebp], 0
	jle	SHORT $LN1@Cleanup

; 216  : 		Levels[nLevels].Cleanup();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12300]
	imul	ecx, 68					; 00000044H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+12304]
	call	?Cleanup@TLevel@@QAEXXZ			; TLevel::Cleanup

; 217  : 	}

	jmp	SHORT $LN2@Cleanup
$LN1@Cleanup:

; 218  : 
; 219  : 	// Now release the memory used by the levels
; 220  : 	delete[] Levels;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12304]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T3[ebp], edx
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN5@Cleanup
	push	3
	mov	ecx, DWORD PTR $T3[ebp]
	call	??_ETLevel@@QAEPAXI@Z
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN6@Cleanup
$LN5@Cleanup:
	mov	DWORD PTR tv86[ebp], 0
$LN6@Cleanup:

; 221  : 	Levels = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12304], 0

; 222  : 
; 223  : 	// Free the rought height table (MEA)
; 224  : 	delete[] MEAarray;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12308]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 225  : 	MEAarray = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12308], 0

; 226  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Cleanup@TMap@@QAEXXZ ENDP				; TMap::Cleanup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\terrain\tmap.cpp
_TEXT	SEGMENT
_maxtheateralt$ = -5592					; size = 4
$T2 = -5588						; size = 4
tv301 = -5584						; size = 4
_height$ = -5580					; size = 4
_latitude$ = -5576					; size = 4
_longitude$ = -5572					; size = 4
_width$ = -5568						; size = 4
$T3 = -5564						; size = 4
$T4 = -5560						; size = 4
_i$ = -5556						; size = 4
_headerFile$ = -5552					; size = 4
_this$ = -5548						; size = 4
_retval$ = -5544					; size = 4
_bytesRead$ = -5540					; size = 4
_buffer$5 = -5536					; size = 580
_buffer$6 = -4956					; size = 580
_buffer$7 = -4376					; size = 580
_buffer$8 = -3796					; size = 580
_buffer$9 = -3216					; size = 580
_buffer$10 = -2636					; size = 580
_buffer$11 = -2056					; size = 580
_message$12 = -1476					; size = 120
_message$13 = -1356					; size = 120
_message$14 = -1236					; size = 120
_message$15 = -1116					; size = 120
_message$16 = -996					; size = 120
_message$17 = -876					; size = 120
_filename$ = -756					; size = 260
_string$18 = -496					; size = 80
_string$19 = -416					; size = 80
_string$20 = -336					; size = 80
_string$21 = -256					; size = 80
_string$22 = -176					; size = 80
_string$23 = -96					; size = 80
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_mapPath$ = 8						; size = 4
?Setup@TMap@@QAEHPBD@Z PROC				; TMap::Setup
; _this$ = ecx

; 31   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Setup@TMap@@QAEHPBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, 5580				; 000015ccH
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 32   : 	int		i=0;

	mov	DWORD PTR _i$[ebp], 0

; 33   : 	int		width=0, height=0;

	mov	DWORD PTR _width$[ebp], 0
	mov	DWORD PTR _height$[ebp], 0

; 34   : 	char	filename[MAX_PATH]={0};

	mov	BYTE PTR _filename$[ebp], 0
	push	259					; 00000103H
	push	0
	lea	eax, DWORD PTR _filename$[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 35   : 	HANDLE	headerFile=0;

	mov	DWORD PTR _headerFile$[ebp], 0

; 36   : 	DWORD	bytesRead=0;

	mov	DWORD PTR _bytesRead$[ebp], 0

; 37   : 	BOOL	retval=0;

	mov	DWORD PTR _retval$[ebp], 0

; 38   : 
; 39   : 
; 40   : 	// Construct the filename for the map description file and open it
; 41   : 	strcpy( filename, mapPath );

	mov	ecx, DWORD PTR _mapPath$[ebp]
	push	ecx
	lea	edx, DWORD PTR _filename$[ebp]
	push	edx
	call	_strcpy
	add	esp, 8

; 42   : 	strcat( filename, "\\Theater.map" );

	push	OFFSET ??_C@_0N@KMOOENJC@?2Theater?4map?$AA@
	lea	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_strcat
	add	esp, 8

; 43   : 	headerFile = CreateFile_Open( filename, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL );

	push	0
	push	128					; 00000080H
	push	3
	push	0
	push	1
	push	-2147483648				; 80000000H
	lea	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	call	?CreateFile_Open@@YAPAXPADKKPAU_SECURITY_ATTRIBUTES@@KKPAX@Z ; CreateFile_Open
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _headerFile$[ebp], eax

; 44   : 	if (headerFile == INVALID_HANDLE_VALUE) {

	cmp	DWORD PTR _headerFile$[ebp], -1
	jne	SHORT $LN29@Setup

; 45   : 		//char	string[80];
; 46   : 		//char	message[120];
; 47   : 		//PutErrorString( string );
; 48   : 		//sprintf( message, "%s:  Couldn't open terrain header - disk error?", string );
; 49   : 		//int len = strlen( message );
; 50   : 		//ShiError( message );
; 51   : 		// We need to exit the game if they select cancel/abort from the file open dialog
; 52   : 		return(0);

	xor	eax, eax
	jmp	$LN30@Setup
$LN29@Setup:

; 53   : 	}
; 54   : 
; 55   : 
; 56   : 	// Read the number of feet between the highest detail posts in this map
; 57   : 	retval = ReadFile( headerFile, &FeetPerPost, sizeof(FeetPerPost), &bytesRead, NULL );

	push	0
	lea	edx, DWORD PTR _bytesRead$[ebp]
	push	edx
	push	4
	push	OFFSET ?FeetPerPost@@3MA		; FeetPerPost
	mov	eax, DWORD PTR _headerFile$[ebp]
	push	eax
	call	DWORD PTR __imp__ReadFile@20
	mov	DWORD PTR _retval$[ebp], eax

; 58   : 	if (( !retval ) || ( bytesRead != sizeof(FeetPerPost) )) {

	cmp	DWORD PTR _retval$[ebp], 0
	je	SHORT $LN27@Setup
	cmp	DWORD PTR _bytesRead$[ebp], 4
	je	SHORT $LN28@Setup
$LN27@Setup:

; 59   : 		char	string[80];
; 60   : 		char	message[120];
; 61   : 		PutErrorString( string );

	push	0
	push	80					; 00000050H
	lea	ecx, DWORD PTR _string$20[ebp]
	push	ecx
	push	1024					; 00000400H
	call	DWORD PTR __imp__GetLastError@0
	push	eax
	push	0
	push	4096					; 00001000H
	call	DWORD PTR __imp__FormatMessageA@28

; 62   : 		sprintf( message, "%s:  Bad terrain header read (feet) - CD Error?", string );

	lea	edx, DWORD PTR _string$20[ebp]
	push	edx
	push	OFFSET ??_C@_0DA@ODIJOHBL@?$CFs?3?5?5Bad?5terrain?5header?5read?5?$CIfe@
	lea	eax, DWORD PTR _message$16[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 63   : 		ShiError( message );

	push	OFFSET ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
	push	OFFSET ??_C@_08HHOJNMPP@Tmap?4cpp?$AA@
	push	63					; 0000003fH
	push	OFFSET ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
	lea	ecx, DWORD PTR _buffer$11[ebp]
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H
	push	0
	lea	edx, DWORD PTR _message$16[ebp]
	push	edx
	lea	eax, DWORD PTR _buffer$11[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	push	-1
	call	_exit
$LN28@Setup:

; 64   : 	}
; 65   : 	ShiAssert( (FeetPerPost > 0.0f) && (FeetPerPost < 50000.0f) );		// 50,000 is arbitrary, just want to check reasonableness here.
; 66   : 
; 67   : 
; 68   : 	// Read the width and height of the MEA table
; 69   : 	retval = ReadFile( headerFile, &MEAwidth,    sizeof(MEAwidth),    &bytesRead, NULL );

	push	0
	lea	ecx, DWORD PTR _bytesRead$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12312				; 00003018H
	push	edx
	mov	eax, DWORD PTR _headerFile$[ebp]
	push	eax
	call	DWORD PTR __imp__ReadFile@20
	mov	DWORD PTR _retval$[ebp], eax

; 70   : 	retval = ReadFile( headerFile, &MEAheight,   sizeof(MEAheight),   &bytesRead, NULL );

	push	0
	lea	ecx, DWORD PTR _bytesRead$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12316				; 0000301cH
	push	edx
	mov	eax, DWORD PTR _headerFile$[ebp]
	push	eax
	call	DWORD PTR __imp__ReadFile@20
	mov	DWORD PTR _retval$[ebp], eax

; 71   : 	retval = ReadFile( headerFile, &FTtoMEAcell, sizeof(FTtoMEAcell), &bytesRead, NULL );

	push	0
	lea	ecx, DWORD PTR _bytesRead$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12320				; 00003020H
	push	edx
	mov	eax, DWORD PTR _headerFile$[ebp]
	push	eax
	call	DWORD PTR __imp__ReadFile@20
	mov	DWORD PTR _retval$[ebp], eax

; 72   : 	if (( !retval ) || ( bytesRead != sizeof(FTtoMEAcell) )) {

	cmp	DWORD PTR _retval$[ebp], 0
	je	SHORT $LN25@Setup
	cmp	DWORD PTR _bytesRead$[ebp], 4
	je	SHORT $LN26@Setup
$LN25@Setup:

; 73   : 		char	string[80];
; 74   : 		char	message[120];
; 75   : 		PutErrorString( string );

	push	0
	push	80					; 00000050H
	lea	ecx, DWORD PTR _string$21[ebp]
	push	ecx
	push	1024					; 00000400H
	call	DWORD PTR __imp__GetLastError@0
	push	eax
	push	0
	push	4096					; 00001000H
	call	DWORD PTR __imp__FormatMessageA@28

; 76   : 		sprintf( message, "%s:  Bad terrain header read (MEAsize) - CD Error?", string );

	lea	edx, DWORD PTR _string$21[ebp]
	push	edx
	push	OFFSET ??_C@_0DD@EEAOJENP@?$CFs?3?5?5Bad?5terrain?5header?5read?5?$CIME@
	lea	eax, DWORD PTR _message$12[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 77   : 		ShiError( message );

	push	OFFSET ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
	push	OFFSET ??_C@_08HHOJNMPP@Tmap?4cpp?$AA@
	push	77					; 0000004dH
	push	OFFSET ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
	lea	ecx, DWORD PTR _buffer$8[ebp]
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H
	push	0
	lea	edx, DWORD PTR _message$12[ebp]
	push	edx
	lea	eax, DWORD PTR _buffer$8[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	push	-1
	call	_exit
$LN26@Setup:

; 78   : 	}
; 79   : 
; 80   : 
; 81   : 	// Read the number of levels we have available from the map header file
; 82   : 	retval = ReadFile( headerFile, &nLevels, sizeof(nLevels), &bytesRead, NULL );

	push	0
	lea	ecx, DWORD PTR _bytesRead$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12300				; 0000300cH
	push	edx
	mov	eax, DWORD PTR _headerFile$[ebp]
	push	eax
	call	DWORD PTR __imp__ReadFile@20
	mov	DWORD PTR _retval$[ebp], eax

; 83   : 	if (( !retval ) || ( bytesRead != sizeof(nLevels) )) {

	cmp	DWORD PTR _retval$[ebp], 0
	je	SHORT $LN23@Setup
	cmp	DWORD PTR _bytesRead$[ebp], 4
	je	SHORT $LN24@Setup
$LN23@Setup:

; 84   : 		char	string[80];
; 85   : 		char	message[120];
; 86   : 		PutErrorString( string );

	push	0
	push	80					; 00000050H
	lea	ecx, DWORD PTR _string$23[ebp]
	push	ecx
	push	1024					; 00000400H
	call	DWORD PTR __imp__GetLastError@0
	push	eax
	push	0
	push	4096					; 00001000H
	call	DWORD PTR __imp__FormatMessageA@28

; 87   : 		sprintf( message, "%s:  Bad terrain header read (levels)", string );

	lea	edx, DWORD PTR _string$23[ebp]
	push	edx
	push	OFFSET ??_C@_0CG@BJEMNHLN@?$CFs?3?5?5Bad?5terrain?5header?5read?5?$CIle@
	lea	eax, DWORD PTR _message$13[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 88   : 		ShiError( message );

	push	OFFSET ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
	push	OFFSET ??_C@_08HHOJNMPP@Tmap?4cpp?$AA@
	push	88					; 00000058H
	push	OFFSET ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
	lea	ecx, DWORD PTR _buffer$10[ebp]
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H
	push	0
	lea	edx, DWORD PTR _message$13[ebp]
	push	edx
	lea	eax, DWORD PTR _buffer$10[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	push	-1
	call	_exit
$LN24@Setup:

; 89   : 	}
; 90   : 	ShiAssert( (nLevels > 0) && (nLevels < 9) );		// 9 is arbitrary, just want to check reasonableness here.
; 91   : 
; 92   : 
; 93   : 	// Read the number of the last level which has conventional textures applied
; 94   : 	retval = ReadFile( headerFile, &lastNearTexturedLOD, sizeof(lastNearTexturedLOD), &bytesRead, NULL );

	push	0
	lea	ecx, DWORD PTR _bytesRead$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12292				; 00003004H
	push	edx
	mov	eax, DWORD PTR _headerFile$[ebp]
	push	eax
	call	DWORD PTR __imp__ReadFile@20
	mov	DWORD PTR _retval$[ebp], eax

; 95   : 	if (( !retval ) || ( bytesRead != sizeof(lastNearTexturedLOD) )) {

	cmp	DWORD PTR _retval$[ebp], 0
	je	SHORT $LN21@Setup
	cmp	DWORD PTR _bytesRead$[ebp], 4
	je	SHORT $LN22@Setup
$LN21@Setup:

; 96   : 		char	string[80];
; 97   : 		char	message[120];
; 98   : 		PutErrorString( string );

	push	0
	push	80					; 00000050H
	lea	ecx, DWORD PTR _string$22[ebp]
	push	ecx
	push	1024					; 00000400H
	call	DWORD PTR __imp__GetLastError@0
	push	eax
	push	0
	push	4096					; 00001000H
	call	DWORD PTR __imp__FormatMessageA@28

; 99   : 		sprintf( message, "%s:  Bad terrain header read (near textured LOD)", string );

	lea	edx, DWORD PTR _string$22[ebp]
	push	edx
	push	OFFSET ??_C@_0DB@MIKKPPLN@?$CFs?3?5?5Bad?5terrain?5header?5read?5?$CIne@
	lea	eax, DWORD PTR _message$17[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 100  : 		ShiError( message );

	push	OFFSET ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
	push	OFFSET ??_C@_08HHOJNMPP@Tmap?4cpp?$AA@
	push	100					; 00000064H
	push	OFFSET ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
	lea	ecx, DWORD PTR _buffer$9[ebp]
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H
	push	0
	lea	edx, DWORD PTR _message$17[ebp]
	push	edx
	lea	eax, DWORD PTR _buffer$9[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	push	-1
	call	_exit
$LN22@Setup:

; 101  : 	}
; 102  : 	ShiAssert( (lastNearTexturedLOD >= 0) && (lastNearTexturedLOD < nLevels) );
; 103  : 
; 104  : 
; 105  : 	// Read the number of the last level which has far textures applied
; 106  : 	retval = ReadFile( headerFile, &lastFarTexturedLOD, sizeof(lastFarTexturedLOD), &bytesRead, NULL );

	push	0
	lea	ecx, DWORD PTR _bytesRead$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12296				; 00003008H
	push	edx
	mov	eax, DWORD PTR _headerFile$[ebp]
	push	eax
	call	DWORD PTR __imp__ReadFile@20
	mov	DWORD PTR _retval$[ebp], eax

; 107  : 	if (( !retval ) || ( bytesRead != sizeof(lastFarTexturedLOD) )) {

	cmp	DWORD PTR _retval$[ebp], 0
	je	SHORT $LN19@Setup
	cmp	DWORD PTR _bytesRead$[ebp], 4
	je	SHORT $LN20@Setup
$LN19@Setup:

; 108  : 		char	string[80];
; 109  : 		char	message[120];
; 110  : 		PutErrorString( string );

	push	0
	push	80					; 00000050H
	lea	ecx, DWORD PTR _string$18[ebp]
	push	ecx
	push	1024					; 00000400H
	call	DWORD PTR __imp__GetLastError@0
	push	eax
	push	0
	push	4096					; 00001000H
	call	DWORD PTR __imp__FormatMessageA@28

; 111  : 		sprintf( message, "%s:  Bad terrain header read (far textured LOD)", string );

	lea	edx, DWORD PTR _string$18[ebp]
	push	edx
	push	OFFSET ??_C@_0DA@CADMAEPM@?$CFs?3?5?5Bad?5terrain?5header?5read?5?$CIfa@
	lea	eax, DWORD PTR _message$15[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 112  : 		ShiError( message );

	push	OFFSET ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
	push	OFFSET ??_C@_08HHOJNMPP@Tmap?4cpp?$AA@
	push	112					; 00000070H
	push	OFFSET ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
	lea	ecx, DWORD PTR _buffer$7[ebp]
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H
	push	0
	lea	edx, DWORD PTR _message$15[ebp]
	push	edx
	lea	eax, DWORD PTR _buffer$7[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	push	-1
	call	_exit
$LN20@Setup:

; 113  : 	}
; 114  : 	ShiAssert( (lastFarTexturedLOD >= lastNearTexturedLOD) && (lastFarTexturedLOD < nLevels) );
; 115  : 
; 116  : 
; 117  : 	// Read the map's color table
; 118  : 	LoadColorTable( headerFile );

	mov	ecx, DWORD PTR _headerFile$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadColorTable@TMap@@IAEXPAX@Z		; TMap::LoadColorTable

; 119  : 
; 120  : 
; 121  : 	// Allocate memory for the map level objects
; 122  : 	Levels = new TLevel[ nLevels ];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12300]
	mov	DWORD PTR $T3[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T3[ebp]
	mov	edx, 68					; 00000044H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN32@Setup
	mov	ecx, DWORD PTR $T4[ebp]
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1TLevel@@QAE@XZ		; TLevel::~TLevel
	push	OFFSET ??0TLevel@@QAE@XZ		; TLevel::TLevel
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	push	68					; 00000044H
	mov	ecx, DWORD PTR $T4[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T4[ebp]
	add	edx, 4
	mov	DWORD PTR tv301[ebp], edx
	jmp	SHORT $LN33@Setup
$LN32@Setup:
	mov	DWORD PTR tv301[ebp], 0
$LN33@Setup:
	mov	eax, DWORD PTR tv301[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+12304], edx

; 123  : 	if (!Levels) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12304], 0
	jne	SHORT $LN18@Setup

; 124  : 		ShiError("Failed to allocate memory for map levels");

	push	OFFSET ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
	push	OFFSET ??_C@_08HHOJNMPP@Tmap?4cpp?$AA@
	push	124					; 0000007cH
	push	OFFSET ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
	lea	ecx, DWORD PTR _buffer$5[ebp]
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H
	push	0
	push	OFFSET ??_C@_0CJ@EEMAKEHN@Failed?5to?5allocate?5memory?5for?5ma@
	lea	edx, DWORD PTR _buffer$5[ebp]
	push	edx
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	push	-1
	call	_exit
$LN18@Setup:

; 125  : 	}
; 126  : 
; 127  : 
; 128  : 	// Setup each level of the map
; 129  : 	for (i=0; i<nLevels; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN17@Setup
$LN16@Setup:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN17@Setup:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+12300]
	jge	$LN15@Setup

; 130  : 
; 131  : 		// Read the width and height in blocks of this level
; 132  : 		retval = ReadFile( headerFile, &width, sizeof(width), &bytesRead, NULL );

	push	0
	lea	eax, DWORD PTR _bytesRead$[ebp]
	push	eax
	push	4
	lea	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _headerFile$[ebp]
	push	edx
	call	DWORD PTR __imp__ReadFile@20
	mov	DWORD PTR _retval$[ebp], eax

; 133  : 		if (( retval ) && ( bytesRead == sizeof(nLevels) )) {

	cmp	DWORD PTR _retval$[ebp], 0
	je	SHORT $LN14@Setup
	cmp	DWORD PTR _bytesRead$[ebp], 4
	jne	SHORT $LN14@Setup

; 134  : 			retval = ReadFile( headerFile, &height, sizeof(height), &bytesRead, NULL );

	push	0
	lea	eax, DWORD PTR _bytesRead$[ebp]
	push	eax
	push	4
	lea	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _headerFile$[ebp]
	push	edx
	call	DWORD PTR __imp__ReadFile@20
	mov	DWORD PTR _retval$[ebp], eax
$LN14@Setup:

; 135  : 		}
; 136  : 		if (( !retval ) || ( bytesRead != sizeof(nLevels) )) {

	cmp	DWORD PTR _retval$[ebp], 0
	je	SHORT $LN12@Setup
	cmp	DWORD PTR _bytesRead$[ebp], 4
	je	$LN13@Setup
$LN12@Setup:

; 137  : 			char	string[80];
; 138  : 			char	message[120];
; 139  : 			PutErrorString( string );

	push	0
	push	80					; 00000050H
	lea	eax, DWORD PTR _string$19[ebp]
	push	eax
	push	1024					; 00000400H
	call	DWORD PTR __imp__GetLastError@0
	push	eax
	push	0
	push	4096					; 00001000H
	call	DWORD PTR __imp__FormatMessageA@28

; 140  : 			sprintf( message, "%s:  Bad terrain header read - CD Error?", string );

	lea	ecx, DWORD PTR _string$19[ebp]
	push	ecx
	push	OFFSET ??_C@_0CJ@KJMJLICM@?$CFs?3?5?5Bad?5terrain?5header?5read?5?9?5C@
	lea	edx, DWORD PTR _message$14[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 141  : 			ShiError( message );

	push	OFFSET ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
	push	OFFSET ??_C@_08HHOJNMPP@Tmap?4cpp?$AA@
	push	141					; 0000008dH
	push	OFFSET ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
	lea	eax, DWORD PTR _buffer$6[ebp]
	push	eax
	call	_sprintf
	add	esp, 20					; 00000014H
	push	0
	lea	ecx, DWORD PTR _message$14[ebp]
	push	ecx
	lea	edx, DWORD PTR _buffer$6[ebp]
	push	edx
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	push	-1
	call	_exit
$LN13@Setup:

; 142  : 		}
; 143  : 		ShiAssert( (width  > 0) && (width  < 5000) );	// 1000 is arbitrary, just want to check reasonableness here.
; 144  : 		ShiAssert( (height > 0) && (height < 5000) );	// 1000 is arbitrary, just want to check reasonableness here.
; 145  : 
; 146  : 		// Setup the level
; 147  : 		Levels[i].Setup( i, width, height, mapPath );

	mov	eax, DWORD PTR _mapPath$[ebp]
	push	eax
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 68					; 00000044H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+12304]
	call	?Setup@TLevel@@QAEXHHHPBD@Z		; TLevel::Setup

; 148  : 	}

	jmp	$LN16@Setup
$LN15@Setup:

; 149  : 
; 150  : 	// extra stuff
; 151  : 	float latitude, longitude;
; 152  : 	retval = ReadFile( headerFile, &flags, sizeof(flags), &bytesRead, NULL );

	push	0
	lea	eax, DWORD PTR _bytesRead$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12324				; 00003024H
	push	ecx
	mov	edx, DWORD PTR _headerFile$[ebp]
	push	edx
	call	DWORD PTR __imp__ReadFile@20
	mov	DWORD PTR _retval$[ebp], eax

; 153  : 	if (!retval  || bytesRead != sizeof(flags)) {

	cmp	DWORD PTR _retval$[ebp], 0
	je	SHORT $LN10@Setup
	cmp	DWORD PTR _bytesRead$[ebp], 4
	je	SHORT $LN11@Setup
$LN10@Setup:

; 154  : 	    flags = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12324], 0

; 155  : 	    ResetLatLong();

	call	?ResetLatLong@@YAXXZ			; ResetLatLong

; 156  : 	}
; 157  : 	else {

	jmp	$LN7@Setup
$LN11@Setup:

; 158  : 	    retval = ReadFile( headerFile, &longitude, sizeof(longitude), &bytesRead, NULL );

	push	0
	lea	ecx, DWORD PTR _bytesRead$[ebp]
	push	ecx
	push	4
	lea	edx, DWORD PTR _longitude$[ebp]
	push	edx
	mov	eax, DWORD PTR _headerFile$[ebp]
	push	eax
	call	DWORD PTR __imp__ReadFile@20
	mov	DWORD PTR _retval$[ebp], eax

; 159  : 	    retval = ReadFile( headerFile, &latitude, sizeof(latitude), &bytesRead, NULL );

	push	0
	lea	ecx, DWORD PTR _bytesRead$[ebp]
	push	ecx
	push	4
	lea	edx, DWORD PTR _latitude$[ebp]
	push	edx
	mov	eax, DWORD PTR _headerFile$[ebp]
	push	eax
	call	DWORD PTR __imp__ReadFile@20
	mov	DWORD PTR _retval$[ebp], eax

; 160  : 	    if (retval && bytesRead == sizeof(latitude)) {

	cmp	DWORD PTR _retval$[ebp], 0
	je	SHORT $LN8@Setup
	cmp	DWORD PTR _bytesRead$[ebp], 4
	jne	SHORT $LN8@Setup

; 161  : 		SetLatLong (latitude, longitude);

	push	ecx
	movss	xmm0, DWORD PTR _longitude$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _latitude$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SetLatLong@@YAXMM@Z			; SetLatLong
	add	esp, 8

; 162  : 	    }
; 163  : 	    else

	jmp	SHORT $LN7@Setup
$LN8@Setup:

; 164  : 		ResetLatLong();

	call	?ResetLatLong@@YAXXZ			; ResetLatLong
$LN7@Setup:

; 165  : 	}
; 166  : 	GetLatLong(&latitude,&longitude);

	lea	ecx, DWORD PTR _longitude$[ebp]
	push	ecx
	lea	edx, DWORD PTR _latitude$[ebp]
	push	edx
	call	?GetLatLong@@YAXPAM0@Z			; GetLatLong
	add	esp, 8

; 167  : 	if (flags & TMAP_LARGETERRAIN) { // big indexes in use

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12324]
	and	ecx, 1
	je	SHORT $LN6@Setup

; 168  : 	    g_LargeTerrainFormat = true;

	mov	BYTE PTR ?g_LargeTerrainFormat@@3_NA, 1	; g_LargeTerrainFormat
	jmp	SHORT $LN5@Setup
$LN6@Setup:

; 169  : 	}
; 170  : 	else g_LargeTerrainFormat = false;

	mov	BYTE PTR ?g_LargeTerrainFormat@@3_NA, 0	; g_LargeTerrainFormat
$LN5@Setup:

; 171  : 	if (flags & TMAP_LARGEUIMAP) { // 128x128 theater

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12324]
	and	eax, 2
	je	SHORT $LN4@Setup

; 172  : 		g_LargeTheater = true;

	mov	BYTE PTR ?g_LargeTheater@@3_NA, 1	; g_LargeTheater
	jmp	SHORT $LN3@Setup
$LN4@Setup:

; 173  : 	}
; 174  : 	else g_LargeTheater = false;

	mov	BYTE PTR ?g_LargeTheater@@3_NA, 0	; g_LargeTheater
$LN3@Setup:

; 175  : 	
; 176  : 	float maxtheateralt;
; 177  : 	retval = ReadFile( headerFile, &maxtheateralt, sizeof(maxtheateralt), &bytesRead, NULL );

	push	0
	lea	ecx, DWORD PTR _bytesRead$[ebp]
	push	ecx
	push	4
	lea	edx, DWORD PTR _maxtheateralt$[ebp]
	push	edx
	mov	eax, DWORD PTR _headerFile$[ebp]
	push	eax
	call	DWORD PTR __imp__ReadFile@20
	mov	DWORD PTR _retval$[ebp], eax

; 178  : 	if (!retval  || bytesRead != sizeof(maxtheateralt)) {

	cmp	DWORD PTR _retval$[ebp], 0
	je	SHORT $LN1@Setup
	cmp	DWORD PTR _bytesRead$[ebp], 4
	je	SHORT $LN2@Setup
$LN1@Setup:

; 179  : 	    g_MaximumTheaterAltitude = 12000.0F;

	movss	xmm0, DWORD PTR __real@463b8000
	movss	DWORD PTR ?g_MaximumTheaterAltitude@@3MA, xmm0
$LN2@Setup:

; 180  : 	}
; 181  : 
; 182  : 	g_MaximumTheaterAltitude = -g_MaximumTheaterAltitude; // ZPos is negative

	movss	xmm0, DWORD PTR ?g_MaximumTheaterAltitude@@3MA
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR ?g_MaximumTheaterAltitude@@3MA, xmm0

; 183  : 
; 184  : 	// Close the map description file
; 185  : 	CloseHandle( headerFile );

	mov	ecx, DWORD PTR _headerFile$[ebp]
	push	ecx
	call	DWORD PTR __imp__CloseHandle@4

; 186  : 	
; 187  : 
; 188  : 	// Load the course height table
; 189  : 	LoadMEAtable( mapPath );

	mov	edx, DWORD PTR _mapPath$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadMEAtable@TMap@@IAEXPBD@Z		; TMap::LoadMEAtable

; 190  : 
; 191  : 
; 192  : 	// Initialize the lighting conditions and register for future time of day updates
; 193  : 	TimeUpdateCallback( this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?TimeUpdateCallback@TMap@@KAXPAX@Z	; TMap::TimeUpdateCallback
	add	esp, 4

; 194  : 	TheTimeManager.RegisterTimeUpdateCB( TimeUpdateCallback, this );

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	push	OFFSET ?TimeUpdateCallback@TMap@@KAXPAX@Z ; TMap::TimeUpdateCallback
	mov	ecx, OFFSET ?TheTimeManager@@3VTimeManager@@A ; TheTimeManager
	call	?RegisterTimeUpdateCB@TimeManager@@QAEXP6AXPAX@Z0@Z ; TimeManager::RegisterTimeUpdateCB

; 195  : 
; 196  : 
; 197  : 	// Now we're ready to run
; 198  : 	initialized = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12288], 1

; 199  : 	return nLevels;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12300]
$LN30@Setup:

; 200  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Setup@TMap@@QAEHPBD@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Setup@TMap@@QAEHPBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-5584]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Setup@TMap@@QAEHPBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Setup@TMap@@QAEHPBD@Z ENDP				; TMap::Setup
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tmap.h
;	COMDAT ??1TMap@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1TMap@@QAE@XZ PROC					; TMap::~TMap, COMDAT
; _this$ = ecx

; 24   : 	~TMap()	{ initialized = FALSE; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12288], 0
	mov	esp, ebp
	pop	ebp
	ret	0
??1TMap@@QAE@XZ ENDP					; TMap::~TMap
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tmap.h
;	COMDAT ??0TMap@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0TMap@@QAE@XZ PROC					; TMap::TMap, COMDAT
; _this$ = ecx

; 23   : 	TMap()	{ initialized = FALSE; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12288], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0TMap@@QAE@XZ ENDP					; TMap::TMap
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_ETLevel@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ETLevel@@QAEPAXI@Z PROC				; TLevel::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1TLevel@@QAE@XZ		; TLevel::~TLevel
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TLevel@@QAE@XZ			; TLevel::~TLevel
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_ETLevel@@QAEPAXI@Z ENDP				; TLevel::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tlevel.h
;	COMDAT ??1TLevel@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1TLevel@@QAE@XZ PROC					; TLevel::~TLevel, COMDAT
; _this$ = ecx

; 37   : 	~TLevel()	{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??1PostFile@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1TLevel@@QAE@XZ ENDP					; TLevel::~TLevel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tlevel.h
;	COMDAT ??0TLevel@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0TLevel@@QAE@XZ PROC					; TLevel::TLevel, COMDAT
; _this$ = ecx

; 36   : 	TLevel()	{ blocks = NULL; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0PostFile@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0TLevel@@QAE@XZ ENDP					; TLevel::TLevel
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1PostFile@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1PostFile@@QAE@XZ PROC				; PostFile::~PostFile, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileMemMap@@QAE@XZ			; FileMemMap::~FileMemMap
	mov	esp, ebp
	pop	ebp
	ret	0
??1PostFile@@QAE@XZ ENDP				; PostFile::~PostFile
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0PostFile@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0PostFile@@QAE@XZ PROC				; PostFile::PostFile, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FileMemMap@@QAE@XZ			; FileMemMap::FileMemMap
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0PostFile@@QAE@XZ ENDP				; PostFile::PostFile
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tod.h
;	COMDAT ?GetTextureLightingColor@CTimeOfDay@@QAEXPAUTcolor@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rgb$ = 8						; size = 4
?GetTextureLightingColor@CTimeOfDay@@QAEXPAUTcolor@@@Z PROC ; CTimeOfDay::GetTextureLightingColor, COMDAT
; _this$ = ecx

; 94   : 	void GetTextureLightingColor(Tcolor *rgb)	{ *rgb = TextureLighting; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 196				; 000000c4H
	mov	ecx, DWORD PTR _rgb$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?GetTextureLightingColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ENDP ; CTimeOfDay::GetTextureLightingColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
END
