; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\Graphics\Terrain\Tviewpnt.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
PUBLIC	_fabsf
PUBLIC	_floorf
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?floor@@YAMM@Z					; floor
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	??0Edge@@QAE@XZ					; Edge::Edge
PUBLIC	??1Edge@@QAE@XZ					; Edge::~Edge
PUBLIC	?SetupWithPoints@Edge@@QAEXMMMM@Z		; Edge::SetupWithPoints
PUBLIC	?Normalize@Edge@@QAEXXZ				; Edge::Normalize
PUBLIC	?DistanceFrom@Edge@@QAEMMM@Z			; Edge::DistanceFrom
PUBLIC	??0TBlockList@@QAE@XZ				; TBlockList::TBlockList
PUBLIC	??1TBlockList@@QAE@XZ				; TBlockList::~TBlockList
PUBLIC	?GetAvailablePostRange@TBlockList@@QAEHXZ	; TBlockList::GetAvailablePostRange
PUBLIC	?GetMaxZ@TBlockList@@QAEMXZ			; TBlockList::GetMaxZ
PUBLIC	?GetMinZ@TBlockList@@QAEMXZ			; TBlockList::GetMinZ
PUBLIC	??_ETBlockList@@QAEPAXI@Z			; TBlockList::`vector deleting destructor'
PUBLIC	?FTperPOST@TLevel@@QAEMXZ			; TLevel::FTperPOST
PUBLIC	?Level@TMap@@QAEPAVTLevel@@H@Z			; TMap::Level
PUBLIC	?LastNearTexLOD@TMap@@QAEHXZ			; TMap::LastNearTexLOD
PUBLIC	?Setup@TViewPoint@@QAEXHHPAM@Z			; TViewPoint::Setup
PUBLIC	?Cleanup@TViewPoint@@UAEXXZ			; TViewPoint::Cleanup
PUBLIC	?Update@TViewPoint@@QAEXPBUTpoint@@@Z		; TViewPoint::Update
PUBLIC	?GetTileID@TViewPoint@@QAEHHH@Z			; TViewPoint::GetTileID
PUBLIC	?GetPath@TViewPoint@@QAEHHHHPAUTpathFeature@@@Z	; TViewPoint::GetPath
PUBLIC	?GetArea@TViewPoint@@QAEHHHHPAUTareaFeature@@@Z	; TViewPoint::GetArea
PUBLIC	?GetAreaFloorAndCeiling@TViewPoint@@QAEXPAM0@Z	; TViewPoint::GetAreaFloorAndCeiling
PUBLIC	?GetGroundType@TViewPoint@@QAEHMM@Z		; TViewPoint::GetGroundType
PUBLIC	?GetGroundLevelApproximation@TViewPoint@@QAEMMM@Z ; TViewPoint::GetGroundLevelApproximation
PUBLIC	?GetGroundLevel@TViewPoint@@QAEMMMPAUTpoint@@PAH@Z ; TViewPoint::GetGroundLevel
PUBLIC	?UnderGround@TViewPoint@@QAEHPAUTpoint@@@Z	; TViewPoint::UnderGround
PUBLIC	?LineOfSight@TViewPoint@@QAEHPAUTpoint@@0@Z	; TViewPoint::LineOfSight
PUBLIC	?GroundIntersection@TViewPoint@@QAEHPAUTpoint@@0@Z ; TViewPoint::GroundIntersection
PUBLIC	?X@TViewPoint@@QAEMXZ				; TViewPoint::X
PUBLIC	?Y@TViewPoint@@QAEMXZ				; TViewPoint::Y
PUBLIC	?Z@TViewPoint@@QAEMXZ				; TViewPoint::Z
PUBLIC	?GetLODLevel@TViewPoint@@ABEHMM@Z		; TViewPoint::GetLODLevel
PUBLIC	?SingleLODLineOfSight@TViewPoint@@AAEHHHHHMMH@Z	; TViewPoint::SingleLODLineOfSight
PUBLIC	?TestVertex@TViewPoint@@AAEHHHMH@Z		; TViewPoint::TestVertex
PUBLIC	?TestEast@TViewPoint@@AAEHHHMH@Z		; TViewPoint::TestEast
PUBLIC	?TestNorth@TViewPoint@@AAEHHHMH@Z		; TViewPoint::TestNorth
PUBLIC	?TestWest@TViewPoint@@AAEHHHMH@Z		; TViewPoint::TestWest
PUBLIC	?TestSouth@TViewPoint@@AAEHHHMH@Z		; TViewPoint::TestSouth
PUBLIC	?horizontalEdgeTest@TViewPoint@@AAEHHHMMMH@Z	; TViewPoint::horizontalEdgeTest
PUBLIC	?verticalEdgeTest@TViewPoint@@AAEHHHMMMH@Z	; TViewPoint::verticalEdgeTest
PUBLIC	?LineSquareIntersection@TViewPoint@@AAEXHHPAUTpoint@@0H@Z ; TViewPoint::LineSquareIntersection
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_C@_0M@CFLADCE@Feb?518?52013?$AA@		; `string'
PUBLIC	??_C@_0N@LBJMDIMK@Tviewpnt?4cpp?$AA@		; `string'
PUBLIC	??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0DB@HOJNNGJA@Failed?5memory?5allocation?5for?5vie@ ; `string'
PUBLIC	??_C@_0DB@OGJLPIAP@Failed?5memory?5allocation?5for?5vie@ ; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@392c987a
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@43fa0000
PUBLIC	__real@45bb8000
PUBLIC	__real@46bb8000
PUBLIC	__real@470ca000
PUBLIC	__real@49742400
PUBLIC	__real@4a5bba00
PUBLIC	__real@c9742400
PUBLIC	__real@d368d4a5
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_abs:PROC
EXTRN	_fabs:PROC
EXTRN	_floor:PROC
EXTRN	_exit:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__DeleteCriticalSection@4:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	_sprintf:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?GetPath@TextureDB@@QAEPAUTexPath@@KHH@Z:PROC	; TextureDB::GetPath
EXTRN	?GetArea@TextureDB@@QAEPAUTexArea@@KHH@Z:PROC	; TextureDB::GetArea
EXTRN	?GetTerrainType@TextureDB@@QAEEK@Z:PROC		; TextureDB::GetTerrainType
EXTRN	?Setup@TBlockList@@QAEXPAVTLevel@@M@Z:PROC	; TBlockList::Setup
EXTRN	?Cleanup@TBlockList@@QAEXXZ:PROC		; TBlockList::Cleanup
EXTRN	?RangeFromCenter@TBlockList@@QAEHHH@Z:PROC	; TBlockList::RangeFromCenter
EXTRN	?Update@TBlockList@@QAEXMM@Z:PROC		; TBlockList::Update
EXTRN	?GetPost@TBlockList@@QAEPAUTpost@@HH@Z:PROC	; TBlockList::GetPost
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?TheTerrTextures@@3VTextureDB@@A:BYTE		; TheTerrTextures
EXTRN	?FeetPerPost@@3MA:DWORD				; FeetPerPost
EXTRN	?TheMap@@3VTMap@@A:BYTE				; TheMap
EXTRN	?g_nLowDetailFactor@@3HA:DWORD			; g_nLowDetailFactor
EXTRN	?g_fTexDetailFactor@@3MA:DWORD			; g_fTexDetailFactor
EXTRN	?g_bDisableHighFartiles@@3_NA:BYTE		; g_bDisableHighFartiles
EXTRN	?vuxGameTime@@3KA:DWORD				; vuxGameTime
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?prevvuxGameTime@?1??Update@TViewPoint@@QAEXPBUTpoint@@@Z@4KA
_BSS	SEGMENT
?prevvuxGameTime@?1??Update@TViewPoint@@QAEXPBUTpoint@@@Z@4KA DD 01H DUP (?) ; `TViewPoint::Update'::`2'::prevvuxGameTime
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@d368d4a5
CONST	SEGMENT
__real@d368d4a5 DD 0d368d4a5r			; -1e+012
CONST	ENDS
;	COMDAT __real@c9742400
CONST	SEGMENT
__real@c9742400 DD 0c9742400r			; -1e+006
CONST	ENDS
;	COMDAT __real@4a5bba00
CONST	SEGMENT
__real@4a5bba00 DD 04a5bba00r			; 3.6e+006
CONST	ENDS
;	COMDAT __real@49742400
CONST	SEGMENT
__real@49742400 DD 049742400r			; 1e+006
CONST	ENDS
;	COMDAT __real@470ca000
CONST	SEGMENT
__real@470ca000 DD 0470ca000r			; 36000
CONST	ENDS
;	COMDAT __real@46bb8000
CONST	SEGMENT
__real@46bb8000 DD 046bb8000r			; 24000
CONST	ENDS
;	COMDAT __real@45bb8000
CONST	SEGMENT
__real@45bb8000 DD 045bb8000r			; 6000
CONST	ENDS
;	COMDAT __real@43fa0000
CONST	SEGMENT
__real@43fa0000 DD 043fa0000r			; 500
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@392c987a
CONST	SEGMENT
__real@392c987a DD 0392c987ar			; 0.0001646
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@OGJLPIAP@Failed?5memory?5allocation?5for?5vie@
CONST	SEGMENT
??_C@_0DB@OGJLPIAP@Failed?5memory?5allocation?5for?5vie@ DB 'Failed memor'
	DB	'y allocation for viewer''s block list', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@HOJNNGJA@Failed?5memory?5allocation?5for?5vie@
CONST	SEGMENT
??_C@_0DB@HOJNNGJA@Failed?5memory?5allocation?5for?5vie@ DB 'Failed memor'
	DB	'y allocation for viewer''s range list', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@ DB 'Error:  %'
	DB	'0d  %s  %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LBJMDIMK@Tviewpnt?4cpp?$AA@
CONST	SEGMENT
??_C@_0N@LBJMDIMK@Tviewpnt?4cpp?$AA@ DB 'Tviewpnt.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
CONST	SEGMENT
??_C@_0M@CFLADCE@Feb?518?52013?$AA@ DB 'Feb 18 2013', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?GetGroundType@TViewPoint@@QAEHMM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetGroundType@TViewPoint@@QAEHMM@Z$0
__unwindtable$?Setup@TViewPoint@@QAEXHHPAM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Setup@TViewPoint@@QAEXHHPAM@Z$0
__ehfuncinfo$?GetGroundType@TViewPoint@@QAEHMM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetGroundType@TViewPoint@@QAEHMM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Setup@TViewPoint@@QAEXHHPAM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Setup@TViewPoint@@QAEXHHPAM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\terrain\tviewpnt.cpp
_TEXT	SEGMENT
tv416 = -124						; size = 4
tv409 = -120						; size = 4
tv402 = -116						; size = 4
tv428 = -112						; size = 4
tv390 = -108						; size = 4
tv426 = -104						; size = 4
tv385 = -100						; size = 4
tv380 = -96						; size = 4
tv363 = -92						; size = 4
tv356 = -88						; size = 4
tv349 = -84						; size = 4
tv424 = -80						; size = 4
tv337 = -76						; size = 4
tv422 = -72						; size = 4
tv332 = -68						; size = 4
tv327 = -64						; size = 4
tv310 = -60						; size = 4
_SWz$ = -56						; size = 4
_SE$ = -52						; size = 4
_NE$ = -48						; size = 4
_NW$ = -44						; size = 4
_NdotDIR$ = -40						; size = 4
_PQdotN$ = -36						; size = 4
_SWy$ = -32						; size = 4
_SWx$ = -28						; size = 4
_SW$ = -24						; size = 4
_Nz$ = -20						; size = 4
_Ny$ = -16						; size = 4
_Nx$ = -12						; size = 4
_t$ = -8						; size = 4
_this$ = -4						; size = 4
_row$ = 8						; size = 4
_col$ = 12						; size = 4
_dir$ = 16						; size = 4
_intersection$ = 20					; size = 4
_LOD$ = 24						; size = 4
?LineSquareIntersection@TViewPoint@@AAEXHHPAUTpoint@@0H@Z PROC ; TViewPoint::LineSquareIntersection
; _this$ = ecx

; 1051 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
	mov	DWORD PTR _this$[ebp], ecx

; 1052 : 	Tpost	*SW, *NW, *NE, *SE;
; 1053 : 	float	Nx, Ny, Nz;
; 1054 : 	float	SWx, SWy, SWz;
; 1055 : 	float	PQdotN;
; 1056 : 	float	NdotDIR;
; 1057 : 	float	t;
; 1058 : 
; 1059 :  	// Get the posts which bound this square
; 1060 : 	SW = blockLists[LOD].GetPost( row,   col   );

	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _row$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _LOD$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	call	?GetPost@TBlockList@@QAEPAUTpost@@HH@Z	; TBlockList::GetPost
	mov	DWORD PTR _SW$[ebp], eax

; 1061 : 	NW = blockLists[LOD].GetPost( row+1, col   );

	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _row$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _LOD$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	call	?GetPost@TBlockList@@QAEPAUTpost@@HH@Z	; TBlockList::GetPost
	mov	DWORD PTR _NW$[ebp], eax

; 1062 : 	NE = blockLists[LOD].GetPost( row+1, col+1 );

	mov	eax, DWORD PTR _col$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _row$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _LOD$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	call	?GetPost@TBlockList@@QAEPAUTpost@@HH@Z	; TBlockList::GetPost
	mov	DWORD PTR _NE$[ebp], eax

; 1063 : 	SE = blockLists[LOD].GetPost( row,   col+1 );

	mov	eax, DWORD PTR _col$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _row$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _LOD$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	call	?GetPost@TBlockList@@QAEPAUTpost@@HH@Z	; TBlockList::GetPost
	mov	DWORD PTR _SE$[ebp], eax

; 1064 : 	ShiAssert( SW && NW && NE && SE );
; 1065 : 
; 1066 : 	// Store the world space location of the upper left and lower right corner posts
; 1067 : 	SWx = LEVEL_POST_TO_WORLD( row, LOD );

	mov	eax, DWORD PTR _row$[ebp]
	mov	ecx, DWORD PTR _LOD$[ebp]
	shl	eax, cl
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ?FeetPerPost@@3MA
	movss	DWORD PTR _SWx$[ebp], xmm0

; 1068 : 	SWy = LEVEL_POST_TO_WORLD( col, LOD );

	mov	edx, DWORD PTR _col$[ebp]
	mov	ecx, DWORD PTR _LOD$[ebp]
	shl	edx, cl
	cvtsi2ss xmm0, edx
	mulss	xmm0, DWORD PTR ?FeetPerPost@@3MA
	movss	DWORD PTR _SWy$[ebp], xmm0

; 1069 : 	SWz = SW->z;

	mov	eax, DWORD PTR _SW$[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _SWz$[ebp], xmm0

; 1070 : 
; 1071 : 	// Compute the normal from the three posts which bound the point of interest
; 1072 : 	// (don't forget - positive Z is DOWN)
; 1073 : 	Nz = -TheMap.Level(LOD)->FTperPOST();

	mov	ecx, DWORD PTR _LOD$[ebp]
	push	ecx
	mov	ecx, OFFSET ?TheMap@@3VTMap@@A		; TheMap
	call	?Level@TMap@@QAEPAVTLevel@@H@Z		; TMap::Level
	mov	ecx, eax
	call	?FTperPOST@TLevel@@QAEMXZ		; TLevel::FTperPOST
	fstp	DWORD PTR tv310[ebp]
	movss	xmm0, DWORD PTR tv310[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _Nz$[ebp], xmm0

; 1074 : 
; 1075 : 	// upper left triangle (remember positive Z is down)
; 1076 : 	Nx = NW->z - SW->z;

	mov	edx, DWORD PTR _NW$[ebp]
	mov	eax, DWORD PTR _SW$[ebp]
	movss	xmm0, DWORD PTR [edx]
	subss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _Nx$[ebp], xmm0

; 1077 : 	Ny = NE->z - NW->z;

	mov	ecx, DWORD PTR _NE$[ebp]
	mov	edx, DWORD PTR _NW$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR _Ny$[ebp], xmm0

; 1078 : 
; 1079 : 	// Only check the first triangle if it is front facing relative to the test ray
; 1080 : 	if ( Nx*dir->x + Ny*dir->y + Nz*dir->z < 0.0f ) {

	mov	eax, DWORD PTR _dir$[ebp]
	movss	xmm0, DWORD PTR _Nx$[ebp]
	mulss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _dir$[ebp]
	movss	xmm1, DWORD PTR _Ny$[ebp]
	mulss	xmm1, DWORD PTR [ecx+4]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _dir$[ebp]
	movss	xmm1, DWORD PTR _Nz$[ebp]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	$LN1@LineSquare

; 1081 : 
; 1082 : 		// Compute the intersection of the line with the plane
; 1083 : 		PQdotN = (SWx - X()) * Nx + (SWy - Y()) * Ny + (SWz - Z()) * Nz;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?X@TViewPoint@@QAEMXZ			; TViewPoint::X
	fstp	DWORD PTR tv327[ebp]
	movss	xmm0, DWORD PTR _SWx$[ebp]
	subss	xmm0, DWORD PTR tv327[ebp]
	mulss	xmm0, DWORD PTR _Nx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv422[ebp], xmm0
	call	?Y@TViewPoint@@QAEMXZ			; TViewPoint::Y
	fstp	DWORD PTR tv332[ebp]
	movss	xmm0, DWORD PTR _SWy$[ebp]
	subss	xmm0, DWORD PTR tv332[ebp]
	mulss	xmm0, DWORD PTR _Ny$[ebp]
	movss	xmm1, DWORD PTR tv422[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv424[ebp], xmm1
	call	?Z@TViewPoint@@QAEMXZ			; TViewPoint::Z
	fstp	DWORD PTR tv337[ebp]
	movss	xmm0, DWORD PTR _SWz$[ebp]
	subss	xmm0, DWORD PTR tv337[ebp]
	mulss	xmm0, DWORD PTR _Nz$[ebp]
	movss	xmm1, DWORD PTR tv424[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _PQdotN$[ebp], xmm1

; 1084 : 		NdotDIR = Nx * dir->x     + Ny * dir->y      + Nz * dir->z;

	mov	eax, DWORD PTR _dir$[ebp]
	movss	xmm0, DWORD PTR _Nx$[ebp]
	mulss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _dir$[ebp]
	movss	xmm1, DWORD PTR _Ny$[ebp]
	mulss	xmm1, DWORD PTR [ecx+4]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _dir$[ebp]
	movss	xmm1, DWORD PTR _Nz$[ebp]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _NdotDIR$[ebp], xmm0

; 1085 : 		t = PQdotN / NdotDIR;

	movss	xmm0, DWORD PTR _PQdotN$[ebp]
	divss	xmm0, DWORD PTR _NdotDIR$[ebp]
	movss	DWORD PTR _t$[ebp], xmm0

; 1086 : 
; 1087 : 		intersection->x = X() + t * dir->x;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?X@TViewPoint@@QAEMXZ			; TViewPoint::X
	fstp	DWORD PTR tv349[ebp]
	movss	xmm0, DWORD PTR tv349[ebp]
	mov	eax, DWORD PTR _dir$[ebp]
	movss	xmm1, DWORD PTR _t$[ebp]
	mulss	xmm1, DWORD PTR [eax]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _intersection$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 1088 : 		intersection->y = Y() + t * dir->y;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Y@TViewPoint@@QAEMXZ			; TViewPoint::Y
	fstp	DWORD PTR tv356[ebp]
	movss	xmm0, DWORD PTR tv356[ebp]
	mov	edx, DWORD PTR _dir$[ebp]
	movss	xmm1, DWORD PTR _t$[ebp]
	mulss	xmm1, DWORD PTR [edx+4]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _intersection$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 1089 : 		intersection->z = Z() + t * dir->z;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Z@TViewPoint@@QAEMXZ			; TViewPoint::Z
	fstp	DWORD PTR tv363[ebp]
	movss	xmm0, DWORD PTR tv363[ebp]
	mov	ecx, DWORD PTR _dir$[ebp]
	movss	xmm1, DWORD PTR _t$[ebp]
	mulss	xmm1, DWORD PTR [ecx+8]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _intersection$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 1090 : 
; 1091 : 		// Return now if the intersection is within the upper left half space
; 1092 : 		if ( (intersection->x-SWx) >= (intersection->y-SWy) ) {

	mov	eax, DWORD PTR _intersection$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR _SWx$[ebp]
	mov	ecx, DWORD PTR _intersection$[ebp]
	movss	xmm1, DWORD PTR [ecx+4]
	subss	xmm1, DWORD PTR _SWy$[ebp]
	comiss	xmm0, xmm1
	jb	SHORT $LN1@LineSquare

; 1093 : 			return;

	jmp	$LN3@LineSquare
$LN1@LineSquare:

; 1094 : 		}
; 1095 : 
; 1096 : 	}
; 1097 : 
; 1098 : 
; 1099 : 	// upper right triangle (remember positive Z is down)
; 1100 : 	Nx = NE->z - SE->z;

	mov	edx, DWORD PTR _NE$[ebp]
	mov	eax, DWORD PTR _SE$[ebp]
	movss	xmm0, DWORD PTR [edx]
	subss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _Nx$[ebp], xmm0

; 1101 : 	Ny = SE->z - SW->z;

	mov	ecx, DWORD PTR _SE$[ebp]
	mov	edx, DWORD PTR _SW$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR _Ny$[ebp], xmm0

; 1102 : 
; 1103 : 	// Compute the intersection of the line with the plane
; 1104 : 	PQdotN = (SWx - X()) * Nx + (SWy - Y()) * Ny + (SWz - Z()) * Nz;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?X@TViewPoint@@QAEMXZ			; TViewPoint::X
	fstp	DWORD PTR tv380[ebp]
	movss	xmm0, DWORD PTR _SWx$[ebp]
	subss	xmm0, DWORD PTR tv380[ebp]
	mulss	xmm0, DWORD PTR _Nx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv426[ebp], xmm0
	call	?Y@TViewPoint@@QAEMXZ			; TViewPoint::Y
	fstp	DWORD PTR tv385[ebp]
	movss	xmm0, DWORD PTR _SWy$[ebp]
	subss	xmm0, DWORD PTR tv385[ebp]
	mulss	xmm0, DWORD PTR _Ny$[ebp]
	movss	xmm1, DWORD PTR tv426[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv428[ebp], xmm1
	call	?Z@TViewPoint@@QAEMXZ			; TViewPoint::Z
	fstp	DWORD PTR tv390[ebp]
	movss	xmm0, DWORD PTR _SWz$[ebp]
	subss	xmm0, DWORD PTR tv390[ebp]
	mulss	xmm0, DWORD PTR _Nz$[ebp]
	movss	xmm1, DWORD PTR tv428[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _PQdotN$[ebp], xmm1

; 1105 : 	NdotDIR = Nx * dir->x     + Ny * dir->y      + Nz * dir->z;

	mov	eax, DWORD PTR _dir$[ebp]
	movss	xmm0, DWORD PTR _Nx$[ebp]
	mulss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _dir$[ebp]
	movss	xmm1, DWORD PTR _Ny$[ebp]
	mulss	xmm1, DWORD PTR [ecx+4]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _dir$[ebp]
	movss	xmm1, DWORD PTR _Nz$[ebp]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _NdotDIR$[ebp], xmm0

; 1106 : 	t = PQdotN / NdotDIR;

	movss	xmm0, DWORD PTR _PQdotN$[ebp]
	divss	xmm0, DWORD PTR _NdotDIR$[ebp]
	movss	DWORD PTR _t$[ebp], xmm0

; 1107 : 
; 1108 : 	intersection->x = X() + t * dir->x;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?X@TViewPoint@@QAEMXZ			; TViewPoint::X
	fstp	DWORD PTR tv402[ebp]
	movss	xmm0, DWORD PTR tv402[ebp]
	mov	eax, DWORD PTR _dir$[ebp]
	movss	xmm1, DWORD PTR _t$[ebp]
	mulss	xmm1, DWORD PTR [eax]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _intersection$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 1109 : 	intersection->y = Y() + t * dir->y;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Y@TViewPoint@@QAEMXZ			; TViewPoint::Y
	fstp	DWORD PTR tv409[ebp]
	movss	xmm0, DWORD PTR tv409[ebp]
	mov	edx, DWORD PTR _dir$[ebp]
	movss	xmm1, DWORD PTR _t$[ebp]
	mulss	xmm1, DWORD PTR [edx+4]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _intersection$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 1110 : 	intersection->z = Z() + t * dir->z;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Z@TViewPoint@@QAEMXZ			; TViewPoint::Z
	fstp	DWORD PTR tv416[ebp]
	movss	xmm0, DWORD PTR tv416[ebp]
	mov	ecx, DWORD PTR _dir$[ebp]
	movss	xmm1, DWORD PTR _t$[ebp]
	mulss	xmm1, DWORD PTR [ecx+8]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _intersection$[ebp]
	movss	DWORD PTR [edx+8], xmm0
$LN3@LineSquare:

; 1111 : 
; 1112 : 	// Make sure the intersection we found is within the lower right half space
; 1113 : 	// Rounding errors could make this assertion fail occasionally
; 1114 : //	ShiAssert( (intersection->x-SWx) <= (intersection->y-SWy) );
; 1115 : 
; 1116 : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?LineSquareIntersection@TViewPoint@@AAEXHHPAUTpoint@@0H@Z ENDP ; TViewPoint::LineSquareIntersection
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\terrain\tviewpnt.cpp
_TEXT	SEGMENT
_height$ = -28						; size = 4
_t$ = -24						; size = 4
_top$ = -20						; size = 4
tv146 = -16						; size = 4
tv128 = -12						; size = 4
_bottom$ = -8						; size = 4
_this$ = -4						; size = 4
_row$ = 8						; size = 4
_col$ = 12						; size = 4
_x$ = 16						; size = 4
___formal$ = 20						; size = 4
_z$ = 24						; size = 4
_LOD$ = 28						; size = 4
?verticalEdgeTest@TViewPoint@@AAEHHHMMMH@Z PROC		; TViewPoint::verticalEdgeTest
; _this$ = ecx

; 1024 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 1025 : 	float	t, height;
; 1026 : 	Tpost	*top, *bottom;
; 1027 : 
; 1028 : 	// Get the relevant posts
; 1029 : 	top		= blockLists[LOD].GetPost( row+1, col );

	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _row$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _LOD$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	call	?GetPost@TBlockList@@QAEPAUTpost@@HH@Z	; TBlockList::GetPost
	mov	DWORD PTR _top$[ebp], eax

; 1030 : 	bottom	= blockLists[LOD].GetPost( row,   col );

	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _row$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _LOD$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	call	?GetPost@TBlockList@@QAEPAUTpost@@HH@Z	; TBlockList::GetPost
	mov	DWORD PTR _bottom$[ebp], eax

; 1031 : 
; 1032 : 	// Compute the height of the edge at the point the line crosses it
; 1033 : 	t = WORLD_TO_FLOAT_LEVEL_POST( x, LOD ) - row;

	mov	eax, DWORD PTR _LOD$[ebp]
	push	eax
	mov	ecx, OFFSET ?TheMap@@3VTMap@@A		; TheMap
	call	?Level@TMap@@QAEPAVTLevel@@H@Z		; TMap::Level
	mov	ecx, eax
	call	?FTperPOST@TLevel@@QAEMXZ		; TLevel::FTperPOST
	fstp	DWORD PTR tv146[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	divss	xmm0, DWORD PTR tv146[ebp]
	cvtsi2ss xmm1, DWORD PTR _row$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _t$[ebp], xmm0

; 1034 : 	
; 1035 : 	// OW
; 1036 : 	//ShiAssert( (t >= -0.1f) && (t <= 1.1f) );
; 1037 : 	height = bottom->z + t * (top->z - bottom->z);

	mov	ecx, DWORD PTR _top$[ebp]
	mov	edx, DWORD PTR _bottom$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR _bottom$[ebp]
	addss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _height$[ebp], xmm0

; 1038 : 
; 1039 : 	// Return true if the line crosses below the edge (ie: is less negative)
; 1040 : 	return (height<z);

	movss	xmm0, DWORD PTR _z$[ebp]
	comiss	xmm0, DWORD PTR _height$[ebp]
	jbe	SHORT $LN3@verticalEd
	mov	DWORD PTR tv128[ebp], 1
	jmp	SHORT $LN4@verticalEd
$LN3@verticalEd:
	mov	DWORD PTR tv128[ebp], 0
$LN4@verticalEd:
	mov	eax, DWORD PTR tv128[ebp]

; 1041 : }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?verticalEdgeTest@TViewPoint@@AAEHHHMMMH@Z ENDP		; TViewPoint::verticalEdgeTest
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\terrain\tviewpnt.cpp
_TEXT	SEGMENT
_height$ = -28						; size = 4
_t$ = -24						; size = 4
_right$ = -20						; size = 4
tv146 = -16						; size = 4
tv128 = -12						; size = 4
_left$ = -8						; size = 4
_this$ = -4						; size = 4
_row$ = 8						; size = 4
_col$ = 12						; size = 4
___formal$ = 16						; size = 4
_y$ = 20						; size = 4
_z$ = 24						; size = 4
_LOD$ = 28						; size = 4
?horizontalEdgeTest@TViewPoint@@AAEHHHMMMH@Z PROC	; TViewPoint::horizontalEdgeTest
; _this$ = ecx

; 1005 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 1006 : 	float	t, height;
; 1007 : 	Tpost	*left, *right;
; 1008 : 
; 1009 : 	// Get the relevant posts
; 1010 : 	left	= blockLists[LOD].GetPost( row, col   );

	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _row$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _LOD$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	call	?GetPost@TBlockList@@QAEPAUTpost@@HH@Z	; TBlockList::GetPost
	mov	DWORD PTR _left$[ebp], eax

; 1011 : 	right	= blockLists[LOD].GetPost( row, col+1 );

	mov	eax, DWORD PTR _col$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _row$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _LOD$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	call	?GetPost@TBlockList@@QAEPAUTpost@@HH@Z	; TBlockList::GetPost
	mov	DWORD PTR _right$[ebp], eax

; 1012 : 
; 1013 : 	// Compute the height of the edge at the point the line crosses it
; 1014 : 	t = WORLD_TO_FLOAT_LEVEL_POST( y, LOD ) - col;

	mov	eax, DWORD PTR _LOD$[ebp]
	push	eax
	mov	ecx, OFFSET ?TheMap@@3VTMap@@A		; TheMap
	call	?Level@TMap@@QAEPAVTLevel@@H@Z		; TMap::Level
	mov	ecx, eax
	call	?FTperPOST@TLevel@@QAEMXZ		; TLevel::FTperPOST
	fstp	DWORD PTR tv146[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	divss	xmm0, DWORD PTR tv146[ebp]
	cvtsi2ss xmm1, DWORD PTR _col$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _t$[ebp], xmm0

; 1015 : 	ShiAssert( (t > -0.1f) && (t < 1.1f) ); // Make it more tolerant since it actually works anyway
; 1016 : 	height = left->z + t * (right->z - left->z);

	mov	ecx, DWORD PTR _right$[ebp]
	mov	edx, DWORD PTR _left$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR _left$[ebp]
	addss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _height$[ebp], xmm0

; 1017 : 
; 1018 : 	// Return true if the line crosses below the edge (ie: is less negative)
; 1019 : 	return (height<z);

	movss	xmm0, DWORD PTR _z$[ebp]
	comiss	xmm0, DWORD PTR _height$[ebp]
	jbe	SHORT $LN3@horizontal
	mov	DWORD PTR tv128[ebp], 1
	jmp	SHORT $LN4@horizontal
$LN3@horizontal:
	mov	DWORD PTR tv128[ebp], 0
$LN4@horizontal:
	mov	eax, DWORD PTR tv128[ebp]

; 1020 : }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?horizontalEdgeTest@TViewPoint@@AAEHHHMMMH@Z ENDP	; TViewPoint::horizontalEdgeTest
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\terrain\tviewpnt.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_row$ = 8						; size = 4
_col$ = 12						; size = 4
_z$ = 16						; size = 4
_LOD$ = 20						; size = 4
?TestSouth@TViewPoint@@AAEHHHMH@Z PROC			; TViewPoint::TestSouth
; _this$ = ecx

; 643  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 644  : 	return TestNorth(row-1, col, z, LOD);

	mov	eax, DWORD PTR _LOD$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _col$[ebp]
	push	ecx
	mov	edx, DWORD PTR _row$[ebp]
	sub	edx, 1
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestNorth@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestNorth

; 645  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?TestSouth@TViewPoint@@AAEHHHMH@Z ENDP			; TViewPoint::TestSouth
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\terrain\tviewpnt.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_row$ = 8						; size = 4
_col$ = 12						; size = 4
_z$ = 16						; size = 4
_LOD$ = 20						; size = 4
?TestWest@TViewPoint@@AAEHHHMH@Z PROC			; TViewPoint::TestWest
; _this$ = ecx

; 639  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 640  : 	return TestEast(row, col-1, z, LOD);

	mov	eax, DWORD PTR _LOD$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _col$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _row$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestEast@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestEast

; 641  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?TestWest@TViewPoint@@AAEHHHMH@Z ENDP			; TViewPoint::TestWest
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\terrain\tviewpnt.cpp
_TEXT	SEGMENT
tv90 = -20						; size = 4
tv88 = -16						; size = 4
_top$ = -12						; size = 4
_bottom$ = -8						; size = 4
_this$ = -4						; size = 4
_row$ = 8						; size = 4
_col$ = 12						; size = 4
_z$ = 16						; size = 4
_LOD$ = 20						; size = 4
?TestNorth@TViewPoint@@AAEHHHMH@Z PROC			; TViewPoint::TestNorth
; _this$ = ecx

; 630  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 631  : 	// Get the relevant posts
; 632  : 	Tpost *bottom = blockLists[LOD].GetPost( row,   col );

	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _row$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _LOD$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	call	?GetPost@TBlockList@@QAEPAUTpost@@HH@Z	; TBlockList::GetPost
	mov	DWORD PTR _bottom$[ebp], eax

; 633  : 	Tpost *top    = blockLists[LOD].GetPost( row+1, col );

	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _row$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _LOD$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	call	?GetPost@TBlockList@@QAEPAUTpost@@HH@Z	; TBlockList::GetPost
	mov	DWORD PTR _top$[ebp], eax

; 634  : 
; 635  : 	// Return true if the line crosses below the highest post (ie: is less negative)
; 636  : 	return (min(bottom->z, top->z) < z);

	mov	eax, DWORD PTR _bottom$[ebp]
	mov	ecx, DWORD PTR _top$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	comiss	xmm0, DWORD PTR [eax]
	jbe	SHORT $LN3@TestNorth
	mov	edx, DWORD PTR _bottom$[ebp]
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR tv88[ebp], xmm0
	jmp	SHORT $LN4@TestNorth
$LN3@TestNorth:
	mov	eax, DWORD PTR _top$[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR tv88[ebp], xmm0
$LN4@TestNorth:
	movss	xmm0, DWORD PTR _z$[ebp]
	comiss	xmm0, DWORD PTR tv88[ebp]
	jbe	SHORT $LN5@TestNorth
	mov	DWORD PTR tv90[ebp], 1
	jmp	SHORT $LN6@TestNorth
$LN5@TestNorth:
	mov	DWORD PTR tv90[ebp], 0
$LN6@TestNorth:
	mov	eax, DWORD PTR tv90[ebp]

; 637  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?TestNorth@TViewPoint@@AAEHHHMH@Z ENDP			; TViewPoint::TestNorth
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\terrain\tviewpnt.cpp
_TEXT	SEGMENT
tv90 = -20						; size = 4
tv88 = -16						; size = 4
_right$ = -12						; size = 4
_left$ = -8						; size = 4
_this$ = -4						; size = 4
_row$ = 8						; size = 4
_col$ = 12						; size = 4
_z$ = 16						; size = 4
_LOD$ = 20						; size = 4
?TestEast@TViewPoint@@AAEHHHMH@Z PROC			; TViewPoint::TestEast
; _this$ = ecx

; 621  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 	// Get the relevant posts
; 623  : 	Tpost *left  = blockLists[LOD].GetPost( row, col );

	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _row$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _LOD$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	call	?GetPost@TBlockList@@QAEPAUTpost@@HH@Z	; TBlockList::GetPost
	mov	DWORD PTR _left$[ebp], eax

; 624  : 	Tpost *right = blockLists[LOD].GetPost( row, col+1 );

	mov	eax, DWORD PTR _col$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _row$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _LOD$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	call	?GetPost@TBlockList@@QAEPAUTpost@@HH@Z	; TBlockList::GetPost
	mov	DWORD PTR _right$[ebp], eax

; 625  : 
; 626  : 	// Return true if the line crosses below the highest post (ie: is less negative)
; 627  : 	return (min(left->z, right->z) < z);

	mov	eax, DWORD PTR _left$[ebp]
	mov	ecx, DWORD PTR _right$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	comiss	xmm0, DWORD PTR [eax]
	jbe	SHORT $LN3@TestEast
	mov	edx, DWORD PTR _left$[ebp]
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR tv88[ebp], xmm0
	jmp	SHORT $LN4@TestEast
$LN3@TestEast:
	mov	eax, DWORD PTR _right$[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR tv88[ebp], xmm0
$LN4@TestEast:
	movss	xmm0, DWORD PTR _z$[ebp]
	comiss	xmm0, DWORD PTR tv88[ebp]
	jbe	SHORT $LN5@TestEast
	mov	DWORD PTR tv90[ebp], 1
	jmp	SHORT $LN6@TestEast
$LN5@TestEast:
	mov	DWORD PTR tv90[ebp], 0
$LN6@TestEast:
	mov	eax, DWORD PTR tv90[ebp]

; 628  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?TestEast@TViewPoint@@AAEHHHMH@Z ENDP			; TViewPoint::TestEast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\terrain\tviewpnt.cpp
_TEXT	SEGMENT
_post$ = -12						; size = 4
_this$ = -8						; size = 4
tv73 = -4						; size = 4
_row$ = 8						; size = 4
_col$ = 12						; size = 4
_z$ = 16						; size = 4
_LOD$ = 20						; size = 4
?TestVertex@TViewPoint@@AAEHHHMH@Z PROC			; TViewPoint::TestVertex
; _this$ = ecx

; 613  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 614  : 	// Get the relevant post
; 615  : 	Tpost *post = blockLists[LOD].GetPost( row, col );

	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _row$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _LOD$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	call	?GetPost@TBlockList@@QAEPAUTpost@@HH@Z	; TBlockList::GetPost
	mov	DWORD PTR _post$[ebp], eax

; 616  : 	
; 617  : 	// Return true if the line crosses below the post (ie: is less negative)
; 618  : 	return (post->z < z);

	mov	eax, DWORD PTR _post$[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	comiss	xmm0, DWORD PTR [eax]
	jbe	SHORT $LN3@TestVertex
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN4@TestVertex
$LN3@TestVertex:
	mov	DWORD PTR tv73[ebp], 0
$LN4@TestVertex:
	mov	eax, DWORD PTR tv73[ebp]

; 619  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?TestVertex@TViewPoint@@AAEHHHMH@Z ENDP			; TViewPoint::TestVertex
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\terrain\tviewpnt.cpp
_TEXT	SEGMENT
tv479 = -36						; size = 4
_k$ = -32						; size = 4
_deltay$ = -28						; size = 4
_deltax$ = -24						; size = 4
_this$ = -20						; size = 4
_hit$ = -16						; size = 4
_nr$ = -12						; size = 4
_row$ = -8						; size = 4
_col$ = -4						; size = 4
_Px$ = 8						; size = 4
_Py$ = 12						; size = 4
_Qx$ = 16						; size = 4
_Qy$ = 20						; size = 4
_z$ = 24						; size = 4
_dz$ = 28						; size = 4
_LOD$ = 32						; size = 4
?SingleLODLineOfSight@TViewPoint@@AAEHHHHHMMH@Z PROC	; TViewPoint::SingleLODLineOfSight
; _this$ = ecx

; 740  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 741  : 	int		nr;					// remainder
; 742  : 	int		deltax, deltay;		// Q.x - P.x, Q.y - P.y
; 743  : 	int		k;					// loop invariant constant
; 744  : 	int		row, col;			// Current row and column being checked
; 745  : 	BOOL	hit;				// Flag to indicate a terrain hit
; 746  : 
; 747  : 	
; 748  : 	// Initialize values used in the following interations
; 749  : 	deltax = Qx - Px;

	mov	eax, DWORD PTR _Qx$[ebp]
	sub	eax, DWORD PTR _Px$[ebp]
	mov	DWORD PTR _deltax$[ebp], eax

; 750  : 	deltay = Qy - Py;

	mov	ecx, DWORD PTR _Qy$[ebp]
	sub	ecx, DWORD PTR _Py$[ebp]
	mov	DWORD PTR _deltay$[ebp], ecx

; 751  : 	hit = FALSE;

	mov	DWORD PTR _hit$[ebp], 0

; 752  : 
; 753  : 
; 754  : 	// Lock everyone else out of this viewpoint while we're using it
; 755  : 	EnterCriticalSection( &cs_update );

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 28					; 0000001cH
	push	edx
	call	DWORD PTR __imp__EnterCriticalSection@4

; 756  : 
; 757  : 
; 758  : #define OCTANT(f1, f2, f3, f4, f5, i1, s1, r1, r2)		\
; 759  : 	for (f1, f2, f3, nr=0; ((f4) && (!hit)); f5) {		\
; 760  : 		z += dz;										\
; 761  :   		if (nr < k) {									\
; 762  : 			if (i1) {									\
; 763  : 				hit = r1(row,col,z,LOD);				\
; 764  : 			} else {									\
; 765  : 				hit = TestVertex(row,col,z,LOD);		\
; 766  : 			}											\
; 767  : 		} else {										\
; 768  : 			s1;											\
; 769  : 			if (nr -= k) {								\
; 770  : 				hit  = r2(row,col,z,LOD);				\
; 771  : 				if (!hit) {								\
; 772  : 					hit = r1(row,col,z,LOD);			\
; 773  : 				}										\
; 774  : 			} else {									\
; 775  : 				hit = TestVertex(row,col,z,LOD);		\
; 776  : 			}											\
; 777  : 		}												\
; 778  : 	}
; 779  : 
; 780  : 
; 781  : 	// For reference purposes, let theta be the angle from P to Q
; 782  : 	if ((deltax >= 0) && (deltay >=0) && (deltay < deltax))	{			// theta < 45

	cmp	DWORD PTR _deltax$[ebp], 0
	jl	$LN96@SingleLODL
	cmp	DWORD PTR _deltay$[ebp], 0
	jl	$LN96@SingleLODL
	mov	eax, DWORD PTR _deltay$[ebp]
	cmp	eax, DWORD PTR _deltax$[ebp]
	jge	$LN96@SingleLODL

; 783  : 		OCTANT( row = Px+1, col = Py, k = deltax - deltay,  row < Qx, row++, nr += deltay, col++, TestEast, TestSouth);

	mov	ecx, DWORD PTR _Px$[ebp]
	add	ecx, 1
	mov	DWORD PTR _row$[ebp], ecx
	mov	edx, DWORD PTR _Py$[ebp]
	mov	DWORD PTR _col$[ebp], edx
	mov	eax, DWORD PTR _deltax$[ebp]
	sub	eax, DWORD PTR _deltay$[ebp]
	mov	DWORD PTR _k$[ebp], eax
	mov	DWORD PTR _nr$[ebp], 0
	jmp	SHORT $LN95@SingleLODL
$LN94@SingleLODL:
	mov	ecx, DWORD PTR _row$[ebp]
	add	ecx, 1
	mov	DWORD PTR _row$[ebp], ecx
$LN95@SingleLODL:
	mov	edx, DWORD PTR _row$[ebp]
	cmp	edx, DWORD PTR _Qx$[ebp]
	jge	$LN93@SingleLODL
	cmp	DWORD PTR _hit$[ebp], 0
	jne	$LN93@SingleLODL
	movss	xmm0, DWORD PTR _z$[ebp]
	addss	xmm0, DWORD PTR _dz$[ebp]
	movss	DWORD PTR _z$[ebp], xmm0
	mov	eax, DWORD PTR _nr$[ebp]
	cmp	eax, DWORD PTR _k$[ebp]
	jge	SHORT $LN92@SingleLODL
	mov	ecx, DWORD PTR _nr$[ebp]
	add	ecx, DWORD PTR _deltay$[ebp]
	mov	DWORD PTR _nr$[ebp], ecx
	je	SHORT $LN91@SingleLODL
	mov	edx, DWORD PTR _LOD$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _row$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestEast@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestEast
	mov	DWORD PTR _hit$[ebp], eax
	jmp	SHORT $LN90@SingleLODL
$LN91@SingleLODL:
	mov	edx, DWORD PTR _LOD$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _row$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestVertex@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestVertex
	mov	DWORD PTR _hit$[ebp], eax
$LN90@SingleLODL:
	jmp	$LN86@SingleLODL
$LN92@SingleLODL:
	mov	edx, DWORD PTR _col$[ebp]
	add	edx, 1
	mov	DWORD PTR _col$[ebp], edx
	mov	eax, DWORD PTR _nr$[ebp]
	sub	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR _nr$[ebp], eax
	je	SHORT $LN88@SingleLODL
	mov	ecx, DWORD PTR _LOD$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _col$[ebp]
	push	edx
	mov	eax, DWORD PTR _row$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestSouth@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestSouth
	mov	DWORD PTR _hit$[ebp], eax
	cmp	DWORD PTR _hit$[ebp], 0
	jne	SHORT $LN87@SingleLODL
	mov	ecx, DWORD PTR _LOD$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _col$[ebp]
	push	edx
	mov	eax, DWORD PTR _row$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestEast@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestEast
	mov	DWORD PTR _hit$[ebp], eax
$LN87@SingleLODL:
	jmp	SHORT $LN86@SingleLODL
$LN88@SingleLODL:
	mov	ecx, DWORD PTR _LOD$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _col$[ebp]
	push	edx
	mov	eax, DWORD PTR _row$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestVertex@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestVertex
	mov	DWORD PTR _hit$[ebp], eax
$LN86@SingleLODL:
	jmp	$LN94@SingleLODL
$LN93@SingleLODL:
	jmp	$LN12@SingleLODL
$LN96@SingleLODL:

; 784  : 	} else if ((deltax > 0) && (deltay >= 0) && (deltay >= deltax))	{	// 45 <= theta < 90

	cmp	DWORD PTR _deltax$[ebp], 0
	jle	$LN84@SingleLODL
	cmp	DWORD PTR _deltay$[ebp], 0
	jl	$LN84@SingleLODL
	mov	ecx, DWORD PTR _deltay$[ebp]
	cmp	ecx, DWORD PTR _deltax$[ebp]
	jl	$LN84@SingleLODL

; 785  : 		OCTANT( col = Py+1, row = Px, k = deltay - deltax,  col < Qy, col++, nr += deltax, row++, TestNorth, TestWest);

	mov	edx, DWORD PTR _Py$[ebp]
	add	edx, 1
	mov	DWORD PTR _col$[ebp], edx
	mov	eax, DWORD PTR _Px$[ebp]
	mov	DWORD PTR _row$[ebp], eax
	mov	ecx, DWORD PTR _deltay$[ebp]
	sub	ecx, DWORD PTR _deltax$[ebp]
	mov	DWORD PTR _k$[ebp], ecx
	mov	DWORD PTR _nr$[ebp], 0
	jmp	SHORT $LN83@SingleLODL
$LN82@SingleLODL:
	mov	edx, DWORD PTR _col$[ebp]
	add	edx, 1
	mov	DWORD PTR _col$[ebp], edx
$LN83@SingleLODL:
	mov	eax, DWORD PTR _col$[ebp]
	cmp	eax, DWORD PTR _Qy$[ebp]
	jge	$LN81@SingleLODL
	cmp	DWORD PTR _hit$[ebp], 0
	jne	$LN81@SingleLODL
	movss	xmm0, DWORD PTR _z$[ebp]
	addss	xmm0, DWORD PTR _dz$[ebp]
	movss	DWORD PTR _z$[ebp], xmm0
	mov	ecx, DWORD PTR _nr$[ebp]
	cmp	ecx, DWORD PTR _k$[ebp]
	jge	SHORT $LN80@SingleLODL
	mov	edx, DWORD PTR _nr$[ebp]
	add	edx, DWORD PTR _deltax$[ebp]
	mov	DWORD PTR _nr$[ebp], edx
	je	SHORT $LN79@SingleLODL
	mov	eax, DWORD PTR _LOD$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _col$[ebp]
	push	ecx
	mov	edx, DWORD PTR _row$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestNorth@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestNorth
	mov	DWORD PTR _hit$[ebp], eax
	jmp	SHORT $LN78@SingleLODL
$LN79@SingleLODL:
	mov	eax, DWORD PTR _LOD$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _col$[ebp]
	push	ecx
	mov	edx, DWORD PTR _row$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestVertex@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestVertex
	mov	DWORD PTR _hit$[ebp], eax
$LN78@SingleLODL:
	jmp	$LN74@SingleLODL
$LN80@SingleLODL:
	mov	eax, DWORD PTR _row$[ebp]
	add	eax, 1
	mov	DWORD PTR _row$[ebp], eax
	mov	ecx, DWORD PTR _nr$[ebp]
	sub	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR _nr$[ebp], ecx
	je	SHORT $LN76@SingleLODL
	mov	edx, DWORD PTR _LOD$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _row$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestWest@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestWest
	mov	DWORD PTR _hit$[ebp], eax
	cmp	DWORD PTR _hit$[ebp], 0
	jne	SHORT $LN75@SingleLODL
	mov	edx, DWORD PTR _LOD$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _row$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestNorth@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestNorth
	mov	DWORD PTR _hit$[ebp], eax
$LN75@SingleLODL:
	jmp	SHORT $LN74@SingleLODL
$LN76@SingleLODL:
	mov	edx, DWORD PTR _LOD$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _row$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestVertex@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestVertex
	mov	DWORD PTR _hit$[ebp], eax
$LN74@SingleLODL:
	jmp	$LN82@SingleLODL
$LN81@SingleLODL:
	jmp	$LN12@SingleLODL
$LN84@SingleLODL:

; 786  : 	} else if ((deltax <= 0) && (deltay >= 0) && (deltay > -deltax)){	// 90 <= theta < 135

	cmp	DWORD PTR _deltax$[ebp], 0
	jg	$LN72@SingleLODL
	cmp	DWORD PTR _deltay$[ebp], 0
	jl	$LN72@SingleLODL
	mov	edx, DWORD PTR _deltax$[ebp]
	neg	edx
	cmp	DWORD PTR _deltay$[ebp], edx
	jle	$LN72@SingleLODL

; 787  : 		OCTANT( col = Py+1, row = Px, k = deltay + deltax,  col < Qy, col++, nr -= deltax, row--, TestSouth, TestWest);

	mov	eax, DWORD PTR _Py$[ebp]
	add	eax, 1
	mov	DWORD PTR _col$[ebp], eax
	mov	ecx, DWORD PTR _Px$[ebp]
	mov	DWORD PTR _row$[ebp], ecx
	mov	edx, DWORD PTR _deltay$[ebp]
	add	edx, DWORD PTR _deltax$[ebp]
	mov	DWORD PTR _k$[ebp], edx
	mov	DWORD PTR _nr$[ebp], 0
	jmp	SHORT $LN71@SingleLODL
$LN70@SingleLODL:
	mov	eax, DWORD PTR _col$[ebp]
	add	eax, 1
	mov	DWORD PTR _col$[ebp], eax
$LN71@SingleLODL:
	mov	ecx, DWORD PTR _col$[ebp]
	cmp	ecx, DWORD PTR _Qy$[ebp]
	jge	$LN69@SingleLODL
	cmp	DWORD PTR _hit$[ebp], 0
	jne	$LN69@SingleLODL
	movss	xmm0, DWORD PTR _z$[ebp]
	addss	xmm0, DWORD PTR _dz$[ebp]
	movss	DWORD PTR _z$[ebp], xmm0
	mov	edx, DWORD PTR _nr$[ebp]
	cmp	edx, DWORD PTR _k$[ebp]
	jge	SHORT $LN68@SingleLODL
	mov	eax, DWORD PTR _nr$[ebp]
	sub	eax, DWORD PTR _deltax$[ebp]
	mov	DWORD PTR _nr$[ebp], eax
	je	SHORT $LN67@SingleLODL
	mov	ecx, DWORD PTR _LOD$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _col$[ebp]
	push	edx
	mov	eax, DWORD PTR _row$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestSouth@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestSouth
	mov	DWORD PTR _hit$[ebp], eax
	jmp	SHORT $LN66@SingleLODL
$LN67@SingleLODL:
	mov	ecx, DWORD PTR _LOD$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _col$[ebp]
	push	edx
	mov	eax, DWORD PTR _row$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestVertex@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestVertex
	mov	DWORD PTR _hit$[ebp], eax
$LN66@SingleLODL:
	jmp	$LN62@SingleLODL
$LN68@SingleLODL:
	mov	ecx, DWORD PTR _row$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _row$[ebp], ecx
	mov	edx, DWORD PTR _nr$[ebp]
	sub	edx, DWORD PTR _k$[ebp]
	mov	DWORD PTR _nr$[ebp], edx
	je	SHORT $LN64@SingleLODL
	mov	eax, DWORD PTR _LOD$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _col$[ebp]
	push	ecx
	mov	edx, DWORD PTR _row$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestWest@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestWest
	mov	DWORD PTR _hit$[ebp], eax
	cmp	DWORD PTR _hit$[ebp], 0
	jne	SHORT $LN63@SingleLODL
	mov	eax, DWORD PTR _LOD$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _col$[ebp]
	push	ecx
	mov	edx, DWORD PTR _row$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestSouth@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestSouth
	mov	DWORD PTR _hit$[ebp], eax
$LN63@SingleLODL:
	jmp	SHORT $LN62@SingleLODL
$LN64@SingleLODL:
	mov	eax, DWORD PTR _LOD$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _col$[ebp]
	push	ecx
	mov	edx, DWORD PTR _row$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestVertex@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestVertex
	mov	DWORD PTR _hit$[ebp], eax
$LN62@SingleLODL:
	jmp	$LN70@SingleLODL
$LN69@SingleLODL:
	jmp	$LN12@SingleLODL
$LN72@SingleLODL:

; 788  : 	} else if ((deltax <= 0) && (deltay > 0) && (deltay <= -deltax)){	// 135 <= theta < 180

	cmp	DWORD PTR _deltax$[ebp], 0
	jg	$LN60@SingleLODL
	cmp	DWORD PTR _deltay$[ebp], 0
	jle	$LN60@SingleLODL
	mov	eax, DWORD PTR _deltax$[ebp]
	neg	eax
	cmp	DWORD PTR _deltay$[ebp], eax
	jg	$LN60@SingleLODL

; 789  : 		OCTANT( row = Px-1, col = Py, k = -deltax - deltay, row > Qx, row--, nr += deltay, col++, TestEast, TestNorth);

	mov	ecx, DWORD PTR _Px$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _row$[ebp], ecx
	mov	edx, DWORD PTR _Py$[ebp]
	mov	DWORD PTR _col$[ebp], edx
	mov	eax, DWORD PTR _deltax$[ebp]
	neg	eax
	sub	eax, DWORD PTR _deltay$[ebp]
	mov	DWORD PTR _k$[ebp], eax
	mov	DWORD PTR _nr$[ebp], 0
	jmp	SHORT $LN59@SingleLODL
$LN58@SingleLODL:
	mov	ecx, DWORD PTR _row$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _row$[ebp], ecx
$LN59@SingleLODL:
	mov	edx, DWORD PTR _row$[ebp]
	cmp	edx, DWORD PTR _Qx$[ebp]
	jle	$LN57@SingleLODL
	cmp	DWORD PTR _hit$[ebp], 0
	jne	$LN57@SingleLODL
	movss	xmm0, DWORD PTR _z$[ebp]
	addss	xmm0, DWORD PTR _dz$[ebp]
	movss	DWORD PTR _z$[ebp], xmm0
	mov	eax, DWORD PTR _nr$[ebp]
	cmp	eax, DWORD PTR _k$[ebp]
	jge	SHORT $LN56@SingleLODL
	mov	ecx, DWORD PTR _nr$[ebp]
	add	ecx, DWORD PTR _deltay$[ebp]
	mov	DWORD PTR _nr$[ebp], ecx
	je	SHORT $LN55@SingleLODL
	mov	edx, DWORD PTR _LOD$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _row$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestEast@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestEast
	mov	DWORD PTR _hit$[ebp], eax
	jmp	SHORT $LN54@SingleLODL
$LN55@SingleLODL:
	mov	edx, DWORD PTR _LOD$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _row$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestVertex@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestVertex
	mov	DWORD PTR _hit$[ebp], eax
$LN54@SingleLODL:
	jmp	$LN50@SingleLODL
$LN56@SingleLODL:
	mov	edx, DWORD PTR _col$[ebp]
	add	edx, 1
	mov	DWORD PTR _col$[ebp], edx
	mov	eax, DWORD PTR _nr$[ebp]
	sub	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR _nr$[ebp], eax
	je	SHORT $LN52@SingleLODL
	mov	ecx, DWORD PTR _LOD$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _col$[ebp]
	push	edx
	mov	eax, DWORD PTR _row$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestNorth@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestNorth
	mov	DWORD PTR _hit$[ebp], eax
	cmp	DWORD PTR _hit$[ebp], 0
	jne	SHORT $LN51@SingleLODL
	mov	ecx, DWORD PTR _LOD$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _col$[ebp]
	push	edx
	mov	eax, DWORD PTR _row$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestEast@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestEast
	mov	DWORD PTR _hit$[ebp], eax
$LN51@SingleLODL:
	jmp	SHORT $LN50@SingleLODL
$LN52@SingleLODL:
	mov	ecx, DWORD PTR _LOD$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _col$[ebp]
	push	edx
	mov	eax, DWORD PTR _row$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestVertex@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestVertex
	mov	DWORD PTR _hit$[ebp], eax
$LN50@SingleLODL:
	jmp	$LN58@SingleLODL
$LN57@SingleLODL:
	jmp	$LN12@SingleLODL
$LN60@SingleLODL:

; 790  : 	} else if ((deltax <= 0) && (deltay <= 0) && (deltay > deltax)) {	// 180 <= theta < 225

	cmp	DWORD PTR _deltax$[ebp], 0
	jg	$LN48@SingleLODL
	cmp	DWORD PTR _deltay$[ebp], 0
	jg	$LN48@SingleLODL
	mov	ecx, DWORD PTR _deltay$[ebp]
	cmp	ecx, DWORD PTR _deltax$[ebp]
	jle	$LN48@SingleLODL

; 791  : 		OCTANT( row = Px-1, col = Py, k = -deltax + deltay, row > Qx, row--, nr -= deltay, col--, TestWest, TestNorth);

	mov	edx, DWORD PTR _Px$[ebp]
	sub	edx, 1
	mov	DWORD PTR _row$[ebp], edx
	mov	eax, DWORD PTR _Py$[ebp]
	mov	DWORD PTR _col$[ebp], eax
	mov	ecx, DWORD PTR _deltax$[ebp]
	neg	ecx
	add	ecx, DWORD PTR _deltay$[ebp]
	mov	DWORD PTR _k$[ebp], ecx
	mov	DWORD PTR _nr$[ebp], 0
	jmp	SHORT $LN47@SingleLODL
$LN46@SingleLODL:
	mov	edx, DWORD PTR _row$[ebp]
	sub	edx, 1
	mov	DWORD PTR _row$[ebp], edx
$LN47@SingleLODL:
	mov	eax, DWORD PTR _row$[ebp]
	cmp	eax, DWORD PTR _Qx$[ebp]
	jle	$LN45@SingleLODL
	cmp	DWORD PTR _hit$[ebp], 0
	jne	$LN45@SingleLODL
	movss	xmm0, DWORD PTR _z$[ebp]
	addss	xmm0, DWORD PTR _dz$[ebp]
	movss	DWORD PTR _z$[ebp], xmm0
	mov	ecx, DWORD PTR _nr$[ebp]
	cmp	ecx, DWORD PTR _k$[ebp]
	jge	SHORT $LN44@SingleLODL
	mov	edx, DWORD PTR _nr$[ebp]
	sub	edx, DWORD PTR _deltay$[ebp]
	mov	DWORD PTR _nr$[ebp], edx
	je	SHORT $LN43@SingleLODL
	mov	eax, DWORD PTR _LOD$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _col$[ebp]
	push	ecx
	mov	edx, DWORD PTR _row$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestWest@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestWest
	mov	DWORD PTR _hit$[ebp], eax
	jmp	SHORT $LN42@SingleLODL
$LN43@SingleLODL:
	mov	eax, DWORD PTR _LOD$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _col$[ebp]
	push	ecx
	mov	edx, DWORD PTR _row$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestVertex@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestVertex
	mov	DWORD PTR _hit$[ebp], eax
$LN42@SingleLODL:
	jmp	$LN38@SingleLODL
$LN44@SingleLODL:
	mov	eax, DWORD PTR _col$[ebp]
	sub	eax, 1
	mov	DWORD PTR _col$[ebp], eax
	mov	ecx, DWORD PTR _nr$[ebp]
	sub	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR _nr$[ebp], ecx
	je	SHORT $LN40@SingleLODL
	mov	edx, DWORD PTR _LOD$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _row$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestNorth@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestNorth
	mov	DWORD PTR _hit$[ebp], eax
	cmp	DWORD PTR _hit$[ebp], 0
	jne	SHORT $LN39@SingleLODL
	mov	edx, DWORD PTR _LOD$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _row$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestWest@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestWest
	mov	DWORD PTR _hit$[ebp], eax
$LN39@SingleLODL:
	jmp	SHORT $LN38@SingleLODL
$LN40@SingleLODL:
	mov	edx, DWORD PTR _LOD$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _row$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestVertex@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestVertex
	mov	DWORD PTR _hit$[ebp], eax
$LN38@SingleLODL:
	jmp	$LN46@SingleLODL
$LN45@SingleLODL:
	jmp	$LN12@SingleLODL
$LN48@SingleLODL:

; 792  : 	} else if ((deltax < 0) && (deltay <= 0) && (deltay <= deltax)) {	// 225 <= theta < 270

	cmp	DWORD PTR _deltax$[ebp], 0
	jge	$LN36@SingleLODL
	cmp	DWORD PTR _deltay$[ebp], 0
	jg	$LN36@SingleLODL
	mov	edx, DWORD PTR _deltay$[ebp]
	cmp	edx, DWORD PTR _deltax$[ebp]
	jg	$LN36@SingleLODL

; 793  : 		OCTANT( col = Py-1, row = Px, k = -deltay + deltax, col > Qy, col--, nr -= deltax, row--, TestSouth, TestEast);

	mov	eax, DWORD PTR _Py$[ebp]
	sub	eax, 1
	mov	DWORD PTR _col$[ebp], eax
	mov	ecx, DWORD PTR _Px$[ebp]
	mov	DWORD PTR _row$[ebp], ecx
	mov	edx, DWORD PTR _deltay$[ebp]
	neg	edx
	add	edx, DWORD PTR _deltax$[ebp]
	mov	DWORD PTR _k$[ebp], edx
	mov	DWORD PTR _nr$[ebp], 0
	jmp	SHORT $LN35@SingleLODL
$LN34@SingleLODL:
	mov	eax, DWORD PTR _col$[ebp]
	sub	eax, 1
	mov	DWORD PTR _col$[ebp], eax
$LN35@SingleLODL:
	mov	ecx, DWORD PTR _col$[ebp]
	cmp	ecx, DWORD PTR _Qy$[ebp]
	jle	$LN33@SingleLODL
	cmp	DWORD PTR _hit$[ebp], 0
	jne	$LN33@SingleLODL
	movss	xmm0, DWORD PTR _z$[ebp]
	addss	xmm0, DWORD PTR _dz$[ebp]
	movss	DWORD PTR _z$[ebp], xmm0
	mov	edx, DWORD PTR _nr$[ebp]
	cmp	edx, DWORD PTR _k$[ebp]
	jge	SHORT $LN32@SingleLODL
	mov	eax, DWORD PTR _nr$[ebp]
	sub	eax, DWORD PTR _deltax$[ebp]
	mov	DWORD PTR _nr$[ebp], eax
	je	SHORT $LN31@SingleLODL
	mov	ecx, DWORD PTR _LOD$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _col$[ebp]
	push	edx
	mov	eax, DWORD PTR _row$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestSouth@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestSouth
	mov	DWORD PTR _hit$[ebp], eax
	jmp	SHORT $LN30@SingleLODL
$LN31@SingleLODL:
	mov	ecx, DWORD PTR _LOD$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _col$[ebp]
	push	edx
	mov	eax, DWORD PTR _row$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestVertex@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestVertex
	mov	DWORD PTR _hit$[ebp], eax
$LN30@SingleLODL:
	jmp	$LN26@SingleLODL
$LN32@SingleLODL:
	mov	ecx, DWORD PTR _row$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _row$[ebp], ecx
	mov	edx, DWORD PTR _nr$[ebp]
	sub	edx, DWORD PTR _k$[ebp]
	mov	DWORD PTR _nr$[ebp], edx
	je	SHORT $LN28@SingleLODL
	mov	eax, DWORD PTR _LOD$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _col$[ebp]
	push	ecx
	mov	edx, DWORD PTR _row$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestEast@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestEast
	mov	DWORD PTR _hit$[ebp], eax
	cmp	DWORD PTR _hit$[ebp], 0
	jne	SHORT $LN27@SingleLODL
	mov	eax, DWORD PTR _LOD$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _col$[ebp]
	push	ecx
	mov	edx, DWORD PTR _row$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestSouth@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestSouth
	mov	DWORD PTR _hit$[ebp], eax
$LN27@SingleLODL:
	jmp	SHORT $LN26@SingleLODL
$LN28@SingleLODL:
	mov	eax, DWORD PTR _LOD$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _col$[ebp]
	push	ecx
	mov	edx, DWORD PTR _row$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestVertex@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestVertex
	mov	DWORD PTR _hit$[ebp], eax
$LN26@SingleLODL:
	jmp	$LN34@SingleLODL
$LN33@SingleLODL:
	jmp	$LN12@SingleLODL
$LN36@SingleLODL:

; 794  : 	} else if ((deltax >= 0) && (deltay <= 0) && (-deltay > deltax)) {	// 270 <= theta < 315

	cmp	DWORD PTR _deltax$[ebp], 0
	jl	$LN24@SingleLODL
	cmp	DWORD PTR _deltay$[ebp], 0
	jg	$LN24@SingleLODL
	mov	eax, DWORD PTR _deltay$[ebp]
	neg	eax
	cmp	eax, DWORD PTR _deltax$[ebp]
	jle	$LN24@SingleLODL

; 795  : 		OCTANT( col = Py-1, row = Px, k = -deltay - deltax, col > Qy, col--, nr += deltax, row++, TestNorth, TestWest);

	mov	ecx, DWORD PTR _Py$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _col$[ebp], ecx
	mov	edx, DWORD PTR _Px$[ebp]
	mov	DWORD PTR _row$[ebp], edx
	mov	eax, DWORD PTR _deltay$[ebp]
	neg	eax
	sub	eax, DWORD PTR _deltax$[ebp]
	mov	DWORD PTR _k$[ebp], eax
	mov	DWORD PTR _nr$[ebp], 0
	jmp	SHORT $LN23@SingleLODL
$LN22@SingleLODL:
	mov	ecx, DWORD PTR _col$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _col$[ebp], ecx
$LN23@SingleLODL:
	mov	edx, DWORD PTR _col$[ebp]
	cmp	edx, DWORD PTR _Qy$[ebp]
	jle	$LN21@SingleLODL
	cmp	DWORD PTR _hit$[ebp], 0
	jne	$LN21@SingleLODL
	movss	xmm0, DWORD PTR _z$[ebp]
	addss	xmm0, DWORD PTR _dz$[ebp]
	movss	DWORD PTR _z$[ebp], xmm0
	mov	eax, DWORD PTR _nr$[ebp]
	cmp	eax, DWORD PTR _k$[ebp]
	jge	SHORT $LN20@SingleLODL
	mov	ecx, DWORD PTR _nr$[ebp]
	add	ecx, DWORD PTR _deltax$[ebp]
	mov	DWORD PTR _nr$[ebp], ecx
	je	SHORT $LN19@SingleLODL
	mov	edx, DWORD PTR _LOD$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _row$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestNorth@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestNorth
	mov	DWORD PTR _hit$[ebp], eax
	jmp	SHORT $LN18@SingleLODL
$LN19@SingleLODL:
	mov	edx, DWORD PTR _LOD$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _row$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestVertex@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestVertex
	mov	DWORD PTR _hit$[ebp], eax
$LN18@SingleLODL:
	jmp	$LN14@SingleLODL
$LN20@SingleLODL:
	mov	edx, DWORD PTR _row$[ebp]
	add	edx, 1
	mov	DWORD PTR _row$[ebp], edx
	mov	eax, DWORD PTR _nr$[ebp]
	sub	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR _nr$[ebp], eax
	je	SHORT $LN16@SingleLODL
	mov	ecx, DWORD PTR _LOD$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _col$[ebp]
	push	edx
	mov	eax, DWORD PTR _row$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestWest@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestWest
	mov	DWORD PTR _hit$[ebp], eax
	cmp	DWORD PTR _hit$[ebp], 0
	jne	SHORT $LN15@SingleLODL
	mov	ecx, DWORD PTR _LOD$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _col$[ebp]
	push	edx
	mov	eax, DWORD PTR _row$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestNorth@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestNorth
	mov	DWORD PTR _hit$[ebp], eax
$LN15@SingleLODL:
	jmp	SHORT $LN14@SingleLODL
$LN16@SingleLODL:
	mov	ecx, DWORD PTR _LOD$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _col$[ebp]
	push	edx
	mov	eax, DWORD PTR _row$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestVertex@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestVertex
	mov	DWORD PTR _hit$[ebp], eax
$LN14@SingleLODL:
	jmp	$LN22@SingleLODL
$LN21@SingleLODL:
	jmp	$LN12@SingleLODL
$LN24@SingleLODL:

; 796  : 	} else if ((deltax >= 0) && (deltay < 0) && (-deltay <= deltax)) {	// 315 <= theta < 360

	cmp	DWORD PTR _deltax$[ebp], 0
	jl	$LN12@SingleLODL
	cmp	DWORD PTR _deltay$[ebp], 0
	jge	$LN12@SingleLODL
	mov	ecx, DWORD PTR _deltay$[ebp]
	neg	ecx
	cmp	ecx, DWORD PTR _deltax$[ebp]
	jg	$LN12@SingleLODL

; 797  : 		OCTANT( row = Px+1, col = Py, k = deltax + deltay,  row < Qx, row++, nr -= deltay, col--, TestWest, TestSouth);

	mov	edx, DWORD PTR _Px$[ebp]
	add	edx, 1
	mov	DWORD PTR _row$[ebp], edx
	mov	eax, DWORD PTR _Py$[ebp]
	mov	DWORD PTR _col$[ebp], eax
	mov	ecx, DWORD PTR _deltax$[ebp]
	add	ecx, DWORD PTR _deltay$[ebp]
	mov	DWORD PTR _k$[ebp], ecx
	mov	DWORD PTR _nr$[ebp], 0
	jmp	SHORT $LN11@SingleLODL
$LN10@SingleLODL:
	mov	edx, DWORD PTR _row$[ebp]
	add	edx, 1
	mov	DWORD PTR _row$[ebp], edx
$LN11@SingleLODL:
	mov	eax, DWORD PTR _row$[ebp]
	cmp	eax, DWORD PTR _Qx$[ebp]
	jge	$LN9@SingleLODL
	cmp	DWORD PTR _hit$[ebp], 0
	jne	$LN9@SingleLODL
	movss	xmm0, DWORD PTR _z$[ebp]
	addss	xmm0, DWORD PTR _dz$[ebp]
	movss	DWORD PTR _z$[ebp], xmm0
	mov	ecx, DWORD PTR _nr$[ebp]
	cmp	ecx, DWORD PTR _k$[ebp]
	jge	SHORT $LN8@SingleLODL
	mov	edx, DWORD PTR _nr$[ebp]
	sub	edx, DWORD PTR _deltay$[ebp]
	mov	DWORD PTR _nr$[ebp], edx
	je	SHORT $LN7@SingleLODL
	mov	eax, DWORD PTR _LOD$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _col$[ebp]
	push	ecx
	mov	edx, DWORD PTR _row$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestWest@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestWest
	mov	DWORD PTR _hit$[ebp], eax
	jmp	SHORT $LN6@SingleLODL
$LN7@SingleLODL:
	mov	eax, DWORD PTR _LOD$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _col$[ebp]
	push	ecx
	mov	edx, DWORD PTR _row$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestVertex@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestVertex
	mov	DWORD PTR _hit$[ebp], eax
$LN6@SingleLODL:
	jmp	$LN2@SingleLODL
$LN8@SingleLODL:
	mov	eax, DWORD PTR _col$[ebp]
	sub	eax, 1
	mov	DWORD PTR _col$[ebp], eax
	mov	ecx, DWORD PTR _nr$[ebp]
	sub	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR _nr$[ebp], ecx
	je	SHORT $LN4@SingleLODL
	mov	edx, DWORD PTR _LOD$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _row$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestSouth@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestSouth
	mov	DWORD PTR _hit$[ebp], eax
	cmp	DWORD PTR _hit$[ebp], 0
	jne	SHORT $LN3@SingleLODL
	mov	edx, DWORD PTR _LOD$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _row$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestWest@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestWest
	mov	DWORD PTR _hit$[ebp], eax
$LN3@SingleLODL:
	jmp	SHORT $LN2@SingleLODL
$LN4@SingleLODL:
	mov	edx, DWORD PTR _LOD$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _row$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestVertex@TViewPoint@@AAEHHHMH@Z	; TViewPoint::TestVertex
	mov	DWORD PTR _hit$[ebp], eax
$LN2@SingleLODL:
	jmp	$LN10@SingleLODL
$LN9@SingleLODL:
$LN12@SingleLODL:

; 798  : 	} else {	// P == Q
; 799  : 	}
; 800  : 
; 801  : 
; 802  : 	// Unlock the viewpoint
; 803  : 	LeaveCriticalSection( &cs_update );

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 28					; 0000001cH
	push	edx
	call	DWORD PTR __imp__LeaveCriticalSection@4

; 804  : 
; 805  : 	return (!hit);

	cmp	DWORD PTR _hit$[ebp], 0
	jne	SHORT $LN99@SingleLODL
	mov	DWORD PTR tv479[ebp], 1
	jmp	SHORT $LN100@SingleLODL
$LN99@SingleLODL:
	mov	DWORD PTR tv479[ebp], 0
$LN100@SingleLODL:
	mov	eax, DWORD PTR tv479[ebp]

; 806  : }

	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
?SingleLODLineOfSight@TViewPoint@@AAEHHHHHMMH@Z ENDP	; TViewPoint::SingleLODLineOfSight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\terrain\tviewpnt.cpp
_TEXT	SEGMENT
tv154 = -24						; size = 4
tv145 = -20						; size = 4
_col$ = -16						; size = 4
_row$ = -12						; size = 4
_this$ = -8						; size = 4
_lod$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?GetLODLevel@TViewPoint@@ABEHMM@Z PROC			; TViewPoint::GetLODLevel
; _this$ = ecx

; 576  : int TViewPoint::GetLODLevel(float x, float y) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 577  : 	int		lod;
; 578  : 
; 579  : 	// Compute the level relative post address of interest at the highest available LOD
; 580  : 	lod = minLOD;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _lod$[ebp], ecx

; 581  : 	int row = FloatToInt32(x / TheMap.Level(lod)->FTperPOST());

	mov	edx, DWORD PTR _lod$[ebp]
	push	edx
	mov	ecx, OFFSET ?TheMap@@3VTMap@@A		; TheMap
	call	?Level@TMap@@QAEPAVTLevel@@H@Z		; TMap::Level
	mov	ecx, eax
	call	?FTperPOST@TLevel@@QAEMXZ		; TLevel::FTperPOST
	fstp	DWORD PTR tv145[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	divss	xmm0, DWORD PTR tv145[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _row$[ebp], eax

; 582  : 	int col = FloatToInt32(y / TheMap.Level(lod)->FTperPOST());

	mov	eax, DWORD PTR _lod$[ebp]
	push	eax
	mov	ecx, OFFSET ?TheMap@@3VTMap@@A		; TheMap
	call	?Level@TMap@@QAEPAVTLevel@@H@Z		; TMap::Level
	mov	ecx, eax
	call	?FTperPOST@TLevel@@QAEMXZ		; TLevel::FTperPOST
	fstp	DWORD PTR tv154[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	divss	xmm0, DWORD PTR tv154[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _col$[ebp], eax

; 583  : 
; 584  : 	// Lock everyone else out of this viewpoint while we're using it
; 585  : 	EnterCriticalSection(&cs_update);	

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	call	DWORD PTR __imp__EnterCriticalSection@4
$LN2@GetLODLeve:

; 586  : 	// Figure out the highest detail level which has the required data available
; 587  : 	while (
; 588  : 		lod <= maxLOD &&
; 589  : 		blockLists[lod].RangeFromCenter( row, col ) >= blockLists[lod].GetAvailablePostRange() 
; 590  : 	){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _lod$[ebp]
	cmp	eax, DWORD PTR [edx+60]
	jg	SHORT $LN1@GetLODLeve
	mov	ecx, DWORD PTR _col$[ebp]
	push	ecx
	mov	edx, DWORD PTR _row$[ebp]
	push	edx
	mov	ecx, DWORD PTR _lod$[ebp]
	imul	ecx, 52					; 00000034H
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+24]
	call	?RangeFromCenter@TBlockList@@QAEHHH@Z	; TBlockList::RangeFromCenter
	mov	esi, eax
	mov	ecx, DWORD PTR _lod$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	call	?GetAvailablePostRange@TBlockList@@QAEHXZ ; TBlockList::GetAvailablePostRange
	cmp	esi, eax
	jl	SHORT $LN1@GetLODLeve

; 591  : 		row >>= 1;

	mov	eax, DWORD PTR _row$[ebp]
	sar	eax, 1
	mov	DWORD PTR _row$[ebp], eax

; 592  : 		col >>= 1;

	mov	ecx, DWORD PTR _col$[ebp]
	sar	ecx, 1
	mov	DWORD PTR _col$[ebp], ecx

; 593  : 		++lod;

	mov	edx, DWORD PTR _lod$[ebp]
	add	edx, 1
	mov	DWORD PTR _lod$[ebp], edx

; 594  : 	}

	jmp	SHORT $LN2@GetLODLeve
$LN1@GetLODLeve:

; 595  : 	LeaveCriticalSection(&cs_update);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	call	DWORD PTR __imp__LeaveCriticalSection@4

; 596  : 	return lod;

	mov	eax, DWORD PTR _lod$[ebp]

; 597  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?GetLODLevel@TViewPoint@@ABEHMM@Z ENDP			; TViewPoint::GetLODLevel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tviewpnt.h
;	COMDAT ?Z@TViewPoint@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Z@TViewPoint@@QAEMXZ PROC				; TViewPoint::Z, COMDAT
; _this$ = ecx

; 117  : 	float	Z( void )	{ return pos.z; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+16]
	mov	esp, ebp
	pop	ebp
	ret	0
?Z@TViewPoint@@QAEMXZ ENDP				; TViewPoint::Z
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tviewpnt.h
;	COMDAT ?Y@TViewPoint@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Y@TViewPoint@@QAEMXZ PROC				; TViewPoint::Y, COMDAT
; _this$ = ecx

; 116  : 	float	Y( void )	{ return pos.y; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	esp, ebp
	pop	ebp
	ret	0
?Y@TViewPoint@@QAEMXZ ENDP				; TViewPoint::Y
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tviewpnt.h
;	COMDAT ?X@TViewPoint@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X@TViewPoint@@QAEMXZ PROC				; TViewPoint::X, COMDAT
; _this$ = ecx

; 115  : 	float	X( void )	{ return pos.x; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?X@TViewPoint@@QAEMXZ ENDP				; TViewPoint::X
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\terrain\tviewpnt.cpp
_TEXT	SEGMENT
tv827 = -272						; size = 4
tv519 = -268						; size = 4
tv813 = -264						; size = 4
tv843 = -260						; size = 4
tv857 = -256						; size = 4
tv629 = -252						; size = 4
tv771 = -248						; size = 4
tv557 = -244						; size = 4
tv767 = -240						; size = 4
tv847 = -236						; size = 4
tv855 = -232						; size = 4
tv602 = -228						; size = 4
tv761 = -224						; size = 4
tv588 = -220						; size = 4
tv757 = -216						; size = 4
tv841 = -212						; size = 4
tv853 = -208						; size = 4
tv639 = -204						; size = 4
tv730 = -200						; size = 4
tv633 = -196						; size = 4
tv726 = -192						; size = 4
tv845 = -188						; size = 4
tv851 = -184						; size = 4
tv598 = -180						; size = 4
tv720 = -176						; size = 4
tv592 = -172						; size = 4
tv716 = -168						; size = 4
tv571 = -164						; size = 4
tv699 = -160						; size = 4
tv552 = -156						; size = 4
tv685 = -152						; size = 4
tv545 = -148						; size = 4
tv849 = -144						; size = 4
tv643 = -140						; size = 4
tv505 = -136						; size = 4
_dzdx$ = -132						; size = 4
tv78 = -128						; size = 4
_dydx$ = -124						; size = 4
tv221 = -120						; size = 4
tv339 = -116						; size = 4
tv83 = -112						; size = 4
tv335 = -108						; size = 4
tv219 = -104						; size = 4
_dzdy$ = -100						; size = 4
tv85 = -96						; size = 4
_dxdy$ = -92						; size = 4
tv81 = -88						; size = 4
_endCol$ = -84						; size = 4
_endRow$ = -80						; size = 4
_hStep$ = -76						; size = 4
_prevRow$ = -72						; size = 4
_z$ = -68						; size = 4
_vStep$ = -64						; size = 4
_prevCol$ = -60						; size = 4
_zt$ = -56						; size = 4
_stepRt$ = -52						; size = 4
_stepUp$ = -48						; size = 4
_yt$ = -44						; size = 4
_xt$ = -40						; size = 4
_range$ = -36						; size = 4
_x$ = -32						; size = 4
_rowt$ = -28						; size = 4
_colt$ = -24						; size = 4
_y$ = -20						; size = 4
_col$ = -16						; size = 4
_row$ = -12						; size = 4
_LOD$ = -8						; size = 4
_this$ = -4						; size = 4
_dir$ = 8						; size = 4
_intersection$ = 12					; size = 4
?GroundIntersection@TViewPoint@@QAEHPAUTpoint@@0@Z PROC	; TViewPoint::GroundIntersection
; _this$ = ecx

; 812  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	mov	DWORD PTR _this$[ebp], ecx

; 813  : 	int		LOD;
; 814  : 	int		range;
; 815  : 	BOOL	stepUp, stepRt;
; 816  : 	int		hStep, vStep;
; 817  : 	int		endRow, endCol;
; 818  : 	int		prevRow, prevCol;
; 819  : 	float	dzdx, dzdy, dydx, dxdy;
; 820  : 	int		row, col;
; 821  : 	int		rowt, colt;
; 822  : 	float	x, y, z;
; 823  : 	float	xt, yt, zt;
; 824  : 
; 825  : 
; 826  : 	// Store parameters of the vector we're testing
; 827  : 	dzdx = dir->z / dir->x;

	mov	eax, DWORD PTR _dir$[ebp]
	mov	ecx, DWORD PTR _dir$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	divss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR _dzdx$[ebp], xmm0

; 828  : 	dzdy = dir->z / dir->y;

	mov	edx, DWORD PTR _dir$[ebp]
	mov	eax, DWORD PTR _dir$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	divss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _dzdy$[ebp], xmm0

; 829  : 	dydx = dir->y / dir->x;

	mov	ecx, DWORD PTR _dir$[ebp]
	mov	edx, DWORD PTR _dir$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	divss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR _dydx$[ebp], xmm0

; 830  : 	dxdy = dir->x / dir->y;

	mov	eax, DWORD PTR _dir$[ebp]
	mov	ecx, DWORD PTR _dir$[ebp]
	movss	xmm0, DWORD PTR [eax]
	divss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR _dxdy$[ebp], xmm0

; 831  : 	stepUp = (dir->x > 0.0f);

	mov	edx, DWORD PTR _dir$[ebp]
	movss	xmm0, DWORD PTR [edx]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN23@GroundInte
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN24@GroundInte
$LN23@GroundInte:
	mov	DWORD PTR tv78[ebp], 0
$LN24@GroundInte:
	mov	eax, DWORD PTR tv78[ebp]
	mov	DWORD PTR _stepUp$[ebp], eax

; 832  : 	stepRt = (dir->y > 0.0f);

	mov	ecx, DWORD PTR _dir$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN25@GroundInte
	mov	DWORD PTR tv81[ebp], 1
	jmp	SHORT $LN26@GroundInte
$LN25@GroundInte:
	mov	DWORD PTR tv81[ebp], 0
$LN26@GroundInte:
	mov	edx, DWORD PTR tv81[ebp]
	mov	DWORD PTR _stepRt$[ebp], edx

; 833  : 	hStep = stepRt ? 1 : -1;

	cmp	DWORD PTR _stepRt$[ebp], 0
	je	SHORT $LN27@GroundInte
	mov	DWORD PTR tv83[ebp], 1
	jmp	SHORT $LN28@GroundInte
$LN27@GroundInte:
	mov	DWORD PTR tv83[ebp], -1
$LN28@GroundInte:
	mov	eax, DWORD PTR tv83[ebp]
	mov	DWORD PTR _hStep$[ebp], eax

; 834  : 	vStep = stepUp ? 1 : -1;

	cmp	DWORD PTR _stepUp$[ebp], 0
	je	SHORT $LN29@GroundInte
	mov	DWORD PTR tv85[ebp], 1
	jmp	SHORT $LN30@GroundInte
$LN29@GroundInte:
	mov	DWORD PTR tv85[ebp], -1
$LN30@GroundInte:
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR _vStep$[ebp], ecx

; 835  : 
; 836  : 	// Lock everyone else out of this viewpoint while we're using it
; 837  : 	EnterCriticalSection( &cs_update );

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 28					; 0000001cH
	push	edx
	call	DWORD PTR __imp__EnterCriticalSection@4

; 838  : 
; 839  : 
; 840  : 	// Start at the eyepoint at the highest drawn detail level
; 841  : 	row	= WORLD_TO_LEVEL_POST( X(), highDetail );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?X@TViewPoint@@QAEMXZ			; TViewPoint::X
	fstp	DWORD PTR tv505[ebp]
	movss	xmm0, DWORD PTR tv505[ebp]
	divss	xmm0, DWORD PTR ?FeetPerPost@@3MA
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?floor@@YAMM@Z				; floor
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+64]
	sar	eax, cl
	mov	DWORD PTR _row$[ebp], eax

; 842  : 	col	= WORLD_TO_LEVEL_POST( Y(), highDetail );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Y@TViewPoint@@QAEMXZ			; TViewPoint::Y
	fstp	DWORD PTR tv519[ebp]
	movss	xmm0, DWORD PTR tv519[ebp]
	divss	xmm0, DWORD PTR ?FeetPerPost@@3MA
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?floor@@YAMM@Z				; floor
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+64]
	sar	eax, cl
	mov	DWORD PTR _col$[ebp], eax

; 843  : 
; 844  : 
; 845  : 	// Walk through all the LODs being drawn
; 846  : 	for (LOD = highDetail; LOD <= lowDetail; LOD++) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _LOD$[ebp], ecx
	jmp	SHORT $LN20@GroundInte
$LN19@GroundInte:
	mov	edx, DWORD PTR _LOD$[ebp]
	add	edx, 1
	mov	DWORD PTR _LOD$[ebp], edx
$LN20@GroundInte:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _LOD$[ebp]
	cmp	ecx, DWORD PTR [eax+68]
	jg	$LN18@GroundInte

; 847  : 
; 848  : 		// Get the available data range at this LOD -- skip if we don't have anything available
; 849  : 		range = blockLists[LOD].GetAvailablePostRange() - 1;

	mov	ecx, DWORD PTR _LOD$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	call	?GetAvailablePostRange@TBlockList@@QAEHXZ ; TBlockList::GetAvailablePostRange
	sub	eax, 1
	mov	DWORD PTR _range$[ebp], eax

; 850  : 		if (range <= 0) {

	cmp	DWORD PTR _range$[ebp], 0
	jg	SHORT $LN17@GroundInte

; 851  : 			row >>= 1;

	mov	eax, DWORD PTR _row$[ebp]
	sar	eax, 1
	mov	DWORD PTR _row$[ebp], eax

; 852  : 			col >>= 1;

	mov	ecx, DWORD PTR _col$[ebp]
	sar	ecx, 1
	mov	DWORD PTR _col$[ebp], ecx

; 853  : 			continue;

	jmp	SHORT $LN19@GroundInte
$LN17@GroundInte:

; 854  : 		}
; 855  : 
; 856  : 		// Decide if we need to use x or y as the control variable
; 857  : 		if ( fabs(dir->x) > fabs(dir->y) ) {

	mov	edx, DWORD PTR _dir$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv545[ebp]
	movss	xmm0, DWORD PTR tv545[ebp]
	mov	eax, DWORD PTR _dir$[ebp]
	push	ecx
	movss	xmm1, DWORD PTR [eax+4]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv841[ebp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv552[ebp]
	movss	xmm0, DWORD PTR tv841[ebp]
	comiss	xmm0, DWORD PTR tv552[ebp]
	jbe	$LN16@GroundInte

; 858  : 			// North/South dominant vector
; 859  : 
; 860  : 			// Set up the stepping parameters
; 861  : 			if (stepUp) {

	cmp	DWORD PTR _stepUp$[ebp], 0
	je	SHORT $LN15@GroundInte

; 862  : 				endRow = WORLD_TO_LEVEL_POST( X(), LOD ) + range;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?X@TViewPoint@@QAEMXZ			; TViewPoint::X
	fstp	DWORD PTR tv557[ebp]
	movss	xmm0, DWORD PTR tv557[ebp]
	divss	xmm0, DWORD PTR ?FeetPerPost@@3MA
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?floor@@YAMM@Z				; floor
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, DWORD PTR _LOD$[ebp]
	sar	eax, cl
	add	eax, DWORD PTR _range$[ebp]
	mov	DWORD PTR _endRow$[ebp], eax

; 863  : 				row+=1;

	mov	ecx, DWORD PTR _row$[ebp]
	add	ecx, 1
	mov	DWORD PTR _row$[ebp], ecx

; 864  : 			} else {

	jmp	SHORT $LN14@GroundInte
$LN15@GroundInte:

; 865  : 				endRow = WORLD_TO_LEVEL_POST( X(), LOD ) - range;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?X@TViewPoint@@QAEMXZ			; TViewPoint::X
	fstp	DWORD PTR tv571[ebp]
	movss	xmm0, DWORD PTR tv571[ebp]
	divss	xmm0, DWORD PTR ?FeetPerPost@@3MA
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?floor@@YAMM@Z				; floor
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, DWORD PTR _LOD$[ebp]
	sar	eax, cl
	sub	eax, DWORD PTR _range$[ebp]
	mov	DWORD PTR _endRow$[ebp], eax
$LN14@GroundInte:

; 866  : 			}
; 867  : 
; 868  : 			// Walk the line
; 869  : 			while (row != endRow) {

	mov	edx, DWORD PTR _row$[ebp]
	cmp	edx, DWORD PTR _endRow$[ebp]
	je	$LN12@GroundInte

; 870  : 				
; 871  : 				// Compute row/col for next check
; 872  : 				x = LEVEL_POST_TO_WORLD( row, LOD );

	mov	eax, DWORD PTR _row$[ebp]
	mov	ecx, DWORD PTR _LOD$[ebp]
	shl	eax, cl
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ?FeetPerPost@@3MA
	movss	DWORD PTR _x$[ebp], xmm0

; 873  : 				prevCol = col;

	mov	ecx, DWORD PTR _col$[ebp]
	mov	DWORD PTR _prevCol$[ebp], ecx

; 874  : 				y = Y() + dydx*(x - X());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Y@TViewPoint@@QAEMXZ			; TViewPoint::Y
	fstp	DWORD PTR tv588[ebp]
	movss	xmm0, DWORD PTR tv588[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv843[ebp], xmm0
	call	?X@TViewPoint@@QAEMXZ			; TViewPoint::X
	fstp	DWORD PTR tv592[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR tv592[ebp]
	mulss	xmm0, DWORD PTR _dydx$[ebp]
	movss	xmm1, DWORD PTR tv843[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _y$[ebp], xmm1

; 875  : 				z = Z() + dzdx*(x - X());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Z@TViewPoint@@QAEMXZ			; TViewPoint::Z
	fstp	DWORD PTR tv598[ebp]
	movss	xmm0, DWORD PTR tv598[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv845[ebp], xmm0
	call	?X@TViewPoint@@QAEMXZ			; TViewPoint::X
	fstp	DWORD PTR tv602[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR tv602[ebp]
	mulss	xmm0, DWORD PTR _dzdx$[ebp]
	movss	xmm1, DWORD PTR tv845[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _z$[ebp], xmm1

; 876  : 				col = WORLD_TO_LEVEL_POST( y, LOD );

	movss	xmm0, DWORD PTR _y$[ebp]
	divss	xmm0, DWORD PTR ?FeetPerPost@@3MA
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?floor@@YAMM@Z				; floor
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, DWORD PTR _LOD$[ebp]
	sar	eax, cl
	mov	DWORD PTR _col$[ebp], eax

; 877  : 
; 878  : 				// Do vertical edge check if we've changed columns
; 879  : 				if (col != prevCol) {

	mov	edx, DWORD PTR _col$[ebp]
	cmp	edx, DWORD PTR _prevCol$[ebp]
	je	$LN10@GroundInte

; 880  : 
; 881  : 					// Compute row/col for the check
; 882  : 					rowt = min( row, row-vStep );

	mov	eax, DWORD PTR _row$[ebp]
	sub	eax, DWORD PTR _vStep$[ebp]
	cmp	DWORD PTR _row$[ebp], eax
	jge	SHORT $LN31@GroundInte
	mov	ecx, DWORD PTR _row$[ebp]
	mov	DWORD PTR tv219[ebp], ecx
	jmp	SHORT $LN32@GroundInte
$LN31@GroundInte:
	mov	edx, DWORD PTR _row$[ebp]
	sub	edx, DWORD PTR _vStep$[ebp]
	mov	DWORD PTR tv219[ebp], edx
$LN32@GroundInte:
	mov	eax, DWORD PTR tv219[ebp]
	mov	DWORD PTR _rowt$[ebp], eax

; 883  : 					colt = max( col, prevCol );

	mov	ecx, DWORD PTR _col$[ebp]
	cmp	ecx, DWORD PTR _prevCol$[ebp]
	jle	SHORT $LN33@GroundInte
	mov	edx, DWORD PTR _col$[ebp]
	mov	DWORD PTR tv221[ebp], edx
	jmp	SHORT $LN34@GroundInte
$LN33@GroundInte:
	mov	eax, DWORD PTR _prevCol$[ebp]
	mov	DWORD PTR tv221[ebp], eax
$LN34@GroundInte:
	mov	ecx, DWORD PTR tv221[ebp]
	mov	DWORD PTR _colt$[ebp], ecx

; 884  : 					yt = LEVEL_POST_TO_WORLD( colt, LOD );

	mov	edx, DWORD PTR _colt$[ebp]
	mov	ecx, DWORD PTR _LOD$[ebp]
	shl	edx, cl
	cvtsi2ss xmm0, edx
	mulss	xmm0, DWORD PTR ?FeetPerPost@@3MA
	movss	DWORD PTR _yt$[ebp], xmm0

; 885  : 					xt = X() + dxdy*(yt - Y());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?X@TViewPoint@@QAEMXZ			; TViewPoint::X
	fstp	DWORD PTR tv629[ebp]
	movss	xmm0, DWORD PTR tv629[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv847[ebp], xmm0
	call	?Y@TViewPoint@@QAEMXZ			; TViewPoint::Y
	fstp	DWORD PTR tv633[ebp]
	movss	xmm0, DWORD PTR _yt$[ebp]
	subss	xmm0, DWORD PTR tv633[ebp]
	mulss	xmm0, DWORD PTR _dxdy$[ebp]
	movss	xmm1, DWORD PTR tv847[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _xt$[ebp], xmm1

; 886  : 					zt = Z() + dzdy*(yt - Y());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Z@TViewPoint@@QAEMXZ			; TViewPoint::Z
	fstp	DWORD PTR tv639[ebp]
	movss	xmm0, DWORD PTR tv639[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv849[ebp], xmm0
	call	?Y@TViewPoint@@QAEMXZ			; TViewPoint::Y
	fstp	DWORD PTR tv643[ebp]
	movss	xmm0, DWORD PTR _yt$[ebp]
	subss	xmm0, DWORD PTR tv643[ebp]
	mulss	xmm0, DWORD PTR _dzdy$[ebp]
	movss	xmm1, DWORD PTR tv849[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _zt$[ebp], xmm1

; 887  : 
; 888  : 					// Check vertical edge we crossed
; 889  : 					if (verticalEdgeTest( rowt, colt, xt, yt, zt, LOD )) {

	mov	eax, DWORD PTR _LOD$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _zt$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _yt$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _xt$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _colt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rowt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?verticalEdgeTest@TViewPoint@@AAEHHHMMMH@Z ; TViewPoint::verticalEdgeTest
	test	eax, eax
	je	SHORT $LN10@GroundInte

; 890  : 						LineSquareIntersection( rowt, colt-stepRt, dir, intersection, LOD );

	mov	eax, DWORD PTR _LOD$[ebp]
	push	eax
	mov	ecx, DWORD PTR _intersection$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dir$[ebp]
	push	edx
	mov	eax, DWORD PTR _colt$[ebp]
	sub	eax, DWORD PTR _stepRt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rowt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LineSquareIntersection@TViewPoint@@AAEXHHPAUTpoint@@0H@Z ; TViewPoint::LineSquareIntersection

; 891  : 
; 892  : 						// Unlock the viewpoint
; 893  : 						LeaveCriticalSection( &cs_update );

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 28					; 0000001cH
	push	edx
	call	DWORD PTR __imp__LeaveCriticalSection@4

; 894  : 
; 895  : 						return TRUE;

	mov	eax, 1
	jmp	$LN21@GroundInte
$LN10@GroundInte:

; 896  : 					}
; 897  : 
; 898  : 				}
; 899  : 
; 900  : 				// Check horizontal edge between (row,col) and (row,col+1)
; 901  : 				if (horizontalEdgeTest( row, col, x, y, z, LOD )) {

	mov	eax, DWORD PTR _LOD$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _col$[ebp]
	push	ecx
	mov	edx, DWORD PTR _row$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?horizontalEdgeTest@TViewPoint@@AAEHHHMMMH@Z ; TViewPoint::horizontalEdgeTest
	test	eax, eax
	je	SHORT $LN9@GroundInte

; 902  : 					LineSquareIntersection( row-stepUp, col, dir, intersection, LOD );

	mov	eax, DWORD PTR _LOD$[ebp]
	push	eax
	mov	ecx, DWORD PTR _intersection$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dir$[ebp]
	push	edx
	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _row$[ebp]
	sub	ecx, DWORD PTR _stepUp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LineSquareIntersection@TViewPoint@@AAEXHHPAUTpoint@@0H@Z ; TViewPoint::LineSquareIntersection

; 903  : 
; 904  : 					// Unlock the viewpoint
; 905  : 					LeaveCriticalSection( &cs_update );

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 28					; 0000001cH
	push	edx
	call	DWORD PTR __imp__LeaveCriticalSection@4

; 906  : 
; 907  : 					return TRUE;

	mov	eax, 1
	jmp	$LN21@GroundInte
$LN9@GroundInte:

; 908  : 				}
; 909  : 
; 910  : 
; 911  : 				// Take on vertical step
; 912  : 				row += vStep;

	mov	eax, DWORD PTR _row$[ebp]
	add	eax, DWORD PTR _vStep$[ebp]
	mov	DWORD PTR _row$[ebp], eax

; 913  : 			}

	jmp	$LN14@GroundInte
$LN12@GroundInte:

; 914  : 		} else {

	jmp	$LN4@GroundInte
$LN16@GroundInte:

; 915  : 			// East/West dominant vector
; 916  : 
; 917  : 			// Set up the stepping parameters
; 918  : 			if (stepRt) {

	cmp	DWORD PTR _stepRt$[ebp], 0
	je	SHORT $LN7@GroundInte

; 919  : 				endCol = WORLD_TO_LEVEL_POST( Y(), LOD ) + range;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Y@TViewPoint@@QAEMXZ			; TViewPoint::Y
	fstp	DWORD PTR tv685[ebp]
	movss	xmm0, DWORD PTR tv685[ebp]
	divss	xmm0, DWORD PTR ?FeetPerPost@@3MA
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?floor@@YAMM@Z				; floor
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, DWORD PTR _LOD$[ebp]
	sar	eax, cl
	add	eax, DWORD PTR _range$[ebp]
	mov	DWORD PTR _endCol$[ebp], eax

; 920  : 				col+=1;

	mov	ecx, DWORD PTR _col$[ebp]
	add	ecx, 1
	mov	DWORD PTR _col$[ebp], ecx

; 921  : 			} else {

	jmp	SHORT $LN6@GroundInte
$LN7@GroundInte:

; 922  : 				endCol = WORLD_TO_LEVEL_POST( Y(), LOD ) - range;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Y@TViewPoint@@QAEMXZ			; TViewPoint::Y
	fstp	DWORD PTR tv699[ebp]
	movss	xmm0, DWORD PTR tv699[ebp]
	divss	xmm0, DWORD PTR ?FeetPerPost@@3MA
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?floor@@YAMM@Z				; floor
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, DWORD PTR _LOD$[ebp]
	sar	eax, cl
	sub	eax, DWORD PTR _range$[ebp]
	mov	DWORD PTR _endCol$[ebp], eax
$LN6@GroundInte:

; 923  : 			}
; 924  : 
; 925  : 			// Walk the line
; 926  : 			while (col != endCol) {

	mov	edx, DWORD PTR _col$[ebp]
	cmp	edx, DWORD PTR _endCol$[ebp]
	je	$LN4@GroundInte

; 927  : 				
; 928  : 				// Compute row/col for next check
; 929  : 				y = LEVEL_POST_TO_WORLD( col, LOD );

	mov	eax, DWORD PTR _col$[ebp]
	mov	ecx, DWORD PTR _LOD$[ebp]
	shl	eax, cl
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ?FeetPerPost@@3MA
	movss	DWORD PTR _y$[ebp], xmm0

; 930  : 				prevRow = row;

	mov	ecx, DWORD PTR _row$[ebp]
	mov	DWORD PTR _prevRow$[ebp], ecx

; 931  : 				x = X() + dxdy*(y - Y());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?X@TViewPoint@@QAEMXZ			; TViewPoint::X
	fstp	DWORD PTR tv716[ebp]
	movss	xmm0, DWORD PTR tv716[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv851[ebp], xmm0
	call	?Y@TViewPoint@@QAEMXZ			; TViewPoint::Y
	fstp	DWORD PTR tv720[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	subss	xmm0, DWORD PTR tv720[ebp]
	mulss	xmm0, DWORD PTR _dxdy$[ebp]
	movss	xmm1, DWORD PTR tv851[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _x$[ebp], xmm1

; 932  : 				z = Z() + dzdy*(y - Y());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Z@TViewPoint@@QAEMXZ			; TViewPoint::Z
	fstp	DWORD PTR tv726[ebp]
	movss	xmm0, DWORD PTR tv726[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv853[ebp], xmm0
	call	?Y@TViewPoint@@QAEMXZ			; TViewPoint::Y
	fstp	DWORD PTR tv730[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	subss	xmm0, DWORD PTR tv730[ebp]
	mulss	xmm0, DWORD PTR _dzdy$[ebp]
	movss	xmm1, DWORD PTR tv853[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _z$[ebp], xmm1

; 933  : 				row = WORLD_TO_LEVEL_POST( x, LOD );

	movss	xmm0, DWORD PTR _x$[ebp]
	divss	xmm0, DWORD PTR ?FeetPerPost@@3MA
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?floor@@YAMM@Z				; floor
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, DWORD PTR _LOD$[ebp]
	sar	eax, cl
	mov	DWORD PTR _row$[ebp], eax

; 934  : 
; 935  : 				// Do horizontal edge check if we've changed rows
; 936  : 				if (row != prevRow) {

	mov	edx, DWORD PTR _row$[ebp]
	cmp	edx, DWORD PTR _prevRow$[ebp]
	je	$LN2@GroundInte

; 937  : 					
; 938  : 					// Compute row/col for next check
; 939  : 					rowt = max( row, prevRow );

	mov	eax, DWORD PTR _row$[ebp]
	cmp	eax, DWORD PTR _prevRow$[ebp]
	jle	SHORT $LN35@GroundInte
	mov	ecx, DWORD PTR _row$[ebp]
	mov	DWORD PTR tv335[ebp], ecx
	jmp	SHORT $LN36@GroundInte
$LN35@GroundInte:
	mov	edx, DWORD PTR _prevRow$[ebp]
	mov	DWORD PTR tv335[ebp], edx
$LN36@GroundInte:
	mov	eax, DWORD PTR tv335[ebp]
	mov	DWORD PTR _rowt$[ebp], eax

; 940  : 					colt = min( col, col-hStep );

	mov	ecx, DWORD PTR _col$[ebp]
	sub	ecx, DWORD PTR _hStep$[ebp]
	cmp	DWORD PTR _col$[ebp], ecx
	jge	SHORT $LN37@GroundInte
	mov	edx, DWORD PTR _col$[ebp]
	mov	DWORD PTR tv339[ebp], edx
	jmp	SHORT $LN38@GroundInte
$LN37@GroundInte:
	mov	eax, DWORD PTR _col$[ebp]
	sub	eax, DWORD PTR _hStep$[ebp]
	mov	DWORD PTR tv339[ebp], eax
$LN38@GroundInte:
	mov	ecx, DWORD PTR tv339[ebp]
	mov	DWORD PTR _colt$[ebp], ecx

; 941  : 					xt = LEVEL_POST_TO_WORLD( rowt, LOD );

	mov	edx, DWORD PTR _rowt$[ebp]
	mov	ecx, DWORD PTR _LOD$[ebp]
	shl	edx, cl
	cvtsi2ss xmm0, edx
	mulss	xmm0, DWORD PTR ?FeetPerPost@@3MA
	movss	DWORD PTR _xt$[ebp], xmm0

; 942  : 					yt = Y() + dydx*(xt - X());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Y@TViewPoint@@QAEMXZ			; TViewPoint::Y
	fstp	DWORD PTR tv757[ebp]
	movss	xmm0, DWORD PTR tv757[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv855[ebp], xmm0
	call	?X@TViewPoint@@QAEMXZ			; TViewPoint::X
	fstp	DWORD PTR tv761[ebp]
	movss	xmm0, DWORD PTR _xt$[ebp]
	subss	xmm0, DWORD PTR tv761[ebp]
	mulss	xmm0, DWORD PTR _dydx$[ebp]
	movss	xmm1, DWORD PTR tv855[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _yt$[ebp], xmm1

; 943  : 					zt = Z() + dzdx*(xt - X());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Z@TViewPoint@@QAEMXZ			; TViewPoint::Z
	fstp	DWORD PTR tv767[ebp]
	movss	xmm0, DWORD PTR tv767[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv857[ebp], xmm0
	call	?X@TViewPoint@@QAEMXZ			; TViewPoint::X
	fstp	DWORD PTR tv771[ebp]
	movss	xmm0, DWORD PTR _xt$[ebp]
	subss	xmm0, DWORD PTR tv771[ebp]
	mulss	xmm0, DWORD PTR _dzdx$[ebp]
	movss	xmm1, DWORD PTR tv857[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _zt$[ebp], xmm1

; 944  : 
; 945  : 					// Check horizontal edge between we crossed
; 946  : 					if (horizontalEdgeTest( rowt, colt, xt, yt, zt, LOD )) {

	mov	eax, DWORD PTR _LOD$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _zt$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _yt$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _xt$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _colt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rowt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?horizontalEdgeTest@TViewPoint@@AAEHHHMMMH@Z ; TViewPoint::horizontalEdgeTest
	test	eax, eax
	je	SHORT $LN2@GroundInte

; 947  : 						LineSquareIntersection( rowt-stepUp, colt, dir, intersection, LOD );

	mov	eax, DWORD PTR _LOD$[ebp]
	push	eax
	mov	ecx, DWORD PTR _intersection$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dir$[ebp]
	push	edx
	mov	eax, DWORD PTR _colt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rowt$[ebp]
	sub	ecx, DWORD PTR _stepUp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LineSquareIntersection@TViewPoint@@AAEXHHPAUTpoint@@0H@Z ; TViewPoint::LineSquareIntersection

; 948  : 
; 949  : 						// Unlock the viewpoint
; 950  : 						LeaveCriticalSection( &cs_update );

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 28					; 0000001cH
	push	edx
	call	DWORD PTR __imp__LeaveCriticalSection@4

; 951  : 
; 952  : 						return TRUE;

	mov	eax, 1
	jmp	$LN21@GroundInte
$LN2@GroundInte:

; 953  : 					}
; 954  : 
; 955  : 				}
; 956  : 
; 957  : 				// Check vertical edge between (row,col) and (row+1,col)
; 958  : 				if (verticalEdgeTest( row, col, x, y, z, LOD )) {

	mov	eax, DWORD PTR _LOD$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _col$[ebp]
	push	ecx
	mov	edx, DWORD PTR _row$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?verticalEdgeTest@TViewPoint@@AAEHHHMMMH@Z ; TViewPoint::verticalEdgeTest
	test	eax, eax
	je	SHORT $LN1@GroundInte

; 959  : 					LineSquareIntersection( row, col-stepRt, dir, intersection, LOD );

	mov	eax, DWORD PTR _LOD$[ebp]
	push	eax
	mov	ecx, DWORD PTR _intersection$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dir$[ebp]
	push	edx
	mov	eax, DWORD PTR _col$[ebp]
	sub	eax, DWORD PTR _stepRt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _row$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LineSquareIntersection@TViewPoint@@AAEXHHPAUTpoint@@0H@Z ; TViewPoint::LineSquareIntersection

; 960  : 
; 961  : 					// Unlock the viewpoint
; 962  : 					LeaveCriticalSection( &cs_update );

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 28					; 0000001cH
	push	edx
	call	DWORD PTR __imp__LeaveCriticalSection@4

; 963  : 
; 964  : 					return TRUE;

	mov	eax, 1
	jmp	$LN21@GroundInte
$LN1@GroundInte:

; 965  : 				}
; 966  : 
; 967  : 
; 968  : 				// Take a horizontal step
; 969  : 				col += hStep;

	mov	eax, DWORD PTR _col$[ebp]
	add	eax, DWORD PTR _hStep$[ebp]
	mov	DWORD PTR _col$[ebp], eax

; 970  : 			}

	jmp	$LN6@GroundInte
$LN4@GroundInte:

; 971  : 		}
; 972  : 
; 973  : 
; 974  : 		// TODO:  Don't restart search at eyepoint each time
; 975  : #if 0
; 976  : 		// Convert the row/col address we were about to check into the next
; 977  : 		// lowest detail level for the next loop iteration
; 978  : 		// (backup one post for good measure)
; 979  : 		row = (row - vStep) >> 1;
; 980  : 		col = (col - hStep) >> 1;
; 981  : #else
; 982  : 		// Restart the search at the eyepoint to avoid the case where
; 983  : 		// we might be above ground at one LOD, but under at the next.
; 984  : 		row	= WORLD_TO_LEVEL_POST( X(), LOD+1 );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?X@TViewPoint@@QAEMXZ			; TViewPoint::X
	fstp	DWORD PTR tv813[ebp]
	movss	xmm0, DWORD PTR tv813[ebp]
	divss	xmm0, DWORD PTR ?FeetPerPost@@3MA
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?floor@@YAMM@Z				; floor
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, DWORD PTR _LOD$[ebp]
	add	ecx, 1
	sar	eax, cl
	mov	DWORD PTR _row$[ebp], eax

; 985  : 		col	= WORLD_TO_LEVEL_POST( Y(), LOD+1 );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Y@TViewPoint@@QAEMXZ			; TViewPoint::Y
	fstp	DWORD PTR tv827[ebp]
	movss	xmm0, DWORD PTR tv827[ebp]
	divss	xmm0, DWORD PTR ?FeetPerPost@@3MA
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?floor@@YAMM@Z				; floor
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, DWORD PTR _LOD$[ebp]
	add	ecx, 1
	sar	eax, cl
	mov	DWORD PTR _col$[ebp], eax

; 986  : #endif
; 987  : 	}

	jmp	$LN19@GroundInte
$LN18@GroundInte:

; 988  : 
; 989  : 
; 990  : 	// Unlock the viewpoint
; 991  : 	LeaveCriticalSection( &cs_update );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	call	DWORD PTR __imp__LeaveCriticalSection@4

; 992  : 
; 993  : 	// If we got here, we didn't find an intersection with the ground
; 994  : 	return FALSE;

	xor	eax, eax
$LN21@GroundInte:

; 995  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GroundIntersection@TViewPoint@@QAEHPAUTpoint@@0@Z ENDP	; TViewPoint::GroundIntersection
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\terrain\tviewpnt.cpp
_TEXT	SEGMENT
tv335 = -56						; size = 4
tv327 = -52						; size = 4
_z$ = -48						; size = 4
tv212 = -44						; size = 4
tv167 = -40						; size = 4
_dz$ = -36						; size = 4
_Px$ = -32						; size = 4
_Py$ = -28						; size = 4
_Qx$ = -24						; size = 4
_Qy$ = -20						; size = 4
_LOD$ = -16						; size = 4
_this$ = -12						; size = 4
_LOD_Q$ = -8						; size = 4
_LOD_P$ = -4						; size = 4
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
?LineOfSight@TViewPoint@@QAEHPAUTpoint@@0@Z PROC	; TViewPoint::LineOfSight
; _this$ = ecx

; 650  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 	int		Px=0, Py=0;				// row and column to lower left of p1

	mov	DWORD PTR _Px$[ebp], 0
	mov	DWORD PTR _Py$[ebp], 0

; 652  : 	int		Qx=0, Qy=0;				// row and column to lower left of p2

	mov	DWORD PTR _Qx$[ebp], 0
	mov	DWORD PTR _Qy$[ebp], 0

; 653  : 	int		LOD_P=0;				// Most detailed LOD which contains point P

	mov	DWORD PTR _LOD_P$[ebp], 0

; 654  : 	int		LOD_Q=0;				// Most detailed LOD which contains point Q

	mov	DWORD PTR _LOD_Q$[ebp], 0

; 655  : 	float	z=0.0F, dz=0.0F;		// Current LOS z and dz/per major step

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _z$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dz$[ebp], xmm0

; 656  : 
; 657  : 	
; 658  : 	// Find the most detailed LOD which contains each point
; 659  : 	for (LOD_P = minLOD; LOD_P <= maxLOD; LOD_P++) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _LOD_P$[ebp], ecx
	jmp	SHORT $LN14@LineOfSigh
$LN13@LineOfSigh:
	mov	edx, DWORD PTR _LOD_P$[ebp]
	add	edx, 1
	mov	DWORD PTR _LOD_P$[ebp], edx
$LN14@LineOfSigh:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _LOD_P$[ebp]
	cmp	ecx, DWORD PTR [eax+60]
	jg	$LN12@LineOfSigh

; 660  : 
; 661  : 		// Compute the coordinates of the lower left neighbor post
; 662  : 		Px = WORLD_TO_LEVEL_POST( p1->x, LOD_P );

	mov	edx, DWORD PTR _p1$[ebp]
	movss	xmm0, DWORD PTR [edx]
	divss	xmm0, DWORD PTR ?FeetPerPost@@3MA
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?floor@@YAMM@Z				; floor
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, DWORD PTR _LOD_P$[ebp]
	sar	eax, cl
	mov	DWORD PTR _Px$[ebp], eax

; 663  : 		Py = WORLD_TO_LEVEL_POST( p1->y, LOD_P );

	mov	eax, DWORD PTR _p1$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	divss	xmm0, DWORD PTR ?FeetPerPost@@3MA
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?floor@@YAMM@Z				; floor
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, DWORD PTR _LOD_P$[ebp]
	sar	eax, cl
	mov	DWORD PTR _Py$[ebp], eax

; 664  : 
; 665  : 		// If the point lies within this level's range, stop looking
; 666  : 		if ( blockLists[LOD_P].RangeFromCenter( Px, Py ) <= blockLists[LOD_P].GetAvailablePostRange() ) {

	mov	ecx, DWORD PTR _Py$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Px$[ebp]
	push	edx
	mov	ecx, DWORD PTR _LOD_P$[ebp]
	imul	ecx, 52					; 00000034H
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+24]
	call	?RangeFromCenter@TBlockList@@QAEHHH@Z	; TBlockList::RangeFromCenter
	mov	esi, eax
	mov	ecx, DWORD PTR _LOD_P$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	call	?GetAvailablePostRange@TBlockList@@QAEHXZ ; TBlockList::GetAvailablePostRange
	cmp	esi, eax
	jg	SHORT $LN11@LineOfSigh

; 667  : 			break;

	jmp	SHORT $LN12@LineOfSigh
$LN11@LineOfSigh:

; 668  : 		}
; 669  : 	}

	jmp	$LN13@LineOfSigh
$LN12@LineOfSigh:

; 670  : 	for (LOD_Q = minLOD; LOD_Q <= maxLOD; LOD_Q++) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _LOD_Q$[ebp], ecx
	jmp	SHORT $LN10@LineOfSigh
$LN9@LineOfSigh:
	mov	edx, DWORD PTR _LOD_Q$[ebp]
	add	edx, 1
	mov	DWORD PTR _LOD_Q$[ebp], edx
$LN10@LineOfSigh:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _LOD_Q$[ebp]
	cmp	ecx, DWORD PTR [eax+60]
	jg	$LN8@LineOfSigh

; 671  : 
; 672  : 		// Compute the coordinates of the lower left neighbor post
; 673  : 		Qx = WORLD_TO_LEVEL_POST( p2->x, LOD_Q );

	mov	edx, DWORD PTR _p2$[ebp]
	movss	xmm0, DWORD PTR [edx]
	divss	xmm0, DWORD PTR ?FeetPerPost@@3MA
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?floor@@YAMM@Z				; floor
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, DWORD PTR _LOD_Q$[ebp]
	sar	eax, cl
	mov	DWORD PTR _Qx$[ebp], eax

; 674  : 		Qy = WORLD_TO_LEVEL_POST( p2->y, LOD_Q );

	mov	eax, DWORD PTR _p2$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	divss	xmm0, DWORD PTR ?FeetPerPost@@3MA
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?floor@@YAMM@Z				; floor
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, DWORD PTR _LOD_Q$[ebp]
	sar	eax, cl
	mov	DWORD PTR _Qy$[ebp], eax

; 675  : 
; 676  : 		// If the point lies within this level's range, stop looking
; 677  : 		if ( blockLists[LOD_Q].RangeFromCenter( Qx, Qy ) <= blockLists[LOD_Q].GetAvailablePostRange() ) {

	mov	ecx, DWORD PTR _Qy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Qx$[ebp]
	push	edx
	mov	ecx, DWORD PTR _LOD_Q$[ebp]
	imul	ecx, 52					; 00000034H
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+24]
	call	?RangeFromCenter@TBlockList@@QAEHHH@Z	; TBlockList::RangeFromCenter
	mov	esi, eax
	mov	ecx, DWORD PTR _LOD_Q$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	call	?GetAvailablePostRange@TBlockList@@QAEHXZ ; TBlockList::GetAvailablePostRange
	cmp	esi, eax
	jg	SHORT $LN7@LineOfSigh

; 678  : 			break;

	jmp	SHORT $LN8@LineOfSigh
$LN7@LineOfSigh:

; 679  : 		}
; 680  : 	}

	jmp	$LN9@LineOfSigh
$LN8@LineOfSigh:

; 681  : 
; 682  : 	// TODO:  make this work over multiple LODs
; 683  : 	// For now, use the highest detail which contains both points
; 684  : 	int LOD = max( LOD_Q, LOD_P );

	mov	eax, DWORD PTR _LOD_Q$[ebp]
	cmp	eax, DWORD PTR _LOD_P$[ebp]
	jle	SHORT $LN17@LineOfSigh
	mov	ecx, DWORD PTR _LOD_Q$[ebp]
	mov	DWORD PTR tv167[ebp], ecx
	jmp	SHORT $LN18@LineOfSigh
$LN17@LineOfSigh:
	mov	edx, DWORD PTR _LOD_P$[ebp]
	mov	DWORD PTR tv167[ebp], edx
$LN18@LineOfSigh:
	mov	eax, DWORD PTR tv167[ebp]
	mov	DWORD PTR _LOD$[ebp], eax

; 685  : 
; 686  : 	// TODO:  Clip the segment to the available map data
; 687  : 	// For now, if one or both of the points are entirely off our current map,
; 688  : 	// return FALSE (can't see between points)
; 689  : 	if (LOD > maxLOD) {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _LOD$[ebp]
	cmp	edx, DWORD PTR [ecx+60]
	jle	SHORT $LN6@LineOfSigh

; 690  : #define LOS_TRUE_IF_UNLOADED 1
; 691  : #if LOS_TRUE_IF_UNLOADED
; 692  : 		// sfr: return TRUE if not loaded!!
; 693  : 		return TRUE;

	mov	eax, 1
	jmp	$LN15@LineOfSigh
$LN6@LineOfSigh:

; 694  : #else
; 695  : 		return FALSE;
; 696  : #endif
; 697  : 
; 698  : 	}
; 699  : 
; 700  : 
; 701  : 	// Adjust the post coordinates as required
; 702  : 	if (LOD_P < LOD) {

	mov	eax, DWORD PTR _LOD_P$[ebp]
	cmp	eax, DWORD PTR _LOD$[ebp]
	jge	SHORT $LN5@LineOfSigh

; 703  : 		Px >>= LOD-LOD_P;

	mov	ecx, DWORD PTR _LOD$[ebp]
	sub	ecx, DWORD PTR _LOD_P$[ebp]
	mov	edx, DWORD PTR _Px$[ebp]
	sar	edx, cl
	mov	DWORD PTR _Px$[ebp], edx

; 704  : 		Py >>= LOD-LOD_P;

	mov	ecx, DWORD PTR _LOD$[ebp]
	sub	ecx, DWORD PTR _LOD_P$[ebp]
	mov	eax, DWORD PTR _Py$[ebp]
	sar	eax, cl
	mov	DWORD PTR _Py$[ebp], eax
$LN5@LineOfSigh:

; 705  : 	}
; 706  : 	if (LOD_Q < LOD) {

	mov	ecx, DWORD PTR _LOD_Q$[ebp]
	cmp	ecx, DWORD PTR _LOD$[ebp]
	jge	SHORT $LN4@LineOfSigh

; 707  : 		Qx >>= LOD-LOD_Q;

	mov	ecx, DWORD PTR _LOD$[ebp]
	sub	ecx, DWORD PTR _LOD_Q$[ebp]
	mov	edx, DWORD PTR _Qx$[ebp]
	sar	edx, cl
	mov	DWORD PTR _Qx$[ebp], edx

; 708  : 		Qy >>= LOD-LOD_Q;

	mov	ecx, DWORD PTR _LOD$[ebp]
	sub	ecx, DWORD PTR _LOD_Q$[ebp]
	mov	eax, DWORD PTR _Qy$[ebp]
	sar	eax, cl
	mov	DWORD PTR _Qy$[ebp], eax
$LN4@LineOfSigh:

; 709  : 	}
; 710  : 
; 711  : 
; 712  : 	// Only check this LOD if at least one end point is "in" the terrain
; 713  : 	if ( (p1->z > blockLists[LOD].GetMinZ()) || (p2->z > blockLists[LOD].GetMinZ()) ) {

	mov	ecx, DWORD PTR _LOD$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	call	?GetMinZ@TBlockList@@QAEMXZ		; TBlockList::GetMinZ
	fstp	DWORD PTR tv327[ebp]
	mov	eax, DWORD PTR _p1$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	comiss	xmm0, DWORD PTR tv327[ebp]
	ja	SHORT $LN2@LineOfSigh
	mov	ecx, DWORD PTR _LOD$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	call	?GetMinZ@TBlockList@@QAEMXZ		; TBlockList::GetMinZ
	fstp	DWORD PTR tv335[ebp]
	mov	eax, DWORD PTR _p2$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	comiss	xmm0, DWORD PTR tv335[ebp]
	jbe	$LN1@LineOfSigh
$LN2@LineOfSigh:

; 714  : 
; 715  : 		// Compute the z step rate
; 716  : 		z  = p1->z;

	mov	ecx, DWORD PTR _p1$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR _z$[ebp], xmm0

; 717  : 		dz = (p2->z - p1->z) / max( abs(Qx-Px), abs(Qy-Py) );

	mov	edx, DWORD PTR _Qx$[ebp]
	sub	edx, DWORD PTR _Px$[ebp]
	push	edx
	call	_abs
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR _Qy$[ebp]
	sub	eax, DWORD PTR _Py$[ebp]
	push	eax
	call	_abs
	add	esp, 4
	cmp	esi, eax
	jle	SHORT $LN19@LineOfSigh
	mov	ecx, DWORD PTR _Qx$[ebp]
	sub	ecx, DWORD PTR _Px$[ebp]
	push	ecx
	call	_abs
	add	esp, 4
	mov	DWORD PTR tv212[ebp], eax
	jmp	SHORT $LN20@LineOfSigh
$LN19@LineOfSigh:
	mov	edx, DWORD PTR _Qy$[ebp]
	sub	edx, DWORD PTR _Py$[ebp]
	push	edx
	call	_abs
	add	esp, 4
	mov	DWORD PTR tv212[ebp], eax
$LN20@LineOfSigh:
	mov	eax, DWORD PTR _p2$[ebp]
	mov	ecx, DWORD PTR _p1$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	cvtsi2ss xmm1, DWORD PTR tv212[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR _dz$[ebp], xmm0

; 718  : 
; 719  :         /****************************************************\
; 720  :         Don't know why, buy Leon reports empirically better
; 721  :         results with the following factor included.  I'll
; 722  :         hopefully look into it later, but for now...
; 723  :         \****************************************************/
; 724  :         dz *= 0.2f;

	movss	xmm0, DWORD PTR _dz$[ebp]
	mulss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _dz$[ebp], xmm0

; 725  : 
; 726  : 		// Call the single LOD Line of Sight function
; 727  : 		if ( !SingleLODLineOfSight( Px, Py, Qx, Qy, z, dz, LOD ) ) {

	mov	edx, DWORD PTR _LOD$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _dz$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _Qy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Qx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Py$[ebp]
	push	edx
	mov	eax, DWORD PTR _Px$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SingleLODLineOfSight@TViewPoint@@AAEHHHHHMMH@Z ; TViewPoint::SingleLODLineOfSight
	test	eax, eax
	jne	SHORT $LN1@LineOfSigh

; 728  : 			return FALSE;

	xor	eax, eax
	jmp	SHORT $LN15@LineOfSigh
$LN1@LineOfSigh:

; 729  : 		}
; 730  : 
; 731  : 	}
; 732  : 
; 733  : 	return TRUE;

	mov	eax, 1
$LN15@LineOfSigh:

; 734  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?LineOfSight@TViewPoint@@QAEHPAUTpoint@@0@Z ENDP	; TViewPoint::LineOfSight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\terrain\tviewpnt.cpp
_TEXT	SEGMENT
tv84 = -12						; size = 4
_this$ = -8						; size = 4
tv74 = -4						; size = 4
_position$ = 8						; size = 4
?UnderGround@TViewPoint@@QAEHPAUTpoint@@@Z PROC		; TViewPoint::UnderGround
; _this$ = ecx

; 601  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 602  : 	return ( position->z >= GetGroundLevel( position->x, position->y ) );

	push	0
	push	0
	mov	eax, DWORD PTR _position$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _position$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGroundLevel@TViewPoint@@QAEMMMPAUTpoint@@PAH@Z ; TViewPoint::GetGroundLevel
	fstp	DWORD PTR tv84[ebp]
	mov	edx, DWORD PTR _position$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	comiss	xmm0, DWORD PTR tv84[ebp]
	jb	SHORT $LN3@UnderGroun
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@UnderGroun
$LN3@UnderGroun:
	mov	DWORD PTR tv74[ebp], 0
$LN4@UnderGroun:
	mov	eax, DWORD PTR tv74[ebp]

; 603  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?UnderGround@TViewPoint@@QAEHPAUTpoint@@@Z ENDP		; TViewPoint::UnderGround
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\terrain\tviewpnt.cpp
_TEXT	SEGMENT
tv334 = -56						; size = 4
tv296 = -52						; size = 4
_y_pos$ = -48						; size = 4
_x_pos$ = -44						; size = 4
_Nz$ = -40						; size = 4
_Ny$ = -36						; size = 4
_Nx$ = -32						; size = 4
_p3$ = -28						; size = 4
_p1$ = -24						; size = 4
_p2$ = -20						; size = 4
_row$ = -16						; size = 4
_col$ = -12						; size = 4
_this$ = -8						; size = 4
_LOD$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_normal$ = 16						; size = 4
_lod$ = 20						; size = 4
?GetGroundLevel@TViewPoint@@QAEMMMPAUTpoint@@PAH@Z PROC	; TViewPoint::GetGroundLevel
; _this$ = ecx

; 465  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 466  : 	int		LOD;
; 467  : 	int		row, col;
; 468  : 	float	x_pos, y_pos;
; 469  : 	Tpost	*p1, *p2, *p3;
; 470  : 	float	Nx, Ny, Nz;
; 471  : 
; 472  : 
; 473  : 	// Compute the level post address of the point of interest
; 474  : 	LOD = minLOD;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _LOD$[ebp], ecx

; 475  : 	row = WORLD_TO_LEVEL_POST( x, LOD );

	movss	xmm0, DWORD PTR _x$[ebp]
	divss	xmm0, DWORD PTR ?FeetPerPost@@3MA
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?floor@@YAMM@Z				; floor
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, DWORD PTR _LOD$[ebp]
	sar	eax, cl
	mov	DWORD PTR _row$[ebp], eax

; 476  : 	col = WORLD_TO_LEVEL_POST( y, LOD );

	movss	xmm0, DWORD PTR _y$[ebp]
	divss	xmm0, DWORD PTR ?FeetPerPost@@3MA
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?floor@@YAMM@Z				; floor
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, DWORD PTR _LOD$[ebp]
	sar	eax, cl
	mov	DWORD PTR _col$[ebp], eax

; 477  : 
; 478  : 	// Lock everyone else out of this viewpoint while we're using it
; 479  : 	EnterCriticalSection( &cs_update );

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 28					; 0000001cH
	push	edx
	call	DWORD PTR __imp__EnterCriticalSection@4
$LN13@GetGroundL:

; 480  : 	
; 481  : 	// Figure out the highest detail level which has the required data available
; 482  : 	while ( blockLists[LOD].RangeFromCenter( row, col ) >= blockLists[LOD].GetAvailablePostRange() ) {

	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _row$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _LOD$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	call	?RangeFromCenter@TBlockList@@QAEHHH@Z	; TBlockList::RangeFromCenter
	mov	esi, eax
	mov	ecx, DWORD PTR _LOD$[ebp]
	imul	ecx, 52					; 00000034H
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+24]
	call	?GetAvailablePostRange@TBlockList@@QAEHXZ ; TBlockList::GetAvailablePostRange
	cmp	esi, eax
	jl	$LN12@GetGroundL

; 483  : 		row >>= 1;

	mov	ecx, DWORD PTR _row$[ebp]
	sar	ecx, 1
	mov	DWORD PTR _row$[ebp], ecx

; 484  : 		col >>= 1;

	mov	edx, DWORD PTR _col$[ebp]
	sar	edx, 1
	mov	DWORD PTR _col$[ebp], edx

; 485  : 		LOD++;

	mov	eax, DWORD PTR _LOD$[ebp]
	add	eax, 1
	mov	DWORD PTR _LOD$[ebp], eax

; 486  : 
; 487  : 		// See if we've run out of luck
; 488  : 		if (LOD > maxLOD ) {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _LOD$[ebp]
	cmp	edx, DWORD PTR [ecx+60]
	jle	SHORT $LN11@GetGroundL

; 489  : 
; 490  : 			// Unlock the viewpoint
; 491  : 			LeaveCriticalSection( &cs_update );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	call	DWORD PTR __imp__LeaveCriticalSection@4

; 492  : 
; 493  : 			// Return some default data
; 494  : #if USE_GET_LOD_LEVEL
; 495  : 			if (lod){ *lod = LOD; }

	cmp	DWORD PTR _lod$[ebp], 0
	je	SHORT $LN10@GetGroundL
	mov	ecx, DWORD PTR _lod$[ebp]
	mov	edx, DWORD PTR _LOD$[ebp]
	mov	DWORD PTR [ecx], edx
$LN10@GetGroundL:

; 496  : #endif
; 497  : 			if (normal) {

	cmp	DWORD PTR _normal$[ebp], 0
	je	SHORT $LN9@GetGroundL

; 498  : 				normal->x = 0.0f;

	mov	eax, DWORD PTR _normal$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 499  : 				normal->y = 0.0f;

	mov	ecx, DWORD PTR _normal$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+4], xmm0

; 500  : 				normal->z = 1.0f;

	mov	edx, DWORD PTR _normal$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+8], xmm0
$LN9@GetGroundL:

; 501  : 			}
; 502  : 			return 0.0f;

	fldz
	jmp	$LN14@GetGroundL
$LN11@GetGroundL:

; 503  : 		}
; 504  : 	}

	jmp	$LN13@GetGroundL
$LN12@GetGroundL:

; 505  : 
; 506  : 	// Compute the location of interest relative to the lower left bounding post
; 507  : 	x_pos = x - LEVEL_POST_TO_WORLD( row, LOD );

	mov	eax, DWORD PTR _row$[ebp]
	mov	ecx, DWORD PTR _LOD$[ebp]
	shl	eax, cl
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ?FeetPerPost@@3MA
	movss	xmm1, DWORD PTR _x$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _x_pos$[ebp], xmm1

; 508  : 	y_pos = y - LEVEL_POST_TO_WORLD( col, LOD );

	mov	edx, DWORD PTR _col$[ebp]
	mov	ecx, DWORD PTR _LOD$[ebp]
	shl	edx, cl
	cvtsi2ss xmm0, edx
	mulss	xmm0, DWORD PTR ?FeetPerPost@@3MA
	movss	xmm1, DWORD PTR _y$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _y_pos$[ebp], xmm1

; 509  : 
; 510  : #if 0
; 511  : 	// We occasionally run into precision problems here which cause the asserts
; 512  : 	// to fail.  The basic algorithm seems to be sound, however, and this is a
; 513  : 	// non-fatal condition, so these have been disabled.
; 514  : 	ShiAssert( x_pos >= -0.05f );	ShiAssert( x_pos <= TheMap.Level(LOD)->FTperPOST() + 0.05f );
; 515  : 	ShiAssert( y_pos >= -0.05f );	ShiAssert( y_pos <= TheMap.Level(LOD)->FTperPOST() + 0.05f );
; 516  : #endif
; 517  : 			
; 518  : 
; 519  : 	// Compute the normal from the three posts which bound the point of interest
; 520  : 	p1 = blockLists[LOD].GetPost( row,   col   );

	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _row$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _LOD$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	call	?GetPost@TBlockList@@QAEPAUTpost@@HH@Z	; TBlockList::GetPost
	mov	DWORD PTR _p1$[ebp], eax

; 521  : 	p3 = blockLists[LOD].GetPost( row+1, col+1 );

	mov	eax, DWORD PTR _col$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _row$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _LOD$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	call	?GetPost@TBlockList@@QAEPAUTpost@@HH@Z	; TBlockList::GetPost
	mov	DWORD PTR _p3$[ebp], eax

; 522  : 	ShiAssert( p1 );
; 523  : 	ShiAssert( p3 );
; 524  : 	Nz = -TheMap.Level(LOD)->FTperPOST();	// (remember positive Z is down)

	mov	eax, DWORD PTR _LOD$[ebp]
	push	eax
	mov	ecx, OFFSET ?TheMap@@3VTMap@@A		; TheMap
	call	?Level@TMap@@QAEPAVTLevel@@H@Z		; TMap::Level
	mov	ecx, eax
	call	?FTperPOST@TLevel@@QAEMXZ		; TLevel::FTperPOST
	fstp	DWORD PTR tv296[ebp]
	movss	xmm0, DWORD PTR tv296[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _Nz$[ebp], xmm0

; 525  : 
; 526  : 	if (x_pos >= y_pos
; 527  : 		&& p1 && p3) // JB 011019 CTD fix

	movss	xmm0, DWORD PTR _x_pos$[ebp]
	comiss	xmm0, DWORD PTR _y_pos$[ebp]
	jb	SHORT $LN8@GetGroundL
	cmp	DWORD PTR _p1$[ebp], 0
	je	SHORT $LN8@GetGroundL
	cmp	DWORD PTR _p3$[ebp], 0
	je	SHORT $LN8@GetGroundL

; 528  : 	{
; 529  : 		// upper left triangle
; 530  : 		p2 = blockLists[LOD].GetPost( row+1, col );

	mov	ecx, DWORD PTR _col$[ebp]
	push	ecx
	mov	edx, DWORD PTR _row$[ebp]
	add	edx, 1
	push	edx
	mov	ecx, DWORD PTR _LOD$[ebp]
	imul	ecx, 52					; 00000034H
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+24]
	call	?GetPost@TBlockList@@QAEPAUTpost@@HH@Z	; TBlockList::GetPost
	mov	DWORD PTR _p2$[ebp], eax

; 531  : 		ShiAssert( p2 );
; 532  : 		if (p2) // JB 011019 CTD fix

	cmp	DWORD PTR _p2$[ebp], 0
	je	SHORT $LN7@GetGroundL

; 533  : 		{
; 534  : 			Nx = p2->z - p1->z;		// (remember positive Z is down)

	mov	ecx, DWORD PTR _p2$[ebp]
	mov	edx, DWORD PTR _p1$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR _Nx$[ebp], xmm0

; 535  : 			Ny = p3->z - p2->z;		// (remember positive Z is down)

	mov	eax, DWORD PTR _p3$[ebp]
	mov	ecx, DWORD PTR _p2$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR _Ny$[ebp], xmm0
$LN7@GetGroundL:

; 536  : 		}
; 537  : 	} else 

	jmp	SHORT $LN4@GetGroundL
$LN8@GetGroundL:

; 538  : 		if (p1 && p3) // JB 011019 CTD fix

	cmp	DWORD PTR _p1$[ebp], 0
	je	SHORT $LN4@GetGroundL
	cmp	DWORD PTR _p3$[ebp], 0
	je	SHORT $LN4@GetGroundL

; 539  : 	{
; 540  : 		// lower right triangle
; 541  : 		p2 = blockLists[LOD].GetPost( row, col+1 );

	mov	edx, DWORD PTR _col$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _row$[ebp]
	push	eax
	mov	ecx, DWORD PTR _LOD$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	call	?GetPost@TBlockList@@QAEPAUTpost@@HH@Z	; TBlockList::GetPost
	mov	DWORD PTR _p2$[ebp], eax

; 542  : 		ShiAssert( p2 );
; 543  : 		if (p2) // JB 011019 CTD fix

	cmp	DWORD PTR _p2$[ebp], 0
	je	SHORT $LN4@GetGroundL

; 544  : 		{
; 545  : 			Nx = p3->z - p2->z;		// (remember positive Z is down)

	mov	eax, DWORD PTR _p3$[ebp]
	mov	ecx, DWORD PTR _p2$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR _Nx$[ebp], xmm0

; 546  : 			Ny = p2->z - p1->z;		// (remember positive Z is down)

	mov	edx, DWORD PTR _p2$[ebp]
	mov	eax, DWORD PTR _p1$[ebp]
	movss	xmm0, DWORD PTR [edx]
	subss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _Ny$[ebp], xmm0
$LN4@GetGroundL:

; 547  : 		}
; 548  : 	}
; 549  : 
; 550  : 
; 551  : 	// Unlock the viewpoint
; 552  : 	LeaveCriticalSection( &cs_update );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	call	DWORD PTR __imp__LeaveCriticalSection@4

; 553  : 
; 554  : #if USE_GET_LOD_LEVEL
; 555  : 	if (lod){ *lod = LOD; }

	cmp	DWORD PTR _lod$[ebp], 0
	je	SHORT $LN3@GetGroundL
	mov	edx, DWORD PTR _lod$[ebp]
	mov	eax, DWORD PTR _LOD$[ebp]
	mov	DWORD PTR [edx], eax
$LN3@GetGroundL:

; 556  : #endif
; 557  : 	// If the caller provided a place to store the normal, do it
; 558  : 	// NOTE: This vector is NOT a unit vector
; 559  : 	if (normal) {

	cmp	DWORD PTR _normal$[ebp], 0
	je	SHORT $LN2@GetGroundL

; 560  : 		normal->x = Nx;

	mov	ecx, DWORD PTR _normal$[ebp]
	movss	xmm0, DWORD PTR _Nx$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 561  : 		normal->y = Ny;

	mov	edx, DWORD PTR _normal$[ebp]
	movss	xmm0, DWORD PTR _Ny$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 562  : 		normal->z = Nz;

	mov	eax, DWORD PTR _normal$[ebp]
	movss	xmm0, DWORD PTR _Nz$[ebp]
	movss	DWORD PTR [eax+8], xmm0
$LN2@GetGroundL:

; 563  : 	}
; 564  : 
; 565  : 	// Compute the z of the plane at the given x,y location using the
; 566  : 	// fact that the dot product between the normal and any vector in
; 567  : 	// the plane will be zero.
; 568  : 	// We choose (0,0,p1->z) and (xpos, ypos, Z) as two points to define
; 569  : 	// a line in the plane and dot that with the normal and solve for Z.
; 570  : 	if (p1) // JB 011019 CTD fix

	cmp	DWORD PTR _p1$[ebp], 0
	je	SHORT $LN1@GetGroundL

; 571  : 		return p1->z - Nx/Nz * x_pos - Ny/Nz * y_pos;

	movss	xmm0, DWORD PTR _Nx$[ebp]
	divss	xmm0, DWORD PTR _Nz$[ebp]
	mulss	xmm0, DWORD PTR _x_pos$[ebp]
	mov	ecx, DWORD PTR _p1$[ebp]
	movss	xmm1, DWORD PTR [ecx]
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR _Ny$[ebp]
	divss	xmm0, DWORD PTR _Nz$[ebp]
	mulss	xmm0, DWORD PTR _y_pos$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR tv334[ebp], xmm1
	fld	DWORD PTR tv334[ebp]
	jmp	SHORT $LN14@GetGroundL
$LN1@GetGroundL:

; 572  : 
; 573  : 	return 0; // JB 011019 CTD fix

	fldz
$LN14@GetGroundL:

; 574  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?GetGroundLevel@TViewPoint@@QAEMMMPAUTpoint@@PAH@Z ENDP	; TViewPoint::GetGroundLevel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\terrain\tviewpnt.cpp
_TEXT	SEGMENT
tv166 = -32						; size = 4
tv157 = -28						; size = 4
_elevation$ = -24					; size = 4
_post$ = -20						; size = 4
_row$ = -16						; size = 4
_col$ = -12						; size = 4
_this$ = -8						; size = 4
_LOD$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?GetGroundLevelApproximation@TViewPoint@@QAEMMM@Z PROC	; TViewPoint::GetGroundLevelApproximation
; _this$ = ecx

; 413  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 414  : 	int		LOD;
; 415  : 	int		row;
; 416  : 	int		col;
; 417  : 	Tpost*	post;
; 418  : 	float	elevation;
; 419  : 
; 420  : 	// Compute the level relative post address of interest at the highest available LOD
; 421  : 	LOD = minLOD;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _LOD$[ebp], ecx

; 422  : 	row = FloatToInt32(x / TheMap.Level(LOD)->FTperPOST());

	mov	edx, DWORD PTR _LOD$[ebp]
	push	edx
	mov	ecx, OFFSET ?TheMap@@3VTMap@@A		; TheMap
	call	?Level@TMap@@QAEPAVTLevel@@H@Z		; TMap::Level
	mov	ecx, eax
	call	?FTperPOST@TLevel@@QAEMXZ		; TLevel::FTperPOST
	fstp	DWORD PTR tv157[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	divss	xmm0, DWORD PTR tv157[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _row$[ebp], eax

; 423  : 	col = FloatToInt32(y / TheMap.Level(LOD)->FTperPOST());

	mov	eax, DWORD PTR _LOD$[ebp]
	push	eax
	mov	ecx, OFFSET ?TheMap@@3VTMap@@A		; TheMap
	call	?Level@TMap@@QAEPAVTLevel@@H@Z		; TMap::Level
	mov	ecx, eax
	call	?FTperPOST@TLevel@@QAEMXZ		; TLevel::FTperPOST
	fstp	DWORD PTR tv166[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	divss	xmm0, DWORD PTR tv166[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _col$[ebp], eax

; 424  : 
; 425  : 	// Lock everyone else out of this viewpoint while we're using it
; 426  : 	EnterCriticalSection( &cs_update );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	call	DWORD PTR __imp__EnterCriticalSection@4
$LN5@GetGroundL:

; 427  : 
; 428  : 	// Figure out the highest detail level which has the required data available
; 429  : 	while ( blockLists[LOD].RangeFromCenter( row, col ) >= blockLists[LOD].GetAvailablePostRange() ) {

	mov	edx, DWORD PTR _col$[ebp]
	push	edx
	mov	eax, DWORD PTR _row$[ebp]
	push	eax
	mov	ecx, DWORD PTR _LOD$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	call	?RangeFromCenter@TBlockList@@QAEHHH@Z	; TBlockList::RangeFromCenter
	mov	esi, eax
	mov	ecx, DWORD PTR _LOD$[ebp]
	imul	ecx, 52					; 00000034H
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+24]
	call	?GetAvailablePostRange@TBlockList@@QAEHXZ ; TBlockList::GetAvailablePostRange
	cmp	esi, eax
	jl	SHORT $LN4@GetGroundL

; 430  : 		row >>= 1;

	mov	ecx, DWORD PTR _row$[ebp]
	sar	ecx, 1
	mov	DWORD PTR _row$[ebp], ecx

; 431  : 		col >>= 1;

	mov	edx, DWORD PTR _col$[ebp]
	sar	edx, 1
	mov	DWORD PTR _col$[ebp], edx

; 432  : 		LOD++;

	mov	eax, DWORD PTR _LOD$[ebp]
	add	eax, 1
	mov	DWORD PTR _LOD$[ebp], eax

; 433  : 
; 434  : 		if (LOD > maxLOD ) {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _LOD$[ebp]
	cmp	edx, DWORD PTR [ecx+60]
	jle	SHORT $LN3@GetGroundL

; 435  : 			// Unlock the viewpoint
; 436  : 			LeaveCriticalSection( &cs_update );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	call	DWORD PTR __imp__LeaveCriticalSection@4

; 437  : 
; 438  : 			return 0.0f;

	fldz
	jmp	SHORT $LN6@GetGroundL
$LN3@GetGroundL:

; 439  : 		}
; 440  : 	}

	jmp	SHORT $LN5@GetGroundL
$LN4@GetGroundL:

; 441  : 
; 442  : 	// Get the requested value
; 443  : 	post = blockLists[LOD].GetPost( row, col );

	mov	ecx, DWORD PTR _col$[ebp]
	push	ecx
	mov	edx, DWORD PTR _row$[ebp]
	push	edx
	mov	ecx, DWORD PTR _LOD$[ebp]
	imul	ecx, 52					; 00000034H
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+24]
	call	?GetPost@TBlockList@@QAEPAUTpost@@HH@Z	; TBlockList::GetPost
	mov	DWORD PTR _post$[ebp], eax

; 444  : 	if (post){

	cmp	DWORD PTR _post$[ebp], 0
	je	SHORT $LN2@GetGroundL

; 445  : 		ShiAssert(post);
; 446  : 		elevation = post->z;

	mov	ecx, DWORD PTR _post$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR _elevation$[ebp], xmm0

; 447  : 	}
; 448  : 	else {

	jmp	SHORT $LN1@GetGroundL
$LN2@GetGroundL:

; 449  : 		elevation = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _elevation$[ebp], xmm0
$LN1@GetGroundL:

; 450  : 	}
; 451  : 
; 452  : 	// Unlock the viewpoint
; 453  : 	LeaveCriticalSection( &cs_update );

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 28					; 0000001cH
	push	edx
	call	DWORD PTR __imp__LeaveCriticalSection@4

; 454  : 
; 455  : 	return elevation;

	fld	DWORD PTR _elevation$[ebp]
$LN6@GetGroundL:

; 456  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?GetGroundLevelApproximation@TViewPoint@@QAEMMM@Z ENDP	; TViewPoint::GetGroundLevelApproximation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\terrain\tviewpnt.cpp
_TEXT	SEGMENT
_segment$ = -128					; size = 12
$T2 = -116						; size = 4
tv271 = -112						; size = 4
tv249 = -108						; size = 4
tv242 = -104						; size = 4
tv217 = -100						; size = 4
tv204 = -96						; size = 4
tv188 = -92						; size = 4
tv175 = -88						; size = 4
tv155 = -84						; size = 4
_post$ = -80						; size = 4
$T3 = -76						; size = 4
_dy$ = -72						; size = 4
_dx$ = -68						; size = 4
_d$ = -64						; size = 4
_row$ = -60						; size = 4
_col$ = -56						; size = 4
_this$ = -52						; size = 4
_yPos$ = -48						; size = 4
_xPos$ = -44						; size = 4
_type$ = -40						; size = 4
_area$ = -36						; size = 4
_LOD$ = -32						; size = 4
_texID$ = -28						; size = 4
_r$ = -24						; size = 4
_path$ = -20						; size = 4
_i$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?GetGroundType@TViewPoint@@QAEHMM@Z PROC		; TViewPoint::GetGroundType
; _this$ = ecx

; 298  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetGroundType@TViewPoint@@QAEHMM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 116				; 00000074H
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 299  : 	TexArea		*area;
; 300  : 	TexPath		*path;
; 301  : 	Tpost		*post;
; 302  : 	TextureID	texID;
; 303  : 	int			row, col;
; 304  : 	float		xPos, yPos;
; 305  : 	Edge		segment;

	lea	ecx, DWORD PTR _segment$[ebp]
	call	??0Edge@@QAE@XZ				; Edge::Edge
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 306  : 	float		dx, dy, d;
; 307  : 	float		r;
; 308  : 	int			i;
; 309  : 	int			type = -1;

	mov	DWORD PTR _type$[ebp], -1

; 310  : 	const int	LOD = TheMap.LastNearTexLOD();

	mov	ecx, OFFSET ?TheMap@@3VTMap@@A		; TheMap
	call	?LastNearTexLOD@TMap@@QAEHXZ		; TMap::LastNearTexLOD
	mov	DWORD PTR _LOD$[ebp], eax

; 311  : 
; 312  : 
; 313  : 	// Lock everyone else out of this viewpoint while we're using it
; 314  : 	EnterCriticalSection( &cs_update );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	call	DWORD PTR __imp__EnterCriticalSection@4

; 315  : 
; 316  : 
; 317  : 	// Compute our row and column address and our offset into the tile
; 318  :  	row = WORLD_TO_LEVEL_POST( x, LOD );

	movss	xmm0, DWORD PTR _x$[ebp]
	divss	xmm0, DWORD PTR ?FeetPerPost@@3MA
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?floor@@YAMM@Z				; floor
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, DWORD PTR _LOD$[ebp]
	sar	eax, cl
	mov	DWORD PTR _row$[ebp], eax

; 319  : 	col = WORLD_TO_LEVEL_POST( y, LOD );

	movss	xmm0, DWORD PTR _y$[ebp]
	divss	xmm0, DWORD PTR ?FeetPerPost@@3MA
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?floor@@YAMM@Z				; floor
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, DWORD PTR _LOD$[ebp]
	sar	eax, cl
	mov	DWORD PTR _col$[ebp], eax

; 320  : 	xPos = x - LEVEL_POST_TO_WORLD( row, LOD );

	mov	edx, DWORD PTR _row$[ebp]
	mov	ecx, DWORD PTR _LOD$[ebp]
	shl	edx, cl
	cvtsi2ss xmm0, edx
	mulss	xmm0, DWORD PTR ?FeetPerPost@@3MA
	movss	xmm1, DWORD PTR _x$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _xPos$[ebp], xmm1

; 321  : 	yPos = y - LEVEL_POST_TO_WORLD( col, LOD );

	mov	eax, DWORD PTR _col$[ebp]
	mov	ecx, DWORD PTR _LOD$[ebp]
	shl	eax, cl
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ?FeetPerPost@@3MA
	movss	xmm1, DWORD PTR _y$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _yPos$[ebp], xmm1

; 322  : 	ShiAssert( (xPos >= -0.5f) && (xPos <= LEVEL_POST_TO_WORLD( 1, LOD )+0.5f) );
; 323  : 	ShiAssert( (yPos >= -0.5f) && (yPos <= LEVEL_POST_TO_WORLD( 1, LOD )+0.5f) );
; 324  : 
; 325  : 
; 326  : 	// See if we have the data we'll need
; 327  : 	if (blockLists[LOD].RangeFromCenter( row, col ) >= blockLists[LOD].GetAvailablePostRange()) {

	mov	ecx, DWORD PTR _col$[ebp]
	push	ecx
	mov	edx, DWORD PTR _row$[ebp]
	push	edx
	mov	ecx, DWORD PTR _LOD$[ebp]
	imul	ecx, 52					; 00000034H
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+24]
	call	?RangeFromCenter@TBlockList@@QAEHHH@Z	; TBlockList::RangeFromCenter
	mov	esi, eax
	mov	ecx, DWORD PTR _LOD$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	call	?GetAvailablePostRange@TBlockList@@QAEHXZ ; TBlockList::GetAvailablePostRange
	cmp	esi, eax
	jl	SHORT $LN20@GetGroundT

; 328  : 		LeaveCriticalSection( &cs_update );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	call	DWORD PTR __imp__LeaveCriticalSection@4

; 329  : 		return 0;

	mov	DWORD PTR $T3[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _segment$[ebp]
	call	??1Edge@@QAE@XZ				; Edge::~Edge
	mov	eax, DWORD PTR $T3[ebp]
	jmp	$LN21@GetGroundT
$LN20@GetGroundT:

; 330  : 	}
; 331  : 
; 332  : 
; 333  : 	// Get the terrain post governing the area of interest
; 334  : 	post = blockLists[LOD].GetPost( row, col );

	mov	ecx, DWORD PTR _col$[ebp]
	push	ecx
	mov	edx, DWORD PTR _row$[ebp]
	push	edx
	mov	ecx, DWORD PTR _LOD$[ebp]
	imul	ecx, 52					; 00000034H
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+24]
	call	?GetPost@TBlockList@@QAEPAUTpost@@HH@Z	; TBlockList::GetPost
	mov	DWORD PTR _post$[ebp], eax

; 335  : 	ShiAssert( post );
; 336  : 	texID = post->texID;

	mov	ecx, DWORD PTR _post$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _texID$[ebp], edx

; 337  : 
; 338  : 
; 339  : 	// Check all segment features for inclusion
; 340  : 	i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 341  : #define GET_NEXT_PATH path = TheTerrTextures.GetPath( texID, 0, i++ )
; 342  : 	
; 343  : 
; 344  : 	GET_NEXT_PATH;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv155[ebp], eax
	mov	ecx, DWORD PTR tv155[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _texID$[ebp]
	push	edx
	mov	ecx, OFFSET ?TheTerrTextures@@3VTextureDB@@A ; TheTerrTextures
	call	?GetPath@TextureDB@@QAEPAUTexPath@@KHH@Z ; TextureDB::GetPath
	mov	DWORD PTR _path$[ebp], eax
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN27@GetGroundT:

; 345  : 	while ((type == -1) && path) {

	cmp	DWORD PTR _type$[ebp], -1
	jne	$LN18@GetGroundT
	cmp	DWORD PTR _path$[ebp], 0
	je	$LN18@GetGroundT

; 346  : 
; 347  : 		r = path->width * 0.5f;

	mov	ecx, DWORD PTR _path$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _r$[ebp], xmm0

; 348  : 
; 349  : 		// Skip this one if we're not inside its bounding box
; 350  : 		if (path->x2 < path->x1) {

	mov	edx, DWORD PTR _path$[ebp]
	mov	eax, DWORD PTR _path$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	comiss	xmm0, DWORD PTR [eax+16]
	jbe	SHORT $LN17@GetGroundT

; 351  : 			if ((path->x2 > xPos+r) || (path->x1 < xPos-r)) {

	movss	xmm0, DWORD PTR _xPos$[ebp]
	addss	xmm0, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR _path$[ebp]
	movss	xmm1, DWORD PTR [ecx+16]
	comiss	xmm1, xmm0
	ja	SHORT $LN15@GetGroundT
	movss	xmm0, DWORD PTR _xPos$[ebp]
	subss	xmm0, DWORD PTR _r$[ebp]
	mov	edx, DWORD PTR _path$[ebp]
	comiss	xmm0, DWORD PTR [edx+8]
	jbe	SHORT $LN16@GetGroundT
$LN15@GetGroundT:

; 352  : 				GET_NEXT_PATH;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv175[ebp], eax
	mov	ecx, DWORD PTR tv175[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _texID$[ebp]
	push	edx
	mov	ecx, OFFSET ?TheTerrTextures@@3VTextureDB@@A ; TheTerrTextures
	call	?GetPath@TextureDB@@QAEPAUTexPath@@KHH@Z ; TextureDB::GetPath
	mov	DWORD PTR _path$[ebp], eax
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 353  : 				continue;

	jmp	$LN27@GetGroundT
$LN16@GetGroundT:

; 354  : 			}
; 355  : 		} else {

	jmp	SHORT $LN13@GetGroundT
$LN17@GetGroundT:

; 356  : 			if ((path->x1 > xPos+r) || (path->x2 < xPos-r)) {

	movss	xmm0, DWORD PTR _xPos$[ebp]
	addss	xmm0, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR _path$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	comiss	xmm1, xmm0
	ja	SHORT $LN12@GetGroundT
	movss	xmm0, DWORD PTR _xPos$[ebp]
	subss	xmm0, DWORD PTR _r$[ebp]
	mov	edx, DWORD PTR _path$[ebp]
	comiss	xmm0, DWORD PTR [edx+16]
	jbe	SHORT $LN13@GetGroundT
$LN12@GetGroundT:

; 357  : 				GET_NEXT_PATH;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv188[ebp], eax
	mov	ecx, DWORD PTR tv188[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _texID$[ebp]
	push	edx
	mov	ecx, OFFSET ?TheTerrTextures@@3VTextureDB@@A ; TheTerrTextures
	call	?GetPath@TextureDB@@QAEPAUTexPath@@KHH@Z ; TextureDB::GetPath
	mov	DWORD PTR _path$[ebp], eax
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 358  : 				continue;

	jmp	$LN27@GetGroundT
$LN13@GetGroundT:

; 359  : 			}
; 360  : 		}
; 361  : 		if (path->y2 < path->y1) {

	mov	ecx, DWORD PTR _path$[ebp]
	mov	edx, DWORD PTR _path$[ebp]
	movss	xmm0, DWORD PTR [ecx+12]
	comiss	xmm0, DWORD PTR [edx+20]
	jbe	SHORT $LN11@GetGroundT

; 362  : 			if ((path->y2 > yPos+r) || (path->y1 < yPos-r)) {

	movss	xmm0, DWORD PTR _yPos$[ebp]
	addss	xmm0, DWORD PTR _r$[ebp]
	mov	eax, DWORD PTR _path$[ebp]
	movss	xmm1, DWORD PTR [eax+20]
	comiss	xmm1, xmm0
	ja	SHORT $LN9@GetGroundT
	movss	xmm0, DWORD PTR _yPos$[ebp]
	subss	xmm0, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR _path$[ebp]
	comiss	xmm0, DWORD PTR [ecx+12]
	jbe	SHORT $LN10@GetGroundT
$LN9@GetGroundT:

; 363  : 				GET_NEXT_PATH;

	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv204[ebp], edx
	mov	eax, DWORD PTR tv204[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _texID$[ebp]
	push	ecx
	mov	ecx, OFFSET ?TheTerrTextures@@3VTextureDB@@A ; TheTerrTextures
	call	?GetPath@TextureDB@@QAEPAUTexPath@@KHH@Z ; TextureDB::GetPath
	mov	DWORD PTR _path$[ebp], eax
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 364  : 				continue;

	jmp	$LN27@GetGroundT
$LN10@GetGroundT:

; 365  : 			}
; 366  : 		} else {

	jmp	SHORT $LN7@GetGroundT
$LN11@GetGroundT:

; 367  : 			if ((path->y1 > yPos+r) || (path->y2 < yPos-r)) {

	movss	xmm0, DWORD PTR _yPos$[ebp]
	addss	xmm0, DWORD PTR _r$[ebp]
	mov	eax, DWORD PTR _path$[ebp]
	movss	xmm1, DWORD PTR [eax+12]
	comiss	xmm1, xmm0
	ja	SHORT $LN6@GetGroundT
	movss	xmm0, DWORD PTR _yPos$[ebp]
	subss	xmm0, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR _path$[ebp]
	comiss	xmm0, DWORD PTR [ecx+20]
	jbe	SHORT $LN7@GetGroundT
$LN6@GetGroundT:

; 368  : 				GET_NEXT_PATH;

	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv217[ebp], edx
	mov	eax, DWORD PTR tv217[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _texID$[ebp]
	push	ecx
	mov	ecx, OFFSET ?TheTerrTextures@@3VTextureDB@@A ; TheTerrTextures
	call	?GetPath@TextureDB@@QAEPAUTexPath@@KHH@Z ; TextureDB::GetPath
	mov	DWORD PTR _path$[ebp], eax
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 369  : 				continue;

	jmp	$LN27@GetGroundT
$LN7@GetGroundT:

; 370  : 			}
; 371  : 		}
; 372  : 
; 373  : 		// Now check the line segment itself
; 374  : 		segment.SetupWithPoints( path->x1, path->y1, path->x2, path->y2 );

	mov	eax, DWORD PTR _path$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _path$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _path$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _path$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _segment$[ebp]
	call	?SetupWithPoints@Edge@@QAEXMMMM@Z	; Edge::SetupWithPoints

; 375  : 		segment.Normalize();

	lea	ecx, DWORD PTR _segment$[ebp]
	call	?Normalize@Edge@@QAEXXZ			; Edge::Normalize

; 376  : 		d = (float)fabs( segment.DistanceFrom( xPos, yPos ) );

	push	ecx
	movss	xmm0, DWORD PTR _yPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _xPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _segment$[ebp]
	call	?DistanceFrom@Edge@@QAEMMM@Z		; Edge::DistanceFrom
	push	ecx
	fstp	DWORD PTR [esp]
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _d$[ebp]

; 377  : 		if (d < r) {

	movss	xmm0, DWORD PTR _r$[ebp]
	comiss	xmm0, DWORD PTR _d$[ebp]
	jbe	SHORT $LN5@GetGroundT

; 378  : 			type = path->type;

	mov	ecx, DWORD PTR _path$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _type$[ebp], edx
$LN5@GetGroundT:

; 379  : 		}
; 380  : 		GET_NEXT_PATH;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv242[ebp], eax
	mov	ecx, DWORD PTR tv242[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _texID$[ebp]
	push	edx
	mov	ecx, OFFSET ?TheTerrTextures@@3VTextureDB@@A ; TheTerrTextures
	call	?GetPath@TextureDB@@QAEPAUTexPath@@KHH@Z ; TextureDB::GetPath
	mov	DWORD PTR _path$[ebp], eax
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 381  : 	}

	jmp	$LN27@GetGroundT
$LN18@GetGroundT:

; 382  : 
; 383  : 	// Check all area features for inclusion
; 384  : 	i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 385  : 	area = TheTerrTextures.GetArea( texID, 0, i++ );

	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv249[ebp], ecx
	mov	edx, DWORD PTR tv249[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _texID$[ebp]
	push	eax
	mov	ecx, OFFSET ?TheTerrTextures@@3VTextureDB@@A ; TheTerrTextures
	call	?GetArea@TextureDB@@QAEPAUTexArea@@KHH@Z ; TextureDB::GetArea
	mov	DWORD PTR _area$[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@GetGroundT:

; 386  : 	while ((type == -1) && area) {

	cmp	DWORD PTR _type$[ebp], -1
	jne	$LN3@GetGroundT
	cmp	DWORD PTR _area$[ebp], 0
	je	$LN3@GetGroundT

; 387  : 		dx = xPos - area->x;

	mov	edx, DWORD PTR _area$[ebp]
	movss	xmm0, DWORD PTR _xPos$[ebp]
	subss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR _dx$[ebp], xmm0

; 388  : 		dy = yPos - area->y;

	mov	eax, DWORD PTR _area$[ebp]
	movss	xmm0, DWORD PTR _yPos$[ebp]
	subss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _dy$[ebp], xmm0

; 389  : 		d = dx*dx + dy*dy;

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _d$[ebp], xmm0

; 390  : 
; 391  : 		if (d < (area->radius * area->radius)) {

	mov	ecx, DWORD PTR _area$[ebp]
	mov	edx, DWORD PTR _area$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR [edx+4]
	comiss	xmm0, DWORD PTR _d$[ebp]
	jbe	SHORT $LN2@GetGroundT

; 392  : 			type = area->type;

	mov	eax, DWORD PTR _area$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _type$[ebp], ecx
$LN2@GetGroundT:

; 393  : 		}
; 394  : 		area = TheTerrTextures.GetArea( texID, 0, i++ );

	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv271[ebp], edx
	mov	eax, DWORD PTR tv271[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _texID$[ebp]
	push	ecx
	mov	ecx, OFFSET ?TheTerrTextures@@3VTextureDB@@A ; TheTerrTextures
	call	?GetArea@TextureDB@@QAEPAUTexArea@@KHH@Z ; TextureDB::GetArea
	mov	DWORD PTR _area$[ebp], eax
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 395  : 	}

	jmp	$LN4@GetGroundT
$LN3@GetGroundT:

; 396  : 
; 397  : 	// Get the basic terrain type of this tile
; 398  : 	if (type == -1) {

	cmp	DWORD PTR _type$[ebp], -1
	jne	SHORT $LN1@GetGroundT

; 399  : 		type = TheTerrTextures.GetTerrainType( texID );

	mov	eax, DWORD PTR _texID$[ebp]
	push	eax
	mov	ecx, OFFSET ?TheTerrTextures@@3VTextureDB@@A ; TheTerrTextures
	call	?GetTerrainType@TextureDB@@QAEEK@Z	; TextureDB::GetTerrainType
	movzx	ecx, al
	mov	DWORD PTR _type$[ebp], ecx
$LN1@GetGroundT:

; 400  : 	}
; 401  : 
; 402  : 	// Unlock the viewpoint
; 403  : 	LeaveCriticalSection( &cs_update );

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 28					; 0000001cH
	push	edx
	call	DWORD PTR __imp__LeaveCriticalSection@4

; 404  : 
; 405  : 	ShiAssert( type != -1 );
; 406  : 
; 407  : 	return type;

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _segment$[ebp]
	call	??1Edge@@QAE@XZ				; Edge::~Edge
	mov	eax, DWORD PTR $T2[ebp]
$LN21@GetGroundT:

; 408  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetGroundType@TViewPoint@@QAEHMM@Z$0:
	lea	ecx, DWORD PTR _segment$[ebp]
	jmp	??1Edge@@QAE@XZ				; Edge::~Edge
__ehhandler$?GetGroundType@TViewPoint@@QAEHMM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetGroundType@TViewPoint@@QAEHMM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetGroundType@TViewPoint@@QAEHMM@Z ENDP		; TViewPoint::GetGroundType
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\terrain\tviewpnt.cpp
_TEXT	SEGMENT
tv168 = -32						; size = 4
tv154 = -28						; size = 4
tv129 = -24						; size = 4
tv83 = -20						; size = 4
_maxZ$ = -16						; size = 4
_minZ$ = -12						; size = 4
_level$ = -8						; size = 4
_this$ = -4						; size = 4
_floor$ = 8						; size = 4
_ceiling$ = 12						; size = 4
?GetAreaFloorAndCeiling@TViewPoint@@QAEXPAM0@Z PROC	; TViewPoint::GetAreaFloorAndCeiling
; _this$ = ecx

; 264  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 265  : 	int		level;
; 266  : 	float	minZ;
; 267  : 	float	maxZ;
; 268  : 
; 269  : 
; 270  : 	// Lock everyone else out of this viewpoint while we're using it
; 271  : 	EnterCriticalSection( &cs_update );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	call	DWORD PTR __imp__EnterCriticalSection@4

; 272  : 
; 273  : 	// Ask the list at each level for its min/max Z values
; 274  : 	minZ = 1e6f;

	movss	xmm0, DWORD PTR __real@49742400
	movss	DWORD PTR _minZ$[ebp], xmm0

; 275  : 	maxZ = -1e6f;

	movss	xmm0, DWORD PTR __real@c9742400
	movss	DWORD PTR _maxZ$[ebp], xmm0

; 276  : 	for (level=maxLOD; level>=minLOD; level--) {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR _level$[ebp], edx
	jmp	SHORT $LN4@GetAreaFlo
$LN3@GetAreaFlo:
	mov	eax, DWORD PTR _level$[ebp]
	sub	eax, 1
	mov	DWORD PTR _level$[ebp], eax
$LN4@GetAreaFlo:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _level$[ebp]
	cmp	edx, DWORD PTR [ecx+56]
	jl	$LN2@GetAreaFlo

; 277  : 		minZ = min( minZ, blockLists[level].GetMinZ() );

	mov	ecx, DWORD PTR _level$[ebp]
	imul	ecx, 52					; 00000034H
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+24]
	call	?GetMinZ@TBlockList@@QAEMXZ		; TBlockList::GetMinZ
	fstp	DWORD PTR tv154[ebp]
	movss	xmm0, DWORD PTR tv154[ebp]
	comiss	xmm0, DWORD PTR _minZ$[ebp]
	jbe	SHORT $LN7@GetAreaFlo
	movss	xmm0, DWORD PTR _minZ$[ebp]
	movss	DWORD PTR tv83[ebp], xmm0
	jmp	SHORT $LN8@GetAreaFlo
$LN7@GetAreaFlo:
	mov	ecx, DWORD PTR _level$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	call	?GetMinZ@TBlockList@@QAEMXZ		; TBlockList::GetMinZ
	fstp	DWORD PTR tv83[ebp]
$LN8@GetAreaFlo:
	movss	xmm0, DWORD PTR tv83[ebp]
	movss	DWORD PTR _minZ$[ebp], xmm0

; 278  : 		maxZ = max( maxZ, blockLists[level].GetMaxZ() );

	mov	ecx, DWORD PTR _level$[ebp]
	imul	ecx, 52					; 00000034H
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+24]
	call	?GetMaxZ@TBlockList@@QAEMXZ		; TBlockList::GetMaxZ
	fstp	DWORD PTR tv168[ebp]
	movss	xmm0, DWORD PTR _maxZ$[ebp]
	comiss	xmm0, DWORD PTR tv168[ebp]
	jbe	SHORT $LN9@GetAreaFlo
	movss	xmm0, DWORD PTR _maxZ$[ebp]
	movss	DWORD PTR tv129[ebp], xmm0
	jmp	SHORT $LN10@GetAreaFlo
$LN9@GetAreaFlo:
	mov	ecx, DWORD PTR _level$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	call	?GetMaxZ@TBlockList@@QAEMXZ		; TBlockList::GetMaxZ
	fstp	DWORD PTR tv129[ebp]
$LN10@GetAreaFlo:
	movss	xmm0, DWORD PTR tv129[ebp]
	movss	DWORD PTR _maxZ$[ebp], xmm0

; 279  : 	}

	jmp	$LN3@GetAreaFlo
$LN2@GetAreaFlo:

; 280  : 
; 281  : 	// Unlock the viewpoint
; 282  : 	LeaveCriticalSection( &cs_update );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	call	DWORD PTR __imp__LeaveCriticalSection@4

; 283  : 
; 284  : 	// In case we don't have any terrain loaded yet...
; 285  : 	if (maxZ < minZ) {

	movss	xmm0, DWORD PTR _minZ$[ebp]
	comiss	xmm0, DWORD PTR _maxZ$[ebp]
	jbe	SHORT $LN1@GetAreaFlo

; 286  : 		maxZ = minZ = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _minZ$[ebp], xmm0
	movss	xmm0, DWORD PTR _minZ$[ebp]
	movss	DWORD PTR _maxZ$[ebp], xmm0
$LN1@GetAreaFlo:

; 287  : 	}
; 288  : 
; 289  : 	*floor = maxZ;		// Remember, positive Z is downward in world space

	mov	ecx, DWORD PTR _floor$[ebp]
	movss	xmm0, DWORD PTR _maxZ$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 290  : 	*ceiling = minZ;	// Remember, positive Z is downward in world space

	mov	edx, DWORD PTR _ceiling$[ebp]
	movss	xmm0, DWORD PTR _minZ$[ebp]
	movss	DWORD PTR [edx], xmm0

; 291  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetAreaFloorAndCeiling@TViewPoint@@QAEXPAM0@Z ENDP	; TViewPoint::GetAreaFloorAndCeiling
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\terrain\tviewpnt.cpp
_TEXT	SEGMENT
_this$ = -28						; size = 4
tv148 = -24						; size = 4
tv155 = -20						; size = 4
tv140 = -16						; size = 4
tv153 = -12						; size = 4
_LOD$ = -8						; size = 4
_area$ = -4						; size = 4
_texID$ = 8						; size = 4
_type$ = 12						; size = 4
_offset$ = 16						; size = 4
_target$ = 20						; size = 4
?GetArea@TViewPoint@@QAEHHHHPAUTareaFeature@@@Z PROC	; TViewPoint::GetArea
; _this$ = ecx

; 239  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 240  : 	TexArea		*area;
; 241  : 	const int	LOD = TheMap.LastNearTexLOD();

	mov	ecx, OFFSET ?TheMap@@3VTMap@@A		; TheMap
	call	?LastNearTexLOD@TMap@@QAEHXZ		; TMap::LastNearTexLOD
	mov	DWORD PTR _LOD$[ebp], eax

; 242  : 
; 243  : 	ShiAssert( texID >= 0 );
; 244  : 
; 245  : 	// Get the requested area feature in tile space
; 246  : 	area = TheTerrTextures.GetArea(static_cast<TextureID>(texID), type, offset );

	mov	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _type$[ebp]
	push	ecx
	mov	edx, DWORD PTR _texID$[ebp]
	push	edx
	mov	ecx, OFFSET ?TheTerrTextures@@3VTextureDB@@A ; TheTerrTextures
	call	?GetArea@TextureDB@@QAEPAUTexArea@@KHH@Z ; TextureDB::GetArea
	mov	DWORD PTR _area$[ebp], eax

; 247  : 	if (!area) {

	cmp	DWORD PTR _area$[ebp], 0
	jne	SHORT $LN1@GetArea

; 248  : 		return FALSE;

	xor	eax, eax
	jmp	SHORT $LN2@GetArea
$LN1@GetArea:

; 249  : 	}
; 250  : 
; 251  : 	// If we got a feature, convert it to world space units with 0,0 at lower left of the tile
; 252  : 	target->radius = area->radius;

	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _area$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx

; 253  : 	target->x = (area->x) * TheMap.Level(LOD)->FTperPOST();

	mov	eax, DWORD PTR _area$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _LOD$[ebp]
	push	ecx
	mov	ecx, OFFSET ?TheMap@@3VTMap@@A		; TheMap
	movss	DWORD PTR tv153[ebp], xmm0
	call	?Level@TMap@@QAEPAVTLevel@@H@Z		; TMap::Level
	mov	ecx, eax
	call	?FTperPOST@TLevel@@QAEMXZ		; TLevel::FTperPOST
	fstp	DWORD PTR tv140[ebp]
	movss	xmm0, DWORD PTR tv153[ebp]
	mulss	xmm0, DWORD PTR tv140[ebp]
	mov	edx, DWORD PTR _target$[ebp]
	movss	DWORD PTR [edx], xmm0

; 254  : 	target->y = (area->y) * TheMap.Level(LOD)->FTperPOST();

	mov	eax, DWORD PTR _area$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _LOD$[ebp]
	push	ecx
	mov	ecx, OFFSET ?TheMap@@3VTMap@@A		; TheMap
	movss	DWORD PTR tv155[ebp], xmm0
	call	?Level@TMap@@QAEPAVTLevel@@H@Z		; TMap::Level
	mov	ecx, eax
	call	?FTperPOST@TLevel@@QAEMXZ		; TLevel::FTperPOST
	fstp	DWORD PTR tv148[ebp]
	movss	xmm0, DWORD PTR tv155[ebp]
	mulss	xmm0, DWORD PTR tv148[ebp]
	mov	edx, DWORD PTR _target$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 255  : 
; 256  : 	// Return success
; 257  : 	return TRUE;

	mov	eax, 1
$LN2@GetArea:

; 258  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?GetArea@TViewPoint@@QAEHHHHPAUTareaFeature@@@Z ENDP	; TViewPoint::GetArea
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\terrain\tviewpnt.cpp
_TEXT	SEGMENT
_this$ = -44						; size = 4
tv195 = -40						; size = 4
tv207 = -36						; size = 4
tv186 = -32						; size = 4
tv205 = -28						; size = 4
tv177 = -24						; size = 4
tv203 = -20						; size = 4
tv168 = -16						; size = 4
tv201 = -12						; size = 4
_LOD$ = -8						; size = 4
_path$ = -4						; size = 4
_texID$ = 8						; size = 4
_type$ = 12						; size = 4
_offset$ = 16						; size = 4
_target$ = 20						; size = 4
?GetPath@TViewPoint@@QAEHHHHPAUTpathFeature@@@Z PROC	; TViewPoint::GetPath
; _this$ = ecx

; 213  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 214  : 	TexPath		*path;
; 215  : 	const int	LOD = TheMap.LastNearTexLOD();

	mov	ecx, OFFSET ?TheMap@@3VTMap@@A		; TheMap
	call	?LastNearTexLOD@TMap@@QAEHXZ		; TMap::LastNearTexLOD
	mov	DWORD PTR _LOD$[ebp], eax

; 216  : 
; 217  : 	ShiAssert( texID >= 0 );
; 218  : 
; 219  : 	// Get the requested path feature in tile space
; 220  : 	path = TheTerrTextures.GetPath(static_cast<TextureID>(texID), type, offset );

	mov	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _type$[ebp]
	push	ecx
	mov	edx, DWORD PTR _texID$[ebp]
	push	edx
	mov	ecx, OFFSET ?TheTerrTextures@@3VTextureDB@@A ; TheTerrTextures
	call	?GetPath@TextureDB@@QAEPAUTexPath@@KHH@Z ; TextureDB::GetPath
	mov	DWORD PTR _path$[ebp], eax

; 221  : 	if (!path) {

	cmp	DWORD PTR _path$[ebp], 0
	jne	SHORT $LN1@GetPath

; 222  : 		return FALSE;

	xor	eax, eax
	jmp	$LN2@GetPath
$LN1@GetPath:

; 223  : 	}
; 224  : 
; 225  : 	// If we got a feature, convert it to world space units with 0,0 at lower left of the tile
; 226  : 	target->width = path->width;

	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _path$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+16], edx

; 227  : 	target->x[0] = (path->x1) * TheMap.Level(LOD)->FTperPOST();

	mov	eax, DWORD PTR _path$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _LOD$[ebp]
	push	ecx
	mov	ecx, OFFSET ?TheMap@@3VTMap@@A		; TheMap
	movss	DWORD PTR tv201[ebp], xmm0
	call	?Level@TMap@@QAEPAVTLevel@@H@Z		; TMap::Level
	mov	ecx, eax
	call	?FTperPOST@TLevel@@QAEMXZ		; TLevel::FTperPOST
	fstp	DWORD PTR tv168[ebp]
	movss	xmm0, DWORD PTR tv201[ebp]
	mulss	xmm0, DWORD PTR tv168[ebp]
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _target$[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 228  : 	target->x[1] = (path->x2) * TheMap.Level(LOD)->FTperPOST();

	mov	ecx, DWORD PTR _path$[ebp]
	movss	xmm0, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _LOD$[ebp]
	push	edx
	mov	ecx, OFFSET ?TheMap@@3VTMap@@A		; TheMap
	movss	DWORD PTR tv203[ebp], xmm0
	call	?Level@TMap@@QAEPAVTLevel@@H@Z		; TMap::Level
	mov	ecx, eax
	call	?FTperPOST@TLevel@@QAEMXZ		; TLevel::FTperPOST
	fstp	DWORD PTR tv177[ebp]
	movss	xmm0, DWORD PTR tv203[ebp]
	mulss	xmm0, DWORD PTR tv177[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _target$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 229  : 	target->y[0] = (path->y1) * TheMap.Level(LOD)->FTperPOST();

	mov	edx, DWORD PTR _path$[ebp]
	movss	xmm0, DWORD PTR [edx+12]
	mov	eax, DWORD PTR _LOD$[ebp]
	push	eax
	mov	ecx, OFFSET ?TheMap@@3VTMap@@A		; TheMap
	movss	DWORD PTR tv205[ebp], xmm0
	call	?Level@TMap@@QAEPAVTLevel@@H@Z		; TMap::Level
	mov	ecx, eax
	call	?FTperPOST@TLevel@@QAEMXZ		; TLevel::FTperPOST
	fstp	DWORD PTR tv186[ebp]
	movss	xmm0, DWORD PTR tv205[ebp]
	mulss	xmm0, DWORD PTR tv186[ebp]
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _target$[ebp]
	movss	DWORD PTR [edx+ecx+8], xmm0

; 230  : 	target->y[1] = (path->y2) * TheMap.Level(LOD)->FTperPOST();

	mov	eax, DWORD PTR _path$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _LOD$[ebp]
	push	ecx
	mov	ecx, OFFSET ?TheMap@@3VTMap@@A		; TheMap
	movss	DWORD PTR tv207[ebp], xmm0
	call	?Level@TMap@@QAEPAVTLevel@@H@Z		; TMap::Level
	mov	ecx, eax
	call	?FTperPOST@TLevel@@QAEMXZ		; TLevel::FTperPOST
	fstp	DWORD PTR tv195[ebp]
	movss	xmm0, DWORD PTR tv207[ebp]
	mulss	xmm0, DWORD PTR tv195[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _target$[ebp]
	movss	DWORD PTR [eax+edx+8], xmm0

; 231  : 
; 232  : 	// Return success
; 233  : 	return TRUE;

	mov	eax, 1
$LN2@GetPath:

; 234  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?GetPath@TViewPoint@@QAEHHHHPAUTpathFeature@@@Z ENDP	; TViewPoint::GetPath
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\terrain\tviewpnt.cpp
_TEXT	SEGMENT
_texID$ = -16						; size = 4
_post$ = -12						; size = 4
_LOD$ = -8						; size = 4
_this$ = -4						; size = 4
_r$ = 8							; size = 4
_c$ = 12						; size = 4
?GetTileID@TViewPoint@@QAEHHH@Z PROC			; TViewPoint::GetTileID
; _this$ = ecx

; 185  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 186  : 	Tpost		*post;
; 187  : 	const int	LOD = TheMap.LastNearTexLOD();

	mov	ecx, OFFSET ?TheMap@@3VTMap@@A		; TheMap
	call	?LastNearTexLOD@TMap@@QAEHXZ		; TMap::LastNearTexLOD
	mov	DWORD PTR _LOD$[ebp], eax

; 188  : 	int			texID;
; 189  : 
; 190  : 	// Lock everyone else out of this viewpoint while we're using it
; 191  : 	EnterCriticalSection( &cs_update );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	call	DWORD PTR __imp__EnterCriticalSection@4

; 192  : 
; 193  : 	// See if we have the data we'll need
; 194  : 	if (blockLists[LOD].RangeFromCenter( r, c ) >= blockLists[LOD].GetAvailablePostRange()) {

	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	ecx, DWORD PTR _LOD$[ebp]
	imul	ecx, 52					; 00000034H
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+24]
	call	?RangeFromCenter@TBlockList@@QAEHHH@Z	; TBlockList::RangeFromCenter
	mov	esi, eax
	mov	ecx, DWORD PTR _LOD$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	call	?GetAvailablePostRange@TBlockList@@QAEHXZ ; TBlockList::GetAvailablePostRange
	cmp	esi, eax
	jl	SHORT $LN1@GetTileID

; 195  : 		LeaveCriticalSection( &cs_update );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	call	DWORD PTR __imp__LeaveCriticalSection@4

; 196  : 		return -1;

	or	eax, -1
	jmp	SHORT $LN2@GetTileID
$LN1@GetTileID:

; 197  : 	}
; 198  : 
; 199  : 	// Get the terrain post governing the area of interest
; 200  : 	post = blockLists[LOD].GetPost( r, c );

	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	ecx, DWORD PTR _LOD$[ebp]
	imul	ecx, 52					; 00000034H
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+24]
	call	?GetPost@TBlockList@@QAEPAUTpost@@HH@Z	; TBlockList::GetPost
	mov	DWORD PTR _post$[ebp], eax

; 201  : 	ShiAssert( post );
; 202  : 	texID = post->texID;

	mov	ecx, DWORD PTR _post$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _texID$[ebp], edx

; 203  : 
; 204  : 	// Unlock the viewpoint
; 205  : 	LeaveCriticalSection( &cs_update );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	call	DWORD PTR __imp__LeaveCriticalSection@4

; 206  : 
; 207  : 	return texID;

	mov	eax, DWORD PTR _texID$[ebp]
$LN2@GetTileID:

; 208  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?GetTileID@TViewPoint@@QAEHHH@Z ENDP			; TViewPoint::GetTileID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\terrain\tviewpnt.cpp
_TEXT	SEGMENT
tv280 = -40						; size = 8
tv329 = -32						; size = 4
tv391 = -28						; size = 4
tv325 = -24						; size = 4
tv277 = -20						; size = 4
_altAGL$ = -16						; size = 4
_level$ = -12						; size = 4
_dist$1 = -8						; size = 4
_this$ = -4						; size = 4
_position$ = 8						; size = 4
?Update@TViewPoint@@QAEXPBUTpoint@@@Z PROC		; TViewPoint::Update
; _this$ = ecx

; 102  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 103  : 	float	altAGL;
; 104  : 	int		level;
; 105  : 
; 106  : 	// Lock everyone else out of this viewpoint while it is being updated
; 107  : 	EnterCriticalSection( &cs_update );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	call	DWORD PTR __imp__EnterCriticalSection@4

; 108  : 
; 109  : 	// JB 010608 for weather effects start
; 110  : 	static unsigned long prevvuxGameTime;
; 111  : 	if (vuxGameTime != prevvuxGameTime){

	mov	ecx, DWORD PTR ?vuxGameTime@@3KA	; vuxGameTime
	cmp	ecx, DWORD PTR ?prevvuxGameTime@?1??Update@TViewPoint@@QAEXPBUTpoint@@@Z@4KA
	je	$LN18@Update

; 112  : 		float dist = 
; 113  : 			(float)sqrt(((pos.x - position->x)*(pos.x - position->x) + (pos.y - position->y)*(pos.y - position->y)));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _position$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	subss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _position$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	subss	xmm1, DWORD PTR [edx]
	mulss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	movss	xmm1, DWORD PTR [eax+12]
	subss	xmm1, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _position$[ebp]
	movss	xmm2, DWORD PTR [edx+12]
	subss	xmm2, DWORD PTR [eax+4]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _dist$1[ebp]

; 114  : 		dist = sqrt(dist * dist + (pos.z - position->z)*(pos.z - position->z));

	movss	xmm0, DWORD PTR _dist$1[ebp]
	mulss	xmm0, DWORD PTR _dist$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _position$[ebp]
	movss	xmm1, DWORD PTR [ecx+16]
	subss	xmm1, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	movss	xmm2, DWORD PTR [eax+16]
	subss	xmm2, DWORD PTR [ecx+8]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _dist$1[ebp]

; 115  : 		Speed = dist * FT_TO_NM / ((vuxGameTime - prevvuxGameTime) / (3600000.0F));

	movss	xmm0, DWORD PTR _dist$1[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	mov	edx, DWORD PTR ?vuxGameTime@@3KA	; vuxGameTime
	sub	edx, DWORD PTR ?prevvuxGameTime@?1??Update@TViewPoint@@QAEXPBUTpoint@@@Z@4KA
	mov	DWORD PTR tv277[ebp], edx
	cvtsi2sd xmm1, DWORD PTR tv277[ebp]
	mov	eax, DWORD PTR tv277[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv280[ebp], xmm1
	cvtsd2ss xmm1, QWORD PTR tv280[ebp]
	divss	xmm1, DWORD PTR __real@4a5bba00
	divss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 116  : 		prevvuxGameTime = vuxGameTime;

	mov	edx, DWORD PTR ?vuxGameTime@@3KA	; vuxGameTime
	mov	DWORD PTR ?prevvuxGameTime@?1??Update@TViewPoint@@QAEXPBUTpoint@@@Z@4KA, edx
$LN18@Update:

; 117  : 	}
; 118  : 	// JB 010608 for weather effects end
; 119  : 
; 120  : 	// Store the viewer's position
; 121  : 	pos = *position;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	ecx, DWORD PTR _position$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx

; 122  : 
; 123  : 	// Ask the list at each level to do any required flushing and/or prefetching of blocks
; 124  : 	for (level=maxLOD; level>=minLOD; level--) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	DWORD PTR _level$[ebp], eax
	jmp	SHORT $LN17@Update
$LN16@Update:
	mov	ecx, DWORD PTR _level$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _level$[ebp], ecx
$LN17@Update:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _level$[ebp]
	cmp	eax, DWORD PTR [edx+56]
	jl	SHORT $LN15@Update

; 125  : 		blockLists[level].Update( X(), Y() );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Y@TViewPoint@@QAEMXZ			; TViewPoint::Y
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X@TViewPoint@@QAEMXZ			; TViewPoint::X
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _level$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	call	?Update@TBlockList@@QAEXMM@Z		; TBlockList::Update

; 126  : 	}

	jmp	SHORT $LN16@Update
$LN15@Update:

; 127  : 
; 128  : 	// TODO:  FIX THIS CRITICAL SECTION STUFF (NO NESTING!!!)
; 129  : 	LeaveCriticalSection( &cs_update );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	call	DWORD PTR __imp__LeaveCriticalSection@4

; 130  : 
; 131  : 	// Figure out the viewer's height above the terrain
; 132  : 	// At this point convert from Z down to positive altitude up so
; 133  : 	// that the following conditional tree is less confusing
; 134  : 	altAGL = GetGroundLevelApproximation( X(), Y() ) - Z();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Y@TViewPoint@@QAEMXZ			; TViewPoint::Y
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X@TViewPoint@@QAEMXZ			; TViewPoint::X
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGroundLevelApproximation@TViewPoint@@QAEMMM@Z ; TViewPoint::GetGroundLevelApproximation
	fstp	DWORD PTR tv325[ebp]
	movss	xmm0, DWORD PTR tv325[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv391[ebp], xmm0
	call	?Z@TViewPoint@@QAEMXZ			; TViewPoint::Z
	fstp	DWORD PTR tv329[ebp]
	movss	xmm0, DWORD PTR tv391[ebp]
	subss	xmm0, DWORD PTR tv329[ebp]
	movss	DWORD PTR _altAGL$[ebp], xmm0

; 135  : 
; 136  : 	// TODO:  FIX THIS CRITICAL SECTION STUFF (NO NESTING!!!)
; 137  : 	EnterCriticalSection( &cs_update );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	call	DWORD PTR __imp__EnterCriticalSection@4

; 138  : 
; 139  : 	// Adjust the range of active LODs based on altitude
; 140  : 	// (THW: In a perfect world, we would also look at FOV and Screen Res...)
; 141  : 	// THW 2003-11-14 Let's be a bit more generous...this isn't 1998 anymore ;-)
; 142  : 	//THW 2003-11-14 Make it configurable
; 143  : 	if ( altAGL < (500.0f * g_fTexDetailFactor)) {	

	movss	xmm0, DWORD PTR __real@43fa0000
	mulss	xmm0, DWORD PTR ?g_fTexDetailFactor@@3MA
	comiss	xmm0, DWORD PTR _altAGL$[ebp]
	jbe	SHORT $LN14@Update

; 144  : 		highDetail	= minLOD;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR [edx+64], ecx

; 145  : 		lowDetail	= maxLOD-g_nLowDetailFactor;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	sub	eax, DWORD PTR ?g_nLowDetailFactor@@3HA	; g_nLowDetailFactor
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+68], eax
	jmp	$LN7@Update
$LN14@Update:

; 146  : 	}
; 147  : 	else if ( altAGL < (6000.0f * g_fTexDetailFactor)) {

	movss	xmm0, DWORD PTR __real@45bb8000
	mulss	xmm0, DWORD PTR ?g_fTexDetailFactor@@3MA
	comiss	xmm0, DWORD PTR _altAGL$[ebp]
	jbe	SHORT $LN12@Update

; 148  : 		highDetail	= minLOD;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR [edx+64], ecx

; 149  : 		lowDetail	= maxLOD;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR [edx+68], ecx
	jmp	$LN7@Update
$LN12@Update:

; 150  : 	}
; 151  : 	else if ( altAGL < (24000.0f * g_fTexDetailFactor)) {

	movss	xmm0, DWORD PTR __real@46bb8000
	mulss	xmm0, DWORD PTR ?g_fTexDetailFactor@@3MA
	comiss	xmm0, DWORD PTR _altAGL$[ebp]
	jbe	SHORT $LN10@Update

; 152  : 		highDetail	= minLOD+1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+64], eax

; 153  : 		lowDetail	= maxLOD;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR [edx+68], ecx
	jmp	SHORT $LN7@Update
$LN10@Update:

; 154  : 	} 
; 155  : 	else if ( altAGL < (36000.0f * g_fTexDetailFactor)) {

	movss	xmm0, DWORD PTR __real@470ca000
	mulss	xmm0, DWORD PTR ?g_fTexDetailFactor@@3MA
	comiss	xmm0, DWORD PTR _altAGL$[ebp]
	jbe	SHORT $LN8@Update

; 156  : 		highDetail	= minLOD+2;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	add	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+64], eax

; 157  : 		lowDetail	= maxLOD;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR [edx+68], ecx

; 158  : 	}
; 159  : 	else {

	jmp	SHORT $LN7@Update
$LN8@Update:

; 160  : 		if (g_bDisableHighFartiles){

	movzx	edx, BYTE PTR ?g_bDisableHighFartiles@@3_NA ; g_bDisableHighFartiles
	test	edx, edx
	je	SHORT $LN6@Update

; 161  : 			highDetail = minLOD+2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	add	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+64], ecx

; 162  : 		}
; 163  : 		else {

	jmp	SHORT $LN5@Update
$LN6@Update:

; 164  : 			highDetail = minLOD+3;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	add	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+64], ecx
$LN5@Update:

; 165  : 		}
; 166  : 		lowDetail	= maxLOD;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax+68], edx
$LN7@Update:

; 167  : 	}
; 168  : 
; 169  : 	// Clamp the values to the avialable range of LODs
; 170  : 	if ( lowDetail  < minLOD )		lowDetail	= minLOD;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+68]
	cmp	edx, DWORD PTR [ecx+56]
	jge	SHORT $LN4@Update
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+68], edx
$LN4@Update:

; 171  : 	if ( lowDetail  > maxLOD )		lowDetail	= maxLOD;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+68]
	cmp	edx, DWORD PTR [ecx+60]
	jle	SHORT $LN3@Update
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax+68], edx
$LN3@Update:

; 172  : 	if ( highDetail > lowDetail )	highDetail	= lowDetail;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+64]
	cmp	edx, DWORD PTR [ecx+68]
	jle	SHORT $LN2@Update
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR [eax+64], edx
$LN2@Update:

; 173  : 	if ( highDetail < minLOD )		highDetail	= minLOD;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+64]
	cmp	edx, DWORD PTR [ecx+56]
	jge	SHORT $LN1@Update
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+64], edx
$LN1@Update:

; 174  : 
; 175  : 	// Unlock the viewpoint so others can query it
; 176  : 	LeaveCriticalSection( &cs_update );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	call	DWORD PTR __imp__LeaveCriticalSection@4

; 177  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Update@TViewPoint@@QAEXPBUTpoint@@@Z ENDP		; TViewPoint::Update
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\terrain\tviewpnt.cpp
_TEXT	SEGMENT
$T1 = -24						; size = 4
tv79 = -20						; size = 4
$T2 = -16						; size = 4
$T3 = -12						; size = 4
_i$4 = -8						; size = 4
_this$ = -4						; size = 4
?Cleanup@TViewPoint@@UAEXXZ PROC			; TViewPoint::Cleanup
; _this$ = ecx

; 73   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 74   : 	// Ensure nobody is using this viewpoint while it is being destroyed
; 75   : 	EnterCriticalSection( &cs_update );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	call	DWORD PTR __imp__EnterCriticalSection@4

; 76   : 
; 77   : 	// Release all the block lists
; 78   : 	ShiAssert( blockLists );
; 79   : 	for (int i=minLOD; i<=maxLOD; i++) {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR _i$4[ebp], edx
	jmp	SHORT $LN3@Cleanup
$LN2@Cleanup:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN3@Cleanup:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$4[ebp]
	cmp	edx, DWORD PTR [ecx+60]
	jg	SHORT $LN1@Cleanup

; 80   : 		blockLists[i].Cleanup();

	mov	ecx, DWORD PTR _i$4[ebp]
	imul	ecx, 52					; 00000034H
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+24]
	call	?Cleanup@TBlockList@@QAEXXZ		; TBlockList::Cleanup

; 81   : 	}

	jmp	SHORT $LN2@Cleanup
$LN1@Cleanup:

; 82   : 	delete[] blockLists;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T3[ebp], eax
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN6@Cleanup
	push	3
	mov	ecx, DWORD PTR $T3[ebp]
	call	??_ETBlockList@@QAEPAXI@Z
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN7@Cleanup
$LN6@Cleanup:
	mov	DWORD PTR tv79[ebp], 0
$LN7@Cleanup:

; 83   : 
; 84   : 	// Release the range array memory
; 85   : 	delete[] maxRange;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 86   : 
; 87   : 	// Wipe out our private variables
; 88   : 	blockLists = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0

; 89   : 	maxRange = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+52], 0

; 90   : 	nLists = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 91   : 
; 92   : 	// Release the critical section used to protect our active block lists
; 93   : 	LeaveCriticalSection( &cs_update );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	call	DWORD PTR __imp__LeaveCriticalSection@4

; 94   : 	DeleteCriticalSection( &cs_update );

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 28					; 0000001cH
	push	edx
	call	DWORD PTR __imp__DeleteCriticalSection@4

; 95   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Cleanup@TViewPoint@@UAEXXZ ENDP			; TViewPoint::Cleanup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\terrain\tviewpnt.cpp
_TEXT	SEGMENT
$T2 = -1204						; size = 4
$T3 = -1200						; size = 4
tv154 = -1196						; size = 4
$T4 = -1192						; size = 4
$T5 = -1188						; size = 4
_i$6 = -1184						; size = 4
_this$ = -1180						; size = 4
_buffer$7 = -1176					; size = 580
_buffer$8 = -596					; size = 580
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_minimumLOD$ = 8					; size = 4
_maximumLOD$ = 12					; size = 4
_fetchRanges$ = 16					; size = 4
?Setup@TViewPoint@@QAEXHHPAM@Z PROC			; TViewPoint::Setup
; _this$ = ecx

; 27   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Setup@TViewPoint@@QAEXHHPAM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1192				; 000004a8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 28   : 	ShiAssert( minimumLOD >= 0 );
; 29   : 	ShiAssert( maximumLOD >= minimumLOD );
; 30   : 
; 31   : 	minLOD	 = minimumLOD;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _minimumLOD$[ebp]
	mov	DWORD PTR [eax+56], ecx

; 32   : 	maxLOD	 = maximumLOD;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _maximumLOD$[ebp]
	mov	DWORD PTR [edx+60], eax

; 33   : 	nLists	 = maxLOD + 1;		// Wastes extra array entries if minLOD != 0 (~ 50 bytes per)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx

; 34   : 
; 35   : 	maxRange = new float[ (maxLOD+1) ];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+60]
	add	eax, 1
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [eax+52], ecx

; 36   : 	if (!maxRange) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+52], 0
	jne	SHORT $LN5@Setup

; 37   : 		ShiError( "Failed memory allocation for viewer's range list" );

	push	OFFSET ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
	push	OFFSET ??_C@_0N@LBJMDIMK@Tviewpnt?4cpp?$AA@
	push	37					; 00000025H
	push	OFFSET ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
	lea	eax, DWORD PTR _buffer$8[ebp]
	push	eax
	call	_sprintf
	add	esp, 20					; 00000014H
	push	0
	push	OFFSET ??_C@_0DB@HOJNNGJA@Failed?5memory?5allocation?5for?5vie@
	lea	ecx, DWORD PTR _buffer$8[ebp]
	push	ecx
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	push	-1
	call	_exit
$LN5@Setup:

; 38   : 	}
; 39   : 	memcpy( maxRange, fetchRanges, (maxLOD+1) * sizeof(float) );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	lea	ecx, DWORD PTR [eax*4+4]
	push	ecx
	mov	edx, DWORD PTR _fetchRanges$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 40   : 
; 41   : 
; 42   : 	// Allocate memory for the array of block lists
; 43   : 	blockLists = new TBlockList[ nLists ];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR $T4[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T4[ebp]
	mov	edx, 52					; 00000034H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN8@Setup
	mov	ecx, DWORD PTR $T5[ebp]
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1TBlockList@@QAE@XZ		; TBlockList::~TBlockList
	push	OFFSET ??0TBlockList@@QAE@XZ		; TBlockList::TBlockList
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	push	52					; 00000034H
	mov	ecx, DWORD PTR $T5[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T5[ebp]
	add	edx, 4
	mov	DWORD PTR tv154[ebp], edx
	jmp	SHORT $LN9@Setup
$LN8@Setup:
	mov	DWORD PTR tv154[ebp], 0
$LN9@Setup:
	mov	eax, DWORD PTR tv154[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+24], edx

; 44   : 	if (!blockLists) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN4@Setup

; 45   : 		ShiError( "Failed memory allocation for viewer's block list" );

	push	OFFSET ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
	push	OFFSET ??_C@_0N@LBJMDIMK@Tviewpnt?4cpp?$AA@
	push	45					; 0000002dH
	push	OFFSET ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
	lea	ecx, DWORD PTR _buffer$7[ebp]
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H
	push	0
	push	OFFSET ??_C@_0DB@OGJLPIAP@Failed?5memory?5allocation?5for?5vie@
	lea	edx, DWORD PTR _buffer$7[ebp]
	push	edx
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	push	-1
	call	_exit
$LN4@Setup:

; 46   : 	}
; 47   : 
; 48   : 
; 49   : 	// Initialize the viewer's position to something rediculous to force a full update
; 50   : 	pos.x = -1e12f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@d368d4a5
	movss	DWORD PTR [eax+8], xmm0

; 51   : 	pos.y = -1e12f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@d368d4a5
	movss	DWORD PTR [ecx+12], xmm0

; 52   : 	pos.z = -1e12f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@d368d4a5
	movss	DWORD PTR [edx+16], xmm0

; 53   : 
; 54   : 	// Initially enable all detail levels at once.  This will be adjusted by the first
; 55   : 	// call to UpdateViewpoint().
; 56   :  	highDetail	= minLOD;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+64], edx

; 57   : 	lowDetail	= maxLOD;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax+68], edx

; 58   : 
; 59   : 	Speed = 0.0; // JB 010610

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+4], xmm0

; 60   : 
; 61   : 	// Initialize each block list in turn
; 62   : 	for (int i=minLOD; i<=maxLOD; i++) {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR _i$6[ebp], edx
	jmp	SHORT $LN3@Setup
$LN2@Setup:
	mov	eax, DWORD PTR _i$6[ebp]
	add	eax, 1
	mov	DWORD PTR _i$6[ebp], eax
$LN3@Setup:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$6[ebp]
	cmp	edx, DWORD PTR [ecx+60]
	jg	SHORT $LN1@Setup

; 63   : 		blockLists[i].Setup( TheMap.Level(i), fetchRanges[i] );

	mov	eax, DWORD PTR _i$6[ebp]
	mov	ecx, DWORD PTR _fetchRanges$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax*4]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _i$6[ebp]
	push	edx
	mov	ecx, OFFSET ?TheMap@@3VTMap@@A		; TheMap
	call	?Level@TMap@@QAEPAVTLevel@@H@Z		; TMap::Level
	push	eax
	mov	ecx, DWORD PTR _i$6[ebp]
	imul	ecx, 52					; 00000034H
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+24]
	call	?Setup@TBlockList@@QAEXPAVTLevel@@M@Z	; TBlockList::Setup

; 64   : 	}

	jmp	SHORT $LN2@Setup
$LN1@Setup:

; 65   : 
; 66   : 	
; 67   : 	// Setup the critical section used to protect our active block lists
; 68   : 	InitializeCriticalSection( &cs_update );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	call	DWORD PTR __imp__InitializeCriticalSection@4
$LN6@Setup:

; 69   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Setup@TViewPoint@@QAEXHHPAM@Z$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__ehhandler$?Setup@TViewPoint@@QAEXHHPAM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1196]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Setup@TViewPoint@@QAEXHHPAM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Setup@TViewPoint@@QAEXHHPAM@Z ENDP			; TViewPoint::Setup
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tmap.h
;	COMDAT ?LastNearTexLOD@TMap@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?LastNearTexLOD@TMap@@QAEHXZ PROC			; TMap::LastNearTexLOD, COMDAT
; _this$ = ecx

; 35   : 	int		LastNearTexLOD( void )	{ return lastNearTexturedLOD; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12292]
	mov	esp, ebp
	pop	ebp
	ret	0
?LastNearTexLOD@TMap@@QAEHXZ ENDP			; TMap::LastNearTexLOD
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tmap.h
;	COMDAT ?Level@TMap@@QAEPAVTLevel@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_level$ = 8						; size = 4
?Level@TMap@@QAEPAVTLevel@@H@Z PROC			; TMap::Level, COMDAT
; _this$ = ecx

; 33   : 	TLevel*	Level( int level )		{ ShiAssert( level < nLevels );  return (&Levels[level]); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _level$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12304]
	mov	esp, ebp
	pop	ebp
	ret	4
?Level@TMap@@QAEPAVTLevel@@H@Z ENDP			; TMap::Level
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tlevel.h
;	COMDAT ?FTperPOST@TLevel@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?FTperPOST@TLevel@@QAEMXZ PROC				; TLevel::FTperPOST, COMDAT
; _this$ = ecx

; 47   :  	float	FTperPOST()		{ return feet_per_post; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	esp, ebp
	pop	ebp
	ret	0
?FTperPOST@TLevel@@QAEMXZ ENDP				; TLevel::FTperPOST
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_ETBlockList@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ETBlockList@@QAEPAXI@Z PROC				; TBlockList::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1TBlockList@@QAE@XZ		; TBlockList::~TBlockList
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	52					; 00000034H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TBlockList@@QAE@XZ			; TBlockList::~TBlockList
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_ETBlockList@@QAEPAXI@Z ENDP				; TBlockList::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tblklist.h
;	COMDAT ?GetMinZ@TBlockList@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMinZ@TBlockList@@QAEMXZ PROC			; TBlockList::GetMinZ, COMDAT
; _this$ = ecx

; 62   : 	float	GetMinZ(void)	{ return minZ; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+24]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMinZ@TBlockList@@QAEMXZ ENDP			; TBlockList::GetMinZ
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tblklist.h
;	COMDAT ?GetMaxZ@TBlockList@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMaxZ@TBlockList@@QAEMXZ PROC			; TBlockList::GetMaxZ, COMDAT
; _this$ = ecx

; 61   : 	float	GetMaxZ(void)	{ return maxZ; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMaxZ@TBlockList@@QAEMXZ ENDP			; TBlockList::GetMaxZ
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tblklist.h
;	COMDAT ?GetAvailablePostRange@TBlockList@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAvailablePostRange@TBlockList@@QAEHXZ PROC		; TBlockList::GetAvailablePostRange, COMDAT
; _this$ = ecx

; 56   : 	int  GetAvailablePostRange( void )		{ return availableRange; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAvailablePostRange@TBlockList@@QAEHXZ ENDP		; TBlockList::GetAvailablePostRange
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tblklist.h
;	COMDAT ??1TBlockList@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1TBlockList@@QAE@XZ PROC				; TBlockList::~TBlockList, COMDAT
; _this$ = ecx

; 42   : 	~TBlockList()	{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1TBlockList@@QAE@XZ ENDP				; TBlockList::~TBlockList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tblklist.h
;	COMDAT ??0TBlockList@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0TBlockList@@QAE@XZ PROC				; TBlockList::TBlockList, COMDAT
; _this$ = ecx

; 41   : 	TBlockList()	{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0TBlockList@@QAE@XZ ENDP				; TBlockList::TBlockList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\edge.h
;	COMDAT ?DistanceFrom@Edge@@QAEMMM@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?DistanceFrom@Edge@@QAEMMM@Z PROC			; Edge::DistanceFrom, COMDAT
; _this$ = ecx

; 57   : 	float	DistanceFrom( float x, float y )	{ return (A*x + B*y + C); };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+4]
	mulss	xmm1, DWORD PTR _y$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR tv78[ebp], xmm0
	fld	DWORD PTR tv78[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
?DistanceFrom@Edge@@QAEMMM@Z ENDP			; Edge::DistanceFrom
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\edge.h
;	COMDAT ?Normalize@Edge@@QAEXXZ
_TEXT	SEGMENT
_mag$ = -8						; size = 4
_this$ = -4						; size = 4
?Normalize@Edge@@QAEXXZ PROC				; Edge::Normalize, COMDAT
; _this$ = ecx

; 42   : 	void	Normalize( void )	{ float mag = (float)sqrt(A*A+B*B); A /= mag, B /= mag, C /= mag; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _mag$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	divss	xmm0, DWORD PTR _mag$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	divss	xmm0, DWORD PTR _mag$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	divss	xmm0, DWORD PTR _mag$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+8], xmm0
	mov	esp, ebp
	pop	ebp
	ret	0
?Normalize@Edge@@QAEXXZ ENDP				; Edge::Normalize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\edge.h
;	COMDAT ?SetupWithPoints@Edge@@QAEXMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_x2$ = 16						; size = 4
_y2$ = 20						; size = 4
?SetupWithPoints@Edge@@QAEXMMMM@Z PROC			; Edge::SetupWithPoints, COMDAT
; _this$ = ecx

; 32   : 	void	SetupWithPoints( float x1, float y1, float x2, float y2 ) { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 33   : 				A = y2-y1;   B = x1-x2;   C = -(A*x1 + B*y1);

	movss	xmm0, DWORD PTR _y2$[ebp]
	subss	xmm0, DWORD PTR _y1$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR _x1$[ebp]
	subss	xmm0, DWORD PTR _x2$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR _x1$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	mulss	xmm1, DWORD PTR _y1$[ebp]
	addss	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 34   : 			};

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetupWithPoints@Edge@@QAEXMMMM@Z ENDP			; Edge::SetupWithPoints
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\edge.h
;	COMDAT ??1Edge@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Edge@@QAE@XZ PROC					; Edge::~Edge, COMDAT
; _this$ = ecx

; 20   : 	~Edge()	{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1Edge@@QAE@XZ ENDP					; Edge::~Edge
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\edge.h
;	COMDAT ??0Edge@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Edge@@QAE@XZ PROC					; Edge::Edge, COMDAT
; _this$ = ecx

; 19   : 	Edge()	{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Edge@@QAE@XZ ENDP					; Edge::Edge
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?floor@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?floor@@YAMM@Z PROC					; floor, COMDAT

; 519  :         {return (floorf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_floorf
	add	esp, 4
	pop	ebp
	ret	0
?floor@@YAMM@Z ENDP					; floor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _floorf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_floorf	PROC						; COMDAT

; 416  :         {return ((float)floor((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_floor
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_floorf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
END
