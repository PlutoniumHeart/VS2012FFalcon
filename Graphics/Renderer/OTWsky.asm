; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\Graphics\Renderer\OTWsky.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?MOON_DIST@RenderOTW@@2MB			; RenderOTW::MOON_DIST
PUBLIC	?SUN_DIST@RenderOTW@@2MB			; RenderOTW::SUN_DIST
PUBLIC	?MOST_SUN_GLARE_DIST@RenderOTW@@2MB		; RenderOTW::MOST_SUN_GLARE_DIST
PUBLIC	?MIN_SUN_GLARE@RenderOTW@@2MB			; RenderOTW::MIN_SUN_GLARE
PUBLIC	?ROOF_REPEAT_COUNT@RenderOTW@@2MB		; RenderOTW::ROOF_REPEAT_COUNT
PUBLIC	?HAZE_ALTITUDE_FACTOR@RenderOTW@@2MB		; RenderOTW::HAZE_ALTITUDE_FACTOR
PUBLIC	?GLARE_FACTOR@RenderOTW@@2MB			; RenderOTW::GLARE_FACTOR
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
_DATA	SEGMENT
_cloudPntList DD 0c5bcc000r			; -6040
	DD	0c4070000r			; -540
	DD	0c694ac00r			; -19030
	DD	0c6de1c00r			; -28430
	DD	0c4dfc000r			; -1790
	DD	046dcc800r			; 28260
	DD	047104200r			; 36930
	DD	045732000r			; 3890
	DD	04744ea00r			; 50410
	DD	045336000r			; 2870
	DD	0c4d48000r			; -1700
	DD	04736da00r			; 46810
	DD	0c763ee00r			; -58350
	DD	0c4d48000r			; -1700
	DD	0c64c1000r			; -13060
	DD	046f2bc00r			; 31070
	DD	045480000r			; 3200
	DD	0c7293800r			; -43320
	DD	0c7bdc400r			; -97160
	DD	0c4d48000r			; -1700
	DD	04576e000r			; 3950
	DD	0c792e000r			; -75200
	DD	0c4bb8000r			; -1500
	DD	047957400r			; 76520
	DD	04759ee00r			; 55790
	DD	0c5a1e000r			; -5180
	DD	0c7a24e00r			; -83100
	DD	0c7473800r			; -51000
	DD	0c3a00000r			; -320
	DD	0c7829100r			; -66850
	DD	047733400r			; 62260
	DD	0c3a00000r			; -320
	DD	047708200r			; 61570
	DD	0c7710e00r			; -61710
	DD	0c550c000r			; -3340
	DD	046fb7c00r			; 32190
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	0c5bcc000r			; -6040
	DD	0c7495400r			; -51540
	DD	0c694ac00r			; -19030
	DD	0c6a7a800r			; -21460
	DD	0c74b0200r			; -51970
	DD	0468e8000r			; 18240
	DD	047298800r			; 43400
	DD	0c74bf200r			; -52210
	DD	046bc7000r			; 24120
	DD	0c749f400r			; -51700
	DD	0c74bc000r			; -52160
	DD	046948400r			; 19010
	DD	0c605e800r			; -8570
	DD	0c7488200r			; -51330
	DD	0c74ca600r			; -52390
	DD	04731bc00r			; 45500
	DD	0c7509800r			; -53400
	DD	0c6725800r			; -15510
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	0c7a1ae00r			; -82780
	DD	0c749ea00r			; -51690
	DD	0c7bce300r			; -96710
	DD	0c6126800r			; -9370
	DD	0c7495400r			; -51540
	DD	043cd0000r			; 410
	DD	0c6a7a800r			; -21460
	DD	0c74a8a00r			; -51850
	DD	0473fae00r			; 49070
	DD	0457c8000r			; 4040
	DD	0c74e4a00r			; -52810
	DD	047871e00r			; 69180
	DD	0c6cbc000r			; -26080
	DD	0c74bc000r			; -52160
	DD	046984400r			; 19490
	DD	0452fa000r			; 2810
	DD	0c7488200r			; -51330
	DD	0c7081800r			; -34840
	DD	0c7719a00r			; -61850
	DD	0c749d600r			; -51670
	DD	047b17600r			; 90860
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	047c04e00r			; 98460
	DD	0c74d1400r			; -52500
	DD	0c732a200r			; -45730
	DD	0467b9000r			; 16100
	DD	0c7487800r			; -51320
	DD	0c749a400r			; -51620
	DD	047636c00r			; 58220
	DD	0c74e0400r			; -52740
	DD	0c760b000r			; -57520
	DD	0c6126800r			; -9370
	DD	0c4070000r			; -540
	DD	043cd0000r			; 410
	DD	0c4e60000r			; -1840
	DD	0c6a30c00r			; -20870
	DD	0470a6600r			; 35430
	DD	0c7230c00r			; -41740
	DD	046924000r			; 18720
	DD	04797d600r			; 77740
	DD	0460d9000r			; 9060
	DD	0c616c800r			; -9650
	DD	0c7921300r			; -74790
_lightningPosList DD 041300000r			; 11
	DD	000000000r			; 0
	DD	040e00000r			; 7
	DD	040a00000r			; 5
	DD	041100000r			; 9
	DD	041000000r			; 8
	DD	041000000r			; 8
	DD	041600000r			; 14
	DD	041800000r			; 16
	DD	041a00000r			; 20
	DD	041200000r			; 10
	DD	041c00000r			; 24
	DD	041300000r			; 11
	DD	041d80000r			; 27
	DD	040c00000r			; 6
	DD	041f00000r			; 30
	DD	040e00000r			; 7
	DD	042040000r			; 33
	DD	03f800000r			; 1
	DD	042180000r			; 38
	DD	040a00000r			; 5
	DD	042280000r			; 42
	DD	040a00000r			; 5
	DD	042340000r			; 45
	DD	041400000r			; 12
	DD	042400000r			; 48
	DD	041a00000r			; 20
	DD	042500000r			; 52
	DD	041a00000r			; 20
	DD	042680000r			; 58
	DD	041b80000r			; 23
	DD	042740000r			; 61
	DD	041b00000r			; 22
	DD	0427c0000r			; 63
	DD	041b00000r			; 22
	DD	042840000r			; 66
	DD	041c80000r			; 25
	DD	042880000r			; 68
	DD	041a00000r			; 20
	DD	0428c0000r			; 70
	DD	041c00000r			; 24
	DD	042960000r			; 75
	DD	041c00000r			; 24
	DD	0429a0000r			; 77
	DD	041f80000r			; 31
	DD	042a00000r			; 80
	DD	041f80000r			; 31
	DD	042a60000r			; 83
	DD	042040000r			; 33
	DD	042b00000r			; 88
	DD	041f80000r			; 31
	DD	042b80000r			; 92
	DD	0423c0000r			; 47
	DD	042ce0000r			; 103
	DD	042380000r			; 46
	DD	042d20000r			; 105
	DD	0423c0000r			; 47
	DD	042d60000r			; 107
	DD	042340000r			; 45
	DD	042e00000r			; 112
	DD	042400000r			; 48
	DD	042e40000r			; 114
	DD	042380000r			; 46
	DD	042ea0000r			; 117
	DD	0422c0000r			; 43
	DD	043000000r			; 128
_DATA	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
CONST	SEGMENT
?MOON_DIST@RenderOTW@@2MB DD 042200000r		; 40	; RenderOTW::MOON_DIST
?SUN_DIST@RenderOTW@@2MB DD 041f00000r		; 30	; RenderOTW::SUN_DIST
?MOST_SUN_GLARE_DIST@RenderOTW@@2MB DD 041400000r ; 12	; RenderOTW::MOST_SUN_GLARE_DIST
?MIN_SUN_GLARE@RenderOTW@@2MB DD 000000000r	; 0	; RenderOTW::MIN_SUN_GLARE
?ROOF_REPEAT_COUNT@RenderOTW@@2MB DD 040c00000r	; 6	; RenderOTW::ROOF_REPEAT_COUNT
?HAZE_ALTITUDE_FACTOR@RenderOTW@@2MB DD 038d1b717r ; 0.0001 ; RenderOTW::HAZE_ALTITUDE_FACTOR
?GLARE_FACTOR@RenderOTW@@2MB DD 03d6facadr	; 0.0585143 ; RenderOTW::GLARE_FACTOR
_L_2	DD	03f317218r			; 0.693147
_NEAR_CLIP DD	03f800000r			; 1
_Q_SCALE DD	03a51b717r			; 0.0008
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
PUBLIC	_fabsf
PUBLIC	_atan2f
PUBLIC	_cosf
PUBLIC	_fmodf
PUBLIC	_sinf
PUBLIC	_tanf
PUBLIC	?atan2@@YAMMM@Z					; atan2
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?fmod@@YAMMM@Z					; fmod
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?tan@@YAMM@Z					; tan
PUBLIC	?glConvertFromRadian@@YAHM@Z			; glConvertFromRadian
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?GetNVGmode@CTimeOfDay@@QAEHXZ			; CTimeOfDay::GetNVGmode
PUBLIC	?GetStarIntensity@CTimeOfDay@@QAEMXZ		; CTimeOfDay::GetStarIntensity
PUBLIC	?SetCurrentSkyColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ; CTimeOfDay::SetCurrentSkyColor
PUBLIC	?GetSkyColor@CTimeOfDay@@QAEXPAUTcolor@@@Z	; CTimeOfDay::GetSkyColor
PUBLIC	?GetHazeSkyColor@CTimeOfDay@@QAEXPAUTcolor@@@Z	; CTimeOfDay::GetHazeSkyColor
PUBLIC	?GetGroundColor@CTimeOfDay@@QAEXPAUTcolor@@@Z	; CTimeOfDay::GetGroundColor
PUBLIC	?GetHazeGroundColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ; CTimeOfDay::GetHazeGroundColor
PUBLIC	?GetTextureLightingColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ; CTimeOfDay::GetTextureLightingColor
PUBLIC	?GetHazeSunHorizonColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ; CTimeOfDay::GetHazeSunHorizonColor
PUBLIC	?GetAmbientValue@CTimeOfDay@@QAEMXZ		; CTimeOfDay::GetAmbientValue
PUBLIC	?GetDiffuseValue@CTimeOfDay@@QAEMXZ		; CTimeOfDay::GetDiffuseValue
PUBLIC	?GetSpecularValue@CTimeOfDay@@QAEMXZ		; CTimeOfDay::GetSpecularValue
PUBLIC	?ThereIsASun@CTimeOfDay@@QAEHXZ			; CTimeOfDay::ThereIsASun
PUBLIC	?ThereIsAMoon@CTimeOfDay@@QAEHXZ		; CTimeOfDay::ThereIsAMoon
PUBLIC	?GetStarData@CTimeOfDay@@QAEPAUStarData@@XZ	; CTimeOfDay::GetStarData
PUBLIC	?GetSunPitch@CTimeOfDay@@QAEHXZ			; CTimeOfDay::GetSunPitch
PUBLIC	?GetSunYaw@CTimeOfDay@@QAEHXZ			; CTimeOfDay::GetSunYaw
PUBLIC	?GetPalette@Texture@@QAEPAVPalette@@XZ		; Texture::GetPalette
PUBLIC	?TexHandle@Texture@@QAEKXZ			; Texture::TexHandle
PUBLIC	?GetAvailablePostRange@TBlockList@@QAEHXZ	; TBlockList::GetAvailablePostRange
PUBLIC	?GetDrawingRange@TViewPoint@@QAEMXZ		; TViewPoint::GetDrawingRange
PUBLIC	?X@TViewPoint@@QAEMXZ				; TViewPoint::X
PUBLIC	?Y@TViewPoint@@QAEMXZ				; TViewPoint::Y
PUBLIC	?Z@TViewPoint@@QAEMXZ				; TViewPoint::Z
PUBLIC	??0Edge@@QAE@XZ					; Edge::Edge
PUBLIC	??1Edge@@QAE@XZ					; Edge::~Edge
PUBLIC	?SetupWithVector@Edge@@QAEXMMMM@Z		; Edge::SetupWithVector
PUBLIC	?DistanceFrom@Edge@@QAEMMM@Z			; Edge::DistanceFrom
PUBLIC	?LeftOf@Edge@@QAEHMM@Z				; Edge::LeftOf
PUBLIC	?X@Edge@@QAEMM@Z				; Edge::X
PUBLIC	?Y@Edge@@QAEMM@Z				; Edge::Y
PUBLIC	?viewportXtoPixel@VirtualDisplay@@QAEMM@Z	; VirtualDisplay::viewportXtoPixel
PUBLIC	?viewportYtoPixel@VirtualDisplay@@QAEMM@Z	; VirtualDisplay::viewportYtoPixel
PUBLIC	?Z@Render3D@@QAEMXZ				; Render3D::Z
PUBLIC	?Yaw@Render3D@@QAEMXZ				; Render3D::Yaw
PUBLIC	?Pitch@Render3D@@QAEMXZ				; Render3D::Pitch
PUBLIC	?Roll@Render3D@@QAEMXZ				; Render3D::Roll
PUBLIC	?GetHorizontalClipFlags@@YAKMM@Z		; GetHorizontalClipFlags
PUBLIC	?GetVerticalClipFlags@@YAKMM@Z			; GetVerticalClipFlags
PUBLIC	?SetRoofMode@RenderOTW@@QAEXH@Z			; RenderOTW::SetRoofMode
PUBLIC	?GetFilteringMode@RenderOTW@@QAEHXZ		; RenderOTW::GetFilteringMode
PUBLIC	?DrawSky@RenderOTW@@IAEHXZ			; RenderOTW::DrawSky
PUBLIC	?DrawSkyNoRoof@RenderOTW@@IAEXXZ		; RenderOTW::DrawSkyNoRoof
PUBLIC	?DrawSkyAbove@RenderOTW@@IAEXXZ			; RenderOTW::DrawSkyAbove
PUBLIC	?DrawSkyBelow@RenderOTW@@IAEXXZ			; RenderOTW::DrawSkyBelow
PUBLIC	?ProcessColor@RenderOTW@@MAEXPAUTcolor@@@Z	; RenderOTW::ProcessColor
PUBLIC	?DrawSun@RenderOTW@@MAEXXZ			; RenderOTW::DrawSun
PUBLIC	?DrawMoon@RenderOTW@@MAEXXZ			; RenderOTW::DrawMoon
PUBLIC	?DrawStars@RenderOTW@@MAEXXZ			; RenderOTW::DrawStars
PUBLIC	?ComputeHorizonEffect@RenderOTW@@MAEXPAUHorizonRecord@@@Z ; RenderOTW::ComputeHorizonEffect
PUBLIC	?DrawCelestialBody@RenderOTW@@IAEHPAUTpoint@@MMMMM@Z ; RenderOTW::DrawCelestialBody
PUBLIC	?DrawClearSky@RenderOTW@@IAEXPAUHorizonRecord@@@Z ; RenderOTW::DrawClearSky
PUBLIC	?DrawSkyHazeBand@RenderOTW@@IAEXPAUHorizonRecord@@@Z ; RenderOTW::DrawSkyHazeBand
PUBLIC	?DrawFillerToHorizon@RenderOTW@@IAEXPAUHorizonRecord@@@Z ; RenderOTW::DrawFillerToHorizon
PUBLIC	?SetTimeOfDayColor@RenderOTW@@MAEXXZ		; RenderOTW::SetTimeOfDayColor
PUBLIC	?AdjustSkyColor@RenderOTW@@MAEXXZ		; RenderOTW::AdjustSkyColor
PUBLIC	?TimeUpdateCallback@RenderOTW@@KAXPAX@Z		; RenderOTW::TimeUpdateCallback
PUBLIC	?SetupTexturesOnDevice@RenderOTW@@SAXPAVDXContext@@@Z ; RenderOTW::SetupTexturesOnDevice
PUBLIC	?ReleaseTexturesOnDevice@RenderOTW@@SAXPAVDXContext@@@Z ; RenderOTW::ReleaseTexturesOnDevice
PUBLIC	?InsideOvercast@RealWeather@@QAE_NXZ		; RealWeather::InsideOvercast
PUBLIC	?UnderOvercast@RealWeather@@QAE_NXZ		; RealWeather::UnderOvercast
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	?texRoofTop@RenderOTW@@2VTexture@@A		; RenderOTW::texRoofTop
PUBLIC	?texRoofBottom@RenderOTW@@2VTexture@@A		; RenderOTW::texRoofBottom
PUBLIC	??_C@_0O@DHFCBBMB@OVClayerT?4gif?$AA@		; `string'
PUBLIC	??_C@_0O@OCNNPAEH@OVClayerB?4gif?$AA@		; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@358637bd
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3d860a92
PUBLIC	__real@3e32b8c3
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e800000
PUBLIC	__real@3ec80000
PUBLIC	__real@3ecccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f19999a
PUBLIC	__real@3f266666
PUBLIC	__real@3f333333
PUBLIC	__real@3f340000
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f5f0000
PUBLIC	__real@3f7a0000
PUBLIC	__real@3f7c0000
PUBLIC	__real@3f800000
PUBLIC	__real@3ff921fb60000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@40800000
PUBLIC	__real@42800000
PUBLIC	__real@437f0000
PUBLIC	__real@437fe666
PUBLIC	__real@43800000
PUBLIC	__real@44440000
PUBLIC	__real@4522f983
PUBLIC	__real@47517000
PUBLIC	__real@476a6000
PUBLIC	__real@4788b800
PUBLIC	__real@48435000
PUBLIC	__real@c76a6000
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_atan2:PROC
EXTRN	_cos:PROC
EXTRN	_fabs:PROC
EXTRN	_fmod:PROC
EXTRN	_sin:PROC
EXTRN	_tan:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	?glGetSine@@YANH@Z:PROC				; glGetSine
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?SetState@ContextMPR@@QAEXGK@Z:PROC		; ContextMPR::SetState
EXTRN	?SelectForegroundColor@ContextMPR@@QAEXH@Z:PROC	; ContextMPR::SelectForegroundColor
EXTRN	?SelectTexture1@ContextMPR@@QAEXH@Z:PROC	; ContextMPR::SelectTexture1
EXTRN	?RestoreState@ContextMPR@@QAEXH@Z:PROC		; ContextMPR::RestoreState
EXTRN	?DrawPrimitive@ContextMPR@@QAEXHGGPAUMPRVtx_t@@G@Z:PROC ; ContextMPR::DrawPrimitive
EXTRN	?GetLightDirection@CTimeOfDay@@QAEXPAUTpoint@@@Z:PROC ; CTimeOfDay::GetLightDirection
EXTRN	?CalculateSunMoonPos@CTimeOfDay@@QAEXPAUTpoint@@H@Z:PROC ; CTimeOfDay::CalculateSunMoonPos
EXTRN	?CalculateSunGroundPos@CTimeOfDay@@QAEXPAUTpoint@@@Z:PROC ; CTimeOfDay::CalculateSunGroundPos
EXTRN	?GetSunGlare@CTimeOfDay@@QAEMHH@Z:PROC		; CTimeOfDay::GetSunGlare
EXTRN	?CalculateMoonBlend@CTimeOfDay@@QAEMM@Z:PROC	; CTimeOfDay::CalculateMoonBlend
EXTRN	?LightTexturePalette@Palette@@QAEXPAUTcolor@@@Z:PROC ; Palette::LightTexturePalette
EXTRN	??0Texture@@QAE@XZ:PROC				; Texture::Texture
EXTRN	??1Texture@@QAE@XZ:PROC				; Texture::~Texture
EXTRN	?LoadAndCreate@Texture@@QAEHPADK@Z:PROC		; Texture::LoadAndCreate
EXTRN	?FreeAll@Texture@@QAEXXZ:PROC			; Texture::FreeAll
EXTRN	?Draw2DSunGlowEffect@@YAXPAVRenderOTW@@PAUTpoint@@MM@Z:PROC ; Draw2DSunGlowEffect
EXTRN	?SetClipFlags@Render2D@@QAEXPAUTwoDVertex@@@Z:PROC ; Render2D::SetClipFlags
EXTRN	?ClipAndDraw2DFan@Render2D@@QAEXPAPAUTwoDVertex@@I_N@Z:PROC ; Render2D::ClipAndDraw2DFan
EXTRN	?TransformPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z:PROC ; Render3D::TransformPoint
EXTRN	?TransformCameraCentricPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z:PROC ; Render3D::TransformCameraCentricPoint
EXTRN	?DrawSquare@Render3D@@QAEXPAUThreeDVertex@@000H_N1@Z:PROC ; Render3D::DrawSquare
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?FeetPerPost@@3MA:DWORD				; FeetPerPost
EXTRN	?TheTimeOfDay@@3VCTimeOfDay@@A:BYTE		; TheTimeOfDay
EXTRN	?DisplayOptions@@3VDisplayOptionsClass@@A:BYTE	; DisplayOptions
EXTRN	?realWeather@@3PAVRealWeather@@A:DWORD		; realWeather
EXTRN	?g_nGfxFix@@3HA:DWORD				; g_nGfxFix
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

?texRoofTop@RenderOTW@@2VTexture@@A DB 018H DUP (?)	; RenderOTW::texRoofTop
?texRoofBottom@RenderOTW@@2VTexture@@A DB 018H DUP (?)	; RenderOTW::texRoofBottom
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c76a6000
CONST	SEGMENT
__real@c76a6000 DD 0c76a6000r			; -60000
CONST	ENDS
;	COMDAT __real@48435000
CONST	SEGMENT
__real@48435000 DD 048435000r			; 200000
CONST	ENDS
;	COMDAT __real@4788b800
CONST	SEGMENT
__real@4788b800 DD 04788b800r			; 70000
CONST	ENDS
;	COMDAT __real@476a6000
CONST	SEGMENT
__real@476a6000 DD 0476a6000r			; 60000
CONST	ENDS
;	COMDAT __real@47517000
CONST	SEGMENT
__real@47517000 DD 047517000r			; 53616
CONST	ENDS
;	COMDAT __real@4522f983
CONST	SEGMENT
__real@4522f983 DD 04522f983r			; 2607.59
CONST	ENDS
;	COMDAT __real@44440000
CONST	SEGMENT
__real@44440000 DD 044440000r			; 784
CONST	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT __real@437fe666
CONST	SEGMENT
__real@437fe666 DD 0437fe666r			; 255.9
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@42800000
CONST	SEGMENT
__real@42800000 DD 042800000r			; 64
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@3ff921fb60000000
CONST	SEGMENT
__real@3ff921fb60000000 DQ 03ff921fb60000000r	; 1.5708
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7c0000
CONST	SEGMENT
__real@3f7c0000 DD 03f7c0000r			; 0.984375
CONST	ENDS
;	COMDAT __real@3f7a0000
CONST	SEGMENT
__real@3f7a0000 DD 03f7a0000r			; 0.976563
CONST	ENDS
;	COMDAT __real@3f5f0000
CONST	SEGMENT
__real@3f5f0000 DD 03f5f0000r			; 0.871094
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f340000
CONST	SEGMENT
__real@3f340000 DD 03f340000r			; 0.703125
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f266666
CONST	SEGMENT
__real@3f266666 DD 03f266666r			; 0.65
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3ec80000
CONST	SEGMENT
__real@3ec80000 DD 03ec80000r			; 0.390625
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e32b8c3
CONST	SEGMENT
__real@3e32b8c3 DD 03e32b8c3r			; 0.174533
CONST	ENDS
;	COMDAT __real@3d860a92
CONST	SEGMENT
__real@3d860a92 DD 03d860a92r			; 0.0654498
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@358637bd
CONST	SEGMENT
__real@358637bd DD 0358637bdr			; 1e-006
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OCNNPAEH@OVClayerB?4gif?$AA@
CONST	SEGMENT
??_C@_0O@OCNNPAEH@OVClayerB?4gif?$AA@ DB 'OVClayerB.gif', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DHFCBBMB@OVClayerT?4gif?$AA@
CONST	SEGMENT
??_C@_0O@DHFCBBMB@OVClayerT?4gif?$AA@ DB 'OVClayerT.gif', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?DrawClearSky@RenderOTW@@IAEXPAUHorizonRecord@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DrawClearSky@RenderOTW@@IAEXPAUHorizonRecord@@@Z$0
__unwindtable$?ComputeHorizonEffect@RenderOTW@@MAEXPAUHorizonRecord@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ComputeHorizonEffect@RenderOTW@@MAEXPAUHorizonRecord@@@Z$0
__ehfuncinfo$?DrawClearSky@RenderOTW@@IAEXPAUHorizonRecord@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?DrawClearSky@RenderOTW@@IAEXPAUHorizonRecord@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?ComputeHorizonEffect@RenderOTW@@MAEXPAUHorizonRecord@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ComputeHorizonEffect@RenderOTW@@MAEXPAUHorizonRecord@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?texRoofTop$initializer$@RenderOTW@@2P6AXXZA DD FLAT:??__E?texRoofTop@RenderOTW@@2VTexture@@A@@YAXXZ ; RenderOTW::texRoofTop$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?texRoofBottom$initializer$@RenderOTW@@2P6AXXZA DD FLAT:??__E?texRoofBottom@RenderOTW@@2VTexture@@A@@YAXXZ ; RenderOTW::texRoofBottom$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?texRoofBottom@RenderOTW@@2VTexture@@A@@YAXXZ
text$yd	SEGMENT
??__F?texRoofBottom@RenderOTW@@2VTexture@@A@@YAXXZ PROC	; `dynamic atexit destructor for 'RenderOTW::texRoofBottom'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?texRoofBottom@RenderOTW@@2VTexture@@A ; RenderOTW::texRoofBottom
	call	??1Texture@@QAE@XZ			; Texture::~Texture
	pop	ebp
	ret	0
??__F?texRoofBottom@RenderOTW@@2VTexture@@A@@YAXXZ ENDP	; `dynamic atexit destructor for 'RenderOTW::texRoofBottom''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\otwsky.cpp
;	COMDAT ??__E?texRoofBottom@RenderOTW@@2VTexture@@A@@YAXXZ
text$yc	SEGMENT
??__E?texRoofBottom@RenderOTW@@2VTexture@@A@@YAXXZ PROC	; `dynamic initializer for 'RenderOTW::texRoofBottom'', COMDAT

; 45   : Texture		RenderOTW::texRoofBottom;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?texRoofBottom@RenderOTW@@2VTexture@@A ; RenderOTW::texRoofBottom
	call	??0Texture@@QAE@XZ			; Texture::Texture
	push	OFFSET ??__F?texRoofBottom@RenderOTW@@2VTexture@@A@@YAXXZ ; `dynamic atexit destructor for 'RenderOTW::texRoofBottom''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?texRoofBottom@RenderOTW@@2VTexture@@A@@YAXXZ ENDP	; `dynamic initializer for 'RenderOTW::texRoofBottom''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?texRoofTop@RenderOTW@@2VTexture@@A@@YAXXZ
text$yd	SEGMENT
??__F?texRoofTop@RenderOTW@@2VTexture@@A@@YAXXZ PROC	; `dynamic atexit destructor for 'RenderOTW::texRoofTop'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?texRoofTop@RenderOTW@@2VTexture@@A ; RenderOTW::texRoofTop
	call	??1Texture@@QAE@XZ			; Texture::~Texture
	pop	ebp
	ret	0
??__F?texRoofTop@RenderOTW@@2VTexture@@A@@YAXXZ ENDP	; `dynamic atexit destructor for 'RenderOTW::texRoofTop''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\otwsky.cpp
;	COMDAT ??__E?texRoofTop@RenderOTW@@2VTexture@@A@@YAXXZ
text$yc	SEGMENT
??__E?texRoofTop@RenderOTW@@2VTexture@@A@@YAXXZ PROC	; `dynamic initializer for 'RenderOTW::texRoofTop'', COMDAT

; 44   : Texture		RenderOTW::texRoofTop;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?texRoofTop@RenderOTW@@2VTexture@@A ; RenderOTW::texRoofTop
	call	??0Texture@@QAE@XZ			; Texture::Texture
	push	OFFSET ??__F?texRoofTop@RenderOTW@@2VTexture@@A@@YAXXZ ; `dynamic atexit destructor for 'RenderOTW::texRoofTop''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?texRoofTop@RenderOTW@@2VTexture@@A@@YAXXZ ENDP	; `dynamic initializer for 'RenderOTW::texRoofTop''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\realweather.h
;	COMDAT ?UnderOvercast@RealWeather@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?UnderOvercast@RealWeather@@QAE_NXZ PROC		; RealWeather::UnderOvercast, COMDAT
; _this$ = ecx

; 150  : 	bool	UnderOvercast() { return UnderOVCST; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+15996]
	mov	esp, ebp
	pop	ebp
	ret	0
?UnderOvercast@RealWeather@@QAE_NXZ ENDP		; RealWeather::UnderOvercast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\realweather.h
;	COMDAT ?InsideOvercast@RealWeather@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InsideOvercast@RealWeather@@QAE_NXZ PROC		; RealWeather::InsideOvercast, COMDAT
; _this$ = ecx

; 149  : 	bool	InsideOvercast() { return InsideOVCST; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+15998]
	mov	esp, ebp
	pop	ebp
	ret	0
?InsideOvercast@RealWeather@@QAE_NXZ ENDP		; RealWeather::InsideOvercast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\otwsky.cpp
_TEXT	SEGMENT
_rc$ = 8						; size = 4
?ReleaseTexturesOnDevice@RenderOTW@@SAXPAVDXContext@@@Z PROC ; RenderOTW::ReleaseTexturesOnDevice

; 1646 : {

	push	ebp
	mov	ebp, esp

; 1647 : 	// Free our texture resources
; 1648 : 	if (texRoofTop.TexHandle()) {

	mov	ecx, OFFSET ?texRoofTop@RenderOTW@@2VTexture@@A ; RenderOTW::texRoofTop
	call	?TexHandle@Texture@@QAEKXZ		; Texture::TexHandle
	test	eax, eax
	je	SHORT $LN2@ReleaseTex

; 1649 : 		texRoofTop.FreeAll();

	mov	ecx, OFFSET ?texRoofTop@RenderOTW@@2VTexture@@A ; RenderOTW::texRoofTop
	call	?FreeAll@Texture@@QAEXXZ		; Texture::FreeAll

; 1650 : 		texRoofBottom.FreeAll();

	mov	ecx, OFFSET ?texRoofBottom@RenderOTW@@2VTexture@@A ; RenderOTW::texRoofBottom
	call	?FreeAll@Texture@@QAEXXZ		; Texture::FreeAll
$LN2@ReleaseTex:

; 1651 : 	}
; 1652 : }

	pop	ebp
	ret	0
?ReleaseTexturesOnDevice@RenderOTW@@SAXPAVDXContext@@@Z ENDP ; RenderOTW::ReleaseTexturesOnDevice
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\otwsky.cpp
_TEXT	SEGMENT
_rc$ = 8						; size = 4
?SetupTexturesOnDevice@RenderOTW@@SAXPAVDXContext@@@Z PROC ; RenderOTW::SetupTexturesOnDevice

; 1636 : {

	push	ebp
	mov	ebp, esp

; 1637 : }

	pop	ebp
	ret	0
?SetupTexturesOnDevice@RenderOTW@@SAXPAVDXContext@@@Z ENDP ; RenderOTW::SetupTexturesOnDevice
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\otwsky.cpp
_TEXT	SEGMENT
_self$ = 8						; size = 4
?TimeUpdateCallback@RenderOTW@@KAXPAX@Z PROC		; RenderOTW::TimeUpdateCallback

; 1658 : void RenderOTW::TimeUpdateCallback( void *self ) {

	push	ebp
	mov	ebp, esp

; 1659 : 	// RED - Passed into the OTW Loop before any rendering
; 1660 : 	//((RenderOTW*)self)->SetTimeOfDayColor();
; 1661 : }

	pop	ebp
	ret	0
?TimeUpdateCallback@RenderOTW@@KAXPAX@Z ENDP		; RenderOTW::TimeUpdateCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\otwsky.cpp
_TEXT	SEGMENT
tv279 = -40						; size = 4
_yaw$1 = -36						; size = 4
_pitch$2 = -32						; size = 4
tv236 = -28						; size = 4
_althazefactorblue$3 = -24				; size = 4
_vpAlt$ = -20						; size = 4
_vpAlt$4 = -16						; size = 4
_althazefactor$5 = -12					; size = 4
_intensity$6 = -8					; size = 4
_this$ = -4						; size = 4
?AdjustSkyColor@RenderOTW@@MAEXXZ PROC			; RenderOTW::AdjustSkyColor
; _this$ = ecx

; 1573 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 1574 : 	//JAM 09Dec03
; 1575 : 	if( realWeather->InsideOvercast() || realWeather->UnderOvercast() ) return;

	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?InsideOvercast@RealWeather@@QAE_NXZ	; RealWeather::InsideOvercast
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN12@AdjustSkyC
	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?UnderOvercast@RealWeather@@QAE_NXZ	; RealWeather::UnderOvercast
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN13@AdjustSkyC
$LN12@AdjustSkyC:
	jmp	$LN14@AdjustSkyC
$LN13@AdjustSkyC:

; 1576 : 
; 1577 : 	TheTimeOfDay.GetSkyColor ( &sky_color );

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 263132				; 000403dcH
	push	edx
	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetSkyColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ; CTimeOfDay::GetSkyColor

; 1578 : 	ProcessColor( &sky_color );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 263132				; 000403dcH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+152]
	call	eax

; 1579 : 
; 1580 : 	// Start with the default sky color for this time of day
; 1581 : 	
; 1582 : 	// darken color at high altitude
; 1583 : 	float	vpAlt = -viewpoint->Z();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+263088]
	call	?Z@TViewPoint@@QAEMXZ			; TViewPoint::Z
	fstp	DWORD PTR tv236[ebp]
	movss	xmm0, DWORD PTR tv236[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _vpAlt$[ebp], xmm0

; 1584 : 	if (vpAlt > SKY_ROOF_HEIGHT) {

	movss	xmm0, DWORD PTR _vpAlt$[ebp]
	comiss	xmm0, DWORD PTR __real@476a6000
	jbe	$LN11@AdjustSkyC

; 1585 : 		float	althazefactor, althazefactorblue;
; 1586 : 		if (vpAlt > SKY_MAX_HEIGHT) {

	movss	xmm0, DWORD PTR _vpAlt$[ebp]
	comiss	xmm0, DWORD PTR __real@4788b800
	jbe	SHORT $LN10@AdjustSkyC

; 1587 : 			althazefactor = 0.2f;

	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _althazefactor$5[ebp], xmm0

; 1588 : 			althazefactorblue = 0.4f;

	movss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR _althazefactorblue$3[ebp], xmm0

; 1589 : 		}
; 1590 : 		else {

	jmp	SHORT $LN8@AdjustSkyC
$LN10@AdjustSkyC:

; 1591 : 			althazefactor = (SKY_MAX_HEIGHT - vpAlt) * HAZE_ALTITUDE_FACTOR;

	movss	xmm0, DWORD PTR __real@4788b800
	subss	xmm0, DWORD PTR _vpAlt$[ebp]
	mulss	xmm0, DWORD PTR ?HAZE_ALTITUDE_FACTOR@RenderOTW@@2MB
	movss	DWORD PTR _althazefactor$5[ebp], xmm0

; 1592 : 			althazefactorblue = 0.4f + (althazefactor * 0.6f);

	movss	xmm0, DWORD PTR _althazefactor$5[ebp]
	mulss	xmm0, DWORD PTR __real@3f19999a
	addss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR _althazefactorblue$3[ebp], xmm0

; 1593 : 			if (althazefactor < 0.2f) althazefactor = 0.2f;

	movss	xmm0, DWORD PTR __real@3e4ccccd
	comiss	xmm0, DWORD PTR _althazefactor$5[ebp]
	jbe	SHORT $LN8@AdjustSkyC
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _althazefactor$5[ebp], xmm0
$LN8@AdjustSkyC:

; 1594 : 		}
; 1595 : 		sky_color.r *= althazefactor;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+263132]
	mulss	xmm0, DWORD PTR _althazefactor$5[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+263132], xmm0

; 1596 : 		sky_color.g *= althazefactor;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+263136]
	mulss	xmm0, DWORD PTR _althazefactor$5[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+263136], xmm0

; 1597 : 		sky_color.b *= althazefactorblue;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+263140]
	mulss	xmm0, DWORD PTR _althazefactorblue$3[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+263140], xmm0
$LN11@AdjustSkyC:

; 1598 : 	}
; 1599 : 
; 1600 : 
; 1601 : 	// calculate sun glare effect
; 1602 : 	// sfr sun glare effect
; 1603 : 	if (TheTimeOfDay.ThereIsASun()) {

	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?ThereIsASun@CTimeOfDay@@QAEHXZ		; CTimeOfDay::ThereIsASun
	test	eax, eax
	je	$LN1@AdjustSkyC

; 1604 : 		int pitch = glConvertFromRadian( Pitch() );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Pitch@Render3D@@QAEMXZ			; Render3D::Pitch
	push	ecx
	fstp	DWORD PTR [esp]
	call	?glConvertFromRadian@@YAHM@Z		; glConvertFromRadian
	add	esp, 4
	mov	DWORD PTR _pitch$2[ebp], eax

; 1605 : 		int yaw = glConvertFromRadian( Yaw() );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Yaw@Render3D@@QAEMXZ			; Render3D::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	call	?glConvertFromRadian@@YAHM@Z		; glConvertFromRadian
	add	esp, 4
	mov	DWORD PTR _yaw$1[ebp], eax

; 1606 : 		SunGlareValue = TheTimeOfDay.GetSunGlare( yaw, pitch );

	mov	edx, DWORD PTR _pitch$2[ebp]
	push	edx
	mov	eax, DWORD PTR _yaw$1[ebp]
	push	eax
	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetSunGlare@CTimeOfDay@@QAEMHH@Z	; CTimeOfDay::GetSunGlare
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+263192]

; 1607 : 
; 1608 : 		if (SunGlareValue) {

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+263192]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN1@AdjustSkyC

; 1609 : 			float vpAlt = -viewpoint->Z();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+263088]
	call	?Z@TViewPoint@@QAEMXZ			; TViewPoint::Z
	fstp	DWORD PTR tv279[ebp]
	movss	xmm0, DWORD PTR tv279[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _vpAlt$4[ebp], xmm0

; 1610 : 			if (vpAlt < SKY_MAX_HEIGHT) {

	movss	xmm0, DWORD PTR __real@4788b800
	comiss	xmm0, DWORD PTR _vpAlt$4[ebp]
	jbe	$LN1@AdjustSkyC

; 1611 : 				vpAlt = (SKY_MAX_HEIGHT - vpAlt) * GLARE_FACTOR;

	movss	xmm0, DWORD PTR __real@4788b800
	subss	xmm0, DWORD PTR _vpAlt$4[ebp]
	mulss	xmm0, DWORD PTR ?GLARE_FACTOR@RenderOTW@@2MB
	movss	DWORD PTR _vpAlt$4[ebp], xmm0

; 1612 : 				float intensity = (float)glGetSine( FloatToInt32(vpAlt) );

	push	ecx
	movss	xmm0, DWORD PTR _vpAlt$4[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	call	?glGetSine@@YANH@Z			; glGetSine
	add	esp, 4
	fstp	DWORD PTR _intensity$6[ebp]

; 1613 : 				intensity *= SunGlareValue;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _intensity$6[ebp]
	mulss	xmm0, DWORD PTR [ecx+263192]
	movss	DWORD PTR _intensity$6[ebp], xmm0

; 1614 : 				intensity *= 0.25f;	// scale it down

	movss	xmm0, DWORD PTR _intensity$6[ebp]
	mulss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR _intensity$6[ebp], xmm0

; 1615 : 				if (intensity > 0.05f) {

	movss	xmm0, DWORD PTR _intensity$6[ebp]
	comiss	xmm0, DWORD PTR __real@3d4ccccd
	jbe	$LN1@AdjustSkyC

; 1616 : 					sky_color.r += intensity;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+263132]
	addss	xmm0, DWORD PTR _intensity$6[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+263132], xmm0

; 1617 : 					sky_color.g += intensity;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+263136]
	addss	xmm0, DWORD PTR _intensity$6[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+263136], xmm0

; 1618 : 					sky_color.b += intensity;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+263140]
	addss	xmm0, DWORD PTR _intensity$6[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+263140], xmm0

; 1619 : 					if (sky_color.r > 1.0f) sky_color.r = 1.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+263132]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN3@AdjustSkyC
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+263132], xmm0
$LN3@AdjustSkyC:

; 1620 : 					if (sky_color.g > 1.0f) sky_color.g = 1.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+263136]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN2@AdjustSkyC
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+263136], xmm0
$LN2@AdjustSkyC:

; 1621 : 					if (sky_color.b > 1.0f) sky_color.b = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+263140]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN1@AdjustSkyC
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+263140], xmm0
$LN1@AdjustSkyC:

; 1622 : 				}
; 1623 : 			}
; 1624 : 		}
; 1625 : 	}
; 1626 : 	TheTimeOfDay.SetCurrentSkyColor ( &sky_color );

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 263132				; 000403dcH
	push	edx
	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?SetCurrentSkyColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ; CTimeOfDay::SetCurrentSkyColor
$LN14@AdjustSkyC:

; 1627 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AdjustSkyColor@RenderOTW@@MAEXXZ ENDP			; RenderOTW::AdjustSkyColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\otwsky.cpp
_TEXT	SEGMENT
_ground_haze$1 = -32					; size = 4
_ground_haze$2 = -28					; size = 4
_palette$3 = -24					; size = 4
_this$ = -20						; size = 4
_light$4 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?SetTimeOfDayColor@RenderOTW@@MAEXXZ PROC		; RenderOTW::SetTimeOfDayColor
; _this$ = ecx

; 1474 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1475 : 	
; 1476 : 	// if NVG Mode 
; 1477 : 	if(TheTimeOfDay.GetNVGmode()){

	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetNVGmode@CTimeOfDay@@QAEHXZ		; CTimeOfDay::GetNVGmode
	test	eax, eax
	je	$LN3@SetTimeOfD

; 1478 : 		lightAmbient = NVG_LIGHT_LEVEL;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f340000
	movss	DWORD PTR [eax+262972], xmm0

; 1479 : 		lightDiffuse = 0.f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+262976], xmm0

; 1480 : 		lightSpecular = 0.f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+262980], xmm0

; 1481 : 		TheTimeOfDay.GetLightDirection(&lightVector);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 262984				; 00040348H
	push	eax
	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetLightDirection@CTimeOfDay@@QAEXPAUTpoint@@@Z ; CTimeOfDay::GetLightDirection

; 1482 : 
; 1483 : 		sky_color.r			= 0.f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+263132], xmm0

; 1484 : 		sky_color.g			= NVG_SKY_LEVEL;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3ec80000
	movss	DWORD PTR [edx+263136], xmm0

; 1485 : 		sky_color.b			= 0.f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+263140], xmm0

; 1486 : 		haze_sky_color.r	= 0.f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+263180], xmm0

; 1487 : 		haze_sky_color.g	= NVG_SKY_LEVEL;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3ec80000
	movss	DWORD PTR [edx+263184], xmm0

; 1488 : 		haze_sky_color.b	= 0.f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+263188], xmm0

; 1489 : 		earth_end_color.r	= 0.f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+263168], xmm0

; 1490 : 		earth_end_color.g	= NVG_SKY_LEVEL;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3ec80000
	movss	DWORD PTR [edx+263172], xmm0

; 1491 : 		earth_end_color.b	= 0.f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+263176], xmm0

; 1492 : 		haze_ground_color.r	= 0.f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+263144], xmm0

; 1493 : 		haze_ground_color.g	= NVG_SKY_LEVEL;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3ec80000
	movss	DWORD PTR [edx+263148], xmm0

; 1494 : 		haze_ground_color.b	= 0.f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+263152], xmm0

; 1495 : 
; 1496 : 		DWORD ground_haze = (FloatToInt32(haze_ground_color.g*255.9f) << 8)+0xff000000;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+263148]
	mulss	xmm0, DWORD PTR __real@437fe666
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	shl	eax, 8
	sub	eax, 16777216				; 01000000H
	mov	DWORD PTR _ground_haze$2[ebp], eax

; 1497 : 		context.SetState(MPR_STA_FOG_COLOR,ground_haze);

	mov	edx, DWORD PTR _ground_haze$2[ebp]
	push	edx
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1498 : 	} else {

	jmp	$LN1@SetTimeOfD
$LN3@SetTimeOfD:

; 1499 : 
; 1500 : 		Tcolor	light;
; 1501 : 
; 1502 : 		// Set 3D object lighting environment
; 1503 : 		lightAmbient = TheTimeOfDay.GetAmbientValue();

	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetAmbientValue@CTimeOfDay@@QAEMXZ	; CTimeOfDay::GetAmbientValue
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+262972]

; 1504 : 		lightDiffuse = TheTimeOfDay.GetDiffuseValue();

	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetDiffuseValue@CTimeOfDay@@QAEMXZ	; CTimeOfDay::GetDiffuseValue
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+262976]

; 1505 : 		lightSpecular = TheTimeOfDay.GetSpecularValue();

	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetSpecularValue@CTimeOfDay@@QAEMXZ	; CTimeOfDay::GetSpecularValue
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+262980]

; 1506 : 		TheTimeOfDay.GetLightDirection( &lightVector );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 262984				; 00040348H
	push	eax
	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetLightDirection@CTimeOfDay@@QAEXPAUTpoint@@@Z ; CTimeOfDay::GetLightDirection

; 1507 : 
; 1508 : 		// Store terrain lighting environment (not used at present)
; 1509 : 		lightTheta	= (float)atan2( lightVector.y, lightVector.x );

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+262984]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+262988]
	movss	DWORD PTR [esp], xmm0
	call	?atan2@@YAMMM@Z				; atan2
	add	esp, 8
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+263124]

; 1510 : 		lightPhi	= (float)atan2( -lightVector.z, sqrt( lightVector.x*lightVector.x + lightVector.y*lightVector.y ) );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+262984]
	mulss	xmm0, DWORD PTR [edx+262984]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+262988]
	mulss	xmm1, DWORD PTR [ecx+262988]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+262992]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?atan2@@YAMMM@Z				; atan2
	add	esp, 8
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+263128]

; 1511 : 		ShiAssert( lightPhi <= PI*0.5f );
; 1512 : 
; 1513 : 		// Get the new colors for this time of day
; 1514 : 		TheTimeOfDay.GetSkyColor ( &sky_color );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 263132				; 000403dcH
	push	ecx
	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetSkyColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ; CTimeOfDay::GetSkyColor

; 1515 : 		TheTimeOfDay.GetHazeSkyColor ( &haze_sky_color );

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 263180				; 0004040cH
	push	edx
	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetHazeSkyColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ; CTimeOfDay::GetHazeSkyColor

; 1516 : 		TheTimeOfDay.GetHazeGroundColor ( &earth_end_color );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 263168				; 00040400H
	push	eax
	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetHazeGroundColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ; CTimeOfDay::GetHazeGroundColor

; 1517 : 		TheTimeOfDay.GetGroundColor ( &haze_ground_color );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 263144				; 000403e8H
	push	ecx
	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetGroundColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ; CTimeOfDay::GetGroundColor

; 1518 : 		ProcessColor( &sky_color );

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 263132				; 000403dcH
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+152]
	call	eax

; 1519 : 		ProcessColor( &haze_sky_color );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 263180				; 0004040cH
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+152]
	call	edx

; 1520 : 		ProcessColor( &earth_end_color );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 263168				; 00040400H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+152]
	call	eax

; 1521 : 		ProcessColor( &haze_ground_color );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 263144				; 000403e8H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+152]
	call	edx

; 1522 : 
; 1523 : 		// Set the fog color for the terrain
; 1524 : 		DWORD ground_haze = (FloatToInt32(haze_ground_color.r * 255.9f)       ) +
; 1525 : 							(FloatToInt32(haze_ground_color.g * 255.9f) <<  8 ) +
; 1526 : 							(FloatToInt32(haze_ground_color.b * 255.9f) << 16 ) + 0xff000000;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+263144]
	mulss	xmm0, DWORD PTR __real@437fe666
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+263148]
	mulss	xmm0, DWORD PTR __real@437fe666
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	shl	eax, 8
	add	esi, eax
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+263152]
	mulss	xmm0, DWORD PTR __real@437fe666
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	shl	eax, 16					; 00000010H
	lea	eax, DWORD PTR [esi+eax-16777216]
	mov	DWORD PTR _ground_haze$1[ebp], eax

; 1527 : 
; 1528 : 		context.SetState(MPR_STA_FOG_COLOR,ground_haze);

	mov	ecx, DWORD PTR _ground_haze$1[ebp]
	push	ecx
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1529 : 
; 1530 : 		//JAM 03Dec03
; 1531 : 		TheTimeOfDay.GetTextureLightingColor(&ground_color);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 263156				; 000403f4H
	push	edx
	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetTextureLightingColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ; CTimeOfDay::GetTextureLightingColor

; 1532 : 
; 1533 : 		// TODO:  Set the fog color for the objects
; 1534 : 	//	TheStateStack.SetDepthCueColor( haze_ground_color.r, haze_ground_color.g, haze_ground_color.b );
; 1535 : 
; 1536 : 		// Adjust the color of the roof textures if they're loaded
; 1537 : 		if (texRoofTop.TexHandle()) {

	mov	ecx, OFFSET ?texRoofTop@RenderOTW@@2VTexture@@A ; RenderOTW::texRoofTop
	call	?TexHandle@Texture@@QAEKXZ		; Texture::TexHandle
	test	eax, eax
	je	SHORT $LN1@SetTimeOfD

; 1538 : 			TheTimeOfDay.GetTextureLightingColor( &light );

	lea	eax, DWORD PTR _light$4[ebp]
	push	eax
	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetTextureLightingColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ; CTimeOfDay::GetTextureLightingColor

; 1539 : 			Palette *palette;
; 1540 : 			palette=texRoofTop.GetPalette();

	mov	ecx, OFFSET ?texRoofTop@RenderOTW@@2VTexture@@A ; RenderOTW::texRoofTop
	call	?GetPalette@Texture@@QAEPAVPalette@@XZ	; Texture::GetPalette
	mov	DWORD PTR _palette$3[ebp], eax

; 1541 : 			palette->LightTexturePalette( &light );

	lea	ecx, DWORD PTR _light$4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _palette$3[ebp]
	call	?LightTexturePalette@Palette@@QAEXPAUTcolor@@@Z ; Palette::LightTexturePalette

; 1542 : 			//texRoofTop.palette->LightTexturePalette( &light );
; 1543 : 			palette=texRoofBottom.GetPalette();

	mov	ecx, OFFSET ?texRoofBottom@RenderOTW@@2VTexture@@A ; RenderOTW::texRoofBottom
	call	?GetPalette@Texture@@QAEPAVPalette@@XZ	; Texture::GetPalette
	mov	DWORD PTR _palette$3[ebp], eax

; 1544 : 			palette->LightTexturePalette( &light );

	lea	edx, DWORD PTR _light$4[ebp]
	push	edx
	mov	ecx, DWORD PTR _palette$3[ebp]
	call	?LightTexturePalette@Palette@@QAEXPAUTcolor@@@Z ; Palette::LightTexturePalette
$LN1@SetTimeOfD:

; 1545 : 			//texRoofBottom.palette->LightTexturePalette( &light );
; 1546 : 		}
; 1547 : 
; 1548 : 	}	
; 1549 : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?SetTimeOfDayColor@RenderOTW@@MAEXXZ ENDP		; RenderOTW::SetTimeOfDayColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\otwsky.cpp
_TEXT	SEGMENT
_num$ = -216						; size = 4
_vertPointers$ = -212					; size = 16
tv72 = -196						; size = 4
_db$ = -192						; size = 4
_lhazescale$ = -188					; size = 4
_dg$ = -184						; size = 4
_dr$ = -180						; size = 4
_rhazescale$ = -176					; size = 4
_sunLeft$ = -169					; size = 1
_this$ = -168						; size = 4
_v1$ = -164						; size = 40
_v0$ = -124						; size = 40
_v3$ = -84						; size = 40
_v2$ = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_pHorizon$ = 8						; size = 4
?DrawFillerToHorizon@RenderOTW@@IAEXPAUHorizonRecord@@@Z PROC ; RenderOTW::DrawFillerToHorizon
; _this$ = ecx

; 764  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 765  : 	// find out if sun is left or right
; 766  : 	bool sunLeft = pHorizon->sunEffectPos.x <= scaleX;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	comiss	xmm0, DWORD PTR [ecx+52]
	jb	SHORT $LN7@DrawFiller
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN8@DrawFiller
$LN7@DrawFiller:
	mov	DWORD PTR tv72[ebp], 0
$LN8@DrawFiller:
	mov	dl, BYTE PTR tv72[ebp]
	mov	BYTE PTR _sunLeft$[ebp], dl

; 767  : 
; 768  :  	float			dr = 0.0F, dg = 0.0F, db = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dr$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dg$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _db$[ebp], xmm0

; 769  : 	const int		num = 4;

	mov	DWORD PTR _num$[ebp], 4

; 770  : 	float			/*hazescale, */lhazescale, rhazescale;
; 771  : 	TwoDVertex		v0, v1, v2, v3;
; 772  : 	TwoDVertex		*vertPointers[4];
; 773  : 
; 774  : 	v0.x = shiftX + pHorizon->hx + pHorizon->vxDn;		// lower right

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR [eax+40]
	addss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _pHorizon$[ebp]
	addss	xmm0, DWORD PTR [edx+28]
	movss	DWORD PTR _v0$[ebp], xmm0

; 775  : 	v0.y = shiftY + pHorizon->hy + pHorizon->vyDn;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR [eax+44]
	addss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _pHorizon$[ebp]
	addss	xmm0, DWORD PTR [edx+32]
	movss	DWORD PTR _v0$[ebp+4], xmm0

; 776  : 
; 777  : 	v1.x = shiftX - pHorizon->hx + pHorizon->vxDn;		// lower left

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR [eax+40]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _pHorizon$[ebp]
	addss	xmm0, DWORD PTR [edx+28]
	movss	DWORD PTR _v1$[ebp], xmm0

; 778  : 	v1.y = shiftY - pHorizon->hy + pHorizon->vyDn;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR [eax+44]
	subss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _pHorizon$[ebp]
	addss	xmm0, DWORD PTR [edx+32]
	movss	DWORD PTR _v1$[ebp+4], xmm0

; 779  : 
; 780  : 	v2.x = shiftX - pHorizon->hx + pHorizon->vx;		// horizon left

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR [eax+40]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _pHorizon$[ebp]
	addss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR _v2$[ebp], xmm0

; 781  : 	v2.y = shiftY - pHorizon->hy + pHorizon->vy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR [eax+44]
	subss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _pHorizon$[ebp]
	addss	xmm0, DWORD PTR [edx+16]
	movss	DWORD PTR _v2$[ebp+4], xmm0

; 782  : 
; 783  : 	v3.x = shiftX + pHorizon->hx + pHorizon->vx;	// horizon right

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR [eax+40]
	addss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _pHorizon$[ebp]
	addss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR _v3$[ebp], xmm0

; 784  : 	v3.y = shiftY + pHorizon->hy + pHorizon->vy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR [eax+44]
	addss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _pHorizon$[ebp]
	addss	xmm0, DWORD PTR [edx+16]
	movss	DWORD PTR _v3$[ebp+4], xmm0

; 785  : 
; 786  : 
; 787  : 	// lower verts use terrain haze color
; 788  : 	v0.r = haze_ground_color.r;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+263144]
	movss	DWORD PTR _v0$[ebp+8], xmm0

; 789  : 	v0.g = haze_ground_color.g;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+263148]
	movss	DWORD PTR _v0$[ebp+12], xmm0

; 790  : 	v0.b = haze_ground_color.b;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+263152]
	movss	DWORD PTR _v0$[ebp+16], xmm0

; 791  : 
; 792  : 	v1.r = haze_ground_color.r;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+263144]
	movss	DWORD PTR _v1$[ebp+8], xmm0

; 793  : 	v1.g = haze_ground_color.g;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+263148]
	movss	DWORD PTR _v1$[ebp+12], xmm0

; 794  : 	v1.b = haze_ground_color.b;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+263152]
	movss	DWORD PTR _v1$[ebp+16], xmm0

; 795  : 
; 796  : 	if (pHorizon->horeffect) {

	mov	eax, DWORD PTR _pHorizon$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	$LN4@DrawFiller

; 797  : 		// horizon light effect
; 798  : 		dr = pHorizon->sunEffectColor.r - haze_sky_color.r;

	mov	ecx, DWORD PTR _pHorizon$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+64]
	subss	xmm0, DWORD PTR [edx+263180]
	movss	DWORD PTR _dr$[ebp], xmm0

; 799  : 		dg = pHorizon->sunEffectColor.g - haze_sky_color.g;

	mov	eax, DWORD PTR _pHorizon$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+68]
	subss	xmm0, DWORD PTR [ecx+263184]
	movss	DWORD PTR _dg$[ebp], xmm0

; 800  : 		db = pHorizon->sunEffectColor.b - haze_sky_color.b;

	mov	edx, DWORD PTR _pHorizon$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+72]
	subss	xmm0, DWORD PTR [eax+263188]
	movss	DWORD PTR _db$[ebp], xmm0

; 801  : 
; 802  : 		//hazescale	= pHorizon->hazescale;//  * 0.4f; 
; 803  : 		rhazescale	= pHorizon->rhazescale;// * 0.5f;

	mov	ecx, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR [ecx+44]
	movss	DWORD PTR _rhazescale$[ebp], xmm0

; 804  : 		lhazescale	= pHorizon->lhazescale;// * 0.5f;

	mov	edx, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR [edx+48]
	movss	DWORD PTR _lhazescale$[ebp], xmm0

; 805  : 
; 806  : 		v2.r = haze_sky_color.r + dr * lhazescale;

	movss	xmm0, DWORD PTR _dr$[ebp]
	mulss	xmm0, DWORD PTR _lhazescale$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+263180]
	movss	DWORD PTR _v2$[ebp+8], xmm0

; 807  : 		v2.g = haze_sky_color.g + dg * lhazescale;

	movss	xmm0, DWORD PTR _dg$[ebp]
	mulss	xmm0, DWORD PTR _lhazescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+263184]
	movss	DWORD PTR _v2$[ebp+12], xmm0

; 808  : 		v2.b = haze_sky_color.b + db * lhazescale;

	movss	xmm0, DWORD PTR _db$[ebp]
	mulss	xmm0, DWORD PTR _lhazescale$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+263188]
	movss	DWORD PTR _v2$[ebp+16], xmm0

; 809  : 
; 810  : 		v3.r = haze_sky_color.r + dr * rhazescale;

	movss	xmm0, DWORD PTR _dr$[ebp]
	mulss	xmm0, DWORD PTR _rhazescale$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+263180]
	movss	DWORD PTR _v3$[ebp+8], xmm0

; 811  : 		v3.g = haze_sky_color.g + dg * rhazescale;

	movss	xmm0, DWORD PTR _dg$[ebp]
	mulss	xmm0, DWORD PTR _rhazescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+263184]
	movss	DWORD PTR _v3$[ebp+12], xmm0

; 812  : 		v3.b = haze_sky_color.b + db * rhazescale;

	movss	xmm0, DWORD PTR _db$[ebp]
	mulss	xmm0, DWORD PTR _rhazescale$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+263188]
	movss	DWORD PTR _v3$[ebp+16], xmm0

; 813  : 	} 
; 814  : 	else {

	jmp	SHORT $LN3@DrawFiller
$LN4@DrawFiller:

; 815  : 		// no effect use sky color
; 816  : 		v2.r = haze_sky_color.r;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+263180]
	movss	DWORD PTR _v2$[ebp+8], xmm0

; 817  : 		v2.g = haze_sky_color.g;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+263184]
	movss	DWORD PTR _v2$[ebp+12], xmm0

; 818  : 		v2.b = haze_sky_color.b;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+263188]
	movss	DWORD PTR _v2$[ebp+16], xmm0

; 819  : 
; 820  : 		v3.r = haze_sky_color.r;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+263180]
	movss	DWORD PTR _v3$[ebp+8], xmm0

; 821  : 		v3.g = haze_sky_color.g;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+263184]
	movss	DWORD PTR _v3$[ebp+12], xmm0

; 822  : 		v3.b = haze_sky_color.b;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+263188]
	movss	DWORD PTR _v3$[ebp+16], xmm0
$LN3@DrawFiller:

; 823  : 	}
; 824  : 
; 825  : 
; 826  : 	// Set the clip flags on the constructed verts
; 827  : 	SetClipFlags( &v0 );

	lea	eax, DWORD PTR _v0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetClipFlags@Render2D@@QAEXPAUTwoDVertex@@@Z ; Render2D::SetClipFlags

; 828  : 	SetClipFlags( &v1 );

	lea	ecx, DWORD PTR _v1$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetClipFlags@Render2D@@QAEXPAUTwoDVertex@@@Z ; Render2D::SetClipFlags

; 829  : 	SetClipFlags( &v2 );

	lea	edx, DWORD PTR _v2$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetClipFlags@Render2D@@QAEXPAUTwoDVertex@@@Z ; Render2D::SetClipFlags

; 830  : 	SetClipFlags( &v3 );

	lea	eax, DWORD PTR _v3$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetClipFlags@Render2D@@QAEXPAUTwoDVertex@@@Z ; Render2D::SetClipFlags

; 831  : 
; 832  : 	// here we change the order of the fan for diagonal matching the side of sun
; 833  : 	if (sunLeft){

	movzx	ecx, BYTE PTR _sunLeft$[ebp]
	test	ecx, ecx
	je	SHORT $LN2@DrawFiller

; 834  : 		vertPointers[0] = &v0;

	mov	edx, 4
	imul	edx, 0
	lea	eax, DWORD PTR _v0$[ebp]
	mov	DWORD PTR _vertPointers$[ebp+edx], eax

; 835  : 		vertPointers[1] = &v1;

	mov	ecx, 4
	shl	ecx, 0
	lea	edx, DWORD PTR _v1$[ebp]
	mov	DWORD PTR _vertPointers$[ebp+ecx], edx

; 836  : 		vertPointers[2] = &v2;

	mov	eax, 4
	shl	eax, 1
	lea	ecx, DWORD PTR _v2$[ebp]
	mov	DWORD PTR _vertPointers$[ebp+eax], ecx

; 837  : 		vertPointers[3] = &v3;

	mov	edx, 4
	imul	edx, 3
	lea	eax, DWORD PTR _v3$[ebp]
	mov	DWORD PTR _vertPointers$[ebp+edx], eax

; 838  : 	}
; 839  : 	else {

	jmp	SHORT $LN1@DrawFiller
$LN2@DrawFiller:

; 840  : 		vertPointers[0] = &v3;

	mov	ecx, 4
	imul	ecx, 0
	lea	edx, DWORD PTR _v3$[ebp]
	mov	DWORD PTR _vertPointers$[ebp+ecx], edx

; 841  : 		vertPointers[1] = &v2;

	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _v2$[ebp]
	mov	DWORD PTR _vertPointers$[ebp+eax], ecx

; 842  : 		vertPointers[2] = &v1;

	mov	edx, 4
	shl	edx, 1
	lea	eax, DWORD PTR _v1$[ebp]
	mov	DWORD PTR _vertPointers$[ebp+edx], eax

; 843  : 		vertPointers[3] = &v0;

	mov	ecx, 4
	imul	ecx, 3
	lea	edx, DWORD PTR _v0$[ebp]
	mov	DWORD PTR _vertPointers$[ebp+ecx], edx
$LN1@DrawFiller:

; 844  : 	}
; 845  : 
; 846  : 	context.RestoreState( STATE_GOURAUD );

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 847  : 	ClipAndDraw2DFan( vertPointers, num );

	push	0
	push	4
	lea	eax, DWORD PTR _vertPointers$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClipAndDraw2DFan@Render2D@@QAEXPAPAUTwoDVertex@@I_N@Z ; Render2D::ClipAndDraw2DFan

; 848  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?DrawFillerToHorizon@RenderOTW@@IAEXPAUHorizonRecord@@@Z ENDP ; RenderOTW::DrawFillerToHorizon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\otwsky.cpp
_TEXT	SEGMENT
_num$ = -208						; size = 4
_vertPointers$ = -204					; size = 16
tv72 = -188						; size = 4
_dr$ = -184						; size = 4
_dg$ = -180						; size = 4
_db$ = -176						; size = 4
_sunLeft$ = -169					; size = 1
_this$ = -168						; size = 4
_v3$ = -164						; size = 40
_v2$ = -124						; size = 40
_v1$ = -84						; size = 40
_v0$ = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_pHorizon$ = 8						; size = 4
?DrawSkyHazeBand@RenderOTW@@IAEXPAUHorizonRecord@@@Z PROC ; RenderOTW::DrawSkyHazeBand
; _this$ = ecx

; 679  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 680  : 	float		dr=0.0F, dg=0.0F, db=0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dr$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dg$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _db$[ebp], xmm0

; 681  : 	const int	num=4;

	mov	DWORD PTR _num$[ebp], 4

; 682  : 	TwoDVertex	v0, v1, v2, v3;
; 683  : 	TwoDVertex	*vertPointers[4];
; 684  : 	// find out if sun is left or right
; 685  : 	bool sunLeft = pHorizon->sunEffectPos.x <= scaleX;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	comiss	xmm0, DWORD PTR [ecx+52]
	jb	SHORT $LN8@DrawSkyHaz
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN9@DrawSkyHaz
$LN8@DrawSkyHaz:
	mov	DWORD PTR tv72[ebp], 0
$LN9@DrawSkyHaz:
	mov	dl, BYTE PTR tv72[ebp]
	mov	BYTE PTR _sunLeft$[ebp], dl

; 686  : 
; 687  : 	//REPORT_VALUE("sun X", pHorizon->sunEffectPos.x);
; 688  : 
; 689  : 	if (pHorizon->horeffect) {

	mov	eax, DWORD PTR _pHorizon$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN5@DrawSkyHaz

; 690  : 		dr = pHorizon->sunEffectColor.r - haze_sky_color.r;

	mov	ecx, DWORD PTR _pHorizon$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+64]
	subss	xmm0, DWORD PTR [edx+263180]
	movss	DWORD PTR _dr$[ebp], xmm0

; 691  : 		dg = pHorizon->sunEffectColor.g - haze_sky_color.g;

	mov	eax, DWORD PTR _pHorizon$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+68]
	subss	xmm0, DWORD PTR [ecx+263184]
	movss	DWORD PTR _dg$[ebp], xmm0

; 692  : 		db = pHorizon->sunEffectColor.b - haze_sky_color.b;

	mov	edx, DWORD PTR _pHorizon$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+72]
	subss	xmm0, DWORD PTR [eax+263188]
	movss	DWORD PTR _db$[ebp], xmm0
$LN5@DrawSkyHaz:

; 693  : 	}
; 694  : 
; 695  : 	// Build the corners of our horizon polygon
; 696  : 	v0.x = shiftX + pHorizon->hx + pHorizon->vx;			// horizon right

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR [ecx+40]
	addss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _pHorizon$[ebp]
	addss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _v0$[ebp], xmm0

; 697  : 	v0.y = shiftY + pHorizon->hy + pHorizon->vy;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR [ecx+44]
	addss	xmm0, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _pHorizon$[ebp]
	addss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR _v0$[ebp+4], xmm0

; 698  : 
; 699  : 	v1.x = shiftX - pHorizon->hx + pHorizon->vx;			// horizon left

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR [ecx+40]
	subss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _pHorizon$[ebp]
	addss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _v1$[ebp], xmm0

; 700  : 	v1.y = shiftY - pHorizon->hy + pHorizon->vy;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR [ecx+44]
	subss	xmm0, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _pHorizon$[ebp]
	addss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR _v1$[ebp+4], xmm0

; 701  : 
; 702  : 	v2.x = shiftX - pHorizon->hx + pHorizon->vxUp;			// upper left

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR [ecx+40]
	subss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _pHorizon$[ebp]
	addss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR _v2$[ebp], xmm0

; 703  : 	v2.y = shiftY - pHorizon->hy + pHorizon->vyUp;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR [ecx+44]
	subss	xmm0, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _pHorizon$[ebp]
	addss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR _v2$[ebp+4], xmm0

; 704  : 
; 705  : 	v3.x = shiftX + pHorizon->hx + pHorizon->vxUp;			// upper right

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR [ecx+40]
	addss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _pHorizon$[ebp]
	addss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR _v3$[ebp], xmm0

; 706  : 	v3.y = shiftY + pHorizon->hy + pHorizon->vyUp;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR [ecx+44]
	addss	xmm0, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _pHorizon$[ebp]
	addss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR _v3$[ebp+4], xmm0

; 707  : 
; 708  : 	if (pHorizon->horeffect) {

	mov	ecx, DWORD PTR _pHorizon$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	$LN4@DrawSkyHaz

; 709  : 		v0.r = haze_sky_color.r + dr * pHorizon->rhazescale;

	mov	edx, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR _dr$[ebp]
	mulss	xmm0, DWORD PTR [edx+44]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+263180]
	movss	DWORD PTR _v0$[ebp+8], xmm0

; 710  : 		v0.g = /*sunLeft ? 0.0f : 1.0f;*/haze_sky_color.g + dg * pHorizon->rhazescale;

	mov	ecx, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR _dg$[ebp]
	mulss	xmm0, DWORD PTR [ecx+44]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+263184]
	movss	DWORD PTR _v0$[ebp+12], xmm0

; 711  : 		v0.b = haze_sky_color.b + db * pHorizon->rhazescale;

	mov	eax, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR _db$[ebp]
	mulss	xmm0, DWORD PTR [eax+44]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+263188]
	movss	DWORD PTR _v0$[ebp+16], xmm0

; 712  : 
; 713  : 		v1.r = haze_sky_color.r + dr * pHorizon->lhazescale;

	mov	edx, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR _dr$[ebp]
	mulss	xmm0, DWORD PTR [edx+48]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+263180]
	movss	DWORD PTR _v1$[ebp+8], xmm0

; 714  : 		v1.g = /*sunLeft ? 1.0f : 0.0f;*/haze_sky_color.g + dg * pHorizon->lhazescale;

	mov	ecx, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR _dg$[ebp]
	mulss	xmm0, DWORD PTR [ecx+48]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+263184]
	movss	DWORD PTR _v1$[ebp+12], xmm0

; 715  : 		v1.b = haze_sky_color.b + db * pHorizon->lhazescale;

	mov	eax, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR _db$[ebp]
	mulss	xmm0, DWORD PTR [eax+48]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+263188]
	movss	DWORD PTR _v1$[ebp+16], xmm0

; 716  : 	}
; 717  : 	else {

	jmp	SHORT $LN3@DrawSkyHaz
$LN4@DrawSkyHaz:

; 718  : 		v0.r = haze_sky_color.r;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+263180]
	movss	DWORD PTR _v0$[ebp+8], xmm0

; 719  : 		v0.g = haze_sky_color.g;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+263184]
	movss	DWORD PTR _v0$[ebp+12], xmm0

; 720  : 		v0.b = haze_sky_color.b;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+263188]
	movss	DWORD PTR _v0$[ebp+16], xmm0

; 721  : 
; 722  : 		v1.r = haze_sky_color.r;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+263180]
	movss	DWORD PTR _v1$[ebp+8], xmm0

; 723  : 		v1.g = haze_sky_color.g;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+263184]
	movss	DWORD PTR _v1$[ebp+12], xmm0

; 724  : 		v1.b = haze_sky_color.b;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+263188]
	movss	DWORD PTR _v1$[ebp+16], xmm0
$LN3@DrawSkyHaz:

; 725  : 	}
; 726  : 
; 727  : 	v2.r = sky_color.r;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+263132]
	movss	DWORD PTR _v2$[ebp+8], xmm0

; 728  : 	v2.g = sky_color.g;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+263136]
	movss	DWORD PTR _v2$[ebp+12], xmm0

; 729  : 	v2.b = sky_color.b;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+263140]
	movss	DWORD PTR _v2$[ebp+16], xmm0

; 730  : 
; 731  : 	v3.r = sky_color.r;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+263132]
	movss	DWORD PTR _v3$[ebp+8], xmm0

; 732  : 	v3.g = sky_color.g;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+263136]
	movss	DWORD PTR _v3$[ebp+12], xmm0

; 733  : 	v3.b = sky_color.b;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+263140]
	movss	DWORD PTR _v3$[ebp+16], xmm0

; 734  : 
; 735  : 	// Set the clip flags on the constructed verts
; 736  : 	SetClipFlags( &v0 );

	lea	edx, DWORD PTR _v0$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetClipFlags@Render2D@@QAEXPAUTwoDVertex@@@Z ; Render2D::SetClipFlags

; 737  : 	SetClipFlags( &v1 );

	lea	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetClipFlags@Render2D@@QAEXPAUTwoDVertex@@@Z ; Render2D::SetClipFlags

; 738  : 	SetClipFlags( &v2 );

	lea	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetClipFlags@Render2D@@QAEXPAUTwoDVertex@@@Z ; Render2D::SetClipFlags

; 739  : 	SetClipFlags( &v3 );

	lea	edx, DWORD PTR _v3$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetClipFlags@Render2D@@QAEXPAUTwoDVertex@@@Z ; Render2D::SetClipFlags

; 740  : 
; 741  : 	// Clip and draw the smooth shaded horizon polygon
; 742  : 	context.RestoreState( STATE_GOURAUD );

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 743  : 	// here we change the order of the fan for diagonal matching the side of sun
; 744  : 	if (sunLeft){

	movzx	eax, BYTE PTR _sunLeft$[ebp]
	test	eax, eax
	je	SHORT $LN2@DrawSkyHaz

; 745  : 		vertPointers[0] = &v0;

	mov	ecx, 4
	imul	ecx, 0
	lea	edx, DWORD PTR _v0$[ebp]
	mov	DWORD PTR _vertPointers$[ebp+ecx], edx

; 746  : 		vertPointers[1] = &v1;

	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _v1$[ebp]
	mov	DWORD PTR _vertPointers$[ebp+eax], ecx

; 747  : 		vertPointers[2] = &v2;

	mov	edx, 4
	shl	edx, 1
	lea	eax, DWORD PTR _v2$[ebp]
	mov	DWORD PTR _vertPointers$[ebp+edx], eax

; 748  : 		vertPointers[3] = &v3;

	mov	ecx, 4
	imul	ecx, 3
	lea	edx, DWORD PTR _v3$[ebp]
	mov	DWORD PTR _vertPointers$[ebp+ecx], edx

; 749  : 	}
; 750  : 	else {

	jmp	SHORT $LN1@DrawSkyHaz
$LN2@DrawSkyHaz:

; 751  : 		vertPointers[0] = &v3;

	mov	eax, 4
	imul	eax, 0
	lea	ecx, DWORD PTR _v3$[ebp]
	mov	DWORD PTR _vertPointers$[ebp+eax], ecx

; 752  : 		vertPointers[1] = &v2;

	mov	edx, 4
	shl	edx, 0
	lea	eax, DWORD PTR _v2$[ebp]
	mov	DWORD PTR _vertPointers$[ebp+edx], eax

; 753  : 		vertPointers[2] = &v1;

	mov	ecx, 4
	shl	ecx, 1
	lea	edx, DWORD PTR _v1$[ebp]
	mov	DWORD PTR _vertPointers$[ebp+ecx], edx

; 754  : 		vertPointers[3] = &v0;

	mov	eax, 4
	imul	eax, 3
	lea	ecx, DWORD PTR _v0$[ebp]
	mov	DWORD PTR _vertPointers$[ebp+eax], ecx
$LN1@DrawSkyHaz:

; 755  : 	}
; 756  : 	ClipAndDraw2DFan( vertPointers, num );

	push	0
	push	4
	lea	edx, DWORD PTR _vertPointers$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClipAndDraw2DFan@Render2D@@QAEXPAPAUTwoDVertex@@I_N@Z ; Render2D::ClipAndDraw2DFan

; 757  : 
; 758  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?DrawSkyHazeBand@RenderOTW@@IAEXPAUHorizonRecord@@@Z ENDP ; RenderOTW::DrawSkyHazeBand
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\otwsky.cpp
_TEXT	SEGMENT
_horizonLine$ = -96					; size = 12
_startedOut$ = -84					; size = 4
_wasOut$ = -80						; size = 4
_amOut$ = -76						; size = 4
_this$ = -72						; size = 4
_num$ = -68						; size = 2
_vert$ = -64						; size = 48
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pHorizon$ = 8						; size = 4
?DrawClearSky@RenderOTW@@IAEXPAUHorizonRecord@@@Z PROC	; RenderOTW::DrawClearSky
; _this$ = ecx

; 579  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DrawClearSky@RenderOTW@@IAEXPAUHorizonRecord@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 580  : 	Edge		horizonLine;

	lea	ecx, DWORD PTR _horizonLine$[ebp]
	call	??0Edge@@QAE@XZ				; Edge::Edge
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 581  : 	BOOL		amOut, wasOut, startedOut;
; 582  : 	MPRVtx_t	vert[6];
; 583  : 	unsigned short		num;
; 584  : 
; 585  : 	// Setup a line equation for the horizon in pixel space
; 586  : 	horizonLine.SetupWithVector( shiftX+pHorizon->vxUp, shiftY+pHorizon->vyUp, pHorizon->hx, pHorizon->hy );

	mov	eax, DWORD PTR _pHorizon$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _pHorizon$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR [edx+44]
	addss	xmm0, DWORD PTR [eax+24]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR [ecx+40]
	addss	xmm0, DWORD PTR [edx+20]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _horizonLine$[ebp]
	call	?SetupWithVector@Edge@@QAEXMMMM@Z	; Edge::SetupWithVector

; 587  : 
; 588  : 	// Now clip the screen rectangle against the line to build the corners of a polygon
; 589  : 	num = 0;

	xor	eax, eax
	mov	WORD PTR _num$[ebp], ax

; 590  : 	
; 591  : 	// First check the upper left corner
; 592  : 	wasOut = startedOut = horizonLine.LeftOf( leftPixel, topPixel );

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+52]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+60]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _horizonLine$[ebp]
	call	?LeftOf@Edge@@QAEHMM@Z			; Edge::LeftOf
	mov	DWORD PTR _startedOut$[ebp], eax
	mov	eax, DWORD PTR _startedOut$[ebp]
	mov	DWORD PTR _wasOut$[ebp], eax

; 593  : 	if ( !startedOut ) {

	cmp	DWORD PTR _startedOut$[ebp], 0
	jne	SHORT $LN9@DrawClearS

; 594  : 		vert[num].x = leftPixel;

	movzx	ecx, WORD PTR _num$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	DWORD PTR _vert$[ebp+ecx*8], eax

; 595  : 		vert[num].y = topPixel;

	movzx	ecx, WORD PTR _num$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR _vert$[ebp+ecx*8+4], eax

; 596  : 		num++;

	mov	cx, WORD PTR _num$[ebp]
	add	cx, 1
	mov	WORD PTR _num$[ebp], cx
$LN9@DrawClearS:

; 597  : 	}
; 598  : 
; 599  : 	// Now check the upper right corner
; 600  : 	amOut = horizonLine.LeftOf( rightPixel, topPixel );

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+52]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+64]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _horizonLine$[ebp]
	call	?LeftOf@Edge@@QAEHMM@Z			; Edge::LeftOf
	mov	DWORD PTR _amOut$[ebp], eax

; 601  : 	if (amOut != wasOut) {

	mov	ecx, DWORD PTR _amOut$[ebp]
	cmp	ecx, DWORD PTR _wasOut$[ebp]
	je	SHORT $LN8@DrawClearS

; 602  : 		// Compute the intesection of the top edge with the horizon and insert it
; 603  : 		vert[num].x = horizonLine.X( topPixel );

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+52]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _horizonLine$[ebp]
	call	?X@Edge@@QAEMM@Z			; Edge::X
	movzx	eax, WORD PTR _num$[ebp]
	fstp	DWORD PTR _vert$[ebp+eax*8]

; 604  : 		vert[num].y = topPixel;

	movzx	ecx, WORD PTR _num$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR _vert$[ebp+ecx*8+4], eax

; 605  : 		num++;

	mov	cx, WORD PTR _num$[ebp]
	add	cx, 1
	mov	WORD PTR _num$[ebp], cx
$LN8@DrawClearS:

; 606  : 	}
; 607  : 	if (!amOut) {

	cmp	DWORD PTR _amOut$[ebp], 0
	jne	SHORT $LN7@DrawClearS

; 608  : 		vert[num].x = rightPixel;

	movzx	edx, WORD PTR _num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _vert$[ebp+edx*8], ecx

; 609  : 		vert[num].y = topPixel;

	movzx	edx, WORD PTR _num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _vert$[ebp+edx*8+4], ecx

; 610  : 		num++;

	mov	dx, WORD PTR _num$[ebp]
	add	dx, 1
	mov	WORD PTR _num$[ebp], dx
$LN7@DrawClearS:

; 611  : 	}
; 612  : 	wasOut = amOut;

	mov	eax, DWORD PTR _amOut$[ebp]
	mov	DWORD PTR _wasOut$[ebp], eax

; 613  : 
; 614  : 	// Now check the lower right corner
; 615  : 	amOut = horizonLine.LeftOf( rightPixel, bottomPixel );

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+56]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+64]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _horizonLine$[ebp]
	call	?LeftOf@Edge@@QAEHMM@Z			; Edge::LeftOf
	mov	DWORD PTR _amOut$[ebp], eax

; 616  : 	if (amOut != wasOut) {

	mov	eax, DWORD PTR _amOut$[ebp]
	cmp	eax, DWORD PTR _wasOut$[ebp]
	je	SHORT $LN6@DrawClearS

; 617  : 		// Compute the intesection of the right edge with the horizon and insert it
; 618  : 		vert[num].x = rightPixel;

	movzx	ecx, WORD PTR _num$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	DWORD PTR _vert$[ebp+ecx*8], eax

; 619  : 		vert[num].y = horizonLine.Y( rightPixel );

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+64]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _horizonLine$[ebp]
	call	?Y@Edge@@QAEMM@Z			; Edge::Y
	movzx	edx, WORD PTR _num$[ebp]
	fstp	DWORD PTR _vert$[ebp+edx*8+4]

; 620  : 		num++;

	mov	ax, WORD PTR _num$[ebp]
	add	ax, 1
	mov	WORD PTR _num$[ebp], ax
$LN6@DrawClearS:

; 621  : 	}
; 622  : 	if (!amOut) {

	cmp	DWORD PTR _amOut$[ebp], 0
	jne	SHORT $LN5@DrawClearS

; 623  : 		vert[num].x = rightPixel;

	movzx	ecx, WORD PTR _num$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	DWORD PTR _vert$[ebp+ecx*8], eax

; 624  : 		vert[num].y = bottomPixel;

	movzx	ecx, WORD PTR _num$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	DWORD PTR _vert$[ebp+ecx*8+4], eax

; 625  : 		num++;

	mov	cx, WORD PTR _num$[ebp]
	add	cx, 1
	mov	WORD PTR _num$[ebp], cx
$LN5@DrawClearS:

; 626  : 	}
; 627  : 	wasOut = amOut;

	mov	edx, DWORD PTR _amOut$[ebp]
	mov	DWORD PTR _wasOut$[ebp], edx

; 628  : 
; 629  : 	// Now check the lower left corner
; 630  : 	amOut = horizonLine.LeftOf( leftPixel, bottomPixel );

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+56]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+60]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _horizonLine$[ebp]
	call	?LeftOf@Edge@@QAEHMM@Z			; Edge::LeftOf
	mov	DWORD PTR _amOut$[ebp], eax

; 631  : 	if (amOut != wasOut) {

	mov	edx, DWORD PTR _amOut$[ebp]
	cmp	edx, DWORD PTR _wasOut$[ebp]
	je	SHORT $LN4@DrawClearS

; 632  : 		// Compute the intesection of the bottom edge with the horizon and insert it
; 633  : 		vert[num].x = horizonLine.X( bottomPixel );

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+56]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _horizonLine$[ebp]
	call	?X@Edge@@QAEMM@Z			; Edge::X
	movzx	ecx, WORD PTR _num$[ebp]
	fstp	DWORD PTR _vert$[ebp+ecx*8]

; 634  : 		vert[num].y = bottomPixel;

	movzx	edx, WORD PTR _num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _vert$[ebp+edx*8+4], ecx

; 635  : 		num++;

	mov	dx, WORD PTR _num$[ebp]
	add	dx, 1
	mov	WORD PTR _num$[ebp], dx
$LN4@DrawClearS:

; 636  : 	}
; 637  : 	if (!amOut) {

	cmp	DWORD PTR _amOut$[ebp], 0
	jne	SHORT $LN3@DrawClearS

; 638  : 		vert[num].x = leftPixel;

	movzx	eax, WORD PTR _num$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR _vert$[ebp+eax*8], edx

; 639  : 		vert[num].y = bottomPixel;

	movzx	eax, WORD PTR _num$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR _vert$[ebp+eax*8+4], edx

; 640  : 		num++;

	mov	ax, WORD PTR _num$[ebp]
	add	ax, 1
	mov	WORD PTR _num$[ebp], ax
$LN3@DrawClearS:

; 641  : 	}
; 642  : 	wasOut = amOut;

	mov	ecx, DWORD PTR _amOut$[ebp]
	mov	DWORD PTR _wasOut$[ebp], ecx

; 643  : 
; 644  : 	// Finally, clip the left edge if it crosses the horizon line
; 645  : 	if ( wasOut != startedOut ) {

	mov	edx, DWORD PTR _wasOut$[ebp]
	cmp	edx, DWORD PTR _startedOut$[ebp]
	je	SHORT $LN2@DrawClearS

; 646  : 		// Compute the intesection of the left edge with the horizon and insert it
; 647  : 		vert[num].x = (float)leftPixel;

	movzx	eax, WORD PTR _num$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR _vert$[ebp+eax*8], edx

; 648  : 		vert[num].y = horizonLine.Y( (float)leftPixel );

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+60]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _horizonLine$[ebp]
	call	?Y@Edge@@QAEMM@Z			; Edge::Y
	movzx	ecx, WORD PTR _num$[ebp]
	fstp	DWORD PTR _vert$[ebp+ecx*8+4]

; 649  : 		num++;

	mov	dx, WORD PTR _num$[ebp]
	add	dx, 1
	mov	WORD PTR _num$[ebp], dx
$LN2@DrawClearS:

; 650  : 	}
; 651  : 
; 652  : 	ShiAssert( num <= 5 );
; 653  : 
; 654  : 	// Draw the polygon if it isn't totally clipped
; 655  : 	if (num >= 3) {

	movzx	eax, WORD PTR _num$[ebp]
	cmp	eax, 3
	jl	$LN1@DrawClearS

; 656  : 		// Setup for flat shaded drawing for the sky clearing polygon
; 657  : 		context.RestoreState( STATE_SOLID );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 658  : 
; 659  : 		// Draw the sky filling polygon
; 660  : 		context.SelectForegroundColor (
; 661  : 					((FloatToInt32(sky_color.r * 255.9f)) + 
; 662  : 					 (FloatToInt32(sky_color.g * 255.9f) <<  8) +
; 663  : 					 (FloatToInt32(sky_color.b * 255.9f) << 16)) + 0xff000000);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+263132]
	mulss	xmm0, DWORD PTR __real@437fe666
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	esi, eax
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+263136]
	mulss	xmm0, DWORD PTR __real@437fe666
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	shl	eax, 8
	add	esi, eax
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+263140]
	mulss	xmm0, DWORD PTR __real@437fe666
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	shl	eax, 16					; 00000010H
	lea	ecx, DWORD PTR [esi+eax-16777216]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?SelectForegroundColor@ContextMPR@@QAEXH@Z ; ContextMPR::SelectForegroundColor

; 664  : 
; 665  : 		context.DrawPrimitive(MPR_PRM_TRIFAN, 0, num, &vert[0], sizeof(vert[0]));

	push	8
	mov	edx, 8
	imul	edx, 0
	lea	eax, DWORD PTR _vert$[ebp+edx]
	push	eax
	movzx	ecx, WORD PTR _num$[ebp]
	push	ecx
	push	0
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?DrawPrimitive@ContextMPR@@QAEXHGGPAUMPRVtx_t@@G@Z ; ContextMPR::DrawPrimitive
$LN1@DrawClearS:

; 666  : 	}
; 667  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _horizonLine$[ebp]
	call	??1Edge@@QAE@XZ				; Edge::~Edge
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?DrawClearSky@RenderOTW@@IAEXPAUHorizonRecord@@@Z$0:
	lea	ecx, DWORD PTR _horizonLine$[ebp]
	jmp	??1Edge@@QAE@XZ				; Edge::~Edge
__ehhandler$?DrawClearSky@RenderOTW@@IAEXPAUHorizonRecord@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-92]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DrawClearSky@RenderOTW@@IAEXPAUHorizonRecord@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?DrawClearSky@RenderOTW@@IAEXPAUHorizonRecord@@@Z ENDP	; RenderOTW::DrawClearSky
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\otwsky.cpp
_TEXT	SEGMENT
_this$ = -256						; size = 4
_gif$ = -249						; size = 1
_v1$ = -248						; size = 52
_v0$ = -196						; size = 52
_v2$ = -144						; size = 52
_v3$ = -92						; size = 52
_eastSide$ = -40					; size = 12
_corner$ = -28						; size = 12
_center$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_cntr$ = 8						; size = 4
_dist$ = 12						; size = 4
_alpha$ = 16						; size = 4
_r$ = 20						; size = 4
_g$ = 24						; size = 4
_b$ = 28						; size = 4
?DrawCelestialBody@RenderOTW@@IAEHPAUTpoint@@MMMMM@Z PROC ; RenderOTW::DrawCelestialBody
; _this$ = ecx

; 1260 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1261 : 	ThreeDVertex	v0, v1, v2, v3;
; 1262 : 	Tpoint			eastSide;
; 1263 : 	Tpoint			corner;
; 1264 : 	Tpoint			center = *cntr;

	mov	eax, DWORD PTR _cntr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _center$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _center$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _center$[ebp+8], eax

; 1265 : 
; 1266 : 	// Cross the vector toward the center with North (1,0,0) to get the side vector
; 1267 : 
; 1268 : 	// eastSide.x = center.y*n.z - center.z*n.y;
; 1269 : 	// eastSide.y = center.z*n.x - center.x*n.z;
; 1270 : 	// eastSide.z = center.x*n.y - center.y*n.x;
; 1271 : 	eastSide.x =  0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _eastSide$[ebp], xmm0

; 1272 : 	eastSide.y =  center.z;

	movss	xmm0, DWORD PTR _center$[ebp+8]
	movss	DWORD PTR _eastSide$[ebp+4], xmm0

; 1273 : 	eastSide.z = -center.y;

	movss	xmm0, DWORD PTR _center$[ebp+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _eastSide$[ebp+8], xmm0

; 1274 : 
; 1275 : 	
; 1276 : 	// Now push the center point outward to shrink the object
; 1277 : 	center.x *= dist;

	movss	xmm0, DWORD PTR _center$[ebp]
	mulss	xmm0, DWORD PTR _dist$[ebp]
	movss	DWORD PTR _center$[ebp], xmm0

; 1278 : 	center.y *= dist;

	movss	xmm0, DWORD PTR _center$[ebp+4]
	mulss	xmm0, DWORD PTR _dist$[ebp]
	movss	DWORD PTR _center$[ebp+4], xmm0

; 1279 : 	center.z *= dist;

	movss	xmm0, DWORD PTR _center$[ebp+8]
	mulss	xmm0, DWORD PTR _dist$[ebp]
	movss	DWORD PTR _center$[ebp+8], xmm0

; 1280 : 
; 1281 : 	// North West corner
; 1282 : 	corner.x = center.x + 1.0f;

	movss	xmm0, DWORD PTR _center$[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _corner$[ebp], xmm0

; 1283 : 	corner.y = center.y - eastSide.y;

	movss	xmm0, DWORD PTR _center$[ebp+4]
	subss	xmm0, DWORD PTR _eastSide$[ebp+4]
	movss	DWORD PTR _corner$[ebp+4], xmm0

; 1284 : 	corner.z = center.z - eastSide.z;

	movss	xmm0, DWORD PTR _center$[ebp+8]
	subss	xmm0, DWORD PTR _eastSide$[ebp+8]
	movss	DWORD PTR _corner$[ebp+8], xmm0

; 1285 : 	TransformCameraCentricPoint( &corner, &v0 );

	lea	ecx, DWORD PTR _v0$[ebp]
	push	ecx
	lea	edx, DWORD PTR _corner$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TransformCameraCentricPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformCameraCentricPoint

; 1286 : 	v0.u = 0.0f,	v0.v = 0.0f;	v0.q = 1.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v0$[ebp+24], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v0$[ebp+28], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v0$[ebp+32], xmm0

; 1287 : 
; 1288 : 	//JAM 04Oct03
; 1289 : 	if( DisplayOptions.m_texMode == DisplayOptionsClass::TEX_MODE_DDS)

	cmp	DWORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+24, 70161 ; 00011211H
	jne	SHORT $LN10@DrawCelest

; 1290 : 	{
; 1291 : 		v0.r = r,		v0.g = g;		v0.b = b;		v0.a = alpha;

	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR _v0$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _g$[ebp]
	movss	DWORD PTR _v0$[ebp+12], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR _v0$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _alpha$[ebp]
	movss	DWORD PTR _v0$[ebp+20], xmm0

; 1292 : 	}
; 1293 : 	else

	jmp	SHORT $LN9@DrawCelest
$LN10@DrawCelest:

; 1294 : 	{
; 1295 : 		v0.r = 1.0f,	v0.g = 1.0f;	v0.b = 1.0f;	v0.a = alpha;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v0$[ebp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v0$[ebp+12], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v0$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _alpha$[ebp]
	movss	DWORD PTR _v0$[ebp+20], xmm0
$LN9@DrawCelest:

; 1296 : 	}
; 1297 : 
; 1298 : 	// North East corner
; 1299 : 	corner.y = center.y + eastSide.y;

	movss	xmm0, DWORD PTR _center$[ebp+4]
	addss	xmm0, DWORD PTR _eastSide$[ebp+4]
	movss	DWORD PTR _corner$[ebp+4], xmm0

; 1300 : 	corner.z = center.z + eastSide.z;

	movss	xmm0, DWORD PTR _center$[ebp+8]
	addss	xmm0, DWORD PTR _eastSide$[ebp+8]
	movss	DWORD PTR _corner$[ebp+8], xmm0

; 1301 : 	TransformCameraCentricPoint( &corner, &v1 );

	lea	eax, DWORD PTR _v1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _corner$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TransformCameraCentricPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformCameraCentricPoint

; 1302 : 	v1.u = 1.0f,	v1.v = 0.0f;	v1.q = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v1$[ebp+24], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1$[ebp+28], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v1$[ebp+32], xmm0

; 1303 : 
; 1304 : 	//JAM 04Oct03
; 1305 : 	if( DisplayOptions.m_texMode == DisplayOptionsClass::TEX_MODE_DDS)

	cmp	DWORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+24, 70161 ; 00011211H
	jne	SHORT $LN8@DrawCelest

; 1306 : 	{
; 1307 : 		v1.r = r,		v1.g = g;		v1.b = b;		v1.a = alpha;

	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR _v1$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _g$[ebp]
	movss	DWORD PTR _v1$[ebp+12], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR _v1$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _alpha$[ebp]
	movss	DWORD PTR _v1$[ebp+20], xmm0

; 1308 : 	}
; 1309 : 	else

	jmp	SHORT $LN7@DrawCelest
$LN8@DrawCelest:

; 1310 : 	{
; 1311 : 		v1.r = 1.0f,	v1.g = 1.0f;	v1.b = 1.0f;	v1.a = alpha;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v1$[ebp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v1$[ebp+12], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v1$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _alpha$[ebp]
	movss	DWORD PTR _v1$[ebp+20], xmm0
$LN7@DrawCelest:

; 1312 : 	}
; 1313 : 
; 1314 : 	// South East corner
; 1315 : 	corner.x = center.x - 1.0f;

	movss	xmm0, DWORD PTR _center$[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _corner$[ebp], xmm0

; 1316 : 	TransformCameraCentricPoint( &corner, &v2 );

	lea	edx, DWORD PTR _v2$[ebp]
	push	edx
	lea	eax, DWORD PTR _corner$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TransformCameraCentricPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformCameraCentricPoint

; 1317 : 	v2.u = 1.0f,	v2.v = 1.0f;	v2.q = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v2$[ebp+24], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v2$[ebp+28], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v2$[ebp+32], xmm0

; 1318 : 
; 1319 : 	//JAM 04Oct03
; 1320 : 	if( DisplayOptions.m_texMode == DisplayOptionsClass::TEX_MODE_DDS)

	cmp	DWORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+24, 70161 ; 00011211H
	jne	SHORT $LN6@DrawCelest

; 1321 : 	{
; 1322 : 		v2.r = r,		v2.g = g;		v2.b = b;		v2.a = alpha;

	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR _v2$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _g$[ebp]
	movss	DWORD PTR _v2$[ebp+12], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR _v2$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _alpha$[ebp]
	movss	DWORD PTR _v2$[ebp+20], xmm0

; 1323 : 	}
; 1324 : 	else

	jmp	SHORT $LN5@DrawCelest
$LN6@DrawCelest:

; 1325 : 	{
; 1326 : 		v2.r = 1.0f,	v2.g = 1.0f;	v2.b = 1.0f;	v2.a = alpha;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v2$[ebp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v2$[ebp+12], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v2$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _alpha$[ebp]
	movss	DWORD PTR _v2$[ebp+20], xmm0
$LN5@DrawCelest:

; 1327 : 	}
; 1328 : 
; 1329 : 	// South West corner
; 1330 : 	corner.y = center.y - eastSide.y;

	movss	xmm0, DWORD PTR _center$[ebp+4]
	subss	xmm0, DWORD PTR _eastSide$[ebp+4]
	movss	DWORD PTR _corner$[ebp+4], xmm0

; 1331 : 	corner.z = center.z - eastSide.z;

	movss	xmm0, DWORD PTR _center$[ebp+8]
	subss	xmm0, DWORD PTR _eastSide$[ebp+8]
	movss	DWORD PTR _corner$[ebp+8], xmm0

; 1332 : 	TransformCameraCentricPoint( &corner, &v3 );

	lea	ecx, DWORD PTR _v3$[ebp]
	push	ecx
	lea	edx, DWORD PTR _corner$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TransformCameraCentricPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformCameraCentricPoint

; 1333 : 	v3.u = 0.0f,	v3.v = 1.0f;	v3.q = 1.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v3$[ebp+24], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v3$[ebp+28], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v3$[ebp+32], xmm0

; 1334 : 
; 1335 : 	//JAM 04Oct03
; 1336 : 	if( DisplayOptions.m_texMode == DisplayOptionsClass::TEX_MODE_DDS)

	cmp	DWORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+24, 70161 ; 00011211H
	jne	SHORT $LN4@DrawCelest

; 1337 : 	{
; 1338 : 		v3.r = r,		v3.g = g;		v3.b = b;		v3.a = alpha;

	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR _v3$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _g$[ebp]
	movss	DWORD PTR _v3$[ebp+12], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR _v3$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _alpha$[ebp]
	movss	DWORD PTR _v3$[ebp+20], xmm0

; 1339 : 	}
; 1340 : 	else

	jmp	SHORT $LN3@DrawCelest
$LN4@DrawCelest:

; 1341 : 	{
; 1342 : 		v3.r = 1.0f,	v3.g = 1.0f;	v3.b = 1.0f;	v3.a = alpha;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v3$[ebp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v3$[ebp+12], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v3$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _alpha$[ebp]
	movss	DWORD PTR _v3$[ebp+20], xmm0
$LN3@DrawCelest:

; 1343 : 	}
; 1344 : 
; 1345 : 	// Render the polygon
; 1346 : 	bool gif = false;

	mov	BYTE PTR _gif$[ebp], 0

; 1347 : 	if (g_nGfxFix & 0x04)

	mov	eax, DWORD PTR ?g_nGfxFix@@3HA		; g_nGfxFix
	and	eax, 4
	je	SHORT $LN2@DrawCelest

; 1348 : 		gif = true;

	mov	BYTE PTR _gif$[ebp], 1
$LN2@DrawCelest:

; 1349 : 
; 1350 : 	if ( v0.clipFlag & v1.clipFlag & v2.clipFlag & v3.clipFlag ) return 0;	// not visible

	mov	ecx, DWORD PTR _v0$[ebp+36]
	and	ecx, DWORD PTR _v1$[ebp+36]
	and	ecx, DWORD PTR _v2$[ebp+36]
	and	ecx, DWORD PTR _v3$[ebp+36]
	je	SHORT $LN1@DrawCelest
	xor	eax, eax
	jmp	SHORT $LN11@DrawCelest
$LN1@DrawCelest:

; 1351 : 
; 1352 : 	DrawSquare( &v0, &v1, &v2, &v3, CULL_ALLOW_ALL, gif);

	push	0
	movzx	edx, BYTE PTR _gif$[ebp]
	push	edx
	push	0
	lea	eax, DWORD PTR _v3$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v1$[ebp]
	push	edx
	lea	eax, DWORD PTR _v0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawSquare@Render3D@@QAEXPAUThreeDVertex@@000H_N1@Z ; Render3D::DrawSquare

; 1353 : 
; 1354 : 	return 1;

	mov	eax, 1
$LN11@DrawCelest:

; 1355 : 
; 1356 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?DrawCelestialBody@RenderOTW@@IAEHPAUTpoint@@MMMMM@Z ENDP ; RenderOTW::DrawCelestialBody
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\otwsky.cpp
_TEXT	SEGMENT
_horizonLine$2 = -140					; size = 12
_yaw$ = -128						; size = 4
_leftyaw$ = -124					; size = 4
_rightyaw$ = -120					; size = 4
_sizeperangle$ = -116					; size = 4
_bandangle$ = -112					; size = 4
_sunyaw$ = -108						; size = 4
_deltapitch$ = -104					; size = 4
_sunpitch$ = -100					; size = 4
_j$ = -96						; size = 4
_anglesize$ = -92					; size = 4
_this$ = -88						; size = 4
_i$ = -84						; size = 4
_sunEffectScreenSpace$ = -80				; size = 52
_sunEffectWorldSpace$ = -28				; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pHorizon$ = 8						; size = 4
?ComputeHorizonEffect@RenderOTW@@MAEXPAUHorizonRecord@@@Z PROC ; RenderOTW::ComputeHorizonEffect
; _this$ = ecx

; 1363 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ComputeHorizonEffect@RenderOTW@@MAEXPAUHorizonRecord@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1364 : 	Tpoint			sunEffectWorldSpace;
; 1365 : 	ThreeDVertex	sunEffectScreenSpace;
; 1366 : 
; 1367 : 	//JAM 09Dec03
; 1368 : 	if( realWeather->UnderOvercast() || realWeather->InsideOvercast()){

	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?UnderOvercast@RealWeather@@QAE_NXZ	; RealWeather::UnderOvercast
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN16@ComputeHor
	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?InsideOvercast@RealWeather@@QAE_NXZ	; RealWeather::InsideOvercast
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN17@ComputeHor
$LN16@ComputeHor:

; 1369 : 		pHorizon->horeffect = 0;

	mov	edx, DWORD PTR _pHorizon$[ebp]
	mov	DWORD PTR [edx+36], 0

; 1370 : 		return;

	jmp	$LN18@ComputeHor
$LN17@ComputeHor:

; 1371 : 	}
; 1372 : 
; 1373 : 	// Return now if the sun isn't up now
; 1374 : 	if (!TheTimeOfDay.ThereIsASun()) {

	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?ThereIsASun@CTimeOfDay@@QAEHXZ		; CTimeOfDay::ThereIsASun
	test	eax, eax
	jne	SHORT $LN15@ComputeHor

; 1375 : 		// No horizon effect
; 1376 : 		pHorizon->horeffect = 0;

	mov	eax, DWORD PTR _pHorizon$[ebp]
	mov	DWORD PTR [eax+36], 0

; 1377 : 		return;

	jmp	$LN18@ComputeHor
$LN15@ComputeHor:

; 1378 : 	}
; 1379 : 
; 1380 : 	int bandangle = glConvertFromRadian( pHorizon->bandAngleUp );

	mov	ecx, DWORD PTR _pHorizon$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR [esp], xmm0
	call	?glConvertFromRadian@@YAHM@Z		; glConvertFromRadian
	add	esp, 4
	mov	DWORD PTR _bandangle$[ebp], eax

; 1381 : 	int sunpitch = TheTimeOfDay.GetSunPitch();

	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetSunPitch@CTimeOfDay@@QAEHXZ		; CTimeOfDay::GetSunPitch
	mov	DWORD PTR _sunpitch$[ebp], eax

; 1382 : 	int deltapitch = sunpitch - bandangle;

	mov	edx, DWORD PTR _sunpitch$[ebp]
	sub	edx, DWORD PTR _bandangle$[ebp]
	mov	DWORD PTR _deltapitch$[ebp], edx

; 1383 : 
; 1384 : 	// Return now if the sun isn't near the horizon
; 1385 : 	if (deltapitch >= 784) {

	cmp	DWORD PTR _deltapitch$[ebp], 784	; 00000310H
	jl	SHORT $LN14@ComputeHor

; 1386 : 		// No horizon effect
; 1387 : 		pHorizon->horeffect = 0;

	mov	eax, DWORD PTR _pHorizon$[ebp]
	mov	DWORD PTR [eax+36], 0

; 1388 : 		return;

	jmp	$LN18@ComputeHor
$LN14@ComputeHor:

; 1389 : 	}
; 1390 : 
; 1391 : 	// Note that there is going to be a horizon effect
; 1392 : 	pHorizon->horeffect = 1;

	mov	ecx, DWORD PTR _pHorizon$[ebp]
	mov	DWORD PTR [ecx+36], 1

; 1393 : 	
; 1394 : 	// Figure out where the sun is...
; 1395 : 	if (deltapitch > 0) {

	cmp	DWORD PTR _deltapitch$[ebp], 0
	jle	SHORT $LN13@ComputeHor

; 1396 : 		// Sun is above the horizon band
; 1397 : 		pHorizon->hazescale = 0.6f - 0.6f * (float) deltapitch / 784.0f;

	cvtsi2ss xmm0, DWORD PTR _deltapitch$[ebp]
	mulss	xmm0, DWORD PTR __real@3f19999a
	divss	xmm0, DWORD PTR __real@44440000
	movss	xmm1, DWORD PTR __real@3f19999a
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _pHorizon$[ebp]
	movss	DWORD PTR [edx+40], xmm1

; 1398 : 	} 
; 1399 : 	else {

	jmp	$LN6@ComputeHor
$LN13@ComputeHor:

; 1400 : 		// Sun is comming up through the horizon
; 1401 : 		if (sunpitch < 0) {

	cmp	DWORD PTR _sunpitch$[ebp], 0
	jge	SHORT $LN11@ComputeHor

; 1402 : 			// calculate scale factor when sun is below horizon to prevent color popup
; 1403 : 			if (sunpitch < -256){

	cmp	DWORD PTR _sunpitch$[ebp], -256		; ffffff00H
	jge	SHORT $LN10@ComputeHor

; 1404 : 				pHorizon->hazescale = 0.0f;

	mov	eax, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+40], xmm0

; 1405 : 			}
; 1406 : 			else {

	jmp	SHORT $LN8@ComputeHor
$LN10@ComputeHor:

; 1407 : 				pHorizon->hazescale = 0.8f - (float) -sunpitch / 256.0f;

	mov	ecx, DWORD PTR _sunpitch$[ebp]
	neg	ecx
	cvtsi2ss xmm0, ecx
	divss	xmm0, DWORD PTR __real@43800000
	movss	xmm1, DWORD PTR __real@3f4ccccd
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _pHorizon$[ebp]
	movss	DWORD PTR [edx+40], xmm1

; 1408 : 				if (pHorizon->hazescale < 0.0f){

	mov	eax, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [eax+40]
	jbe	SHORT $LN8@ComputeHor

; 1409 : 					pHorizon->hazescale = 0.0f;

	mov	ecx, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+40], xmm0
$LN8@ComputeHor:

; 1410 : 				}
; 1411 : 			}
; 1412 : 		} 
; 1413 : 		else {

	jmp	SHORT $LN6@ComputeHor
$LN11@ComputeHor:

; 1414 : 			// calculate scale factor when sun is inside the band
; 1415 : 			pHorizon->hazescale = 0.6f + 0.4f * (float) -deltapitch / (float) bandangle;

	mov	edx, DWORD PTR _deltapitch$[ebp]
	neg	edx
	cvtsi2ss xmm0, edx
	mulss	xmm0, DWORD PTR __real@3ecccccd
	cvtsi2ss xmm1, DWORD PTR _bandangle$[ebp]
	divss	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3f19999a
	mov	eax, DWORD PTR _pHorizon$[ebp]
	movss	DWORD PTR [eax+40], xmm0

; 1416 : 			if (pHorizon->hazescale > 1.0f){

	mov	ecx, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR [ecx+40]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN6@ComputeHor

; 1417 : 				pHorizon->hazescale = 1.0f;

	mov	edx, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+40], xmm0
$LN6@ComputeHor:

; 1418 : 			}
; 1419 : 		}
; 1420 : 	}
; 1421 : 
; 1422 : 	// calculate point on the horizon line to represent sun position
; 1423 : 	TheTimeOfDay.CalculateSunGroundPos (&sunEffectWorldSpace);

	lea	eax, DWORD PTR _sunEffectWorldSpace$[ebp]
	push	eax
	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?CalculateSunGroundPos@CTimeOfDay@@QAEXPAUTpoint@@@Z ; CTimeOfDay::CalculateSunGroundPos

; 1424 : 	TransformCameraCentricPoint( &sunEffectWorldSpace, &sunEffectScreenSpace );

	lea	ecx, DWORD PTR _sunEffectScreenSpace$[ebp]
	push	ecx
	lea	edx, DWORD PTR _sunEffectWorldSpace$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TransformCameraCentricPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformCameraCentricPoint

; 1425 : 
; 1426 : 	if (1/*!(sunEffectScreenSpace.clipFlag & CLIP_NEAR)*/) {

	mov	eax, 1
	test	eax, eax
	je	$LN5@ComputeHor

; 1427 : 		pHorizon->sunEffectPos.x = sunEffectScreenSpace.x;

	mov	ecx, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR _sunEffectScreenSpace$[ebp]
	movss	DWORD PTR [ecx+52], xmm0

; 1428 : 		pHorizon->sunEffectPos.y = sunEffectScreenSpace.y;

	mov	edx, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR _sunEffectScreenSpace$[ebp+4]
	movss	DWORD PTR [edx+56], xmm0

; 1429 : 		pHorizon->sunEffectPos.z = 1.0f;

	mov	eax, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+60], xmm0

; 1430 : 		Edge horizonLine;

	lea	ecx, DWORD PTR _horizonLine$2[ebp]
	call	??0Edge@@QAE@XZ				; Edge::Edge
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1431 : 		horizonLine.SetupWithVector( shiftX+pHorizon->vx, shiftY+pHorizon->vy, pHorizon->hx, pHorizon->hy );

	mov	ecx, DWORD PTR _pHorizon$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _pHorizon$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR [eax+44]
	addss	xmm0, DWORD PTR [ecx+16]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR [edx+40]
	addss	xmm0, DWORD PTR [eax+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _horizonLine$2[ebp]
	call	?SetupWithVector@Edge@@QAEXMMMM@Z	; Edge::SetupWithVector

; 1432 : 		pHorizon->sunEffectPos.y = horizonLine.Y (pHorizon->sunEffectPos.x);

	mov	ecx, DWORD PTR _pHorizon$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+52]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _horizonLine$2[ebp]
	call	?Y@Edge@@QAEMM@Z			; Edge::Y
	mov	edx, DWORD PTR _pHorizon$[ebp]
	fstp	DWORD PTR [edx+56]

; 1433 : 		pHorizon->horeffect |= 2;

	mov	eax, DWORD PTR _pHorizon$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	or	ecx, 2
	mov	edx, DWORD PTR _pHorizon$[ebp]
	mov	DWORD PTR [edx+36], ecx

; 1434 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _horizonLine$2[ebp]
	call	??1Edge@@QAE@XZ				; Edge::~Edge
$LN5@ComputeHor:

; 1435 : 
; 1436 : 	// calculate scale factor on the left and right side based on the yaw
; 1437 : 	pHorizon->lhazescale = pHorizon->rhazescale = 0.0f;

	mov	eax, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+44], xmm0
	mov	ecx, DWORD PTR _pHorizon$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+48], xmm0

; 1438 : 	int anglesize = glConvertFromRadian(diagonal_half_angle);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+262900]
	movss	DWORD PTR [esp], xmm0
	call	?glConvertFromRadian@@YAHM@Z		; glConvertFromRadian
	add	esp, 4
	mov	DWORD PTR _anglesize$[ebp], eax

; 1439 : 	int yaw = glConvertFromRadian(Yaw());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Yaw@Render3D@@QAEMXZ			; Render3D::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	call	?glConvertFromRadian@@YAHM@Z		; glConvertFromRadian
	add	esp, 4
	mov	DWORD PTR _yaw$[ebp], eax

; 1440 : 	int leftyaw = (yaw - anglesize) & 0x3fff;

	mov	eax, DWORD PTR _yaw$[ebp]
	sub	eax, DWORD PTR _anglesize$[ebp]
	and	eax, 16383				; 00003fffH
	mov	DWORD PTR _leftyaw$[ebp], eax

; 1441 : 	int rightyaw = (yaw + anglesize) & 0x3fff;

	mov	ecx, DWORD PTR _yaw$[ebp]
	add	ecx, DWORD PTR _anglesize$[ebp]
	and	ecx, 16383				; 00003fffH
	mov	DWORD PTR _rightyaw$[ebp], ecx

; 1442 : 	anglesize <<= 1;

	mov	edx, DWORD PTR _anglesize$[ebp]
	shl	edx, 1
	mov	DWORD PTR _anglesize$[ebp], edx

; 1443 : 	float sizeperangle = pHorizon->hazescale / (float) (anglesize);

	cvtsi2ss xmm0, DWORD PTR _anglesize$[ebp]
	mov	eax, DWORD PTR _pHorizon$[ebp]
	movss	xmm1, DWORD PTR [eax+40]
	divss	xmm1, xmm0
	movss	DWORD PTR _sizeperangle$[ebp], xmm1

; 1444 : 	int sunyaw = TheTimeOfDay.GetSunYaw();

	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetSunYaw@CTimeOfDay@@QAEHXZ		; CTimeOfDay::GetSunYaw
	mov	DWORD PTR _sunyaw$[ebp], eax

; 1445 : 
; 1446 : 	int i, j;
; 1447 : 	i = (sunyaw - leftyaw) & 0x3fff;

	mov	ecx, DWORD PTR _sunyaw$[ebp]
	sub	ecx, DWORD PTR _leftyaw$[ebp]
	and	ecx, 16383				; 00003fffH
	mov	DWORD PTR _i$[ebp], ecx

; 1448 : 	j = (leftyaw - sunyaw) & 0x3fff;

	mov	edx, DWORD PTR _leftyaw$[ebp]
	sub	edx, DWORD PTR _sunyaw$[ebp]
	and	edx, 16383				; 00003fffH
	mov	DWORD PTR _j$[ebp], edx

; 1449 : 	if (i > j){

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _j$[ebp]
	jle	SHORT $LN4@ComputeHor

; 1450 : 		i = j;

	mov	ecx, DWORD PTR _j$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
$LN4@ComputeHor:

; 1451 : 	}
; 1452 : 	if (i < anglesize){

	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _anglesize$[ebp]
	jge	SHORT $LN3@ComputeHor

; 1453 : 		pHorizon->lhazescale = pHorizon->hazescale - (i * sizeperangle);

	cvtsi2ss xmm0, DWORD PTR _i$[ebp]
	mulss	xmm0, DWORD PTR _sizeperangle$[ebp]
	mov	eax, DWORD PTR _pHorizon$[ebp]
	movss	xmm1, DWORD PTR [eax+40]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _pHorizon$[ebp]
	movss	DWORD PTR [ecx+48], xmm1
$LN3@ComputeHor:

; 1454 : 	}
; 1455 : 	i = (sunyaw - rightyaw) & 0x3fff;

	mov	edx, DWORD PTR _sunyaw$[ebp]
	sub	edx, DWORD PTR _rightyaw$[ebp]
	and	edx, 16383				; 00003fffH
	mov	DWORD PTR _i$[ebp], edx

; 1456 : 	j = (rightyaw - sunyaw) & 0x3fff;

	mov	eax, DWORD PTR _rightyaw$[ebp]
	sub	eax, DWORD PTR _sunyaw$[ebp]
	and	eax, 16383				; 00003fffH
	mov	DWORD PTR _j$[ebp], eax

; 1457 : 	if (i > j){

	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _j$[ebp]
	jle	SHORT $LN2@ComputeHor

; 1458 : 		i = j;

	mov	edx, DWORD PTR _j$[ebp]
	mov	DWORD PTR _i$[ebp], edx
$LN2@ComputeHor:

; 1459 : 	}
; 1460 : 	if (i < anglesize) {

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _anglesize$[ebp]
	jge	SHORT $LN1@ComputeHor

; 1461 : 		pHorizon->rhazescale = pHorizon->hazescale - (i * sizeperangle);

	cvtsi2ss xmm0, DWORD PTR _i$[ebp]
	mulss	xmm0, DWORD PTR _sizeperangle$[ebp]
	mov	ecx, DWORD PTR _pHorizon$[ebp]
	movss	xmm1, DWORD PTR [ecx+40]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _pHorizon$[ebp]
	movss	DWORD PTR [edx+44], xmm1
$LN1@ComputeHor:

; 1462 : 	}
; 1463 : 
; 1464 : 	// Get the effect of the sun on the horizon color
; 1465 : 	TheTimeOfDay.GetHazeSunHorizonColor( &pHorizon->sunEffectColor );

	mov	eax, DWORD PTR _pHorizon$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetHazeSunHorizonColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ; CTimeOfDay::GetHazeSunHorizonColor

; 1466 : 	ProcessColor( &pHorizon->sunEffectColor );

	mov	ecx, DWORD PTR _pHorizon$[ebp]
	add	ecx, 64					; 00000040H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+152]
	call	edx
$LN18@ComputeHor:

; 1467 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ComputeHorizonEffect@RenderOTW@@MAEXPAUHorizonRecord@@@Z$0:
	lea	ecx, DWORD PTR _horizonLine$2[ebp]
	jmp	??1Edge@@QAE@XZ				; Edge::~Edge
__ehhandler$?ComputeHorizonEffect@RenderOTW@@MAEXPAUHorizonRecord@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ComputeHorizonEffect@RenderOTW@@MAEXPAUHorizonRecord@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ComputeHorizonEffect@RenderOTW@@MAEXPAUHorizonRecord@@@Z ENDP ; RenderOTW::ComputeHorizonEffect
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\otwsky.cpp
_TEXT	SEGMENT
tv420 = -148						; size = 8
tv412 = -140						; size = 8
tv404 = -132						; size = 8
_vert$1 = -124						; size = 8
tv418 = -116						; size = 4
tv402 = -112						; size = 4
tv410 = -108						; size = 4
tv314 = -104						; size = 4
_draw_color$2 = -100					; size = 4
tv95 = -96						; size = 4
_scratch_x$3 = -92					; size = 4
_scratch_y$4 = -88					; size = 4
_OneOverZ$5 = -84					; size = 4
_stardata$6 = -80					; size = 4
_blend$7 = -76						; size = 4
_lastcolor$8 = -72					; size = 4
_vpAlt$ = -68						; size = 4
_i$9 = -64						; size = 4
_curcolor$10 = -60					; size = 4
_scratch_z$11 = -56					; size = 4
tv399 = -50						; size = 2
tv415 = -48						; size = 2
tv407 = -46						; size = 2
_althazefactor$12 = -44					; size = 4
_starblend$ = -40					; size = 4
_coord$13 = -36						; size = 4
_this$ = -32						; size = 4
_sky_part$14 = -28					; size = 12
_star_color$15 = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
?DrawStars@RenderOTW@@MAEXXZ PROC			; RenderOTW::DrawStars
; _this$ = ecx

; 1063 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 148				; 00000094H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1064 : 	// RED - Do not draw if inside a layer
; 1065 : 	if( realWeather->InsideOvercast() || realWeather->UnderOvercast() ) return;

	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?InsideOvercast@RealWeather@@QAE_NXZ	; RealWeather::InsideOvercast
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN20@DrawStars
	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?UnderOvercast@RealWeather@@QAE_NXZ	; RealWeather::UnderOvercast
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN21@DrawStars
$LN20@DrawStars:
	jmp	$LN22@DrawStars
$LN21@DrawStars:

; 1066 : 
; 1067 : 	float starblend = TheTimeOfDay.GetStarIntensity();

	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetStarIntensity@CTimeOfDay@@QAEMXZ	; CTimeOfDay::GetStarIntensity
	fstp	DWORD PTR _starblend$[ebp]

; 1068 : 	float vpAlt = -viewpoint->Z();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+263088]
	call	?Z@TViewPoint@@QAEMXZ			; TViewPoint::Z
	fstp	DWORD PTR tv314[ebp]
	movss	xmm0, DWORD PTR tv314[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _vpAlt$[ebp], xmm0

; 1069 : 
; 1070 : 
; 1071 : 	if (vpAlt > SKY_ROOF_HEIGHT) {

	movss	xmm0, DWORD PTR _vpAlt$[ebp]
	comiss	xmm0, DWORD PTR __real@476a6000
	jbe	$LN19@DrawStars

; 1072 : 		float	althazefactor;
; 1073 : 
; 1074 : 		if (vpAlt > SKY_MAX_HEIGHT) {

	movss	xmm0, DWORD PTR _vpAlt$[ebp]
	comiss	xmm0, DWORD PTR __real@4788b800
	jbe	SHORT $LN18@DrawStars

; 1075 : 			althazefactor = 0.2f;

	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _althazefactor$12[ebp], xmm0

; 1076 : 		}
; 1077 : 		else {

	jmp	SHORT $LN16@DrawStars
$LN18@DrawStars:

; 1078 : 			althazefactor = (SKY_MAX_HEIGHT - vpAlt) * HAZE_ALTITUDE_FACTOR;

	movss	xmm0, DWORD PTR __real@4788b800
	subss	xmm0, DWORD PTR _vpAlt$[ebp]
	mulss	xmm0, DWORD PTR ?HAZE_ALTITUDE_FACTOR@RenderOTW@@2MB
	movss	DWORD PTR _althazefactor$12[ebp], xmm0

; 1079 : 			if (althazefactor < 0.2f) althazefactor = 0.2f;

	movss	xmm0, DWORD PTR __real@3e4ccccd
	comiss	xmm0, DWORD PTR _althazefactor$12[ebp]
	jbe	SHORT $LN16@DrawStars
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _althazefactor$12[ebp], xmm0
$LN16@DrawStars:

; 1080 : 		}
; 1081 : 
; 1082 : 		starblend = min( 1.0f, starblend + 1.0f - althazefactor );

	movss	xmm0, DWORD PTR _starblend$[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _althazefactor$12[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN24@DrawStars
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv95[ebp], xmm0
	jmp	SHORT $LN25@DrawStars
$LN24@DrawStars:
	movss	xmm0, DWORD PTR _starblend$[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _althazefactor$12[ebp]
	movss	DWORD PTR tv95[ebp], xmm0
$LN25@DrawStars:
	movss	xmm0, DWORD PTR tv95[ebp]
	movss	DWORD PTR _starblend$[ebp], xmm0
$LN19@DrawStars:

; 1083 : 	}
; 1084 : 
; 1085 : 
; 1086 : 	if (starblend > 0.000001f) {

	movss	xmm0, DWORD PTR _starblend$[ebp]
	comiss	xmm0, DWORD PTR __real@358637bd
	jbe	$LN12@DrawStars

; 1087 : 		Tcolor		star_color;
; 1088 : 		Tcolor		sky_part;
; 1089 : 		DWORD		draw_color;
; 1090 : 		MPRVtx_t	vert;
; 1091 : 		register float		scratch_x;
; 1092 : 		register float		scratch_y;
; 1093 : 		register float		scratch_z;
; 1094 : 
; 1095 : 		
; 1096 : 		// Compute the sky color portion of the star colors
; 1097 : 		float blend = 255.0f * (1.0f - starblend);

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _starblend$[ebp]
	mulss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _blend$7[ebp], xmm0

; 1098 : 		sky_part.r = sky_color.r * blend;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+263132]
	mulss	xmm0, DWORD PTR _blend$7[ebp]
	movss	DWORD PTR _sky_part$14[ebp], xmm0

; 1099 : 		sky_part.g = sky_color.g * blend;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+263136]
	mulss	xmm0, DWORD PTR _blend$7[ebp]
	movss	DWORD PTR _sky_part$14[ebp+4], xmm0

; 1100 : 		sky_part.b = sky_color.b * blend;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+263140]
	mulss	xmm0, DWORD PTR _blend$7[ebp]
	movss	DWORD PTR _sky_part$14[ebp+8], xmm0

; 1101 : 
; 1102 : 		context.RestoreState( STATE_SOLID );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 1103 : 
; 1104 : 		StarData *stardata = TheTimeOfDay.GetStarData();

	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetStarData@CTimeOfDay@@QAEPAUStarData@@XZ ; CTimeOfDay::GetStarData
	mov	DWORD PTR _stardata$6[ebp], eax

; 1105 : 		StarCoord *coord = stardata -> coord;

	mov	eax, DWORD PTR _stardata$6[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _coord$13[ebp], ecx

; 1106 : 		int lastcolor = -1;

	mov	DWORD PTR _lastcolor$8[ebp], -1

; 1107 : 		int i;
; 1108 : 		for (i= 0; i < stardata -> totalcoord; i++, coord++) {

	mov	DWORD PTR _i$9[ebp], 0
	jmp	SHORT $LN14@DrawStars
$LN13@DrawStars:
	mov	edx, DWORD PTR _i$9[ebp]
	add	edx, 1
	mov	DWORD PTR _i$9[ebp], edx
	mov	eax, DWORD PTR _coord$13[ebp]
	add	eax, 28					; 0000001cH
	mov	DWORD PTR _coord$13[ebp], eax
$LN14@DrawStars:
	mov	ecx, DWORD PTR _stardata$6[ebp]
	mov	edx, DWORD PTR _i$9[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jge	$LN12@DrawStars

; 1109 : 			if (coord -> flag) continue;

	mov	eax, DWORD PTR _coord$13[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN11@DrawStars
	jmp	SHORT $LN13@DrawStars
$LN11@DrawStars:

; 1110 : 			if (lastcolor != coord -> color) {

	mov	ecx, DWORD PTR _coord$13[ebp]
	mov	edx, DWORD PTR _lastcolor$8[ebp]
	cmp	edx, DWORD PTR [ecx+12]
	je	$LN10@DrawStars

; 1111 : 				lastcolor = coord -> color;

	mov	eax, DWORD PTR _coord$13[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _lastcolor$8[ebp], ecx

; 1112 : 				float curcolor = lastcolor * starblend;

	cvtsi2ss xmm0, DWORD PTR _lastcolor$8[ebp]
	mulss	xmm0, DWORD PTR _starblend$[ebp]
	movss	DWORD PTR _curcolor$10[ebp], xmm0

; 1113 : 				star_color.r = curcolor + sky_part.r;

	movss	xmm0, DWORD PTR _curcolor$10[ebp]
	addss	xmm0, DWORD PTR _sky_part$14[ebp]
	movss	DWORD PTR _star_color$15[ebp], xmm0

; 1114 : 				star_color.g = curcolor + sky_part.g;

	movss	xmm0, DWORD PTR _curcolor$10[ebp]
	addss	xmm0, DWORD PTR _sky_part$14[ebp+4]
	movss	DWORD PTR _star_color$15[ebp+4], xmm0

; 1115 : 				star_color.b = curcolor + sky_part.b;

	movss	xmm0, DWORD PTR _curcolor$10[ebp]
	addss	xmm0, DWORD PTR _sky_part$14[ebp+8]
	movss	DWORD PTR _star_color$15[ebp+8], xmm0

; 1116 : 				if (star_color.r > 255.0f) star_color.r = 255.0f;

	movss	xmm0, DWORD PTR _star_color$15[ebp]
	comiss	xmm0, DWORD PTR __real@437f0000
	jbe	SHORT $LN9@DrawStars
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _star_color$15[ebp], xmm0
$LN9@DrawStars:

; 1117 : 				if (star_color.g > 255.0f) star_color.g = 255.0f;

	movss	xmm0, DWORD PTR _star_color$15[ebp+4]
	comiss	xmm0, DWORD PTR __real@437f0000
	jbe	SHORT $LN8@DrawStars
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _star_color$15[ebp+4], xmm0
$LN8@DrawStars:

; 1118 : 				if (star_color.b > 255.0f) star_color.b = 255.0f;

	movss	xmm0, DWORD PTR _star_color$15[ebp+8]
	comiss	xmm0, DWORD PTR __real@437f0000
	jbe	SHORT $LN7@DrawStars
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _star_color$15[ebp+8], xmm0
$LN7@DrawStars:

; 1119 : 				if (star_color.r < 64.0f) star_color.r = 64.0f;

	movss	xmm0, DWORD PTR __real@42800000
	comiss	xmm0, DWORD PTR _star_color$15[ebp]
	jbe	SHORT $LN6@DrawStars
	movss	xmm0, DWORD PTR __real@42800000
	movss	DWORD PTR _star_color$15[ebp], xmm0
$LN6@DrawStars:

; 1120 : 				if (star_color.g < 64.0f) star_color.g = 64.0f;

	movss	xmm0, DWORD PTR __real@42800000
	comiss	xmm0, DWORD PTR _star_color$15[ebp+4]
	jbe	SHORT $LN5@DrawStars
	movss	xmm0, DWORD PTR __real@42800000
	movss	DWORD PTR _star_color$15[ebp+4], xmm0
$LN5@DrawStars:

; 1121 : 				if (star_color.b < 64.0f) star_color.b = 64.0f;

	movss	xmm0, DWORD PTR __real@42800000
	comiss	xmm0, DWORD PTR _star_color$15[ebp+8]
	jbe	SHORT $LN4@DrawStars
	movss	xmm0, DWORD PTR __real@42800000
	movss	DWORD PTR _star_color$15[ebp+8], xmm0
$LN4@DrawStars:

; 1122 : 				ProcessColor( &star_color );

	lea	edx, DWORD PTR _star_color$15[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+152]
	call	eax

; 1123 : 				draw_color = (DWORD)star_color.r | 
; 1124 :  							 (DWORD)star_color.g << 8 | 
; 1125 : 							 (DWORD)star_color.g << 16;

	fld	DWORD PTR _star_color$15[ebp]
	fnstcw	WORD PTR tv399[ebp]
	movzx	eax, WORD PTR tv399[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv402[ebp], eax
	fldcw	WORD PTR tv402[ebp]
	fistp	QWORD PTR tv404[ebp]
	fldcw	WORD PTR tv399[ebp]
	mov	ecx, DWORD PTR tv404[ebp]
	fld	DWORD PTR _star_color$15[ebp+4]
	fnstcw	WORD PTR tv407[ebp]
	movzx	eax, WORD PTR tv407[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv410[ebp], eax
	fldcw	WORD PTR tv410[ebp]
	fistp	QWORD PTR tv412[ebp]
	fldcw	WORD PTR tv407[ebp]
	mov	edx, DWORD PTR tv412[ebp]
	shl	edx, 8
	or	ecx, edx
	fld	DWORD PTR _star_color$15[ebp+4]
	fnstcw	WORD PTR tv415[ebp]
	movzx	eax, WORD PTR tv415[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv418[ebp], eax
	fldcw	WORD PTR tv418[ebp]
	fistp	QWORD PTR tv420[ebp]
	fldcw	WORD PTR tv415[ebp]
	mov	eax, DWORD PTR tv420[ebp]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	DWORD PTR _draw_color$2[ebp], ecx

; 1126 : 				context.SelectForegroundColor( draw_color );

	mov	ecx, DWORD PTR _draw_color$2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?SelectForegroundColor@ContextMPR@@QAEXH@Z ; ContextMPR::SelectForegroundColor
$LN10@DrawStars:

; 1127 : 			}
; 1128 : 			
; 1129 : 			// This part does rotation, translation, and scaling
; 1130 : 			// Note, we're swapping the x and z axes here to get from z up/down to z far/near
; 1131 : 			// then we're swapping the x and y axes to get into conventional screen pixel coordinates
; 1132 : 			scratch_z = T.M11 * coord->x + T.M12 * coord->y + T.M13 * coord->z;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _coord$13[ebp]
	movss	xmm0, DWORD PTR [edx+263008]
	mulss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _coord$13[ebp]
	movss	xmm1, DWORD PTR [ecx+263012]
	mulss	xmm1, DWORD PTR [edx+4]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _coord$13[ebp]
	movss	xmm1, DWORD PTR [eax+263016]
	mulss	xmm1, DWORD PTR [ecx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _scratch_z$11[ebp], xmm0

; 1133 : 			scratch_x = T.M21 * coord->x + T.M22 * coord->y + T.M23 * coord->z;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _coord$13[ebp]
	movss	xmm0, DWORD PTR [edx+263020]
	mulss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _coord$13[ebp]
	movss	xmm1, DWORD PTR [ecx+263024]
	mulss	xmm1, DWORD PTR [edx+4]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _coord$13[ebp]
	movss	xmm1, DWORD PTR [eax+263028]
	mulss	xmm1, DWORD PTR [ecx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _scratch_x$3[ebp], xmm0

; 1134 : 			scratch_y = T.M31 * coord->x + T.M32 * coord->y + T.M33 * coord->z;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _coord$13[ebp]
	movss	xmm0, DWORD PTR [edx+263032]
	mulss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _coord$13[ebp]
	movss	xmm1, DWORD PTR [ecx+263036]
	mulss	xmm1, DWORD PTR [edx+4]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _coord$13[ebp]
	movss	xmm1, DWORD PTR [eax+263040]
	mulss	xmm1, DWORD PTR [ecx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _scratch_y$4[ebp], xmm0

; 1135 : 
; 1136 : 			// Now determine if the point is out behind us or to the sides
; 1137 : 			if (scratch_z < 0.000001f)											continue;

	movss	xmm0, DWORD PTR __real@358637bd
	comiss	xmm0, DWORD PTR _scratch_z$11[ebp]
	jbe	SHORT $LN3@DrawStars
	jmp	$LN13@DrawStars
$LN3@DrawStars:

; 1138 : 			if (GetHorizontalClipFlags( scratch_x, scratch_z ) != ON_SCREEN)	continue;

	push	ecx
	movss	xmm0, DWORD PTR _scratch_z$11[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scratch_x$3[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?GetHorizontalClipFlags@@YAKMM@Z	; GetHorizontalClipFlags
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@DrawStars
	jmp	$LN13@DrawStars
$LN2@DrawStars:

; 1139 : 			if (GetVerticalClipFlags(   scratch_y, scratch_z ) != ON_SCREEN)	continue;

	push	ecx
	movss	xmm0, DWORD PTR _scratch_z$11[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scratch_y$4[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?GetVerticalClipFlags@@YAKMM@Z		; GetVerticalClipFlags
	add	esp, 8
	test	eax, eax
	je	SHORT $LN1@DrawStars
	jmp	$LN13@DrawStars
$LN1@DrawStars:

; 1140 : 
; 1141 : 			// Finally, do the perspective divide and scale and shift into screen space
; 1142 : 			register float OneOverZ = 1.0f/scratch_z;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _scratch_z$11[ebp]
	movss	DWORD PTR _OneOverZ$5[ebp], xmm0

; 1143 : 			vert.x = viewportXtoPixel( scratch_x * OneOverZ );

	movss	xmm0, DWORD PTR _scratch_x$3[ebp]
	mulss	xmm0, DWORD PTR _OneOverZ$5[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?viewportXtoPixel@VirtualDisplay@@QAEMM@Z ; VirtualDisplay::viewportXtoPixel
	fstp	DWORD PTR _vert$1[ebp]

; 1144 : 			vert.y = viewportYtoPixel( scratch_y * OneOverZ );

	movss	xmm0, DWORD PTR _scratch_y$4[ebp]
	mulss	xmm0, DWORD PTR _OneOverZ$5[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?viewportYtoPixel@VirtualDisplay@@QAEMM@Z ; VirtualDisplay::viewportYtoPixel
	fstp	DWORD PTR _vert$1[ebp+4]

; 1145 : 
; 1146 : 			// Draw the point (we _REALLY_ should do several (or all) points at once)
; 1147 : 			context.DrawPrimitive(MPR_PRM_POINTS, 0, 1, &vert, sizeof(vert));

	push	8
	lea	edx, DWORD PTR _vert$1[ebp]
	push	edx
	push	1
	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?DrawPrimitive@ContextMPR@@QAEXHGGPAUMPRVtx_t@@G@Z ; ContextMPR::DrawPrimitive

; 1148 : 		}

	jmp	$LN13@DrawStars
$LN12@DrawStars:
$LN22@DrawStars:

; 1149 : 	}
; 1150 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawStars@RenderOTW@@MAEXXZ ENDP			; RenderOTW::DrawStars
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\otwsky.cpp
_TEXT	SEGMENT
tv211 = -48						; size = 8
_dist$ = -40						; size = 4
tv200 = -36						; size = 4
_glare$ = -32						; size = 4
_vpAlt$1 = -28						; size = 4
_moonblend$ = -24					; size = 4
_this$ = -20						; size = 4
_center$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?DrawMoon@RenderOTW@@MAEXXZ PROC			; RenderOTW::DrawMoon
; _this$ = ecx

; 1211 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1212 : 	// RED - Do not draw if inside a layer
; 1213 : 	if( realWeather->InsideOvercast() || realWeather->UnderOvercast() ) return;

	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?InsideOvercast@RealWeather@@QAE_NXZ	; RealWeather::InsideOvercast
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN9@DrawMoon
	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?UnderOvercast@RealWeather@@QAE_NXZ	; RealWeather::UnderOvercast
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN10@DrawMoon
$LN9@DrawMoon:
	jmp	$LN11@DrawMoon
$LN10@DrawMoon:

; 1214 : 
; 1215 : 	Tpoint	center;
; 1216 : 
; 1217 : 	ShiAssert( TheTimeOfDay.ThereIsAMoon() );
; 1218 : 
; 1219 : 	// Get the center point of the body on a unit sphere in world space
; 1220 : 	TheTimeOfDay.CalculateSunMoonPos( &center, TRUE );

	push	1
	lea	edx, DWORD PTR _center$[ebp]
	push	edx
	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?CalculateSunMoonPos@CTimeOfDay@@QAEXPAUTpoint@@H@Z ; CTimeOfDay::CalculateSunMoonPos

; 1221 : 
; 1222 : 	// Draw the object
; 1223 : 	context.RestoreState( STATE_ALPHA_TEXTURE_GOURAUD );

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 1224 : 	if (TheTimeOfDay.GetNVGmode()) {

	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetNVGmode@CTimeOfDay@@QAEHXZ		; CTimeOfDay::GetNVGmode
	test	eax, eax
	je	SHORT $LN8@DrawMoon

; 1225 : 		context.SelectTexture1( viewpoint->GreenMoonTexture.TexHandle() );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+263088]
	add	ecx, 144				; 00000090H
	call	?TexHandle@Texture@@QAEKXZ		; Texture::TexHandle
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?SelectTexture1@ContextMPR@@QAEXH@Z	; ContextMPR::SelectTexture1

; 1226 : 	} 
; 1227 : 	else {

	jmp	SHORT $LN7@DrawMoon
$LN8@DrawMoon:

; 1228 : 		context.SelectTexture1( viewpoint->MoonTexture.TexHandle() );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+263088]
	add	ecx, 120				; 00000078H
	call	?TexHandle@Texture@@QAEKXZ		; Texture::TexHandle
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?SelectTexture1@ContextMPR@@QAEXH@Z	; ContextMPR::SelectTexture1
$LN7@DrawMoon:

; 1229 : 	}
; 1230 : 
; 1231 : 
; 1232 : 	float dist = MOON_DIST;

	movss	xmm0, DWORD PTR ?MOON_DIST@RenderOTW@@2MB
	movss	DWORD PTR _dist$[ebp], xmm0

; 1233 : #if 0	// I think this looks a little silly.  Let try without it...
; 1234 : 	int moonpitch = TheTimeOfDay.GetMoonPitch();
; 1235 : 	if (moonpitch < 512) {
; 1236 : 		dist -= 0.25f * (8 - (moonpitch >> 6));
; 1237 : 	}
; 1238 : #endif
; 1239 : 
; 1240 : 	float glare = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _glare$[ebp], xmm0

; 1241 : 	if (TheTimeOfDay.ThereIsASun()) glare = SunGlareValue;

	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?ThereIsASun@CTimeOfDay@@QAEHXZ		; CTimeOfDay::ThereIsASun
	test	eax, eax
	je	SHORT $LN6@DrawMoon
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+263192]
	movss	DWORD PTR _glare$[ebp], xmm0
$LN6@DrawMoon:

; 1242 : 	float moonblend = TheTimeOfDay.CalculateMoonBlend(glare);

	push	ecx
	movss	xmm0, DWORD PTR _glare$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?CalculateMoonBlend@CTimeOfDay@@QAEMM@Z	; CTimeOfDay::CalculateMoonBlend
	fstp	DWORD PTR _moonblend$[ebp]

; 1243 : 	if (moonblend < 1.0f) {

	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR _moonblend$[ebp]
	jbe	$LN1@DrawMoon

; 1244 : 		float vpAlt = -Z();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Z@Render3D@@QAEMXZ			; Render3D::Z
	fstp	DWORD PTR tv200[ebp]
	movss	xmm0, DWORD PTR tv200[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _vpAlt$1[ebp], xmm0

; 1245 : 		if (vpAlt > SKY_MAX_HEIGHT) moonblend = 1.0f;

	movss	xmm0, DWORD PTR _vpAlt$1[ebp]
	comiss	xmm0, DWORD PTR __real@4788b800
	jbe	SHORT $LN4@DrawMoon
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _moonblend$[ebp], xmm0
	jmp	SHORT $LN1@DrawMoon
$LN4@DrawMoon:

; 1246 : 		else if (vpAlt > SKY_MAX_HEIGHT-16384.0f) { 

	movss	xmm0, DWORD PTR _vpAlt$1[ebp]
	comiss	xmm0, DWORD PTR __real@47517000
	jbe	SHORT $LN1@DrawMoon

; 1247 : 			vpAlt = (SKY_MAX_HEIGHT - vpAlt);

	movss	xmm0, DWORD PTR __real@4788b800
	subss	xmm0, DWORD PTR _vpAlt$1[ebp]
	movss	DWORD PTR _vpAlt$1[ebp], xmm0

; 1248 : 			moonblend += (float) glGetSine( FloatToInt32(vpAlt) >> 2);

	push	ecx
	movss	xmm0, DWORD PTR _vpAlt$1[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	sar	eax, 2
	push	eax
	call	?glGetSine@@YANH@Z			; glGetSine
	add	esp, 4
	fstp	QWORD PTR tv211[ebp]
	movsd	xmm0, QWORD PTR tv211[ebp]
	cvtsd2ss xmm0, xmm0
	addss	xmm0, DWORD PTR _moonblend$[ebp]
	movss	DWORD PTR _moonblend$[ebp], xmm0

; 1249 : 			if (moonblend > 1.0f) moonblend = 1.0f;

	movss	xmm0, DWORD PTR _moonblend$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN1@DrawMoon
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _moonblend$[ebp], xmm0
$LN1@DrawMoon:

; 1250 : 		}
; 1251 : 	}
; 1252 : 	DrawCelestialBody(&center,dist,moonblend);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _moonblend$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _dist$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _center$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawCelestialBody@RenderOTW@@IAEHPAUTpoint@@MMMMM@Z ; RenderOTW::DrawCelestialBody
$LN11@DrawMoon:

; 1253 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawMoon@RenderOTW@@MAEXXZ ENDP			; RenderOTW::DrawMoon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\otwsky.cpp
_TEXT	SEGMENT
_maxdist$ = -40						; size = 4
tv80 = -36						; size = 4
_alpha$ = -32						; size = 4
_sunpitch$ = -28					; size = 4
_dist$ = -24						; size = 4
_this$ = -20						; size = 4
_center$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?DrawSun@RenderOTW@@MAEXXZ PROC				; RenderOTW::DrawSun
; _this$ = ecx

; 1157 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1158 : 	Tpoint	center;
; 1159 : 	float	alpha;
; 1160 : 	float	dist;
; 1161 : 
; 1162 : 
; 1163 : 	// RED - Do not draw if inside a layer
; 1164 : 	if( realWeather->InsideOvercast() || realWeather->UnderOvercast() ) return;

	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?InsideOvercast@RealWeather@@QAE_NXZ	; RealWeather::InsideOvercast
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@DrawSun
	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?UnderOvercast@RealWeather@@QAE_NXZ	; RealWeather::UnderOvercast
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN5@DrawSun
$LN4@DrawSun:
	jmp	$LN6@DrawSun
$LN5@DrawSun:

; 1165 : 
; 1166 : 	// ShiAssert( TheTimeOfDay.ThereIsASun() );
; 1167 : 
; 1168 : 	// Get the center point of the body on a unit sphere in world space
; 1169 : 	TheTimeOfDay.CalculateSunMoonPos( &center, FALSE );

	push	0
	lea	edx, DWORD PTR _center$[ebp]
	push	edx
	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?CalculateSunMoonPos@CTimeOfDay@@QAEXPAUTpoint@@H@Z ; CTimeOfDay::CalculateSunMoonPos

; 1170 : 
; 1171 : 	// Draw the sun and its glare as one object sun
; 1172 : 	alpha = max( SunGlareValue, MIN_SUN_GLARE );

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+263192]
	comiss	xmm0, DWORD PTR ?MIN_SUN_GLARE@RenderOTW@@2MB
	jbe	SHORT $LN8@DrawSun
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+263192]
	movss	DWORD PTR tv80[ebp], xmm0
	jmp	SHORT $LN9@DrawSun
$LN8@DrawSun:
	movss	xmm0, DWORD PTR ?MIN_SUN_GLARE@RenderOTW@@2MB
	movss	DWORD PTR tv80[ebp], xmm0
$LN9@DrawSun:
	movss	xmm0, DWORD PTR tv80[ebp]
	movss	DWORD PTR _alpha$[ebp], xmm0

; 1173 : 	ShiAssert( alpha >= 0.0f );
; 1174 : 	ShiAssert( alpha <= 1.0f );
; 1175 : 
; 1176 : 	dist = SUN_DIST;

	movss	xmm0, DWORD PTR ?SUN_DIST@RenderOTW@@2MB
	movss	DWORD PTR _dist$[ebp], xmm0

; 1177 : 	float maxdist = MOST_SUN_GLARE_DIST;

	movss	xmm0, DWORD PTR ?MOST_SUN_GLARE_DIST@RenderOTW@@2MB
	movss	DWORD PTR _maxdist$[ebp], xmm0

; 1178 : 	int sunpitch = TheTimeOfDay.GetSunPitch();

	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetSunPitch@CTimeOfDay@@QAEHXZ		; CTimeOfDay::GetSunPitch
	mov	DWORD PTR _sunpitch$[ebp], eax

; 1179 : 	if (sunpitch < 256) {

	cmp	DWORD PTR _sunpitch$[ebp], 256		; 00000100H
	jge	SHORT $LN3@DrawSun

; 1180 : 		sunpitch = 16 - (sunpitch >> 4);

	mov	edx, DWORD PTR _sunpitch$[ebp]
	sar	edx, 4
	mov	eax, 16					; 00000010H
	sub	eax, edx
	mov	DWORD PTR _sunpitch$[ebp], eax

; 1181 : 		dist -= sunpitch;

	cvtsi2ss xmm0, DWORD PTR _sunpitch$[ebp]
	movss	xmm1, DWORD PTR _dist$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _dist$[ebp], xmm1
$LN3@DrawSun:

; 1182 : 	}
; 1183 : 
; 1184 : 	// Compute the (inverse of the) size of the glare polygon
; 1185 : 	dist += (alpha) * (maxdist - dist);

	movss	xmm0, DWORD PTR _maxdist$[ebp]
	subss	xmm0, DWORD PTR _dist$[ebp]
	mulss	xmm0, DWORD PTR _alpha$[ebp]
	addss	xmm0, DWORD PTR _dist$[ebp]
	movss	DWORD PTR _dist$[ebp], xmm0

; 1186 : 
; 1187 : 	// Draw the object
; 1188 : 
; 1189 : 	//JAM 04Oct03
; 1190 : 	if( DisplayOptions.m_texMode == DisplayOptionsClass::TEX_MODE_DDS)

	cmp	DWORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+24, 70161 ; 00011211H
	jne	$LN2@DrawSun

; 1191 : 	{
; 1192 : 		context.RestoreState(STATE_ALPHA_TEXTURE_GOURAUD);

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 1193 : 		context.SelectTexture1(viewpoint->SunTexture.TexHandle());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+263088]
	add	ecx, 72					; 00000048H
	call	?TexHandle@Texture@@QAEKXZ		; Texture::TexHandle
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?SelectTexture1@ContextMPR@@QAEXH@Z	; ContextMPR::SelectTexture1

; 1194 : 		DrawCelestialBody(&center,dist/4.f,1.f,0.984375f,0.9765625f,0.87109375f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f5f0000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f7a0000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f7c0000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _dist$[ebp]
	divss	xmm0, DWORD PTR __real@40800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _center$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawCelestialBody@RenderOTW@@IAEHPAUTpoint@@MMMMM@Z ; RenderOTW::DrawCelestialBody

; 1195 : 	}
; 1196 : 	else

	jmp	$LN1@DrawSun
$LN2@DrawSun:

; 1197 : 	{
; 1198 : 	 	context.RestoreState( STATE_ALPHA_TEXTURE );

	push	26					; 0000001aH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 1199 : 	 	context.SelectTexture1( viewpoint->SunTexture.TexHandle() );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+263088]
	add	ecx, 72					; 00000048H
	call	?TexHandle@Texture@@QAEKXZ		; Texture::TexHandle
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?SelectTexture1@ContextMPR@@QAEXH@Z	; ContextMPR::SelectTexture1

; 1200 : 	 	DrawCelestialBody( &center, dist, alpha );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _alpha$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _dist$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _center$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawCelestialBody@RenderOTW@@IAEHPAUTpoint@@MMMMM@Z ; RenderOTW::DrawCelestialBody

; 1201 : 	 	Draw2DSunGlowEffect( this, &center, dist, alpha );

	push	ecx
	movss	xmm0, DWORD PTR _alpha$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _dist$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _center$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?Draw2DSunGlowEffect@@YAXPAVRenderOTW@@PAUTpoint@@MM@Z ; Draw2DSunGlowEffect
	add	esp, 16					; 00000010H
$LN1@DrawSun:
$LN6@DrawSun:

; 1202 : 	}
; 1203 : 	//JAM
; 1204 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawSun@RenderOTW@@MAEXXZ ENDP				; RenderOTW::DrawSun
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\otwsky.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_color$ = 8						; size = 4
?ProcessColor@RenderOTW@@MAEXPAUTcolor@@@Z PROC		; RenderOTW::ProcessColor
; _this$ = ecx

; 1559 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1560 : 	if(TheTimeOfDay.GetNVGmode()){

	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetNVGmode@CTimeOfDay@@QAEHXZ		; CTimeOfDay::GetNVGmode
	test	eax, eax
	je	SHORT $LN1@ProcessCol

; 1561 : 		color->r  = 0.f;

	mov	eax, DWORD PTR _color$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1562 : 		color->g *= NVG_LIGHT_LEVEL;

	mov	ecx, DWORD PTR _color$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR __real@3f340000
	mov	edx, DWORD PTR _color$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 1563 : 		color->b  = 0.f;

	mov	eax, DWORD PTR _color$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0
$LN1@ProcessCol:

; 1564 : 	}
; 1565 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ProcessColor@RenderOTW@@MAEXPAUTcolor@@@Z ENDP		; RenderOTW::ProcessColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\otwsky.cpp
_TEXT	SEGMENT
tv1345 = -524						; size = 8
tv1359 = -516						; size = 8
_vertPointers$ = -508					; size = 16
_angleOfDepression$ = -492				; size = 8
_canSeeBelowClear$ = -484				; size = 4
_drawClear$ = -480					; size = 4
_canSeeAboveHorizon$ = -476				; size = 4
tv1423 = -472						; size = 4
_canSeeBelowHorizon$ = -468				; size = 4
tv1438 = -464						; size = 4
_canSeeAboveTerrain$ = -460				; size = 4
tv1380 = -456						; size = 4
tv1237 = -452						; size = 4
tv1228 = -448						; size = 4
tv1413 = -444						; size = 4
tv1428 = -440						; size = 4
tv1408 = -436						; size = 4
_canSeeAboveTop$ = -432					; size = 4
tv1393 = -428						; size = 4
tv1398 = -424						; size = 4
_angleOfInclination$ = -420				; size = 8
tv1387 = -412						; size = 4
tv1232 = -408						; size = 4
tv1370 = -404						; size = 4
_drawFiller$ = -400					; size = 4
tv1354 = -396						; size = 4
_drawTop$ = -392					; size = 4
tv1331 = -388						; size = 4
tv1443 = -384						; size = 4
tv1340 = -380						; size = 4
tv198 = -376						; size = 4
tv201 = -372						; size = 4
_bottom$ = -368						; size = 4
_pixelWidth$ = -364					; size = 4
_vpAlt$ = -360						; size = 4
tv187 = -356						; size = 4
tv193 = -352						; size = 4
tv204 = -348						; size = 4
tv189 = -344						; size = 4
_percentHalfXscale$ = -340				; size = 8
tv196 = -332						; size = 4
_top$ = -328						; size = 4
_sR$ = -324						; size = 4
_cR$ = -320						; size = 4
_u$ = -316						; size = 4
_v$ = -312						; size = 4
_pixelDistance$ = -308					; size = 4
_this$ = -304						; size = 4
_v0$ = -300						; size = 52
_v2$ = -248						; size = 52
_horizon$ = -196					; size = 76
_v1$ = -120						; size = 52
_v3$ = -68						; size = 52
_worldSpace$1 = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
?DrawSkyBelow@RenderOTW@@IAEXXZ PROC			; RenderOTW::DrawSkyBelow
; _this$ = ecx

; 220  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 221  : 	ThreeDVertex	v0, v1, v2, v3;
; 222  : 	TwoDVertex	*vertPointers[4] = { &v0, &v1, &v2, &v3 };

	lea	eax, DWORD PTR _v0$[ebp]
	mov	DWORD PTR _vertPointers$[ebp], eax
	lea	ecx, DWORD PTR _v1$[ebp]
	mov	DWORD PTR _vertPointers$[ebp+4], ecx
	lea	edx, DWORD PTR _v2$[ebp]
	mov	DWORD PTR _vertPointers$[ebp+8], edx
	lea	eax, DWORD PTR _v3$[ebp]
	mov	DWORD PTR _vertPointers$[ebp+12], eax

; 223  : 
; 224  : 	double	angleOfInclination, angleOfDepression;
; 225  : 	double	percentHalfXscale;
; 226  : 	float	pixelWidth, pixelDistance;
; 227  : 	float	vpAlt = -viewpoint->Z();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+263088]
	call	?Z@TViewPoint@@QAEMXZ			; TViewPoint::Z
	fstp	DWORD PTR tv1228[ebp]
	movss	xmm0, DWORD PTR tv1228[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _vpAlt$[ebp], xmm0

; 228  : 
; 229  : 	float	top		= Pitch() + diagonal_half_angle;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Pitch@Render3D@@QAEMXZ			; Render3D::Pitch
	fstp	DWORD PTR tv1232[ebp]
	movss	xmm0, DWORD PTR tv1232[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+262900]
	movss	DWORD PTR _top$[ebp], xmm0

; 230  : 	float	bottom	= Pitch() - diagonal_half_angle;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Pitch@Render3D@@QAEMXZ			; Render3D::Pitch
	fstp	DWORD PTR tv1237[ebp]
	movss	xmm0, DWORD PTR tv1237[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [eax+262900]
	movss	DWORD PTR _bottom$[ebp], xmm0

; 231  : 
; 232  : 	float	u, v;
; 233  : 
; 234  : 	HorizonRecord	horizon;
; 235  : 
; 236  : #ifdef TWO_D_MAP_AVAILABLE
; 237  : 	if (twoDmode) {
; 238  : 		ClearFrame();
; 239  : 		return;
; 240  : 	}
; 241  : #endif
; 242  : 
; 243  : 
; 244  : 	// Figure out how for away from the center of the display the edge of the
; 245  : 	// terrain data is.
; 246  : 	angleOfInclination = atan2( SKY_ROOF_HEIGHT-vpAlt, SKY_ROOF_RANGE );

	push	ecx
	movss	xmm0, DWORD PTR __real@48435000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR __real@476a6000
	subss	xmm0, DWORD PTR _vpAlt$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?atan2@@YAMMM@Z				; atan2
	add	esp, 8
	fstp	QWORD PTR _angleOfInclination$[ebp]

; 247  : 	angleOfDepression = atan2( vpAlt, viewpoint->GetDrawingRange() );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+263088]
	call	?GetDrawingRange@TViewPoint@@QAEMXZ	; TViewPoint::GetDrawingRange
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _vpAlt$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?atan2@@YAMMM@Z				; atan2
	add	esp, 8
	fstp	QWORD PTR _angleOfDepression$[ebp]

; 248  : 
; 249  : 	pixelWidth = (float)sqrt( scaleX*scaleX + scaleY*scaleY );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+32]
	mulss	xmm0, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+36]
	mulss	xmm1, DWORD PTR [edx+36]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _pixelWidth$[ebp]

; 250  : 	
; 251  : 
; 252  : 	// Decide which portions of the sky can possibly be seen by the viewer in this orientation
; 253  : 	BOOL canSeeAboveTop		= top > angleOfInclination;

	cvtss2sd xmm0, DWORD PTR _top$[ebp]
	comisd	xmm0, QWORD PTR _angleOfInclination$[ebp]
	jbe	SHORT $LN8@DrawSkyBel
	mov	DWORD PTR tv187[ebp], 1
	jmp	SHORT $LN9@DrawSkyBel
$LN8@DrawSkyBel:
	mov	DWORD PTR tv187[ebp], 0
$LN9@DrawSkyBel:
	mov	eax, DWORD PTR tv187[ebp]
	mov	DWORD PTR _canSeeAboveTop$[ebp], eax

; 254  : 	BOOL canSeeAboveHorizon	= top > 0.0f;

	movss	xmm0, DWORD PTR _top$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN10@DrawSkyBel
	mov	DWORD PTR tv189[ebp], 1
	jmp	SHORT $LN11@DrawSkyBel
$LN10@DrawSkyBel:
	mov	DWORD PTR tv189[ebp], 0
$LN11@DrawSkyBel:
	mov	ecx, DWORD PTR tv189[ebp]
	mov	DWORD PTR _canSeeAboveHorizon$[ebp], ecx

; 255  : 	BOOL canSeeAboveTerrain	= top > -angleOfDepression;

	cvtss2sd xmm0, DWORD PTR _top$[ebp]
	movsd	xmm1, QWORD PTR _angleOfDepression$[ebp]
	xorpd	xmm1, QWORD PTR __xmm@80000000000000008000000000000000
	comisd	xmm0, xmm1
	jbe	SHORT $LN12@DrawSkyBel
	mov	DWORD PTR tv193[ebp], 1
	jmp	SHORT $LN13@DrawSkyBel
$LN12@DrawSkyBel:
	mov	DWORD PTR tv193[ebp], 0
$LN13@DrawSkyBel:
	mov	edx, DWORD PTR tv193[ebp]
	mov	DWORD PTR _canSeeAboveTerrain$[ebp], edx

; 256  : 	BOOL canSeeBelowClear	= bottom < angleOfInclination;

	cvtss2sd xmm0, DWORD PTR _bottom$[ebp]
	movsd	xmm1, QWORD PTR _angleOfInclination$[ebp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN14@DrawSkyBel
	mov	DWORD PTR tv196[ebp], 1
	jmp	SHORT $LN15@DrawSkyBel
$LN14@DrawSkyBel:
	mov	DWORD PTR tv196[ebp], 0
$LN15@DrawSkyBel:
	mov	eax, DWORD PTR tv196[ebp]
	mov	DWORD PTR _canSeeBelowClear$[ebp], eax

; 257  : 	BOOL canSeeBelowHorizon	= bottom < 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _bottom$[ebp]
	jbe	SHORT $LN16@DrawSkyBel
	mov	DWORD PTR tv198[ebp], 1
	jmp	SHORT $LN17@DrawSkyBel
$LN16@DrawSkyBel:
	mov	DWORD PTR tv198[ebp], 0
$LN17@DrawSkyBel:
	mov	ecx, DWORD PTR tv198[ebp]
	mov	DWORD PTR _canSeeBelowHorizon$[ebp], ecx

; 258  : 
; 259  : 	BOOL drawFiller	= canSeeAboveTerrain && canSeeBelowHorizon;

	cmp	DWORD PTR _canSeeAboveTerrain$[ebp], 0
	je	SHORT $LN18@DrawSkyBel
	cmp	DWORD PTR _canSeeBelowHorizon$[ebp], 0
	je	SHORT $LN18@DrawSkyBel
	mov	DWORD PTR tv201[ebp], 1
	jmp	SHORT $LN19@DrawSkyBel
$LN18@DrawSkyBel:
	mov	DWORD PTR tv201[ebp], 0
$LN19@DrawSkyBel:
	mov	edx, DWORD PTR tv201[ebp]
	mov	DWORD PTR _drawFiller$[ebp], edx

; 260  : 	BOOL drawTop	= canSeeAboveHorizon && canSeeBelowClear;

	cmp	DWORD PTR _canSeeAboveHorizon$[ebp], 0
	je	SHORT $LN20@DrawSkyBel
	cmp	DWORD PTR _canSeeBelowClear$[ebp], 0
	je	SHORT $LN20@DrawSkyBel
	mov	DWORD PTR tv204[ebp], 1
	jmp	SHORT $LN21@DrawSkyBel
$LN20@DrawSkyBel:
	mov	DWORD PTR tv204[ebp], 0
$LN21@DrawSkyBel:
	mov	eax, DWORD PTR tv204[ebp]
	mov	DWORD PTR _drawTop$[ebp], eax

; 261  : 	BOOL drawClear	= canSeeAboveTop;

	mov	ecx, DWORD PTR _canSeeAboveTop$[ebp]
	mov	DWORD PTR _drawClear$[ebp], ecx

; 262  : 
; 263  : 
; 264  : 	// Compute two points on the horizon which are sure to be off opposite edges of the screen
; 265  : 	float cR = (float)cos(Roll());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Roll@Render3D@@QAEMXZ			; Render3D::Roll
	push	ecx
	fstp	DWORD PTR [esp]
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _cR$[ebp]

; 266  : 	float sR = (float)sin(Roll());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Roll@Render3D@@QAEMXZ			; Render3D::Roll
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _sR$[ebp]

; 267  : 	horizon.hx = pixelWidth *  cR;

	movss	xmm0, DWORD PTR _pixelWidth$[ebp]
	mulss	xmm0, DWORD PTR _cR$[ebp]
	movss	DWORD PTR _horizon$[ebp+4], xmm0

; 268  : 	horizon.hy = pixelWidth * -sR;

	movss	xmm0, DWORD PTR _sR$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _pixelWidth$[ebp]
	movss	DWORD PTR _horizon$[ebp+8], xmm0

; 269  : 
; 270  : 	// Compute the position of the real horizon line
; 271  : 	// NOTE:  tan becomes infinite at pitch = +/- 90 degrees.
; 272  : 	//        We'll ignore the issue for now since it is a rare occurence.
; 273  : 	percentHalfXscale = tan( Pitch() ) * oneOVERtanHFOV;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Pitch@Render3D@@QAEMXZ			; Render3D::Pitch
	push	ecx
	fstp	DWORD PTR [esp]
	call	?tan@@YAMM@Z				; tan
	add	esp, 4
	fstp	DWORD PTR tv1331[ebp]
	movss	xmm0, DWORD PTR tv1331[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+262904]
	cvtss2sd xmm0, xmm0
	movsd	QWORD PTR _percentHalfXscale$[ebp], xmm0

; 274  : 	pixelDistance = scaleX * (float)percentHalfXscale;

	cvtsd2ss xmm0, QWORD PTR _percentHalfXscale$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+32]
	movss	DWORD PTR _pixelDistance$[ebp], xmm0

; 275  : 	horizon.vx = pixelDistance * sR;

	movss	xmm0, DWORD PTR _pixelDistance$[ebp]
	mulss	xmm0, DWORD PTR _sR$[ebp]
	movss	DWORD PTR _horizon$[ebp+12], xmm0

; 276  : 	horizon.vy = pixelDistance * cR;

	movss	xmm0, DWORD PTR _pixelDistance$[ebp]
	mulss	xmm0, DWORD PTR _cR$[ebp]
	movss	DWORD PTR _horizon$[ebp+16], xmm0

; 277  : 
; 278  : 
; 279  : 	// Compute the position of the top of the horizon/sky blending band
; 280  : 	// (the band extends "angleOfInclination" radians above the horizon)
; 281  : 	percentHalfXscale = tan( Pitch() - angleOfInclination ) * oneOVERtanHFOV;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Pitch@Render3D@@QAEMXZ			; Render3D::Pitch
	fstp	DWORD PTR tv1340[ebp]
	movss	xmm0, DWORD PTR tv1340[ebp]
	cvtss2sd xmm0, xmm0
	subsd	xmm0, QWORD PTR _angleOfInclination$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_tan
	add	esp, 8
	fstp	QWORD PTR tv1345[ebp]
	movsd	xmm0, QWORD PTR tv1345[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cvtss2sd xmm1, DWORD PTR [ecx+262904]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR _percentHalfXscale$[ebp], xmm0

; 282  : 	pixelDistance = scaleX * (float)percentHalfXscale;

	cvtsd2ss xmm0, QWORD PTR _percentHalfXscale$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+32]
	movss	DWORD PTR _pixelDistance$[ebp], xmm0

; 283  : 	horizon.vxUp = pixelDistance * sR;

	movss	xmm0, DWORD PTR _pixelDistance$[ebp]
	mulss	xmm0, DWORD PTR _sR$[ebp]
	movss	DWORD PTR _horizon$[ebp+20], xmm0

; 284  : 	horizon.vyUp = pixelDistance * cR;

	movss	xmm0, DWORD PTR _pixelDistance$[ebp]
	mulss	xmm0, DWORD PTR _cR$[ebp]
	movss	DWORD PTR _horizon$[ebp+24], xmm0

; 285  : 
; 286  : 
; 287  : 	// Compute the position of the bottom of the terrain to horizon filler band
; 288  : 	percentHalfXscale = tan( Pitch() + angleOfDepression ) * oneOVERtanHFOV;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Pitch@Render3D@@QAEMXZ			; Render3D::Pitch
	fstp	DWORD PTR tv1354[ebp]
	movss	xmm0, DWORD PTR tv1354[ebp]
	cvtss2sd xmm0, xmm0
	addsd	xmm0, QWORD PTR _angleOfDepression$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_tan
	add	esp, 8
	fstp	QWORD PTR tv1359[ebp]
	movsd	xmm0, QWORD PTR tv1359[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	cvtss2sd xmm1, DWORD PTR [eax+262904]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR _percentHalfXscale$[ebp], xmm0

; 289  : 	pixelDistance = scaleX * (float)percentHalfXscale;

	cvtsd2ss xmm0, QWORD PTR _percentHalfXscale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR _pixelDistance$[ebp], xmm0

; 290  : 	horizon.vxDn = pixelDistance * sR;

	movss	xmm0, DWORD PTR _pixelDistance$[ebp]
	mulss	xmm0, DWORD PTR _sR$[ebp]
	movss	DWORD PTR _horizon$[ebp+28], xmm0

; 291  : 	horizon.vyDn = pixelDistance * cR;

	movss	xmm0, DWORD PTR _pixelDistance$[ebp]
	mulss	xmm0, DWORD PTR _cR$[ebp]
	movss	DWORD PTR _horizon$[ebp+32], xmm0

; 292  : 
; 293  : 
; 294  : 	// Clear that part of the screen which will not be covered by sky or terrain
; 295  : 	if (drawClear) {

	cmp	DWORD PTR _drawClear$[ebp], 0
	je	$LN5@DrawSkyBel

; 296  : 		Tpoint			worldSpace;
; 297  : 
; 298  : 		worldSpace.z = -SKY_ROOF_HEIGHT;

	movss	xmm0, DWORD PTR __real@c76a6000
	movss	DWORD PTR _worldSpace$1[ebp+8], xmm0

; 299  : 		u = (float)fmod( viewpoint->Y() * 0.5f*ROOF_REPEAT_COUNT/SKY_ROOF_RANGE, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+263088]
	call	?Y@TViewPoint@@QAEMXZ			; TViewPoint::Y
	fstp	DWORD PTR tv1370[ebp]
	movss	xmm0, DWORD PTR tv1370[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR ?ROOF_REPEAT_COUNT@RenderOTW@@2MB
	divss	xmm0, DWORD PTR __real@48435000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fmod@@YAMMM@Z				; fmod
	add	esp, 8
	fstp	DWORD PTR _u$[ebp]

; 300  : 		v = 1.0f - (float)fmod( viewpoint->X() * 0.5f*ROOF_REPEAT_COUNT/SKY_ROOF_RANGE, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+263088]
	call	?X@TViewPoint@@QAEMXZ			; TViewPoint::X
	fstp	DWORD PTR tv1380[ebp]
	movss	xmm0, DWORD PTR tv1380[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR ?ROOF_REPEAT_COUNT@RenderOTW@@2MB
	divss	xmm0, DWORD PTR __real@48435000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fmod@@YAMMM@Z				; fmod
	add	esp, 8
	fstp	DWORD PTR tv1387[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR tv1387[ebp]
	movss	DWORD PTR _v$[ebp], xmm0

; 301  : 
; 302  : 		// South West
; 303  : 		worldSpace.x = viewpoint->X()-SKY_ROOF_RANGE, 		worldSpace.y = viewpoint->Y()-SKY_ROOF_RANGE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+263088]
	call	?X@TViewPoint@@QAEMXZ			; TViewPoint::X
	fstp	DWORD PTR tv1393[ebp]
	movss	xmm0, DWORD PTR tv1393[ebp]
	subss	xmm0, DWORD PTR __real@48435000
	movss	DWORD PTR _worldSpace$1[ebp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+263088]
	call	?Y@TViewPoint@@QAEMXZ			; TViewPoint::Y
	fstp	DWORD PTR tv1398[ebp]
	movss	xmm0, DWORD PTR tv1398[ebp]
	subss	xmm0, DWORD PTR __real@48435000
	movss	DWORD PTR _worldSpace$1[ebp+4], xmm0

; 304  : 		TransformPoint( &worldSpace, &v0 );						   

	lea	eax, DWORD PTR _v0$[ebp]
	push	eax
	lea	ecx, DWORD PTR _worldSpace$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TransformPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformPoint

; 305  : 		v0.u = u,					v0.v = v+ROOF_REPEAT_COUNT,	v0.q = v0.csZ * Q_SCALE;

	movss	xmm0, DWORD PTR _u$[ebp]
	movss	DWORD PTR _v0$[ebp+24], xmm0
	movss	xmm0, DWORD PTR _v$[ebp]
	addss	xmm0, DWORD PTR ?ROOF_REPEAT_COUNT@RenderOTW@@2MB
	movss	DWORD PTR _v0$[ebp+28], xmm0
	movss	xmm0, DWORD PTR _v0$[ebp+48]
	mulss	xmm0, DWORD PTR _Q_SCALE
	movss	DWORD PTR _v0$[ebp+32], xmm0

; 306  : 
; 307  : 		// North West
; 308  : 		worldSpace.x = viewpoint->X()+SKY_ROOF_RANGE, 		worldSpace.y = viewpoint->Y()-SKY_ROOF_RANGE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+263088]
	call	?X@TViewPoint@@QAEMXZ			; TViewPoint::X
	fstp	DWORD PTR tv1408[ebp]
	movss	xmm0, DWORD PTR tv1408[ebp]
	addss	xmm0, DWORD PTR __real@48435000
	movss	DWORD PTR _worldSpace$1[ebp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+263088]
	call	?Y@TViewPoint@@QAEMXZ			; TViewPoint::Y
	fstp	DWORD PTR tv1413[ebp]
	movss	xmm0, DWORD PTR tv1413[ebp]
	subss	xmm0, DWORD PTR __real@48435000
	movss	DWORD PTR _worldSpace$1[ebp+4], xmm0

; 309  : 		TransformPoint( &worldSpace, &v1 );

	lea	ecx, DWORD PTR _v1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _worldSpace$1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TransformPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformPoint

; 310  : 		v1.u = u,					v1.v = v,					v1.q = v1.csZ * Q_SCALE;

	movss	xmm0, DWORD PTR _u$[ebp]
	movss	DWORD PTR _v1$[ebp+24], xmm0
	movss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR _v1$[ebp+28], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+48]
	mulss	xmm0, DWORD PTR _Q_SCALE
	movss	DWORD PTR _v1$[ebp+32], xmm0

; 311  : 
; 312  : 		// North East
; 313  : 		worldSpace.x = viewpoint->X()+SKY_ROOF_RANGE, 		worldSpace.y = viewpoint->Y()+SKY_ROOF_RANGE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+263088]
	call	?X@TViewPoint@@QAEMXZ			; TViewPoint::X
	fstp	DWORD PTR tv1423[ebp]
	movss	xmm0, DWORD PTR tv1423[ebp]
	addss	xmm0, DWORD PTR __real@48435000
	movss	DWORD PTR _worldSpace$1[ebp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+263088]
	call	?Y@TViewPoint@@QAEMXZ			; TViewPoint::Y
	fstp	DWORD PTR tv1428[ebp]
	movss	xmm0, DWORD PTR tv1428[ebp]
	addss	xmm0, DWORD PTR __real@48435000
	movss	DWORD PTR _worldSpace$1[ebp+4], xmm0

; 314  : 		TransformPoint( &worldSpace, &v2 );

	lea	edx, DWORD PTR _v2$[ebp]
	push	edx
	lea	eax, DWORD PTR _worldSpace$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TransformPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformPoint

; 315  : 		v2.u = u+ROOF_REPEAT_COUNT,	v2.v = v,					v2.q = v2.csZ * Q_SCALE;

	movss	xmm0, DWORD PTR _u$[ebp]
	addss	xmm0, DWORD PTR ?ROOF_REPEAT_COUNT@RenderOTW@@2MB
	movss	DWORD PTR _v2$[ebp+24], xmm0
	movss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR _v2$[ebp+28], xmm0
	movss	xmm0, DWORD PTR _v2$[ebp+48]
	mulss	xmm0, DWORD PTR _Q_SCALE
	movss	DWORD PTR _v2$[ebp+32], xmm0

; 316  : 
; 317  : 		// South East
; 318  : 		worldSpace.x = viewpoint->X()-SKY_ROOF_RANGE, 		worldSpace.y = viewpoint->Y()+SKY_ROOF_RANGE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+263088]
	call	?X@TViewPoint@@QAEMXZ			; TViewPoint::X
	fstp	DWORD PTR tv1438[ebp]
	movss	xmm0, DWORD PTR tv1438[ebp]
	subss	xmm0, DWORD PTR __real@48435000
	movss	DWORD PTR _worldSpace$1[ebp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+263088]
	call	?Y@TViewPoint@@QAEMXZ			; TViewPoint::Y
	fstp	DWORD PTR tv1443[ebp]
	movss	xmm0, DWORD PTR tv1443[ebp]
	addss	xmm0, DWORD PTR __real@48435000
	movss	DWORD PTR _worldSpace$1[ebp+4], xmm0

; 319  : 		TransformPoint( &worldSpace, &v3 );

	lea	eax, DWORD PTR _v3$[ebp]
	push	eax
	lea	ecx, DWORD PTR _worldSpace$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TransformPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformPoint

; 320  : 		v3.u = u+ROOF_REPEAT_COUNT,	v3.v = v+ROOF_REPEAT_COUNT,	v3.q = v3.csZ * Q_SCALE;

	movss	xmm0, DWORD PTR _u$[ebp]
	addss	xmm0, DWORD PTR ?ROOF_REPEAT_COUNT@RenderOTW@@2MB
	movss	DWORD PTR _v3$[ebp+24], xmm0
	movss	xmm0, DWORD PTR _v$[ebp]
	addss	xmm0, DWORD PTR ?ROOF_REPEAT_COUNT@RenderOTW@@2MB
	movss	DWORD PTR _v3$[ebp+28], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+48]
	mulss	xmm0, DWORD PTR _Q_SCALE
	movss	DWORD PTR _v3$[ebp+32], xmm0

; 321  : 
; 322  : 		v0.r = v1.r = v2.r = v3.r = 0.5f;

	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _v3$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+8]
	movss	DWORD PTR _v2$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _v2$[ebp+8]
	movss	DWORD PTR _v1$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+8]
	movss	DWORD PTR _v0$[ebp+8], xmm0

; 323  : 		v0.g = v1.g = v2.g = v3.g = 0.6f;

	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR _v3$[ebp+12], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+12]
	movss	DWORD PTR _v2$[ebp+12], xmm0
	movss	xmm0, DWORD PTR _v2$[ebp+12]
	movss	DWORD PTR _v1$[ebp+12], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+12]
	movss	DWORD PTR _v0$[ebp+12], xmm0

; 324  : 		v0.b = v1.b = v2.b = v3.b = 0.7f;

	movss	xmm0, DWORD PTR __real@3f333333
	movss	DWORD PTR _v3$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+16]
	movss	DWORD PTR _v2$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _v2$[ebp+16]
	movss	DWORD PTR _v1$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+16]
	movss	DWORD PTR _v0$[ebp+16], xmm0

; 325  : 
; 326  : 		// Setup the drawing state for these polygons
; 327  : 		context.RestoreState( STATE_TEXTURE_PERSPECTIVE );

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 328  : 		context.SelectTexture1( texRoofBottom.TexHandle() );

	mov	ecx, OFFSET ?texRoofBottom@RenderOTW@@2VTexture@@A ; RenderOTW::texRoofBottom
	call	?TexHandle@Texture@@QAEKXZ		; Texture::TexHandle
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?SelectTexture1@ContextMPR@@QAEXH@Z	; ContextMPR::SelectTexture1

; 329  : #if 0
; 330  : 		if (GetFilteringMode()) {
; 331  : 			context.SetState( MPR_STA_ENABLES, MPR_SE_FILTERING );
; 332  : 			context.SetState( MPR_STA_TEX_FILTER, MPR_TX_BILINEAR );
; 333  : 			context.InvalidateState();
; 334  : 		}
; 335  : #endif
; 336  : 
; 337  : 		DrawSquare( &v0, &v1, &v2, &v3, CULL_ALLOW_ALL );

	push	0
	push	0
	push	0
	lea	edx, DWORD PTR _v3$[ebp]
	push	edx
	lea	eax, DWORD PTR _v2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v0$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawSquare@Render3D@@QAEXPAUThreeDVertex@@000H_N1@Z ; Render3D::DrawSquare
$LN5@DrawSkyBel:

; 338  : 	}
; 339  : 
; 340  : 
; 341  : 	// Draw the hazey sky band
; 342  : 	if (drawTop) {

	cmp	DWORD PTR _drawTop$[ebp], 0
	je	$LN4@DrawSkyBel

; 343  : 		v0.x = shiftX + horizon.hx + horizon.vx;		// horizon right

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+40]
	addss	xmm0, DWORD PTR _horizon$[ebp+4]
	addss	xmm0, DWORD PTR _horizon$[ebp+12]
	movss	DWORD PTR _v0$[ebp], xmm0

; 344  : 		v0.y = shiftY + horizon.hy + horizon.vy;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+44]
	addss	xmm0, DWORD PTR _horizon$[ebp+8]
	addss	xmm0, DWORD PTR _horizon$[ebp+16]
	movss	DWORD PTR _v0$[ebp+4], xmm0

; 345  : 		v1.x = shiftX - horizon.hx + horizon.vx;		// horizon left

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+40]
	subss	xmm0, DWORD PTR _horizon$[ebp+4]
	addss	xmm0, DWORD PTR _horizon$[ebp+12]
	movss	DWORD PTR _v1$[ebp], xmm0

; 346  : 		v1.y = shiftY - horizon.hy + horizon.vy;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+44]
	subss	xmm0, DWORD PTR _horizon$[ebp+8]
	addss	xmm0, DWORD PTR _horizon$[ebp+16]
	movss	DWORD PTR _v1$[ebp+4], xmm0

; 347  : 		v2.x = shiftX - horizon.hx + horizon.vxUp;		// upper left

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+40]
	subss	xmm0, DWORD PTR _horizon$[ebp+4]
	addss	xmm0, DWORD PTR _horizon$[ebp+20]
	movss	DWORD PTR _v2$[ebp], xmm0

; 348  : 		v2.y = shiftY - horizon.hy + horizon.vyUp;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+44]
	subss	xmm0, DWORD PTR _horizon$[ebp+8]
	addss	xmm0, DWORD PTR _horizon$[ebp+24]
	movss	DWORD PTR _v2$[ebp+4], xmm0

; 349  : 		v3.x = shiftX + horizon.hx + horizon.vxUp;		// upper right

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+40]
	addss	xmm0, DWORD PTR _horizon$[ebp+4]
	addss	xmm0, DWORD PTR _horizon$[ebp+20]
	movss	DWORD PTR _v3$[ebp], xmm0

; 350  : 		v3.y = shiftY + horizon.hy + horizon.vyUp;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+44]
	addss	xmm0, DWORD PTR _horizon$[ebp+8]
	addss	xmm0, DWORD PTR _horizon$[ebp+24]
	movss	DWORD PTR _v3$[ebp+4], xmm0

; 351  : 
; 352  : 		v0.r = v1.r = haze_sky_color.r;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+263180]
	movss	DWORD PTR _v1$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+8]
	movss	DWORD PTR _v0$[ebp+8], xmm0

; 353  : 		v0.g = v1.g = haze_sky_color.g;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+263184]
	movss	DWORD PTR _v1$[ebp+12], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+12]
	movss	DWORD PTR _v0$[ebp+12], xmm0

; 354  : 		v0.b = v1.b = haze_sky_color.b;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+263188]
	movss	DWORD PTR _v1$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+16]
	movss	DWORD PTR _v0$[ebp+16], xmm0

; 355  : 		v0.a = v1.a = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v1$[ebp+20], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+20]
	movss	DWORD PTR _v0$[ebp+20], xmm0

; 356  : 
; 357  : 		v2.r = v3.r = sky_color.r;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+263132]
	movss	DWORD PTR _v3$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+8]
	movss	DWORD PTR _v2$[ebp+8], xmm0

; 358  : 		v2.g = v3.g = sky_color.g;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+263136]
	movss	DWORD PTR _v3$[ebp+12], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+12]
	movss	DWORD PTR _v2$[ebp+12], xmm0

; 359  : 		v2.b = v3.b = sky_color.b;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+263140]
	movss	DWORD PTR _v3$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+16]
	movss	DWORD PTR _v2$[ebp+16], xmm0

; 360  : 		v2.a = v3.a = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v3$[ebp+20], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+20]
	movss	DWORD PTR _v2$[ebp+20], xmm0

; 361  : 
; 362  : 		// Set the clip flags on the constructed verts
; 363  : 		SetClipFlags( &v0 );

	lea	edx, DWORD PTR _v0$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetClipFlags@Render2D@@QAEXPAUTwoDVertex@@@Z ; Render2D::SetClipFlags

; 364  : 		SetClipFlags( &v1 );

	lea	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetClipFlags@Render2D@@QAEXPAUTwoDVertex@@@Z ; Render2D::SetClipFlags

; 365  : 		SetClipFlags( &v2 );

	lea	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetClipFlags@Render2D@@QAEXPAUTwoDVertex@@@Z ; Render2D::SetClipFlags

; 366  : 		SetClipFlags( &v3 );

	lea	edx, DWORD PTR _v3$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetClipFlags@Render2D@@QAEXPAUTwoDVertex@@@Z ; Render2D::SetClipFlags

; 367  : 
; 368  : 		// Clip and draw the smooth shaded horizon polygon
; 369  : 		context.RestoreState( STATE_GOURAUD );

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 370  : /*		if (dithered) {
; 371  : 			context.SetState( MPR_STA_ENABLES, MPR_SE_DITHERING );
; 372  : 			context.InvalidateState();
; 373  : 		}*/
; 374  : 		ClipAndDraw2DFan( &vertPointers[0], 4 );

	push	0
	push	4
	mov	eax, 4
	imul	eax, 0
	lea	ecx, DWORD PTR _vertPointers$[ebp+eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClipAndDraw2DFan@Render2D@@QAEXPAPAUTwoDVertex@@I_N@Z ; Render2D::ClipAndDraw2DFan
$LN4@DrawSkyBel:

; 375  : 	}
; 376  : 
; 377  : 
; 378  : 	// Draw the celestial objects
; 379  : 	if (TheTimeOfDay.ThereIsASun())		DrawSun();

	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?ThereIsASun@CTimeOfDay@@QAEHXZ		; CTimeOfDay::ThereIsASun
	test	eax, eax
	je	SHORT $LN3@DrawSkyBel
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+156]
	call	edx
$LN3@DrawSkyBel:

; 380  : 	if (TheTimeOfDay.ThereIsAMoon())	DrawMoon();

	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?ThereIsAMoon@CTimeOfDay@@QAEHXZ	; CTimeOfDay::ThereIsAMoon
	test	eax, eax
	je	SHORT $LN2@DrawSkyBel
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN2@DrawSkyBel:

; 381  : 
; 382  : 
; 383  : 	// Draw the poly of low intensity haze color to fill from the terrain to the horizon
; 384  : 	if (drawFiller) {

	cmp	DWORD PTR _drawFiller$[ebp], 0
	je	$LN1@DrawSkyBel

; 385  : 
; 386  : 		v0.x = shiftX + horizon.hx + horizon.vxDn;		// lower right

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+40]
	addss	xmm0, DWORD PTR _horizon$[ebp+4]
	addss	xmm0, DWORD PTR _horizon$[ebp+28]
	movss	DWORD PTR _v0$[ebp], xmm0

; 387  : 		v0.y = shiftY + horizon.hy + horizon.vyDn;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+44]
	addss	xmm0, DWORD PTR _horizon$[ebp+8]
	addss	xmm0, DWORD PTR _horizon$[ebp+32]
	movss	DWORD PTR _v0$[ebp+4], xmm0

; 388  : 		v0.r = haze_ground_color.r;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+263144]
	movss	DWORD PTR _v0$[ebp+8], xmm0

; 389  : 		v0.g = haze_ground_color.g;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+263148]
	movss	DWORD PTR _v0$[ebp+12], xmm0

; 390  : 		v0.b = haze_ground_color.b;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+263152]
	movss	DWORD PTR _v0$[ebp+16], xmm0

; 391  : 		v1.x = shiftX - horizon.hx + horizon.vxDn;		// lower left

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+40]
	subss	xmm0, DWORD PTR _horizon$[ebp+4]
	addss	xmm0, DWORD PTR _horizon$[ebp+28]
	movss	DWORD PTR _v1$[ebp], xmm0

; 392  : 		v1.y = shiftY - horizon.hy + horizon.vyDn;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+44]
	subss	xmm0, DWORD PTR _horizon$[ebp+8]
	addss	xmm0, DWORD PTR _horizon$[ebp+32]
	movss	DWORD PTR _v1$[ebp+4], xmm0

; 393  : 		v1.r = haze_ground_color.r;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+263144]
	movss	DWORD PTR _v1$[ebp+8], xmm0

; 394  : 		v1.g = haze_ground_color.g;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+263148]
	movss	DWORD PTR _v1$[ebp+12], xmm0

; 395  : 		v1.b = haze_ground_color.b;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+263152]
	movss	DWORD PTR _v1$[ebp+16], xmm0

; 396  : 
; 397  : 		v2.x = shiftX - horizon.hx + horizon.vx;		// horizon left

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+40]
	subss	xmm0, DWORD PTR _horizon$[ebp+4]
	addss	xmm0, DWORD PTR _horizon$[ebp+12]
	movss	DWORD PTR _v2$[ebp], xmm0

; 398  : 		v2.y = shiftY - horizon.hy + horizon.vy;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+44]
	subss	xmm0, DWORD PTR _horizon$[ebp+8]
	addss	xmm0, DWORD PTR _horizon$[ebp+16]
	movss	DWORD PTR _v2$[ebp+4], xmm0

; 399  : 		v3.x = shiftX + horizon.hx + horizon.vx;		// horizon right

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+40]
	addss	xmm0, DWORD PTR _horizon$[ebp+4]
	addss	xmm0, DWORD PTR _horizon$[ebp+12]
	movss	DWORD PTR _v3$[ebp], xmm0

; 400  : 		v3.y = shiftY + horizon.hy + horizon.vy;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+44]
	addss	xmm0, DWORD PTR _horizon$[ebp+8]
	addss	xmm0, DWORD PTR _horizon$[ebp+16]
	movss	DWORD PTR _v3$[ebp+4], xmm0

; 401  : 
; 402  : 		v2.r = earth_end_color.r;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+263168]
	movss	DWORD PTR _v2$[ebp+8], xmm0

; 403  : 		v2.g = earth_end_color.g;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+263172]
	movss	DWORD PTR _v2$[ebp+12], xmm0

; 404  : 		v2.b = earth_end_color.b;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+263176]
	movss	DWORD PTR _v2$[ebp+16], xmm0

; 405  : 		v3.r = earth_end_color.r;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+263168]
	movss	DWORD PTR _v3$[ebp+8], xmm0

; 406  : 		v3.g = earth_end_color.g;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+263172]
	movss	DWORD PTR _v3$[ebp+12], xmm0

; 407  : 		v3.b = earth_end_color.b;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+263176]
	movss	DWORD PTR _v3$[ebp+16], xmm0

; 408  : 
; 409  : 		// Set the clip flags on the constructed verts
; 410  : 		SetClipFlags( &v0 );

	lea	eax, DWORD PTR _v0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetClipFlags@Render2D@@QAEXPAUTwoDVertex@@@Z ; Render2D::SetClipFlags

; 411  : 		SetClipFlags( &v1 );

	lea	ecx, DWORD PTR _v1$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetClipFlags@Render2D@@QAEXPAUTwoDVertex@@@Z ; Render2D::SetClipFlags

; 412  : 		SetClipFlags( &v2 );

	lea	edx, DWORD PTR _v2$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetClipFlags@Render2D@@QAEXPAUTwoDVertex@@@Z ; Render2D::SetClipFlags

; 413  : 		SetClipFlags( &v3 );

	lea	eax, DWORD PTR _v3$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetClipFlags@Render2D@@QAEXPAUTwoDVertex@@@Z ; Render2D::SetClipFlags

; 414  : 
; 415  : 		// Clip and draw the smooth shaded horizon polygon
; 416  : 		context.RestoreState( STATE_GOURAUD );

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 417  : /*		if (dithered) {
; 418  : 			context.SetState( MPR_STA_ENABLES, MPR_SE_DITHERING );
; 419  : 			context.InvalidateState();
; 420  : 		}*/
; 421  : 		ClipAndDraw2DFan( &vertPointers[0], 4 );

	push	0
	push	4
	mov	ecx, 4
	imul	ecx, 0
	lea	edx, DWORD PTR _vertPointers$[ebp+ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClipAndDraw2DFan@Render2D@@QAEXPAPAUTwoDVertex@@I_N@Z ; Render2D::ClipAndDraw2DFan
$LN1@DrawSkyBel:

; 422  : 	}
; 423  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawSkyBelow@RenderOTW@@IAEXXZ ENDP			; RenderOTW::DrawSkyBelow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\otwsky.cpp
_TEXT	SEGMENT
tv854 = -516						; size = 8
_canSeeBelowClear$ = -508				; size = 4
tv879 = -504						; size = 4
_canSeeAboveHorizon$ = -500				; size = 4
tv907 = -496						; size = 4
_canSeeBelowHorizon$ = -492				; size = 4
_canSeeAboveTop$ = -488					; size = 4
_canSeeAboveClouds$ = -484				; size = 4
tv896 = -480						; size = 4
tv769 = -476						; size = 4
_drawFiller$ = -472					; size = 4
_drawClear$ = -468					; size = 4
tv839 = -464						; size = 4
tv825 = -460						; size = 4
_angleOfDepression$ = -456				; size = 8
tv902 = -448						; size = 4
tv732 = -444						; size = 4
tv889 = -440						; size = 4
tv952 = -436						; size = 4
_drawClouds$ = -432					; size = 4
tv947 = -428						; size = 4
_drawTop$ = -424					; size = 4
tv937 = -420						; size = 4
tv849 = -416						; size = 4
tv932 = -412						; size = 4
tv834 = -408						; size = 4
tv922 = -404						; size = 4
tv722 = -400						; size = 4
tv917 = -396						; size = 4
_canSeeCloudLayer$ = -392				; size = 4
tv183 = -388						; size = 4
tv186 = -384						; size = 4
tv179 = -380						; size = 4
_pixelWidth$ = -376					; size = 4
tv177 = -372						; size = 4
tv169 = -368						; size = 4
tv81 = -364						; size = 4
tv189 = -360						; size = 4
tv171 = -356						; size = 4
_percentHalfXscale$ = -352				; size = 8
tv175 = -344						; size = 4
_bottom$ = -340						; size = 4
_top$ = -336						; size = 4
_vpAlt$ = -332						; size = 4
_cR$ = -328						; size = 4
_u$ = -324						; size = 4
_sR$ = -320						; size = 4
_bandAngleUp$ = -316					; size = 4
_v$ = -312						; size = 4
_pixelDistance$ = -308					; size = 4
_this$ = -304						; size = 4
_horizon$ = -300					; size = 76
_v0$1 = -224						; size = 52
_v2$2 = -172						; size = 52
_v3$3 = -120						; size = 52
_v1$4 = -68						; size = 52
_worldSpace$5 = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
?DrawSkyAbove@RenderOTW@@IAEXXZ PROC			; RenderOTW::DrawSkyAbove
; _this$ = ecx

; 430  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 516				; 00000204H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 431  : 	double	angleOfDepression, percentHalfXscale;
; 432  : 	float	pixelWidth, pixelDistance;
; 433  : 	float	vpAlt = -viewpoint->Z();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+263088]
	call	?Z@TViewPoint@@QAEMXZ			; TViewPoint::Z
	fstp	DWORD PTR tv722[ebp]
	movss	xmm0, DWORD PTR tv722[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _vpAlt$[ebp], xmm0

; 434  : 
; 435  : 	float	bandAngleUp = min( PI/18.0f, (PI/48.0f) * (SKY_MAX_HEIGHT/vpAlt));

	movss	xmm0, DWORD PTR __real@4788b800
	divss	xmm0, DWORD PTR _vpAlt$[ebp]
	mulss	xmm0, DWORD PTR __real@3d860a92
	comiss	xmm0, DWORD PTR __real@3e32b8c3
	jbe	SHORT $LN10@DrawSkyAbo
	movss	xmm0, DWORD PTR __real@3e32b8c3
	movss	DWORD PTR tv81[ebp], xmm0
	jmp	SHORT $LN11@DrawSkyAbo
$LN10@DrawSkyAbo:
	movss	xmm0, DWORD PTR __real@4788b800
	divss	xmm0, DWORD PTR _vpAlt$[ebp]
	mulss	xmm0, DWORD PTR __real@3d860a92
	movss	DWORD PTR tv81[ebp], xmm0
$LN11@DrawSkyAbo:
	movss	xmm0, DWORD PTR tv81[ebp]
	movss	DWORD PTR _bandAngleUp$[ebp], xmm0

; 436  : 
; 437  : 	float	top		= Pitch() + diagonal_half_angle;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Pitch@Render3D@@QAEMXZ			; Render3D::Pitch
	fstp	DWORD PTR tv732[ebp]
	movss	xmm0, DWORD PTR tv732[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+262900]
	movss	DWORD PTR _top$[ebp], xmm0

; 438  : 	float	bottom	= Pitch() - diagonal_half_angle;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Pitch@Render3D@@QAEMXZ			; Render3D::Pitch
	fstp	DWORD PTR tv769[ebp]
	movss	xmm0, DWORD PTR tv769[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [edx+262900]
	movss	DWORD PTR _bottom$[ebp], xmm0

; 439  : 
; 440  : 	float	u, v;
; 441  : 
; 442  : 	HorizonRecord	horizon;
; 443  : 
; 444  : #ifdef TWO_D_MAP_AVAILABLE
; 445  : 	if (twoDmode) {
; 446  : 		ClearFrame();
; 447  : 		return;
; 448  : 	}
; 449  : #endif
; 450  : 
; 451  : 
; 452  : 	// Figure out how for away from the center of the display the edge of the
; 453  : 	// roof polygon is.
; 454  : 	angleOfDepression = atan2( vpAlt-SKY_ROOF_HEIGHT, SKY_ROOF_RANGE );

	push	ecx
	movss	xmm0, DWORD PTR __real@48435000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _vpAlt$[ebp]
	subss	xmm0, DWORD PTR __real@476a6000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?atan2@@YAMMM@Z				; atan2
	add	esp, 8
	fstp	QWORD PTR _angleOfDepression$[ebp]

; 455  : 	pixelWidth = (float)sqrt( scaleX*scaleX + scaleY*scaleY );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	mulss	xmm0, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+36]
	mulss	xmm1, DWORD PTR [eax+36]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _pixelWidth$[ebp]

; 456  : 	
; 457  : 
; 458  : 	// Decide which portions of the sky can possibly be seen by the viewer in this orientation
; 459  : 	BOOL canSeeAboveTop		= top > bandAngleUp;

	movss	xmm0, DWORD PTR _top$[ebp]
	comiss	xmm0, DWORD PTR _bandAngleUp$[ebp]
	jbe	SHORT $LN12@DrawSkyAbo
	mov	DWORD PTR tv169[ebp], 1
	jmp	SHORT $LN13@DrawSkyAbo
$LN12@DrawSkyAbo:
	mov	DWORD PTR tv169[ebp], 0
$LN13@DrawSkyAbo:
	mov	ecx, DWORD PTR tv169[ebp]
	mov	DWORD PTR _canSeeAboveTop$[ebp], ecx

; 460  : 	BOOL canSeeAboveHorizon	= top > 0.0f;

	movss	xmm0, DWORD PTR _top$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN14@DrawSkyAbo
	mov	DWORD PTR tv171[ebp], 1
	jmp	SHORT $LN15@DrawSkyAbo
$LN14@DrawSkyAbo:
	mov	DWORD PTR tv171[ebp], 0
$LN15@DrawSkyAbo:
	mov	edx, DWORD PTR tv171[ebp]
	mov	DWORD PTR _canSeeAboveHorizon$[ebp], edx

; 461  : 	BOOL canSeeAboveClouds	= top > -angleOfDepression;

	cvtss2sd xmm0, DWORD PTR _top$[ebp]
	movsd	xmm1, QWORD PTR _angleOfDepression$[ebp]
	xorpd	xmm1, QWORD PTR __xmm@80000000000000008000000000000000
	comisd	xmm0, xmm1
	jbe	SHORT $LN16@DrawSkyAbo
	mov	DWORD PTR tv175[ebp], 1
	jmp	SHORT $LN17@DrawSkyAbo
$LN16@DrawSkyAbo:
	mov	DWORD PTR tv175[ebp], 0
$LN17@DrawSkyAbo:
	mov	eax, DWORD PTR tv175[ebp]
	mov	DWORD PTR _canSeeAboveClouds$[ebp], eax

; 462  : 	BOOL canSeeBelowClear	= bottom < bandAngleUp;

	movss	xmm0, DWORD PTR _bandAngleUp$[ebp]
	comiss	xmm0, DWORD PTR _bottom$[ebp]
	jbe	SHORT $LN18@DrawSkyAbo
	mov	DWORD PTR tv177[ebp], 1
	jmp	SHORT $LN19@DrawSkyAbo
$LN18@DrawSkyAbo:
	mov	DWORD PTR tv177[ebp], 0
$LN19@DrawSkyAbo:
	mov	ecx, DWORD PTR tv177[ebp]
	mov	DWORD PTR _canSeeBelowClear$[ebp], ecx

; 463  : 	BOOL canSeeBelowHorizon	= bottom < 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _bottom$[ebp]
	jbe	SHORT $LN20@DrawSkyAbo
	mov	DWORD PTR tv179[ebp], 1
	jmp	SHORT $LN21@DrawSkyAbo
$LN20@DrawSkyAbo:
	mov	DWORD PTR tv179[ebp], 0
$LN21@DrawSkyAbo:
	mov	edx, DWORD PTR tv179[ebp]
	mov	DWORD PTR _canSeeBelowHorizon$[ebp], edx

; 464  : 	BOOL canSeeCloudLayer	= bottom < -angleOfDepression;

	cvtss2sd xmm0, DWORD PTR _bottom$[ebp]
	movsd	xmm1, QWORD PTR _angleOfDepression$[ebp]
	xorpd	xmm1, QWORD PTR __xmm@80000000000000008000000000000000
	comisd	xmm1, xmm0
	jbe	SHORT $LN22@DrawSkyAbo
	mov	DWORD PTR tv183[ebp], 1
	jmp	SHORT $LN23@DrawSkyAbo
$LN22@DrawSkyAbo:
	mov	DWORD PTR tv183[ebp], 0
$LN23@DrawSkyAbo:
	mov	eax, DWORD PTR tv183[ebp]
	mov	DWORD PTR _canSeeCloudLayer$[ebp], eax

; 465  : 
; 466  : 	BOOL drawFiller	= canSeeAboveClouds && canSeeBelowHorizon;

	cmp	DWORD PTR _canSeeAboveClouds$[ebp], 0
	je	SHORT $LN24@DrawSkyAbo
	cmp	DWORD PTR _canSeeBelowHorizon$[ebp], 0
	je	SHORT $LN24@DrawSkyAbo
	mov	DWORD PTR tv186[ebp], 1
	jmp	SHORT $LN25@DrawSkyAbo
$LN24@DrawSkyAbo:
	mov	DWORD PTR tv186[ebp], 0
$LN25@DrawSkyAbo:
	mov	ecx, DWORD PTR tv186[ebp]
	mov	DWORD PTR _drawFiller$[ebp], ecx

; 467  : 	BOOL drawTop	= canSeeAboveHorizon && canSeeBelowClear;

	cmp	DWORD PTR _canSeeAboveHorizon$[ebp], 0
	je	SHORT $LN26@DrawSkyAbo
	cmp	DWORD PTR _canSeeBelowClear$[ebp], 0
	je	SHORT $LN26@DrawSkyAbo
	mov	DWORD PTR tv189[ebp], 1
	jmp	SHORT $LN27@DrawSkyAbo
$LN26@DrawSkyAbo:
	mov	DWORD PTR tv189[ebp], 0
$LN27@DrawSkyAbo:
	mov	edx, DWORD PTR tv189[ebp]
	mov	DWORD PTR _drawTop$[ebp], edx

; 468  : 	BOOL drawClear	= canSeeAboveTop;

	mov	eax, DWORD PTR _canSeeAboveTop$[ebp]
	mov	DWORD PTR _drawClear$[ebp], eax

; 469  : 	BOOL drawClouds = canSeeCloudLayer;

	mov	ecx, DWORD PTR _canSeeCloudLayer$[ebp]
	mov	DWORD PTR _drawClouds$[ebp], ecx

; 470  : 
; 471  : 
; 472  : 	// Compute two points on the horizon which are sure to be off opposite edges of the screen
; 473  : 	float cR = (float)cos(Roll());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Roll@Render3D@@QAEMXZ			; Render3D::Roll
	push	ecx
	fstp	DWORD PTR [esp]
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _cR$[ebp]

; 474  : 	float sR = (float)sin(Roll());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Roll@Render3D@@QAEMXZ			; Render3D::Roll
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _sR$[ebp]

; 475  : 	horizon.hx = pixelWidth *  cR;

	movss	xmm0, DWORD PTR _pixelWidth$[ebp]
	mulss	xmm0, DWORD PTR _cR$[ebp]
	movss	DWORD PTR _horizon$[ebp+4], xmm0

; 476  : 	horizon.hy = pixelWidth * -sR;

	movss	xmm0, DWORD PTR _sR$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _pixelWidth$[ebp]
	movss	DWORD PTR _horizon$[ebp+8], xmm0

; 477  : 
; 478  : 	// Compute the position of the real horizon line
; 479  : 	// NOTE:  tan becomes infinite at pitch = +/- 90 degrees.
; 480  : 	//        We'll ignore the issue for now since it is a rare occurence.
; 481  : 	percentHalfXscale = tan( Pitch() ) * oneOVERtanHFOV;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Pitch@Render3D@@QAEMXZ			; Render3D::Pitch
	push	ecx
	fstp	DWORD PTR [esp]
	call	?tan@@YAMM@Z				; tan
	add	esp, 4
	fstp	DWORD PTR tv825[ebp]
	movss	xmm0, DWORD PTR tv825[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+262904]
	cvtss2sd xmm0, xmm0
	movsd	QWORD PTR _percentHalfXscale$[ebp], xmm0

; 482  : 	pixelDistance = scaleX * (float)percentHalfXscale;

	cvtsd2ss xmm0, QWORD PTR _percentHalfXscale$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+32]
	movss	DWORD PTR _pixelDistance$[ebp], xmm0

; 483  : 	horizon.vx = pixelDistance * sR;

	movss	xmm0, DWORD PTR _pixelDistance$[ebp]
	mulss	xmm0, DWORD PTR _sR$[ebp]
	movss	DWORD PTR _horizon$[ebp+12], xmm0

; 484  : 	horizon.vy = pixelDistance * cR;

	movss	xmm0, DWORD PTR _pixelDistance$[ebp]
	mulss	xmm0, DWORD PTR _cR$[ebp]
	movss	DWORD PTR _horizon$[ebp+16], xmm0

; 485  : 
; 486  : 
; 487  : 	// Compute the position of the top of the horizon/sky blending band
; 488  : 	// (the band extends "bandAngleUp" radians above the horizon)
; 489  : 	percentHalfXscale = tan( Pitch() - bandAngleUp ) * oneOVERtanHFOV;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Pitch@Render3D@@QAEMXZ			; Render3D::Pitch
	fstp	DWORD PTR tv834[ebp]
	movss	xmm0, DWORD PTR tv834[ebp]
	subss	xmm0, DWORD PTR _bandAngleUp$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?tan@@YAMM@Z				; tan
	add	esp, 4
	fstp	DWORD PTR tv839[ebp]
	movss	xmm0, DWORD PTR tv839[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+262904]
	cvtss2sd xmm0, xmm0
	movsd	QWORD PTR _percentHalfXscale$[ebp], xmm0

; 490  : 	pixelDistance = scaleX * (float)percentHalfXscale;

	cvtsd2ss xmm0, QWORD PTR _percentHalfXscale$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+32]
	movss	DWORD PTR _pixelDistance$[ebp], xmm0

; 491  : 	horizon.vxUp = pixelDistance * sR;

	movss	xmm0, DWORD PTR _pixelDistance$[ebp]
	mulss	xmm0, DWORD PTR _sR$[ebp]
	movss	DWORD PTR _horizon$[ebp+20], xmm0

; 492  : 	horizon.vyUp = pixelDistance * cR;

	movss	xmm0, DWORD PTR _pixelDistance$[ebp]
	mulss	xmm0, DWORD PTR _cR$[ebp]
	movss	DWORD PTR _horizon$[ebp+24], xmm0

; 493  : 	horizon.bandAngleUp = bandAngleUp;

	movss	xmm0, DWORD PTR _bandAngleUp$[ebp]
	movss	DWORD PTR _horizon$[ebp], xmm0

; 494  : 
; 495  : 
; 496  : 	// Compute the position of the bottom of the terrain to horizon filler band
; 497  : 	percentHalfXscale = tan( Pitch() + angleOfDepression ) * oneOVERtanHFOV;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Pitch@Render3D@@QAEMXZ			; Render3D::Pitch
	fstp	DWORD PTR tv849[ebp]
	movss	xmm0, DWORD PTR tv849[ebp]
	cvtss2sd xmm0, xmm0
	addsd	xmm0, QWORD PTR _angleOfDepression$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_tan
	add	esp, 8
	fstp	QWORD PTR tv854[ebp]
	movsd	xmm0, QWORD PTR tv854[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	cvtss2sd xmm1, DWORD PTR [eax+262904]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR _percentHalfXscale$[ebp], xmm0

; 498  : 	pixelDistance = scaleX * (float)percentHalfXscale;

	cvtsd2ss xmm0, QWORD PTR _percentHalfXscale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR _pixelDistance$[ebp], xmm0

; 499  : 	horizon.vxDn = pixelDistance * sR;

	movss	xmm0, DWORD PTR _pixelDistance$[ebp]
	mulss	xmm0, DWORD PTR _sR$[ebp]
	movss	DWORD PTR _horizon$[ebp+28], xmm0

; 500  : 	horizon.vyDn = pixelDistance * cR;

	movss	xmm0, DWORD PTR _pixelDistance$[ebp]
	mulss	xmm0, DWORD PTR _cR$[ebp]
	movss	DWORD PTR _horizon$[ebp+32], xmm0

; 501  : 
; 502  : 
; 503  : 	if (drawClear) {

	cmp	DWORD PTR _drawClear$[ebp], 0
	je	SHORT $LN7@DrawSkyAbo

; 504  : 		DrawClearSky( &horizon );

	lea	edx, DWORD PTR _horizon$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawClearSky@RenderOTW@@IAEXPAUHorizonRecord@@@Z ; RenderOTW::DrawClearSky
$LN7@DrawSkyAbo:

; 505  : 	}
; 506  : 
; 507  : 	// Do sunrise/sunset horizon calculations
; 508  : 	ComputeHorizonEffect( &horizon );

	lea	eax, DWORD PTR _horizon$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+168]
	call	eax

; 509  : 
; 510  : 	// Draw the blended poly from the haze color to the sky color
; 511  : 	if (drawTop) {

	cmp	DWORD PTR _drawTop$[ebp], 0
	je	SHORT $LN6@DrawSkyAbo

; 512  : 		DrawSkyHazeBand( &horizon );

	lea	ecx, DWORD PTR _horizon$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawSkyHazeBand@RenderOTW@@IAEXPAUHorizonRecord@@@Z ; RenderOTW::DrawSkyHazeBand
$LN6@DrawSkyAbo:

; 513  : 	}
; 514  : 
; 515  : 	// Draw the celestial objects
; 516  : 	DrawStars();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+164]
	call	edx

; 517  : 	if (TheTimeOfDay.ThereIsASun())		DrawSun();

	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?ThereIsASun@CTimeOfDay@@QAEHXZ		; CTimeOfDay::ThereIsASun
	test	eax, eax
	je	SHORT $LN5@DrawSkyAbo
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+156]
	call	eax
$LN5@DrawSkyAbo:

; 518  : 	if (TheTimeOfDay.ThereIsAMoon())	DrawMoon();

	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?ThereIsAMoon@CTimeOfDay@@QAEHXZ	; CTimeOfDay::ThereIsAMoon
	test	eax, eax
	je	SHORT $LN4@DrawSkyAbo
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN4@DrawSkyAbo:

; 519  : 
; 520  : 	// Draw the poly of low intensity haze color to fill from the terrain to the horizon
; 521  : 	if (drawFiller) {

	cmp	DWORD PTR _drawFiller$[ebp], 0
	je	SHORT $LN3@DrawSkyAbo

; 522  : 		DrawFillerToHorizon( &horizon );

	lea	ecx, DWORD PTR _horizon$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawFillerToHorizon@RenderOTW@@IAEXPAUHorizonRecord@@@Z ; RenderOTW::DrawFillerToHorizon
$LN3@DrawSkyAbo:

; 523  : 	}
; 524  : 
; 525  : 
; 526  : 	// Draw the overcast layer below us (covers all terrain)
; 527  : 	if (drawClouds) {

	cmp	DWORD PTR _drawClouds$[ebp], 0
	je	$LN2@DrawSkyAbo

; 528  : 		Tpoint			worldSpace;
; 529  : 		ThreeDVertex	v0, v1, v2, v3;
; 530  : 
; 531  : 		worldSpace.z = -SKY_ROOF_HEIGHT;

	movss	xmm0, DWORD PTR __real@c76a6000
	movss	DWORD PTR _worldSpace$5[ebp+8], xmm0

; 532  : 		u = (float)fmod( viewpoint->Y() * 0.5f*ROOF_REPEAT_COUNT/SKY_ROOF_RANGE, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+263088]
	call	?Y@TViewPoint@@QAEMXZ			; TViewPoint::Y
	fstp	DWORD PTR tv879[ebp]
	movss	xmm0, DWORD PTR tv879[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR ?ROOF_REPEAT_COUNT@RenderOTW@@2MB
	divss	xmm0, DWORD PTR __real@48435000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fmod@@YAMMM@Z				; fmod
	add	esp, 8
	fstp	DWORD PTR _u$[ebp]

; 533  : 		v = 1.0f - (float)fmod( viewpoint->X() * 0.5f*ROOF_REPEAT_COUNT/SKY_ROOF_RANGE, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+263088]
	call	?X@TViewPoint@@QAEMXZ			; TViewPoint::X
	fstp	DWORD PTR tv889[ebp]
	movss	xmm0, DWORD PTR tv889[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR ?ROOF_REPEAT_COUNT@RenderOTW@@2MB
	divss	xmm0, DWORD PTR __real@48435000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fmod@@YAMMM@Z				; fmod
	add	esp, 8
	fstp	DWORD PTR tv896[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR tv896[ebp]
	movss	DWORD PTR _v$[ebp], xmm0

; 534  : 
; 535  : 		// South West
; 536  : 		worldSpace.x = viewpoint->X()-SKY_ROOF_RANGE, 		worldSpace.y = viewpoint->Y()-SKY_ROOF_RANGE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+263088]
	call	?X@TViewPoint@@QAEMXZ			; TViewPoint::X
	fstp	DWORD PTR tv902[ebp]
	movss	xmm0, DWORD PTR tv902[ebp]
	subss	xmm0, DWORD PTR __real@48435000
	movss	DWORD PTR _worldSpace$5[ebp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+263088]
	call	?Y@TViewPoint@@QAEMXZ			; TViewPoint::Y
	fstp	DWORD PTR tv907[ebp]
	movss	xmm0, DWORD PTR tv907[ebp]
	subss	xmm0, DWORD PTR __real@48435000
	movss	DWORD PTR _worldSpace$5[ebp+4], xmm0

; 537  : 		TransformPoint( &worldSpace, &v0 );						   

	lea	eax, DWORD PTR _v0$1[ebp]
	push	eax
	lea	ecx, DWORD PTR _worldSpace$5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TransformPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformPoint

; 538  : 		v0.u = u,					v0.v = v+ROOF_REPEAT_COUNT,	v0.q = v0.csZ * Q_SCALE;

	movss	xmm0, DWORD PTR _u$[ebp]
	movss	DWORD PTR _v0$1[ebp+24], xmm0
	movss	xmm0, DWORD PTR _v$[ebp]
	addss	xmm0, DWORD PTR ?ROOF_REPEAT_COUNT@RenderOTW@@2MB
	movss	DWORD PTR _v0$1[ebp+28], xmm0
	movss	xmm0, DWORD PTR _v0$1[ebp+48]
	mulss	xmm0, DWORD PTR _Q_SCALE
	movss	DWORD PTR _v0$1[ebp+32], xmm0

; 539  : 
; 540  : 		// North West
; 541  : 		worldSpace.x = viewpoint->X()+SKY_ROOF_RANGE, 		worldSpace.y = viewpoint->Y()-SKY_ROOF_RANGE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+263088]
	call	?X@TViewPoint@@QAEMXZ			; TViewPoint::X
	fstp	DWORD PTR tv917[ebp]
	movss	xmm0, DWORD PTR tv917[ebp]
	addss	xmm0, DWORD PTR __real@48435000
	movss	DWORD PTR _worldSpace$5[ebp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+263088]
	call	?Y@TViewPoint@@QAEMXZ			; TViewPoint::Y
	fstp	DWORD PTR tv922[ebp]
	movss	xmm0, DWORD PTR tv922[ebp]
	subss	xmm0, DWORD PTR __real@48435000
	movss	DWORD PTR _worldSpace$5[ebp+4], xmm0

; 542  : 		TransformPoint( &worldSpace, &v1 );

	lea	ecx, DWORD PTR _v1$4[ebp]
	push	ecx
	lea	edx, DWORD PTR _worldSpace$5[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TransformPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformPoint

; 543  : 		v1.u = u,					v1.v = v,					v1.q = v1.csZ * Q_SCALE;

	movss	xmm0, DWORD PTR _u$[ebp]
	movss	DWORD PTR _v1$4[ebp+24], xmm0
	movss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR _v1$4[ebp+28], xmm0
	movss	xmm0, DWORD PTR _v1$4[ebp+48]
	mulss	xmm0, DWORD PTR _Q_SCALE
	movss	DWORD PTR _v1$4[ebp+32], xmm0

; 544  : 
; 545  : 		// South East
; 546  : 		worldSpace.x = viewpoint->X()-SKY_ROOF_RANGE, 		worldSpace.y = viewpoint->Y()+SKY_ROOF_RANGE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+263088]
	call	?X@TViewPoint@@QAEMXZ			; TViewPoint::X
	fstp	DWORD PTR tv932[ebp]
	movss	xmm0, DWORD PTR tv932[ebp]
	subss	xmm0, DWORD PTR __real@48435000
	movss	DWORD PTR _worldSpace$5[ebp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+263088]
	call	?Y@TViewPoint@@QAEMXZ			; TViewPoint::Y
	fstp	DWORD PTR tv937[ebp]
	movss	xmm0, DWORD PTR tv937[ebp]
	addss	xmm0, DWORD PTR __real@48435000
	movss	DWORD PTR _worldSpace$5[ebp+4], xmm0

; 547  : 		TransformPoint( &worldSpace, &v2 );

	lea	edx, DWORD PTR _v2$2[ebp]
	push	edx
	lea	eax, DWORD PTR _worldSpace$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TransformPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformPoint

; 548  : 		v2.u = u+ROOF_REPEAT_COUNT,	v2.v = v+ROOF_REPEAT_COUNT,	v2.q = v2.csZ * Q_SCALE;

	movss	xmm0, DWORD PTR _u$[ebp]
	addss	xmm0, DWORD PTR ?ROOF_REPEAT_COUNT@RenderOTW@@2MB
	movss	DWORD PTR _v2$2[ebp+24], xmm0
	movss	xmm0, DWORD PTR _v$[ebp]
	addss	xmm0, DWORD PTR ?ROOF_REPEAT_COUNT@RenderOTW@@2MB
	movss	DWORD PTR _v2$2[ebp+28], xmm0
	movss	xmm0, DWORD PTR _v2$2[ebp+48]
	mulss	xmm0, DWORD PTR _Q_SCALE
	movss	DWORD PTR _v2$2[ebp+32], xmm0

; 549  : 
; 550  : 		// North East
; 551  : 		worldSpace.x = viewpoint->X()+SKY_ROOF_RANGE, 		worldSpace.y = viewpoint->Y()+SKY_ROOF_RANGE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+263088]
	call	?X@TViewPoint@@QAEMXZ			; TViewPoint::X
	fstp	DWORD PTR tv947[ebp]
	movss	xmm0, DWORD PTR tv947[ebp]
	addss	xmm0, DWORD PTR __real@48435000
	movss	DWORD PTR _worldSpace$5[ebp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+263088]
	call	?Y@TViewPoint@@QAEMXZ			; TViewPoint::Y
	fstp	DWORD PTR tv952[ebp]
	movss	xmm0, DWORD PTR tv952[ebp]
	addss	xmm0, DWORD PTR __real@48435000
	movss	DWORD PTR _worldSpace$5[ebp+4], xmm0

; 552  : 		TransformPoint( &worldSpace, &v3 );

	lea	eax, DWORD PTR _v3$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _worldSpace$5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TransformPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformPoint

; 553  : 		v3.u = u+ROOF_REPEAT_COUNT,	v3.v = v,					v3.q = v3.csZ * Q_SCALE;

	movss	xmm0, DWORD PTR _u$[ebp]
	addss	xmm0, DWORD PTR ?ROOF_REPEAT_COUNT@RenderOTW@@2MB
	movss	DWORD PTR _v3$3[ebp+24], xmm0
	movss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR _v3$3[ebp+28], xmm0
	movss	xmm0, DWORD PTR _v3$3[ebp+48]
	mulss	xmm0, DWORD PTR _Q_SCALE
	movss	DWORD PTR _v3$3[ebp+32], xmm0

; 554  : 
; 555  : 		v0.r = v1.r = v2.r = v3.r = 0.5f;

	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _v3$3[ebp+8], xmm0
	movss	xmm0, DWORD PTR _v3$3[ebp+8]
	movss	DWORD PTR _v2$2[ebp+8], xmm0
	movss	xmm0, DWORD PTR _v2$2[ebp+8]
	movss	DWORD PTR _v1$4[ebp+8], xmm0
	movss	xmm0, DWORD PTR _v1$4[ebp+8]
	movss	DWORD PTR _v0$1[ebp+8], xmm0

; 556  : 		v0.g = v1.g = v2.g = v3.g = 0.6f;

	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR _v3$3[ebp+12], xmm0
	movss	xmm0, DWORD PTR _v3$3[ebp+12]
	movss	DWORD PTR _v2$2[ebp+12], xmm0
	movss	xmm0, DWORD PTR _v2$2[ebp+12]
	movss	DWORD PTR _v1$4[ebp+12], xmm0
	movss	xmm0, DWORD PTR _v1$4[ebp+12]
	movss	DWORD PTR _v0$1[ebp+12], xmm0

; 557  : 		v0.b = v1.b = v2.b = v3.b = 0.7f;

	movss	xmm0, DWORD PTR __real@3f333333
	movss	DWORD PTR _v3$3[ebp+16], xmm0
	movss	xmm0, DWORD PTR _v3$3[ebp+16]
	movss	DWORD PTR _v2$2[ebp+16], xmm0
	movss	xmm0, DWORD PTR _v2$2[ebp+16]
	movss	DWORD PTR _v1$4[ebp+16], xmm0
	movss	xmm0, DWORD PTR _v1$4[ebp+16]
	movss	DWORD PTR _v0$1[ebp+16], xmm0

; 558  : 
; 559  : 		// Setup the drawing state for these polygons
; 560  : 		context.RestoreState( STATE_TEXTURE_PERSPECTIVE );

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 561  : 		if (GetFilteringMode()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFilteringMode@RenderOTW@@QAEHXZ	; RenderOTW::GetFilteringMode
	test	eax, eax
	je	SHORT $LN1@DrawSkyAbo

; 562  : //			context.SetState( MPR_STA_ENABLES, MPR_SE_FILTERING );
; 563  : 			context.SetState( MPR_STA_TEX_FILTER, MPR_TX_BILINEAR );

	push	1
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
$LN1@DrawSkyAbo:

; 564  : //			context.InvalidateState();
; 565  : 		}
; 566  : 
; 567  : 		context.SelectTexture1( texRoofTop.TexHandle() );

	mov	ecx, OFFSET ?texRoofTop@RenderOTW@@2VTexture@@A ; RenderOTW::texRoofTop
	call	?TexHandle@Texture@@QAEKXZ		; Texture::TexHandle
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?SelectTexture1@ContextMPR@@QAEXH@Z	; ContextMPR::SelectTexture1

; 568  : 
; 569  : 		DrawSquare( &v0, &v1, &v3, &v2, CULL_ALLOW_ALL );

	push	0
	push	0
	push	0
	lea	edx, DWORD PTR _v2$2[ebp]
	push	edx
	lea	eax, DWORD PTR _v3$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _v1$4[ebp]
	push	ecx
	lea	edx, DWORD PTR _v0$1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawSquare@Render3D@@QAEXPAUThreeDVertex@@000H_N1@Z ; Render3D::DrawSquare
$LN2@DrawSkyAbo:

; 570  : 	}
; 571  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawSkyAbove@RenderOTW@@IAEXXZ ENDP			; RenderOTW::DrawSkyAbove
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\otwsky.cpp
_TEXT	SEGMENT
tv477 = -236						; size = 8
tv457 = -228						; size = 4
tv387 = -224						; size = 4
_canSeeBelowClear$ = -220				; size = 4
_angleOfDepression$ = -216				; size = 8
tv443 = -208						; size = 4
tv372 = -204						; size = 4
_canSeeBelowHorizon$ = -200				; size = 4
_drawFiller$ = -196					; size = 4
tv452 = -192						; size = 4
_drawTop$ = -188					; size = 4
_canSeeAboveTop$ = -184					; size = 4
_drawClear$ = -180					; size = 4
_canSeeAboveHorizon$ = -176				; size = 4
tv472 = -172						; size = 4
_canSeeAboveTerrain$ = -168				; size = 4
tv467 = -164						; size = 4
tv382 = -160						; size = 4
tv81 = -156						; size = 4
tv185 = -152						; size = 4
tv175 = -148						; size = 4
tv183 = -144						; size = 4
_pixelWidth$ = -140					; size = 4
_bottom$ = -136						; size = 4
tv191 = -132						; size = 4
tv181 = -128						; size = 4
tv188 = -124						; size = 4
tv177 = -120						; size = 4
_vpZ$ = -116						; size = 4
_top$ = -112						; size = 4
_percentHalfXscale$ = -108				; size = 8
_sR$ = -100						; size = 4
_bandAngleUp$ = -96					; size = 4
_cR$ = -92						; size = 4
_pixelDistance$ = -88					; size = 4
_this$ = -84						; size = 4
_horizon$ = -80						; size = 76
__$ArrayPad$ = -4					; size = 4
?DrawSkyNoRoof@RenderOTW@@IAEXXZ PROC			; RenderOTW::DrawSkyNoRoof
; _this$ = ecx

; 111  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 112  : 	HorizonRecord	horizon;
; 113  : 
; 114  : 	double	angleOfDepression, percentHalfXscale;
; 115  : 	float	pixelWidth, pixelDistance;
; 116  : 	float	vpZ = -viewpoint->Z();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+263088]
	call	?Z@TViewPoint@@QAEMXZ			; TViewPoint::Z
	fstp	DWORD PTR tv372[ebp]
	movss	xmm0, DWORD PTR tv372[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _vpZ$[ebp], xmm0

; 117  : 
; 118  : 	float	bandAngleUp = min( PI/18.0f, (PI/48.0f) * (SKY_MAX_HEIGHT/vpZ));

	movss	xmm0, DWORD PTR __real@4788b800
	divss	xmm0, DWORD PTR _vpZ$[ebp]
	mulss	xmm0, DWORD PTR __real@3d860a92
	comiss	xmm0, DWORD PTR __real@3e32b8c3
	jbe	SHORT $LN10@DrawSkyNoR
	movss	xmm0, DWORD PTR __real@3e32b8c3
	movss	DWORD PTR tv81[ebp], xmm0
	jmp	SHORT $LN11@DrawSkyNoR
$LN10@DrawSkyNoR:
	movss	xmm0, DWORD PTR __real@4788b800
	divss	xmm0, DWORD PTR _vpZ$[ebp]
	mulss	xmm0, DWORD PTR __real@3d860a92
	movss	DWORD PTR tv81[ebp], xmm0
$LN11@DrawSkyNoR:
	movss	xmm0, DWORD PTR tv81[ebp]
	movss	DWORD PTR _bandAngleUp$[ebp], xmm0

; 119  : 
; 120  : 	float	top		= Pitch() + diagonal_half_angle;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Pitch@Render3D@@QAEMXZ			; Render3D::Pitch
	fstp	DWORD PTR tv382[ebp]
	movss	xmm0, DWORD PTR tv382[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+262900]
	movss	DWORD PTR _top$[ebp], xmm0

; 121  : 	float	bottom	= Pitch() - diagonal_half_angle;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Pitch@Render3D@@QAEMXZ			; Render3D::Pitch
	fstp	DWORD PTR tv387[ebp]
	movss	xmm0, DWORD PTR tv387[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [edx+262900]
	movss	DWORD PTR _bottom$[ebp], xmm0

; 122  : 
; 123  : 
; 124  : 
; 125  : #ifdef TWO_D_MAP_AVAILABLE
; 126  : 	if (twoDmode) {
; 127  : 		ClearFrame();
; 128  : 		return;
; 129  : 	}
; 130  : #endif
; 131  : 
; 132  : 
; 133  : 	// Figure out how for away from the center of the display the edge of the
; 134  : 	// terrain data is.
; 135  : 	angleOfDepression = atan2( vpZ, viewpoint->GetDrawingRange() );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+263088]
	call	?GetDrawingRange@TViewPoint@@QAEMXZ	; TViewPoint::GetDrawingRange
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _vpZ$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?atan2@@YAMMM@Z				; atan2
	add	esp, 8
	fstp	QWORD PTR _angleOfDepression$[ebp]

; 136  : 
; 137  : 	pixelWidth = (float)sqrt( scaleX*scaleX + scaleY*scaleY );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+32]
	mulss	xmm0, DWORD PTR [edx+32]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+36]
	mulss	xmm1, DWORD PTR [ecx+36]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _pixelWidth$[ebp]

; 138  : 	
; 139  : 
; 140  : 	// Decide which portions of the sky can possibly be seen by the viewer in this orientation
; 141  : 	BOOL canSeeAboveTop		= top > bandAngleUp;

	movss	xmm0, DWORD PTR _top$[ebp]
	comiss	xmm0, DWORD PTR _bandAngleUp$[ebp]
	jbe	SHORT $LN12@DrawSkyNoR
	mov	DWORD PTR tv175[ebp], 1
	jmp	SHORT $LN13@DrawSkyNoR
$LN12@DrawSkyNoR:
	mov	DWORD PTR tv175[ebp], 0
$LN13@DrawSkyNoR:
	mov	edx, DWORD PTR tv175[ebp]
	mov	DWORD PTR _canSeeAboveTop$[ebp], edx

; 142  : 	BOOL canSeeAboveHorizon	= top > 0.0f;

	movss	xmm0, DWORD PTR _top$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN14@DrawSkyNoR
	mov	DWORD PTR tv177[ebp], 1
	jmp	SHORT $LN15@DrawSkyNoR
$LN14@DrawSkyNoR:
	mov	DWORD PTR tv177[ebp], 0
$LN15@DrawSkyNoR:
	mov	eax, DWORD PTR tv177[ebp]
	mov	DWORD PTR _canSeeAboveHorizon$[ebp], eax

; 143  : 	BOOL canSeeAboveTerrain	= top > -angleOfDepression;

	cvtss2sd xmm0, DWORD PTR _top$[ebp]
	movsd	xmm1, QWORD PTR _angleOfDepression$[ebp]
	xorpd	xmm1, QWORD PTR __xmm@80000000000000008000000000000000
	comisd	xmm0, xmm1
	jbe	SHORT $LN16@DrawSkyNoR
	mov	DWORD PTR tv181[ebp], 1
	jmp	SHORT $LN17@DrawSkyNoR
$LN16@DrawSkyNoR:
	mov	DWORD PTR tv181[ebp], 0
$LN17@DrawSkyNoR:
	mov	ecx, DWORD PTR tv181[ebp]
	mov	DWORD PTR _canSeeAboveTerrain$[ebp], ecx

; 144  : 	BOOL canSeeBelowClear	= bottom < bandAngleUp;

	movss	xmm0, DWORD PTR _bandAngleUp$[ebp]
	comiss	xmm0, DWORD PTR _bottom$[ebp]
	jbe	SHORT $LN18@DrawSkyNoR
	mov	DWORD PTR tv183[ebp], 1
	jmp	SHORT $LN19@DrawSkyNoR
$LN18@DrawSkyNoR:
	mov	DWORD PTR tv183[ebp], 0
$LN19@DrawSkyNoR:
	mov	edx, DWORD PTR tv183[ebp]
	mov	DWORD PTR _canSeeBelowClear$[ebp], edx

; 145  : 	BOOL canSeeBelowHorizon	= bottom < 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _bottom$[ebp]
	jbe	SHORT $LN20@DrawSkyNoR
	mov	DWORD PTR tv185[ebp], 1
	jmp	SHORT $LN21@DrawSkyNoR
$LN20@DrawSkyNoR:
	mov	DWORD PTR tv185[ebp], 0
$LN21@DrawSkyNoR:
	mov	eax, DWORD PTR tv185[ebp]
	mov	DWORD PTR _canSeeBelowHorizon$[ebp], eax

; 146  : 
; 147  : 	BOOL drawFiller	= canSeeAboveTerrain && canSeeBelowHorizon;

	cmp	DWORD PTR _canSeeAboveTerrain$[ebp], 0
	je	SHORT $LN22@DrawSkyNoR
	cmp	DWORD PTR _canSeeBelowHorizon$[ebp], 0
	je	SHORT $LN22@DrawSkyNoR
	mov	DWORD PTR tv188[ebp], 1
	jmp	SHORT $LN23@DrawSkyNoR
$LN22@DrawSkyNoR:
	mov	DWORD PTR tv188[ebp], 0
$LN23@DrawSkyNoR:
	mov	ecx, DWORD PTR tv188[ebp]
	mov	DWORD PTR _drawFiller$[ebp], ecx

; 148  : 	BOOL drawTop	= canSeeAboveHorizon && canSeeBelowClear;

	cmp	DWORD PTR _canSeeAboveHorizon$[ebp], 0
	je	SHORT $LN24@DrawSkyNoR
	cmp	DWORD PTR _canSeeBelowClear$[ebp], 0
	je	SHORT $LN24@DrawSkyNoR
	mov	DWORD PTR tv191[ebp], 1
	jmp	SHORT $LN25@DrawSkyNoR
$LN24@DrawSkyNoR:
	mov	DWORD PTR tv191[ebp], 0
$LN25@DrawSkyNoR:
	mov	edx, DWORD PTR tv191[ebp]
	mov	DWORD PTR _drawTop$[ebp], edx

; 149  : 	BOOL drawClear	= canSeeAboveTop;

	mov	eax, DWORD PTR _canSeeAboveTop$[ebp]
	mov	DWORD PTR _drawClear$[ebp], eax

; 150  : 
; 151  : 
; 152  : 	// Compute two points on the horizon which are sure to be off opposite edges of the screen
; 153  : 	float cR = (float)cos(Roll());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Roll@Render3D@@QAEMXZ			; Render3D::Roll
	push	ecx
	fstp	DWORD PTR [esp]
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _cR$[ebp]

; 154  : 	float sR = (float)sin(Roll());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Roll@Render3D@@QAEMXZ			; Render3D::Roll
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _sR$[ebp]

; 155  : 	horizon.hx = pixelWidth *  cR;

	movss	xmm0, DWORD PTR _pixelWidth$[ebp]
	mulss	xmm0, DWORD PTR _cR$[ebp]
	movss	DWORD PTR _horizon$[ebp+4], xmm0

; 156  : 	horizon.hy = pixelWidth * -sR;

	movss	xmm0, DWORD PTR _sR$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _pixelWidth$[ebp]
	movss	DWORD PTR _horizon$[ebp+8], xmm0

; 157  : 
; 158  : 	// Compute the position of the real horizon line
; 159  : 	// NOTE:  tan becomes infinite at pitch = +/- 90 degrees.
; 160  : 	//        We'll ignore the issue for now since it is a rare occurence.
; 161  : 	percentHalfXscale = tan( Pitch() ) * oneOVERtanHFOV;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Pitch@Render3D@@QAEMXZ			; Render3D::Pitch
	push	ecx
	fstp	DWORD PTR [esp]
	call	?tan@@YAMM@Z				; tan
	add	esp, 4
	fstp	DWORD PTR tv443[ebp]
	movss	xmm0, DWORD PTR tv443[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+262904]
	cvtss2sd xmm0, xmm0
	movsd	QWORD PTR _percentHalfXscale$[ebp], xmm0

; 162  : 	pixelDistance = scaleX * (float)percentHalfXscale;

	cvtsd2ss xmm0, QWORD PTR _percentHalfXscale$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+32]
	movss	DWORD PTR _pixelDistance$[ebp], xmm0

; 163  : 	horizon.vx = pixelDistance * sR;

	movss	xmm0, DWORD PTR _pixelDistance$[ebp]
	mulss	xmm0, DWORD PTR _sR$[ebp]
	movss	DWORD PTR _horizon$[ebp+12], xmm0

; 164  : 	horizon.vy = pixelDistance * cR;

	movss	xmm0, DWORD PTR _pixelDistance$[ebp]
	mulss	xmm0, DWORD PTR _cR$[ebp]
	movss	DWORD PTR _horizon$[ebp+16], xmm0

; 165  : 
; 166  : 
; 167  : 	// Compute the position of the top of the horizon/sky blending band
; 168  : 	// (the band extends "bandAngleUp" radians above the horizon)
; 169  : 	percentHalfXscale = tan( Pitch() - bandAngleUp ) * oneOVERtanHFOV;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Pitch@Render3D@@QAEMXZ			; Render3D::Pitch
	fstp	DWORD PTR tv452[ebp]
	movss	xmm0, DWORD PTR tv452[ebp]
	subss	xmm0, DWORD PTR _bandAngleUp$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?tan@@YAMM@Z				; tan
	add	esp, 4
	fstp	DWORD PTR tv457[ebp]
	movss	xmm0, DWORD PTR tv457[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+262904]
	cvtss2sd xmm0, xmm0
	movsd	QWORD PTR _percentHalfXscale$[ebp], xmm0

; 170  : 	pixelDistance = scaleX * (float)percentHalfXscale;

	cvtsd2ss xmm0, QWORD PTR _percentHalfXscale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR _pixelDistance$[ebp], xmm0

; 171  : 	horizon.vxUp = pixelDistance * sR;

	movss	xmm0, DWORD PTR _pixelDistance$[ebp]
	mulss	xmm0, DWORD PTR _sR$[ebp]
	movss	DWORD PTR _horizon$[ebp+20], xmm0

; 172  : 	horizon.vyUp = pixelDistance * cR;

	movss	xmm0, DWORD PTR _pixelDistance$[ebp]
	mulss	xmm0, DWORD PTR _cR$[ebp]
	movss	DWORD PTR _horizon$[ebp+24], xmm0

; 173  : 	horizon.bandAngleUp = bandAngleUp;

	movss	xmm0, DWORD PTR _bandAngleUp$[ebp]
	movss	DWORD PTR _horizon$[ebp], xmm0

; 174  : 
; 175  : 
; 176  : 	// Compute the position of the bottom of the terrain to horizon filler band
; 177  : 	percentHalfXscale = Pitch() + angleOfDepression;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Pitch@Render3D@@QAEMXZ			; Render3D::Pitch
	fstp	DWORD PTR tv467[ebp]
	movss	xmm0, DWORD PTR tv467[ebp]
	cvtss2sd xmm0, xmm0
	addsd	xmm0, QWORD PTR _angleOfDepression$[ebp]
	movsd	QWORD PTR _percentHalfXscale$[ebp], xmm0

; 178  : 	if (percentHalfXscale < PI_OVER_2) {

	movsd	xmm0, QWORD PTR __real@3ff921fb60000000
	comisd	xmm0, QWORD PTR _percentHalfXscale$[ebp]
	jbe	SHORT $LN7@DrawSkyNoR

; 179  : 		percentHalfXscale = tan( Pitch() + angleOfDepression ) * oneOVERtanHFOV;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Pitch@Render3D@@QAEMXZ			; Render3D::Pitch
	fstp	DWORD PTR tv472[ebp]
	movss	xmm0, DWORD PTR tv472[ebp]
	cvtss2sd xmm0, xmm0
	addsd	xmm0, QWORD PTR _angleOfDepression$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_tan
	add	esp, 8
	fstp	QWORD PTR tv477[ebp]
	movsd	xmm0, QWORD PTR tv477[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cvtss2sd xmm1, DWORD PTR [edx+262904]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR _percentHalfXscale$[ebp], xmm0

; 180  : 	} else {

	jmp	SHORT $LN6@DrawSkyNoR
$LN7@DrawSkyNoR:

; 181  : 		percentHalfXscale = 10.0f;	// any big number should do...

	movsd	xmm0, QWORD PTR __real@4024000000000000
	movsd	QWORD PTR _percentHalfXscale$[ebp], xmm0
$LN6@DrawSkyNoR:

; 182  : 	}
; 183  : 	pixelDistance = scaleX * (float)percentHalfXscale;

	cvtsd2ss xmm0, QWORD PTR _percentHalfXscale$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+32]
	movss	DWORD PTR _pixelDistance$[ebp], xmm0

; 184  : 	horizon.vxDn = pixelDistance * sR;

	movss	xmm0, DWORD PTR _pixelDistance$[ebp]
	mulss	xmm0, DWORD PTR _sR$[ebp]
	movss	DWORD PTR _horizon$[ebp+28], xmm0

; 185  : 	horizon.vyDn = pixelDistance * cR;

	movss	xmm0, DWORD PTR _pixelDistance$[ebp]
	mulss	xmm0, DWORD PTR _cR$[ebp]
	movss	DWORD PTR _horizon$[ebp+32], xmm0

; 186  : 
; 187  : 	// Do sunrise/sunset horizon calculations
; 188  : 	ComputeHorizonEffect( &horizon );

	lea	ecx, DWORD PTR _horizon$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+168]
	call	edx

; 189  : 
; 190  : 	// Clear that part of the screen which will not be covered by sky or terrain
; 191  : 	if (drawClear) {

	cmp	DWORD PTR _drawClear$[ebp], 0
	je	SHORT $LN5@DrawSkyNoR

; 192  : 		DrawClearSky( &horizon );

	lea	eax, DWORD PTR _horizon$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawClearSky@RenderOTW@@IAEXPAUHorizonRecord@@@Z ; RenderOTW::DrawClearSky
$LN5@DrawSkyNoR:

; 193  : 	}
; 194  : 
; 195  : 	// Draw the blended poly from the haze color to the sky color
; 196  : 	// sfr: this is between horizon and roof
; 197  : 	if (drawTop) {

	cmp	DWORD PTR _drawTop$[ebp], 0
	je	SHORT $LN4@DrawSkyNoR

; 198  : 		DrawSkyHazeBand( &horizon );

	lea	ecx, DWORD PTR _horizon$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawSkyHazeBand@RenderOTW@@IAEXPAUHorizonRecord@@@Z ; RenderOTW::DrawSkyHazeBand
$LN4@DrawSkyNoR:

; 199  : 	}
; 200  : 
; 201  : 	// Draw the poly of low intensity haze color to fill from the terrain to the horizon
; 202  : 	// sfr: this is between sky and terrain
; 203  : 	if (drawFiller) {

	cmp	DWORD PTR _drawFiller$[ebp], 0
	je	SHORT $LN3@DrawSkyNoR

; 204  : 		DrawFillerToHorizon( &horizon );

	lea	edx, DWORD PTR _horizon$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawFillerToHorizon@RenderOTW@@IAEXPAUHorizonRecord@@@Z ; RenderOTW::DrawFillerToHorizon
$LN3@DrawSkyNoR:

; 205  : 	}
; 206  : 
; 207  : 	// Draw the celestial objects
; 208  : 	DrawStars();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	call	eax

; 209  : 
; 210  : 	if (TheTimeOfDay.ThereIsASun()){ DrawSun(); }

	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?ThereIsASun@CTimeOfDay@@QAEHXZ		; CTimeOfDay::ThereIsASun
	test	eax, eax
	je	SHORT $LN2@DrawSkyNoR
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+156]
	call	eax
$LN2@DrawSkyNoR:

; 211  : 	if (TheTimeOfDay.ThereIsAMoon()){ DrawMoon(); }

	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?ThereIsAMoon@CTimeOfDay@@QAEHXZ	; CTimeOfDay::ThereIsAMoon
	test	eax, eax
	je	SHORT $LN1@DrawSkyNoR
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN1@DrawSkyNoR:

; 212  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawSkyNoRoof@RenderOTW@@IAEXXZ ENDP			; RenderOTW::DrawSkyNoRoof
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\otwsky.cpp
_TEXT	SEGMENT
tv89 = -8						; size = 4
_this$ = -4						; size = 4
?DrawSky@RenderOTW@@IAEHXZ PROC				; RenderOTW::DrawSky
; _this$ = ecx

; 85   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 86   : 	// Update the sky color based on our current attitude and position
; 87   : 	AdjustSkyColor();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+176]
	call	eax

; 88   : 
; 89   : 	
; 90   : 	if (!skyRoof) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+263100], 0
	jne	SHORT $LN3@DrawSky

; 91   : 		DrawSkyNoRoof();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawSkyNoRoof@RenderOTW@@IAEXXZ	; RenderOTW::DrawSkyNoRoof

; 92   : 		return TRUE;		// Need to draw terrain

	mov	eax, 1
	jmp	SHORT $LN1@DrawSky
$LN3@DrawSky:

; 93   : 	}
; 94   : 
; 95   : 
; 96   : 	if (viewpoint->Z() < -SKY_ROOF_HEIGHT) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+263088]
	call	?Z@TViewPoint@@QAEMXZ			; TViewPoint::Z
	fstp	DWORD PTR tv89[ebp]
	movss	xmm0, DWORD PTR __real@c76a6000
	comiss	xmm0, DWORD PTR tv89[ebp]
	jbe	SHORT $LN2@DrawSky

; 97   : 		DrawSkyAbove();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawSkyAbove@RenderOTW@@IAEXXZ		; RenderOTW::DrawSkyAbove

; 98   : 		return FALSE;		// Don't need to draw terrain

	xor	eax, eax
	jmp	SHORT $LN1@DrawSky

; 99   : 	} 
; 100  : 	else {

	jmp	SHORT $LN1@DrawSky
$LN2@DrawSky:

; 101  : 		DrawSkyBelow();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawSkyBelow@RenderOTW@@IAEXXZ		; RenderOTW::DrawSkyBelow

; 102  : 		return TRUE;		// Need to draw terrain

	mov	eax, 1
$LN1@DrawSky:

; 103  : 	}
; 104  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DrawSky@RenderOTW@@IAEHXZ ENDP				; RenderOTW::DrawSky
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\renderow.h
;	COMDAT ?GetFilteringMode@RenderOTW@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFilteringMode@RenderOTW@@QAEHXZ PROC		; RenderOTW::GetFilteringMode, COMDAT
; _this$ = ecx

; 141  : 	BOOL GetFilteringMode( void )				{ return filtering; }; 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+263104]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFilteringMode@RenderOTW@@QAEHXZ ENDP		; RenderOTW::GetFilteringMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\otwsky.cpp
_TEXT	SEGMENT
_this$ = -24						; size = 4
_palette$1 = -20					; size = 4
_light$2 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
?SetRoofMode@RenderOTW@@QAEXH@Z PROC			; RenderOTW::SetRoofMode
; _this$ = ecx

; 54   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 	// Don't bother if the roof state isn't changing
; 56   : 	if (state == skyRoof) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	cmp	ecx, DWORD PTR [eax+263100]
	jne	SHORT $LN2@SetRoofMod

; 57   : 		return;

	jmp	$LN3@SetRoofMod
$LN2@SetRoofMod:

; 58   : 	}
; 59   : 
; 60   : 	// Get the textures we'll need if the roof is being turned on
; 61   : 	if (state && !texRoofTop.TexHandle()) {

	cmp	DWORD PTR _state$[ebp], 0
	je	SHORT $LN1@SetRoofMod
	mov	ecx, OFFSET ?texRoofTop@RenderOTW@@2VTexture@@A ; RenderOTW::texRoofTop
	call	?TexHandle@Texture@@QAEKXZ		; Texture::TexHandle
	test	eax, eax
	jne	SHORT $LN1@SetRoofMod

; 62   : 		Tcolor	light;
; 63   : 
; 64   : 		texRoofTop.LoadAndCreate( "OVClayerT.gif", MPR_TI_PALETTE );

	push	128					; 00000080H
	push	OFFSET ??_C@_0O@DHFCBBMB@OVClayerT?4gif?$AA@
	mov	ecx, OFFSET ?texRoofTop@RenderOTW@@2VTexture@@A ; RenderOTW::texRoofTop
	call	?LoadAndCreate@Texture@@QAEHPADK@Z	; Texture::LoadAndCreate

; 65   : 		texRoofBottom.LoadAndCreate( "OVClayerB.gif", MPR_TI_PALETTE );

	push	128					; 00000080H
	push	OFFSET ??_C@_0O@OCNNPAEH@OVClayerB?4gif?$AA@
	mov	ecx, OFFSET ?texRoofBottom@RenderOTW@@2VTexture@@A ; RenderOTW::texRoofBottom
	call	?LoadAndCreate@Texture@@QAEHPADK@Z	; Texture::LoadAndCreate

; 66   : 
; 67   : 		TheTimeOfDay.GetTextureLightingColor( &light );

	lea	edx, DWORD PTR _light$2[ebp]
	push	edx
	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetTextureLightingColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ; CTimeOfDay::GetTextureLightingColor

; 68   : 		Palette *palette;
; 69   : 		palette=texRoofTop.GetPalette();

	mov	ecx, OFFSET ?texRoofTop@RenderOTW@@2VTexture@@A ; RenderOTW::texRoofTop
	call	?GetPalette@Texture@@QAEPAVPalette@@XZ	; Texture::GetPalette
	mov	DWORD PTR _palette$1[ebp], eax

; 70   : 		palette->LightTexturePalette( &light );

	lea	eax, DWORD PTR _light$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _palette$1[ebp]
	call	?LightTexturePalette@Palette@@QAEXPAUTcolor@@@Z ; Palette::LightTexturePalette

; 71   : 		//texRoofTop.palette->LightTexturePalette( &light );
; 72   : 		palette=texRoofBottom.GetPalette();

	mov	ecx, OFFSET ?texRoofBottom@RenderOTW@@2VTexture@@A ; RenderOTW::texRoofBottom
	call	?GetPalette@Texture@@QAEPAVPalette@@XZ	; Texture::GetPalette
	mov	DWORD PTR _palette$1[ebp], eax

; 73   : 		palette->LightTexturePalette( &light );

	lea	ecx, DWORD PTR _light$2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _palette$1[ebp]
	call	?LightTexturePalette@Palette@@QAEXPAUTcolor@@@Z ; Palette::LightTexturePalette
$LN1@SetRoofMod:

; 74   : 		//texRoofBottom.palette->LightTexturePalette( &light );
; 75   : 	}
; 76   : 
; 77   : 	// Store the new state
; 78   : 	skyRoof = state;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+263100], eax
$LN3@SetRoofMod:

; 79   : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRoofMode@RenderOTW@@QAEXH@Z ENDP			; RenderOTW::SetRoofMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render3d.h
;	COMDAT ?GetVerticalClipFlags@@YAKMM@Z
_TEXT	SEGMENT
tv73 = -4						; size = 4
_y$ = 8							; size = 4
_z$ = 12						; size = 4
?GetVerticalClipFlags@@YAKMM@Z PROC			; GetVerticalClipFlags, COMDAT

; 187  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 188  : 	if ( fabs(y) > z ) {

	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv73[ebp]
	movss	xmm0, DWORD PTR tv73[ebp]
	comiss	xmm0, DWORD PTR _z$[ebp]
	jbe	SHORT $LN1@GetVertica

; 189  : 		if ( y > z ) {

	movss	xmm0, DWORD PTR _y$[ebp]
	comiss	xmm0, DWORD PTR _z$[ebp]
	jbe	SHORT $LN2@GetVertica

; 190  : 			return CLIP_BOTTOM;

	mov	eax, 8
	jmp	SHORT $LN4@GetVertica

; 191  : 		} else {

	jmp	SHORT $LN1@GetVertica
$LN2@GetVertica:

; 192  : 			return CLIP_TOP;

	mov	eax, 4
	jmp	SHORT $LN4@GetVertica
$LN1@GetVertica:

; 193  : 		}
; 194  : 	}
; 195  : 	return ON_SCREEN;

	xor	eax, eax
$LN4@GetVertica:

; 196  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetVerticalClipFlags@@YAKMM@Z ENDP			; GetVerticalClipFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render3d.h
;	COMDAT ?GetHorizontalClipFlags@@YAKMM@Z
_TEXT	SEGMENT
tv73 = -4						; size = 4
_x$ = 8							; size = 4
_z$ = 12						; size = 4
?GetHorizontalClipFlags@@YAKMM@Z PROC			; GetHorizontalClipFlags, COMDAT

; 175  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 176  : 	if ( fabs(x) > z ) {

	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv73[ebp]
	movss	xmm0, DWORD PTR tv73[ebp]
	comiss	xmm0, DWORD PTR _z$[ebp]
	jbe	SHORT $LN1@GetHorizon

; 177  : 		if ( x > z ) {

	movss	xmm0, DWORD PTR _x$[ebp]
	comiss	xmm0, DWORD PTR _z$[ebp]
	jbe	SHORT $LN2@GetHorizon

; 178  : 			return CLIP_RIGHT;

	mov	eax, 2
	jmp	SHORT $LN4@GetHorizon

; 179  : 		} else {

	jmp	SHORT $LN1@GetHorizon
$LN2@GetHorizon:

; 180  : 			return CLIP_LEFT;

	mov	eax, 1
	jmp	SHORT $LN4@GetHorizon
$LN1@GetHorizon:

; 181  : 		}
; 182  : 	}
; 183  : 	return ON_SCREEN;

	xor	eax, eax
$LN4@GetHorizon:

; 184  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetHorizontalClipFlags@@YAKMM@Z ENDP			; GetHorizontalClipFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render3d.h
;	COMDAT ?Roll@Render3D@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Roll@Render3D@@QAEMXZ PROC				; Render3D::Roll, COMDAT
; _this$ = ecx

; 84   : 	float   Roll( void )	{ return roll;	};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+262920]
	mov	esp, ebp
	pop	ebp
	ret	0
?Roll@Render3D@@QAEMXZ ENDP				; Render3D::Roll
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render3d.h
;	COMDAT ?Pitch@Render3D@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Pitch@Render3D@@QAEMXZ PROC				; Render3D::Pitch, COMDAT
; _this$ = ecx

; 83   : 	float	Pitch( void )	{ return pitch;	};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+262916]
	mov	esp, ebp
	pop	ebp
	ret	0
?Pitch@Render3D@@QAEMXZ ENDP				; Render3D::Pitch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render3d.h
;	COMDAT ?Yaw@Render3D@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Yaw@Render3D@@QAEMXZ PROC				; Render3D::Yaw, COMDAT
; _this$ = ecx

; 82   : 	float	Yaw( void )		{ return yaw;	};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+262912]
	mov	esp, ebp
	pop	ebp
	ret	0
?Yaw@Render3D@@QAEMXZ ENDP				; Render3D::Yaw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render3d.h
;	COMDAT ?Z@Render3D@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Z@Render3D@@QAEMXZ PROC				; Render3D::Z, COMDAT
; _this$ = ecx

; 80   : 	float	Z( void )	{ return cameraPos.z; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+262932]
	mov	esp, ebp
	pop	ebp
	ret	0
?Z@Render3D@@QAEMXZ ENDP				; Render3D::Z
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?viewportYtoPixel@VirtualDisplay@@QAEMM@Z
_TEXT	SEGMENT
tv73 = -8						; size = 4
_this$ = -4						; size = 4
_y$ = 8							; size = 4
?viewportYtoPixel@VirtualDisplay@@QAEMM@Z PROC		; VirtualDisplay::viewportYtoPixel, COMDAT
; _this$ = ecx

; 169  :     float viewportYtoPixel( float y ) { return (y * scaleY) + shiftY; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	mulss	xmm0, DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+44]
	movss	DWORD PTR tv73[ebp], xmm0
	fld	DWORD PTR tv73[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?viewportYtoPixel@VirtualDisplay@@QAEMM@Z ENDP		; VirtualDisplay::viewportYtoPixel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?viewportXtoPixel@VirtualDisplay@@QAEMM@Z
_TEXT	SEGMENT
tv73 = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?viewportXtoPixel@VirtualDisplay@@QAEMM@Z PROC		; VirtualDisplay::viewportXtoPixel, COMDAT
; _this$ = ecx

; 168  :     float viewportXtoPixel( float x ) { return (x * scaleX) + shiftX; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+40]
	movss	DWORD PTR tv73[ebp], xmm0
	fld	DWORD PTR tv73[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?viewportXtoPixel@VirtualDisplay@@QAEMM@Z ENDP		; VirtualDisplay::viewportXtoPixel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\edge.h
;	COMDAT ?Y@Edge@@QAEMM@Z
_TEXT	SEGMENT
tv84 = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?Y@Edge@@QAEMM@Z PROC					; Edge::Y, COMDAT
; _this$ = ecx

; 75   : 	float	Y( float x )	{	if(B==0.0f) return 0.0f;

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@Y
	fldz
	jmp	SHORT $LN1@Y
	jmp	SHORT $LN1@Y
$LN2@Y:

; 76   :     								else return -(A*x + C) / B; };

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR tv84[ebp], xmm0
	fld	DWORD PTR tv84[ebp]
$LN1@Y:
	mov	esp, ebp
	pop	ebp
	ret	4
?Y@Edge@@QAEMM@Z ENDP					; Edge::Y
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\edge.h
;	COMDAT ?X@Edge@@QAEMM@Z
_TEXT	SEGMENT
tv84 = -8						; size = 4
_this$ = -4						; size = 4
_y$ = 8							; size = 4
?X@Edge@@QAEMM@Z PROC					; Edge::X, COMDAT
; _this$ = ecx

; 71   : 	float	X( float y )	{	if(A==0.0f) return 0.0f;

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@X
	fldz
	jmp	SHORT $LN1@X
	jmp	SHORT $LN1@X
$LN2@X:

; 72   :     								else return -(B*y + C) / A; };

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR tv84[ebp], xmm0
	fld	DWORD PTR tv84[ebp]
$LN1@X:
	mov	esp, ebp
	pop	ebp
	ret	4
?X@Edge@@QAEMM@Z ENDP					; Edge::X
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\edge.h
;	COMDAT ?LeftOf@Edge@@QAEHMM@Z
_TEXT	SEGMENT
tv77 = -12						; size = 4
_this$ = -8						; size = 4
tv69 = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?LeftOf@Edge@@QAEHMM@Z PROC				; Edge::LeftOf, COMDAT
; _this$ = ecx

; 62   : 	BOOL	LeftOf( float x, float y )	{ return DistanceFrom(x, y) < 0.0f; };

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DistanceFrom@Edge@@QAEMMM@Z		; Edge::DistanceFrom
	fstp	DWORD PTR tv77[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv77[ebp]
	jbe	SHORT $LN3@LeftOf
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@LeftOf
$LN3@LeftOf:
	mov	DWORD PTR tv69[ebp], 0
$LN4@LeftOf:
	mov	eax, DWORD PTR tv69[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
?LeftOf@Edge@@QAEHMM@Z ENDP				; Edge::LeftOf
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\edge.h
;	COMDAT ?DistanceFrom@Edge@@QAEMMM@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?DistanceFrom@Edge@@QAEMMM@Z PROC			; Edge::DistanceFrom, COMDAT
; _this$ = ecx

; 57   : 	float	DistanceFrom( float x, float y )	{ return (A*x + B*y + C); };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+4]
	mulss	xmm1, DWORD PTR _y$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR tv78[ebp], xmm0
	fld	DWORD PTR tv78[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
?DistanceFrom@Edge@@QAEMMM@Z ENDP			; Edge::DistanceFrom
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\edge.h
;	COMDAT ?SetupWithVector@Edge@@QAEXMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_dx$ = 16						; size = 4
_dy$ = 20						; size = 4
?SetupWithVector@Edge@@QAEXMMMM@Z PROC			; Edge::SetupWithVector, COMDAT
; _this$ = ecx

; 37   : 	void	SetupWithVector( float x, float y, float dx, float dy ) { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 				A = dy;   B = -dx;   C = -(A*x + B*y);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR _dx$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	mulss	xmm1, DWORD PTR _y$[ebp]
	addss	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 39   : 			};

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetupWithVector@Edge@@QAEXMMMM@Z ENDP			; Edge::SetupWithVector
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\edge.h
;	COMDAT ??1Edge@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Edge@@QAE@XZ PROC					; Edge::~Edge, COMDAT
; _this$ = ecx

; 20   : 	~Edge()	{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1Edge@@QAE@XZ ENDP					; Edge::~Edge
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\edge.h
;	COMDAT ??0Edge@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Edge@@QAE@XZ PROC					; Edge::Edge, COMDAT
; _this$ = ecx

; 19   : 	Edge()	{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Edge@@QAE@XZ ENDP					; Edge::Edge
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tviewpnt.h
;	COMDAT ?Z@TViewPoint@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Z@TViewPoint@@QAEMXZ PROC				; TViewPoint::Z, COMDAT
; _this$ = ecx

; 117  : 	float	Z( void )	{ return pos.z; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+16]
	mov	esp, ebp
	pop	ebp
	ret	0
?Z@TViewPoint@@QAEMXZ ENDP				; TViewPoint::Z
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tviewpnt.h
;	COMDAT ?Y@TViewPoint@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Y@TViewPoint@@QAEMXZ PROC				; TViewPoint::Y, COMDAT
; _this$ = ecx

; 116  : 	float	Y( void )	{ return pos.y; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	esp, ebp
	pop	ebp
	ret	0
?Y@TViewPoint@@QAEMXZ ENDP				; TViewPoint::Y
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tviewpnt.h
;	COMDAT ?X@TViewPoint@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X@TViewPoint@@QAEMXZ PROC				; TViewPoint::X, COMDAT
; _this$ = ecx

; 115  : 	float	X( void )	{ return pos.x; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?X@TViewPoint@@QAEMXZ ENDP				; TViewPoint::X
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tviewpnt.h
;	COMDAT ?GetDrawingRange@TViewPoint@@QAEMXZ
_TEXT	SEGMENT
tv87 = -8						; size = 4
_this$ = -4						; size = 4
?GetDrawingRange@TViewPoint@@QAEMXZ PROC		; TViewPoint::GetDrawingRange, COMDAT
; _this$ = ecx

; 74   : 	float	GetDrawingRange( void )		{ return LEVEL_POST_TO_WORLD( blockLists[lowDetail].GetAvailablePostRange(), lowDetail ) * 0.65f; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	call	?GetAvailablePostRange@TBlockList@@QAEHXZ ; TBlockList::GetAvailablePostRange
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+68]
	shl	eax, cl
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ?FeetPerPost@@3MA
	mulss	xmm0, DWORD PTR __real@3f266666
	movss	DWORD PTR tv87[ebp], xmm0
	fld	DWORD PTR tv87[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDrawingRange@TViewPoint@@QAEMXZ ENDP		; TViewPoint::GetDrawingRange
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tblklist.h
;	COMDAT ?GetAvailablePostRange@TBlockList@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAvailablePostRange@TBlockList@@QAEHXZ PROC		; TBlockList::GetAvailablePostRange, COMDAT
; _this$ = ecx

; 56   : 	int  GetAvailablePostRange( void )		{ return availableRange; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAvailablePostRange@TBlockList@@QAEHXZ ENDP		; TBlockList::GetAvailablePostRange
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tex.h
;	COMDAT ?TexHandle@Texture@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?TexHandle@Texture@@QAEKXZ PROC				; Texture::TexHandle, COMDAT
; _this$ = ecx

; 60   : 	DWORD TexHandle() { return (DWORD) texHandle; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?TexHandle@Texture@@QAEKXZ ENDP				; Texture::TexHandle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tex.h
;	COMDAT ?GetPalette@Texture@@QAEPAVPalette@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPalette@Texture@@QAEPAVPalette@@XZ PROC		; Texture::GetPalette, COMDAT
; _this$ = ecx

; 33   : 	Palette *GetPalette(){ return this->palette; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPalette@Texture@@QAEPAVPalette@@XZ ENDP		; Texture::GetPalette
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tod.h
;	COMDAT ?GetSunYaw@CTimeOfDay@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_yaw$ = -4						; size = 4
?GetSunYaw@CTimeOfDay@@QAEHXZ PROC			; CTimeOfDay::GetSunYaw, COMDAT
; _this$ = ecx

; 123  : 	{ 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		int yaw = ISunYaw;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+312]
	mov	DWORD PTR _yaw$[ebp], ecx

; 125  : 		if(ISunPitch > 4096) yaw += 8192;

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+328], 4096		; 00001000H
	jle	SHORT $LN1@GetSunYaw
	mov	eax, DWORD PTR _yaw$[ebp]
	add	eax, 8192				; 00002000H
	mov	DWORD PTR _yaw$[ebp], eax
$LN1@GetSunYaw:

; 126  : 		return yaw & 0x3fff;

	mov	eax, DWORD PTR _yaw$[ebp]
	and	eax, 16383				; 00003fffH

; 127  : 	};

	mov	esp, ebp
	pop	ebp
	ret	0
?GetSunYaw@CTimeOfDay@@QAEHXZ ENDP			; CTimeOfDay::GetSunYaw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tod.h
;	COMDAT ?GetSunPitch@CTimeOfDay@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pitch$ = -4						; size = 4
?GetSunPitch@CTimeOfDay@@QAEHXZ PROC			; CTimeOfDay::GetSunPitch, COMDAT
; _this$ = ecx

; 116  : 	{ 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 117  : 		int pitch = ISunPitch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+328]
	mov	DWORD PTR _pitch$[ebp], ecx

; 118  : 		if(pitch > 4096) pitch = 8192 - pitch;

	cmp	DWORD PTR _pitch$[ebp], 4096		; 00001000H
	jle	SHORT $LN1@GetSunPitc
	mov	edx, 8192				; 00002000H
	sub	edx, DWORD PTR _pitch$[ebp]
	mov	DWORD PTR _pitch$[ebp], edx
$LN1@GetSunPitc:

; 119  : 		return pitch; 

	mov	eax, DWORD PTR _pitch$[ebp]

; 120  : 	};

	mov	esp, ebp
	pop	ebp
	ret	0
?GetSunPitch@CTimeOfDay@@QAEHXZ ENDP			; CTimeOfDay::GetSunPitch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tod.h
;	COMDAT ?GetStarData@CTimeOfDay@@QAEPAUStarData@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetStarData@CTimeOfDay@@QAEPAUStarData@@XZ PROC	; CTimeOfDay::GetStarData, COMDAT
; _this$ = ecx

; 113  : 	StarData *GetStarData ()					{ return TheStarData; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+32]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetStarData@CTimeOfDay@@QAEPAUStarData@@XZ ENDP	; CTimeOfDay::GetStarData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tod.h
;	COMDAT ?ThereIsAMoon@CTimeOfDay@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
?ThereIsAMoon@CTimeOfDay@@QAEHXZ PROC			; CTimeOfDay::ThereIsAMoon, COMDAT
; _this$ = ecx

; 112  : 	int ThereIsAMoon()							{ return (IMoonPitch > 0); };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+332], 0
	jle	SHORT $LN3@ThereIsAMo
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@ThereIsAMo
$LN3@ThereIsAMo:
	mov	DWORD PTR tv66[ebp], 0
$LN4@ThereIsAMo:
	mov	eax, DWORD PTR tv66[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?ThereIsAMoon@CTimeOfDay@@QAEHXZ ENDP			; CTimeOfDay::ThereIsAMoon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tod.h
;	COMDAT ?ThereIsASun@CTimeOfDay@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
?ThereIsASun@CTimeOfDay@@QAEHXZ PROC			; CTimeOfDay::ThereIsASun, COMDAT
; _this$ = ecx

; 111  : 	int ThereIsASun()							{ return (ISunPitch > 0); };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+328], 0
	jle	SHORT $LN3@ThereIsASu
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@ThereIsASu
$LN3@ThereIsASu:
	mov	DWORD PTR tv66[ebp], 0
$LN4@ThereIsASu:
	mov	eax, DWORD PTR tv66[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?ThereIsASun@CTimeOfDay@@QAEHXZ ENDP			; CTimeOfDay::ThereIsASun
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tod.h
;	COMDAT ?GetSpecularValue@CTimeOfDay@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSpecularValue@CTimeOfDay@@QAEMXZ PROC		; CTimeOfDay::GetSpecularValue, COMDAT
; _this$ = ecx

; 107  : 	float GetSpecularValue()					{ return Specular; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+228]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSpecularValue@CTimeOfDay@@QAEMXZ ENDP		; CTimeOfDay::GetSpecularValue
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tod.h
;	COMDAT ?GetDiffuseValue@CTimeOfDay@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDiffuseValue@CTimeOfDay@@QAEMXZ PROC		; CTimeOfDay::GetDiffuseValue, COMDAT
; _this$ = ecx

; 106  : 	float GetDiffuseValue()						{ return Diffuse; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+224]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDiffuseValue@CTimeOfDay@@QAEMXZ ENDP		; CTimeOfDay::GetDiffuseValue
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tod.h
;	COMDAT ?GetAmbientValue@CTimeOfDay@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAmbientValue@CTimeOfDay@@QAEMXZ PROC		; CTimeOfDay::GetAmbientValue, COMDAT
; _this$ = ecx

; 105  : 	float GetAmbientValue()						{ return Ambient; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+220]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAmbientValue@CTimeOfDay@@QAEMXZ ENDP		; CTimeOfDay::GetAmbientValue
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tod.h
;	COMDAT ?GetHazeSunHorizonColor@CTimeOfDay@@QAEXPAUTcolor@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rgb$ = 8						; size = 4
?GetHazeSunHorizonColor@CTimeOfDay@@QAEXPAUTcolor@@@Z PROC ; CTimeOfDay::GetHazeSunHorizonColor, COMDAT
; _this$ = ecx

; 100  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 101  : 		if(ISunPitch > 4096) *rgb = HazeSunsetColor; 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+328], 4096		; 00001000H
	jle	SHORT $LN2@GetHazeSun
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 276				; 00000114H
	mov	edx, DWORD PTR _rgb$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx
	jmp	SHORT $LN3@GetHazeSun
$LN2@GetHazeSun:

; 102  : 		else *rgb = HazeSunriseColor; 

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 264				; 00000108H
	mov	eax, DWORD PTR _rgb$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
$LN3@GetHazeSun:

; 103  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?GetHazeSunHorizonColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ENDP ; CTimeOfDay::GetHazeSunHorizonColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tod.h
;	COMDAT ?GetTextureLightingColor@CTimeOfDay@@QAEXPAUTcolor@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rgb$ = 8						; size = 4
?GetTextureLightingColor@CTimeOfDay@@QAEXPAUTcolor@@@Z PROC ; CTimeOfDay::GetTextureLightingColor, COMDAT
; _this$ = ecx

; 94   : 	void GetTextureLightingColor(Tcolor *rgb)	{ *rgb = TextureLighting; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 196				; 000000c4H
	mov	ecx, DWORD PTR _rgb$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?GetTextureLightingColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ENDP ; CTimeOfDay::GetTextureLightingColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tod.h
;	COMDAT ?GetHazeGroundColor@CTimeOfDay@@QAEXPAUTcolor@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rgb$ = 8						; size = 4
?GetHazeGroundColor@CTimeOfDay@@QAEXPAUTcolor@@@Z PROC	; CTimeOfDay::GetHazeGroundColor, COMDAT
; _this$ = ecx

; 93   : 	void GetHazeGroundColor(Tcolor *rgb)		{ *rgb = HazeGroundColor; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 184				; 000000b8H
	mov	ecx, DWORD PTR _rgb$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?GetHazeGroundColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ENDP	; CTimeOfDay::GetHazeGroundColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tod.h
;	COMDAT ?GetGroundColor@CTimeOfDay@@QAEXPAUTcolor@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rgb$ = 8						; size = 4
?GetGroundColor@CTimeOfDay@@QAEXPAUTcolor@@@Z PROC	; CTimeOfDay::GetGroundColor, COMDAT
; _this$ = ecx

; 92   : 	void GetGroundColor(Tcolor *rgb)			{ *rgb = GroundColor; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 172				; 000000acH
	mov	ecx, DWORD PTR _rgb$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?GetGroundColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ENDP	; CTimeOfDay::GetGroundColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tod.h
;	COMDAT ?GetHazeSkyColor@CTimeOfDay@@QAEXPAUTcolor@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rgb$ = 8						; size = 4
?GetHazeSkyColor@CTimeOfDay@@QAEXPAUTcolor@@@Z PROC	; CTimeOfDay::GetHazeSkyColor, COMDAT
; _this$ = ecx

; 91   : 	void GetHazeSkyColor(Tcolor *rgb)			{ *rgb = HazeSkyColor; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 160				; 000000a0H
	mov	ecx, DWORD PTR _rgb$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?GetHazeSkyColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ENDP	; CTimeOfDay::GetHazeSkyColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tod.h
;	COMDAT ?GetSkyColor@CTimeOfDay@@QAEXPAUTcolor@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rgb$ = 8						; size = 4
?GetSkyColor@CTimeOfDay@@QAEXPAUTcolor@@@Z PROC		; CTimeOfDay::GetSkyColor, COMDAT
; _this$ = ecx

; 90   : 	void GetSkyColor(Tcolor *rgb)				{ *rgb = SkyColor; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 148				; 00000094H
	mov	ecx, DWORD PTR _rgb$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?GetSkyColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ENDP		; CTimeOfDay::GetSkyColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tod.h
;	COMDAT ?SetCurrentSkyColor@CTimeOfDay@@QAEXPAUTcolor@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rgb$ = 8						; size = 4
?SetCurrentSkyColor@CTimeOfDay@@QAEXPAUTcolor@@@Z PROC	; CTimeOfDay::SetCurrentSkyColor, COMDAT
; _this$ = ecx

; 88   : 	void SetCurrentSkyColor(Tcolor *rgb)		{ CurrentSkyColor = *rgb; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 252				; 000000fcH
	mov	ecx, DWORD PTR _rgb$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCurrentSkyColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ENDP	; CTimeOfDay::SetCurrentSkyColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tod.h
;	COMDAT ?GetStarIntensity@CTimeOfDay@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetStarIntensity@CTimeOfDay@@QAEMXZ PROC		; CTimeOfDay::GetStarIntensity, COMDAT
; _this$ = ecx

; 83   : 	float GetStarIntensity(){ return StarIntensity; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+248]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetStarIntensity@CTimeOfDay@@QAEMXZ ENDP		; CTimeOfDay::GetStarIntensity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tod.h
;	COMDAT ?GetNVGmode@CTimeOfDay@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNVGmode@CTimeOfDay@@QAEHXZ PROC			; CTimeOfDay::GetNVGmode, COMDAT
; _this$ = ecx

; 69   : 	BOOL GetNVGmode()							{ return NVGmode; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+348]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNVGmode@CTimeOfDay@@QAEHXZ ENDP			; CTimeOfDay::GetNVGmode
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\grinline.h
;	COMDAT ?glConvertFromRadian@@YAHM@Z
_TEXT	SEGMENT
_deg$ = 8						; size = 4
?glConvertFromRadian@@YAHM@Z PROC			; glConvertFromRadian, COMDAT

; 120  : {

	push	ebp
	mov	ebp, esp

; 121  : 	return ( FloatToInt32(deg * 2607.594588f + 0.5f) );

	movss	xmm0, DWORD PTR _deg$[ebp]
	mulss	xmm0, DWORD PTR __real@4522f983
	addss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4

; 122  : }	/* glConvertFromRadian */

	pop	ebp
	ret	0
?glConvertFromRadian@@YAHM@Z ENDP			; glConvertFromRadian
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?tan@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?tan@@YAMM@Z PROC					; tan, COMDAT

; 543  :         {return (tanf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_tanf
	add	esp, 4
	pop	ebp
	ret	0
?tan@@YAMM@Z ENDP					; tan
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 537  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fmod@@YAMMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
__Y$ = 12						; size = 4
?fmod@@YAMMM@Z PROC					; fmod, COMDAT

; 521  :         {return (fmodf(_X, _Y)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __Y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fmodf
	add	esp, 8
	pop	ebp
	ret	0
?fmod@@YAMMM@Z ENDP					; fmod
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 511  :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?atan2@@YAMMM@Z
_TEXT	SEGMENT
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
?atan2@@YAMMM@Z PROC					; atan2, COMDAT

; 507  :         {return (atan2f(_Y, _X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __Y$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_atan2f
	add	esp, 8
	pop	ebp
	ret	0
?atan2@@YAMMM@Z ENDP					; atan2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _tanf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_tanf	PROC						; COMDAT

; 436  :         {return ((float)tan((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_tan
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_tanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 430  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fmodf
_TEXT	SEGMENT
tv77 = -12						; size = 8
tv79 = -4						; size = 4
__X$ = 8						; size = 4
__Y$ = 12						; size = 4
_fmodf	PROC						; COMDAT

; 418  :         {return ((float)fmod((double)_X, (double)_Y)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __Y$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fmod
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv77[ebp]
	movsd	xmm0, QWORD PTR tv77[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv79[ebp], xmm0
	fld	DWORD PTR tv79[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fmodf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv77 = -12						; size = 8
tv79 = -4						; size = 4
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 406  :         {return ((float)atan2((double)_Y, (double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR __Y$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan2
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv77[ebp]
	movsd	xmm0, QWORD PTR tv77[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv79[ebp], xmm0
	fld	DWORD PTR tv79[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
END
