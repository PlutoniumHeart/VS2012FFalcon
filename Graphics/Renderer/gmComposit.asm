; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\Graphics\Renderer\gmComposit.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
CONST	SEGMENT
_OperationList DD 00H
	DD	0fH
	DD	01H
	DD	01eH
	DD	02H
	DD	02dH
	DD	03H
	DD	032H
	DD	04H
	DD	04bH
	DD	05H
	DD	05aH
	DD	06H
	DD	065H
_NEAR_CLIP DD	03f800000r			; 1
_GM_OVERSCAN DD	03e4ccccdr			; 0.2
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
PUBLIC	_cosf
PUBLIC	_sinf
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	??0Edge@@QAE@XZ					; Edge::Edge
PUBLIC	??1Edge@@QAE@XZ					; Edge::~Edge
PUBLIC	?SetupWithVector@Edge@@QAEXMMMM@Z		; Edge::SetupWithVector
PUBLIC	?Reverse@Edge@@QAEXXZ				; Edge::Reverse
PUBLIC	?DistanceFrom@Edge@@QAEMMM@Z			; Edge::DistanceFrom
PUBLIC	?RightOf@Edge@@QAEHMM@Z				; Edge::RightOf
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	??_GTextureHandle@@QAEPAXI@Z			; TextureHandle::`scalar deleting destructor'
PUBLIC	??_GPaletteHandle@@QAEPAXI@Z			; PaletteHandle::`scalar deleting destructor'
PUBLIC	?CurrentForegroundColor@ContextMPR@@QAEHXZ	; ContextMPR::CurrentForegroundColor
PUBLIC	?GetDisplayDevice@ImageBuffer@@QAEPAVDisplayDevice@@XZ ; ImageBuffer::GetDisplayDevice
PUBLIC	?targetSurface@ImageBuffer@@QAEPAUIDirectDrawSurface7@@XZ ; ImageBuffer::targetSurface
PUBLIC	?targetXres@ImageBuffer@@QAEHXZ			; ImageBuffer::targetXres
PUBLIC	?targetYres@ImageBuffer@@QAEHXZ			; ImageBuffer::targetYres
PUBLIC	??0VirtualDisplay@@QAE@XZ			; VirtualDisplay::VirtualDisplay
PUBLIC	??1VirtualDisplay@@UAE@XZ			; VirtualDisplay::~VirtualDisplay
PUBLIC	?Circle@VirtualDisplay@@UAEXMMM@Z		; VirtualDisplay::Circle
PUBLIC	?Arc@VirtualDisplay@@UAEXMMMMM@Z		; VirtualDisplay::Arc
PUBLIC	?TextWidth@VirtualDisplay@@UAEMPAD@Z		; VirtualDisplay::TextWidth
PUBLIC	?TextHeight@VirtualDisplay@@UAEMXZ		; VirtualDisplay::TextHeight
PUBLIC	?SetLineStyle@VirtualDisplay@@UAEXH@Z		; VirtualDisplay::SetLineStyle
PUBLIC	?Color@VirtualDisplay@@UAEKXZ			; VirtualDisplay::Color
PUBLIC	?viewportXtoPixel@VirtualDisplay@@QAEMM@Z	; VirtualDisplay::viewportXtoPixel
PUBLIC	?viewportYtoPixel@VirtualDisplay@@QAEMM@Z	; VirtualDisplay::viewportYtoPixel
PUBLIC	??_GVirtualDisplay@@UAEPAXI@Z			; VirtualDisplay::`scalar deleting destructor'
PUBLIC	??0Render2D@@QAE@XZ				; Render2D::Render2D
PUBLIC	??1Render2D@@UAE@XZ				; Render2D::~Render2D
PUBLIC	?ClearDraw@Render2D@@UAEXXZ			; Render2D::ClearDraw
PUBLIC	?ClearZBuffer@Render2D@@UAEXXZ			; Render2D::ClearZBuffer
PUBLIC	?Color@Render2D@@UAEKXZ				; Render2D::Color
PUBLIC	?SetColor@Render2D@@UAEXK@Z			; Render2D::SetColor
PUBLIC	?SetBackground@Render2D@@UAEXK@Z		; Render2D::SetBackground
PUBLIC	?SetLineStyle@Render2D@@UAEXH@Z			; Render2D::SetLineStyle
PUBLIC	??_GRender2D@@UAEPAXI@Z				; Render2D::`scalar deleting destructor'
PUBLIC	??0Render3D@@QAE@XZ				; Render3D::Render3D
PUBLIC	??1Render3D@@UAE@XZ				; Render3D::~Render3D
PUBLIC	?Cleanup@Render3D@@UAEXXZ			; Render3D::Cleanup
PUBLIC	??_GRender3D@@UAEPAXI@Z				; Render3D::`scalar deleting destructor'
PUBLIC	??0RenderGMRadar@@QAE@XZ			; RenderGMRadar::RenderGMRadar
PUBLIC	??1RenderGMRadar@@UAE@XZ			; RenderGMRadar::~RenderGMRadar
PUBLIC	?GetAt@RenderGMRadar@@QAEPAUTpoint@@XZ		; RenderGMRadar::GetAt
PUBLIC	?GetHdg@RenderGMRadar@@QAEMXZ			; RenderGMRadar::GetHdg
PUBLIC	??_GRenderGMRadar@@UAEPAXI@Z			; RenderGMRadar::`scalar deleting destructor'
PUBLIC	??0RenderGMComposite@@QAE@XZ			; RenderGMComposite::RenderGMComposite
PUBLIC	??1RenderGMComposite@@UAE@XZ			; RenderGMComposite::~RenderGMComposite
PUBLIC	?Setup@RenderGMComposite@@UAEXPAVImageBuffer@@P6AXPAXPAVRenderGMRadar@@_N@Z1@Z ; RenderGMComposite::Setup
PUBLIC	?Cleanup@RenderGMComposite@@UAEXXZ		; RenderGMComposite::Cleanup
PUBLIC	?SetBeam@RenderGMComposite@@QAEXPAUTpoint@@00MMHMH_N@Z ; RenderGMComposite::SetBeam
PUBLIC	?DrawComposite@RenderGMComposite@@QAEXPAUTpoint@@M@Z ; RenderGMComposite::DrawComposite
PUBLIC	?SetRange@RenderGMComposite@@QAEXMH@Z		; RenderGMComposite::SetRange
PUBLIC	?DebugDrawLeftTexture@RenderGMComposite@@QAEXPAVRender2D@@@Z ; RenderGMComposite::DebugDrawLeftTexture
PUBLIC	?DebugDrawRadarImage@RenderGMComposite@@QAEXPAVImageBuffer@@@Z ; RenderGMComposite::DebugDrawRadarImage
PUBLIC	?BackgroundGeneration@RenderGMComposite@@IAE_NPAUTpoint@@0MHH_N@Z ; RenderGMComposite::BackgroundGeneration
PUBLIC	?NewImage@RenderGMComposite@@IAEXPAUTpoint@@MH_N@Z ; RenderGMComposite::NewImage
PUBLIC	??_GRenderGMComposite@@UAEPAXI@Z		; RenderGMComposite::`scalar deleting destructor'
PUBLIC	?IsHardware@DisplayDevice@@QAEHXZ		; DisplayDevice::IsHardware
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_7VirtualDisplay@@6B@				; VirtualDisplay::`vftable'
PUBLIC	??_7Render2D@@6B@				; Render2D::`vftable'
PUBLIC	??_7Render3D@@6B@				; Render3D::`vftable'
PUBLIC	??_7RenderGMRadar@@6B@				; RenderGMRadar::`vftable'
PUBLIC	??_7RenderGMComposite@@6B@			; RenderGMComposite::`vftable'
PUBLIC	??_C@_0O@BDAPHCP@GM?5Radar?5Left?$AA@		; `string'
PUBLIC	??_C@_0P@LBCPACMH@GM?5Radar?5Right?$AA@		; `string'
PUBLIC	??_C@_0P@OJAOCNDF@GM?5Radar?5Noise?$AA@		; `string'
PUBLIC	??_C@_0BD@OPKIDHHE@L?5ANGLE?3?5?$CF0?40f?5deg?$AA@ ; `string'
PUBLIC	??_C@_0BD@NDADKDPC@GM?5HDG?3?5?5?$CF0?40f?5deg?$AA@ ; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Render3D@@6B@				; Render3D::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVRender3D@@@8				; Render3D `RTTI Type Descriptor'
PUBLIC	??_R3Render3D@@8				; Render3D::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Render3D@@8				; Render3D::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Render3D@@8			; Render3D::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@Render2D@@8			; Render2D::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVRender2D@@@8				; Render2D `RTTI Type Descriptor'
PUBLIC	??_R3Render2D@@8				; Render2D::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Render2D@@8				; Render2D::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@VirtualDisplay@@8			; VirtualDisplay::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVVirtualDisplay@@@8			; VirtualDisplay `RTTI Type Descriptor'
PUBLIC	??_R3VirtualDisplay@@8				; VirtualDisplay::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2VirtualDisplay@@8				; VirtualDisplay::`RTTI Base Class Array'
PUBLIC	??_R4VirtualDisplay@@6B@			; VirtualDisplay::`RTTI Complete Object Locator'
PUBLIC	??_R4Render2D@@6B@				; Render2D::`RTTI Complete Object Locator'
PUBLIC	??_R4RenderGMRadar@@6B@				; RenderGMRadar::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVRenderGMRadar@@@8			; RenderGMRadar `RTTI Type Descriptor'
PUBLIC	??_R3RenderGMRadar@@8				; RenderGMRadar::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2RenderGMRadar@@8				; RenderGMRadar::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@RenderGMRadar@@8			; RenderGMRadar::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4RenderGMComposite@@6B@			; RenderGMComposite::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVRenderGMComposite@@@8			; RenderGMComposite `RTTI Type Descriptor'
PUBLIC	??_R3RenderGMComposite@@8			; RenderGMComposite::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2RenderGMComposite@@8			; RenderGMComposite::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@RenderGMComposite@@8		; RenderGMComposite::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3b800000
PUBLIC	__real@3e99999a
PUBLIC	__real@3f000000
PUBLIC	__real@3f333333
PUBLIC	__real@3f800000
PUBLIC	__real@3f860a92
PUBLIC	__real@40000000
PUBLIC	__real@40490fdb
PUBLIC	__real@41200000
PUBLIC	__real@41900000
PUBLIC	__real@43000000
PUBLIC	__real@43340000
PUBLIC	__real@bf800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_cos:PROC
EXTRN	_sin:PROC
EXTRN	_rand:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	__imp__MulDiv@12:PROC
EXTRN	_sprintf:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	??0TextureHandle@@QAE@XZ:PROC			; TextureHandle::TextureHandle
EXTRN	??1TextureHandle@@QAE@XZ:PROC			; TextureHandle::~TextureHandle
EXTRN	?Create@TextureHandle@@QAE_NPADKGGGK@Z:PROC	; TextureHandle::Create
EXTRN	?Load@TextureHandle@@QAE_NGIPAE_N1H@Z:PROC	; TextureHandle::Load
EXTRN	?Clear@TextureHandle@@QAEXXZ:PROC		; TextureHandle::Clear
EXTRN	??0PaletteHandle@@QAE@PAUIDirectDraw7@@GG@Z:PROC ; PaletteHandle::PaletteHandle
EXTRN	??1PaletteHandle@@QAE@XZ:PROC			; PaletteHandle::~PaletteHandle
EXTRN	?Load@PaletteHandle@@QAEXGGGGPAE@Z:PROC		; PaletteHandle::Load
EXTRN	?AttachToTexture@PaletteHandle@@QAEXPAVTextureHandle@@@Z:PROC ; PaletteHandle::AttachToTexture
EXTRN	??0ContextMPR@@QAE@XZ:PROC			; ContextMPR::ContextMPR
EXTRN	??1ContextMPR@@UAE@XZ:PROC			; ContextMPR::~ContextMPR
EXTRN	?NewImageBuffer@ContextMPR@@QAEXI@Z:PROC	; ContextMPR::NewImageBuffer
EXTRN	?SetState@ContextMPR@@QAEXGK@Z:PROC		; ContextMPR::SetState
EXTRN	?ClearBuffers@ContextMPR@@QAEXG@Z:PROC		; ContextMPR::ClearBuffers
EXTRN	?SelectForegroundColor@ContextMPR@@QAEXH@Z:PROC	; ContextMPR::SelectForegroundColor
EXTRN	?SelectTexture1@ContextMPR@@QAEXH@Z:PROC	; ContextMPR::SelectTexture1
EXTRN	?RestoreState@ContextMPR@@QAEXH@Z:PROC		; ContextMPR::RestoreState
EXTRN	?DrawPrimitive@ContextMPR@@QAEXHGGPAUMPRVtxTexClr_t@@G@Z:PROC ; ContextMPR::DrawPrimitive
EXTRN	?SetViewportAbs@ContextMPR@@QAEXHHHH@Z:PROC	; ContextMPR::SetViewportAbs
EXTRN	?LockViewport@ContextMPR@@QAEXXZ:PROC		; ContextMPR::LockViewport
EXTRN	?UnlockViewport@ContextMPR@@QAEXXZ:PROC		; ContextMPR::UnlockViewport
EXTRN	??0ImageBuffer@@QAE@XZ:PROC			; ImageBuffer::ImageBuffer
EXTRN	?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z:PROC ; ImageBuffer::Setup
EXTRN	?Cleanup@ImageBuffer@@QAEXXZ:PROC		; ImageBuffer::Cleanup
EXTRN	?Compose@ImageBuffer@@QAEXPAV1@PAUtagRECT@@1@Z:PROC ; ImageBuffer::Compose
EXTRN	?Setup@VirtualDisplay@@UAEXXZ:PROC		; VirtualDisplay::Setup
EXTRN	?Cleanup@VirtualDisplay@@UAEXXZ:PROC		; VirtualDisplay::Cleanup
EXTRN	?Point@VirtualDisplay@@UAEXMM@Z:PROC		; VirtualDisplay::Point
EXTRN	?Line@VirtualDisplay@@UAEXMMMM@Z:PROC		; VirtualDisplay::Line
EXTRN	?Line@VirtualDisplay@@UAEXMMMMM@Z:PROC		; VirtualDisplay::Line
EXTRN	?Tri@VirtualDisplay@@UAEXMMMMMM@Z:PROC		; VirtualDisplay::Tri
EXTRN	?Oval@VirtualDisplay@@UAEXMMMM@Z:PROC		; VirtualDisplay::Oval
EXTRN	?OvalArc@VirtualDisplay@@UAEXMMMMMM@Z:PROC	; VirtualDisplay::OvalArc
EXTRN	?TextLeft@VirtualDisplay@@UAEXMMPBDH@Z:PROC	; VirtualDisplay::TextLeft
EXTRN	?TextRight@VirtualDisplay@@UAEXMMPBDH@Z:PROC	; VirtualDisplay::TextRight
EXTRN	?TextLeftVertical@VirtualDisplay@@UAEXMMPBDH@Z:PROC ; VirtualDisplay::TextLeftVertical
EXTRN	?TextRightVertical@VirtualDisplay@@UAEXMMPBDH@Z:PROC ; VirtualDisplay::TextRightVertical
EXTRN	?TextCenter@VirtualDisplay@@UAEXMMPBDH@Z:PROC	; VirtualDisplay::TextCenter
EXTRN	?TextCenterVertical@VirtualDisplay@@UAEXMMPBDH@Z:PROC ; VirtualDisplay::TextCenterVertical
EXTRN	?TextWrap@VirtualDisplay@@UAEHMMPBDMM@Z:PROC	; VirtualDisplay::TextWrap
EXTRN	?ScreenTextHeight@VirtualDisplay@@SAHXZ:PROC	; VirtualDisplay::ScreenTextHeight
EXTRN	?ScreenTextWidth@VirtualDisplay@@SAHPBD@Z:PROC	; VirtualDisplay::ScreenTextWidth
EXTRN	?SetViewport@VirtualDisplay@@UAEXMMMM@Z:PROC	; VirtualDisplay::SetViewport
EXTRN	?SetViewportRelative@VirtualDisplay@@UAEXMMMM@Z:PROC ; VirtualDisplay::SetViewportRelative
EXTRN	?Render2DTri@VirtualDisplay@@MAEXMMMMMM@Z:PROC	; VirtualDisplay::Render2DTri
EXTRN	??_EVirtualDisplay@@UAEPAXI@Z:PROC		; VirtualDisplay::`vector deleting destructor'
EXTRN	?Setup@Render2D@@UAEXPAVImageBuffer@@@Z:PROC	; Render2D::Setup
EXTRN	?Cleanup@Render2D@@UAEXXZ:PROC			; Render2D::Cleanup
EXTRN	?SetImageBuffer@Render2D@@UAEXPAVImageBuffer@@@Z:PROC ; Render2D::SetImageBuffer
EXTRN	?StartDraw@Render2D@@UAEXXZ:PROC		; Render2D::StartDraw
EXTRN	?EndDraw@Render2D@@UAEXXZ:PROC			; Render2D::EndDraw
EXTRN	?SetViewport@Render2D@@UAEXMMMM@Z:PROC		; Render2D::SetViewport
EXTRN	?Render2DPoint@Render2D@@UAEXMM@Z:PROC		; Render2D::Render2DPoint
EXTRN	?Render2DLine@Render2D@@UAEXMMMM@Z:PROC		; Render2D::Render2DLine
EXTRN	?Render2DTri@Render2D@@UAEXMMMMMM@Z:PROC	; Render2D::Render2DTri
EXTRN	?ScreenText@Render2D@@UAEXMMPBDH@Z:PROC		; Render2D::ScreenText
EXTRN	?SetClipFlags@Render2D@@QAEXPAUTwoDVertex@@@Z:PROC ; Render2D::SetClipFlags
EXTRN	?ClipAndDraw2DFan@Render2D@@QAEXPAPAUTwoDVertex@@I_N@Z:PROC ; Render2D::ClipAndDraw2DFan
EXTRN	??_ERender2D@@UAEPAXI@Z:PROC			; Render2D::`vector deleting destructor'
EXTRN	?Setup@Render3D@@UAEXPAVImageBuffer@@@Z:PROC	; Render3D::Setup
EXTRN	?StartDraw@Render3D@@UAEXXZ:PROC		; Render3D::StartDraw
EXTRN	?SetViewport@Render3D@@UAEXMMMM@Z:PROC		; Render3D::SetViewport
EXTRN	??_ERender3D@@UAEPAXI@Z:PROC			; Render3D::`vector deleting destructor'
EXTRN	?Setup@RenderGMRadar@@UAEXPAVImageBuffer@@@Z:PROC ; RenderGMRadar::Setup
EXTRN	?Cleanup@RenderGMRadar@@UAEXXZ:PROC		; RenderGMRadar::Cleanup
EXTRN	?StartDraw@RenderGMRadar@@UAEXXZ:PROC		; RenderGMRadar::StartDraw
EXTRN	?SetViewport@RenderGMRadar@@UAEXMMMM@Z:PROC	; RenderGMRadar::SetViewport
EXTRN	?SetRange@RenderGMRadar@@QAEHMH@Z:PROC		; RenderGMRadar::SetRange
EXTRN	?StartScene@RenderGMRadar@@QAEXPAUTpoint@@0M@Z:PROC ; RenderGMRadar::StartScene
EXTRN	?TransformScene@RenderGMRadar@@QAEXXZ:PROC	; RenderGMRadar::TransformScene
EXTRN	?DrawScene@RenderGMRadar@@QAEXXZ:PROC		; RenderGMRadar::DrawScene
EXTRN	?DrawFeatures@RenderGMRadar@@QAEXXZ:PROC	; RenderGMRadar::DrawFeatures
EXTRN	?PrepareToDrawTargets@RenderGMRadar@@QAEXXZ:PROC ; RenderGMRadar::PrepareToDrawTargets
EXTRN	?FlushDrawnTargets@RenderGMRadar@@QAEXXZ:PROC	; RenderGMRadar::FlushDrawnTargets
EXTRN	?FinishScene@RenderGMRadar@@QAEXXZ:PROC		; RenderGMRadar::FinishScene
EXTRN	??_ERenderGMRadar@@UAEPAXI@Z:PROC		; RenderGMRadar::`vector deleting destructor'
EXTRN	??_ERenderGMComposite@@UAEPAXI@Z:PROC		; RenderGMComposite::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?FalconDisplay@@3VFalconDisplayConfiguration@@A:BYTE ; FalconDisplay
EXTRN	?DisplayOptions@@3VDisplayOptionsClass@@A:BYTE	; DisplayOptions
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

_GM_OVERSCAN_RNG DD 01H DUP (?)
_GM_OVERSCAN_H DD 01H DUP (?)
_GM_OVERSCAN_V DD 01H DUP (?)
_beam	DB	0cH DUP (?)
_leftLimit DB	0cH DUP (?)
_rightLimit DB	0cH DUP (?)
_v0	DB	028H DUP (?)
_v1	DB	028H DUP (?)
_v2	DB	028H DUP (?)
_v3	DB	028H DUP (?)
_vertArray DD	07H DUP (?)
_c	DB	0f0H DUP (?)
_NumCverts DD	01H DUP (?)
_random	DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@43340000
CONST	SEGMENT
__real@43340000 DD 043340000r			; 180
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
CONST	ENDS
;	COMDAT __real@41900000
CONST	SEGMENT
__real@41900000 DD 041900000r			; 18
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f860a92
CONST	SEGMENT
__real@3f860a92 DD 03f860a92r			; 1.0472
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3b800000
CONST	SEGMENT
__real@3b800000 DD 03b800000r			; 0.00390625
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@RenderGMComposite@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@RenderGMComposite@@8 DD FLAT:??_R0?AVRenderGMComposite@@@8 ; RenderGMComposite::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3RenderGMComposite@@8
rdata$r	ENDS
;	COMDAT ??_R2RenderGMComposite@@8
rdata$r	SEGMENT
??_R2RenderGMComposite@@8 DD FLAT:??_R1A@?0A@EA@RenderGMComposite@@8 ; RenderGMComposite::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Render2D@@8
	DD	FLAT:??_R1A@?0A@EA@VirtualDisplay@@8
rdata$r	ENDS
;	COMDAT ??_R3RenderGMComposite@@8
rdata$r	SEGMENT
??_R3RenderGMComposite@@8 DD 00H			; RenderGMComposite::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2RenderGMComposite@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRenderGMComposite@@@8
_DATA	SEGMENT
??_R0?AVRenderGMComposite@@@8 DD FLAT:??_7type_info@@6B@ ; RenderGMComposite `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRenderGMComposite@@', 00H
_DATA	ENDS
;	COMDAT ??_R4RenderGMComposite@@6B@
rdata$r	SEGMENT
??_R4RenderGMComposite@@6B@ DD 00H			; RenderGMComposite::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVRenderGMComposite@@@8
	DD	FLAT:??_R3RenderGMComposite@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@RenderGMRadar@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@RenderGMRadar@@8 DD FLAT:??_R0?AVRenderGMRadar@@@8 ; RenderGMRadar::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3RenderGMRadar@@8
rdata$r	ENDS
;	COMDAT ??_R2RenderGMRadar@@8
rdata$r	SEGMENT
??_R2RenderGMRadar@@8 DD FLAT:??_R1A@?0A@EA@RenderGMRadar@@8 ; RenderGMRadar::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Render3D@@8
	DD	FLAT:??_R1A@?0A@EA@Render2D@@8
	DD	FLAT:??_R1A@?0A@EA@VirtualDisplay@@8
rdata$r	ENDS
;	COMDAT ??_R3RenderGMRadar@@8
rdata$r	SEGMENT
??_R3RenderGMRadar@@8 DD 00H				; RenderGMRadar::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2RenderGMRadar@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRenderGMRadar@@@8
_DATA	SEGMENT
??_R0?AVRenderGMRadar@@@8 DD FLAT:??_7type_info@@6B@	; RenderGMRadar `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRenderGMRadar@@', 00H
_DATA	ENDS
;	COMDAT ??_R4RenderGMRadar@@6B@
rdata$r	SEGMENT
??_R4RenderGMRadar@@6B@ DD 00H				; RenderGMRadar::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVRenderGMRadar@@@8
	DD	FLAT:??_R3RenderGMRadar@@8
rdata$r	ENDS
;	COMDAT ??_R4Render2D@@6B@
rdata$r	SEGMENT
??_R4Render2D@@6B@ DD 00H				; Render2D::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVRender2D@@@8
	DD	FLAT:??_R3Render2D@@8
rdata$r	ENDS
;	COMDAT ??_R4VirtualDisplay@@6B@
rdata$r	SEGMENT
??_R4VirtualDisplay@@6B@ DD 00H				; VirtualDisplay::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVVirtualDisplay@@@8
	DD	FLAT:??_R3VirtualDisplay@@8
rdata$r	ENDS
;	COMDAT ??_R2VirtualDisplay@@8
rdata$r	SEGMENT
??_R2VirtualDisplay@@8 DD FLAT:??_R1A@?0A@EA@VirtualDisplay@@8 ; VirtualDisplay::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3VirtualDisplay@@8
rdata$r	SEGMENT
??_R3VirtualDisplay@@8 DD 00H				; VirtualDisplay::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2VirtualDisplay@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVVirtualDisplay@@@8
_DATA	SEGMENT
??_R0?AVVirtualDisplay@@@8 DD FLAT:??_7type_info@@6B@	; VirtualDisplay `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVirtualDisplay@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@VirtualDisplay@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VirtualDisplay@@8 DD FLAT:??_R0?AVVirtualDisplay@@@8 ; VirtualDisplay::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3VirtualDisplay@@8
rdata$r	ENDS
;	COMDAT ??_R2Render2D@@8
rdata$r	SEGMENT
??_R2Render2D@@8 DD FLAT:??_R1A@?0A@EA@Render2D@@8	; Render2D::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@VirtualDisplay@@8
rdata$r	ENDS
;	COMDAT ??_R3Render2D@@8
rdata$r	SEGMENT
??_R3Render2D@@8 DD 00H					; Render2D::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Render2D@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRender2D@@@8
_DATA	SEGMENT
??_R0?AVRender2D@@@8 DD FLAT:??_7type_info@@6B@		; Render2D `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRender2D@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@Render2D@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Render2D@@8 DD FLAT:??_R0?AVRender2D@@@8	; Render2D::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Render2D@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Render3D@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Render3D@@8 DD FLAT:??_R0?AVRender3D@@@8	; Render3D::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Render3D@@8
rdata$r	ENDS
;	COMDAT ??_R2Render3D@@8
rdata$r	SEGMENT
??_R2Render3D@@8 DD FLAT:??_R1A@?0A@EA@Render3D@@8	; Render3D::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Render2D@@8
	DD	FLAT:??_R1A@?0A@EA@VirtualDisplay@@8
rdata$r	ENDS
;	COMDAT ??_R3Render3D@@8
rdata$r	SEGMENT
??_R3Render3D@@8 DD 00H					; Render3D::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2Render3D@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRender3D@@@8
_DATA	SEGMENT
??_R0?AVRender3D@@@8 DD FLAT:??_7type_info@@6B@		; Render3D `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRender3D@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Render3D@@6B@
rdata$r	SEGMENT
??_R4Render3D@@6B@ DD 00H				; Render3D::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVRender3D@@@8
	DD	FLAT:??_R3Render3D@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NDADKDPC@GM?5HDG?3?5?5?$CF0?40f?5deg?$AA@
CONST	SEGMENT
??_C@_0BD@NDADKDPC@GM?5HDG?3?5?5?$CF0?40f?5deg?$AA@ DB 'GM HDG:  %0.0f de'
	DB	'g', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OPKIDHHE@L?5ANGLE?3?5?$CF0?40f?5deg?$AA@
CONST	SEGMENT
??_C@_0BD@OPKIDHHE@L?5ANGLE?3?5?$CF0?40f?5deg?$AA@ DB 'L ANGLE: %0.0f deg'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?rcBlit@?M@??NewImage@RenderGMComposite@@IAEXPAUTpoint@@MH_N@Z@4UtagRECT@@A
_DATA	SEGMENT
?rcBlit@?M@??NewImage@RenderGMComposite@@IAEXPAUTpoint@@MH_N@Z@4UtagRECT@@A DD 00H ; `RenderGMComposite::NewImage'::`12'::rcBlit
	DD	00H
	DD	080H
	DD	080H
_DATA	ENDS
;	COMDAT ?rcBlit@?1??SetBeam@RenderGMComposite@@QAEXPAUTpoint@@00MMHMH_N@Z@4UtagRECT@@A
_DATA	SEGMENT
?rcBlit@?1??SetBeam@RenderGMComposite@@QAEXPAUTpoint@@00MMHMH_N@Z@4UtagRECT@@A DD 00H ; `RenderGMComposite::SetBeam'::`2'::rcBlit
	DD	00H
	DD	080H
	DD	080H
_DATA	ENDS
;	COMDAT ??_C@_0P@OJAOCNDF@GM?5Radar?5Noise?$AA@
CONST	SEGMENT
??_C@_0P@OJAOCNDF@GM?5Radar?5Noise?$AA@ DB 'GM Radar Noise', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LBCPACMH@GM?5Radar?5Right?$AA@
CONST	SEGMENT
??_C@_0P@LBCPACMH@GM?5Radar?5Right?$AA@ DB 'GM Radar Right', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BDAPHCP@GM?5Radar?5Left?$AA@
CONST	SEGMENT
??_C@_0O@BDAPHCP@GM?5Radar?5Left?$AA@ DB 'GM Radar Left', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7RenderGMComposite@@6B@
CONST	SEGMENT
??_7RenderGMComposite@@6B@ DD FLAT:??_R4RenderGMComposite@@6B@ ; RenderGMComposite::`vftable'
	DD	FLAT:??_ERenderGMComposite@@UAEPAXI@Z
	DD	FLAT:?Setup@VirtualDisplay@@UAEXXZ
	DD	FLAT:?Cleanup@RenderGMComposite@@UAEXXZ
	DD	FLAT:?StartDraw@Render2D@@UAEXXZ
	DD	FLAT:?ClearDraw@Render2D@@UAEXXZ
	DD	FLAT:?EndDraw@Render2D@@UAEXXZ
	DD	FLAT:?Point@VirtualDisplay@@UAEXMM@Z
	DD	FLAT:?Line@VirtualDisplay@@UAEXMMMMM@Z
	DD	FLAT:?Line@VirtualDisplay@@UAEXMMMM@Z
	DD	FLAT:?Tri@VirtualDisplay@@UAEXMMMMMM@Z
	DD	FLAT:?Oval@VirtualDisplay@@UAEXMMMM@Z
	DD	FLAT:?OvalArc@VirtualDisplay@@UAEXMMMMMM@Z
	DD	FLAT:?Circle@VirtualDisplay@@UAEXMMM@Z
	DD	FLAT:?Arc@VirtualDisplay@@UAEXMMMMM@Z
	DD	FLAT:?TextLeft@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextRight@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextLeftVertical@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextRightVertical@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextCenter@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextCenterVertical@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextWrap@VirtualDisplay@@UAEHMMPBDMM@Z
	DD	FLAT:?TextWidth@VirtualDisplay@@UAEMPAD@Z
	DD	FLAT:?TextHeight@VirtualDisplay@@UAEMXZ
	DD	FLAT:?SetColor@Render2D@@UAEXK@Z
	DD	FLAT:?SetBackground@Render2D@@UAEXK@Z
	DD	FLAT:?ScreenText@Render2D@@UAEXMMPBDH@Z
	DD	FLAT:?SetLineStyle@Render2D@@UAEXH@Z
	DD	FLAT:?Color@Render2D@@UAEKXZ
	DD	FLAT:?SetViewport@Render2D@@UAEXMMMM@Z
	DD	FLAT:?SetViewportRelative@VirtualDisplay@@UAEXMMMM@Z
	DD	FLAT:?Render2DPoint@Render2D@@UAEXMM@Z
	DD	FLAT:?Render2DLine@Render2D@@UAEXMMMM@Z
	DD	FLAT:?Render2DTri@Render2D@@UAEXMMMMMM@Z
	DD	FLAT:?Setup@Render2D@@UAEXPAVImageBuffer@@@Z
	DD	FLAT:?SetImageBuffer@Render2D@@UAEXPAVImageBuffer@@@Z
	DD	FLAT:?ClearZBuffer@Render2D@@UAEXXZ
	DD	FLAT:?Setup@RenderGMComposite@@UAEXPAVImageBuffer@@P6AXPAXPAVRenderGMRadar@@_N@Z1@Z
CONST	ENDS
;	COMDAT ??_7RenderGMRadar@@6B@
CONST	SEGMENT
??_7RenderGMRadar@@6B@ DD FLAT:??_R4RenderGMRadar@@6B@	; RenderGMRadar::`vftable'
	DD	FLAT:??_ERenderGMRadar@@UAEPAXI@Z
	DD	FLAT:?Setup@VirtualDisplay@@UAEXXZ
	DD	FLAT:?Cleanup@RenderGMRadar@@UAEXXZ
	DD	FLAT:?StartDraw@RenderGMRadar@@UAEXXZ
	DD	FLAT:?ClearDraw@Render2D@@UAEXXZ
	DD	FLAT:?EndDraw@Render2D@@UAEXXZ
	DD	FLAT:?Point@VirtualDisplay@@UAEXMM@Z
	DD	FLAT:?Line@VirtualDisplay@@UAEXMMMMM@Z
	DD	FLAT:?Line@VirtualDisplay@@UAEXMMMM@Z
	DD	FLAT:?Tri@VirtualDisplay@@UAEXMMMMMM@Z
	DD	FLAT:?Oval@VirtualDisplay@@UAEXMMMM@Z
	DD	FLAT:?OvalArc@VirtualDisplay@@UAEXMMMMMM@Z
	DD	FLAT:?Circle@VirtualDisplay@@UAEXMMM@Z
	DD	FLAT:?Arc@VirtualDisplay@@UAEXMMMMM@Z
	DD	FLAT:?TextLeft@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextRight@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextLeftVertical@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextRightVertical@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextCenter@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextCenterVertical@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextWrap@VirtualDisplay@@UAEHMMPBDMM@Z
	DD	FLAT:?TextWidth@VirtualDisplay@@UAEMPAD@Z
	DD	FLAT:?TextHeight@VirtualDisplay@@UAEMXZ
	DD	FLAT:?SetColor@Render2D@@UAEXK@Z
	DD	FLAT:?SetBackground@Render2D@@UAEXK@Z
	DD	FLAT:?ScreenText@Render2D@@UAEXMMPBDH@Z
	DD	FLAT:?SetLineStyle@Render2D@@UAEXH@Z
	DD	FLAT:?Color@Render2D@@UAEKXZ
	DD	FLAT:?SetViewport@RenderGMRadar@@UAEXMMMM@Z
	DD	FLAT:?SetViewportRelative@VirtualDisplay@@UAEXMMMM@Z
	DD	FLAT:?Render2DPoint@Render2D@@UAEXMM@Z
	DD	FLAT:?Render2DLine@Render2D@@UAEXMMMM@Z
	DD	FLAT:?Render2DTri@Render2D@@UAEXMMMMMM@Z
	DD	FLAT:?Setup@RenderGMRadar@@UAEXPAVImageBuffer@@@Z
	DD	FLAT:?SetImageBuffer@Render2D@@UAEXPAVImageBuffer@@@Z
	DD	FLAT:?ClearZBuffer@Render2D@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7Render3D@@6B@
CONST	SEGMENT
??_7Render3D@@6B@ DD FLAT:??_R4Render3D@@6B@		; Render3D::`vftable'
	DD	FLAT:??_ERender3D@@UAEPAXI@Z
	DD	FLAT:?Setup@VirtualDisplay@@UAEXXZ
	DD	FLAT:?Cleanup@Render3D@@UAEXXZ
	DD	FLAT:?StartDraw@Render3D@@UAEXXZ
	DD	FLAT:?ClearDraw@Render2D@@UAEXXZ
	DD	FLAT:?EndDraw@Render2D@@UAEXXZ
	DD	FLAT:?Point@VirtualDisplay@@UAEXMM@Z
	DD	FLAT:?Line@VirtualDisplay@@UAEXMMMMM@Z
	DD	FLAT:?Line@VirtualDisplay@@UAEXMMMM@Z
	DD	FLAT:?Tri@VirtualDisplay@@UAEXMMMMMM@Z
	DD	FLAT:?Oval@VirtualDisplay@@UAEXMMMM@Z
	DD	FLAT:?OvalArc@VirtualDisplay@@UAEXMMMMMM@Z
	DD	FLAT:?Circle@VirtualDisplay@@UAEXMMM@Z
	DD	FLAT:?Arc@VirtualDisplay@@UAEXMMMMM@Z
	DD	FLAT:?TextLeft@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextRight@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextLeftVertical@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextRightVertical@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextCenter@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextCenterVertical@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextWrap@VirtualDisplay@@UAEHMMPBDMM@Z
	DD	FLAT:?TextWidth@VirtualDisplay@@UAEMPAD@Z
	DD	FLAT:?TextHeight@VirtualDisplay@@UAEMXZ
	DD	FLAT:?SetColor@Render2D@@UAEXK@Z
	DD	FLAT:?SetBackground@Render2D@@UAEXK@Z
	DD	FLAT:?ScreenText@Render2D@@UAEXMMPBDH@Z
	DD	FLAT:?SetLineStyle@Render2D@@UAEXH@Z
	DD	FLAT:?Color@Render2D@@UAEKXZ
	DD	FLAT:?SetViewport@Render3D@@UAEXMMMM@Z
	DD	FLAT:?SetViewportRelative@VirtualDisplay@@UAEXMMMM@Z
	DD	FLAT:?Render2DPoint@Render2D@@UAEXMM@Z
	DD	FLAT:?Render2DLine@Render2D@@UAEXMMMM@Z
	DD	FLAT:?Render2DTri@Render2D@@UAEXMMMMMM@Z
	DD	FLAT:?Setup@Render3D@@UAEXPAVImageBuffer@@@Z
	DD	FLAT:?SetImageBuffer@Render2D@@UAEXPAVImageBuffer@@@Z
	DD	FLAT:?ClearZBuffer@Render2D@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7Render2D@@6B@
CONST	SEGMENT
??_7Render2D@@6B@ DD FLAT:??_R4Render2D@@6B@		; Render2D::`vftable'
	DD	FLAT:??_ERender2D@@UAEPAXI@Z
	DD	FLAT:?Setup@VirtualDisplay@@UAEXXZ
	DD	FLAT:?Cleanup@Render2D@@UAEXXZ
	DD	FLAT:?StartDraw@Render2D@@UAEXXZ
	DD	FLAT:?ClearDraw@Render2D@@UAEXXZ
	DD	FLAT:?EndDraw@Render2D@@UAEXXZ
	DD	FLAT:?Point@VirtualDisplay@@UAEXMM@Z
	DD	FLAT:?Line@VirtualDisplay@@UAEXMMMMM@Z
	DD	FLAT:?Line@VirtualDisplay@@UAEXMMMM@Z
	DD	FLAT:?Tri@VirtualDisplay@@UAEXMMMMMM@Z
	DD	FLAT:?Oval@VirtualDisplay@@UAEXMMMM@Z
	DD	FLAT:?OvalArc@VirtualDisplay@@UAEXMMMMMM@Z
	DD	FLAT:?Circle@VirtualDisplay@@UAEXMMM@Z
	DD	FLAT:?Arc@VirtualDisplay@@UAEXMMMMM@Z
	DD	FLAT:?TextLeft@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextRight@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextLeftVertical@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextRightVertical@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextCenter@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextCenterVertical@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextWrap@VirtualDisplay@@UAEHMMPBDMM@Z
	DD	FLAT:?TextWidth@VirtualDisplay@@UAEMPAD@Z
	DD	FLAT:?TextHeight@VirtualDisplay@@UAEMXZ
	DD	FLAT:?SetColor@Render2D@@UAEXK@Z
	DD	FLAT:?SetBackground@Render2D@@UAEXK@Z
	DD	FLAT:?ScreenText@Render2D@@UAEXMMPBDH@Z
	DD	FLAT:?SetLineStyle@Render2D@@UAEXH@Z
	DD	FLAT:?Color@Render2D@@UAEKXZ
	DD	FLAT:?SetViewport@Render2D@@UAEXMMMM@Z
	DD	FLAT:?SetViewportRelative@VirtualDisplay@@UAEXMMMM@Z
	DD	FLAT:?Render2DPoint@Render2D@@UAEXMM@Z
	DD	FLAT:?Render2DLine@Render2D@@UAEXMMMM@Z
	DD	FLAT:?Render2DTri@Render2D@@UAEXMMMMMM@Z
	DD	FLAT:?Setup@Render2D@@UAEXPAVImageBuffer@@@Z
	DD	FLAT:?SetImageBuffer@Render2D@@UAEXPAVImageBuffer@@@Z
	DD	FLAT:?ClearZBuffer@Render2D@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7VirtualDisplay@@6B@
CONST	SEGMENT
??_7VirtualDisplay@@6B@ DD FLAT:??_R4VirtualDisplay@@6B@ ; VirtualDisplay::`vftable'
	DD	FLAT:??_EVirtualDisplay@@UAEPAXI@Z
	DD	FLAT:?Setup@VirtualDisplay@@UAEXXZ
	DD	FLAT:?Cleanup@VirtualDisplay@@UAEXXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?Point@VirtualDisplay@@UAEXMM@Z
	DD	FLAT:?Line@VirtualDisplay@@UAEXMMMMM@Z
	DD	FLAT:?Line@VirtualDisplay@@UAEXMMMM@Z
	DD	FLAT:?Tri@VirtualDisplay@@UAEXMMMMMM@Z
	DD	FLAT:?Oval@VirtualDisplay@@UAEXMMMM@Z
	DD	FLAT:?OvalArc@VirtualDisplay@@UAEXMMMMMM@Z
	DD	FLAT:?Circle@VirtualDisplay@@UAEXMMM@Z
	DD	FLAT:?Arc@VirtualDisplay@@UAEXMMMMM@Z
	DD	FLAT:?TextLeft@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextRight@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextLeftVertical@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextRightVertical@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextCenter@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextCenterVertical@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextWrap@VirtualDisplay@@UAEHMMPBDMM@Z
	DD	FLAT:?TextWidth@VirtualDisplay@@UAEMPAD@Z
	DD	FLAT:?TextHeight@VirtualDisplay@@UAEMXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?SetLineStyle@VirtualDisplay@@UAEXH@Z
	DD	FLAT:?Color@VirtualDisplay@@UAEKXZ
	DD	FLAT:?SetViewport@VirtualDisplay@@UAEXMMMM@Z
	DD	FLAT:?SetViewportRelative@VirtualDisplay@@UAEXMMMM@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?Render2DTri@VirtualDisplay@@MAEXMMMMMM@Z
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1RenderGMComposite@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1RenderGMComposite@@UAE@XZ$0
__ehfuncinfo$??1RenderGMComposite@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1RenderGMComposite@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$??0RenderGMComposite@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0RenderGMComposite@@QAE@XZ$0
__ehfuncinfo$?Setup@RenderGMComposite@@UAEXPAVImageBuffer@@P6AXPAXPAVRenderGMRadar@@_N@Z1@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?Setup@RenderGMComposite@@UAEXPAVImageBuffer@@P6AXPAXPAVRenderGMRadar@@_N@Z1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0RenderGMComposite@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0RenderGMComposite@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Setup@RenderGMComposite@@UAEXPAVImageBuffer@@P6AXPAXPAVRenderGMRadar@@_N@Z1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Setup@RenderGMComposite@@UAEXPAVImageBuffer@@P6AXPAXPAVRenderGMRadar@@_N@Z1@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Setup@RenderGMComposite@@UAEXPAVImageBuffer@@P6AXPAXPAVRenderGMRadar@@_N@Z1@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Setup@RenderGMComposite@@UAEXPAVImageBuffer@@P6AXPAXPAVRenderGMRadar@@_N@Z1@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Setup@RenderGMComposite@@UAEXPAVImageBuffer@@P6AXPAXPAVRenderGMRadar@@_N@Z1@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Setup@RenderGMComposite@@UAEXPAVImageBuffer@@P6AXPAXPAVRenderGMRadar@@_N@Z1@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Setup@RenderGMComposite@@UAEXPAVImageBuffer@@P6AXPAXPAVRenderGMRadar@@_N@Z1@Z$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Setup@RenderGMComposite@@UAEXPAVImageBuffer@@P6AXPAXPAVRenderGMRadar@@_N@Z1@Z$6
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_GM_OVERSCAN_RNG$initializer$ DD FLAT:??__EGM_OVERSCAN_RNG@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_GM_OVERSCAN_H$initializer$ DD FLAT:??__EGM_OVERSCAN_H@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_GM_OVERSCAN_V$initializer$ DD FLAT:??__EGM_OVERSCAN_V@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_beam$initializer$ DD FLAT:??__Ebeam@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_leftLimit$initializer$ DD FLAT:??__EleftLimit@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_rightLimit$initializer$ DD FLAT:??__ErightLimit@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\gmcomposit.cpp
_TEXT	SEGMENT
_t$ = -40						; size = 4
_d2$ = -36						; size = 4
_startedOut$ = -32					; size = 4
_wasOut$ = -28						; size = 4
_amOut$ = -24						; size = 4
_i$ = -20						; size = 4
_d1$ = -16						; size = 4
_p$ = -12						; size = 4
_num$ = -8						; size = 4
_v$ = -4						; size = 4
_inArray$ = 8						; size = 4
_outArray$ = 12						; size = 4
_edge$ = 16						; size = 4
_inCount$ = 20						; size = 4
?ClipToEdge@@YAHPAPAUTwoDVertex@@0PAVEdge@@H@Z PROC	; ClipToEdge

; 676  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 677  : 	int				i;
; 678  : 	int				num;
; 679  : 	BOOL			amOut, wasOut, startedOut;
; 680  : 	float			d1, d2, t;
; 681  : 	TwoDVertex		*p;
; 682  : 	TwoDVertex		*v;
; 683  : 
; 684  : 
; 685  : 	// Stop now if we don't have enough verts to continue
; 686  : 	if (inCount < 3) {

	cmp	DWORD PTR _inCount$[ebp], 3
	jge	SHORT $LN7@ClipToEdge

; 687  : 		return 0;

	xor	eax, eax
	jmp	$LN8@ClipToEdge
$LN7@ClipToEdge:

; 688  : 	}
; 689  : 
; 690  : 	num = 0;

	mov	DWORD PTR _num$[ebp], 0

; 691  : 	v = inArray[0];

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _inArray$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _v$[ebp], edx

; 692  : 	
; 693  : 	// Check the first vert
; 694  : 	wasOut = startedOut = edge->RightOf( v->x, v->y );

	mov	eax, DWORD PTR _v$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _edge$[ebp]
	call	?RightOf@Edge@@QAEHMM@Z			; Edge::RightOf
	mov	DWORD PTR _startedOut$[ebp], eax
	mov	edx, DWORD PTR _startedOut$[ebp]
	mov	DWORD PTR _wasOut$[ebp], edx

; 695  : 	if ( !startedOut ) {

	cmp	DWORD PTR _startedOut$[ebp], 0
	jne	SHORT $LN6@ClipToEdge

; 696  : 		outArray[num] = v;

	mov	eax, DWORD PTR _num$[ebp]
	mov	ecx, DWORD PTR _outArray$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx

; 697  : 		num++;

	mov	eax, DWORD PTR _num$[ebp]
	add	eax, 1
	mov	DWORD PTR _num$[ebp], eax
$LN6@ClipToEdge:

; 698  : 	}
; 699  : 
; 700  : 	// Run through the interior verts
; 701  : 	i = 1;

	mov	DWORD PTR _i$[ebp], 1
$LN5@ClipToEdge:

; 702  : 	while ( i < inCount ) {

	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _inCount$[ebp]
	jge	$LN4@ClipToEdge

; 703  : 		p = v;

	mov	edx, DWORD PTR _v$[ebp]
	mov	DWORD PTR _p$[ebp], edx

; 704  : 		v = inArray[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _inArray$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _v$[ebp], edx

; 705  : 		i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 706  : 		
; 707  : 		amOut = edge->RightOf( v->x, v->y );

	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _v$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _edge$[ebp]
	call	?RightOf@Edge@@QAEHMM@Z			; Edge::RightOf
	mov	DWORD PTR _amOut$[ebp], eax

; 708  : 		if (amOut != wasOut) {

	mov	eax, DWORD PTR _amOut$[ebp]
	cmp	eax, DWORD PTR _wasOut$[ebp]
	je	$LN3@ClipToEdge

; 709  : 			// Compute the intesection
; 710  : 			d1 = edge->DistanceFrom( p->x, p->y );

	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _p$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _edge$[ebp]
	call	?DistanceFrom@Edge@@QAEMMM@Z		; Edge::DistanceFrom
	fstp	DWORD PTR _d1$[ebp]

; 711  : 			d2 = edge->DistanceFrom( v->x, v->y );

	mov	eax, DWORD PTR _v$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _edge$[ebp]
	call	?DistanceFrom@Edge@@QAEMMM@Z		; Edge::DistanceFrom
	fstp	DWORD PTR _d2$[ebp]

; 712  : 			t = d1 / (d1-d2);

	movss	xmm0, DWORD PTR _d1$[ebp]
	subss	xmm0, DWORD PTR _d2$[ebp]
	movss	xmm1, DWORD PTR _d1$[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _t$[ebp], xmm1

; 713  : 			Intersect( p, v, &c[NumCverts], t );

	push	ecx
	movss	xmm0, DWORD PTR _t$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _NumCverts
	imul	edx, 40					; 00000028H
	add	edx, OFFSET _c
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?Intersect@@YAXPAUTwoDVertex@@00M@Z	; Intersect
	add	esp, 16					; 00000010H

; 714  : 			outArray[num] = &c[NumCverts];

	mov	edx, DWORD PTR _NumCverts
	imul	edx, 40					; 00000028H
	add	edx, OFFSET _c
	mov	eax, DWORD PTR _num$[ebp]
	mov	ecx, DWORD PTR _outArray$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx

; 715  : 			num++;

	mov	edx, DWORD PTR _num$[ebp]
	add	edx, 1
	mov	DWORD PTR _num$[ebp], edx

; 716  : 			NumCverts++;

	mov	eax, DWORD PTR _NumCverts
	add	eax, 1
	mov	DWORD PTR _NumCverts, eax
$LN3@ClipToEdge:

; 717  : 		}
; 718  : 		if (!amOut) {

	cmp	DWORD PTR _amOut$[ebp], 0
	jne	SHORT $LN2@ClipToEdge

; 719  : 			outArray[num] = v;

	mov	ecx, DWORD PTR _num$[ebp]
	mov	edx, DWORD PTR _outArray$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 720  : 			num++;

	mov	ecx, DWORD PTR _num$[ebp]
	add	ecx, 1
	mov	DWORD PTR _num$[ebp], ecx
$LN2@ClipToEdge:

; 721  : 		}
; 722  : 		wasOut = amOut;

	mov	edx, DWORD PTR _amOut$[ebp]
	mov	DWORD PTR _wasOut$[ebp], edx

; 723  : 	}

	jmp	$LN5@ClipToEdge
$LN4@ClipToEdge:

; 724  : 
; 725  : 	// Finally, clip the edge between the first and last verts
; 726  : 	if ( wasOut != startedOut ) {

	mov	eax, DWORD PTR _wasOut$[ebp]
	cmp	eax, DWORD PTR _startedOut$[ebp]
	je	$LN1@ClipToEdge

; 727  : 		p = v;

	mov	ecx, DWORD PTR _v$[ebp]
	mov	DWORD PTR _p$[ebp], ecx

; 728  : 		v = inArray[0];

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _inArray$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _v$[ebp], ecx

; 729  : 
; 730  : 		// Compute the intesection
; 731  : 		d1 = edge->DistanceFrom( p->x, p->y );

	mov	edx, DWORD PTR _p$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _p$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _edge$[ebp]
	call	?DistanceFrom@Edge@@QAEMMM@Z		; Edge::DistanceFrom
	fstp	DWORD PTR _d1$[ebp]

; 732  : 		d2 = edge->DistanceFrom( v->x, v->y );

	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _v$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _edge$[ebp]
	call	?DistanceFrom@Edge@@QAEMMM@Z		; Edge::DistanceFrom
	fstp	DWORD PTR _d2$[ebp]

; 733  : 		t = d1 / (d1-d2);

	movss	xmm0, DWORD PTR _d1$[ebp]
	subss	xmm0, DWORD PTR _d2$[ebp]
	movss	xmm1, DWORD PTR _d1$[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _t$[ebp], xmm1

; 734  : 		Intersect( p, v, &c[NumCverts], t );

	push	ecx
	movss	xmm0, DWORD PTR _t$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _NumCverts
	imul	eax, 40					; 00000028H
	add	eax, OFFSET _c
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	?Intersect@@YAXPAUTwoDVertex@@00M@Z	; Intersect
	add	esp, 16					; 00000010H

; 735  : 		outArray[num] = &c[NumCverts];

	mov	eax, DWORD PTR _NumCverts
	imul	eax, 40					; 00000028H
	add	eax, OFFSET _c
	mov	ecx, DWORD PTR _num$[ebp]
	mov	edx, DWORD PTR _outArray$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 736  : 		num++;

	mov	eax, DWORD PTR _num$[ebp]
	add	eax, 1
	mov	DWORD PTR _num$[ebp], eax

; 737  : 		NumCverts++;

	mov	ecx, DWORD PTR _NumCverts
	add	ecx, 1
	mov	DWORD PTR _NumCverts, ecx
$LN1@ClipToEdge:

; 738  : 	}
; 739  : 
; 740  : 	ShiAssert( num <= MAX_VERTEX_LIST );
; 741  : 	ShiAssert( NumCverts <= MAX_CONSTRUCTION_VERTS );
; 742  : 
; 743  : 	return num;

	mov	eax, DWORD PTR _num$[ebp]
$LN8@ClipToEdge:

; 744  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ClipToEdge@@YAHPAPAUTwoDVertex@@0PAVEdge@@H@Z ENDP	; ClipToEdge
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\gmcomposit.cpp
_TEXT	SEGMENT
tv70 = -4						; size = 4
_input$ = 8						; size = 4
?Noise@@YAEH@Z PROC					; Noise

; 60   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 61   : //	return input;
; 62   : 
; 63   : 	random = random * 214013L + 2531011L;	// Stolen from C Runtime RAND() function

	mov	eax, DWORD PTR _random
	imul	eax, 214013				; 000343fdH
	add	eax, 2531011				; 00269ec3H
	mov	DWORD PTR _random, eax

; 64   : 
; 65   : 	input = input + ((random >> 16) & 0x3F);

	mov	ecx, DWORD PTR _random
	sar	ecx, 16					; 00000010H
	and	ecx, 63					; 0000003fH
	add	ecx, DWORD PTR _input$[ebp]
	mov	DWORD PTR _input$[ebp], ecx

; 66   : 
; 67   : 	// Gee, I sure whould like to get rid of this if...
; 68   : 	return (BYTE)min( input, 0xFF );

	cmp	DWORD PTR _input$[ebp], 255		; 000000ffH
	jge	SHORT $LN3@Noise
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN4@Noise
$LN3@Noise:
	mov	DWORD PTR tv70[ebp], 255		; 000000ffH
$LN4@Noise:
	mov	al, BYTE PTR tv70[ebp]

; 69   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Noise@@YAEH@Z ENDP					; Noise
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\gmcomposit.cpp
_TEXT	SEGMENT
_inArray$ = -32						; size = 28
_num$ = -4						; size = 4
?ClipToBeamAndLimits@@YAHXZ PROC			; ClipToBeamAndLimits

; 748  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 749  : 	int			num = 4;

	mov	DWORD PTR _num$[ebp], 4

; 750  : 	TwoDVertex	*inArray[MAX_VERTEX_LIST];
; 751  : 
; 752  : 	inArray[0] = &v0;

	mov	eax, 4
	imul	eax, 0
	mov	DWORD PTR _inArray$[ebp+eax], OFFSET _v0

; 753  : 	inArray[1] = &v1;

	mov	ecx, 4
	shl	ecx, 0
	mov	DWORD PTR _inArray$[ebp+ecx], OFFSET _v1

; 754  : 	inArray[2] = &v2;

	mov	edx, 4
	shl	edx, 1
	mov	DWORD PTR _inArray$[ebp+edx], OFFSET _v2

; 755  : 	inArray[3] = &v3;

	mov	eax, 4
	imul	eax, 3
	mov	DWORD PTR _inArray$[ebp+eax], OFFSET _v3

; 756  : 
; 757  : 	// Start with no construction verts in use
; 758  : 	NumCverts = 0;

	mov	DWORD PTR _NumCverts, 0

; 759  : 
; 760  : 	// Clip the incomming quad to the beam and gimbal limits
; 761  : 	num = ClipToEdge( inArray,   vertArray, &leftLimit,  num );

	mov	ecx, DWORD PTR _num$[ebp]
	push	ecx
	push	OFFSET _leftLimit
	push	OFFSET _vertArray
	lea	edx, DWORD PTR _inArray$[ebp]
	push	edx
	call	?ClipToEdge@@YAHPAPAUTwoDVertex@@0PAVEdge@@H@Z ; ClipToEdge
	add	esp, 16					; 00000010H
	mov	DWORD PTR _num$[ebp], eax

; 762  : 	num = ClipToEdge( vertArray, inArray,   &rightLimit, num );

	mov	eax, DWORD PTR _num$[ebp]
	push	eax
	push	OFFSET _rightLimit
	lea	ecx, DWORD PTR _inArray$[ebp]
	push	ecx
	push	OFFSET _vertArray
	call	?ClipToEdge@@YAHPAPAUTwoDVertex@@0PAVEdge@@H@Z ; ClipToEdge
	add	esp, 16					; 00000010H
	mov	DWORD PTR _num$[ebp], eax

; 763  : 	num = ClipToEdge( inArray,   vertArray, &beam,       num );

	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	push	OFFSET _beam
	push	OFFSET _vertArray
	lea	eax, DWORD PTR _inArray$[ebp]
	push	eax
	call	?ClipToEdge@@YAHPAPAUTwoDVertex@@0PAVEdge@@H@Z ; ClipToEdge
	add	esp, 16					; 00000010H
	mov	DWORD PTR _num$[ebp], eax

; 764  : 
; 765  : 	return num;

	mov	eax, DWORD PTR _num$[ebp]

; 766  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ClipToBeamAndLimits@@YAHXZ ENDP			; ClipToBeamAndLimits
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\gmcomposit.cpp
_TEXT	SEGMENT
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
_c$ = 16						; size = 4
_t$ = 20						; size = 4
?Intersect@@YAXPAUTwoDVertex@@00M@Z PROC		; Intersect

; 667  : {

	push	ebp
	mov	ebp, esp

; 668  : 	c->x = v1->x + t*(v2->x - v1->x);

	mov	eax, DWORD PTR _v2$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	addss	xmm0, DWORD PTR [edx]
	mov	eax, DWORD PTR _c$[ebp]
	movss	DWORD PTR [eax], xmm0

; 669  : 	c->y = v1->y + t*(v2->y - v1->y);

	mov	ecx, DWORD PTR _v2$[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR _v1$[ebp]
	addss	xmm0, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _c$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 670  : 	c->u = v1->u + t*(v2->u - v1->u);

	mov	edx, DWORD PTR _v2$[ebp]
	mov	eax, DWORD PTR _v1$[ebp]
	movss	xmm0, DWORD PTR [edx+24]
	subss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	addss	xmm0, DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _c$[ebp]
	movss	DWORD PTR [edx+24], xmm0

; 671  : 	c->v = v1->v + t*(v2->v - v1->v);

	mov	eax, DWORD PTR _v2$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	subss	xmm0, DWORD PTR [ecx+28]
	mulss	xmm0, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	addss	xmm0, DWORD PTR [edx+28]
	mov	eax, DWORD PTR _c$[ebp]
	movss	DWORD PTR [eax+28], xmm0

; 672  : }

	pop	ebp
	ret	0
?Intersect@@YAXPAUTwoDVertex@@00M@Z ENDP		; Intersect
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__FrightLimit@@YAXXZ
text$yd	SEGMENT
??__FrightLimit@@YAXXZ PROC				; `dynamic atexit destructor for 'rightLimit'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _rightLimit
	call	??1Edge@@QAE@XZ				; Edge::~Edge
	pop	ebp
	ret	0
??__FrightLimit@@YAXXZ ENDP				; `dynamic atexit destructor for 'rightLimit''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\gmcomposit.cpp
;	COMDAT ??__ErightLimit@@YAXXZ
text$yc	SEGMENT
??__ErightLimit@@YAXXZ PROC				; `dynamic initializer for 'rightLimit'', COMDAT

; 30   : static	Edge		rightLimit;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _rightLimit
	call	??0Edge@@QAE@XZ				; Edge::Edge
	push	OFFSET ??__FrightLimit@@YAXXZ		; `dynamic atexit destructor for 'rightLimit''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__ErightLimit@@YAXXZ ENDP				; `dynamic initializer for 'rightLimit''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__FleftLimit@@YAXXZ
text$yd	SEGMENT
??__FleftLimit@@YAXXZ PROC				; `dynamic atexit destructor for 'leftLimit'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _leftLimit
	call	??1Edge@@QAE@XZ				; Edge::~Edge
	pop	ebp
	ret	0
??__FleftLimit@@YAXXZ ENDP				; `dynamic atexit destructor for 'leftLimit''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\gmcomposit.cpp
;	COMDAT ??__EleftLimit@@YAXXZ
text$yc	SEGMENT
??__EleftLimit@@YAXXZ PROC				; `dynamic initializer for 'leftLimit'', COMDAT

; 29   : static	Edge		leftLimit;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _leftLimit
	call	??0Edge@@QAE@XZ				; Edge::Edge
	push	OFFSET ??__FleftLimit@@YAXXZ		; `dynamic atexit destructor for 'leftLimit''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__EleftLimit@@YAXXZ ENDP				; `dynamic initializer for 'leftLimit''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Fbeam@@YAXXZ
text$yd	SEGMENT
??__Fbeam@@YAXXZ PROC					; `dynamic atexit destructor for 'beam'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _beam
	call	??1Edge@@QAE@XZ				; Edge::~Edge
	pop	ebp
	ret	0
??__Fbeam@@YAXXZ ENDP					; `dynamic atexit destructor for 'beam''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\gmcomposit.cpp
;	COMDAT ??__Ebeam@@YAXXZ
text$yc	SEGMENT
??__Ebeam@@YAXXZ PROC					; `dynamic initializer for 'beam'', COMDAT

; 28   : static	Edge		beam;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _beam
	call	??0Edge@@QAE@XZ				; Edge::Edge
	push	OFFSET ??__Fbeam@@YAXXZ			; `dynamic atexit destructor for 'beam''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__Ebeam@@YAXXZ ENDP					; `dynamic initializer for 'beam''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\device.h
;	COMDAT ?IsHardware@DisplayDevice@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?IsHardware@DisplayDevice@@QAEHXZ PROC			; DisplayDevice::IsHardware, COMDAT
; _this$ = ecx

; 24   : 	BOOL			IsHardware( void )				{ ShiAssert(IsReady());  return m_DXCtx->m_eDeviceCategory > DXContext::D3DDeviceCategory_Software; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+60], 1
	jle	SHORT $LN3@IsHardware
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsHardware
$LN3@IsHardware:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsHardware:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsHardware@DisplayDevice@@QAEHXZ ENDP			; DisplayDevice::IsHardware
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GRenderGMComposite@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GRenderGMComposite@@UAEPAXI@Z PROC			; RenderGMComposite::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1RenderGMComposite@@UAE@XZ		; RenderGMComposite::~RenderGMComposite
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GRenderGMComposite@@UAEPAXI@Z ENDP			; RenderGMComposite::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\gmcomposit.cpp
_TEXT	SEGMENT
_hr$1 = -208						; size = 4
_hr$ = -204						; size = 4
_nRand$ = -200						; size = 4
_pSrcBuffer$ = -196					; size = 4
tv463 = -192						; size = 4
_fUStop$ = -188						; size = 4
tv447 = -184						; size = 4
_targetHandle$ = -180					; size = 4
_fUStart$ = -176					; size = 4
_Alpha$ = -172						; size = 4
_this$ = -168						; size = 4
_pVtx$ = -164						; size = 160
__$ArrayPad$ = -4					; size = 4
_at$ = 8						; size = 4
_platformHdg$ = 12					; size = 4
_replaceRight$ = 16					; size = 4
_Shaped$ = 20						; size = 1
?NewImage@RenderGMComposite@@IAEXPAUTpoint@@MH_N@Z PROC	; RenderGMComposite::NewImage
; _this$ = ecx

; 576  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 577  : 	TextureHandle *targetHandle;
; 578  : 	ShiAssert( lTexHandle );
; 579  : 	ShiAssert( rTexHandle );
; 580  : 
; 581  : //	nTexHandle->PreLoad();	// it will be used soon
; 582  : 
; 583  : 	// Change target textures each time we get called
; 584  : 	if(replaceRight)

	cmp	DWORD PTR _replaceRight$[ebp], 0
	je	SHORT $LN6@NewImage

; 585  : 	{
; 586  : 		rOriginX		= at->x * worldToUnitScale;	// Normalize for display range

	mov	eax, DWORD PTR _at$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+526080]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+526104], xmm0

; 587  : 		rOriginY		= at->y * worldToUnitScale;	// Normalize for display range

	mov	eax, DWORD PTR _at$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [ecx+526080]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+526108], xmm0

; 588  : 		rAngle			= platformHdg;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _platformHdg$[ebp]
	movss	DWORD PTR [eax+526112], xmm0

; 589  : 		targetHandle	= rTexHandle;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+526100]
	mov	DWORD PTR _targetHandle$[ebp], edx

; 590  : 	}
; 591  : 
; 592  : 	else

	jmp	SHORT $LN5@NewImage
$LN6@NewImage:

; 593  : 	{
; 594  : 		lOriginX		= at->x * worldToUnitScale;	// Normalize for display range

	mov	eax, DWORD PTR _at$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+526080]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+526088], xmm0

; 595  : 		lOriginY		= at->y * worldToUnitScale;	// Normalize for display range

	mov	eax, DWORD PTR _at$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [ecx+526080]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+526092], xmm0

; 596  : 		lAngle			= platformHdg;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _platformHdg$[ebp]
	movss	DWORD PTR [eax+526096], xmm0

; 597  : 		targetHandle	= lTexHandle;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+526084]
	mov	DWORD PTR _targetHandle$[ebp], edx
$LN5@NewImage:

; 598  : 	}
; 599  : 
; 600  : 	// Render Noise overlay
; 601  : 	if(!DisplayOptions.bRender2Texture)

	movzx	eax, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+12
	test	eax, eax
	jne	SHORT $LN4@NewImage

; 602  : 	{
; 603  : 		radar.context.UnlockViewport();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262952				; 00040328H
	call	?UnlockViewport@ContextMPR@@QAEXXZ	; ContextMPR::UnlockViewport

; 604  : 		radar.context.SetViewportAbs(0, 0, m_pRenderTarget->targetXres(), m_pRenderTarget->targetYres());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+262840]
	call	?targetYres@ImageBuffer@@QAEHXZ		; ImageBuffer::targetYres
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+262840]
	call	?targetXres@ImageBuffer@@QAEHXZ		; ImageBuffer::targetXres
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262952				; 00040328H
	call	?SetViewportAbs@ContextMPR@@QAEXHHHH@Z	; ContextMPR::SetViewportAbs
$LN4@NewImage:

; 605  : 	}
; 606  : 
; 607  : 	float	Alpha = 0.3f;

	movss	xmm0, DWORD PTR __real@3e99999a
	movss	DWORD PTR _Alpha$[ebp], xmm0

; 608  : 	if(Shaped) Alpha = 0.7f;

	movzx	eax, BYTE PTR _Shaped$[ebp]
	test	eax, eax
	je	SHORT $LN3@NewImage
	movss	xmm0, DWORD PTR __real@3f333333
	movss	DWORD PTR _Alpha$[ebp], xmm0
$LN3@NewImage:

; 609  : 
; 610  : 	radar.StartDraw();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262852]
	mov	edx, DWORD PTR [eax+12]
	call	edx

; 611  : 
; 612  : 	// calc random U
; 613  : 	int nRand = MulDiv(rand(), 128, RAND_MAX) - 1;

	push	32767					; 00007fffH
	push	128					; 00000080H
	call	_rand
	push	eax
	call	DWORD PTR __imp__MulDiv@12
	sub	eax, 1
	mov	DWORD PTR _nRand$[ebp], eax

; 614  : 	const float fUStart = nRand * (1.0f / (GM_TEXTURE_SIZE * 2));

	cvtsi2ss xmm0, DWORD PTR _nRand$[ebp]
	mulss	xmm0, DWORD PTR __real@3b800000
	movss	DWORD PTR _fUStart$[ebp], xmm0

; 615  : 	const float fUStop = fUStart + 0.5f;

	movss	xmm0, DWORD PTR _fUStart$[ebp]
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _fUStop$[ebp], xmm0

; 616  : 	ShiAssert(fUStop <= 1.0f);
; 617  : 
; 618  : 	// setup vertices
; 619  : 	TwoDVertex pVtx[4];
; 620  : 	ZeroMemory(pVtx, sizeof(pVtx));

	push	160					; 000000a0H
	push	0
	lea	eax, DWORD PTR _pVtx$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 621  : 	pVtx[0].x = 0.0f; pVtx[0].y = 0.0f; pVtx[0].u = fUStart; pVtx[0].v = 0.0f;

	mov	ecx, 40					; 00000028H
	imul	ecx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _pVtx$[ebp+ecx], xmm0
	mov	edx, 40					; 00000028H
	imul	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _pVtx$[ebp+edx+4], xmm0
	mov	eax, 40					; 00000028H
	imul	eax, 0
	movss	xmm0, DWORD PTR _fUStart$[ebp]
	movss	DWORD PTR _pVtx$[ebp+eax+24], xmm0
	mov	ecx, 40					; 00000028H
	imul	ecx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _pVtx$[ebp+ecx+28], xmm0

; 622  : 	pVtx[0].r = pVtx[0].g = pVtx[0].b = pVtx[0].a = Alpha;

	mov	edx, 40					; 00000028H
	imul	edx, 0
	movss	xmm0, DWORD PTR _Alpha$[ebp]
	movss	DWORD PTR _pVtx$[ebp+edx+20], xmm0
	mov	eax, 40					; 00000028H
	imul	eax, 0
	movss	xmm0, DWORD PTR _Alpha$[ebp]
	movss	DWORD PTR _pVtx$[ebp+eax+16], xmm0
	mov	ecx, 40					; 00000028H
	imul	ecx, 0
	movss	xmm0, DWORD PTR _Alpha$[ebp]
	movss	DWORD PTR _pVtx$[ebp+ecx+12], xmm0
	mov	edx, 40					; 00000028H
	imul	edx, 0
	movss	xmm0, DWORD PTR _Alpha$[ebp]
	movss	DWORD PTR _pVtx$[ebp+edx+8], xmm0

; 623  : 
; 624  : 	pVtx[1].x = GM_TEXTURE_SIZE; pVtx[1].y = 0.0f; pVtx[1].u = fUStop; pVtx[1].v = 0.0f;

	mov	eax, 40					; 00000028H
	shl	eax, 0
	movss	xmm0, DWORD PTR __real@43000000
	movss	DWORD PTR _pVtx$[ebp+eax], xmm0
	mov	ecx, 40					; 00000028H
	shl	ecx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _pVtx$[ebp+ecx+4], xmm0
	mov	edx, 40					; 00000028H
	shl	edx, 0
	movss	xmm0, DWORD PTR _fUStop$[ebp]
	movss	DWORD PTR _pVtx$[ebp+edx+24], xmm0
	mov	eax, 40					; 00000028H
	shl	eax, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _pVtx$[ebp+eax+28], xmm0

; 625  : 	pVtx[1].r = pVtx[1].g = pVtx[1].b = pVtx[1].a = Alpha;

	mov	ecx, 40					; 00000028H
	shl	ecx, 0
	movss	xmm0, DWORD PTR _Alpha$[ebp]
	movss	DWORD PTR _pVtx$[ebp+ecx+20], xmm0
	mov	edx, 40					; 00000028H
	shl	edx, 0
	movss	xmm0, DWORD PTR _Alpha$[ebp]
	movss	DWORD PTR _pVtx$[ebp+edx+16], xmm0
	mov	eax, 40					; 00000028H
	shl	eax, 0
	movss	xmm0, DWORD PTR _Alpha$[ebp]
	movss	DWORD PTR _pVtx$[ebp+eax+12], xmm0
	mov	ecx, 40					; 00000028H
	shl	ecx, 0
	movss	xmm0, DWORD PTR _Alpha$[ebp]
	movss	DWORD PTR _pVtx$[ebp+ecx+8], xmm0

; 626  : 
; 627  : 	pVtx[2].x = GM_TEXTURE_SIZE; pVtx[2].y = GM_TEXTURE_SIZE; pVtx[2].u = fUStop; pVtx[2].v = 1.0f;

	mov	edx, 40					; 00000028H
	shl	edx, 1
	movss	xmm0, DWORD PTR __real@43000000
	movss	DWORD PTR _pVtx$[ebp+edx], xmm0
	mov	eax, 40					; 00000028H
	shl	eax, 1
	movss	xmm0, DWORD PTR __real@43000000
	movss	DWORD PTR _pVtx$[ebp+eax+4], xmm0
	mov	ecx, 40					; 00000028H
	shl	ecx, 1
	movss	xmm0, DWORD PTR _fUStop$[ebp]
	movss	DWORD PTR _pVtx$[ebp+ecx+24], xmm0
	mov	edx, 40					; 00000028H
	shl	edx, 1
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$[ebp+edx+28], xmm0

; 628  : 	pVtx[2].r = pVtx[2].g = pVtx[2].b = pVtx[2].a = Alpha;

	mov	eax, 40					; 00000028H
	shl	eax, 1
	movss	xmm0, DWORD PTR _Alpha$[ebp]
	movss	DWORD PTR _pVtx$[ebp+eax+20], xmm0
	mov	ecx, 40					; 00000028H
	shl	ecx, 1
	movss	xmm0, DWORD PTR _Alpha$[ebp]
	movss	DWORD PTR _pVtx$[ebp+ecx+16], xmm0
	mov	edx, 40					; 00000028H
	shl	edx, 1
	movss	xmm0, DWORD PTR _Alpha$[ebp]
	movss	DWORD PTR _pVtx$[ebp+edx+12], xmm0
	mov	eax, 40					; 00000028H
	shl	eax, 1
	movss	xmm0, DWORD PTR _Alpha$[ebp]
	movss	DWORD PTR _pVtx$[ebp+eax+8], xmm0

; 629  : 
; 630  : 	pVtx[3].x = 0.0f; pVtx[3].y = GM_TEXTURE_SIZE; pVtx[3].u = fUStart; pVtx[3].v = 1.0f;

	mov	ecx, 40					; 00000028H
	imul	ecx, 3
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _pVtx$[ebp+ecx], xmm0
	mov	edx, 40					; 00000028H
	imul	edx, 3
	movss	xmm0, DWORD PTR __real@43000000
	movss	DWORD PTR _pVtx$[ebp+edx+4], xmm0
	mov	eax, 40					; 00000028H
	imul	eax, 3
	movss	xmm0, DWORD PTR _fUStart$[ebp]
	movss	DWORD PTR _pVtx$[ebp+eax+24], xmm0
	mov	ecx, 40					; 00000028H
	imul	ecx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$[ebp+ecx+28], xmm0

; 631  : 	pVtx[3].r = pVtx[3].g = pVtx[3].b = pVtx[3].a = Alpha;

	mov	edx, 40					; 00000028H
	imul	edx, 3
	movss	xmm0, DWORD PTR _Alpha$[ebp]
	movss	DWORD PTR _pVtx$[ebp+edx+20], xmm0
	mov	eax, 40					; 00000028H
	imul	eax, 3
	movss	xmm0, DWORD PTR _Alpha$[ebp]
	movss	DWORD PTR _pVtx$[ebp+eax+16], xmm0
	mov	ecx, 40					; 00000028H
	imul	ecx, 3
	movss	xmm0, DWORD PTR _Alpha$[ebp]
	movss	DWORD PTR _pVtx$[ebp+ecx+12], xmm0
	mov	edx, 40					; 00000028H
	imul	edx, 3
	movss	xmm0, DWORD PTR _Alpha$[ebp]
	movss	DWORD PTR _pVtx$[ebp+edx+8], xmm0

; 632  : 
; 633  : 	// and action
; 634  : 	radar.context.RestoreState(STATE_ALPHA_TEXTURE); //JAM 18Oct03

	push	26					; 0000001aH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262952				; 00040328H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 635  : 	radar.context.SetState(MPR_STA_DST_BLEND_FUNCTION, MPR_BF_ONE);

	push	2
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262952				; 00040328H
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 636  : 	//MI TEST
; 637  : 	radar.context.SelectTexture1((GLint) nTexHandle);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+526132]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262952				; 00040328H
	call	?SelectTexture1@ContextMPR@@QAEXH@Z	; ContextMPR::SelectTexture1

; 638  : 	radar.context.DrawPrimitive(MPR_PRM_TRIFAN, MPR_VI_COLOR | MPR_VI_TEXTURE, 4, pVtx, sizeof(pVtx[0]));

	push	40					; 00000028H
	lea	edx, DWORD PTR _pVtx$[ebp]
	push	edx
	push	4
	push	6
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262952				; 00040328H
	call	?DrawPrimitive@ContextMPR@@QAEXHGGPAUMPRVtxTexClr_t@@G@Z ; ContextMPR::DrawPrimitive

; 639  : 	//	radar.context.InvalidateState();
; 640  : 
; 641  : 	radar.EndDraw();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+262852]
	mov	eax, DWORD PTR [edx+20]
	call	eax

; 642  : 
; 643  : 	static RECT rcBlit = { 0, 0, GM_TEXTURE_SIZE, GM_TEXTURE_SIZE };
; 644  : 
; 645  : 	if(!DisplayOptions.bRender2Texture)

	movzx	ecx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+12
	test	ecx, ecx
	jne	SHORT $LN2@NewImage

; 646  : 	{
; 647  : 		// Save image
; 648  : 		HRESULT hr = m_pRenderBuffer->targetSurface()->Blt(&rcBlit, m_pRenderTarget->targetSurface(), &rcBlit, DDBLT_WAIT, NULL);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+262848]
	call	?targetSurface@ImageBuffer@@QAEPAUIDirectDrawSurface7@@XZ ; ImageBuffer::targetSurface
	mov	DWORD PTR tv447[ebp], eax
	push	0
	push	16777216				; 01000000H
	push	OFFSET ?rcBlit@?M@??NewImage@RenderGMComposite@@IAEXPAUTpoint@@MH_N@Z@4UtagRECT@@A
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262840]
	call	?targetSurface@ImageBuffer@@QAEPAUIDirectDrawSurface7@@XZ ; ImageBuffer::targetSurface
	push	eax
	push	OFFSET ?rcBlit@?M@??NewImage@RenderGMComposite@@IAEXPAUTpoint@@MH_N@Z@4UtagRECT@@A
	mov	ecx, DWORD PTR tv447[ebp]
	push	ecx
	mov	edx, DWORD PTR tv447[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	mov	DWORD PTR _hr$1[ebp], eax
$LN2@NewImage:

; 649  : 		ShiAssert(SUCCEEDED(hr));
; 650  : 	}
; 651  : 
; 652  : 	// Now blit the final viewport image to the texture
; 653  : 	ImageBuffer *pSrcBuffer = DisplayOptions.bRender2Texture ? m_pRenderTarget : m_pRenderBuffer;

	movzx	edx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+12
	test	edx, edx
	je	SHORT $LN9@NewImage
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262840]
	mov	DWORD PTR tv463[ebp], ecx
	jmp	SHORT $LN10@NewImage
$LN9@NewImage:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262848]
	mov	DWORD PTR tv463[ebp], eax
$LN10@NewImage:
	mov	ecx, DWORD PTR tv463[ebp]
	mov	DWORD PTR _pSrcBuffer$[ebp], ecx

; 654  : 	HRESULT hr = targetHandle->m_pDDS->Blt(NULL, pSrcBuffer->targetSurface(), NULL, DDBLT_WAIT, NULL);

	push	0
	push	16777216				; 01000000H
	push	0
	mov	ecx, DWORD PTR _pSrcBuffer$[ebp]
	call	?targetSurface@ImageBuffer@@QAEPAUIDirectDrawSurface7@@XZ ; ImageBuffer::targetSurface
	push	eax
	push	0
	mov	edx, DWORD PTR _targetHandle$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _targetHandle$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	mov	DWORD PTR _hr$[ebp], eax

; 655  : 	ShiAssert(SUCCEEDED(hr));
; 656  : 
; 657  : 	if(!DisplayOptions.bRender2Texture)

	movzx	edx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+12
	test	edx, edx
	jne	SHORT $LN1@NewImage

; 658  : 	{
; 659  : 		radar.context.SetViewportAbs(0, 0, GM_TEXTURE_SIZE, GM_TEXTURE_SIZE);

	push	128					; 00000080H
	push	128					; 00000080H
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262952				; 00040328H
	call	?SetViewportAbs@ContextMPR@@QAEXHHHH@Z	; ContextMPR::SetViewportAbs

; 660  : 		radar.context.LockViewport();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262952				; 00040328H
	call	?LockViewport@ContextMPR@@QAEXXZ	; ContextMPR::LockViewport
$LN1@NewImage:

; 661  : 	}
; 662  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?NewImage@RenderGMComposite@@IAEXPAUTpoint@@MH_N@Z ENDP	; RenderGMComposite::NewImage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\gmcomposit.cpp
_TEXT	SEGMENT
_operation$ = -40					; size = 4
tv155 = -36						; size = 4
_dx$ = -32						; size = 4
_dy$ = -28						; size = 4
_bRender$ = -21						; size = 1
_this$ = -20						; size = 4
_center$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_from$ = 8						; size = 4
_at$ = 12						; size = 4
_platformHdg$ = 16					; size = 4
_beamPercent$ = 20					; size = 4
_movingRight$ = 24					; size = 4
_Shaped$ = 28						; size = 1
?BackgroundGeneration@RenderGMComposite@@IAE_NPAUTpoint@@0MHH_N@Z PROC ; RenderGMComposite::BackgroundGeneration
; _this$ = ecx

; 479  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 480  : 	OpName	operation;
; 481  : 	float	dx, dy;
; 482  : 	Tpoint	center;
; 483  : 
; 484  : 	ShiAssert( prevBeamPercent <= 101 );
; 485  : 	ShiAssert( beamPercent <= 101 );
; 486  : 
; 487  : 	//MI CTD
; 488  : 	if(nextOperation == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+526136], 0
	jne	SHORT $LN16@Background

; 489  : 		return FALSE;

	xor	al, al
	jmp	$LN17@Background
$LN16@Background:

; 490  : 	
; 491  : 	// Detect the beam reversal at the end of a sweep or a sweep restart
; 492  : 	if ((prevBeamRight != movingRight) /*|| (beamPercent < prevBeamPercent)*/ || DrawChanged) {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+526120]
	cmp	edx, DWORD PTR _movingRight$[ebp]
	jne	SHORT $LN14@Background
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+526128], 0
	je	$LN15@Background
$LN14@Background:

; 493  : 		//BackgroundGeneration( from, at, platformHdg, 101, prevBeamRight, Shaped );
; 494  : 		dx = (float)cos(radar.GetHdg());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	call	?GetHdg@RenderGMRadar@@QAEMXZ		; RenderGMRadar::GetHdg
	push	ecx
	fstp	DWORD PTR [esp]
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _dx$[ebp]

; 495  : 		dy = (float)sin(radar.GetHdg());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	call	?GetHdg@RenderGMRadar@@QAEMXZ		; RenderGMRadar::GetHdg
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _dy$[ebp]

; 496  : 		center.x = radar.GetAt()->x - dx*GM_OVERSCAN*range;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	call	?GetAt@RenderGMRadar@@QAEPAUTpoint@@XZ	; RenderGMRadar::GetAt
	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _GM_OVERSCAN
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+526076]
	movss	xmm1, DWORD PTR [eax]
	subss	xmm1, xmm0
	movss	DWORD PTR _center$[ebp], xmm1

; 497  : 		center.y = radar.GetAt()->y - dy*GM_OVERSCAN*range;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	call	?GetAt@RenderGMRadar@@QAEPAUTpoint@@XZ	; RenderGMRadar::GetAt
	movss	xmm0, DWORD PTR _dy$[ebp]
	mulss	xmm0, DWORD PTR _GM_OVERSCAN
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+526076]
	movss	xmm1, DWORD PTR [eax+4]
	subss	xmm1, xmm0
	movss	DWORD PTR _center$[ebp+4], xmm1

; 498  : 		center.z = radar.GetAt()->z;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	call	?GetAt@RenderGMRadar@@QAEPAUTpoint@@XZ	; RenderGMRadar::GetAt
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _center$[ebp+8], xmm0

; 499  : 		NewImage( &center, radar.GetHdg(), movingRight, Shaped );

	movzx	eax, BYTE PTR _Shaped$[ebp]
	push	eax
	mov	ecx, DWORD PTR _movingRight$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	call	?GetHdg@RenderGMRadar@@QAEMXZ		; RenderGMRadar::GetHdg
	push	ecx
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR _center$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NewImage@RenderGMComposite@@IAEXPAUTpoint@@MH_N@Z ; RenderGMComposite::NewImage

; 500  : 		prevBeamRight = movingRight;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _movingRight$[ebp]
	mov	DWORD PTR [eax+526120], ecx

; 501  : 		nextOperation = &OperationList[0];

	mov	edx, 8
	imul	edx, 0
	add	edx, OFFSET _OperationList
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+526136], edx

; 502  : 		DrawChanged = false;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+526128], 0
$LN15@Background:

; 503  : 	}
; 504  : 
; 505  : 	prevBeamPercent = beamPercent;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _beamPercent$[ebp]
	mov	DWORD PTR [edx+526116], eax

; 506  : 	bool bRender = false;

	mov	BYTE PTR _bRender$[ebp], 0
$LN13@Background:

; 507  : 
; 508  : 	// Do all necessary processing
; 509  : 	while (beamPercent >= nextOperation->percent)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+526136]
	mov	eax, DWORD PTR _beamPercent$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jl	$LN12@Background

; 510  : 	{
; 511  : 		operation = nextOperation->operation;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+526136]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _operation$[ebp], eax

; 512  : 		nextOperation++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+526136]
	add	edx, 8
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+526136], edx

; 513  : 		bRender = true;

	mov	BYTE PTR _bRender$[ebp], 1

; 514  : 
; 515  : 		switch( operation ) {

	mov	ecx, DWORD PTR _operation$[ebp]
	mov	DWORD PTR tv155[ebp], ecx
	cmp	DWORD PTR tv155[ebp], 6
	ja	$LN1@Background
	mov	edx, DWORD PTR tv155[ebp]
	jmp	DWORD PTR $LN19@Background[edx*4]
$LN9@Background:

; 516  : 
; 517  : 		  case Start:
; 518  : 			radar.StartDraw();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+262852]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 519  : 			dx = (float)cos(platformHdg);

	push	ecx
	movss	xmm0, DWORD PTR _platformHdg$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _dx$[ebp]

; 520  : 			dy = (float)sin(platformHdg);

	push	ecx
	movss	xmm0, DWORD PTR _platformHdg$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _dy$[ebp]

; 521  : 			center.x = at->x + dx*GM_OVERSCAN*range;

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _GM_OVERSCAN
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+526076]
	mov	edx, DWORD PTR _at$[ebp]
	addss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR _center$[ebp], xmm0

; 522  : 			center.y = at->y + dy*GM_OVERSCAN*range;

	movss	xmm0, DWORD PTR _dy$[ebp]
	mulss	xmm0, DWORD PTR _GM_OVERSCAN
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+526076]
	mov	ecx, DWORD PTR _at$[ebp]
	addss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR _center$[ebp+4], xmm0

; 523  : 			center.z = at->z;

	mov	edx, DWORD PTR _at$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR _center$[ebp+8], xmm0

; 524  : 			radar.StartScene( from, &center, platformHdg );

	push	ecx
	movss	xmm0, DWORD PTR _platformHdg$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _center$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	call	?StartScene@RenderGMRadar@@QAEXPAUTpoint@@0M@Z ; RenderGMRadar::StartScene

; 525  : 			radar.EndDraw();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262852]
	mov	edx, DWORD PTR [eax+20]
	call	edx

; 526  : 			break;

	jmp	$LN10@Background
$LN8@Background:

; 527  : 
; 528  : 		  case Xform:
; 529  : 			radar.StartDraw();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+262852]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 530  : 			radar.TransformScene();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	call	?TransformScene@RenderGMRadar@@QAEXXZ	; RenderGMRadar::TransformScene

; 531  : 			radar.EndDraw();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262852]
	mov	edx, DWORD PTR [eax+20]
	call	edx

; 532  : 			break;

	jmp	$LN10@Background
$LN7@Background:

; 533  : 
; 534  : 		  case Ground:
; 535  : 			radar.StartDraw();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+262852]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 536  : 			radar.DrawScene();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	call	?DrawScene@RenderGMRadar@@QAEXXZ	; RenderGMRadar::DrawScene

; 537  : 			radar.EndDraw();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262852]
	mov	edx, DWORD PTR [eax+20]
	call	edx

; 538  : 			break;

	jmp	$LN10@Background
$LN6@Background:

; 539  : 
; 540  : 		  case Features:
; 541  : 			if(!Shaped) break;

	movzx	eax, BYTE PTR _Shaped$[ebp]
	test	eax, eax
	jne	SHORT $LN5@Background
	jmp	$LN10@Background
$LN5@Background:

; 542  : 			radar.StartDraw();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262852]
	mov	edx, DWORD PTR [eax+12]
	call	edx

; 543  : 			radar.DrawFeatures();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	call	?DrawFeatures@RenderGMRadar@@QAEXXZ	; RenderGMRadar::DrawFeatures

; 544  : 			radar.EndDraw();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+262852]
	mov	eax, DWORD PTR [edx+20]
	call	eax

; 545  : 			break;

	jmp	$LN10@Background
$LN4@Background:

; 546  : 
; 547  : 		  case Targets:
; 548  : 			radar.StartDraw();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262852]
	mov	edx, DWORD PTR [eax+12]
	call	edx

; 549  : 			radar.PrepareToDrawTargets();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	call	?PrepareToDrawTargets@RenderGMRadar@@QAEXXZ ; RenderGMRadar::PrepareToDrawTargets

; 550  : 			tgtDrawCB( tgtDrawCBparam, &radar, Shaped );

	movzx	eax, BYTE PTR _Shaped$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+526072]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+526068]
	call	edx
	add	esp, 12					; 0000000cH

; 551  : 			radar.FlushDrawnTargets();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	call	?FlushDrawnTargets@RenderGMRadar@@QAEXXZ ; RenderGMRadar::FlushDrawnTargets

; 552  : 			radar.EndDraw();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+262852]
	mov	eax, DWORD PTR [edx+20]
	call	eax

; 553  : 			break;

	jmp	SHORT $LN10@Background
$LN3@Background:

; 554  : 
; 555  : 		  case Finish:
; 556  : 			radar.StartDraw();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262852]
	mov	edx, DWORD PTR [eax+12]
	call	edx

; 557  : 			radar.FinishScene();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	call	?FinishScene@RenderGMRadar@@QAEXXZ	; RenderGMRadar::FinishScene

; 558  : 			radar.EndDraw();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+262852]
	mov	eax, DWORD PTR [edx+20]
	call	eax

; 559  : 			break;

	jmp	SHORT $LN10@Background
$LN2@Background:

; 560  : 
; 561  : 		  case Replace:
; 562  : 			beamPercent = 0;

	mov	DWORD PTR _beamPercent$[ebp], 0
$LN1@Background:
$LN10@Background:

; 563  : 			break;
; 564  : 
; 565  : 		  default:
; 566  : 			ShiWarning( "Bad GM Radar generation sequence" );
; 567  : 			break;
; 568  : 		}
; 569  : 
; 570  : 	}

	jmp	$LN13@Background
$LN12@Background:

; 571  : 
; 572  : 	return bRender;

	mov	al, BYTE PTR _bRender$[ebp]
$LN17@Background:

; 573  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
$LN19@Background:
	DD	$LN9@Background
	DD	$LN8@Background
	DD	$LN7@Background
	DD	$LN6@Background
	DD	$LN4@Background
	DD	$LN3@Background
	DD	$LN2@Background
?BackgroundGeneration@RenderGMComposite@@IAE_NPAUTpoint@@0MHH_N@Z ENDP ; RenderGMComposite::BackgroundGeneration
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\gmcomposit.cpp
_TEXT	SEGMENT
_this$ = -40						; size = 4
_srcRect$ = -36						; size = 16
_dstRect$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_target$ = 8						; size = 4
?DebugDrawRadarImage@RenderGMComposite@@QAEXPAVImageBuffer@@@Z PROC ; RenderGMComposite::DebugDrawRadarImage
; _this$ = ecx

; 802  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 803  : 	RECT	srcRect;
; 804  : 	RECT	dstRect;
; 805  : 
; 806  : 	srcRect.top		= 0;

	mov	DWORD PTR _srcRect$[ebp+4], 0

; 807  : 	srcRect.left	= 0;

	mov	DWORD PTR _srcRect$[ebp], 0

; 808  : 	srcRect.bottom	= GM_TEXTURE_SIZE;

	mov	DWORD PTR _srcRect$[ebp+12], 128	; 00000080H

; 809  : 	srcRect.right	= GM_TEXTURE_SIZE;

	mov	DWORD PTR _srcRect$[ebp+8], 128		; 00000080H

; 810  : 
; 811  : 	dstRect.top		= 0;

	mov	DWORD PTR _dstRect$[ebp+4], 0

; 812  : 	dstRect.left	= GM_TEXTURE_SIZE+2;

	mov	DWORD PTR _dstRect$[ebp], 130		; 00000082H

; 813  : 	dstRect.bottom	= dstRect.top+GM_TEXTURE_SIZE;

	mov	eax, DWORD PTR _dstRect$[ebp+4]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _dstRect$[ebp+12], eax

; 814  : 	dstRect.right	= dstRect.left+GM_TEXTURE_SIZE;

	mov	ecx, DWORD PTR _dstRect$[ebp]
	add	ecx, 128				; 00000080H
	mov	DWORD PTR _dstRect$[ebp+8], ecx

; 815  : 
; 816  : 	target->Compose( m_pRenderTarget, &srcRect, &dstRect );

	lea	edx, DWORD PTR _dstRect$[ebp]
	push	edx
	lea	eax, DWORD PTR _srcRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262840]
	push	edx
	mov	ecx, DWORD PTR _target$[ebp]
	call	?Compose@ImageBuffer@@QAEXPAV1@PAUtagRECT@@1@Z ; ImageBuffer::Compose

; 817  : 
; 818  : 	v0.b = 0.0f;	v0.g = 0.0f;	v0.r = 1.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v0+16, xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v0+12, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v0+8, xmm0

; 819  : 	v1.b = 0.0f;	v1.g = 1.0f;	v1.r = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1+16, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v1+12, xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1+8, xmm0

; 820  : 	v2.b = 1.0f;	v2.g = 0.0f;	v2.r = 0.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v2+16, xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v2+12, xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v2+8, xmm0

; 821  : 	v3.b = 0.0f;	v3.g = 1.0f;	v3.r = 1.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v3+16, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v3+12, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v3+8, xmm0

; 822  : 	c[0].b = 1.0f;	c[0].g = 1.0f;	c[0].r = 1.0f;

	mov	eax, 40					; 00000028H
	imul	eax, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _c[eax+16], xmm0
	mov	ecx, 40					; 00000028H
	imul	ecx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _c[ecx+12], xmm0
	mov	edx, 40					; 00000028H
	imul	edx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _c[edx+8], xmm0

; 823  : 	c[1].b = 1.0f;	c[1].g = 1.0f;	c[1].r = 1.0f;

	mov	eax, 40					; 00000028H
	shl	eax, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _c[eax+16], xmm0
	mov	ecx, 40					; 00000028H
	shl	ecx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _c[ecx+12], xmm0
	mov	edx, 40					; 00000028H
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _c[edx+8], xmm0

; 824  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?DebugDrawRadarImage@RenderGMComposite@@QAEXPAVImageBuffer@@@Z ENDP ; RenderGMComposite::DebugDrawRadarImage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\gmcomposit.cpp
_TEXT	SEGMENT
tv358 = -96						; size = 4
_this$ = -92						; size = 4
_num$ = -88						; size = 4
_string$ = -84						; size = 80
__$ArrayPad$ = -4					; size = 4
_renderer$ = 8						; size = 4
?DebugDrawLeftTexture@RenderGMComposite@@QAEXPAVRender2D@@@Z PROC ; RenderGMComposite::DebugDrawLeftTexture
; _this$ = ecx

; 770  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 771  : 	char	string[80];
; 772  : 	int		num = 0;

	mov	DWORD PTR _num$[ebp], 0

; 773  : 
; 774  : 	ShiAssert( lTexHandle );
; 775  : 
; 776  : 
; 777  : 	renderer->context.RestoreState( STATE_TEXTURE );

	push	3
	mov	ecx, DWORD PTR _renderer$[ebp]
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 778  : 	renderer->context.SelectTexture1( (UInt) lTexHandle );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+526084]
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	add	ecx, 100				; 00000064H
	call	?SelectTexture1@ContextMPR@@QAEXH@Z	; ContextMPR::SelectTexture1

; 779  : 
; 780  : 	v0.x = 1.0f;			v0.y = 1.0f;				v0.u = 0.0f;	v0.v = 0.0f;	// UL

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v0, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v0+4, xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v0+24, xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v0+28, xmm0

; 781  : 	v1.x = GM_TEXTURE_SIZE;	v1.y = 1.0f;				v1.u = 1.0f;	v1.v = 0.0f;	// UR

	movss	xmm0, DWORD PTR __real@43000000
	movss	DWORD PTR _v1, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v1+4, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v1+24, xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1+28, xmm0

; 782  : 	v2.x = GM_TEXTURE_SIZE;	v2.y = GM_TEXTURE_SIZE;		v2.u = 1.0f;	v2.v = 1.0f;	// BR

	movss	xmm0, DWORD PTR __real@43000000
	movss	DWORD PTR _v2, xmm0
	movss	xmm0, DWORD PTR __real@43000000
	movss	DWORD PTR _v2+4, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v2+24, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v2+28, xmm0

; 783  : 	v3.x = 1.0f;			v3.y = GM_TEXTURE_SIZE;		v3.u = 0.0f;	v3.v = 1.0f;	// BL

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v3, xmm0
	movss	xmm0, DWORD PTR __real@43000000
	movss	DWORD PTR _v3+4, xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v3+24, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v3+28, xmm0

; 784  : 
; 785  : 	vertArray[num++] = &v0;	SetClipFlags( &v0 );

	mov	edx, DWORD PTR _num$[ebp]
	mov	DWORD PTR _vertArray[edx*4], OFFSET _v0
	mov	eax, DWORD PTR _num$[ebp]
	add	eax, 1
	mov	DWORD PTR _num$[ebp], eax
	push	OFFSET _v0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetClipFlags@Render2D@@QAEXPAUTwoDVertex@@@Z ; Render2D::SetClipFlags

; 786  : 	vertArray[num++] = &v1;	SetClipFlags( &v1 );

	mov	ecx, DWORD PTR _num$[ebp]
	mov	DWORD PTR _vertArray[ecx*4], OFFSET _v1
	mov	edx, DWORD PTR _num$[ebp]
	add	edx, 1
	mov	DWORD PTR _num$[ebp], edx
	push	OFFSET _v1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetClipFlags@Render2D@@QAEXPAUTwoDVertex@@@Z ; Render2D::SetClipFlags

; 787  : 	vertArray[num++] = &v2;	SetClipFlags( &v2 );

	mov	eax, DWORD PTR _num$[ebp]
	mov	DWORD PTR _vertArray[eax*4], OFFSET _v2
	mov	ecx, DWORD PTR _num$[ebp]
	add	ecx, 1
	mov	DWORD PTR _num$[ebp], ecx
	push	OFFSET _v2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetClipFlags@Render2D@@QAEXPAUTwoDVertex@@@Z ; Render2D::SetClipFlags

; 788  : 	vertArray[num++] = &v3;	SetClipFlags( &v3 );

	mov	edx, DWORD PTR _num$[ebp]
	mov	DWORD PTR _vertArray[edx*4], OFFSET _v3
	mov	eax, DWORD PTR _num$[ebp]
	add	eax, 1
	mov	DWORD PTR _num$[ebp], eax
	push	OFFSET _v3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetClipFlags@Render2D@@QAEXPAUTwoDVertex@@@Z ; Render2D::SetClipFlags

; 789  : 
; 790  : 	renderer->ClipAndDraw2DFan( vertArray, num );

	push	0
	mov	ecx, DWORD PTR _num$[ebp]
	push	ecx
	push	OFFSET _vertArray
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?ClipAndDraw2DFan@Render2D@@QAEXPAPAUTwoDVertex@@I_N@Z ; Render2D::ClipAndDraw2DFan

; 791  : 
; 792  : 	renderer->SetColor( 0x00000000 );

	push	0
	mov	edx, DWORD PTR _renderer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _renderer$[ebp]
	mov	edx, DWORD PTR [eax+92]
	call	edx

; 793  : 
; 794  : 	sprintf( string, "L ANGLE: %0.0f deg", lAngle * 180.0f / PI );

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+526096]
	mulss	xmm0, DWORD PTR __real@43340000
	divss	xmm0, DWORD PTR __real@40490fdb
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BD@OPKIDHHE@L?5ANGLE?3?5?$CF0?40f?5deg?$AA@
	lea	ecx, DWORD PTR _string$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 795  : 	renderer->ScreenText( 2.0f, 10.0f, string );

	push	0
	lea	edx, DWORD PTR _string$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _renderer$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _renderer$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 796  : 	sprintf( string, "GM HDG:  %0.0f deg", radar.GetHdg() * 180.0f / PI );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	call	?GetHdg@RenderGMRadar@@QAEMXZ		; RenderGMRadar::GetHdg
	fstp	DWORD PTR tv358[ebp]
	movss	xmm0, DWORD PTR tv358[ebp]
	mulss	xmm0, DWORD PTR __real@43340000
	divss	xmm0, DWORD PTR __real@40490fdb
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BD@NDADKDPC@GM?5HDG?3?5?5?$CF0?40f?5deg?$AA@
	lea	ecx, DWORD PTR _string$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 797  : 	renderer->ScreenText( 2.0f, 18.0f, string );

	push	0
	lea	edx, DWORD PTR _string$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR __real@41900000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _renderer$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _renderer$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 798  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?DebugDrawLeftTexture@RenderGMComposite@@QAEXPAVRender2D@@@Z ENDP ; RenderGMComposite::DebugDrawLeftTexture
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\gmcomposit.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newRange$ = 8						; size = 4
_newLOD$ = 12						; size = 4
?SetRange@RenderGMComposite@@QAEXMH@Z PROC		; RenderGMComposite::SetRange
; _this$ = ecx

; 453  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 454  : 	ShiAssert( lTexHandle );
; 455  : 	ShiAssert( rTexHandle );
; 456  : 
; 457  : 	// Update our child class
; 458  : 	if (!radar.SetRange( newRange * GM_OVERSCAN_RNG, newLOD )) {

	mov	eax, DWORD PTR _newLOD$[ebp]
	push	eax
	movss	xmm0, DWORD PTR _newRange$[ebp]
	mulss	xmm0, DWORD PTR _GM_OVERSCAN_RNG
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	call	?SetRange@RenderGMRadar@@QAEHMH@Z	; RenderGMRadar::SetRange
	test	eax, eax
	jne	SHORT $LN1@SetRange

; 459  : 		// If it required no changes, stop here
; 460  : 		return;

	jmp	SHORT $LN2@SetRange
$LN1@SetRange:

; 461  : 	}
; 462  : 
; 463  : 	// Store our scale factor
; 464  : 	range				= newRange;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _newRange$[ebp]
	movss	DWORD PTR [ecx+526076], xmm0

; 465  : 	worldToUnitScale	= 1.0f / newRange;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _newRange$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+526080], xmm0

; 466  : 
; 467  : 	// We need to force a full cycle of the GMRadar redraw loop
; 468  : 	// to generate the first sweeps data all at once.
; 469  : 	nextOperation = &OperationList[0];

	mov	eax, 8
	imul	eax, 0
	add	eax, OFFSET _OperationList
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+526136], eax

; 470  : 	prevBeamRight = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+526120], 0

; 471  : 	prevBeamPercent = 101;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+526116], 101		; 00000065H

; 472  : 	DrawChanged = true;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+526128], 1

; 473  : 
; 474  : 	rTexHandle->Clear();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+526100]
	call	?Clear@TextureHandle@@QAEXXZ		; TextureHandle::Clear
$LN2@SetRange:

; 475  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetRange@RenderGMComposite@@QAEXMH@Z ENDP		; RenderGMComposite::SetRange
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\gmcomposit.cpp
_TEXT	SEGMENT
_Py$ = -44						; size = 4
_Px$ = -40						; size = 4
_num$ = -36						; size = 4
_dy$ = -32						; size = 4
_dx$ = -28						; size = 4
_i$ = -24						; size = 4
_cosRot$ = -20						; size = 4
_sinRot$ = -16						; size = 4
_x$ = -12						; size = 4
_y$ = -8						; size = 4
_this$ = -4						; size = 4
_center$ = 8						; size = 4
_platformHdg$ = 12					; size = 4
?DrawComposite@RenderGMComposite@@QAEXPAUTpoint@@M@Z PROC ; RenderGMComposite::DrawComposite
; _this$ = ecx

; 330  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 331  : 	float		Px, Py, x, y, dx, dy;
; 332  : 	float		sinRot, cosRot;
; 333  : 	int			num = 0;

	mov	DWORD PTR _num$[ebp], 0

; 334  : 	int			i;
; 335  : 
; 336  : 	ShiAssert( rTexHandle );
; 337  : 	ShiAssert( lTexHandle );
; 338  : 
; 339  : 	if(!DisplayOptions.bRender2Texture)

	movzx	eax, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+12
	test	eax, eax
	jne	SHORT $LN10@DrawCompos

; 340  : 	{
; 341  : 		radar.context.UnlockViewport();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262952				; 00040328H
	call	?UnlockViewport@ContextMPR@@QAEXXZ	; ContextMPR::UnlockViewport

; 342  : 		radar.context.SetViewportAbs(0, 0, m_pRenderTarget->targetXres(), m_pRenderTarget->targetYres());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+262840]
	call	?targetYres@ImageBuffer@@QAEHXZ		; ImageBuffer::targetYres
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+262840]
	call	?targetXres@ImageBuffer@@QAEHXZ		; ImageBuffer::targetXres
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262952				; 00040328H
	call	?SetViewportAbs@ContextMPR@@QAEXHHHH@Z	; ContextMPR::SetViewportAbs
$LN10@DrawCompos:

; 343  : 	}
; 344  : 
; 345  : 	// Normalize the current center of attention position for display range
; 346  : 	Px	= center->x * worldToUnitScale;

	mov	eax, DWORD PTR _center$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+526080]
	movss	DWORD PTR _Px$[ebp], xmm0

; 347  : 	Py	= center->y * worldToUnitScale;

	mov	edx, DWORD PTR _center$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR [eax+526080]
	movss	DWORD PTR _Py$[ebp], xmm0

; 348  : 
; 349  : 	// Determine translation and rotation parameters for the right side
; 350  : 	dx = rOriginX - Px;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+526104]
	subss	xmm0, DWORD PTR _Px$[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 351  : 	dy = rOriginY - Py;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+526108]
	subss	xmm0, DWORD PTR _Py$[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 352  : 	sinRot = (float)sin(rAngle);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+526112]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _sinRot$[ebp]

; 353  : 	cosRot = (float)cos(rAngle);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+526112]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _cosRot$[ebp]

; 354  : 
; 355  : 	// Set up a normalized quad for the right patch in X north, Y east
; 356  : 	// We're translating and rotating to account for drift since the texture
; 357  : 	// was rendererd.
; 358  : 	x = -1.0f;						y = -GM_OVERSCAN_H;

	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _x$[ebp], xmm0
	movss	xmm0, DWORD PTR _GM_OVERSCAN_H
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _y$[ebp], xmm0

; 359  : 	v0.x = x*cosRot-y*sinRot+dx;	v0.y = x*sinRot+y*cosRot+dy;	v0.u = 0.0f;	v0.v = 1.0f;	// Lower left

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _cosRot$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _sinRot$[ebp]
	subss	xmm0, xmm1
	addss	xmm0, DWORD PTR _dx$[ebp]
	movss	DWORD PTR _v0, xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _sinRot$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _cosRot$[ebp]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR _v0+4, xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v0+24, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v0+28, xmm0

; 360  : 
; 361  : 	x = -1.0f;						y =  GM_OVERSCAN_H;

	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _x$[ebp], xmm0
	movss	xmm0, DWORD PTR _GM_OVERSCAN_H
	movss	DWORD PTR _y$[ebp], xmm0

; 362  : 	v1.x = x*cosRot-y*sinRot+dx;	v1.y = x*sinRot+y*cosRot+dy;	v1.u = 1.0f;	v1.v = 1.0f;	// Lower right

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _cosRot$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _sinRot$[ebp]
	subss	xmm0, xmm1
	addss	xmm0, DWORD PTR _dx$[ebp]
	movss	DWORD PTR _v1, xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _sinRot$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _cosRot$[ebp]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR _v1+4, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v1+24, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v1+28, xmm0

; 363  : 
; 364  : 	x =  GM_OVERSCAN_V;				y =  GM_OVERSCAN_H;

	movss	xmm0, DWORD PTR _GM_OVERSCAN_V
	movss	DWORD PTR _x$[ebp], xmm0
	movss	xmm0, DWORD PTR _GM_OVERSCAN_H
	movss	DWORD PTR _y$[ebp], xmm0

; 365  : 	v2.x = x*cosRot-y*sinRot+dx;	v2.y = x*sinRot+y*cosRot+dy;	v2.u = 1.0f;	v2.v = 0.0f;	// Upper right

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _cosRot$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _sinRot$[ebp]
	subss	xmm0, xmm1
	addss	xmm0, DWORD PTR _dx$[ebp]
	movss	DWORD PTR _v2, xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _sinRot$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _cosRot$[ebp]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR _v2+4, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v2+24, xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v2+28, xmm0

; 366  : 
; 367  : 	x =  GM_OVERSCAN_V;				y = -GM_OVERSCAN_H;

	movss	xmm0, DWORD PTR _GM_OVERSCAN_V
	movss	DWORD PTR _x$[ebp], xmm0
	movss	xmm0, DWORD PTR _GM_OVERSCAN_H
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _y$[ebp], xmm0

; 368  : 	v3.x = x*cosRot-y*sinRot+dx;	v3.y = x*sinRot+y*cosRot+dy;	v3.u = 0.0f;	v3.v = 0.0f;	// Upper left

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _cosRot$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _sinRot$[ebp]
	subss	xmm0, xmm1
	addss	xmm0, DWORD PTR _dx$[ebp]
	movss	DWORD PTR _v3, xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _sinRot$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _cosRot$[ebp]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR _v3+4, xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v3+24, xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v3+28, xmm0

; 369  : 
; 370  : 	num = ClipToBeamAndLimits();

	call	?ClipToBeamAndLimits@@YAHXZ		; ClipToBeamAndLimits
	mov	DWORD PTR _num$[ebp], eax

; 371  : 
; 372  : 	// Draw the polygon if it isn't totally clipped
; 373  : 	if (num >= 3) {

	cmp	DWORD PTR _num$[ebp], 3
	jl	$LN9@DrawCompos

; 374  : 		sinRot = (float)sin(-platformHdg);

	movss	xmm0, DWORD PTR _platformHdg$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _sinRot$[ebp]

; 375  : 		cosRot = (float)cos(-platformHdg);

	movss	xmm0, DWORD PTR _platformHdg$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _cosRot$[ebp]

; 376  : 
; 377  : 		for (i=0; i<num; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@DrawCompos
$LN7@DrawCompos:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN8@DrawCompos:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _num$[ebp]
	jge	$LN6@DrawCompos

; 378  : 			// Rotate for platform heading
; 379  : 			x = vertArray[i]->x*cosRot - vertArray[i]->y*sinRot;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _vertArray[ecx*4]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR _cosRot$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _vertArray[eax*4]
	movss	xmm1, DWORD PTR [ecx+4]
	mulss	xmm1, DWORD PTR _sinRot$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _x$[ebp], xmm0

; 380  : 			y = vertArray[i]->x*sinRot + vertArray[i]->y*cosRot;

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _vertArray[edx*4]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _sinRot$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _vertArray[ecx*4]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR _cosRot$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _y$[ebp], xmm0

; 381  : 
; 382  : 			// Scale to pixel space
; 383  : 			vertArray[i]->x = viewportXtoPixel(y);

	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?viewportXtoPixel@VirtualDisplay@@QAEMM@Z ; VirtualDisplay::viewportXtoPixel
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _vertArray[eax*4]
	fstp	DWORD PTR [ecx]

; 384  : 			vertArray[i]->y = viewportYtoPixel(-x);

	movss	xmm0, DWORD PTR _x$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?viewportYtoPixel@VirtualDisplay@@QAEMM@Z ; VirtualDisplay::viewportYtoPixel
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _vertArray[edx*4]
	fstp	DWORD PTR [eax+4]

; 385  : 			SetClipFlags( vertArray[i] );

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _vertArray[ecx*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetClipFlags@Render2D@@QAEXPAUTwoDVertex@@@Z ; Render2D::SetClipFlags

; 386  : 		}

	jmp	$LN7@DrawCompos
$LN6@DrawCompos:

; 387  : 
; 388  : 		context.RestoreState( STATE_TEXTURE );

	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 389  : 		context.SelectTexture1( (UInt) rTexHandle );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+526100]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?SelectTexture1@ContextMPR@@QAEXH@Z	; ContextMPR::SelectTexture1

; 390  : 		ClipAndDraw2DFan( vertArray, num );

	push	0
	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	push	OFFSET _vertArray
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClipAndDraw2DFan@Render2D@@QAEXPAPAUTwoDVertex@@I_N@Z ; Render2D::ClipAndDraw2DFan
$LN9@DrawCompos:

; 391  : 	}
; 392  : 
; 393  : 
; 394  : 	// Reverse the direction of the beam edge to keep the clipping code consistent
; 395  : 	beam.Reverse();

	mov	ecx, OFFSET _beam
	call	?Reverse@Edge@@QAEXXZ			; Edge::Reverse

; 396  : 
; 397  : 	// Determine translation and rotation parameters for the left side
; 398  : 	dx = lOriginX - Px;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+526088]
	subss	xmm0, DWORD PTR _Px$[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 399  : 	dy = lOriginY - Py;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+526092]
	subss	xmm0, DWORD PTR _Py$[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 400  : 	sinRot = (float)sin(lAngle);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+526096]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _sinRot$[ebp]

; 401  : 	cosRot = (float)cos(lAngle);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+526096]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _cosRot$[ebp]

; 402  : 
; 403  : 	// Set up a normalized quad for the left patch in X north, Y east
; 404  : 	// We're translating and rotating to account for drift since the texture
; 405  : 	// was rendererd.
; 406  : 	x = -1.0f;						y = -GM_OVERSCAN_H;

	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _x$[ebp], xmm0
	movss	xmm0, DWORD PTR _GM_OVERSCAN_H
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _y$[ebp], xmm0

; 407  : 	v0.x = x*cosRot-y*sinRot+dx;	v0.y = x*sinRot+y*cosRot+dy;	v0.u = 0.0f;	v0.v = 1.0f;	// Lower left

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _cosRot$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _sinRot$[ebp]
	subss	xmm0, xmm1
	addss	xmm0, DWORD PTR _dx$[ebp]
	movss	DWORD PTR _v0, xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _sinRot$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _cosRot$[ebp]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR _v0+4, xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v0+24, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v0+28, xmm0

; 408  : 
; 409  : 	x = -1.0f;						y =  GM_OVERSCAN_H;

	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _x$[ebp], xmm0
	movss	xmm0, DWORD PTR _GM_OVERSCAN_H
	movss	DWORD PTR _y$[ebp], xmm0

; 410  : 	v1.x = x*cosRot-y*sinRot+dx;	v1.y = x*sinRot+y*cosRot+dy;	v1.u = 1.0f;	v1.v = 1.0f;	// Lower right

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _cosRot$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _sinRot$[ebp]
	subss	xmm0, xmm1
	addss	xmm0, DWORD PTR _dx$[ebp]
	movss	DWORD PTR _v1, xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _sinRot$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _cosRot$[ebp]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR _v1+4, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v1+24, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v1+28, xmm0

; 411  : 
; 412  : 	x =  GM_OVERSCAN_V;				y =  GM_OVERSCAN_H;

	movss	xmm0, DWORD PTR _GM_OVERSCAN_V
	movss	DWORD PTR _x$[ebp], xmm0
	movss	xmm0, DWORD PTR _GM_OVERSCAN_H
	movss	DWORD PTR _y$[ebp], xmm0

; 413  : 	v2.x = x*cosRot-y*sinRot+dx;	v2.y = x*sinRot+y*cosRot+dy;	v2.u = 1.0f;	v2.v = 0.0f;	// Upper right

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _cosRot$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _sinRot$[ebp]
	subss	xmm0, xmm1
	addss	xmm0, DWORD PTR _dx$[ebp]
	movss	DWORD PTR _v2, xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _sinRot$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _cosRot$[ebp]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR _v2+4, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v2+24, xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v2+28, xmm0

; 414  : 
; 415  : 	x =  GM_OVERSCAN_V;				y = -GM_OVERSCAN_H;

	movss	xmm0, DWORD PTR _GM_OVERSCAN_V
	movss	DWORD PTR _x$[ebp], xmm0
	movss	xmm0, DWORD PTR _GM_OVERSCAN_H
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _y$[ebp], xmm0

; 416  : 	v3.x = x*cosRot-y*sinRot+dx;	v3.y = x*sinRot+y*cosRot+dy;	v3.u = 0.0f;	v3.v = 0.0f;	// Upper left

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _cosRot$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _sinRot$[ebp]
	subss	xmm0, xmm1
	addss	xmm0, DWORD PTR _dx$[ebp]
	movss	DWORD PTR _v3, xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _sinRot$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _cosRot$[ebp]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR _v3+4, xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v3+24, xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v3+28, xmm0

; 417  : 
; 418  : 	num = ClipToBeamAndLimits();

	call	?ClipToBeamAndLimits@@YAHXZ		; ClipToBeamAndLimits
	mov	DWORD PTR _num$[ebp], eax

; 419  : 
; 420  : 	// Draw the polygon if it isn't totally clipped
; 421  : 	if (num >= 3) {

	cmp	DWORD PTR _num$[ebp], 3
	jl	$LN5@DrawCompos

; 422  : 		sinRot = (float)sin(-platformHdg);

	movss	xmm0, DWORD PTR _platformHdg$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _sinRot$[ebp]

; 423  : 		cosRot = (float)cos(-platformHdg);

	movss	xmm0, DWORD PTR _platformHdg$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _cosRot$[ebp]

; 424  : 
; 425  : 		for (i=0; i<num; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@DrawCompos
$LN3@DrawCompos:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@DrawCompos:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _num$[ebp]
	jge	$LN2@DrawCompos

; 426  : 			// Rotate for platform heading
; 427  : 			x = vertArray[i]->x*cosRot - vertArray[i]->y*sinRot;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _vertArray[eax*4]
	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR _cosRot$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _vertArray[edx*4]
	movss	xmm1, DWORD PTR [eax+4]
	mulss	xmm1, DWORD PTR _sinRot$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _x$[ebp], xmm0

; 428  : 			y = vertArray[i]->x*sinRot + vertArray[i]->y*cosRot;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _vertArray[ecx*4]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR _sinRot$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _vertArray[eax*4]
	movss	xmm1, DWORD PTR [ecx+4]
	mulss	xmm1, DWORD PTR _cosRot$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _y$[ebp], xmm0

; 429  : 
; 430  : 			// Scale to pixel space
; 431  : 			vertArray[i]->x = viewportXtoPixel(y);

	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?viewportXtoPixel@VirtualDisplay@@QAEMM@Z ; VirtualDisplay::viewportXtoPixel
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _vertArray[edx*4]
	fstp	DWORD PTR [eax]

; 432  : 			vertArray[i]->y = viewportYtoPixel(-x);

	movss	xmm0, DWORD PTR _x$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?viewportYtoPixel@VirtualDisplay@@QAEMM@Z ; VirtualDisplay::viewportYtoPixel
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _vertArray[ecx*4]
	fstp	DWORD PTR [edx+4]

; 433  : 			SetClipFlags( vertArray[i] );

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _vertArray[eax*4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetClipFlags@Render2D@@QAEXPAUTwoDVertex@@@Z ; Render2D::SetClipFlags

; 434  : 		}

	jmp	$LN3@DrawCompos
$LN2@DrawCompos:

; 435  : 
; 436  : 		context.RestoreState( STATE_TEXTURE );

	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 437  : 		context.SelectTexture1( (UInt) lTexHandle );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+526084]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?SelectTexture1@ContextMPR@@QAEXH@Z	; ContextMPR::SelectTexture1

; 438  : 		ClipAndDraw2DFan( vertArray, num );

	push	0
	mov	ecx, DWORD PTR _num$[ebp]
	push	ecx
	push	OFFSET _vertArray
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClipAndDraw2DFan@Render2D@@QAEXPAPAUTwoDVertex@@I_N@Z ; Render2D::ClipAndDraw2DFan
$LN5@DrawCompos:

; 439  : 	}
; 440  : 
; 441  : 	// Put the beam back the way it was in case we need it again next time
; 442  : 	beam.Reverse();

	mov	ecx, OFFSET _beam
	call	?Reverse@Edge@@QAEXXZ			; Edge::Reverse

; 443  : 
; 444  : 	if(!DisplayOptions.bRender2Texture)

	movzx	edx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+12
	test	edx, edx
	jne	SHORT $LN1@DrawCompos

; 445  : 	{
; 446  : 		radar.context.UnlockViewport();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262952				; 00040328H
	call	?UnlockViewport@ContextMPR@@QAEXXZ	; ContextMPR::UnlockViewport
$LN1@DrawCompos:

; 447  : 	}
; 448  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?DrawComposite@RenderGMComposite@@QAEXPAUTpoint@@M@Z ENDP ; RenderGMComposite::DrawComposite
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\gmcomposit.cpp
_TEXT	SEGMENT
_hr$1 = -60						; size = 4
_hr$2 = -56						; size = 4
tv323 = -52						; size = 4
tv317 = -48						; size = 4
tv226 = -44						; size = 4
tv210 = -40						; size = 4
tv166 = -36						; size = 4
tv150 = -32						; size = 4
_Px$ = -28						; size = 4
_Py$ = -24						; size = 4
_dx$ = -20						; size = 4
_dy$ = -16						; size = 4
_hdg$ = -12						; size = 4
_this$ = -8						; size = 4
_bRender$ = -1						; size = 1
_from$ = 8						; size = 4
_at$ = 12						; size = 4
_center$ = 16						; size = 4
_platformHdg$ = 20					; size = 4
_beamAngle$ = 24					; size = 4
_beamPercent$ = 28					; size = 4
_cursorAngle$ = 32					; size = 4
_movingRight$ = 36					; size = 4
_Shaped$ = 40						; size = 1
?SetBeam@RenderGMComposite@@QAEXPAUTpoint@@00MMHMH_N@Z PROC ; RenderGMComposite::SetBeam
; _this$ = ecx

; 259  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	DWORD PTR _this$[ebp], ecx

; 260  : 	float		Px, Py;
; 261  : 	float		dx, dy;
; 262  : 	float		hdg;
; 263  : 
; 264  : 	ShiAssert( rTexHandle );
; 265  : 	ShiAssert( lTexHandle );
; 266  : 
; 267  : 	// Convert our location to use as the origion of the radar beam
; 268  : 	Px	= (from->x - center->x) * worldToUnitScale;		// Normalize for display range

	mov	eax, DWORD PTR _from$[ebp]
	mov	ecx, DWORD PTR _center$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+526080]
	movss	DWORD PTR _Px$[ebp], xmm0

; 269  : 	Py	= (from->y - center->y) * worldToUnitScale;		// Normalize for display range

	mov	eax, DWORD PTR _from$[ebp]
	mov	ecx, DWORD PTR _center$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+526080]
	movss	DWORD PTR _Py$[ebp], xmm0

; 270  : 
; 271  : 	// Set up the edge with separates the old and new parts of the sweep
; 272  : 	hdg = platformHdg + beamAngle;

	movss	xmm0, DWORD PTR _platformHdg$[ebp]
	addss	xmm0, DWORD PTR _beamAngle$[ebp]
	movss	DWORD PTR _hdg$[ebp], xmm0

; 273  : 	dx = (float)cos(hdg);

	push	ecx
	movss	xmm0, DWORD PTR _hdg$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _dx$[ebp]

; 274  : 	dy = (float)sin(hdg);

	push	ecx
	movss	xmm0, DWORD PTR _hdg$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _dy$[ebp]

; 275  : 	beam.SetupWithVector( Px, Py, dx, dy );

	push	ecx
	movss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _dx$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _Py$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _Px$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET _beam
	call	?SetupWithVector@Edge@@QAEXMMMM@Z	; Edge::SetupWithVector

; 276  : 
; 277  : 	// Set up the left gimbal limit edge
; 278  : 	hdg = platformHdg - gimbalLimit + cursorAngle; // 2002-04-03 MN add in current cursor position angle for azimuth limitations

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _platformHdg$[ebp]
	subss	xmm0, DWORD PTR [eax+526124]
	addss	xmm0, DWORD PTR _cursorAngle$[ebp]
	movss	DWORD PTR _hdg$[ebp], xmm0

; 279  : 	dx = (float)cos(hdg);

	push	ecx
	movss	xmm0, DWORD PTR _hdg$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _dx$[ebp]

; 280  : 	dy = (float)sin(hdg);

	push	ecx
	movss	xmm0, DWORD PTR _hdg$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _dy$[ebp]

; 281  : 	leftLimit.SetupWithVector( Px, Py, dx, dy );

	push	ecx
	movss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _dx$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _Py$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _Px$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET _leftLimit
	call	?SetupWithVector@Edge@@QAEXMMMM@Z	; Edge::SetupWithVector

; 282  : 
; 283  : 	// Set up the right gimbal limit edge (direction reversed since clip is "edge right of pt == OUT")
; 284  : 	hdg = platformHdg + gimbalLimit + cursorAngle;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _platformHdg$[ebp]
	addss	xmm0, DWORD PTR [ecx+526124]
	addss	xmm0, DWORD PTR _cursorAngle$[ebp]
	movss	DWORD PTR _hdg$[ebp], xmm0

; 285  : 	dx = -(float)cos(hdg);

	push	ecx
	movss	xmm0, DWORD PTR _hdg$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR tv317[ebp]
	movss	xmm0, DWORD PTR tv317[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _dx$[ebp], xmm0

; 286  : 	dy = -(float)sin(hdg);

	push	ecx
	movss	xmm0, DWORD PTR _hdg$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv323[ebp]
	movss	xmm0, DWORD PTR tv323[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _dy$[ebp], xmm0

; 287  : 	rightLimit.SetupWithVector( Px, Py, dx, dy );

	push	ecx
	movss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _dx$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _Py$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _Px$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET _rightLimit
	call	?SetupWithVector@Edge@@QAEXMMMM@Z	; Edge::SetupWithVector

; 288  : 
; 289  : 	// OW
; 290  : 	static RECT rcBlit = { 0, 0, GM_TEXTURE_SIZE, GM_TEXTURE_SIZE };
; 291  : 	if(!DisplayOptions.bRender2Texture)

	movzx	edx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+12
	test	edx, edx
	jne	$LN2@SetBeam

; 292  : 	{
; 293  : 		// This whole blitting crap is slooow
; 294  : 
; 295  : 		// Save scene
; 296  : 		HRESULT hr = m_pBackupBuffer->targetSurface()->Blt(&rcBlit, m_pRenderTarget->targetSurface(), &rcBlit, DDBLT_WAIT, NULL);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262844]
	call	?targetSurface@ImageBuffer@@QAEPAUIDirectDrawSurface7@@XZ ; ImageBuffer::targetSurface
	mov	DWORD PTR tv150[ebp], eax
	push	0
	push	16777216				; 01000000H
	push	OFFSET ?rcBlit@?1??SetBeam@RenderGMComposite@@QAEXPAUTpoint@@00MMHMH_N@Z@4UtagRECT@@A
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+262840]
	call	?targetSurface@ImageBuffer@@QAEPAUIDirectDrawSurface7@@XZ ; ImageBuffer::targetSurface
	push	eax
	push	OFFSET ?rcBlit@?1??SetBeam@RenderGMComposite@@QAEXPAUTpoint@@00MMHMH_N@Z@4UtagRECT@@A
	mov	edx, DWORD PTR tv150[ebp]
	push	edx
	mov	eax, DWORD PTR tv150[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	mov	DWORD PTR _hr$2[ebp], eax

; 297  : 		ShiAssert(SUCCEEDED(hr));
; 298  : 
; 299  : 		// restore image
; 300  : 		hr = m_pRenderTarget->targetSurface()->Blt(&rcBlit, m_pRenderBuffer->targetSurface(), &rcBlit, DDBLT_WAIT, NULL);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262840]
	call	?targetSurface@ImageBuffer@@QAEPAUIDirectDrawSurface7@@XZ ; ImageBuffer::targetSurface
	mov	DWORD PTR tv166[ebp], eax
	push	0
	push	16777216				; 01000000H
	push	OFFSET ?rcBlit@?1??SetBeam@RenderGMComposite@@QAEXPAUTpoint@@00MMHMH_N@Z@4UtagRECT@@A
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+262848]
	call	?targetSurface@ImageBuffer@@QAEPAUIDirectDrawSurface7@@XZ ; ImageBuffer::targetSurface
	push	eax
	push	OFFSET ?rcBlit@?1??SetBeam@RenderGMComposite@@QAEXPAUTpoint@@00MMHMH_N@Z@4UtagRECT@@A
	mov	edx, DWORD PTR tv166[ebp]
	push	edx
	mov	eax, DWORD PTR tv166[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	mov	DWORD PTR _hr$2[ebp], eax

; 301  : 		ShiAssert(SUCCEEDED(hr));
; 302  : 
; 303  : 		radar.context.SetViewportAbs(0, 0, GM_TEXTURE_SIZE, GM_TEXTURE_SIZE);

	push	128					; 00000080H
	push	128					; 00000080H
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262952				; 00040328H
	call	?SetViewportAbs@ContextMPR@@QAEXHHHH@Z	; ContextMPR::SetViewportAbs

; 304  : 		radar.context.LockViewport();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262952				; 00040328H
	call	?LockViewport@ContextMPR@@QAEXXZ	; ContextMPR::LockViewport
$LN2@SetBeam:

; 305  : 	}
; 306  : 
; 307  : 	// Do necessary background processing to prepare the next image
; 308  : 	ShiAssert( beamPercent <= 100 );
; 309  : 	bool bRender = BackgroundGeneration( from, at, platformHdg, beamPercent, movingRight, Shaped );

	movzx	eax, BYTE PTR _Shaped$[ebp]
	push	eax
	mov	ecx, DWORD PTR _movingRight$[ebp]
	push	ecx
	mov	edx, DWORD PTR _beamPercent$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _platformHdg$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _at$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?BackgroundGeneration@RenderGMComposite@@IAE_NPAUTpoint@@0MHH_N@Z ; RenderGMComposite::BackgroundGeneration
	mov	BYTE PTR _bRender$[ebp], al

; 310  : 
; 311  : 	if(!DisplayOptions.bRender2Texture)

	movzx	edx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+12
	test	edx, edx
	jne	$LN1@SetBeam

; 312  : 	{
; 313  : 		HRESULT hr;
; 314  : 
; 315  : 		// Save image
; 316  : 		hr = m_pRenderBuffer->targetSurface()->Blt(&rcBlit, m_pRenderTarget->targetSurface(), &rcBlit, DDBLT_WAIT, NULL);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262848]
	call	?targetSurface@ImageBuffer@@QAEPAUIDirectDrawSurface7@@XZ ; ImageBuffer::targetSurface
	mov	DWORD PTR tv210[ebp], eax
	push	0
	push	16777216				; 01000000H
	push	OFFSET ?rcBlit@?1??SetBeam@RenderGMComposite@@QAEXPAUTpoint@@00MMHMH_N@Z@4UtagRECT@@A
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+262840]
	call	?targetSurface@ImageBuffer@@QAEPAUIDirectDrawSurface7@@XZ ; ImageBuffer::targetSurface
	push	eax
	push	OFFSET ?rcBlit@?1??SetBeam@RenderGMComposite@@QAEXPAUTpoint@@00MMHMH_N@Z@4UtagRECT@@A
	mov	edx, DWORD PTR tv210[ebp]
	push	edx
	mov	eax, DWORD PTR tv210[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	mov	DWORD PTR _hr$1[ebp], eax

; 317  : 		ShiAssert(SUCCEEDED(hr));
; 318  : 
; 319  : 		// restore scene
; 320  : 		hr = m_pRenderTarget->targetSurface()->Blt(&rcBlit, m_pBackupBuffer->targetSurface(), &rcBlit, DDBLT_WAIT, NULL);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262840]
	call	?targetSurface@ImageBuffer@@QAEPAUIDirectDrawSurface7@@XZ ; ImageBuffer::targetSurface
	mov	DWORD PTR tv226[ebp], eax
	push	0
	push	16777216				; 01000000H
	push	OFFSET ?rcBlit@?1??SetBeam@RenderGMComposite@@QAEXPAUTpoint@@00MMHMH_N@Z@4UtagRECT@@A
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+262844]
	call	?targetSurface@ImageBuffer@@QAEPAUIDirectDrawSurface7@@XZ ; ImageBuffer::targetSurface
	push	eax
	push	OFFSET ?rcBlit@?1??SetBeam@RenderGMComposite@@QAEXPAUTpoint@@00MMHMH_N@Z@4UtagRECT@@A
	mov	edx, DWORD PTR tv226[ebp]
	push	edx
	mov	eax, DWORD PTR tv226[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	mov	DWORD PTR _hr$1[ebp], eax

; 321  : 		ShiAssert(SUCCEEDED(hr));
; 322  : 
; 323  : 		radar.context.UnlockViewport();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262952				; 00040328H
	call	?UnlockViewport@ContextMPR@@QAEXXZ	; ContextMPR::UnlockViewport

; 324  : 		radar.context.SetViewportAbs(0, 0, m_pRenderTarget->targetXres(), m_pRenderTarget->targetYres());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262840]
	call	?targetYres@ImageBuffer@@QAEHXZ		; ImageBuffer::targetYres
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+262840]
	call	?targetXres@ImageBuffer@@QAEHXZ		; ImageBuffer::targetXres
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262952				; 00040328H
	call	?SetViewportAbs@ContextMPR@@QAEXHHHH@Z	; ContextMPR::SetViewportAbs
$LN1@SetBeam:

; 325  : 	}
; 326  : }

	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
?SetBeam@RenderGMComposite@@QAEXPAUTpoint@@00MMHMH_N@Z ENDP ; RenderGMComposite::SetBeam
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\gmcomposit.cpp
_TEXT	SEGMENT
tv187 = -88						; size = 4
$T1 = -84						; size = 4
tv174 = -80						; size = 4
$T2 = -76						; size = 4
tv160 = -72						; size = 4
$T3 = -68						; size = 4
tv130 = -64						; size = 4
$T4 = -60						; size = 4
tv89 = -56						; size = 4
$T5 = -52						; size = 4
tv80 = -48						; size = 4
$T6 = -44						; size = 4
tv71 = -40						; size = 4
$T7 = -36						; size = 4
$T8 = -32						; size = 4
$T9 = -28						; size = 4
$T10 = -24						; size = 4
$T11 = -20						; size = 4
$T12 = -16						; size = 4
$T13 = -12						; size = 4
$T14 = -8						; size = 4
_this$ = -4						; size = 4
?Cleanup@RenderGMComposite@@UAEXXZ PROC			; RenderGMComposite::Cleanup
; _this$ = ecx

; 198  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	mov	DWORD PTR _this$[ebp], ecx

; 199  : 	if(paletteHandle)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+526060], 0
	je	SHORT $LN8@Cleanup

; 200  : 	{
; 201  : 		delete paletteHandle;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+526060]
	mov	DWORD PTR $T7[ebp], edx
	mov	eax, DWORD PTR $T7[ebp]
	mov	DWORD PTR $T11[ebp], eax
	cmp	DWORD PTR $T11[ebp], 0
	je	SHORT $LN11@Cleanup
	push	1
	mov	ecx, DWORD PTR $T11[ebp]
	call	??_GPaletteHandle@@QAEPAXI@Z
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN12@Cleanup
$LN11@Cleanup:
	mov	DWORD PTR tv71[ebp], 0
$LN12@Cleanup:

; 202  : 		paletteHandle = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+526060], 0
$LN8@Cleanup:

; 203  : 	}
; 204  : 
; 205  : 	if(lTexHandle)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+526084], 0
	je	SHORT $LN7@Cleanup

; 206  : 	{
; 207  : 		delete lTexHandle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+526084]
	mov	DWORD PTR $T6[ebp], ecx
	mov	edx, DWORD PTR $T6[ebp]
	mov	DWORD PTR $T10[ebp], edx
	cmp	DWORD PTR $T10[ebp], 0
	je	SHORT $LN13@Cleanup
	push	1
	mov	ecx, DWORD PTR $T10[ebp]
	call	??_GTextureHandle@@QAEPAXI@Z
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN14@Cleanup
$LN13@Cleanup:
	mov	DWORD PTR tv80[ebp], 0
$LN14@Cleanup:

; 208  : 		lTexHandle = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+526084], 0
$LN7@Cleanup:

; 209  : 	}
; 210  : 
; 211  : 	if(rTexHandle)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+526100], 0
	je	SHORT $LN6@Cleanup

; 212  : 	{
; 213  : 		delete rTexHandle;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+526100]
	mov	DWORD PTR $T5[ebp], eax
	mov	ecx, DWORD PTR $T5[ebp]
	mov	DWORD PTR $T9[ebp], ecx
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN15@Cleanup
	push	1
	mov	ecx, DWORD PTR $T9[ebp]
	call	??_GTextureHandle@@QAEPAXI@Z
	mov	DWORD PTR tv89[ebp], eax
	jmp	SHORT $LN16@Cleanup
$LN15@Cleanup:
	mov	DWORD PTR tv89[ebp], 0
$LN16@Cleanup:

; 214  : 		rTexHandle = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+526100], 0
$LN6@Cleanup:

; 215  : 	}
; 216  : 
; 217  : 	if(nTexHandle)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+526132], 0
	je	SHORT $LN5@Cleanup

; 218  : 	{
; 219  : 		delete nTexHandle;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+526132]
	mov	DWORD PTR $T4[ebp], edx
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR $T8[ebp], eax
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN17@Cleanup
	push	1
	mov	ecx, DWORD PTR $T8[ebp]
	call	??_GTextureHandle@@QAEPAXI@Z
	mov	DWORD PTR tv130[ebp], eax
	jmp	SHORT $LN18@Cleanup
$LN17@Cleanup:
	mov	DWORD PTR tv130[ebp], 0
$LN18@Cleanup:

; 220  : 		nTexHandle = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+526132], 0
$LN5@Cleanup:

; 221  : 	}
; 222  : 
; 223  : 	// Clean up our child RenderGMRadar
; 224  : 	radar.Cleanup();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262852]
	mov	edx, DWORD PTR [eax+8]
	call	edx

; 225  : 
; 226  : 	// Call our parent's cleanup
; 227  : 	Render2D::Cleanup();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Cleanup@Render2D@@UAEXXZ		; Render2D::Cleanup

; 228  : 
; 229  : 	// Clean up our private rendering target image
; 230  : 	if(m_pRenderTarget)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+262840], 0
	je	SHORT $LN4@Cleanup

; 231  : 	{
; 232  : 		if(m_bRenderTargetOwned)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+526064]
	test	edx, edx
	je	SHORT $LN3@Cleanup

; 233  : 		{
; 234  : 			m_pRenderTarget->Cleanup();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262840]
	call	?Cleanup@ImageBuffer@@QAEXXZ		; ImageBuffer::Cleanup

; 235  : 			delete m_pRenderTarget;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262840]
	mov	DWORD PTR $T3[ebp], edx
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T14[ebp], eax
	cmp	DWORD PTR $T14[ebp], 0
	je	SHORT $LN19@Cleanup
	push	1
	mov	ecx, DWORD PTR $T14[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T14[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv160[ebp], eax
	jmp	SHORT $LN3@Cleanup
$LN19@Cleanup:
	mov	DWORD PTR tv160[ebp], 0
$LN3@Cleanup:

; 236  : 		}
; 237  : 
; 238  : 		m_pRenderTarget = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262840], 0

; 239  : 		m_bRenderTargetOwned = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+526064], 0
$LN4@Cleanup:

; 240  : 	}
; 241  : 
; 242  : 	if(m_pBackupBuffer)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+262844], 0
	je	SHORT $LN2@Cleanup

; 243  : 	{
; 244  : 		m_pBackupBuffer->Cleanup();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+262844]
	call	?Cleanup@ImageBuffer@@QAEXXZ		; ImageBuffer::Cleanup

; 245  : 		delete m_pBackupBuffer;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262844]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T13[ebp], ecx
	cmp	DWORD PTR $T13[ebp], 0
	je	SHORT $LN21@Cleanup
	push	1
	mov	edx, DWORD PTR $T13[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T13[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv174[ebp], eax
	jmp	SHORT $LN22@Cleanup
$LN21@Cleanup:
	mov	DWORD PTR tv174[ebp], 0
$LN22@Cleanup:

; 246  : 		m_pBackupBuffer = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262844], 0
$LN2@Cleanup:

; 247  : 	}
; 248  : 
; 249  : 	if(m_pRenderBuffer)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+262848], 0
	je	SHORT $LN9@Cleanup

; 250  : 	{
; 251  : 		m_pRenderBuffer->Cleanup();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+262848]
	call	?Cleanup@ImageBuffer@@QAEXXZ		; ImageBuffer::Cleanup

; 252  : 		delete m_pRenderBuffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262848]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T12[ebp], edx
	cmp	DWORD PTR $T12[ebp], 0
	je	SHORT $LN23@Cleanup
	push	1
	mov	eax, DWORD PTR $T12[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T12[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv187[ebp], eax
	jmp	SHORT $LN24@Cleanup
$LN23@Cleanup:
	mov	DWORD PTR tv187[ebp], 0
$LN24@Cleanup:

; 253  : 		m_pRenderBuffer = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262848], 0
$LN9@Cleanup:

; 254  : 	}
; 255  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Cleanup@RenderGMComposite@@UAEXXZ ENDP			; RenderGMComposite::Cleanup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\gmcomposit.cpp
_TEXT	SEGMENT
_nNoiseBase$ = -1172					; size = 4
$T2 = -1168						; size = 4
_front$3 = -1164					; size = 4
$T4 = -1160						; size = 4
$T5 = -1156						; size = 4
$T6 = -1152						; size = 4
$T7 = -1148						; size = 4
_lpDDSBack$8 = -1144					; size = 4
$T9 = -1140						; size = 4
$T10 = -1136						; size = 4
$T11 = -1132						; size = 4
$T12 = -1128						; size = 4
$T13 = -1124						; size = 4
tv185 = -1120						; size = 4
tv129 = -1116						; size = 4
tv238 = -1112						; size = 4
$T14 = -1108						; size = 4
tv164 = -1104						; size = 4
tv262 = -1100						; size = 4
$T15 = -1096						; size = 4
$T16 = -1092						; size = 4
$T17 = -1088						; size = 4
tv88 = -1084						; size = 4
$T18 = -1080						; size = 4
$T19 = -1076						; size = 4
tv278 = -1072						; size = 4
tv246 = -1068						; size = 4
_x$20 = -1064						; size = 4
_pBuf$ = -1060						; size = 4
_y$21 = -1056						; size = 4
_pDst$ = -1052						; size = 4
_i$22 = -1048						; size = 4
_this$ = -1044						; size = 4
_paletteData$ = -1040					; size = 1024
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_output$ = 8						; size = 4
_tgtDrawCallback$ = 12					; size = 4
_tgtDrawParam$ = 16					; size = 4
?Setup@RenderGMComposite@@UAEXPAVImageBuffer@@P6AXPAXPAVRenderGMRadar@@_N@Z1@Z PROC ; RenderGMComposite::Setup
; _this$ = ecx

; 83   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Setup@RenderGMComposite@@UAEXPAVImageBuffer@@P6AXPAXPAVRenderGMRadar@@_N@Z1@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1160				; 00000488H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 84   : 	// Call our parents Setup code
; 85   : 	Render2D::Setup( output );

	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Setup@Render2D@@UAEXPAVImageBuffer@@@Z	; Render2D::Setup

; 86   : 
; 87   : 	// Set some default values
; 88   : 	range			= 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+526076], xmm0

; 89   : 	gimbalLimit		= 60.0f * PI/180.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f860a92
	movss	DWORD PTR [edx+526124], xmm0

; 90   : 	prevBeamPercent	= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+526116], 0

; 91   : 	prevBeamRight	= FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+526120], 0

; 92   : 	lOriginX = lOriginY = 0;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+526092], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+526088], xmm0

; 93   : 	rOriginX = rOriginY = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+526108], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+526104], xmm0

; 94   : 	rAngle = lAngle = 0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+526096], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+526112], xmm0

; 95   : 	DrawChanged = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+526128], 1

; 96   : 
; 97   : 
; 98   : 	// Store the callback funcion pointer for drawing targets
; 99   : 	ShiAssert( tgtDrawCallback );
; 100  : 	tgtDrawCB = tgtDrawCallback;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _tgtDrawCallback$[ebp]
	mov	DWORD PTR [eax+526068], ecx

; 101  : 	tgtDrawCBparam = tgtDrawParam;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _tgtDrawParam$[ebp]
	mov	DWORD PTR [edx+526072], eax

; 102  : 
; 103  : 	if(DisplayOptions.bRender2Texture)

	movzx	ecx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+12
	test	ecx, ecx
	je	$LN12@Setup

; 104  : 	{
; 105  : 		// Set up our private rendering target image
; 106  : 		MPRSurfaceType front = FalconDisplay.theDisplayDevice.IsHardware() ? VideoMem : SystemMem;

	mov	ecx, OFFSET ?FalconDisplay@@3VFalconDisplayConfiguration@@A+132
	call	?IsHardware@DisplayDevice@@QAEHXZ	; DisplayDevice::IsHardware
	test	eax, eax
	je	SHORT $LN15@Setup
	mov	DWORD PTR tv88[ebp], 1
	jmp	SHORT $LN16@Setup
$LN15@Setup:
	mov	DWORD PTR tv88[ebp], 0
$LN16@Setup:
	mov	edx, DWORD PTR tv88[ebp]
	mov	DWORD PTR _front$3[ebp], edx

; 107  : 		m_pRenderTarget = new ImageBuffer;

	push	348					; 0000015cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T18[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T18[ebp], 0
	je	SHORT $LN17@Setup
	mov	ecx, DWORD PTR $T18[ebp]
	call	??0ImageBuffer@@QAE@XZ			; ImageBuffer::ImageBuffer
	mov	DWORD PTR tv129[ebp], eax
	jmp	SHORT $LN18@Setup
$LN17@Setup:
	mov	DWORD PTR tv129[ebp], 0
$LN18@Setup:
	mov	eax, DWORD PTR tv129[ebp]
	mov	DWORD PTR $T12[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T12[ebp]
	mov	DWORD PTR [ecx+262840], edx

; 108  : 		m_pRenderTarget->Setup( output->GetDisplayDevice(), GM_TEXTURE_SIZE, GM_TEXTURE_SIZE, front, None );

	push	0
	push	0
	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _front$3[ebp]
	push	eax
	push	128					; 00000080H
	push	128					; 00000080H
	mov	ecx, DWORD PTR _output$[ebp]
	call	?GetDisplayDevice@ImageBuffer@@QAEPAVDisplayDevice@@XZ ; ImageBuffer::GetDisplayDevice
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+262840]
	call	?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z ; ImageBuffer::Setup

; 109  : 		m_bRenderTargetOwned = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+526064], 1

; 110  : 
; 111  : 		// Set up our child RenderGMRadar
; 112  : 		radar.Setup(m_pRenderTarget);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262840]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262852]
	mov	edx, DWORD PTR [eax+132]
	call	edx

; 113  : 	}
; 114  : 
; 115  : 	else

	jmp	$LN11@Setup
$LN12@Setup:

; 116  : 	{
; 117  : 		// Welcome to the heart of darkness
; 118  : 		// The whole (ugly) SetRenderTarget workaround is necessary because 1) the Voodoo 1 and 2 completely
; 119  : 		// ignore SetRenderTarget and 2) the SetRenderTarget implementation in many drivers (including some
; 120  : 		// versions of the detonator drivers) is broken ;(
; 121  : 
; 122  : 		// Use primary
; 123  : //		m_pRenderTarget = new ImageBuffer;
; 124  : //		m_pRenderTarget->AttachSurfaces(output->GetDisplayDevice(), output->targetSurface(), NULL);
; 125  : 		m_pRenderTarget = output;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _output$[ebp]
	mov	DWORD PTR [eax+262840], ecx

; 126  : 		m_bRenderTargetOwned = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+526064], 0

; 127  : 
; 128  : 		// Setup backup buffer (let the driver decide where to put it - Note: on the V2 we are counting on the driver choosing system memory)
; 129  : 		m_pBackupBuffer = new ImageBuffer;

	push	348					; 0000015cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T13[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T13[ebp], 0
	je	SHORT $LN19@Setup
	mov	ecx, DWORD PTR $T13[ebp]
	call	??0ImageBuffer@@QAE@XZ			; ImageBuffer::ImageBuffer
	mov	DWORD PTR tv164[ebp], eax
	jmp	SHORT $LN20@Setup
$LN19@Setup:
	mov	DWORD PTR tv164[ebp], 0
$LN20@Setup:
	mov	eax, DWORD PTR tv164[ebp]
	mov	DWORD PTR $T10[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T10[ebp]
	mov	DWORD PTR [ecx+262844], edx

; 130  : 		m_pBackupBuffer->Setup( output->GetDisplayDevice(), GM_TEXTURE_SIZE, GM_TEXTURE_SIZE, None, None);

	push	0
	push	0
	push	0
	push	0
	push	4
	push	4
	push	128					; 00000080H
	push	128					; 00000080H
	mov	ecx, DWORD PTR _output$[ebp]
	call	?GetDisplayDevice@ImageBuffer@@QAEPAVDisplayDevice@@XZ ; ImageBuffer::GetDisplayDevice
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262844]
	call	?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z ; ImageBuffer::Setup

; 131  : 
; 132  : 		// Setup render buffer (contains a backup of ther rendered image)
; 133  : 		m_pRenderBuffer = new ImageBuffer;

	push	348					; 0000015cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T17[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T17[ebp], 0
	je	SHORT $LN21@Setup
	mov	ecx, DWORD PTR $T17[ebp]
	call	??0ImageBuffer@@QAE@XZ			; ImageBuffer::ImageBuffer
	mov	DWORD PTR tv185[ebp], eax
	jmp	SHORT $LN22@Setup
$LN21@Setup:
	mov	DWORD PTR tv185[ebp], 0
$LN22@Setup:
	mov	ecx, DWORD PTR tv185[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+262848], eax

; 134  : 		m_pRenderBuffer->Setup( output->GetDisplayDevice(), GM_TEXTURE_SIZE, GM_TEXTURE_SIZE, None, None);

	push	0
	push	0
	push	0
	push	0
	push	4
	push	4
	push	128					; 00000080H
	push	128					; 00000080H
	mov	ecx, DWORD PTR _output$[ebp]
	call	?GetDisplayDevice@ImageBuffer@@QAEPAVDisplayDevice@@XZ ; ImageBuffer::GetDisplayDevice
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+262848]
	call	?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z ; ImageBuffer::Setup

; 135  : 
; 136  : 		// Here we fool the radar and make it thing it renders to a 128x128 surface
; 137  : 		radar.Setup(m_pRenderBuffer);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262848]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262852]
	mov	edx, DWORD PTR [eax+132]
	call	edx

; 138  : 		// and now we are using a back door to make it actually use the primary surface (geez, ugly shit)
; 139  : 		IDirectDrawSurface7 *lpDDSBack = m_pRenderTarget->targetSurface();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262840]
	call	?targetSurface@ImageBuffer@@QAEPAUIDirectDrawSurface7@@XZ ; ImageBuffer::targetSurface
	mov	DWORD PTR _lpDDSBack$8[ebp], eax

; 140  : 		radar.context.NewImageBuffer((UInt) lpDDSBack);

	mov	ecx, DWORD PTR _lpDDSBack$8[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262952				; 00040328H
	call	?NewImageBuffer@ContextMPR@@QAEXI@Z	; ContextMPR::NewImageBuffer
$LN11@Setup:

; 141  : 	}
; 142  : 
; 143  : 	paletteHandle = new PaletteHandle(context.m_pCtxDX->m_pDD, 32, 256 );

	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T15[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T15[ebp], 0
	je	SHORT $LN23@Setup
	push	256					; 00000100H
	push	32					; 00000020H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+262460]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR $T15[ebp]
	call	??0PaletteHandle@@QAE@PAUIDirectDraw7@@GG@Z ; PaletteHandle::PaletteHandle
	mov	DWORD PTR tv238[ebp], eax
	jmp	SHORT $LN24@Setup
$LN23@Setup:
	mov	DWORD PTR tv238[ebp], 0
$LN24@Setup:
	mov	edx, DWORD PTR tv238[ebp]
	mov	DWORD PTR $T4[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR [eax+526060], ecx

; 144  : 	ShiAssert( paletteHandle );
; 145  : 
; 146  : 	lTexHandle = new TextureHandle;

	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T19[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T19[ebp], 0
	je	SHORT $LN25@Setup
	mov	ecx, DWORD PTR $T19[ebp]
	call	??0TextureHandle@@QAE@XZ		; TextureHandle::TextureHandle
	mov	DWORD PTR tv246[ebp], eax
	jmp	SHORT $LN26@Setup
$LN25@Setup:
	mov	DWORD PTR tv246[ebp], 0
$LN26@Setup:
	mov	edx, DWORD PTR tv246[ebp]
	mov	DWORD PTR $T6[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T6[ebp]
	mov	DWORD PTR [eax+526084], ecx

; 147  : 	ShiAssert( lTexHandle );
; 148  : 	lTexHandle->Create("GM Radar Left", 0, 0,
; 149  : 		GM_TEXTURE_SIZE, GM_TEXTURE_SIZE, TextureHandle::FLAG_HINT_DYNAMIC | TextureHandle::FLAG_MATCHPRIMARY |
; 150  : 		TextureHandle::FLAG_NOTMANAGED);

	push	37					; 00000025H
	push	128					; 00000080H
	push	128					; 00000080H
	push	0
	push	0
	push	OFFSET ??_C@_0O@BDAPHCP@GM?5Radar?5Left?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+526084]
	call	?Create@TextureHandle@@QAE_NPADKGGGK@Z	; TextureHandle::Create

; 151  : 
; 152  : 	rTexHandle = new TextureHandle;

	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T16[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	cmp	DWORD PTR $T16[ebp], 0
	je	SHORT $LN27@Setup
	mov	ecx, DWORD PTR $T16[ebp]
	call	??0TextureHandle@@QAE@XZ		; TextureHandle::TextureHandle
	mov	DWORD PTR tv262[ebp], eax
	jmp	SHORT $LN28@Setup
$LN27@Setup:
	mov	DWORD PTR tv262[ebp], 0
$LN28@Setup:
	mov	eax, DWORD PTR tv262[ebp]
	mov	DWORD PTR $T11[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T11[ebp]
	mov	DWORD PTR [ecx+526100], edx

; 153  : 	ShiAssert( rTexHandle );
; 154  : 	rTexHandle->Create("GM Radar Right", 0, 0,
; 155  : 		GM_TEXTURE_SIZE, GM_TEXTURE_SIZE, TextureHandle::FLAG_HINT_DYNAMIC | TextureHandle::FLAG_MATCHPRIMARY |
; 156  : 		TextureHandle::FLAG_NOTMANAGED);

	push	37					; 00000025H
	push	128					; 00000080H
	push	128					; 00000080H
	push	0
	push	0
	push	OFFSET ??_C@_0P@LBCPACMH@GM?5Radar?5Right?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+526100]
	call	?Create@TextureHandle@@QAE_NPADKGGGK@Z	; TextureHandle::Create

; 157  : 
; 158  : 	// Noise texture is twice as wide as the other textures to allow for random u (avoids time consuming re-generation)
; 159  : 	nTexHandle = new TextureHandle;

	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T14[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 6
	cmp	DWORD PTR $T14[ebp], 0
	je	SHORT $LN29@Setup
	mov	ecx, DWORD PTR $T14[ebp]
	call	??0TextureHandle@@QAE@XZ		; TextureHandle::TextureHandle
	mov	DWORD PTR tv278[ebp], eax
	jmp	SHORT $LN30@Setup
$LN29@Setup:
	mov	DWORD PTR tv278[ebp], 0
$LN30@Setup:
	mov	ecx, DWORD PTR tv278[ebp]
	mov	DWORD PTR $T9[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T9[ebp]
	mov	DWORD PTR [edx+526132], eax

; 160  : 	ShiAssert( nTexHandle );
; 161  : 	paletteHandle->AttachToTexture(nTexHandle);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+526132]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+526060]
	call	?AttachToTexture@PaletteHandle@@QAEXPAVTextureHandle@@@Z ; PaletteHandle::AttachToTexture

; 162  : 	nTexHandle->Create("GM Radar Noise", MPR_TI_PALETTE | MPR_TI_CHROMAKEY, 8,
; 163  : 		GM_TEXTURE_SIZE * 2, GM_TEXTURE_SIZE, TextureHandle::FLAG_HINT_STATIC);

	push	2
	push	128					; 00000080H
	push	256					; 00000100H
	push	8
	push	160					; 000000a0H
	push	OFFSET ??_C@_0P@OJAOCNDF@GM?5Radar?5Noise?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+526132]
	call	?Create@TextureHandle@@QAE_NPADKGGGK@Z	; TextureHandle::Create

; 164  : 
; 165  : 	// Generate the green palette for the noise texture
; 166  : 	DWORD paletteData[256];
; 167  : 	for(int i=0; i<256; i++)

	mov	DWORD PTR _i$22[ebp], 0
	jmp	SHORT $LN10@Setup
$LN9@Setup:
	mov	edx, DWORD PTR _i$22[ebp]
	add	edx, 1
	mov	DWORD PTR _i$22[ebp], edx
$LN10@Setup:
	cmp	DWORD PTR _i$22[ebp], 256		; 00000100H
	jge	SHORT $LN8@Setup

; 168  : 		paletteData[i] = 0xFF000000 | (i<<8);

	mov	eax, DWORD PTR _i$22[ebp]
	shl	eax, 8
	or	eax, -16777216				; ff000000H
	mov	ecx, DWORD PTR _i$22[ebp]
	mov	DWORD PTR _paletteData$[ebp+ecx*4], eax
	jmp	SHORT $LN9@Setup
$LN8@Setup:

; 169  : 	paletteData[0] = 0;

	mov	edx, 4
	imul	edx, 0
	mov	DWORD PTR _paletteData$[ebp+edx], 0

; 170  : 
; 171  : 	// Generate noise image
; 172  : 	BYTE *pBuf = new BYTE[GM_TEXTURE_SIZE * 2 * GM_TEXTURE_SIZE];

	push	32768					; 00008000H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	eax, DWORD PTR $T7[ebp]
	mov	DWORD PTR _pBuf$[ebp], eax

; 173  : 	BYTE *pDst = pBuf;

	mov	ecx, DWORD PTR _pBuf$[ebp]
	mov	DWORD PTR _pDst$[ebp], ecx

; 174  : 	ShiAssert(pDst);
; 175  : 	if(!pDst) return;

	cmp	DWORD PTR _pDst$[ebp], 0
	jne	SHORT $LN7@Setup
	jmp	$LN13@Setup
$LN7@Setup:

; 176  : 
; 177  : 	const int nNoiseBase = 0x5;

	mov	DWORD PTR _nNoiseBase$[ebp], 5

; 178  : 
; 179  : 	for(int y=0;y<GM_TEXTURE_SIZE;y++)

	mov	DWORD PTR _y$21[ebp], 0
	jmp	SHORT $LN6@Setup
$LN5@Setup:
	mov	edx, DWORD PTR _y$21[ebp]
	add	edx, 1
	mov	DWORD PTR _y$21[ebp], edx
$LN6@Setup:
	cmp	DWORD PTR _y$21[ebp], 128		; 00000080H
	jge	SHORT $LN4@Setup

; 180  : 	{
; 181  : 		for(int x=0;x<GM_TEXTURE_SIZE*2;x++)

	mov	DWORD PTR _x$20[ebp], 0
	jmp	SHORT $LN3@Setup
$LN2@Setup:
	mov	eax, DWORD PTR _x$20[ebp]
	add	eax, 1
	mov	DWORD PTR _x$20[ebp], eax
$LN3@Setup:
	cmp	DWORD PTR _x$20[ebp], 256		; 00000100H
	jge	SHORT $LN1@Setup

; 182  : 			*pDst++ = Noise(nNoiseBase);

	push	5
	call	?Noise@@YAEH@Z				; Noise
	add	esp, 4
	mov	ecx, DWORD PTR _pDst$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDst$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDst$[ebp], edx
	jmp	SHORT $LN2@Setup
$LN1@Setup:

; 183  : 	}

	jmp	SHORT $LN5@Setup
$LN4@Setup:

; 184  : 
; 185  : 	// initialize the texture but do not load bits
; 186  : 	nTexHandle->Load(0, 0, pBuf, true);		// Chromakey 0 = black

	push	-1
	push	0
	push	1
	mov	eax, DWORD PTR _pBuf$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+526132]
	call	?Load@TextureHandle@@QAE_NGIPAE_N1H@Z	; TextureHandle::Load

; 187  : 
; 188  : 	// this will eventually load (indirectly) the texture for the first and last time
; 189  : 	paletteHandle->Load(MPR_TI_PALETTE,	32, 0, 256, (BYTE*) paletteData);

	lea	edx, DWORD PTR _paletteData$[ebp]
	push	edx
	push	256					; 00000100H
	push	0
	push	32					; 00000020H
	push	128					; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+526060]
	call	?Load@PaletteHandle@@QAEXGGGGPAE@Z	; PaletteHandle::Load

; 190  : 
; 191  : 	// texture owns a copy of the image data
; 192  : 	delete[] pBuf;

	mov	ecx, DWORD PTR _pBuf$[ebp]
	mov	DWORD PTR $T5[ebp], ecx
	mov	edx, DWORD PTR $T5[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 193  : 	nextOperation = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+526136], 0
$LN13@Setup:

; 194  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Setup@RenderGMComposite@@UAEXPAVImageBuffer@@P6AXPAXPAVRenderGMRadar@@_N@Z1@Z$0:
	mov	eax, DWORD PTR $T18[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Setup@RenderGMComposite@@UAEXPAVImageBuffer@@P6AXPAXPAVRenderGMRadar@@_N@Z1@Z$1:
	mov	eax, DWORD PTR $T13[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Setup@RenderGMComposite@@UAEXPAVImageBuffer@@P6AXPAXPAVRenderGMRadar@@_N@Z1@Z$2:
	mov	eax, DWORD PTR $T17[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Setup@RenderGMComposite@@UAEXPAVImageBuffer@@P6AXPAXPAVRenderGMRadar@@_N@Z1@Z$3:
	mov	eax, DWORD PTR $T15[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Setup@RenderGMComposite@@UAEXPAVImageBuffer@@P6AXPAXPAVRenderGMRadar@@_N@Z1@Z$4:
	mov	eax, DWORD PTR $T19[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Setup@RenderGMComposite@@UAEXPAVImageBuffer@@P6AXPAXPAVRenderGMRadar@@_N@Z1@Z$5:
	mov	eax, DWORD PTR $T16[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Setup@RenderGMComposite@@UAEXPAVImageBuffer@@P6AXPAXPAVRenderGMRadar@@_N@Z1@Z$6:
	mov	eax, DWORD PTR $T14[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Setup@RenderGMComposite@@UAEXPAVImageBuffer@@P6AXPAXPAVRenderGMRadar@@_N@Z1@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1164]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Setup@RenderGMComposite@@UAEXPAVImageBuffer@@P6AXPAXPAVRenderGMRadar@@_N@Z1@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Setup@RenderGMComposite@@UAEXPAVImageBuffer@@P6AXPAXPAVRenderGMRadar@@_N@Z1@Z ENDP ; RenderGMComposite::Setup
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\gmcomposit.h
;	COMDAT ??1RenderGMComposite@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1RenderGMComposite@@UAE@XZ PROC			; RenderGMComposite::~RenderGMComposite, COMDAT
; _this$ = ecx

; 27   : 	virtual ~RenderGMComposite()	{};

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1RenderGMComposite@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7RenderGMComposite@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	call	??1RenderGMRadar@@UAE@XZ		; RenderGMRadar::~RenderGMRadar
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Render2D@@UAE@XZ			; Render2D::~Render2D
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1RenderGMComposite@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Render2D@@UAE@XZ			; Render2D::~Render2D
__ehhandler$??1RenderGMComposite@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1RenderGMComposite@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1RenderGMComposite@@UAE@XZ ENDP			; RenderGMComposite::~RenderGMComposite
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\renderer\gmcomposit.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0RenderGMComposite@@QAE@XZ PROC			; RenderGMComposite::RenderGMComposite
; _this$ = ecx

; 73   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0RenderGMComposite@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Render2D@@QAE@XZ			; Render2D::Render2D
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7RenderGMComposite@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	call	??0RenderGMRadar@@QAE@XZ		; RenderGMRadar::RenderGMRadar

; 74   : 	lTexHandle = rTexHandle = nTexHandle = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+526132], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+526100], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+526084], 0

; 75   : 	m_pRenderTarget = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262840], 0

; 76   : 	m_bRenderTargetOwned = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+526064], 0

; 77   : 	m_pBackupBuffer = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262844], 0

; 78   : 	m_pRenderBuffer = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262848], 0

; 79   : 	nextOperation = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+526136], 0

; 80   : };

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0RenderGMComposite@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Render2D@@UAE@XZ			; Render2D::~Render2D
__ehhandler$??0RenderGMComposite@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0RenderGMComposite@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0RenderGMComposite@@QAE@XZ ENDP			; RenderGMComposite::RenderGMComposite
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\gmcomposit.h
;	COMDAT ??__EGM_OVERSCAN_V@@YAXXZ
text$yc	SEGMENT
??__EGM_OVERSCAN_V@@YAXXZ PROC				; `dynamic initializer for 'GM_OVERSCAN_V'', COMDAT

; 21   : static const float	GM_OVERSCAN_V		= 1.0f + GM_OVERSCAN + GM_OVERSCAN;

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR __real@3f800000
	addss	xmm0, DWORD PTR _GM_OVERSCAN
	addss	xmm0, DWORD PTR _GM_OVERSCAN
	movss	DWORD PTR _GM_OVERSCAN_V, xmm0
	pop	ebp
	ret	0
??__EGM_OVERSCAN_V@@YAXXZ ENDP				; `dynamic initializer for 'GM_OVERSCAN_V''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\gmcomposit.h
;	COMDAT ??__EGM_OVERSCAN_H@@YAXXZ
text$yc	SEGMENT
??__EGM_OVERSCAN_H@@YAXXZ PROC				; `dynamic initializer for 'GM_OVERSCAN_H'', COMDAT

; 20   : static const float	GM_OVERSCAN_H		= 1.0f + GM_OVERSCAN;

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _GM_OVERSCAN
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _GM_OVERSCAN_H, xmm0
	pop	ebp
	ret	0
??__EGM_OVERSCAN_H@@YAXXZ ENDP				; `dynamic initializer for 'GM_OVERSCAN_H''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\gmcomposit.h
;	COMDAT ??__EGM_OVERSCAN_RNG@@YAXXZ
text$yc	SEGMENT
??__EGM_OVERSCAN_RNG@@YAXXZ PROC			; `dynamic initializer for 'GM_OVERSCAN_RNG'', COMDAT

; 19   : static const float	GM_OVERSCAN_RNG		= 1.0f + GM_OVERSCAN;

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _GM_OVERSCAN
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _GM_OVERSCAN_RNG, xmm0
	pop	ebp
	ret	0
??__EGM_OVERSCAN_RNG@@YAXXZ ENDP			; `dynamic initializer for 'GM_OVERSCAN_RNG''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GRenderGMRadar@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GRenderGMRadar@@UAEPAXI@Z PROC			; RenderGMRadar::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1RenderGMRadar@@UAE@XZ		; RenderGMRadar::~RenderGMRadar
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GRenderGMRadar@@UAEPAXI@Z ENDP			; RenderGMRadar::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\gmradar.h
;	COMDAT ?GetHdg@RenderGMRadar@@QAEMXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?GetHdg@RenderGMRadar@@QAEMXZ PROC			; RenderGMRadar::GetHdg, COMDAT
; _this$ = ecx

; 60   : 	float	GetHdg( void )			{ return -rotationAngle; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+263160]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv69[ebp], xmm0
	fld	DWORD PTR tv69[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetHdg@RenderGMRadar@@QAEMXZ ENDP			; RenderGMRadar::GetHdg
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\gmradar.h
;	COMDAT ?GetAt@RenderGMRadar@@QAEPAUTpoint@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAt@RenderGMRadar@@QAEPAUTpoint@@XZ PROC		; RenderGMRadar::GetAt, COMDAT
; _this$ = ecx

; 59   : 	Tpoint	*GetAt( void )			{ return &centerPos; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 263096				; 000403b8H
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAt@RenderGMRadar@@QAEPAUTpoint@@XZ ENDP		; RenderGMRadar::GetAt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\gmradar.h
;	COMDAT ??1RenderGMRadar@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1RenderGMRadar@@UAE@XZ PROC				; RenderGMRadar::~RenderGMRadar, COMDAT
; _this$ = ecx

; 31   : 	virtual ~RenderGMRadar()	{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7RenderGMRadar@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Render3D@@UAE@XZ			; Render3D::~Render3D
	mov	esp, ebp
	pop	ebp
	ret	0
??1RenderGMRadar@@UAE@XZ ENDP				; RenderGMRadar::~RenderGMRadar
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\gmradar.h
;	COMDAT ??0RenderGMRadar@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0RenderGMRadar@@QAE@XZ PROC				; RenderGMRadar::RenderGMRadar, COMDAT
; _this$ = ecx

; 30   : 	RenderGMRadar()				{ LOD = -1;  viewpoint = NULL; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Render3D@@QAE@XZ			; Render3D::Render3D
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7RenderGMRadar@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+263120], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+263108], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0RenderGMRadar@@QAE@XZ ENDP				; RenderGMRadar::RenderGMRadar
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GRender3D@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GRender3D@@UAEPAXI@Z PROC				; Render3D::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Render3D@@UAE@XZ			; Render3D::~Render3D
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GRender3D@@UAEPAXI@Z ENDP				; Render3D::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render3d.h
;	COMDAT ?Cleanup@Render3D@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Cleanup@Render3D@@UAEXXZ PROC				; Render3D::Cleanup, COMDAT
; _this$ = ecx

; 49   : 	virtual void Cleanup( void )	{ Render2D::Cleanup(); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Cleanup@Render2D@@UAEXXZ		; Render2D::Cleanup
	mov	esp, ebp
	pop	ebp
	ret	0
?Cleanup@Render3D@@UAEXXZ ENDP				; Render3D::Cleanup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render3d.h
;	COMDAT ??1Render3D@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Render3D@@UAE@XZ PROC				; Render3D::~Render3D, COMDAT
; _this$ = ecx

; 43   : 	virtual ~Render3D()	{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Render3D@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Render2D@@UAE@XZ			; Render2D::~Render2D
	mov	esp, ebp
	pop	ebp
	ret	0
??1Render3D@@UAE@XZ ENDP				; Render3D::~Render3D
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render3d.h
;	COMDAT ??0Render3D@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Render3D@@QAE@XZ PROC				; Render3D::Render3D, COMDAT
; _this$ = ecx

; 42   : 	Render3D()	{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Render2D@@QAE@XZ			; Render2D::Render2D
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Render3D@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Render3D@@QAE@XZ ENDP				; Render3D::Render3D
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GRender2D@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GRender2D@@UAEPAXI@Z PROC				; Render2D::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Render2D@@UAE@XZ			; Render2D::~Render2D
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GRender2D@@UAEPAXI@Z ENDP				; Render2D::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render2d.h
;	COMDAT ?SetLineStyle@Render2D@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetLineStyle@Render2D@@UAEXH@Z PROC			; Render2D::SetLineStyle, COMDAT
; _this$ = ecx

; 60   : 	virtual void SetLineStyle (int) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetLineStyle@Render2D@@UAEXH@Z ENDP			; Render2D::SetLineStyle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render2d.h
;	COMDAT ?SetBackground@Render2D@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_packedRGBA$ = 8					; size = 4
?SetBackground@Render2D@@UAEXK@Z PROC			; Render2D::SetBackground, COMDAT
; _this$ = ecx

; 50   : 	virtual void SetBackground(DWORD packedRGBA){ context.SetState(MPR_STA_BG_COLOR,packedRGBA); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _packedRGBA$[ebp]
	push	eax
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
	mov	esp, ebp
	pop	ebp
	ret	4
?SetBackground@Render2D@@UAEXK@Z ENDP			; Render2D::SetBackground
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render2d.h
;	COMDAT ?SetColor@Render2D@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_packedRGBA$ = 8					; size = 4
?SetColor@Render2D@@UAEXK@Z PROC			; Render2D::SetColor, COMDAT
; _this$ = ecx

; 49   : 	virtual void SetColor(DWORD packedRGBA)	{ context.RestoreState(STATE_SOLID); context.SelectForegroundColor(packedRGBA); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState
	mov	eax, DWORD PTR _packedRGBA$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?SelectForegroundColor@ContextMPR@@QAEXH@Z ; ContextMPR::SelectForegroundColor
	mov	esp, ebp
	pop	ebp
	ret	4
?SetColor@Render2D@@UAEXK@Z ENDP			; Render2D::SetColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render2d.h
;	COMDAT ?Color@Render2D@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Color@Render2D@@UAEKXZ PROC				; Render2D::Color, COMDAT
; _this$ = ecx

; 48   : 	virtual DWORD Color(void) { return context.CurrentForegroundColor(); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?CurrentForegroundColor@ContextMPR@@QAEHXZ ; ContextMPR::CurrentForegroundColor
	mov	esp, ebp
	pop	ebp
	ret	0
?Color@Render2D@@UAEKXZ ENDP				; Render2D::Color
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render2d.h
;	COMDAT ?ClearZBuffer@Render2D@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearZBuffer@Render2D@@UAEXXZ PROC			; Render2D::ClearZBuffer, COMDAT
; _this$ = ecx

; 42   : 	virtual void ClearZBuffer( void )	{ context.ClearBuffers( MPR_CI_ZBUFFER ); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?ClearBuffers@ContextMPR@@QAEXG@Z	; ContextMPR::ClearBuffers
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearZBuffer@Render2D@@UAEXXZ ENDP			; Render2D::ClearZBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render2d.h
;	COMDAT ?ClearDraw@Render2D@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearDraw@Render2D@@UAEXXZ PROC			; Render2D::ClearDraw, COMDAT
; _this$ = ecx

; 41   : 	virtual void ClearDraw( void )		{ context.ClearBuffers( MPR_CI_DRAW_BUFFER ); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?ClearBuffers@ContextMPR@@QAEXG@Z	; ContextMPR::ClearBuffers
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearDraw@Render2D@@UAEXXZ ENDP			; Render2D::ClearDraw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render2d.h
;	COMDAT ??1Render2D@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Render2D@@UAE@XZ PROC				; Render2D::~Render2D, COMDAT
; _this$ = ecx

; 32   : 	virtual ~Render2D()	{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Render2D@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1VirtualDisplay@@UAE@XZ		; VirtualDisplay::~VirtualDisplay
	mov	esp, ebp
	pop	ebp
	ret	0
??1Render2D@@UAE@XZ ENDP				; Render2D::~Render2D
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render2d.h
;	COMDAT ??0Render2D@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Render2D@@QAE@XZ PROC				; Render2D::Render2D, COMDAT
; _this$ = ecx

; 31   : 	Render2D()			{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0VirtualDisplay@@QAE@XZ		; VirtualDisplay::VirtualDisplay
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Render2D@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Render2D@@QAE@XZ ENDP				; Render2D::Render2D
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GVirtualDisplay@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GVirtualDisplay@@UAEPAXI@Z PROC			; VirtualDisplay::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1VirtualDisplay@@UAE@XZ		; VirtualDisplay::~VirtualDisplay
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GVirtualDisplay@@UAEPAXI@Z ENDP			; VirtualDisplay::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?viewportYtoPixel@VirtualDisplay@@QAEMM@Z
_TEXT	SEGMENT
tv73 = -8						; size = 4
_this$ = -4						; size = 4
_y$ = 8							; size = 4
?viewportYtoPixel@VirtualDisplay@@QAEMM@Z PROC		; VirtualDisplay::viewportYtoPixel, COMDAT
; _this$ = ecx

; 169  :     float viewportYtoPixel( float y ) { return (y * scaleY) + shiftY; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	mulss	xmm0, DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+44]
	movss	DWORD PTR tv73[ebp], xmm0
	fld	DWORD PTR tv73[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?viewportYtoPixel@VirtualDisplay@@QAEMM@Z ENDP		; VirtualDisplay::viewportYtoPixel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?viewportXtoPixel@VirtualDisplay@@QAEMM@Z
_TEXT	SEGMENT
tv73 = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?viewportXtoPixel@VirtualDisplay@@QAEMM@Z PROC		; VirtualDisplay::viewportXtoPixel, COMDAT
; _this$ = ecx

; 168  :     float viewportXtoPixel( float x ) { return (x * scaleX) + shiftX; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+40]
	movss	DWORD PTR tv73[ebp], xmm0
	fld	DWORD PTR tv73[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?viewportXtoPixel@VirtualDisplay@@QAEMM@Z ENDP		; VirtualDisplay::viewportXtoPixel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?Color@VirtualDisplay@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Color@VirtualDisplay@@UAEKXZ PROC			; VirtualDisplay::Color, COMDAT
; _this$ = ecx

; 136  : 	virtual DWORD Color( void )	{return 0x0; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?Color@VirtualDisplay@@UAEKXZ ENDP			; VirtualDisplay::Color
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?SetLineStyle@VirtualDisplay@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetLineStyle@VirtualDisplay@@UAEXH@Z PROC		; VirtualDisplay::SetLineStyle, COMDAT
; _this$ = ecx

; 135  : 	virtual void SetLineStyle (int) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetLineStyle@VirtualDisplay@@UAEXH@Z ENDP		; VirtualDisplay::SetLineStyle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?TextHeight@VirtualDisplay@@UAEMXZ
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
?TextHeight@VirtualDisplay@@UAEMXZ PROC			; VirtualDisplay::TextHeight, COMDAT
; _this$ = ecx

; 121  : 	virtual float TextHeight(void)			{ return ScreenTextHeight()/scaleY; };		// normalized screen space

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	call	?ScreenTextHeight@VirtualDisplay@@SAHXZ	; VirtualDisplay::ScreenTextHeight
	cvtsi2ss xmm0, eax
	mov	eax, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [eax+36]
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?TextHeight@VirtualDisplay@@UAEMXZ ENDP			; VirtualDisplay::TextHeight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?TextWidth@VirtualDisplay@@UAEMPAD@Z
_TEXT	SEGMENT
tv73 = -8						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
?TextWidth@VirtualDisplay@@UAEMPAD@Z PROC		; VirtualDisplay::TextWidth, COMDAT
; _this$ = ecx

; 120  : 	virtual float TextWidth(char *string)	{ return ScreenTextWidth(string)/scaleX; };	// normalized screen space

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	call	?ScreenTextWidth@VirtualDisplay@@SAHPBD@Z ; VirtualDisplay::ScreenTextWidth
	add	esp, 4
	cvtsi2ss xmm0, eax
	mov	ecx, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR tv73[ebp], xmm0
	fld	DWORD PTR tv73[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?TextWidth@VirtualDisplay@@UAEMPAD@Z ENDP		; VirtualDisplay::TextWidth
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?Arc@VirtualDisplay@@UAEXMMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_xRadius$ = 16						; size = 4
_start$ = 20						; size = 4
_stop$ = 24						; size = 4
?Arc@VirtualDisplay@@UAEXMMMMM@Z PROC			; VirtualDisplay::Arc, COMDAT
; _this$ = ecx

; 109  : 		{ OvalArc(x, y, xRadius, xRadius*scaleX/scaleY, start, stop); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	movss	xmm0, DWORD PTR _stop$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _start$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _xRadius$[ebp]
	mulss	xmm0, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [ecx+36]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _xRadius$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Arc@VirtualDisplay@@UAEXMMMMM@Z ENDP			; VirtualDisplay::Arc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?Circle@VirtualDisplay@@UAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_xRadius$ = 16						; size = 4
?Circle@VirtualDisplay@@UAEXMMM@Z PROC			; VirtualDisplay::Circle, COMDAT
; _this$ = ecx

; 107  : 		{ Oval(x, y, xRadius, xRadius*scaleX/scaleY); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _xRadius$[ebp]
	mulss	xmm0, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [ecx+36]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _xRadius$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	call	edx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Circle@VirtualDisplay@@UAEXMMM@Z ENDP			; VirtualDisplay::Circle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ??1VirtualDisplay@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1VirtualDisplay@@UAE@XZ PROC				; VirtualDisplay::~VirtualDisplay, COMDAT
; _this$ = ecx

; 86   :     virtual ~VirtualDisplay()	{ ShiAssert( ready == FALSE ); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7VirtualDisplay@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	??1ContextMPR@@UAE@XZ			; ContextMPR::~ContextMPR
	mov	esp, ebp
	pop	ebp
	ret	0
??1VirtualDisplay@@UAE@XZ ENDP				; VirtualDisplay::~VirtualDisplay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ??0VirtualDisplay@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0VirtualDisplay@@QAE@XZ PROC				; VirtualDisplay::VirtualDisplay, COMDAT
; _this$ = ecx

; 85   :     VirtualDisplay()			{ ready = FALSE; tLeft = tTop = tRight = tBottom = txRes = tyRes = 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7VirtualDisplay@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	??0ContextMPR@@QAE@XZ			; ContextMPR::ContextMPR
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+92], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262776], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262772], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262768], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262764], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262760], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262756], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0VirtualDisplay@@QAE@XZ ENDP				; VirtualDisplay::VirtualDisplay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\imagebuf.h
;	COMDAT ?targetYres@ImageBuffer@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?targetYres@ImageBuffer@@QAEHXZ PROC			; ImageBuffer::targetYres, COMDAT
; _this$ = ecx

; 46   : 	int	targetYres()	{ return height; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+296]
	mov	esp, ebp
	pop	ebp
	ret	0
?targetYres@ImageBuffer@@QAEHXZ ENDP			; ImageBuffer::targetYres
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\imagebuf.h
;	COMDAT ?targetXres@ImageBuffer@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?targetXres@ImageBuffer@@QAEHXZ PROC			; ImageBuffer::targetXres, COMDAT
; _this$ = ecx

; 45   : 	int targetXres()	{ return width; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+292]
	mov	esp, ebp
	pop	ebp
	ret	0
?targetXres@ImageBuffer@@QAEHXZ ENDP			; ImageBuffer::targetXres
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\imagebuf.h
;	COMDAT ?targetSurface@ImageBuffer@@QAEPAUIDirectDrawSurface7@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?targetSurface@ImageBuffer@@QAEPAUIDirectDrawSurface7@@XZ PROC ; ImageBuffer::targetSurface, COMDAT
; _this$ = ecx

; 42   : 	IDirectDrawSurface7 *targetSurface()	{ return m_pDDSBack; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+164]
	mov	esp, ebp
	pop	ebp
	ret	0
?targetSurface@ImageBuffer@@QAEPAUIDirectDrawSurface7@@XZ ENDP ; ImageBuffer::targetSurface
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\imagebuf.h
;	COMDAT ?GetDisplayDevice@ImageBuffer@@QAEPAVDisplayDevice@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDisplayDevice@ImageBuffer@@QAEPAVDisplayDevice@@XZ PROC ; ImageBuffer::GetDisplayDevice, COMDAT
; _this$ = ecx

; 41   : 	DisplayDevice *GetDisplayDevice()	{ return device; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDisplayDevice@ImageBuffer@@QAEPAVDisplayDevice@@XZ ENDP ; ImageBuffer::GetDisplayDevice
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\context.h
;	COMDAT ?CurrentForegroundColor@ContextMPR@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CurrentForegroundColor@ContextMPR@@QAEHXZ PROC		; ContextMPR::CurrentForegroundColor, COMDAT
; _this$ = ecx

; 708  : 	int CurrentForegroundColor(void) {return m_colFG_Raw;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?CurrentForegroundColor@ContextMPR@@QAEHXZ ENDP		; ContextMPR::CurrentForegroundColor
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GPaletteHandle@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GPaletteHandle@@QAEPAXI@Z PROC			; PaletteHandle::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1PaletteHandle@@QAE@XZ		; PaletteHandle::~PaletteHandle
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GPaletteHandle@@QAEPAXI@Z ENDP			; PaletteHandle::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GTextureHandle@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GTextureHandle@@QAEPAXI@Z PROC			; TextureHandle::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TextureHandle@@QAE@XZ		; TextureHandle::~TextureHandle
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTextureHandle@@QAEPAXI@Z ENDP			; TextureHandle::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\edge.h
;	COMDAT ?RightOf@Edge@@QAEHMM@Z
_TEXT	SEGMENT
tv77 = -12						; size = 4
_this$ = -8						; size = 4
tv69 = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?RightOf@Edge@@QAEHMM@Z PROC				; Edge::RightOf, COMDAT
; _this$ = ecx

; 67   : 	BOOL	RightOf( float x, float y )	{ return DistanceFrom(x, y) > 0.0f; };

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DistanceFrom@Edge@@QAEMMM@Z		; Edge::DistanceFrom
	fstp	DWORD PTR tv77[ebp]
	movss	xmm0, DWORD PTR tv77[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN3@RightOf
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@RightOf
$LN3@RightOf:
	mov	DWORD PTR tv69[ebp], 0
$LN4@RightOf:
	mov	eax, DWORD PTR tv69[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
?RightOf@Edge@@QAEHMM@Z ENDP				; Edge::RightOf
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\edge.h
;	COMDAT ?DistanceFrom@Edge@@QAEMMM@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?DistanceFrom@Edge@@QAEMMM@Z PROC			; Edge::DistanceFrom, COMDAT
; _this$ = ecx

; 57   : 	float	DistanceFrom( float x, float y )	{ return (A*x + B*y + C); };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+4]
	mulss	xmm1, DWORD PTR _y$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR tv78[ebp], xmm0
	fld	DWORD PTR tv78[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
?DistanceFrom@Edge@@QAEMMM@Z ENDP			; Edge::DistanceFrom
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\edge.h
;	COMDAT ?Reverse@Edge@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Reverse@Edge@@QAEXXZ PROC				; Edge::Reverse, COMDAT
; _this$ = ecx

; 45   : 	void	Reverse( void )		{ A = -A; B = -B; C = -C; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+8], xmm0
	mov	esp, ebp
	pop	ebp
	ret	0
?Reverse@Edge@@QAEXXZ ENDP				; Edge::Reverse
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\edge.h
;	COMDAT ?SetupWithVector@Edge@@QAEXMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_dx$ = 16						; size = 4
_dy$ = 20						; size = 4
?SetupWithVector@Edge@@QAEXMMMM@Z PROC			; Edge::SetupWithVector, COMDAT
; _this$ = ecx

; 37   : 	void	SetupWithVector( float x, float y, float dx, float dy ) { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 				A = dy;   B = -dx;   C = -(A*x + B*y);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR _dx$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	mulss	xmm1, DWORD PTR _y$[ebp]
	addss	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 39   : 			};

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetupWithVector@Edge@@QAEXMMMM@Z ENDP			; Edge::SetupWithVector
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\edge.h
;	COMDAT ??1Edge@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Edge@@QAE@XZ PROC					; Edge::~Edge, COMDAT
; _this$ = ecx

; 20   : 	~Edge()	{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1Edge@@QAE@XZ ENDP					; Edge::~Edge
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\edge.h
;	COMDAT ??0Edge@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Edge@@QAE@XZ PROC					; Edge::Edge, COMDAT
; _this$ = ecx

; 19   : 	Edge()	{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Edge@@QAE@XZ ENDP					; Edge::Edge
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 537  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 511  :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 430  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
END
