; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\Graphics\Utils\Matrix.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?MatrixMult_Generic@@YAXPBUTrotation@@0PAU1@@Z	; MatrixMult_Generic
PUBLIC	?MatrixMult_Generic@@YAXPBUTrotation@@MPAU1@@Z	; MatrixMult_Generic
PUBLIC	?MatrixMultTranspose_Generic@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMultTranspose_Generic
PUBLIC	?pMatrixMult1@@3P6AXPBUTrotation@@0PAU1@@ZA	; pMatrixMult1
PUBLIC	?pMatrixMult2@@3P6AXPBUTrotation@@MPAU1@@ZA	; pMatrixMult2
PUBLIC	?pMatrixMultTranspose@@3P6AXPBUTrotation@@PBUTpoint@@PAU2@@ZA ; pMatrixMultTranspose
PUBLIC	?Origin@@3UTpoint@@B				; Origin
PUBLIC	?IMatrix@@3UTrotation@@B			; IMatrix
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
?Origin@@3UTpoint@@B DD 000000000r		; 0	; Origin
	DD	000000000r			; 0
	DD	000000000r			; 0
?IMatrix@@3UTrotation@@B DD 03f800000r		; 1	; IMatrix
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
_DATA	SEGMENT
?pMatrixMult1@@3P6AXPBUTrotation@@0PAU1@@ZA DD FLAT:?MatrixMult_Generic@@YAXPBUTrotation@@0PAU1@@Z ; pMatrixMult1
?pMatrixMult2@@3P6AXPBUTrotation@@MPAU1@@ZA DD FLAT:?MatrixMult_Generic@@YAXPBUTrotation@@MPAU1@@Z ; pMatrixMult2
?pMatrixMultTranspose@@3P6AXPBUTrotation@@PBUTpoint@@PAU2@@ZA DD FLAT:?MatrixMultTranspose_Generic@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; pMatrixMultTranspose
_DATA	ENDS
PUBLIC	?MatrixLoad@@YAXPAUTrotation@@MMMMMMMMM@Z	; MatrixLoad
PUBLIC	?MatrixTranspose@@YAXPBUTrotation@@PAU1@@Z	; MatrixTranspose
PUBLIC	?MatrixMult@@YAXPBUTrotation@@0PAU1@@Z		; MatrixMult
PUBLIC	?MatrixMult@@YAXPBUTrotation@@MPAU1@@Z		; MatrixMult
PUBLIC	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
PUBLIC	?MatrixMultTranspose@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMultTranspose
PUBLIC	?SetMatrixCPUMode@@YAXH@Z			; SetMatrixCPUMode
PUBLIC	?MatrixMult_3DNow@@YAXPBUTrotation@@0PAU1@@Z	; MatrixMult_3DNow
PUBLIC	?MatrixMult_3DNow@@YAXPBUTrotation@@MPAU1@@Z	; MatrixMult_3DNow
PUBLIC	?MatrixMultTranspose_3DNow@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMultTranspose_3DNow
EXTRN	__fltused:DWORD
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\utils\matrix.cpp
_TEXT	SEGMENT
_M$ = 8							; size = 4
_P$ = 12						; size = 4
_Tgt$ = 16						; size = 4
?MatrixMultTranspose_3DNow@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z PROC ; MatrixMultTranspose_3DNow

; 164  : {

	push	ebp
	mov	ebp, esp

; 165  : 	//_trans_v1x3((float *) Tgt, (float *) M, (float *) P);	
; 166  : }

	pop	ebp
	ret	0
?MatrixMultTranspose_3DNow@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ENDP ; MatrixMultTranspose_3DNow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\utils\matrix.cpp
_TEXT	SEGMENT
_M$ = 8							; size = 4
_P$ = 12						; size = 4
_Tgt$ = 16						; size = 4
?MatrixMultTranspose_Generic@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z PROC ; MatrixMultTranspose_Generic

; 134  : {

	push	ebp
	mov	ebp, esp

; 135  : 	Tgt->x = M->M11*P->x + M->M21*P->y + M->M31*P->z;

	mov	eax, DWORD PTR _M$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _P$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _M$[ebp]
	fld	DWORD PTR [edx+12]
	mov	eax, DWORD PTR _P$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _M$[ebp]
	fld	DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _P$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _Tgt$[ebp]
	fstp	DWORD PTR [eax]

; 136  : 	Tgt->y = M->M12*P->x + M->M22*P->y + M->M32*P->z;

	mov	ecx, DWORD PTR _M$[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _P$[ebp]
	fmul	DWORD PTR [edx]
	mov	eax, DWORD PTR _M$[ebp]
	fld	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _P$[ebp]
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _M$[ebp]
	fld	DWORD PTR [edx+28]
	mov	eax, DWORD PTR _P$[ebp]
	fmul	DWORD PTR [eax+8]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _Tgt$[ebp]
	fstp	DWORD PTR [ecx+4]

; 137  : 	Tgt->z = M->M13*P->x + M->M23*P->y + M->M33*P->z;

	mov	edx, DWORD PTR _M$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _P$[ebp]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _M$[ebp]
	fld	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _P$[ebp]
	fmul	DWORD PTR [edx+4]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _M$[ebp]
	fld	DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _P$[ebp]
	fmul	DWORD PTR [ecx+8]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _Tgt$[ebp]
	fstp	DWORD PTR [edx+8]

; 138  : }

	pop	ebp
	ret	0
?MatrixMultTranspose_Generic@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ENDP ; MatrixMultTranspose_Generic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\utils\matrix.cpp
_TEXT	SEGMENT
_M$ = 8							; size = 4
_k$ = 12						; size = 4
_T$ = 16						; size = 4
?MatrixMult_3DNow@@YAXPBUTrotation@@MPAU1@@Z PROC	; MatrixMult_3DNow

; 155  : {

	push	ebp
	mov	ebp, esp

; 156  : 	//_mul_m3x3s((float *) T, (float *) M, k);
; 157  : }

	pop	ebp
	ret	0
?MatrixMult_3DNow@@YAXPBUTrotation@@MPAU1@@Z ENDP	; MatrixMult_3DNow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\utils\matrix.cpp
_TEXT	SEGMENT
_M$ = 8							; size = 4
_k$ = 12						; size = 4
_T$ = 16						; size = 4
?MatrixMult_Generic@@YAXPBUTrotation@@MPAU1@@Z PROC	; MatrixMult_Generic

; 123  : {

	push	ebp
	mov	ebp, esp

; 124  : 	T->M11 = M->M11*k;	T->M12 = M->M12*k;	T->M13 = M->M13*k;

	mov	eax, DWORD PTR _M$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _T$[ebp]
	fstp	DWORD PTR [ecx]
	mov	edx, DWORD PTR _M$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _T$[ebp]
	fstp	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _M$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _T$[ebp]
	fstp	DWORD PTR [edx+8]

; 125  : 	T->M21 = M->M21*k;	T->M22 = M->M22*k;	T->M23 = M->M23*k;

	mov	eax, DWORD PTR _M$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _T$[ebp]
	fstp	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _M$[ebp]
	fld	DWORD PTR [edx+16]
	fmul	DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _T$[ebp]
	fstp	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _M$[ebp]
	fld	DWORD PTR [ecx+20]
	fmul	DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _T$[ebp]
	fstp	DWORD PTR [edx+20]

; 126  : 	T->M31 = M->M31*k;	T->M32 = M->M32*k;	T->M33 = M->M33*k;

	mov	eax, DWORD PTR _M$[ebp]
	fld	DWORD PTR [eax+24]
	fmul	DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _T$[ebp]
	fstp	DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _M$[ebp]
	fld	DWORD PTR [edx+28]
	fmul	DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _T$[ebp]
	fstp	DWORD PTR [eax+28]
	mov	ecx, DWORD PTR _M$[ebp]
	fld	DWORD PTR [ecx+32]
	fmul	DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _T$[ebp]
	fstp	DWORD PTR [edx+32]

; 127  : }

	pop	ebp
	ret	0
?MatrixMult_Generic@@YAXPBUTrotation@@MPAU1@@Z ENDP	; MatrixMult_Generic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\utils\matrix.cpp
_TEXT	SEGMENT
_S1$ = 8						; size = 4
_S2$ = 12						; size = 4
_T$ = 16						; size = 4
?MatrixMult_3DNow@@YAXPBUTrotation@@0PAU1@@Z PROC	; MatrixMult_3DNow

; 147  : {

	push	ebp
	mov	ebp, esp

; 148  : 	//_mul_m3x3((float *) T, (float *) S1, (float *) S2);
; 149  : }

	pop	ebp
	ret	0
?MatrixMult_3DNow@@YAXPBUTrotation@@0PAU1@@Z ENDP	; MatrixMult_3DNow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\utils\matrix.cpp
_TEXT	SEGMENT
_S1$ = 8						; size = 4
_S2$ = 12						; size = 4
_T$ = 16						; size = 4
?MatrixMult_Generic@@YAXPBUTrotation@@0PAU1@@Z PROC	; MatrixMult_Generic

; 104  : {

	push	ebp
	mov	ebp, esp

; 105  : 	T->M11 = S1->M11*S2->M11 + S1->M12*S2->M21 + S1->M13*S2->M31;

	mov	eax, DWORD PTR _S1$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _S2$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _S1$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _S2$[ebp]
	fmul	DWORD PTR [eax+12]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _S1$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _S2$[ebp]
	fmul	DWORD PTR [edx+24]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _T$[ebp]
	fstp	DWORD PTR [eax]

; 106  : 	T->M12 = S1->M11*S2->M12 + S1->M12*S2->M22 + S1->M13*S2->M32;

	mov	ecx, DWORD PTR _S1$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR _S2$[ebp]
	fmul	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _S1$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _S2$[ebp]
	fmul	DWORD PTR [ecx+16]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _S1$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _S2$[ebp]
	fmul	DWORD PTR [eax+28]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _T$[ebp]
	fstp	DWORD PTR [ecx+4]

; 107  : 	T->M13 = S1->M11*S2->M13 + S1->M12*S2->M23 + S1->M13*S2->M33;

	mov	edx, DWORD PTR _S1$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _S2$[ebp]
	fmul	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _S1$[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _S2$[ebp]
	fmul	DWORD PTR [edx+20]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _S1$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _S2$[ebp]
	fmul	DWORD PTR [ecx+32]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _T$[ebp]
	fstp	DWORD PTR [edx+8]

; 108  : 
; 109  : 	T->M21 = S1->M21*S2->M11 + S1->M22*S2->M21 + S1->M23*S2->M31;

	mov	eax, DWORD PTR _S1$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _S2$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _S1$[ebp]
	fld	DWORD PTR [edx+16]
	mov	eax, DWORD PTR _S2$[ebp]
	fmul	DWORD PTR [eax+12]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _S1$[ebp]
	fld	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _S2$[ebp]
	fmul	DWORD PTR [edx+24]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _T$[ebp]
	fstp	DWORD PTR [eax+12]

; 110  : 	T->M22 = S1->M21*S2->M12 + S1->M22*S2->M22 + S1->M23*S2->M32;

	mov	ecx, DWORD PTR _S1$[ebp]
	fld	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _S2$[ebp]
	fmul	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _S1$[ebp]
	fld	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _S2$[ebp]
	fmul	DWORD PTR [ecx+16]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _S1$[ebp]
	fld	DWORD PTR [edx+20]
	mov	eax, DWORD PTR _S2$[ebp]
	fmul	DWORD PTR [eax+28]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _T$[ebp]
	fstp	DWORD PTR [ecx+16]

; 111  : 	T->M23 = S1->M21*S2->M13 + S1->M22*S2->M23 + S1->M23*S2->M33;

	mov	edx, DWORD PTR _S1$[ebp]
	fld	DWORD PTR [edx+12]
	mov	eax, DWORD PTR _S2$[ebp]
	fmul	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _S1$[ebp]
	fld	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _S2$[ebp]
	fmul	DWORD PTR [edx+20]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _S1$[ebp]
	fld	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _S2$[ebp]
	fmul	DWORD PTR [ecx+32]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _T$[ebp]
	fstp	DWORD PTR [edx+20]

; 112  : 									 				   
; 113  : 	T->M31 = S1->M31*S2->M11 + S1->M32*S2->M21 + S1->M33*S2->M31;

	mov	eax, DWORD PTR _S1$[ebp]
	fld	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _S2$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _S1$[ebp]
	fld	DWORD PTR [edx+28]
	mov	eax, DWORD PTR _S2$[ebp]
	fmul	DWORD PTR [eax+12]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _S1$[ebp]
	fld	DWORD PTR [ecx+32]
	mov	edx, DWORD PTR _S2$[ebp]
	fmul	DWORD PTR [edx+24]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _T$[ebp]
	fstp	DWORD PTR [eax+24]

; 114  : 	T->M32 = S1->M31*S2->M12 + S1->M32*S2->M22 + S1->M33*S2->M32;

	mov	ecx, DWORD PTR _S1$[ebp]
	fld	DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _S2$[ebp]
	fmul	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _S1$[ebp]
	fld	DWORD PTR [eax+28]
	mov	ecx, DWORD PTR _S2$[ebp]
	fmul	DWORD PTR [ecx+16]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _S1$[ebp]
	fld	DWORD PTR [edx+32]
	mov	eax, DWORD PTR _S2$[ebp]
	fmul	DWORD PTR [eax+28]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _T$[ebp]
	fstp	DWORD PTR [ecx+28]

; 115  : 	T->M33 = S1->M31*S2->M13 + S1->M32*S2->M23 + S1->M33*S2->M33;

	mov	edx, DWORD PTR _S1$[ebp]
	fld	DWORD PTR [edx+24]
	mov	eax, DWORD PTR _S2$[ebp]
	fmul	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _S1$[ebp]
	fld	DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _S2$[ebp]
	fmul	DWORD PTR [edx+20]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _S1$[ebp]
	fld	DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _S2$[ebp]
	fmul	DWORD PTR [ecx+32]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _T$[ebp]
	fstp	DWORD PTR [edx+32]

; 116  : }

	pop	ebp
	ret	0
?MatrixMult_Generic@@YAXPBUTrotation@@0PAU1@@Z ENDP	; MatrixMult_Generic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\utils\matrix.cpp
_TEXT	SEGMENT
tv64 = -4						; size = 4
_nMode$ = 8						; size = 4
?SetMatrixCPUMode@@YAXH@Z PROC				; SetMatrixCPUMode

; 172  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 173  : 	switch(nMode)

	mov	eax, DWORD PTR _nMode$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN4@SetMatrixC
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN3@SetMatrixC
	jmp	SHORT $LN7@SetMatrixC
$LN4@SetMatrixC:

; 174  : 	{
; 175  : 		case 0:
; 176  : 		{
; 177  : 			pMatrixMult1 = MatrixMult_Generic;

	mov	DWORD PTR ?pMatrixMult1@@3P6AXPBUTrotation@@0PAU1@@ZA, OFFSET ?MatrixMult_Generic@@YAXPBUTrotation@@0PAU1@@Z ; pMatrixMult1, MatrixMult_Generic

; 178  : 			pMatrixMult2 = MatrixMult_Generic;

	mov	DWORD PTR ?pMatrixMult2@@3P6AXPBUTrotation@@MPAU1@@ZA, OFFSET ?MatrixMult_Generic@@YAXPBUTrotation@@MPAU1@@Z ; pMatrixMult2, MatrixMult_Generic

; 179  : 			pMatrixMultTranspose = MatrixMultTranspose_Generic;

	mov	DWORD PTR ?pMatrixMultTranspose@@3P6AXPBUTrotation@@PBUTpoint@@PAU2@@ZA, OFFSET ?MatrixMultTranspose_Generic@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; pMatrixMultTranspose, MatrixMultTranspose_Generic

; 180  : 			break;

	jmp	SHORT $LN7@SetMatrixC
$LN3@SetMatrixC:

; 181  : 		}
; 182  : 
; 183  : 		case 1:
; 184  : 		{
; 185  : 			pMatrixMult1 = MatrixMult_3DNow;

	mov	DWORD PTR ?pMatrixMult1@@3P6AXPBUTrotation@@0PAU1@@ZA, OFFSET ?MatrixMult_3DNow@@YAXPBUTrotation@@0PAU1@@Z ; pMatrixMult1, MatrixMult_3DNow

; 186  : 			pMatrixMult2 = MatrixMult_3DNow;

	mov	DWORD PTR ?pMatrixMult2@@3P6AXPBUTrotation@@MPAU1@@ZA, OFFSET ?MatrixMult_3DNow@@YAXPBUTrotation@@MPAU1@@Z ; pMatrixMult2, MatrixMult_3DNow

; 187  : 			pMatrixMultTranspose = MatrixMultTranspose_3DNow;

	mov	DWORD PTR ?pMatrixMultTranspose@@3P6AXPBUTrotation@@PBUTpoint@@PAU2@@ZA, OFFSET ?MatrixMultTranspose_3DNow@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; pMatrixMultTranspose, MatrixMultTranspose_3DNow
$LN7@SetMatrixC:

; 188  : 			break;
; 189  : 		}
; 190  : 
; 191  : 		case 2:
; 192  : 		{
; 193  : 			// pMatrixMult1 = MatrixMult_ISSE;
; 194  : 			// pMatrixMult2 = MatrixMult_ISSE;
; 195  : 			// pMatrixMultTranspose = MatrixMultTranspose_ISSE;
; 196  : 			// break;
; 197  : 		}
; 198  : 
; 199  : 		default: ShiAssert(false);
; 200  : 	}
; 201  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SetMatrixCPUMode@@YAXH@Z ENDP				; SetMatrixCPUMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\utils\matrix.cpp
_TEXT	SEGMENT
_M$ = 8							; size = 4
_P$ = 12						; size = 4
_Tgt$ = 16						; size = 4
?MatrixMultTranspose@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z PROC ; MatrixMultTranspose

; 90   : {

	push	ebp
	mov	ebp, esp

; 91   : 	pMatrixMultTranspose(M, P, Tgt);

	mov	eax, DWORD PTR _Tgt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _P$[ebp]
	push	ecx
	mov	edx, DWORD PTR _M$[ebp]
	push	edx
	call	DWORD PTR ?pMatrixMultTranspose@@3P6AXPBUTrotation@@PBUTpoint@@PAU2@@ZA ; pMatrixMultTranspose
	add	esp, 12					; 0000000cH

; 92   : }

	pop	ebp
	ret	0
?MatrixMultTranspose@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ENDP ; MatrixMultTranspose
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\utils\matrix.cpp
_TEXT	SEGMENT
_M$ = 8							; size = 4
_P$ = 12						; size = 4
_Tgt$ = 16						; size = 4
?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z PROC	; MatrixMult

; 78   : {

	push	ebp
	mov	ebp, esp

; 79   : 	Tgt->x = M->M11*P->x + M->M12*P->y + M->M13*P->z;

	mov	eax, DWORD PTR _M$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _P$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _M$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _P$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _M$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _P$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _Tgt$[ebp]
	fstp	DWORD PTR [eax]

; 80   : 	Tgt->y = M->M21*P->x + M->M22*P->y + M->M23*P->z;

	mov	ecx, DWORD PTR _M$[ebp]
	fld	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _P$[ebp]
	fmul	DWORD PTR [edx]
	mov	eax, DWORD PTR _M$[ebp]
	fld	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _P$[ebp]
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _M$[ebp]
	fld	DWORD PTR [edx+20]
	mov	eax, DWORD PTR _P$[ebp]
	fmul	DWORD PTR [eax+8]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _Tgt$[ebp]
	fstp	DWORD PTR [ecx+4]

; 81   : 	Tgt->z = M->M31*P->x + M->M32*P->y + M->M33*P->z;

	mov	edx, DWORD PTR _M$[ebp]
	fld	DWORD PTR [edx+24]
	mov	eax, DWORD PTR _P$[ebp]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _M$[ebp]
	fld	DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _P$[ebp]
	fmul	DWORD PTR [edx+4]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _M$[ebp]
	fld	DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _P$[ebp]
	fmul	DWORD PTR [ecx+8]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _Tgt$[ebp]
	fstp	DWORD PTR [edx+8]

; 82   : }

	pop	ebp
	ret	0
?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ENDP	; MatrixMult
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\utils\matrix.cpp
_TEXT	SEGMENT
_M$ = 8							; size = 4
_k$ = 12						; size = 4
_T$ = 16						; size = 4
?MatrixMult@@YAXPBUTrotation@@MPAU1@@Z PROC		; MatrixMult

; 69   : {

	push	ebp
	mov	ebp, esp

; 70   : 	pMatrixMult2(M, k, T);

	mov	eax, DWORD PTR _T$[ebp]
	push	eax
	push	ecx
	fld	DWORD PTR _k$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _M$[ebp]
	push	ecx
	call	DWORD PTR ?pMatrixMult2@@3P6AXPBUTrotation@@MPAU1@@ZA ; pMatrixMult2
	add	esp, 12					; 0000000cH

; 71   : }

	pop	ebp
	ret	0
?MatrixMult@@YAXPBUTrotation@@MPAU1@@Z ENDP		; MatrixMult
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\utils\matrix.cpp
_TEXT	SEGMENT
_S1$ = 8						; size = 4
_S2$ = 12						; size = 4
_T$ = 16						; size = 4
?MatrixMult@@YAXPBUTrotation@@0PAU1@@Z PROC		; MatrixMult

; 60   : {

	push	ebp
	mov	ebp, esp

; 61   : 	pMatrixMult1(S1, S2, T);

	mov	eax, DWORD PTR _T$[ebp]
	push	eax
	mov	ecx, DWORD PTR _S2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _S1$[ebp]
	push	edx
	call	DWORD PTR ?pMatrixMult1@@3P6AXPBUTrotation@@0PAU1@@ZA ; pMatrixMult1
	add	esp, 12					; 0000000cH

; 62   : }

	pop	ebp
	ret	0
?MatrixMult@@YAXPBUTrotation@@0PAU1@@Z ENDP		; MatrixMult
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\utils\matrix.cpp
_TEXT	SEGMENT
_Src$ = 8						; size = 4
_T$ = 12						; size = 4
?MatrixTranspose@@YAXPBUTrotation@@PAU1@@Z PROC		; MatrixTranspose

; 50   : {

	push	ebp
	mov	ebp, esp

; 51   : 	T->M11 = Src->M11,	T->M12 = Src->M21,	T->M13 = Src->M31;

	mov	eax, DWORD PTR _T$[ebp]
	mov	ecx, DWORD PTR _Src$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	mov	edx, DWORD PTR _T$[ebp]
	mov	eax, DWORD PTR _Src$[ebp]
	fld	DWORD PTR [eax+12]
	fstp	DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _T$[ebp]
	mov	edx, DWORD PTR _Src$[ebp]
	fld	DWORD PTR [edx+24]
	fstp	DWORD PTR [ecx+8]

; 52   : 	T->M21 = Src->M12,	T->M22 = Src->M22,	T->M23 = Src->M32;

	mov	eax, DWORD PTR _T$[ebp]
	mov	ecx, DWORD PTR _Src$[ebp]
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [eax+12]
	mov	edx, DWORD PTR _T$[ebp]
	mov	eax, DWORD PTR _Src$[ebp]
	fld	DWORD PTR [eax+16]
	fstp	DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _T$[ebp]
	mov	edx, DWORD PTR _Src$[ebp]
	fld	DWORD PTR [edx+28]
	fstp	DWORD PTR [ecx+20]

; 53   : 	T->M31 = Src->M13,	T->M32 = Src->M23,	T->M33 = Src->M33;

	mov	eax, DWORD PTR _T$[ebp]
	mov	ecx, DWORD PTR _Src$[ebp]
	fld	DWORD PTR [ecx+8]
	fstp	DWORD PTR [eax+24]
	mov	edx, DWORD PTR _T$[ebp]
	mov	eax, DWORD PTR _Src$[ebp]
	fld	DWORD PTR [eax+20]
	fstp	DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _T$[ebp]
	mov	edx, DWORD PTR _Src$[ebp]
	fld	DWORD PTR [edx+32]
	fstp	DWORD PTR [ecx+32]

; 54   : }

	pop	ebp
	ret	0
?MatrixTranspose@@YAXPBUTrotation@@PAU1@@Z ENDP		; MatrixTranspose
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\utils\matrix.cpp
_TEXT	SEGMENT
_T$ = 8							; size = 4
_a11$ = 12						; size = 4
_a12$ = 16						; size = 4
_a13$ = 20						; size = 4
_a21$ = 24						; size = 4
_a22$ = 28						; size = 4
_a23$ = 32						; size = 4
_a31$ = 36						; size = 4
_a32$ = 40						; size = 4
_a33$ = 44						; size = 4
?MatrixLoad@@YAXPAUTrotation@@MMMMMMMMM@Z PROC		; MatrixLoad

; 39   : {

	push	ebp
	mov	ebp, esp

; 40   : 	T->M11 = a11,	T->M12 = a12,	T->M13 = a13;

	mov	eax, DWORD PTR _T$[ebp]
	movss	xmm0, DWORD PTR _a11$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	ecx, DWORD PTR _T$[ebp]
	movss	xmm0, DWORD PTR _a12$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	mov	edx, DWORD PTR _T$[ebp]
	movss	xmm0, DWORD PTR _a13$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 41   : 	T->M21 = a21,	T->M22 = a22,	T->M23 = a23;

	mov	eax, DWORD PTR _T$[ebp]
	movss	xmm0, DWORD PTR _a21$[ebp]
	movss	DWORD PTR [eax+12], xmm0
	mov	ecx, DWORD PTR _T$[ebp]
	movss	xmm0, DWORD PTR _a22$[ebp]
	movss	DWORD PTR [ecx+16], xmm0
	mov	edx, DWORD PTR _T$[ebp]
	movss	xmm0, DWORD PTR _a23$[ebp]
	movss	DWORD PTR [edx+20], xmm0

; 42   : 	T->M31 = a31,	T->M32 = a32,	T->M33 = a33;

	mov	eax, DWORD PTR _T$[ebp]
	movss	xmm0, DWORD PTR _a31$[ebp]
	movss	DWORD PTR [eax+24], xmm0
	mov	ecx, DWORD PTR _T$[ebp]
	movss	xmm0, DWORD PTR _a32$[ebp]
	movss	DWORD PTR [ecx+28], xmm0
	mov	edx, DWORD PTR _T$[ebp]
	movss	xmm0, DWORD PTR _a33$[ebp]
	movss	DWORD PTR [edx+32], xmm0

; 43   : }						    

	pop	ebp
	ret	0
?MatrixLoad@@YAXPAUTrotation@@MMMMMMMMM@Z ENDP		; MatrixLoad
_TEXT	ENDS
END
