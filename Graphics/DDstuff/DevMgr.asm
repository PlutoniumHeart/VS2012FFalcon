; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\Graphics\DDstuff\DevMgr.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?VT@?$CVarTypeInfo@_J@ATL@@2GB			; ATL::CVarTypeInfo<__int64>::VT
PUBLIC	?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ ; ATL::CVarTypeInfo<__int64>::pmField
PUBLIC	___pobjMapEntryFirst
PUBLIC	___pobjMapEntryLast
PUBLIC	?VT@?$CVarTypeInfo@PA_J@ATL@@2GB		; ATL::CVarTypeInfo<__int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ ; ATL::CVarTypeInfo<__int64 *>::pmField
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?VT@?$CVarTypeInfo@_K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned __int64>::VT
PUBLIC	??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@	; `string'
PUBLIC	?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64>::pmField
PUBLIC	??_C@_08PICKODJL@FileType?$AA@			; `string'
PUBLIC	??_C@_09JKPGEJCH@Interface?$AA@			; `string'
PUBLIC	??_C@_08PPIOJEA@Hardware?$AA@			; `string'
PUBLIC	?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA	; ATL::_pPerfRegFunc
PUBLIC	??_C@_04IHBFOLAC@Mime?$AA@			; `string'
PUBLIC	?_pPerfUnRegFunc@ATL@@3P6AJXZA			; ATL::_pPerfUnRegFunc
PUBLIC	??_C@_03DDIMFGBA@SAM?$AA@			; `string'
PUBLIC	?_AtlRegisterPerUser@ATL@@3_NA			; ATL::_AtlRegisterPerUser
PUBLIC	??_C@_08LOPHEHKG@SECURITY?$AA@			; `string'
PUBLIC	??_C@_06FDHFNJBJ@SYSTEM?$AA@			; `string'
PUBLIC	??_C@_08KEKAJNJI@Software?$AA@			; `string'
PUBLIC	??_C@_07KJLOKDKB@TypeLib?$AA@			; `string'
PUBLIC	?VT@?$CVarTypeInfo@PA_K@ATL@@2GB		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
PUBLIC	__GUID_00000000_0000_0000_c000_000000000046
PUBLIC	?VT@?$CVarTypeInfo@M@ATL@@2GB			; ATL::CVarTypeInfo<float>::VT
PUBLIC	?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ ; ATL::CVarTypeInfo<float>::pmField
PUBLIC	__GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
PUBLIC	?VT@?$CVarTypeInfo@PAM@ATL@@2GB			; ATL::CVarTypeInfo<float *>::VT
PUBLIC	__GUID_00020400_0000_0000_c000_000000000046
PUBLIC	?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ ; ATL::CVarTypeInfo<float *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@N@ATL@@2GB			; ATL::CVarTypeInfo<double>::VT
PUBLIC	?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ ; ATL::CVarTypeInfo<double>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAN@ATL@@2GB			; ATL::CVarTypeInfo<double *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ ; ATL::CVarTypeInfo<double *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB	; ATL::CVarTypeInfo<tagVARIANT *>::VT
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	__GUID_0002e012_0000_0000_c000_000000000046
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?VT@?$CVarTypeInfo@PA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ ; ATL::CVarTypeInfo<wchar_t *>::pmField
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t * *>::VT
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ ; ATL::CVarTypeInfo<wchar_t * *>::pmField
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown *>::VT
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown *>::pmField
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown * *>::pmField
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	__GUID_0000010c_0000_0000_c000_000000000046
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch *>::VT
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch *>::pmField
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	??_C@_05GIBEAPNE@CLSID?$AA@			; `string'
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	_IID_IAxWinHostWindow
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch * *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY>::VT
PUBLIC	?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY>::pmField
PUBLIC	??_C@_05PDIKPLII@AppID?$AA@			; `string'
PUBLIC	?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY *>::VT
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY *>::pmField
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?chDirSep@ATL@@3DB				; ATL::chDirSep
PUBLIC	?chRightBracket@ATL@@3DB			; ATL::chRightBracket
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?chLeftBracket@ATL@@3DB				; ATL::chLeftBracket
PUBLIC	?chQuote@ATL@@3DB				; ATL::chQuote
PUBLIC	?chEquals@ATL@@3DB				; ATL::chEquals
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?szStringVal@ATL@@3QBDB				; ATL::szStringVal
PUBLIC	??_C@_01CPLAODJH@S?$AA@				; `string'
PUBLIC	?multiszStringVal@ATL@@3QBDB			; ATL::multiszStringVal
PUBLIC	_IID_IAxWinHostWindowLic
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	??_C@_01PLPBNMEI@M?$AA@				; `string'
PUBLIC	?szDwordVal@ATL@@3QBDB				; ATL::szDwordVal
PUBLIC	??_C@_01CKDDGHAB@D?$AA@				; `string'
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?szBinaryVal@ATL@@3QBDB				; ATL::szBinaryVal
PUBLIC	??_C@_01HMGJMAIH@B?$AA@				; `string'
PUBLIC	?szValToken@ATL@@3QBDB				; ATL::szValToken
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	??_C@_03LAIAPFCB@Val?$AA@			; `string'
PUBLIC	?szForceRemove@ATL@@3QBDB			; ATL::szForceRemove
PUBLIC	??_C@_0M@DBGDLGLL@ForceRemove?$AA@		; `string'
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?szNoRemove@ATL@@3QBDB				; ATL::szNoRemove
PUBLIC	??_C@_08KAAPDIAN@NoRemove?$AA@			; `string'
PUBLIC	?szDelete@ATL@@3QBDB				; ATL::szDelete
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	??_C@_06JBKGCNBB@Delete?$AA@			; `string'
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA	; ATL::CComApartment::ATL_CREATE_OBJECT
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	_IID_IAxWinAmbientDispatch
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A ; ATL::_pAtlAutoThreadModule
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?m_bInitFailed@CAtlBaseModule@ATL@@2_NA		; ATL::CAtlBaseModule::m_bInitFailed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	__GUID_00000000_0000_0000_0000_000000000000
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?MAX_VALUE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_VALUE
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?rgszNeverDelete@CRegParser@ATL@@1QBQBDB	; ATL::CRegParser::rgszNeverDelete
PUBLIC	?cbNeverDelete@CRegParser@ATL@@1HB		; ATL::CRegParser::cbNeverDelete
PUBLIC	?MAX_TYPE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_TYPE
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	_IID_IAxWinAmbientDispatchEx
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	_IID_IInternalConnection
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	__GUID_1cf2b120_547d_101b_8e65_08002b2bd119
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?_pAtlModule@ATL@@3PAVCAtlModule@1@A		; ATL::_pAtlModule
PUBLIC	?m_libid@CAtlModule@ATL@@2U_GUID@@A		; ATL::CAtlModule::m_libid
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	__GUID_00000146_0000_0000_c000_000000000046
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?VT@?$CVarTypeInfo@D@ATL@@2GB			; ATL::CVarTypeInfo<char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ ; ATL::CVarTypeInfo<char>::pmField
PUBLIC	?VT@?$CVarTypeInfo@E@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ ; ATL::CVarTypeInfo<unsigned char>::pmField
PUBLIC	_CLSID_Registrar
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?_Min@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Min
PUBLIC	?VT@?$CVarTypeInfo@PAD@ATL@@2GB			; ATL::CVarTypeInfo<char *>::VT
PUBLIC	?_Max@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Max
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ ; ATL::CVarTypeInfo<char *>::pmField
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?_Min@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Min
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?_Max@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Max
PUBLIC	?VT@?$CVarTypeInfo@PAE@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char *>::VT
PUBLIC	__GUID_00000109_0000_0000_c000_000000000046
PUBLIC	?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ ; ATL::CVarTypeInfo<unsigned char *>::pmField
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?_Min@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Min
PUBLIC	__GUID_b196b284_bab4_101a_b69c_00aa00341d07
PUBLIC	?_Max@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Max
PUBLIC	?VT@?$CVarTypeInfo@F@ATL@@2GB			; ATL::CVarTypeInfo<short>::VT
PUBLIC	_IID_IRegistrar
PUBLIC	?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ ; ATL::CVarTypeInfo<short>::pmField
PUBLIC	?_Min@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Min
PUBLIC	?_Max@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Max
PUBLIC	?VT@?$CVarTypeInfo@PAF@ATL@@2GB			; ATL::CVarTypeInfo<short *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ ; ATL::CVarTypeInfo<short *>::pmField
PUBLIC	?_Min@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Min
PUBLIC	__GUID_00000001_0000_0000_c000_000000000046
PUBLIC	?_Max@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Max
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?VT@?$CVarTypeInfo@G@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short>::VT
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ ; ATL::CVarTypeInfo<unsigned short>::pmField
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	__GUID_00020401_0000_0000_c000_000000000046
PUBLIC	?_Min@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Min
PUBLIC	_LIBID_ATLLib
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?_Max@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Max
PUBLIC	__GUID_00020412_0000_0000_c000_000000000046
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?VT@?$CVarTypeInfo@PAG@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short *>::VT
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ ; ATL::CVarTypeInfo<unsigned short *>::pmField
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?VT@?$CVarTypeInfo@H@ATL@@2GB			; ATL::CVarTypeInfo<int>::VT
PUBLIC	?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ ; ATL::CVarTypeInfo<int>::pmField
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?VT@?$CVarTypeInfo@PAH@ATL@@2GB			; ATL::CVarTypeInfo<int *>::VT
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ ; ATL::CVarTypeInfo<int *>::pmField
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?VT@?$CVarTypeInfo@I@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int>::VT
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ ; ATL::CVarTypeInfo<unsigned int>::pmField
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?VT@?$CVarTypeInfo@PAI@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ ; ATL::CVarTypeInfo<unsigned int *>::pmField
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?HighResolutionHackFlag@@3HA			; HighResolutionHackFlag
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?VT@?$CVarTypeInfo@J@ATL@@2GB			; ATL::CVarTypeInfo<long>::VT
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ ; ATL::CVarTypeInfo<long>::pmField
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?_pModule@ATL@@3PAVCComModule@1@A		; ATL::_pModule
PUBLIC	?pfnDirectDrawEnumerateEx@@3P6GJP6GHPAU_GUID@@PAD1PAXPAUHMONITOR__@@@Z2K@ZA ; pfnDirectDrawEnumerateEx
PUBLIC	?pfnDirectDrawCreateEx@@3P6GJPAU_GUID@@PAPAXABU1@PAUIUnknown@@@ZA ; pfnDirectDrawCreateEx
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?VT@?$CVarTypeInfo@PAJ@ATL@@2GB			; ATL::CVarTypeInfo<long *>::VT
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ ; ATL::CVarTypeInfo<long *>::pmField
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	_IID_IDocHostUIHandlerDispatch
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?VT@?$CVarTypeInfo@K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long>::VT
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ ; ATL::CVarTypeInfo<unsigned long>::pmField
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?VT@?$CVarTypeInfo@PAK@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long *>::VT
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ ; ATL::CVarTypeInfo<unsigned long *>::pmField
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA
_BSS	SEGMENT
?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA DD 01H DUP (?) ; ATL::_pPerfRegFunc
_BSS	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZA
_BSS	SEGMENT
?_pPerfUnRegFunc@ATL@@3P6AJXZA DD 01H DUP (?)		; ATL::_pPerfUnRegFunc
_BSS	ENDS
;	COMDAT ?_AtlRegisterPerUser@ATL@@3_NA
_BSS	SEGMENT
?_AtlRegisterPerUser@ATL@@3_NA DB 01H DUP (?)		; ATL::_AtlRegisterPerUser
_BSS	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_BSS	SEGMENT
?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA DD 01H DUP (?) ; ATL::CComApartment::ATL_CREATE_OBJECT
_BSS	ENDS
;	COMDAT ?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A
_BSS	SEGMENT
?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A DD 01H DUP (?) ; ATL::_pAtlAutoThreadModule
_BSS	ENDS
;	COMDAT ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA
_BSS	SEGMENT
?m_bInitFailed@CAtlBaseModule@ATL@@2_NA DB 01H DUP (?)	; ATL::CAtlBaseModule::m_bInitFailed
_BSS	ENDS
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_BSS	SEGMENT
?_pAtlModule@ATL@@3PAVCAtlModule@1@A DD 01H DUP (?)	; ATL::_pAtlModule
_BSS	ENDS
;	COMDAT ?m_libid@CAtlModule@ATL@@2U_GUID@@A
_BSS	SEGMENT
?m_libid@CAtlModule@ATL@@2U_GUID@@A DB 010H DUP (?)	; ATL::CAtlModule::m_libid
_BSS	ENDS
_BSS	SEGMENT
?HighResolutionHackFlag@@3HA DD 01H DUP (?)		; HighResolutionHackFlag
_BSS	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_BSS	SEGMENT
?_pModule@ATL@@3PAVCComModule@1@A DD 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
_BSS	SEGMENT
?pfnDirectDrawEnumerateEx@@3P6GJP6GHPAU_GUID@@PAD1PAXPAUHMONITOR__@@@Z2K@ZA DD 01H DUP (?) ; pfnDirectDrawEnumerateEx
?pfnDirectDrawCreateEx@@3P6GJPAU_GUID@@PAPAXABU1@PAUIUnknown@@@ZA DD 01H DUP (?) ; pfnDirectDrawCreateEx
_BSS	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long *>::pmField
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAK@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAK@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned long *>::VT
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long>::pmField
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@K@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned long>::VT
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
_IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ DD 08H ; ATL::CVarTypeInfo<long *>::pmField
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAJ@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAJ@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<long *>::VT
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ DD 08H ; ATL::CVarTypeInfo<long>::pmField
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@J@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<long>::VT
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAI@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAI@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned int *>::VT
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int>::pmField
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@I@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@I@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned int>::VT
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ DD 08H ; ATL::CVarTypeInfo<int *>::pmField
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAH@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAH@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<int *>::VT
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ DD 08H ; ATL::CVarTypeInfo<int>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@H@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@H@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<int>::VT
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short *>::pmField
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAG@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAG@ATL@@2GB DW 04012H		; ATL::CVarTypeInfo<unsigned short *>::VT
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT __GUID_00020412_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020412_0000_0000_c000_000000000046 DD 020412H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Max@?$AtlLimits@_K@ATL@@2_KB DQ ffffffffffffffffH	; ATL::AtlLimits<unsigned __int64>::_Max
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT
_LIBID_ATLLib DD 044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Min@?$AtlLimits@_K@ATL@@2_KB DQ 0000000000000000H	; ATL::AtlLimits<unsigned __int64>::_Min
CONST	ENDS
;	COMDAT __GUID_00020401_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020401_0000_0000_c000_000000000046 DD 020401H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short>::pmField
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@G@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@G@ATL@@2GB DW 012H			; ATL::CVarTypeInfo<unsigned short>::VT
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Max@?$AtlLimits@_J@ATL@@2_JB DQ 7fffffffffffffffH	; ATL::AtlLimits<__int64>::_Max
CONST	ENDS
;	COMDAT __GUID_00000001_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000001_0000_0000_c000_000000000046 DD 01H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Min@?$AtlLimits@_J@ATL@@2_JB DQ 8000000000000000H	; ATL::AtlLimits<__int64>::_Min
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ DD 08H ; ATL::CVarTypeInfo<short *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAF@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAF@ATL@@2GB DW 04002H		; ATL::CVarTypeInfo<short *>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Max@?$AtlLimits@K@ATL@@2KB DD 0ffffffffH		; ATL::AtlLimits<unsigned long>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Min@?$AtlLimits@K@ATL@@2KB DD 00H			; ATL::AtlLimits<unsigned long>::_Min
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ DD 08H ; ATL::CVarTypeInfo<short>::pmField
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT
_IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@F@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@F@ATL@@2GB DW 02H			; ATL::CVarTypeInfo<short>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Max@?$AtlLimits@J@ATL@@2JB DD 07fffffffH		; ATL::AtlLimits<long>::_Max
CONST	ENDS
;	COMDAT __GUID_b196b284_bab4_101a_b69c_00aa00341d07
CONST	SEGMENT
__GUID_b196b284_bab4_101a_b69c_00aa00341d07 DD 0b196b284H
	DW	0bab4H
	DW	0101aH
	DB	0b6H
	DB	09cH
	DB	00H
	DB	0aaH
	DB	00H
	DB	034H
	DB	01dH
	DB	07H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Min@?$AtlLimits@J@ATL@@2JB DD 080000000H		; ATL::AtlLimits<long>::_Min
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT __GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
CONST	SEGMENT
__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713 DD 07fd52380H
	DW	04e07H
	DW	0101bH
	DB	0aeH
	DB	02dH
	DB	08H
	DB	00H
	DB	02bH
	DB	02eH
	DB	0c7H
	DB	013H
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char *>::pmField
CONST	ENDS
;	COMDAT __GUID_00000109_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000109_0000_0000_c000_000000000046 DD 0109H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAE@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAE@ATL@@2GB DW 04011H		; ATL::CVarTypeInfo<unsigned char *>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Max@?$AtlLimits@I@ATL@@2IB DD 0ffffffffH		; ATL::AtlLimits<unsigned int>::_Max
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Min@?$AtlLimits@I@ATL@@2IB DD 00H			; ATL::AtlLimits<unsigned int>::_Min
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ DD 08H ; ATL::CVarTypeInfo<char *>::pmField
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Max@?$AtlLimits@H@ATL@@2HB DD 07fffffffH		; ATL::AtlLimits<int>::_Max
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAD@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAD@ATL@@2GB DW 04010H		; ATL::CVarTypeInfo<char *>::VT
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Min@?$AtlLimits@H@ATL@@2HB DD 080000000H		; ATL::AtlLimits<int>::_Min
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT
_CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@E@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@E@ATL@@2GB DW 011H			; ATL::CVarTypeInfo<unsigned char>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ DD 08H ; ATL::CVarTypeInfo<char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@D@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@D@ATL@@2GB DW 010H			; ATL::CVarTypeInfo<char>::VT
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT __GUID_00000146_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000146_0000_0000_c000_000000000046 DD 0146H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT __GUID_1cf2b120_547d_101b_8e65_08002b2bd119
CONST	SEGMENT
__GUID_1cf2b120_547d_101b_8e65_08002b2bd119 DD 01cf2b120H
	DW	0547dH
	DW	0101bH
	DB	08eH
	DB	065H
	DB	08H
	DB	00H
	DB	02bH
	DB	02bH
	DB	0d1H
	DB	019H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT
_IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatchEx
CONST	SEGMENT
_IID_IAxWinAmbientDispatchEx DD 0b2d0778bH
	DW	0ac99H
	DW	04c58H
	DB	0a5H
	DB	0c8H
	DB	0e7H
	DB	072H
	DB	04eH
	DB	053H
	DB	016H
	DB	0b5H
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT __GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
CONST	SEGMENT
__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352 DD 0fc4801a3H
	DW	02ba9H
	DW	011cfH
	DB	0a2H
	DB	029H
	DB	00H
	DB	0aaH
	DB	00H
	DB	03dH
	DB	073H
	DB	052H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?MAX_TYPE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_TYPE@CRegParser@ATL@@1HB DD 01000H			; ATL::CRegParser::MAX_TYPE
CONST	ENDS
;	COMDAT ?cbNeverDelete@CRegParser@ATL@@1HB
CONST	SEGMENT
?cbNeverDelete@CRegParser@ATL@@1HB DD 0cH		; ATL::CRegParser::cbNeverDelete
CONST	ENDS
;	COMDAT ?rgszNeverDelete@CRegParser@ATL@@1QBQBDB
CONST	SEGMENT
?rgszNeverDelete@CRegParser@ATL@@1QBQBDB DD FLAT:??_C@_05PDIKPLII@AppID?$AA@ ; ATL::CRegParser::rgszNeverDelete
	DD	FLAT:??_C@_05GIBEAPNE@CLSID?$AA@
	DD	FLAT:??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
	DD	FLAT:??_C@_08PICKODJL@FileType?$AA@
	DD	FLAT:??_C@_09JKPGEJCH@Interface?$AA@
	DD	FLAT:??_C@_08PPIOJEA@Hardware?$AA@
	DD	FLAT:??_C@_04IHBFOLAC@Mime?$AA@
	DD	FLAT:??_C@_03DDIMFGBA@SAM?$AA@
	DD	FLAT:??_C@_08LOPHEHKG@SECURITY?$AA@
	DD	FLAT:??_C@_06FDHFNJBJ@SYSTEM?$AA@
	DD	FLAT:??_C@_08KEKAJNJI@Software?$AA@
	DD	FLAT:??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?MAX_VALUE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_VALUE@CRegParser@ATL@@1HB DD 01000H		; ATL::CRegParser::MAX_VALUE
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
CONST	SEGMENT
__GUID_00000000_0000_0000_0000_000000000000 DD 00H
	DW	00H
	DW	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT
_IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ??_C@_06JBKGCNBB@Delete?$AA@
CONST	SEGMENT
??_C@_06JBKGCNBB@Delete?$AA@ DB 'Delete', 00H		; `string'
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?szDelete@ATL@@3QBDB
CONST	SEGMENT
?szDelete@ATL@@3QBDB DD FLAT:??_C@_06JBKGCNBB@Delete?$AA@ ; ATL::szDelete
CONST	ENDS
;	COMDAT ??_C@_08KAAPDIAN@NoRemove?$AA@
CONST	SEGMENT
??_C@_08KAAPDIAN@NoRemove?$AA@ DB 'NoRemove', 00H	; `string'
CONST	ENDS
;	COMDAT ?szNoRemove@ATL@@3QBDB
CONST	SEGMENT
?szNoRemove@ATL@@3QBDB DD FLAT:??_C@_08KAAPDIAN@NoRemove?$AA@ ; ATL::szNoRemove
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ??_C@_0M@DBGDLGLL@ForceRemove?$AA@
CONST	SEGMENT
??_C@_0M@DBGDLGLL@ForceRemove?$AA@ DB 'ForceRemove', 00H ; `string'
CONST	ENDS
;	COMDAT ?szForceRemove@ATL@@3QBDB
CONST	SEGMENT
?szForceRemove@ATL@@3QBDB DD FLAT:??_C@_0M@DBGDLGLL@ForceRemove?$AA@ ; ATL::szForceRemove
CONST	ENDS
;	COMDAT ??_C@_03LAIAPFCB@Val?$AA@
CONST	SEGMENT
??_C@_03LAIAPFCB@Val?$AA@ DB 'Val', 00H			; `string'
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?szValToken@ATL@@3QBDB
CONST	SEGMENT
?szValToken@ATL@@3QBDB DD FLAT:??_C@_03LAIAPFCB@Val?$AA@ ; ATL::szValToken
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B?$AA@
CONST	SEGMENT
??_C@_01HMGJMAIH@B?$AA@ DB 'B', 00H			; `string'
CONST	ENDS
;	COMDAT ?szBinaryVal@ATL@@3QBDB
CONST	SEGMENT
?szBinaryVal@ATL@@3QBDB DD FLAT:??_C@_01HMGJMAIH@B?$AA@	; ATL::szBinaryVal
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D?$AA@
CONST	SEGMENT
??_C@_01CKDDGHAB@D?$AA@ DB 'D', 00H			; `string'
CONST	ENDS
;	COMDAT ?szDwordVal@ATL@@3QBDB
CONST	SEGMENT
?szDwordVal@ATL@@3QBDB DD FLAT:??_C@_01CKDDGHAB@D?$AA@	; ATL::szDwordVal
CONST	ENDS
;	COMDAT ??_C@_01PLPBNMEI@M?$AA@
CONST	SEGMENT
??_C@_01PLPBNMEI@M?$AA@ DB 'M', 00H			; `string'
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindowLic
CONST	SEGMENT
_IID_IAxWinHostWindowLic DD 03935bda8H
	DW	04ed9H
	DW	0495cH
	DB	086H
	DB	050H
	DB	0e0H
	DB	01fH
	DB	0c1H
	DB	0e3H
	DB	08aH
	DB	04bH
CONST	ENDS
;	COMDAT ?multiszStringVal@ATL@@3QBDB
CONST	SEGMENT
?multiszStringVal@ATL@@3QBDB DD FLAT:??_C@_01PLPBNMEI@M?$AA@ ; ATL::multiszStringVal
CONST	ENDS
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT
??_C@_01CPLAODJH@S?$AA@ DB 'S', 00H			; `string'
CONST	ENDS
;	COMDAT ?szStringVal@ATL@@3QBDB
CONST	SEGMENT
?szStringVal@ATL@@3QBDB DD FLAT:??_C@_01CPLAODJH@S?$AA@	; ATL::szStringVal
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?chEquals@ATL@@3DB
CONST	SEGMENT
?chEquals@ATL@@3DB DB 03dH				; ATL::chEquals
CONST	ENDS
;	COMDAT ?chQuote@ATL@@3DB
CONST	SEGMENT
?chQuote@ATL@@3DB DB 027H				; ATL::chQuote
CONST	ENDS
;	COMDAT ?chLeftBracket@ATL@@3DB
CONST	SEGMENT
?chLeftBracket@ATL@@3DB DB 07bH				; ATL::chLeftBracket
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?chRightBracket@ATL@@3DB
CONST	SEGMENT
?chRightBracket@ATL@@3DB DB 07dH			; ATL::chRightBracket
CONST	ENDS
;	COMDAT ?chDirSep@ATL@@3DB
CONST	SEGMENT
?chDirSep@ATL@@3DB DB 05cH				; ATL::chDirSep
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY *>::pmField
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB DW 04006H	; ATL::CVarTypeInfo<tagCY *>::VT
CONST	ENDS
;	COMDAT ??_C@_05PDIKPLII@AppID?$AA@
CONST	SEGMENT
??_C@_05PDIKPLII@AppID?$AA@ DB 'AppID', 00H		; `string'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB DW 06H		; ATL::CVarTypeInfo<tagCY>::VT
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB DW 04009H	; ATL::CVarTypeInfo<IDispatch * *>::VT
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT
_IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ??_C@_05GIBEAPNE@CLSID?$AA@
CONST	SEGMENT
??_C@_05GIBEAPNE@CLSID?$AA@ DB 'CLSID', 00H		; `string'
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch *>::pmField
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB DW 09H	; ATL::CVarTypeInfo<IDispatch *>::VT
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT __GUID_0000010c_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_0000010c_0000_0000_c000_000000000046 DD 010cH
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB DW 0400dH	; ATL::CVarTypeInfo<IUnknown * *>::VT
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown *>::pmField
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB DW 0dH	; ATL::CVarTypeInfo<IUnknown *>::VT
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t * *>::pmField
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB DW 04008H		; ATL::CVarTypeInfo<wchar_t * *>::VT
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_W@ATL@@2GB DW 08H			; ATL::CVarTypeInfo<wchar_t *>::VT
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT __GUID_0002e012_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_0002e012_0000_0000_c000_000000000046 DD 02e012H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB DW 0400cH	; ATL::CVarTypeInfo<tagVARIANT *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ DD 08H ; ATL::CVarTypeInfo<double *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAN@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAN@ATL@@2GB DW 04005H		; ATL::CVarTypeInfo<double *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ DD 08H ; ATL::CVarTypeInfo<double>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@N@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@N@ATL@@2GB DW 05H			; ATL::CVarTypeInfo<double>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ DD 08H ; ATL::CVarTypeInfo<float *>::pmField
CONST	ENDS
;	COMDAT __GUID_00020400_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020400_0000_0000_c000_000000000046 DD 020400H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAM@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAM@ATL@@2GB DW 04004H		; ATL::CVarTypeInfo<float *>::VT
CONST	ENDS
;	COMDAT __GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
CONST	SEGMENT
__GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851 DD 0a6bc3ac0H
	DW	0dbaaH
	DW	011ceH
	DB	09dH
	DB	0e3H
	DB	00H
	DB	0aaH
	DB	00H
	DB	04bH
	DB	0b8H
	DB	051H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ DD 08H ; ATL::CVarTypeInfo<float>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@M@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@M@ATL@@2GB DW 04H			; ATL::CVarTypeInfo<float>::VT
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000000_0000_0000_c000_000000000046 DD 00H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_K@ATL@@2GB DW 04015H		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
CONST	ENDS
;	COMDAT ??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	SEGMENT
??_C@_07KJLOKDKB@TypeLib?$AA@ DB 'TypeLib', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KEKAJNJI@Software?$AA@
CONST	SEGMENT
??_C@_08KEKAJNJI@Software?$AA@ DB 'Software', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDHFNJBJ@SYSTEM?$AA@
CONST	SEGMENT
??_C@_06FDHFNJBJ@SYSTEM?$AA@ DB 'SYSTEM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LOPHEHKG@SECURITY?$AA@
CONST	SEGMENT
??_C@_08LOPHEHKG@SECURITY?$AA@ DB 'SECURITY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03DDIMFGBA@SAM?$AA@
CONST	SEGMENT
??_C@_03DDIMFGBA@SAM?$AA@ DB 'SAM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IHBFOLAC@Mime?$AA@
CONST	SEGMENT
??_C@_04IHBFOLAC@Mime?$AA@ DB 'Mime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPIOJEA@Hardware?$AA@
CONST	SEGMENT
??_C@_08PPIOJEA@Hardware?$AA@ DB 'Hardware', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JKPGEJCH@Interface?$AA@
CONST	SEGMENT
??_C@_09JKPGEJCH@Interface?$AA@ DB 'Interface', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PICKODJL@FileType?$AA@
CONST	SEGMENT
??_C@_08PICKODJL@FileType?$AA@ DB 'FileType', 00H	; `string'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64>::pmField
CONST	ENDS
;	COMDAT ??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
CONST	SEGMENT
??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@ DB 'Component Categories', 00H ; `string'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_K@ATL@@2GB DW 015H			; ATL::CVarTypeInfo<unsigned __int64>::VT
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_J@ATL@@2GB DW 04014H		; ATL::CVarTypeInfo<__int64 *>::VT
CONST	ENDS
;	COMDAT ___pobjMapEntryLast
ATL$__z	SEGMENT
___pobjMapEntryLast DD 00H
ATL$__z	ENDS
;	COMDAT ___pobjMapEntryFirst
ATL$__a	SEGMENT
___pobjMapEntryFirst DD 00H
ATL$__a	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_J@ATL@@2GB DW 014H			; ATL::CVarTypeInfo<__int64>::VT
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	_IsEqualGUID
PUBLIC	??1CComBSTR@ATL@@QAE@XZ				; ATL::CComBSTR::~CComBSTR
PUBLIC	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
PUBLIC	??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
PUBLIC	??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z		; _com_error::_com_error
PUBLIC	??0_com_error@@QAE@ABV0@@Z			; _com_error::_com_error
PUBLIC	??1_com_error@@UAE@XZ				; _com_error::~_com_error
PUBLIC	?Error@_com_error@@QBEJXZ			; _com_error::Error
PUBLIC	??_G_com_error@@UAEPAXI@Z			; _com_error::`scalar deleting destructor'
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
PUBLIC	?select_on_container_copy_construction@?$allocator@D@std@@QBE?AV12@XZ ; std::allocator<char>::select_on_container_copy_construction
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ; std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction
PUBLIC	?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<char> >::select_on_container_copy_construction
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?CheckHR@@YAXJ@Z				; CheckHR
PUBLIC	??0DXContext@@QAE@XZ				; DXContext::DXContext
PUBLIC	??1DXContext@@QAE@XZ				; DXContext::~DXContext
PUBLIC	?Init@DXContext@@QAE_NPAUHWND__@@HHH_N@Z	; DXContext::Init
PUBLIC	?SetRenderTarget@DXContext@@QAE_NPAUIDirectDrawSurface7@@@Z ; DXContext::SetRenderTarget
PUBLIC	?Shutdown@DXContext@@QAEXXZ			; DXContext::Shutdown
PUBLIC	?ValidateD3DDevice@DXContext@@QAE_NXZ		; DXContext::ValidateD3DDevice
PUBLIC	?TestCooperativeLevel@DXContext@@QAEKXZ		; DXContext::TestCooperativeLevel
PUBLIC	?EnumZBufferFormats@DXContext@@IAEXPAX@Z	; DXContext::EnumZBufferFormats
PUBLIC	?EnumZBufferFormatsCallback@DXContext@@KGJPAU_DDPIXELFORMAT@@PAX@Z ; DXContext::EnumZBufferFormatsCallback
PUBLIC	?AttachDepthBuffer@DXContext@@IAEXPAUIDirectDrawSurface7@@@Z ; DXContext::AttachDepthBuffer
PUBLIC	?CheckCaps@DXContext@@IAEXXZ			; DXContext::CheckCaps
PUBLIC	??0DDDriverInfo@DeviceManager@@QAE@U_GUID@@PBD1@Z ; DeviceManager::DDDriverInfo::DDDriverInfo
PUBLIC	??0D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@AAU_D3DDeviceDesc7@@PAD1@Z ; DeviceManager::DDDriverInfo::D3DDeviceInfo::D3DDeviceInfo
PUBLIC	?GetName@D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAEPBDXZ ; DeviceManager::DDDriverInfo::D3DDeviceInfo::GetName
PUBLIC	?GetGuid@D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAEPAU_GUID@@XZ ; DeviceManager::DDDriverInfo::D3DDeviceInfo::GetGuid
PUBLIC	?IsHardware@D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE_NXZ ; DeviceManager::DDDriverInfo::D3DDeviceInfo::IsHardware
PUBLIC	?CanFilterAnisotropic@D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE_NXZ ; DeviceManager::DDDriverInfo::D3DDeviceInfo::CanFilterAnisotropic
PUBLIC	??1D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@XZ ; DeviceManager::DDDriverInfo::D3DDeviceInfo::~D3DDeviceInfo
PUBLIC	??0D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@ABV012@@Z ; DeviceManager::DDDriverInfo::D3DDeviceInfo::D3DDeviceInfo
PUBLIC	??_GD3DDeviceInfo@DDDriverInfo@DeviceManager@@QAEPAXI@Z ; DeviceManager::DDDriverInfo::D3DDeviceInfo::`scalar deleting destructor'
PUBLIC	?select_on_container_copy_construction@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QBE?AV12@XZ ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::select_on_container_copy_construction
PUBLIC	??0?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAE@XZ ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>
PUBLIC	??0?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAE@ABV01@@Z ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>
PUBLIC	?deallocate@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@I@Z ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::deallocate
PUBLIC	?allocate@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@I@Z ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::allocate
PUBLIC	?construct@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV345@@Z ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::construct
PUBLIC	?max_size@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QBEIXZ ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@SAIABV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@2@@Z ; std::allocator_traits<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::max_size
PUBLIC	?select_on_container_copy_construction@?$allocator_traits@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@SA?AV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@2@ABV32@@Z ; std::allocator_traits<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::select_on_container_copy_construction
PUBLIC	?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::select_on_container_copy_construction
PUBLIC	??0?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >
PUBLIC	??0?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@ABV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@1@@Z ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@I@Z ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@I@Z ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::max_size
PUBLIC	??0?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> >
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QAE@ABV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::_Getal
PUBLIC	??0?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@XZ ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >
PUBLIC	??0?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@ABV01@@Z ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >
PUBLIC	?push_back@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEX$$QAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@Z ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::push_back
PUBLIC	??1?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@XZ ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::~vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >
PUBLIC	?capacity@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::capacity
PUBLIC	?_Unused_capacity@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Unused_capacity
PUBLIC	?begin@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@2@XZ ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::begin
PUBLIC	?end@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@2@XZ ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::end
PUBLIC	?size@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::size
PUBLIC	?max_size@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::max_size
PUBLIC	??A?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEAAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@I@Z ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::operator[]
PUBLIC	?clear@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEXXZ ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::clear
PUBLIC	?_Buy@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAE_NI@Z ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Buy
PUBLIC	?_Destroy@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@0@Z ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Destroy
PUBLIC	?_Grow_to@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IBEII@Z ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Grow_to
PUBLIC	?_Inside@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IBE_NPBVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@Z ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Inside
PUBLIC	?_Reallocate@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Reallocate
PUBLIC	?_Reserve@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Reserve
PUBLIC	?_Tidy@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXXZ ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Tidy
PUBLIC	?_Xlen@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IBEXXZ ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Xlen
PUBLIC	?_Orphan_range@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IBEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@0@Z ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Orphan_range
PUBLIC	?select_on_container_copy_construction@?$allocator@U_DDSURFACEDESC2@@@std@@QBE?AV12@XZ ; std::allocator<_DDSURFACEDESC2>::select_on_container_copy_construction
PUBLIC	??0?$allocator@U_DDSURFACEDESC2@@@std@@QAE@XZ	; std::allocator<_DDSURFACEDESC2>::allocator<_DDSURFACEDESC2>
PUBLIC	??0?$allocator@U_DDSURFACEDESC2@@@std@@QAE@ABV01@@Z ; std::allocator<_DDSURFACEDESC2>::allocator<_DDSURFACEDESC2>
PUBLIC	?deallocate@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@I@Z ; std::allocator<_DDSURFACEDESC2>::deallocate
PUBLIC	?allocate@?$allocator@U_DDSURFACEDESC2@@@std@@QAEPAU_DDSURFACEDESC2@@I@Z ; std::allocator<_DDSURFACEDESC2>::allocate
PUBLIC	?construct@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@ABU3@@Z ; std::allocator<_DDSURFACEDESC2>::construct
PUBLIC	?max_size@?$allocator@U_DDSURFACEDESC2@@@std@@QBEIXZ ; std::allocator<_DDSURFACEDESC2>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@SAIABV?$allocator@U_DDSURFACEDESC2@@@2@@Z ; std::allocator_traits<std::allocator<_DDSURFACEDESC2> >::max_size
PUBLIC	?select_on_container_copy_construction@?$allocator_traits@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@SA?AV?$allocator@U_DDSURFACEDESC2@@@2@ABV32@@Z ; std::allocator_traits<std::allocator<_DDSURFACEDESC2> >::select_on_container_copy_construction
PUBLIC	?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::select_on_container_copy_construction
PUBLIC	??0?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >
PUBLIC	??0?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@ABV?$allocator@U_DDSURFACEDESC2@@@1@@Z ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEPAU_DDSURFACEDESC2@@I@Z ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXPAU_DDSURFACEDESC2@@I@Z ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::max_size
PUBLIC	??0?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> >::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> >
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@QAE@ABV?$allocator@U_DDSURFACEDESC2@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> > >::_Vector_alloc<0,std::_Vec_base_types<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> > >
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> > >::_Getal
PUBLIC	??0?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@XZ ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >
PUBLIC	??0?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@ABV01@@Z ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >
PUBLIC	??1?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@XZ ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::~vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >
PUBLIC	?capacity@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBEIXZ ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::capacity
PUBLIC	?_Unused_capacity@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBEIXZ ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Unused_capacity
PUBLIC	?begin@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@2@XZ ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::begin
PUBLIC	?end@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@2@XZ ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::end
PUBLIC	?size@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBEIXZ ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::size
PUBLIC	?max_size@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBEIXZ ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::max_size
PUBLIC	??A?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEAAU_DDSURFACEDESC2@@I@Z ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::operator[]
PUBLIC	?push_back@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXABU_DDSURFACEDESC2@@@Z ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::push_back
PUBLIC	?_Buy@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAE_NI@Z ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Buy
PUBLIC	?_Destroy@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXPAU_DDSURFACEDESC2@@0@Z ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Destroy
PUBLIC	?_Grow_to@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IBEII@Z ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Grow_to
PUBLIC	?_Inside@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IBE_NPBU_DDSURFACEDESC2@@@Z ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Inside
PUBLIC	?_Reallocate@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXI@Z ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Reallocate
PUBLIC	?_Reserve@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXI@Z ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Reserve
PUBLIC	?_Tidy@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXXZ ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Tidy
PUBLIC	?_Xlen@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IBEXXZ ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Xlen
PUBLIC	?_Orphan_range@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IBEXPAU_DDSURFACEDESC2@@0@Z ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Orphan_range
PUBLIC	?EnumD3DDrivers@DDDriverInfo@DeviceManager@@QAEXXZ ; DeviceManager::DDDriverInfo::EnumD3DDrivers
PUBLIC	?EnumD3DDriversCallback@DDDriverInfo@DeviceManager@@SGJPAD0PAU_D3DDeviceDesc7@@PAX@Z ; DeviceManager::DDDriverInfo::EnumD3DDriversCallback
PUBLIC	?EnumModesCallback@DDDriverInfo@DeviceManager@@SGJPAU_DDSURFACEDESC2@@PAX@Z ; DeviceManager::DDDriverInfo::EnumModesCallback
PUBLIC	?GetName@DDDriverInfo@DeviceManager@@QAEPBDXZ	; DeviceManager::DDDriverInfo::GetName
PUBLIC	?GetDeviceName@DDDriverInfo@DeviceManager@@QAEPBDH@Z ; DeviceManager::DDDriverInfo::GetDeviceName
PUBLIC	?GetDisplayMode@DDDriverInfo@DeviceManager@@QAEPAU_DDSURFACEDESC2@@H@Z ; DeviceManager::DDDriverInfo::GetDisplayMode
PUBLIC	?CanRenderWindowed@DDDriverInfo@DeviceManager@@QAE_NXZ ; DeviceManager::DDDriverInfo::CanRenderWindowed
PUBLIC	?GetDevice@DDDriverInfo@DeviceManager@@QAEPAVD3DDeviceInfo@12@H@Z ; DeviceManager::DDDriverInfo::GetDevice
PUBLIC	?GetGuid@DDDriverInfo@DeviceManager@@QAEPAU_GUID@@XZ ; DeviceManager::DDDriverInfo::GetGuid
PUBLIC	?FindDisplayMode@DDDriverInfo@DeviceManager@@QAEHHHH@Z ; DeviceManager::DDDriverInfo::FindDisplayMode
PUBLIC	?SupportsSRT@DDDriverInfo@DeviceManager@@QAE_NXZ ; DeviceManager::DDDriverInfo::SupportsSRT
PUBLIC	?FindRGBRenderer@DDDriverInfo@DeviceManager@@QAEHXZ ; DeviceManager::DDDriverInfo::FindRGBRenderer
PUBLIC	?Is3dfx@DDDriverInfo@DeviceManager@@QAE_NXZ	; DeviceManager::DDDriverInfo::Is3dfx
PUBLIC	??1DDDriverInfo@DeviceManager@@QAE@XZ		; DeviceManager::DDDriverInfo::~DDDriverInfo
PUBLIC	??0DDDriverInfo@DeviceManager@@QAE@ABV01@@Z	; DeviceManager::DDDriverInfo::DDDriverInfo
PUBLIC	??_GDDDriverInfo@DeviceManager@@QAEPAXI@Z	; DeviceManager::DDDriverInfo::`scalar deleting destructor'
PUBLIC	??0?$allocator@VDDDriverInfo@DeviceManager@@@std@@QAE@XZ ; std::allocator<DeviceManager::DDDriverInfo>::allocator<DeviceManager::DDDriverInfo>
PUBLIC	?deallocate@?$allocator@VDDDriverInfo@DeviceManager@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@I@Z ; std::allocator<DeviceManager::DDDriverInfo>::deallocate
PUBLIC	?allocate@?$allocator@VDDDriverInfo@DeviceManager@@@std@@QAEPAVDDDriverInfo@DeviceManager@@I@Z ; std::allocator<DeviceManager::DDDriverInfo>::allocate
PUBLIC	?max_size@?$allocator@VDDDriverInfo@DeviceManager@@@std@@QBEIXZ ; std::allocator<DeviceManager::DDDriverInfo>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@SAIABV?$allocator@VDDDriverInfo@DeviceManager@@@2@@Z ; std::allocator_traits<std::allocator<DeviceManager::DDDriverInfo> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> >::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEPAVDDDriverInfo@DeviceManager@@I@Z ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@I@Z ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> >::max_size
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> > >::_Getal
PUBLIC	?push_back@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEX$$QAVDDDriverInfo@DeviceManager@@@Z ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::push_back
PUBLIC	?capacity@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::capacity
PUBLIC	?_Unused_capacity@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Unused_capacity
PUBLIC	?size@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::size
PUBLIC	?max_size@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::max_size
PUBLIC	??A?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEAAVDDDriverInfo@DeviceManager@@I@Z ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::operator[]
PUBLIC	?clear@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEXXZ ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::clear
PUBLIC	?_Destroy@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEXPAVDDDriverInfo@DeviceManager@@0@Z ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Destroy
PUBLIC	?_Grow_to@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IBEII@Z ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Grow_to
PUBLIC	?_Inside@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IBE_NPBVDDDriverInfo@DeviceManager@@@Z ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Inside
PUBLIC	?_Reallocate@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Reallocate
PUBLIC	?_Reserve@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Reserve
PUBLIC	?_Xlen@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IBEXXZ ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Xlen
PUBLIC	?_Orphan_range@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IBEXPAVDDDriverInfo@DeviceManager@@0@Z ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Orphan_range
PUBLIC	?Setup@DeviceManager@@QAEXH@Z			; DeviceManager::Setup
PUBLIC	?Cleanup@DeviceManager@@QAEXXZ			; DeviceManager::Cleanup
PUBLIC	?GetDriver@DeviceManager@@QAEPAVDDDriverInfo@1@H@Z ; DeviceManager::GetDriver
PUBLIC	?GetDriverName@DeviceManager@@QAEPBDH@Z		; DeviceManager::GetDriverName
PUBLIC	?GetDeviceName@DeviceManager@@QAEPBDHH@Z	; DeviceManager::GetDeviceName
PUBLIC	?GetModeName@DeviceManager@@QAEPBDHHH@Z		; DeviceManager::GetModeName
PUBLIC	?ChooseDevice@DeviceManager@@QAEHPAH00@Z	; DeviceManager::ChooseDevice
PUBLIC	?FindPrimaryDisplayDriver@DeviceManager@@QAEHXZ	; DeviceManager::FindPrimaryDisplayDriver
PUBLIC	?EnumDDDrivers@DeviceManager@@QAEXPAV1@@Z	; DeviceManager::EnumDDDrivers
PUBLIC	?EnumDDCallback@DeviceManager@@SGHPAU_GUID@@PAD1PAX@Z ; DeviceManager::EnumDDCallback
PUBLIC	?EnumDDCallbackEx@DeviceManager@@SGHPAU_GUID@@PAD1PAXPAUHMONITOR__@@@Z ; DeviceManager::EnumDDCallbackEx
PUBLIC	?GetMode@DeviceManager@@QAE_NHHHPAI00@Z		; DeviceManager::GetMode
PUBLIC	?CreateContext@DeviceManager@@QAEPAVDXContext@@HHHHPAUHWND__@@@Z ; DeviceManager::CreateContext
PUBLIC	??0?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::_com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >
PUBLIC	??0?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QAE@ABV0@@Z ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::_com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >
PUBLIC	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::~_com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >
PUBLIC	??I?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QAEPAPAUIDirectDraw@@XZ ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::operator&
PUBLIC	??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QBEPAUIDirectDraw@@XZ ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::operator->
PUBLIC	??8?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QBE_NH@Z ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::operator==
PUBLIC	??9?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QBE_NH@Z ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::operator!=
PUBLIC	?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::_Release
PUBLIC	?_AddRef@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::_AddRef
PUBLIC	?GetIID@?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@SAABU_GUID@@XZ ; _com_IIID<IDirectDraw7,&IID_IDirectDraw7>::GetIID
PUBLIC	?GetIID@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@SAABU_GUID@@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::GetIID
PUBLIC	??0?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >
PUBLIC	??$?4UIDirectDraw7@@@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEAAV0@PAUIDirectDraw7@@@Z ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator=<IDirectDraw7>
PUBLIC	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >
PUBLIC	?Attach@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEXPAUIDirectDraw7@@@Z ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::Attach
PUBLIC	??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDraw7@@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator->
PUBLIC	?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_Release
PUBLIC	?_AddRef@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_AddRef
PUBLIC	?GetIID@?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@SAABU_GUID@@XZ ; _com_IIID<IDirect3D7,&IID_IDirect3D7>::GetIID
PUBLIC	?GetIID@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@SAABU_GUID@@XZ ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::GetIID
PUBLIC	??0?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::_com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >
PUBLIC	??$?4UIDirect3D7@@@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@QAEAAV0@PAUIDirect3D7@@@Z ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::operator=<IDirect3D7>
PUBLIC	??1?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::~_com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >
PUBLIC	?Attach@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@QAEXPAUIDirect3D7@@@Z ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::Attach
PUBLIC	??C?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@QBEPAUIDirect3D7@@XZ ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::operator->
PUBLIC	?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::_Release
PUBLIC	?_AddRef@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::_AddRef
PUBLIC	??$?4V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@QAEAAV0@ABV?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@@Z ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::operator=<_com_IIID<IDirectDraw,&IID_IDirectDraw> >
PUBLIC	??$?4V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEAAV0@ABV?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@@Z ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator=<_com_IIID<IDirectDraw,&IID_IDirectDraw> >
PUBLIC	??0?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
PUBLIC	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
PUBLIC	??B?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDrawSurface7@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator IDirectDrawSurface7 *
PUBLIC	??I?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEPAPAUIDirectDrawSurface7@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator&
PUBLIC	??C?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDrawSurface7@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator->
PUBLIC	??B?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBE_NXZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator bool
PUBLIC	?GetInterfacePtr@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEAAPAUIDirectDrawSurface7@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::GetInterfacePtr
PUBLIC	?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::_Release
PUBLIC	??0?$allocator@U_DDPIXELFORMAT@@@std@@QAE@XZ	; std::allocator<_DDPIXELFORMAT>::allocator<_DDPIXELFORMAT>
PUBLIC	?deallocate@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@I@Z ; std::allocator<_DDPIXELFORMAT>::deallocate
PUBLIC	?allocate@?$allocator@U_DDPIXELFORMAT@@@std@@QAEPAU_DDPIXELFORMAT@@I@Z ; std::allocator<_DDPIXELFORMAT>::allocate
PUBLIC	?construct@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@ABU3@@Z ; std::allocator<_DDPIXELFORMAT>::construct
PUBLIC	?max_size@?$allocator@U_DDPIXELFORMAT@@@std@@QBEIXZ ; std::allocator<_DDPIXELFORMAT>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@SAIABV?$allocator@U_DDPIXELFORMAT@@@2@@Z ; std::allocator_traits<std::allocator<_DDPIXELFORMAT> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEPAU_DDPIXELFORMAT@@I@Z ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXPAU_DDPIXELFORMAT@@I@Z ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::max_size
PUBLIC	??0?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> >::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> >
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAE@ABV?$allocator@U_DDPIXELFORMAT@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> > >::_Vector_alloc<0,std::_Vec_base_types<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> > >
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> > >::_Getal
PUBLIC	??0?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAE@XZ ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >
PUBLIC	??1?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAE@XZ ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::~vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >
PUBLIC	?capacity@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QBEIXZ ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::capacity
PUBLIC	?_Unused_capacity@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QBEIXZ ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Unused_capacity
PUBLIC	?begin@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@2@XZ ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::begin
PUBLIC	?end@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@2@XZ ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::end
PUBLIC	?size@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QBEIXZ ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::size
PUBLIC	?max_size@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QBEIXZ ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::max_size
PUBLIC	?empty@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QBE_NXZ ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::empty
PUBLIC	?push_back@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXABU_DDPIXELFORMAT@@@Z ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::push_back
PUBLIC	?clear@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXXZ ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::clear
PUBLIC	?_Destroy@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXPAU_DDPIXELFORMAT@@0@Z ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Destroy
PUBLIC	?_Grow_to@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IBEII@Z ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Grow_to
PUBLIC	?_Inside@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IBE_NPBU_DDPIXELFORMAT@@@Z ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Inside
PUBLIC	?_Reallocate@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXI@Z ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Reallocate
PUBLIC	?_Reserve@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXI@Z ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Reserve
PUBLIC	?_Tidy@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXXZ ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Tidy
PUBLIC	?_Xlen@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IBEXXZ ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Xlen
PUBLIC	?_Orphan_range@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IBEXPAU_DDPIXELFORMAT@@0@Z ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Orphan_range
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAE@PAU_DDPIXELFORMAT@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBEABU_DDPIXELFORMAT@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::operator*
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::operator++
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::operator==
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::operator!=
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::_Compat
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAE@PAU_DDPIXELFORMAT@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBEAAU_DDPIXELFORMAT@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::operator*
PUBLIC	??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBEPAU_DDPIXELFORMAT@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::operator->
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::operator++
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::operator++
PUBLIC	??$addressof@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@AAV123@@Z ; std::addressof<DeviceManager::DDDriverInfo::D3DDeviceInfo>
PUBLIC	??$forward@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YA$$QAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@AAV123@@Z ; std::forward<DeviceManager::DDDriverInfo::D3DDeviceInfo>
PUBLIC	??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V123@@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@$$QAV234@@Z ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::construct<DeviceManager::DDDriverInfo::D3DDeviceInfo,DeviceManager::DDDriverInfo::D3DDeviceInfo>
PUBLIC	??$addressof@$$CBU_DDSURFACEDESC2@@@std@@YAPBU_DDSURFACEDESC2@@ABU1@@Z ; std::addressof<_DDSURFACEDESC2 const >
PUBLIC	??$construct@U_DDSURFACEDESC2@@AAU1@@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXPAU_DDSURFACEDESC2@@AAU2@@Z ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::construct<_DDSURFACEDESC2,_DDSURFACEDESC2 &>
PUBLIC	??$construct@U_DDSURFACEDESC2@@ABU1@@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXPAU_DDSURFACEDESC2@@ABU2@@Z ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::construct<_DDSURFACEDESC2,_DDSURFACEDESC2 const &>
PUBLIC	??$addressof@VDDDriverInfo@DeviceManager@@@std@@YAPAVDDDriverInfo@DeviceManager@@AAV12@@Z ; std::addressof<DeviceManager::DDDriverInfo>
PUBLIC	??$forward@VDDDriverInfo@DeviceManager@@@std@@YA$$QAVDDDriverInfo@DeviceManager@@AAV12@@Z ; std::forward<DeviceManager::DDDriverInfo>
PUBLIC	??$construct@VDDDriverInfo@DeviceManager@@V12@@?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@$$QAV23@@Z ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> >::construct<DeviceManager::DDDriverInfo,DeviceManager::DDDriverInfo>
PUBLIC	??$addressof@$$CBU_DDPIXELFORMAT@@@std@@YAPBU_DDPIXELFORMAT@@ABU1@@Z ; std::addressof<_DDPIXELFORMAT const >
PUBLIC	??$construct@U_DDPIXELFORMAT@@AAU1@@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXPAU_DDPIXELFORMAT@@AAU2@@Z ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::construct<_DDPIXELFORMAT,_DDPIXELFORMAT &>
PUBLIC	??$construct@U_DDPIXELFORMAT@@ABU1@@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXPAU_DDPIXELFORMAT@@ABU2@@Z ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::construct<_DDPIXELFORMAT,_DDPIXELFORMAT const &>
PUBLIC	?pointer_to@?$pointer_traits@PAU_DDPIXELFORMAT@@@std@@SAPAU_DDPIXELFORMAT@@AAU3@@Z ; std::pointer_traits<_DDPIXELFORMAT *>::pointer_to
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@YAXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@0AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@@std@@YAXPAVDDDriverInfo@DeviceManager@@0AAU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> > >
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@@std@@YAXPAU_DDPIXELFORMAT@@0AAU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> > >
PUBLIC	??$addressof@U_DDPIXELFORMAT@@@std@@YAPAU_DDPIXELFORMAT@@AAU1@@Z ; std::addressof<_DDPIXELFORMAT>
PUBLIC	??$_Umove@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV234@00@Z ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Umove<DeviceManager::DDDriverInfo::D3DDeviceInfo *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@YAXPAU_DDSURFACEDESC2@@0AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> > >
PUBLIC	??$_Umove@PAU_DDSURFACEDESC2@@@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEPAU_DDSURFACEDESC2@@PAU2@00@Z ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Umove<_DDSURFACEDESC2 *>
PUBLIC	??$_Umove@PAVDDDriverInfo@DeviceManager@@@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEPAVDDDriverInfo@DeviceManager@@PAV23@00@Z ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Umove<DeviceManager::DDDriverInfo *>
PUBLIC	??$_Umove@PAU_DDPIXELFORMAT@@@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEPAU_DDPIXELFORMAT@@PAU2@00@Z ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Umove<_DDPIXELFORMAT *>
PUBLIC	??$_Allocate@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@IPAV123@@Z ; std::_Allocate<DeviceManager::DDDriverInfo::D3DDeviceInfo>
PUBLIC	??$_Allocate@U_DDSURFACEDESC2@@@std@@YAPAU_DDSURFACEDESC2@@IPAU1@@Z ; std::_Allocate<_DDSURFACEDESC2>
PUBLIC	??$_Allocate@VDDDriverInfo@DeviceManager@@@std@@YAPAVDDDriverInfo@DeviceManager@@IPAV12@@Z ; std::_Allocate<DeviceManager::DDDriverInfo>
PUBLIC	??$_Allocate@U_DDPIXELFORMAT@@@std@@YAPAU_DDPIXELFORMAT@@IPAU1@@Z ; std::_Allocate<_DDPIXELFORMAT>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$_QueryInterface@V?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@AAEJV?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@@Z ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::_QueryInterface<_com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> > >
PUBLIC	??$_QueryInterface@V?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEJV?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@@Z ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_QueryInterface<_com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> > >
PUBLIC	??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V123@@?$allocator_traits@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@SAXAAV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@1@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@$$QAV345@@Z ; std::allocator_traits<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::construct<DeviceManager::DDDriverInfo::D3DDeviceInfo,DeviceManager::DDDriverInfo::D3DDeviceInfo>
PUBLIC	??$forward@AAU_DDSURFACEDESC2@@@std@@YAAAU_DDSURFACEDESC2@@AAU1@@Z ; std::forward<_DDSURFACEDESC2 &>
PUBLIC	??$construct@U_DDSURFACEDESC2@@AAU1@@?$allocator_traits@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@SAXAAV?$allocator@U_DDSURFACEDESC2@@@1@PAU_DDSURFACEDESC2@@AAU3@@Z ; std::allocator_traits<std::allocator<_DDSURFACEDESC2> >::construct<_DDSURFACEDESC2,_DDSURFACEDESC2 &>
PUBLIC	??$forward@ABU_DDSURFACEDESC2@@@std@@YAABU_DDSURFACEDESC2@@ABU1@@Z ; std::forward<_DDSURFACEDESC2 const &>
PUBLIC	??$construct@U_DDSURFACEDESC2@@ABU1@@?$allocator_traits@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@SAXAAV?$allocator@U_DDSURFACEDESC2@@@1@PAU_DDSURFACEDESC2@@ABU3@@Z ; std::allocator_traits<std::allocator<_DDSURFACEDESC2> >::construct<_DDSURFACEDESC2,_DDSURFACEDESC2 const &>
PUBLIC	??$construct@VDDDriverInfo@DeviceManager@@V12@@?$allocator_traits@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@SAXAAV?$allocator@VDDDriverInfo@DeviceManager@@@1@PAVDDDriverInfo@DeviceManager@@$$QAV34@@Z ; std::allocator_traits<std::allocator<DeviceManager::DDDriverInfo> >::construct<DeviceManager::DDDriverInfo,DeviceManager::DDDriverInfo>
PUBLIC	??$forward@AAU_DDPIXELFORMAT@@@std@@YAAAU_DDPIXELFORMAT@@AAU1@@Z ; std::forward<_DDPIXELFORMAT &>
PUBLIC	??$construct@U_DDPIXELFORMAT@@AAU1@@?$allocator_traits@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@SAXAAV?$allocator@U_DDPIXELFORMAT@@@1@PAU_DDPIXELFORMAT@@AAU3@@Z ; std::allocator_traits<std::allocator<_DDPIXELFORMAT> >::construct<_DDPIXELFORMAT,_DDPIXELFORMAT &>
PUBLIC	??$forward@ABU_DDPIXELFORMAT@@@std@@YAABU_DDPIXELFORMAT@@ABU1@@Z ; std::forward<_DDPIXELFORMAT const &>
PUBLIC	??$construct@U_DDPIXELFORMAT@@ABU1@@?$allocator_traits@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@SAXAAV?$allocator@U_DDPIXELFORMAT@@@1@PAU_DDPIXELFORMAT@@ABU3@@Z ; std::allocator_traits<std::allocator<_DDPIXELFORMAT> >::construct<_DDPIXELFORMAT,_DDPIXELFORMAT const &>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$_Ptr_cat@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@0@Z ; std::_Ptr_cat<DeviceManager::DDDriverInfo::D3DDeviceInfo,DeviceManager::DDDriverInfo::D3DDeviceInfo>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@YAXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@0AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >
PUBLIC	??$_Ptr_cat@VDDDriverInfo@DeviceManager@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVDDDriverInfo@DeviceManager@@0@Z ; std::_Ptr_cat<DeviceManager::DDDriverInfo,DeviceManager::DDDriverInfo>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@@std@@YAXPAVDDDriverInfo@DeviceManager@@0AAU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> > >
PUBLIC	??$_Ptr_cat@U_DDPIXELFORMAT@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_DDPIXELFORMAT@@0@Z ; std::_Ptr_cat<_DDPIXELFORMAT,_DDPIXELFORMAT>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@@std@@YAXPAU_DDPIXELFORMAT@@0AAU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> > >
PUBLIC	??$_Uninitialized_move@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@U?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@00AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@@Z ; std::_Uninitialized_move<DeviceManager::DDDriverInfo::D3DDeviceInfo *,DeviceManager::DDDriverInfo::D3DDeviceInfo *,std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >
PUBLIC	??$_Ptr_cat@U_DDSURFACEDESC2@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_DDSURFACEDESC2@@0@Z ; std::_Ptr_cat<_DDSURFACEDESC2,_DDSURFACEDESC2>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@YAXPAU_DDSURFACEDESC2@@0AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> > >
PUBLIC	??$_Uninitialized_move@PAU_DDSURFACEDESC2@@PAU1@U?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@YAPAU_DDSURFACEDESC2@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@@Z ; std::_Uninitialized_move<_DDSURFACEDESC2 *,_DDSURFACEDESC2 *,std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> > >
PUBLIC	??$_Uninitialized_move@PAVDDDriverInfo@DeviceManager@@PAV12@U?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@@std@@YAPAVDDDriverInfo@DeviceManager@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@0@@Z ; std::_Uninitialized_move<DeviceManager::DDDriverInfo *,DeviceManager::DDDriverInfo *,std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> > >
PUBLIC	??$_Uninitialized_move@PAU_DDPIXELFORMAT@@PAU1@U?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@@std@@YAPAU_DDPIXELFORMAT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@0@@Z ; std::_Uninitialized_move<_DDPIXELFORMAT *,_DDPIXELFORMAT *,std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> > >
PUBLIC	??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V123@@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@$$QAV234@@Z ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::construct<DeviceManager::DDDriverInfo::D3DDeviceInfo,DeviceManager::DDDriverInfo::D3DDeviceInfo>
PUBLIC	??$construct@U_DDSURFACEDESC2@@AAU1@@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@AAU2@@Z ; std::allocator<_DDSURFACEDESC2>::construct<_DDSURFACEDESC2,_DDSURFACEDESC2 &>
PUBLIC	??$construct@VDDDriverInfo@DeviceManager@@V12@@?$allocator@VDDDriverInfo@DeviceManager@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@$$QAV23@@Z ; std::allocator<DeviceManager::DDDriverInfo>::construct<DeviceManager::DDDriverInfo,DeviceManager::DDDriverInfo>
PUBLIC	??$construct@U_DDPIXELFORMAT@@AAU1@@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@AAU2@@Z ; std::allocator<_DDPIXELFORMAT>::construct<_DDPIXELFORMAT,_DDPIXELFORMAT &>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??$destroy@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@Z ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::destroy<DeviceManager::DDDriverInfo::D3DDeviceInfo>
PUBLIC	??$destroy@VDDDriverInfo@DeviceManager@@@?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@@Z ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> >::destroy<DeviceManager::DDDriverInfo>
PUBLIC	??$destroy@U_DDPIXELFORMAT@@@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXPAU_DDPIXELFORMAT@@@Z ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::destroy<_DDPIXELFORMAT>
PUBLIC	??$_Val_type@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@@Z ; std::_Val_type<DeviceManager::DDDriverInfo::D3DDeviceInfo *>
PUBLIC	??$_Uninit_move@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@V123@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@00AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<DeviceManager::DDDriverInfo::D3DDeviceInfo *,DeviceManager::DDDriverInfo::D3DDeviceInfo *,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>,DeviceManager::DDDriverInfo::D3DDeviceInfo>
PUBLIC	??$destroy@U_DDSURFACEDESC2@@@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXPAU_DDSURFACEDESC2@@@Z ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::destroy<_DDSURFACEDESC2>
PUBLIC	??$_Val_type@PAU_DDSURFACEDESC2@@@std@@YAPAU_DDSURFACEDESC2@@PAU1@@Z ; std::_Val_type<_DDSURFACEDESC2 *>
PUBLIC	??$_Uninit_move@PAU_DDSURFACEDESC2@@PAU1@V?$allocator@U_DDSURFACEDESC2@@@std@@U1@@std@@YAPAU_DDSURFACEDESC2@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_DDSURFACEDESC2 *,_DDSURFACEDESC2 *,std::allocator<_DDSURFACEDESC2>,_DDSURFACEDESC2>
PUBLIC	??$_Val_type@PAVDDDriverInfo@DeviceManager@@@std@@YAPAVDDDriverInfo@DeviceManager@@PAV12@@Z ; std::_Val_type<DeviceManager::DDDriverInfo *>
PUBLIC	??$_Uninit_move@PAVDDDriverInfo@DeviceManager@@PAV12@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@V12@@std@@YAPAVDDDriverInfo@DeviceManager@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<DeviceManager::DDDriverInfo *,DeviceManager::DDDriverInfo *,std::allocator<DeviceManager::DDDriverInfo>,DeviceManager::DDDriverInfo>
PUBLIC	??$_Val_type@PAU_DDPIXELFORMAT@@@std@@YAPAU_DDPIXELFORMAT@@PAU1@@Z ; std::_Val_type<_DDPIXELFORMAT *>
PUBLIC	??$_Uninit_move@PAU_DDPIXELFORMAT@@PAU1@V?$allocator@U_DDPIXELFORMAT@@@std@@U1@@std@@YAPAU_DDPIXELFORMAT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_DDPIXELFORMAT *,_DDPIXELFORMAT *,std::allocator<_DDPIXELFORMAT>,_DDPIXELFORMAT>
PUBLIC	??$destroy@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@?$allocator_traits@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@SAXAAV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@1@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@Z ; std::allocator_traits<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::destroy<DeviceManager::DDDriverInfo::D3DDeviceInfo>
PUBLIC	??$destroy@VDDDriverInfo@DeviceManager@@@?$allocator_traits@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@SAXAAV?$allocator@VDDDriverInfo@DeviceManager@@@1@PAVDDDriverInfo@DeviceManager@@@Z ; std::allocator_traits<std::allocator<DeviceManager::DDDriverInfo> >::destroy<DeviceManager::DDDriverInfo>
PUBLIC	??$destroy@U_DDPIXELFORMAT@@@?$allocator_traits@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@SAXAAV?$allocator@U_DDPIXELFORMAT@@@1@PAU_DDPIXELFORMAT@@@Z ; std::allocator_traits<std::allocator<_DDPIXELFORMAT> >::destroy<_DDPIXELFORMAT>
PUBLIC	??$destroy@U_DDSURFACEDESC2@@@?$allocator_traits@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@SAXAAV?$allocator@U_DDSURFACEDESC2@@@1@PAU_DDSURFACEDESC2@@@Z ; std::allocator_traits<std::allocator<_DDSURFACEDESC2> >::destroy<_DDSURFACEDESC2>
PUBLIC	??$construct@U_DDSURFACEDESC2@@U1@@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXPAU_DDSURFACEDESC2@@$$QAU2@@Z ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::construct<_DDSURFACEDESC2,_DDSURFACEDESC2>
PUBLIC	??$construct@U_DDPIXELFORMAT@@U1@@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXPAU_DDPIXELFORMAT@@$$QAU2@@Z ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::construct<_DDPIXELFORMAT,_DDPIXELFORMAT>
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QAE@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBEABVD3DDeviceInfo@DDDriverInfo@DeviceManager@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::operator*
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::operator++
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::operator==
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::operator!=
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::_Compat
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@1@0PAV234@@Z ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > > >
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@QAE@PAU_DDSURFACEDESC2@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBEABU_DDSURFACEDESC2@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >::operator*
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >::operator++
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >::operator==
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >::operator!=
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >::_Compat
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEPAU_DDSURFACEDESC2@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@1@0PAU2@@Z ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > > >
PUBLIC	??$destroy@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@Z ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::destroy<DeviceManager::DDDriverInfo::D3DDeviceInfo>
PUBLIC	??$destroy@VDDDriverInfo@DeviceManager@@@?$allocator@VDDDriverInfo@DeviceManager@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@@Z ; std::allocator<DeviceManager::DDDriverInfo>::destroy<DeviceManager::DDDriverInfo>
PUBLIC	??$destroy@U_DDPIXELFORMAT@@@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@@Z ; std::allocator<_DDPIXELFORMAT>::destroy<_DDPIXELFORMAT>
PUBLIC	??$destroy@U_DDSURFACEDESC2@@@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@@Z ; std::allocator<_DDSURFACEDESC2>::destroy<_DDSURFACEDESC2>
PUBLIC	??$forward@U_DDSURFACEDESC2@@@std@@YA$$QAU_DDSURFACEDESC2@@AAU1@@Z ; std::forward<_DDSURFACEDESC2>
PUBLIC	??$construct@U_DDSURFACEDESC2@@U1@@?$allocator_traits@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@SAXAAV?$allocator@U_DDSURFACEDESC2@@@1@PAU_DDSURFACEDESC2@@$$QAU3@@Z ; std::allocator_traits<std::allocator<_DDSURFACEDESC2> >::construct<_DDSURFACEDESC2,_DDSURFACEDESC2>
PUBLIC	??$forward@U_DDPIXELFORMAT@@@std@@YA$$QAU_DDPIXELFORMAT@@AAU1@@Z ; std::forward<_DDPIXELFORMAT>
PUBLIC	??$construct@U_DDPIXELFORMAT@@U1@@?$allocator_traits@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@SAXAAV?$allocator@U_DDPIXELFORMAT@@@1@PAU_DDPIXELFORMAT@@$$QAU3@@Z ; std::allocator_traits<std::allocator<_DDPIXELFORMAT> >::construct<_DDPIXELFORMAT,_DDPIXELFORMAT>
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@U?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@2@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@0@0PAV123@AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >,DeviceManager::DDDriverInfo::D3DDeviceInfo *,std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@PAU_DDSURFACEDESC2@@U?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@2@@std@@YAPAU_DDSURFACEDESC2@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >,_DDSURFACEDESC2 *,std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> > >
PUBLIC	??$construct@U_DDSURFACEDESC2@@U1@@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@$$QAU2@@Z ; std::allocator<_DDSURFACEDESC2>::construct<_DDSURFACEDESC2,_DDSURFACEDESC2>
PUBLIC	??$construct@U_DDPIXELFORMAT@@U1@@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@$$QAU2@@Z ; std::allocator<_DDPIXELFORMAT>::construct<_DDPIXELFORMAT,_DDPIXELFORMAT>
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@0@AAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >,DeviceManager::DDDriverInfo::D3DDeviceInfo *>
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@2@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@0@0PAV123@AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >,DeviceManager::DDDriverInfo::D3DDeviceInfo *,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@PAU_DDSURFACEDESC2@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@0@AAPAU_DDSURFACEDESC2@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >,_DDSURFACEDESC2 *>
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@PAU_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@2@@std@@YAPAU_DDSURFACEDESC2@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >,_DDSURFACEDESC2 *,std::allocator<_DDSURFACEDESC2> >
PUBLIC	??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV123@@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV234@@Z ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::construct<DeviceManager::DDDriverInfo::D3DDeviceInfo,DeviceManager::DDDriverInfo::D3DDeviceInfo const &>
PUBLIC	??$forward@ABVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YAABVD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV123@@Z ; std::forward<DeviceManager::DDDriverInfo::D3DDeviceInfo const &>
PUBLIC	??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV123@@?$allocator_traits@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@SAXAAV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@1@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV345@@Z ; std::allocator_traits<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::construct<DeviceManager::DDDriverInfo::D3DDeviceInfo,DeviceManager::DDDriverInfo::D3DDeviceInfo const &>
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7_com_error@@6B@				; _com_error::`vftable'
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	__TI1?AV_com_error@@
PUBLIC	__CTA1?AV_com_error@@
PUBLIC	??_R0?AV_com_error@@@8				; _com_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AV_com_error@@@8??0_com_error@@QAE@ABV0@@Z16
PUBLIC	??_C@_0CD@OFNGKAAI@DeviceManager?3?3Setup?5?9?5Error?50x?$CF@ ; `string'
PUBLIC	??_C@_0BB@GBPIJPJG@?$CF0dx?$CF0d?5?9?5?$CFd?5Bit?$AA@ ; `string'
PUBLIC	??_C@_0BG@CABGKPIC@Choose?5Display?5Device?$AA@	; `string'
PUBLIC	??_C@_07EKEMFJNL@LISTBOX?$AA@			; `string'
PUBLIC	??_C@_0M@CFLADCE@Feb?518?52013?$AA@		; `string'
PUBLIC	??_C@_0L@NAFBIAKG@DevMgr?4cpp?$AA@		; `string'
PUBLIC	??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0CE@DJNPENE@Failed?5to?5construct?5list?5box?5win@ ; `string'
PUBLIC	??_C@_03OMOEFKGE@?3?5?5?$AA@			; `string'
PUBLIC	??_C@_02KNHHEEKP@?5?5?$AA@			; `string'
PUBLIC	??_C@_0CI@ECNOHHOP@Failed?5to?5add?5device?5to?5selectio@ ; `string'
PUBLIC	??_C@_0CN@LEIKMLC@Click?5OK?5when?5you?8ve?5made?5your?5d@ ; `string'
PUBLIC	??_C@_07FJJAPPM@?$CFd?5x?5?$CFd?$AA@		; `string'
PUBLIC	??_C@_0CD@MAKLMNDE@DeviceManager?3?3CreateContext?5?9?5?$CF@ ; `string'
PUBLIC	??_C@_0CI@MELFNFMP@DeviceManager?3?3OpenDevice?5?9?5Erro@ ; `string'
PUBLIC	??_C@_09FCFFOIDA@ddraw?4dll?$AA@		; `string'
PUBLIC	??_C@_0BH@GFMHGGLD@DirectDrawEnumerateExA?$AA@	; `string'
PUBLIC	??_C@_0DK@DAMPCELI@DeviceManager?3?3DDDriverInfo?3?3Enu@ ; `string'
PUBLIC	??_C@_0CH@FGECMAID@DXContext?3?3Init?$CI0x?$CFX?0?5?$CFd?0?5?$CFd?0?5?$CFd@ ; `string'
PUBLIC	??_C@_0IO@FKDMPLAK@DXContext?3?3Init?5?9?5DriverInfo?5?9?5?$CC@ ; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_0CB@KMJBNHDD@DXContext?3?3DD_Init?5?9?5Error?50x?$CFX?6@ ; `string'
PUBLIC	??_C@_0CJ@NJFEOPDJ@DXContext?3?3SetRenderTarget?5?9?5Err@ ; `string'
PUBLIC	??_C@_0ED@DAKEKFKC@DXContext?3?3AttachDepthBuffer?$CI?$CJ?5?9@ ; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4_com_error@@6B@				; _com_error::`RTTI Complete Object Locator'
PUBLIC	??_R3_com_error@@8				; _com_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_com_error@@8				; _com_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_com_error@@8			; _com_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_exit:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_memcmp:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strcpy:PROC
EXTRN	_strcat:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	__imp__FreeLibrary@4:PROC
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__LocalFree@4:PROC
EXTRN	__imp__LoadLibraryA@4:PROC
EXTRN	__imp__SendMessageA@16:PROC
EXTRN	__imp__CreateWindowExA@48:PROC
EXTRN	__imp__DestroyWindow@4:PROC
EXTRN	__imp__ShowWindow@8:PROC
EXTRN	__imp__AdjustWindowRect@12:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	__imp__SysFreeString@4:PROC
EXTRN	__imp__GetErrorInfo@8:PROC
EXTRN	_sscanf:PROC
EXTRN	_sprintf:PROC
EXTRN	?_com_issue_error@@YGXJ@Z:PROC			; _com_issue_error
EXTRN	??_E_com_error@@UAEPAXI@Z:PROC			; _com_error::`vector deleting destructor'
EXTRN	_DirectDrawEnumerateA@8:PROC
EXTRN	_DirectDrawCreateEx@16:PROC
EXTRN	_D3DXInitialize@0:PROC
EXTRN	_D3DXUninitialize@0:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	_MonoPrint:PROC
EXTRN	?GetDevCaps@DisplayOptionsClass@@SAIXZ:PROC	; DisplayOptionsClass::GetDevCaps
EXTRN	?Setup@CDXEngine@@QAEXPAUIDirect3DDevice7@@PAUIDirect3D7@@PAUIDirectDraw7@@@Z:PROC ; CDXEngine::Setup
EXTRN	?Release@CDXEngine@@QAEXXZ:PROC			; CDXEngine::Release
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_GUID_NULL:BYTE
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	_IID_IDirectDraw7:BYTE
EXTRN	_IID_IDirect3D7:BYTE
EXTRN	_IID_IDirect3DRampDevice:BYTE
EXTRN	_IID_IDirect3DRGBDevice:BYTE
EXTRN	_IID_IDirect3DHALDevice:BYTE
EXTRN	_IID_IDirect3DMMXDevice:BYTE
EXTRN	_IID_IDirect3DRefDevice:BYTE
EXTRN	_IID_IDirect3DTnLHalDevice:BYTE
EXTRN	?TheDXEngine@@3VCDXEngine@@A:BYTE		; TheDXEngine
EXTRN	?g_bUse_DX_Engine@@3_NA:BYTE			; g_bUse_DX_Engine
EXTRN	?g_bForceDXMultiThreadedCoopLevel@@3_NA:BYTE	; g_bForceDXMultiThreadedCoopLevel
EXTRN	?g_CardDetails@@3PADA:BYTE			; g_CardDetails
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?buffer@?1??GetModeName@DeviceManager@@QAEPBDHHH@Z@4PADA
_BSS	SEGMENT
?buffer@?1??GetModeName@DeviceManager@@QAEPBDHHH@Z@4PADA DB 050H DUP (?) ; `DeviceManager::GetModeName'::`2'::buffer
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_com_error@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_com_error@@8 DD FLAT:??_R0?AV_com_error@@@8 ; _com_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_com_error@@8
rdata$r	ENDS
;	COMDAT ??_R2_com_error@@8
rdata$r	SEGMENT
??_R2_com_error@@8 DD FLAT:??_R1A@?0A@EA@_com_error@@8	; _com_error::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_com_error@@8
rdata$r	SEGMENT
??_R3_com_error@@8 DD 00H				; _com_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_com_error@@8
rdata$r	ENDS
;	COMDAT ??_R4_com_error@@6B@
rdata$r	SEGMENT
??_R4_com_error@@6B@ DD 00H				; _com_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_com_error@@@8
	DD	FLAT:??_R3_com_error@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@DAKEKFKC@DXContext?3?3AttachDepthBuffer?$CI?$CJ?5?9@
CONST	SEGMENT
??_C@_0ED@DAKEKFKC@DXContext?3?3AttachDepthBuffer?$CI?$CJ?5?9@ DB 'DXCont'
	DB	'ext::AttachDepthBuffer() - Warning: No Z-Buffer formats !!!', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@NJFEOPDJ@DXContext?3?3SetRenderTarget?5?9?5Err@
CONST	SEGMENT
??_C@_0CJ@NJFEOPDJ@DXContext?3?3SetRenderTarget?5?9?5Err@ DB 'DXContext::'
	DB	'SetRenderTarget - Error 0x%X', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@KMJBNHDD@DXContext?3?3DD_Init?5?9?5Error?50x?$CFX?6@
CONST	SEGMENT
??_C@_0CB@KMJBNHDD@DXContext?3?3DD_Init?5?9?5Error?50x?$CFX?6@ DB 'DXCont'
	DB	'ext::DD_Init - Error 0x%X', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0IO@FKDMPLAK@DXContext?3?3Init?5?9?5DriverInfo?5?9?5?$CC@
CONST	SEGMENT
??_C@_0IO@FKDMPLAK@DXContext?3?3Init?5?9?5DriverInfo?5?9?5?$CC@ DB 'DXCon'
	DB	'text::Init - DriverInfo - "%s" - "%s", Vendor: %d, Device: %d'
	DB	', SubSys: %d, Rev: %d, Product: %d, Version: %d, SubVersion: '
	DB	'%d, Build: %d', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@FGECMAID@DXContext?3?3Init?$CI0x?$CFX?0?5?$CFd?0?5?$CFd?0?5?$CFd@
CONST	SEGMENT
??_C@_0CH@FGECMAID@DXContext?3?3Init?$CI0x?$CFX?0?5?$CFd?0?5?$CFd?0?5?$CFd@ DB 'D'
	DB	'XContext::Init(0x%X, %d, %d, %d, %d)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@DAMPCELI@DeviceManager?3?3DDDriverInfo?3?3Enu@
CONST	SEGMENT
??_C@_0DK@DAMPCELI@DeviceManager?3?3DDDriverInfo?3?3Enu@ DB 'DeviceManage'
	DB	'r::DDDriverInfo::EnumD3DDrivers - Error 0x%X', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GFMHGGLD@DirectDrawEnumerateExA?$AA@
CONST	SEGMENT
??_C@_0BH@GFMHGGLD@DirectDrawEnumerateExA?$AA@ DB 'DirectDrawEnumerateExA'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_09FCFFOIDA@ddraw?4dll?$AA@
CONST	SEGMENT
??_C@_09FCFFOIDA@ddraw?4dll?$AA@ DB 'ddraw.dll', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@MELFNFMP@DeviceManager?3?3OpenDevice?5?9?5Erro@
CONST	SEGMENT
??_C@_0CI@MELFNFMP@DeviceManager?3?3OpenDevice?5?9?5Erro@ DB 'DeviceManag'
	DB	'er::OpenDevice - Error 0x%X', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@MAKLMNDE@DeviceManager?3?3CreateContext?5?9?5?$CF@
CONST	SEGMENT
??_C@_0CD@MAKLMNDE@DeviceManager?3?3CreateContext?5?9?5?$CF@ DB 'DeviceMa'
	DB	'nager::CreateContext - %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07FJJAPPM@?$CFd?5x?5?$CFd?$AA@
CONST	SEGMENT
??_C@_07FJJAPPM@?$CFd?5x?5?$CFd?$AA@ DB '%d x %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@LEIKMLC@Click?5OK?5when?5you?8ve?5made?5your?5d@
CONST	SEGMENT
??_C@_0CN@LEIKMLC@Click?5OK?5when?5you?8ve?5made?5your?5d@ DB 'Click OK w'
	DB	'hen you''ve made your device choice', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@ECNOHHOP@Failed?5to?5add?5device?5to?5selectio@
CONST	SEGMENT
??_C@_0CI@ECNOHHOP@Failed?5to?5add?5device?5to?5selectio@ DB 'Failed to a'
	DB	'dd device to selection list.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02KNHHEEKP@?5?5?$AA@
CONST	SEGMENT
??_C@_02KNHHEEKP@?5?5?$AA@ DB '  ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03OMOEFKGE@?3?5?5?$AA@
CONST	SEGMENT
??_C@_03OMOEFKGE@?3?5?5?$AA@ DB ':  ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@DJNPENE@Failed?5to?5construct?5list?5box?5win@
CONST	SEGMENT
??_C@_0CE@DJNPENE@Failed?5to?5construct?5list?5box?5win@ DB 'Failed to co'
	DB	'nstruct list box window', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@ DB 'Error:  %'
	DB	'0d  %s  %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NAFBIAKG@DevMgr?4cpp?$AA@
CONST	SEGMENT
??_C@_0L@NAFBIAKG@DevMgr?4cpp?$AA@ DB 'DevMgr.cpp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
CONST	SEGMENT
??_C@_0M@CFLADCE@Feb?518?52013?$AA@ DB 'Feb 18 2013', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07EKEMFJNL@LISTBOX?$AA@
CONST	SEGMENT
??_C@_07EKEMFJNL@LISTBOX?$AA@ DB 'LISTBOX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@CABGKPIC@Choose?5Display?5Device?$AA@
CONST	SEGMENT
??_C@_0BG@CABGKPIC@Choose?5Display?5Device?$AA@ DB 'Choose Display Device'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GBPIJPJG@?$CF0dx?$CF0d?5?9?5?$CFd?5Bit?$AA@
CONST	SEGMENT
??_C@_0BB@GBPIJPJG@?$CF0dx?$CF0d?5?9?5?$CFd?5Bit?$AA@ DB '%0dx%0d - %d Bi'
	DB	't', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@OFNGKAAI@DeviceManager?3?3Setup?5?9?5Error?50x?$CF@
CONST	SEGMENT
??_C@_0CD@OFNGKAAI@DeviceManager?3?3Setup?5?9?5Error?50x?$CF@ DB 'DeviceM'
	DB	'anager::Setup - Error 0x%X', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AV_com_error@@@8??0_com_error@@QAE@ABV0@@Z16
xdata$x	SEGMENT
__CT??_R0?AV_com_error@@@8??0_com_error@@QAE@ABV0@@Z16 DD 00H
	DD	FLAT:??_R0?AV_com_error@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	010H
	DD	FLAT:??0_com_error@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AV_com_error@@@8
_DATA	SEGMENT
??_R0?AV_com_error@@@8 DD FLAT:??_7type_info@@6B@	; _com_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_com_error@@', 00H
_DATA	ENDS
;	COMDAT __CTA1?AV_com_error@@
xdata$x	SEGMENT
__CTA1?AV_com_error@@ DD 01H
	DD	FLAT:__CT??_R0?AV_com_error@@@8??0_com_error@@QAE@ABV0@@Z16
xdata$x	ENDS
;	COMDAT __TI1?AV_com_error@@
xdata$x	SEGMENT
__TI1?AV_com_error@@ DD 00H
	DD	FLAT:??1_com_error@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA1?AV_com_error@@
xdata$x	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7_com_error@@6B@
CONST	SEGMENT
??_7_com_error@@6B@ DD FLAT:??_R4_com_error@@6B@	; _com_error::`vftable'
	DD	FLAT:??_E_com_error@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@PAU_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@2@@std@@YAPAU_DDSURFACEDESC2@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@PAU_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@2@@std@@YAPAU_DDSURFACEDESC2@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@PAU_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@2@@std@@YAPAU_DDSURFACEDESC2@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@PAU_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@2@@std@@YAPAU_DDSURFACEDESC2@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@PAU_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@2@@std@@YAPAU_DDSURFACEDESC2@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@PAU_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@2@@std@@YAPAU_DDSURFACEDESC2@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@PAU_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@2@@std@@YAPAU_DDSURFACEDESC2@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@PAU_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@2@@std@@YAPAU_DDSURFACEDESC2@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@2@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@0@0PAV123@AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@2@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@0@0PAV123@AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@2@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@0@0PAV123@AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@2@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@0@0PAV123@AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@2@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@0@0PAV123@AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@2@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@0@0PAV123@AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@2@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@0@0PAV123@AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@2@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@0@0PAV123@AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@U_DDPIXELFORMAT@@U1@@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@$$QAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@U_DDPIXELFORMAT@@U1@@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@$$QAU2@@Z$0
__ehfuncinfo$??$construct@U_DDPIXELFORMAT@@U1@@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@$$QAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@U_DDPIXELFORMAT@@U1@@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@$$QAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@U_DDSURFACEDESC2@@U1@@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@$$QAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@U_DDSURFACEDESC2@@U1@@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@$$QAU2@@Z$0
__ehfuncinfo$??$construct@U_DDSURFACEDESC2@@U1@@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@$$QAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@U_DDSURFACEDESC2@@U1@@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@$$QAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAU_DDPIXELFORMAT@@PAU1@V?$allocator@U_DDPIXELFORMAT@@@std@@U1@@std@@YAPAU_DDPIXELFORMAT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAU_DDPIXELFORMAT@@PAU1@V?$allocator@U_DDPIXELFORMAT@@@std@@U1@@std@@YAPAU_DDPIXELFORMAT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAU_DDPIXELFORMAT@@PAU1@V?$allocator@U_DDPIXELFORMAT@@@std@@U1@@std@@YAPAU_DDPIXELFORMAT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAU_DDPIXELFORMAT@@PAU1@V?$allocator@U_DDPIXELFORMAT@@@std@@U1@@std@@YAPAU_DDPIXELFORMAT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAU_DDPIXELFORMAT@@PAU1@V?$allocator@U_DDPIXELFORMAT@@@std@@U1@@std@@YAPAU_DDPIXELFORMAT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAU_DDPIXELFORMAT@@PAU1@V?$allocator@U_DDPIXELFORMAT@@@std@@U1@@std@@YAPAU_DDPIXELFORMAT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAU_DDPIXELFORMAT@@PAU1@V?$allocator@U_DDPIXELFORMAT@@@std@@U1@@std@@YAPAU_DDPIXELFORMAT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAU_DDPIXELFORMAT@@PAU1@V?$allocator@U_DDPIXELFORMAT@@@std@@U1@@std@@YAPAU_DDPIXELFORMAT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAVDDDriverInfo@DeviceManager@@PAV12@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@V12@@std@@YAPAVDDDriverInfo@DeviceManager@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAVDDDriverInfo@DeviceManager@@PAV12@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@V12@@std@@YAPAVDDDriverInfo@DeviceManager@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAVDDDriverInfo@DeviceManager@@PAV12@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@V12@@std@@YAPAVDDDriverInfo@DeviceManager@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAVDDDriverInfo@DeviceManager@@PAV12@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@V12@@std@@YAPAVDDDriverInfo@DeviceManager@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAVDDDriverInfo@DeviceManager@@PAV12@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@V12@@std@@YAPAVDDDriverInfo@DeviceManager@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAVDDDriverInfo@DeviceManager@@PAV12@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@V12@@std@@YAPAVDDDriverInfo@DeviceManager@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAVDDDriverInfo@DeviceManager@@PAV12@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@V12@@std@@YAPAVDDDriverInfo@DeviceManager@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAVDDDriverInfo@DeviceManager@@PAV12@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@V12@@std@@YAPAVDDDriverInfo@DeviceManager@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAU_DDSURFACEDESC2@@PAU1@V?$allocator@U_DDSURFACEDESC2@@@std@@U1@@std@@YAPAU_DDSURFACEDESC2@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAU_DDSURFACEDESC2@@PAU1@V?$allocator@U_DDSURFACEDESC2@@@std@@U1@@std@@YAPAU_DDSURFACEDESC2@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAU_DDSURFACEDESC2@@PAU1@V?$allocator@U_DDSURFACEDESC2@@@std@@U1@@std@@YAPAU_DDSURFACEDESC2@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAU_DDSURFACEDESC2@@PAU1@V?$allocator@U_DDSURFACEDESC2@@@std@@U1@@std@@YAPAU_DDSURFACEDESC2@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAU_DDSURFACEDESC2@@PAU1@V?$allocator@U_DDSURFACEDESC2@@@std@@U1@@std@@YAPAU_DDSURFACEDESC2@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAU_DDSURFACEDESC2@@PAU1@V?$allocator@U_DDSURFACEDESC2@@@std@@U1@@std@@YAPAU_DDSURFACEDESC2@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAU_DDSURFACEDESC2@@PAU1@V?$allocator@U_DDSURFACEDESC2@@@std@@U1@@std@@YAPAU_DDSURFACEDESC2@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAU_DDSURFACEDESC2@@PAU1@V?$allocator@U_DDSURFACEDESC2@@@std@@U1@@std@@YAPAU_DDSURFACEDESC2@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@V123@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@00AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@V123@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@00AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@V123@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@00AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@V123@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@00AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@V123@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@00AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@V123@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@00AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@V123@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@00AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@V123@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@00AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@U_DDPIXELFORMAT@@AAU1@@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@U_DDPIXELFORMAT@@AAU1@@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@AAU2@@Z$0
__ehfuncinfo$??$construct@U_DDPIXELFORMAT@@AAU1@@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@U_DDPIXELFORMAT@@AAU1@@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@VDDDriverInfo@DeviceManager@@V12@@?$allocator@VDDDriverInfo@DeviceManager@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@$$QAV23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@VDDDriverInfo@DeviceManager@@V12@@?$allocator@VDDDriverInfo@DeviceManager@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@$$QAV23@@Z$0
__ehfuncinfo$??$construct@VDDDriverInfo@DeviceManager@@V12@@?$allocator@VDDDriverInfo@DeviceManager@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@$$QAV23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@VDDDriverInfo@DeviceManager@@V12@@?$allocator@VDDDriverInfo@DeviceManager@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@$$QAV23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@U_DDSURFACEDESC2@@AAU1@@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@U_DDSURFACEDESC2@@AAU1@@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@AAU2@@Z$0
__ehfuncinfo$??$construct@U_DDSURFACEDESC2@@AAU1@@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@U_DDSURFACEDESC2@@AAU1@@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V123@@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@$$QAV234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V123@@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@$$QAV234@@Z$0
__ehfuncinfo$??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V123@@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@$$QAV234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V123@@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@$$QAV234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXI@Z$2
__ehfuncinfo$?_Reallocate@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z$2
__ehfuncinfo$?_Reallocate@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DDDriverInfo@DeviceManager@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DDDriverInfo@DeviceManager@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0DDDriverInfo@DeviceManager@@QAE@ABV01@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0DDDriverInfo@DeviceManager@@QAE@ABV01@@Z$2
__ehfuncinfo$??0DDDriverInfo@DeviceManager@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0DDDriverInfo@DeviceManager@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXI@Z$2
__ehfuncinfo$?_Reallocate@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@ABV01@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@ABV01@@Z$0
__unwindtable$??0?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z$2
__ehfuncinfo$?_Reallocate@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@ABV01@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@ABV01@@Z$0
__unwindtable$??0?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV345@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV345@@Z$0
__ehfuncinfo$?construct@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV345@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV345@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@ABV012@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@ABV012@@Z$0
__ehfuncinfo$??0D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@ABV012@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@ABV012@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?EnumDDCallbackEx@DeviceManager@@SGHPAU_GUID@@PAD1PAXPAUHMONITOR__@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?EnumDDCallbackEx@DeviceManager@@SGHPAU_GUID@@PAD1PAXPAUHMONITOR__@@@Z$0
__unwindtable$?EnumD3DDriversCallback@DDDriverInfo@DeviceManager@@SGJPAD0PAU_D3DDeviceDesc7@@PAX@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?EnumD3DDriversCallback@DDDriverInfo@DeviceManager@@SGJPAD0PAU_D3DDeviceDesc7@@PAX@Z$0
__catchsym$?CreateContext@DeviceManager@@QAEPAVDXContext@@HHHHPAUHWND__@@@Z$4 DD 00H
	DD	FLAT:??_R0?AV_com_error@@@8
	DD	0ffffff98H
	DD	FLAT:__catch$?CreateContext@DeviceManager@@QAEPAVDXContext@@HHHHPAUHWND__@@@Z$0
__catchsym$?Setup@DeviceManager@@QAEXH@Z$3 DD 00H
	DD	FLAT:??_R0?AV_com_error@@@8
	DD	0ffffffdcH
	DD	FLAT:__catch$?Setup@DeviceManager@@QAEXH@Z$0
__unwindtable$?Setup@DeviceManager@@QAEXH@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__catchsym$?EnumD3DDrivers@DDDriverInfo@DeviceManager@@QAEXXZ$6 DD 00H
	DD	FLAT:??_R0?AV_com_error@@@8
	DD	0ffffffb0H
	DD	FLAT:__catch$?EnumD3DDrivers@DDDriverInfo@DeviceManager@@QAEXXZ$0
__unwindtable$??0D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@AAU_D3DDeviceDesc7@@PAD1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@AAU_D3DDeviceDesc7@@PAD1@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@AAU_D3DDeviceDesc7@@PAD1@Z$1
__unwindtable$?AttachDepthBuffer@DXContext@@IAEXPAUIDirectDrawSurface7@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AttachDepthBuffer@DXContext@@IAEXPAUIDirectDrawSurface7@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?AttachDepthBuffer@DXContext@@IAEXPAUIDirectDrawSurface7@@@Z$1
__catchsym$?SetRenderTarget@DXContext@@QAE_NPAUIDirectDrawSurface7@@@Z$7 DD 00H
	DD	FLAT:??_R0?AV_com_error@@@8
	DD	0fffffed0H
	DD	FLAT:__catch$?SetRenderTarget@DXContext@@QAE_NPAUIDirectDrawSurface7@@@Z$0
__catchsym$?Init@DXContext@@QAE_NPAUHWND__@@HHH_N@Z$3 DD 00H
	DD	FLAT:??_R0?AV_com_error@@@8
	DD	0ffffffc4H
	DD	FLAT:__catch$?Init@DXContext@@QAE_NPAUHWND__@@HHH_N@Z$0
__unwindtable$?Init@DXContext@@QAE_NPAUHWND__@@HHH_N@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?CreateContext@DeviceManager@@QAEPAVDXContext@@HHHHPAUHWND__@@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?CreateContext@DeviceManager@@QAEPAVDXContext@@HHHHPAUHWND__@@@Z$4
__tryblocktable$?Setup@DeviceManager@@QAEXH@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?Setup@DeviceManager@@QAEXH@Z$3
__tryblocktable$?EnumD3DDrivers@DDDriverInfo@DeviceManager@@QAEXXZ DD 00H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$?EnumD3DDrivers@DDDriverInfo@DeviceManager@@QAEXXZ$6
__tryblocktable$?SetRenderTarget@DXContext@@QAE_NPAUIDirectDrawSurface7@@@Z DD 00H
	DD	04H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$?SetRenderTarget@DXContext@@QAE_NPAUIDirectDrawSurface7@@@Z$7
__tryblocktable$?Init@DXContext@@QAE_NPAUHWND__@@HHH_N@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?Init@DXContext@@QAE_NPAUHWND__@@HHH_N@Z$3
__unwindtable$?CreateContext@DeviceManager@@QAEPAVDXContext@@HHHHPAUHWND__@@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?CreateContext@DeviceManager@@QAEPAVDXContext@@HHHHPAUHWND__@@@Z$2
	DD	0ffffffffH
	DD	00H
__unwindtable$??0DDDriverInfo@DeviceManager@@QAE@U_GUID@@PBD1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DDDriverInfo@DeviceManager@@QAE@U_GUID@@PBD1@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0DDDriverInfo@DeviceManager@@QAE@U_GUID@@PBD1@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0DDDriverInfo@DeviceManager@@QAE@U_GUID@@PBD1@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0DDDriverInfo@DeviceManager@@QAE@U_GUID@@PBD1@Z$3
__ehfuncinfo$?CreateContext@DeviceManager@@QAEPAVDXContext@@HHHHPAUHWND__@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?CreateContext@DeviceManager@@QAEPAVDXContext@@HHHHPAUHWND__@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?CreateContext@DeviceManager@@QAEPAVDXContext@@HHHHPAUHWND__@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?EnumDDCallbackEx@DeviceManager@@SGHPAU_GUID@@PAD1PAXPAUHMONITOR__@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?EnumDDCallbackEx@DeviceManager@@SGHPAU_GUID@@PAD1PAXPAUHMONITOR__@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Setup@DeviceManager@@QAEXH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Setup@DeviceManager@@QAEXH@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Setup@DeviceManager@@QAEXH@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?EnumD3DDriversCallback@DDDriverInfo@DeviceManager@@SGJPAD0PAU_D3DDeviceDesc7@@PAX@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?EnumD3DDriversCallback@DDDriverInfo@DeviceManager@@SGJPAD0PAU_D3DDeviceDesc7@@PAX@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?EnumD3DDrivers@DDDriverInfo@DeviceManager@@QAEXXZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?EnumD3DDrivers@DDDriverInfo@DeviceManager@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?EnumD3DDrivers@DDDriverInfo@DeviceManager@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@AAU_D3DDeviceDesc7@@PAD1@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@AAU_D3DDeviceDesc7@@PAD1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0DDDriverInfo@DeviceManager@@QAE@U_GUID@@PBD1@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0DDDriverInfo@DeviceManager@@QAE@U_GUID@@PBD1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?AttachDepthBuffer@DXContext@@IAEXPAUIDirectDrawSurface7@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?AttachDepthBuffer@DXContext@@IAEXPAUIDirectDrawSurface7@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?SetRenderTarget@DXContext@@QAE_NPAUIDirectDrawSurface7@@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?SetRenderTarget@DXContext@@QAE_NPAUIDirectDrawSurface7@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?SetRenderTarget@DXContext@@QAE_NPAUIDirectDrawSurface7@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Init@DXContext@@QAE_NPAUHWND__@@HHH_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Init@DXContext@@QAE_NPAUHWND__@@HHH_N@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Init@DXContext@@QAE_NPAUHWND__@@HHH_N@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?EnumD3DDrivers@DDDriverInfo@DeviceManager@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?EnumD3DDrivers@DDDriverInfo@DeviceManager@@QAEXXZ$2
	DD	01H
	DD	FLAT:__unwindfunclet$?EnumD3DDrivers@DDDriverInfo@DeviceManager@@QAEXXZ$3
	DD	02H
	DD	FLAT:__unwindfunclet$?EnumD3DDrivers@DDDriverInfo@DeviceManager@@QAEXXZ$4
	DD	0ffffffffH
	DD	00H
__unwindtable$?SetRenderTarget@DXContext@@QAE_NPAUIDirectDrawSurface7@@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?SetRenderTarget@DXContext@@QAE_NPAUIDirectDrawSurface7@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?SetRenderTarget@DXContext@@QAE_NPAUIDirectDrawSurface7@@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?SetRenderTarget@DXContext@@QAE_NPAUIDirectDrawSurface7@@@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?SetRenderTarget@DXContext@@QAE_NPAUIDirectDrawSurface7@@@Z$5
	DD	0ffffffffH
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV123@@?$allocator_traits@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@SAXAAV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@1@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV345@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV123@@?$allocator_traits@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@SAXAAV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@1@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV345@@Z PROC ; std::allocator_traits<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::construct<DeviceManager::DDDriverInfo::D3DDeviceInfo,DeviceManager::DDDriverInfo::D3DDeviceInfo const &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@ABVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YAABVD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV123@@Z ; std::forward<DeviceManager::DDDriverInfo::D3DDeviceInfo const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV345@@Z ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::construct
	pop	ebp
	ret	0
??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV123@@?$allocator_traits@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@SAXAAV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@1@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV345@@Z ENDP ; std::allocator_traits<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::construct<DeviceManager::DDDriverInfo::D3DDeviceInfo,DeviceManager::DDDriverInfo::D3DDeviceInfo const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@ABVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YAABVD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV123@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YAABVD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV123@@Z PROC ; std::forward<DeviceManager::DDDriverInfo::D3DDeviceInfo const &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@ABVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YAABVD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV123@@Z ENDP ; std::forward<DeviceManager::DDDriverInfo::D3DDeviceInfo const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV123@@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV234@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV123@@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV234@@Z PROC ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::construct<DeviceManager::DDDriverInfo::D3DDeviceInfo,DeviceManager::DDDriverInfo::D3DDeviceInfo const &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@ABVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YAABVD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV123@@Z ; std::forward<DeviceManager::DDDriverInfo::D3DDeviceInfo const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV123@@?$allocator_traits@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@SAXAAV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@1@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV345@@Z ; std::allocator_traits<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::construct<DeviceManager::DDDriverInfo::D3DDeviceInfo,DeviceManager::DDDriverInfo::D3DDeviceInfo const &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV123@@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV234@@Z ENDP ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::construct<DeviceManager::DDDriverInfo::D3DDeviceInfo,DeviceManager::DDDriverInfo::D3DDeviceInfo const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@PAU_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@2@@std@@YAPAU_DDSURFACEDESC2@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
tv84 = -28						; size = 4
__Next$ = -24						; size = 4
tv83 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@PAU_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@2@@std@@YAPAU_DDSURFACEDESC2@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >,_DDSURFACEDESC2 *,std::allocator<_DDSURFACEDESC2> >, COMDAT

; 371  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@PAU_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@2@@std@@YAPAU_DDSURFACEDESC2@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 372  : 	_DEBUG_RANGE(_First, _Last);
; 373  : 	_DEBUG_POINTER(_Dest);
; 374  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 375  : 
; 376  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 377  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop
$LN5@Uninit_cop:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 124				; 0000007cH
	mov	DWORD PTR __Dest$[ebp], ecx
	lea	ecx, DWORD PTR __First$[ebp]
	call	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >::operator++
$LN6@Uninit_cop:
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >::operator!=
	mov	BYTE PTR tv83[ebp], al
	movzx	eax, BYTE PTR tv83[ebp]
	test	eax, eax
	je	SHORT $LN4@Uninit_cop

; 378  : 		_Al.construct(_Dest, *_First);

	lea	ecx, DWORD PTR __First$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBEABU_DDSURFACEDESC2@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >::operator*
	mov	DWORD PTR tv84[ebp], eax
	mov	ecx, DWORD PTR tv84[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@U_DDSURFACEDESC2@@ABU1@@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXPAU_DDSURFACEDESC2@@ABU2@@Z ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::construct<_DDSURFACEDESC2,_DDSURFACEDESC2 const &>
	jmp	SHORT $LN5@Uninit_cop
$LN4@Uninit_cop:
	jmp	SHORT $LN10@Uninit_cop
__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@PAU_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@2@@std@@YAPAU_DDSURFACEDESC2@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 379  : 	_CATCH_ALL
; 380  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop
$LN2@Uninit_cop:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 124				; 0000007cH
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop

; 381  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@U_DDSURFACEDESC2@@@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXPAU_DDSURFACEDESC2@@@Z ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::destroy<_DDSURFACEDESC2>
	jmp	SHORT $LN2@Uninit_cop
$LN1@Uninit_cop:

; 382  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 383  : 	_CATCH_END

	mov	eax, $LN13@Uninit_cop
	ret	0
$LN10@Uninit_cop:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@PAU_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@2@@std@@YAPAU_DDSURFACEDESC2@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$1
$LN13@Uninit_cop:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@PAU_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@2@@std@@YAPAU_DDSURFACEDESC2@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$1:

; 384  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop:

; 385  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@PAU_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@2@@std@@YAPAU_DDSURFACEDESC2@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@PAU_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@2@@std@@YAPAU_DDSURFACEDESC2@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@PAU_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@2@@std@@YAPAU_DDSURFACEDESC2@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >,_DDSURFACEDESC2 *,std::allocator<_DDSURFACEDESC2> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@PAU_DDSURFACEDESC2@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@0@AAPAU_DDSURFACEDESC2@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@PAU_DDSURFACEDESC2@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@0@AAPAU_DDSURFACEDESC2@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >,_DDSURFACEDESC2 *>, COMDAT

; 407  : 	{	// return pointer category from arbitrary arguments

	push	ebp
	mov	ebp, esp
	push	ecx

; 408  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 409  : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@PAU_DDSURFACEDESC2@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@0@AAPAU_DDSURFACEDESC2@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >,_DDSURFACEDESC2 *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@2@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@0@0PAV123@AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
tv84 = -28						; size = 4
__Next$ = -24						; size = 4
tv83 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@2@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@0@0PAV123@AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >,DeviceManager::DDDriverInfo::D3DDeviceInfo *,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >, COMDAT

; 371  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@2@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@0@0PAV123@AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 372  : 	_DEBUG_RANGE(_First, _Last);
; 373  : 	_DEBUG_POINTER(_Dest);
; 374  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 375  : 
; 376  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 377  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop
$LN5@Uninit_cop:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 284				; 0000011cH
	mov	DWORD PTR __Dest$[ebp], ecx
	lea	ecx, DWORD PTR __First$[ebp]
	call	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::operator++
$LN6@Uninit_cop:
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::operator!=
	mov	BYTE PTR tv83[ebp], al
	movzx	eax, BYTE PTR tv83[ebp]
	test	eax, eax
	je	SHORT $LN4@Uninit_cop

; 378  : 		_Al.construct(_Dest, *_First);

	lea	ecx, DWORD PTR __First$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBEABVD3DDeviceInfo@DDDriverInfo@DeviceManager@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::operator*
	mov	DWORD PTR tv84[ebp], eax
	mov	ecx, DWORD PTR tv84[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV123@@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV234@@Z ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::construct<DeviceManager::DDDriverInfo::D3DDeviceInfo,DeviceManager::DDDriverInfo::D3DDeviceInfo const &>
	jmp	SHORT $LN5@Uninit_cop
$LN4@Uninit_cop:
	jmp	SHORT $LN10@Uninit_cop
__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@2@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@0@0PAV123@AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 379  : 	_CATCH_ALL
; 380  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop
$LN2@Uninit_cop:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 284				; 0000011cH
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop

; 381  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@Z ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::destroy<DeviceManager::DDDriverInfo::D3DDeviceInfo>
	jmp	SHORT $LN2@Uninit_cop
$LN1@Uninit_cop:

; 382  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 383  : 	_CATCH_END

	mov	eax, $LN13@Uninit_cop
	ret	0
$LN10@Uninit_cop:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@2@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@0@0PAV123@AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$1
$LN13@Uninit_cop:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@2@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@0@0PAV123@AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$1:

; 384  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop:

; 385  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@2@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@0@0PAV123@AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@2@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@0@0PAV123@AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@2@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@0@0PAV123@AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >,DeviceManager::DDDriverInfo::D3DDeviceInfo *,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@0@AAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@0@AAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >,DeviceManager::DDDriverInfo::D3DDeviceInfo *>, COMDAT

; 407  : 	{	// return pointer category from arbitrary arguments

	push	ebp
	mov	ebp, esp
	push	ecx

; 408  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 409  : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@0@AAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >,DeviceManager::DDDriverInfo::D3DDeviceInfo *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@U_DDPIXELFORMAT@@U1@@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@$$QAU2@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv74 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@U_DDPIXELFORMAT@@U1@@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@$$QAU2@@Z PROC ; std::allocator<_DDPIXELFORMAT>::construct<_DDPIXELFORMAT,_DDPIXELFORMAT>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@U_DDPIXELFORMAT@@U1@@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@$$QAU2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	32					; 00000020H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@U_DDPIXELFORMAT@@@std@@YA$$QAU_DDPIXELFORMAT@@AAU1@@Z ; std::forward<_DDPIXELFORMAT>
	add	esp, 4
	mov	ecx, 8
	mov	esi, eax
	mov	edi, DWORD PTR $T3[ebp]
	rep movsd
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv74[ebp], edx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv74[ebp], 0
$LN4@construct:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@U_DDPIXELFORMAT@@U1@@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@$$QAU2@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@U_DDPIXELFORMAT@@U1@@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@$$QAU2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@U_DDPIXELFORMAT@@U1@@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@$$QAU2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@U_DDPIXELFORMAT@@U1@@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@$$QAU2@@Z ENDP ; std::allocator<_DDPIXELFORMAT>::construct<_DDPIXELFORMAT,_DDPIXELFORMAT>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@U_DDSURFACEDESC2@@U1@@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@$$QAU2@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv74 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@U_DDSURFACEDESC2@@U1@@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@$$QAU2@@Z PROC ; std::allocator<_DDSURFACEDESC2>::construct<_DDSURFACEDESC2,_DDSURFACEDESC2>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@U_DDSURFACEDESC2@@U1@@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@$$QAU2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	124					; 0000007cH
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@U_DDSURFACEDESC2@@@std@@YA$$QAU_DDSURFACEDESC2@@AAU1@@Z ; std::forward<_DDSURFACEDESC2>
	add	esp, 4
	mov	ecx, 31					; 0000001fH
	mov	esi, eax
	mov	edi, DWORD PTR $T3[ebp]
	rep movsd
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv74[ebp], edx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv74[ebp], 0
$LN4@construct:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@U_DDSURFACEDESC2@@U1@@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@$$QAU2@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@U_DDSURFACEDESC2@@U1@@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@$$QAU2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@U_DDSURFACEDESC2@@U1@@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@$$QAU2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@U_DDSURFACEDESC2@@U1@@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@$$QAU2@@Z ENDP ; std::allocator<_DDSURFACEDESC2>::construct<_DDSURFACEDESC2,_DDSURFACEDESC2>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@PAU_DDSURFACEDESC2@@U?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@2@@std@@YAPAU_DDSURFACEDESC2@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@PAU_DDSURFACEDESC2@@U?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@2@@std@@YAPAU_DDSURFACEDESC2@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >,_DDSURFACEDESC2 *,std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> > >, COMDAT

; 414  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 415  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 416  : 		_Ptr_cat(_First, _Dest)));

	lea	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@PAU_DDSURFACEDESC2@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@0@AAPAU_DDSURFACEDESC2@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >,_DDSURFACEDESC2 *>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@PAU_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@2@@std@@YAPAU_DDSURFACEDESC2@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >,_DDSURFACEDESC2 *,std::allocator<_DDSURFACEDESC2> >
	add	esp, 20					; 00000014H

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@PAU_DDSURFACEDESC2@@U?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@2@@std@@YAPAU_DDSURFACEDESC2@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >,_DDSURFACEDESC2 *,std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@U?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@2@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@0@0PAV123@AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@U?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@2@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@0@0PAV123@AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >,DeviceManager::DDDriverInfo::D3DDeviceInfo *,std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >, COMDAT

; 414  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 415  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 416  : 		_Ptr_cat(_First, _Dest)));

	lea	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@0@AAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >,DeviceManager::DDDriverInfo::D3DDeviceInfo *>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@2@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@0@0PAV123@AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >,DeviceManager::DDDriverInfo::D3DDeviceInfo *,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >
	add	esp, 20					; 00000014H

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@U?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@2@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@0@0PAV123@AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >,DeviceManager::DDDriverInfo::D3DDeviceInfo *,std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@U_DDPIXELFORMAT@@U1@@?$allocator_traits@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@SAXAAV?$allocator@U_DDPIXELFORMAT@@@1@PAU_DDPIXELFORMAT@@$$QAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@U_DDPIXELFORMAT@@U1@@?$allocator_traits@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@SAXAAV?$allocator@U_DDPIXELFORMAT@@@1@PAU_DDPIXELFORMAT@@$$QAU3@@Z PROC ; std::allocator_traits<std::allocator<_DDPIXELFORMAT> >::construct<_DDPIXELFORMAT,_DDPIXELFORMAT>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@U_DDPIXELFORMAT@@@std@@YA$$QAU_DDPIXELFORMAT@@AAU1@@Z ; std::forward<_DDPIXELFORMAT>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@U_DDPIXELFORMAT@@U1@@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@$$QAU2@@Z ; std::allocator<_DDPIXELFORMAT>::construct<_DDPIXELFORMAT,_DDPIXELFORMAT>
	pop	ebp
	ret	0
??$construct@U_DDPIXELFORMAT@@U1@@?$allocator_traits@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@SAXAAV?$allocator@U_DDPIXELFORMAT@@@1@PAU_DDPIXELFORMAT@@$$QAU3@@Z ENDP ; std::allocator_traits<std::allocator<_DDPIXELFORMAT> >::construct<_DDPIXELFORMAT,_DDPIXELFORMAT>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@U_DDPIXELFORMAT@@@std@@YA$$QAU_DDPIXELFORMAT@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_DDPIXELFORMAT@@@std@@YA$$QAU_DDPIXELFORMAT@@AAU1@@Z PROC ; std::forward<_DDPIXELFORMAT>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@U_DDPIXELFORMAT@@@std@@YA$$QAU_DDPIXELFORMAT@@AAU1@@Z ENDP ; std::forward<_DDPIXELFORMAT>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@U_DDSURFACEDESC2@@U1@@?$allocator_traits@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@SAXAAV?$allocator@U_DDSURFACEDESC2@@@1@PAU_DDSURFACEDESC2@@$$QAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@U_DDSURFACEDESC2@@U1@@?$allocator_traits@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@SAXAAV?$allocator@U_DDSURFACEDESC2@@@1@PAU_DDSURFACEDESC2@@$$QAU3@@Z PROC ; std::allocator_traits<std::allocator<_DDSURFACEDESC2> >::construct<_DDSURFACEDESC2,_DDSURFACEDESC2>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@U_DDSURFACEDESC2@@@std@@YA$$QAU_DDSURFACEDESC2@@AAU1@@Z ; std::forward<_DDSURFACEDESC2>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@U_DDSURFACEDESC2@@U1@@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@$$QAU2@@Z ; std::allocator<_DDSURFACEDESC2>::construct<_DDSURFACEDESC2,_DDSURFACEDESC2>
	pop	ebp
	ret	0
??$construct@U_DDSURFACEDESC2@@U1@@?$allocator_traits@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@SAXAAV?$allocator@U_DDSURFACEDESC2@@@1@PAU_DDSURFACEDESC2@@$$QAU3@@Z ENDP ; std::allocator_traits<std::allocator<_DDSURFACEDESC2> >::construct<_DDSURFACEDESC2,_DDSURFACEDESC2>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@U_DDSURFACEDESC2@@@std@@YA$$QAU_DDSURFACEDESC2@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_DDSURFACEDESC2@@@std@@YA$$QAU_DDSURFACEDESC2@@AAU1@@Z PROC ; std::forward<_DDSURFACEDESC2>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@U_DDSURFACEDESC2@@@std@@YA$$QAU_DDSURFACEDESC2@@AAU1@@Z ENDP ; std::forward<_DDSURFACEDESC2>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_DDSURFACEDESC2@@@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@U_DDSURFACEDESC2@@@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@@Z PROC ; std::allocator<_DDSURFACEDESC2>::destroy<_DDSURFACEDESC2>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@U_DDSURFACEDESC2@@@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@@Z ENDP ; std::allocator<_DDSURFACEDESC2>::destroy<_DDSURFACEDESC2>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_DDPIXELFORMAT@@@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@U_DDPIXELFORMAT@@@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@@Z PROC ; std::allocator<_DDPIXELFORMAT>::destroy<_DDPIXELFORMAT>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@U_DDPIXELFORMAT@@@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@@Z ENDP ; std::allocator<_DDPIXELFORMAT>::destroy<_DDPIXELFORMAT>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@VDDDriverInfo@DeviceManager@@@?$allocator@VDDDriverInfo@DeviceManager@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@VDDDriverInfo@DeviceManager@@@?$allocator@VDDDriverInfo@DeviceManager@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@@Z PROC ; std::allocator<DeviceManager::DDDriverInfo>::destroy<DeviceManager::DDDriverInfo>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();

	push	0
	mov	ecx, DWORD PTR __Ptr$[ebp]
	call	??_GDDDriverInfo@DeviceManager@@QAEPAXI@Z

; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@VDDDriverInfo@DeviceManager@@@?$allocator@VDDDriverInfo@DeviceManager@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@@Z ENDP ; std::allocator<DeviceManager::DDDriverInfo>::destroy<DeviceManager::DDDriverInfo>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@Z PROC ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::destroy<DeviceManager::DDDriverInfo::D3DDeviceInfo>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();

	push	0
	mov	ecx, DWORD PTR __Ptr$[ebp]
	call	??_GD3DDeviceInfo@DDDriverInfo@DeviceManager@@QAEPAXI@Z

; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@Z ENDP ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::destroy<DeviceManager::DDDriverInfo::D3DDeviceInfo>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEPAU_DDSURFACEDESC2@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@1@0PAU2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEPAU_DDSURFACEDESC2@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@1@0PAU2@@Z PROC ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > > >, COMDAT
; _this$ = ecx

; 1549 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1550 : 		{	// copy initializing [_First, _Last), using allocator
; 1551 : 		_Alty _Alval(this->_Getal());

	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> > >::_Getal

; 1552 : 		return (_Uninitialized_copy(_First, _Last,
; 1553 : 			_Ptr, _Alval));

	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@PAU_DDSURFACEDESC2@@U?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@2@@std@@YAPAU_DDSURFACEDESC2@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >,_DDSURFACEDESC2 *,std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> > >
	add	esp, 16					; 00000010H

; 1554 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEPAU_DDSURFACEDESC2@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@1@0PAU2@@Z ENDP ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >::_Compat, COMDAT
; _this$ = ecx

; 254  : 		{	// test for compatible iterator pair

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 255  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv69 = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >::operator!=, COMDAT
; _this$ = ecx

; 209  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 210  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]

; 211  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 		_Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >::_Compat

; 205  : 		return (this->_Ptr == _Right._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]

; 206  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >::operator++, COMDAT
; _this$ = ecx

; 95   : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 124				; 0000007cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 113  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 114  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBEABU_DDSURFACEDESC2@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBEABU_DDSURFACEDESC2@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >::operator*, COMDAT
; _this$ = ecx

; 65   : 		{	// return designated object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 87   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBEABU_DDSURFACEDESC2@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@QAE@PAU_DDSURFACEDESC2@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@QAE@PAU_DDSURFACEDESC2@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct with pointer _Parg

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [eax], ecx

; 48   : 		this->_Adopt(_Pvector);

	mov	edx, DWORD PTR __Pvector$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z	; std::_Iterator_base0::_Adopt

; 49   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@QAE@PAU_DDSURFACEDESC2@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@1@0PAV234@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@1@0PAV234@@Z PROC ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > > >, COMDAT
; _this$ = ecx

; 1549 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1550 : 		{	// copy initializing [_First, _Last), using allocator
; 1551 : 		_Alty _Alval(this->_Getal());

	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::_Getal

; 1552 : 		return (_Uninitialized_copy(_First, _Last,
; 1553 : 			_Ptr, _Alval));

	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@U?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@2@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@0@0PAV123@AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >,DeviceManager::DDDriverInfo::D3DDeviceInfo *,std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >
	add	esp, 16					; 00000010H

; 1554 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@1@0PAV234@@Z ENDP ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::_Compat, COMDAT
; _this$ = ecx

; 254  : 		{	// test for compatible iterator pair

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 255  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv69 = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::operator!=, COMDAT
; _this$ = ecx

; 209  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 210  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]

; 211  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 		_Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::_Compat

; 205  : 		return (this->_Ptr == _Right._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]

; 206  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::operator++, COMDAT
; _this$ = ecx

; 95   : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 284				; 0000011cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 113  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 114  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBEABVD3DDeviceInfo@DDDriverInfo@DeviceManager@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBEABVD3DDeviceInfo@DDDriverInfo@DeviceManager@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::operator*, COMDAT
; _this$ = ecx

; 65   : 		{	// return designated object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 87   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBEABVD3DDeviceInfo@DDDriverInfo@DeviceManager@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QAE@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QAE@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct with pointer _Parg

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [eax], ecx

; 48   : 		this->_Adopt(_Pvector);

	mov	edx, DWORD PTR __Pvector$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z	; std::_Iterator_base0::_Adopt

; 49   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QAE@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@U_DDPIXELFORMAT@@U1@@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXPAU_DDPIXELFORMAT@@$$QAU2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@U_DDPIXELFORMAT@@U1@@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXPAU_DDPIXELFORMAT@@$$QAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::construct<_DDPIXELFORMAT,_DDPIXELFORMAT>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@U_DDPIXELFORMAT@@@std@@YA$$QAU_DDPIXELFORMAT@@AAU1@@Z ; std::forward<_DDPIXELFORMAT>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@U_DDPIXELFORMAT@@U1@@?$allocator_traits@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@SAXAAV?$allocator@U_DDPIXELFORMAT@@@1@PAU_DDPIXELFORMAT@@$$QAU3@@Z ; std::allocator_traits<std::allocator<_DDPIXELFORMAT> >::construct<_DDPIXELFORMAT,_DDPIXELFORMAT>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@U_DDPIXELFORMAT@@U1@@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXPAU_DDPIXELFORMAT@@$$QAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::construct<_DDPIXELFORMAT,_DDPIXELFORMAT>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@U_DDSURFACEDESC2@@U1@@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXPAU_DDSURFACEDESC2@@$$QAU2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@U_DDSURFACEDESC2@@U1@@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXPAU_DDSURFACEDESC2@@$$QAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::construct<_DDSURFACEDESC2,_DDSURFACEDESC2>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@U_DDSURFACEDESC2@@@std@@YA$$QAU_DDSURFACEDESC2@@AAU1@@Z ; std::forward<_DDSURFACEDESC2>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@U_DDSURFACEDESC2@@U1@@?$allocator_traits@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@SAXAAV?$allocator@U_DDSURFACEDESC2@@@1@PAU_DDSURFACEDESC2@@$$QAU3@@Z ; std::allocator_traits<std::allocator<_DDSURFACEDESC2> >::construct<_DDSURFACEDESC2,_DDSURFACEDESC2>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@U_DDSURFACEDESC2@@U1@@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXPAU_DDSURFACEDESC2@@$$QAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::construct<_DDSURFACEDESC2,_DDSURFACEDESC2>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_DDSURFACEDESC2@@@?$allocator_traits@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@SAXAAV?$allocator@U_DDSURFACEDESC2@@@1@PAU_DDSURFACEDESC2@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U_DDSURFACEDESC2@@@?$allocator_traits@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@SAXAAV?$allocator@U_DDSURFACEDESC2@@@1@PAU_DDSURFACEDESC2@@@Z PROC ; std::allocator_traits<std::allocator<_DDSURFACEDESC2> >::destroy<_DDSURFACEDESC2>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@U_DDSURFACEDESC2@@@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@@Z ; std::allocator<_DDSURFACEDESC2>::destroy<_DDSURFACEDESC2>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@U_DDSURFACEDESC2@@@?$allocator_traits@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@SAXAAV?$allocator@U_DDSURFACEDESC2@@@1@PAU_DDSURFACEDESC2@@@Z ENDP ; std::allocator_traits<std::allocator<_DDSURFACEDESC2> >::destroy<_DDSURFACEDESC2>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_DDPIXELFORMAT@@@?$allocator_traits@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@SAXAAV?$allocator@U_DDPIXELFORMAT@@@1@PAU_DDPIXELFORMAT@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U_DDPIXELFORMAT@@@?$allocator_traits@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@SAXAAV?$allocator@U_DDPIXELFORMAT@@@1@PAU_DDPIXELFORMAT@@@Z PROC ; std::allocator_traits<std::allocator<_DDPIXELFORMAT> >::destroy<_DDPIXELFORMAT>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@U_DDPIXELFORMAT@@@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@@Z ; std::allocator<_DDPIXELFORMAT>::destroy<_DDPIXELFORMAT>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@U_DDPIXELFORMAT@@@?$allocator_traits@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@SAXAAV?$allocator@U_DDPIXELFORMAT@@@1@PAU_DDPIXELFORMAT@@@Z ENDP ; std::allocator_traits<std::allocator<_DDPIXELFORMAT> >::destroy<_DDPIXELFORMAT>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@VDDDriverInfo@DeviceManager@@@?$allocator_traits@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@SAXAAV?$allocator@VDDDriverInfo@DeviceManager@@@1@PAVDDDriverInfo@DeviceManager@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@VDDDriverInfo@DeviceManager@@@?$allocator_traits@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@SAXAAV?$allocator@VDDDriverInfo@DeviceManager@@@1@PAVDDDriverInfo@DeviceManager@@@Z PROC ; std::allocator_traits<std::allocator<DeviceManager::DDDriverInfo> >::destroy<DeviceManager::DDDriverInfo>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@VDDDriverInfo@DeviceManager@@@?$allocator@VDDDriverInfo@DeviceManager@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@@Z ; std::allocator<DeviceManager::DDDriverInfo>::destroy<DeviceManager::DDDriverInfo>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@VDDDriverInfo@DeviceManager@@@?$allocator_traits@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@SAXAAV?$allocator@VDDDriverInfo@DeviceManager@@@1@PAVDDDriverInfo@DeviceManager@@@Z ENDP ; std::allocator_traits<std::allocator<DeviceManager::DDDriverInfo> >::destroy<DeviceManager::DDDriverInfo>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@?$allocator_traits@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@SAXAAV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@1@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@?$allocator_traits@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@SAXAAV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@1@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@Z PROC ; std::allocator_traits<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::destroy<DeviceManager::DDDriverInfo::D3DDeviceInfo>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@Z ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::destroy<DeviceManager::DDDriverInfo::D3DDeviceInfo>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@?$allocator_traits@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@SAXAAV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@1@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@Z ENDP ; std::allocator_traits<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::destroy<DeviceManager::DDDriverInfo::D3DDeviceInfo>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAU_DDPIXELFORMAT@@PAU1@V?$allocator@U_DDPIXELFORMAT@@@std@@U1@@std@@YAPAU_DDPIXELFORMAT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAU_DDPIXELFORMAT@@PAU1@V?$allocator@U_DDPIXELFORMAT@@@std@@U1@@std@@YAPAU_DDPIXELFORMAT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<_DDPIXELFORMAT *,_DDPIXELFORMAT *,std::allocator<_DDPIXELFORMAT>,_DDPIXELFORMAT>, COMDAT

; 426  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_move@PAU_DDPIXELFORMAT@@PAU1@V?$allocator@U_DDPIXELFORMAT@@@std@@U1@@std@@YAPAU_DDPIXELFORMAT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 427  : 	_DEBUG_RANGE(_First, _Last);
; 428  : 	_DEBUG_POINTER(_Dest);
; 429  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 430  : 
; 431  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 432  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_mov
$LN5@Uninit_mov:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_mov:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_mov

; 433  : 		_Al.construct(_Dest, (_Valty&&)*_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@U_DDPIXELFORMAT@@U1@@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXPAU_DDPIXELFORMAT@@$$QAU2@@Z ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::construct<_DDPIXELFORMAT,_DDPIXELFORMAT>
	jmp	SHORT $LN5@Uninit_mov
$LN4@Uninit_mov:
	jmp	SHORT $LN10@Uninit_mov
__catch$??$_Uninit_move@PAU_DDPIXELFORMAT@@PAU1@V?$allocator@U_DDPIXELFORMAT@@@std@@U1@@std@@YAPAU_DDPIXELFORMAT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 434  : 	_CATCH_ALL
; 435  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_mov
$LN2@Uninit_mov:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_mov:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_mov

; 436  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@U_DDPIXELFORMAT@@@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXPAU_DDPIXELFORMAT@@@Z ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::destroy<_DDPIXELFORMAT>
	jmp	SHORT $LN2@Uninit_mov
$LN1@Uninit_mov:

; 437  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 438  : 	_CATCH_END

	mov	eax, $LN13@Uninit_mov
	ret	0
$LN10@Uninit_mov:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Uninit_move@PAU_DDPIXELFORMAT@@PAU1@V?$allocator@U_DDPIXELFORMAT@@@std@@U1@@std@@YAPAU_DDPIXELFORMAT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1
$LN13@Uninit_mov:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_move@PAU_DDPIXELFORMAT@@PAU1@V?$allocator@U_DDPIXELFORMAT@@@std@@U1@@std@@YAPAU_DDPIXELFORMAT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1:

; 439  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_mov:

; 440  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAU_DDPIXELFORMAT@@PAU1@V?$allocator@U_DDPIXELFORMAT@@@std@@U1@@std@@YAPAU_DDPIXELFORMAT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAU_DDPIXELFORMAT@@PAU1@V?$allocator@U_DDPIXELFORMAT@@@std@@U1@@std@@YAPAU_DDPIXELFORMAT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAU_DDPIXELFORMAT@@PAU1@V?$allocator@U_DDPIXELFORMAT@@@std@@U1@@std@@YAPAU_DDPIXELFORMAT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<_DDPIXELFORMAT *,_DDPIXELFORMAT *,std::allocator<_DDPIXELFORMAT>,_DDPIXELFORMAT>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAU_DDPIXELFORMAT@@@std@@YAPAU_DDPIXELFORMAT@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAU_DDPIXELFORMAT@@@std@@YAPAU_DDPIXELFORMAT@@PAU1@@Z PROC ; std::_Val_type<_DDPIXELFORMAT *>, COMDAT

; 710  : 	{	// return value type from arbitrary argument

	push	ebp
	mov	ebp, esp

; 711  : 	return (0);

	xor	eax, eax

; 712  : 	}

	pop	ebp
	ret	0
??$_Val_type@PAU_DDPIXELFORMAT@@@std@@YAPAU_DDPIXELFORMAT@@PAU1@@Z ENDP ; std::_Val_type<_DDPIXELFORMAT *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAVDDDriverInfo@DeviceManager@@PAV12@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@V12@@std@@YAPAVDDDriverInfo@DeviceManager@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAVDDDriverInfo@DeviceManager@@PAV12@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@V12@@std@@YAPAVDDDriverInfo@DeviceManager@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<DeviceManager::DDDriverInfo *,DeviceManager::DDDriverInfo *,std::allocator<DeviceManager::DDDriverInfo>,DeviceManager::DDDriverInfo>, COMDAT

; 426  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_move@PAVDDDriverInfo@DeviceManager@@PAV12@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@V12@@std@@YAPAVDDDriverInfo@DeviceManager@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 427  : 	_DEBUG_RANGE(_First, _Last);
; 428  : 	_DEBUG_POINTER(_Dest);
; 429  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 430  : 
; 431  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 432  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_mov
$LN5@Uninit_mov:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 1536				; 00000600H
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 1536				; 00000600H
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_mov:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_mov

; 433  : 		_Al.construct(_Dest, (_Valty&&)*_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@VDDDriverInfo@DeviceManager@@V12@@?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@$$QAV23@@Z ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> >::construct<DeviceManager::DDDriverInfo,DeviceManager::DDDriverInfo>
	jmp	SHORT $LN5@Uninit_mov
$LN4@Uninit_mov:
	jmp	SHORT $LN10@Uninit_mov
__catch$??$_Uninit_move@PAVDDDriverInfo@DeviceManager@@PAV12@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@V12@@std@@YAPAVDDDriverInfo@DeviceManager@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 434  : 	_CATCH_ALL
; 435  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_mov
$LN2@Uninit_mov:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 1536				; 00000600H
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_mov:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_mov

; 436  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@VDDDriverInfo@DeviceManager@@@?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@@Z ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> >::destroy<DeviceManager::DDDriverInfo>
	jmp	SHORT $LN2@Uninit_mov
$LN1@Uninit_mov:

; 437  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 438  : 	_CATCH_END

	mov	eax, $LN13@Uninit_mov
	ret	0
$LN10@Uninit_mov:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Uninit_move@PAVDDDriverInfo@DeviceManager@@PAV12@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@V12@@std@@YAPAVDDDriverInfo@DeviceManager@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1
$LN13@Uninit_mov:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_move@PAVDDDriverInfo@DeviceManager@@PAV12@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@V12@@std@@YAPAVDDDriverInfo@DeviceManager@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1:

; 439  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_mov:

; 440  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAVDDDriverInfo@DeviceManager@@PAV12@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@V12@@std@@YAPAVDDDriverInfo@DeviceManager@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAVDDDriverInfo@DeviceManager@@PAV12@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@V12@@std@@YAPAVDDDriverInfo@DeviceManager@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAVDDDriverInfo@DeviceManager@@PAV12@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@V12@@std@@YAPAVDDDriverInfo@DeviceManager@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<DeviceManager::DDDriverInfo *,DeviceManager::DDDriverInfo *,std::allocator<DeviceManager::DDDriverInfo>,DeviceManager::DDDriverInfo>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAVDDDriverInfo@DeviceManager@@@std@@YAPAVDDDriverInfo@DeviceManager@@PAV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAVDDDriverInfo@DeviceManager@@@std@@YAPAVDDDriverInfo@DeviceManager@@PAV12@@Z PROC ; std::_Val_type<DeviceManager::DDDriverInfo *>, COMDAT

; 710  : 	{	// return value type from arbitrary argument

	push	ebp
	mov	ebp, esp

; 711  : 	return (0);

	xor	eax, eax

; 712  : 	}

	pop	ebp
	ret	0
??$_Val_type@PAVDDDriverInfo@DeviceManager@@@std@@YAPAVDDDriverInfo@DeviceManager@@PAV12@@Z ENDP ; std::_Val_type<DeviceManager::DDDriverInfo *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAU_DDSURFACEDESC2@@PAU1@V?$allocator@U_DDSURFACEDESC2@@@std@@U1@@std@@YAPAU_DDSURFACEDESC2@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAU_DDSURFACEDESC2@@PAU1@V?$allocator@U_DDSURFACEDESC2@@@std@@U1@@std@@YAPAU_DDSURFACEDESC2@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<_DDSURFACEDESC2 *,_DDSURFACEDESC2 *,std::allocator<_DDSURFACEDESC2>,_DDSURFACEDESC2>, COMDAT

; 426  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_move@PAU_DDSURFACEDESC2@@PAU1@V?$allocator@U_DDSURFACEDESC2@@@std@@U1@@std@@YAPAU_DDSURFACEDESC2@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 427  : 	_DEBUG_RANGE(_First, _Last);
; 428  : 	_DEBUG_POINTER(_Dest);
; 429  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 430  : 
; 431  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 432  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_mov
$LN5@Uninit_mov:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 124				; 0000007cH
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 124				; 0000007cH
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_mov:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_mov

; 433  : 		_Al.construct(_Dest, (_Valty&&)*_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@U_DDSURFACEDESC2@@U1@@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXPAU_DDSURFACEDESC2@@$$QAU2@@Z ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::construct<_DDSURFACEDESC2,_DDSURFACEDESC2>
	jmp	SHORT $LN5@Uninit_mov
$LN4@Uninit_mov:
	jmp	SHORT $LN10@Uninit_mov
__catch$??$_Uninit_move@PAU_DDSURFACEDESC2@@PAU1@V?$allocator@U_DDSURFACEDESC2@@@std@@U1@@std@@YAPAU_DDSURFACEDESC2@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 434  : 	_CATCH_ALL
; 435  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_mov
$LN2@Uninit_mov:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 124				; 0000007cH
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_mov:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_mov

; 436  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@U_DDSURFACEDESC2@@@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXPAU_DDSURFACEDESC2@@@Z ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::destroy<_DDSURFACEDESC2>
	jmp	SHORT $LN2@Uninit_mov
$LN1@Uninit_mov:

; 437  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 438  : 	_CATCH_END

	mov	eax, $LN13@Uninit_mov
	ret	0
$LN10@Uninit_mov:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Uninit_move@PAU_DDSURFACEDESC2@@PAU1@V?$allocator@U_DDSURFACEDESC2@@@std@@U1@@std@@YAPAU_DDSURFACEDESC2@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1
$LN13@Uninit_mov:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_move@PAU_DDSURFACEDESC2@@PAU1@V?$allocator@U_DDSURFACEDESC2@@@std@@U1@@std@@YAPAU_DDSURFACEDESC2@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1:

; 439  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_mov:

; 440  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAU_DDSURFACEDESC2@@PAU1@V?$allocator@U_DDSURFACEDESC2@@@std@@U1@@std@@YAPAU_DDSURFACEDESC2@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAU_DDSURFACEDESC2@@PAU1@V?$allocator@U_DDSURFACEDESC2@@@std@@U1@@std@@YAPAU_DDSURFACEDESC2@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAU_DDSURFACEDESC2@@PAU1@V?$allocator@U_DDSURFACEDESC2@@@std@@U1@@std@@YAPAU_DDSURFACEDESC2@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<_DDSURFACEDESC2 *,_DDSURFACEDESC2 *,std::allocator<_DDSURFACEDESC2>,_DDSURFACEDESC2>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAU_DDSURFACEDESC2@@@std@@YAPAU_DDSURFACEDESC2@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAU_DDSURFACEDESC2@@@std@@YAPAU_DDSURFACEDESC2@@PAU1@@Z PROC ; std::_Val_type<_DDSURFACEDESC2 *>, COMDAT

; 710  : 	{	// return value type from arbitrary argument

	push	ebp
	mov	ebp, esp

; 711  : 	return (0);

	xor	eax, eax

; 712  : 	}

	pop	ebp
	ret	0
??$_Val_type@PAU_DDSURFACEDESC2@@@std@@YAPAU_DDSURFACEDESC2@@PAU1@@Z ENDP ; std::_Val_type<_DDSURFACEDESC2 *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_DDSURFACEDESC2@@@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXPAU_DDSURFACEDESC2@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@U_DDSURFACEDESC2@@@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXPAU_DDSURFACEDESC2@@@Z PROC ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::destroy<_DDSURFACEDESC2>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@U_DDSURFACEDESC2@@@?$allocator_traits@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@SAXAAV?$allocator@U_DDSURFACEDESC2@@@1@PAU_DDSURFACEDESC2@@@Z ; std::allocator_traits<std::allocator<_DDSURFACEDESC2> >::destroy<_DDSURFACEDESC2>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@U_DDSURFACEDESC2@@@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXPAU_DDSURFACEDESC2@@@Z ENDP ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::destroy<_DDSURFACEDESC2>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@V123@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@00AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@V123@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@00AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<DeviceManager::DDDriverInfo::D3DDeviceInfo *,DeviceManager::DDDriverInfo::D3DDeviceInfo *,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>,DeviceManager::DDDriverInfo::D3DDeviceInfo>, COMDAT

; 426  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_move@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@V123@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@00AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 427  : 	_DEBUG_RANGE(_First, _Last);
; 428  : 	_DEBUG_POINTER(_Dest);
; 429  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 430  : 
; 431  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 432  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_mov
$LN5@Uninit_mov:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 284				; 0000011cH
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 284				; 0000011cH
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_mov:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_mov

; 433  : 		_Al.construct(_Dest, (_Valty&&)*_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V123@@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@$$QAV234@@Z ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::construct<DeviceManager::DDDriverInfo::D3DDeviceInfo,DeviceManager::DDDriverInfo::D3DDeviceInfo>
	jmp	SHORT $LN5@Uninit_mov
$LN4@Uninit_mov:
	jmp	SHORT $LN10@Uninit_mov
__catch$??$_Uninit_move@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@V123@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@00AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 434  : 	_CATCH_ALL
; 435  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_mov
$LN2@Uninit_mov:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 284				; 0000011cH
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_mov:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_mov

; 436  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@Z ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::destroy<DeviceManager::DDDriverInfo::D3DDeviceInfo>
	jmp	SHORT $LN2@Uninit_mov
$LN1@Uninit_mov:

; 437  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 438  : 	_CATCH_END

	mov	eax, $LN13@Uninit_mov
	ret	0
$LN10@Uninit_mov:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Uninit_move@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@V123@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@00AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1
$LN13@Uninit_mov:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_move@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@V123@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@00AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1:

; 439  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_mov:

; 440  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@V123@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@00AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@V123@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@00AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@V123@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@00AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<DeviceManager::DDDriverInfo::D3DDeviceInfo *,DeviceManager::DDDriverInfo::D3DDeviceInfo *,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>,DeviceManager::DDDriverInfo::D3DDeviceInfo>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@@Z PROC ; std::_Val_type<DeviceManager::DDDriverInfo::D3DDeviceInfo *>, COMDAT

; 710  : 	{	// return value type from arbitrary argument

	push	ebp
	mov	ebp, esp

; 711  : 	return (0);

	xor	eax, eax

; 712  : 	}

	pop	ebp
	ret	0
??$_Val_type@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@@Z ENDP ; std::_Val_type<DeviceManager::DDDriverInfo::D3DDeviceInfo *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_DDPIXELFORMAT@@@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXPAU_DDPIXELFORMAT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@U_DDPIXELFORMAT@@@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXPAU_DDPIXELFORMAT@@@Z PROC ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::destroy<_DDPIXELFORMAT>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@U_DDPIXELFORMAT@@@?$allocator_traits@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@SAXAAV?$allocator@U_DDPIXELFORMAT@@@1@PAU_DDPIXELFORMAT@@@Z ; std::allocator_traits<std::allocator<_DDPIXELFORMAT> >::destroy<_DDPIXELFORMAT>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@U_DDPIXELFORMAT@@@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXPAU_DDPIXELFORMAT@@@Z ENDP ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::destroy<_DDPIXELFORMAT>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@VDDDriverInfo@DeviceManager@@@?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@VDDDriverInfo@DeviceManager@@@?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@@Z PROC ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> >::destroy<DeviceManager::DDDriverInfo>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@VDDDriverInfo@DeviceManager@@@?$allocator_traits@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@SAXAAV?$allocator@VDDDriverInfo@DeviceManager@@@1@PAVDDDriverInfo@DeviceManager@@@Z ; std::allocator_traits<std::allocator<DeviceManager::DDDriverInfo> >::destroy<DeviceManager::DDDriverInfo>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@VDDDriverInfo@DeviceManager@@@?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@@Z ENDP ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> >::destroy<DeviceManager::DDDriverInfo>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@Z PROC ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::destroy<DeviceManager::DDDriverInfo::D3DDeviceInfo>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@?$allocator_traits@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@SAXAAV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@1@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@Z ; std::allocator_traits<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::destroy<DeviceManager::DDDriverInfo::D3DDeviceInfo>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@Z ENDP ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::destroy<DeviceManager::DDDriverInfo::D3DDeviceInfo>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@U_DDPIXELFORMAT@@AAU1@@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@AAU2@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv74 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@U_DDPIXELFORMAT@@AAU1@@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@AAU2@@Z PROC ; std::allocator<_DDPIXELFORMAT>::construct<_DDPIXELFORMAT,_DDPIXELFORMAT &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@U_DDPIXELFORMAT@@AAU1@@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@AAU2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	32					; 00000020H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAU_DDPIXELFORMAT@@@std@@YAAAU_DDPIXELFORMAT@@AAU1@@Z ; std::forward<_DDPIXELFORMAT &>
	add	esp, 4
	mov	ecx, 8
	mov	esi, eax
	mov	edi, DWORD PTR $T3[ebp]
	rep movsd
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv74[ebp], edx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv74[ebp], 0
$LN4@construct:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@U_DDPIXELFORMAT@@AAU1@@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@AAU2@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@U_DDPIXELFORMAT@@AAU1@@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@AAU2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@U_DDPIXELFORMAT@@AAU1@@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@AAU2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@U_DDPIXELFORMAT@@AAU1@@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@AAU2@@Z ENDP ; std::allocator<_DDPIXELFORMAT>::construct<_DDPIXELFORMAT,_DDPIXELFORMAT &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@VDDDriverInfo@DeviceManager@@V12@@?$allocator@VDDDriverInfo@DeviceManager@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@$$QAV23@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv76 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@VDDDriverInfo@DeviceManager@@V12@@?$allocator@VDDDriverInfo@DeviceManager@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@$$QAV23@@Z PROC ; std::allocator<DeviceManager::DDDriverInfo>::construct<DeviceManager::DDDriverInfo,DeviceManager::DDDriverInfo>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@VDDDriverInfo@DeviceManager@@V12@@?$allocator@VDDDriverInfo@DeviceManager@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@$$QAV23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	1536					; 00000600H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@VDDDriverInfo@DeviceManager@@@std@@YA$$QAVDDDriverInfo@DeviceManager@@AAV12@@Z ; std::forward<DeviceManager::DDDriverInfo>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0DDDriverInfo@DeviceManager@@QAE@ABV01@@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv76[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@VDDDriverInfo@DeviceManager@@V12@@?$allocator@VDDDriverInfo@DeviceManager@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@$$QAV23@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@VDDDriverInfo@DeviceManager@@V12@@?$allocator@VDDDriverInfo@DeviceManager@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@$$QAV23@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@VDDDriverInfo@DeviceManager@@V12@@?$allocator@VDDDriverInfo@DeviceManager@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@$$QAV23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@VDDDriverInfo@DeviceManager@@V12@@?$allocator@VDDDriverInfo@DeviceManager@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@$$QAV23@@Z ENDP ; std::allocator<DeviceManager::DDDriverInfo>::construct<DeviceManager::DDDriverInfo,DeviceManager::DDDriverInfo>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@U_DDSURFACEDESC2@@AAU1@@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@AAU2@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv74 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@U_DDSURFACEDESC2@@AAU1@@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@AAU2@@Z PROC ; std::allocator<_DDSURFACEDESC2>::construct<_DDSURFACEDESC2,_DDSURFACEDESC2 &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@U_DDSURFACEDESC2@@AAU1@@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@AAU2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	124					; 0000007cH
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAU_DDSURFACEDESC2@@@std@@YAAAU_DDSURFACEDESC2@@AAU1@@Z ; std::forward<_DDSURFACEDESC2 &>
	add	esp, 4
	mov	ecx, 31					; 0000001fH
	mov	esi, eax
	mov	edi, DWORD PTR $T3[ebp]
	rep movsd
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv74[ebp], edx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv74[ebp], 0
$LN4@construct:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@U_DDSURFACEDESC2@@AAU1@@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@AAU2@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@U_DDSURFACEDESC2@@AAU1@@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@AAU2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@U_DDSURFACEDESC2@@AAU1@@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@AAU2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@U_DDSURFACEDESC2@@AAU1@@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@AAU2@@Z ENDP ; std::allocator<_DDSURFACEDESC2>::construct<_DDSURFACEDESC2,_DDSURFACEDESC2 &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V123@@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@$$QAV234@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv76 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V123@@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@$$QAV234@@Z PROC ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::construct<DeviceManager::DDDriverInfo::D3DDeviceInfo,DeviceManager::DDDriverInfo::D3DDeviceInfo>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V123@@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@$$QAV234@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	284					; 0000011cH
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YA$$QAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@AAV123@@Z ; std::forward<DeviceManager::DDDriverInfo::D3DDeviceInfo>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@ABV012@@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv76[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V123@@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@$$QAV234@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V123@@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@$$QAV234@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V123@@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@$$QAV234@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V123@@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@$$QAV234@@Z ENDP ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::construct<DeviceManager::DDDriverInfo::D3DDeviceInfo,DeviceManager::DDDriverInfo::D3DDeviceInfo>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAU_DDPIXELFORMAT@@PAU1@U?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@@std@@YAPAU_DDPIXELFORMAT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAU_DDPIXELFORMAT@@PAU1@U?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@@std@@YAPAU_DDPIXELFORMAT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@0@@Z PROC ; std::_Uninitialized_move<_DDPIXELFORMAT *,_DDPIXELFORMAT *,std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> > >, COMDAT

; 471  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 472  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 473  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@U_DDPIXELFORMAT@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_DDPIXELFORMAT@@0@Z ; std::_Ptr_cat<_DDPIXELFORMAT,_DDPIXELFORMAT>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAU_DDPIXELFORMAT@@@std@@YAPAU_DDPIXELFORMAT@@PAU1@@Z ; std::_Val_type<_DDPIXELFORMAT *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_move@PAU_DDPIXELFORMAT@@PAU1@V?$allocator@U_DDPIXELFORMAT@@@std@@U1@@std@@YAPAU_DDPIXELFORMAT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_DDPIXELFORMAT *,_DDPIXELFORMAT *,std::allocator<_DDPIXELFORMAT>,_DDPIXELFORMAT>
	add	esp, 24					; 00000018H

; 474  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_move@PAU_DDPIXELFORMAT@@PAU1@U?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@@std@@YAPAU_DDPIXELFORMAT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<_DDPIXELFORMAT *,_DDPIXELFORMAT *,std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAVDDDriverInfo@DeviceManager@@PAV12@U?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@@std@@YAPAVDDDriverInfo@DeviceManager@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAVDDDriverInfo@DeviceManager@@PAV12@U?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@@std@@YAPAVDDDriverInfo@DeviceManager@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@0@@Z PROC ; std::_Uninitialized_move<DeviceManager::DDDriverInfo *,DeviceManager::DDDriverInfo *,std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> > >, COMDAT

; 471  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 472  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 473  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@VDDDriverInfo@DeviceManager@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVDDDriverInfo@DeviceManager@@0@Z ; std::_Ptr_cat<DeviceManager::DDDriverInfo,DeviceManager::DDDriverInfo>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAVDDDriverInfo@DeviceManager@@@std@@YAPAVDDDriverInfo@DeviceManager@@PAV12@@Z ; std::_Val_type<DeviceManager::DDDriverInfo *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_move@PAVDDDriverInfo@DeviceManager@@PAV12@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@V12@@std@@YAPAVDDDriverInfo@DeviceManager@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<DeviceManager::DDDriverInfo *,DeviceManager::DDDriverInfo *,std::allocator<DeviceManager::DDDriverInfo>,DeviceManager::DDDriverInfo>
	add	esp, 24					; 00000018H

; 474  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_move@PAVDDDriverInfo@DeviceManager@@PAV12@U?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@@std@@YAPAVDDDriverInfo@DeviceManager@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<DeviceManager::DDDriverInfo *,DeviceManager::DDDriverInfo *,std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAU_DDSURFACEDESC2@@PAU1@U?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@YAPAU_DDSURFACEDESC2@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAU_DDSURFACEDESC2@@PAU1@U?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@YAPAU_DDSURFACEDESC2@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@@Z PROC ; std::_Uninitialized_move<_DDSURFACEDESC2 *,_DDSURFACEDESC2 *,std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> > >, COMDAT

; 471  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 472  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 473  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@U_DDSURFACEDESC2@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_DDSURFACEDESC2@@0@Z ; std::_Ptr_cat<_DDSURFACEDESC2,_DDSURFACEDESC2>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAU_DDSURFACEDESC2@@@std@@YAPAU_DDSURFACEDESC2@@PAU1@@Z ; std::_Val_type<_DDSURFACEDESC2 *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_move@PAU_DDSURFACEDESC2@@PAU1@V?$allocator@U_DDSURFACEDESC2@@@std@@U1@@std@@YAPAU_DDSURFACEDESC2@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_DDSURFACEDESC2 *,_DDSURFACEDESC2 *,std::allocator<_DDSURFACEDESC2>,_DDSURFACEDESC2>
	add	esp, 24					; 00000018H

; 474  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_move@PAU_DDSURFACEDESC2@@PAU1@U?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@YAPAU_DDSURFACEDESC2@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<_DDSURFACEDESC2 *,_DDSURFACEDESC2 *,std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@YAXPAU_DDSURFACEDESC2@@0AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@YAXPAU_DDSURFACEDESC2@@0AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> > >, COMDAT

; 87   : 	{	// destroy [_First, _Last), arbitrary type

	push	ebp
	mov	ebp, esp

; 88   : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Destroy_ra
$LN2@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 124				; 0000007cH
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra

; 89   : 		_Al.destroy(_First);

	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@U_DDSURFACEDESC2@@@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXPAU_DDSURFACEDESC2@@@Z ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::destroy<_DDSURFACEDESC2>
	jmp	SHORT $LN2@Destroy_ra
$LN4@Destroy_ra:

; 90   : 	}

	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@YAXPAU_DDSURFACEDESC2@@0AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@U_DDSURFACEDESC2@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_DDSURFACEDESC2@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@U_DDSURFACEDESC2@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_DDSURFACEDESC2@@0@Z PROC ; std::_Ptr_cat<_DDSURFACEDESC2,_DDSURFACEDESC2>, COMDAT

; 437  : 	{	// return pointer category from pointers

	push	ebp
	mov	ebp, esp
	push	ecx

; 438  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 439  : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 440  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@U_DDSURFACEDESC2@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_DDSURFACEDESC2@@0@Z ENDP ; std::_Ptr_cat<_DDSURFACEDESC2,_DDSURFACEDESC2>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@U?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@00AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@U?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@00AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@@Z PROC ; std::_Uninitialized_move<DeviceManager::DDDriverInfo::D3DDeviceInfo *,DeviceManager::DDDriverInfo::D3DDeviceInfo *,std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >, COMDAT

; 471  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 472  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 473  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@0@Z ; std::_Ptr_cat<DeviceManager::DDDriverInfo::D3DDeviceInfo,DeviceManager::DDDriverInfo::D3DDeviceInfo>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@@Z ; std::_Val_type<DeviceManager::DDDriverInfo::D3DDeviceInfo *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_move@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@V123@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@00AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<DeviceManager::DDDriverInfo::D3DDeviceInfo *,DeviceManager::DDDriverInfo::D3DDeviceInfo *,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>,DeviceManager::DDDriverInfo::D3DDeviceInfo>
	add	esp, 24					; 00000018H

; 474  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_move@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@U?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@00AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<DeviceManager::DDDriverInfo::D3DDeviceInfo *,DeviceManager::DDDriverInfo::D3DDeviceInfo *,std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@@std@@YAXPAU_DDPIXELFORMAT@@0AAU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@@std@@YAXPAU_DDPIXELFORMAT@@0AAU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> > >, COMDAT

; 87   : 	{	// destroy [_First, _Last), arbitrary type

	push	ebp
	mov	ebp, esp

; 88   : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Destroy_ra
$LN2@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra

; 89   : 		_Al.destroy(_First);

	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@U_DDPIXELFORMAT@@@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXPAU_DDPIXELFORMAT@@@Z ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::destroy<_DDPIXELFORMAT>
	jmp	SHORT $LN2@Destroy_ra
$LN4@Destroy_ra:

; 90   : 	}

	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@@std@@YAXPAU_DDPIXELFORMAT@@0AAU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@U_DDPIXELFORMAT@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_DDPIXELFORMAT@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@U_DDPIXELFORMAT@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_DDPIXELFORMAT@@0@Z PROC ; std::_Ptr_cat<_DDPIXELFORMAT,_DDPIXELFORMAT>, COMDAT

; 437  : 	{	// return pointer category from pointers

	push	ebp
	mov	ebp, esp
	push	ecx

; 438  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 439  : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 440  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@U_DDPIXELFORMAT@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_DDPIXELFORMAT@@0@Z ENDP ; std::_Ptr_cat<_DDPIXELFORMAT,_DDPIXELFORMAT>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@@std@@YAXPAVDDDriverInfo@DeviceManager@@0AAU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@@std@@YAXPAVDDDriverInfo@DeviceManager@@0AAU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> > >, COMDAT

; 87   : 	{	// destroy [_First, _Last), arbitrary type

	push	ebp
	mov	ebp, esp

; 88   : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Destroy_ra
$LN2@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 1536				; 00000600H
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra

; 89   : 		_Al.destroy(_First);

	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@VDDDriverInfo@DeviceManager@@@?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@@Z ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> >::destroy<DeviceManager::DDDriverInfo>
	jmp	SHORT $LN2@Destroy_ra
$LN4@Destroy_ra:

; 90   : 	}

	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@@std@@YAXPAVDDDriverInfo@DeviceManager@@0AAU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@VDDDriverInfo@DeviceManager@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVDDDriverInfo@DeviceManager@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@VDDDriverInfo@DeviceManager@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVDDDriverInfo@DeviceManager@@0@Z PROC ; std::_Ptr_cat<DeviceManager::DDDriverInfo,DeviceManager::DDDriverInfo>, COMDAT

; 437  : 	{	// return pointer category from pointers

	push	ebp
	mov	ebp, esp
	push	ecx

; 438  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 439  : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 440  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@VDDDriverInfo@DeviceManager@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVDDDriverInfo@DeviceManager@@0@Z ENDP ; std::_Ptr_cat<DeviceManager::DDDriverInfo,DeviceManager::DDDriverInfo>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@YAXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@0AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@YAXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@0AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >, COMDAT

; 87   : 	{	// destroy [_First, _Last), arbitrary type

	push	ebp
	mov	ebp, esp

; 88   : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Destroy_ra
$LN2@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 284				; 0000011cH
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra

; 89   : 		_Al.destroy(_First);

	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@Z ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::destroy<DeviceManager::DDDriverInfo::D3DDeviceInfo>
	jmp	SHORT $LN2@Destroy_ra
$LN4@Destroy_ra:

; 90   : 	}

	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@YAXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@0AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@0@Z PROC ; std::_Ptr_cat<DeviceManager::DDDriverInfo::D3DDeviceInfo,DeviceManager::DDDriverInfo::D3DDeviceInfo>, COMDAT

; 437  : 	{	// return pointer category from pointers

	push	ebp
	mov	ebp, esp
	push	ecx

; 438  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 439  : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 440  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@0@Z ENDP ; std::_Ptr_cat<DeviceManager::DDDriverInfo::D3DDeviceInfo,DeviceManager::DDDriverInfo::D3DDeviceInfo>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@U_DDPIXELFORMAT@@ABU1@@?$allocator_traits@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@SAXAAV?$allocator@U_DDPIXELFORMAT@@@1@PAU_DDPIXELFORMAT@@ABU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@U_DDPIXELFORMAT@@ABU1@@?$allocator_traits@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@SAXAAV?$allocator@U_DDPIXELFORMAT@@@1@PAU_DDPIXELFORMAT@@ABU3@@Z PROC ; std::allocator_traits<std::allocator<_DDPIXELFORMAT> >::construct<_DDPIXELFORMAT,_DDPIXELFORMAT const &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@ABU_DDPIXELFORMAT@@@std@@YAABU_DDPIXELFORMAT@@ABU1@@Z ; std::forward<_DDPIXELFORMAT const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@ABU3@@Z ; std::allocator<_DDPIXELFORMAT>::construct
	pop	ebp
	ret	0
??$construct@U_DDPIXELFORMAT@@ABU1@@?$allocator_traits@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@SAXAAV?$allocator@U_DDPIXELFORMAT@@@1@PAU_DDPIXELFORMAT@@ABU3@@Z ENDP ; std::allocator_traits<std::allocator<_DDPIXELFORMAT> >::construct<_DDPIXELFORMAT,_DDPIXELFORMAT const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@ABU_DDPIXELFORMAT@@@std@@YAABU_DDPIXELFORMAT@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABU_DDPIXELFORMAT@@@std@@YAABU_DDPIXELFORMAT@@ABU1@@Z PROC ; std::forward<_DDPIXELFORMAT const &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@ABU_DDPIXELFORMAT@@@std@@YAABU_DDPIXELFORMAT@@ABU1@@Z ENDP ; std::forward<_DDPIXELFORMAT const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@U_DDPIXELFORMAT@@AAU1@@?$allocator_traits@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@SAXAAV?$allocator@U_DDPIXELFORMAT@@@1@PAU_DDPIXELFORMAT@@AAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@U_DDPIXELFORMAT@@AAU1@@?$allocator_traits@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@SAXAAV?$allocator@U_DDPIXELFORMAT@@@1@PAU_DDPIXELFORMAT@@AAU3@@Z PROC ; std::allocator_traits<std::allocator<_DDPIXELFORMAT> >::construct<_DDPIXELFORMAT,_DDPIXELFORMAT &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAU_DDPIXELFORMAT@@@std@@YAAAU_DDPIXELFORMAT@@AAU1@@Z ; std::forward<_DDPIXELFORMAT &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@U_DDPIXELFORMAT@@AAU1@@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@AAU2@@Z ; std::allocator<_DDPIXELFORMAT>::construct<_DDPIXELFORMAT,_DDPIXELFORMAT &>
	pop	ebp
	ret	0
??$construct@U_DDPIXELFORMAT@@AAU1@@?$allocator_traits@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@SAXAAV?$allocator@U_DDPIXELFORMAT@@@1@PAU_DDPIXELFORMAT@@AAU3@@Z ENDP ; std::allocator_traits<std::allocator<_DDPIXELFORMAT> >::construct<_DDPIXELFORMAT,_DDPIXELFORMAT &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAU_DDPIXELFORMAT@@@std@@YAAAU_DDPIXELFORMAT@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAU_DDPIXELFORMAT@@@std@@YAAAU_DDPIXELFORMAT@@AAU1@@Z PROC ; std::forward<_DDPIXELFORMAT &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAU_DDPIXELFORMAT@@@std@@YAAAU_DDPIXELFORMAT@@AAU1@@Z ENDP ; std::forward<_DDPIXELFORMAT &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@VDDDriverInfo@DeviceManager@@V12@@?$allocator_traits@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@SAXAAV?$allocator@VDDDriverInfo@DeviceManager@@@1@PAVDDDriverInfo@DeviceManager@@$$QAV34@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@VDDDriverInfo@DeviceManager@@V12@@?$allocator_traits@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@SAXAAV?$allocator@VDDDriverInfo@DeviceManager@@@1@PAVDDDriverInfo@DeviceManager@@$$QAV34@@Z PROC ; std::allocator_traits<std::allocator<DeviceManager::DDDriverInfo> >::construct<DeviceManager::DDDriverInfo,DeviceManager::DDDriverInfo>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@VDDDriverInfo@DeviceManager@@@std@@YA$$QAVDDDriverInfo@DeviceManager@@AAV12@@Z ; std::forward<DeviceManager::DDDriverInfo>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@VDDDriverInfo@DeviceManager@@V12@@?$allocator@VDDDriverInfo@DeviceManager@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@$$QAV23@@Z ; std::allocator<DeviceManager::DDDriverInfo>::construct<DeviceManager::DDDriverInfo,DeviceManager::DDDriverInfo>
	pop	ebp
	ret	0
??$construct@VDDDriverInfo@DeviceManager@@V12@@?$allocator_traits@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@SAXAAV?$allocator@VDDDriverInfo@DeviceManager@@@1@PAVDDDriverInfo@DeviceManager@@$$QAV34@@Z ENDP ; std::allocator_traits<std::allocator<DeviceManager::DDDriverInfo> >::construct<DeviceManager::DDDriverInfo,DeviceManager::DDDriverInfo>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@U_DDSURFACEDESC2@@ABU1@@?$allocator_traits@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@SAXAAV?$allocator@U_DDSURFACEDESC2@@@1@PAU_DDSURFACEDESC2@@ABU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@U_DDSURFACEDESC2@@ABU1@@?$allocator_traits@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@SAXAAV?$allocator@U_DDSURFACEDESC2@@@1@PAU_DDSURFACEDESC2@@ABU3@@Z PROC ; std::allocator_traits<std::allocator<_DDSURFACEDESC2> >::construct<_DDSURFACEDESC2,_DDSURFACEDESC2 const &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@ABU_DDSURFACEDESC2@@@std@@YAABU_DDSURFACEDESC2@@ABU1@@Z ; std::forward<_DDSURFACEDESC2 const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@ABU3@@Z ; std::allocator<_DDSURFACEDESC2>::construct
	pop	ebp
	ret	0
??$construct@U_DDSURFACEDESC2@@ABU1@@?$allocator_traits@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@SAXAAV?$allocator@U_DDSURFACEDESC2@@@1@PAU_DDSURFACEDESC2@@ABU3@@Z ENDP ; std::allocator_traits<std::allocator<_DDSURFACEDESC2> >::construct<_DDSURFACEDESC2,_DDSURFACEDESC2 const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@ABU_DDSURFACEDESC2@@@std@@YAABU_DDSURFACEDESC2@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABU_DDSURFACEDESC2@@@std@@YAABU_DDSURFACEDESC2@@ABU1@@Z PROC ; std::forward<_DDSURFACEDESC2 const &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@ABU_DDSURFACEDESC2@@@std@@YAABU_DDSURFACEDESC2@@ABU1@@Z ENDP ; std::forward<_DDSURFACEDESC2 const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@U_DDSURFACEDESC2@@AAU1@@?$allocator_traits@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@SAXAAV?$allocator@U_DDSURFACEDESC2@@@1@PAU_DDSURFACEDESC2@@AAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@U_DDSURFACEDESC2@@AAU1@@?$allocator_traits@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@SAXAAV?$allocator@U_DDSURFACEDESC2@@@1@PAU_DDSURFACEDESC2@@AAU3@@Z PROC ; std::allocator_traits<std::allocator<_DDSURFACEDESC2> >::construct<_DDSURFACEDESC2,_DDSURFACEDESC2 &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAU_DDSURFACEDESC2@@@std@@YAAAU_DDSURFACEDESC2@@AAU1@@Z ; std::forward<_DDSURFACEDESC2 &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@U_DDSURFACEDESC2@@AAU1@@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@AAU2@@Z ; std::allocator<_DDSURFACEDESC2>::construct<_DDSURFACEDESC2,_DDSURFACEDESC2 &>
	pop	ebp
	ret	0
??$construct@U_DDSURFACEDESC2@@AAU1@@?$allocator_traits@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@SAXAAV?$allocator@U_DDSURFACEDESC2@@@1@PAU_DDSURFACEDESC2@@AAU3@@Z ENDP ; std::allocator_traits<std::allocator<_DDSURFACEDESC2> >::construct<_DDSURFACEDESC2,_DDSURFACEDESC2 &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAU_DDSURFACEDESC2@@@std@@YAAAU_DDSURFACEDESC2@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAU_DDSURFACEDESC2@@@std@@YAAAU_DDSURFACEDESC2@@AAU1@@Z PROC ; std::forward<_DDSURFACEDESC2 &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAU_DDSURFACEDESC2@@@std@@YAAAU_DDSURFACEDESC2@@AAU1@@Z ENDP ; std::forward<_DDSURFACEDESC2 &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V123@@?$allocator_traits@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@SAXAAV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@1@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@$$QAV345@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V123@@?$allocator_traits@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@SAXAAV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@1@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@$$QAV345@@Z PROC ; std::allocator_traits<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::construct<DeviceManager::DDDriverInfo::D3DDeviceInfo,DeviceManager::DDDriverInfo::D3DDeviceInfo>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YA$$QAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@AAV123@@Z ; std::forward<DeviceManager::DDDriverInfo::D3DDeviceInfo>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V123@@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@$$QAV234@@Z ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::construct<DeviceManager::DDDriverInfo::D3DDeviceInfo,DeviceManager::DDDriverInfo::D3DDeviceInfo>
	pop	ebp
	ret	0
??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V123@@?$allocator_traits@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@SAXAAV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@1@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@$$QAV345@@Z ENDP ; std::allocator_traits<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::construct<DeviceManager::DDDriverInfo::D3DDeviceInfo,DeviceManager::DDDriverInfo::D3DDeviceInfo>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??$_QueryInterface@V?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEJV?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 4
_pInterface$2 = -20					; size = 4
_this$ = -16						; size = 4
tv86 = -12						; size = 4
tv77 = -8						; size = 4
_hr$ = -4						; size = 4
_p$ = 8							; size = 4
??$_QueryInterface@V?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEJV?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@@Z PROC ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_QueryInterface<_com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> > >, COMDAT
; _this$ = ecx

; 800  :     template<typename _InterfacePtr> HRESULT _QueryInterface(_InterfacePtr p) throw()

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 801  :     {
; 802  :         HRESULT hr;
; 803  : 
; 804  :         // Can't QI NULL
; 805  :         //
; 806  :         if (p != NULL) {

	push	0
	lea	ecx, DWORD PTR _p$[ebp]
	call	??9?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QBE_NH@Z ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::operator!=
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@QueryInter

; 807  :             // Query for this interface
; 808  :             //
; 809  :             Interface* pInterface;
; 810  :             hr = p->QueryInterface(GetIID(), reinterpret_cast<void**>(&pInterface));

	lea	ecx, DWORD PTR _p$[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QBEPAUIDirectDraw@@XZ ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::operator->
	mov	DWORD PTR tv77[ebp], eax
	lea	ecx, DWORD PTR _pInterface$2[ebp]
	push	ecx
	call	?GetIID@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@SAABU_GUID@@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::GetIID
	push	eax
	mov	edx, DWORD PTR tv77[ebp]
	push	edx
	mov	eax, DWORD PTR tv77[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax

; 811  : 
; 812  :             // Save the interface without AddRef()ing.
; 813  :             //
; 814  :             Attach(SUCCEEDED(hr)? pInterface: NULL);

	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN5@QueryInter
	mov	eax, DWORD PTR _pInterface$2[ebp]
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN6@QueryInter
$LN5@QueryInter:
	mov	DWORD PTR tv86[ebp], 0
$LN6@QueryInter:
	mov	ecx, DWORD PTR tv86[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Attach@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEXPAUIDirectDraw7@@@Z ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::Attach

; 815  :         }
; 816  :         else {

	jmp	SHORT $LN1@QueryInter
$LN2@QueryInter:

; 817  :             operator=(static_cast<Interface*>(NULL));

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?4UIDirectDraw7@@@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEAAV0@PAUIDirectDraw7@@@Z ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator=<IDirectDraw7>

; 818  :             hr = E_NOINTERFACE;

	mov	DWORD PTR _hr$[ebp], -2147467262	; 80004002H
$LN1@QueryInter:

; 819  :         }
; 820  : 
; 821  :         return hr;

	mov	edx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T1[ebp], edx
	lea	ecx, DWORD PTR _p$[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::~_com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >
	mov	eax, DWORD PTR $T1[ebp]

; 822  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
??$_QueryInterface@V?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEJV?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@@Z ENDP ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_QueryInterface<_com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??$_QueryInterface@V?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@AAEJV?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 4
_pInterface$2 = -20					; size = 4
_this$ = -16						; size = 4
tv86 = -12						; size = 4
tv77 = -8						; size = 4
_hr$ = -4						; size = 4
_p$ = 8							; size = 4
??$_QueryInterface@V?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@AAEJV?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@@Z PROC ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::_QueryInterface<_com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> > >, COMDAT
; _this$ = ecx

; 800  :     template<typename _InterfacePtr> HRESULT _QueryInterface(_InterfacePtr p) throw()

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 801  :     {
; 802  :         HRESULT hr;
; 803  : 
; 804  :         // Can't QI NULL
; 805  :         //
; 806  :         if (p != NULL) {

	push	0
	lea	ecx, DWORD PTR _p$[ebp]
	call	??9?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QBE_NH@Z ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::operator!=
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@QueryInter

; 807  :             // Query for this interface
; 808  :             //
; 809  :             Interface* pInterface;
; 810  :             hr = p->QueryInterface(GetIID(), reinterpret_cast<void**>(&pInterface));

	lea	ecx, DWORD PTR _p$[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QBEPAUIDirectDraw@@XZ ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::operator->
	mov	DWORD PTR tv77[ebp], eax
	lea	ecx, DWORD PTR _pInterface$2[ebp]
	push	ecx
	call	?GetIID@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@SAABU_GUID@@XZ ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::GetIID
	push	eax
	mov	edx, DWORD PTR tv77[ebp]
	push	edx
	mov	eax, DWORD PTR tv77[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax

; 811  : 
; 812  :             // Save the interface without AddRef()ing.
; 813  :             //
; 814  :             Attach(SUCCEEDED(hr)? pInterface: NULL);

	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN5@QueryInter
	mov	eax, DWORD PTR _pInterface$2[ebp]
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN6@QueryInter
$LN5@QueryInter:
	mov	DWORD PTR tv86[ebp], 0
$LN6@QueryInter:
	mov	ecx, DWORD PTR tv86[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Attach@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@QAEXPAUIDirect3D7@@@Z ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::Attach

; 815  :         }
; 816  :         else {

	jmp	SHORT $LN1@QueryInter
$LN2@QueryInter:

; 817  :             operator=(static_cast<Interface*>(NULL));

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?4UIDirect3D7@@@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@QAEAAV0@PAUIDirect3D7@@@Z ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::operator=<IDirect3D7>

; 818  :             hr = E_NOINTERFACE;

	mov	DWORD PTR _hr$[ebp], -2147467262	; 80004002H
$LN1@QueryInter:

; 819  :         }
; 820  : 
; 821  :         return hr;

	mov	edx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T1[ebp], edx
	lea	ecx, DWORD PTR _p$[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::~_com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >
	mov	eax, DWORD PTR $T1[ebp]

; 822  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
??$_QueryInterface@V?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@AAEJV?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@@Z ENDP ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::_QueryInterface<_com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@U_DDPIXELFORMAT@@@std@@YAPAU_DDPIXELFORMAT@@IPAU1@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_DDPIXELFORMAT@@@std@@YAPAU_DDPIXELFORMAT@@IPAU1@@Z PROC ; std::_Allocate<_DDPIXELFORMAT>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 134217727	; 07ffffffH
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 5
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U_DDPIXELFORMAT@@@std@@YAPAU_DDPIXELFORMAT@@IPAU1@@Z ENDP ; std::_Allocate<_DDPIXELFORMAT>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@VDDDriverInfo@DeviceManager@@@std@@YAPAVDDDriverInfo@DeviceManager@@IPAV12@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@VDDDriverInfo@DeviceManager@@@std@@YAPAVDDDriverInfo@DeviceManager@@IPAV12@@Z PROC ; std::_Allocate<DeviceManager::DDDriverInfo>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 2796202	; 002aaaaaH
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 1536				; 00000600H
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@VDDDriverInfo@DeviceManager@@@std@@YAPAVDDDriverInfo@DeviceManager@@IPAV12@@Z ENDP ; std::_Allocate<DeviceManager::DDDriverInfo>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@U_DDSURFACEDESC2@@@std@@YAPAU_DDSURFACEDESC2@@IPAU1@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_DDSURFACEDESC2@@@std@@YAPAU_DDSURFACEDESC2@@IPAU1@@Z PROC ; std::_Allocate<_DDSURFACEDESC2>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 34636833	; 02108421H
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 124				; 0000007cH
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U_DDSURFACEDESC2@@@std@@YAPAU_DDSURFACEDESC2@@IPAU1@@Z ENDP ; std::_Allocate<_DDSURFACEDESC2>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@IPAV123@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@IPAV123@@Z PROC ; std::_Allocate<DeviceManager::DDDriverInfo::D3DDeviceInfo>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 15123124	; 00e6c2b4H
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 284				; 0000011cH
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@IPAV123@@Z ENDP ; std::_Allocate<DeviceManager::DDDriverInfo::D3DDeviceInfo>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??$_Umove@PAU_DDPIXELFORMAT@@@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEPAU_DDPIXELFORMAT@@PAU2@00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAU_DDPIXELFORMAT@@@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEPAU_DDPIXELFORMAT@@PAU2@00@Z PROC ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Umove<_DDPIXELFORMAT *>, COMDAT
; _this$ = ecx

; 1557 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1558 : 		{	// move initializing [_First, _Last), using allocator
; 1559 : 		_Alty _Alval(this->_Getal());

	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> > >::_Getal

; 1560 : 		return (_Uninitialized_move(_First, _Last,
; 1561 : 			_Ptr, _Alval));

	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninitialized_move@PAU_DDPIXELFORMAT@@PAU1@U?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@@std@@YAPAU_DDPIXELFORMAT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@0@@Z ; std::_Uninitialized_move<_DDPIXELFORMAT *,_DDPIXELFORMAT *,std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> > >
	add	esp, 16					; 00000010H

; 1562 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAU_DDPIXELFORMAT@@@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEPAU_DDPIXELFORMAT@@PAU2@00@Z ENDP ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Umove<_DDPIXELFORMAT *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??$_Umove@PAVDDDriverInfo@DeviceManager@@@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEPAVDDDriverInfo@DeviceManager@@PAV23@00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAVDDDriverInfo@DeviceManager@@@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEPAVDDDriverInfo@DeviceManager@@PAV23@00@Z PROC ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Umove<DeviceManager::DDDriverInfo *>, COMDAT
; _this$ = ecx

; 1557 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1558 : 		{	// move initializing [_First, _Last), using allocator
; 1559 : 		_Alty _Alval(this->_Getal());

	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> > >::_Getal

; 1560 : 		return (_Uninitialized_move(_First, _Last,
; 1561 : 			_Ptr, _Alval));

	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninitialized_move@PAVDDDriverInfo@DeviceManager@@PAV12@U?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@@std@@YAPAVDDDriverInfo@DeviceManager@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@0@@Z ; std::_Uninitialized_move<DeviceManager::DDDriverInfo *,DeviceManager::DDDriverInfo *,std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> > >
	add	esp, 16					; 00000010H

; 1562 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAVDDDriverInfo@DeviceManager@@@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEPAVDDDriverInfo@DeviceManager@@PAV23@00@Z ENDP ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Umove<DeviceManager::DDDriverInfo *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??$_Umove@PAU_DDSURFACEDESC2@@@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEPAU_DDSURFACEDESC2@@PAU2@00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAU_DDSURFACEDESC2@@@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEPAU_DDSURFACEDESC2@@PAU2@00@Z PROC ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Umove<_DDSURFACEDESC2 *>, COMDAT
; _this$ = ecx

; 1557 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1558 : 		{	// move initializing [_First, _Last), using allocator
; 1559 : 		_Alty _Alval(this->_Getal());

	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> > >::_Getal

; 1560 : 		return (_Uninitialized_move(_First, _Last,
; 1561 : 			_Ptr, _Alval));

	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninitialized_move@PAU_DDSURFACEDESC2@@PAU1@U?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@YAPAU_DDSURFACEDESC2@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@@Z ; std::_Uninitialized_move<_DDSURFACEDESC2 *,_DDSURFACEDESC2 *,std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> > >
	add	esp, 16					; 00000010H

; 1562 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAU_DDSURFACEDESC2@@@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEPAU_DDSURFACEDESC2@@PAU2@00@Z ENDP ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Umove<_DDSURFACEDESC2 *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@YAXPAU_DDSURFACEDESC2@@0AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@YAXPAU_DDSURFACEDESC2@@0AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> > >, COMDAT

; 79   : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 80   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@U_DDSURFACEDESC2@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_DDSURFACEDESC2@@0@Z ; std::_Ptr_cat<_DDSURFACEDESC2,_DDSURFACEDESC2>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@YAXPAU_DDSURFACEDESC2@@0AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> > >
	add	esp, 16					; 00000010H

; 81   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@YAXPAU_DDSURFACEDESC2@@0AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??$_Umove@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV234@00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV234@00@Z PROC ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Umove<DeviceManager::DDDriverInfo::D3DDeviceInfo *>, COMDAT
; _this$ = ecx

; 1557 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1558 : 		{	// move initializing [_First, _Last), using allocator
; 1559 : 		_Alty _Alval(this->_Getal());

	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::_Getal

; 1560 : 		return (_Uninitialized_move(_First, _Last,
; 1561 : 			_Ptr, _Alval));

	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninitialized_move@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@U?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV123@00AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@@Z ; std::_Uninitialized_move<DeviceManager::DDDriverInfo::D3DDeviceInfo *,DeviceManager::DDDriverInfo::D3DDeviceInfo *,std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >
	add	esp, 16					; 00000010H

; 1562 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV234@00@Z ENDP ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Umove<DeviceManager::DDDriverInfo::D3DDeviceInfo *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@U_DDPIXELFORMAT@@@std@@YAPAU_DDPIXELFORMAT@@AAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_DDPIXELFORMAT@@@std@@YAPAU_DDPIXELFORMAT@@AAU1@@Z PROC ; std::addressof<_DDPIXELFORMAT>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@U_DDPIXELFORMAT@@@std@@YAPAU_DDPIXELFORMAT@@AAU1@@Z ENDP ; std::addressof<_DDPIXELFORMAT>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@@std@@YAXPAU_DDPIXELFORMAT@@0AAU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@@std@@YAXPAU_DDPIXELFORMAT@@0AAU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> > >, COMDAT

; 79   : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 80   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@U_DDPIXELFORMAT@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_DDPIXELFORMAT@@0@Z ; std::_Ptr_cat<_DDPIXELFORMAT,_DDPIXELFORMAT>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@@std@@YAXPAU_DDPIXELFORMAT@@0AAU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> > >
	add	esp, 16					; 00000010H

; 81   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@@std@@YAXPAU_DDPIXELFORMAT@@0AAU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@@std@@YAXPAVDDDriverInfo@DeviceManager@@0AAU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@@std@@YAXPAVDDDriverInfo@DeviceManager@@0AAU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> > >, COMDAT

; 79   : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 80   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@VDDDriverInfo@DeviceManager@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVDDDriverInfo@DeviceManager@@0@Z ; std::_Ptr_cat<DeviceManager::DDDriverInfo,DeviceManager::DDDriverInfo>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@@std@@YAXPAVDDDriverInfo@DeviceManager@@0AAU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> > >
	add	esp, 16					; 00000010H

; 81   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@@std@@YAXPAVDDDriverInfo@DeviceManager@@0AAU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@YAXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@0AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@YAXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@0AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >, COMDAT

; 79   : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 80   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@0@Z ; std::_Ptr_cat<DeviceManager::DDDriverInfo::D3DDeviceInfo,DeviceManager::DDDriverInfo::D3DDeviceInfo>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@YAXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@0AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >
	add	esp, 16					; 00000010H

; 81   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@YAXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@0AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PAU_DDPIXELFORMAT@@@std@@SAPAU_DDPIXELFORMAT@@AAU3@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PAU_DDPIXELFORMAT@@@std@@SAPAU_DDPIXELFORMAT@@AAU3@@Z PROC ; std::pointer_traits<_DDPIXELFORMAT *>::pointer_to, COMDAT

; 232  : 		{	// convert raw reference to pointer

	push	ebp
	mov	ebp, esp

; 233  : 		return (_STD addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@U_DDPIXELFORMAT@@@std@@YAPAU_DDPIXELFORMAT@@AAU1@@Z ; std::addressof<_DDPIXELFORMAT>
	add	esp, 4

; 234  : 		}

	pop	ebp
	ret	0
?pointer_to@?$pointer_traits@PAU_DDPIXELFORMAT@@@std@@SAPAU_DDPIXELFORMAT@@AAU3@@Z ENDP ; std::pointer_traits<_DDPIXELFORMAT *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@U_DDPIXELFORMAT@@ABU1@@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXPAU_DDPIXELFORMAT@@ABU2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@U_DDPIXELFORMAT@@ABU1@@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXPAU_DDPIXELFORMAT@@ABU2@@Z PROC ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::construct<_DDPIXELFORMAT,_DDPIXELFORMAT const &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@ABU_DDPIXELFORMAT@@@std@@YAABU_DDPIXELFORMAT@@ABU1@@Z ; std::forward<_DDPIXELFORMAT const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@U_DDPIXELFORMAT@@ABU1@@?$allocator_traits@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@SAXAAV?$allocator@U_DDPIXELFORMAT@@@1@PAU_DDPIXELFORMAT@@ABU3@@Z ; std::allocator_traits<std::allocator<_DDPIXELFORMAT> >::construct<_DDPIXELFORMAT,_DDPIXELFORMAT const &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@U_DDPIXELFORMAT@@ABU1@@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXPAU_DDPIXELFORMAT@@ABU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::construct<_DDPIXELFORMAT,_DDPIXELFORMAT const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@U_DDPIXELFORMAT@@AAU1@@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXPAU_DDPIXELFORMAT@@AAU2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@U_DDPIXELFORMAT@@AAU1@@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXPAU_DDPIXELFORMAT@@AAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::construct<_DDPIXELFORMAT,_DDPIXELFORMAT &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAU_DDPIXELFORMAT@@@std@@YAAAU_DDPIXELFORMAT@@AAU1@@Z ; std::forward<_DDPIXELFORMAT &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@U_DDPIXELFORMAT@@AAU1@@?$allocator_traits@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@SAXAAV?$allocator@U_DDPIXELFORMAT@@@1@PAU_DDPIXELFORMAT@@AAU3@@Z ; std::allocator_traits<std::allocator<_DDPIXELFORMAT> >::construct<_DDPIXELFORMAT,_DDPIXELFORMAT &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@U_DDPIXELFORMAT@@AAU1@@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXPAU_DDPIXELFORMAT@@AAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::construct<_DDPIXELFORMAT,_DDPIXELFORMAT &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@$$CBU_DDPIXELFORMAT@@@std@@YAPBU_DDPIXELFORMAT@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBU_DDPIXELFORMAT@@@std@@YAPBU_DDPIXELFORMAT@@ABU1@@Z PROC ; std::addressof<_DDPIXELFORMAT const >, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@$$CBU_DDPIXELFORMAT@@@std@@YAPBU_DDPIXELFORMAT@@ABU1@@Z ENDP ; std::addressof<_DDPIXELFORMAT const >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@VDDDriverInfo@DeviceManager@@V12@@?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@$$QAV23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@VDDDriverInfo@DeviceManager@@V12@@?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@$$QAV23@@Z PROC ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> >::construct<DeviceManager::DDDriverInfo,DeviceManager::DDDriverInfo>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@VDDDriverInfo@DeviceManager@@@std@@YA$$QAVDDDriverInfo@DeviceManager@@AAV12@@Z ; std::forward<DeviceManager::DDDriverInfo>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@VDDDriverInfo@DeviceManager@@V12@@?$allocator_traits@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@SAXAAV?$allocator@VDDDriverInfo@DeviceManager@@@1@PAVDDDriverInfo@DeviceManager@@$$QAV34@@Z ; std::allocator_traits<std::allocator<DeviceManager::DDDriverInfo> >::construct<DeviceManager::DDDriverInfo,DeviceManager::DDDriverInfo>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@VDDDriverInfo@DeviceManager@@V12@@?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@$$QAV23@@Z ENDP ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> >::construct<DeviceManager::DDDriverInfo,DeviceManager::DDDriverInfo>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@VDDDriverInfo@DeviceManager@@@std@@YA$$QAVDDDriverInfo@DeviceManager@@AAV12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@VDDDriverInfo@DeviceManager@@@std@@YA$$QAVDDDriverInfo@DeviceManager@@AAV12@@Z PROC ; std::forward<DeviceManager::DDDriverInfo>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@VDDDriverInfo@DeviceManager@@@std@@YA$$QAVDDDriverInfo@DeviceManager@@AAV12@@Z ENDP ; std::forward<DeviceManager::DDDriverInfo>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@VDDDriverInfo@DeviceManager@@@std@@YAPAVDDDriverInfo@DeviceManager@@AAV12@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@VDDDriverInfo@DeviceManager@@@std@@YAPAVDDDriverInfo@DeviceManager@@AAV12@@Z PROC ; std::addressof<DeviceManager::DDDriverInfo>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@VDDDriverInfo@DeviceManager@@@std@@YAPAVDDDriverInfo@DeviceManager@@AAV12@@Z ENDP ; std::addressof<DeviceManager::DDDriverInfo>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@U_DDSURFACEDESC2@@ABU1@@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXPAU_DDSURFACEDESC2@@ABU2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@U_DDSURFACEDESC2@@ABU1@@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXPAU_DDSURFACEDESC2@@ABU2@@Z PROC ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::construct<_DDSURFACEDESC2,_DDSURFACEDESC2 const &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@ABU_DDSURFACEDESC2@@@std@@YAABU_DDSURFACEDESC2@@ABU1@@Z ; std::forward<_DDSURFACEDESC2 const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@U_DDSURFACEDESC2@@ABU1@@?$allocator_traits@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@SAXAAV?$allocator@U_DDSURFACEDESC2@@@1@PAU_DDSURFACEDESC2@@ABU3@@Z ; std::allocator_traits<std::allocator<_DDSURFACEDESC2> >::construct<_DDSURFACEDESC2,_DDSURFACEDESC2 const &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@U_DDSURFACEDESC2@@ABU1@@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXPAU_DDSURFACEDESC2@@ABU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::construct<_DDSURFACEDESC2,_DDSURFACEDESC2 const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@U_DDSURFACEDESC2@@AAU1@@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXPAU_DDSURFACEDESC2@@AAU2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@U_DDSURFACEDESC2@@AAU1@@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXPAU_DDSURFACEDESC2@@AAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::construct<_DDSURFACEDESC2,_DDSURFACEDESC2 &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAU_DDSURFACEDESC2@@@std@@YAAAU_DDSURFACEDESC2@@AAU1@@Z ; std::forward<_DDSURFACEDESC2 &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@U_DDSURFACEDESC2@@AAU1@@?$allocator_traits@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@SAXAAV?$allocator@U_DDSURFACEDESC2@@@1@PAU_DDSURFACEDESC2@@AAU3@@Z ; std::allocator_traits<std::allocator<_DDSURFACEDESC2> >::construct<_DDSURFACEDESC2,_DDSURFACEDESC2 &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@U_DDSURFACEDESC2@@AAU1@@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXPAU_DDSURFACEDESC2@@AAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::construct<_DDSURFACEDESC2,_DDSURFACEDESC2 &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@$$CBU_DDSURFACEDESC2@@@std@@YAPBU_DDSURFACEDESC2@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBU_DDSURFACEDESC2@@@std@@YAPBU_DDSURFACEDESC2@@ABU1@@Z PROC ; std::addressof<_DDSURFACEDESC2 const >, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@$$CBU_DDSURFACEDESC2@@@std@@YAPBU_DDSURFACEDESC2@@ABU1@@Z ENDP ; std::addressof<_DDSURFACEDESC2 const >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V123@@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@$$QAV234@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V123@@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@$$QAV234@@Z PROC ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::construct<DeviceManager::DDDriverInfo::D3DDeviceInfo,DeviceManager::DDDriverInfo::D3DDeviceInfo>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YA$$QAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@AAV123@@Z ; std::forward<DeviceManager::DDDriverInfo::D3DDeviceInfo>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V123@@?$allocator_traits@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@SAXAAV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@1@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@$$QAV345@@Z ; std::allocator_traits<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::construct<DeviceManager::DDDriverInfo::D3DDeviceInfo,DeviceManager::DDDriverInfo::D3DDeviceInfo>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V123@@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@$$QAV234@@Z ENDP ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::construct<DeviceManager::DDDriverInfo::D3DDeviceInfo,DeviceManager::DDDriverInfo::D3DDeviceInfo>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YA$$QAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@AAV123@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YA$$QAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@AAV123@@Z PROC ; std::forward<DeviceManager::DDDriverInfo::D3DDeviceInfo>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YA$$QAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@AAV123@@Z ENDP ; std::forward<DeviceManager::DDDriverInfo::D3DDeviceInfo>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@AAV123@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@AAV123@@Z PROC ; std::addressof<DeviceManager::DDDriverInfo::D3DDeviceInfo>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@AAV123@@Z ENDP ; std::addressof<DeviceManager::DDDriverInfo::D3DDeviceInfo>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
__Tmp$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::operator++, COMDAT
; _this$ = ecx

; 339  : 		{	// postincrement

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 340  : 		_Myiter _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$[ebp], ecx

; 341  : 		++*this;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::operator++

; 342  : 		return (_Tmp);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __Tmp$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 343  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::operator++, COMDAT
; _this$ = ecx

; 333  : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 334  : 		++*(_Mybase *)this;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::operator++

; 335  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 336  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBEPAU_DDPIXELFORMAT@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBEPAU_DDPIXELFORMAT@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::operator->, COMDAT
; _this$ = ecx

; 328  : 		{	// return pointer to class object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 329  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBEAAU_DDPIXELFORMAT@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::operator*
	push	eax
	call	?pointer_to@?$pointer_traits@PAU_DDPIXELFORMAT@@@std@@SAPAU_DDPIXELFORMAT@@AAU3@@Z ; std::pointer_traits<_DDPIXELFORMAT *>::pointer_to
	add	esp, 4

; 330  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBEPAU_DDPIXELFORMAT@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::operator->
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBEAAU_DDPIXELFORMAT@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBEAAU_DDPIXELFORMAT@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::operator*, COMDAT
; _this$ = ecx

; 323  : 		{	// return designated object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 324  : 		return ((reference)**(_Mybase *)this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBEABU_DDPIXELFORMAT@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::operator*

; 325  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBEAAU_DDPIXELFORMAT@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAE@PAU_DDPIXELFORMAT@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAE@PAU_DDPIXELFORMAT@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >, COMDAT
; _this$ = ecx

; 306  : 		{	// construct with pointer _Parg

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Parg$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAE@PAU_DDPIXELFORMAT@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >

; 307  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAE@PAU_DDPIXELFORMAT@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >, COMDAT
; _this$ = ecx

; 300  : 	_Vector_iterator()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >

; 301  : 		{	// construct with null vector pointer
; 302  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::_Compat, COMDAT
; _this$ = ecx

; 254  : 		{	// test for compatible iterator pair

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 255  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv69 = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::operator!=, COMDAT
; _this$ = ecx

; 209  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 210  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]

; 211  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 		_Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::_Compat

; 205  : 		return (this->_Ptr == _Right._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]

; 206  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::operator++, COMDAT
; _this$ = ecx

; 95   : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 113  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 114  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBEABU_DDPIXELFORMAT@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBEABU_DDPIXELFORMAT@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::operator*, COMDAT
; _this$ = ecx

; 65   : 		{	// return designated object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 87   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBEABU_DDPIXELFORMAT@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAE@PAU_DDPIXELFORMAT@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAE@PAU_DDPIXELFORMAT@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct with pointer _Parg

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [eax], ecx

; 48   : 		this->_Adopt(_Pvector);

	mov	edx, DWORD PTR __Pvector$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z	; std::_Iterator_base0::_Adopt

; 49   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAE@PAU_DDPIXELFORMAT@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >, COMDAT
; _this$ = ecx

; 42   : 		{	// construct with null pointer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 43   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IBEXPAU_DDPIXELFORMAT@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IBEXPAU_DDPIXELFORMAT@@0@Z PROC ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1693 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1694 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Orphan_range@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IBEXPAU_DDPIXELFORMAT@@0@Z ENDP ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IBEXXZ PROC ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Xlen, COMDAT
; _this$ = ecx

; 1666 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1667 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 1668 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IBEXXZ ENDP ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Tidy@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXXZ PROC ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Tidy, COMDAT
; _this$ = ecx

; 1535 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1536 : 		if (this->_Myfirst != pointer())

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Tidy

; 1537 : 			{	// something to free, destroy and deallocate it
; 1538 : 			this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1539 : 			_Destroy(this->_Myfirst, this->_Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXPAU_DDPIXELFORMAT@@0@Z ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Destroy

; 1540 : 			this->_Getal().deallocate(this->_Myfirst,
; 1541 : 				this->_Myend - this->_Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 5
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXPAU_DDPIXELFORMAT@@I@Z ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::deallocate

; 1542 : 			this->_Myfirst = pointer();

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0

; 1543 : 			this->_Mylast = pointer();

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1544 : 			this->_Myend = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
$LN2@Tidy:

; 1545 : 			}
; 1546 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXXZ ENDP ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXI@Z PROC ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Reserve, COMDAT
; _this$ = ecx

; 1525 : 		{	// ensure room for _Count new elements, grow exponentially

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1526 : 		if (_Unused_capacity() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Unused_capacity@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QBEIXZ ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Unused_capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN4@Reserve

; 1527 : 			{	// need more room, try to get it
; 1528 : 			if (max_size() - size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QBEIXZ ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QBEIXZ ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Reserve

; 1529 : 				_Xlen();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IBEXXZ ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Xlen
$LN1@Reserve:

; 1530 : 			_Reallocate(_Grow_to(size() + _Count));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QBEIXZ ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::size
	add	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow_to@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IBEII@Z ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Grow_to
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reallocate@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXI@Z ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Reallocate
$LN4@Reserve:

; 1531 : 			}
; 1532 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?_Reserve@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXI@Z ENDP ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -32						; size = 4
__Ptr$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?_Reallocate@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXI@Z PROC ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Reallocate, COMDAT
; _this$ = ecx

; 1500 : 		{	// move to array of exactly _Count elements

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Reallocate@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1501 : 		pointer _Ptr = this->_Getal().allocate(_Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEPAU_DDPIXELFORMAT@@I@Z ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::allocate
	mov	DWORD PTR __Ptr$[ebp], eax

; 1502 : 
; 1503 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1504 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);

	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAU_DDPIXELFORMAT@@@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEPAU_DDPIXELFORMAT@@PAU2@00@Z ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Umove<_DDPIXELFORMAT *>
	jmp	SHORT $LN5@Reallocate
__catch$?_Reallocate@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXI@Z$0:

; 1505 : 		_CATCH_ALL
; 1506 : 		this->_Getal().deallocate(_Ptr, _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXPAU_DDPIXELFORMAT@@I@Z ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::deallocate

; 1507 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1508 : 		_CATCH_END

	mov	eax, $LN8@Reallocate
	ret	0
$LN5@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Reallocate@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXI@Z$1
$LN8@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Reallocate@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXI@Z$1:

; 1509 : 
; 1510 : 		size_type _Size = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QBEIXZ ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::size
	mov	DWORD PTR __Size$[ebp], eax

; 1511 : 		if (this->_Myfirst != pointer())

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@Reallocate

; 1512 : 			{	// destroy and deallocate old array
; 1513 : 			_Destroy(this->_Myfirst, this->_Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXPAU_DDPIXELFORMAT@@0@Z ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Destroy

; 1514 : 			this->_Getal().deallocate(this->_Myfirst,
; 1515 : 				this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx]
	sar	edx, 5
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXPAU_DDPIXELFORMAT@@I@Z ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::deallocate
$LN1@Reallocate:

; 1516 : 			}
; 1517 : 
; 1518 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1519 : 		this->_Myend = _Ptr + _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 5
	add	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1520 : 		this->_Mylast = _Ptr + _Size;

	mov	edx, DWORD PTR __Size$[ebp]
	shl	edx, 5
	add	edx, DWORD PTR __Ptr$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1521 : 		this->_Myfirst = _Ptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [ecx], edx
$LN4@Reallocate:

; 1522 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXI@Z ENDP ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Reallocate
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IBE_NPBU_DDPIXELFORMAT@@@Z
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IBE_NPBU_DDPIXELFORMAT@@@Z PROC ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Inside, COMDAT
; _this$ = ecx

; 1495 : 		{	// test if _Ptr points inside vector

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1496 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN3@Inside
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN4@Inside
$LN3@Inside:
	mov	DWORD PTR tv76[ebp], 0
$LN4@Inside:
	mov	al, BYTE PTR tv76[ebp]

; 1497 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IBE_NPBU_DDPIXELFORMAT@@@Z ENDP ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -12						; size = 4
_this$ = -8						; size = 4
__Capacity$ = -4					; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IBEII@Z PROC ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Grow_to, COMDAT
; _this$ = ecx

; 1484 : 		{	// grow by 50% or at least to _Count

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1485 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QBEIXZ ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QBEIXZ ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN4@Grow_to
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN5@Grow_to
$LN4@Grow_to:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN5@Grow_to:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1489 : 		if (_Capacity < _Count)

	mov	ecx, DWORD PTR __Capacity$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Grow_to

; 1490 : 			_Capacity = _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx
$LN1@Grow_to:

; 1491 : 		return (_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]

; 1492 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Grow_to@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IBEII@Z ENDP ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXPAU_DDPIXELFORMAT@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXPAU_DDPIXELFORMAT@@0@Z PROC ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Destroy, COMDAT
; _this$ = ecx

; 1478 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1479 : 		_Alty _Alval(this->_Getal());

	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> > >::_Getal

; 1480 : 		_Destroy_range(_First, _Last, _Alval);

	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@@std@@YAXPAU_DDPIXELFORMAT@@0AAU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> > >
	add	esp, 12					; 0000000cH

; 1481 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXPAU_DDPIXELFORMAT@@0@Z ENDP ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?clear@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXXZ PROC ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::clear, COMDAT
; _this$ = ecx

; 1413 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1414 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1415 : 		_Destroy(this->_Myfirst, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXPAU_DDPIXELFORMAT@@0@Z ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Destroy

; 1416 : 		this->_Mylast = this->_Myfirst;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+4], eax

; 1417 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXXZ ENDP ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?push_back@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXABU_DDPIXELFORMAT@@@Z
_TEXT	SEGMENT
__Idx$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Val$ = 8						; size = 4
?push_back@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXABU_DDPIXELFORMAT@@@Z PROC ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::push_back, COMDAT
; _this$ = ecx

; 1184 : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1185 : 		if (_Inside(_STD addressof(_Val)))

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@$$CBU_DDPIXELFORMAT@@@std@@YAPBU_DDPIXELFORMAT@@ABU1@@Z ; std::addressof<_DDPIXELFORMAT const >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IBE_NPBU_DDPIXELFORMAT@@@Z ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@push_back

; 1186 : 			{	// push back an element
; 1187 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$addressof@$$CBU_DDPIXELFORMAT@@@std@@YAPBU_DDPIXELFORMAT@@ABU1@@Z ; std::addressof<_DDPIXELFORMAT const >
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 5
	mov	DWORD PTR __Idx$1[ebp], eax

; 1188 : 			if (this->_Mylast == this->_Myend)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN3@push_back

; 1189 : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXI@Z ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Reserve
$LN3@push_back:

; 1190 : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IBEXPAU_DDPIXELFORMAT@@0@Z ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Orphan_range

; 1191 : 			this->_Getal().construct(this->_Mylast,
; 1192 : 				this->_Myfirst[_Idx]);

	mov	eax, DWORD PTR __Idx$1[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> > >::_Getal
	mov	ecx, eax
	call	??$construct@U_DDPIXELFORMAT@@AAU1@@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXPAU_DDPIXELFORMAT@@AAU2@@Z ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::construct<_DDPIXELFORMAT,_DDPIXELFORMAT &>

; 1193 : 			++this->_Mylast;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1194 : 			}
; 1195 : 		else

	jmp	SHORT $LN5@push_back
$LN4@push_back:

; 1196 : 			{	// push back a non-element
; 1197 : 			if (this->_Mylast == this->_Myend)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN1@push_back

; 1198 : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXI@Z ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Reserve
$LN1@push_back:

; 1199 : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IBEXPAU_DDPIXELFORMAT@@0@Z ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Orphan_range

; 1200 : 			this->_Getal().construct(this->_Mylast,
; 1201 : 				_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> > >::_Getal
	mov	ecx, eax
	call	??$construct@U_DDPIXELFORMAT@@ABU1@@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXPAU_DDPIXELFORMAT@@ABU2@@Z ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::construct<_DDPIXELFORMAT,_DDPIXELFORMAT const &>

; 1202 : 			++this->_Mylast;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 32					; 00000020H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN5@push_back:

; 1203 : 			}
; 1204 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXABU_DDPIXELFORMAT@@@Z ENDP ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?empty@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
tv75 = -8						; size = 4
_this$ = -4						; size = 4
?empty@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QBE_NXZ PROC ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::empty, COMDAT
; _this$ = ecx

; 1096 : 		{	// test if sequence is empty

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1097 : 		return (this->_Myfirst == this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN3@empty
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@empty
$LN3@empty:
	mov	DWORD PTR tv75[ebp], 0
$LN4@empty:
	mov	al, BYTE PTR tv75[ebp]

; 1098 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?empty@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QBE_NXZ ENDP ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::empty
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?max_size@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QBEIXZ PROC ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::max_size, COMDAT
; _this$ = ecx

; 1091 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1092 : 		return (this->_Getal().max_size());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::max_size

; 1093 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QBEIXZ ENDP ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?size@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QBEIXZ PROC ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::size, COMDAT
; _this$ = ecx

; 1086 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1087 : 		return (this->_Mylast - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 5

; 1088 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QBEIXZ ENDP ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?end@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@2@XZ PROC ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::end, COMDAT
; _this$ = ecx

; 991  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 992  : 		return (iterator(this->_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAE@PAU_DDPIXELFORMAT@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 993  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@2@XZ ENDP ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::end
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?begin@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@2@XZ PROC ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::begin, COMDAT
; _this$ = ecx

; 981  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 982  : 		return (iterator(this->_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAE@PAU_DDPIXELFORMAT@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 983  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@2@XZ ENDP ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::begin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unused_capacity@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QBEIXZ PROC ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 971  : 		{	// micro-optimization for capacity() - size()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 972  : 		return (this->_Myend - this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 5

; 973  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Unused_capacity@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QBEIXZ ENDP ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?capacity@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QBEIXZ PROC ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::capacity, COMDAT
; _this$ = ecx

; 966  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 967  : 		return (this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 5

; 968  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QBEIXZ ENDP ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??1?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAE@XZ PROC ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::~vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >, COMDAT
; _this$ = ecx

; 899  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 900  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@IAEXXZ ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::_Tidy

; 901  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAE@XZ ENDP ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::~vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
??0?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAE@XZ PROC ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >, COMDAT
; _this$ = ecx

; 685  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@U_DDPIXELFORMAT@@@std@@QAE@XZ ; std::allocator<_DDPIXELFORMAT>::allocator<_DDPIXELFORMAT>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAE@ABV?$allocator@U_DDPIXELFORMAT@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> > >::_Vector_alloc<0,std::_Vec_base_types<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> > >

; 686  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAE@XZ ENDP ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> > >::_Getal, COMDAT
; _this$ = ecx

; 646  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 647  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 648  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAE@ABV?$allocator@U_DDPIXELFORMAT@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAE@ABV?$allocator@U_DDPIXELFORMAT@@@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> > >::_Vector_alloc<0,std::_Vec_base_types<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> > >, COMDAT
; _this$ = ecx

; 593  : 	_Vector_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> >::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> >

; 594  : 		{	// construct allocator from _Al
; 595  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAE@ABV?$allocator@U_DDPIXELFORMAT@@@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> > >::_Vector_alloc<0,std::_Vec_base_types<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> >::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> >, COMDAT
; _this$ = ecx

; 484  : 	_Vector_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 485  : 		{	// initialize values
; 486  : 		_Myfirst = pointer();

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 487  : 		_Mylast = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 488  : 		_Myend = pointer();

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 489  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> >::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@SAIABV?$allocator@U_DDPIXELFORMAT@@@2@@Z ; std::allocator_traits<std::allocator<_DDPIXELFORMAT> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXPAU_DDPIXELFORMAT@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXPAU_DDPIXELFORMAT@@I@Z PROC ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@I@Z ; std::allocator<_DDPIXELFORMAT>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXPAU_DDPIXELFORMAT@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEPAU_DDPIXELFORMAT@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEPAU_DDPIXELFORMAT@@I@Z PROC ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@U_DDPIXELFORMAT@@@std@@QAEPAU_DDPIXELFORMAT@@I@Z ; std::allocator<_DDPIXELFORMAT>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEPAU_DDPIXELFORMAT@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@U_DDPIXELFORMAT@@@std@@QAE@XZ ; std::allocator<_DDPIXELFORMAT>::allocator<_DDPIXELFORMAT>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >::_Wrap_alloc<std::allocator<_DDPIXELFORMAT> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@SAIABV?$allocator@U_DDPIXELFORMAT@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@SAIABV?$allocator@U_DDPIXELFORMAT@@@2@@Z PROC ; std::allocator_traits<std::allocator<_DDPIXELFORMAT> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@U_DDPIXELFORMAT@@@std@@QBEIXZ ; std::allocator<_DDPIXELFORMAT>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@SAIABV?$allocator@U_DDPIXELFORMAT@@@2@@Z ENDP ; std::allocator_traits<std::allocator<_DDPIXELFORMAT> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@U_DDPIXELFORMAT@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@U_DDPIXELFORMAT@@@std@@QBEIXZ PROC ; std::allocator<_DDPIXELFORMAT>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	mov	eax, 134217727				; 07ffffffH

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@U_DDPIXELFORMAT@@@std@@QBEIXZ ENDP ; std::allocator<_DDPIXELFORMAT>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?construct@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@ABU3@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
tv69 = -8						; size = 4
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@ABU3@@Z PROC ; std::allocator<_DDPIXELFORMAT>::construct, COMDAT
; _this$ = ecx

; 605  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 606  : 		::new ((void *)_Ptr) _Ty(_Val);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	32					; 00000020H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, 8
	mov	esi, DWORD PTR __Val$[ebp]
	mov	edi, DWORD PTR $T1[ebp]
	rep movsd
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN1@construct
$LN3@construct:
	mov	DWORD PTR tv69[ebp], 0
$LN1@construct:

; 607  : 		}

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@ABU3@@Z ENDP ; std::allocator<_DDPIXELFORMAT>::construct
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U_DDPIXELFORMAT@@@std@@QAEPAU_DDPIXELFORMAT@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_DDPIXELFORMAT@@@std@@QAEPAU_DDPIXELFORMAT@@I@Z PROC ; std::allocator<_DDPIXELFORMAT>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@U_DDPIXELFORMAT@@@std@@YAPAU_DDPIXELFORMAT@@IPAU1@@Z ; std::_Allocate<_DDPIXELFORMAT>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_DDPIXELFORMAT@@@std@@QAEPAU_DDPIXELFORMAT@@I@Z ENDP ; std::allocator<_DDPIXELFORMAT>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@I@Z PROC ; std::allocator<_DDPIXELFORMAT>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U_DDPIXELFORMAT@@@std@@QAEXPAU_DDPIXELFORMAT@@I@Z ENDP ; std::allocator<_DDPIXELFORMAT>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U_DDPIXELFORMAT@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@U_DDPIXELFORMAT@@@std@@QAE@XZ PROC	; std::allocator<_DDPIXELFORMAT>::allocator<_DDPIXELFORMAT>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@U_DDPIXELFORMAT@@@std@@QAE@XZ ENDP	; std::allocator<_DDPIXELFORMAT>::allocator<_DDPIXELFORMAT>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ PROC ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::_Release, COMDAT
; _this$ = ecx

; 780  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 781  :         if (m_pInterface != NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release

; 782  :             m_pInterface->Release();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN2@Release:

; 783  :         }
; 784  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ ENDP ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ?GetInterfacePtr@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEAAPAUIDirectDrawSurface7@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetInterfacePtr@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEAAPAUIDirectDrawSurface7@@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::GetInterfacePtr, COMDAT
; _this$ = ecx

; 571  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 572  :         return m_pInterface; 

	mov	eax, DWORD PTR _this$[ebp]

; 573  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetInterfacePtr@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEAAPAUIDirectDrawSurface7@@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::GetInterfacePtr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??B?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBE_NXZ PROC ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator bool, COMDAT
; _this$ = ecx

; 414  :     { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 415  :         return m_pInterface != NULL; 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 416  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBE_NXZ ENDP ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??C?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDrawSurface7@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDrawSurface7@@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator->, COMDAT
; _this$ = ecx

; 401  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  :         if (m_pInterface == NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@operator

; 403  :             _com_issue_error(E_POINTER);

	push	-2147467261				; 80004003H
	call	?_com_issue_error@@YGXJ@Z		; _com_issue_error
$LN1@operator:

; 404  :         }
; 405  : 
; 406  :         return m_pInterface; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
$LN3@operator:

; 407  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??C?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDrawSurface7@@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator->
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??I?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEPAPAUIDirectDrawSurface7@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEPAPAUIDirectDrawSurface7@@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator&, COMDAT
; _this$ = ecx

; 391  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 392  :         _Release();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::_Release

; 393  :         m_pInterface = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 394  :         return &m_pInterface;

	mov	eax, DWORD PTR _this$[ebp]

; 395  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??I?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEPAPAUIDirectDrawSurface7@@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator&
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??B?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDrawSurface7@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDrawSurface7@@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator IDirectDrawSurface7 *, COMDAT
; _this$ = ecx

; 358  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 359  :         return m_pInterface; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 360  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDrawSurface7@@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator IDirectDrawSurface7 *
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >, COMDAT
; _this$ = ecx

; 315  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 316  :         _Release(); 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::_Release

; 317  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??0?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >, COMDAT
; _this$ = ecx

; 135  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 136  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??$?4V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEAAV0@ABV?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@@Z
_TEXT	SEGMENT
tv84 = -20						; size = 4
$T1 = -16						; size = 4
tv85 = -12						; size = 4
_this$ = -8						; size = 4
_hr$ = -4						; size = 4
_p$ = 8							; size = 4
??$?4V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEAAV0@ABV?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@@Z PROC ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator=<_com_IIID<IDirectDraw,&IID_IDirectDraw> >, COMDAT
; _this$ = ecx

; 235  :     template<typename _OtherIID> _com_ptr_t& operator=(const _com_ptr_t<_OtherIID>& p) 

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 236  :     {
; 237  :         HRESULT hr = _QueryInterface(p);

	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T1[ebp], esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	??0?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QAE@ABV0@@Z ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::_com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >
	mov	DWORD PTR tv84[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_QueryInterface@V?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEJV?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@@Z ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_QueryInterface<_com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> > >
	mov	DWORD PTR tv85[ebp], eax
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR _hr$[ebp], ecx

; 238  : 
; 239  :         if (FAILED(hr) && (hr != E_NOINTERFACE)) {

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@operator
	cmp	DWORD PTR _hr$[ebp], -2147467262	; 80004002H
	je	SHORT $LN1@operator

; 240  :             _com_issue_error(hr);

	mov	edx, DWORD PTR _hr$[ebp]
	push	edx
	call	?_com_issue_error@@YGXJ@Z		; _com_issue_error
$LN1@operator:

; 241  :         }
; 242  : 
; 243  :         return *this;

	mov	eax, DWORD PTR _this$[ebp]
$LN3@operator:

; 244  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
??$?4V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEAAV0@ABV?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@@Z ENDP ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator=<_com_IIID<IDirectDraw,&IID_IDirectDraw> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??$?4V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@QAEAAV0@ABV?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@@Z
_TEXT	SEGMENT
tv84 = -20						; size = 4
$T1 = -16						; size = 4
tv85 = -12						; size = 4
_this$ = -8						; size = 4
_hr$ = -4						; size = 4
_p$ = 8							; size = 4
??$?4V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@QAEAAV0@ABV?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@@Z PROC ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::operator=<_com_IIID<IDirectDraw,&IID_IDirectDraw> >, COMDAT
; _this$ = ecx

; 235  :     template<typename _OtherIID> _com_ptr_t& operator=(const _com_ptr_t<_OtherIID>& p) 

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 236  :     {
; 237  :         HRESULT hr = _QueryInterface(p);

	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T1[ebp], esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	??0?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QAE@ABV0@@Z ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::_com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >
	mov	DWORD PTR tv84[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_QueryInterface@V?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@AAEJV?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@@Z ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::_QueryInterface<_com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> > >
	mov	DWORD PTR tv85[ebp], eax
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR _hr$[ebp], ecx

; 238  : 
; 239  :         if (FAILED(hr) && (hr != E_NOINTERFACE)) {

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@operator
	cmp	DWORD PTR _hr$[ebp], -2147467262	; 80004002H
	je	SHORT $LN1@operator

; 240  :             _com_issue_error(hr);

	mov	edx, DWORD PTR _hr$[ebp]
	push	edx
	call	?_com_issue_error@@YGXJ@Z		; _com_issue_error
$LN1@operator:

; 241  :         }
; 242  : 
; 243  :         return *this;

	mov	eax, DWORD PTR _this$[ebp]
$LN3@operator:

; 244  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
??$?4V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@QAEAAV0@ABV?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@@Z ENDP ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::operator=<_com_IIID<IDirectDraw,&IID_IDirectDraw> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ?_AddRef@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_AddRef@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@AAEXXZ PROC ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::_AddRef, COMDAT
; _this$ = ecx

; 789  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 790  :         if (m_pInterface != NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@AddRef

; 791  :             m_pInterface->AddRef();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+4]
	call	eax
$LN2@AddRef:

; 792  :         }
; 793  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_AddRef@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@AAEXXZ ENDP ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::_AddRef
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@AAEXXZ PROC ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::_Release, COMDAT
; _this$ = ecx

; 780  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 781  :         if (m_pInterface != NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release

; 782  :             m_pInterface->Release();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN2@Release:

; 783  :         }
; 784  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@AAEXXZ ENDP ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??C?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@QBEPAUIDirect3D7@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@QBEPAUIDirect3D7@@XZ PROC ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::operator->, COMDAT
; _this$ = ecx

; 401  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  :         if (m_pInterface == NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@operator

; 403  :             _com_issue_error(E_POINTER);

	push	-2147467261				; 80004003H
	call	?_com_issue_error@@YGXJ@Z		; _com_issue_error
$LN1@operator:

; 404  :         }
; 405  : 
; 406  :         return m_pInterface; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
$LN3@operator:

; 407  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??C?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@QBEPAUIDirect3D7@@XZ ENDP ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::operator->
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ?Attach@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@QAEXPAUIDirect3D7@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pInterface$ = 8					; size = 4
?Attach@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@QAEXPAUIDirect3D7@@@Z PROC ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::Attach, COMDAT
; _this$ = ecx

; 323  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 324  :         _Release();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::_Release

; 325  :         m_pInterface = pInterface;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pInterface$[ebp]
	mov	DWORD PTR [eax], ecx

; 326  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?Attach@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@QAEXPAUIDirect3D7@@@Z ENDP ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::Attach
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??1?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@QAE@XZ PROC ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::~_com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >, COMDAT
; _this$ = ecx

; 315  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 316  :         _Release(); 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::_Release

; 317  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@QAE@XZ ENDP ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::~_com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??$?4UIDirect3D7@@@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@QAEAAV0@PAUIDirect3D7@@@Z
_TEXT	SEGMENT
_pOldInterface$1 = -8					; size = 4
_this$ = -4						; size = 4
_pInterface$ = 8					; size = 4
??$?4UIDirect3D7@@@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@QAEAAV0@PAUIDirect3D7@@@Z PROC ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::operator=<IDirect3D7>, COMDAT
; _this$ = ecx

; 261  :     template<> _com_ptr_t& operator=(Interface* pInterface) throw()

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 262  :     {
; 263  :         if (m_pInterface != pInterface) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _pInterface$[ebp]
	je	SHORT $LN2@operator

; 264  :             Interface* pOldInterface = m_pInterface;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _pOldInterface$1[ebp], eax

; 265  : 
; 266  :             m_pInterface = pInterface;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pInterface$[ebp]
	mov	DWORD PTR [ecx], edx

; 267  : 
; 268  :             _AddRef();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_AddRef@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::_AddRef

; 269  : 
; 270  :             if (pOldInterface != NULL) {

	cmp	DWORD PTR _pOldInterface$1[ebp], 0
	je	SHORT $LN2@operator

; 271  :                 pOldInterface->Release();

	mov	eax, DWORD PTR _pOldInterface$1[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pOldInterface$1[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
$LN2@operator:

; 272  :             }
; 273  :         }
; 274  : 
; 275  :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 276  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
??$?4UIDirect3D7@@@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@QAEAAV0@PAUIDirect3D7@@@Z ENDP ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::operator=<IDirect3D7>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??0?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@QAE@XZ PROC ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::_com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >, COMDAT
; _this$ = ecx

; 135  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 136  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@QAE@XZ ENDP ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::_com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ?GetIID@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@SAABU_GUID@@XZ
_TEXT	SEGMENT
?GetIID@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@SAABU_GUID@@XZ PROC ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::GetIID, COMDAT

; 74   :     { 

	push	ebp
	mov	ebp, esp

; 75   :         return ThisIIID::GetIID(); 

	call	?GetIID@?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@SAABU_GUID@@XZ ; _com_IIID<IDirect3D7,&IID_IDirect3D7>::GetIID

; 76   :     }

	pop	ebp
	ret	0
?GetIID@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@SAABU_GUID@@XZ ENDP ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::GetIID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ?GetIID@?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@SAABU_GUID@@XZ
_TEXT	SEGMENT
?GetIID@?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@SAABU_GUID@@XZ PROC ; _com_IIID<IDirect3D7,&IID_IDirect3D7>::GetIID, COMDAT

; 55   :     {

	push	ebp
	mov	ebp, esp

; 56   :         return *_IID;

	mov	eax, OFFSET _IID_IDirect3D7

; 57   :     }

	pop	ebp
	ret	0
?GetIID@?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@SAABU_GUID@@XZ ENDP ; _com_IIID<IDirect3D7,&IID_IDirect3D7>::GetIID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ?_AddRef@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_AddRef@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ PROC ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_AddRef, COMDAT
; _this$ = ecx

; 789  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 790  :         if (m_pInterface != NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@AddRef

; 791  :             m_pInterface->AddRef();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+4]
	call	eax
$LN2@AddRef:

; 792  :         }
; 793  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_AddRef@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ ENDP ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_AddRef
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ PROC ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_Release, COMDAT
; _this$ = ecx

; 780  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 781  :         if (m_pInterface != NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release

; 782  :             m_pInterface->Release();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN2@Release:

; 783  :         }
; 784  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ ENDP ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDraw7@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDraw7@@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator->, COMDAT
; _this$ = ecx

; 401  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  :         if (m_pInterface == NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@operator

; 403  :             _com_issue_error(E_POINTER);

	push	-2147467261				; 80004003H
	call	?_com_issue_error@@YGXJ@Z		; _com_issue_error
$LN1@operator:

; 404  :         }
; 405  : 
; 406  :         return m_pInterface; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
$LN3@operator:

; 407  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDraw7@@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator->
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ?Attach@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEXPAUIDirectDraw7@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pInterface$ = 8					; size = 4
?Attach@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEXPAUIDirectDraw7@@@Z PROC ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::Attach, COMDAT
; _this$ = ecx

; 323  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 324  :         _Release();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_Release

; 325  :         m_pInterface = pInterface;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pInterface$[ebp]
	mov	DWORD PTR [eax], ecx

; 326  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?Attach@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEXPAUIDirectDraw7@@@Z ENDP ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::Attach
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??1?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >, COMDAT
; _this$ = ecx

; 315  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 316  :         _Release(); 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_Release

; 317  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??$?4UIDirectDraw7@@@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEAAV0@PAUIDirectDraw7@@@Z
_TEXT	SEGMENT
_pOldInterface$1 = -8					; size = 4
_this$ = -4						; size = 4
_pInterface$ = 8					; size = 4
??$?4UIDirectDraw7@@@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEAAV0@PAUIDirectDraw7@@@Z PROC ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator=<IDirectDraw7>, COMDAT
; _this$ = ecx

; 261  :     template<> _com_ptr_t& operator=(Interface* pInterface) throw()

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 262  :     {
; 263  :         if (m_pInterface != pInterface) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _pInterface$[ebp]
	je	SHORT $LN2@operator

; 264  :             Interface* pOldInterface = m_pInterface;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _pOldInterface$1[ebp], eax

; 265  : 
; 266  :             m_pInterface = pInterface;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pInterface$[ebp]
	mov	DWORD PTR [ecx], edx

; 267  : 
; 268  :             _AddRef();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_AddRef@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_AddRef

; 269  : 
; 270  :             if (pOldInterface != NULL) {

	cmp	DWORD PTR _pOldInterface$1[ebp], 0
	je	SHORT $LN2@operator

; 271  :                 pOldInterface->Release();

	mov	eax, DWORD PTR _pOldInterface$1[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pOldInterface$1[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
$LN2@operator:

; 272  :             }
; 273  :         }
; 274  : 
; 275  :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 276  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
??$?4UIDirectDraw7@@@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEAAV0@PAUIDirectDraw7@@@Z ENDP ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator=<IDirectDraw7>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??0?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >, COMDAT
; _this$ = ecx

; 135  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 136  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ?GetIID@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@SAABU_GUID@@XZ
_TEXT	SEGMENT
?GetIID@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@SAABU_GUID@@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::GetIID, COMDAT

; 74   :     { 

	push	ebp
	mov	ebp, esp

; 75   :         return ThisIIID::GetIID(); 

	call	?GetIID@?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@SAABU_GUID@@XZ ; _com_IIID<IDirectDraw7,&IID_IDirectDraw7>::GetIID

; 76   :     }

	pop	ebp
	ret	0
?GetIID@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@SAABU_GUID@@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::GetIID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ?GetIID@?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@SAABU_GUID@@XZ
_TEXT	SEGMENT
?GetIID@?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@SAABU_GUID@@XZ PROC ; _com_IIID<IDirectDraw7,&IID_IDirectDraw7>::GetIID, COMDAT

; 55   :     {

	push	ebp
	mov	ebp, esp

; 56   :         return *_IID;

	mov	eax, OFFSET _IID_IDirectDraw7

; 57   :     }

	pop	ebp
	ret	0
?GetIID@?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@SAABU_GUID@@XZ ENDP ; _com_IIID<IDirectDraw7,&IID_IDirectDraw7>::GetIID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ?_AddRef@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_AddRef@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@AAEXXZ PROC ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::_AddRef, COMDAT
; _this$ = ecx

; 789  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 790  :         if (m_pInterface != NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@AddRef

; 791  :             m_pInterface->AddRef();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+4]
	call	eax
$LN2@AddRef:

; 792  :         }
; 793  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_AddRef@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@AAEXXZ ENDP ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::_AddRef
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@AAEXXZ PROC ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::_Release, COMDAT
; _this$ = ecx

; 780  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 781  :         if (m_pInterface != NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release

; 782  :             m_pInterface->Release();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN2@Release:

; 783  :         }
; 784  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@AAEXXZ ENDP ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??9?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QBE_NH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv69 = -4						; size = 4
_null$ = 8						; size = 4
??9?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QBE_NH@Z PROC ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::operator!=, COMDAT
; _this$ = ecx

; 476  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 477  :         return !(operator==(null));

	mov	eax, DWORD PTR _null$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QBE_NH@Z ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::operator==
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]

; 478  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QBE_NH@Z ENDP ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??8?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QBE_NH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
_null$ = 8						; size = 4
??8?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QBE_NH@Z PROC ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::operator==, COMDAT
; _this$ = ecx

; 451  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 452  :         if (null != 0) {

	cmp	DWORD PTR _null$[ebp], 0
	je	SHORT $LN1@operator

; 453  :             _com_issue_error(E_POINTER);

	push	-2147467261				; 80004003H
	call	?_com_issue_error@@YGXJ@Z		; _com_issue_error
$LN1@operator:

; 454  :         }
; 455  : 
; 456  :         return m_pInterface == NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN4@operator
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN5@operator
$LN4@operator:
	mov	DWORD PTR tv68[ebp], 0
$LN5@operator:
	mov	al, BYTE PTR tv68[ebp]
$LN3@operator:

; 457  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QBE_NH@Z ENDP ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QBEPAUIDirectDraw@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QBEPAUIDirectDraw@@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::operator->, COMDAT
; _this$ = ecx

; 401  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  :         if (m_pInterface == NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@operator

; 403  :             _com_issue_error(E_POINTER);

	push	-2147467261				; 80004003H
	call	?_com_issue_error@@YGXJ@Z		; _com_issue_error
$LN1@operator:

; 404  :         }
; 405  : 
; 406  :         return m_pInterface; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
$LN3@operator:

; 407  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QBEPAUIDirectDraw@@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::operator->
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??I?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QAEPAPAUIDirectDraw@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QAEPAPAUIDirectDraw@@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::operator&, COMDAT
; _this$ = ecx

; 391  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 392  :         _Release();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::_Release

; 393  :         m_pInterface = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 394  :         return &m_pInterface;

	mov	eax, DWORD PTR _this$[ebp]

; 395  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??I?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QAEPAPAUIDirectDraw@@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::operator&
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??1?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QAE@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::~_com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >, COMDAT
; _this$ = ecx

; 315  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 316  :         _Release(); 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::_Release

; 317  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QAE@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::~_com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??0?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_cp$ = 8						; size = 4
??0?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QAE@ABV0@@Z PROC ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::_com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >, COMDAT
; _this$ = ecx

; 160  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 161  :         _AddRef(); 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_AddRef@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::_AddRef

; 162  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QAE@ABV0@@Z ENDP ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::_com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??0?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QAE@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::_com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >, COMDAT
; _this$ = ecx

; 135  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 136  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QAE@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::_com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
_e$2 = -104						; size = 16
$T3 = -88						; size = 4
tv158 = -84						; size = 4
tv157 = -80						; size = 4
tv156 = -76						; size = 4
$T4 = -72						; size = 4
tv155 = -68						; size = 4
tv152 = -64						; size = 4
tv151 = -60						; size = 4
tv150 = -56						; size = 4
tv149 = -52						; size = 4
_this$ = -48						; size = 4
tv83 = -44						; size = 4
$T5 = -40						; size = 4
_pD3DDI$6 = -36						; size = 4
_pddsd$7 = -32						; size = 4
_pDDI$8 = -28						; size = 4
_pCtx$9 = -24						; size = 4
tv131 = -17						; size = 1
__$EHRec$ = -16						; size = 16
_driverNum$ = 8						; size = 4
_devNum$ = 12						; size = 4
_resNum$ = 16						; size = 4
_bFullscreen$ = 20					; size = 4
_hWnd$ = 24						; size = 4
?CreateContext@DeviceManager@@QAEPAVDXContext@@HHHHPAUHWND__@@@Z PROC ; DeviceManager::CreateContext
; _this$ = ecx

; 262  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateContext@DeviceManager@@QAEPAVDXContext@@HHHHPAUHWND__@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 263  : 	try
; 264  : 	{

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 265  : 		DDDriverInfo *pDDI = GetDriver(driverNum);

	mov	eax, DWORD PTR _driverNum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDriver@DeviceManager@@QAEPAVDDDriverInfo@1@H@Z ; DeviceManager::GetDriver
	mov	DWORD PTR tv149[ebp], eax
	mov	ecx, DWORD PTR tv149[ebp]
	mov	DWORD PTR _pDDI$8[ebp], ecx

; 266  : 		if(!pDDI) return NULL;

	cmp	DWORD PTR _pDDI$8[ebp], 0
	jne	SHORT $LN4@CreateCont
	xor	eax, eax
	jmp	$LN6@CreateCont
$LN4@CreateCont:

; 267  : 
; 268  : 		DDDriverInfo::D3DDeviceInfo *pD3DDI = pDDI->GetDevice(devNum);

	mov	edx, DWORD PTR _devNum$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pDDI$8[ebp]
	call	?GetDevice@DDDriverInfo@DeviceManager@@QAEPAVD3DDeviceInfo@12@H@Z ; DeviceManager::DDDriverInfo::GetDevice
	mov	DWORD PTR tv150[ebp], eax
	mov	eax, DWORD PTR tv150[ebp]
	mov	DWORD PTR _pD3DDI$6[ebp], eax

; 269  : 		if(!pD3DDI) return NULL;

	cmp	DWORD PTR _pD3DDI$6[ebp], 0
	jne	SHORT $LN3@CreateCont
	xor	eax, eax
	jmp	$LN6@CreateCont
$LN3@CreateCont:

; 270  : 
; 271  : 		LPDDSURFACEDESC2 pddsd = pDDI->GetDisplayMode(resNum);

	mov	ecx, DWORD PTR _resNum$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pDDI$8[ebp]
	call	?GetDisplayMode@DDDriverInfo@DeviceManager@@QAEPAU_DDSURFACEDESC2@@H@Z ; DeviceManager::DDDriverInfo::GetDisplayMode
	mov	DWORD PTR tv151[ebp], eax
	mov	edx, DWORD PTR tv151[ebp]
	mov	DWORD PTR _pddsd$7[ebp], edx

; 272  : 		if(!pddsd) return NULL;

	cmp	DWORD PTR _pddsd$7[ebp], 0
	jne	SHORT $LN2@CreateCont
	xor	eax, eax
	jmp	$LN6@CreateCont
$LN2@CreateCont:

; 273  : 
; 274  : 		DXContext *pCtx = new DXContext;

	push	80					; 00000050H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv152[ebp], eax
	mov	eax, DWORD PTR tv152[ebp]
	mov	DWORD PTR $T5[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN8@CreateCont
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0DXContext@@QAE@XZ			; DXContext::DXContext
	mov	DWORD PTR tv155[ebp], eax
	mov	ecx, DWORD PTR tv155[ebp]
	mov	DWORD PTR tv83[ebp], ecx
	jmp	SHORT $LN9@CreateCont
$LN8@CreateCont:
	mov	DWORD PTR tv83[ebp], 0
$LN9@CreateCont:
	mov	edx, DWORD PTR tv83[ebp]
	mov	DWORD PTR $T4[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR _pCtx$9[ebp], eax

; 275  : 		if(pCtx == NULL) return NULL;

	cmp	DWORD PTR _pCtx$9[ebp], 0
	jne	SHORT $LN1@CreateCont
	xor	eax, eax
	jmp	$LN6@CreateCont
$LN1@CreateCont:

; 276  : 
; 277  : 		pCtx->m_guidDD = *pDDI->GetGuid();

	mov	ecx, DWORD PTR _pDDI$8[ebp]
	call	?GetGuid@DDDriverInfo@DeviceManager@@QAEPAU_GUID@@XZ ; DeviceManager::DDDriverInfo::GetGuid
	mov	DWORD PTR tv156[ebp], eax
	mov	ecx, DWORD PTR _pCtx$9[ebp]
	add	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR tv156[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], edx

; 278  : 		pCtx->m_guidD3D = *pD3DDI->GetGuid();

	mov	ecx, DWORD PTR _pD3DDI$6[ebp]
	call	?GetGuid@D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAEPAU_GUID@@XZ ; DeviceManager::DDDriverInfo::D3DDeviceInfo::GetGuid
	mov	DWORD PTR tv157[ebp], eax
	mov	eax, DWORD PTR _pCtx$9[ebp]
	add	eax, 44					; 0000002cH
	mov	ecx, DWORD PTR tv157[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx

; 279  : 
; 280  : 		MonoPrint("DeviceManager::CreateContext - %s\n", pD3DDI->GetName());

	mov	ecx, DWORD PTR _pD3DDI$6[ebp]
	call	?GetName@D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAEPBDXZ ; DeviceManager::DDDriverInfo::D3DDeviceInfo::GetName
	mov	DWORD PTR tv158[ebp], eax
	mov	edx, DWORD PTR tv158[ebp]
	push	edx
	push	OFFSET ??_C@_0CD@MAKLMNDE@DeviceManager?3?3CreateContext?5?9?5?$CF@
	call	_MonoPrint
	add	esp, 8

; 281  : 
; 282  : 		#ifdef _DEBUG
; 283  : 		if(!bFullscreen) ShiAssert(pDDI->CanRenderWindowed());
; 284  : 		#endif
; 285  : 
; 286  : 		pCtx->Init(hWnd, pddsd->dwWidth, pddsd->dwHeight, pddsd->ddpfPixelFormat.dwRGBBitCount, bFullscreen ? true : false);

	cmp	DWORD PTR _bFullscreen$[ebp], 0
	je	SHORT $LN10@CreateCont
	mov	BYTE PTR tv131[ebp], 1
	jmp	SHORT $LN11@CreateCont
$LN10@CreateCont:
	mov	BYTE PTR tv131[ebp], 0
$LN11@CreateCont:
	movzx	eax, BYTE PTR tv131[ebp]
	push	eax
	mov	ecx, DWORD PTR _pddsd$7[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	mov	eax, DWORD PTR _pddsd$7[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _pddsd$7[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _hWnd$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pCtx$9[ebp]
	call	?Init@DXContext@@QAE_NPAUHWND__@@HHH_N@Z ; DXContext::Init

; 287  : 
; 288  : 		return pCtx;

	mov	eax, DWORD PTR _pCtx$9[ebp]
	jmp	SHORT $LN6@CreateCont
__catch$?CreateContext@DeviceManager@@QAEPAVDXContext@@HHHHPAUHWND__@@@Z$0:

; 289  : 	}
; 290  : 
; 291  : 	catch(_com_error e)
; 292  : 	{
; 293  : 		MonoPrint("DeviceManager::OpenDevice - Error 0x%X\n", e.Error());

	lea	ecx, DWORD PTR _e$2[ebp]
	call	?Error@_com_error@@QBEJXZ		; _com_error::Error
	push	eax
	push	OFFSET ??_C@_0CI@MELFNFMP@DeviceManager?3?3OpenDevice?5?9?5Erro@
	call	_MonoPrint
	add	esp, 8

; 294  : 		return NULL;

	mov	DWORD PTR $T3[ebp], 0
	lea	ecx, DWORD PTR _e$2[ebp]
	call	??1_com_error@@UAE@XZ			; _com_error::~_com_error
	mov	eax, $LN17@CreateCont
	ret	0

; 295  : 	}

	mov	eax, __tryend$?CreateContext@DeviceManager@@QAEPAVDXContext@@HHHHPAUHWND__@@@Z$1
	ret	0
__tryend$?CreateContext@DeviceManager@@QAEPAVDXContext@@HHHHPAUHWND__@@@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN6@CreateCont
$LN17@CreateCont:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 294  : 		return NULL;

	mov	eax, DWORD PTR $T3[ebp]
$LN6@CreateCont:

; 296  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateContext@DeviceManager@@QAEPAVDXContext@@HHHHPAUHWND__@@@Z$2:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateContext@DeviceManager@@QAEPAVDXContext@@HHHHPAUHWND__@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-108]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateContext@DeviceManager@@QAEPAVDXContext@@HHHHPAUHWND__@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateContext@DeviceManager@@QAEPAVDXContext@@HHHHPAUHWND__@@@Z ENDP ; DeviceManager::CreateContext
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
_i$ = -16						; size = 4
_DI$ = -12						; size = 4
_this$ = -8						; size = 4
_pddsd$ = -4						; size = 4
_driverNum$ = 8						; size = 4
_devNum$ = 12						; size = 4
_modeNum$ = 16						; size = 4
_pWidth$ = 20						; size = 4
_pHeight$ = 24						; size = 4
_pDepth$ = 28						; size = 4
?GetMode@DeviceManager@@QAE_NHHHPAI00@Z PROC		; DeviceManager::GetMode
; _this$ = ecx

; 138  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 139  : 	static char	buffer[80];
; 140  : 	int			i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 141  : 
; 142  : 	if(driverNum < 0 || driverNum >= (int) m_arrDDDrivers.size())

	cmp	DWORD PTR _driverNum$[ebp], 0
	jl	SHORT $LN2@GetMode
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::size
	cmp	DWORD PTR _driverNum$[ebp], eax
	jl	SHORT $LN3@GetMode
$LN2@GetMode:

; 143  : 		return false;

	xor	al, al
	jmp	SHORT $LN4@GetMode
$LN3@GetMode:

; 144  : 
; 145  : 	DDDriverInfo &DI = m_arrDDDrivers[driverNum];

	mov	eax, DWORD PTR _driverNum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEAAVDDDriverInfo@DeviceManager@@I@Z ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::operator[]
	mov	DWORD PTR _DI$[ebp], eax

; 146  : 	LPDDSURFACEDESC2 pddsd = DI.GetDisplayMode(modeNum);

	mov	ecx, DWORD PTR _modeNum$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _DI$[ebp]
	call	?GetDisplayMode@DDDriverInfo@DeviceManager@@QAEPAU_DDSURFACEDESC2@@H@Z ; DeviceManager::DDDriverInfo::GetDisplayMode
	mov	DWORD PTR _pddsd$[ebp], eax

; 147  : 	if(!pddsd) return false;

	cmp	DWORD PTR _pddsd$[ebp], 0
	jne	SHORT $LN1@GetMode
	xor	al, al
	jmp	SHORT $LN4@GetMode
$LN1@GetMode:

; 148  : 
; 149  : 	*pWidth = pddsd->dwWidth;

	mov	edx, DWORD PTR _pWidth$[ebp]
	mov	eax, DWORD PTR _pddsd$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx], ecx

; 150  : 	*pHeight = pddsd->dwHeight;

	mov	edx, DWORD PTR _pHeight$[ebp]
	mov	eax, DWORD PTR _pddsd$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx], ecx

; 151  : 	*pDepth = pddsd->ddpfPixelFormat.dwRGBBitCount;	// OW

	mov	edx, DWORD PTR _pDepth$[ebp]
	mov	eax, DWORD PTR _pddsd$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR [edx], ecx

; 152  : 
; 153  : 	return true;

	mov	al, 1
$LN4@GetMode:

; 154  : }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?GetMode@DeviceManager@@QAE_NHHHPAI00@Z ENDP		; DeviceManager::GetMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
tv78 = -1568						; size = 4
_pThis$ = -1564						; size = 4
tv77 = -1560						; size = 4
tv71 = -1556						; size = 4
$T2 = -1552						; size = 1536
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_lpGUID$ = 8						; size = 4
_lpDriverDescription$ = 12				; size = 4
_lpDriverName$ = 16					; size = 4
_lpContext$ = 20					; size = 4
_hm$ = 24						; size = 4
?EnumDDCallbackEx@DeviceManager@@SGHPAU_GUID@@PAD1PAXPAUHMONITOR__@@@Z PROC ; DeviceManager::EnumDDCallbackEx

; 325  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?EnumDDCallbackEx@DeviceManager@@SGHPAU_GUID@@PAD1PAXPAUHMONITOR__@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1556				; 00000614H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 326  : 	DeviceManager *pThis = (DeviceManager *) lpContext;

	mov	eax, DWORD PTR _lpContext$[ebp]
	mov	DWORD PTR _pThis$[ebp], eax

; 327  : 	pThis->m_arrDDDrivers.push_back(DDDriverInfo(lpGUID ? *lpGUID : GUID_NULL, lpDriverName, lpDriverDescription));

	cmp	DWORD PTR _lpGUID$[ebp], 0
	je	SHORT $LN3@EnumDDCall
	mov	ecx, DWORD PTR _lpGUID$[ebp]
	mov	DWORD PTR tv71[ebp], ecx
	jmp	SHORT $LN4@EnumDDCall
$LN3@EnumDDCall:
	mov	DWORD PTR tv71[ebp], OFFSET _GUID_NULL
$LN4@EnumDDCall:
	mov	edx, DWORD PTR _lpDriverDescription$[ebp]
	push	edx
	mov	eax, DWORD PTR _lpDriverName$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv71[ebp]
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0DDDriverInfo@DeviceManager@@QAE@U_GUID@@PBD1@Z ; DeviceManager::DDDriverInfo::DDDriverInfo
	mov	DWORD PTR tv78[ebp], eax
	mov	edx, DWORD PTR tv78[ebp]
	mov	DWORD PTR tv77[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR tv77[ebp]
	push	eax
	mov	ecx, DWORD PTR _pThis$[ebp]
	call	?push_back@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEX$$QAVDDDriverInfo@DeviceManager@@@Z ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::push_back
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1DDDriverInfo@DeviceManager@@QAE@XZ

; 328  : 	return TRUE;

	mov	eax, 1

; 329  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?EnumDDCallbackEx@DeviceManager@@SGHPAU_GUID@@PAD1PAXPAUHMONITOR__@@@Z$0:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1DDDriverInfo@DeviceManager@@QAE@XZ
__ehhandler$?EnumDDCallbackEx@DeviceManager@@SGHPAU_GUID@@PAD1PAXPAUHMONITOR__@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1560]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?EnumDDCallbackEx@DeviceManager@@SGHPAU_GUID@@PAD1PAXPAUHMONITOR__@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?EnumDDCallbackEx@DeviceManager@@SGHPAU_GUID@@PAD1PAXPAUHMONITOR__@@@Z ENDP ; DeviceManager::EnumDDCallbackEx
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
_lpGUID$ = 8						; size = 4
_lpDriverDescription$ = 12				; size = 4
_lpDriverName$ = 16					; size = 4
_lpContext$ = 20					; size = 4
?EnumDDCallback@DeviceManager@@SGHPAU_GUID@@PAD1PAX@Z PROC ; DeviceManager::EnumDDCallback

; 319  : {

	push	ebp
	mov	ebp, esp

; 320  : 	return EnumDDCallbackEx(lpGUID, lpDriverDescription, lpDriverName, lpContext, NULL);

	push	0
	mov	eax, DWORD PTR _lpContext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lpDriverName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpDriverDescription$[ebp]
	push	edx
	mov	eax, DWORD PTR _lpGUID$[ebp]
	push	eax
	call	?EnumDDCallbackEx@DeviceManager@@SGHPAU_GUID@@PAD1PAXPAUHMONITOR__@@@Z ; DeviceManager::EnumDDCallbackEx

; 321  : }

	pop	ebp
	ret	16					; 00000010H
?EnumDDCallback@DeviceManager@@SGHPAU_GUID@@PAD1PAX@Z ENDP ; DeviceManager::EnumDDCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_lpDDEnumEx$ = -8					; size = 4
_h$ = -4						; size = 4
_pThis$ = 8						; size = 4
?EnumDDDrivers@DeviceManager@@QAEXPAV1@@Z PROC		; DeviceManager::EnumDDDrivers
; _this$ = ecx

; 299  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 300  :     HINSTANCE h = LoadLibrary("ddraw.dll");

	push	OFFSET ??_C@_09FCFFOIDA@ddraw?4dll?$AA@
	call	DWORD PTR __imp__LoadLibraryA@4
	mov	DWORD PTR _h$[ebp], eax

; 301  :     if(!h) return;

	cmp	DWORD PTR _h$[ebp], 0
	jne	SHORT $LN3@EnumDDDriv
	jmp	SHORT $LN4@EnumDDDriv
$LN3@EnumDDDriv:

; 302  :  
; 303  : 	m_arrDDDrivers.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEXXZ ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::clear

; 304  : 
; 305  :     // Note that you must know which version of the function to retrieve (see the following text). For this example, we use the ANSI version.
; 306  :     LPDIRECTDRAWENUMERATEEX lpDDEnumEx;
; 307  :     lpDDEnumEx = (LPDIRECTDRAWENUMERATEEX) GetProcAddress(h,"DirectDrawEnumerateExA");

	push	OFFSET ??_C@_0BH@GFMHGGLD@DirectDrawEnumerateExA?$AA@
	mov	eax, DWORD PTR _h$[ebp]
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _lpDDEnumEx$[ebp], eax

; 308  :  
; 309  :     // If the function is there, call it to enumerate all display devices attached to the desktop, and any non-display DirectDraw devices.
; 310  :     if(lpDDEnumEx) lpDDEnumEx(EnumDDCallbackEx, pThis, DDENUM_ATTACHEDSECONDARYDEVICES |

	cmp	DWORD PTR _lpDDEnumEx$[ebp], 0
	je	SHORT $LN2@EnumDDDriv

; 311  :             DDENUM_NONDISPLAYDEVICES);

	push	5
	mov	ecx, DWORD PTR _pThis$[ebp]
	push	ecx
	push	OFFSET ?EnumDDCallbackEx@DeviceManager@@SGHPAU_GUID@@PAD1PAXPAUHMONITOR__@@@Z ; DeviceManager::EnumDDCallbackEx
	call	DWORD PTR _lpDDEnumEx$[ebp]
	jmp	SHORT $LN1@EnumDDDriv
$LN2@EnumDDDriv:

; 312  :     else DirectDrawEnumerate(EnumDDCallback, pThis);

	mov	edx, DWORD PTR _pThis$[ebp]
	push	edx
	push	OFFSET ?EnumDDCallback@DeviceManager@@SGHPAU_GUID@@PAD1PAX@Z ; DeviceManager::EnumDDCallback
	call	_DirectDrawEnumerateA@8
$LN1@EnumDDDriv:

; 313  :  
; 314  :     FreeLibrary(h);

	mov	eax, DWORD PTR _h$[ebp]
	push	eax
	call	DWORD PTR __imp__FreeLibrary@4
$LN4@EnumDDDriv:

; 315  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?EnumDDDrivers@DeviceManager@@QAEXPAV1@@Z ENDP		; DeviceManager::EnumDDDrivers
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$1 = -4						; size = 4
?FindPrimaryDisplayDriver@DeviceManager@@QAEHXZ PROC	; DeviceManager::FindPrimaryDisplayDriver
; _this$ = ecx

; 90   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 91   : 	for(int i=0;i< (int) m_arrDDDrivers.size();i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@FindPrimar
$LN3@FindPrimar:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@FindPrimar:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::size
	cmp	DWORD PTR _i$1[ebp], eax
	jge	SHORT $LN2@FindPrimar

; 92   : 		if(IsEqualGUID(m_arrDDDrivers[i].m_guid, GUID_NULL)) return i;

	push	OFFSET _GUID_NULL
	mov	ecx, DWORD PTR _i$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEAAVDDDriverInfo@DeviceManager@@I@Z ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::operator[]
	push	eax
	call	_IsEqualGUID
	add	esp, 8
	test	eax, eax
	je	SHORT $LN1@FindPrimar
	mov	eax, DWORD PTR _i$1[ebp]
	jmp	SHORT $LN5@FindPrimar
$LN1@FindPrimar:

; 93   : 	return -1;

	jmp	SHORT $LN3@FindPrimar
$LN2@FindPrimar:
	or	eax, -1
$LN5@FindPrimar:

; 94   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FindPrimaryDisplayDriver@DeviceManager@@QAEHXZ ENDP	; DeviceManager::FindPrimaryDisplayDriver
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
_height$ = -1488					; size = 4
_width$ = -1484						; size = 4
_devName$ = -1480					; size = 4
_drvName$ = -1476					; size = 4
_listSlot$ = -1472					; size = 4
_this$ = -1468						; size = 4
_modeName$ = -1464					; size = 4
_packedNum$ = -1460					; size = 4
_modeNum$ = -1456					; size = 4
_devNum$ = -1452					; size = 4
_drvNum$ = -1448					; size = 4
_listWin$ = -1444					; size = 4
_rect$ = -1440						; size = 16
_buffer$1 = -1424					; size = 580
_buffer$2 = -844					; size = 580
_name$ = -264						; size = 260
__$ArrayPad$ = -4					; size = 4
_usrDrvNum$ = 8						; size = 4
_usrDevNum$ = 12					; size = 4
_usrWidth$ = 16						; size = 4
?ChooseDevice@DeviceManager@@QAEHPAH00@Z PROC		; DeviceManager::ChooseDevice
; _this$ = ecx

; 158  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1488				; 000005d0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 159  :     RECT			rect;
; 160  : 	HWND			listWin;
; 161  : 	DWORD			listSlot;
; 162  : 	const char		*devName;
; 163  : 	const char		*drvName;
; 164  : 	const char		*modeName;
; 165  : 	char			name[MAX_PATH];
; 166  : 	unsigned		devNum;
; 167  : 	unsigned		drvNum;
; 168  : 	unsigned		modeNum;
; 169  : 	unsigned		width;
; 170  : 	unsigned		height;
; 171  : 	unsigned		packedNum;
; 172  : 	
; 173  : 	// Build a window for this application
; 174  : 	rect.top = rect.left = 0;

	mov	DWORD PTR _rect$[ebp], 0
	mov	eax, DWORD PTR _rect$[ebp]
	mov	DWORD PTR _rect$[ebp+4], eax

; 175  : 	rect.right = 200;

	mov	DWORD PTR _rect$[ebp+8], 200		; 000000c8H

; 176  : 	rect.bottom = 400;

	mov	DWORD PTR _rect$[ebp+12], 400		; 00000190H

; 177  : 	AdjustWindowRect(&rect,	WS_OVERLAPPEDWINDOW, FALSE);

	push	0
	push	13565952				; 00cf0000H
	lea	ecx, DWORD PTR _rect$[ebp]
	push	ecx
	call	DWORD PTR __imp__AdjustWindowRect@12

; 178  : 	listWin = CreateWindow(
; 179  : 	    "LISTBOX",				/* class */
; 180  : 		"Choose Display Device",/* caption */
; 181  : 		WS_OVERLAPPEDWINDOW,	/* style */
; 182  : 		CW_USEDEFAULT,			/* init. x pos */
; 183  : 		CW_USEDEFAULT,			/* init. y pos */
; 184  : 		rect.right-rect.left,	/* init. x size */
; 185  : 		rect.bottom-rect.top,	/* init. y size */
; 186  : 		NULL,					/* parent window */
; 187  : 		NULL,					/* menu handle */
; 188  : 		NULL,					/* program handle */
; 189  : 		NULL					/* create parms */
; 190  : 	);

	push	0
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR _rect$[ebp+12]
	sub	edx, DWORD PTR _rect$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _rect$[ebp+8]
	sub	eax, DWORD PTR _rect$[ebp]
	push	eax
	push	-2147483648				; 80000000H
	push	-2147483648				; 80000000H
	push	13565952				; 00cf0000H
	push	OFFSET ??_C@_0BG@CABGKPIC@Choose?5Display?5Device?$AA@
	push	OFFSET ??_C@_07EKEMFJNL@LISTBOX?$AA@
	push	0
	call	DWORD PTR __imp__CreateWindowExA@48
	mov	DWORD PTR _listWin$[ebp], eax

; 191  : 	if (!listWin) {

	cmp	DWORD PTR _listWin$[ebp], 0
	jne	SHORT $LN8@ChooseDevi

; 192  : 		ShiError( "Failed to construct list box window" );

	push	OFFSET ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
	push	OFFSET ??_C@_0L@NAFBIAKG@DevMgr?4cpp?$AA@
	push	192					; 000000c0H
	push	OFFSET ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
	lea	ecx, DWORD PTR _buffer$2[ebp]
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H
	push	0
	push	OFFSET ??_C@_0CE@DJNPENE@Failed?5to?5construct?5list?5box?5win@
	lea	edx, DWORD PTR _buffer$2[ebp]
	push	edx
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	push	-1
	call	_exit
$LN8@ChooseDevi:

; 193  : 	}
; 194  : 
; 195  : 	// Fill in the list box with the avaiable devices
; 196  : 	drvNum = 0;

	mov	DWORD PTR _drvNum$[ebp], 0
$LN7@ChooseDevi:

; 197  : 	while (drvName = GetDriverName(drvNum)) { 

	mov	eax, DWORD PTR _drvNum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDriverName@DeviceManager@@QAEPBDH@Z	; DeviceManager::GetDriverName
	mov	DWORD PTR _drvName$[ebp], eax
	cmp	DWORD PTR _drvName$[ebp], 0
	je	$LN6@ChooseDevi

; 198  : 
; 199  : 		devNum = 0;

	mov	DWORD PTR _devNum$[ebp], 0
$LN5@ChooseDevi:

; 200  : 		while (devName = GetDeviceName(drvNum, devNum)) {

	mov	ecx, DWORD PTR _devNum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _drvNum$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDeviceName@DeviceManager@@QAEPBDHH@Z ; DeviceManager::GetDeviceName
	mov	DWORD PTR _devName$[ebp], eax
	cmp	DWORD PTR _devName$[ebp], 0
	je	$LN4@ChooseDevi

; 201  : 
; 202  : 			modeNum = 0;

	mov	DWORD PTR _modeNum$[ebp], 0
$LN3@ChooseDevi:

; 203  : 			while (modeName = GetModeName(drvNum, devNum, modeNum)) { 

	mov	eax, DWORD PTR _modeNum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _devNum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _drvNum$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetModeName@DeviceManager@@QAEPBDHHH@Z	; DeviceManager::GetModeName
	mov	DWORD PTR _modeName$[ebp], eax
	cmp	DWORD PTR _modeName$[ebp], 0
	je	$LN2@ChooseDevi

; 204  : 
; 205  : 				packedNum = (devNum << 24) | (drvNum << 8) | (modeNum);

	mov	eax, DWORD PTR _devNum$[ebp]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _drvNum$[ebp]
	shl	ecx, 8
	or	eax, ecx
	or	eax, DWORD PTR _modeNum$[ebp]
	mov	DWORD PTR _packedNum$[ebp], eax

; 206  : 				strcpy( name, drvName );

	mov	edx, DWORD PTR _drvName$[ebp]
	push	edx
	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8

; 207  : 				strcat( name, ":  " );

	push	OFFSET ??_C@_03OMOEFKGE@?3?5?5?$AA@
	lea	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8

; 208  : 				strcat( name, devName );

	mov	edx, DWORD PTR _devName$[ebp]
	push	edx
	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_strcat
	add	esp, 8

; 209  : 
; 210  : 				strcat( name, "  " );

	push	OFFSET ??_C@_02KNHHEEKP@?5?5?$AA@
	lea	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8

; 211  : 				strcat( name, modeName );

	mov	edx, DWORD PTR _modeName$[ebp]
	push	edx
	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_strcat
	add	esp, 8

; 212  : 
; 213  : 				listSlot = SendMessage( listWin, LB_ADDSTRING, 0, (LPARAM)name );

	lea	ecx, DWORD PTR _name$[ebp]
	push	ecx
	push	0
	push	384					; 00000180H
	mov	edx, DWORD PTR _listWin$[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageA@16
	mov	DWORD PTR _listSlot$[ebp], eax

; 214  : 				if (listSlot == LB_ERR) {

	cmp	DWORD PTR _listSlot$[ebp], -1
	jne	SHORT $LN1@ChooseDevi

; 215  : 					ShiError( "Failed to add device to selection list." );

	push	OFFSET ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
	push	OFFSET ??_C@_0L@NAFBIAKG@DevMgr?4cpp?$AA@
	push	215					; 000000d7H
	push	OFFSET ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
	lea	eax, DWORD PTR _buffer$1[ebp]
	push	eax
	call	_sprintf
	add	esp, 20					; 00000014H
	push	0
	push	OFFSET ??_C@_0CI@ECNOHHOP@Failed?5to?5add?5device?5to?5selectio@
	lea	ecx, DWORD PTR _buffer$1[ebp]
	push	ecx
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	push	-1
	call	_exit
$LN1@ChooseDevi:

; 216  : 				}
; 217  : 				SendMessage( listWin, LB_SETITEMDATA, listSlot, packedNum );

	mov	edx, DWORD PTR _packedNum$[ebp]
	push	edx
	mov	eax, DWORD PTR _listSlot$[ebp]
	push	eax
	push	410					; 0000019aH
	mov	ecx, DWORD PTR _listWin$[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageA@16

; 218  : 
; 219  : 				modeNum++;

	mov	edx, DWORD PTR _modeNum$[ebp]
	add	edx, 1
	mov	DWORD PTR _modeNum$[ebp], edx

; 220  : 			}

	jmp	$LN3@ChooseDevi
$LN2@ChooseDevi:

; 221  : 
; 222  : 			devNum++;

	mov	eax, DWORD PTR _devNum$[ebp]
	add	eax, 1
	mov	DWORD PTR _devNum$[ebp], eax

; 223  : 		}

	jmp	$LN5@ChooseDevi
$LN4@ChooseDevi:

; 224  : 
; 225  : 		drvNum++;

	mov	ecx, DWORD PTR _drvNum$[ebp]
	add	ecx, 1
	mov	DWORD PTR _drvNum$[ebp], ecx

; 226  : 	}

	jmp	$LN7@ChooseDevi
$LN6@ChooseDevi:

; 227  : 
; 228  : 	// Mark the first entry as selected by default and show the window to the user
; 229  : 	SendMessage( listWin, LB_SETCURSEL, 0, 0 );

	push	0
	push	0
	push	390					; 00000186H
	mov	edx, DWORD PTR _listWin$[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageA@16

; 230  : 	ShowWindow( listWin, SW_SHOW );

	push	5
	mov	eax, DWORD PTR _listWin$[ebp]
	push	eax
	call	DWORD PTR __imp__ShowWindow@8

; 231  : 
; 232  : 	// Stop here until we get a choice from the user
; 233  : 	MessageBox( NULL, "Click OK when you've made your device choice", "", MB_OK );

	push	0
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	OFFSET ??_C@_0CN@LEIKMLC@Click?5OK?5when?5you?8ve?5made?5your?5d@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 234  : 
; 235  : 	listSlot = SendMessage( listWin, LB_GETCURSEL, 0, 0 );

	push	0
	push	0
	push	392					; 00000188H
	mov	ecx, DWORD PTR _listWin$[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageA@16
	mov	DWORD PTR _listSlot$[ebp], eax

; 236  : 	ShiAssert( listSlot != LB_ERR );
; 237  : 	packedNum = SendMessage( listWin, LB_GETITEMDATA, listSlot, 0 );

	push	0
	mov	edx, DWORD PTR _listSlot$[ebp]
	push	edx
	push	409					; 00000199H
	mov	eax, DWORD PTR _listWin$[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageA@16
	mov	DWORD PTR _packedNum$[ebp], eax

; 238  : 	devNum  = (packedNum >> 24) & 0xFF;

	mov	ecx, DWORD PTR _packedNum$[ebp]
	shr	ecx, 24					; 00000018H
	and	ecx, 255				; 000000ffH
	mov	DWORD PTR _devNum$[ebp], ecx

; 239  : 	drvNum  = (packedNum >> 8)  & 0xFFFF;

	mov	edx, DWORD PTR _packedNum$[ebp]
	shr	edx, 8
	and	edx, 65535				; 0000ffffH
	mov	DWORD PTR _drvNum$[ebp], edx

; 240  : 	modeNum = (packedNum >> 0)  & 0xFF;

	mov	eax, DWORD PTR _packedNum$[ebp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR _modeNum$[ebp], eax

; 241  : 
; 242  : 	modeName = GetModeName(drvNum, devNum, modeNum);

	mov	ecx, DWORD PTR _modeNum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _devNum$[ebp]
	push	edx
	mov	eax, DWORD PTR _drvNum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetModeName@DeviceManager@@QAEPBDHHH@Z	; DeviceManager::GetModeName
	mov	DWORD PTR _modeName$[ebp], eax

; 243  : 	ShiAssert( modeName );
; 244  : 	sscanf( modeName, "%d x %d", &width, &height );

	lea	ecx, DWORD PTR _height$[ebp]
	push	ecx
	lea	edx, DWORD PTR _width$[ebp]
	push	edx
	push	OFFSET ??_C@_07FJJAPPM@?$CFd?5x?5?$CFd?$AA@
	mov	eax, DWORD PTR _modeName$[ebp]
	push	eax
	call	_sscanf
	add	esp, 16					; 00000010H

; 245  : 	ShiAssert( width*3/4 == height );
; 246  : 
; 247  : 	*usrDevNum  = devNum;

	mov	ecx, DWORD PTR _usrDevNum$[ebp]
	mov	edx, DWORD PTR _devNum$[ebp]
	mov	DWORD PTR [ecx], edx

; 248  : 	*usrDrvNum  = drvNum;

	mov	eax, DWORD PTR _usrDrvNum$[ebp]
	mov	ecx, DWORD PTR _drvNum$[ebp]
	mov	DWORD PTR [eax], ecx

; 249  : 	*usrWidth   = width;

	mov	edx, DWORD PTR _usrWidth$[ebp]
	mov	eax, DWORD PTR _width$[ebp]
	mov	DWORD PTR [edx], eax

; 250  : 
; 251  : 	// Get rid of the list box now that we're done with it
; 252  : 	DestroyWindow( listWin );

	mov	ecx, DWORD PTR _listWin$[ebp]
	push	ecx
	call	DWORD PTR __imp__DestroyWindow@4

; 253  : 	listWin = NULL;

	mov	DWORD PTR _listWin$[ebp], 0

; 254  : 
; 255  : 	// return their choice
; 256  : 	return TRUE;

	mov	eax, 1
$LN10@ChooseDevi:

; 257  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?ChooseDevice@DeviceManager@@QAEHPAH00@Z ENDP		; DeviceManager::ChooseDevice
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
_DI$ = -16						; size = 4
_this$ = -12						; size = 4
_i$ = -8						; size = 4
_pddsd$ = -4						; size = 4
_driverNum$ = 8						; size = 4
_devNum$ = 12						; size = 4
_modeNum$ = 16						; size = 4
?GetModeName@DeviceManager@@QAEPBDHHH@Z PROC		; DeviceManager::GetModeName
; _this$ = ecx

; 97   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 98   : 	static char	buffer[80];
; 99   : 	int			i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 100  : 
; 101  : 	if(driverNum < 0 || driverNum >= (int) m_arrDDDrivers.size())

	cmp	DWORD PTR _driverNum$[ebp], 0
	jl	SHORT $LN8@GetModeNam
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::size
	cmp	DWORD PTR _driverNum$[ebp], eax
	jl	SHORT $LN9@GetModeNam
$LN8@GetModeNam:

; 102  : 		return NULL;

	xor	eax, eax
	jmp	$LN10@GetModeNam
$LN9@GetModeNam:

; 103  : 
; 104  : 	DDDriverInfo &DI = m_arrDDDrivers[driverNum];

	mov	eax, DWORD PTR _driverNum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEAAVDDDriverInfo@DeviceManager@@I@Z ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::operator[]
	mov	DWORD PTR _DI$[ebp], eax

; 105  : 	LPDDSURFACEDESC2 pddsd = NULL;

	mov	DWORD PTR _pddsd$[ebp], 0
$LN7@GetModeNam:

; 106  : 
; 107  : 	// Find the nth (legal) display mode
; 108  : 	while(pddsd = DI.GetDisplayMode(i))

	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _DI$[ebp]
	call	?GetDisplayMode@DDDriverInfo@DeviceManager@@QAEPAU_DDSURFACEDESC2@@H@Z ; DeviceManager::DDDriverInfo::GetDisplayMode
	mov	DWORD PTR _pddsd$[ebp], eax
	cmp	DWORD PTR _pddsd$[ebp], 0
	je	$LN6@GetModeNam

; 109  : 	{
; 110  : 		// For now we only allow 640x480, 800x600, 1280x960, 1600x1200
; 111  : 		// (MPR already does the 4:3 aspect ratio check for us)
; 112  : 		if(pddsd->ddpfPixelFormat.dwRGBBitCount >= 16 && (pddsd->dwWidth == 640 || pddsd->dwWidth == 800 || pddsd->dwWidth == 1024 ||
; 113  : 			(pddsd->dwWidth == 1280 && pddsd->dwHeight == 960) || pddsd->dwWidth == 1600 || HighResolutionHackFlag))

	mov	edx, DWORD PTR _pddsd$[ebp]
	cmp	DWORD PTR [edx+84], 16			; 00000010H
	jb	$LN5@GetModeNam
	mov	eax, DWORD PTR _pddsd$[ebp]
	cmp	DWORD PTR [eax+12], 640			; 00000280H
	je	SHORT $LN4@GetModeNam
	mov	ecx, DWORD PTR _pddsd$[ebp]
	cmp	DWORD PTR [ecx+12], 800			; 00000320H
	je	SHORT $LN4@GetModeNam
	mov	edx, DWORD PTR _pddsd$[ebp]
	cmp	DWORD PTR [edx+12], 1024		; 00000400H
	je	SHORT $LN4@GetModeNam
	mov	eax, DWORD PTR _pddsd$[ebp]
	cmp	DWORD PTR [eax+12], 1280		; 00000500H
	jne	SHORT $LN3@GetModeNam
	mov	ecx, DWORD PTR _pddsd$[ebp]
	cmp	DWORD PTR [ecx+8], 960			; 000003c0H
	je	SHORT $LN4@GetModeNam
$LN3@GetModeNam:
	mov	edx, DWORD PTR _pddsd$[ebp]
	cmp	DWORD PTR [edx+12], 1600		; 00000640H
	je	SHORT $LN4@GetModeNam
	cmp	DWORD PTR ?HighResolutionHackFlag@@3HA, 0 ; HighResolutionHackFlag
	je	SHORT $LN5@GetModeNam
$LN4@GetModeNam:

; 114  : 		{
; 115  : 			if(modeNum == 0)

	cmp	DWORD PTR _modeNum$[ebp], 0
	jne	SHORT $LN2@GetModeNam

; 116  : 			{
; 117  : 				// This is the one we want.  Return it.
; 118  : 				// OW
; 119  : 				// sprintf( buffer, "%0dx%0d", pddsd->dwWidth, pddsd->dwHeight);
; 120  : 				sprintf( buffer, "%0dx%0d - %d Bit", pddsd->dwWidth, pddsd->dwHeight, pddsd->ddpfPixelFormat.dwRGBBitCount);

	mov	eax, DWORD PTR _pddsd$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	mov	edx, DWORD PTR _pddsd$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _pddsd$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	push	OFFSET ??_C@_0BB@GBPIJPJG@?$CF0dx?$CF0d?5?9?5?$CFd?5Bit?$AA@
	push	OFFSET ?buffer@?1??GetModeName@DeviceManager@@QAEPBDHHH@Z@4PADA
	call	_sprintf
	add	esp, 20					; 00000014H

; 121  : 				return buffer;

	mov	eax, OFFSET ?buffer@?1??GetModeName@DeviceManager@@QAEPBDHHH@Z@4PADA
	jmp	SHORT $LN10@GetModeNam

; 122  : 			}
; 123  : 
; 124  : 			else

	jmp	SHORT $LN5@GetModeNam
$LN2@GetModeNam:

; 125  : 			{
; 126  : 				// One down, more to go...
; 127  : 				modeNum--;

	mov	eax, DWORD PTR _modeNum$[ebp]
	sub	eax, 1
	mov	DWORD PTR _modeNum$[ebp], eax
$LN5@GetModeNam:

; 128  : 			}
; 129  : 		}
; 130  : 
; 131  : 		i++;

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx

; 132  : 	}

	jmp	$LN7@GetModeNam
$LN6@GetModeNam:

; 133  : 
; 134  : 	return NULL;

	xor	eax, eax
$LN10@GetModeNam:

; 135  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetModeName@DeviceManager@@QAEPBDHHH@Z ENDP		; DeviceManager::GetModeName
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_driverNum$ = 8						; size = 4
_devNum$ = 12						; size = 4
?GetDeviceName@DeviceManager@@QAEPBDHH@Z PROC		; DeviceManager::GetDeviceName
; _this$ = ecx

; 82   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 83   : 	if(driverNum < 0 || driverNum >= (int) m_arrDDDrivers.size())

	cmp	DWORD PTR _driverNum$[ebp], 0
	jl	SHORT $LN1@GetDeviceN
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::size
	cmp	DWORD PTR _driverNum$[ebp], eax
	jl	SHORT $LN2@GetDeviceN
$LN1@GetDeviceN:

; 84   : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@GetDeviceN
$LN2@GetDeviceN:

; 85   : 
; 86   : 	return m_arrDDDrivers[driverNum].GetDeviceName(devNum);

	mov	eax, DWORD PTR _devNum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _driverNum$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEAAVDDDriverInfo@DeviceManager@@I@Z ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::operator[]
	mov	ecx, eax
	call	?GetDeviceName@DDDriverInfo@DeviceManager@@QAEPBDH@Z ; DeviceManager::DDDriverInfo::GetDeviceName
$LN3@GetDeviceN:

; 87   : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetDeviceName@DeviceManager@@QAEPBDHH@Z ENDP		; DeviceManager::GetDeviceName
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_driverNum$ = 8						; size = 4
?GetDriverName@DeviceManager@@QAEPBDH@Z PROC		; DeviceManager::GetDriverName
; _this$ = ecx

; 73   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 74   : 	if(driverNum < 0 || driverNum >= (int) m_arrDDDrivers.size())

	cmp	DWORD PTR _driverNum$[ebp], 0
	jl	SHORT $LN1@GetDriverN
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::size
	cmp	DWORD PTR _driverNum$[ebp], eax
	jl	SHORT $LN2@GetDriverN
$LN1@GetDriverN:

; 75   : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@GetDriverN
$LN2@GetDriverN:

; 76   : 
; 77   : 	return m_arrDDDrivers[driverNum].GetName();

	mov	eax, DWORD PTR _driverNum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEAAVDDDriverInfo@DeviceManager@@I@Z ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::operator[]
	mov	ecx, eax
	call	?GetName@DDDriverInfo@DeviceManager@@QAEPBDXZ ; DeviceManager::DDDriverInfo::GetName
$LN3@GetDriverN:

; 78   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetDriverName@DeviceManager@@QAEPBDH@Z ENDP		; DeviceManager::GetDriverName
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_driverNum$ = 8						; size = 4
?GetDriver@DeviceManager@@QAEPAVDDDriverInfo@1@H@Z PROC	; DeviceManager::GetDriver
; _this$ = ecx

; 332  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 333  : 	if(driverNum < 0 || driverNum >= (int) m_arrDDDrivers.size())

	cmp	DWORD PTR _driverNum$[ebp], 0
	jl	SHORT $LN1@GetDriver
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::size
	cmp	DWORD PTR _driverNum$[ebp], eax
	jl	SHORT $LN2@GetDriver
$LN1@GetDriver:

; 334  : 		return false;

	xor	eax, eax
	jmp	SHORT $LN3@GetDriver
$LN2@GetDriver:

; 335  : 
; 336  : 	return &m_arrDDDrivers[driverNum];

	mov	eax, DWORD PTR _driverNum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEAAVDDDriverInfo@DeviceManager@@I@Z ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::operator[]
$LN3@GetDriver:

; 337  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetDriver@DeviceManager@@QAEPAVDDDriverInfo@1@H@Z ENDP	; DeviceManager::GetDriver
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Cleanup@DeviceManager@@QAEXXZ PROC			; DeviceManager::Cleanup
; _this$ = ecx

; 65   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 66   : 	if(ready) D3DXUninitialize();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Cleanup
	call	_D3DXUninitialize@0
$LN1@Cleanup:

; 67   : 
; 68   : 	ready = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 69   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Cleanup@DeviceManager@@QAEXXZ ENDP			; DeviceManager::Cleanup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
_e$2 = -36						; size = 16
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_languageNum$ = 8					; size = 4
?Setup@DeviceManager@@QAEXH@Z PROC			; DeviceManager::Setup
; _this$ = ecx

; 48   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Setup@DeviceManager@@QAEXH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 49   : 	try
; 50   : 	{

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 51   : 		CheckHR(D3DXInitialize());

	call	_D3DXInitialize@0
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 52   : 		EnumDDDrivers(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EnumDDDrivers@DeviceManager@@QAEXPAV1@@Z ; DeviceManager::EnumDDDrivers

; 53   : 
; 54   : 		ready = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 1

; 55   : 	}

	jmp	SHORT $LN4@Setup
__catch$?Setup@DeviceManager@@QAEXH@Z$0:

; 56   : 
; 57   : 	catch(_com_error e)
; 58   : 	{
; 59   : 		MonoPrint("DeviceManager::Setup - Error 0x%X\n", e.Error());

	lea	ecx, DWORD PTR _e$2[ebp]
	call	?Error@_com_error@@QBEJXZ		; _com_error::Error
	push	eax
	push	OFFSET ??_C@_0CD@OFNGKAAI@DeviceManager?3?3Setup?5?9?5Error?50x?$CF@
	call	_MonoPrint
	add	esp, 8

; 60   : 	}

	lea	ecx, DWORD PTR _e$2[ebp]
	call	??1_com_error@@UAE@XZ			; _com_error::~_com_error
	mov	eax, $LN8@Setup
	ret	0
$LN4@Setup:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN2@Setup
$LN8@Setup:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN2@Setup:

; 61   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?Setup@DeviceManager@@QAEXH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Setup@DeviceManager@@QAEXH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Setup@DeviceManager@@QAEXH@Z ENDP			; DeviceManager::Setup
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IBEXPAVDDDriverInfo@DeviceManager@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IBEXPAVDDDriverInfo@DeviceManager@@0@Z PROC ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1693 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1694 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Orphan_range@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IBEXPAVDDDriverInfo@DeviceManager@@0@Z ENDP ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IBEXXZ PROC ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1666 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1667 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 1668 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IBEXXZ ENDP ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z PROC ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Reserve, COMDAT
; _this$ = ecx

; 1525 : 		{	// ensure room for _Count new elements, grow exponentially

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1526 : 		if (_Unused_capacity() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Unused_capacity@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Unused_capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN4@Reserve

; 1527 : 			{	// need more room, try to get it
; 1528 : 			if (max_size() - size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Reserve

; 1529 : 				_Xlen();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IBEXXZ ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Xlen
$LN1@Reserve:

; 1530 : 			_Reallocate(_Grow_to(size() + _Count));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::size
	add	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow_to@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IBEII@Z ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Grow_to
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reallocate@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Reallocate
$LN4@Reserve:

; 1531 : 			}
; 1532 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?_Reserve@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z ENDP ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -32						; size = 4
__Ptr$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?_Reallocate@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z PROC ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Reallocate, COMDAT
; _this$ = ecx

; 1500 : 		{	// move to array of exactly _Count elements

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Reallocate@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1501 : 		pointer _Ptr = this->_Getal().allocate(_Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEPAVDDDriverInfo@DeviceManager@@I@Z ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> >::allocate
	mov	DWORD PTR __Ptr$[ebp], eax

; 1502 : 
; 1503 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1504 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);

	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAVDDDriverInfo@DeviceManager@@@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEPAVDDDriverInfo@DeviceManager@@PAV23@00@Z ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Umove<DeviceManager::DDDriverInfo *>
	jmp	SHORT $LN5@Reallocate
__catch$?_Reallocate@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z$0:

; 1505 : 		_CATCH_ALL
; 1506 : 		this->_Getal().deallocate(_Ptr, _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@I@Z ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> >::deallocate

; 1507 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1508 : 		_CATCH_END

	mov	eax, $LN8@Reallocate
	ret	0
$LN5@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Reallocate@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z$1
$LN8@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Reallocate@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z$1:

; 1509 : 
; 1510 : 		size_type _Size = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::size
	mov	DWORD PTR __Size$[ebp], eax

; 1511 : 		if (this->_Myfirst != pointer())

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@Reallocate

; 1512 : 			{	// destroy and deallocate old array
; 1513 : 			_Destroy(this->_Myfirst, this->_Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEXPAVDDDriverInfo@DeviceManager@@0@Z ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Destroy

; 1514 : 			this->_Getal().deallocate(this->_Myfirst,
; 1515 : 				this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx]
	cdq
	mov	ecx, 1536				; 00000600H
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@I@Z ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> >::deallocate
$LN1@Reallocate:

; 1516 : 			}
; 1517 : 
; 1518 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1519 : 		this->_Myend = _Ptr + _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 1536				; 00000600H
	add	edx, DWORD PTR __Ptr$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 1520 : 		this->_Mylast = _Ptr + _Size;

	mov	ecx, DWORD PTR __Size$[ebp]
	imul	ecx, 1536				; 00000600H
	add	ecx, DWORD PTR __Ptr$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1521 : 		this->_Myfirst = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [eax], ecx
$LN4@Reallocate:

; 1522 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z ENDP ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Reallocate
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IBE_NPBVDDDriverInfo@DeviceManager@@@Z
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IBE_NPBVDDDriverInfo@DeviceManager@@@Z PROC ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Inside, COMDAT
; _this$ = ecx

; 1495 : 		{	// test if _Ptr points inside vector

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1496 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN3@Inside
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN4@Inside
$LN3@Inside:
	mov	DWORD PTR tv76[ebp], 0
$LN4@Inside:
	mov	al, BYTE PTR tv76[ebp]

; 1497 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IBE_NPBVDDDriverInfo@DeviceManager@@@Z ENDP ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -12						; size = 4
_this$ = -8						; size = 4
__Capacity$ = -4					; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IBEII@Z PROC ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Grow_to, COMDAT
; _this$ = ecx

; 1484 : 		{	// grow by 50% or at least to _Count

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1485 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN4@Grow_to
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN5@Grow_to
$LN4@Grow_to:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN5@Grow_to:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1489 : 		if (_Capacity < _Count)

	mov	ecx, DWORD PTR __Capacity$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Grow_to

; 1490 : 			_Capacity = _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx
$LN1@Grow_to:

; 1491 : 		return (_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]

; 1492 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Grow_to@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IBEII@Z ENDP ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEXPAVDDDriverInfo@DeviceManager@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEXPAVDDDriverInfo@DeviceManager@@0@Z PROC ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1478 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1479 : 		_Alty _Alval(this->_Getal());

	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> > >::_Getal

; 1480 : 		_Destroy_range(_First, _Last, _Alval);

	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@@std@@YAXPAVDDDriverInfo@DeviceManager@@0AAU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> > >
	add	esp, 12					; 0000000cH

; 1481 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEXPAVDDDriverInfo@DeviceManager@@0@Z ENDP ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?clear@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEXXZ PROC ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::clear, COMDAT
; _this$ = ecx

; 1413 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1414 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1415 : 		_Destroy(this->_Myfirst, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEXPAVDDDriverInfo@DeviceManager@@0@Z ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Destroy

; 1416 : 		this->_Mylast = this->_Myfirst;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+4], eax

; 1417 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEXXZ ENDP ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??A?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEAAVDDDriverInfo@DeviceManager@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEAAVDDDriverInfo@DeviceManager@@I@Z PROC ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::operator[], COMDAT
; _this$ = ecx

; 1136 : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1137 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1138 : 		if (size() <= _Pos)
; 1139 : 			{	// report error
; 1140 : 			_DEBUG_ERROR("vector subscript out of range");
; 1141 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1142 : 			}
; 1143 : 
; 1144 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1145 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1146 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1147 : 
; 1148 : 		return (*(this->_Myfirst + _Pos));

	mov	eax, DWORD PTR __Pos$[ebp]
	imul	eax, 1536				; 00000600H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]

; 1149 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEAAVDDDriverInfo@DeviceManager@@I@Z ENDP ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?max_size@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ PROC ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::max_size, COMDAT
; _this$ = ecx

; 1091 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1092 : 		return (this->_Getal().max_size());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> >::max_size

; 1093 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ENDP ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?size@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ PROC ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::size, COMDAT
; _this$ = ecx

; 1086 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1087 : 		return (this->_Mylast - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	sub	eax, DWORD PTR [ecx]
	cdq
	mov	ecx, 1536				; 00000600H
	idiv	ecx

; 1088 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ENDP ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unused_capacity@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ PROC ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 971  : 		{	// micro-optimization for capacity() - size()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 972  : 		return (this->_Myend - this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 1536				; 00000600H
	idiv	ecx

; 973  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Unused_capacity@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ENDP ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?capacity@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ PROC ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::capacity, COMDAT
; _this$ = ecx

; 966  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 967  : 		return (this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx]
	cdq
	mov	ecx, 1536				; 00000600H
	idiv	ecx

; 968  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ENDP ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?push_back@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEX$$QAVDDDriverInfo@DeviceManager@@@Z
_TEXT	SEGMENT
__Idx$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Val$ = 8						; size = 4
?push_back@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEX$$QAVDDDriverInfo@DeviceManager@@@Z PROC ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::push_back, COMDAT
; _this$ = ecx

; 836  : 		{	// insert by moving into element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 837  : 		if (_Inside(_STD addressof(_Val)))

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@VDDDriverInfo@DeviceManager@@@std@@YAPAVDDDriverInfo@DeviceManager@@AAV12@@Z ; std::addressof<DeviceManager::DDDriverInfo>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IBE_NPBVDDDriverInfo@DeviceManager@@@Z ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@push_back

; 838  : 			{	// push back an element
; 839  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$addressof@VDDDriverInfo@DeviceManager@@@std@@YAPAVDDDriverInfo@DeviceManager@@AAV12@@Z ; std::addressof<DeviceManager::DDDriverInfo>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx]
	cdq
	mov	ecx, 1536				; 00000600H
	idiv	ecx
	mov	DWORD PTR __Idx$1[ebp], eax

; 840  : 			if (this->_Mylast == this->_Myend)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN3@push_back

; 841  : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Reserve
$LN3@push_back:

; 842  : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IBEXPAVDDDriverInfo@DeviceManager@@0@Z ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Orphan_range

; 843  : 			this->_Getal().construct(this->_Mylast,
; 844  : 				_STD forward<value_type>(this->_Myfirst[_Idx]));

	mov	eax, DWORD PTR __Idx$1[ebp]
	imul	eax, 1536				; 00000600H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	call	??$forward@VDDDriverInfo@DeviceManager@@@std@@YA$$QAVDDDriverInfo@DeviceManager@@AAV12@@Z ; std::forward<DeviceManager::DDDriverInfo>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> > >::_Getal
	mov	ecx, eax
	call	??$construct@VDDDriverInfo@DeviceManager@@V12@@?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@$$QAV23@@Z ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> >::construct<DeviceManager::DDDriverInfo,DeviceManager::DDDriverInfo>

; 845  : 			++this->_Mylast;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1536				; 00000600H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 846  : 			}
; 847  : 		else

	jmp	SHORT $LN5@push_back
$LN4@push_back:

; 848  : 			{	// push back a non-element
; 849  : 			if (this->_Mylast == this->_Myend)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN1@push_back

; 850  : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Reserve
$LN1@push_back:

; 851  : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@IBEXPAVDDDriverInfo@DeviceManager@@0@Z ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::_Orphan_range

; 852  : 			this->_Getal().construct(this->_Mylast,
; 853  : 				_STD forward<value_type>(_Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$forward@VDDDriverInfo@DeviceManager@@@std@@YA$$QAVDDDriverInfo@DeviceManager@@AAV12@@Z ; std::forward<DeviceManager::DDDriverInfo>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> > >::_Getal
	mov	ecx, eax
	call	??$construct@VDDDriverInfo@DeviceManager@@V12@@?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@$$QAV23@@Z ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> >::construct<DeviceManager::DDDriverInfo,DeviceManager::DDDriverInfo>

; 854  : 			++this->_Mylast;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1536				; 00000600H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN5@push_back:

; 855  : 			}
; 856  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEX$$QAVDDDriverInfo@DeviceManager@@@Z ENDP ; std::vector<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> > >::_Getal, COMDAT
; _this$ = ecx

; 646  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 647  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> >::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 648  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VDDDriverInfo@DeviceManager@@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo,std::allocator<DeviceManager::DDDriverInfo> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@SAIABV?$allocator@VDDDriverInfo@DeviceManager@@@2@@Z ; std::allocator_traits<std::allocator<DeviceManager::DDDriverInfo> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@I@Z PROC ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@VDDDriverInfo@DeviceManager@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@I@Z ; std::allocator<DeviceManager::DDDriverInfo>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEPAVDDDriverInfo@DeviceManager@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEPAVDDDriverInfo@DeviceManager@@I@Z PROC ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@VDDDriverInfo@DeviceManager@@@std@@QAEPAVDDDriverInfo@DeviceManager@@I@Z ; std::allocator<DeviceManager::DDDriverInfo>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAEPAVDDDriverInfo@DeviceManager@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> >::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@VDDDriverInfo@DeviceManager@@@std@@QAE@XZ ; std::allocator<DeviceManager::DDDriverInfo>::allocator<DeviceManager::DDDriverInfo>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> >::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@SAIABV?$allocator@VDDDriverInfo@DeviceManager@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@SAIABV?$allocator@VDDDriverInfo@DeviceManager@@@2@@Z PROC ; std::allocator_traits<std::allocator<DeviceManager::DDDriverInfo> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@VDDDriverInfo@DeviceManager@@@std@@QBEIXZ ; std::allocator<DeviceManager::DDDriverInfo>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@VDDDriverInfo@DeviceManager@@@std@@@std@@SAIABV?$allocator@VDDDriverInfo@DeviceManager@@@2@@Z ENDP ; std::allocator_traits<std::allocator<DeviceManager::DDDriverInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@VDDDriverInfo@DeviceManager@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@VDDDriverInfo@DeviceManager@@@std@@QBEIXZ PROC ; std::allocator<DeviceManager::DDDriverInfo>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	mov	eax, 2796202				; 002aaaaaH

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@VDDDriverInfo@DeviceManager@@@std@@QBEIXZ ENDP ; std::allocator<DeviceManager::DDDriverInfo>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@VDDDriverInfo@DeviceManager@@@std@@QAEPAVDDDriverInfo@DeviceManager@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@VDDDriverInfo@DeviceManager@@@std@@QAEPAVDDDriverInfo@DeviceManager@@I@Z PROC ; std::allocator<DeviceManager::DDDriverInfo>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@VDDDriverInfo@DeviceManager@@@std@@YAPAVDDDriverInfo@DeviceManager@@IPAV12@@Z ; std::_Allocate<DeviceManager::DDDriverInfo>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@VDDDriverInfo@DeviceManager@@@std@@QAEPAVDDDriverInfo@DeviceManager@@I@Z ENDP ; std::allocator<DeviceManager::DDDriverInfo>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@VDDDriverInfo@DeviceManager@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@VDDDriverInfo@DeviceManager@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@I@Z PROC ; std::allocator<DeviceManager::DDDriverInfo>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@VDDDriverInfo@DeviceManager@@@std@@QAEXPAVDDDriverInfo@DeviceManager@@I@Z ENDP ; std::allocator<DeviceManager::DDDriverInfo>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@VDDDriverInfo@DeviceManager@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@VDDDriverInfo@DeviceManager@@@std@@QAE@XZ PROC ; std::allocator<DeviceManager::DDDriverInfo>::allocator<DeviceManager::DDDriverInfo>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@VDDDriverInfo@DeviceManager@@@std@@QAE@XZ ENDP ; std::allocator<DeviceManager::DDDriverInfo>::allocator<DeviceManager::DDDriverInfo>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GDDDriverInfo@DeviceManager@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDDDriverInfo@DeviceManager@@QAEPAXI@Z PROC		; DeviceManager::DDDriverInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DDDriverInfo@DeviceManager@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDDDriverInfo@DeviceManager@@QAEPAXI@Z ENDP		; DeviceManager::DDDriverInfo::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0DDDriverInfo@DeviceManager@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0DDDriverInfo@DeviceManager@@QAE@ABV01@@Z PROC	; DeviceManager::DDDriverInfo::DDDriverInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DDDriverInfo@DeviceManager@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 40					; 00000028H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	esi, DWORD PTR ___that$[ebp]
	add	esi, 64					; 00000040H
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 64					; 00000040H
	mov	ecx, 95					; 0000005fH
	rep movsd
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 444				; 000001bcH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	??0?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@ABV01@@Z ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 456				; 000001c8H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 456				; 000001c8H
	call	??0?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@ABV01@@Z ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >
	mov	esi, DWORD PTR ___that$[ebp]
	add	esi, 468				; 000001d4H
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 468				; 000001d4H
	mov	ecx, 267				; 0000010bH
	rep movsd
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DDDriverInfo@DeviceManager@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0DDDriverInfo@DeviceManager@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0DDDriverInfo@DeviceManager@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	jmp	??1?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@XZ ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::~vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >
__ehhandler$??0DDDriverInfo@DeviceManager@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DDDriverInfo@DeviceManager@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DDDriverInfo@DeviceManager@@QAE@ABV01@@Z ENDP	; DeviceManager::DDDriverInfo::DDDriverInfo
; Function compile flags: /Odtp
;	COMDAT ??1DDDriverInfo@DeviceManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1DDDriverInfo@DeviceManager@@QAE@XZ PROC		; DeviceManager::DDDriverInfo::~DDDriverInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 456				; 000001c8H
	call	??1?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@XZ ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::~vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	??1?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@XZ ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::~vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	esp, ebp
	pop	ebp
	ret	0
??1DDDriverInfo@DeviceManager@@QAE@XZ ENDP		; DeviceManager::DDDriverInfo::~DDDriverInfo
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?Is3dfx@DDDriverInfo@DeviceManager@@QAE_NXZ PROC	; DeviceManager::DDDriverInfo::Is3dfx
; _this$ = ecx

; 439  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 440  : 	return devID.dwVendorId == 4634;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1500], 4634		; 0000121aH
	jne	SHORT $LN3@Is3dfx
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@Is3dfx
$LN3@Is3dfx:
	mov	DWORD PTR tv67[ebp], 0
$LN4@Is3dfx:
	mov	al, BYTE PTR tv67[ebp]

; 441  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Is3dfx@DDDriverInfo@DeviceManager@@QAE_NXZ ENDP	; DeviceManager::DDDriverInfo::Is3dfx
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$1 = -4						; size = 4
?FindRGBRenderer@DDDriverInfo@DeviceManager@@QAEHXZ PROC ; DeviceManager::DDDriverInfo::FindRGBRenderer
; _this$ = ecx

; 463  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 464  : 	for(int i=0;i< (int) m_arrD3DDevices.size();i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@FindRGBRen
$LN3@FindRGBRen:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@FindRGBRen:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	?size@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::size
	cmp	DWORD PTR _i$1[ebp], eax
	jge	SHORT $LN2@FindRGBRen

; 465  : 		if(IsEqualGUID(m_arrD3DDevices[i].m_devDesc.deviceGUID, IID_IDirect3DRGBDevice)) return i;

	push	OFFSET _IID_IDirect3DRGBDevice
	mov	ecx, DWORD PTR _i$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	??A?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEAAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@I@Z ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::operator[]
	add	eax, 196				; 000000c4H
	push	eax
	call	_IsEqualGUID
	add	esp, 8
	test	eax, eax
	je	SHORT $LN1@FindRGBRen
	mov	eax, DWORD PTR _i$1[ebp]
	jmp	SHORT $LN5@FindRGBRen
$LN1@FindRGBRen:

; 466  : 	return -1;

	jmp	SHORT $LN3@FindRGBRen
$LN2@FindRGBRen:
	or	eax, -1
$LN5@FindRGBRen:

; 467  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FindRGBRenderer@DDDriverInfo@DeviceManager@@QAEHXZ ENDP ; DeviceManager::DDDriverInfo::FindRGBRenderer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SupportsSRT@DDDriverInfo@DeviceManager@@QAE_NXZ PROC	; DeviceManager::DDDriverInfo::SupportsSRT
; _this$ = ecx

; 444  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 445  : 	if(devID.dwVendorId == 4634)	// 3dfx

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1500], 4634		; 0000121aH
	jne	SHORT $LN3@SupportsSR

; 446  : 	{
; 447  : 		if(devID.dwDeviceId == 1 || devID.dwDeviceId == 2)		// Voodoo 1 & 2

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1504], 1
	je	SHORT $LN1@SupportsSR
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+1504], 2
	jne	SHORT $LN3@SupportsSR
$LN1@SupportsSR:

; 448  : 			return false;

	xor	al, al
	jmp	SHORT $LN4@SupportsSR
$LN3@SupportsSR:

; 449  : 	}
; 450  : 
; 451  : 	return true;	// assume SetRenderTarget works for all other cards

	mov	al, 1
$LN4@SupportsSR:

; 452  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SupportsSRT@DDDriverInfo@DeviceManager@@QAE_NXZ ENDP	; DeviceManager::DDDriverInfo::SupportsSRT
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$1 = -4						; size = 4
_nWidth$ = 8						; size = 4
_nHeight$ = 12						; size = 4
_nBPP$ = 16						; size = 4
?FindDisplayMode@DDDriverInfo@DeviceManager@@QAEHHHH@Z PROC ; DeviceManager::DDDriverInfo::FindDisplayMode
; _this$ = ecx

; 414  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 415  : 	for(int i=0;i< (int) m_arrModes.size();i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@FindDispla
$LN3@FindDispla:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@FindDispla:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 456				; 000001c8H
	call	?size@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBEIXZ ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::size
	cmp	DWORD PTR _i$1[ebp], eax
	jge	SHORT $LN2@FindDispla

; 416  : 	{
; 417  : 		if(m_arrModes[i].dwWidth == nWidth && m_arrModes[i].dwHeight == nHeight &&
; 418  : 			m_arrModes[i].ddpfPixelFormat.dwRGBBitCount == nBPP)

	mov	ecx, DWORD PTR _i$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 456				; 000001c8H
	call	??A?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEAAU_DDSURFACEDESC2@@I@Z ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::operator[]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR _nWidth$[ebp]
	jne	SHORT $LN1@FindDispla
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 456				; 000001c8H
	call	??A?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEAAU_DDSURFACEDESC2@@I@Z ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::operator[]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR _nHeight$[ebp]
	jne	SHORT $LN1@FindDispla
	mov	edx, DWORD PTR _i$1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 456				; 000001c8H
	call	??A?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEAAU_DDSURFACEDESC2@@I@Z ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::operator[]
	mov	eax, DWORD PTR [eax+84]
	cmp	eax, DWORD PTR _nBPP$[ebp]
	jne	SHORT $LN1@FindDispla

; 419  : 			return i;

	mov	eax, DWORD PTR _i$1[ebp]
	jmp	SHORT $LN5@FindDispla
$LN1@FindDispla:

; 420  : 	}

	jmp	SHORT $LN3@FindDispla
$LN2@FindDispla:

; 421  : 
; 422  : 	return -1;		// not found

	or	eax, -1
$LN5@FindDispla:

; 423  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?FindDisplayMode@DDDriverInfo@DeviceManager@@QAEHHHH@Z ENDP ; DeviceManager::DDDriverInfo::FindDisplayMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\devmgr.h
;	COMDAT ?GetGuid@DDDriverInfo@DeviceManager@@QAEPAU_GUID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGuid@DDDriverInfo@DeviceManager@@QAEPAU_GUID@@XZ PROC ; DeviceManager::DDDriverInfo::GetGuid, COMDAT
; _this$ = ecx

; 69   : 		LPGUID GetGuid() { return &m_guid; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGuid@DDDriverInfo@DeviceManager@@QAEPAU_GUID@@XZ ENDP ; DeviceManager::DDDriverInfo::GetGuid
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
?GetDevice@DDDriverInfo@DeviceManager@@QAEPAVD3DDeviceInfo@12@H@Z PROC ; DeviceManager::DDDriverInfo::GetDevice
; _this$ = ecx

; 455  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 456  : 	if(n < 0 || n >= (int) m_arrD3DDevices.size())

	cmp	DWORD PTR _n$[ebp], 0
	jl	SHORT $LN1@GetDevice
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	?size@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::size
	cmp	DWORD PTR _n$[ebp], eax
	jl	SHORT $LN2@GetDevice
$LN1@GetDevice:

; 457  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@GetDevice
$LN2@GetDevice:

; 458  : 
; 459  : 	return &m_arrD3DDevices[n];

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	??A?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEAAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@I@Z ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::operator[]
$LN3@GetDevice:

; 460  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetDevice@DDDriverInfo@DeviceManager@@QAEPAVD3DDeviceInfo@12@H@Z ENDP ; DeviceManager::DDDriverInfo::GetDevice
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -1						; size = 1
?CanRenderWindowed@DDDriverInfo@DeviceManager@@QAE_NXZ PROC ; DeviceManager::DDDriverInfo::CanRenderWindowed
; _this$ = ecx

; 434  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 435  : 	return m_caps.dwCaps2 & DDCAPS2_CANRENDERWINDOWED ? true : false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 524288				; 00080000H
	je	SHORT $LN3@CanRenderW
	mov	BYTE PTR tv68[ebp], 1
	jmp	SHORT $LN4@CanRenderW
$LN3@CanRenderW:
	mov	BYTE PTR tv68[ebp], 0
$LN4@CanRenderW:
	mov	al, BYTE PTR tv68[ebp]

; 436  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CanRenderWindowed@DDDriverInfo@DeviceManager@@QAE_NXZ ENDP ; DeviceManager::DDDriverInfo::CanRenderWindowed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
?GetDisplayMode@DDDriverInfo@DeviceManager@@QAEPAU_DDSURFACEDESC2@@H@Z PROC ; DeviceManager::DDDriverInfo::GetDisplayMode
; _this$ = ecx

; 426  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 427  : 	if(n < 0 || n >=  (int) m_arrModes.size())

	cmp	DWORD PTR _n$[ebp], 0
	jl	SHORT $LN1@GetDisplay
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 456				; 000001c8H
	call	?size@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBEIXZ ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::size
	cmp	DWORD PTR _n$[ebp], eax
	jl	SHORT $LN2@GetDisplay
$LN1@GetDisplay:

; 428  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@GetDisplay
$LN2@GetDisplay:

; 429  : 
; 430  : 	return &m_arrModes[n];

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 456				; 000001c8H
	call	??A?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEAAU_DDSURFACEDESC2@@I@Z ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::operator[]
$LN3@GetDisplay:

; 431  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetDisplayMode@DDDriverInfo@DeviceManager@@QAEPAU_DDSURFACEDESC2@@H@Z ENDP ; DeviceManager::DDDriverInfo::GetDisplayMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
?GetDeviceName@DDDriverInfo@DeviceManager@@QAEPBDH@Z PROC ; DeviceManager::DDDriverInfo::GetDeviceName
; _this$ = ecx

; 406  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 407  : 	if(n < 0 || n >= (int) m_arrD3DDevices.size())

	cmp	DWORD PTR _n$[ebp], 0
	jl	SHORT $LN1@GetDeviceN
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	?size@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::size
	cmp	DWORD PTR _n$[ebp], eax
	jl	SHORT $LN2@GetDeviceN
$LN1@GetDeviceN:

; 408  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@GetDeviceN
$LN2@GetDeviceN:

; 409  : 
; 410  : 	return m_arrD3DDevices[n].GetName();

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	??A?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEAAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@I@Z ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::operator[]
	mov	ecx, eax
	call	?GetName@D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAEPBDXZ ; DeviceManager::DDDriverInfo::D3DDeviceInfo::GetName
$LN3@GetDeviceN:

; 411  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetDeviceName@DDDriverInfo@DeviceManager@@QAEPBDH@Z ENDP ; DeviceManager::DDDriverInfo::GetDeviceName
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\devmgr.h
;	COMDAT ?GetName@DDDriverInfo@DeviceManager@@QAEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetName@DDDriverInfo@DeviceManager@@QAEPBDXZ PROC	; DeviceManager::DDDriverInfo::GetName, COMDAT
; _this$ = ecx

; 64   : 		const char *GetName() { return m_strDescription.c_str(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	mov	esp, ebp
	pop	ebp
	ret	0
?GetName@DDDriverInfo@DeviceManager@@QAEPBDXZ ENDP	; DeviceManager::DDDriverInfo::GetName
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
_pThis$ = -4						; size = 4
_lpDDSurfaceDesc$ = 8					; size = 4
_lpContext$ = 12					; size = 4
?EnumModesCallback@DDDriverInfo@DeviceManager@@SGJPAU_DDSURFACEDESC2@@PAX@Z PROC ; DeviceManager::DDDriverInfo::EnumModesCallback

; 398  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 399  : 	DeviceManager::DDDriverInfo *pThis = (DeviceManager::DDDriverInfo *) lpContext;

	mov	eax, DWORD PTR _lpContext$[ebp]
	mov	DWORD PTR _pThis$[ebp], eax

; 400  : 	pThis->m_arrModes.push_back(*lpDDSurfaceDesc);	

	mov	ecx, DWORD PTR _lpDDSurfaceDesc$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pThis$[ebp]
	add	ecx, 456				; 000001c8H
	call	?push_back@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXABU_DDSURFACEDESC2@@@Z ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::push_back

; 401  : 
; 402  : 	return DDENUMRET_OK;

	mov	eax, 1

; 403  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?EnumModesCallback@DDDriverInfo@DeviceManager@@SGJPAU_DDSURFACEDESC2@@PAX@Z ENDP ; DeviceManager::DDDriverInfo::EnumModesCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
tv81 = -312						; size = 4
_pThis$ = -308						; size = 4
tv80 = -304						; size = 4
$T2 = -300						; size = 284
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_lpDeviceDescription$ = 8				; size = 4
_lpDeviceName$ = 12					; size = 4
_lpD3DHWDeviceDesc$ = 16				; size = 4
_lpContext$ = 20					; size = 4
?EnumD3DDriversCallback@DDDriverInfo@DeviceManager@@SGJPAD0PAU_D3DDeviceDesc7@@PAX@Z PROC ; DeviceManager::DDDriverInfo::EnumD3DDriversCallback

; 384  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?EnumD3DDriversCallback@DDDriverInfo@DeviceManager@@SGJPAD0PAU_D3DDeviceDesc7@@PAX@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 300				; 0000012cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 385  : 	DeviceManager::DDDriverInfo *pThis = (DeviceManager::DDDriverInfo *) lpContext;

	mov	eax, DWORD PTR _lpContext$[ebp]
	mov	DWORD PTR _pThis$[ebp], eax

; 386  : 	if(lpD3DHWDeviceDesc){

	cmp	DWORD PTR _lpD3DHWDeviceDesc$[ebp], 0
	je	SHORT $LN2@EnumD3DDri

; 387  : 		// COBRA - DX - Consider only Drivers making HW T&L
; 388  : 		// sfr: this causes notebooks to stop working
; 389  : 		//if (lpD3DHWDeviceDesc->dwDevCaps & D3DDEVCAPS_HWTRANSFORMANDLIGHT ){
; 390  : 		if (lpD3DHWDeviceDesc->dwDevCaps & DisplayOptionsClass::GetDevCaps()){

	call	?GetDevCaps@DisplayOptionsClass@@SAIXZ	; DisplayOptionsClass::GetDevCaps
	mov	ecx, DWORD PTR _lpD3DHWDeviceDesc$[ebp]
	and	eax, DWORD PTR [ecx]
	je	SHORT $LN2@EnumD3DDri

; 391  : 			pThis->m_arrD3DDevices.push_back(D3DDeviceInfo(*lpD3DHWDeviceDesc, lpDeviceName, lpDeviceDescription));

	mov	edx, DWORD PTR _lpDeviceDescription$[ebp]
	push	edx
	mov	eax, DWORD PTR _lpDeviceName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lpD3DHWDeviceDesc$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@AAU_D3DDeviceDesc7@@PAD1@Z ; DeviceManager::DDDriverInfo::D3DDeviceInfo::D3DDeviceInfo
	mov	DWORD PTR tv81[ebp], eax
	mov	edx, DWORD PTR tv81[ebp]
	mov	DWORD PTR tv80[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR tv80[ebp]
	push	eax
	mov	ecx, DWORD PTR _pThis$[ebp]
	add	ecx, 444				; 000001bcH
	call	?push_back@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEX$$QAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@Z ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::push_back
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@XZ
$LN2@EnumD3DDri:

; 392  : 		}
; 393  : 	}
; 394  : 	return D3DENUMRET_OK;

	mov	eax, 1

; 395  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?EnumD3DDriversCallback@DDDriverInfo@DeviceManager@@SGJPAD0PAU_D3DDeviceDesc7@@PAX@Z$0:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@XZ
__ehhandler$?EnumD3DDriversCallback@DDDriverInfo@DeviceManager@@SGJPAD0PAU_D3DDeviceDesc7@@PAX@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-304]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?EnumD3DDriversCallback@DDDriverInfo@DeviceManager@@SGJPAD0PAU_D3DDeviceDesc7@@PAX@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?EnumD3DDriversCallback@DDDriverInfo@DeviceManager@@SGJPAD0PAU_D3DDeviceDesc7@@PAX@Z ENDP ; DeviceManager::DDDriverInfo::EnumD3DDriversCallback
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
_e$2 = -80						; size = 16
tv172 = -64						; size = 4
tv65 = -60						; size = 4
tv68 = -56						; size = 4
tv71 = -52						; size = 4
tv156 = -48						; size = 4
tv140 = -44						; size = 4
tv132 = -40						; size = 4
tv89 = -36						; size = 4
_pD3D$3 = -32						; size = 4
_pDD$4 = -28						; size = 4
_pDD7$5 = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
?EnumD3DDrivers@DDDriverInfo@DeviceManager@@QAEXXZ PROC	; DeviceManager::DDDriverInfo::EnumD3DDrivers
; _this$ = ecx

; 352  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?EnumD3DDrivers@DDDriverInfo@DeviceManager@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 353  : 	try
; 354  : 	{

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 355  : 		IDirectDrawPtr pDD;

	lea	ecx, DWORD PTR _pDD$4[ebp]
	call	??0?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::_com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >
	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 356  : 		IDirectDraw7Ptr pDD7;

	lea	ecx, DWORD PTR _pDD7$5[ebp]
	call	??0?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >
	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 357  : 		IDirect3D7Ptr pD3D;

	lea	ecx, DWORD PTR _pD3D$3[ebp]
	call	??0?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::_com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >
	mov	BYTE PTR __$EHRec$[ebp+12], 3

; 358  : 
; 359  : 		// Create DDRAW object
; 360  : 		CheckHR(DirectDrawCreateEx(&m_guid, (void **) &pDD, IID_IDirectDraw7, NULL));

	push	0
	push	OFFSET _IID_IDirectDraw7
	lea	ecx, DWORD PTR _pDD$4[ebp]
	call	??I?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QAEPAPAUIDirectDraw@@XZ ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::operator&
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_DirectDrawCreateEx@16
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 361  : 
; 362  : 		pD3D = pDD;

	lea	ecx, DWORD PTR _pDD$4[ebp]
	push	ecx
	lea	ecx, DWORD PTR _pD3D$3[ebp]
	call	??$?4V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@QAEAAV0@ABV?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@@Z ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::operator=<_com_IIID<IDirectDraw,&IID_IDirectDraw> >

; 363  : 		pDD7 = pDD;

	lea	edx, DWORD PTR _pDD$4[ebp]
	push	edx
	lea	ecx, DWORD PTR _pDD7$5[ebp]
	call	??$?4V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEAAV0@ABV?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@@Z ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator=<_com_IIID<IDirectDraw,&IID_IDirectDraw> >

; 364  : 		pDD7->GetDeviceIdentifier(&devID, NULL);

	lea	ecx, DWORD PTR _pDD7$5[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDraw7@@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator->
	mov	DWORD PTR tv71[ebp], eax
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR tv89[ebp], eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 468				; 000001d4H
	push	ecx
	mov	edx, DWORD PTR tv89[ebp]
	push	edx
	mov	eax, DWORD PTR tv89[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+108]
	call	edx

; 365  : 
; 366  : 		m_arrD3DDevices.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	?clear@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEXXZ ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::clear

; 367  : 		pD3D->EnumDevices(EnumD3DDriversCallback, this);

	lea	ecx, DWORD PTR _pD3D$3[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@QBEPAUIDirect3D7@@XZ ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::operator->
	mov	DWORD PTR tv68[ebp], eax
	mov	eax, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv132[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	push	OFFSET ?EnumD3DDriversCallback@DDDriverInfo@DeviceManager@@SGJPAD0PAU_D3DDeviceDesc7@@PAX@Z ; DeviceManager::DDDriverInfo::EnumD3DDriversCallback
	mov	edx, DWORD PTR tv132[ebp]
	push	edx
	mov	eax, DWORD PTR tv132[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx

; 368  : 
; 369  : 		pDD7->EnumDisplayModes(NULL, NULL, this, EnumModesCallback);

	lea	ecx, DWORD PTR _pDD7$5[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDraw7@@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator->
	mov	DWORD PTR tv65[ebp], eax
	mov	eax, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv140[ebp], eax
	push	OFFSET ?EnumModesCallback@DDDriverInfo@DeviceManager@@SGJPAU_DDSURFACEDESC2@@PAX@Z ; DeviceManager::DDDriverInfo::EnumModesCallback
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	push	0
	push	0
	mov	edx, DWORD PTR tv140[ebp]
	push	edx
	mov	eax, DWORD PTR tv140[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+32]
	call	edx

; 370  : 
; 371  : 		ZeroMemory(&m_caps, sizeof(m_caps));

	push	380					; 0000017cH
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 372  : 		m_caps.dwSize = sizeof(m_caps);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+64], 380			; 0000017cH

; 373  : 		pDD7->GetCaps(&m_caps, NULL);

	lea	ecx, DWORD PTR _pDD7$5[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDraw7@@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator->
	mov	DWORD PTR tv172[ebp], eax
	mov	edx, DWORD PTR tv172[ebp]
	mov	DWORD PTR tv156[ebp], edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	mov	ecx, DWORD PTR tv156[ebp]
	push	ecx
	mov	edx, DWORD PTR tv156[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+44]
	call	ecx

; 374  : 	}

	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _pD3D$3[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::~_com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _pDD7$5[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _pDD$4[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::~_com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >
	jmp	SHORT $LN4@EnumD3DDri
__catch$?EnumD3DDrivers@DDDriverInfo@DeviceManager@@QAEXXZ$0:

; 375  : 
; 376  : 	catch(_com_error e)
; 377  : 	{
; 378  : 		MonoPrint("DeviceManager::DDDriverInfo::EnumD3DDrivers - Error 0x%X\n", e.Error());

	lea	ecx, DWORD PTR _e$2[ebp]
	call	?Error@_com_error@@QBEJXZ		; _com_error::Error
	push	eax
	push	OFFSET ??_C@_0DK@DAMPCELI@DeviceManager?3?3DDDriverInfo?3?3Enu@
	call	_MonoPrint
	add	esp, 8

; 379  : 	}

	lea	ecx, DWORD PTR _e$2[ebp]
	call	??1_com_error@@UAE@XZ			; _com_error::~_com_error
	mov	eax, $LN11@EnumD3DDri
	ret	0
$LN4@EnumD3DDri:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN2@EnumD3DDri
$LN11@EnumD3DDri:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN2@EnumD3DDri:

; 380  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?EnumD3DDrivers@DDDriverInfo@DeviceManager@@QAEXXZ$2:
	lea	ecx, DWORD PTR _pDD$4[ebp]
	jmp	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDraw@@$1?IID_IDirectDraw@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >::~_com_ptr_t<_com_IIID<IDirectDraw,&IID_IDirectDraw> >
__unwindfunclet$?EnumD3DDrivers@DDDriverInfo@DeviceManager@@QAEXXZ$3:
	lea	ecx, DWORD PTR _pDD7$5[ebp]
	jmp	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >
__unwindfunclet$?EnumD3DDrivers@DDDriverInfo@DeviceManager@@QAEXXZ$4:
	lea	ecx, DWORD PTR _pD3D$3[ebp]
	jmp	??1?$_com_ptr_t@V?$_com_IIID@UIDirect3D7@@$1?IID_IDirect3D7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >::~_com_ptr_t<_com_IIID<IDirect3D7,&IID_IDirect3D7> >
__ehhandler$?EnumD3DDrivers@DDDriverInfo@DeviceManager@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?EnumD3DDrivers@DDDriverInfo@DeviceManager@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?EnumD3DDrivers@DDDriverInfo@DeviceManager@@QAEXXZ ENDP	; DeviceManager::DDDriverInfo::EnumD3DDrivers
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IBEXPAU_DDSURFACEDESC2@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IBEXPAU_DDSURFACEDESC2@@0@Z PROC ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1693 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1694 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Orphan_range@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IBEXPAU_DDSURFACEDESC2@@0@Z ENDP ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IBEXXZ PROC ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Xlen, COMDAT
; _this$ = ecx

; 1666 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1667 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 1668 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IBEXXZ ENDP ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Tidy@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXXZ PROC ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Tidy, COMDAT
; _this$ = ecx

; 1535 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1536 : 		if (this->_Myfirst != pointer())

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Tidy

; 1537 : 			{	// something to free, destroy and deallocate it
; 1538 : 			this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1539 : 			_Destroy(this->_Myfirst, this->_Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXPAU_DDSURFACEDESC2@@0@Z ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Destroy

; 1540 : 			this->_Getal().deallocate(this->_Myfirst,
; 1541 : 				this->_Myend - this->_Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax]
	mov	eax, ecx
	cdq
	mov	ecx, 124				; 0000007cH
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXPAU_DDSURFACEDESC2@@I@Z ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::deallocate

; 1542 : 			this->_Myfirst = pointer();

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0

; 1543 : 			this->_Mylast = pointer();

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1544 : 			this->_Myend = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
$LN2@Tidy:

; 1545 : 			}
; 1546 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXXZ ENDP ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXI@Z PROC ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Reserve, COMDAT
; _this$ = ecx

; 1525 : 		{	// ensure room for _Count new elements, grow exponentially

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1526 : 		if (_Unused_capacity() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Unused_capacity@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBEIXZ ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Unused_capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN4@Reserve

; 1527 : 			{	// need more room, try to get it
; 1528 : 			if (max_size() - size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBEIXZ ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBEIXZ ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Reserve

; 1529 : 				_Xlen();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IBEXXZ ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Xlen
$LN1@Reserve:

; 1530 : 			_Reallocate(_Grow_to(size() + _Count));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBEIXZ ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::size
	add	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow_to@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IBEII@Z ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Grow_to
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reallocate@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXI@Z ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Reallocate
$LN4@Reserve:

; 1531 : 			}
; 1532 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?_Reserve@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXI@Z ENDP ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -32						; size = 4
__Ptr$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?_Reallocate@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXI@Z PROC ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Reallocate, COMDAT
; _this$ = ecx

; 1500 : 		{	// move to array of exactly _Count elements

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Reallocate@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1501 : 		pointer _Ptr = this->_Getal().allocate(_Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEPAU_DDSURFACEDESC2@@I@Z ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::allocate
	mov	DWORD PTR __Ptr$[ebp], eax

; 1502 : 
; 1503 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1504 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);

	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAU_DDSURFACEDESC2@@@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEPAU_DDSURFACEDESC2@@PAU2@00@Z ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Umove<_DDSURFACEDESC2 *>
	jmp	SHORT $LN5@Reallocate
__catch$?_Reallocate@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXI@Z$0:

; 1505 : 		_CATCH_ALL
; 1506 : 		this->_Getal().deallocate(_Ptr, _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXPAU_DDSURFACEDESC2@@I@Z ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::deallocate

; 1507 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1508 : 		_CATCH_END

	mov	eax, $LN8@Reallocate
	ret	0
$LN5@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Reallocate@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXI@Z$1
$LN8@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Reallocate@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXI@Z$1:

; 1509 : 
; 1510 : 		size_type _Size = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBEIXZ ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::size
	mov	DWORD PTR __Size$[ebp], eax

; 1511 : 		if (this->_Myfirst != pointer())

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@Reallocate

; 1512 : 			{	// destroy and deallocate old array
; 1513 : 			_Destroy(this->_Myfirst, this->_Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXPAU_DDSURFACEDESC2@@0@Z ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Destroy

; 1514 : 			this->_Getal().deallocate(this->_Myfirst,
; 1515 : 				this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx]
	cdq
	mov	ecx, 124				; 0000007cH
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXPAU_DDSURFACEDESC2@@I@Z ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::deallocate
$LN1@Reallocate:

; 1516 : 			}
; 1517 : 
; 1518 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1519 : 		this->_Myend = _Ptr + _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 124				; 0000007cH
	add	edx, DWORD PTR __Ptr$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 1520 : 		this->_Mylast = _Ptr + _Size;

	mov	ecx, DWORD PTR __Size$[ebp]
	imul	ecx, 124				; 0000007cH
	add	ecx, DWORD PTR __Ptr$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1521 : 		this->_Myfirst = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [eax], ecx
$LN4@Reallocate:

; 1522 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXI@Z ENDP ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Reallocate
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IBE_NPBU_DDSURFACEDESC2@@@Z
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IBE_NPBU_DDSURFACEDESC2@@@Z PROC ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Inside, COMDAT
; _this$ = ecx

; 1495 : 		{	// test if _Ptr points inside vector

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1496 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN3@Inside
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN4@Inside
$LN3@Inside:
	mov	DWORD PTR tv76[ebp], 0
$LN4@Inside:
	mov	al, BYTE PTR tv76[ebp]

; 1497 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IBE_NPBU_DDSURFACEDESC2@@@Z ENDP ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -12						; size = 4
_this$ = -8						; size = 4
__Capacity$ = -4					; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IBEII@Z PROC ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Grow_to, COMDAT
; _this$ = ecx

; 1484 : 		{	// grow by 50% or at least to _Count

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1485 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBEIXZ ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBEIXZ ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN4@Grow_to
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN5@Grow_to
$LN4@Grow_to:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN5@Grow_to:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1489 : 		if (_Capacity < _Count)

	mov	ecx, DWORD PTR __Capacity$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Grow_to

; 1490 : 			_Capacity = _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx
$LN1@Grow_to:

; 1491 : 		return (_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]

; 1492 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Grow_to@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IBEII@Z ENDP ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXPAU_DDSURFACEDESC2@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXPAU_DDSURFACEDESC2@@0@Z PROC ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Destroy, COMDAT
; _this$ = ecx

; 1478 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1479 : 		_Alty _Alval(this->_Getal());

	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> > >::_Getal

; 1480 : 		_Destroy_range(_First, _Last, _Alval);

	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@YAXPAU_DDSURFACEDESC2@@0AAU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> > >
	add	esp, 12					; 0000000cH

; 1481 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXPAU_DDSURFACEDESC2@@0@Z ENDP ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Buy@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Capacity$ = 8						; size = 4
?_Buy@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAE_NI@Z PROC ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Buy, COMDAT
; _this$ = ecx

; 1459 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1460 : 		this->_Myfirst = pointer();

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1461 : 		this->_Mylast = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 1462 : 		this->_Myend = pointer();

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 1463 : 
; 1464 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy

; 1465 : 			return (false);

	xor	al, al
	jmp	SHORT $LN6@Buy
	jmp	SHORT $LN3@Buy
$LN4@Buy:

; 1466 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBEIXZ ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy

; 1467 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IBEXXZ ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Xlen

; 1468 : 		else

	jmp	SHORT $LN3@Buy
$LN2@Buy:

; 1469 : 			{	// nonempty array, allocate storage
; 1470 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEPAU_DDSURFACEDESC2@@I@Z ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::allocate
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 1471 : 			this->_Mylast = this->_Myfirst;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 1472 : 			this->_Myend = this->_Myfirst + _Capacity;

	mov	eax, DWORD PTR __Capacity$[ebp]
	imul	eax, 124				; 0000007cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN3@Buy:

; 1473 : 			}
; 1474 : 		return (true);

	mov	al, 1
$LN6@Buy:

; 1475 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Buy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?push_back@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXABU_DDSURFACEDESC2@@@Z
_TEXT	SEGMENT
__Idx$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Val$ = 8						; size = 4
?push_back@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXABU_DDSURFACEDESC2@@@Z PROC ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::push_back, COMDAT
; _this$ = ecx

; 1184 : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1185 : 		if (_Inside(_STD addressof(_Val)))

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@$$CBU_DDSURFACEDESC2@@@std@@YAPBU_DDSURFACEDESC2@@ABU1@@Z ; std::addressof<_DDSURFACEDESC2 const >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IBE_NPBU_DDSURFACEDESC2@@@Z ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@push_back

; 1186 : 			{	// push back an element
; 1187 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$addressof@$$CBU_DDSURFACEDESC2@@@std@@YAPBU_DDSURFACEDESC2@@ABU1@@Z ; std::addressof<_DDSURFACEDESC2 const >
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx]
	cdq
	mov	ecx, 124				; 0000007cH
	idiv	ecx
	mov	DWORD PTR __Idx$1[ebp], eax

; 1188 : 			if (this->_Mylast == this->_Myend)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN3@push_back

; 1189 : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXI@Z ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Reserve
$LN3@push_back:

; 1190 : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IBEXPAU_DDSURFACEDESC2@@0@Z ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Orphan_range

; 1191 : 			this->_Getal().construct(this->_Mylast,
; 1192 : 				this->_Myfirst[_Idx]);

	mov	eax, DWORD PTR __Idx$1[ebp]
	imul	eax, 124				; 0000007cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> > >::_Getal
	mov	ecx, eax
	call	??$construct@U_DDSURFACEDESC2@@AAU1@@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXPAU_DDSURFACEDESC2@@AAU2@@Z ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::construct<_DDSURFACEDESC2,_DDSURFACEDESC2 &>

; 1193 : 			++this->_Mylast;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 124				; 0000007cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1194 : 			}
; 1195 : 		else

	jmp	SHORT $LN5@push_back
$LN4@push_back:

; 1196 : 			{	// push back a non-element
; 1197 : 			if (this->_Mylast == this->_Myend)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN1@push_back

; 1198 : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXI@Z ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Reserve
$LN1@push_back:

; 1199 : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IBEXPAU_DDSURFACEDESC2@@0@Z ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Orphan_range

; 1200 : 			this->_Getal().construct(this->_Mylast,
; 1201 : 				_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> > >::_Getal
	mov	ecx, eax
	call	??$construct@U_DDSURFACEDESC2@@ABU1@@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXPAU_DDSURFACEDESC2@@ABU2@@Z ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::construct<_DDSURFACEDESC2,_DDSURFACEDESC2 const &>

; 1202 : 			++this->_Mylast;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 124				; 0000007cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN5@push_back:

; 1203 : 			}
; 1204 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXABU_DDSURFACEDESC2@@@Z ENDP ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??A?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEAAU_DDSURFACEDESC2@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEAAU_DDSURFACEDESC2@@I@Z PROC ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::operator[], COMDAT
; _this$ = ecx

; 1136 : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1137 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1138 : 		if (size() <= _Pos)
; 1139 : 			{	// report error
; 1140 : 			_DEBUG_ERROR("vector subscript out of range");
; 1141 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1142 : 			}
; 1143 : 
; 1144 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1145 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1146 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1147 : 
; 1148 : 		return (*(this->_Myfirst + _Pos));

	mov	eax, DWORD PTR __Pos$[ebp]
	imul	eax, 124				; 0000007cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]

; 1149 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEAAU_DDSURFACEDESC2@@I@Z ENDP ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?max_size@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBEIXZ PROC ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::max_size, COMDAT
; _this$ = ecx

; 1091 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1092 : 		return (this->_Getal().max_size());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::max_size

; 1093 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBEIXZ ENDP ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?size@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBEIXZ PROC ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::size, COMDAT
; _this$ = ecx

; 1086 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1087 : 		return (this->_Mylast - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	sub	eax, DWORD PTR [ecx]
	cdq
	mov	ecx, 124				; 0000007cH
	idiv	ecx

; 1088 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBEIXZ ENDP ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?end@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@2@XZ PROC ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::end, COMDAT
; _this$ = ecx

; 996  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 997  : 		return (const_iterator(this->_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@QAE@PAU_DDSURFACEDESC2@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@2@XZ ENDP ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::end
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?begin@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@2@XZ PROC ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::begin, COMDAT
; _this$ = ecx

; 986  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 987  : 		return (const_iterator(this->_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@QAE@PAU_DDSURFACEDESC2@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 988  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@2@XZ ENDP ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::begin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unused_capacity@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBEIXZ PROC ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 971  : 		{	// micro-optimization for capacity() - size()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 972  : 		return (this->_Myend - this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 124				; 0000007cH
	idiv	ecx

; 973  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Unused_capacity@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBEIXZ ENDP ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?capacity@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBEIXZ PROC ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::capacity, COMDAT
; _this$ = ecx

; 966  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 967  : 		return (this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx]
	cdq
	mov	ecx, 124				; 0000007cH
	idiv	ecx

; 968  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBEIXZ ENDP ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??1?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@XZ PROC ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::~vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >, COMDAT
; _this$ = ecx

; 899  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 900  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXXZ ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Tidy

; 901  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@XZ ENDP ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::~vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T2 = -36						; size = 4
$T3 = -32						; size = 4
tv148 = -28						; size = 4
_this$ = -24						; size = 4
$T4 = -18						; size = 1
$T5 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >, COMDAT
; _this$ = ecx

; 720  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> > >::_Getal
	mov	ecx, eax
	call	?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::select_on_container_copy_construction
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@QAE@ABV?$allocator@U_DDSURFACEDESC2@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> > >::_Vector_alloc<0,std::_Vec_base_types<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> > >

; 721  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBEIXZ ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAE_NI@Z ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Buy
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@vector

; 722  : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 723  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 724  : 				this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@2@XZ ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::end
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@2@XZ ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::begin
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@std@@@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEPAU_DDSURFACEDESC2@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@@1@0PAU2@@Z ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> > > >
	mov	DWORD PTR tv148[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv148[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	SHORT $LN5@vector
__catch$??0?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@ABV01@@Z$0:

; 725  : 			_CATCH_ALL
; 726  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@IAEXXZ ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::_Tidy

; 727  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 728  : 			_CATCH_END

	mov	eax, $LN8@vector
	ret	0
$LN5@vector:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN3@vector
$LN8@vector:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN3@vector:

; 729  : 		}

	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
??0?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@XZ PROC ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >, COMDAT
; _this$ = ecx

; 685  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@U_DDSURFACEDESC2@@@std@@QAE@XZ ; std::allocator<_DDSURFACEDESC2>::allocator<_DDSURFACEDESC2>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@QAE@ABV?$allocator@U_DDSURFACEDESC2@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> > >::_Vector_alloc<0,std::_Vec_base_types<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> > >

; 686  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@XZ ENDP ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> > >::_Getal, COMDAT
; _this$ = ecx

; 646  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 647  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 648  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@QAE@ABV?$allocator@U_DDSURFACEDESC2@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@QAE@ABV?$allocator@U_DDSURFACEDESC2@@@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> > >::_Vector_alloc<0,std::_Vec_base_types<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> > >, COMDAT
; _this$ = ecx

; 593  : 	_Vector_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> >::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> >

; 594  : 		{	// construct allocator from _Al
; 595  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@@std@@QAE@ABV?$allocator@U_DDSURFACEDESC2@@@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> > >::_Vector_alloc<0,std::_Vec_base_types<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> >::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> >, COMDAT
; _this$ = ecx

; 484  : 	_Vector_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 485  : 		{	// initialize values
; 486  : 		_Myfirst = pointer();

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 487  : 		_Mylast = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 488  : 		_Myend = pointer();

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 489  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_val@U?$_Simple_types@U_DDSURFACEDESC2@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> >::_Vector_val<std::_Simple_types<_DDSURFACEDESC2> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@SAIABV?$allocator@U_DDSURFACEDESC2@@@2@@Z ; std::allocator_traits<std::allocator<_DDSURFACEDESC2> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXPAU_DDSURFACEDESC2@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXPAU_DDSURFACEDESC2@@I@Z PROC ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@I@Z ; std::allocator<_DDSURFACEDESC2>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEXPAU_DDSURFACEDESC2@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEPAU_DDSURFACEDESC2@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEPAU_DDSURFACEDESC2@@I@Z PROC ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@U_DDSURFACEDESC2@@@std@@QAEPAU_DDSURFACEDESC2@@I@Z ; std::allocator<_DDSURFACEDESC2>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAEPAU_DDSURFACEDESC2@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@ABV?$allocator@U_DDSURFACEDESC2@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@ABV?$allocator@U_DDSURFACEDESC2@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >, COMDAT
; _this$ = ecx

; 835  : 		{	// construct by copying base

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@U_DDSURFACEDESC2@@@std@@QAE@ABV01@@Z ; std::allocator<_DDSURFACEDESC2>::allocator<_DDSURFACEDESC2>

; 836  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@ABV?$allocator@U_DDSURFACEDESC2@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@U_DDSURFACEDESC2@@@std@@QAE@XZ ; std::allocator<_DDSURFACEDESC2>::allocator<_DDSURFACEDESC2>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBE?AU12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBE?AU12@XZ PROC ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::select_on_container_copy_construction, COMDAT
; _this$ = ecx

; 806  : 		{	// get allocator to use

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 807  : 		return (_Mytraits::select_on_container_copy_construction(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	?select_on_container_copy_construction@?$allocator_traits@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@SA?AV?$allocator@U_DDSURFACEDESC2@@@2@ABV32@@Z ; std::allocator_traits<std::allocator<_DDSURFACEDESC2> >::select_on_container_copy_construction
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@ABV?$allocator@U_DDSURFACEDESC2@@@1@@Z ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 808  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QBE?AU12@XZ ENDP ; std::_Wrap_alloc<std::allocator<_DDSURFACEDESC2> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@SA?AV?$allocator@U_DDSURFACEDESC2@@@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@SA?AV?$allocator@U_DDSURFACEDESC2@@@2@ABV32@@Z PROC ; std::allocator_traits<std::allocator<_DDSURFACEDESC2> >::select_on_container_copy_construction, COMDAT

; 767  : 		{	// get allocator to use

	push	ebp
	mov	ebp, esp

; 768  : 		return (_Al.select_on_container_copy_construction());

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?select_on_container_copy_construction@?$allocator@U_DDSURFACEDESC2@@@std@@QBE?AV12@XZ ; std::allocator<_DDSURFACEDESC2>::select_on_container_copy_construction
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 769  : 		}

	pop	ebp
	ret	0
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@SA?AV?$allocator@U_DDSURFACEDESC2@@@2@ABV32@@Z ENDP ; std::allocator_traits<std::allocator<_DDSURFACEDESC2> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@SAIABV?$allocator@U_DDSURFACEDESC2@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@SAIABV?$allocator@U_DDSURFACEDESC2@@@2@@Z PROC ; std::allocator_traits<std::allocator<_DDSURFACEDESC2> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@U_DDSURFACEDESC2@@@std@@QBEIXZ ; std::allocator<_DDSURFACEDESC2>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@SAIABV?$allocator@U_DDSURFACEDESC2@@@2@@Z ENDP ; std::allocator_traits<std::allocator<_DDSURFACEDESC2> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@U_DDSURFACEDESC2@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@U_DDSURFACEDESC2@@@std@@QBEIXZ PROC ; std::allocator<_DDSURFACEDESC2>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	mov	eax, 34636833				; 02108421H

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@U_DDSURFACEDESC2@@@std@@QBEIXZ ENDP ; std::allocator<_DDSURFACEDESC2>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?construct@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@ABU3@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
tv69 = -8						; size = 4
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@ABU3@@Z PROC ; std::allocator<_DDSURFACEDESC2>::construct, COMDAT
; _this$ = ecx

; 605  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 606  : 		::new ((void *)_Ptr) _Ty(_Val);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	124					; 0000007cH
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, 31					; 0000001fH
	mov	esi, DWORD PTR __Val$[ebp]
	mov	edi, DWORD PTR $T1[ebp]
	rep movsd
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN1@construct
$LN3@construct:
	mov	DWORD PTR tv69[ebp], 0
$LN1@construct:

; 607  : 		}

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@ABU3@@Z ENDP ; std::allocator<_DDSURFACEDESC2>::construct
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U_DDSURFACEDESC2@@@std@@QAEPAU_DDSURFACEDESC2@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_DDSURFACEDESC2@@@std@@QAEPAU_DDSURFACEDESC2@@I@Z PROC ; std::allocator<_DDSURFACEDESC2>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@U_DDSURFACEDESC2@@@std@@YAPAU_DDSURFACEDESC2@@IPAU1@@Z ; std::_Allocate<_DDSURFACEDESC2>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_DDSURFACEDESC2@@@std@@QAEPAU_DDSURFACEDESC2@@I@Z ENDP ; std::allocator<_DDSURFACEDESC2>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@I@Z PROC ; std::allocator<_DDSURFACEDESC2>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U_DDSURFACEDESC2@@@std@@QAEXPAU_DDSURFACEDESC2@@I@Z ENDP ; std::allocator<_DDSURFACEDESC2>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U_DDSURFACEDESC2@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@U_DDSURFACEDESC2@@@std@@QAE@ABV01@@Z PROC ; std::allocator<_DDSURFACEDESC2>::allocator<_DDSURFACEDESC2>, COMDAT
; _this$ = ecx

; 569  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 570  : 		{	// construct by copying (do nothing)
; 571  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@U_DDSURFACEDESC2@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<_DDSURFACEDESC2>::allocator<_DDSURFACEDESC2>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U_DDSURFACEDESC2@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@U_DDSURFACEDESC2@@@std@@QAE@XZ PROC	; std::allocator<_DDSURFACEDESC2>::allocator<_DDSURFACEDESC2>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@U_DDSURFACEDESC2@@@std@@QAE@XZ ENDP	; std::allocator<_DDSURFACEDESC2>::allocator<_DDSURFACEDESC2>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$allocator@U_DDSURFACEDESC2@@@std@@QBE?AV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?select_on_container_copy_construction@?$allocator@U_DDSURFACEDESC2@@@std@@QBE?AV12@XZ PROC ; std::allocator<_DDSURFACEDESC2>::select_on_container_copy_construction, COMDAT
; _this$ = ecx

; 544  : 		{	// return this allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 545  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$allocator@U_DDSURFACEDESC2@@@std@@QAE@ABV01@@Z ; std::allocator<_DDSURFACEDESC2>::allocator<_DDSURFACEDESC2>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 546  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?select_on_container_copy_construction@?$allocator@U_DDSURFACEDESC2@@@std@@QBE?AV12@XZ ENDP ; std::allocator<_DDSURFACEDESC2>::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IBEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IBEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@0@Z PROC ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1693 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1694 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Orphan_range@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IBEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@0@Z ENDP ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IBEXXZ PROC ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1666 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1667 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 1668 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IBEXXZ ENDP ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Tidy@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXXZ PROC ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1535 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1536 : 		if (this->_Myfirst != pointer())

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Tidy

; 1537 : 			{	// something to free, destroy and deallocate it
; 1538 : 			this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1539 : 			_Destroy(this->_Myfirst, this->_Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@0@Z ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Destroy

; 1540 : 			this->_Getal().deallocate(this->_Myfirst,
; 1541 : 				this->_Myend - this->_Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax]
	mov	eax, ecx
	cdq
	mov	ecx, 284				; 0000011cH
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@I@Z ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::deallocate

; 1542 : 			this->_Myfirst = pointer();

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0

; 1543 : 			this->_Mylast = pointer();

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1544 : 			this->_Myend = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
$LN2@Tidy:

; 1545 : 			}
; 1546 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXXZ ENDP ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z PROC ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Reserve, COMDAT
; _this$ = ecx

; 1525 : 		{	// ensure room for _Count new elements, grow exponentially

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1526 : 		if (_Unused_capacity() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Unused_capacity@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Unused_capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN4@Reserve

; 1527 : 			{	// need more room, try to get it
; 1528 : 			if (max_size() - size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Reserve

; 1529 : 				_Xlen();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IBEXXZ ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Xlen
$LN1@Reserve:

; 1530 : 			_Reallocate(_Grow_to(size() + _Count));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::size
	add	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow_to@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IBEII@Z ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Grow_to
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reallocate@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Reallocate
$LN4@Reserve:

; 1531 : 			}
; 1532 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?_Reserve@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z ENDP ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -32						; size = 4
__Ptr$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?_Reallocate@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z PROC ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Reallocate, COMDAT
; _this$ = ecx

; 1500 : 		{	// move to array of exactly _Count elements

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Reallocate@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1501 : 		pointer _Ptr = this->_Getal().allocate(_Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@I@Z ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::allocate
	mov	DWORD PTR __Ptr$[ebp], eax

; 1502 : 
; 1503 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1504 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);

	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PAV234@00@Z ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Umove<DeviceManager::DDDriverInfo::D3DDeviceInfo *>
	jmp	SHORT $LN5@Reallocate
__catch$?_Reallocate@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z$0:

; 1505 : 		_CATCH_ALL
; 1506 : 		this->_Getal().deallocate(_Ptr, _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@I@Z ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::deallocate

; 1507 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1508 : 		_CATCH_END

	mov	eax, $LN8@Reallocate
	ret	0
$LN5@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Reallocate@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z$1
$LN8@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Reallocate@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z$1:

; 1509 : 
; 1510 : 		size_type _Size = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::size
	mov	DWORD PTR __Size$[ebp], eax

; 1511 : 		if (this->_Myfirst != pointer())

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@Reallocate

; 1512 : 			{	// destroy and deallocate old array
; 1513 : 			_Destroy(this->_Myfirst, this->_Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@0@Z ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Destroy

; 1514 : 			this->_Getal().deallocate(this->_Myfirst,
; 1515 : 				this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx]
	cdq
	mov	ecx, 284				; 0000011cH
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@I@Z ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::deallocate
$LN1@Reallocate:

; 1516 : 			}
; 1517 : 
; 1518 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1519 : 		this->_Myend = _Ptr + _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 284				; 0000011cH
	add	edx, DWORD PTR __Ptr$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 1520 : 		this->_Mylast = _Ptr + _Size;

	mov	ecx, DWORD PTR __Size$[ebp]
	imul	ecx, 284				; 0000011cH
	add	ecx, DWORD PTR __Ptr$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1521 : 		this->_Myfirst = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [eax], ecx
$LN4@Reallocate:

; 1522 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z ENDP ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Reallocate
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IBE_NPBVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@Z
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IBE_NPBVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@Z PROC ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Inside, COMDAT
; _this$ = ecx

; 1495 : 		{	// test if _Ptr points inside vector

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1496 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN3@Inside
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN4@Inside
$LN3@Inside:
	mov	DWORD PTR tv76[ebp], 0
$LN4@Inside:
	mov	al, BYTE PTR tv76[ebp]

; 1497 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IBE_NPBVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@Z ENDP ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -12						; size = 4
_this$ = -8						; size = 4
__Capacity$ = -4					; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IBEII@Z PROC ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Grow_to, COMDAT
; _this$ = ecx

; 1484 : 		{	// grow by 50% or at least to _Count

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1485 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN4@Grow_to
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN5@Grow_to
$LN4@Grow_to:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN5@Grow_to:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1489 : 		if (_Capacity < _Count)

	mov	ecx, DWORD PTR __Capacity$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Grow_to

; 1490 : 			_Capacity = _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx
$LN1@Grow_to:

; 1491 : 		return (_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]

; 1492 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Grow_to@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IBEII@Z ENDP ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@0@Z PROC ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1478 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1479 : 		_Alty _Alval(this->_Getal());

	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::_Getal

; 1480 : 		_Destroy_range(_First, _Last, _Alval);

	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@YAXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@0AAU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >
	add	esp, 12					; 0000000cH

; 1481 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@0@Z ENDP ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Buy@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Capacity$ = 8						; size = 4
?_Buy@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAE_NI@Z PROC ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Buy, COMDAT
; _this$ = ecx

; 1459 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1460 : 		this->_Myfirst = pointer();

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1461 : 		this->_Mylast = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 1462 : 		this->_Myend = pointer();

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 1463 : 
; 1464 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy

; 1465 : 			return (false);

	xor	al, al
	jmp	SHORT $LN6@Buy
	jmp	SHORT $LN3@Buy
$LN4@Buy:

; 1466 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy

; 1467 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IBEXXZ ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Xlen

; 1468 : 		else

	jmp	SHORT $LN3@Buy
$LN2@Buy:

; 1469 : 			{	// nonempty array, allocate storage
; 1470 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@I@Z ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::allocate
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 1471 : 			this->_Mylast = this->_Myfirst;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 1472 : 			this->_Myend = this->_Myfirst + _Capacity;

	mov	eax, DWORD PTR __Capacity$[ebp]
	imul	eax, 284				; 0000011cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN3@Buy:

; 1473 : 			}
; 1474 : 		return (true);

	mov	al, 1
$LN6@Buy:

; 1475 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Buy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?clear@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEXXZ PROC ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::clear, COMDAT
; _this$ = ecx

; 1413 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1414 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1415 : 		_Destroy(this->_Myfirst, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@0@Z ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Destroy

; 1416 : 		this->_Mylast = this->_Myfirst;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+4], eax

; 1417 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEXXZ ENDP ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??A?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEAAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEAAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@I@Z PROC ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::operator[], COMDAT
; _this$ = ecx

; 1136 : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1137 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1138 : 		if (size() <= _Pos)
; 1139 : 			{	// report error
; 1140 : 			_DEBUG_ERROR("vector subscript out of range");
; 1141 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1142 : 			}
; 1143 : 
; 1144 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1145 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1146 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1147 : 
; 1148 : 		return (*(this->_Myfirst + _Pos));

	mov	eax, DWORD PTR __Pos$[ebp]
	imul	eax, 284				; 0000011cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]

; 1149 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEAAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@I@Z ENDP ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?max_size@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ PROC ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::max_size, COMDAT
; _this$ = ecx

; 1091 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1092 : 		return (this->_Getal().max_size());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::max_size

; 1093 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ENDP ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?size@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ PROC ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::size, COMDAT
; _this$ = ecx

; 1086 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1087 : 		return (this->_Mylast - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	sub	eax, DWORD PTR [ecx]
	cdq
	mov	ecx, 284				; 0000011cH
	idiv	ecx

; 1088 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ENDP ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?end@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@2@XZ PROC ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::end, COMDAT
; _this$ = ecx

; 996  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 997  : 		return (const_iterator(this->_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QAE@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@2@XZ ENDP ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::end
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?begin@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@2@XZ PROC ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::begin, COMDAT
; _this$ = ecx

; 986  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 987  : 		return (const_iterator(this->_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QAE@PAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 988  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@2@XZ ENDP ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::begin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unused_capacity@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ PROC ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 971  : 		{	// micro-optimization for capacity() - size()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 972  : 		return (this->_Myend - this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 284				; 0000011cH
	idiv	ecx

; 973  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Unused_capacity@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ENDP ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?capacity@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ PROC ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::capacity, COMDAT
; _this$ = ecx

; 966  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 967  : 		return (this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx]
	cdq
	mov	ecx, 284				; 0000011cH
	idiv	ecx

; 968  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ENDP ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??1?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@XZ PROC ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::~vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >, COMDAT
; _this$ = ecx

; 899  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 900  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXXZ ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Tidy

; 901  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@XZ ENDP ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::~vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?push_back@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEX$$QAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@Z
_TEXT	SEGMENT
__Idx$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Val$ = 8						; size = 4
?push_back@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEX$$QAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@Z PROC ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::push_back, COMDAT
; _this$ = ecx

; 836  : 		{	// insert by moving into element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 837  : 		if (_Inside(_STD addressof(_Val)))

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@AAV123@@Z ; std::addressof<DeviceManager::DDDriverInfo::D3DDeviceInfo>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IBE_NPBVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@Z ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@push_back

; 838  : 			{	// push back an element
; 839  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$addressof@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@AAV123@@Z ; std::addressof<DeviceManager::DDDriverInfo::D3DDeviceInfo>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx]
	cdq
	mov	ecx, 284				; 0000011cH
	idiv	ecx
	mov	DWORD PTR __Idx$1[ebp], eax

; 840  : 			if (this->_Mylast == this->_Myend)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN3@push_back

; 841  : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Reserve
$LN3@push_back:

; 842  : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IBEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@0@Z ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Orphan_range

; 843  : 			this->_Getal().construct(this->_Mylast,
; 844  : 				_STD forward<value_type>(this->_Myfirst[_Idx]));

	mov	eax, DWORD PTR __Idx$1[ebp]
	imul	eax, 284				; 0000011cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	call	??$forward@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YA$$QAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@AAV123@@Z ; std::forward<DeviceManager::DDDriverInfo::D3DDeviceInfo>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::_Getal
	mov	ecx, eax
	call	??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V123@@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@$$QAV234@@Z ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::construct<DeviceManager::DDDriverInfo::D3DDeviceInfo,DeviceManager::DDDriverInfo::D3DDeviceInfo>

; 845  : 			++this->_Mylast;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 284				; 0000011cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 846  : 			}
; 847  : 		else

	jmp	SHORT $LN5@push_back
$LN4@push_back:

; 848  : 			{	// push back a non-element
; 849  : 			if (this->_Mylast == this->_Myend)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN1@push_back

; 850  : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXI@Z ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Reserve
$LN1@push_back:

; 851  : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IBEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@0@Z ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Orphan_range

; 852  : 			this->_Getal().construct(this->_Mylast,
; 853  : 				_STD forward<value_type>(_Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$forward@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YA$$QAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@AAV123@@Z ; std::forward<DeviceManager::DDDriverInfo::D3DDeviceInfo>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::_Getal
	mov	ecx, eax
	call	??$construct@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V123@@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@$$QAV234@@Z ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::construct<DeviceManager::DDDriverInfo::D3DDeviceInfo,DeviceManager::DDDriverInfo::D3DDeviceInfo>

; 854  : 			++this->_Mylast;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 284				; 0000011cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN5@push_back:

; 855  : 			}
; 856  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEX$$QAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@@Z ENDP ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T2 = -36						; size = 4
$T3 = -32						; size = 4
tv148 = -28						; size = 4
_this$ = -24						; size = 4
$T4 = -18						; size = 1
$T5 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >, COMDAT
; _this$ = ecx

; 720  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::_Getal
	mov	ecx, eax
	call	?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::select_on_container_copy_construction
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QAE@ABV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >

; 721  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAE_NI@Z ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Buy
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@vector

; 722  : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 723  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 724  : 				this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@2@XZ ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::end
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@2@XZ ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::begin
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@1@0PAV234@@Z ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> > > >
	mov	DWORD PTR tv148[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv148[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	SHORT $LN5@vector
__catch$??0?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@ABV01@@Z$0:

; 725  : 			_CATCH_ALL
; 726  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@IAEXXZ ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Tidy

; 727  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 728  : 			_CATCH_END

	mov	eax, $LN8@vector
	ret	0
$LN5@vector:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN3@vector
$LN8@vector:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN3@vector:

; 729  : 		}

	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
??0?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@XZ PROC ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >, COMDAT
; _this$ = ecx

; 685  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAE@XZ ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QAE@ABV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >

; 686  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@XZ ENDP ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::_Getal, COMDAT
; _this$ = ecx

; 646  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 647  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 648  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QAE@ABV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QAE@ABV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >, COMDAT
; _this$ = ecx

; 593  : 	_Vector_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> >

; 594  : 		{	// construct allocator from _Al
; 595  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@@std@@QAE@ABV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >::_Vector_alloc<0,std::_Vec_base_types<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> >, COMDAT
; _this$ = ecx

; 484  : 	_Vector_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 485  : 		{	// initialize values
; 486  : 		_Myfirst = pointer();

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 487  : 		_Mylast = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 488  : 		_Myend = pointer();

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 489  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_val@U?$_Simple_types@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Vector_val<std::_Simple_types<DeviceManager::DDDriverInfo::D3DDeviceInfo> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@SAIABV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@2@@Z ; std::allocator_traits<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@I@Z PROC ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@I@Z ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@I@Z PROC ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@I@Z ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAEPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@ABV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@ABV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >, COMDAT
; _this$ = ecx

; 835  : 		{	// construct by copying base

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAE@ABV01@@Z ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>

; 836  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@ABV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAE@XZ ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBE?AU12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBE?AU12@XZ PROC ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::select_on_container_copy_construction, COMDAT
; _this$ = ecx

; 806  : 		{	// get allocator to use

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 807  : 		return (_Mytraits::select_on_container_copy_construction(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	?select_on_container_copy_construction@?$allocator_traits@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@SA?AV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@2@ABV32@@Z ; std::allocator_traits<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::select_on_container_copy_construction
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@ABV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@1@@Z ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 808  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QBE?AU12@XZ ENDP ; std::_Wrap_alloc<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@SA?AV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@SA?AV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@2@ABV32@@Z PROC ; std::allocator_traits<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::select_on_container_copy_construction, COMDAT

; 767  : 		{	// get allocator to use

	push	ebp
	mov	ebp, esp

; 768  : 		return (_Al.select_on_container_copy_construction());

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?select_on_container_copy_construction@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QBE?AV12@XZ ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::select_on_container_copy_construction
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 769  : 		}

	pop	ebp
	ret	0
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@SA?AV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@2@ABV32@@Z ENDP ; std::allocator_traits<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@SAIABV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@SAIABV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@2@@Z PROC ; std::allocator_traits<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QBEIXZ ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@SAIABV?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@2@@Z ENDP ; std::allocator_traits<std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QBEIXZ PROC ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	mov	eax, 15123124				; 00e6c2b4H

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QBEIXZ ENDP ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?construct@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV345@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv74 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV345@@Z PROC ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::construct, COMDAT
; _this$ = ecx

; 605  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?construct@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV345@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 606  : 		::new ((void *)_Ptr) _Ty(_Val);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	284					; 0000011cH
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@ABV012@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv74[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 607  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV345@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?construct@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV345@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?construct@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV345@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@ABV345@@Z ENDP ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::construct
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@I@Z PROC ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@YAPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@IPAV123@@Z ; std::_Allocate<DeviceManager::DDDriverInfo::D3DDeviceInfo>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@I@Z ENDP ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@I@Z PROC ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAEXPAVD3DDeviceInfo@DDDriverInfo@DeviceManager@@I@Z ENDP ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAE@ABV01@@Z PROC ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>, COMDAT
; _this$ = ecx

; 569  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 570  : 		{	// construct by copying (do nothing)
; 571  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAE@XZ PROC ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAE@XZ ENDP ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QBE?AV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?select_on_container_copy_construction@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QBE?AV12@XZ PROC ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::select_on_container_copy_construction, COMDAT
; _this$ = ecx

; 544  : 		{	// return this allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 545  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QAE@ABV01@@Z ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 546  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?select_on_container_copy_construction@?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@QBE?AV12@XZ ENDP ; std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo>::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GD3DDeviceInfo@DDDriverInfo@DeviceManager@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GD3DDeviceInfo@DDDriverInfo@DeviceManager@@QAEPAXI@Z PROC ; DeviceManager::DDDriverInfo::D3DDeviceInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GD3DDeviceInfo@DDDriverInfo@DeviceManager@@QAEPAXI@Z ENDP ; DeviceManager::DDDriverInfo::D3DDeviceInfo::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@ABV012@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@ABV012@@Z PROC ; DeviceManager::DDDriverInfo::D3DDeviceInfo::D3DDeviceInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@ABV012@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, 59					; 0000003bH
	mov	esi, DWORD PTR ___that$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	rep movsd
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 236				; 000000ecH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 236				; 000000ecH
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 260				; 00000104H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 260				; 00000104H
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@ABV012@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 236				; 000000ecH
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@ABV012@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@ABV012@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@ABV012@@Z ENDP ; DeviceManager::DDDriverInfo::D3DDeviceInfo::D3DDeviceInfo
; Function compile flags: /Odtp
;	COMDAT ??1D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@XZ PROC ; DeviceManager::DDDriverInfo::D3DDeviceInfo::~D3DDeviceInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 260				; 00000104H
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 236				; 000000ecH
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	esp, ebp
	pop	ebp
	ret	0
??1D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@XZ ENDP ; DeviceManager::DDDriverInfo::D3DDeviceInfo::~D3DDeviceInfo
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
tv74 = -12						; size = 4
_this$ = -8						; size = 4
_bCanDoAnisotropic$ = -1				; size = 1
?CanFilterAnisotropic@D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE_NXZ PROC ; DeviceManager::DDDriverInfo::D3DDeviceInfo::CanFilterAnisotropic
; _this$ = ecx

; 496  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 	bool bCanDoAnisotropic = (m_devDesc.dpcTriCaps.dwTextureFilterCaps & D3DPTFILTERCAPS_MAGFANISOTROPIC) &&
; 498  : 		(m_devDesc.dpcTriCaps.dwTextureFilterCaps & D3DPTFILTERCAPS_MINFANISOTROPIC);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	and	ecx, 67108864				; 04000000H
	je	SHORT $LN3@CanFilterA
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	and	eax, 1024				; 00000400H
	je	SHORT $LN3@CanFilterA
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@CanFilterA
$LN3@CanFilterA:
	mov	DWORD PTR tv74[ebp], 0
$LN4@CanFilterA:
	mov	cl, BYTE PTR tv74[ebp]
	mov	BYTE PTR _bCanDoAnisotropic$[ebp], cl

; 499  : 	return bCanDoAnisotropic;

	mov	al, BYTE PTR _bCanDoAnisotropic$[ebp]

; 500  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CanFilterAnisotropic@D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE_NXZ ENDP ; DeviceManager::DDDriverInfo::D3DDeviceInfo::CanFilterAnisotropic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsHardware@D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE_NXZ PROC ; DeviceManager::DDDriverInfo::D3DDeviceInfo::IsHardware
; _this$ = ecx

; 480  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 481  : 	if(IsEqualIID(m_devDesc.deviceGUID, IID_IDirect3DRGBDevice) || IsEqualIID(m_devDesc.deviceGUID, IID_IDirect3DRefDevice) ||
; 482  : 		IsEqualIID(m_devDesc.deviceGUID, IID_IDirect3DRampDevice) || IsEqualIID(m_devDesc.deviceGUID, IID_IDirect3DMMXDevice))

	push	OFFSET _IID_IDirect3DRGBDevice
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 196				; 000000c4H
	push	eax
	call	_IsEqualGUID
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN6@IsHardware
	push	OFFSET _IID_IDirect3DRefDevice
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 196				; 000000c4H
	push	ecx
	call	_IsEqualGUID
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN6@IsHardware
	push	OFFSET _IID_IDirect3DRampDevice
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 196				; 000000c4H
	push	edx
	call	_IsEqualGUID
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN6@IsHardware
	push	OFFSET _IID_IDirect3DMMXDevice
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 196				; 000000c4H
	push	eax
	call	_IsEqualGUID
	add	esp, 8
	test	eax, eax
	je	SHORT $LN7@IsHardware
$LN6@IsHardware:

; 483  : 		return false;

	xor	al, al
	jmp	SHORT $LN8@IsHardware
	jmp	SHORT $LN8@IsHardware
$LN7@IsHardware:

; 484  : 	else if(IsEqualIID(m_devDesc.deviceGUID, IID_IDirect3DHALDevice))

	push	OFFSET _IID_IDirect3DHALDevice
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 196				; 000000c4H
	push	ecx
	call	_IsEqualGUID
	add	esp, 8
	test	eax, eax
	je	SHORT $LN4@IsHardware

; 485  : 		return true;

	mov	al, 1
	jmp	SHORT $LN8@IsHardware
	jmp	SHORT $LN8@IsHardware
$LN4@IsHardware:

; 486  : 	else if(IsEqualIID(m_devDesc.deviceGUID, IID_IDirect3DTnLHalDevice))

	push	OFFSET _IID_IDirect3DTnLHalDevice
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 196				; 000000c4H
	push	edx
	call	_IsEqualGUID
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@IsHardware

; 487  : 		return true;

	mov	al, 1
	jmp	SHORT $LN8@IsHardware

; 488  : 	else

	jmp	SHORT $LN8@IsHardware
$LN2@IsHardware:

; 489  : 	{
; 490  : 		ShiAssert(false);	// check this
; 491  : 		return true;

	mov	al, 1
$LN8@IsHardware:

; 492  : 	}
; 493  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsHardware@D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE_NXZ ENDP ; DeviceManager::DDDriverInfo::D3DDeviceInfo::IsHardware
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\devmgr.h
;	COMDAT ?GetGuid@D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAEPAU_GUID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGuid@D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAEPAU_GUID@@XZ PROC ; DeviceManager::DDDriverInfo::D3DDeviceInfo::GetGuid, COMDAT
; _this$ = ecx

; 48   : 			LPGUID GetGuid() { return &m_devDesc.deviceGUID; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 196				; 000000c4H
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGuid@D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAEPAU_GUID@@XZ ENDP ; DeviceManager::DDDriverInfo::D3DDeviceInfo::GetGuid
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\devmgr.h
;	COMDAT ?GetName@D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetName@D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAEPBDXZ PROC ; DeviceManager::DDDriverInfo::D3DDeviceInfo::GetName, COMDAT
; _this$ = ecx

; 47   : 			const char *GetName() { return m_strName.c_str(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 236				; 000000ecH
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	mov	esp, ebp
	pop	ebp
	ret	0
?GetName@D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAEPBDXZ ENDP ; DeviceManager::DDDriverInfo::D3DDeviceInfo::GetName
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_devDesc$ = 8						; size = 4
_lpDeviceName$ = 12					; size = 4
_lpDeviceDescription$ = 16				; size = 4
??0D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@AAU_D3DDeviceDesc7@@PAD1@Z PROC ; DeviceManager::DDDriverInfo::D3DDeviceInfo::D3DDeviceInfo
; _this$ = ecx

; 473  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@AAU_D3DDeviceDesc7@@PAD1@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 236				; 000000ecH
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 260				; 00000104H
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 474  : 	m_devDesc = devDesc;

	mov	ecx, 59					; 0000003bH
	mov	esi, DWORD PTR _devDesc$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	rep movsd

; 475  : 	m_strName = lpDeviceName;

	mov	eax, DWORD PTR _lpDeviceName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 236				; 000000ecH
	call	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 476  : 	m_strDescription = lpDeviceDescription;

	mov	ecx, DWORD PTR _lpDeviceDescription$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 260				; 00000104H
	call	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 477  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@AAU_D3DDeviceDesc7@@PAD1@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 236				; 000000ecH
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@AAU_D3DDeviceDesc7@@PAD1@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 260				; 00000104H
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@AAU_D3DDeviceDesc7@@PAD1@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@AAU_D3DDeviceDesc7@@PAD1@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0D3DDeviceInfo@DDDriverInfo@DeviceManager@@QAE@AAU_D3DDeviceDesc7@@PAD1@Z ENDP ; DeviceManager::DDDriverInfo::D3DDeviceInfo::D3DDeviceInfo
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_guid$ = 8						; size = 16
_Name$ = 24						; size = 4
_Description$ = 28					; size = 4
??0DDDriverInfo@DeviceManager@@QAE@U_GUID@@PBD1@Z PROC	; DeviceManager::DDDriverInfo::DDDriverInfo
; _this$ = ecx

; 343  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DDDriverInfo@DeviceManager@@QAE@U_GUID@@PBD1@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	??0?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@XZ ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 456				; 000001c8H
	call	??0?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@XZ ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 344  : 	m_guid = guid;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _guid$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _guid$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _guid$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _guid$[ebp+12]
	mov	DWORD PTR [eax+12], edx

; 345  : 	m_strName = Name;

	mov	eax, DWORD PTR _Name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 346  : 	m_strDescription = Description;

	mov	ecx, DWORD PTR _Description$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 347  : 
; 348  : 	EnumD3DDrivers();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EnumD3DDrivers@DDDriverInfo@DeviceManager@@QAEXXZ ; DeviceManager::DDDriverInfo::EnumD3DDrivers

; 349  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0DDDriverInfo@DeviceManager@@QAE@U_GUID@@PBD1@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0DDDriverInfo@DeviceManager@@QAE@U_GUID@@PBD1@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0DDDriverInfo@DeviceManager@@QAE@U_GUID@@PBD1@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	jmp	??1?$vector@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@V?$allocator@VD3DDeviceInfo@DDDriverInfo@DeviceManager@@@std@@@std@@QAE@XZ ; std::vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >::~vector<DeviceManager::DDDriverInfo::D3DDeviceInfo,std::allocator<DeviceManager::DDDriverInfo::D3DDeviceInfo> >
__unwindfunclet$??0DDDriverInfo@DeviceManager@@QAE@U_GUID@@PBD1@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 456				; 000001c8H
	jmp	??1?$vector@U_DDSURFACEDESC2@@V?$allocator@U_DDSURFACEDESC2@@@std@@@std@@QAE@XZ ; std::vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >::~vector<_DDSURFACEDESC2,std::allocator<_DDSURFACEDESC2> >
__ehhandler$??0DDDriverInfo@DeviceManager@@QAE@U_GUID@@PBD1@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DDDriverInfo@DeviceManager@@QAE@U_GUID@@PBD1@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DDDriverInfo@DeviceManager@@QAE@U_GUID@@PBD1@Z ENDP	; DeviceManager::DDDriverInfo::DDDriverInfo
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CheckCaps@DXContext@@IAEXXZ PROC			; DXContext::CheckCaps
; _this$ = ecx

; 845  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 846  : 	#ifdef _DEBUG
; 847  : 	MonoPrint("-- DXContext - Start of Caps report\n");
; 848  : 
; 849  : 	if(m_pD3DHWDeviceDesc->dwDevCaps & D3DDEVCAPS_SEPARATETEXTUREMEMORIES)
; 850  : 		MonoPrint("	Device has separate texture memories per stage!. \n");
; 851  : 
; 852  : 	if(m_pD3DHWDeviceDesc->dwDevCaps & D3DDEVCAPS_TEXTURENONLOCALVIDMEM)
; 853  : 		MonoPrint("	Device supports AGP texturing\n");
; 854  : 
; 855  : 	if(!(m_pD3DHWDeviceDesc->dwDevCaps & D3DDEVCAPS_FLOATTLVERTEX))
; 856  : 		MonoPrint("	Device does not accepts floating point for post-transform vertex data. \n");
; 857  : 
; 858  : 	if(!(m_pD3DHWDeviceDesc->dwDevCaps & D3DDEVCAPS_TLVERTEXSYSTEMMEMORY))
; 859  : 		MonoPrint("	Device does not accept TL VBs in system memory.\n");
; 860  : 
; 861  : 	if(!(m_pD3DHWDeviceDesc->dwDevCaps & D3DDEVCAPS_TLVERTEXVIDEOMEMORY))
; 862  : 		MonoPrint("	Device does not accept TL VBs in video memory.\n");
; 863  : 
; 864  : 	if(!(m_pD3DHWDeviceDesc->dpcTriCaps.dwRasterCaps & D3DPRASTERCAPS_DITHER))
; 865  : 		MonoPrint("	No dithering\n");
; 866  : 
; 867  : 	if(!(m_pD3DHWDeviceDesc->dpcTriCaps.dwRasterCaps & D3DPRASTERCAPS_FOGRANGE))
; 868  : 		MonoPrint("	No range based fog\n");
; 869  : 
; 870  : 	if(!(m_pD3DHWDeviceDesc->dpcTriCaps.dwRasterCaps & D3DPRASTERCAPS_FOGVERTEX))
; 871  : 		MonoPrint("	No vertex fog\n");
; 872  : 
; 873  : 	if(!(m_pD3DHWDeviceDesc->dpcTriCaps.dwRasterCaps & D3DPRASTERCAPS_ZTEST))
; 874  : 		MonoPrint("	No Z Test support\n");
; 875  : 
; 876  : 	if(m_pD3DHWDeviceDesc->dpcTriCaps.dwAlphaCmpCaps == D3DPCMPCAPS_ALWAYS ||
; 877  : 		m_pD3DHWDeviceDesc->dpcTriCaps.dwAlphaCmpCaps == D3DPCMPCAPS_NEVER)
; 878  : 		MonoPrint("	No Alpha Test support\n");
; 879  : 
; 880  : 	if(!(m_pD3DHWDeviceDesc->dpcTriCaps.dwSrcBlendCaps & D3DPBLENDCAPS_SRCALPHA))
; 881  : 		MonoPrint("	SrcBlend SRCALPHA not supported\n");
; 882  : 
; 883  : 	if(!(m_pD3DHWDeviceDesc->dpcTriCaps.dwDestBlendCaps & D3DPBLENDCAPS_INVSRCALPHA))
; 884  : 		MonoPrint("	DestBlend INVSRCALPHA  not supported\n");
; 885  : 
; 886  : 	if(!(m_pcapsDD->dwCaps & DDCAPS_COLORKEY &&
; 887  : 		m_pcapsDD->dwCKeyCaps & DDCKEYCAPS_DESTBLT &&
; 888  : 		m_pD3DHWDeviceDesc->dwDevCaps & D3DDEVCAPS_DRAWPRIMTLVERTEX))
; 889  : 		MonoPrint("	Insufficient color key support\n");
; 890  : 
; 891  : 	if(!(m_pD3DHWDeviceDesc->dpcTriCaps.dwShadeCaps & D3DPSHADECAPS_ALPHAFLATBLEND))
; 892  : 		MonoPrint("	No alpha blending with flat shading\n");
; 893  : 
; 894  : 	if(!(m_pD3DHWDeviceDesc->dpcTriCaps.dwShadeCaps & D3DPSHADECAPS_COLORGOURAUDRGB))
; 895  : 		MonoPrint("	No gouraud shading\n");
; 896  : 
; 897  : 	if(!(m_pD3DHWDeviceDesc->dpcTriCaps.dwShadeCaps & D3DPSHADECAPS_SPECULARFLATRGB))
; 898  : 		MonoPrint("	No specular flat shading\n");
; 899  : 
; 900  : 	if(!(m_pD3DHWDeviceDesc->dpcTriCaps.dwShadeCaps & D3DPSHADECAPS_SPECULARGOURAUDRGB))
; 901  : 		MonoPrint("	No specular gouraud shading\n");
; 902  : 
; 903  : 	if(!(m_pD3DHWDeviceDesc->dpcTriCaps.dwShadeCaps & D3DPSHADECAPS_FOGGOURAUD))
; 904  : 		MonoPrint("	No gouraud fog\n");
; 905  : 
; 906  : 	if(!(m_pD3DHWDeviceDesc->dpcTriCaps.dwTextureCaps & D3DPTEXTURECAPS_ALPHA))
; 907  : 		MonoPrint("	No alpha textures\n");
; 908  : 
; 909  : 	if(!(m_pD3DHWDeviceDesc->dpcTriCaps.dwTextureCaps & D3DPTEXTURECAPS_ALPHAPALETTE))
; 910  : 		MonoPrint("	No palettized alpha textures\n");
; 911  : 
; 912  : 	if(!(m_pD3DHWDeviceDesc->dpcTriCaps.dwTextureCaps & D3DPTEXTURECAPS_COLORKEYBLEND))
; 913  : 		MonoPrint("	No color key blending support\n");
; 914  : 
; 915  : 	if(m_pD3DHWDeviceDesc->dpcTriCaps.dwTextureCaps & D3DPTEXTURECAPS_POW2)
; 916  : 		MonoPrint("	Textures must be power of 2\n");
; 917  : 
; 918  : 	if(m_pD3DHWDeviceDesc->dpcTriCaps.dwTextureCaps & D3DPTEXTURECAPS_SQUAREONLY)
; 919  : 		MonoPrint("	Textures must be square\n");
; 920  : 
; 921  : 	if(!(m_pD3DHWDeviceDesc->dpcTriCaps.dwTextureCaps & D3DPTEXTURECAPS_TRANSPARENCY))
; 922  : 		MonoPrint("	No texture transparency\n");
; 923  : 
; 924  : 	if(!(m_pD3DHWDeviceDesc->dwTextureOpCaps & D3DTEXOPCAPS_BLENDDIFFUSEALPHA))	// required for MPR_TF_ALPHA
; 925  : 		MonoPrint("	No D3DTOP_BLENDDIFFUSEALPHA (MPR_TF_ALPHA wont work ie. smoke trails)\n");
; 926  : 
; 927  : 	MonoPrint("-- DXContext - End of Caps report\n");
; 928  : 	#endif
; 929  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CheckCaps@DXContext@@IAEXXZ ENDP			; DXContext::CheckCaps
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
$T2 = -332						; size = 4
$T3 = -328						; size = 4
$T4 = -324						; size = 4
_arrZBFmts$ = -320					; size = 12
_pDDSZB$ = -308						; size = 4
_it$5 = -304						; size = 4
_this$ = -300						; size = 4
_ddsd_disp$ = -296					; size = 124
_pixfmt$6 = -172					; size = 32
_ddsd$7 = -140						; size = 124
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
?AttachDepthBuffer@DXContext@@IAEXPAUIDirectDrawSurface7@@@Z PROC ; DXContext::AttachDepthBuffer
; _this$ = ecx

; 789  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AttachDepthBuffer@DXContext@@IAEXPAUIDirectDrawSurface7@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 320				; 00000140H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 790  : 	//JAM 25Jul03
; 791  : 	//return;
; 792  : 
; 793  : 	// Check the display mode, and
; 794  : 	DDSURFACEDESC2 ddsd_disp;
; 795  : 	ZeroMemory(&ddsd_disp, sizeof(ddsd_disp));

	push	124					; 0000007cH
	push	0
	lea	eax, DWORD PTR _ddsd_disp$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 796  : 	ddsd_disp.dwSize = sizeof(ddsd_disp);

	mov	DWORD PTR _ddsd_disp$[ebp], 124		; 0000007cH

; 797  : 	CheckHR(m_pDD->GetDisplayMode(&ddsd_disp));

	lea	ecx, DWORD PTR _ddsd_disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+48]
	call	ecx
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 798  : 
; 799  : 	IDirectDrawSurface7Ptr pDDSZB;

	lea	ecx, DWORD PTR _pDDSZB$[ebp]
	call	??0?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 800  : 	PIXELFMT_ARRAY arrZBFmts;

	lea	ecx, DWORD PTR _arrZBFmts$[ebp]
	call	??0?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAE@XZ ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 801  : 
; 802  : 	EnumZBufferFormats(&arrZBFmts);

	lea	edx, DWORD PTR _arrZBFmts$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EnumZBufferFormats@DXContext@@IAEXPAX@Z ; DXContext::EnumZBufferFormats

; 803  : 
; 804  : 	if(!arrZBFmts.empty())

	lea	ecx, DWORD PTR _arrZBFmts$[ebp]
	call	?empty@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QBE_NXZ ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::empty
	movzx	eax, al
	test	eax, eax
	jne	$LN7@AttachDept

; 805  : 	{
; 806  : 		// Match Z Buffer depth to the display depth
; 807  : 		DDPIXELFORMAT pixfmt;
; 808  : 
; 809  : 		PIXELFMT_ARRAY::iterator it;

	lea	ecx, DWORD PTR _it$5[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >

; 810  : 		for(it = arrZBFmts.begin(); it != arrZBFmts.end(); it++)

	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	lea	ecx, DWORD PTR _arrZBFmts$[ebp]
	call	?begin@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@2@XZ ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::begin
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _it$5[ebp], edx
	jmp	SHORT $LN6@AttachDept
$LN5@AttachDept:
	push	0
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	lea	ecx, DWORD PTR _it$5[ebp]
	call	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::operator++
$LN6@AttachDept:
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	lea	ecx, DWORD PTR _arrZBFmts$[ebp]
	call	?end@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@2@XZ ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::end
	push	eax
	lea	ecx, DWORD PTR _it$5[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::operator!=
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@AttachDept

; 811  : 		{
; 812  : 			// RV - RED - OK, Restored old original Code, seems the Stencil search causes a 25% FPS drop, dunno why
; 813  : 			// as we use the setncil on a surface not having it now
; 814  : 			// if(it->dwZBufferBitDepth >= ddsd_disp.ddpfPixelFormat.dwRGBBitCount && it->dwStencilBitDepth>=8)
; 815  : 			if(it->dwZBufferBitDepth == ddsd_disp.ddpfPixelFormat.dwRGBBitCount)

	lea	ecx, DWORD PTR _it$5[ebp]
	call	??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBEPAU_DDPIXELFORMAT@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::operator->
	mov	eax, DWORD PTR [eax+12]
	cmp	eax, DWORD PTR _ddsd_disp$[ebp+84]
	jne	SHORT $LN3@AttachDept

; 816  : 			{
; 817  : 				pixfmt = *it;

	lea	ecx, DWORD PTR _it$5[ebp]
	call	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_DDPIXELFORMAT@@@std@@@std@@@std@@QBEAAU_DDPIXELFORMAT@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_DDPIXELFORMAT> > >::operator*
	mov	ecx, 8
	mov	esi, eax
	lea	edi, DWORD PTR _pixfmt$6[ebp]
	rep movsd

; 818  : 				break;

	jmp	SHORT $LN4@AttachDept
$LN3@AttachDept:

; 819  : 			}
; 820  : 		}

	jmp	SHORT $LN5@AttachDept
$LN4@AttachDept:

; 821  : 
; 822  : 		DDSURFACEDESC2 ddsd;
; 823  : 		ZeroMemory(&ddsd, sizeof(ddsd));

	push	124					; 0000007cH
	push	0
	lea	ecx, DWORD PTR _ddsd$7[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 824  : 		ddsd.dwSize = sizeof(ddsd);

	mov	DWORD PTR _ddsd$7[ebp], 124		; 0000007cH

; 825  : 		ddsd.dwFlags = DDSD_CAPS | DDSD_WIDTH | DDSD_HEIGHT | DDSD_PIXELFORMAT;

	mov	DWORD PTR _ddsd$7[ebp+4], 4103		; 00001007H

; 826  : 		ddsd.ddsCaps.dwCaps = DDSCAPS_ZBUFFER;

	mov	DWORD PTR _ddsd$7[ebp+104], 131072	; 00020000H

; 827  : 		ddsd.dwWidth = m_nWidth;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _ddsd$7[ebp+12], eax

; 828  : 		ddsd.dwHeight = m_nHeight;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _ddsd$7[ebp+8], edx

; 829  : 		ddsd.ddpfPixelFormat = pixfmt; 

	mov	ecx, 8
	lea	esi, DWORD PTR _pixfmt$6[ebp]
	lea	edi, DWORD PTR _ddsd$7[ebp+72]
	rep movsd

; 830  : 
; 831  : 		// Software devices require system-memory depth buffers.
; 832  : 		if(m_eDeviceCategory == D3DDeviceCategory_Software)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+60], 1
	jne	SHORT $LN2@AttachDept

; 833  : 			ddsd.ddsCaps.dwCaps |= DDSCAPS_SYSTEMMEMORY; 

	mov	ecx, DWORD PTR _ddsd$7[ebp+104]
	or	ecx, 2048				; 00000800H
	mov	DWORD PTR _ddsd$7[ebp+104], ecx
$LN2@AttachDept:

; 834  : 
; 835  : 		CheckHR(m_pDD->CreateSurface(&ddsd, &pDDSZB, NULL));

	push	0
	lea	ecx, DWORD PTR _pDDSZB$[ebp]
	call	??I?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEPAPAUIDirectDrawSurface7@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator&
	push	eax
	lea	edx, DWORD PTR _ddsd$7[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 836  : 
; 837  : 		// Attach it to the render target
; 838  : 		CheckHR(p->AddAttachedSurface(pDDSZB));

	lea	ecx, DWORD PTR _pDDSZB$[ebp]
	call	??B?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDrawSurface7@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator IDirectDrawSurface7 *
	push	eax
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4
	jmp	SHORT $LN1@AttachDept
$LN7@AttachDept:

; 839  : 	}
; 840  : 
; 841  : 	else MonoPrint("DXContext::AttachDepthBuffer() - Warning: No Z-Buffer formats !!!\n");

	push	OFFSET ??_C@_0ED@DAKEKFKC@DXContext?3?3AttachDepthBuffer?$CI?$CJ?5?9@
	call	_MonoPrint
	add	esp, 4
$LN1@AttachDept:

; 842  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _arrZBFmts$[ebp]
	call	??1?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAE@XZ ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::~vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pDDSZB$[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AttachDepthBuffer@DXContext@@IAEXPAUIDirectDrawSurface7@@@Z$0:
	lea	ecx, DWORD PTR _pDDSZB$[ebp]
	jmp	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
__unwindfunclet$?AttachDepthBuffer@DXContext@@IAEXPAUIDirectDrawSurface7@@@Z$1:
	lea	ecx, DWORD PTR _arrZBFmts$[ebp]
	jmp	??1?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAE@XZ ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::~vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >
__ehhandler$?AttachDepthBuffer@DXContext@@IAEXPAUIDirectDrawSurface7@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-332]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AttachDepthBuffer@DXContext@@IAEXPAUIDirectDrawSurface7@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AttachDepthBuffer@DXContext@@IAEXPAUIDirectDrawSurface7@@@Z ENDP ; DXContext::AttachDepthBuffer
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
_pThis$1 = -4						; size = 4
_lpDDPixFmt$ = 8					; size = 4
_lpContext$ = 12					; size = 4
?EnumZBufferFormatsCallback@DXContext@@KGJPAU_DDPIXELFORMAT@@PAX@Z PROC ; DXContext::EnumZBufferFormatsCallback

; 778  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 779  : 	if(lpDDPixFmt->dwFlags & DDPF_ZBUFFER)

	mov	eax, DWORD PTR _lpDDPixFmt$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 1024				; 00000400H
	je	SHORT $LN1@EnumZBuffe

; 780  : 	{
; 781  : 		PIXELFMT_ARRAY *pThis = (PIXELFMT_ARRAY *)lpContext;

	mov	edx, DWORD PTR _lpContext$[ebp]
	mov	DWORD PTR _pThis$1[ebp], edx

; 782  : 		pThis->push_back(*lpDDPixFmt);

	mov	eax, DWORD PTR _lpDDPixFmt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pThis$1[ebp]
	call	?push_back@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXABU_DDPIXELFORMAT@@@Z ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::push_back
$LN1@EnumZBuffe:

; 783  : 	}
; 784  : 
; 785  : 	return D3DENUMRET_OK;

	mov	eax, 1

; 786  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?EnumZBufferFormatsCallback@DXContext@@KGJPAU_DDPIXELFORMAT@@PAX@Z ENDP ; DXContext::EnumZBufferFormatsCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_parr$ = 8						; size = 4
?EnumZBufferFormats@DXContext@@IAEXPAX@Z PROC		; DXContext::EnumZBufferFormats
; _this$ = ecx

; 772  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 773  : 	((PIXELFMT_ARRAY *) parr)->clear();

	mov	ecx, DWORD PTR _parr$[ebp]
	call	?clear@?$vector@U_DDPIXELFORMAT@@V?$allocator@U_DDPIXELFORMAT@@@std@@@std@@QAEXXZ ; std::vector<_DDPIXELFORMAT,std::allocator<_DDPIXELFORMAT> >::clear

; 774  : 	m_pD3D->EnumZBufferFormats(m_guidD3D,EnumZBufferFormatsCallback,parr);

	mov	eax, DWORD PTR _parr$[ebp]
	push	eax
	push	OFFSET ?EnumZBufferFormatsCallback@DXContext@@KGJPAU_DDPIXELFORMAT@@PAX@Z ; DXContext::EnumZBufferFormatsCallback
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+24]
	call	ecx

; 775  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?EnumZBufferFormats@DXContext@@IAEXPAX@Z ENDP		; DXContext::EnumZBufferFormats
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_this$ = -4						; size = 4
?TestCooperativeLevel@DXContext@@QAEKXZ PROC		; DXContext::TestCooperativeLevel
; _this$ = ecx

; 968  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 969  : 	HRESULT hr = m_pDD->TestCooperativeLevel();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+104]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax

; 970  : 
; 971  : 	if(hr != DD_OK)

	cmp	DWORD PTR _hr$[ebp], 0
	je	SHORT $LN4@TestCooper
$LN3@TestCooper:

; 972  : 	{
; 973  : 		do
; 974  : 		{
; 975  : 			Sleep(100);

	push	100					; 00000064H
	call	DWORD PTR __imp__Sleep@4

; 976  : 			hr = m_pDD->TestCooperativeLevel();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+104]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax

; 977  : 		} while(hr != DD_OK);

	cmp	DWORD PTR _hr$[ebp], 0
	jne	SHORT $LN3@TestCooper

; 978  : 
; 979  : 		return S_FALSE;	// surface were lost

	mov	eax, 1
	jmp	SHORT $LN5@TestCooper
$LN4@TestCooper:

; 980  : 	}
; 981  : 
; 982  : 	return DD_OK;	// no change

	xor	eax, eax
$LN5@TestCooper:

; 983  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?TestCooperativeLevel@DXContext@@QAEKXZ ENDP		; DXContext::TestCooperativeLevel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ValidateD3DDevice@DXContext@@QAE_NXZ PROC		; DXContext::ValidateD3DDevice
; _this$ = ecx

; 932  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 933  : 	#ifdef _DEBUG
; 934  : 	DWORD dwPasses = 0;
; 935  : 	HRESULT hr = m_pD3DD->ValidateDevice(&dwPasses);
; 936  : 
; 937  : 	if(FAILED(hr))
; 938  : 	{
; 939  : 		char *strError = "Unknown error";
; 940  : 
; 941  : 		switch(hr)
; 942  : 		{
; 943  : 			case DDERR_INVALIDOBJECT: strError = "DDERR_INVALIDOBJECT"; break; 
; 944  : 			case DDERR_INVALIDPARAMS: strError = "DDERR_INVALIDPARAMS"; break;  
; 945  : 			case D3DERR_CONFLICTINGTEXTUREFILTER: strError = "D3DERR_CONFLICTINGTEXTUREFILTER"; break;
; 946  : 			case D3DERR_CONFLICTINGTEXTUREPALETTE: strError = "D3DERR_CONFLICTINGTEXTUREPALETTE"; break;
; 947  : 			case D3DERR_TOOMANYOPERATIONS: strError = "D3DERR_TOOMANYOPERATIONS"; break;
; 948  : 			case D3DERR_UNSUPPORTEDALPHAARG: strError = "D3DERR_UNSUPPORTEDALPHAARG"; break;
; 949  : 			case D3DERR_UNSUPPORTEDALPHAOPERATION: strError = "D3DERR_UNSUPPORTEDALPHAOPERATION"; break;
; 950  : 			case D3DERR_UNSUPPORTEDCOLORARG: strError = "D3DERR_UNSUPPORTEDCOLORARG"; break;
; 951  : 			case D3DERR_UNSUPPORTEDCOLOROPERATION: strError = "D3DERR_UNSUPPORTEDCOLOROPERATION"; break;
; 952  : 			case D3DERR_UNSUPPORTEDFACTORVALUE: strError = "D3DERR_UNSUPPORTEDFACTORVALUE"; break;
; 953  : 			case D3DERR_UNSUPPORTEDTEXTUREFILTER: strError = "D3DERR_UNSUPPORTEDTEXTUREFILTER"; break;
; 954  : 			case D3DERR_WRONGTEXTUREFORMAT: strError = "D3DERR_WRONGTEXTUREFORMAT"; break;
; 955  : 		}
; 956  : 
; 957  : 		MonoPrint(">>> DXContext::ValidateD3DDevice: ValidateDevice failed with 0x%X (%s) - %d passes required\n",
; 958  : 			hr, strError, dwPasses);
; 959  : 	}
; 960  : 
; 961  : 	return SUCCEEDED(hr);
; 962  : 	#else
; 963  : 	return true;

	mov	al, 1

; 964  : 	#endif
; 965  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ValidateD3DDevice@DXContext@@QAE_NXZ ENDP		; DXContext::ValidateD3DDevice
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
_dwRefCnt$ = -8						; size = 4
_this$ = -4						; size = 4
?Shutdown@DXContext@@QAEXXZ PROC			; DXContext::Shutdown
; _this$ = ecx

; 535  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 536  : //	MonoPrint("DXContext::Shutdown()\n");
; 537  : 
; 538  : 	DWORD dwRefCnt;
; 539  : 
; 540  : 	// release DX Engine stuff
; 541  : 	TheDXEngine.Release();

	mov	ecx, OFFSET ?TheDXEngine@@3VCDXEngine@@A ; TheDXEngine
	call	?Release@CDXEngine@@QAEXXZ		; CDXEngine::Release

; 542  : 
; 543  : 	if(m_pDD)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@Shutdown

; 544  : 		CheckHR(m_pDD->SetCooperativeLevel(m_hWnd, DDSCL_NORMAL));

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+80]
	call	edx
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4
$LN5@Shutdown:

; 545  : 
; 546  : 	if(m_pD3DD)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN4@Shutdown

; 547  : 	{
; 548  : 		// free all textures
; 549  : 		m_pD3DD->SetTexture(0, NULL);	

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+140]
	call	eax

; 550  : 		m_pD3DD->SetTexture(1, NULL);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+140]
	call	eax

; 551  : 		m_pD3DD->SetTexture(3, NULL);

	push	0
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+140]
	call	eax

; 552  : 
; 553  : 		// release
; 554  : 		dwRefCnt = m_pD3DD->Release();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	mov	DWORD PTR _dwRefCnt$[ebp], eax

; 555  : 		// ShiAssert(dwRefCnt == 0);
; 556  : 		m_pD3DD = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
$LN4@Shutdown:

; 557  : 	}
; 558  : 
; 559  : 	if(m_pD3D)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN3@Shutdown

; 560  : 	{
; 561  : 		dwRefCnt = m_pD3D->Release();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	mov	DWORD PTR _dwRefCnt$[ebp], eax

; 562  : //		ShiAssert(dwRefCnt == 0);
; 563  : 		m_pD3D = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN3@Shutdown:

; 564  : 	}
; 565  : 
; 566  : 	if(m_pDD)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN2@Shutdown

; 567  : 	{
; 568  : 		if(m_bFullscreen)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+12]
	test	eax, eax
	je	SHORT $LN1@Shutdown

; 569  : 		{
; 570  : 			m_pDD->RestoreDisplayMode();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+76]
	call	eax

; 571  : 			m_pDD->FlipToGDISurface();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+40]
	call	eax
$LN1@Shutdown:

; 572  : 		}
; 573  : 
; 574  : 		dwRefCnt = m_pDD->Release();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	mov	DWORD PTR _dwRefCnt$[ebp], eax

; 575  : //		ShiAssert(dwRefCnt == 0);
; 576  : 		m_pDD = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Shutdown:

; 577  : 	}
; 578  : 
; 579  : 	m_bFullscreen = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+12], 0

; 580  : 	m_hWnd = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 581  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Shutdown@DXContext@@QAEXXZ ENDP			; DXContext::Shutdown
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
_e$2 = -304						; size = 16
$T3 = -288						; size = 16
tv198 = -272						; size = 4
tv309 = -268						; size = 4
tv315 = -264						; size = 4
tv235 = -260						; size = 4
tv135 = -256						; size = 4
tv312 = -252						; size = 4
tv310 = -248						; size = 4
tv314 = -244						; size = 4
tv319 = -240						; size = 4
tv216 = -236						; size = 4
tv318 = -232						; size = 4
tv313 = -228						; size = 4
tv317 = -224						; size = 4
tv316 = -220						; size = 4
tv311 = -216						; size = 4
tv254 = -212						; size = 4
tv274 = -208						; size = 4
tv240 = -204						; size = 4
_pDDSZB$4 = -200					; size = 4
_pDDS$5 = -196						; size = 4
_pDDSZB$6 = -192					; size = 4
_pRenderTargetOld$7 = -188				; size = 4
$T8 = -184						; size = 1
$T9 = -183						; size = 1
$T10 = -182						; size = 1
$T11 = -181						; size = 1
_this$ = -180						; size = 4
_ddsd_disp$12 = -176					; size = 124
_ddscaps$13 = -52					; size = 16
_ddscaps$14 = -36					; size = 16
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_pRenderTarget$ = 8					; size = 4
?SetRenderTarget@DXContext@@QAE_NPAUIDirectDrawSurface7@@@Z PROC ; DXContext::SetRenderTarget
; _this$ = ecx

; 675  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetRenderTarget@DXContext@@QAE_NPAUIDirectDrawSurface7@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 288				; 00000120H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 676  : 	// ASSO: may remove this try catch block from the loop
; 677  : 	try
; 678  : 	{

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 679  : 		if(!m_pD3DD)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	$LN10@SetRenderT

; 680  : 		{
; 681  : 			// Check the display mode, and
; 682  : 			DDSURFACEDESC2 ddsd_disp;
; 683  : 			ZeroMemory(&ddsd_disp, sizeof(ddsd_disp));

	push	124					; 0000007cH
	push	0
	lea	ecx, DWORD PTR _ddsd_disp$12[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 684  : 			ddsd_disp.dwSize = sizeof(ddsd_disp);

	mov	DWORD PTR _ddsd_disp$12[ebp], 124	; 0000007cH

; 685  : 			CheckHR(m_pDD->GetDisplayMode(&ddsd_disp));

	lea	edx, DWORD PTR _ddsd_disp$12[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+48]
	call	edx
	mov	DWORD PTR tv309[ebp], eax
	mov	eax, DWORD PTR tv309[ebp]
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 686  : 
; 687  : 			if(ddsd_disp.ddpfPixelFormat.dwRGBBitCount <= 8)	// 8 Bit display unsupported

	cmp	DWORD PTR _ddsd_disp$12[ebp+84], 8
	ja	SHORT $LN9@SetRenderT

; 688  : 				throw _com_error(DDERR_INVALIDMODE); 

	push	0
	push	0
	push	-2005532552				; 88760078H
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z	; _com_error::_com_error
	push	OFFSET __TI1?AV_com_error@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN9@SetRenderT:

; 689  : 
; 690  : 			CheckHR(m_pDD->QueryInterface(IID_IDirect3D7, (void **) &m_pD3D));

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	push	OFFSET _IID_IDirect3D7
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	call	edx
	mov	DWORD PTR tv310[ebp], eax
	mov	eax, DWORD PTR tv310[ebp]
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 691  : 
; 692  : 
; 693  : 			// RV - RED - VISTA FIX, seems Vista is returning false to the check for zBuffer availability
; 694  : 			// we go enumerating them and eventually use them directly
; 695  : /*			if(m_pcapsDD->dwCaps & DDSCAPS_ZBUFFER)
; 696  : 			{*/
; 697  : 				// Get the attached Z buffer surface
; 698  : 				IDirectDrawSurface7Ptr pDDSZB;

	lea	ecx, DWORD PTR _pDDSZB$4[ebp]
	call	??0?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 699  : 				DDSCAPS2 ddscaps;
; 700  : 				ZeroMemory(&ddscaps, sizeof(ddscaps));

	push	16					; 00000010H
	push	0
	lea	ecx, DWORD PTR _ddscaps$13[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 701  : 				ddscaps.dwCaps = DDSCAPS_ZBUFFER; 

	mov	DWORD PTR _ddscaps$13[ebp], 131072	; 00020000H

; 702  : 
; 703  : 				if(FAILED(pRenderTarget->GetAttachedSurface(&ddscaps, &pDDSZB)))

	lea	ecx, DWORD PTR _pDDSZB$4[ebp]
	call	??I?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEPAPAUIDirectDrawSurface7@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator&
	push	eax
	lea	edx, DWORD PTR _ddscaps$13[ebp]
	push	edx
	mov	eax, DWORD PTR _pRenderTarget$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRenderTarget$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	mov	DWORD PTR tv135[ebp], eax
	cmp	DWORD PTR tv135[ebp], 0
	jge	SHORT $LN8@SetRenderT

; 704  : 					AttachDepthBuffer(pRenderTarget);

	mov	ecx, DWORD PTR _pRenderTarget$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AttachDepthBuffer@DXContext@@IAEXPAUIDirectDrawSurface7@@@Z ; DXContext::AttachDepthBuffer
$LN8@SetRenderT:

; 705  : /*			}
; 706  : 
; 707  : 			else MonoPrint("DXContext::AttachDepthBuffer() - Warning: No Z-Buffer support !!!\n");*/
; 708  : 
; 709  : 			CheckHR(m_pD3D->CreateDevice(m_guidD3D, pRenderTarget, &m_pD3DD));

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _pRenderTarget$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	mov	DWORD PTR tv311[ebp], eax
	mov	edx, DWORD PTR tv311[ebp]
	push	edx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 710  : 			CheckHR(m_pD3DD->GetCaps(m_pD3DHWDeviceDesc));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	mov	DWORD PTR tv312[ebp], eax
	mov	edx, DWORD PTR tv312[ebp]
	push	edx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 711  : 			CheckHR(m_pD3DD->SetRenderState(D3DRENDERSTATE_ZENABLE,D3DZB_TRUE));

	push	1
	push	7
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+80]
	call	edx
	mov	DWORD PTR tv313[ebp], eax
	mov	eax, DWORD PTR tv313[ebp]
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 712  : 
; 713  : 			CheckCaps();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckCaps@DXContext@@IAEXXZ		; DXContext::CheckCaps

; 714  : 
; 715  : 
; 716  : // COBRA - DX - DX ENGINE INTIALIZATION - use the right model initialization
; 717  : 		if(g_bUse_DX_Engine)	TheDXEngine.Setup(m_pD3DD, m_pD3D, m_pDD);

	movzx	ecx, BYTE PTR ?g_bUse_DX_Engine@@3_NA	; g_bUse_DX_Engine
	test	ecx, ecx
	je	SHORT $LN7@SetRenderT
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, OFFSET ?TheDXEngine@@3VCDXEngine@@A ; TheDXEngine
	call	?Setup@CDXEngine@@QAEXPAUIDirect3DDevice7@@PAUIDirect3D7@@PAUIDirectDraw7@@@Z ; CDXEngine::Setup
$LN7@SetRenderT:

; 718  : 
; 719  : 
; 720  : 			//JAM
; 721  : 
; 722  : //			CheckCaps();
; 723  : 
; 724  : 			return true;	// render target changed & succeeded

	mov	BYTE PTR $T8[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _pDDSZB$4[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
	mov	al, BYTE PTR $T8[ebp]
	jmp	$LN13@SetRenderT

; 725  : 		}
; 726  : 
; 727  : 		else

	jmp	$LN6@SetRenderT
$LN10@SetRenderT:

; 728  : 		{
; 729  : 			//JAM 17Dec03
; 730  : 			IDirectDrawSurface7Ptr pDDS;

	lea	ecx, DWORD PTR _pDDS$5[ebp]
	call	??0?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 731  : 			if(FAILED(m_pD3DD->GetRenderTarget(&pDDS)) || pDDS.GetInterfacePtr() != pRenderTarget)

	lea	ecx, DWORD PTR _pDDS$5[ebp]
	call	??I?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEPAPAUIDirectDrawSurface7@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator&
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+36]
	call	ecx
	mov	DWORD PTR tv198[ebp], eax
	cmp	DWORD PTR tv198[ebp], 0
	jl	SHORT $LN4@SetRenderT
	lea	ecx, DWORD PTR _pDDS$5[ebp]
	call	?GetInterfacePtr@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEAAPAUIDirectDrawSurface7@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::GetInterfacePtr
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR _pRenderTarget$[ebp]
	je	$LN5@SetRenderT
$LN4@SetRenderT:

; 732  : 			{
; 733  : 				IDirectDrawSurface7Ptr pRenderTargetOld;

	lea	ecx, DWORD PTR _pRenderTargetOld$7[ebp]
	call	??0?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
	mov	BYTE PTR __$EHRec$[ebp+12], 3

; 734  : 				CheckHR(m_pD3DD->GetRenderTarget(&pRenderTargetOld));

	lea	ecx, DWORD PTR _pRenderTargetOld$7[ebp]
	call	??I?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEPAPAUIDirectDrawSurface7@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator&
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	mov	DWORD PTR tv216[ebp], eax
	mov	eax, DWORD PTR tv216[ebp]
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 735  : 
; 736  : 				if(pRenderTargetOld)

	lea	ecx, DWORD PTR _pRenderTargetOld$7[ebp]
	call	??B?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBE_NXZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	$LN3@SetRenderT

; 737  : 				{
; 738  : 					IDirectDrawSurface7Ptr pDDSZB;

	lea	ecx, DWORD PTR _pDDSZB$6[ebp]
	call	??0?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
	mov	BYTE PTR __$EHRec$[ebp+12], 4

; 739  : 					DDSCAPS2 ddscaps = { DDSCAPS_ZBUFFER, 0, 0, 0 };

	mov	DWORD PTR _ddscaps$14[ebp], 131072	; 00020000H
	mov	DWORD PTR _ddscaps$14[ebp+4], 0
	mov	DWORD PTR _ddscaps$14[ebp+8], 0
	mov	DWORD PTR _ddscaps$14[ebp+12], 0

; 740  : 					pRenderTargetOld->GetAttachedSurface(&ddscaps,&pDDSZB);

	lea	ecx, DWORD PTR _pRenderTargetOld$7[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDrawSurface7@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator->
	mov	DWORD PTR tv235[ebp], eax
	mov	edx, DWORD PTR tv235[ebp]
	mov	DWORD PTR tv240[ebp], edx
	lea	ecx, DWORD PTR _pDDSZB$6[ebp]
	call	??I?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAEPAPAUIDirectDrawSurface7@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator&
	push	eax
	lea	eax, DWORD PTR _ddscaps$14[ebp]
	push	eax
	mov	ecx, DWORD PTR tv240[ebp]
	push	ecx
	mov	edx, DWORD PTR tv240[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+48]
	call	ecx

; 741  : 
; 742  : 					if(pDDSZB)

	lea	ecx, DWORD PTR _pDDSZB$6[ebp]
	call	??B?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBE_NXZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator bool
	movzx	edx, al
	test	edx, edx
	je	$LN2@SetRenderT

; 743  : 					{
; 744  : 						CheckHR(pRenderTargetOld->DeleteAttachedSurface(0,pDDSZB));

	lea	ecx, DWORD PTR _pRenderTargetOld$7[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDrawSurface7@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator->
	mov	DWORD PTR tv314[ebp], eax
	mov	eax, DWORD PTR tv314[ebp]
	mov	DWORD PTR tv254[ebp], eax
	lea	ecx, DWORD PTR _pDDSZB$6[ebp]
	call	??B?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDrawSurface7@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator IDirectDrawSurface7 *
	push	eax
	push	0
	mov	ecx, DWORD PTR tv254[ebp]
	push	ecx
	mov	edx, DWORD PTR tv254[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	mov	DWORD PTR tv315[ebp], eax
	mov	edx, DWORD PTR tv315[ebp]
	push	edx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 745  : 	
; 746  : 						if(FAILED(pRenderTarget->AddAttachedSurface(pDDSZB)))

	lea	ecx, DWORD PTR _pDDSZB$6[ebp]
	call	??B?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDrawSurface7@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator IDirectDrawSurface7 *
	push	eax
	mov	eax, DWORD PTR _pRenderTarget$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRenderTarget$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR tv316[ebp], eax
	cmp	DWORD PTR tv316[ebp], 0
	jge	SHORT $LN2@SetRenderT

; 747  : 							CheckHR(pRenderTargetOld->AddAttachedSurface(pDDSZB));

	lea	ecx, DWORD PTR _pRenderTargetOld$7[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDrawSurface7@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator->
	mov	DWORD PTR tv317[ebp], eax
	mov	ecx, DWORD PTR tv317[ebp]
	mov	DWORD PTR tv274[ebp], ecx
	lea	ecx, DWORD PTR _pDDSZB$6[ebp]
	call	??B?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDrawSurface7@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::operator IDirectDrawSurface7 *
	push	eax
	mov	edx, DWORD PTR tv274[ebp]
	push	edx
	mov	eax, DWORD PTR tv274[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	mov	DWORD PTR tv318[ebp], eax
	mov	eax, DWORD PTR tv318[ebp]
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4
$LN2@SetRenderT:

; 748  : 					}
; 749  : 				}

	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _pDDSZB$6[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
$LN3@SetRenderT:

; 750  : 				// DX - RED - U CAN CHANGE TARGET IN A SCENE...!!!
; 751  : 				//if( bInBeginScene ) INT3; // ASSO: break if still in BeginScene
; 752  : 				//JAM
; 753  : 
; 754  : 				// Now change the render target
; 755  : 				CheckHR(m_pD3DD->SetRenderTarget(pRenderTarget, NULL));

	push	0
	mov	ecx, DWORD PTR _pRenderTarget$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	mov	DWORD PTR tv319[ebp], eax
	mov	edx, DWORD PTR tv319[ebp]
	push	edx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 756  : 
; 757  : 				return true;	// render target changed

	mov	BYTE PTR $T11[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _pRenderTargetOld$7[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _pDDS$5[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
	mov	al, BYTE PTR $T11[ebp]
	jmp	SHORT $LN13@SetRenderT
$LN5@SetRenderT:

; 758  : 			}
; 759  : 
; 760  : 			return false;	// render target NOT changed

	mov	BYTE PTR $T10[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _pDDS$5[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
	mov	al, BYTE PTR $T10[ebp]
	jmp	SHORT $LN13@SetRenderT
$LN6@SetRenderT:

; 761  : 		}
; 762  : 	}

	jmp	SHORT $LN14@SetRenderT
__catch$?SetRenderTarget@DXContext@@QAE_NPAUIDirectDrawSurface7@@@Z$0:

; 763  : 
; 764  : 	catch(_com_error e)
; 765  : 	{
; 766  : 		MonoPrint("DXContext::SetRenderTarget - Error 0x%X\n", e.Error());

	lea	ecx, DWORD PTR _e$2[ebp]
	call	?Error@_com_error@@QBEJXZ		; _com_error::Error
	push	eax
	push	OFFSET ??_C@_0CJ@NJFEOPDJ@DXContext?3?3SetRenderTarget?5?9?5Err@
	call	_MonoPrint
	add	esp, 8

; 767  : 		return false;

	mov	BYTE PTR $T9[ebp], 0
	lea	ecx, DWORD PTR _e$2[ebp]
	call	??1_com_error@@UAE@XZ			; _com_error::~_com_error
	mov	eax, $LN22@SetRenderT
	ret	0

; 768  : 	}

	mov	eax, $LN14@SetRenderT
	ret	0
$LN14@SetRenderT:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN13@SetRenderT
$LN22@SetRenderT:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 767  : 		return false;

	mov	al, BYTE PTR $T9[ebp]
$LN13@SetRenderT:

; 769  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetRenderTarget@DXContext@@QAE_NPAUIDirectDrawSurface7@@@Z$2:
	lea	ecx, DWORD PTR _pDDSZB$4[ebp]
	jmp	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
__unwindfunclet$?SetRenderTarget@DXContext@@QAE_NPAUIDirectDrawSurface7@@@Z$3:
	lea	ecx, DWORD PTR _pDDS$5[ebp]
	jmp	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
__unwindfunclet$?SetRenderTarget@DXContext@@QAE_NPAUIDirectDrawSurface7@@@Z$4:
	lea	ecx, DWORD PTR _pRenderTargetOld$7[ebp]
	jmp	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
__unwindfunclet$?SetRenderTarget@DXContext@@QAE_NPAUIDirectDrawSurface7@@@Z$5:
	lea	ecx, DWORD PTR _pDDSZB$6[ebp]
	jmp	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawSurface7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDrawSurface7,&IID_IDirectDraw7> >
__ehhandler$?SetRenderTarget@DXContext@@QAE_NPAUIDirectDrawSurface7@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-308]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetRenderTarget@DXContext@@QAE_NPAUIDirectDrawSurface7@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetRenderTarget@DXContext@@QAE_NPAUIDirectDrawSurface7@@@Z ENDP ; DXContext::SetRenderTarget
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
_e$2 = -60						; size = 16
tv241 = -44						; size = 4
tv240 = -40						; size = 4
tv239 = -36						; size = 4
tv238 = -32						; size = 4
_m_dwCoopFlags$3 = -28					; size = 4
_this$ = -24						; size = 4
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
_hWnd$ = 8						; size = 4
_nWidth$ = 12						; size = 4
_nHeight$ = 16						; size = 4
_nDepth$ = 20						; size = 4
_bFullscreen$ = 24					; size = 1
?Init@DXContext@@QAE_NPAUHWND__@@HHH_N@Z PROC		; DXContext::Init
; _this$ = ecx

; 600  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Init@DXContext@@QAE_NPAUHWND__@@HHH_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 44					; 0000002cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 601  : 	MonoPrint("DXContext::Init(0x%X, %d, %d, %d, %d)\n", hWnd, nWidth, nHeight, nDepth, bFullscreen);

	movzx	eax, BYTE PTR _bFullscreen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nDepth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nHeight$[ebp]
	push	edx
	mov	eax, DWORD PTR _nWidth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWnd$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CH@FGECMAID@DXContext?3?3Init?$CI0x?$CFX?0?5?$CFd?0?5?$CFd?0?5?$CFd@
	call	_MonoPrint
	add	esp, 24					; 00000018H

; 602  : 
; 603  : 	try
; 604  : 	{

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 605  : 		ShiAssert(::GetCurrentThreadId() == GetWindowThreadProcessId(hWnd, NULL));	// Make sure this gets called by the main thread
; 606  : 
; 607  : 		m_bFullscreen = bFullscreen;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR _bFullscreen$[ebp]
	mov	BYTE PTR [edx+12], al

; 608  : 		m_nWidth = nWidth;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _nWidth$[ebp]
	mov	DWORD PTR [ecx+20], edx

; 609  : 		m_nHeight = nHeight;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nHeight$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 610  : 		m_hWnd = hWnd;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _hWnd$[ebp]
	mov	DWORD PTR [edx+16], eax

; 611  : 
; 612  : 		// Create DDRAW object
; 613  : 		CheckHR(DirectDrawCreateEx(&m_guidDD, (void **) &m_pDD, IID_IDirectDraw7, NULL));

	push	0
	push	OFFSET _IID_IDirectDraw7
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 28					; 0000001cH
	push	edx
	call	_DirectDrawCreateEx@16
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 614  : 
; 615  : 		m_pcapsDD->dwSize = sizeof(*m_pcapsDD);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR [ecx], 380			; 0000017cH

; 616  : 		CheckHR(m_pDD->GetCaps(m_pcapsDD, NULL));

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	mov	DWORD PTR tv238[ebp], eax
	mov	ecx, DWORD PTR tv238[ebp]
	push	ecx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 617  : 		CheckHR(m_pDD->GetDeviceIdentifier(m_pDevID, NULL));

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+108]
	call	eax
	mov	DWORD PTR tv239[ebp], eax
	mov	ecx, DWORD PTR tv239[ebp]
	push	ecx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 618  : 
; 619  : 		sprintf(g_CardDetails, "DXContext::Init - DriverInfo - \"%s\" - \"%s\", Vendor: %d, Device: %d, SubSys: %d, Rev: %d, Product: %d, Version: %d, SubVersion: %d, Build: %d\n",
; 620  : 			m_pDevID->szDriver, m_pDevID->szDescription,
; 621  : 			m_pDevID->dwVendorId, m_pDevID->dwDeviceId, m_pDevID->dwSubSysId, m_pDevID->dwRevision,
; 622  : 			HIWORD(m_pDevID->liDriverVersion.HighPart), LOWORD(m_pDevID->liDriverVersion.HighPart),
; 623  : 			HIWORD(m_pDevID->liDriverVersion.LowPart), LOWORD(m_pDevID->liDriverVersion.LowPart)); // JB 010215

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR [eax+1024]
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR [ecx+1024]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	eax, DWORD PTR [edx+1028]
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR [eax+1028]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR [ecx+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR [ecx+1040]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR [ecx+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR [ecx+1032]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	add	ecx, 512				; 00000200H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	push	eax
	push	OFFSET ??_C@_0IO@FKDMPLAK@DXContext?3?3Init?5?9?5DriverInfo?5?9?5?$CC@
	push	OFFSET ?g_CardDetails@@3PADA		; g_CardDetails
	call	_sprintf
	add	esp, 48					; 00000030H

; 624  : 		MonoPrint ("%s", g_CardDetails); // JB 010215

	push	OFFSET ?g_CardDetails@@3PADA		; g_CardDetails
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	call	_MonoPrint
	add	esp, 8

; 625  : 
; 626  : 		DWORD m_dwCoopFlags = NULL;

	mov	DWORD PTR _m_dwCoopFlags$3[ebp], 0

; 627  : 		m_dwCoopFlags |= DDSCL_FPUPRESERVE;	// OW FIXME: check if this can be eliminated by eliminating ALL controlfp calls in all files

	mov	ecx, DWORD PTR _m_dwCoopFlags$3[ebp]
	or	ecx, 4096				; 00001000H
	mov	DWORD PTR _m_dwCoopFlags$3[ebp], ecx

; 628  : 		if(g_bForceDXMultiThreadedCoopLevel) m_dwCoopFlags |= DDSCL_MULTITHREADED;

	movzx	edx, BYTE PTR ?g_bForceDXMultiThreadedCoopLevel@@3_NA ; g_bForceDXMultiThreadedCoopLevel
	test	edx, edx
	je	SHORT $LN4@Init
	mov	eax, DWORD PTR _m_dwCoopFlags$3[ebp]
	or	eax, 1024				; 00000400H
	mov	DWORD PTR _m_dwCoopFlags$3[ebp], eax
$LN4@Init:

; 629  : 
; 630  : 		if(bFullscreen) m_dwCoopFlags |= DDSCL_EXCLUSIVE | DDSCL_FULLSCREEN | DDSCL_ALLOWREBOOT;

	movzx	ecx, BYTE PTR _bFullscreen$[ebp]
	test	ecx, ecx
	je	SHORT $LN3@Init
	mov	edx, DWORD PTR _m_dwCoopFlags$3[ebp]
	or	edx, 19					; 00000013H
	mov	DWORD PTR _m_dwCoopFlags$3[ebp], edx
	jmp	SHORT $LN2@Init
$LN3@Init:

; 631  : 		else m_dwCoopFlags |= DDSCL_NORMAL;

	mov	eax, DWORD PTR _m_dwCoopFlags$3[ebp]
	or	eax, 8
	mov	DWORD PTR _m_dwCoopFlags$3[ebp], eax
$LN2@Init:

; 632  : 
; 633  : 		CheckHR(m_pDD->SetCooperativeLevel(m_hWnd, m_dwCoopFlags));

	mov	ecx, DWORD PTR _m_dwCoopFlags$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+80]
	call	eax
	mov	DWORD PTR tv240[ebp], eax
	mov	ecx, DWORD PTR tv240[ebp]
	push	ecx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 634  : 
; 635  : 		if(bFullscreen) CheckHR(m_pDD->SetDisplayMode(nWidth, nHeight, nDepth, 0, NULL));

	movzx	edx, BYTE PTR _bFullscreen$[ebp]
	test	edx, edx
	je	SHORT $LN1@Init
	push	0
	push	0
	mov	eax, DWORD PTR _nDepth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nHeight$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nWidth$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+84]
	call	edx
	mov	DWORD PTR tv241[ebp], eax
	mov	eax, DWORD PTR tv241[ebp]
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4
$LN1@Init:

; 636  : 
; 637  : /*
; 638  : 		// Vendor specific workarounds
; 639  : 		if(IsEqualGUID(m_pDevID->guidDeviceIdentifier, __uuidof(DEVGUID_3DFX_VOODOO2)) && !bFlip)
; 640  : 		{
; 641  : 			// The V2 (Beta 1.0 DX Driver) cannot render to offscreen plain surfaces only to flipping primary surfaces
; 642  : 			m_guidD3D = IID_IDirect3DRGBDevice;	// force software renderer
; 643  : 		}
; 644  : */
; 645  : 
; 646  : //JAM 25Oct03 - Let's avoid user error and disable these.
; 647  : //		if(IsEqualIID(m_guidD3D, IID_IDirect3DRGBDevice) || IsEqualIID(m_guidD3D, IID_IDirect3DRefDevice) ||
; 648  : //			IsEqualIID(m_guidD3D, IID_IDirect3DRampDevice) || IsEqualIID(m_guidD3D, IID_IDirect3DMMXDevice))
; 649  : //			m_eDeviceCategory = D3DDeviceCategory_Software;
; 650  : //		if(IsEqualIID(m_guidD3D, IID_IDirect3DHALDevice))
; 651  : 			m_eDeviceCategory = D3DDeviceCategory_Hardware;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], 2

; 652  : //		else if(IsEqualIID(m_guidD3D, IID_IDirect3DTnLHalDevice))
; 653  : //FIXME: TnL
; 654  : //			m_eDeviceCategory = D3DDeviceCategory_Hardware_TNL;
; 655  : //		else
; 656  : //		{
; 657  : //			m_eDeviceCategory = D3DDeviceCategory_Software;		// assume its software
; 658  : //			ShiAssert(false);	// check this
; 659  : //		}
; 660  : //JAM
; 661  : 
; 662  : 		return true;

	mov	al, 1
	jmp	SHORT $LN6@Init
__catch$?Init@DXContext@@QAE_NPAUHWND__@@HHH_N@Z$0:

; 663  : 	}
; 664  : 
; 665  : 	catch(_com_error e)
; 666  : 	{
; 667  : 		MonoPrint("DXContext::DD_Init - Error 0x%X\n", e.Error());

	lea	ecx, DWORD PTR _e$2[ebp]
	call	?Error@_com_error@@QBEJXZ		; _com_error::Error
	push	eax
	push	OFFSET ??_C@_0CB@KMJBNHDD@DXContext?3?3DD_Init?5?9?5Error?50x?$CFX?6@
	call	_MonoPrint
	add	esp, 8

; 668  : 		return false;

	mov	BYTE PTR $T4[ebp], 0
	lea	ecx, DWORD PTR _e$2[ebp]
	call	??1_com_error@@UAE@XZ			; _com_error::~_com_error
	mov	eax, $LN12@Init
	ret	0

; 669  : 	}

	mov	eax, __tryend$?Init@DXContext@@QAE_NPAUHWND__@@HHH_N@Z$1
	ret	0
__tryend$?Init@DXContext@@QAE_NPAUHWND__@@HHH_N@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN6@Init
$LN12@Init:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 668  : 		return false;

	mov	al, BYTE PTR $T4[ebp]
$LN6@Init:

; 670  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?Init@DXContext@@QAE_NPAUHWND__@@HHH_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Init@DXContext@@QAE_NPAUHWND__@@HHH_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Init@DXContext@@QAE_NPAUHWND__@@HHH_N@Z ENDP		; DXContext::Init
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
$T1 = -16						; size = 4
$T2 = -12						; size = 4
$T3 = -8						; size = 4
_this$ = -4						; size = 4
??1DXContext@@QAE@XZ PROC				; DXContext::~DXContext
; _this$ = ecx

; 523  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 524  : 
; 525  : 	Shutdown();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Shutdown@DXContext@@QAEXXZ		; DXContext::Shutdown

; 526  : 
; 527  : 
; 528  : 	// sfr: why are these not being NULLed??
; 529  : 	if(m_pcapsDD) delete m_pcapsDD;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	SHORT $LN3@DXContext
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR $T3[ebp], edx
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN3@DXContext:

; 530  : 	if(m_pD3DHWDeviceDesc) delete m_pD3DHWDeviceDesc;

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $LN2@DXContext
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@DXContext:

; 531  : 	if(m_pDevID) delete m_pDevID;

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+72], 0
	je	SHORT $LN4@DXContext
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@DXContext:

; 532  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1DXContext@@QAE@XZ ENDP				; DXContext::~DXContext
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\devmgr.cpp
_TEXT	SEGMENT
$T1 = -16						; size = 4
$T2 = -12						; size = 4
$T3 = -8						; size = 4
_this$ = -4						; size = 4
??0DXContext@@QAE@XZ PROC				; DXContext::DXContext
; _this$ = ecx

; 506  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 507  : 	m_pDD = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 508  : 	m_pD3D = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 509  : 	m_pD3DD = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 510  : 	m_bFullscreen = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0

; 511  : 	m_hWnd = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0

; 512  : 	m_nWidth = m_nHeight = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 513  : 	ZeroMemory(&m_guidDD, sizeof(m_guidDD));

	push	16					; 00000010H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 514  : 	ZeroMemory(&m_guidD3D, sizeof(m_guidD3D));

	push	16					; 00000010H
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 44					; 0000002cH
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 515  : 
; 516  : 	m_pcapsDD = new DDCAPS;

	push	380					; 0000017cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [eax+64], ecx

; 517  : 	m_pD3DHWDeviceDesc = new D3DDEVICEDESC7;

	push	236					; 000000ecH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+68], eax

; 518  : 	m_pDevID = new DDDEVICEIDENTIFIER2;

	push	1068					; 0000042cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+72], edx

; 519  : 	refcount = 1; // start with 1

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+76], 1

; 520  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0DXContext@@QAE@XZ ENDP				; DXContext::DXContext
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\smart.h
;	COMDAT ?CheckHR@@YAXJ@Z
_TEXT	SEGMENT
$T1 = -20						; size = 16
_pEI$2 = -4						; size = 4
_hr$ = 8						; size = 4
?CheckHR@@YAXJ@Z PROC					; CheckHR, COMDAT

; 27   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 28   : 	if(FAILED(hr))

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN3@CheckHR

; 29   : 	{
; 30   : 		IErrorInfo *pEI = NULL;

	mov	DWORD PTR _pEI$2[ebp], 0

; 31   : 		::GetErrorInfo(NULL, &pEI);

	lea	eax, DWORD PTR _pEI$2[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__GetErrorInfo@8

; 32   : 		throw _com_error(hr, pEI);

	push	0
	mov	ecx, DWORD PTR _pEI$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _hr$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z	; _com_error::_com_error
	push	OFFSET __TI1?AV_com_error@@
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	__CxxThrowException@8
$LN3@CheckHR:

; 33   : 	}
; 34   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CheckHR@@YAXJ@Z ENDP					; CheckHR
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1717 : 		{	// return pointer to null-terminated nonmutable array

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1718 : 		return (this->_Myptr());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 1719 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 988  : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 989  : 		return (assign(_Ptr));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 990  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 963  : 		{	// destroy the string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 964  : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 965  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 749  : 		{	// construct empty string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 750  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 751  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -2						; size = 1
$T2 = -1						; size = 1
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 733  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<char> >::select_on_container_copy_construction
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 734  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 735  : 		assign(_Right, 0, npos);

	push	-1
	push	0
	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 736  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 835  : 		{	// construct by copying base

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@ABV01@@Z	; std::allocator<char>::allocator<char>

; 836  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@XZ PROC ; std::_Wrap_alloc<std::allocator<char> >::select_on_container_copy_construction, COMDAT
; _this$ = ecx

; 806  : 		{	// get allocator to use

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 807  : 		return (_Mytraits::select_on_container_copy_construction(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ; std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 808  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@XZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z PROC ; std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction, COMDAT

; 767  : 		{	// get allocator to use

	push	ebp
	mov	ebp, esp

; 768  : 		return (_Al.select_on_container_copy_construction());

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?select_on_container_copy_construction@?$allocator@D@std@@QBE?AV12@XZ ; std::allocator<char>::select_on_container_copy_construction
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 769  : 		}

	pop	ebp
	ret	0
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ENDP ; std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 569  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 570  : 		{	// construct by copying (do nothing)
; 571  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$allocator@D@std@@QBE?AV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?select_on_container_copy_construction@?$allocator@D@std@@QBE?AV12@XZ PROC ; std::allocator<char>::select_on_container_copy_construction, COMDAT
; _this$ = ecx

; 544  : 		{	// return this allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 545  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$allocator@D@std@@QAE@ABV01@@Z	; std::allocator<char>::allocator<char>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 546  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?select_on_container_copy_construction@?$allocator@D@std@@QBE?AV12@XZ ENDP ; std::allocator<char>::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 50   : 		{	// adopt this iterator by parent

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 39   : 		{	// orphan all iterators

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 40   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_com_error@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_com_error@@UAEPAXI@Z PROC				; _com_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_com_error@@UAE@XZ			; _com_error::~_com_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_com_error@@UAEPAXI@Z ENDP				; _com_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comdef.h
;	COMDAT ?Error@_com_error@@QBEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Error@_com_error@@QBEJXZ PROC				; _com_error::Error, COMDAT
; _this$ = ecx

; 313  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 314  :     return m_hresult;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 315  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Error@_com_error@@QBEJXZ ENDP				; _com_error::Error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comdef.h
;	COMDAT ??1_com_error@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_com_error@@UAE@XZ PROC				; _com_error::~_com_error, COMDAT
; _this$ = ecx

; 294  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_com_error@@6B@

; 295  :     if (m_perrinfo != NULL) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN2@com_error

; 296  :         m_perrinfo->Release();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
$LN2@com_error:

; 297  :     }
; 298  :     if (m_pszMsg != NULL) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN3@com_error

; 299  :         LocalFree((HLOCAL)m_pszMsg);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__LocalFree@4
$LN3@com_error:

; 300  :     }
; 301  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1_com_error@@UAE@XZ ENDP				; _com_error::~_com_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comdef.h
;	COMDAT ??0_com_error@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_that$ = 8						; size = 4
??0_com_error@@QAE@ABV0@@Z PROC				; _com_error::_com_error, COMDAT
; _this$ = ecx

; 287  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_com_error@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _that$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 288  :     if (m_perrinfo != NULL) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN2@com_error

; 289  :         m_perrinfo->AddRef();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+4]
	call	edx
$LN2@com_error:

; 290  :     }
; 291  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0_com_error@@QAE@ABV0@@Z ENDP				; _com_error::_com_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comdef.h
;	COMDAT ??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hr$ = 8						; size = 4
_perrinfo$ = 12						; size = 4
_fAddRef$ = 16						; size = 1
??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z PROC		; _com_error::_com_error, COMDAT
; _this$ = ecx

; 279  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_com_error@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _perrinfo$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 280  :     if (m_perrinfo != NULL && fAddRef) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@com_error
	movzx	ecx, BYTE PTR _fAddRef$[ebp]
	test	ecx, ecx
	je	SHORT $LN2@com_error

; 281  :         m_perrinfo->AddRef();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
$LN2@com_error:

; 282  :     }
; 283  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z ENDP		; _com_error::_com_error
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z PROC	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ENDP	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ PROC	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CComBSTR@ATL@@QAE@XZ			; ATL::CComBSTR::~CComBSTR
	mov	esp, ebp
	pop	ebp
	ret	0
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ ENDP	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\atlmfc\include\atlcomcli.h
;	COMDAT ??1CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CComBSTR@ATL@@QAE@XZ PROC				; ATL::CComBSTR::~CComBSTR, COMDAT
; _this$ = ecx

; 1656 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1657 :     ::SysFreeString(m_str);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__SysFreeString@4

; 1658 : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1CComBSTR@ATL@@QAE@XZ ENDP				; ATL::CComBSTR::~CComBSTR
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.0\include\shared\guiddef.h
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT
tv69 = -4						; size = 4
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID PROC					; COMDAT

; 160  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN3@IsEqualGUI
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@IsEqualGUI
$LN3@IsEqualGUI:
	mov	DWORD PTR tv69[ebp], 0
$LN4@IsEqualGUI:
	mov	eax, DWORD PTR tv69[ebp]

; 162  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_IsEqualGUID ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Where$[ebp]
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
