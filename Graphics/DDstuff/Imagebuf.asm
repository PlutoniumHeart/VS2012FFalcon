; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\Graphics\DDstuff\Imagebuf.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?VT@?$CVarTypeInfo@_J@ATL@@2GB			; ATL::CVarTypeInfo<__int64>::VT
PUBLIC	?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ ; ATL::CVarTypeInfo<__int64>::pmField
PUBLIC	___pobjMapEntryFirst
PUBLIC	___pobjMapEntryLast
PUBLIC	?VT@?$CVarTypeInfo@PA_J@ATL@@2GB		; ATL::CVarTypeInfo<__int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ ; ATL::CVarTypeInfo<__int64 *>::pmField
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?VT@?$CVarTypeInfo@_K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned __int64>::VT
PUBLIC	??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@	; `string'
PUBLIC	?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64>::pmField
PUBLIC	??_C@_08PICKODJL@FileType?$AA@			; `string'
PUBLIC	??_C@_09JKPGEJCH@Interface?$AA@			; `string'
PUBLIC	??_C@_08PPIOJEA@Hardware?$AA@			; `string'
PUBLIC	?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA	; ATL::_pPerfRegFunc
PUBLIC	??_C@_04IHBFOLAC@Mime?$AA@			; `string'
PUBLIC	?_pPerfUnRegFunc@ATL@@3P6AJXZA			; ATL::_pPerfUnRegFunc
PUBLIC	??_C@_03DDIMFGBA@SAM?$AA@			; `string'
PUBLIC	?_AtlRegisterPerUser@ATL@@3_NA			; ATL::_AtlRegisterPerUser
PUBLIC	??_C@_08LOPHEHKG@SECURITY?$AA@			; `string'
PUBLIC	??_C@_06FDHFNJBJ@SYSTEM?$AA@			; `string'
PUBLIC	??_C@_08KEKAJNJI@Software?$AA@			; `string'
PUBLIC	??_C@_07KJLOKDKB@TypeLib?$AA@			; `string'
PUBLIC	?VT@?$CVarTypeInfo@PA_K@ATL@@2GB		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
PUBLIC	__GUID_00000000_0000_0000_c000_000000000046
PUBLIC	?VT@?$CVarTypeInfo@M@ATL@@2GB			; ATL::CVarTypeInfo<float>::VT
PUBLIC	?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ ; ATL::CVarTypeInfo<float>::pmField
PUBLIC	__GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
PUBLIC	?VT@?$CVarTypeInfo@PAM@ATL@@2GB			; ATL::CVarTypeInfo<float *>::VT
PUBLIC	__GUID_00020400_0000_0000_c000_000000000046
PUBLIC	?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ ; ATL::CVarTypeInfo<float *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@N@ATL@@2GB			; ATL::CVarTypeInfo<double>::VT
PUBLIC	?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ ; ATL::CVarTypeInfo<double>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAN@ATL@@2GB			; ATL::CVarTypeInfo<double *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ ; ATL::CVarTypeInfo<double *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB	; ATL::CVarTypeInfo<tagVARIANT *>::VT
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	__GUID_0002e012_0000_0000_c000_000000000046
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?VT@?$CVarTypeInfo@PA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ ; ATL::CVarTypeInfo<wchar_t *>::pmField
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t * *>::VT
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ ; ATL::CVarTypeInfo<wchar_t * *>::pmField
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown *>::VT
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown *>::pmField
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown * *>::pmField
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	__GUID_0000010c_0000_0000_c000_000000000046
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch *>::VT
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch *>::pmField
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	??_C@_05GIBEAPNE@CLSID?$AA@			; `string'
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	_IID_IAxWinHostWindow
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch * *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY>::VT
PUBLIC	?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY>::pmField
PUBLIC	??_C@_05PDIKPLII@AppID?$AA@			; `string'
PUBLIC	?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY *>::VT
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY *>::pmField
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?chDirSep@ATL@@3DB				; ATL::chDirSep
PUBLIC	?chRightBracket@ATL@@3DB			; ATL::chRightBracket
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?chLeftBracket@ATL@@3DB				; ATL::chLeftBracket
PUBLIC	?chQuote@ATL@@3DB				; ATL::chQuote
PUBLIC	?chEquals@ATL@@3DB				; ATL::chEquals
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?szStringVal@ATL@@3QBDB				; ATL::szStringVal
PUBLIC	??_C@_01CPLAODJH@S?$AA@				; `string'
PUBLIC	?multiszStringVal@ATL@@3QBDB			; ATL::multiszStringVal
PUBLIC	_IID_IAxWinHostWindowLic
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	??_C@_01PLPBNMEI@M?$AA@				; `string'
PUBLIC	?szDwordVal@ATL@@3QBDB				; ATL::szDwordVal
PUBLIC	??_C@_01CKDDGHAB@D?$AA@				; `string'
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?szBinaryVal@ATL@@3QBDB				; ATL::szBinaryVal
PUBLIC	??_C@_01HMGJMAIH@B?$AA@				; `string'
PUBLIC	?szValToken@ATL@@3QBDB				; ATL::szValToken
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	??_C@_03LAIAPFCB@Val?$AA@			; `string'
PUBLIC	?szForceRemove@ATL@@3QBDB			; ATL::szForceRemove
PUBLIC	??_C@_0M@DBGDLGLL@ForceRemove?$AA@		; `string'
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?szNoRemove@ATL@@3QBDB				; ATL::szNoRemove
PUBLIC	??_C@_08KAAPDIAN@NoRemove?$AA@			; `string'
PUBLIC	?szDelete@ATL@@3QBDB				; ATL::szDelete
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	??_C@_06JBKGCNBB@Delete?$AA@			; `string'
PUBLIC	?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA	; ATL::CComApartment::ATL_CREATE_OBJECT
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	_IID_IAxWinAmbientDispatch
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A ; ATL::_pAtlAutoThreadModule
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?m_bInitFailed@CAtlBaseModule@ATL@@2_NA		; ATL::CAtlBaseModule::m_bInitFailed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	__GUID_00000000_0000_0000_0000_000000000000
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?MAX_VALUE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_VALUE
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?rgszNeverDelete@CRegParser@ATL@@1QBQBDB	; ATL::CRegParser::rgszNeverDelete
PUBLIC	?cbNeverDelete@CRegParser@ATL@@1HB		; ATL::CRegParser::cbNeverDelete
PUBLIC	?MAX_TYPE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_TYPE
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	_IID_IAxWinAmbientDispatchEx
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	_IID_IInternalConnection
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	__GUID_1cf2b120_547d_101b_8e65_08002b2bd119
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?_pAtlModule@ATL@@3PAVCAtlModule@1@A		; ATL::_pAtlModule
PUBLIC	?m_libid@CAtlModule@ATL@@2U_GUID@@A		; ATL::CAtlModule::m_libid
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	__GUID_00000146_0000_0000_c000_000000000046
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?VT@?$CVarTypeInfo@D@ATL@@2GB			; ATL::CVarTypeInfo<char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ ; ATL::CVarTypeInfo<char>::pmField
PUBLIC	?VT@?$CVarTypeInfo@E@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ ; ATL::CVarTypeInfo<unsigned char>::pmField
PUBLIC	_CLSID_Registrar
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?_Min@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Min
PUBLIC	?VT@?$CVarTypeInfo@PAD@ATL@@2GB			; ATL::CVarTypeInfo<char *>::VT
PUBLIC	?_Max@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Max
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ ; ATL::CVarTypeInfo<char *>::pmField
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?_Min@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Min
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?_Max@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Max
PUBLIC	?VT@?$CVarTypeInfo@PAE@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char *>::VT
PUBLIC	__GUID_00000109_0000_0000_c000_000000000046
PUBLIC	?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ ; ATL::CVarTypeInfo<unsigned char *>::pmField
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?_Min@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Min
PUBLIC	__GUID_b196b284_bab4_101a_b69c_00aa00341d07
PUBLIC	?_Max@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Max
PUBLIC	?VT@?$CVarTypeInfo@F@ATL@@2GB			; ATL::CVarTypeInfo<short>::VT
PUBLIC	_IID_IRegistrar
PUBLIC	?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ ; ATL::CVarTypeInfo<short>::pmField
PUBLIC	?_Min@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Min
PUBLIC	?_Max@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Max
PUBLIC	?VT@?$CVarTypeInfo@PAF@ATL@@2GB			; ATL::CVarTypeInfo<short *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ ; ATL::CVarTypeInfo<short *>::pmField
PUBLIC	?_Min@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Min
PUBLIC	__GUID_00000001_0000_0000_c000_000000000046
PUBLIC	?_Max@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Max
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?VT@?$CVarTypeInfo@G@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short>::VT
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ ; ATL::CVarTypeInfo<unsigned short>::pmField
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	__GUID_00020401_0000_0000_c000_000000000046
PUBLIC	?_Min@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Min
PUBLIC	_LIBID_ATLLib
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?_Max@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Max
PUBLIC	__GUID_00020412_0000_0000_c000_000000000046
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?VT@?$CVarTypeInfo@PAG@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short *>::VT
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ ; ATL::CVarTypeInfo<unsigned short *>::pmField
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?VT@?$CVarTypeInfo@H@ATL@@2GB			; ATL::CVarTypeInfo<int>::VT
PUBLIC	?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ ; ATL::CVarTypeInfo<int>::pmField
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?VT@?$CVarTypeInfo@PAH@ATL@@2GB			; ATL::CVarTypeInfo<int *>::VT
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ ; ATL::CVarTypeInfo<int *>::pmField
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?VT@?$CVarTypeInfo@I@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int>::VT
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ ; ATL::CVarTypeInfo<unsigned int>::pmField
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?VT@?$CVarTypeInfo@PAI@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ ; ATL::CVarTypeInfo<unsigned int *>::pmField
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?VT@?$CVarTypeInfo@J@ATL@@2GB			; ATL::CVarTypeInfo<long>::VT
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ ; ATL::CVarTypeInfo<long>::pmField
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?_pModule@ATL@@3PAVCComModule@1@A		; ATL::_pModule
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?VT@?$CVarTypeInfo@PAJ@ATL@@2GB			; ATL::CVarTypeInfo<long *>::VT
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ ; ATL::CVarTypeInfo<long *>::pmField
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	_IID_IDocHostUIHandlerDispatch
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?VT@?$CVarTypeInfo@K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long>::VT
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ ; ATL::CVarTypeInfo<unsigned long>::pmField
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?VT@?$CVarTypeInfo@PAK@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long *>::VT
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ ; ATL::CVarTypeInfo<unsigned long *>::pmField
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA
_BSS	SEGMENT
?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA DD 01H DUP (?) ; ATL::_pPerfRegFunc
_BSS	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZA
_BSS	SEGMENT
?_pPerfUnRegFunc@ATL@@3P6AJXZA DD 01H DUP (?)		; ATL::_pPerfUnRegFunc
_BSS	ENDS
;	COMDAT ?_AtlRegisterPerUser@ATL@@3_NA
_BSS	SEGMENT
?_AtlRegisterPerUser@ATL@@3_NA DB 01H DUP (?)		; ATL::_AtlRegisterPerUser
_BSS	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_BSS	SEGMENT
?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA DD 01H DUP (?) ; ATL::CComApartment::ATL_CREATE_OBJECT
_BSS	ENDS
;	COMDAT ?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A
_BSS	SEGMENT
?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A DD 01H DUP (?) ; ATL::_pAtlAutoThreadModule
_BSS	ENDS
;	COMDAT ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA
_BSS	SEGMENT
?m_bInitFailed@CAtlBaseModule@ATL@@2_NA DB 01H DUP (?)	; ATL::CAtlBaseModule::m_bInitFailed
_BSS	ENDS
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_BSS	SEGMENT
?_pAtlModule@ATL@@3PAVCAtlModule@1@A DD 01H DUP (?)	; ATL::_pAtlModule
_BSS	ENDS
;	COMDAT ?m_libid@CAtlModule@ATL@@2U_GUID@@A
_BSS	SEGMENT
?m_libid@CAtlModule@ATL@@2U_GUID@@A DB 010H DUP (?)	; ATL::CAtlModule::m_libid
_BSS	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_BSS	SEGMENT
?_pModule@ATL@@3PAVCComModule@1@A DD 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long *>::pmField
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAK@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAK@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned long *>::VT
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long>::pmField
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@K@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned long>::VT
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
_IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ DD 08H ; ATL::CVarTypeInfo<long *>::pmField
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAJ@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAJ@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<long *>::VT
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ DD 08H ; ATL::CVarTypeInfo<long>::pmField
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@J@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<long>::VT
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAI@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAI@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned int *>::VT
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int>::pmField
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@I@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@I@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned int>::VT
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ DD 08H ; ATL::CVarTypeInfo<int *>::pmField
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAH@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAH@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<int *>::VT
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ DD 08H ; ATL::CVarTypeInfo<int>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@H@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@H@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<int>::VT
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short *>::pmField
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAG@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAG@ATL@@2GB DW 04012H		; ATL::CVarTypeInfo<unsigned short *>::VT
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT __GUID_00020412_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020412_0000_0000_c000_000000000046 DD 020412H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Max@?$AtlLimits@_K@ATL@@2_KB DQ ffffffffffffffffH	; ATL::AtlLimits<unsigned __int64>::_Max
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT
_LIBID_ATLLib DD 044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Min@?$AtlLimits@_K@ATL@@2_KB DQ 0000000000000000H	; ATL::AtlLimits<unsigned __int64>::_Min
CONST	ENDS
;	COMDAT __GUID_00020401_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020401_0000_0000_c000_000000000046 DD 020401H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short>::pmField
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@G@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@G@ATL@@2GB DW 012H			; ATL::CVarTypeInfo<unsigned short>::VT
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Max@?$AtlLimits@_J@ATL@@2_JB DQ 7fffffffffffffffH	; ATL::AtlLimits<__int64>::_Max
CONST	ENDS
;	COMDAT __GUID_00000001_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000001_0000_0000_c000_000000000046 DD 01H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Min@?$AtlLimits@_J@ATL@@2_JB DQ 8000000000000000H	; ATL::AtlLimits<__int64>::_Min
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ DD 08H ; ATL::CVarTypeInfo<short *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAF@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAF@ATL@@2GB DW 04002H		; ATL::CVarTypeInfo<short *>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Max@?$AtlLimits@K@ATL@@2KB DD 0ffffffffH		; ATL::AtlLimits<unsigned long>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Min@?$AtlLimits@K@ATL@@2KB DD 00H			; ATL::AtlLimits<unsigned long>::_Min
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ DD 08H ; ATL::CVarTypeInfo<short>::pmField
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT
_IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@F@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@F@ATL@@2GB DW 02H			; ATL::CVarTypeInfo<short>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Max@?$AtlLimits@J@ATL@@2JB DD 07fffffffH		; ATL::AtlLimits<long>::_Max
CONST	ENDS
;	COMDAT __GUID_b196b284_bab4_101a_b69c_00aa00341d07
CONST	SEGMENT
__GUID_b196b284_bab4_101a_b69c_00aa00341d07 DD 0b196b284H
	DW	0bab4H
	DW	0101aH
	DB	0b6H
	DB	09cH
	DB	00H
	DB	0aaH
	DB	00H
	DB	034H
	DB	01dH
	DB	07H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Min@?$AtlLimits@J@ATL@@2JB DD 080000000H		; ATL::AtlLimits<long>::_Min
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT __GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
CONST	SEGMENT
__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713 DD 07fd52380H
	DW	04e07H
	DW	0101bH
	DB	0aeH
	DB	02dH
	DB	08H
	DB	00H
	DB	02bH
	DB	02eH
	DB	0c7H
	DB	013H
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char *>::pmField
CONST	ENDS
;	COMDAT __GUID_00000109_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000109_0000_0000_c000_000000000046 DD 0109H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAE@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAE@ATL@@2GB DW 04011H		; ATL::CVarTypeInfo<unsigned char *>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Max@?$AtlLimits@I@ATL@@2IB DD 0ffffffffH		; ATL::AtlLimits<unsigned int>::_Max
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Min@?$AtlLimits@I@ATL@@2IB DD 00H			; ATL::AtlLimits<unsigned int>::_Min
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ DD 08H ; ATL::CVarTypeInfo<char *>::pmField
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Max@?$AtlLimits@H@ATL@@2HB DD 07fffffffH		; ATL::AtlLimits<int>::_Max
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAD@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAD@ATL@@2GB DW 04010H		; ATL::CVarTypeInfo<char *>::VT
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Min@?$AtlLimits@H@ATL@@2HB DD 080000000H		; ATL::AtlLimits<int>::_Min
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT
_CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@E@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@E@ATL@@2GB DW 011H			; ATL::CVarTypeInfo<unsigned char>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ DD 08H ; ATL::CVarTypeInfo<char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@D@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@D@ATL@@2GB DW 010H			; ATL::CVarTypeInfo<char>::VT
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT __GUID_00000146_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000146_0000_0000_c000_000000000046 DD 0146H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT __GUID_1cf2b120_547d_101b_8e65_08002b2bd119
CONST	SEGMENT
__GUID_1cf2b120_547d_101b_8e65_08002b2bd119 DD 01cf2b120H
	DW	0547dH
	DW	0101bH
	DB	08eH
	DB	065H
	DB	08H
	DB	00H
	DB	02bH
	DB	02bH
	DB	0d1H
	DB	019H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT
_IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatchEx
CONST	SEGMENT
_IID_IAxWinAmbientDispatchEx DD 0b2d0778bH
	DW	0ac99H
	DW	04c58H
	DB	0a5H
	DB	0c8H
	DB	0e7H
	DB	072H
	DB	04eH
	DB	053H
	DB	016H
	DB	0b5H
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT __GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
CONST	SEGMENT
__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352 DD 0fc4801a3H
	DW	02ba9H
	DW	011cfH
	DB	0a2H
	DB	029H
	DB	00H
	DB	0aaH
	DB	00H
	DB	03dH
	DB	073H
	DB	052H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?MAX_TYPE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_TYPE@CRegParser@ATL@@1HB DD 01000H			; ATL::CRegParser::MAX_TYPE
CONST	ENDS
;	COMDAT ?cbNeverDelete@CRegParser@ATL@@1HB
CONST	SEGMENT
?cbNeverDelete@CRegParser@ATL@@1HB DD 0cH		; ATL::CRegParser::cbNeverDelete
CONST	ENDS
;	COMDAT ?rgszNeverDelete@CRegParser@ATL@@1QBQBDB
CONST	SEGMENT
?rgszNeverDelete@CRegParser@ATL@@1QBQBDB DD FLAT:??_C@_05PDIKPLII@AppID?$AA@ ; ATL::CRegParser::rgszNeverDelete
	DD	FLAT:??_C@_05GIBEAPNE@CLSID?$AA@
	DD	FLAT:??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
	DD	FLAT:??_C@_08PICKODJL@FileType?$AA@
	DD	FLAT:??_C@_09JKPGEJCH@Interface?$AA@
	DD	FLAT:??_C@_08PPIOJEA@Hardware?$AA@
	DD	FLAT:??_C@_04IHBFOLAC@Mime?$AA@
	DD	FLAT:??_C@_03DDIMFGBA@SAM?$AA@
	DD	FLAT:??_C@_08LOPHEHKG@SECURITY?$AA@
	DD	FLAT:??_C@_06FDHFNJBJ@SYSTEM?$AA@
	DD	FLAT:??_C@_08KEKAJNJI@Software?$AA@
	DD	FLAT:??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?MAX_VALUE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_VALUE@CRegParser@ATL@@1HB DD 01000H		; ATL::CRegParser::MAX_VALUE
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
CONST	SEGMENT
__GUID_00000000_0000_0000_0000_000000000000 DD 00H
	DW	00H
	DW	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT
_IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ??_C@_06JBKGCNBB@Delete?$AA@
CONST	SEGMENT
??_C@_06JBKGCNBB@Delete?$AA@ DB 'Delete', 00H		; `string'
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?szDelete@ATL@@3QBDB
CONST	SEGMENT
?szDelete@ATL@@3QBDB DD FLAT:??_C@_06JBKGCNBB@Delete?$AA@ ; ATL::szDelete
CONST	ENDS
;	COMDAT ??_C@_08KAAPDIAN@NoRemove?$AA@
CONST	SEGMENT
??_C@_08KAAPDIAN@NoRemove?$AA@ DB 'NoRemove', 00H	; `string'
CONST	ENDS
;	COMDAT ?szNoRemove@ATL@@3QBDB
CONST	SEGMENT
?szNoRemove@ATL@@3QBDB DD FLAT:??_C@_08KAAPDIAN@NoRemove?$AA@ ; ATL::szNoRemove
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ??_C@_0M@DBGDLGLL@ForceRemove?$AA@
CONST	SEGMENT
??_C@_0M@DBGDLGLL@ForceRemove?$AA@ DB 'ForceRemove', 00H ; `string'
CONST	ENDS
;	COMDAT ?szForceRemove@ATL@@3QBDB
CONST	SEGMENT
?szForceRemove@ATL@@3QBDB DD FLAT:??_C@_0M@DBGDLGLL@ForceRemove?$AA@ ; ATL::szForceRemove
CONST	ENDS
;	COMDAT ??_C@_03LAIAPFCB@Val?$AA@
CONST	SEGMENT
??_C@_03LAIAPFCB@Val?$AA@ DB 'Val', 00H			; `string'
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?szValToken@ATL@@3QBDB
CONST	SEGMENT
?szValToken@ATL@@3QBDB DD FLAT:??_C@_03LAIAPFCB@Val?$AA@ ; ATL::szValToken
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B?$AA@
CONST	SEGMENT
??_C@_01HMGJMAIH@B?$AA@ DB 'B', 00H			; `string'
CONST	ENDS
;	COMDAT ?szBinaryVal@ATL@@3QBDB
CONST	SEGMENT
?szBinaryVal@ATL@@3QBDB DD FLAT:??_C@_01HMGJMAIH@B?$AA@	; ATL::szBinaryVal
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D?$AA@
CONST	SEGMENT
??_C@_01CKDDGHAB@D?$AA@ DB 'D', 00H			; `string'
CONST	ENDS
;	COMDAT ?szDwordVal@ATL@@3QBDB
CONST	SEGMENT
?szDwordVal@ATL@@3QBDB DD FLAT:??_C@_01CKDDGHAB@D?$AA@	; ATL::szDwordVal
CONST	ENDS
;	COMDAT ??_C@_01PLPBNMEI@M?$AA@
CONST	SEGMENT
??_C@_01PLPBNMEI@M?$AA@ DB 'M', 00H			; `string'
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindowLic
CONST	SEGMENT
_IID_IAxWinHostWindowLic DD 03935bda8H
	DW	04ed9H
	DW	0495cH
	DB	086H
	DB	050H
	DB	0e0H
	DB	01fH
	DB	0c1H
	DB	0e3H
	DB	08aH
	DB	04bH
CONST	ENDS
;	COMDAT ?multiszStringVal@ATL@@3QBDB
CONST	SEGMENT
?multiszStringVal@ATL@@3QBDB DD FLAT:??_C@_01PLPBNMEI@M?$AA@ ; ATL::multiszStringVal
CONST	ENDS
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT
??_C@_01CPLAODJH@S?$AA@ DB 'S', 00H			; `string'
CONST	ENDS
;	COMDAT ?szStringVal@ATL@@3QBDB
CONST	SEGMENT
?szStringVal@ATL@@3QBDB DD FLAT:??_C@_01CPLAODJH@S?$AA@	; ATL::szStringVal
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?chEquals@ATL@@3DB
CONST	SEGMENT
?chEquals@ATL@@3DB DB 03dH				; ATL::chEquals
CONST	ENDS
;	COMDAT ?chQuote@ATL@@3DB
CONST	SEGMENT
?chQuote@ATL@@3DB DB 027H				; ATL::chQuote
CONST	ENDS
;	COMDAT ?chLeftBracket@ATL@@3DB
CONST	SEGMENT
?chLeftBracket@ATL@@3DB DB 07bH				; ATL::chLeftBracket
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?chRightBracket@ATL@@3DB
CONST	SEGMENT
?chRightBracket@ATL@@3DB DB 07dH			; ATL::chRightBracket
CONST	ENDS
;	COMDAT ?chDirSep@ATL@@3DB
CONST	SEGMENT
?chDirSep@ATL@@3DB DB 05cH				; ATL::chDirSep
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY *>::pmField
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB DW 04006H	; ATL::CVarTypeInfo<tagCY *>::VT
CONST	ENDS
;	COMDAT ??_C@_05PDIKPLII@AppID?$AA@
CONST	SEGMENT
??_C@_05PDIKPLII@AppID?$AA@ DB 'AppID', 00H		; `string'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB DW 06H		; ATL::CVarTypeInfo<tagCY>::VT
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB DW 04009H	; ATL::CVarTypeInfo<IDispatch * *>::VT
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT
_IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ??_C@_05GIBEAPNE@CLSID?$AA@
CONST	SEGMENT
??_C@_05GIBEAPNE@CLSID?$AA@ DB 'CLSID', 00H		; `string'
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch *>::pmField
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB DW 09H	; ATL::CVarTypeInfo<IDispatch *>::VT
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT __GUID_0000010c_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_0000010c_0000_0000_c000_000000000046 DD 010cH
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB DW 0400dH	; ATL::CVarTypeInfo<IUnknown * *>::VT
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown *>::pmField
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB DW 0dH	; ATL::CVarTypeInfo<IUnknown *>::VT
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t * *>::pmField
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB DW 04008H		; ATL::CVarTypeInfo<wchar_t * *>::VT
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_W@ATL@@2GB DW 08H			; ATL::CVarTypeInfo<wchar_t *>::VT
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT __GUID_0002e012_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_0002e012_0000_0000_c000_000000000046 DD 02e012H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB DW 0400cH	; ATL::CVarTypeInfo<tagVARIANT *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ DD 08H ; ATL::CVarTypeInfo<double *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAN@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAN@ATL@@2GB DW 04005H		; ATL::CVarTypeInfo<double *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ DD 08H ; ATL::CVarTypeInfo<double>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@N@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@N@ATL@@2GB DW 05H			; ATL::CVarTypeInfo<double>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ DD 08H ; ATL::CVarTypeInfo<float *>::pmField
CONST	ENDS
;	COMDAT __GUID_00020400_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020400_0000_0000_c000_000000000046 DD 020400H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAM@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAM@ATL@@2GB DW 04004H		; ATL::CVarTypeInfo<float *>::VT
CONST	ENDS
;	COMDAT __GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
CONST	SEGMENT
__GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851 DD 0a6bc3ac0H
	DW	0dbaaH
	DW	011ceH
	DB	09dH
	DB	0e3H
	DB	00H
	DB	0aaH
	DB	00H
	DB	04bH
	DB	0b8H
	DB	051H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ DD 08H ; ATL::CVarTypeInfo<float>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@M@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@M@ATL@@2GB DW 04H			; ATL::CVarTypeInfo<float>::VT
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000000_0000_0000_c000_000000000046 DD 00H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_K@ATL@@2GB DW 04015H		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
CONST	ENDS
;	COMDAT ??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	SEGMENT
??_C@_07KJLOKDKB@TypeLib?$AA@ DB 'TypeLib', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KEKAJNJI@Software?$AA@
CONST	SEGMENT
??_C@_08KEKAJNJI@Software?$AA@ DB 'Software', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDHFNJBJ@SYSTEM?$AA@
CONST	SEGMENT
??_C@_06FDHFNJBJ@SYSTEM?$AA@ DB 'SYSTEM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LOPHEHKG@SECURITY?$AA@
CONST	SEGMENT
??_C@_08LOPHEHKG@SECURITY?$AA@ DB 'SECURITY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03DDIMFGBA@SAM?$AA@
CONST	SEGMENT
??_C@_03DDIMFGBA@SAM?$AA@ DB 'SAM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IHBFOLAC@Mime?$AA@
CONST	SEGMENT
??_C@_04IHBFOLAC@Mime?$AA@ DB 'Mime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPIOJEA@Hardware?$AA@
CONST	SEGMENT
??_C@_08PPIOJEA@Hardware?$AA@ DB 'Hardware', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JKPGEJCH@Interface?$AA@
CONST	SEGMENT
??_C@_09JKPGEJCH@Interface?$AA@ DB 'Interface', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PICKODJL@FileType?$AA@
CONST	SEGMENT
??_C@_08PICKODJL@FileType?$AA@ DB 'FileType', 00H	; `string'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64>::pmField
CONST	ENDS
;	COMDAT ??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
CONST	SEGMENT
??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@ DB 'Component Categories', 00H ; `string'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_K@ATL@@2GB DW 015H			; ATL::CVarTypeInfo<unsigned __int64>::VT
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_J@ATL@@2GB DW 04014H		; ATL::CVarTypeInfo<__int64 *>::VT
CONST	ENDS
;	COMDAT ___pobjMapEntryLast
ATL$__z	SEGMENT
___pobjMapEntryLast DD 00H
ATL$__z	ENDS
;	COMDAT ___pobjMapEntryFirst
ATL$__a	SEGMENT
___pobjMapEntryFirst DD 00H
ATL$__a	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_J@ATL@@2GB DW 014H			; ATL::CVarTypeInfo<__int64>::VT
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??1CComBSTR@ATL@@QAE@XZ				; ATL::CComBSTR::~CComBSTR
PUBLIC	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
PUBLIC	??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
PUBLIC	??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z		; _com_error::_com_error
PUBLIC	??0_com_error@@QAE@ABV0@@Z			; _com_error::_com_error
PUBLIC	??1_com_error@@UAE@XZ				; _com_error::~_com_error
PUBLIC	?Error@_com_error@@QBEJXZ			; _com_error::Error
PUBLIC	??_G_com_error@@UAEPAXI@Z			; _com_error::`scalar deleting destructor'
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?CheckHR@@YAXJ@Z				; CheckHR
PUBLIC	??0ImageBuffer@@QAE@XZ				; ImageBuffer::ImageBuffer
PUBLIC	??1ImageBuffer@@UAE@XZ				; ImageBuffer::~ImageBuffer
PUBLIC	?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z ; ImageBuffer::Setup
PUBLIC	?Cleanup@ImageBuffer@@QAEXXZ			; ImageBuffer::Cleanup
PUBLIC	?IsReady@ImageBuffer@@QAEHXZ			; ImageBuffer::IsReady
PUBLIC	?SetChromaKey@ImageBuffer@@QAEXK@Z		; ImageBuffer::SetChromaKey
PUBLIC	?UpdateFrontWindowRect@ImageBuffer@@QAEXPAUtagRECT@@@Z ; ImageBuffer::UpdateFrontWindowRect
PUBLIC	?AttachSurfaces@ImageBuffer@@QAEXPAVDisplayDevice@@PAUIDirectDrawSurface7@@1@Z ; ImageBuffer::AttachSurfaces
PUBLIC	?targetXres@ImageBuffer@@QAEHXZ			; ImageBuffer::targetXres
PUBLIC	?targetYres@ImageBuffer@@QAEHXZ			; ImageBuffer::targetYres
PUBLIC	?GetColorMasks@ImageBuffer@@QAEXPAK00@Z		; ImageBuffer::GetColorMasks
PUBLIC	?PixelSize@ImageBuffer@@QAEHXZ			; ImageBuffer::PixelSize
PUBLIC	?RestoreAll@ImageBuffer@@QAEXXZ			; ImageBuffer::RestoreAll
PUBLIC	?Lock@ImageBuffer@@QAEPAX_N0@Z			; ImageBuffer::Lock
PUBLIC	?Unlock@ImageBuffer@@QAEXXZ			; ImageBuffer::Unlock
PUBLIC	?Pixel32toPixel16@ImageBuffer@@QAEGK@Z		; ImageBuffer::Pixel32toPixel16
PUBLIC	?Pixel16toPixel32@ImageBuffer@@QAEKG@Z		; ImageBuffer::Pixel16toPixel32
PUBLIC	?Pixel32toPixel32@ImageBuffer@@QAEKK@Z		; ImageBuffer::Pixel32toPixel32
PUBLIC	?Pixel@ImageBuffer@@QAEPAXPAXHH@Z		; ImageBuffer::Pixel
PUBLIC	?Compose@ImageBuffer@@QAEXPAV1@PAUtagRECT@@1@Z	; ImageBuffer::Compose
PUBLIC	?ComposeTransparent@ImageBuffer@@QAEXPAV1@PAUtagRECT@@1@Z ; ImageBuffer::ComposeTransparent
PUBLIC	?ComposeRot@ImageBuffer@@QAEXPAV1@PAUtagRECT@@1M@Z ; ImageBuffer::ComposeRot
PUBLIC	?ComposeRoundRot@ImageBuffer@@QAEXPAV1@PAUtagRECT@@1MPAH@Z ; ImageBuffer::ComposeRoundRot
PUBLIC	?SwapBuffers@ImageBuffer@@QAEX_N@Z		; ImageBuffer::SwapBuffers
PUBLIC	?BackBufferToRAW@ImageBuffer@@QAEXPAD@Z		; ImageBuffer::BackBufferToRAW
PUBLIC	?Clear@ImageBuffer@@QAEXK@Z			; ImageBuffer::Clear
PUBLIC	?ComputeColorShifts@ImageBuffer@@IAEXXZ		; ImageBuffer::ComputeColorShifts
PUBLIC	??_GImageBuffer@@UAEPAXI@Z			; ImageBuffer::`scalar deleting destructor'
PUBLIC	?GetMPRdevice@DisplayDevice@@QAEPAUIDirectDraw7@@XZ ; DisplayDevice::GetMPRdevice
PUBLIC	?GetDefaultRC@DisplayDevice@@QAEPAVDXContext@@XZ ; DisplayDevice::GetDefaultRC
PUBLIC	??$?0UIDirectDraw7@@@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@PAUIDirectDraw7@@@Z ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> ><IDirectDraw7>
PUBLIC	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >
PUBLIC	??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDraw7@@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator->
PUBLIC	?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_Release
PUBLIC	?_AddRef@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_AddRef
PUBLIC	??0?$_com_ptr_t@V?$_com_IIID@UIDirectDrawClipper@@$1?IID_IDirectDrawClipper@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >::_com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >
PUBLIC	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawClipper@@$1?IID_IDirectDrawClipper@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >::~_com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >
PUBLIC	??B?$_com_ptr_t@V?$_com_IIID@UIDirectDrawClipper@@$1?IID_IDirectDrawClipper@@3U_GUID@@B@@@@QBEPAUIDirectDrawClipper@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >::operator IDirectDrawClipper *
PUBLIC	??I?$_com_ptr_t@V?$_com_IIID@UIDirectDrawClipper@@$1?IID_IDirectDrawClipper@@3U_GUID@@B@@@@QAEPAPAUIDirectDrawClipper@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >::operator&
PUBLIC	??C?$_com_ptr_t@V?$_com_IIID@UIDirectDrawClipper@@$1?IID_IDirectDrawClipper@@3U_GUID@@B@@@@QBEPAUIDirectDrawClipper@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >::operator->
PUBLIC	?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawClipper@@$1?IID_IDirectDrawClipper@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >::_Release
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7_com_error@@6B@				; _com_error::`vftable'
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	__TI1?AV_com_error@@
PUBLIC	__CTA1?AV_com_error@@
PUBLIC	??_R0?AV_com_error@@@8				; _com_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AV_com_error@@@8??0_com_error@@QAE@ABV0@@Z16
PUBLIC	??_7ImageBuffer@@6B@				; ImageBuffer::`vftable'
PUBLIC	??_C@_0DD@IEALHDHA@ImageBuffer?3?3Setup?5?9?5EVICTING?5MA@ ; `string'
PUBLIC	??_C@_0CB@MGIIHDAM@ImageBuffer?3?3Setup?5?9?5Error?50x?$CFX?6@ ; `string'
PUBLIC	??_C@_0CK@OHELCDCI@ImageBuffer?3?3AttachSurfaces?5?9?5Er@ ; `string'
PUBLIC	??_C@_0CL@PJFFNFOB@ImageBuffer?3?3Lock?5?9?5Lock?5failed?5@ ; `string'
PUBLIC	??_C@_0CD@OMFHGJNJ@ImageBuffer?3?3Compose?5?9?5Error?50x?$CF@ ; `string'
PUBLIC	??_C@_0CO@NCAIJIBM@ImageBuffer?3?3ComposeTransparent?5@ ; `string'
PUBLIC	??_C@_0CH@HLEJFCOI@ImageBuffer?3?3SwapBuffers?5?9?5Error@ ; `string'
PUBLIC	??_C@_04LJDDIHIK@?4bmp?$AA@			; `string'
PUBLIC	??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@		; `string'
PUBLIC	??_C@_0CC@MACJCBBP@Failed?5to?5write?5screen?5dump?5file@ ; `string'
PUBLIC	??_C@_0M@CFLADCE@Feb?518?52013?$AA@		; `string'
PUBLIC	??_C@_0N@BGGELBOB@Imagebuf?4cpp?$AA@		; `string'
PUBLIC	??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0CB@EOAPAJGF@Couldn?8t?5write?5screen?5dump?5file?4@ ; `string'
PUBLIC	??_C@_0CK@GOCDMECF@ImageBuffer?3?3RestoreAll?5?9?5Front?5@ ; `string'
PUBLIC	??_C@_0CJ@DOOGKKKM@ImageBuffer?3?3RestoreAll?5?9?5Back?5r@ ; `string'
PUBLIC	??_C@_0DJ@FFLHDDCB@ImageBuffer?3?3RestoreAll?5?9?5Failed@ ; `string'
PUBLIC	??_C@_0DK@FJKIHOJG@ImageBuffer?3?3RestoreAll?5?9?5Failed@ ; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4_com_error@@6B@				; _com_error::`RTTI Complete Object Locator'
PUBLIC	??_R3_com_error@@8				; _com_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_com_error@@8				; _com_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_com_error@@8			; _com_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ImageBuffer@@6B@				; ImageBuffer::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVImageBuffer@@@8				; ImageBuffer `RTTI Type Descriptor'
PUBLIC	??_R3ImageBuffer@@8				; ImageBuffer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ImageBuffer@@8				; ImageBuffer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ImageBuffer@@8			; ImageBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@4522f983
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_exit:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strcat:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	__imp__WriteFile@20:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	__imp__LocalFree@4:PROC
EXTRN	__imp__FormatMessageA@28:PROC
EXTRN	__imp__GetClientRect@8:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	__imp__ClientToScreen@8:PROC
EXTRN	__imp__SysFreeString@4:PROC
EXTRN	__imp__GetErrorInfo@8:PROC
EXTRN	_sprintf:PROC
EXTRN	?_com_issue_error@@YGXJ@Z:PROC			; _com_issue_error
EXTRN	??_E_com_error@@UAEPAXI@Z:PROC			; _com_error::`vector deleting destructor'
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	??_EImageBuffer@@UAEPAXI@Z:PROC			; ImageBuffer::`vector deleting destructor'
EXTRN	?RotateBitmapMask@@YAXPAVImageBuffer@@0HPAUtagRECT@@1PAH@Z:PROC ; RotateBitmapMask
EXTRN	?RotateBitmap@@YAXPAVImageBuffer@@0HPAUtagRECT@@1@Z:PROC ; RotateBitmap
EXTRN	?RotateBitmapMaskDouble@@YAXPAVImageBuffer@@0HPAUtagRECT@@1PAH@Z:PROC ; RotateBitmapMaskDouble
EXTRN	?RotateBitmapDouble@@YAXPAVImageBuffer@@0HPAUtagRECT@@1@Z:PROC ; RotateBitmapDouble
EXTRN	_MonoPrint:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	_IID_IDirectDrawSurface7:BYTE
EXTRN	?g_bCheckBltStatusBeforeFlip@@3_NA:BYTE		; g_bCheckBltStatusBeforeFlip
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@4522f983
CONST	SEGMENT
__real@4522f983 DD 04522f983r			; 2607.59
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@ImageBuffer@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ImageBuffer@@8 DD FLAT:??_R0?AVImageBuffer@@@8 ; ImageBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ImageBuffer@@8
rdata$r	ENDS
;	COMDAT ??_R2ImageBuffer@@8
rdata$r	SEGMENT
??_R2ImageBuffer@@8 DD FLAT:??_R1A@?0A@EA@ImageBuffer@@8 ; ImageBuffer::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ImageBuffer@@8
rdata$r	SEGMENT
??_R3ImageBuffer@@8 DD 00H				; ImageBuffer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ImageBuffer@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVImageBuffer@@@8
_DATA	SEGMENT
??_R0?AVImageBuffer@@@8 DD FLAT:??_7type_info@@6B@	; ImageBuffer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVImageBuffer@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ImageBuffer@@6B@
rdata$r	SEGMENT
??_R4ImageBuffer@@6B@ DD 00H				; ImageBuffer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVImageBuffer@@@8
	DD	FLAT:??_R3ImageBuffer@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_com_error@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_com_error@@8 DD FLAT:??_R0?AV_com_error@@@8 ; _com_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_com_error@@8
rdata$r	ENDS
;	COMDAT ??_R2_com_error@@8
rdata$r	SEGMENT
??_R2_com_error@@8 DD FLAT:??_R1A@?0A@EA@_com_error@@8	; _com_error::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_com_error@@8
rdata$r	SEGMENT
??_R3_com_error@@8 DD 00H				; _com_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_com_error@@8
rdata$r	ENDS
;	COMDAT ??_R4_com_error@@6B@
rdata$r	SEGMENT
??_R4_com_error@@6B@ DD 00H				; _com_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_com_error@@@8
	DD	FLAT:??_R3_com_error@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@FJKIHOJG@ImageBuffer?3?3RestoreAll?5?9?5Failed@
CONST	SEGMENT
??_C@_0DK@FJKIHOJG@ImageBuffer?3?3RestoreAll?5?9?5Failed@ DB 'ImageBuffer'
	DB	'::RestoreAll - Failed to restore front (0x%X)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@FFLHDDCB@ImageBuffer?3?3RestoreAll?5?9?5Failed@
CONST	SEGMENT
??_C@_0DJ@FFLHDDCB@ImageBuffer?3?3RestoreAll?5?9?5Failed@ DB 'ImageBuffer'
	DB	'::RestoreAll - Failed to restore back (0x%X)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@DOOGKKKM@ImageBuffer?3?3RestoreAll?5?9?5Back?5r@
CONST	SEGMENT
??_C@_0CJ@DOOGKKKM@ImageBuffer?3?3RestoreAll?5?9?5Back?5r@ DB 'ImageBuffe'
	DB	'r::RestoreAll - Back restored', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@GOCDMECF@ImageBuffer?3?3RestoreAll?5?9?5Front?5@
CONST	SEGMENT
??_C@_0CK@GOCDMECF@ImageBuffer?3?3RestoreAll?5?9?5Front?5@ DB 'ImageBuffe'
	DB	'r::RestoreAll - Front restored', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@EOAPAJGF@Couldn?8t?5write?5screen?5dump?5file?4@
CONST	SEGMENT
??_C@_0CB@EOAPAJGF@Couldn?8t?5write?5screen?5dump?5file?4@ DB 'Couldn''t '
	DB	'write screen dump file.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@ DB 'Error:  %'
	DB	'0d  %s  %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BGGELBOB@Imagebuf?4cpp?$AA@
CONST	SEGMENT
??_C@_0N@BGGELBOB@Imagebuf?4cpp?$AA@ DB 'Imagebuf.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
CONST	SEGMENT
??_C@_0M@CFLADCE@Feb?518?52013?$AA@ DB 'Feb 18 2013', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@MACJCBBP@Failed?5to?5write?5screen?5dump?5file@
CONST	SEGMENT
??_C@_0CC@MACJCBBP@Failed?5to?5write?5screen?5dump?5file@ DB 'Failed to w'
	DB	'rite screen dump file.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@
CONST	SEGMENT
??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@ DB '%s%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LJDDIHIK@?4bmp?$AA@
CONST	SEGMENT
??_C@_04LJDDIHIK@?4bmp?$AA@ DB '.bmp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@HLEJFCOI@ImageBuffer?3?3SwapBuffers?5?9?5Error@
CONST	SEGMENT
??_C@_0CH@HLEJFCOI@ImageBuffer?3?3SwapBuffers?5?9?5Error@ DB 'ImageBuffer'
	DB	'::SwapBuffers - Error 0x%X', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@NCAIJIBM@ImageBuffer?3?3ComposeTransparent?5@
CONST	SEGMENT
??_C@_0CO@NCAIJIBM@ImageBuffer?3?3ComposeTransparent?5@ DB 'ImageBuffer::'
	DB	'ComposeTransparent - Error 0x%X', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@OMFHGJNJ@ImageBuffer?3?3Compose?5?9?5Error?50x?$CF@
CONST	SEGMENT
??_C@_0CD@OMFHGJNJ@ImageBuffer?3?3Compose?5?9?5Error?50x?$CF@ DB 'ImageBu'
	DB	'ffer::Compose - Error 0x%X', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@PJFFNFOB@ImageBuffer?3?3Lock?5?9?5Lock?5failed?5@
CONST	SEGMENT
??_C@_0CL@PJFFNFOB@ImageBuffer?3?3Lock?5?9?5Lock?5failed?5@ DB 'ImageBuff'
	DB	'er::Lock - Lock failed with 0x%X', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@OHELCDCI@ImageBuffer?3?3AttachSurfaces?5?9?5Er@
CONST	SEGMENT
??_C@_0CK@OHELCDCI@ImageBuffer?3?3AttachSurfaces?5?9?5Er@ DB 'ImageBuffer'
	DB	'::AttachSurfaces - Error 0x%X', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MGIIHDAM@ImageBuffer?3?3Setup?5?9?5Error?50x?$CFX?6@
CONST	SEGMENT
??_C@_0CB@MGIIHDAM@ImageBuffer?3?3Setup?5?9?5Error?50x?$CFX?6@ DB 'ImageB'
	DB	'uffer::Setup - Error 0x%X', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@IEALHDHA@ImageBuffer?3?3Setup?5?9?5EVICTING?5MA@
CONST	SEGMENT
??_C@_0DD@IEALHDHA@ImageBuffer?3?3Setup?5?9?5EVICTING?5MA@ DB 'ImageBuffe'
	DB	'r::Setup - EVICTING MANAGED TEXTURES !!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_7ImageBuffer@@6B@
CONST	SEGMENT
??_7ImageBuffer@@6B@ DD FLAT:??_R4ImageBuffer@@6B@	; ImageBuffer::`vftable'
	DD	FLAT:??_EImageBuffer@@UAEPAXI@Z
CONST	ENDS
;	COMDAT __CT??_R0?AV_com_error@@@8??0_com_error@@QAE@ABV0@@Z16
xdata$x	SEGMENT
__CT??_R0?AV_com_error@@@8??0_com_error@@QAE@ABV0@@Z16 DD 00H
	DD	FLAT:??_R0?AV_com_error@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	010H
	DD	FLAT:??0_com_error@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AV_com_error@@@8
_DATA	SEGMENT
??_R0?AV_com_error@@@8 DD FLAT:??_7type_info@@6B@	; _com_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_com_error@@', 00H
_DATA	ENDS
;	COMDAT __CTA1?AV_com_error@@
xdata$x	SEGMENT
__CTA1?AV_com_error@@ DD 01H
	DD	FLAT:__CT??_R0?AV_com_error@@@8??0_com_error@@QAE@ABV0@@Z16
xdata$x	ENDS
;	COMDAT __TI1?AV_com_error@@
xdata$x	SEGMENT
__TI1?AV_com_error@@ DD 00H
	DD	FLAT:??1_com_error@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA1?AV_com_error@@
xdata$x	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7_com_error@@6B@
CONST	SEGMENT
??_7_com_error@@6B@ DD FLAT:??_R4_com_error@@6B@	; _com_error::`vftable'
	DD	FLAT:??_E_com_error@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__catchsym$?AttachSurfaces@ImageBuffer@@QAEXPAVDisplayDevice@@PAUIDirectDrawSurface7@@1@Z$3 DD 00H
	DD	FLAT:??_R0?AV_com_error@@@8
	DD	0ffffffccH
	DD	FLAT:__catch$?AttachSurfaces@ImageBuffer@@QAEXPAVDisplayDevice@@PAUIDirectDrawSurface7@@1@Z$0
__unwindtable$?AttachSurfaces@ImageBuffer@@QAEXPAVDisplayDevice@@PAUIDirectDrawSurface7@@1@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__catchsym$?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z$5 DD 00H
	DD	FLAT:??_R0?AV_com_error@@@8
	DD	0fffffdf4H
	DD	FLAT:__catch$?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z$0
__tryblocktable$?AttachSurfaces@ImageBuffer@@QAEXPAVDisplayDevice@@PAUIDirectDrawSurface7@@1@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?AttachSurfaces@ImageBuffer@@QAEXPAVDisplayDevice@@PAUIDirectDrawSurface7@@1@Z$3
__tryblocktable$?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z DD 00H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z$5
__unwindtable$?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z$3
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?AttachSurfaces@ImageBuffer@@QAEXPAVDisplayDevice@@PAUIDirectDrawSurface7@@1@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?AttachSurfaces@ImageBuffer@@QAEXPAVDisplayDevice@@PAUIDirectDrawSurface7@@1@Z
	DD	01H
	DD	FLAT:__tryblocktable$?AttachSurfaces@ImageBuffer@@QAEXPAVDisplayDevice@@PAUIDirectDrawSurface7@@1@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawClipper@@$1?IID_IDirectDrawClipper@@3U_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawClipper@@$1?IID_IDirectDrawClipper@@3U_GUID@@B@@@@AAEXXZ PROC ; _com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >::_Release, COMDAT
; _this$ = ecx

; 780  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 781  :         if (m_pInterface != NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release

; 782  :             m_pInterface->Release();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN2@Release:

; 783  :         }
; 784  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawClipper@@$1?IID_IDirectDrawClipper@@3U_GUID@@B@@@@AAEXXZ ENDP ; _com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??C?$_com_ptr_t@V?$_com_IIID@UIDirectDrawClipper@@$1?IID_IDirectDrawClipper@@3U_GUID@@B@@@@QBEPAUIDirectDrawClipper@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$_com_ptr_t@V?$_com_IIID@UIDirectDrawClipper@@$1?IID_IDirectDrawClipper@@3U_GUID@@B@@@@QBEPAUIDirectDrawClipper@@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >::operator->, COMDAT
; _this$ = ecx

; 401  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  :         if (m_pInterface == NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@operator

; 403  :             _com_issue_error(E_POINTER);

	push	-2147467261				; 80004003H
	call	?_com_issue_error@@YGXJ@Z		; _com_issue_error
$LN1@operator:

; 404  :         }
; 405  : 
; 406  :         return m_pInterface; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
$LN3@operator:

; 407  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??C?$_com_ptr_t@V?$_com_IIID@UIDirectDrawClipper@@$1?IID_IDirectDrawClipper@@3U_GUID@@B@@@@QBEPAUIDirectDrawClipper@@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >::operator->
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??I?$_com_ptr_t@V?$_com_IIID@UIDirectDrawClipper@@$1?IID_IDirectDrawClipper@@3U_GUID@@B@@@@QAEPAPAUIDirectDrawClipper@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$_com_ptr_t@V?$_com_IIID@UIDirectDrawClipper@@$1?IID_IDirectDrawClipper@@3U_GUID@@B@@@@QAEPAPAUIDirectDrawClipper@@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >::operator&, COMDAT
; _this$ = ecx

; 391  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 392  :         _Release();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawClipper@@$1?IID_IDirectDrawClipper@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >::_Release

; 393  :         m_pInterface = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 394  :         return &m_pInterface;

	mov	eax, DWORD PTR _this$[ebp]

; 395  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??I?$_com_ptr_t@V?$_com_IIID@UIDirectDrawClipper@@$1?IID_IDirectDrawClipper@@3U_GUID@@B@@@@QAEPAPAUIDirectDrawClipper@@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >::operator&
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??B?$_com_ptr_t@V?$_com_IIID@UIDirectDrawClipper@@$1?IID_IDirectDrawClipper@@3U_GUID@@B@@@@QBEPAUIDirectDrawClipper@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$_com_ptr_t@V?$_com_IIID@UIDirectDrawClipper@@$1?IID_IDirectDrawClipper@@3U_GUID@@B@@@@QBEPAUIDirectDrawClipper@@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >::operator IDirectDrawClipper *, COMDAT
; _this$ = ecx

; 358  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 359  :         return m_pInterface; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 360  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$_com_ptr_t@V?$_com_IIID@UIDirectDrawClipper@@$1?IID_IDirectDrawClipper@@3U_GUID@@B@@@@QBEPAUIDirectDrawClipper@@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >::operator IDirectDrawClipper *
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawClipper@@$1?IID_IDirectDrawClipper@@3U_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawClipper@@$1?IID_IDirectDrawClipper@@3U_GUID@@B@@@@QAE@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >::~_com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >, COMDAT
; _this$ = ecx

; 315  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 316  :         _Release(); 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDrawClipper@@$1?IID_IDirectDrawClipper@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >::_Release

; 317  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawClipper@@$1?IID_IDirectDrawClipper@@3U_GUID@@B@@@@QAE@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >::~_com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??0?$_com_ptr_t@V?$_com_IIID@UIDirectDrawClipper@@$1?IID_IDirectDrawClipper@@3U_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_com_ptr_t@V?$_com_IIID@UIDirectDrawClipper@@$1?IID_IDirectDrawClipper@@3U_GUID@@B@@@@QAE@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >::_com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >, COMDAT
; _this$ = ecx

; 135  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 136  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_com_ptr_t@V?$_com_IIID@UIDirectDrawClipper@@$1?IID_IDirectDrawClipper@@3U_GUID@@B@@@@QAE@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >::_com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ?_AddRef@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_AddRef@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ PROC ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_AddRef, COMDAT
; _this$ = ecx

; 789  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 790  :         if (m_pInterface != NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@AddRef

; 791  :             m_pInterface->AddRef();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+4]
	call	eax
$LN2@AddRef:

; 792  :         }
; 793  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_AddRef@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ ENDP ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_AddRef
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ PROC ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_Release, COMDAT
; _this$ = ecx

; 780  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 781  :         if (m_pInterface != NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release

; 782  :             m_pInterface->Release();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN2@Release:

; 783  :         }
; 784  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ ENDP ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDraw7@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDraw7@@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator->, COMDAT
; _this$ = ecx

; 401  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  :         if (m_pInterface == NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@operator

; 403  :             _com_issue_error(E_POINTER);

	push	-2147467261				; 80004003H
	call	?_com_issue_error@@YGXJ@Z		; _com_issue_error
$LN1@operator:

; 404  :         }
; 405  : 
; 406  :         return m_pInterface; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
$LN3@operator:

; 407  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDraw7@@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator->
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??1?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ PROC ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >, COMDAT
; _this$ = ecx

; 315  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 316  :         _Release(); 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Release@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_Release

; 317  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ENDP ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comip.h
;	COMDAT ??$?0UIDirectDraw7@@@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@PAUIDirectDraw7@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pInterface$ = 8					; size = 4
??$?0UIDirectDraw7@@@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@PAUIDirectDraw7@@@Z PROC ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> ><IDirectDraw7>, COMDAT
; _this$ = ecx

; 168  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pInterface$[ebp]
	mov	DWORD PTR [eax], ecx

; 169  :         _AddRef(); 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_AddRef@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_AddRef

; 170  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0UIDirectDraw7@@@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@PAUIDirectDraw7@@@Z ENDP ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> ><IDirectDraw7>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\device.h
;	COMDAT ?GetDefaultRC@DisplayDevice@@QAEPAVDXContext@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDefaultRC@DisplayDevice@@QAEPAVDXContext@@XZ PROC	; DisplayDevice::GetDefaultRC, COMDAT
; _this$ = ecx

; 29   : 	DXContext *GetDefaultRC( void )			{ return m_DXCtx; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDefaultRC@DisplayDevice@@QAEPAVDXContext@@XZ ENDP	; DisplayDevice::GetDefaultRC
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\device.h
;	COMDAT ?GetMPRdevice@DisplayDevice@@QAEPAUIDirectDraw7@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMPRdevice@DisplayDevice@@QAEPAUIDirectDraw7@@XZ PROC ; DisplayDevice::GetMPRdevice, COMDAT
; _this$ = ecx

; 27   : 	IDirectDraw7 *GetMPRdevice( void )			{ return m_DXCtx->m_pDD; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMPRdevice@DisplayDevice@@QAEPAUIDirectDraw7@@XZ ENDP ; DisplayDevice::GetMPRdevice
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GImageBuffer@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GImageBuffer@@UAEPAXI@Z PROC				; ImageBuffer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ImageBuffer@@UAE@XZ			; ImageBuffer::~ImageBuffer
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GImageBuffer@@UAEPAXI@Z ENDP				; ImageBuffer::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\imagebuf.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_mask$ = -4						; size = 4
?ComputeColorShifts@ImageBuffer@@IAEXXZ PROC		; ImageBuffer::ComputeColorShifts
; _this$ = ecx

; 558  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 559  : 	UInt32	mask;
; 560  : 
; 561  : 	// RED
; 562  : 	mask = m_ddsdFront.ddpfPixelFormat.dwRBitMask;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _mask$[ebp], ecx

; 563  : 	redShift = 8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+300], 8
$LN12@ComputeCol:

; 564  : 	ShiAssert( mask );
; 565  : 	while( !(mask & 1) ) {

	mov	eax, DWORD PTR _mask$[ebp]
	and	eax, 1
	jne	SHORT $LN10@ComputeCol

; 566  : 		mask >>= 1;

	mov	ecx, DWORD PTR _mask$[ebp]
	shr	ecx, 1
	mov	DWORD PTR _mask$[ebp], ecx

; 567  : 		redShift--;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+300]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+300], eax

; 568  : 	}

	jmp	SHORT $LN12@ComputeCol
$LN10@ComputeCol:

; 569  : 	while( mask & 1 ) {

	mov	edx, DWORD PTR _mask$[ebp]
	and	edx, 1
	je	SHORT $LN9@ComputeCol

; 570  : 		mask >>= 1;

	mov	eax, DWORD PTR _mask$[ebp]
	shr	eax, 1
	mov	DWORD PTR _mask$[ebp], eax

; 571  : 		redShift--;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+300]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+300], edx

; 572  : 	}

	jmp	SHORT $LN10@ComputeCol
$LN9@ComputeCol:

; 573  : 
; 574  : 	// GREEN
; 575  : 	mask = m_ddsdFront.ddpfPixelFormat.dwGBitMask;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR _mask$[ebp], edx

; 576  : 	greenShift = 16;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+304], 16			; 00000010H
$LN8@ComputeCol:

; 577  : 	ShiAssert( mask );
; 578  : 	while( !(mask & 1) ) {

	mov	ecx, DWORD PTR _mask$[ebp]
	and	ecx, 1
	jne	SHORT $LN6@ComputeCol

; 579  : 		mask >>= 1;

	mov	edx, DWORD PTR _mask$[ebp]
	shr	edx, 1
	mov	DWORD PTR _mask$[ebp], edx

; 580  : 		greenShift--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+304]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+304], ecx

; 581  : 	}

	jmp	SHORT $LN8@ComputeCol
$LN6@ComputeCol:

; 582  : 	while( mask & 1 ) {

	mov	eax, DWORD PTR _mask$[ebp]
	and	eax, 1
	je	SHORT $LN5@ComputeCol

; 583  : 		mask >>= 1;

	mov	ecx, DWORD PTR _mask$[ebp]
	shr	ecx, 1
	mov	DWORD PTR _mask$[ebp], ecx

; 584  : 		greenShift--;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+304]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+304], eax

; 585  : 	}

	jmp	SHORT $LN6@ComputeCol
$LN5@ComputeCol:

; 586  : 
; 587  : 	// BLUE
; 588  : 	mask = m_ddsdFront.ddpfPixelFormat.dwBBitMask;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+112]
	mov	DWORD PTR _mask$[ebp], eax

; 589  : 	ShiAssert( mask );
; 590  : 	blueShift = 24;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+308], 24			; 00000018H
$LN4@ComputeCol:

; 591  : 	while( !(mask & 1) ) {

	mov	edx, DWORD PTR _mask$[ebp]
	and	edx, 1
	jne	SHORT $LN2@ComputeCol

; 592  : 		mask >>= 1;

	mov	eax, DWORD PTR _mask$[ebp]
	shr	eax, 1
	mov	DWORD PTR _mask$[ebp], eax

; 593  : 		blueShift--;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+308]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+308], edx

; 594  : 	}

	jmp	SHORT $LN4@ComputeCol
$LN2@ComputeCol:

; 595  : 	while( mask & 1 ) {

	mov	ecx, DWORD PTR _mask$[ebp]
	and	ecx, 1
	je	SHORT $LN13@ComputeCol

; 596  : 		mask >>= 1;

	mov	edx, DWORD PTR _mask$[ebp]
	shr	edx, 1
	mov	DWORD PTR _mask$[ebp], edx

; 597  : 		blueShift--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+308]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+308], ecx

; 598  : 	}

	jmp	SHORT $LN2@ComputeCol
$LN13@ComputeCol:

; 599  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ComputeColorShifts@ImageBuffer@@IAEXXZ ENDP		; ImageBuffer::ComputeColorShifts
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\imagebuf.cpp
_TEXT	SEGMENT
_pixel$ = -28						; size = 4
_imageptr$ = -24					; size = 4
_width$ = -20						; size = 4
_height$ = -16						; size = 4
_r$1 = -12						; size = 4
_c$2 = -8						; size = 4
_this$ = -4						; size = 4
_color$ = 8						; size = 4
?Clear@ImageBuffer@@QAEXK@Z PROC			; ImageBuffer::Clear
; _this$ = ecx

; 1230 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 1231 : 	void *imageptr;
; 1232 : 	WORD *pixel;
; 1233 : 
; 1234 : 	int width=targetXres();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?targetXres@ImageBuffer@@QAEHXZ		; ImageBuffer::targetXres
	mov	DWORD PTR _width$[ebp], eax

; 1235 : 	int height=targetYres();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?targetYres@ImageBuffer@@QAEHXZ		; ImageBuffer::targetYres
	mov	DWORD PTR _height$[ebp], eax

; 1236 : 
; 1237 : 	imageptr=Lock();

	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Lock@ImageBuffer@@QAEPAX_N0@Z		; ImageBuffer::Lock
	mov	DWORD PTR _imageptr$[ebp], eax

; 1238 : 	ShiAssert(imageptr);
; 1239 : 		
; 1240 : 	for (int r=0;r<height;r++) {

	mov	DWORD PTR _r$1[ebp], 0
	jmp	SHORT $LN6@Clear
$LN5@Clear:
	mov	eax, DWORD PTR _r$1[ebp]
	add	eax, 1
	mov	DWORD PTR _r$1[ebp], eax
$LN6@Clear:
	mov	ecx, DWORD PTR _r$1[ebp]
	cmp	ecx, DWORD PTR _height$[ebp]
	jge	SHORT $LN4@Clear

; 1241 : 		for (int c=0;c<width;c++) {

	mov	DWORD PTR _c$2[ebp], 0
	jmp	SHORT $LN3@Clear
$LN2@Clear:
	mov	edx, DWORD PTR _c$2[ebp]
	add	edx, 1
	mov	DWORD PTR _c$2[ebp], edx
$LN3@Clear:
	mov	eax, DWORD PTR _c$2[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	SHORT $LN1@Clear

; 1242 : 			pixel = (WORD*)Pixel( imageptr, r, c );

	mov	ecx, DWORD PTR _c$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _r$1[ebp]
	push	edx
	mov	eax, DWORD PTR _imageptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Pixel@ImageBuffer@@QAEPAXPAXHH@Z	; ImageBuffer::Pixel
	mov	DWORD PTR _pixel$[ebp], eax

; 1243 : 			*pixel=Pixel32toPixel16(color);

	mov	ecx, DWORD PTR _color$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Pixel32toPixel16@ImageBuffer@@QAEGK@Z	; ImageBuffer::Pixel32toPixel16
	mov	edx, DWORD PTR _pixel$[ebp]
	mov	WORD PTR [edx], ax

; 1244 : 		}

	jmp	SHORT $LN2@Clear
$LN1@Clear:

; 1245 : 	}

	jmp	SHORT $LN5@Clear
$LN4@Clear:

; 1246 : 
; 1247 : 	Unlock();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Unlock@ImageBuffer@@QAEXXZ		; ImageBuffer::Unlock

; 1248 : 
; 1249 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Clear@ImageBuffer@@QAEXK@Z ENDP			; ImageBuffer::Clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\imagebuf.cpp
_TEXT	SEGMENT
$T1 = -3744						; size = 4
$T2 = -3740						; size = 4
_pixel$3 = -3736					; size = 4
_pixel$4 = -3732					; size = 4
tv221 = -3728						; size = 4
_imagePtr$ = -3724					; size = 4
_dwBytes$ = -3720					; size = 4
_bufferSize$ = -3716					; size = 4
_buffer$ = -3712					; size = 4
_bytes$ = -3708						; size = 4
_fileID$ = -3704					; size = 4
_color$ = -3700						; size = 4
_r$ = -3696						; size = 4
_this$ = -3692						; size = 4
_c$ = -3688						; size = 4
_p$ = -3684						; size = 4
_bih$ = -3680						; size = 40
_bfh$ = -3640						; size = 14
_rect$ = -3624						; size = 16
_buffer$5 = -3608					; size = 580
_buffer$6 = -3028					; size = 580
_buffer$7 = -2448					; size = 580
_buffer$8 = -1868					; size = 580
_fullname$ = -1288					; size = 260
_string$9 = -1028					; size = 256
_string$10 = -772					; size = 256
_string$11 = -516					; size = 256
_string$12 = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
?BackBufferToRAW@ImageBuffer@@QAEXPAD@Z PROC		; ImageBuffer::BackBufferToRAW
; _this$ = ecx

; 1032 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 3744				; 00000ea0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1033 : 	char	fullname[MAX_PATH];
; 1034 : 	HANDLE	fileID;
; 1035 : 	int		r, c;
; 1036 : 	void	*imagePtr;
; 1037 : 	BYTE	*buffer;
; 1038 : 	BYTE	*p;
; 1039 : 	UInt32	bufferSize;
; 1040 : 	DWORD	bytes;
; 1041 : 	UInt32	color;
; 1042 : 	RECT	rect;
; 1043 : 
; 1044 : 	// Probably this will break if it is ever used on a Primary surface
; 1045 : 	// in a window with no back buffer.  We'd need to account for the window
; 1046 : 	// offset in screen space.
; 1047 : 	rect.top = 0;

	mov	DWORD PTR _rect$[ebp+4], 0

; 1048 : 	rect.left = 0;

	mov	DWORD PTR _rect$[ebp], 0

; 1049 : 	rect.bottom = height;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	mov	DWORD PTR _rect$[ebp+12], ecx

; 1050 : 	rect.right = width;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+292]
	mov	DWORD PTR _rect$[ebp+8], eax

; 1051 : 
; 1052 : 	// Create a new RAW file
; 1053 : 	sprintf( fullname, "%s%s", filename, ".bmp" );

	push	OFFSET ??_C@_04LJDDIHIK@?4bmp?$AA@
	mov	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	push	OFFSET ??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@
	lea	edx, DWORD PTR _fullname$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 1054 :     fileID = CreateFile( fullname, GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL );

	push	0
	push	128					; 00000080H
	push	2
	push	0
	push	0
	push	1073741824				; 40000000H
	lea	eax, DWORD PTR _fullname$[ebp]
	push	eax
	call	DWORD PTR __imp__CreateFileA@28
	mov	DWORD PTR _fileID$[ebp], eax

; 1055 : 	if(fileID == INVALID_HANDLE_VALUE )

	cmp	DWORD PTR _fileID$[ebp], -1
	jne	SHORT $LN25@BackBuffer

; 1056 : 	{
; 1057 : 		// JB 010806 Don't error out.
; 1058 : 		return;

	jmp	$LN27@BackBuffer
$LN25@BackBuffer:

; 1059 : 		//char string[256];
; 1060 : 		//PutErrorString( string );
; 1061 : 		//strcat( string, "Failed to open screen dump file." );
; 1062 : 		//ShiError( string );
; 1063 : 	}
; 1064 : 
; 1065 :     BITMAPFILEHEADER bfh;
; 1066 : 	BITMAPINFOHEADER bih;
; 1067 :     DWORD dwBytes;
; 1068 : 
; 1069 : 	ZeroMemory(&bih, sizeof(bih));

	push	40					; 00000028H
	push	0
	lea	ecx, DWORD PTR _bih$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1070 : 	bih.biSize = sizeof(bih);

	mov	DWORD PTR _bih$[ebp], 40		; 00000028H

; 1071 : 	bih.biWidth = rect.right - rect.left;

	mov	edx, DWORD PTR _rect$[ebp+8]
	sub	edx, DWORD PTR _rect$[ebp]
	mov	DWORD PTR _bih$[ebp+4], edx

; 1072 : 	bih.biHeight = rect.bottom - rect.top;

	mov	eax, DWORD PTR _rect$[ebp+12]
	sub	eax, DWORD PTR _rect$[ebp+4]
	mov	DWORD PTR _bih$[ebp+8], eax

; 1073 : 	bih.biPlanes = 1;

	mov	ecx, 1
	mov	WORD PTR _bih$[ebp+12], cx

; 1074 : 	bih.biBitCount = 24;

	mov	edx, 24					; 00000018H
	mov	WORD PTR _bih$[ebp+14], dx

; 1075 : 	bih.biCompression = BI_RGB;

	mov	DWORD PTR _bih$[ebp+16], 0

; 1076 : 	bih.biSizeImage = ((((bih.biWidth * bih.biBitCount) + 31) & ~31) >> 3) * bih.biHeight;

	movzx	eax, WORD PTR _bih$[ebp+14]
	imul	eax, DWORD PTR _bih$[ebp+4]
	add	eax, 31					; 0000001fH
	and	eax, -32				; ffffffe0H
	sar	eax, 3
	imul	eax, DWORD PTR _bih$[ebp+8]
	mov	DWORD PTR _bih$[ebp+20], eax

; 1077 : 
; 1078 :     bfh.bfType = 0x4d42;

	mov	ecx, 19778				; 00004d42H
	mov	WORD PTR _bfh$[ebp], cx

; 1079 :     bfh.bfReserved1 = 0;

	xor	edx, edx
	mov	WORD PTR _bfh$[ebp+6], dx

; 1080 :     bfh.bfReserved2 = 0;

	xor	eax, eax
	mov	WORD PTR _bfh$[ebp+8], ax

; 1081 :     bfh.bfOffBits = sizeof( BITMAPFILEHEADER ) + sizeof(BITMAPINFOHEADER);

	mov	DWORD PTR _bfh$[ebp+10], 54		; 00000036H

; 1082 :     bfh.bfSize = bfh.bfOffBits + bih.biSizeImage;

	mov	ecx, DWORD PTR _bfh$[ebp+10]
	add	ecx, DWORD PTR _bih$[ebp+20]
	mov	DWORD PTR _bfh$[ebp+2], ecx

; 1083 : 
; 1084 :     // Write the header
; 1085 :     if((!WriteFile(fileID, &bfh, sizeof(BITMAPFILEHEADER), &dwBytes, NULL)) || ( dwBytes != sizeof(BITMAPFILEHEADER)))

	push	0
	lea	edx, DWORD PTR _dwBytes$[ebp]
	push	edx
	push	14					; 0000000eH
	lea	eax, DWORD PTR _bfh$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fileID$[ebp]
	push	ecx
	call	DWORD PTR __imp__WriteFile@20
	test	eax, eax
	je	SHORT $LN23@BackBuffer
	cmp	DWORD PTR _dwBytes$[ebp], 14		; 0000000eH
	je	SHORT $LN24@BackBuffer
$LN23@BackBuffer:

; 1086 :     {
; 1087 : 		char string[256];
; 1088 : 		PutErrorString( string );

	push	0
	push	256					; 00000100H
	lea	edx, DWORD PTR _string$11[ebp]
	push	edx
	push	1024					; 00000400H
	call	DWORD PTR __imp__GetLastError@0
	push	eax
	push	0
	push	4096					; 00001000H
	call	DWORD PTR __imp__FormatMessageA@28

; 1089 : 		strcat( string, "Failed to write screen dump file." );

	push	OFFSET ??_C@_0CC@MACJCBBP@Failed?5to?5write?5screen?5dump?5file@
	lea	eax, DWORD PTR _string$11[ebp]
	push	eax
	call	_strcat
	add	esp, 8

; 1090 : 		ShiError( string );

	push	OFFSET ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
	push	OFFSET ??_C@_0N@BGGELBOB@Imagebuf?4cpp?$AA@
	push	1090					; 00000442H
	push	OFFSET ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
	lea	ecx, DWORD PTR _buffer$5[ebp]
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H
	push	0
	lea	edx, DWORD PTR _string$11[ebp]
	push	edx
	lea	eax, DWORD PTR _buffer$5[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	push	-1
	call	_exit
$LN24@BackBuffer:

; 1091 :     }
; 1092 : 
; 1093 :     // Write the bitmap info header
; 1094 :     if((!WriteFile(fileID, &bih, sizeof(BITMAPINFOHEADER), &dwBytes, NULL)) || ( dwBytes != sizeof(BITMAPINFOHEADER)))

	push	0
	lea	ecx, DWORD PTR _dwBytes$[ebp]
	push	ecx
	push	40					; 00000028H
	lea	edx, DWORD PTR _bih$[ebp]
	push	edx
	mov	eax, DWORD PTR _fileID$[ebp]
	push	eax
	call	DWORD PTR __imp__WriteFile@20
	test	eax, eax
	je	SHORT $LN21@BackBuffer
	cmp	DWORD PTR _dwBytes$[ebp], 40		; 00000028H
	je	SHORT $LN22@BackBuffer
$LN21@BackBuffer:

; 1095 :     {
; 1096 : 		char string[256];
; 1097 : 		PutErrorString( string );

	push	0
	push	256					; 00000100H
	lea	ecx, DWORD PTR _string$12[ebp]
	push	ecx
	push	1024					; 00000400H
	call	DWORD PTR __imp__GetLastError@0
	push	eax
	push	0
	push	4096					; 00001000H
	call	DWORD PTR __imp__FormatMessageA@28

; 1098 : 		strcat( string, "Failed to write screen dump file." );

	push	OFFSET ??_C@_0CC@MACJCBBP@Failed?5to?5write?5screen?5dump?5file@
	lea	edx, DWORD PTR _string$12[ebp]
	push	edx
	call	_strcat
	add	esp, 8

; 1099 : 		ShiError( string );

	push	OFFSET ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
	push	OFFSET ??_C@_0N@BGGELBOB@Imagebuf?4cpp?$AA@
	push	1099					; 0000044bH
	push	OFFSET ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
	lea	eax, DWORD PTR _buffer$6[ebp]
	push	eax
	call	_sprintf
	add	esp, 20					; 00000014H
	push	0
	lea	ecx, DWORD PTR _string$12[ebp]
	push	ecx
	lea	edx, DWORD PTR _buffer$6[ebp]
	push	edx
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	push	-1
	call	_exit
$LN22@BackBuffer:

; 1100 :     }
; 1101 : 
; 1102 : 	// Create the scanline output buffer
; 1103 : 	bufferSize = 3 * (rect.right - rect.left);

	mov	eax, DWORD PTR _rect$[ebp+8]
	sub	eax, DWORD PTR _rect$[ebp]
	imul	eax, 3
	mov	DWORD PTR _bufferSize$[ebp], eax

; 1104 : 	buffer = new BYTE[ bufferSize ];

	mov	ecx, DWORD PTR _bufferSize$[ebp]
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _buffer$[ebp], edx

; 1105 : 	ShiAssert( buffer );
; 1106 : 
; 1107 : 	// Lock the back buffer surface
; 1108 : 	imagePtr = Lock();

	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Lock@ImageBuffer@@QAEPAX_N0@Z		; ImageBuffer::Lock
	mov	DWORD PTR _imagePtr$[ebp], eax

; 1109 : 	ShiAssert( imagePtr );
; 1110 : 
; 1111 : 	switch(PixelSize())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?PixelSize@ImageBuffer@@QAEHXZ		; ImageBuffer::PixelSize
	mov	DWORD PTR tv221[ebp], eax
	cmp	DWORD PTR tv221[ebp], 2
	je	SHORT $LN18@BackBuffer
	cmp	DWORD PTR tv221[ebp], 4
	je	$LN9@BackBuffer
	jmp	$LN19@BackBuffer
$LN18@BackBuffer:

; 1112 : 	{
; 1113 : 		case 2:
; 1114 : 		{
; 1115 : 			WORD	*pixel;
; 1116 : 
; 1117 : 			// Step through each scanline
; 1118 : 			for (r=rect.bottom-1; r>=0; r--)

	mov	eax, DWORD PTR _rect$[ebp+12]
	sub	eax, 1
	mov	DWORD PTR _r$[ebp], eax
	jmp	SHORT $LN17@BackBuffer
$LN16@BackBuffer:
	mov	ecx, DWORD PTR _r$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _r$[ebp], ecx
$LN17@BackBuffer:
	cmp	DWORD PTR _r$[ebp], 0
	jl	$LN15@BackBuffer

; 1119 : 			{
; 1120 : 				// Start a new line
; 1121 : 				p=buffer;

	mov	edx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _p$[ebp], edx

; 1122 : 
; 1123 : 				// Step accross the scanline converting each pixel to RGB
; 1124 : 				for (c=rect.left; c<rect.right; c++)

	mov	eax, DWORD PTR _rect$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	jmp	SHORT $LN14@BackBuffer
$LN13@BackBuffer:
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, 1
	mov	DWORD PTR _c$[ebp], ecx
$LN14@BackBuffer:
	mov	edx, DWORD PTR _c$[ebp]
	cmp	edx, DWORD PTR _rect$[ebp+8]
	jge	$LN12@BackBuffer

; 1125 : 				{
; 1126 : 					// Get the 16 bit color from the surface and convert to 32 bit ABGR
; 1127 : 					pixel = (WORD*)Pixel( imagePtr, r, c );

	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	mov	edx, DWORD PTR _imagePtr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Pixel@ImageBuffer@@QAEPAXPAXHH@Z	; ImageBuffer::Pixel
	mov	DWORD PTR _pixel$4[ebp], eax

; 1128 : 					color = Pixel16toPixel32( *pixel );

	mov	eax, DWORD PTR _pixel$4[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Pixel16toPixel32@ImageBuffer@@QAEKG@Z	; ImageBuffer::Pixel16toPixel32
	mov	DWORD PTR _color$[ebp], eax

; 1129 : 
; 1130 : 					*p = (BYTE)((color & 0x00FF0000) >> 16);	p++;	// Blue

	mov	edx, DWORD PTR _color$[ebp]
	and	edx, 16711680				; 00ff0000H
	shr	edx, 16					; 00000010H
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx

; 1131 : 					*p = (BYTE)((color & 0x0000FF00) >>  8);	p++;	// Green

	mov	edx, DWORD PTR _color$[ebp]
	and	edx, 65280				; 0000ff00H
	shr	edx, 8
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx

; 1132 : 					*p = (BYTE)((color & 0x000000FF) >>  0);	p++;	// Red

	mov	edx, DWORD PTR _color$[ebp]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx

; 1133 : 				}

	jmp	$LN13@BackBuffer
$LN12@BackBuffer:

; 1134 : 
; 1135 : 				// Write the scanline to disk
; 1136 : 				if ( !WriteFile( fileID, buffer, bufferSize, &bytes, NULL ) )  bytes=0xFFFFFFFF;

	push	0
	lea	edx, DWORD PTR _bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _bufferSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fileID$[ebp]
	push	edx
	call	DWORD PTR __imp__WriteFile@20
	test	eax, eax
	jne	SHORT $LN11@BackBuffer
	mov	DWORD PTR _bytes$[ebp], -1
$LN11@BackBuffer:

; 1137 : 				if ( bytes != bufferSize ) {

	mov	eax, DWORD PTR _bytes$[ebp]
	cmp	eax, DWORD PTR _bufferSize$[ebp]
	je	SHORT $LN10@BackBuffer

; 1138 : 					char string[256];
; 1139 : 					PutErrorString( string );

	push	0
	push	256					; 00000100H
	lea	ecx, DWORD PTR _string$9[ebp]
	push	ecx
	push	1024					; 00000400H
	call	DWORD PTR __imp__GetLastError@0
	push	eax
	push	0
	push	4096					; 00001000H
	call	DWORD PTR __imp__FormatMessageA@28

; 1140 : 					strcat( string, "Couldn't write screen dump file." );

	push	OFFSET ??_C@_0CB@EOAPAJGF@Couldn?8t?5write?5screen?5dump?5file?4@
	lea	edx, DWORD PTR _string$9[ebp]
	push	edx
	call	_strcat
	add	esp, 8

; 1141 : 					ShiError( string );

	push	OFFSET ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
	push	OFFSET ??_C@_0N@BGGELBOB@Imagebuf?4cpp?$AA@
	push	1141					; 00000475H
	push	OFFSET ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
	lea	eax, DWORD PTR _buffer$7[ebp]
	push	eax
	call	_sprintf
	add	esp, 20					; 00000014H
	push	0
	lea	ecx, DWORD PTR _string$9[ebp]
	push	ecx
	lea	edx, DWORD PTR _buffer$7[ebp]
	push	edx
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	push	-1
	call	_exit
$LN10@BackBuffer:

; 1142 : 				}
; 1143 : 			}

	jmp	$LN16@BackBuffer
$LN15@BackBuffer:

; 1144 : 
; 1145 : 			break;

	jmp	$LN19@BackBuffer
$LN9@BackBuffer:

; 1146 : 		}
; 1147 : 
; 1148 : 		case 4:
; 1149 : 		{
; 1150 : 			DWORD	*pixel;
; 1151 : 
; 1152 : 			// Step through each scanline
; 1153 : 			for (r=rect.bottom-1; r>=0; r--)

	mov	eax, DWORD PTR _rect$[ebp+12]
	sub	eax, 1
	mov	DWORD PTR _r$[ebp], eax
	jmp	SHORT $LN8@BackBuffer
$LN7@BackBuffer:
	mov	ecx, DWORD PTR _r$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _r$[ebp], ecx
$LN8@BackBuffer:
	cmp	DWORD PTR _r$[ebp], 0
	jl	$LN19@BackBuffer

; 1154 : 			{
; 1155 : 				// Start a new line
; 1156 : 				p=buffer;

	mov	edx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _p$[ebp], edx

; 1157 : 
; 1158 : 				// Step accross the scanline converting each pixel to RGB
; 1159 : 				for (c=rect.left; c<rect.right; c++){

	mov	eax, DWORD PTR _rect$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	jmp	SHORT $LN5@BackBuffer
$LN4@BackBuffer:
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, 1
	mov	DWORD PTR _c$[ebp], ecx
$LN5@BackBuffer:
	mov	edx, DWORD PTR _c$[ebp]
	cmp	edx, DWORD PTR _rect$[ebp+8]
	jge	$LN3@BackBuffer

; 1160 : 					
; 1161 : 					// Get the 16 bit color from the surface and convert to 32 bit ABGR
; 1162 : 					pixel = (DWORD*)Pixel( imagePtr, r, c );

	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	mov	edx, DWORD PTR _imagePtr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Pixel@ImageBuffer@@QAEPAXPAXHH@Z	; ImageBuffer::Pixel
	mov	DWORD PTR _pixel$3[ebp], eax

; 1163 : 					color = Pixel32toPixel32( *pixel );

	mov	eax, DWORD PTR _pixel$3[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Pixel32toPixel32@ImageBuffer@@QAEKK@Z	; ImageBuffer::Pixel32toPixel32
	mov	DWORD PTR _color$[ebp], eax

; 1164 : 
; 1165 : 					*p = (BYTE)((color & 0x00FF0000) >> 16);	p++;	// Blue

	mov	edx, DWORD PTR _color$[ebp]
	and	edx, 16711680				; 00ff0000H
	shr	edx, 16					; 00000010H
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx

; 1166 : 					*p = (BYTE)((color & 0x0000FF00) >>  8);	p++;	// Green

	mov	edx, DWORD PTR _color$[ebp]
	and	edx, 65280				; 0000ff00H
	shr	edx, 8
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx

; 1167 : 					*p = (BYTE)((color & 0x000000FF) >>  0);	p++;	// Red

	mov	edx, DWORD PTR _color$[ebp]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx

; 1168 : 				}

	jmp	$LN4@BackBuffer
$LN3@BackBuffer:

; 1169 : 
; 1170 : 				// Write the scanline to disk
; 1171 : 				if ( !WriteFile( fileID, buffer, bufferSize, &bytes, NULL ) )  bytes=0xFFFFFFFF;

	push	0
	lea	edx, DWORD PTR _bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _bufferSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fileID$[ebp]
	push	edx
	call	DWORD PTR __imp__WriteFile@20
	test	eax, eax
	jne	SHORT $LN2@BackBuffer
	mov	DWORD PTR _bytes$[ebp], -1
$LN2@BackBuffer:

; 1172 : 				if ( bytes != bufferSize ) {

	mov	eax, DWORD PTR _bytes$[ebp]
	cmp	eax, DWORD PTR _bufferSize$[ebp]
	je	SHORT $LN1@BackBuffer

; 1173 : 					char string[256];
; 1174 : 					PutErrorString( string );

	push	0
	push	256					; 00000100H
	lea	ecx, DWORD PTR _string$10[ebp]
	push	ecx
	push	1024					; 00000400H
	call	DWORD PTR __imp__GetLastError@0
	push	eax
	push	0
	push	4096					; 00001000H
	call	DWORD PTR __imp__FormatMessageA@28

; 1175 : 					strcat( string, "Couldn't write screen dump file." );

	push	OFFSET ??_C@_0CB@EOAPAJGF@Couldn?8t?5write?5screen?5dump?5file?4@
	lea	edx, DWORD PTR _string$10[ebp]
	push	edx
	call	_strcat
	add	esp, 8

; 1176 : 					ShiError( string );

	push	OFFSET ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
	push	OFFSET ??_C@_0N@BGGELBOB@Imagebuf?4cpp?$AA@
	push	1176					; 00000498H
	push	OFFSET ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
	lea	eax, DWORD PTR _buffer$8[ebp]
	push	eax
	call	_sprintf
	add	esp, 20					; 00000014H
	push	0
	lea	ecx, DWORD PTR _string$10[ebp]
	push	ecx
	lea	edx, DWORD PTR _buffer$8[ebp]
	push	edx
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	push	-1
	call	_exit
$LN1@BackBuffer:

; 1177 : 				}
; 1178 : 			}

	jmp	$LN7@BackBuffer
$LN19@BackBuffer:

; 1179 : 
; 1180 : 			break;
; 1181 : 		}
; 1182 : 	}
; 1183 : 	// Unlock the back buffer
; 1184 : 	Unlock();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Unlock@ImageBuffer@@QAEXXZ		; ImageBuffer::Unlock

; 1185 : 
; 1186 : 	// Close the output RAW file and free the output buffer
; 1187 : 	CloseHandle( fileID );

	mov	eax, DWORD PTR _fileID$[ebp]
	push	eax
	call	DWORD PTR __imp__CloseHandle@4

; 1188 : 	delete[] buffer;

	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN27@BackBuffer:

; 1189 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?BackBufferToRAW@ImageBuffer@@QAEXPAD@Z ENDP		; ImageBuffer::BackBufferToRAW
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\imagebuf.cpp
_TEXT	SEGMENT
_hres$1 = -32						; size = 4
_hr$ = -28						; size = 4
_this$ = -24						; size = 4
_backRect$ = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_bDontFlip$ = 8						; size = 1
?SwapBuffers@ImageBuffer@@QAEX_N@Z PROC			; ImageBuffer::SwapBuffers
; _this$ = ecx

; 980  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 981  : 	ShiAssert(IsReady());
; 982  : 
; 983  : 	// Return right away is there is nothing to do
; 984  : 	if(m_pDDSBack == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+164], 0
	jne	SHORT $LN9@SwapBuffer

; 985  : 		return;

	jmp	$LN10@SwapBuffer
$LN9@SwapBuffer:

; 986  : 
; 987  : 	HRESULT hr;
; 988  : 
; 989  : 	//START_PROFILE("SWAP WAIT : ");
; 990  : 	// Make sure the drivers isnt buffering any data
; 991  : 	if(g_bCheckBltStatusBeforeFlip)

	movzx	ecx, BYTE PTR ?g_bCheckBltStatusBeforeFlip@@3_NA ; g_bCheckBltStatusBeforeFlip
	test	ecx, ecx
	je	SHORT $LN8@SwapBuffer
$LN7@SwapBuffer:

; 992  : 	{
; 993  : 		while(true)

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN8@SwapBuffer

; 994  : 		{
; 995  : 			HRESULT hres = m_pDDSBack->GetFlipStatus(DDGFS_CANFLIP);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+72]
	call	edx
	mov	DWORD PTR _hres$1[ebp], eax

; 996  : 			if(hres != DDERR_WASSTILLDRAWING)

	cmp	DWORD PTR _hres$1[ebp], -2005532132	; 8876021cH
	je	SHORT $LN5@SwapBuffer

; 997  : 			{
; 998  : 					break;

	jmp	SHORT $LN8@SwapBuffer
$LN5@SwapBuffer:

; 999  : 			}
; 1000 : 
; 1001 : 			// Let all the other threads have some CPU.
; 1002 : 			Sleep(0);

	push	0
	call	DWORD PTR __imp__Sleep@4

; 1003 : 		}

	jmp	SHORT $LN7@SwapBuffer
$LN8@SwapBuffer:

; 1004 : 	}
; 1005 : 
; 1006 : 	//STOP_PROFILE("SWAP WAIT : ");
; 1007 : 	// OW
; 1008 : 	if(!bDontFlip && (m_ddsdFront.ddsCaps.dwCaps & DDSCAPS_FLIP))

	movzx	eax, BYTE PTR _bDontFlip$[ebp]
	test	eax, eax
	jne	SHORT $LN4@SwapBuffer
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	and	edx, 16					; 00000010H
	je	SHORT $LN4@SwapBuffer

; 1009 : 	{
; 1010 : 		hr = m_pDDSFront->Flip(NULL, DDFLIP_WAIT);

	push	1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax

; 1011 : 		// hr = m_pDDSFront->Flip(NULL, DDFLIP_NOVSYNC);
; 1012 : 		ShiAssert(SUCCEEDED(hr));
; 1013 : 
; 1014 : 		return;

	jmp	$LN10@SwapBuffer
$LN4@SwapBuffer:

; 1015 : 	}
; 1016 : 
; 1017 : 	RECT backRect = { 0, 0, m_ddsdBack.dwWidth, m_ddsdBack.dwHeight };	

	mov	DWORD PTR _backRect$[ebp], 0
	mov	DWORD PTR _backRect$[ebp+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+180]
	mov	DWORD PTR _backRect$[ebp+8], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+176]
	mov	DWORD PTR _backRect$[ebp+12], eax

; 1018 : 
; 1019 : 	if(!m_bFrontRectValid)	// assumes no clipper is attached (fullscreen) !!

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+160]
	test	edx, edx
	jne	SHORT $LN3@SwapBuffer

; 1020 : 		hr = m_pDDSFront->BltFast(m_rcFront.left, m_rcFront.top, m_pDDSBack, &backRect, DDBLTFAST_WAIT | DDBLTFAST_NOCOLORKEY);

	push	16					; 00000010H
	lea	eax, DWORD PTR _backRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+164]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+144]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+28]
	call	eax
	mov	DWORD PTR _hr$[ebp], eax

; 1021 : 	else

	jmp	SHORT $LN2@SwapBuffer
$LN3@SwapBuffer:

; 1022 : 		hr = m_pDDSFront->Blt(&m_rcFront, m_pDDSBack, &backRect, DDBLT_WAIT, NULL);

	push	0
	push	16777216				; 01000000H
	lea	ecx, DWORD PTR _backRect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	mov	DWORD PTR _hr$[ebp], eax
$LN2@SwapBuffer:

; 1023 : 
; 1024 : 	ShiAssert(SUCCEEDED(hr));
; 1025 : 
; 1026 : 	if(!SUCCEEDED(hr))

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN10@SwapBuffer

; 1027 : 		MonoPrint("ImageBuffer::SwapBuffers - Error 0x%X\n", hr);

	mov	edx, DWORD PTR _hr$[ebp]
	push	edx
	push	OFFSET ??_C@_0CH@HLEJFCOI@ImageBuffer?3?3SwapBuffers?5?9?5Error@
	call	_MonoPrint
	add	esp, 8
$LN10@SwapBuffer:

; 1028 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?SwapBuffers@ImageBuffer@@QAEX_N@Z ENDP			; ImageBuffer::SwapBuffers
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\imagebuf.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_srcBuffer$ = 8						; size = 4
_srcRect$ = 12						; size = 4
_dstRect$ = 16						; size = 4
_angle$ = 20						; size = 4
_startStopArray$ = 24					; size = 4
?ComposeRoundRot@ImageBuffer@@QAEXPAV1@PAUtagRECT@@1MPAH@Z PROC ; ImageBuffer::ComposeRoundRot
; _this$ = ecx

; 948  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 949  : 	ShiAssert(IsReady());
; 950  : 	ShiAssert(FALSE == F4IsBadReadPtr(srcRect, sizeof *srcRect));
; 951  : 	ShiAssert(FALSE == F4IsBadReadPtr(dstRect, sizeof *dstRect));
; 952  : 	ShiAssert(FALSE == F4IsBadReadPtr(srcBuffer, sizeof *srcBuffer));
; 953  : 
; 954  : 
; 955  : 	// Probably this will break if it is ever used to target a Primary surface
; 956  : 	// in a window with no back buffer.  We'd need to account for the window
; 957  : 	// offset in screen space.
; 958  : 	if (srcRect->right - srcRect->left == dstRect->right - dstRect->left) {

	mov	eax, DWORD PTR _srcRect$[ebp]
	mov	ecx, DWORD PTR _srcRect$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _dstRect$[ebp]
	mov	ecx, DWORD PTR _dstRect$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx]
	cmp	edx, eax
	jne	SHORT $LN2@ComposeRou

; 959  : 		ShiAssert((srcRect->bottom - srcRect->top) == (dstRect->bottom - dstRect->top));
; 960  : 		ShiAssert((srcRect->right - srcRect->left) == (dstRect->right - dstRect->left));
; 961  : 
; 962  : 		RotateBitmapMask (	srcBuffer, this, 
; 963  : 							(int)(angle *  2607.594587618f),// 180.0f / PI * 4096 / 90.0f (convertion from radians to Erick's)
; 964  : 							srcRect, dstRect,
; 965  : 							startStopArray );

	mov	ecx, DWORD PTR _startStopArray$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dstRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcRect$[ebp]
	push	eax
	movss	xmm0, DWORD PTR _angle$[ebp]
	mulss	xmm0, DWORD PTR __real@4522f983
	cvttss2si ecx, xmm0
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcBuffer$[ebp]
	push	eax
	call	?RotateBitmapMask@@YAXPAVImageBuffer@@0HPAUtagRECT@@1PAH@Z ; RotateBitmapMask
	add	esp, 24					; 00000018H

; 966  : 	} else {

	jmp	SHORT $LN1@ComposeRou
$LN2@ComposeRou:

; 967  : 		ShiAssert(2*(srcRect->bottom - srcRect->top) == (dstRect->bottom - dstRect->top));
; 968  : 		ShiAssert(2*(srcRect->right - srcRect->left) == (dstRect->right - dstRect->left));
; 969  : 
; 970  : 
; 971  : 		RotateBitmapMaskDouble (srcBuffer, this, 
; 972  : 								(int)(angle *  2607.594587618f),// 180.0f / PI * 4096 / 90.0f (convertion from radians to Erick's)
; 973  : 								srcRect, dstRect,
; 974  : 								startStopArray );

	mov	ecx, DWORD PTR _startStopArray$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dstRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcRect$[ebp]
	push	eax
	movss	xmm0, DWORD PTR _angle$[ebp]
	mulss	xmm0, DWORD PTR __real@4522f983
	cvttss2si ecx, xmm0
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcBuffer$[ebp]
	push	eax
	call	?RotateBitmapMaskDouble@@YAXPAVImageBuffer@@0HPAUtagRECT@@1PAH@Z ; RotateBitmapMaskDouble
	add	esp, 24					; 00000018H
$LN1@ComposeRou:

; 975  : 	}
; 976  : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?ComposeRoundRot@ImageBuffer@@QAEXPAV1@PAUtagRECT@@1MPAH@Z ENDP ; ImageBuffer::ComposeRoundRot
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\imagebuf.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_srcBuffer$ = 8						; size = 4
_srcRect$ = 12						; size = 4
_dstRect$ = 16						; size = 4
_angle$ = 20						; size = 4
?ComposeRot@ImageBuffer@@QAEXPAV1@PAUtagRECT@@1M@Z PROC	; ImageBuffer::ComposeRot
; _this$ = ecx

; 909  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 910  : 	ShiAssert(IsReady());
; 911  : 	ShiAssert(FALSE == F4IsBadReadPtr(srcRect, sizeof *srcRect));
; 912  : 	ShiAssert(FALSE == F4IsBadReadPtr(dstRect, sizeof *dstRect));
; 913  : 	ShiAssert(FALSE == F4IsBadReadPtr(srcBuffer, sizeof *srcBuffer));
; 914  : 
; 915  : 
; 916  : 	// Probably this will break if it is ever used to target a Primary surface
; 917  : 	// in a window without a back buffer.  We'd need to account for the window
; 918  : 	// offset in screen space.
; 919  : 	if (srcRect->right - srcRect->left == dstRect->right - dstRect->left)

	mov	eax, DWORD PTR _srcRect$[ebp]
	mov	ecx, DWORD PTR _srcRect$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _dstRect$[ebp]
	mov	ecx, DWORD PTR _dstRect$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx]
	cmp	edx, eax
	jne	SHORT $LN2@ComposeRot

; 920  : 	{
; 921  : 		ShiAssert((srcRect->bottom - srcRect->top) == (dstRect->bottom - dstRect->top));
; 922  : 		ShiAssert((srcRect->right - srcRect->left) == (dstRect->right - dstRect->left));
; 923  : 
; 924  : 		RotateBitmap (	srcBuffer, this, 
; 925  : 						(int)(angle *  2607.594587618f),// 180.0f / PI * 4096 / 90.0f (convertion from radians to Erick's)
; 926  : 						srcRect, dstRect );

	mov	ecx, DWORD PTR _dstRect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcRect$[ebp]
	push	edx
	movss	xmm0, DWORD PTR _angle$[ebp]
	mulss	xmm0, DWORD PTR __real@4522f983
	cvttss2si eax, xmm0
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcBuffer$[ebp]
	push	edx
	call	?RotateBitmap@@YAXPAVImageBuffer@@0HPAUtagRECT@@1@Z ; RotateBitmap
	add	esp, 20					; 00000014H

; 927  : 	}
; 928  : 
; 929  : 	else

	jmp	SHORT $LN1@ComposeRot
$LN2@ComposeRot:

; 930  : 	{
; 931  : 		ShiAssert(2*(srcRect->bottom - srcRect->top) == (dstRect->bottom - dstRect->top));
; 932  : 		ShiAssert(2*(srcRect->right - srcRect->left) == (dstRect->right - dstRect->left));
; 933  : 
; 934  : 		RotateBitmapDouble (srcBuffer, this, 
; 935  : 							(int)(angle *  2607.594587618f),// 180.0f / PI * 4096 / 90.0f (convertion from radians to Erick's)
; 936  : 							srcRect, dstRect );

	mov	eax, DWORD PTR _dstRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcRect$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	mulss	xmm0, DWORD PTR __real@4522f983
	cvttss2si edx, xmm0
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcBuffer$[ebp]
	push	ecx
	call	?RotateBitmapDouble@@YAXPAVImageBuffer@@0HPAUtagRECT@@1@Z ; RotateBitmapDouble
	add	esp, 20					; 00000014H
$LN1@ComposeRot:

; 937  : 	}
; 938  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?ComposeRot@ImageBuffer@@QAEXPAV1@PAUtagRECT@@1M@Z ENDP	; ImageBuffer::ComposeRot
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\imagebuf.cpp
_TEXT	SEGMENT
tv78 = -52						; size = 4
_hr$ = -48						; size = 4
_bStretch$ = -41					; size = 1
_this$ = -40						; size = 4
_rcSrc$1 = -36						; size = 16
_rcSrc$2 = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_srcBuffer$ = 8						; size = 4
_dstRect$ = 12						; size = 4
_srcRect$ = 16						; size = 4
?ComposeTransparent@ImageBuffer@@QAEXPAV1@PAUtagRECT@@1@Z PROC ; ImageBuffer::ComposeTransparent
; _this$ = ecx

; 860  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 861  : 	ShiAssert(IsReady());
; 862  : 	ShiAssert(FALSE == F4IsBadReadPtr(srcRect, sizeof *srcRect));
; 863  : 	ShiAssert(FALSE == F4IsBadReadPtr(dstRect, sizeof *dstRect));
; 864  : 	ShiAssert(FALSE == F4IsBadReadPtr(srcBuffer, sizeof *srcBuffer));
; 865  : 
; 866  : 	bool bStretch = ((srcRect->right - srcRect->left) != (dstRect->right - dstRect->left)) || ((srcRect->bottom - srcRect->top) != (dstRect->bottom - dstRect->top));

	mov	eax, DWORD PTR _srcRect$[ebp]
	mov	ecx, DWORD PTR _srcRect$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _dstRect$[ebp]
	mov	ecx, DWORD PTR _dstRect$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx]
	cmp	edx, eax
	jne	SHORT $LN10@ComposeTra
	mov	ecx, DWORD PTR _srcRect$[ebp]
	mov	edx, DWORD PTR _srcRect$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _dstRect$[ebp]
	mov	edx, DWORD PTR _dstRect$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	sub	ecx, DWORD PTR [edx+4]
	cmp	eax, ecx
	jne	SHORT $LN10@ComposeTra
	mov	DWORD PTR tv78[ebp], 0
	jmp	SHORT $LN11@ComposeTra
$LN10@ComposeTra:
	mov	DWORD PTR tv78[ebp], 1
$LN11@ComposeTra:
	mov	dl, BYTE PTR tv78[ebp]
	mov	BYTE PTR _bStretch$[ebp], dl

; 867  : 	HRESULT hr;
; 868  : 
; 869  : 	if(!m_bFrontRectValid && !bStretch)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+160]
	test	ecx, ecx
	jne	$LN7@ComposeTra
	movzx	edx, BYTE PTR _bStretch$[ebp]
	test	edx, edx
	jne	$LN7@ComposeTra

; 870  : 	{
; 871  : 		if(srcRect && m_pBltTarget != m_pDDSBack)

	cmp	DWORD PTR _srcRect$[ebp], 0
	je	$LN6@ComposeTra
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+316]
	cmp	edx, DWORD PTR [ecx+164]
	je	SHORT $LN6@ComposeTra

; 872  : 		{
; 873  : 			RECT rcSrc = *srcRect;

	mov	eax, DWORD PTR _srcRect$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _rcSrc$1[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _rcSrc$1[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _rcSrc$1[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _rcSrc$1[ebp+12], edx

; 874  : 			rcSrc.left += m_rcFront.left;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rcSrc$1[ebp]
	add	ecx, DWORD PTR [eax+144]
	mov	DWORD PTR _rcSrc$1[ebp], ecx

; 875  : 			rcSrc.top += m_rcFront.top;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _rcSrc$1[ebp+4]
	add	eax, DWORD PTR [edx+148]
	mov	DWORD PTR _rcSrc$1[ebp+4], eax

; 876  : 
; 877  : 			hr = m_pBltTarget->BltFast(rcSrc.left, rcSrc.top, srcBuffer->m_pDDSBack, dstRect, DDBLTFAST_WAIT | DDBLTFAST_SRCCOLORKEY);

	push	17					; 00000011H
	mov	ecx, DWORD PTR _dstRect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcBuffer$[ebp]
	mov	eax, DWORD PTR [edx+164]
	push	eax
	mov	ecx, DWORD PTR _rcSrc$1[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _rcSrc$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+316]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+316]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax
	jmp	SHORT $LN5@ComposeTra
$LN6@ComposeTra:

; 878  : 		}
; 879  : 
; 880  : 		else hr = m_pBltTarget->BltFast(srcRect->left, srcRect->top, srcBuffer->m_pDDSBack, dstRect, DDBLTFAST_WAIT | DDBLTFAST_SRCCOLORKEY );

	push	17					; 00000011H
	mov	eax, DWORD PTR _dstRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcBuffer$[ebp]
	mov	edx, DWORD PTR [ecx+164]
	push	edx
	mov	eax, DWORD PTR _srcRect$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _srcRect$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+316]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+316]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+28]
	call	eax
	mov	DWORD PTR _hr$[ebp], eax
$LN5@ComposeTra:

; 881  : 	}
; 882  : 
; 883  : 	else

	jmp	$LN4@ComposeTra
$LN7@ComposeTra:

; 884  : 	{
; 885  : 		if(m_bFrontRectValid && srcRect && m_pBltTarget != m_pDDSBack)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+160]
	test	edx, edx
	je	$LN3@ComposeTra
	cmp	DWORD PTR _srcRect$[ebp], 0
	je	$LN3@ComposeTra
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+316]
	cmp	edx, DWORD PTR [ecx+164]
	je	$LN3@ComposeTra

; 886  : 		{
; 887  : 			RECT rcSrc = *srcRect;

	mov	eax, DWORD PTR _srcRect$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _rcSrc$2[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _rcSrc$2[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _rcSrc$2[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _rcSrc$2[ebp+12], edx

; 888  : 			rcSrc.left += m_rcFront.left;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rcSrc$2[ebp]
	add	ecx, DWORD PTR [eax+144]
	mov	DWORD PTR _rcSrc$2[ebp], ecx

; 889  : 			rcSrc.right += m_rcFront.left;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _rcSrc$2[ebp+8]
	add	eax, DWORD PTR [edx+144]
	mov	DWORD PTR _rcSrc$2[ebp+8], eax

; 890  : 			rcSrc.top += m_rcFront.top;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _rcSrc$2[ebp+4]
	add	edx, DWORD PTR [ecx+148]
	mov	DWORD PTR _rcSrc$2[ebp+4], edx

; 891  : 			rcSrc.bottom += m_rcFront.top;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rcSrc$2[ebp+12]
	add	ecx, DWORD PTR [eax+148]
	mov	DWORD PTR _rcSrc$2[ebp+12], ecx

; 892  : 
; 893  : 			hr = m_pBltTarget->Blt(&rcSrc, srcBuffer->m_pDDSBack, dstRect, DDBLT_WAIT | DDBLT_KEYSRC, NULL);

	push	0
	push	16809984				; 01008000H
	mov	edx, DWORD PTR _dstRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcBuffer$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	push	ecx
	lea	edx, DWORD PTR _rcSrc$2[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+316]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+316]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax
	jmp	SHORT $LN4@ComposeTra
$LN3@ComposeTra:

; 894  : 		}
; 895  : 
; 896  : 		else hr = m_pBltTarget->Blt(srcRect, srcBuffer->m_pDDSBack, dstRect, DDBLT_WAIT | DDBLT_KEYSRC, NULL);

	push	0
	push	16809984				; 01008000H
	mov	eax, DWORD PTR _dstRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcBuffer$[ebp]
	mov	edx, DWORD PTR [ecx+164]
	push	edx
	mov	eax, DWORD PTR _srcRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+316]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+316]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+20]
	call	eax
	mov	DWORD PTR _hr$[ebp], eax
$LN4@ComposeTra:

; 897  : 	}
; 898  : 
; 899  : 	ShiAssert(SUCCEEDED(hr));
; 900  : 
; 901  : 	if(!SUCCEEDED(hr))

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN8@ComposeTra

; 902  : 		MonoPrint("ImageBuffer::ComposeTransparent - Error 0x%X\n", hr);

	mov	ecx, DWORD PTR _hr$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CO@NCAIJIBM@ImageBuffer?3?3ComposeTransparent?5@
	call	_MonoPrint
	add	esp, 8
$LN8@ComposeTra:

; 903  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?ComposeTransparent@ImageBuffer@@QAEXPAV1@PAUtagRECT@@1@Z ENDP ; ImageBuffer::ComposeTransparent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\imagebuf.cpp
_TEXT	SEGMENT
tv78 = -52						; size = 4
_hr$ = -48						; size = 4
_bStretch$ = -41					; size = 1
_this$ = -40						; size = 4
_rcSrc$1 = -36						; size = 16
_rcSrc$2 = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_srcBuffer$ = 8						; size = 4
_dstRect$ = 12						; size = 4
_srcRect$ = 16						; size = 4
?Compose@ImageBuffer@@QAEXPAV1@PAUtagRECT@@1@Z PROC	; ImageBuffer::Compose
; _this$ = ecx

; 810  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 811  : 	ShiAssert(IsReady());
; 812  : 	ShiAssert(FALSE == F4IsBadReadPtr(srcRect, sizeof *srcRect));
; 813  : 	ShiAssert(FALSE == F4IsBadReadPtr(dstRect, sizeof *dstRect));
; 814  : 	ShiAssert(FALSE == F4IsBadReadPtr(srcBuffer, sizeof *srcBuffer));
; 815  : 
; 816  : 
; 817  : 	bool bStretch = ((srcRect->right - srcRect->left) != (dstRect->right - dstRect->left)) || ((srcRect->bottom - srcRect->top) != (dstRect->bottom - dstRect->top));

	mov	eax, DWORD PTR _srcRect$[ebp]
	mov	ecx, DWORD PTR _srcRect$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _dstRect$[ebp]
	mov	ecx, DWORD PTR _dstRect$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx]
	cmp	edx, eax
	jne	SHORT $LN10@Compose
	mov	ecx, DWORD PTR _srcRect$[ebp]
	mov	edx, DWORD PTR _srcRect$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _dstRect$[ebp]
	mov	edx, DWORD PTR _dstRect$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	sub	ecx, DWORD PTR [edx+4]
	cmp	eax, ecx
	jne	SHORT $LN10@Compose
	mov	DWORD PTR tv78[ebp], 0
	jmp	SHORT $LN11@Compose
$LN10@Compose:
	mov	DWORD PTR tv78[ebp], 1
$LN11@Compose:
	mov	dl, BYTE PTR tv78[ebp]
	mov	BYTE PTR _bStretch$[ebp], dl

; 818  : 	HRESULT hr;
; 819  : 
; 820  : 	if(!m_bFrontRectValid && !bStretch)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+160]
	test	ecx, ecx
	jne	$LN7@Compose
	movzx	edx, BYTE PTR _bStretch$[ebp]
	test	edx, edx
	jne	$LN7@Compose

; 821  : 	{
; 822  : 		if(srcRect && m_pBltTarget != m_pDDSBack)

	cmp	DWORD PTR _srcRect$[ebp], 0
	je	$LN6@Compose
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+316]
	cmp	edx, DWORD PTR [ecx+164]
	je	SHORT $LN6@Compose

; 823  : 		{
; 824  : 			RECT rcSrc = *srcRect;

	mov	eax, DWORD PTR _srcRect$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _rcSrc$1[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _rcSrc$1[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _rcSrc$1[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _rcSrc$1[ebp+12], edx

; 825  : 			rcSrc.left += m_rcFront.left;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rcSrc$1[ebp]
	add	ecx, DWORD PTR [eax+144]
	mov	DWORD PTR _rcSrc$1[ebp], ecx

; 826  : 			rcSrc.top += m_rcFront.top;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _rcSrc$1[ebp+4]
	add	eax, DWORD PTR [edx+148]
	mov	DWORD PTR _rcSrc$1[ebp+4], eax

; 827  : 
; 828  : 			hr = m_pBltTarget->BltFast(rcSrc.left, rcSrc.top, srcBuffer->m_pDDSBack, dstRect, DDBLTFAST_WAIT | DDBLTFAST_NOCOLORKEY);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _dstRect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcBuffer$[ebp]
	mov	eax, DWORD PTR [edx+164]
	push	eax
	mov	ecx, DWORD PTR _rcSrc$1[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _rcSrc$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+316]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+316]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax
	jmp	SHORT $LN5@Compose
$LN6@Compose:

; 829  : 		}
; 830  : 
; 831  : 		else hr = m_pBltTarget->BltFast(srcRect->left, srcRect->top, srcBuffer->m_pDDSBack, dstRect, DDBLTFAST_WAIT | DDBLTFAST_NOCOLORKEY);

	push	16					; 00000010H
	mov	eax, DWORD PTR _dstRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcBuffer$[ebp]
	mov	edx, DWORD PTR [ecx+164]
	push	edx
	mov	eax, DWORD PTR _srcRect$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _srcRect$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+316]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+316]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+28]
	call	eax
	mov	DWORD PTR _hr$[ebp], eax
$LN5@Compose:

; 832  : 	}
; 833  : 
; 834  : 	else

	jmp	$LN4@Compose
$LN7@Compose:

; 835  : 	{
; 836  : 		if(m_bFrontRectValid && srcRect && m_pBltTarget != m_pDDSBack)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+160]
	test	edx, edx
	je	$LN3@Compose
	cmp	DWORD PTR _srcRect$[ebp], 0
	je	$LN3@Compose
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+316]
	cmp	edx, DWORD PTR [ecx+164]
	je	$LN3@Compose

; 837  : 		{
; 838  : 			RECT rcSrc = *srcRect;

	mov	eax, DWORD PTR _srcRect$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _rcSrc$2[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _rcSrc$2[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _rcSrc$2[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _rcSrc$2[ebp+12], edx

; 839  : 			rcSrc.left += m_rcFront.left;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rcSrc$2[ebp]
	add	ecx, DWORD PTR [eax+144]
	mov	DWORD PTR _rcSrc$2[ebp], ecx

; 840  : 			rcSrc.right += m_rcFront.left;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _rcSrc$2[ebp+8]
	add	eax, DWORD PTR [edx+144]
	mov	DWORD PTR _rcSrc$2[ebp+8], eax

; 841  : 			rcSrc.top += m_rcFront.top;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _rcSrc$2[ebp+4]
	add	edx, DWORD PTR [ecx+148]
	mov	DWORD PTR _rcSrc$2[ebp+4], edx

; 842  : 			rcSrc.bottom += m_rcFront.top;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rcSrc$2[ebp+12]
	add	ecx, DWORD PTR [eax+148]
	mov	DWORD PTR _rcSrc$2[ebp+12], ecx

; 843  : 
; 844  : 			hr = m_pBltTarget->Blt(&rcSrc, srcBuffer->m_pDDSBack, dstRect, DDBLT_WAIT, NULL);

	push	0
	push	16777216				; 01000000H
	mov	edx, DWORD PTR _dstRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcBuffer$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	push	ecx
	lea	edx, DWORD PTR _rcSrc$2[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+316]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+316]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax
	jmp	SHORT $LN4@Compose
$LN3@Compose:

; 845  : 		}
; 846  : 
; 847  : 		else hr = m_pBltTarget->Blt(srcRect, srcBuffer->m_pDDSBack, dstRect, DDBLT_WAIT, NULL);

	push	0
	push	16777216				; 01000000H
	mov	eax, DWORD PTR _dstRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcBuffer$[ebp]
	mov	edx, DWORD PTR [ecx+164]
	push	edx
	mov	eax, DWORD PTR _srcRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+316]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+316]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+20]
	call	eax
	mov	DWORD PTR _hr$[ebp], eax
$LN4@Compose:

; 848  : 	}
; 849  : 
; 850  : 	ShiAssert(SUCCEEDED(hr));
; 851  : 
; 852  : 	if(!SUCCEEDED(hr))

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN8@Compose

; 853  : 		MonoPrint("ImageBuffer::Compose - Error 0x%X\n", hr);

	mov	ecx, DWORD PTR _hr$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CD@OMFHGJNJ@ImageBuffer?3?3Compose?5?9?5Error?50x?$CF@
	call	_MonoPrint
	add	esp, 8
$LN8@Compose:

; 854  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Compose@ImageBuffer@@QAEXPAV1@PAUtagRECT@@1@Z ENDP	; ImageBuffer::Compose
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\imagebuf.h
;	COMDAT ?Pixel@ImageBuffer@@QAEPAXPAXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
_row$ = 12						; size = 4
_col$ = 16						; size = 4
?Pixel@ImageBuffer@@QAEPAXPAXHH@Z PROC			; ImageBuffer::Pixel, COMDAT
; _this$ = ecx

; 70   : 	void* Pixel( void* ptr, int row, int col )	  { ShiAssert( ptr );

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 											return (BYTE*)ptr + 
; 72   : 											  row*m_ddsdBack.lPitch + 
; 73   : 											  col*PixelSize(); };

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _row$[ebp]
	imul	esi, DWORD PTR [eax+184]
	add	esi, DWORD PTR _ptr$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PixelSize@ImageBuffer@@QAEHXZ		; ImageBuffer::PixelSize
	imul	eax, DWORD PTR _col$[ebp]
	add	eax, esi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Pixel@ImageBuffer@@QAEPAXPAXHH@Z ENDP			; ImageBuffer::Pixel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\imagebuf.cpp
_TEXT	SEGMENT
_color$ = -8						; size = 4
_this$ = -4						; size = 4
_ABGR$ = 8						; size = 4
?Pixel32toPixel32@ImageBuffer@@QAEKK@Z PROC		; ImageBuffer::Pixel32toPixel32
; _this$ = ecx

; 744  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 745  : 	UInt32		color;
; 746  : 	
; 747  : // OW FIXME
; 748  : //	ShiAssert( PixelSize() == 2 );	// Only returns 16 bit values
; 749  : 
; 750  : 	// RED
; 751  : 	if (redShift >= 0) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+300], 0
	jl	SHORT $LN6@Pixel32toP

; 752  : 		color = (ABGR >>  redShift) & m_ddsdFront.ddpfPixelFormat.dwRBitMask;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ABGR$[ebp]
	mov	ecx, DWORD PTR [ecx+300]
	shr	edx, cl
	mov	eax, DWORD PTR _this$[ebp]
	and	edx, DWORD PTR [eax+104]
	mov	DWORD PTR _color$[ebp], edx

; 753  : 	} else {

	jmp	SHORT $LN5@Pixel32toP
$LN6@Pixel32toP:

; 754  : 		color = (ABGR << -redShift) & m_ddsdFront.ddpfPixelFormat.dwRBitMask;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+300]
	neg	ecx
	mov	edx, DWORD PTR _ABGR$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _this$[ebp]
	and	edx, DWORD PTR [eax+104]
	mov	DWORD PTR _color$[ebp], edx
$LN5@Pixel32toP:

; 755  : 	}
; 756  : 
; 757  : 	// GREEN
; 758  : 	if (greenShift >= 0) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+304], 0
	jl	SHORT $LN4@Pixel32toP

; 759  : 		color |= (ABGR >>  greenShift) & m_ddsdFront.ddpfPixelFormat.dwGBitMask;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _ABGR$[ebp]
	mov	ecx, DWORD PTR [edx+304]
	shr	eax, cl
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+108]
	or	eax, DWORD PTR _color$[ebp]
	mov	DWORD PTR _color$[ebp], eax

; 760  : 	} else {

	jmp	SHORT $LN3@Pixel32toP
$LN4@Pixel32toP:

; 761  : 		color |= (ABGR << -greenShift) & m_ddsdFront.ddpfPixelFormat.dwGBitMask;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+304]
	neg	ecx
	mov	eax, DWORD PTR _ABGR$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+108]
	or	eax, DWORD PTR _color$[ebp]
	mov	DWORD PTR _color$[ebp], eax
$LN3@Pixel32toP:

; 762  : 	}
; 763  : 
; 764  : 	// BLUE
; 765  : 	if (blueShift >= 0) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+308], 0
	jl	SHORT $LN2@Pixel32toP

; 766  : 		color |= (ABGR >>  blueShift) & m_ddsdFront.ddpfPixelFormat.dwBBitMask;

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ABGR$[ebp]
	mov	ecx, DWORD PTR [eax+308]
	shr	edx, cl
	mov	eax, DWORD PTR _this$[ebp]
	and	edx, DWORD PTR [eax+112]
	or	edx, DWORD PTR _color$[ebp]
	mov	DWORD PTR _color$[ebp], edx

; 767  : 	} else {

	jmp	SHORT $LN1@Pixel32toP
$LN2@Pixel32toP:

; 768  : 		color |= (ABGR << -blueShift) & m_ddsdFront.ddpfPixelFormat.dwBBitMask;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+308]
	neg	ecx
	mov	edx, DWORD PTR _ABGR$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _this$[ebp]
	and	edx, DWORD PTR [eax+112]
	or	edx, DWORD PTR _color$[ebp]
	mov	DWORD PTR _color$[ebp], edx
$LN1@Pixel32toP:

; 769  : 	}
; 770  : 
; 771  : 	return color;

	mov	eax, DWORD PTR _color$[ebp]

; 772  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Pixel32toPixel32@ImageBuffer@@QAEKK@Z ENDP		; ImageBuffer::Pixel32toPixel32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\imagebuf.cpp
_TEXT	SEGMENT
_color$ = -8						; size = 4
_this$ = -4						; size = 4
_pixel$ = 8						; size = 2
?Pixel16toPixel32@ImageBuffer@@QAEKG@Z PROC		; ImageBuffer::Pixel16toPixel32
; _this$ = ecx

; 778  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 779  : 	UInt32		color;
; 780  : 	
; 781  : 	ShiAssert( PixelSize() == 2 );	// Only returns 16 bit values
; 782  : 
; 783  : 	// RED
; 784  : 	if (redShift >= 0) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+300], 0
	jl	SHORT $LN6@Pixel16toP

; 785  : 		color = (pixel & m_ddsdFront.ddpfPixelFormat.dwRBitMask) <<  redShift;

	movzx	edx, WORD PTR _pixel$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	and	edx, DWORD PTR [eax+104]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+300]
	shl	edx, cl
	mov	DWORD PTR _color$[ebp], edx

; 786  : 	} else {

	jmp	SHORT $LN5@Pixel16toP
$LN6@Pixel16toP:

; 787  : 		color = (pixel & m_ddsdFront.ddpfPixelFormat.dwRBitMask) >> -redShift;

	movzx	edx, WORD PTR _pixel$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	and	edx, DWORD PTR [eax+104]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+300]
	neg	ecx
	shr	edx, cl
	mov	DWORD PTR _color$[ebp], edx
$LN5@Pixel16toP:

; 788  : 	}
; 789  : 
; 790  : 	// GREEN
; 791  : 	if (greenShift >= 0) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+304], 0
	jl	SHORT $LN4@Pixel16toP

; 792  : 		color |= (pixel & m_ddsdFront.ddpfPixelFormat.dwGBitMask) <<  greenShift;

	movzx	eax, WORD PTR _pixel$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+108]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+304]
	shl	eax, cl
	or	eax, DWORD PTR _color$[ebp]
	mov	DWORD PTR _color$[ebp], eax

; 793  : 	} else {

	jmp	SHORT $LN3@Pixel16toP
$LN4@Pixel16toP:

; 794  : 		color |= (pixel & m_ddsdFront.ddpfPixelFormat.dwGBitMask) >> -greenShift;

	movzx	eax, WORD PTR _pixel$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+108]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+304]
	neg	ecx
	shr	eax, cl
	or	eax, DWORD PTR _color$[ebp]
	mov	DWORD PTR _color$[ebp], eax
$LN3@Pixel16toP:

; 795  : 	}
; 796  : 
; 797  : 	// BLUE
; 798  : 	if (blueShift >= 0) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+308], 0
	jl	SHORT $LN2@Pixel16toP

; 799  : 		color |= (pixel & m_ddsdFront.ddpfPixelFormat.dwBBitMask) <<  blueShift;

	movzx	edx, WORD PTR _pixel$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	and	edx, DWORD PTR [eax+112]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+308]
	shl	edx, cl
	or	edx, DWORD PTR _color$[ebp]
	mov	DWORD PTR _color$[ebp], edx

; 800  : 	} else {

	jmp	SHORT $LN1@Pixel16toP
$LN2@Pixel16toP:

; 801  : 		color |= (pixel & m_ddsdFront.ddpfPixelFormat.dwBBitMask) >> -blueShift;

	movzx	edx, WORD PTR _pixel$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	and	edx, DWORD PTR [eax+112]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+308]
	neg	ecx
	shr	edx, cl
	or	edx, DWORD PTR _color$[ebp]
	mov	DWORD PTR _color$[ebp], edx
$LN1@Pixel16toP:

; 802  : 	}
; 803  : 
; 804  : 	return color;

	mov	eax, DWORD PTR _color$[ebp]

; 805  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Pixel16toPixel32@ImageBuffer@@QAEKG@Z ENDP		; ImageBuffer::Pixel16toPixel32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\imagebuf.cpp
_TEXT	SEGMENT
_color$ = -8						; size = 4
_this$ = -4						; size = 4
_ABGR$ = 8						; size = 4
?Pixel32toPixel16@ImageBuffer@@QAEGK@Z PROC		; ImageBuffer::Pixel32toPixel16
; _this$ = ecx

; 713  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 714  : 	UInt32		color;
; 715  : 	
; 716  : // OW FIXME
; 717  : //	ShiAssert( PixelSize() == 2 );	// Only returns 16 bit values
; 718  : 
; 719  : 	// RED
; 720  : 	if (redShift >= 0) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+300], 0
	jl	SHORT $LN6@Pixel32toP

; 721  : 		color = (ABGR >>  redShift) & m_ddsdFront.ddpfPixelFormat.dwRBitMask;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ABGR$[ebp]
	mov	ecx, DWORD PTR [ecx+300]
	shr	edx, cl
	mov	eax, DWORD PTR _this$[ebp]
	and	edx, DWORD PTR [eax+104]
	mov	DWORD PTR _color$[ebp], edx

; 722  : 	} else {

	jmp	SHORT $LN5@Pixel32toP
$LN6@Pixel32toP:

; 723  : 		color = (ABGR << -redShift) & m_ddsdFront.ddpfPixelFormat.dwRBitMask;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+300]
	neg	ecx
	mov	edx, DWORD PTR _ABGR$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _this$[ebp]
	and	edx, DWORD PTR [eax+104]
	mov	DWORD PTR _color$[ebp], edx
$LN5@Pixel32toP:

; 724  : 	}
; 725  : 
; 726  : 	// GREEN
; 727  : 	if (greenShift >= 0) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+304], 0
	jl	SHORT $LN4@Pixel32toP

; 728  : 		color |= (ABGR >>  greenShift) & m_ddsdFront.ddpfPixelFormat.dwGBitMask;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _ABGR$[ebp]
	mov	ecx, DWORD PTR [edx+304]
	shr	eax, cl
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+108]
	or	eax, DWORD PTR _color$[ebp]
	mov	DWORD PTR _color$[ebp], eax

; 729  : 	} else {

	jmp	SHORT $LN3@Pixel32toP
$LN4@Pixel32toP:

; 730  : 		color |= (ABGR << -greenShift) & m_ddsdFront.ddpfPixelFormat.dwGBitMask;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+304]
	neg	ecx
	mov	eax, DWORD PTR _ABGR$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+108]
	or	eax, DWORD PTR _color$[ebp]
	mov	DWORD PTR _color$[ebp], eax
$LN3@Pixel32toP:

; 731  : 	}
; 732  : 
; 733  : 	// BLUE
; 734  : 	if (blueShift >= 0) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+308], 0
	jl	SHORT $LN2@Pixel32toP

; 735  : 		color |= (ABGR >>  blueShift) & m_ddsdFront.ddpfPixelFormat.dwBBitMask;

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ABGR$[ebp]
	mov	ecx, DWORD PTR [eax+308]
	shr	edx, cl
	mov	eax, DWORD PTR _this$[ebp]
	and	edx, DWORD PTR [eax+112]
	or	edx, DWORD PTR _color$[ebp]
	mov	DWORD PTR _color$[ebp], edx

; 736  : 	} else {

	jmp	SHORT $LN1@Pixel32toP
$LN2@Pixel32toP:

; 737  : 		color |= (ABGR << -blueShift) & m_ddsdFront.ddpfPixelFormat.dwBBitMask;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+308]
	neg	ecx
	mov	edx, DWORD PTR _ABGR$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _this$[ebp]
	and	edx, DWORD PTR [eax+112]
	or	edx, DWORD PTR _color$[ebp]
	mov	DWORD PTR _color$[ebp], edx
$LN1@Pixel32toP:

; 738  : 	}
; 739  : 
; 740  : 	return (WORD)color;

	mov	ax, WORD PTR _color$[ebp]

; 741  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Pixel32toPixel16@ImageBuffer@@QAEGK@Z ENDP		; ImageBuffer::Pixel32toPixel16
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\imagebuf.cpp
_TEXT	SEGMENT
_hr$1 = -8						; size = 4
_this$ = -4						; size = 4
?Unlock@ImageBuffer@@QAEXXZ PROC			; ImageBuffer::Unlock
; _this$ = ecx

; 660  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 	ShiAssert(IsReady());
; 662  : 
; 663  : 	if(m_bBitsLocked)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+344]
	test	ecx, ecx
	je	SHORT $LN2@Unlock

; 664  : 	{
; 665  : 		HRESULT hr = m_pDDSBack->Unlock(NULL);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+164]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+128]
	call	ecx
	mov	DWORD PTR _hr$1[ebp], eax

; 666  : 		ShiAssert(SUCCEEDED(hr));
; 667  : 		m_bBitsLocked = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+344], 0
$LN2@Unlock:

; 668  : 	}
; 669  : 
; 670  : #ifdef _IMAGEBUFFER_PROTECT_SURF_LOCK
; 671  : 	LeaveCriticalSection(&m_cs);
; 672  : #endif
; 673  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Unlock@ImageBuffer@@QAEXXZ ENDP			; ImageBuffer::Unlock
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\imagebuf.cpp
_TEXT	SEGMENT
tv84 = -148						; size = 4
_nRetries$ = -144					; size = 4
_dwFlags$ = -140					; size = 4
_hr$ = -136						; size = 4
_this$ = -132						; size = 4
_ddsd$ = -128						; size = 124
__$ArrayPad$ = -4					; size = 4
_bLockMutexOnly$ = 8					; size = 1
_bWriteOnly$ = 12					; size = 1
?Lock@ImageBuffer@@QAEPAX_N0@Z PROC			; ImageBuffer::Lock
; _this$ = ecx

; 618  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 148				; 00000094H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 619  : #ifdef _IMAGEBUFFER_PROTECT_SURF_LOCK
; 620  : 	EnterCriticalSection(&m_cs);
; 621  : 	if(bLockMutexOnly)
; 622  : 		return NULL;
; 623  : #endif
; 624  : 
; 625  : 	ShiAssert(IsReady());
; 626  : 
; 627  : 	HRESULT hr;
; 628  : 
; 629  : 	DDSURFACEDESC2 ddsd;
; 630  : 	ZeroMemory(&ddsd, sizeof(ddsd));

	push	124					; 0000007cH
	push	0
	lea	eax, DWORD PTR _ddsd$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 631  : 	ddsd.dwSize = sizeof(ddsd);

	mov	DWORD PTR _ddsd$[ebp], 124		; 0000007cH

; 632  : 
; 633  : //	DWORD dwFlags = DDLOCK_NOSYSLOCK | DDLOCK_WAIT | DDLOCK_SURFACEMEMORYPTR;
; 634  : 	DWORD dwFlags = DDLOCK_WAIT | DDLOCK_SURFACEMEMORYPTR;

	mov	DWORD PTR _dwFlags$[ebp], 1

; 635  : 	if(bWriteOnly) dwFlags |= DDLOCK_WRITEONLY;

	movzx	ecx, BYTE PTR _bWriteOnly$[ebp]
	test	ecx, ecx
	je	SHORT $LN3@Lock
	mov	edx, DWORD PTR _dwFlags$[ebp]
	or	edx, 32					; 00000020H
	mov	DWORD PTR _dwFlags$[ebp], edx
$LN3@Lock:

; 636  : 
; 637  : 	int nRetries = 1;

	mov	DWORD PTR _nRetries$[ebp], 1
$Retry$8:

; 638  : 
; 639  : 	Retry:
; 640  : 	hr = m_pDDSBack->Lock(NULL, &ddsd, dwFlags, NULL);

	push	0
	mov	eax, DWORD PTR _dwFlags$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ddsd$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+164]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+100]
	call	ecx
	mov	DWORD PTR _hr$[ebp], eax

; 641  : 	m_bBitsLocked = SUCCEEDED(hr);

	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN6@Lock
	mov	DWORD PTR tv84[ebp], 1
	jmp	SHORT $LN7@Lock
$LN6@Lock:
	mov	DWORD PTR tv84[ebp], 0
$LN7@Lock:
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR tv84[ebp]
	mov	BYTE PTR [edx+344], al

; 642  : 
; 643  : 	if(FAILED(hr))

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@Lock

; 644  : 	{
; 645  : 		MonoPrint("ImageBuffer::Lock - Lock failed with 0x%X\n", hr);

	mov	ecx, DWORD PTR _hr$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CL@PJFFNFOB@ImageBuffer?3?3Lock?5?9?5Lock?5failed?5@
	call	_MonoPrint
	add	esp, 8

; 646  : 
; 647  : 		if(hr == DDERR_SURFACELOST && nRetries)

	cmp	DWORD PTR _hr$[ebp], -2005532222	; 887601c2H
	jne	SHORT $LN2@Lock
	cmp	DWORD PTR _nRetries$[ebp], 0
	je	SHORT $LN2@Lock

; 648  : 		{
; 649  : 			RestoreAll();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RestoreAll@ImageBuffer@@QAEXXZ		; ImageBuffer::RestoreAll

; 650  : 			nRetries--;

	mov	edx, DWORD PTR _nRetries$[ebp]
	sub	edx, 1
	mov	DWORD PTR _nRetries$[ebp], edx

; 651  : 			goto Retry;

	jmp	$Retry$8
$LN2@Lock:

; 652  : 		}
; 653  : 	}
; 654  : 
; 655  : 	return ddsd.lpSurface;

	mov	eax, DWORD PTR _ddsd$[ebp+36]

; 656  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
?Lock@ImageBuffer@@QAEPAX_N0@Z ENDP			; ImageBuffer::Lock
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\imagebuf.cpp
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_this$ = -4						; size = 4
?RestoreAll@ImageBuffer@@QAEXXZ PROC			; ImageBuffer::RestoreAll
; _this$ = ecx

; 1193 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1194 : 	ShiAssert(IsReady());
; 1195 : 
; 1196 : 	HRESULT hr;
; 1197 : 	hr = m_pDDSFront->IsLost();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+96]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax

; 1198 : 
; 1199 : 	if(hr == DDERR_SURFACELOST)

	cmp	DWORD PTR _hr$[ebp], -2005532222	; 887601c2H
	jne	$LN8@RestoreAll

; 1200 : 	{
; 1201 : 		hr = m_pDDSFront->Restore();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax

; 1202 : 
; 1203 : 		if(SUCCEEDED(hr))

	cmp	DWORD PTR _hr$[ebp], 0
	jl	$LN6@RestoreAll

; 1204 : 		{
; 1205 : 			MonoPrint("ImageBuffer::RestoreAll - Front restored\n");

	push	OFFSET ??_C@_0CK@GOCDMECF@ImageBuffer?3?3RestoreAll?5?9?5Front?5@
	call	_MonoPrint
	add	esp, 4

; 1206 : 
; 1207 : 			if(m_pDDSFront != m_pDDSBack)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx+164]
	je	SHORT $LN5@RestoreAll

; 1208 : 			{
; 1209 : 				hr = m_pDDSBack->IsLost();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+96]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax

; 1210 : 
; 1211 : 				if(hr == DDERR_SURFACELOST)

	cmp	DWORD PTR _hr$[ebp], -2005532222	; 887601c2H
	jne	SHORT $LN5@RestoreAll

; 1212 : 				{
; 1213 : 					hr = m_pDDSBack->Restore();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax

; 1214 : 
; 1215 : 					if(SUCCEEDED(hr))

	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN3@RestoreAll

; 1216 : 						MonoPrint("ImageBuffer::RestoreAll - Back restored\n");

	push	OFFSET ??_C@_0CJ@DOOGKKKM@ImageBuffer?3?3RestoreAll?5?9?5Back?5r@
	call	_MonoPrint
	add	esp, 4
	jmp	SHORT $LN5@RestoreAll
$LN3@RestoreAll:

; 1217 : 					else MonoPrint("ImageBuffer::RestoreAll - Failed to restore back (0x%X)\n", hr);

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	push	OFFSET ??_C@_0DJ@FFLHDDCB@ImageBuffer?3?3RestoreAll?5?9?5Failed@
	call	_MonoPrint
	add	esp, 8
$LN5@RestoreAll:

; 1218 : 				}
; 1219 : 			}
; 1220 : 		}

	jmp	SHORT $LN8@RestoreAll
$LN6@RestoreAll:

; 1221 : 
; 1222 : 		else MonoPrint("ImageBuffer::RestoreAll - Failed to restore front (0x%X)\n", hr);

	mov	ecx, DWORD PTR _hr$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DK@FJKIHOJG@ImageBuffer?3?3RestoreAll?5?9?5Failed@
	call	_MonoPrint
	add	esp, 8
$LN8@RestoreAll:

; 1223 : 	}
; 1224 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RestoreAll@ImageBuffer@@QAEXXZ ENDP			; ImageBuffer::RestoreAll
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\imagebuf.h
;	COMDAT ?PixelSize@ImageBuffer@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?PixelSize@ImageBuffer@@QAEHXZ PROC			; ImageBuffer::PixelSize, COMDAT
; _this$ = ecx

; 56   : 	int	PixelSize() { return m_ddsdFront.ddpfPixelFormat.dwRGBBitCount >>3; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+100]
	shr	eax, 3
	mov	esp, ebp
	pop	ebp
	ret	0
?PixelSize@ImageBuffer@@QAEHXZ ENDP			; ImageBuffer::PixelSize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\imagebuf.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_r$ = 8							; size = 4
_g$ = 12						; size = 4
_b$ = 16						; size = 4
?GetColorMasks@ImageBuffer@@QAEXPAK00@Z PROC		; ImageBuffer::GetColorMasks
; _this$ = ecx

; 602  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 603  : 	*r = m_ddsdFront.ddpfPixelFormat.dwRBitMask;

	mov	eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	mov	DWORD PTR [eax], edx

; 604  : 	*g = m_ddsdFront.ddpfPixelFormat.dwGBitMask;

	mov	eax, DWORD PTR _g$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax], edx

; 605  : 	*b = m_ddsdFront.ddpfPixelFormat.dwBBitMask;

	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	DWORD PTR [eax], edx

; 606  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetColorMasks@ImageBuffer@@QAEXPAK00@Z ENDP		; ImageBuffer::GetColorMasks
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\imagebuf.h
;	COMDAT ?targetYres@ImageBuffer@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?targetYres@ImageBuffer@@QAEHXZ PROC			; ImageBuffer::targetYres, COMDAT
; _this$ = ecx

; 46   : 	int	targetYres()	{ return height; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+296]
	mov	esp, ebp
	pop	ebp
	ret	0
?targetYres@ImageBuffer@@QAEHXZ ENDP			; ImageBuffer::targetYres
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\imagebuf.h
;	COMDAT ?targetXres@ImageBuffer@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?targetXres@ImageBuffer@@QAEHXZ PROC			; ImageBuffer::targetXres, COMDAT
; _this$ = ecx

; 45   : 	int targetXres()	{ return width; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+292]
	mov	esp, ebp
	pop	ebp
	ret	0
?targetXres@ImageBuffer@@QAEHXZ ENDP			; ImageBuffer::targetXres
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\imagebuf.cpp
_TEXT	SEGMENT
_e$2 = -52						; size = 16
tv175 = -36						; size = 4
tv174 = -32						; size = 4
tv173 = -28						; size = 4
tv172 = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_pDev$ = 8						; size = 4
_pDDSFront$ = 12					; size = 4
_pDDSBack$ = 16						; size = 4
?AttachSurfaces@ImageBuffer@@QAEXPAVDisplayDevice@@PAUIDirectDrawSurface7@@1@Z PROC ; ImageBuffer::AttachSurfaces
; _this$ = ecx

; 492  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AttachSurfaces@ImageBuffer@@QAEXPAVDisplayDevice@@PAUIDirectDrawSurface7@@1@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 493  : 	if(!pDev || !pDDSFront)

	cmp	DWORD PTR _pDev$[ebp], 0
	je	SHORT $LN3@AttachSurf
	cmp	DWORD PTR _pDDSFront$[ebp], 0
	jne	SHORT $LN4@AttachSurf
$LN3@AttachSurf:

; 494  : 		return;

	jmp	$LN5@AttachSurf
$LN4@AttachSurf:

; 495  : 
; 496  : 	if(!pDDSBack)

	cmp	DWORD PTR _pDDSBack$[ebp], 0
	jne	SHORT $LN2@AttachSurf

; 497  : 		pDDSBack = pDDSFront;

	mov	eax, DWORD PTR _pDDSFront$[ebp]
	mov	DWORD PTR _pDDSBack$[ebp], eax
$LN2@AttachSurf:

; 498  : 
; 499  : 	try
; 500  : 	{

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 501  : 		CheckHR(pDDSFront->QueryInterface(IID_IDirectDrawSurface7, (void **) &m_pDDSFront));

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	push	OFFSET _IID_IDirectDrawSurface7
	mov	edx, DWORD PTR _pDDSFront$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDDSFront$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	call	edx
	mov	DWORD PTR tv172[ebp], eax
	mov	eax, DWORD PTR tv172[ebp]
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 502  : 		CheckHR(pDDSBack->QueryInterface(IID_IDirectDrawSurface7, (void **) &m_pDDSBack));

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 164				; 000000a4H
	push	ecx
	push	OFFSET _IID_IDirectDrawSurface7
	mov	edx, DWORD PTR _pDDSBack$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDDSBack$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	call	edx
	mov	DWORD PTR tv173[ebp], eax
	mov	eax, DWORD PTR tv173[ebp]
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 503  : 
; 504  : 		// Compute the color format conversion parameters
; 505  : 		m_ddsdFront.dwSize = sizeof(DDSURFACEDESC2);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 124			; 0000007cH

; 506  : 		CheckHR(m_pDDSFront->GetSurfaceDesc(&m_ddsdFront));

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+88]
	call	edx
	mov	DWORD PTR tv174[ebp], eax
	mov	eax, DWORD PTR tv174[ebp]
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 507  : 		m_ddsdBack.dwSize = sizeof(DDSURFACEDESC2);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+168], 124		; 0000007cH

; 508  : 		CheckHR(m_pDDSBack->GetSurfaceDesc(&m_ddsdBack));

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 168				; 000000a8H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+88]
	call	edx
	mov	DWORD PTR tv175[ebp], eax
	mov	eax, DWORD PTR tv175[ebp]
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 509  : 
; 510  : 		// Set blt target surface depending on wether we will page flip or not
; 511  : 		m_pBltTarget = m_pDDSFront;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+316], eax

; 512  : 
; 513  : 		// Record the properties of the buffer(s) we're creating
; 514  : 		device = pDev;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pDev$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 515  : 		width = m_ddsdFront.dwWidth;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+292], edx

; 516  : 		height = m_ddsdFront.dwHeight;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+296], edx

; 517  : 
; 518  : 		m_bFrontRectValid = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+160], 0

; 519  : 		ZeroMemory(&m_rcFront, sizeof(m_rcFront));

	push	16					; 00000010H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 520  : 
; 521  : 		ComputeColorShifts();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ComputeColorShifts@ImageBuffer@@IAEXXZ	; ImageBuffer::ComputeColorShifts

; 522  : 
; 523  : 		// Everything worked, so finish up and return
; 524  : 		m_bReady = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 1

; 525  : 	}

	jmp	SHORT $LN7@AttachSurf
__catch$?AttachSurfaces@ImageBuffer@@QAEXPAVDisplayDevice@@PAUIDirectDrawSurface7@@1@Z$0:

; 526  : 
; 527  : 	catch(_com_error e)
; 528  : 	{
; 529  : 		MonoPrint("ImageBuffer::AttachSurfaces - Error 0x%X\n", e.Error());

	lea	ecx, DWORD PTR _e$2[ebp]
	call	?Error@_com_error@@QBEJXZ		; _com_error::Error
	push	eax
	push	OFFSET ??_C@_0CK@OHELCDCI@ImageBuffer?3?3AttachSurfaces?5?9?5Er@
	call	_MonoPrint
	add	esp, 8

; 530  : 	}

	lea	ecx, DWORD PTR _e$2[ebp]
	call	??1_com_error@@UAE@XZ			; _com_error::~_com_error
	mov	eax, $LN11@AttachSurf
	ret	0
$LN7@AttachSurf:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN5@AttachSurf
$LN11@AttachSurf:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN5@AttachSurf:

; 531  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?AttachSurfaces@ImageBuffer@@QAEXPAVDisplayDevice@@PAUIDirectDrawSurface7@@1@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AttachSurfaces@ImageBuffer@@QAEXPAVDisplayDevice@@PAUIDirectDrawSurface7@@1@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AttachSurfaces@ImageBuffer@@QAEXPAVDisplayDevice@@PAUIDirectDrawSurface7@@1@Z ENDP ; ImageBuffer::AttachSurfaces
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\imagebuf.cpp
_TEXT	SEGMENT
tv75 = -8						; size = 4
_this$ = -4						; size = 4
_rect$ = 8						; size = 4
?UpdateFrontWindowRect@ImageBuffer@@QAEXPAUtagRECT@@@Z PROC ; ImageBuffer::UpdateFrontWindowRect
; _this$ = ecx

; 610  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 611  : 	// ShiAssert( frontType == Primary );	// This is only useful for the primary surface
; 612  : 	if(rect) m_rcFront = *rect;

	cmp	DWORD PTR _rect$[ebp], 0
	je	SHORT $LN1@UpdateFron
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 144				; 00000090H
	mov	ecx, DWORD PTR _rect$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx
$LN1@UpdateFron:

; 613  : 	m_bFrontRectValid = rect && (m_rcFront.left || m_rcFront.right);

	cmp	DWORD PTR _rect$[ebp], 0
	je	SHORT $LN5@UpdateFron
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+144], 0
	jne	SHORT $LN4@UpdateFron
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+152], 0
	je	SHORT $LN5@UpdateFron
$LN4@UpdateFron:
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN6@UpdateFron
$LN5@UpdateFron:
	mov	DWORD PTR tv75[ebp], 0
$LN6@UpdateFron:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR tv75[ebp]
	mov	BYTE PTR [ecx+160], dl

; 614  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?UpdateFrontWindowRect@ImageBuffer@@QAEXPAUtagRECT@@@Z ENDP ; ImageBuffer::UpdateFrontWindowRect
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\imagebuf.cpp
_TEXT	SEGMENT
_key$ = -16						; size = 8
_hr$ = -8						; size = 4
_this$ = -4						; size = 4
_colorKey$ = 8						; size = 4
?SetChromaKey@ImageBuffer@@QAEXK@Z PROC			; ImageBuffer::SetChromaKey
; _this$ = ecx

; 678  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 679  : 	if (!m_pDDSFront) // JB 010404 CTD

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN7@SetChromaK

; 680  : 		return;

	jmp	$LN8@SetChromaK
$LN7@SetChromaK:

; 681  : 
; 682  : 	ShiAssert(IsReady());
; 683  : 
; 684  : 	// Convert the key color from 32 bit RGB to the current pixel format
; 685  : 
; 686  : 	// RED
; 687  : 	if (redShift >= 0)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+300], 0
	jl	SHORT $LN6@SetChromaK

; 688  : 		m_dwColorKey = (colorKey >>  redShift) & m_ddsdFront.ddpfPixelFormat.dwRBitMask;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _colorKey$[ebp]
	mov	ecx, DWORD PTR [edx+300]
	shr	eax, cl
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+104]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+312], eax

; 689  : 	else

	jmp	SHORT $LN5@SetChromaK
$LN6@SetChromaK:

; 690  : 		m_dwColorKey = (colorKey << -redShift) & m_ddsdFront.ddpfPixelFormat.dwRBitMask;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+300]
	neg	ecx
	mov	edx, DWORD PTR _colorKey$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _this$[ebp]
	and	edx, DWORD PTR [eax+104]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+312], edx
$LN5@SetChromaK:

; 691  : 
; 692  : 	// GREEN
; 693  : 	if (greenShift >= 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+304], 0
	jl	SHORT $LN4@SetChromaK

; 694  : 		m_dwColorKey |= (colorKey >>  greenShift) & m_ddsdFront.ddpfPixelFormat.dwGBitMask;

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _colorKey$[ebp]
	mov	ecx, DWORD PTR [eax+304]
	shr	edx, cl
	mov	eax, DWORD PTR _this$[ebp]
	and	edx, DWORD PTR [eax+108]
	mov	ecx, DWORD PTR _this$[ebp]
	or	edx, DWORD PTR [ecx+312]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+312], edx

; 695  : 	else

	jmp	SHORT $LN3@SetChromaK
$LN4@SetChromaK:

; 696  : 		m_dwColorKey |= (colorKey << -greenShift) & m_ddsdFront.ddpfPixelFormat.dwGBitMask;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+304]
	neg	ecx
	mov	edx, DWORD PTR _colorKey$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _this$[ebp]
	and	edx, DWORD PTR [eax+108]
	mov	ecx, DWORD PTR _this$[ebp]
	or	edx, DWORD PTR [ecx+312]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+312], edx
$LN3@SetChromaK:

; 697  : 
; 698  : 	// BLUE
; 699  : 	if(blueShift >= 0)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+308], 0
	jl	SHORT $LN2@SetChromaK

; 700  : 		m_dwColorKey |= (colorKey >>  blueShift) & m_ddsdFront.ddpfPixelFormat.dwBBitMask;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _colorKey$[ebp]
	mov	ecx, DWORD PTR [edx+308]
	shr	eax, cl
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+112]
	mov	edx, DWORD PTR _this$[ebp]
	or	eax, DWORD PTR [edx+312]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+312], eax

; 701  : 	else

	jmp	SHORT $LN1@SetChromaK
$LN2@SetChromaK:

; 702  : 		m_dwColorKey |= (colorKey << -blueShift) & m_ddsdFront.ddpfPixelFormat.dwBBitMask;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+308]
	neg	ecx
	mov	eax, DWORD PTR _colorKey$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+112]
	mov	edx, DWORD PTR _this$[ebp]
	or	eax, DWORD PTR [edx+312]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+312], eax
$LN1@SetChromaK:

; 703  : 
; 704  : 	DDCOLORKEY	key = { m_dwColorKey, m_dwColorKey};

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+312]
	mov	DWORD PTR _key$[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+312]
	mov	DWORD PTR _key$[ebp+4], edx

; 705  : 
; 706  : 	// Submit the request to DirectDraw
; 707  : 	HRESULT hr = m_pDDSFront->SetColorKey(DDCKEY_SRCBLT, &key); 

	lea	eax, DWORD PTR _key$[ebp]
	push	eax
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+116]
	call	eax
	mov	DWORD PTR _hr$[ebp], eax
$LN8@SetChromaK:

; 708  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetChromaKey@ImageBuffer@@QAEXK@Z ENDP			; ImageBuffer::SetChromaKey
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\imagebuf.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsReady@ImageBuffer@@QAEHXZ PROC			; ImageBuffer::IsReady
; _this$ = ecx

; 58   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 	return m_bReady;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 60   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsReady@ImageBuffer@@QAEHXZ ENDP			; ImageBuffer::IsReady
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\imagebuf.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Cleanup@ImageBuffer@@QAEXXZ PROC			; ImageBuffer::Cleanup
; _this$ = ecx

; 536  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 537  : 	m_bReady = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 538  : 
; 539  : 	if(m_pDDSBack)	// MUST be released before releasing the front buffer

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+164], 0
	je	SHORT $LN2@Cleanup

; 540  : 	{
; 541  : 		m_pDDSBack->Release();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+164]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx

; 542  : 		m_pDDSBack = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+164], 0
$LN2@Cleanup:

; 543  : 	}
; 544  : 
; 545  : 	// Destroy our surface (including attached back buffer)
; 546  : 	if(m_pDDSFront)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Cleanup

; 547  : 	{
; 548  : 		m_pDDSFront->Release();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 549  : 		m_pDDSFront = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
$LN1@Cleanup:

; 550  : 	}
; 551  : 
; 552  : 	m_pBltTarget = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+316], 0

; 553  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Cleanup@ImageBuffer@@QAEXXZ ENDP			; ImageBuffer::Cleanup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\imagebuf.cpp
_TEXT	SEGMENT
$T2 = -540						; size = 16
_e$3 = -524						; size = 16
$T4 = -508						; size = 16
tv587 = -492						; size = 4
tv572 = -488						; size = 4
tv579 = -484						; size = 4
tv593 = -480						; size = 4
tv597 = -476						; size = 4
tv72 = -472						; size = 4
tv590 = -468						; size = 4
$T5 = -464						; size = 4
tv583 = -460						; size = 4
$T6 = -456						; size = 4
tv575 = -452						; size = 4
tv614 = -448						; size = 4
tv595 = -444						; size = 4
tv613 = -440						; size = 4
$T7 = -436						; size = 4
tv612 = -432						; size = 4
$T8 = -428						; size = 4
tv611 = -424						; size = 4
tv585 = -420						; size = 4
tv610 = -416						; size = 4
tv581 = -412						; size = 4
tv609 = -408						; size = 4
tv577 = -404						; size = 4
tv484 = -400						; size = 4
tv573 = -396						; size = 4
$T9 = -392						; size = 4
tv596 = -388						; size = 4
$T10 = -384						; size = 4
tv594 = -380						; size = 4
tv608 = -376						; size = 4
tv592 = -372						; size = 4
tv607 = -368						; size = 4
tv591 = -364						; size = 4
tv606 = -360						; size = 4
tv589 = -356						; size = 4
$T11 = -352						; size = 4
tv588 = -348						; size = 4
tv605 = -344						; size = 4
tv586 = -340						; size = 4
tv604 = -336						; size = 4
tv571 = -332						; size = 4
tv603 = -328						; size = 4
tv582 = -324						; size = 4
tv602 = -320						; size = 4
tv580 = -316						; size = 4
tv601 = -312						; size = 4
tv578 = -308						; size = 4
tv600 = -304						; size = 4
tv576 = -300						; size = 4
tv599 = -296						; size = 4
tv574 = -292						; size = 4
$T12 = -288						; size = 4
tv598 = -284						; size = 4
tv584 = -280						; size = 4
tv85 = -276						; size = 4
tv195 = -272						; size = 4
tv81 = -268						; size = 4
tv291 = -264						; size = 4
tv502 = -260						; size = 4
tv142 = -256						; size = 4
tv489 = -252						; size = 4
tv77 = -248						; size = 4
tv453 = -244						; size = 4
tv168 = -240						; size = 4
tv448 = -236						; size = 4
tv296 = -232						; size = 4
tv416 = -228						; size = 4
tv265 = -224						; size = 4
tv376 = -220						; size = 4
tv222 = -216						; size = 4
tv360 = -212						; size = 4
tv181 = -208						; size = 4
tv352 = -204						; size = 4
tv155 = -200						; size = 4
tv320 = -196						; size = 4
tv130 = -192						; size = 4
tv312 = -188						; size = 4
tv260 = -184						; size = 4
_hr$13 = -180						; size = 4
_hr$14 = -176						; size = 4
_pDDCLP$15 = -172					; size = 4
_pDD$16 = -168						; size = 4
_this$ = -164						; size = 4
_ddscaps$17 = -160					; size = 16
_ddsd$18 = -144						; size = 124
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_dev$ = 8						; size = 4
_w$ = 12						; size = 4
_h$ = 16						; size = 4
_front$ = 20						; size = 4
_back$ = 24						; size = 4
_targetWin$ = 28					; size = 4
_clip$ = 32						; size = 4
_fullScreen$ = 36					; size = 4
_bWillCallSwapBuffer$ = 40				; size = 4
?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z PROC ; ImageBuffer::Setup
; _this$ = ecx

; 63   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 524				; 0000020cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 64   : 	ZeroMemory(&m_rcFront, sizeof(m_rcFront));

	push	16					; 00000010H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 144				; 00000090H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 65   : 
; 66   : 	try
; 67   : 	{

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 68   : 		ShiAssert( !IsReady() );
; 69   : 		ShiAssert( dev );
; 70   : 
; 71   : 
; 72   : 		// Record the properties of the buffer(s) we're creating
; 73   : 		device = dev;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _dev$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 74   : 		width = w;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+292], ecx

; 75   : 		height = h;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR [edx+296], eax

; 76   : 
; 77   : 		IDirectDraw7Ptr pDD(dev->GetMPRdevice());

	mov	ecx, DWORD PTR _dev$[ebp]
	call	?GetMPRdevice@DisplayDevice@@QAEPAUIDirectDraw7@@XZ ; DisplayDevice::GetMPRdevice
	mov	DWORD PTR tv571[ebp], eax
	mov	ecx, DWORD PTR tv571[ebp]
	push	ecx
	lea	ecx, DWORD PTR _pDD$16[ebp]
	call	??$?0UIDirectDraw7@@@?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@PAUIDirectDraw7@@@Z ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::_com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> ><IDirectDraw7>
	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 78   : 
; 79   : 		DDSURFACEDESC2 ddsd;
; 80   : 		ZeroMemory(&ddsd, sizeof(ddsd));

	push	124					; 0000007cH
	push	0
	lea	edx, DWORD PTR _ddsd$18[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 81   : 		ddsd.dwFlags = DDSD_CAPS;

	mov	DWORD PTR _ddsd$18[ebp+4], 1

; 82   : 		ddsd.dwSize = sizeof(ddsd);

	mov	DWORD PTR _ddsd$18[ebp], 124		; 0000007cH

; 83   : 
; 84   : 		switch(front)

	mov	eax, DWORD PTR _front$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	cmp	DWORD PTR tv77[ebp], 6
	ja	$LN4@Setup
	mov	ecx, DWORD PTR tv77[ebp]
	jmp	DWORD PTR $LN69@Setup[ecx*4]
$LN55@Setup:

; 85   : 		{
; 86   : 			case Primary:
; 87   : 			{
; 88   : 				switch(back)

	mov	edx, DWORD PTR _back$[ebp]
	mov	DWORD PTR tv81[ebp], edx
	cmp	DWORD PTR tv81[ebp], 4
	ja	$LN46@Setup
	mov	eax, DWORD PTR tv81[ebp]
	jmp	DWORD PTR $LN70@Setup[eax*4]
$LN52@Setup:

; 89   : 				{
; 90   : 					case SystemMem:
; 91   : 					{
; 92   : 						ddsd.ddsCaps.dwCaps = DDSCAPS_PRIMARYSURFACE; 

	mov	DWORD PTR _ddsd$18[ebp+104], 512	; 00000200H

; 93   : 						CheckHR(pDD->CreateSurface(&ddsd, &m_pDDSFront, NULL));

	lea	ecx, DWORD PTR _pDD$16[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDraw7@@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator->
	mov	DWORD PTR tv72[ebp], eax
	mov	ecx, DWORD PTR tv72[ebp]
	mov	DWORD PTR tv85[ebp], ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	lea	eax, DWORD PTR _ddsd$18[ebp]
	push	eax
	mov	ecx, DWORD PTR tv85[ebp]
	push	ecx
	mov	edx, DWORD PTR tv85[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	mov	DWORD PTR tv572[ebp], eax
	mov	edx, DWORD PTR tv572[ebp]
	push	edx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 94   : 
; 95   : 						ddsd.dwFlags |= DDSD_WIDTH | DDSD_HEIGHT;

	mov	eax, DWORD PTR _ddsd$18[ebp+4]
	or	eax, 6
	mov	DWORD PTR _ddsd$18[ebp+4], eax

; 96   : 						ddsd.dwWidth  = w;

	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR _ddsd$18[ebp+12], ecx

; 97   : 						ddsd.dwHeight = h; 

	mov	edx, DWORD PTR _h$[ebp]
	mov	DWORD PTR _ddsd$18[ebp+8], edx

; 98   : 						ddsd.ddsCaps.dwCaps = DDSCAPS_SYSTEMMEMORY | DDSCAPS_3DDEVICE; 

	mov	DWORD PTR _ddsd$18[ebp+104], 10240	; 00002800H

; 99   : 						CheckHR(pDD->CreateSurface(&ddsd, &m_pDDSBack, NULL));

	lea	ecx, DWORD PTR _pDD$16[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDraw7@@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator->
	mov	DWORD PTR tv573[ebp], eax
	mov	eax, DWORD PTR tv573[ebp]
	mov	DWORD PTR tv130[ebp], eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 164				; 000000a4H
	push	ecx
	lea	edx, DWORD PTR _ddsd$18[ebp]
	push	edx
	mov	eax, DWORD PTR tv130[ebp]
	push	eax
	mov	ecx, DWORD PTR tv130[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	mov	DWORD PTR tv574[ebp], eax
	mov	ecx, DWORD PTR tv574[ebp]
	push	ecx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 100  : 
; 101  : 						break;

	jmp	$LN53@Setup
$LN51@Setup:

; 102  : 					}
; 103  : 
; 104  : 					case VideoMem:
; 105  : 					{
; 106  : 						ddsd.ddsCaps.dwCaps = DDSCAPS_PRIMARYSURFACE; 

	mov	DWORD PTR _ddsd$18[ebp+104], 512	; 00000200H

; 107  : 						CheckHR(pDD->CreateSurface(&ddsd, &m_pDDSFront, NULL));

	lea	ecx, DWORD PTR _pDD$16[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDraw7@@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator->
	mov	DWORD PTR tv575[ebp], eax
	mov	edx, DWORD PTR tv575[ebp]
	mov	DWORD PTR tv142[ebp], edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _ddsd$18[ebp]
	push	ecx
	mov	edx, DWORD PTR tv142[ebp]
	push	edx
	mov	eax, DWORD PTR tv142[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	mov	DWORD PTR tv576[ebp], eax
	mov	eax, DWORD PTR tv576[ebp]
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 108  : 
; 109  : 						ddsd.dwFlags |= DDSD_WIDTH | DDSD_HEIGHT;

	mov	ecx, DWORD PTR _ddsd$18[ebp+4]
	or	ecx, 6
	mov	DWORD PTR _ddsd$18[ebp+4], ecx

; 110  : 						ddsd.dwWidth  = w;

	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR _ddsd$18[ebp+12], edx

; 111  : 						ddsd.dwHeight = h; 

	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR _ddsd$18[ebp+8], eax

; 112  : 						ddsd.ddsCaps.dwCaps = DDSCAPS_VIDEOMEMORY | DDSCAPS_3DDEVICE; 

	mov	DWORD PTR _ddsd$18[ebp+104], 24576	; 00006000H

; 113  : 						CheckHR(pDD->CreateSurface(&ddsd, &m_pDDSBack, NULL));

	lea	ecx, DWORD PTR _pDD$16[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDraw7@@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator->
	mov	DWORD PTR tv577[ebp], eax
	mov	ecx, DWORD PTR tv577[ebp]
	mov	DWORD PTR tv155[ebp], ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 164				; 000000a4H
	push	edx
	lea	eax, DWORD PTR _ddsd$18[ebp]
	push	eax
	mov	ecx, DWORD PTR tv155[ebp]
	push	ecx
	mov	edx, DWORD PTR tv155[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	mov	DWORD PTR tv578[ebp], eax
	mov	edx, DWORD PTR tv578[ebp]
	push	edx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 114  : 
; 115  : 						break;

	jmp	$LN53@Setup
$LN50@Setup:

; 116  : 					}
; 117  : 
; 118  : 					case Flip:
; 119  : 					{
; 120  : 						if(!fullScreen)

	cmp	DWORD PTR _fullScreen$[ebp], 0
	jne	$LN49@Setup

; 121  : 						{
; 122  : 							ddsd.ddsCaps.dwCaps = DDSCAPS_PRIMARYSURFACE; 

	mov	DWORD PTR _ddsd$18[ebp+104], 512	; 00000200H

; 123  : 							CheckHR(pDD->CreateSurface(&ddsd, &m_pDDSFront, NULL));

	lea	ecx, DWORD PTR _pDD$16[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDraw7@@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator->
	mov	DWORD PTR tv579[ebp], eax
	mov	eax, DWORD PTR tv579[ebp]
	mov	DWORD PTR tv168[ebp], eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	lea	edx, DWORD PTR _ddsd$18[ebp]
	push	edx
	mov	eax, DWORD PTR tv168[ebp]
	push	eax
	mov	ecx, DWORD PTR tv168[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	mov	DWORD PTR tv580[ebp], eax
	mov	ecx, DWORD PTR tv580[ebp]
	push	ecx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 124  : 
; 125  : 							ddsd.dwFlags |= DDSD_WIDTH | DDSD_HEIGHT;

	mov	edx, DWORD PTR _ddsd$18[ebp+4]
	or	edx, 6
	mov	DWORD PTR _ddsd$18[ebp+4], edx

; 126  : 							ddsd.dwWidth  = w;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR _ddsd$18[ebp+12], eax

; 127  : 							ddsd.dwHeight = h; 

	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR _ddsd$18[ebp+8], ecx

; 128  : 							ddsd.ddsCaps.dwCaps = DDSCAPS_VIDEOMEMORY | DDSCAPS_3DDEVICE; 

	mov	DWORD PTR _ddsd$18[ebp+104], 24576	; 00006000H

; 129  : 							CheckHR(pDD->CreateSurface(&ddsd, &m_pDDSBack, NULL));

	lea	ecx, DWORD PTR _pDD$16[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDraw7@@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator->
	mov	DWORD PTR tv581[ebp], eax
	mov	edx, DWORD PTR tv581[ebp]
	mov	DWORD PTR tv181[ebp], edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 164				; 000000a4H
	push	eax
	lea	ecx, DWORD PTR _ddsd$18[ebp]
	push	ecx
	mov	edx, DWORD PTR tv181[ebp]
	push	edx
	mov	eax, DWORD PTR tv181[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	mov	DWORD PTR tv582[ebp], eax
	mov	eax, DWORD PTR tv582[ebp]
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 130  : 						}
; 131  : 
; 132  : 						else

	jmp	$LN48@Setup
$LN49@Setup:

; 133  : 						{
; 134  : 							// Create the primary surface.
; 135  : 							ddsd.dwFlags |= DDSD_BACKBUFFERCOUNT;

	mov	ecx, DWORD PTR _ddsd$18[ebp+4]
	or	ecx, 32					; 00000020H
	mov	DWORD PTR _ddsd$18[ebp+4], ecx

; 136  : 							ddsd.ddsCaps.dwCaps |= DDSCAPS_PRIMARYSURFACE | DDSCAPS_3DDEVICE | DDSCAPS_COMPLEX | DDSCAPS_FLIP; 

	mov	edx, DWORD PTR _ddsd$18[ebp+104]
	or	edx, 8728				; 00002218H
	mov	DWORD PTR _ddsd$18[ebp+104], edx

; 137  : 							ddsd.dwBackBufferCount = 1;

	mov	DWORD PTR _ddsd$18[ebp+20], 1

; 138  : 							CheckHR(pDD->CreateSurface(&ddsd, &m_pDDSFront, NULL));

	lea	ecx, DWORD PTR _pDD$16[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDraw7@@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator->
	mov	DWORD PTR tv583[ebp], eax
	mov	eax, DWORD PTR tv583[ebp]
	mov	DWORD PTR tv195[ebp], eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	lea	edx, DWORD PTR _ddsd$18[ebp]
	push	edx
	mov	eax, DWORD PTR tv195[ebp]
	push	eax
	mov	ecx, DWORD PTR tv195[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	mov	DWORD PTR tv584[ebp], eax
	mov	ecx, DWORD PTR tv584[ebp]
	push	ecx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 139  : 
; 140  : 							// Get the attached backbuffer surface
; 141  : 							DDSCAPS2 ddscaps;
; 142  : 							ZeroMemory(&ddscaps, sizeof(ddscaps));

	push	16					; 00000010H
	push	0
	lea	edx, DWORD PTR _ddscaps$17[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 143  : 							ddscaps.dwCaps = DDSCAPS_BACKBUFFER; 

	mov	DWORD PTR _ddscaps$17[ebp], 4

; 144  : 							CheckHR(m_pDDSFront->GetAttachedSurface(&ddscaps, &m_pDDSBack)); 

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 164				; 000000a4H
	push	eax
	lea	ecx, DWORD PTR _ddscaps$17[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+48]
	call	ecx
	mov	DWORD PTR tv585[ebp], eax
	mov	edx, DWORD PTR tv585[ebp]
	push	edx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4
$LN48@Setup:

; 145  : 						}
; 146  : 
; 147  : 						break;

	jmp	$LN53@Setup
$LN47@Setup:

; 148  : 					}
; 149  : 
; 150  : 					case None:
; 151  : 					{
; 152  : 						ddsd.ddsCaps.dwCaps = DDSCAPS_PRIMARYSURFACE | DDSCAPS_3DDEVICE; 

	mov	DWORD PTR _ddsd$18[ebp+104], 8704	; 00002200H

; 153  : 						CheckHR(pDD->CreateSurface(&ddsd, &m_pDDSFront, NULL));

	lea	ecx, DWORD PTR _pDD$16[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDraw7@@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator->
	mov	DWORD PTR tv586[ebp], eax
	mov	eax, DWORD PTR tv586[ebp]
	mov	DWORD PTR tv222[ebp], eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	lea	edx, DWORD PTR _ddsd$18[ebp]
	push	edx
	mov	eax, DWORD PTR tv222[ebp]
	push	eax
	mov	ecx, DWORD PTR tv222[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	mov	DWORD PTR tv587[ebp], eax
	mov	ecx, DWORD PTR tv587[ebp]
	push	ecx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 154  : 
; 155  : 						CheckHR(m_pDDSFront->QueryInterface(IID_IDirectDrawSurface7, (void **) &m_pDDSBack));

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 164				; 000000a4H
	push	edx
	push	OFFSET _IID_IDirectDrawSurface7
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	call	edx
	mov	DWORD PTR tv588[ebp], eax
	mov	eax, DWORD PTR tv588[ebp]
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 156  : 
; 157  : 						break;

	jmp	SHORT $LN53@Setup
$LN46@Setup:

; 158  : 					}
; 159  : 
; 160  : 					default:
; 161  : 					{
; 162  : 						ShiAssert(false);	// illegal combination
; 163  : 						return FALSE;

	mov	DWORD PTR $T8[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _pDD$16[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >
	mov	eax, DWORD PTR $T8[ebp]
	jmp	$LN60@Setup
$LN53@Setup:

; 164  : 					}
; 165  : 				}
; 166  : 
; 167  : 				// auto adjust front rect when creating the primary surface in windowed mode
; 168  : 				if(!fullScreen)

	cmp	DWORD PTR _fullScreen$[ebp], 0
	jne	SHORT $LN45@Setup

; 169  : 				{
; 170  : 					GetClientRect(targetWin, &m_rcFront);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	push	ecx
	mov	edx, DWORD PTR _targetWin$[ebp]
	push	edx
	call	DWORD PTR __imp__GetClientRect@8

; 171  : 					ClientToScreen(targetWin, (LPPOINT)&m_rcFront);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 144				; 00000090H
	push	eax
	mov	ecx, DWORD PTR _targetWin$[ebp]
	push	ecx
	call	DWORD PTR __imp__ClientToScreen@8

; 172  : 					ClientToScreen(targetWin, (LPPOINT)&m_rcFront+1);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 152				; 00000098H
	push	edx
	mov	eax, DWORD PTR _targetWin$[ebp]
	push	eax
	call	DWORD PTR __imp__ClientToScreen@8

; 173  : 					m_bFrontRectValid = true;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+160], 1
$LN45@Setup:

; 174  : 				}
; 175  : 
; 176  : 				break;

	jmp	$LN56@Setup
$LN44@Setup:

; 177  : 			}
; 178  : 
; 179  : 			case SystemMem:
; 180  : 			{
; 181  : 				switch(back)

	mov	edx, DWORD PTR _back$[ebp]
	mov	DWORD PTR tv260[ebp], edx
	cmp	DWORD PTR tv260[ebp], 4
	ja	$LN37@Setup
	mov	eax, DWORD PTR tv260[ebp]
	jmp	DWORD PTR $LN71@Setup[eax*4]
$LN41@Setup:

; 182  : 				{
; 183  : 					case SystemMem:
; 184  : 					{
; 185  : 						ShiAssert(false);	// not implemented yet
; 186  : 						break;

	jmp	$LN42@Setup
$LN40@Setup:

; 187  : 					}
; 188  : 
; 189  : 					case VideoMem:
; 190  : 					{
; 191  : 						ShiAssert(false);	// not implemented yet
; 192  : 						break;

	jmp	$LN42@Setup
$LN39@Setup:

; 193  : 					}
; 194  : 
; 195  : 					case Flip:
; 196  : 					{
; 197  : 						ShiAssert(false);	// not implemented yet
; 198  : 						break;

	jmp	$LN42@Setup
$LN38@Setup:

; 199  : 					}
; 200  : 
; 201  : 					case None:
; 202  : 					{
; 203  : 						ddsd.dwFlags |= DDSD_WIDTH | DDSD_HEIGHT;

	mov	ecx, DWORD PTR _ddsd$18[ebp+4]
	or	ecx, 6
	mov	DWORD PTR _ddsd$18[ebp+4], ecx

; 204  : 						ddsd.dwWidth  = w;

	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR _ddsd$18[ebp+12], edx

; 205  : 						ddsd.dwHeight = h; 

	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR _ddsd$18[ebp+8], eax

; 206  : 						ddsd.ddsCaps.dwCaps = DDSCAPS_SYSTEMMEMORY | DDSCAPS_3DDEVICE; 

	mov	DWORD PTR _ddsd$18[ebp+104], 10240	; 00002800H

; 207  : 						CheckHR(pDD->CreateSurface(&ddsd, &m_pDDSFront, NULL));

	lea	ecx, DWORD PTR _pDD$16[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDraw7@@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator->
	mov	DWORD PTR tv589[ebp], eax
	mov	ecx, DWORD PTR tv589[ebp]
	mov	DWORD PTR tv265[ebp], ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	lea	eax, DWORD PTR _ddsd$18[ebp]
	push	eax
	mov	ecx, DWORD PTR tv265[ebp]
	push	ecx
	mov	edx, DWORD PTR tv265[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	mov	DWORD PTR tv590[ebp], eax
	mov	edx, DWORD PTR tv590[ebp]
	push	edx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 208  : 
; 209  : 						CheckHR(m_pDDSFront->QueryInterface(IID_IDirectDrawSurface7, (void **) &m_pDDSBack));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 164				; 000000a4H
	push	eax
	push	OFFSET _IID_IDirectDrawSurface7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv591[ebp], eax
	mov	ecx, DWORD PTR tv591[ebp]
	push	ecx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 210  : 
; 211  : 						break;

	jmp	SHORT $LN42@Setup
$LN37@Setup:

; 212  : 					}
; 213  : 
; 214  : 					default:
; 215  : 					{
; 216  : 						ShiAssert(false);	// illegal combination
; 217  : 						return FALSE;

	mov	DWORD PTR $T7[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _pDD$16[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >
	mov	eax, DWORD PTR $T7[ebp]
	jmp	$LN60@Setup
$LN42@Setup:

; 218  : 					}
; 219  : 				}
; 220  : 
; 221  : 				break;

	jmp	$LN56@Setup
$LN36@Setup:

; 222  : 			}
; 223  : 
; 224  : 			case VideoMem:
; 225  : 			{
; 226  : 				switch(back)

	mov	edx, DWORD PTR _back$[ebp]
	mov	DWORD PTR tv291[ebp], edx
	cmp	DWORD PTR tv291[ebp], 4
	ja	$LN26@Setup
	mov	eax, DWORD PTR tv291[ebp]
	jmp	DWORD PTR $LN72@Setup[eax*4]
$LN33@Setup:

; 227  : 				{
; 228  : 					case SystemMem:
; 229  : 					{
; 230  : 						ShiAssert(false);	// not implemented yet
; 231  : 						break;

	jmp	$LN34@Setup
$LN32@Setup:

; 232  : 					}
; 233  : 
; 234  : 					case VideoMem:
; 235  : 					{
; 236  : 						ShiAssert(false);	// not implemented yet
; 237  : 						break;

	jmp	$LN34@Setup
$LN31@Setup:

; 238  : 					}
; 239  : 
; 240  : 					case Flip:
; 241  : 					{
; 242  : 						ShiAssert(false);	// not implemented yet
; 243  : 						break;

	jmp	$LN34@Setup
$LN30@Setup:

; 244  : 					}
; 245  : 
; 246  : 					case None:
; 247  : 					{
; 248  : 						ddsd.dwFlags |= DDSD_WIDTH | DDSD_HEIGHT;

	mov	ecx, DWORD PTR _ddsd$18[ebp+4]
	or	ecx, 6
	mov	DWORD PTR _ddsd$18[ebp+4], ecx

; 249  : 						ddsd.dwWidth  = w;

	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR _ddsd$18[ebp+12], edx

; 250  : 						ddsd.dwHeight = h; 

	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR _ddsd$18[ebp+8], eax

; 251  : 						ddsd.ddsCaps.dwCaps = DDSCAPS_VIDEOMEMORY | DDSCAPS_3DDEVICE;

	mov	DWORD PTR _ddsd$18[ebp+104], 24576	; 00006000H

; 252  : 						HRESULT hr = pDD->CreateSurface(&ddsd, &m_pDDSFront, NULL);

	lea	ecx, DWORD PTR _pDD$16[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDraw7@@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator->
	mov	DWORD PTR tv592[ebp], eax
	mov	ecx, DWORD PTR tv592[ebp]
	mov	DWORD PTR tv296[ebp], ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	lea	eax, DWORD PTR _ddsd$18[ebp]
	push	eax
	mov	ecx, DWORD PTR tv296[ebp]
	push	ecx
	mov	edx, DWORD PTR tv296[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	mov	DWORD PTR tv593[ebp], eax
	mov	edx, DWORD PTR tv593[ebp]
	mov	DWORD PTR _hr$14[ebp], edx

; 253  : 
; 254  : 						if(FAILED(hr))

	cmp	DWORD PTR _hr$14[ebp], 0
	jge	$LN29@Setup

; 255  : 						{
; 256  : 							if(hr == DDERR_OUTOFVIDEOMEMORY)

	cmp	DWORD PTR _hr$14[ebp], -2005532292	; 8876017cH
	jne	$LN28@Setup

; 257  : 							{
; 258  : 								MonoPrint("ImageBuffer::Setup - EVICTING MANAGED TEXTURES !!\n");

	push	OFFSET ??_C@_0DD@IEALHDHA@ImageBuffer?3?3Setup?5?9?5EVICTING?5MA@
	call	_MonoPrint
	add	esp, 4

; 259  : 
; 260  : 								// if we are out of video memory, evict all managed textures and retry
; 261  : 								CheckHR(dev->GetDefaultRC()->m_pD3D->EvictManagedTextures());

	mov	ecx, DWORD PTR _dev$[ebp]
	call	?GetDefaultRC@DisplayDevice@@QAEPAVDXContext@@XZ ; DisplayDevice::GetDefaultRC
	mov	DWORD PTR tv594[ebp], eax
	mov	eax, DWORD PTR tv594[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv312[ebp], ecx
	mov	edx, DWORD PTR tv312[ebp]
	push	edx
	mov	eax, DWORD PTR tv312[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	mov	DWORD PTR tv595[ebp], eax
	mov	eax, DWORD PTR tv595[ebp]
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 262  : 								CheckHR(pDD->CreateSurface(&ddsd, &m_pDDSFront, NULL));

	lea	ecx, DWORD PTR _pDD$16[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDraw7@@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator->
	mov	DWORD PTR tv596[ebp], eax
	mov	ecx, DWORD PTR tv596[ebp]
	mov	DWORD PTR tv320[ebp], ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	lea	eax, DWORD PTR _ddsd$18[ebp]
	push	eax
	mov	ecx, DWORD PTR tv320[ebp]
	push	ecx
	mov	edx, DWORD PTR tv320[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	mov	DWORD PTR tv597[ebp], eax
	mov	edx, DWORD PTR tv597[ebp]
	push	edx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4
	jmp	SHORT $LN29@Setup
$LN28@Setup:

; 263  : 							}
; 264  : 
; 265  : 							else throw _com_error(hr);

	push	0
	push	0
	mov	eax, DWORD PTR _hr$14[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z	; _com_error::_com_error
	push	OFFSET __TI1?AV_com_error@@
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN29@Setup:

; 266  : 						}
; 267  : 
; 268  : 						CheckHR(m_pDDSFront->QueryInterface(IID_IDirectDrawSurface7, (void **) &m_pDDSBack));

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 164				; 000000a4H
	push	edx
	push	OFFSET _IID_IDirectDrawSurface7
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	call	edx
	mov	DWORD PTR tv598[ebp], eax
	mov	eax, DWORD PTR tv598[ebp]
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 269  : 
; 270  : 						break;

	jmp	SHORT $LN34@Setup
$LN26@Setup:

; 271  : 					}
; 272  : 
; 273  : 					default:
; 274  : 					{
; 275  : 						ShiAssert(false);	// illegal combination
; 276  : 						return FALSE;

	mov	DWORD PTR $T12[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _pDD$16[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >
	mov	eax, DWORD PTR $T12[ebp]
	jmp	$LN60@Setup
$LN34@Setup:

; 277  : 					}
; 278  : 				}
; 279  : 
; 280  : 				break;

	jmp	$LN56@Setup
$LN25@Setup:

; 281  : 			}
; 282  : 
; 283  : 			case LocalVideoMem:
; 284  : 			case LocalVideoMem3D:
; 285  : 			{
; 286  : 				switch(back)

	mov	ecx, DWORD PTR _back$[ebp]
	mov	DWORD PTR tv352[ebp], ecx
	cmp	DWORD PTR tv352[ebp], 4
	ja	$LN13@Setup
	mov	edx, DWORD PTR tv352[ebp]
	jmp	DWORD PTR $LN73@Setup[edx*4]
$LN22@Setup:

; 287  : 				{
; 288  : 					case SystemMem:
; 289  : 					{
; 290  : 						ShiAssert(false);	// not implemented yet
; 291  : 						break;

	jmp	$LN23@Setup
$LN21@Setup:

; 292  : 					}
; 293  : 
; 294  : 					case VideoMem:
; 295  : 					{
; 296  : 						ShiAssert(false);	// not implemented yet
; 297  : 						break;

	jmp	$LN23@Setup
$LN20@Setup:

; 298  : 					}
; 299  : 
; 300  : 					case Flip:
; 301  : 					{
; 302  : 						ShiAssert(false);	// not implemented yet
; 303  : 						break;

	jmp	$LN23@Setup
$LN19@Setup:

; 304  : 					}
; 305  : 
; 306  : 					case None:
; 307  : 					{
; 308  : 						ddsd.dwFlags |= DDSD_WIDTH | DDSD_HEIGHT;

	mov	eax, DWORD PTR _ddsd$18[ebp+4]
	or	eax, 6
	mov	DWORD PTR _ddsd$18[ebp+4], eax

; 309  : 						ddsd.dwWidth  = w;

	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR _ddsd$18[ebp+12], ecx

; 310  : 						ddsd.dwHeight = h; 

	mov	edx, DWORD PTR _h$[ebp]
	mov	DWORD PTR _ddsd$18[ebp+8], edx

; 311  : 						ddsd.ddsCaps.dwCaps = DDSCAPS_VIDEOMEMORY | DDSCAPS_LOCALVIDMEM;

	mov	DWORD PTR _ddsd$18[ebp+104], 268451840	; 10004000H

; 312  : 
; 313  : 						if(front == LocalVideoMem3D)

	cmp	DWORD PTR _front$[ebp], 6
	jne	SHORT $LN18@Setup

; 314  : 							ddsd.ddsCaps.dwCaps |= DDSCAPS_3DDEVICE;

	mov	eax, DWORD PTR _ddsd$18[ebp+104]
	or	eax, 8192				; 00002000H
	mov	DWORD PTR _ddsd$18[ebp+104], eax

; 315  : 						else

	jmp	SHORT $LN17@Setup
$LN18@Setup:

; 316  : 							ddsd.ddsCaps.dwCaps |= DDSCAPS_OFFSCREENPLAIN;

	mov	ecx, DWORD PTR _ddsd$18[ebp+104]
	or	ecx, 64					; 00000040H
	mov	DWORD PTR _ddsd$18[ebp+104], ecx
$LN17@Setup:

; 317  : 
; 318  : 						HRESULT hr = pDD->CreateSurface(&ddsd, &m_pDDSFront, NULL);

	lea	ecx, DWORD PTR _pDD$16[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDraw7@@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator->
	mov	DWORD PTR tv599[ebp], eax
	mov	edx, DWORD PTR tv599[ebp]
	mov	DWORD PTR tv360[ebp], edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _ddsd$18[ebp]
	push	ecx
	mov	edx, DWORD PTR tv360[ebp]
	push	edx
	mov	eax, DWORD PTR tv360[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	mov	DWORD PTR tv600[ebp], eax
	mov	eax, DWORD PTR tv600[ebp]
	mov	DWORD PTR _hr$13[ebp], eax

; 319  : 
; 320  : 						if(FAILED(hr))

	cmp	DWORD PTR _hr$13[ebp], 0
	jge	$LN16@Setup

; 321  : 						{
; 322  : 							if(hr == DDERR_OUTOFVIDEOMEMORY)

	cmp	DWORD PTR _hr$13[ebp], -2005532292	; 8876017cH
	jne	$LN15@Setup

; 323  : 							{
; 324  : 								MonoPrint("ImageBuffer::Setup - EVICTING MANAGED TEXTURES !!\n");

	push	OFFSET ??_C@_0DD@IEALHDHA@ImageBuffer?3?3Setup?5?9?5EVICTING?5MA@
	call	_MonoPrint
	add	esp, 4

; 325  : 
; 326  : 								// if we are out of video memory, evict all managed textures and retry
; 327  : 								CheckHR(dev->GetDefaultRC()->m_pD3D->EvictManagedTextures());

	mov	ecx, DWORD PTR _dev$[ebp]
	call	?GetDefaultRC@DisplayDevice@@QAEPAVDXContext@@XZ ; DisplayDevice::GetDefaultRC
	mov	DWORD PTR tv601[ebp], eax
	mov	ecx, DWORD PTR tv601[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv376[ebp], edx
	mov	eax, DWORD PTR tv376[ebp]
	push	eax
	mov	ecx, DWORD PTR tv376[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	mov	DWORD PTR tv602[ebp], eax
	mov	ecx, DWORD PTR tv602[ebp]
	push	ecx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 328  : 								CheckHR(pDD->CreateSurface(&ddsd, &m_pDDSFront, NULL));

	lea	ecx, DWORD PTR _pDD$16[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDraw7@@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator->
	mov	DWORD PTR tv603[ebp], eax
	mov	edx, DWORD PTR tv603[ebp]
	mov	DWORD PTR tv416[ebp], edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _ddsd$18[ebp]
	push	ecx
	mov	edx, DWORD PTR tv416[ebp]
	push	edx
	mov	eax, DWORD PTR tv416[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	mov	DWORD PTR tv604[ebp], eax
	mov	eax, DWORD PTR tv604[ebp]
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4
	jmp	SHORT $LN16@Setup
$LN15@Setup:

; 329  : 							}
; 330  : 
; 331  : 							else throw _com_error(hr);

	push	0
	push	0
	mov	ecx, DWORD PTR _hr$13[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z	; _com_error::_com_error
	push	OFFSET __TI1?AV_com_error@@
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	__CxxThrowException@8
$LN16@Setup:

; 332  : 						}
; 333  : 
; 334  : 						CheckHR(m_pDDSFront->QueryInterface(IID_IDirectDrawSurface7, (void **) &m_pDDSBack));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 164				; 000000a4H
	push	eax
	push	OFFSET _IID_IDirectDrawSurface7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv605[ebp], eax
	mov	ecx, DWORD PTR tv605[ebp]
	push	ecx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 335  : 
; 336  : 						break;

	jmp	SHORT $LN23@Setup
$LN13@Setup:

; 337  : 					}
; 338  : 
; 339  : 					default:
; 340  : 					{
; 341  : 						ShiAssert(false);	// illegal combination
; 342  : 						return FALSE;

	mov	DWORD PTR $T11[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _pDD$16[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >
	mov	eax, DWORD PTR $T11[ebp]
	jmp	$LN60@Setup
$LN23@Setup:

; 343  : 					}
; 344  : 				}
; 345  : 
; 346  : 				break;

	jmp	$LN56@Setup
$LN12@Setup:

; 347  : 			}
; 348  : 
; 349  : /*
; 350  : 			case Flip:
; 351  : 			{
; 352  : 				switch(back)
; 353  : 				{
; 354  : 					case SystemMem:
; 355  : 					{
; 356  : 						break;
; 357  : 					}
; 358  : 
; 359  : 					case VideoMem:
; 360  : 					{
; 361  : 						break;
; 362  : 					}
; 363  : 
; 364  : 					case Flip:
; 365  : 					{
; 366  : 						break;
; 367  : 					}
; 368  : 
; 369  : 					case None:
; 370  : 					{
; 371  : 						break;
; 372  : 					}
; 373  : 
; 374  : 					default:
; 375  : 					{
; 376  : 						ShiAssert(false);	// illegal combination
; 377  : 						return FALSE;
; 378  : 					}
; 379  : 				}
; 380  : 
; 381  : 				break;
; 382  : 			}
; 383  : */
; 384  : 
; 385  : 			case None:		// Note: This doesnt create a 3D surface and it lets the driver decide where to put it)
; 386  : 			{
; 387  : 				switch(back)

	mov	edx, DWORD PTR _back$[ebp]
	mov	DWORD PTR tv448[ebp], edx
	cmp	DWORD PTR tv448[ebp], 4
	ja	$LN5@Setup
	mov	eax, DWORD PTR tv448[ebp]
	jmp	DWORD PTR $LN74@Setup[eax*4]
$LN9@Setup:

; 388  : 				{
; 389  : 					case SystemMem:
; 390  : 					{
; 391  : 						ShiAssert(false);	// not implemented yet
; 392  : 						break;

	jmp	$LN10@Setup
$LN8@Setup:

; 393  : 					}
; 394  : 
; 395  : 					case VideoMem:
; 396  : 					{
; 397  : 						ShiAssert(false);	// not implemented yet
; 398  : 						break;

	jmp	$LN10@Setup
$LN7@Setup:

; 399  : 					}
; 400  : 
; 401  : 					case Flip:
; 402  : 					{
; 403  : 						ShiAssert(false);	// not implemented yet
; 404  : 						break;

	jmp	$LN10@Setup
$LN6@Setup:

; 405  : 					}
; 406  : 
; 407  : 					case None:
; 408  : 					{
; 409  : 						ddsd.dwFlags |= DDSD_WIDTH | DDSD_HEIGHT;

	mov	ecx, DWORD PTR _ddsd$18[ebp+4]
	or	ecx, 6
	mov	DWORD PTR _ddsd$18[ebp+4], ecx

; 410  : 						ddsd.dwWidth  = w;

	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR _ddsd$18[ebp+12], edx

; 411  : 						ddsd.dwHeight = h; 

	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR _ddsd$18[ebp+8], eax

; 412  : 						ddsd.ddsCaps.dwCaps = DDSCAPS_OFFSCREENPLAIN; 

	mov	DWORD PTR _ddsd$18[ebp+104], 64		; 00000040H

; 413  : 						CheckHR(pDD->CreateSurface(&ddsd, &m_pDDSFront, NULL));

	lea	ecx, DWORD PTR _pDD$16[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDraw7@@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator->
	mov	DWORD PTR tv606[ebp], eax
	mov	ecx, DWORD PTR tv606[ebp]
	mov	DWORD PTR tv453[ebp], ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	lea	eax, DWORD PTR _ddsd$18[ebp]
	push	eax
	mov	ecx, DWORD PTR tv453[ebp]
	push	ecx
	mov	edx, DWORD PTR tv453[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	mov	DWORD PTR tv607[ebp], eax
	mov	edx, DWORD PTR tv607[ebp]
	push	edx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 414  : 
; 415  : 						CheckHR(m_pDDSFront->QueryInterface(IID_IDirectDrawSurface7, (void **) &m_pDDSBack));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 164				; 000000a4H
	push	eax
	push	OFFSET _IID_IDirectDrawSurface7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv608[ebp], eax
	mov	ecx, DWORD PTR tv608[ebp]
	push	ecx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 416  : 
; 417  : 						break;

	jmp	SHORT $LN10@Setup
$LN5@Setup:

; 418  : 					}
; 419  : 
; 420  : 					default:
; 421  : 					{
; 422  : 						ShiAssert(false);	// illegal combination
; 423  : 						return FALSE;

	mov	DWORD PTR $T10[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _pDD$16[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >
	mov	eax, DWORD PTR $T10[ebp]
	jmp	$LN60@Setup
$LN10@Setup:

; 424  : 					}
; 425  : 				}
; 426  : 
; 427  : 				break;

	jmp	SHORT $LN56@Setup
$LN4@Setup:

; 428  : 			}
; 429  : 
; 430  : 			default:
; 431  : 			{
; 432  : 				ShiAssert(false);	// illegal combination
; 433  : 				return FALSE;

	mov	DWORD PTR $T9[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _pDD$16[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >
	mov	eax, DWORD PTR $T9[ebp]
	jmp	$LN60@Setup
$LN56@Setup:

; 434  : 			}
; 435  : 		}
; 436  : 
; 437  : 		if(clip && m_pDDSFront)

	cmp	DWORD PTR _clip$[ebp], 0
	je	$LN3@Setup
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	$LN3@Setup

; 438  : 		{
; 439  : 			ShiAssert(!fullScreen);
; 440  : 			IDirectDrawClipperPtr pDDCLP;

	lea	ecx, DWORD PTR _pDDCLP$15[ebp]
	call	??0?$_com_ptr_t@V?$_com_IIID@UIDirectDrawClipper@@$1?IID_IDirectDrawClipper@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >::_com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >
	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 441  : 			CheckHR(pDD->CreateClipper(0, &pDDCLP, NULL));

	lea	ecx, DWORD PTR _pDD$16[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QBEPAUIDirectDraw7@@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::operator->
	mov	DWORD PTR tv484[ebp], eax
	mov	eax, DWORD PTR tv484[ebp]
	mov	DWORD PTR tv489[ebp], eax
	push	0
	lea	ecx, DWORD PTR _pDDCLP$15[ebp]
	call	??I?$_com_ptr_t@V?$_com_IIID@UIDirectDrawClipper@@$1?IID_IDirectDrawClipper@@3U_GUID@@B@@@@QAEPAPAUIDirectDrawClipper@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >::operator&
	push	eax
	push	0
	mov	ecx, DWORD PTR tv489[ebp]
	push	ecx
	mov	edx, DWORD PTR tv489[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	mov	DWORD PTR tv609[ebp], eax
	mov	edx, DWORD PTR tv609[ebp]
	push	edx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 442  : 			CheckHR(pDDCLP->SetHWnd( 0, targetWin));

	lea	ecx, DWORD PTR _pDDCLP$15[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@UIDirectDrawClipper@@$1?IID_IDirectDrawClipper@@3U_GUID@@B@@@@QBEPAUIDirectDrawClipper@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >::operator->
	mov	DWORD PTR tv610[ebp], eax
	mov	eax, DWORD PTR tv610[ebp]
	mov	DWORD PTR tv502[ebp], eax
	mov	ecx, DWORD PTR _targetWin$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR tv502[ebp]
	push	edx
	mov	eax, DWORD PTR tv502[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	mov	DWORD PTR tv611[ebp], eax
	mov	eax, DWORD PTR tv611[ebp]
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 443  : 			CheckHR(m_pDDSFront->SetClipper(pDDCLP));

	lea	ecx, DWORD PTR _pDDCLP$15[ebp]
	call	??B?$_com_ptr_t@V?$_com_IIID@UIDirectDrawClipper@@$1?IID_IDirectDrawClipper@@3U_GUID@@B@@@@QBEPAUIDirectDrawClipper@@XZ ; _com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >::operator IDirectDrawClipper *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	mov	DWORD PTR tv612[ebp], eax
	mov	ecx, DWORD PTR tv612[ebp]
	push	ecx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 444  : 		}

	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _pDDCLP$15[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawClipper@@$1?IID_IDirectDrawClipper@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >::~_com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >
$LN3@Setup:

; 445  : 	
; 446  : 		// Compute the color format conversion parameters
; 447  : 		m_ddsdFront.dwSize = sizeof(DDSURFACEDESC2);

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 124			; 0000007cH

; 448  : 		CheckHR(m_pDDSFront->GetSurfaceDesc(&m_ddsdFront));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	mov	DWORD PTR tv613[ebp], eax
	mov	ecx, DWORD PTR tv613[ebp]
	push	ecx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 449  : 		m_ddsdBack.dwSize = sizeof(DDSURFACEDESC2);

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+168], 124		; 0000007cH

; 450  : 		CheckHR(m_pDDSBack->GetSurfaceDesc(&m_ddsdBack));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 168				; 000000a8H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+164]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	mov	DWORD PTR tv614[ebp], eax
	mov	ecx, DWORD PTR tv614[ebp]
	push	ecx
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 451  : 
; 452  : /*		#ifdef _DEBUG
; 453  : 		if(back == None)
; 454  : //			MonoPrint("ImageBuffer::Setup - %dx%d front (%s) created in %s memory\n",
; 455  : //				m_ddsdFront.dwWidth, m_ddsdFront.dwHeight, arrType2String[front],
; 456  : //				m_ddsdFront.ddsCaps.dwCaps & DDSCAPS_SYSTEMMEMORY  ? "SYSTEM" :
; 457  : //				(m_ddsdFront.ddsCaps.dwCaps & DDSCAPS_LOCALVIDMEM ? "VIDEO" : "AGP"));
; 458  : 		else
; 459  : /*			MonoPrint("ImageBuffer::Setup - %dx%d front (%s) created in %s memory, back (%s) created in %s memory\n",
; 460  : 				m_ddsdFront.dwWidth, m_ddsdFront.dwHeight,
; 461  : 				arrType2String[front],
; 462  : 				m_ddsdFront.ddsCaps.dwCaps & DDSCAPS_SYSTEMMEMORY  ? "SYSTEM" :
; 463  : 				(m_ddsdFront.ddsCaps.dwCaps & DDSCAPS_LOCALVIDMEM ? "VIDEO" : "AGP"),
; 464  : 				 arrType2String[back],
; 465  : 				m_ddsdBack.ddsCaps.dwCaps & DDSCAPS_SYSTEMMEMORY  ? "SYSTEM" :
; 466  : 				(m_ddsdBack.ddsCaps.dwCaps & DDSCAPS_LOCALVIDMEM ? "VIDEO" : "AGP"));
; 467  : 		#endif
; 468  : */
; 469  : 		// Set blt target surface depending on wether we will page flip or not
; 470  : 		if(bWillCallSwapBuffer)

	cmp	DWORD PTR _bWillCallSwapBuffer$[ebp], 0
	je	SHORT $LN2@Setup

; 471  : 			m_pBltTarget = m_pDDSBack;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	mov	DWORD PTR [edx+316], ecx

; 472  : 		else

	jmp	SHORT $LN1@Setup
$LN2@Setup:

; 473  : 			m_pBltTarget = m_pDDSFront;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+316], ecx
$LN1@Setup:

; 474  : 
; 475  : 		ComputeColorShifts();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ComputeColorShifts@ImageBuffer@@IAEXXZ	; ImageBuffer::ComputeColorShifts

; 476  : 
; 477  : 		// Everything worked, so finish up and return
; 478  : 		m_bReady = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 1

; 479  : 
; 480  : 		return TRUE;

	mov	DWORD PTR $T6[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _pDD$16[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >
	mov	eax, DWORD PTR $T6[ebp]
	jmp	SHORT $LN60@Setup
__catch$?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z$0:

; 481  : 	}
; 482  : 
; 483  : 	catch(_com_error e)
; 484  : 	{
; 485  : 		MonoPrint("ImageBuffer::Setup - Error 0x%X\n", e.Error());

	lea	ecx, DWORD PTR _e$3[ebp]
	call	?Error@_com_error@@QBEJXZ		; _com_error::Error
	push	eax
	push	OFFSET ??_C@_0CB@MGIIHDAM@ImageBuffer?3?3Setup?5?9?5Error?50x?$CFX?6@
	call	_MonoPrint
	add	esp, 8

; 486  : 		return FALSE;

	mov	DWORD PTR $T5[ebp], 0
	lea	ecx, DWORD PTR _e$3[ebp]
	call	??1_com_error@@UAE@XZ			; _com_error::~_com_error
	mov	eax, $LN67@Setup
	ret	0

; 487  : 	}

	mov	eax, __tryend$?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z$1
	ret	0
__tryend$?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN60@Setup
$LN67@Setup:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 486  : 		return FALSE;

	mov	eax, DWORD PTR $T5[ebp]
$LN60@Setup:

; 488  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
	npad	1
$LN69@Setup:
	DD	$LN44@Setup
	DD	$LN36@Setup
	DD	$LN55@Setup
	DD	$LN4@Setup
	DD	$LN12@Setup
	DD	$LN25@Setup
	DD	$LN25@Setup
$LN70@Setup:
	DD	$LN52@Setup
	DD	$LN51@Setup
	DD	$LN46@Setup
	DD	$LN50@Setup
	DD	$LN47@Setup
$LN71@Setup:
	DD	$LN41@Setup
	DD	$LN40@Setup
	DD	$LN37@Setup
	DD	$LN39@Setup
	DD	$LN38@Setup
$LN72@Setup:
	DD	$LN33@Setup
	DD	$LN32@Setup
	DD	$LN26@Setup
	DD	$LN31@Setup
	DD	$LN30@Setup
$LN73@Setup:
	DD	$LN22@Setup
	DD	$LN21@Setup
	DD	$LN13@Setup
	DD	$LN20@Setup
	DD	$LN19@Setup
$LN74@Setup:
	DD	$LN9@Setup
	DD	$LN8@Setup
	DD	$LN5@Setup
	DD	$LN7@Setup
	DD	$LN6@Setup
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z$2:
	lea	ecx, DWORD PTR _pDD$16[ebp]
	jmp	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDraw7@@$1?IID_IDirectDraw7@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >::~_com_ptr_t<_com_IIID<IDirectDraw7,&IID_IDirectDraw7> >
__unwindfunclet$?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z$3:
	lea	ecx, DWORD PTR _pDDCLP$15[ebp]
	jmp	??1?$_com_ptr_t@V?$_com_IIID@UIDirectDrawClipper@@$1?IID_IDirectDrawClipper@@3U_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >::~_com_ptr_t<_com_IIID<IDirectDrawClipper,&IID_IDirectDrawClipper> >
__ehhandler$?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-544]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z ENDP ; ImageBuffer::Setup
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\imagebuf.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1ImageBuffer@@UAE@XZ PROC				; ImageBuffer::~ImageBuffer
; _this$ = ecx

; 48   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ImageBuffer@@6B@

; 49   : 	ShiAssert(!IsReady());
; 50   : 	Cleanup();	// OW

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Cleanup@ImageBuffer@@QAEXXZ		; ImageBuffer::Cleanup

; 51   : 
; 52   : #ifdef _IMAGEBUFFER_PROTECT_SURF_LOCK
; 53   : 	DeleteCriticalSection(&m_cs);
; 54   : #endif
; 55   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1ImageBuffer@@UAE@XZ ENDP				; ImageBuffer::~ImageBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\imagebuf.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ImageBuffer@@QAE@XZ PROC				; ImageBuffer::ImageBuffer
; _this$ = ecx

; 32   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ImageBuffer@@6B@

; 33   : 	m_bReady = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 34   : 	m_bFrontRectValid = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+160], 0

; 35   : 	m_bBitsLocked = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+344], 0

; 36   : 
; 37   : 	m_pDDSFront = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 38   : 	m_pDDSBack = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+164], 0

; 39   : 	ZeroMemory(&m_rcFront, sizeof(m_rcFront));

	push	16					; 00000010H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 144				; 00000090H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 40   : 	m_pBltTarget = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+316], 0

; 41   : 
; 42   : #ifdef _IMAGEBUFFER_PROTECT_SURF_LOCK
; 43   : 	InitializeCriticalSection(&m_cs);
; 44   : #endif
; 45   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0ImageBuffer@@QAE@XZ ENDP				; ImageBuffer::ImageBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\smart.h
;	COMDAT ?CheckHR@@YAXJ@Z
_TEXT	SEGMENT
$T1 = -20						; size = 16
_pEI$2 = -4						; size = 4
_hr$ = 8						; size = 4
?CheckHR@@YAXJ@Z PROC					; CheckHR, COMDAT

; 27   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 28   : 	if(FAILED(hr))

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN3@CheckHR

; 29   : 	{
; 30   : 		IErrorInfo *pEI = NULL;

	mov	DWORD PTR _pEI$2[ebp], 0

; 31   : 		::GetErrorInfo(NULL, &pEI);

	lea	eax, DWORD PTR _pEI$2[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__GetErrorInfo@8

; 32   : 		throw _com_error(hr, pEI);

	push	0
	mov	ecx, DWORD PTR _pEI$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _hr$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z	; _com_error::_com_error
	push	OFFSET __TI1?AV_com_error@@
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	__CxxThrowException@8
$LN3@CheckHR:

; 33   : 	}
; 34   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CheckHR@@YAXJ@Z ENDP					; CheckHR
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_com_error@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_com_error@@UAEPAXI@Z PROC				; _com_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_com_error@@UAE@XZ			; _com_error::~_com_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_com_error@@UAEPAXI@Z ENDP				; _com_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comdef.h
;	COMDAT ?Error@_com_error@@QBEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Error@_com_error@@QBEJXZ PROC				; _com_error::Error, COMDAT
; _this$ = ecx

; 313  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 314  :     return m_hresult;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 315  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Error@_com_error@@QBEJXZ ENDP				; _com_error::Error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comdef.h
;	COMDAT ??1_com_error@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_com_error@@UAE@XZ PROC				; _com_error::~_com_error, COMDAT
; _this$ = ecx

; 294  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_com_error@@6B@

; 295  :     if (m_perrinfo != NULL) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN2@com_error

; 296  :         m_perrinfo->Release();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
$LN2@com_error:

; 297  :     }
; 298  :     if (m_pszMsg != NULL) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN3@com_error

; 299  :         LocalFree((HLOCAL)m_pszMsg);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__LocalFree@4
$LN3@com_error:

; 300  :     }
; 301  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1_com_error@@UAE@XZ ENDP				; _com_error::~_com_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comdef.h
;	COMDAT ??0_com_error@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_that$ = 8						; size = 4
??0_com_error@@QAE@ABV0@@Z PROC				; _com_error::_com_error, COMDAT
; _this$ = ecx

; 287  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_com_error@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _that$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 288  :     if (m_perrinfo != NULL) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN2@com_error

; 289  :         m_perrinfo->AddRef();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+4]
	call	edx
$LN2@com_error:

; 290  :     }
; 291  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0_com_error@@QAE@ABV0@@Z ENDP				; _com_error::_com_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comdef.h
;	COMDAT ??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hr$ = 8						; size = 4
_perrinfo$ = 12						; size = 4
_fAddRef$ = 16						; size = 1
??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z PROC		; _com_error::_com_error, COMDAT
; _this$ = ecx

; 279  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_com_error@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _perrinfo$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 280  :     if (m_perrinfo != NULL && fAddRef) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@com_error
	movzx	ecx, BYTE PTR _fAddRef$[ebp]
	test	ecx, ecx
	je	SHORT $LN2@com_error

; 281  :         m_perrinfo->AddRef();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
$LN2@com_error:

; 282  :     }
; 283  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z ENDP		; _com_error::_com_error
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z PROC	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ENDP	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ PROC	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CComBSTR@ATL@@QAE@XZ			; ATL::CComBSTR::~CComBSTR
	mov	esp, ebp
	pop	ebp
	ret	0
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ ENDP	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\atlmfc\include\atlcomcli.h
;	COMDAT ??1CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CComBSTR@ATL@@QAE@XZ PROC				; ATL::CComBSTR::~CComBSTR, COMDAT
; _this$ = ecx

; 1656 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1657 :     ::SysFreeString(m_str);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__SysFreeString@4

; 1658 : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1CComBSTR@ATL@@QAE@XZ ENDP				; ATL::CComBSTR::~CComBSTR
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Where$[ebp]
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
