; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\Graphics\DDstuff\dxerror.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?DDErrorCheck@@YAHJ@Z				; DDErrorCheck
PUBLIC	?D3DErrorCheck@@YAHJ@Z				; D3DErrorCheck
PUBLIC	?DSErrorCheck@@YAHJ@Z				; DSErrorCheck
PUBLIC	??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@		; `string'
PUBLIC	??_C@_0BJ@LAEIKKJF@DDERR_ALREADYINITIALIZED?$AA@ ; `string'
PUBLIC	??_C@_0BG@HLNKGEOE@DDERR_BLTFASTCANTCLIP?$AA@	; `string'
PUBLIC	??_C@_0BK@FMONFDPK@DDERR_CANNOTDETACHSURFACE?$AA@ ; `string'
PUBLIC	??_C@_0BD@PBNGJMBK@DDERR_CANTCREATEDC?$AA@	; `string'
PUBLIC	??_C@_0BE@LNBDBNLL@DDERR_CANTDUPLICATE?$AA@	; `string'
PUBLIC	??_C@_0BJ@BOEHMDDM@DDERR_CLIPPERISUSINGHWND?$AA@ ; `string'
PUBLIC	??_C@_0BF@HOAOBBGM@DDERR_COLORKEYNOTSET?$AA@	; `string'
PUBLIC	??_C@_0BI@CPFFLGJD@DDERR_CURRENTLYNOTAVAIL?$AA@	; `string'
PUBLIC	??_C@_0BP@CFDPGCFK@DDERR_DIRECTDRAWALREADYCREATED?$AA@ ; `string'
PUBLIC	??_C@_0BA@MEDIIHJ@DDERR_EXCEPTION?$AA@		; `string'
PUBLIC	??_C@_0BO@GMCKLDPA@DDERR_EXCLUSIVEMODEALREADYSET?$AA@ ; `string'
PUBLIC	??_C@_0O@MGEMDJJH@DDERR_GENERIC?$AA@		; `string'
PUBLIC	??_C@_0BC@FNNCOGNH@DDERR_HEIGHTALIGN?$AA@	; `string'
PUBLIC	??_C@_0BF@LGLNHCHJ@DDERR_HWNDALREADYSET?$AA@	; `string'
PUBLIC	??_C@_0BF@MAFLBECE@DDERR_HWNDSUBCLASSED?$AA@	; `string'
PUBLIC	??_C@_0BI@NLHHKHEN@DDERR_IMPLICITLYCREATED?$AA@	; `string'
PUBLIC	??_C@_0BK@HJOPGIGH@DDERR_INCOMPATIBLEPRIMARY?$AA@ ; `string'
PUBLIC	??_C@_0BC@DDIGIKID@DDERR_INVALIDCAPS?$AA@	; `string'
PUBLIC	??_C@_0BG@OFKCMNHM@DDERR_INVALIDCLIPLIST?$AA@	; `string'
PUBLIC	??_C@_0BM@LMDGBJFD@DDERR_INVALIDDIRECTDRAWGUID?$AA@ ; `string'
PUBLIC	??_C@_0BC@GLNOPNKK@DDERR_INVALIDMODE?$AA@	; `string'
PUBLIC	??_C@_0BE@KPNOKGED@DDERR_INVALIDOBJECT?$AA@	; `string'
PUBLIC	??_C@_0BE@CCPBMIBD@DDERR_INVALIDPARAMS?$AA@	; `string'
PUBLIC	??_C@_0BJ@PEGADMFO@DDERR_INVALIDPIXELFORMAT?$AA@ ; `string'
PUBLIC	??_C@_0BG@OMJGFIHE@DDERR_INVALIDPOSITION?$AA@	; `string'
PUBLIC	??_C@_0BC@LAEFCIAI@DDERR_INVALIDRECT?$AA@	; `string'
PUBLIC	??_C@_0BF@MAGKOGBC@DDERR_LOCKEDSURFACES?$AA@	; `string'
PUBLIC	??_C@_0L@DJKAAMGA@DDERR_NO3D?$AA@		; `string'
PUBLIC	??_C@_0BA@BFFEPDGJ@DDERR_NOALPHAHW?$AA@		; `string'
PUBLIC	??_C@_0O@NKGDNEG@DDERR_NOBLTHW?$AA@		; `string'
PUBLIC	??_C@_0BB@JOLMGPDK@DDERR_NOCLIPLIST?$AA@	; `string'
PUBLIC	??_C@_0BI@BGMBBEJL@DDERR_NOCLIPPERATTACHED?$AA@	; `string'
PUBLIC	??_C@_0BE@PDOMLOPD@DDERR_NOCOLORCONVHW?$AA@	; `string'
PUBLIC	??_C@_0BB@GIFHLHNH@DDERR_NOCOLORKEY?$AA@	; `string'
PUBLIC	??_C@_0BD@BAAPAKEL@DDERR_NOCOLORKEYHW?$AA@	; `string'
PUBLIC	??_C@_0BM@PMEMMDPI@DDERR_NOCOOPERATIVELEVELSET?$AA@ ; `string'
PUBLIC	??_C@_0L@CHFPOEHC@DDERR_NODC?$AA@		; `string'
PUBLIC	??_C@_0BB@BPILLDBG@DDERR_NODDROPSHW?$AA@	; `string'
PUBLIC	??_C@_0BF@NOEHEIDL@DDERR_NODIRECTDRAWHW?$AA@	; `string'
PUBLIC	??_C@_0BC@DCFOAKAL@DDERR_NOEMULATION?$AA@	; `string'
PUBLIC	??_C@_0BG@DHFIFBBC@DDERR_NOEXCLUSIVEMODE?$AA@	; `string'
PUBLIC	??_C@_0P@IEKAGFBG@DDERR_NOFLIPHW?$AA@		; `string'
PUBLIC	??_C@_0M@IIGNACND@DDERR_NOGDI?$AA@		; `string'
PUBLIC	??_C@_0N@EOPEBNEI@DDERR_NOHWND?$AA@		; `string'
PUBLIC	??_C@_0BB@MNGJGGOP@DDERR_NOMIRRORHW?$AA@	; `string'
PUBLIC	??_C@_0BE@JKKEKLOE@DDERR_NOOVERLAYDEST?$AA@	; `string'
PUBLIC	??_C@_0BC@JKHLHDPI@DDERR_NOOVERLAYHW?$AA@	; `string'
PUBLIC	??_C@_0BI@KBKHCNLK@DDERR_NOPALETTEATTACHED?$AA@	; `string'
PUBLIC	??_C@_0BC@GEADEPGN@DDERR_NOPALETTEHW?$AA@	; `string'
PUBLIC	??_C@_0BD@ICAOCHBG@DDERR_NORASTEROPHW?$AA@	; `string'
PUBLIC	??_C@_0BD@NEIDAAKN@DDERR_NOROTATIONHW?$AA@	; `string'
PUBLIC	??_C@_0BC@CAPIEDAG@DDERR_NOSTRETCHHW?$AA@	; `string'
PUBLIC	??_C@_0BD@ENAKJNOC@DDERR_NOT4BITCOLOR?$AA@	; `string'
PUBLIC	??_C@_0BI@IKKPPDMJ@DDERR_NOT4BITCOLORINDEX?$AA@	; `string'
PUBLIC	??_C@_0BD@FHDGHNGM@DDERR_NOT8BITCOLOR?$AA@	; `string'
PUBLIC	??_C@_0BJ@LGNAEONK@DDERR_NOTAOVERLAYSURFACE?$AA@ ; `string'
PUBLIC	??_C@_0BC@ENEADALF@DDERR_NOTEXTUREHW?$AA@	; `string'
PUBLIC	??_C@_0BD@FOFDLEGO@DDERR_NOTFLIPPABLE?$AA@	; `string'
PUBLIC	??_C@_0P@IIGPDCF@DDERR_NOTFOUND?$AA@		; `string'
PUBLIC	??_C@_0BA@KCNFHPNM@DDERR_NOTLOCKED?$AA@		; `string'
PUBLIC	??_C@_0BE@FGMGOELL@DDERR_NOTPALETTIZED?$AA@	; `string'
PUBLIC	??_C@_0BA@PAPKELJP@DDERR_NOVSYNCHW?$AA@		; `string'
PUBLIC	??_C@_0BC@MGOAKBHI@DDERR_NOZBUFFERHW?$AA@	; `string'
PUBLIC	??_C@_0BD@IFBPLCFK@DDERR_NOZOVERLAYHW?$AA@	; `string'
PUBLIC	??_C@_0BA@BCMNJCDB@DDERR_OUTOFCAPS?$AA@		; `string'
PUBLIC	??_C@_0BC@JFAMHJIL@DDERR_OUTOFMEMORY?$AA@	; `string'
PUBLIC	??_C@_0BH@IHGJFMGH@DDERR_OUTOFVIDEOMEMORY?$AA@	; `string'
PUBLIC	??_C@_0BG@EDDFCCOG@DDERR_OVERLAYCANTCLIP?$AA@	; `string'
PUBLIC	??_C@_0CD@JNABKIAN@DDERR_OVERLAYCOLORKEYONLYONEACTI@ ; `string'
PUBLIC	??_C@_0BI@CLLMFLGN@DDERR_OVERLAYNOTVISIBLE?$AA@	; `string'
PUBLIC	??_C@_0BC@CEBGFCJL@DDERR_PALETTEBUSY?$AA@	; `string'
PUBLIC	??_C@_0CC@FKFBEMJC@DDERR_PRIMARYSURFACEALREADYEXIST@ ; `string'
PUBLIC	??_C@_0BF@BDDJLJGA@DDERR_REGIONTOOSMALL?$AA@	; `string'
PUBLIC	??_C@_0BN@DLNFLDJF@DDERR_SURFACEALREADYATTACHED?$AA@ ; `string'
PUBLIC	??_C@_0BO@HOHOGLO@DDERR_SURFACEALREADYDEPENDENT?$AA@ ; `string'
PUBLIC	??_C@_0BC@NLGPCHLD@DDERR_SURFACEBUSY?$AA@	; `string'
PUBLIC	??_C@_0BI@KAHOANAA@DDERR_SURFACEISOBSCURED?$AA@	; `string'
PUBLIC	??_C@_0BC@OOFFFAGE@DDERR_SURFACELOST?$AA@	; `string'
PUBLIC	??_C@_0BJ@DMNBOKFJ@DDERR_SURFACENOTATTACHED?$AA@ ; `string'
PUBLIC	??_C@_0BD@FPHOLBKE@DDERR_TOOBIGHEIGHT?$AA@	; `string'
PUBLIC	??_C@_0BB@IBDADILM@DDERR_TOOBIGSIZE?$AA@	; `string'
PUBLIC	??_C@_0BC@MMEFKBGP@DDERR_TOOBIGWIDTH?$AA@	; `string'
PUBLIC	??_C@_0BC@LLCNADOP@DDERR_UNSUPPORTED?$AA@	; `string'
PUBLIC	??_C@_0BI@GGBGCOID@DDERR_UNSUPPORTEDFORMAT?$AA@	; `string'
PUBLIC	??_C@_0BG@OHPHKFL@DDERR_UNSUPPORTEDMASK?$AA@	; `string'
PUBLIC	??_C@_0BO@CKEGAAHC@DDERR_VERTICALBLANKINPROGRESS?$AA@ ; `string'
PUBLIC	??_C@_0BG@PNJKHKJC@DDERR_WASSTILLDRAWING?$AA@	; `string'
PUBLIC	??_C@_0BA@FGHHLMKB@DDERR_WRONGMODE?$AA@		; `string'
PUBLIC	??_C@_0N@MAIIIAKF@DDERR_XALIGN?$AA@		; `string'
PUBLIC	??_C@_0BD@KAPALDGP@UNKNOWN?5ERROR?5CODE?$AA@	; `string'
PUBLIC	??_C@_09LNMBOOMB@D3D?5Error?$AA@		; `string'
PUBLIC	??_C@_0BH@MDNDAAEO@D3DERR_BADMAJORVERSION?$AA@	; `string'
PUBLIC	??_C@_0BH@HFAGAFDC@D3DERR_BADMINORVERSION?$AA@	; `string'
PUBLIC	??_C@_0BN@FLDMEHKH@D3DERR_EXECUTE_CREATE_FAILED?$AA@ ; `string'
PUBLIC	??_C@_0BO@LGHMOFHO@D3DERR_EXECUTE_DESTROY_FAILED?$AA@ ; `string'
PUBLIC	??_C@_0BL@DMBHKLLG@D3DERR_EXECUTE_LOCK_FAILED?$AA@ ; `string'
PUBLIC	??_C@_0BN@CJJOHPMI@D3DERR_EXECUTE_UNLOCK_FAILED?$AA@ ; `string'
PUBLIC	??_C@_0BG@EADNNNJB@D3DERR_EXECUTE_LOCKED?$AA@	; `string'
PUBLIC	??_C@_0BK@LKPIANLL@D3DERR_EXECUTE_NOT_LOCKED?$AA@ ; `string'
PUBLIC	??_C@_0BG@JCAMDLH@D3DERR_EXECUTE_FAILED?$AA@	; `string'
PUBLIC	??_C@_0BO@BMLEGCIJ@D3DERR_EXECUTE_CLIPPED_FAILED?$AA@ ; `string'
PUBLIC	??_C@_0BK@GLBGKNEI@D3DERR_TEXTURE_NO_SUPPORT?$AA@ ; `string'
PUBLIC	??_C@_0BN@KOAJFPFI@D3DERR_TEXTURE_CREATE_FAILED?$AA@ ; `string'
PUBLIC	??_C@_0BO@JLILDPOL@D3DERR_TEXTURE_DESTROY_FAILED?$AA@ ; `string'
PUBLIC	??_C@_0BL@FFOODCNH@D3DERR_TEXTURE_LOCK_FAILED?$AA@ ; `string'
PUBLIC	??_C@_0BN@NMKLGHDH@D3DERR_TEXTURE_UNLOCK_FAILED?$AA@ ; `string'
PUBLIC	??_C@_0BL@IOKCCNDL@D3DERR_TEXTURE_LOAD_FAILED?$AA@ ; `string'
PUBLIC	??_C@_0BL@BFDHGJEF@D3DERR_TEXTURE_SWAP_FAILED?$AA@ ; `string'
PUBLIC	??_C@_0BG@OKFJGHJB@D3DERR_TEXTURE_LOCKED?$AA@	; `string'
PUBLIC	??_C@_0BK@EFKDJCCI@D3DERR_TEXTURE_NOT_LOCKED?$AA@ ; `string'
PUBLIC	??_C@_0BO@LAPCIDO@D3DERR_TEXTURE_GETSURF_FAILED?$AA@ ; `string'
PUBLIC	??_C@_0BM@CJGICNIN@D3DERR_MATRIX_CREATE_FAILED?$AA@ ; `string'
PUBLIC	??_C@_0BN@GNLFHIMC@D3DERR_MATRIX_DESTROY_FAILED?$AA@ ; `string'
PUBLIC	??_C@_0BN@DMPPDLIP@D3DERR_MATRIX_SETDATA_FAILED?$AA@ ; `string'
PUBLIC	??_C@_0BN@PCOBMBKD@D3DERR_MATRIX_GETDATA_FAILED?$AA@ ; `string'
PUBLIC	??_C@_0BO@DCNECMNP@D3DERR_SETVIEWPORTDATA_FAILED?$AA@ ; `string'
PUBLIC	??_C@_0BO@EAEEHEME@D3DERR_MATERIAL_CREATE_FAILED?$AA@ ; `string'
PUBLIC	??_C@_0BP@GCNMKNKP@D3DERR_MATERIAL_DESTROY_FAILED?$AA@ ; `string'
PUBLIC	??_C@_0BP@DDJGOOOC@D3DERR_MATERIAL_SETDATA_FAILED?$AA@ ; `string'
PUBLIC	??_C@_0BP@PNIIBEMO@D3DERR_MATERIAL_GETDATA_FAILED?$AA@ ; `string'
PUBLIC	??_C@_0BI@POLEELME@D3DERR_LIGHT_SET_FAILED?$AA@	; `string'
PUBLIC	??_C@_0BG@EGAAIAPO@D3DERR_SCENE_IN_SCENE?$AA@	; `string'
PUBLIC	??_C@_0BK@FPAJMCGE@D3DERR_SCENE_NOT_IN_SCENE?$AA@ ; `string'
PUBLIC	??_C@_0BK@HIPOGPOB@D3DERR_SCENE_BEGIN_FAILED?$AA@ ; `string'
PUBLIC	??_C@_0BI@PAGCGJDG@D3DERR_SCENE_END_FAILED?$AA@	; `string'
PUBLIC	??_C@_0CE@HKCFODBM@UNKNOWN?5ERROR?5CODE?3?5Trying?5DD?5co@ ; `string'
PUBLIC	??_C@_0N@FJJIPMHL@DSound?5Error?$AA@		; `string'
PUBLIC	??_C@_0BA@COPOGMBA@DSERR_ALLOCATED?$AA@		; `string'
PUBLIC	??_C@_0BF@KBGGCPDE@DSERR_CONTROLUNAVAIL?$AA@	; `string'
PUBLIC	??_C@_0BD@MODBPMIE@DSERR_INVALIDPARAM?$AA@	; `string'
PUBLIC	??_C@_0BC@NMCDDLDP@DSERR_INVALIDCALL?$AA@	; `string'
PUBLIC	??_C@_0O@PDIJJBF@DSERR_GENERIC?$AA@		; `string'
PUBLIC	??_C@_0BG@FGFOLLAI@DSERR_PRIOLEVELNEEDED?$AA@	; `string'
PUBLIC	??_C@_0BC@KCMPJMLN@DSERR_OUTOFMEMORY?$AA@	; `string'
PUBLIC	??_C@_0BA@ECKDOBJD@DSERR_BADFORMAT?$AA@		; `string'
PUBLIC	??_C@_0BC@IMOOOGNJ@DSERR_UNSUPPORTED?$AA@	; `string'
PUBLIC	??_C@_0P@HJFILJLC@DSERR_NODRIVER?$AA@		; `string'
PUBLIC	??_C@_0BJ@PODLOCNP@DSERR_ALREADYINITIALIZED?$AA@ ; `string'
PUBLIC	??_C@_0BE@FNFJCFJP@DSERR_NOAGGREGATION?$AA@	; `string'
PUBLIC	??_C@_0BB@MLKAOHBD@DSERR_BUFFERLOST?$AA@	; `string'
PUBLIC	??_C@_0BG@JFJBCEJM@DSERR_OTHERAPPHASPRIO?$AA@	; `string'
PUBLIC	??_C@_0BE@BMJCAPGM@DSERR_UNINITIALIZED?$AA@	; `string'
EXTRN	__imp__MessageBoxA@16:PROC
;	COMDAT ??_C@_0BE@BMJCAPGM@DSERR_UNINITIALIZED?$AA@
CONST	SEGMENT
??_C@_0BE@BMJCAPGM@DSERR_UNINITIALIZED?$AA@ DB 'DSERR_UNINITIALIZED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JFJBCEJM@DSERR_OTHERAPPHASPRIO?$AA@
CONST	SEGMENT
??_C@_0BG@JFJBCEJM@DSERR_OTHERAPPHASPRIO?$AA@ DB 'DSERR_OTHERAPPHASPRIO', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MLKAOHBD@DSERR_BUFFERLOST?$AA@
CONST	SEGMENT
??_C@_0BB@MLKAOHBD@DSERR_BUFFERLOST?$AA@ DB 'DSERR_BUFFERLOST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FNFJCFJP@DSERR_NOAGGREGATION?$AA@
CONST	SEGMENT
??_C@_0BE@FNFJCFJP@DSERR_NOAGGREGATION?$AA@ DB 'DSERR_NOAGGREGATION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PODLOCNP@DSERR_ALREADYINITIALIZED?$AA@
CONST	SEGMENT
??_C@_0BJ@PODLOCNP@DSERR_ALREADYINITIALIZED?$AA@ DB 'DSERR_ALREADYINITIAL'
	DB	'IZED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HJFILJLC@DSERR_NODRIVER?$AA@
CONST	SEGMENT
??_C@_0P@HJFILJLC@DSERR_NODRIVER?$AA@ DB 'DSERR_NODRIVER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IMOOOGNJ@DSERR_UNSUPPORTED?$AA@
CONST	SEGMENT
??_C@_0BC@IMOOOGNJ@DSERR_UNSUPPORTED?$AA@ DB 'DSERR_UNSUPPORTED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ECKDOBJD@DSERR_BADFORMAT?$AA@
CONST	SEGMENT
??_C@_0BA@ECKDOBJD@DSERR_BADFORMAT?$AA@ DB 'DSERR_BADFORMAT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KCMPJMLN@DSERR_OUTOFMEMORY?$AA@
CONST	SEGMENT
??_C@_0BC@KCMPJMLN@DSERR_OUTOFMEMORY?$AA@ DB 'DSERR_OUTOFMEMORY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FGFOLLAI@DSERR_PRIOLEVELNEEDED?$AA@
CONST	SEGMENT
??_C@_0BG@FGFOLLAI@DSERR_PRIOLEVELNEEDED?$AA@ DB 'DSERR_PRIOLEVELNEEDED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PDIJJBF@DSERR_GENERIC?$AA@
CONST	SEGMENT
??_C@_0O@PDIJJBF@DSERR_GENERIC?$AA@ DB 'DSERR_GENERIC', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NMCDDLDP@DSERR_INVALIDCALL?$AA@
CONST	SEGMENT
??_C@_0BC@NMCDDLDP@DSERR_INVALIDCALL?$AA@ DB 'DSERR_INVALIDCALL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MODBPMIE@DSERR_INVALIDPARAM?$AA@
CONST	SEGMENT
??_C@_0BD@MODBPMIE@DSERR_INVALIDPARAM?$AA@ DB 'DSERR_INVALIDPARAM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KBGGCPDE@DSERR_CONTROLUNAVAIL?$AA@
CONST	SEGMENT
??_C@_0BF@KBGGCPDE@DSERR_CONTROLUNAVAIL?$AA@ DB 'DSERR_CONTROLUNAVAIL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@COPOGMBA@DSERR_ALLOCATED?$AA@
CONST	SEGMENT
??_C@_0BA@COPOGMBA@DSERR_ALLOCATED?$AA@ DB 'DSERR_ALLOCATED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FJJIPMHL@DSound?5Error?$AA@
CONST	SEGMENT
??_C@_0N@FJJIPMHL@DSound?5Error?$AA@ DB 'DSound Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@HKCFODBM@UNKNOWN?5ERROR?5CODE?3?5Trying?5DD?5co@
CONST	SEGMENT
??_C@_0CE@HKCFODBM@UNKNOWN?5ERROR?5CODE?3?5Trying?5DD?5co@ DB 'UNKNOWN ER'
	DB	'ROR CODE: Trying DD codes', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PAGCGJDG@D3DERR_SCENE_END_FAILED?$AA@
CONST	SEGMENT
??_C@_0BI@PAGCGJDG@D3DERR_SCENE_END_FAILED?$AA@ DB 'D3DERR_SCENE_END_FAIL'
	DB	'ED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@HIPOGPOB@D3DERR_SCENE_BEGIN_FAILED?$AA@
CONST	SEGMENT
??_C@_0BK@HIPOGPOB@D3DERR_SCENE_BEGIN_FAILED?$AA@ DB 'D3DERR_SCENE_BEGIN_'
	DB	'FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FPAJMCGE@D3DERR_SCENE_NOT_IN_SCENE?$AA@
CONST	SEGMENT
??_C@_0BK@FPAJMCGE@D3DERR_SCENE_NOT_IN_SCENE?$AA@ DB 'D3DERR_SCENE_NOT_IN'
	DB	'_SCENE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EGAAIAPO@D3DERR_SCENE_IN_SCENE?$AA@
CONST	SEGMENT
??_C@_0BG@EGAAIAPO@D3DERR_SCENE_IN_SCENE?$AA@ DB 'D3DERR_SCENE_IN_SCENE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@POLEELME@D3DERR_LIGHT_SET_FAILED?$AA@
CONST	SEGMENT
??_C@_0BI@POLEELME@D3DERR_LIGHT_SET_FAILED?$AA@ DB 'D3DERR_LIGHT_SET_FAIL'
	DB	'ED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@PNIIBEMO@D3DERR_MATERIAL_GETDATA_FAILED?$AA@
CONST	SEGMENT
??_C@_0BP@PNIIBEMO@D3DERR_MATERIAL_GETDATA_FAILED?$AA@ DB 'D3DERR_MATERIA'
	DB	'L_GETDATA_FAILED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@DDJGOOOC@D3DERR_MATERIAL_SETDATA_FAILED?$AA@
CONST	SEGMENT
??_C@_0BP@DDJGOOOC@D3DERR_MATERIAL_SETDATA_FAILED?$AA@ DB 'D3DERR_MATERIA'
	DB	'L_SETDATA_FAILED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@GCNMKNKP@D3DERR_MATERIAL_DESTROY_FAILED?$AA@
CONST	SEGMENT
??_C@_0BP@GCNMKNKP@D3DERR_MATERIAL_DESTROY_FAILED?$AA@ DB 'D3DERR_MATERIA'
	DB	'L_DESTROY_FAILED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EAEEHEME@D3DERR_MATERIAL_CREATE_FAILED?$AA@
CONST	SEGMENT
??_C@_0BO@EAEEHEME@D3DERR_MATERIAL_CREATE_FAILED?$AA@ DB 'D3DERR_MATERIAL'
	DB	'_CREATE_FAILED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DCNECMNP@D3DERR_SETVIEWPORTDATA_FAILED?$AA@
CONST	SEGMENT
??_C@_0BO@DCNECMNP@D3DERR_SETVIEWPORTDATA_FAILED?$AA@ DB 'D3DERR_SETVIEWP'
	DB	'ORTDATA_FAILED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PCOBMBKD@D3DERR_MATRIX_GETDATA_FAILED?$AA@
CONST	SEGMENT
??_C@_0BN@PCOBMBKD@D3DERR_MATRIX_GETDATA_FAILED?$AA@ DB 'D3DERR_MATRIX_GE'
	DB	'TDATA_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DMPPDLIP@D3DERR_MATRIX_SETDATA_FAILED?$AA@
CONST	SEGMENT
??_C@_0BN@DMPPDLIP@D3DERR_MATRIX_SETDATA_FAILED?$AA@ DB 'D3DERR_MATRIX_SE'
	DB	'TDATA_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GNLFHIMC@D3DERR_MATRIX_DESTROY_FAILED?$AA@
CONST	SEGMENT
??_C@_0BN@GNLFHIMC@D3DERR_MATRIX_DESTROY_FAILED?$AA@ DB 'D3DERR_MATRIX_DE'
	DB	'STROY_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@CJGICNIN@D3DERR_MATRIX_CREATE_FAILED?$AA@
CONST	SEGMENT
??_C@_0BM@CJGICNIN@D3DERR_MATRIX_CREATE_FAILED?$AA@ DB 'D3DERR_MATRIX_CRE'
	DB	'ATE_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LAPCIDO@D3DERR_TEXTURE_GETSURF_FAILED?$AA@
CONST	SEGMENT
??_C@_0BO@LAPCIDO@D3DERR_TEXTURE_GETSURF_FAILED?$AA@ DB 'D3DERR_TEXTURE_G'
	DB	'ETSURF_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EFKDJCCI@D3DERR_TEXTURE_NOT_LOCKED?$AA@
CONST	SEGMENT
??_C@_0BK@EFKDJCCI@D3DERR_TEXTURE_NOT_LOCKED?$AA@ DB 'D3DERR_TEXTURE_NOT_'
	DB	'LOCKED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OKFJGHJB@D3DERR_TEXTURE_LOCKED?$AA@
CONST	SEGMENT
??_C@_0BG@OKFJGHJB@D3DERR_TEXTURE_LOCKED?$AA@ DB 'D3DERR_TEXTURE_LOCKED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BFDHGJEF@D3DERR_TEXTURE_SWAP_FAILED?$AA@
CONST	SEGMENT
??_C@_0BL@BFDHGJEF@D3DERR_TEXTURE_SWAP_FAILED?$AA@ DB 'D3DERR_TEXTURE_SWA'
	DB	'P_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@IOKCCNDL@D3DERR_TEXTURE_LOAD_FAILED?$AA@
CONST	SEGMENT
??_C@_0BL@IOKCCNDL@D3DERR_TEXTURE_LOAD_FAILED?$AA@ DB 'D3DERR_TEXTURE_LOA'
	DB	'D_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@NMKLGHDH@D3DERR_TEXTURE_UNLOCK_FAILED?$AA@
CONST	SEGMENT
??_C@_0BN@NMKLGHDH@D3DERR_TEXTURE_UNLOCK_FAILED?$AA@ DB 'D3DERR_TEXTURE_U'
	DB	'NLOCK_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@FFOODCNH@D3DERR_TEXTURE_LOCK_FAILED?$AA@
CONST	SEGMENT
??_C@_0BL@FFOODCNH@D3DERR_TEXTURE_LOCK_FAILED?$AA@ DB 'D3DERR_TEXTURE_LOC'
	DB	'K_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@JLILDPOL@D3DERR_TEXTURE_DESTROY_FAILED?$AA@
CONST	SEGMENT
??_C@_0BO@JLILDPOL@D3DERR_TEXTURE_DESTROY_FAILED?$AA@ DB 'D3DERR_TEXTURE_'
	DB	'DESTROY_FAILED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KOAJFPFI@D3DERR_TEXTURE_CREATE_FAILED?$AA@
CONST	SEGMENT
??_C@_0BN@KOAJFPFI@D3DERR_TEXTURE_CREATE_FAILED?$AA@ DB 'D3DERR_TEXTURE_C'
	DB	'REATE_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GLBGKNEI@D3DERR_TEXTURE_NO_SUPPORT?$AA@
CONST	SEGMENT
??_C@_0BK@GLBGKNEI@D3DERR_TEXTURE_NO_SUPPORT?$AA@ DB 'D3DERR_TEXTURE_NO_S'
	DB	'UPPORT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BMLEGCIJ@D3DERR_EXECUTE_CLIPPED_FAILED?$AA@
CONST	SEGMENT
??_C@_0BO@BMLEGCIJ@D3DERR_EXECUTE_CLIPPED_FAILED?$AA@ DB 'D3DERR_EXECUTE_'
	DB	'CLIPPED_FAILED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JCAMDLH@D3DERR_EXECUTE_FAILED?$AA@
CONST	SEGMENT
??_C@_0BG@JCAMDLH@D3DERR_EXECUTE_FAILED?$AA@ DB 'D3DERR_EXECUTE_FAILED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LKPIANLL@D3DERR_EXECUTE_NOT_LOCKED?$AA@
CONST	SEGMENT
??_C@_0BK@LKPIANLL@D3DERR_EXECUTE_NOT_LOCKED?$AA@ DB 'D3DERR_EXECUTE_NOT_'
	DB	'LOCKED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EADNNNJB@D3DERR_EXECUTE_LOCKED?$AA@
CONST	SEGMENT
??_C@_0BG@EADNNNJB@D3DERR_EXECUTE_LOCKED?$AA@ DB 'D3DERR_EXECUTE_LOCKED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CJJOHPMI@D3DERR_EXECUTE_UNLOCK_FAILED?$AA@
CONST	SEGMENT
??_C@_0BN@CJJOHPMI@D3DERR_EXECUTE_UNLOCK_FAILED?$AA@ DB 'D3DERR_EXECUTE_U'
	DB	'NLOCK_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DMBHKLLG@D3DERR_EXECUTE_LOCK_FAILED?$AA@
CONST	SEGMENT
??_C@_0BL@DMBHKLLG@D3DERR_EXECUTE_LOCK_FAILED?$AA@ DB 'D3DERR_EXECUTE_LOC'
	DB	'K_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LGHMOFHO@D3DERR_EXECUTE_DESTROY_FAILED?$AA@
CONST	SEGMENT
??_C@_0BO@LGHMOFHO@D3DERR_EXECUTE_DESTROY_FAILED?$AA@ DB 'D3DERR_EXECUTE_'
	DB	'DESTROY_FAILED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FLDMEHKH@D3DERR_EXECUTE_CREATE_FAILED?$AA@
CONST	SEGMENT
??_C@_0BN@FLDMEHKH@D3DERR_EXECUTE_CREATE_FAILED?$AA@ DB 'D3DERR_EXECUTE_C'
	DB	'REATE_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@HFAGAFDC@D3DERR_BADMINORVERSION?$AA@
CONST	SEGMENT
??_C@_0BH@HFAGAFDC@D3DERR_BADMINORVERSION?$AA@ DB 'D3DERR_BADMINORVERSION'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MDNDAAEO@D3DERR_BADMAJORVERSION?$AA@
CONST	SEGMENT
??_C@_0BH@MDNDAAEO@D3DERR_BADMAJORVERSION?$AA@ DB 'D3DERR_BADMAJORVERSION'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_09LNMBOOMB@D3D?5Error?$AA@
CONST	SEGMENT
??_C@_09LNMBOOMB@D3D?5Error?$AA@ DB 'D3D Error', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KAPALDGP@UNKNOWN?5ERROR?5CODE?$AA@
CONST	SEGMENT
??_C@_0BD@KAPALDGP@UNKNOWN?5ERROR?5CODE?$AA@ DB 'UNKNOWN ERROR CODE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MAIIIAKF@DDERR_XALIGN?$AA@
CONST	SEGMENT
??_C@_0N@MAIIIAKF@DDERR_XALIGN?$AA@ DB 'DDERR_XALIGN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FGHHLMKB@DDERR_WRONGMODE?$AA@
CONST	SEGMENT
??_C@_0BA@FGHHLMKB@DDERR_WRONGMODE?$AA@ DB 'DDERR_WRONGMODE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PNJKHKJC@DDERR_WASSTILLDRAWING?$AA@
CONST	SEGMENT
??_C@_0BG@PNJKHKJC@DDERR_WASSTILLDRAWING?$AA@ DB 'DDERR_WASSTILLDRAWING', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CKEGAAHC@DDERR_VERTICALBLANKINPROGRESS?$AA@
CONST	SEGMENT
??_C@_0BO@CKEGAAHC@DDERR_VERTICALBLANKINPROGRESS?$AA@ DB 'DDERR_VERTICALB'
	DB	'LANKINPROGRESS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OHPHKFL@DDERR_UNSUPPORTEDMASK?$AA@
CONST	SEGMENT
??_C@_0BG@OHPHKFL@DDERR_UNSUPPORTEDMASK?$AA@ DB 'DDERR_UNSUPPORTEDMASK', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GGBGCOID@DDERR_UNSUPPORTEDFORMAT?$AA@
CONST	SEGMENT
??_C@_0BI@GGBGCOID@DDERR_UNSUPPORTEDFORMAT?$AA@ DB 'DDERR_UNSUPPORTEDFORM'
	DB	'AT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LLCNADOP@DDERR_UNSUPPORTED?$AA@
CONST	SEGMENT
??_C@_0BC@LLCNADOP@DDERR_UNSUPPORTED?$AA@ DB 'DDERR_UNSUPPORTED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MMEFKBGP@DDERR_TOOBIGWIDTH?$AA@
CONST	SEGMENT
??_C@_0BC@MMEFKBGP@DDERR_TOOBIGWIDTH?$AA@ DB 'DDERR_TOOBIGWIDTH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IBDADILM@DDERR_TOOBIGSIZE?$AA@
CONST	SEGMENT
??_C@_0BB@IBDADILM@DDERR_TOOBIGSIZE?$AA@ DB 'DDERR_TOOBIGSIZE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FPHOLBKE@DDERR_TOOBIGHEIGHT?$AA@
CONST	SEGMENT
??_C@_0BD@FPHOLBKE@DDERR_TOOBIGHEIGHT?$AA@ DB 'DDERR_TOOBIGHEIGHT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DMNBOKFJ@DDERR_SURFACENOTATTACHED?$AA@
CONST	SEGMENT
??_C@_0BJ@DMNBOKFJ@DDERR_SURFACENOTATTACHED?$AA@ DB 'DDERR_SURFACENOTATTA'
	DB	'CHED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OOFFFAGE@DDERR_SURFACELOST?$AA@
CONST	SEGMENT
??_C@_0BC@OOFFFAGE@DDERR_SURFACELOST?$AA@ DB 'DDERR_SURFACELOST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KAHOANAA@DDERR_SURFACEISOBSCURED?$AA@
CONST	SEGMENT
??_C@_0BI@KAHOANAA@DDERR_SURFACEISOBSCURED?$AA@ DB 'DDERR_SURFACEISOBSCUR'
	DB	'ED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NLGPCHLD@DDERR_SURFACEBUSY?$AA@
CONST	SEGMENT
??_C@_0BC@NLGPCHLD@DDERR_SURFACEBUSY?$AA@ DB 'DDERR_SURFACEBUSY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@HOHOGLO@DDERR_SURFACEALREADYDEPENDENT?$AA@
CONST	SEGMENT
??_C@_0BO@HOHOGLO@DDERR_SURFACEALREADYDEPENDENT?$AA@ DB 'DDERR_SURFACEALR'
	DB	'EADYDEPENDENT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DLNFLDJF@DDERR_SURFACEALREADYATTACHED?$AA@
CONST	SEGMENT
??_C@_0BN@DLNFLDJF@DDERR_SURFACEALREADYATTACHED?$AA@ DB 'DDERR_SURFACEALR'
	DB	'EADYATTACHED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BDDJLJGA@DDERR_REGIONTOOSMALL?$AA@
CONST	SEGMENT
??_C@_0BF@BDDJLJGA@DDERR_REGIONTOOSMALL?$AA@ DB 'DDERR_REGIONTOOSMALL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@FKFBEMJC@DDERR_PRIMARYSURFACEALREADYEXIST@
CONST	SEGMENT
??_C@_0CC@FKFBEMJC@DDERR_PRIMARYSURFACEALREADYEXIST@ DB 'DDERR_PRIMARYSUR'
	DB	'FACEALREADYEXISTS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CEBGFCJL@DDERR_PALETTEBUSY?$AA@
CONST	SEGMENT
??_C@_0BC@CEBGFCJL@DDERR_PALETTEBUSY?$AA@ DB 'DDERR_PALETTEBUSY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CLLMFLGN@DDERR_OVERLAYNOTVISIBLE?$AA@
CONST	SEGMENT
??_C@_0BI@CLLMFLGN@DDERR_OVERLAYNOTVISIBLE?$AA@ DB 'DDERR_OVERLAYNOTVISIB'
	DB	'LE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@JNABKIAN@DDERR_OVERLAYCOLORKEYONLYONEACTI@
CONST	SEGMENT
??_C@_0CD@JNABKIAN@DDERR_OVERLAYCOLORKEYONLYONEACTI@ DB 'DDERR_OVERLAYCOL'
	DB	'ORKEYONLYONEACTIVE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EDDFCCOG@DDERR_OVERLAYCANTCLIP?$AA@
CONST	SEGMENT
??_C@_0BG@EDDFCCOG@DDERR_OVERLAYCANTCLIP?$AA@ DB 'DDERR_OVERLAYCANTCLIP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IHGJFMGH@DDERR_OUTOFVIDEOMEMORY?$AA@
CONST	SEGMENT
??_C@_0BH@IHGJFMGH@DDERR_OUTOFVIDEOMEMORY?$AA@ DB 'DDERR_OUTOFVIDEOMEMORY'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JFAMHJIL@DDERR_OUTOFMEMORY?$AA@
CONST	SEGMENT
??_C@_0BC@JFAMHJIL@DDERR_OUTOFMEMORY?$AA@ DB 'DDERR_OUTOFMEMORY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BCMNJCDB@DDERR_OUTOFCAPS?$AA@
CONST	SEGMENT
??_C@_0BA@BCMNJCDB@DDERR_OUTOFCAPS?$AA@ DB 'DDERR_OUTOFCAPS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@IFBPLCFK@DDERR_NOZOVERLAYHW?$AA@
CONST	SEGMENT
??_C@_0BD@IFBPLCFK@DDERR_NOZOVERLAYHW?$AA@ DB 'DDERR_NOZOVERLAYHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MGOAKBHI@DDERR_NOZBUFFERHW?$AA@
CONST	SEGMENT
??_C@_0BC@MGOAKBHI@DDERR_NOZBUFFERHW?$AA@ DB 'DDERR_NOZBUFFERHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PAPKELJP@DDERR_NOVSYNCHW?$AA@
CONST	SEGMENT
??_C@_0BA@PAPKELJP@DDERR_NOVSYNCHW?$AA@ DB 'DDERR_NOVSYNCHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FGMGOELL@DDERR_NOTPALETTIZED?$AA@
CONST	SEGMENT
??_C@_0BE@FGMGOELL@DDERR_NOTPALETTIZED?$AA@ DB 'DDERR_NOTPALETTIZED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KCNFHPNM@DDERR_NOTLOCKED?$AA@
CONST	SEGMENT
??_C@_0BA@KCNFHPNM@DDERR_NOTLOCKED?$AA@ DB 'DDERR_NOTLOCKED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IIGPDCF@DDERR_NOTFOUND?$AA@
CONST	SEGMENT
??_C@_0P@IIGPDCF@DDERR_NOTFOUND?$AA@ DB 'DDERR_NOTFOUND', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FOFDLEGO@DDERR_NOTFLIPPABLE?$AA@
CONST	SEGMENT
??_C@_0BD@FOFDLEGO@DDERR_NOTFLIPPABLE?$AA@ DB 'DDERR_NOTFLIPPABLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@ENEADALF@DDERR_NOTEXTUREHW?$AA@
CONST	SEGMENT
??_C@_0BC@ENEADALF@DDERR_NOTEXTUREHW?$AA@ DB 'DDERR_NOTEXTUREHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LGNAEONK@DDERR_NOTAOVERLAYSURFACE?$AA@
CONST	SEGMENT
??_C@_0BJ@LGNAEONK@DDERR_NOTAOVERLAYSURFACE?$AA@ DB 'DDERR_NOTAOVERLAYSUR'
	DB	'FACE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FHDGHNGM@DDERR_NOT8BITCOLOR?$AA@
CONST	SEGMENT
??_C@_0BD@FHDGHNGM@DDERR_NOT8BITCOLOR?$AA@ DB 'DDERR_NOT8BITCOLOR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IKKPPDMJ@DDERR_NOT4BITCOLORINDEX?$AA@
CONST	SEGMENT
??_C@_0BI@IKKPPDMJ@DDERR_NOT4BITCOLORINDEX?$AA@ DB 'DDERR_NOT4BITCOLORIND'
	DB	'EX', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@ENAKJNOC@DDERR_NOT4BITCOLOR?$AA@
CONST	SEGMENT
??_C@_0BD@ENAKJNOC@DDERR_NOT4BITCOLOR?$AA@ DB 'DDERR_NOT4BITCOLOR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CAPIEDAG@DDERR_NOSTRETCHHW?$AA@
CONST	SEGMENT
??_C@_0BC@CAPIEDAG@DDERR_NOSTRETCHHW?$AA@ DB 'DDERR_NOSTRETCHHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NEIDAAKN@DDERR_NOROTATIONHW?$AA@
CONST	SEGMENT
??_C@_0BD@NEIDAAKN@DDERR_NOROTATIONHW?$AA@ DB 'DDERR_NOROTATIONHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@ICAOCHBG@DDERR_NORASTEROPHW?$AA@
CONST	SEGMENT
??_C@_0BD@ICAOCHBG@DDERR_NORASTEROPHW?$AA@ DB 'DDERR_NORASTEROPHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GEADEPGN@DDERR_NOPALETTEHW?$AA@
CONST	SEGMENT
??_C@_0BC@GEADEPGN@DDERR_NOPALETTEHW?$AA@ DB 'DDERR_NOPALETTEHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KBKHCNLK@DDERR_NOPALETTEATTACHED?$AA@
CONST	SEGMENT
??_C@_0BI@KBKHCNLK@DDERR_NOPALETTEATTACHED?$AA@ DB 'DDERR_NOPALETTEATTACH'
	DB	'ED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JKHLHDPI@DDERR_NOOVERLAYHW?$AA@
CONST	SEGMENT
??_C@_0BC@JKHLHDPI@DDERR_NOOVERLAYHW?$AA@ DB 'DDERR_NOOVERLAYHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JKKEKLOE@DDERR_NOOVERLAYDEST?$AA@
CONST	SEGMENT
??_C@_0BE@JKKEKLOE@DDERR_NOOVERLAYDEST?$AA@ DB 'DDERR_NOOVERLAYDEST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MNGJGGOP@DDERR_NOMIRRORHW?$AA@
CONST	SEGMENT
??_C@_0BB@MNGJGGOP@DDERR_NOMIRRORHW?$AA@ DB 'DDERR_NOMIRRORHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EOPEBNEI@DDERR_NOHWND?$AA@
CONST	SEGMENT
??_C@_0N@EOPEBNEI@DDERR_NOHWND?$AA@ DB 'DDERR_NOHWND', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IIGNACND@DDERR_NOGDI?$AA@
CONST	SEGMENT
??_C@_0M@IIGNACND@DDERR_NOGDI?$AA@ DB 'DDERR_NOGDI', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IEKAGFBG@DDERR_NOFLIPHW?$AA@
CONST	SEGMENT
??_C@_0P@IEKAGFBG@DDERR_NOFLIPHW?$AA@ DB 'DDERR_NOFLIPHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DHFIFBBC@DDERR_NOEXCLUSIVEMODE?$AA@
CONST	SEGMENT
??_C@_0BG@DHFIFBBC@DDERR_NOEXCLUSIVEMODE?$AA@ DB 'DDERR_NOEXCLUSIVEMODE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DCFOAKAL@DDERR_NOEMULATION?$AA@
CONST	SEGMENT
??_C@_0BC@DCFOAKAL@DDERR_NOEMULATION?$AA@ DB 'DDERR_NOEMULATION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NOEHEIDL@DDERR_NODIRECTDRAWHW?$AA@
CONST	SEGMENT
??_C@_0BF@NOEHEIDL@DDERR_NODIRECTDRAWHW?$AA@ DB 'DDERR_NODIRECTDRAWHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BPILLDBG@DDERR_NODDROPSHW?$AA@
CONST	SEGMENT
??_C@_0BB@BPILLDBG@DDERR_NODDROPSHW?$AA@ DB 'DDERR_NODDROPSHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CHFPOEHC@DDERR_NODC?$AA@
CONST	SEGMENT
??_C@_0L@CHFPOEHC@DDERR_NODC?$AA@ DB 'DDERR_NODC', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PMEMMDPI@DDERR_NOCOOPERATIVELEVELSET?$AA@
CONST	SEGMENT
??_C@_0BM@PMEMMDPI@DDERR_NOCOOPERATIVELEVELSET?$AA@ DB 'DDERR_NOCOOPERATI'
	DB	'VELEVELSET', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BAAPAKEL@DDERR_NOCOLORKEYHW?$AA@
CONST	SEGMENT
??_C@_0BD@BAAPAKEL@DDERR_NOCOLORKEYHW?$AA@ DB 'DDERR_NOCOLORKEYHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GIFHLHNH@DDERR_NOCOLORKEY?$AA@
CONST	SEGMENT
??_C@_0BB@GIFHLHNH@DDERR_NOCOLORKEY?$AA@ DB 'DDERR_NOCOLORKEY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PDOMLOPD@DDERR_NOCOLORCONVHW?$AA@
CONST	SEGMENT
??_C@_0BE@PDOMLOPD@DDERR_NOCOLORCONVHW?$AA@ DB 'DDERR_NOCOLORCONVHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BGMBBEJL@DDERR_NOCLIPPERATTACHED?$AA@
CONST	SEGMENT
??_C@_0BI@BGMBBEJL@DDERR_NOCLIPPERATTACHED?$AA@ DB 'DDERR_NOCLIPPERATTACH'
	DB	'ED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JOLMGPDK@DDERR_NOCLIPLIST?$AA@
CONST	SEGMENT
??_C@_0BB@JOLMGPDK@DDERR_NOCLIPLIST?$AA@ DB 'DDERR_NOCLIPLIST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NKGDNEG@DDERR_NOBLTHW?$AA@
CONST	SEGMENT
??_C@_0O@NKGDNEG@DDERR_NOBLTHW?$AA@ DB 'DDERR_NOBLTHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BFFEPDGJ@DDERR_NOALPHAHW?$AA@
CONST	SEGMENT
??_C@_0BA@BFFEPDGJ@DDERR_NOALPHAHW?$AA@ DB 'DDERR_NOALPHAHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DJKAAMGA@DDERR_NO3D?$AA@
CONST	SEGMENT
??_C@_0L@DJKAAMGA@DDERR_NO3D?$AA@ DB 'DDERR_NO3D', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MAGKOGBC@DDERR_LOCKEDSURFACES?$AA@
CONST	SEGMENT
??_C@_0BF@MAGKOGBC@DDERR_LOCKEDSURFACES?$AA@ DB 'DDERR_LOCKEDSURFACES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LAEFCIAI@DDERR_INVALIDRECT?$AA@
CONST	SEGMENT
??_C@_0BC@LAEFCIAI@DDERR_INVALIDRECT?$AA@ DB 'DDERR_INVALIDRECT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OMJGFIHE@DDERR_INVALIDPOSITION?$AA@
CONST	SEGMENT
??_C@_0BG@OMJGFIHE@DDERR_INVALIDPOSITION?$AA@ DB 'DDERR_INVALIDPOSITION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PEGADMFO@DDERR_INVALIDPIXELFORMAT?$AA@
CONST	SEGMENT
??_C@_0BJ@PEGADMFO@DDERR_INVALIDPIXELFORMAT?$AA@ DB 'DDERR_INVALIDPIXELFO'
	DB	'RMAT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CCPBMIBD@DDERR_INVALIDPARAMS?$AA@
CONST	SEGMENT
??_C@_0BE@CCPBMIBD@DDERR_INVALIDPARAMS?$AA@ DB 'DDERR_INVALIDPARAMS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KPNOKGED@DDERR_INVALIDOBJECT?$AA@
CONST	SEGMENT
??_C@_0BE@KPNOKGED@DDERR_INVALIDOBJECT?$AA@ DB 'DDERR_INVALIDOBJECT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GLNOPNKK@DDERR_INVALIDMODE?$AA@
CONST	SEGMENT
??_C@_0BC@GLNOPNKK@DDERR_INVALIDMODE?$AA@ DB 'DDERR_INVALIDMODE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@LMDGBJFD@DDERR_INVALIDDIRECTDRAWGUID?$AA@
CONST	SEGMENT
??_C@_0BM@LMDGBJFD@DDERR_INVALIDDIRECTDRAWGUID?$AA@ DB 'DDERR_INVALIDDIRE'
	DB	'CTDRAWGUID', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OFKCMNHM@DDERR_INVALIDCLIPLIST?$AA@
CONST	SEGMENT
??_C@_0BG@OFKCMNHM@DDERR_INVALIDCLIPLIST?$AA@ DB 'DDERR_INVALIDCLIPLIST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DDIGIKID@DDERR_INVALIDCAPS?$AA@
CONST	SEGMENT
??_C@_0BC@DDIGIKID@DDERR_INVALIDCAPS?$AA@ DB 'DDERR_INVALIDCAPS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@HJOPGIGH@DDERR_INCOMPATIBLEPRIMARY?$AA@
CONST	SEGMENT
??_C@_0BK@HJOPGIGH@DDERR_INCOMPATIBLEPRIMARY?$AA@ DB 'DDERR_INCOMPATIBLEP'
	DB	'RIMARY', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NLHHKHEN@DDERR_IMPLICITLYCREATED?$AA@
CONST	SEGMENT
??_C@_0BI@NLHHKHEN@DDERR_IMPLICITLYCREATED?$AA@ DB 'DDERR_IMPLICITLYCREAT'
	DB	'ED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MAFLBECE@DDERR_HWNDSUBCLASSED?$AA@
CONST	SEGMENT
??_C@_0BF@MAFLBECE@DDERR_HWNDSUBCLASSED?$AA@ DB 'DDERR_HWNDSUBCLASSED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LGLNHCHJ@DDERR_HWNDALREADYSET?$AA@
CONST	SEGMENT
??_C@_0BF@LGLNHCHJ@DDERR_HWNDALREADYSET?$AA@ DB 'DDERR_HWNDALREADYSET', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FNNCOGNH@DDERR_HEIGHTALIGN?$AA@
CONST	SEGMENT
??_C@_0BC@FNNCOGNH@DDERR_HEIGHTALIGN?$AA@ DB 'DDERR_HEIGHTALIGN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MGEMDJJH@DDERR_GENERIC?$AA@
CONST	SEGMENT
??_C@_0O@MGEMDJJH@DDERR_GENERIC?$AA@ DB 'DDERR_GENERIC', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@GMCKLDPA@DDERR_EXCLUSIVEMODEALREADYSET?$AA@
CONST	SEGMENT
??_C@_0BO@GMCKLDPA@DDERR_EXCLUSIVEMODEALREADYSET?$AA@ DB 'DDERR_EXCLUSIVE'
	DB	'MODEALREADYSET', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MEDIIHJ@DDERR_EXCEPTION?$AA@
CONST	SEGMENT
??_C@_0BA@MEDIIHJ@DDERR_EXCEPTION?$AA@ DB 'DDERR_EXCEPTION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@CFDPGCFK@DDERR_DIRECTDRAWALREADYCREATED?$AA@
CONST	SEGMENT
??_C@_0BP@CFDPGCFK@DDERR_DIRECTDRAWALREADYCREATED?$AA@ DB 'DDERR_DIRECTDR'
	DB	'AWALREADYCREATED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CPFFLGJD@DDERR_CURRENTLYNOTAVAIL?$AA@
CONST	SEGMENT
??_C@_0BI@CPFFLGJD@DDERR_CURRENTLYNOTAVAIL?$AA@ DB 'DDERR_CURRENTLYNOTAVA'
	DB	'IL', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HOAOBBGM@DDERR_COLORKEYNOTSET?$AA@
CONST	SEGMENT
??_C@_0BF@HOAOBBGM@DDERR_COLORKEYNOTSET?$AA@ DB 'DDERR_COLORKEYNOTSET', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BOEHMDDM@DDERR_CLIPPERISUSINGHWND?$AA@
CONST	SEGMENT
??_C@_0BJ@BOEHMDDM@DDERR_CLIPPERISUSINGHWND?$AA@ DB 'DDERR_CLIPPERISUSING'
	DB	'HWND', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LNBDBNLL@DDERR_CANTDUPLICATE?$AA@
CONST	SEGMENT
??_C@_0BE@LNBDBNLL@DDERR_CANTDUPLICATE?$AA@ DB 'DDERR_CANTDUPLICATE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PBNGJMBK@DDERR_CANTCREATEDC?$AA@
CONST	SEGMENT
??_C@_0BD@PBNGJMBK@DDERR_CANTCREATEDC?$AA@ DB 'DDERR_CANTCREATEDC', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FMONFDPK@DDERR_CANNOTDETACHSURFACE?$AA@
CONST	SEGMENT
??_C@_0BK@FMONFDPK@DDERR_CANNOTDETACHSURFACE?$AA@ DB 'DDERR_CANNOTDETACHS'
	DB	'URFACE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HLNKGEOE@DDERR_BLTFASTCANTCLIP?$AA@
CONST	SEGMENT
??_C@_0BG@HLNKGEOE@DDERR_BLTFASTCANTCLIP?$AA@ DB 'DDERR_BLTFASTCANTCLIP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LAEIKKJF@DDERR_ALREADYINITIALIZED?$AA@
CONST	SEGMENT
??_C@_0BJ@LAEIKKJF@DDERR_ALREADYINITIALIZED?$AA@ DB 'DDERR_ALREADYINITIAL'
	DB	'IZED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
CONST	SEGMENT
??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@ DB 'DDraw Error', 00H ; `string'
CONST	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\dxerror.cpp
_TEXT	SEGMENT
tv64 = -4						; size = 4
_result$ = 8						; size = 4
?DSErrorCheck@@YAHJ@Z PROC				; DSErrorCheck

; 420  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 421  : 	switch ( result ) {

	mov	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], -2005401590	; 8878000aH
	jg	SHORT $LN22@DSErrorChe
	cmp	DWORD PTR tv64[ebp], -2005401590	; 8878000aH
	je	$LN16@DSErrorChe
	cmp	DWORD PTR tv64[ebp], -2147221232	; 80040110H
	jg	SHORT $LN23@DSErrorChe
	cmp	DWORD PTR tv64[ebp], -2147221232	; 80040110H
	je	$LN5@DSErrorChe
	cmp	DWORD PTR tv64[ebp], -2147467263	; 80004001H
	je	$LN8@DSErrorChe
	cmp	DWORD PTR tv64[ebp], -2147467259	; 80004005H
	je	$LN12@DSErrorChe
	jmp	$LN1@DSErrorChe
$LN23@DSErrorChe:
	cmp	DWORD PTR tv64[ebp], -2147024882	; 8007000eH
	je	$LN10@DSErrorChe
	cmp	DWORD PTR tv64[ebp], -2147024809	; 80070057H
	je	$LN14@DSErrorChe
	jmp	$LN1@DSErrorChe
$LN22@DSErrorChe:
	cmp	DWORD PTR tv64[ebp], -2005401470	; 88780082H
	jg	SHORT $LN24@DSErrorChe
	cmp	DWORD PTR tv64[ebp], -2005401470	; 88780082H
	je	$LN6@DSErrorChe
	mov	ecx, DWORD PTR tv64[ebp]
	add	ecx, 2005401570				; 7787ffe2H
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 90			; 0000005aH
	ja	$LN1@DSErrorChe
	mov	edx, DWORD PTR tv64[ebp]
	movzx	eax, BYTE PTR $LN26@DSErrorChe[edx]
	jmp	DWORD PTR $LN27@DSErrorChe[eax*4]
$LN24@DSErrorChe:
	cmp	DWORD PTR tv64[ebp], -2005401430	; 887800aaH
	jg	SHORT $LN25@DSErrorChe
	cmp	DWORD PTR tv64[ebp], -2005401430	; 887800aaH
	je	$LN2@DSErrorChe
	cmp	DWORD PTR tv64[ebp], -2005401450	; 88780096H
	je	$LN4@DSErrorChe
	cmp	DWORD PTR tv64[ebp], -2005401440	; 887800a0H
	je	$LN3@DSErrorChe
	jmp	$LN1@DSErrorChe
$LN25@DSErrorChe:
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN17@DSErrorChe
	jmp	$LN1@DSErrorChe
$LN17@DSErrorChe:

; 422  : 
; 423  :       case DS_OK:                       
; 424  :         return TRUE;

	mov	eax, 1
	jmp	$LN20@DSErrorChe
$LN16@DSErrorChe:

; 425  :       case DSERR_ALLOCATED:
; 426  :         MessageBox( NULL, "DSERR_ALLOCATED", "DSound Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0N@FJJIPMHL@DSound?5Error?$AA@
	push	OFFSET ??_C@_0BA@COPOGMBA@DSERR_ALLOCATED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 427  :         return FALSE;

	xor	eax, eax
	jmp	$LN20@DSErrorChe
$LN15@DSErrorChe:

; 428  :       case DSERR_CONTROLUNAVAIL:
; 429  :         MessageBox( NULL, "DSERR_CONTROLUNAVAIL", "DSound Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0N@FJJIPMHL@DSound?5Error?$AA@
	push	OFFSET ??_C@_0BF@KBGGCPDE@DSERR_CONTROLUNAVAIL?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 430  :         return FALSE;

	xor	eax, eax
	jmp	$LN20@DSErrorChe
$LN14@DSErrorChe:

; 431  :       case DSERR_INVALIDPARAM:
; 432  :         MessageBox( NULL, "DSERR_INVALIDPARAM", "DSound Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0N@FJJIPMHL@DSound?5Error?$AA@
	push	OFFSET ??_C@_0BD@MODBPMIE@DSERR_INVALIDPARAM?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 433  :         return FALSE;

	xor	eax, eax
	jmp	$LN20@DSErrorChe
$LN13@DSErrorChe:

; 434  :       case DSERR_INVALIDCALL:
; 435  :         MessageBox( NULL, "DSERR_INVALIDCALL", "DSound Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0N@FJJIPMHL@DSound?5Error?$AA@
	push	OFFSET ??_C@_0BC@NMCDDLDP@DSERR_INVALIDCALL?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 436  :         return FALSE;

	xor	eax, eax
	jmp	$LN20@DSErrorChe
$LN12@DSErrorChe:

; 437  :       case DSERR_GENERIC:
; 438  :         MessageBox( NULL, "DSERR_GENERIC", "DSound Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0N@FJJIPMHL@DSound?5Error?$AA@
	push	OFFSET ??_C@_0O@PDIJJBF@DSERR_GENERIC?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 439  :         return FALSE;

	xor	eax, eax
	jmp	$LN20@DSErrorChe
$LN11@DSErrorChe:

; 440  :       case DSERR_PRIOLEVELNEEDED:
; 441  :         MessageBox( NULL, "DSERR_PRIOLEVELNEEDED", "DSound Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0N@FJJIPMHL@DSound?5Error?$AA@
	push	OFFSET ??_C@_0BG@FGFOLLAI@DSERR_PRIOLEVELNEEDED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 442  :         return FALSE;

	xor	eax, eax
	jmp	$LN20@DSErrorChe
$LN10@DSErrorChe:

; 443  :       case DSERR_OUTOFMEMORY:
; 444  :         MessageBox( NULL, "DSERR_OUTOFMEMORY", "DSound Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0N@FJJIPMHL@DSound?5Error?$AA@
	push	OFFSET ??_C@_0BC@KCMPJMLN@DSERR_OUTOFMEMORY?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 445  :         return FALSE;

	xor	eax, eax
	jmp	$LN20@DSErrorChe
$LN9@DSErrorChe:

; 446  :       case DSERR_BADFORMAT:
; 447  :         MessageBox( NULL, "DSERR_BADFORMAT", "DSound Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0N@FJJIPMHL@DSound?5Error?$AA@
	push	OFFSET ??_C@_0BA@ECKDOBJD@DSERR_BADFORMAT?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 448  :         return FALSE;

	xor	eax, eax
	jmp	$LN20@DSErrorChe
$LN8@DSErrorChe:

; 449  :       case DSERR_UNSUPPORTED:
; 450  :         MessageBox( NULL, "DSERR_UNSUPPORTED", "DSound Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0N@FJJIPMHL@DSound?5Error?$AA@
	push	OFFSET ??_C@_0BC@IMOOOGNJ@DSERR_UNSUPPORTED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 451  :         return FALSE;

	xor	eax, eax
	jmp	$LN20@DSErrorChe
$LN7@DSErrorChe:

; 452  :       case DSERR_NODRIVER:
; 453  :         MessageBox( NULL, "DSERR_NODRIVER", "DSound Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0N@FJJIPMHL@DSound?5Error?$AA@
	push	OFFSET ??_C@_0P@HJFILJLC@DSERR_NODRIVER?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 454  :         return FALSE;

	xor	eax, eax
	jmp	$LN20@DSErrorChe
$LN6@DSErrorChe:

; 455  :       case DSERR_ALREADYINITIALIZED:
; 456  :         MessageBox( NULL, "DSERR_ALREADYINITIALIZED", "DSound Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0N@FJJIPMHL@DSound?5Error?$AA@
	push	OFFSET ??_C@_0BJ@PODLOCNP@DSERR_ALREADYINITIALIZED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 457  :         return FALSE;

	xor	eax, eax
	jmp	SHORT $LN20@DSErrorChe
$LN5@DSErrorChe:

; 458  :       case DSERR_NOAGGREGATION:
; 459  :         MessageBox( NULL, "DSERR_NOAGGREGATION", "DSound Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0N@FJJIPMHL@DSound?5Error?$AA@
	push	OFFSET ??_C@_0BE@FNFJCFJP@DSERR_NOAGGREGATION?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 460  :         return FALSE;

	xor	eax, eax
	jmp	SHORT $LN20@DSErrorChe
$LN4@DSErrorChe:

; 461  :       case DSERR_BUFFERLOST:
; 462  :         MessageBox( NULL, "DSERR_BUFFERLOST", "DSound Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0N@FJJIPMHL@DSound?5Error?$AA@
	push	OFFSET ??_C@_0BB@MLKAOHBD@DSERR_BUFFERLOST?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 463  :         return FALSE;

	xor	eax, eax
	jmp	SHORT $LN20@DSErrorChe
$LN3@DSErrorChe:

; 464  :       case DSERR_OTHERAPPHASPRIO:
; 465  :         MessageBox( NULL, "DSERR_OTHERAPPHASPRIO", "DSound Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0N@FJJIPMHL@DSound?5Error?$AA@
	push	OFFSET ??_C@_0BG@JFJBCEJM@DSERR_OTHERAPPHASPRIO?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 466  :         return FALSE;

	xor	eax, eax
	jmp	SHORT $LN20@DSErrorChe
$LN2@DSErrorChe:

; 467  :       case DSERR_UNINITIALIZED:
; 468  :         MessageBox( NULL, "DSERR_UNINITIALIZED", "DSound Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0N@FJJIPMHL@DSound?5Error?$AA@
	push	OFFSET ??_C@_0BE@BMJCAPGM@DSERR_UNINITIALIZED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 469  :         return FALSE;

	xor	eax, eax
	jmp	SHORT $LN20@DSErrorChe
$LN1@DSErrorChe:

; 470  :       default:
; 471  : 		MessageBox( NULL, "UNKNOWN ERROR CODE", "DSound Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0N@FJJIPMHL@DSound?5Error?$AA@
	push	OFFSET ??_C@_0BD@KAPALDGP@UNKNOWN?5ERROR?5CODE?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 472  : 		return FALSE;

	xor	eax, eax
$LN20@DSErrorChe:

; 473  :     }
; 474  : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN27@DSErrorChe:
	DD	$LN15@DSErrorChe
	DD	$LN13@DSErrorChe
	DD	$LN11@DSErrorChe
	DD	$LN9@DSErrorChe
	DD	$LN7@DSErrorChe
	DD	$LN1@DSErrorChe
$LN26@DSErrorChe:
	DB	0
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	1
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	2
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	3
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	4
?DSErrorCheck@@YAHJ@Z ENDP				; DSErrorCheck
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\dxerror.cpp
_TEXT	SEGMENT
tv64 = -4						; size = 4
_result$ = 8						; size = 4
?D3DErrorCheck@@YAHJ@Z PROC				; D3DErrorCheck

; 303  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 304  : 	switch ( result ) {

	mov	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	jg	SHORT $LN41@D3DErrorCh
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN36@D3DErrorCh
	mov	ecx, DWORD PTR tv64[ebp]
	add	ecx, 2005531972				; 7789fd44H
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 63			; 0000003fH
	ja	$LN1@D3DErrorCh
	mov	edx, DWORD PTR tv64[ebp]
	movzx	eax, BYTE PTR $LN42@D3DErrorCh[edx]
	jmp	DWORD PTR $LN43@D3DErrorCh[eax*4]
$LN41@D3DErrorCh:
	jmp	$LN1@D3DErrorCh
$LN36@D3DErrorCh:

; 305  : 
; 306  :       case D3D_OK:                       
; 307  :         return TRUE;

	mov	eax, 1
	jmp	$LN39@D3DErrorCh
$LN35@D3DErrorCh:

; 308  : 	  case D3DERR_BADMAJORVERSION:
; 309  :         MessageBox( NULL, "D3DERR_BADMAJORVERSION", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0BH@MDNDAAEO@D3DERR_BADMAJORVERSION?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 310  :         return FALSE;

	xor	eax, eax
	jmp	$LN39@D3DErrorCh
$LN34@D3DErrorCh:

; 311  :       case D3DERR_BADMINORVERSION:
; 312  :         MessageBox( NULL, "D3DERR_BADMINORVERSION", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0BH@HFAGAFDC@D3DERR_BADMINORVERSION?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 313  :         return FALSE;

	xor	eax, eax
	jmp	$LN39@D3DErrorCh
$LN33@D3DErrorCh:

; 314  :       case D3DERR_EXECUTE_CREATE_FAILED:
; 315  :         MessageBox( NULL, "D3DERR_EXECUTE_CREATE_FAILED", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0BN@FLDMEHKH@D3DERR_EXECUTE_CREATE_FAILED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 316  :         return FALSE;

	xor	eax, eax
	jmp	$LN39@D3DErrorCh
$LN32@D3DErrorCh:

; 317  :       case D3DERR_EXECUTE_DESTROY_FAILED:
; 318  :         MessageBox( NULL, "D3DERR_EXECUTE_DESTROY_FAILED", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0BO@LGHMOFHO@D3DERR_EXECUTE_DESTROY_FAILED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 319  :         return FALSE;

	xor	eax, eax
	jmp	$LN39@D3DErrorCh
$LN31@D3DErrorCh:

; 320  :       case D3DERR_EXECUTE_LOCK_FAILED:
; 321  :         MessageBox( NULL, "D3DERR_EXECUTE_LOCK_FAILED", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0BL@DMBHKLLG@D3DERR_EXECUTE_LOCK_FAILED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 322  :         return FALSE;

	xor	eax, eax
	jmp	$LN39@D3DErrorCh
$LN30@D3DErrorCh:

; 323  :       case D3DERR_EXECUTE_UNLOCK_FAILED:
; 324  :         MessageBox( NULL, "D3DERR_EXECUTE_UNLOCK_FAILED", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0BN@CJJOHPMI@D3DERR_EXECUTE_UNLOCK_FAILED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 325  :         return FALSE;

	xor	eax, eax
	jmp	$LN39@D3DErrorCh
$LN29@D3DErrorCh:

; 326  :       case D3DERR_EXECUTE_LOCKED:
; 327  :         MessageBox( NULL, "D3DERR_EXECUTE_LOCKED", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0BG@EADNNNJB@D3DERR_EXECUTE_LOCKED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 328  :         return FALSE;

	xor	eax, eax
	jmp	$LN39@D3DErrorCh
$LN28@D3DErrorCh:

; 329  :       case D3DERR_EXECUTE_NOT_LOCKED:
; 330  :         MessageBox( NULL, "D3DERR_EXECUTE_NOT_LOCKED", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0BK@LKPIANLL@D3DERR_EXECUTE_NOT_LOCKED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 331  :         return FALSE;

	xor	eax, eax
	jmp	$LN39@D3DErrorCh
$LN27@D3DErrorCh:

; 332  :       case D3DERR_EXECUTE_FAILED:
; 333  :         MessageBox( NULL, "D3DERR_EXECUTE_FAILED", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0BG@JCAMDLH@D3DERR_EXECUTE_FAILED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 334  :         return FALSE;

	xor	eax, eax
	jmp	$LN39@D3DErrorCh
$LN26@D3DErrorCh:

; 335  :       case D3DERR_EXECUTE_CLIPPED_FAILED:
; 336  :         MessageBox( NULL, "D3DERR_EXECUTE_CLIPPED_FAILED", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0BO@BMLEGCIJ@D3DERR_EXECUTE_CLIPPED_FAILED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 337  :         return FALSE;

	xor	eax, eax
	jmp	$LN39@D3DErrorCh
$LN25@D3DErrorCh:

; 338  :       case D3DERR_TEXTURE_NO_SUPPORT:
; 339  :         MessageBox( NULL, "D3DERR_TEXTURE_NO_SUPPORT", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0BK@GLBGKNEI@D3DERR_TEXTURE_NO_SUPPORT?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 340  :         return FALSE;

	xor	eax, eax
	jmp	$LN39@D3DErrorCh
$LN24@D3DErrorCh:

; 341  :       case D3DERR_TEXTURE_CREATE_FAILED:
; 342  :         MessageBox( NULL, "D3DERR_TEXTURE_CREATE_FAILED", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0BN@KOAJFPFI@D3DERR_TEXTURE_CREATE_FAILED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 343  :         return FALSE;

	xor	eax, eax
	jmp	$LN39@D3DErrorCh
$LN23@D3DErrorCh:

; 344  :       case D3DERR_TEXTURE_DESTROY_FAILED:
; 345  :         MessageBox( NULL, "D3DERR_TEXTURE_DESTROY_FAILED", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0BO@JLILDPOL@D3DERR_TEXTURE_DESTROY_FAILED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 346  :         return FALSE;

	xor	eax, eax
	jmp	$LN39@D3DErrorCh
$LN22@D3DErrorCh:

; 347  :       case D3DERR_TEXTURE_LOCK_FAILED:
; 348  :         MessageBox( NULL, "D3DERR_TEXTURE_LOCK_FAILED", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0BL@FFOODCNH@D3DERR_TEXTURE_LOCK_FAILED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 349  :         return FALSE;

	xor	eax, eax
	jmp	$LN39@D3DErrorCh
$LN21@D3DErrorCh:

; 350  :       case D3DERR_TEXTURE_UNLOCK_FAILED:
; 351  :         MessageBox( NULL, "D3DERR_TEXTURE_UNLOCK_FAILED", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0BN@NMKLGHDH@D3DERR_TEXTURE_UNLOCK_FAILED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 352  :         return FALSE;

	xor	eax, eax
	jmp	$LN39@D3DErrorCh
$LN20@D3DErrorCh:

; 353  :       case D3DERR_TEXTURE_LOAD_FAILED:
; 354  :         MessageBox( NULL, "D3DERR_TEXTURE_LOAD_FAILED", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0BL@IOKCCNDL@D3DERR_TEXTURE_LOAD_FAILED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 355  :         return FALSE;

	xor	eax, eax
	jmp	$LN39@D3DErrorCh
$LN19@D3DErrorCh:

; 356  :       case D3DERR_TEXTURE_SWAP_FAILED:
; 357  :         MessageBox( NULL, "D3DERR_TEXTURE_SWAP_FAILED", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0BL@BFDHGJEF@D3DERR_TEXTURE_SWAP_FAILED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 358  :         return FALSE;

	xor	eax, eax
	jmp	$LN39@D3DErrorCh
$LN18@D3DErrorCh:

; 359  :       case D3DERR_TEXTURE_LOCKED:
; 360  :         MessageBox( NULL, "D3DERR_TEXTURE_LOCKED", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0BG@OKFJGHJB@D3DERR_TEXTURE_LOCKED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 361  :         return FALSE;

	xor	eax, eax
	jmp	$LN39@D3DErrorCh
$LN17@D3DErrorCh:

; 362  :       case D3DERR_TEXTURE_NOT_LOCKED:
; 363  :         MessageBox( NULL, "D3DERR_TEXTURE_NOT_LOCKED", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0BK@EFKDJCCI@D3DERR_TEXTURE_NOT_LOCKED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 364  :         return FALSE;

	xor	eax, eax
	jmp	$LN39@D3DErrorCh
$LN16@D3DErrorCh:

; 365  :       case D3DERR_TEXTURE_GETSURF_FAILED:
; 366  :         MessageBox( NULL, "D3DERR_TEXTURE_GETSURF_FAILED", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0BO@LAPCIDO@D3DERR_TEXTURE_GETSURF_FAILED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 367  :         return FALSE;

	xor	eax, eax
	jmp	$LN39@D3DErrorCh
$LN15@D3DErrorCh:

; 368  :       case D3DERR_MATRIX_CREATE_FAILED:
; 369  :         MessageBox( NULL, "D3DERR_MATRIX_CREATE_FAILED", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0BM@CJGICNIN@D3DERR_MATRIX_CREATE_FAILED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 370  :         return FALSE;

	xor	eax, eax
	jmp	$LN39@D3DErrorCh
$LN14@D3DErrorCh:

; 371  :       case D3DERR_MATRIX_DESTROY_FAILED:
; 372  :         MessageBox( NULL, "D3DERR_MATRIX_DESTROY_FAILED", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0BN@GNLFHIMC@D3DERR_MATRIX_DESTROY_FAILED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 373  :         return FALSE;

	xor	eax, eax
	jmp	$LN39@D3DErrorCh
$LN13@D3DErrorCh:

; 374  :       case D3DERR_MATRIX_SETDATA_FAILED:
; 375  :         MessageBox( NULL, "D3DERR_MATRIX_SETDATA_FAILED", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0BN@DMPPDLIP@D3DERR_MATRIX_SETDATA_FAILED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 376  :         return FALSE;

	xor	eax, eax
	jmp	$LN39@D3DErrorCh
$LN12@D3DErrorCh:

; 377  :       case D3DERR_MATRIX_GETDATA_FAILED:
; 378  :         MessageBox( NULL, "D3DERR_MATRIX_GETDATA_FAILED", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0BN@PCOBMBKD@D3DERR_MATRIX_GETDATA_FAILED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 379  :         return FALSE;

	xor	eax, eax
	jmp	$LN39@D3DErrorCh
$LN11@D3DErrorCh:

; 380  :       case D3DERR_SETVIEWPORTDATA_FAILED:
; 381  :         MessageBox( NULL, "D3DERR_SETVIEWPORTDATA_FAILED", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0BO@DCNECMNP@D3DERR_SETVIEWPORTDATA_FAILED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 382  :         return FALSE;

	xor	eax, eax
	jmp	$LN39@D3DErrorCh
$LN10@D3DErrorCh:

; 383  :       case D3DERR_MATERIAL_CREATE_FAILED:
; 384  :         MessageBox( NULL, "D3DERR_MATERIAL_CREATE_FAILED", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0BO@EAEEHEME@D3DERR_MATERIAL_CREATE_FAILED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 385  :         return FALSE;

	xor	eax, eax
	jmp	$LN39@D3DErrorCh
$LN9@D3DErrorCh:

; 386  :       case D3DERR_MATERIAL_DESTROY_FAILED:
; 387  :         MessageBox( NULL, "D3DERR_MATERIAL_DESTROY_FAILED", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0BP@GCNMKNKP@D3DERR_MATERIAL_DESTROY_FAILED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 388  :         return FALSE;

	xor	eax, eax
	jmp	$LN39@D3DErrorCh
$LN8@D3DErrorCh:

; 389  :       case D3DERR_MATERIAL_SETDATA_FAILED:
; 390  :         MessageBox( NULL, "D3DERR_MATERIAL_SETDATA_FAILED", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0BP@DDJGOOOC@D3DERR_MATERIAL_SETDATA_FAILED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 391  :         return FALSE;

	xor	eax, eax
	jmp	$LN39@D3DErrorCh
$LN7@D3DErrorCh:

; 392  :       case D3DERR_MATERIAL_GETDATA_FAILED:
; 393  :         MessageBox( NULL, "D3DERR_MATERIAL_GETDATA_FAILED", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0BP@PNIIBEMO@D3DERR_MATERIAL_GETDATA_FAILED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 394  :         return FALSE;

	xor	eax, eax
	jmp	$LN39@D3DErrorCh
$LN6@D3DErrorCh:

; 395  :       case D3DERR_LIGHT_SET_FAILED:
; 396  :         MessageBox( NULL, "D3DERR_LIGHT_SET_FAILED", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0BI@POLEELME@D3DERR_LIGHT_SET_FAILED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 397  :         return FALSE;

	xor	eax, eax
	jmp	$LN39@D3DErrorCh
$LN5@D3DErrorCh:

; 398  :       case D3DERR_SCENE_IN_SCENE:
; 399  :         MessageBox( NULL, "D3DERR_SCENE_IN_SCENE", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0BG@EGAAIAPO@D3DERR_SCENE_IN_SCENE?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 400  :         return FALSE;

	xor	eax, eax
	jmp	SHORT $LN39@D3DErrorCh
$LN4@D3DErrorCh:

; 401  :       case D3DERR_SCENE_NOT_IN_SCENE:
; 402  :         MessageBox( NULL, "D3DERR_SCENE_NOT_IN_SCENE", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0BK@FPAJMCGE@D3DERR_SCENE_NOT_IN_SCENE?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 403  :         return FALSE;

	xor	eax, eax
	jmp	SHORT $LN39@D3DErrorCh
$LN3@D3DErrorCh:

; 404  :       case D3DERR_SCENE_BEGIN_FAILED:
; 405  :         MessageBox( NULL, "D3DERR_SCENE_BEGIN_FAILED", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0BK@HIPOGPOB@D3DERR_SCENE_BEGIN_FAILED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 406  :         return FALSE;

	xor	eax, eax
	jmp	SHORT $LN39@D3DErrorCh
$LN2@D3DErrorCh:

; 407  :       case D3DERR_SCENE_END_FAILED:
; 408  :         MessageBox( NULL, "D3DERR_SCENE_END_FAILED", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0BI@PAGCGJDG@D3DERR_SCENE_END_FAILED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 409  :         return FALSE;

	xor	eax, eax
	jmp	SHORT $LN39@D3DErrorCh
$LN1@D3DErrorCh:

; 410  :       default:
; 411  : 		MessageBox( NULL, "UNKNOWN ERROR CODE: Trying DD codes", "D3D Error", MB_OK );

	push	0
	push	OFFSET ??_C@_09LNMBOOMB@D3D?5Error?$AA@
	push	OFFSET ??_C@_0CE@HKCFODBM@UNKNOWN?5ERROR?5CODE?3?5Trying?5DD?5co@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 412  :         DDErrorCheck( result );

	mov	ecx, DWORD PTR _result$[ebp]
	push	ecx
	call	?DDErrorCheck@@YAHJ@Z			; DDErrorCheck
	add	esp, 4

; 413  : 		return FALSE;

	xor	eax, eax
$LN39@D3DErrorCh:

; 414  :     }
; 415  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN43@D3DErrorCh:
	DD	$LN35@D3DErrorCh
	DD	$LN34@D3DErrorCh
	DD	$LN33@D3DErrorCh
	DD	$LN32@D3DErrorCh
	DD	$LN31@D3DErrorCh
	DD	$LN30@D3DErrorCh
	DD	$LN29@D3DErrorCh
	DD	$LN28@D3DErrorCh
	DD	$LN27@D3DErrorCh
	DD	$LN26@D3DErrorCh
	DD	$LN25@D3DErrorCh
	DD	$LN24@D3DErrorCh
	DD	$LN23@D3DErrorCh
	DD	$LN22@D3DErrorCh
	DD	$LN21@D3DErrorCh
	DD	$LN20@D3DErrorCh
	DD	$LN19@D3DErrorCh
	DD	$LN18@D3DErrorCh
	DD	$LN17@D3DErrorCh
	DD	$LN16@D3DErrorCh
	DD	$LN15@D3DErrorCh
	DD	$LN14@D3DErrorCh
	DD	$LN13@D3DErrorCh
	DD	$LN12@D3DErrorCh
	DD	$LN11@D3DErrorCh
	DD	$LN10@D3DErrorCh
	DD	$LN9@D3DErrorCh
	DD	$LN8@D3DErrorCh
	DD	$LN7@D3DErrorCh
	DD	$LN6@D3DErrorCh
	DD	$LN5@D3DErrorCh
	DD	$LN4@D3DErrorCh
	DD	$LN3@D3DErrorCh
	DD	$LN2@D3DErrorCh
	DD	$LN1@D3DErrorCh
$LN42@D3DErrorCh:
	DB	0
	DB	1
	DB	34					; 00000022H
	DB	34					; 00000022H
	DB	34					; 00000022H
	DB	34					; 00000022H
	DB	34					; 00000022H
	DB	34					; 00000022H
	DB	34					; 00000022H
	DB	34					; 00000022H
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	34					; 00000022H
	DB	34					; 00000022H
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	13					; 0000000dH
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	16					; 00000010H
	DB	17					; 00000011H
	DB	18					; 00000012H
	DB	19					; 00000013H
	DB	20					; 00000014H
	DB	21					; 00000015H
	DB	22					; 00000016H
	DB	23					; 00000017H
	DB	24					; 00000018H
	DB	34					; 00000022H
	DB	34					; 00000022H
	DB	34					; 00000022H
	DB	34					; 00000022H
	DB	34					; 00000022H
	DB	25					; 00000019H
	DB	26					; 0000001aH
	DB	27					; 0000001bH
	DB	28					; 0000001cH
	DB	34					; 00000022H
	DB	34					; 00000022H
	DB	34					; 00000022H
	DB	34					; 00000022H
	DB	34					; 00000022H
	DB	34					; 00000022H
	DB	29					; 0000001dH
	DB	34					; 00000022H
	DB	34					; 00000022H
	DB	34					; 00000022H
	DB	34					; 00000022H
	DB	34					; 00000022H
	DB	34					; 00000022H
	DB	34					; 00000022H
	DB	34					; 00000022H
	DB	34					; 00000022H
	DB	30					; 0000001eH
	DB	31					; 0000001fH
	DB	32					; 00000020H
	DB	33					; 00000021H
?D3DErrorCheck@@YAHJ@Z ENDP				; D3DErrorCheck
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\ddstuff\dxerror.cpp
_TEXT	SEGMENT
tv64 = -4						; size = 4
_result$ = 8						; size = 4
?DDErrorCheck@@YAHJ@Z PROC				; DDErrorCheck

; 22   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	switch ( result ) {

	mov	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], -2005532412	; 88760104H
	jg	$LN96@DDErrorChe
	cmp	DWORD PTR tv64[ebp], -2005532412	; 88760104H
	je	$LN44@DDErrorChe
	cmp	DWORD PTR tv64[ebp], -2005532667	; 88760005H
	jg	SHORT $LN97@DDErrorChe
	cmp	DWORD PTR tv64[ebp], -2005532667	; 88760005H
	je	$LN90@DDErrorChe
	cmp	DWORD PTR tv64[ebp], -2147024882	; 8007000eH
	jg	SHORT $LN98@DDErrorChe
	cmp	DWORD PTR tv64[ebp], -2147024882	; 8007000eH
	je	$LN25@DDErrorChe
	cmp	DWORD PTR tv64[ebp], -2147467263	; 80004001H
	je	$LN8@DDErrorChe
	cmp	DWORD PTR tv64[ebp], -2147467259	; 80004005H
	je	$LN79@DDErrorChe
	jmp	$LN1@DDErrorChe
$LN98@DDErrorChe:
	cmp	DWORD PTR tv64[ebp], -2147024809	; 80070057H
	je	$LN68@DDErrorChe
	jmp	$LN1@DDErrorChe
$LN97@DDErrorChe:
	mov	ecx, DWORD PTR tv64[ebp]
	add	ecx, 2005532652				; 7789ffecH
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 235		; 000000ebH
	ja	$LN1@DDErrorChe
	mov	edx, DWORD PTR tv64[ebp]
	movzx	eax, BYTE PTR $LN101@DDErrorChe[edx]
	jmp	DWORD PTR $LN104@DDErrorChe[eax*4]
$LN96@DDErrorChe:
	cmp	DWORD PTR tv64[ebp], -2005532135	; 88760219H
	jg	SHORT $LN99@DDErrorChe
	cmp	DWORD PTR tv64[ebp], -2005532135	; 88760219H
	je	$LN5@DDErrorChe
	mov	ecx, DWORD PTR tv64[ebp]
	add	ecx, 2005532392				; 7789fee8H
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 240		; 000000f0H
	ja	$LN1@DDErrorChe
	mov	edx, DWORD PTR tv64[ebp]
	movzx	eax, BYTE PTR $LN102@DDErrorChe[edx]
	jmp	DWORD PTR $LN105@DDErrorChe[eax*4]
$LN99@DDErrorChe:
	cmp	DWORD PTR tv64[ebp], 0
	jg	SHORT $LN100@DDErrorChe
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN91@DDErrorChe
	mov	ecx, DWORD PTR tv64[ebp]
	add	ecx, 2005532132				; 7789fde4H
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 49			; 00000031H
	ja	$LN1@DDErrorChe
	mov	edx, DWORD PTR tv64[ebp]
	movzx	eax, BYTE PTR $LN103@DDErrorChe[edx]
	jmp	DWORD PTR $LN106@DDErrorChe[eax*4]
$LN100@DDErrorChe:
	jmp	$LN1@DDErrorChe
$LN91@DDErrorChe:

; 24   : 
; 25   :       case DD_OK:                       
; 26   :         return TRUE;

	mov	eax, 1
	jmp	$LN94@DDErrorChe
$LN90@DDErrorChe:

; 27   :       case DDERR_ALREADYINITIALIZED:
; 28   :         MessageBox( NULL, "DDERR_ALREADYINITIALIZED", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BJ@LAEIKKJF@DDERR_ALREADYINITIALIZED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 29   :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN89@DDErrorChe:

; 30   :       case DDERR_BLTFASTCANTCLIP:
; 31   :         MessageBox( NULL, "DDERR_BLTFASTCANTCLIP", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BG@HLNKGEOE@DDERR_BLTFASTCANTCLIP?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 32   :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN88@DDErrorChe:

; 33   :       case DDERR_CANNOTDETACHSURFACE:
; 34   :         MessageBox( NULL, "DDERR_CANNOTDETACHSURFACE", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BK@FMONFDPK@DDERR_CANNOTDETACHSURFACE?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 35   :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN87@DDErrorChe:

; 36   :       case DDERR_CANTCREATEDC:
; 37   :         MessageBox( NULL, "DDERR_CANTCREATEDC", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BD@PBNGJMBK@DDERR_CANTCREATEDC?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 38   :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN86@DDErrorChe:

; 39   :       case DDERR_CANTDUPLICATE:
; 40   :         MessageBox( NULL, "DDERR_CANTDUPLICATE", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BE@LNBDBNLL@DDERR_CANTDUPLICATE?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 41   :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN85@DDErrorChe:

; 42   :       case DDERR_CLIPPERISUSINGHWND:
; 43   :         MessageBox( NULL, "DDERR_CLIPPERISUSINGHWND", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BJ@BOEHMDDM@DDERR_CLIPPERISUSINGHWND?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 44   :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN84@DDErrorChe:

; 45   :       case DDERR_COLORKEYNOTSET:
; 46   :         MessageBox( NULL, "DDERR_COLORKEYNOTSET", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BF@HOAOBBGM@DDERR_COLORKEYNOTSET?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 47   :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN83@DDErrorChe:

; 48   :       case DDERR_CURRENTLYNOTAVAIL:
; 49   :         MessageBox( NULL, "DDERR_CURRENTLYNOTAVAIL", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BI@CPFFLGJD@DDERR_CURRENTLYNOTAVAIL?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 50   :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN82@DDErrorChe:

; 51   :       case DDERR_DIRECTDRAWALREADYCREATED:
; 52   :         MessageBox( NULL, "DDERR_DIRECTDRAWALREADYCREATED", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BP@CFDPGCFK@DDERR_DIRECTDRAWALREADYCREATED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 53   :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN81@DDErrorChe:

; 54   :       case DDERR_EXCEPTION:
; 55   :         MessageBox( NULL, "DDERR_EXCEPTION", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BA@MEDIIHJ@DDERR_EXCEPTION?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 56   :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN80@DDErrorChe:

; 57   :       case DDERR_EXCLUSIVEMODEALREADYSET:
; 58   :         MessageBox( NULL, "DDERR_EXCLUSIVEMODEALREADYSET", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BO@GMCKLDPA@DDERR_EXCLUSIVEMODEALREADYSET?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 59   :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN79@DDErrorChe:

; 60   :       case DDERR_GENERIC:
; 61   :         MessageBox( NULL, "DDERR_GENERIC", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0O@MGEMDJJH@DDERR_GENERIC?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 62   :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN78@DDErrorChe:

; 63   :       case DDERR_HEIGHTALIGN:
; 64   :         MessageBox( NULL, "DDERR_HEIGHTALIGN", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BC@FNNCOGNH@DDERR_HEIGHTALIGN?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 65   :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN77@DDErrorChe:

; 66   :       case DDERR_HWNDALREADYSET:
; 67   :         MessageBox( NULL, "DDERR_HWNDALREADYSET", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BF@LGLNHCHJ@DDERR_HWNDALREADYSET?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 68   :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN76@DDErrorChe:

; 69   :       case DDERR_HWNDSUBCLASSED:
; 70   :         MessageBox( NULL, "DDERR_HWNDSUBCLASSED", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BF@MAFLBECE@DDERR_HWNDSUBCLASSED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 71   :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN75@DDErrorChe:

; 72   :       case DDERR_IMPLICITLYCREATED:
; 73   :         MessageBox( NULL, "DDERR_IMPLICITLYCREATED", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BI@NLHHKHEN@DDERR_IMPLICITLYCREATED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 74   :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN74@DDErrorChe:

; 75   :       case DDERR_INCOMPATIBLEPRIMARY:
; 76   :         MessageBox( NULL, "DDERR_INCOMPATIBLEPRIMARY", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BK@HJOPGIGH@DDERR_INCOMPATIBLEPRIMARY?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 77   :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN73@DDErrorChe:

; 78   :       case DDERR_INVALIDCAPS:
; 79   :         MessageBox( NULL, "DDERR_INVALIDCAPS", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BC@DDIGIKID@DDERR_INVALIDCAPS?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 80   :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN72@DDErrorChe:

; 81   :       case DDERR_INVALIDCLIPLIST:
; 82   :         MessageBox( NULL, "DDERR_INVALIDCLIPLIST", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BG@OFKCMNHM@DDERR_INVALIDCLIPLIST?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 83   :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN71@DDErrorChe:

; 84   :       case DDERR_INVALIDDIRECTDRAWGUID:
; 85   :         MessageBox( NULL, "DDERR_INVALIDDIRECTDRAWGUID", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BM@LMDGBJFD@DDERR_INVALIDDIRECTDRAWGUID?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 86   :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN70@DDErrorChe:

; 87   :       case DDERR_INVALIDMODE:
; 88   :         MessageBox( NULL, "DDERR_INVALIDMODE", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BC@GLNOPNKK@DDERR_INVALIDMODE?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 89   :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN69@DDErrorChe:

; 90   :       case DDERR_INVALIDOBJECT:
; 91   :         MessageBox( NULL, "DDERR_INVALIDOBJECT", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BE@KPNOKGED@DDERR_INVALIDOBJECT?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 92   :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN68@DDErrorChe:

; 93   :       case DDERR_INVALIDPARAMS:
; 94   :         MessageBox( NULL, "DDERR_INVALIDPARAMS", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BE@CCPBMIBD@DDERR_INVALIDPARAMS?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 95   :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN67@DDErrorChe:

; 96   :       case DDERR_INVALIDPIXELFORMAT:
; 97   :         MessageBox( NULL, "DDERR_INVALIDPIXELFORMAT", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BJ@PEGADMFO@DDERR_INVALIDPIXELFORMAT?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 98   :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN66@DDErrorChe:

; 99   :       case DDERR_INVALIDPOSITION:
; 100  :         MessageBox( NULL, "DDERR_INVALIDPOSITION", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BG@OMJGFIHE@DDERR_INVALIDPOSITION?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 101  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN65@DDErrorChe:

; 102  :       case DDERR_INVALIDRECT:
; 103  :         MessageBox( NULL, "DDERR_INVALIDRECT", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BC@LAEFCIAI@DDERR_INVALIDRECT?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 104  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN64@DDErrorChe:

; 105  :       case DDERR_LOCKEDSURFACES:
; 106  :         MessageBox( NULL, "DDERR_LOCKEDSURFACES", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BF@MAGKOGBC@DDERR_LOCKEDSURFACES?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 107  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN63@DDErrorChe:

; 108  :       case DDERR_NO3D:
; 109  :         MessageBox( NULL, "DDERR_NO3D", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0L@DJKAAMGA@DDERR_NO3D?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 110  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN62@DDErrorChe:

; 111  :       case DDERR_NOALPHAHW:
; 112  :         MessageBox( NULL, "DDERR_NOALPHAHW", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BA@BFFEPDGJ@DDERR_NOALPHAHW?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 113  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN61@DDErrorChe:

; 114  :       case DDERR_NOBLTHW:
; 115  :         MessageBox( NULL, "DDERR_NOBLTHW", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0O@NKGDNEG@DDERR_NOBLTHW?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 116  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN60@DDErrorChe:

; 117  :       case DDERR_NOCLIPLIST:
; 118  :         MessageBox( NULL, "DDERR_NOCLIPLIST", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BB@JOLMGPDK@DDERR_NOCLIPLIST?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 119  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN59@DDErrorChe:

; 120  :       case DDERR_NOCLIPPERATTACHED:
; 121  :         MessageBox( NULL, "DDERR_NOCLIPPERATTACHED", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BI@BGMBBEJL@DDERR_NOCLIPPERATTACHED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 122  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN58@DDErrorChe:

; 123  :       case DDERR_NOCOLORCONVHW:
; 124  :         MessageBox( NULL, "DDERR_NOCOLORCONVHW", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BE@PDOMLOPD@DDERR_NOCOLORCONVHW?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 125  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN57@DDErrorChe:

; 126  :       case DDERR_NOCOLORKEY:
; 127  :         MessageBox( NULL, "DDERR_NOCOLORKEY", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BB@GIFHLHNH@DDERR_NOCOLORKEY?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 128  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN56@DDErrorChe:

; 129  :       case DDERR_NOCOLORKEYHW:
; 130  :         MessageBox( NULL, "DDERR_NOCOLORKEYHW", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BD@BAAPAKEL@DDERR_NOCOLORKEYHW?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 131  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN55@DDErrorChe:

; 132  :       case DDERR_NOCOOPERATIVELEVELSET:
; 133  :         MessageBox( NULL, "DDERR_NOCOOPERATIVELEVELSET", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BM@PMEMMDPI@DDERR_NOCOOPERATIVELEVELSET?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 134  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN54@DDErrorChe:

; 135  :       case DDERR_NODC:
; 136  :         MessageBox( NULL, "DDERR_NODC", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0L@CHFPOEHC@DDERR_NODC?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 137  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN53@DDErrorChe:

; 138  :       case DDERR_NODDROPSHW:
; 139  :         MessageBox( NULL, "DDERR_NODDROPSHW", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BB@BPILLDBG@DDERR_NODDROPSHW?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 140  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN52@DDErrorChe:

; 141  :       case DDERR_NODIRECTDRAWHW:
; 142  :         MessageBox( NULL, "DDERR_NODIRECTDRAWHW", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BF@NOEHEIDL@DDERR_NODIRECTDRAWHW?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 143  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN51@DDErrorChe:

; 144  :       case DDERR_NOEMULATION:
; 145  :         MessageBox( NULL, "DDERR_NOEMULATION", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BC@DCFOAKAL@DDERR_NOEMULATION?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 146  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN50@DDErrorChe:

; 147  :       case DDERR_NOEXCLUSIVEMODE:
; 148  :         MessageBox( NULL, "DDERR_NOEXCLUSIVEMODE", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BG@DHFIFBBC@DDERR_NOEXCLUSIVEMODE?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 149  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN49@DDErrorChe:

; 150  :       case DDERR_NOFLIPHW:
; 151  :         MessageBox( NULL, "DDERR_NOFLIPHW", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0P@IEKAGFBG@DDERR_NOFLIPHW?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 152  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN48@DDErrorChe:

; 153  :       case DDERR_NOGDI:
; 154  :         MessageBox( NULL, "DDERR_NOGDI", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0M@IIGNACND@DDERR_NOGDI?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 155  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN47@DDErrorChe:

; 156  :       case DDERR_NOHWND:
; 157  :         MessageBox( NULL, "DDERR_NOHWND", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0N@EOPEBNEI@DDERR_NOHWND?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 158  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN46@DDErrorChe:

; 159  :       case DDERR_NOMIRRORHW:
; 160  :         MessageBox( NULL, "DDERR_NOMIRRORHW", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BB@MNGJGGOP@DDERR_NOMIRRORHW?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 161  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN45@DDErrorChe:

; 162  :       case DDERR_NOOVERLAYDEST:
; 163  :         MessageBox( NULL, "DDERR_NOOVERLAYDEST", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BE@JKKEKLOE@DDERR_NOOVERLAYDEST?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 164  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN44@DDErrorChe:

; 165  :       case DDERR_NOOVERLAYHW:
; 166  :         MessageBox( NULL, "DDERR_NOOVERLAYHW", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BC@JKHLHDPI@DDERR_NOOVERLAYHW?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 167  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN43@DDErrorChe:

; 168  :       case DDERR_NOPALETTEATTACHED:
; 169  :         MessageBox( NULL, "DDERR_NOPALETTEATTACHED", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BI@KBKHCNLK@DDERR_NOPALETTEATTACHED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 170  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN42@DDErrorChe:

; 171  :       case DDERR_NOPALETTEHW:
; 172  :         MessageBox( NULL, "DDERR_NOPALETTEHW", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BC@GEADEPGN@DDERR_NOPALETTEHW?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 173  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN41@DDErrorChe:

; 174  :       case DDERR_NORASTEROPHW:
; 175  :         MessageBox( NULL, "DDERR_NORASTEROPHW", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BD@ICAOCHBG@DDERR_NORASTEROPHW?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 176  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN40@DDErrorChe:

; 177  :       case DDERR_NOROTATIONHW:
; 178  :         MessageBox( NULL, "DDERR_NOROTATIONHW", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BD@NEIDAAKN@DDERR_NOROTATIONHW?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 179  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN39@DDErrorChe:

; 180  :       case DDERR_NOSTRETCHHW:
; 181  :         MessageBox( NULL, "DDERR_NOSTRETCHHW", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BC@CAPIEDAG@DDERR_NOSTRETCHHW?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 182  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN38@DDErrorChe:

; 183  :       case DDERR_NOT4BITCOLOR:
; 184  :         MessageBox( NULL, "DDERR_NOT4BITCOLOR", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BD@ENAKJNOC@DDERR_NOT4BITCOLOR?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 185  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN37@DDErrorChe:

; 186  :       case DDERR_NOT4BITCOLORINDEX:
; 187  :         MessageBox( NULL, "DDERR_NOT4BITCOLORINDEX", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BI@IKKPPDMJ@DDERR_NOT4BITCOLORINDEX?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 188  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN36@DDErrorChe:

; 189  :       case DDERR_NOT8BITCOLOR:
; 190  :         MessageBox( NULL, "DDERR_NOT8BITCOLOR", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BD@FHDGHNGM@DDERR_NOT8BITCOLOR?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 191  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN35@DDErrorChe:

; 192  :       case DDERR_NOTAOVERLAYSURFACE:
; 193  :         MessageBox( NULL, "DDERR_NOTAOVERLAYSURFACE", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BJ@LGNAEONK@DDERR_NOTAOVERLAYSURFACE?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 194  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN34@DDErrorChe:

; 195  :       case DDERR_NOTEXTUREHW:
; 196  :         MessageBox( NULL, "DDERR_NOTEXTUREHW", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BC@ENEADALF@DDERR_NOTEXTUREHW?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 197  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN33@DDErrorChe:

; 198  :       case DDERR_NOTFLIPPABLE:
; 199  :         MessageBox( NULL, "DDERR_NOTFLIPPABLE", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BD@FOFDLEGO@DDERR_NOTFLIPPABLE?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 200  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN32@DDErrorChe:

; 201  :       case DDERR_NOTFOUND:
; 202  :         MessageBox( NULL, "DDERR_NOTFOUND", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0P@IIGPDCF@DDERR_NOTFOUND?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 203  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN31@DDErrorChe:

; 204  :       case DDERR_NOTLOCKED:
; 205  :         MessageBox( NULL, "DDERR_NOTLOCKED", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BA@KCNFHPNM@DDERR_NOTLOCKED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 206  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN30@DDErrorChe:

; 207  :       case DDERR_NOTPALETTIZED:
; 208  :         MessageBox( NULL, "DDERR_NOTPALETTIZED", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BE@FGMGOELL@DDERR_NOTPALETTIZED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 209  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN29@DDErrorChe:

; 210  :       case DDERR_NOVSYNCHW:
; 211  :         MessageBox( NULL, "DDERR_NOVSYNCHW", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BA@PAPKELJP@DDERR_NOVSYNCHW?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 212  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN28@DDErrorChe:

; 213  :       case DDERR_NOZBUFFERHW:
; 214  :         MessageBox( NULL, "DDERR_NOZBUFFERHW", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BC@MGOAKBHI@DDERR_NOZBUFFERHW?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 215  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN27@DDErrorChe:

; 216  :       case DDERR_NOZOVERLAYHW:
; 217  :         MessageBox( NULL, "DDERR_NOZOVERLAYHW", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BD@IFBPLCFK@DDERR_NOZOVERLAYHW?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 218  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN26@DDErrorChe:

; 219  :       case DDERR_OUTOFCAPS:
; 220  :         MessageBox( NULL, "DDERR_OUTOFCAPS", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BA@BCMNJCDB@DDERR_OUTOFCAPS?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 221  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN25@DDErrorChe:

; 222  :       case DDERR_OUTOFMEMORY:
; 223  :         MessageBox( NULL, "DDERR_OUTOFMEMORY", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BC@JFAMHJIL@DDERR_OUTOFMEMORY?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 224  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN24@DDErrorChe:

; 225  :       case DDERR_OUTOFVIDEOMEMORY:
; 226  :         MessageBox( NULL, "DDERR_OUTOFVIDEOMEMORY", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BH@IHGJFMGH@DDERR_OUTOFVIDEOMEMORY?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 227  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN23@DDErrorChe:

; 228  :       case DDERR_OVERLAYCANTCLIP:
; 229  :         MessageBox( NULL, "DDERR_OVERLAYCANTCLIP", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BG@EDDFCCOG@DDERR_OVERLAYCANTCLIP?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 230  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN22@DDErrorChe:

; 231  :       case DDERR_OVERLAYCOLORKEYONLYONEACTIVE:
; 232  :         MessageBox( NULL, "DDERR_OVERLAYCOLORKEYONLYONEACTIVE", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0CD@JNABKIAN@DDERR_OVERLAYCOLORKEYONLYONEACTI@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 233  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN21@DDErrorChe:

; 234  :       case DDERR_OVERLAYNOTVISIBLE:
; 235  :         MessageBox( NULL, "DDERR_OVERLAYNOTVISIBLE", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BI@CLLMFLGN@DDERR_OVERLAYNOTVISIBLE?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 236  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN20@DDErrorChe:

; 237  :       case DDERR_PALETTEBUSY:
; 238  :         MessageBox( NULL, "DDERR_PALETTEBUSY", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BC@CEBGFCJL@DDERR_PALETTEBUSY?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 239  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN19@DDErrorChe:

; 240  :       case DDERR_PRIMARYSURFACEALREADYEXISTS:
; 241  :         MessageBox( NULL, "DDERR_PRIMARYSURFACEALREADYEXISTS", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0CC@FKFBEMJC@DDERR_PRIMARYSURFACEALREADYEXIST@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 242  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN18@DDErrorChe:

; 243  :       case DDERR_REGIONTOOSMALL:
; 244  :         MessageBox( NULL, "DDERR_REGIONTOOSMALL", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BF@BDDJLJGA@DDERR_REGIONTOOSMALL?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 245  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN17@DDErrorChe:

; 246  :       case DDERR_SURFACEALREADYATTACHED:
; 247  :         MessageBox( NULL, "DDERR_SURFACEALREADYATTACHED", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BN@DLNFLDJF@DDERR_SURFACEALREADYATTACHED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 248  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN16@DDErrorChe:

; 249  :       case DDERR_SURFACEALREADYDEPENDENT:
; 250  :         MessageBox( NULL, "DDERR_SURFACEALREADYDEPENDENT", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BO@HOHOGLO@DDERR_SURFACEALREADYDEPENDENT?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 251  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN15@DDErrorChe:

; 252  :       case DDERR_SURFACEBUSY:
; 253  :         MessageBox( NULL, "DDERR_SURFACEBUSY", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BC@NLGPCHLD@DDERR_SURFACEBUSY?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 254  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN14@DDErrorChe:

; 255  :       case DDERR_SURFACEISOBSCURED:
; 256  :         MessageBox( NULL, "DDERR_SURFACEISOBSCURED", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BI@KAHOANAA@DDERR_SURFACEISOBSCURED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 257  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN13@DDErrorChe:

; 258  :       case DDERR_SURFACELOST:
; 259  :         MessageBox( NULL, "DDERR_SURFACELOST", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BC@OOFFFAGE@DDERR_SURFACELOST?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 260  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN12@DDErrorChe:

; 261  :       case DDERR_SURFACENOTATTACHED:
; 262  :         MessageBox( NULL, "DDERR_SURFACENOTATTACHED", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BJ@DMNBOKFJ@DDERR_SURFACENOTATTACHED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 263  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN11@DDErrorChe:

; 264  :       case DDERR_TOOBIGHEIGHT:
; 265  :         MessageBox( NULL, "DDERR_TOOBIGHEIGHT", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BD@FPHOLBKE@DDERR_TOOBIGHEIGHT?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 266  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN10@DDErrorChe:

; 267  :       case DDERR_TOOBIGSIZE:
; 268  :         MessageBox( NULL, "DDERR_TOOBIGSIZE", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BB@IBDADILM@DDERR_TOOBIGSIZE?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 269  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN9@DDErrorChe:

; 270  :       case DDERR_TOOBIGWIDTH:
; 271  :         MessageBox( NULL, "DDERR_TOOBIGWIDTH", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BC@MMEFKBGP@DDERR_TOOBIGWIDTH?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 272  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN8@DDErrorChe:

; 273  :       case DDERR_UNSUPPORTED:
; 274  :         MessageBox( NULL, "DDERR_UNSUPPORTED", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BC@LLCNADOP@DDERR_UNSUPPORTED?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 275  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN7@DDErrorChe:

; 276  :       case DDERR_UNSUPPORTEDFORMAT:
; 277  :         MessageBox( NULL, "DDERR_UNSUPPORTEDFORMAT", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BI@GGBGCOID@DDERR_UNSUPPORTEDFORMAT?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 278  :         return FALSE;

	xor	eax, eax
	jmp	$LN94@DDErrorChe
$LN6@DDErrorChe:

; 279  :       case DDERR_UNSUPPORTEDMASK:
; 280  :         MessageBox( NULL, "DDERR_UNSUPPORTEDMASK", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BG@OHPHKFL@DDERR_UNSUPPORTEDMASK?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 281  :         return FALSE;

	xor	eax, eax
	jmp	SHORT $LN94@DDErrorChe
$LN5@DDErrorChe:

; 282  :       case DDERR_VERTICALBLANKINPROGRESS:
; 283  :         MessageBox( NULL, "DDERR_VERTICALBLANKINPROGRESS", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BO@CKEGAAHC@DDERR_VERTICALBLANKINPROGRESS?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 284  :         return FALSE;

	xor	eax, eax
	jmp	SHORT $LN94@DDErrorChe
$LN4@DDErrorChe:

; 285  :       case DDERR_WASSTILLDRAWING:
; 286  :         MessageBox( NULL, "DDERR_WASSTILLDRAWING", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BG@PNJKHKJC@DDERR_WASSTILLDRAWING?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 287  :         return FALSE;

	xor	eax, eax
	jmp	SHORT $LN94@DDErrorChe
$LN3@DDErrorChe:

; 288  :       case DDERR_WRONGMODE:
; 289  :         MessageBox( NULL, "DDERR_WRONGMODE", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BA@FGHHLMKB@DDERR_WRONGMODE?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 290  :         return FALSE;

	xor	eax, eax
	jmp	SHORT $LN94@DDErrorChe
$LN2@DDErrorChe:

; 291  :       case DDERR_XALIGN:
; 292  :         MessageBox( NULL, "DDERR_XALIGN", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0N@MAIIIAKF@DDERR_XALIGN?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 293  :         return FALSE;

	xor	eax, eax
	jmp	SHORT $LN94@DDErrorChe
$LN1@DDErrorChe:

; 294  :       default:
; 295  :         MessageBox( NULL, "UNKNOWN ERROR CODE", "DDraw Error", MB_OK );

	push	0
	push	OFFSET ??_C@_0M@ECGBGJCL@DDraw?5Error?$AA@
	push	OFFSET ??_C@_0BD@KAPALDGP@UNKNOWN?5ERROR?5CODE?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 296  :         return FALSE;

	xor	eax, eax
$LN94@DDErrorChe:

; 297  :     }
; 298  : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN104@DDErrorChe:
	DD	$LN88@DDErrorChe
	DD	$LN83@DDErrorChe
	DD	$LN81@DDErrorChe
	DD	$LN78@DDErrorChe
	DD	$LN74@DDErrorChe
	DD	$LN73@DDErrorChe
	DD	$LN72@DDErrorChe
	DD	$LN70@DDErrorChe
	DD	$LN69@DDErrorChe
	DD	$LN67@DDErrorChe
	DD	$LN65@DDErrorChe
	DD	$LN64@DDErrorChe
	DD	$LN63@DDErrorChe
	DD	$LN62@DDErrorChe
	DD	$LN60@DDErrorChe
	DD	$LN58@DDErrorChe
	DD	$LN55@DDErrorChe
	DD	$LN57@DDErrorChe
	DD	$LN56@DDErrorChe
	DD	$LN50@DDErrorChe
	DD	$LN49@DDErrorChe
	DD	$LN48@DDErrorChe
	DD	$LN46@DDErrorChe
	DD	$LN32@DDErrorChe
	DD	$LN1@DDErrorChe
$LN101@DDErrorChe:
	DB	0
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	1
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	2
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	3
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	4
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	5
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	6
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	7
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	8
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	9
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	10					; 0000000aH
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	11					; 0000000bH
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	12					; 0000000cH
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	13					; 0000000dH
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	14					; 0000000eH
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	15					; 0000000fH
	DB	24					; 00000018H
	DB	16					; 00000010H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	17					; 00000011H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	18					; 00000012H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	19					; 00000013H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	20					; 00000014H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	21					; 00000015H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	22					; 00000016H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	23					; 00000017H
$LN105@DDErrorChe:
	DD	$LN41@DDErrorChe
	DD	$LN40@DDErrorChe
	DD	$LN39@DDErrorChe
	DD	$LN38@DDErrorChe
	DD	$LN37@DDErrorChe
	DD	$LN36@DDErrorChe
	DD	$LN34@DDErrorChe
	DD	$LN29@DDErrorChe
	DD	$LN28@DDErrorChe
	DD	$LN27@DDErrorChe
	DD	$LN26@DDErrorChe
	DD	$LN24@DDErrorChe
	DD	$LN23@DDErrorChe
	DD	$LN22@DDErrorChe
	DD	$LN20@DDErrorChe
	DD	$LN84@DDErrorChe
	DD	$LN17@DDErrorChe
	DD	$LN16@DDErrorChe
	DD	$LN15@DDErrorChe
	DD	$LN14@DDErrorChe
	DD	$LN13@DDErrorChe
	DD	$LN12@DDErrorChe
	DD	$LN11@DDErrorChe
	DD	$LN10@DDErrorChe
	DD	$LN9@DDErrorChe
	DD	$LN7@DDErrorChe
	DD	$LN6@DDErrorChe
	DD	$LN1@DDErrorChe
$LN102@DDErrorChe:
	DB	0
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	1
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	2
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	3
	DB	4
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	5
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	6
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	7
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	8
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	9
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	10					; 0000000aH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	11					; 0000000bH
	DB	27					; 0000001bH
	DB	12					; 0000000cH
	DB	27					; 0000001bH
	DB	13					; 0000000dH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	14					; 0000000eH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	15					; 0000000fH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	16					; 00000010H
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	17					; 00000011H
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	18					; 00000012H
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	19					; 00000013H
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	20					; 00000014H
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	21					; 00000015H
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	22					; 00000016H
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	23					; 00000017H
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	24					; 00000018H
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	25					; 00000019H
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	26					; 0000001aH
	npad	3
$LN106@DDErrorChe:
	DD	$LN4@DDErrorChe
	DD	$LN2@DDErrorChe
	DD	$LN71@DDErrorChe
	DD	$LN82@DDErrorChe
	DD	$LN52@DDErrorChe
	DD	$LN19@DDErrorChe
	DD	$LN51@DDErrorChe
	DD	$LN18@DDErrorChe
	DD	$LN85@DDErrorChe
	DD	$LN59@DDErrorChe
	DD	$LN47@DDErrorChe
	DD	$LN76@DDErrorChe
	DD	$LN77@DDErrorChe
	DD	$LN43@DDErrorChe
	DD	$LN42@DDErrorChe
	DD	$LN89@DDErrorChe
	DD	$LN61@DDErrorChe
	DD	$LN53@DDErrorChe
	DD	$LN21@DDErrorChe
	DD	$LN45@DDErrorChe
	DD	$LN66@DDErrorChe
	DD	$LN35@DDErrorChe
	DD	$LN80@DDErrorChe
	DD	$LN33@DDErrorChe
	DD	$LN86@DDErrorChe
	DD	$LN31@DDErrorChe
	DD	$LN87@DDErrorChe
	DD	$LN54@DDErrorChe
	DD	$LN3@DDErrorChe
	DD	$LN75@DDErrorChe
	DD	$LN30@DDErrorChe
	DD	$LN1@DDErrorChe
$LN103@DDErrorChe:
	DB	0
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	31					; 0000001fH
	DB	1
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	13					; 0000000dH
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	16					; 00000010H
	DB	17					; 00000011H
	DB	18					; 00000012H
	DB	19					; 00000013H
	DB	20					; 00000014H
	DB	21					; 00000015H
	DB	22					; 00000016H
	DB	23					; 00000017H
	DB	24					; 00000018H
	DB	25					; 00000019H
	DB	26					; 0000001aH
	DB	27					; 0000001bH
	DB	28					; 0000001cH
	DB	29					; 0000001dH
	DB	30					; 0000001eH
?DDErrorCheck@@YAHJ@Z ENDP				; DDErrorCheck
_TEXT	ENDS
END
