; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\Graphics\Weather\Star.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?Latitude@CStar@@1MA				; CStar::Latitude
PUBLIC	?Longitude@CStar@@1MA				; CStar::Longitude
PUBLIC	?sinLatitude@CStar@@1MA				; CStar::sinLatitude
PUBLIC	?cosLatitude@CStar@@1MA				; CStar::cosLatitude
PUBLIC	?UniversalTime@CStar@@1MA			; CStar::UniversalTime
PUBLIC	?UniversalTimeDegree@CStar@@1MA			; CStar::UniversalTimeDegree
PUBLIC	?deltaJulian@CStar@@1MA				; CStar::deltaJulian
PUBLIC	?CurrentJulian@CStar@@1MA			; CStar::CurrentJulian
PUBLIC	?LocalSiderialTime@CStar@@1MA			; CStar::LocalSiderialTime
PUBLIC	?Year@CStar@@1HA				; CStar::Year
PUBLIC	?Month@CStar@@1HA				; CStar::Month
PUBLIC	?Day@CStar@@1HA					; CStar::Day
PUBLIC	?ExtraDay@CStar@@1HA				; CStar::ExtraDay
PUBLIC	?mustSetLocalSiderialTime@CStar@@1HA		; CStar::mustSetLocalSiderialTime
PUBLIC	?mustSetdeltaJulian@CStar@@1HA			; CStar::mustSetdeltaJulian
PUBLIC	?DaysInMonth@CStar@@1PAHA			; CStar::DaysInMonth
PUBLIC	?CurrentStarData@CStar@@1PAUStarData@@A		; CStar::CurrentStarData
PUBLIC	?SunAz@CStar@@1MA				; CStar::SunAz
PUBLIC	?SunAlt@CStar@@1MA				; CStar::SunAlt
PUBLIC	?MoonAz@CStar@@1MA				; CStar::MoonAz
PUBLIC	?MoonAlt@CStar@@1MA				; CStar::MoonAlt
PUBLIC	?Horizon@CStar@@1MA				; CStar::Horizon
PUBLIC	?HorizonRange@CStar@@1MA			; CStar::HorizonRange
PUBLIC	?IntensityRange@CStar@@1MA			; CStar::IntensityRange
PUBLIC	?minStarIntensity@CStar@@1HA			; CStar::minStarIntensity
_BSS	SEGMENT
?Latitude@CStar@@1MA DD 01H DUP (?)			; CStar::Latitude
?Longitude@CStar@@1MA DD 01H DUP (?)			; CStar::Longitude
?sinLatitude@CStar@@1MA DD 01H DUP (?)			; CStar::sinLatitude
?cosLatitude@CStar@@1MA DD 01H DUP (?)			; CStar::cosLatitude
?UniversalTime@CStar@@1MA DD 01H DUP (?)		; CStar::UniversalTime
?UniversalTimeDegree@CStar@@1MA DD 01H DUP (?)		; CStar::UniversalTimeDegree
?deltaJulian@CStar@@1MA DD 01H DUP (?)			; CStar::deltaJulian
?CurrentJulian@CStar@@1MA DD 01H DUP (?)		; CStar::CurrentJulian
?LocalSiderialTime@CStar@@1MA DD 01H DUP (?)		; CStar::LocalSiderialTime
?Year@CStar@@1HA DD 01H DUP (?)				; CStar::Year
?Month@CStar@@1HA DD 01H DUP (?)			; CStar::Month
?Day@CStar@@1HA DD 01H DUP (?)				; CStar::Day
?ExtraDay@CStar@@1HA DD 01H DUP (?)			; CStar::ExtraDay
?mustSetLocalSiderialTime@CStar@@1HA DD 01H DUP (?)	; CStar::mustSetLocalSiderialTime
?mustSetdeltaJulian@CStar@@1HA DD 01H DUP (?)		; CStar::mustSetdeltaJulian
?CurrentStarData@CStar@@1PAUStarData@@A DD 01H DUP (?)	; CStar::CurrentStarData
?SunAz@CStar@@1MA DD 01H DUP (?)			; CStar::SunAz
?SunAlt@CStar@@1MA DD 01H DUP (?)			; CStar::SunAlt
?MoonAz@CStar@@1MA DD 01H DUP (?)			; CStar::MoonAz
?MoonAlt@CStar@@1MA DD 01H DUP (?)			; CStar::MoonAlt
?minStarIntensity@CStar@@1HA DD 01H DUP (?)		; CStar::minStarIntensity
_BSS	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
_DATA	SEGMENT
?DaysInMonth@CStar@@1PAHA DD 01fH			; CStar::DaysInMonth
	DD	01cH
	DD	01fH
	DD	01eH
	DD	01fH
	DD	01eH
	DD	01fH
	DD	01fH
	DD	01eH
	DD	01fH
	DD	01eH
	DD	01fH
?Horizon@CStar@@1MA DD 0bfc90fdbr		; -1.5708 ; CStar::Horizon
?HorizonRange@CStar@@1MA DD 0bfc90fdbr		; -1.5708 ; CStar::HorizonRange
?IntensityRange@CStar@@1MA DD 03f800000r	; 1	; CStar::IntensityRange
_DATA	ENDS
PUBLIC	_fabsf
PUBLIC	_acosf
PUBLIC	_asinf
PUBLIC	_atanf
PUBLIC	_atan2f
PUBLIC	_cosf
PUBLIC	_floorf
PUBLIC	_sinf
PUBLIC	_tanf
PUBLIC	?acos@@YAMM@Z					; acos
PUBLIC	?asin@@YAMM@Z					; asin
PUBLIC	?atan@@YAMM@Z					; atan
PUBLIC	?atan2@@YAMMM@Z					; atan2
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?floor@@YAMM@Z					; floor
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?tan@@YAMM@Z					; tan
PUBLIC	?CalculateDeltaJulian@CStar@@KAXXZ		; CStar::CalculateDeltaJulian
PUBLIC	?CalculateLocalSiderialTime@CStar@@KAXXZ	; CStar::CalculateLocalSiderialTime
PUBLIC	?CalculateStarCoord@CStar@@KAHMMPAUStarCoord@@@Z ; CStar::CalculateStarCoord
PUBLIC	?Julian@CStar@@KAMHHM@Z				; CStar::Julian
PUBLIC	?FixAngle@CStar@@KAMM@Z				; CStar::FixAngle
PUBLIC	?Kepler@CStar@@KAMMM@Z				; CStar::Kepler
PUBLIC	?GetRange@CStar@@KAMM@Z				; CStar::GetRange
PUBLIC	?GetRangeRad@CStar@@KAMM@Z			; CStar::GetRangeRad
PUBLIC	?InsideRange@CStar@@KAHMM@Z			; CStar::InsideRange
PUBLIC	?Setup@CStar@@SAHPADM@Z				; CStar::Setup
PUBLIC	?Cleanup@CStar@@SAXXZ				; CStar::Cleanup
PUBLIC	?LeapYear@CStar@@SAHH@Z				; CStar::LeapYear
PUBLIC	?GetTotalDay@CStar@@SAHHH@Z			; CStar::GetTotalDay
PUBLIC	?ConvertHour@CStar@@SAMHHM@Z			; CStar::ConvertHour
PUBLIC	?CalculateDate@CStar@@SAXPAH00H@Z		; CStar::CalculateDate
PUBLIC	?SetDate@CStar@@SAXHHH@Z			; CStar::SetDate
PUBLIC	?SetUniversalTime@CStar@@SAXI@Z			; CStar::SetUniversalTime
PUBLIC	?SetUniversalTime@CStar@@SAXM@Z			; CStar::SetUniversalTime
PUBLIC	?SetUniversalTime@CStar@@SAXHHM@Z		; CStar::SetUniversalTime
PUBLIC	?SetLocation@CStar@@SAXMM@Z			; CStar::SetLocation
PUBLIC	?SetHorizon@CStar@@SAXMM@Z			; CStar::SetHorizon
PUBLIC	?UpdateStar@CStar@@SAXXZ			; CStar::UpdateStar
PUBLIC	?GetSunRaDec@CStar@@SAXPAM0@Z			; CStar::GetSunRaDec
PUBLIC	?GetMoonRaDec@CStar@@SAXPAM0@Z			; CStar::GetMoonRaDec
PUBLIC	?ConvertCoord@CStar@@SAXMMPAM00@Z		; CStar::ConvertCoord
PUBLIC	?ConvertPosition@CStar@@SAXMMPAM0@Z		; CStar::ConvertPosition
PUBLIC	?CalculateSunPosition@CStar@@SAXPAM0@Z		; CStar::CalculateSunPosition
PUBLIC	?CalculateMoonPosition@CStar@@SAXPAM0@Z		; CStar::CalculateMoonPosition
PUBLIC	?GetMoonPhase@CStar@@SAMXZ			; CStar::GetMoonPhase
PUBLIC	?RemoveDimStar@CStar@@SAXM@Z			; CStar::RemoveDimStar
PUBLIC	?Julian1980@CStar@@1MA				; CStar::Julian1980
PUBLIC	?Julian2000@CStar@@1MA				; CStar::Julian2000
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_04MOLBCOPG@ZZZZ?$AA@			; `string'
PUBLIC	??_C@_0BD@FENPLIEF@TOTALCONSTELLATION?$AA@	; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	??_C@_09CECCMBEE@TOTALSTAR?$AA@			; `string'
PUBLIC	??_C@_06CPMFDHGB@MINMAG?$AA@			; `string'
PUBLIC	??_C@_02NJPGOMH@?$CFf?$AA@			; `string'
PUBLIC	??_C@_06CMDGNHCO@MAXMAG?$AA@			; `string'
PUBLIC	??_C@_0N@DMEPANPM@MININTENSITY?$AA@		; `string'
PUBLIC	??_C@_0N@HMAAHFIK@MAXINTENSITY?$AA@		; `string'
PUBLIC	??_C@_05HPMPOKFN@?$CF?$FL?$FO?6?$FN?$AA@	; `string'
PUBLIC	??_C@_05KCDNKPCA@?$CFf?5?$CFf?$AA@		; `string'
PUBLIC	__real@00000000
PUBLIC	__real@31d5ab75
PUBLIC	__real@31efe051
PUBLIC	__real@3246d751
PUBLIC	__real@358637bd
PUBLIC	__real@384cf8ec
PUBLIC	__real@390ebfa5
PUBLIC	__real@392ddc49
PUBLIC	__real@39b702d4
PUBLIC	__real@3a6cffd2
PUBLIC	__real@3afba3e4
PUBLIC	__real@3b427301
PUBLIC	__real@3b59535b
PUBLIC	__real@3b7033b5
PUBLIC	__real@3ba02279
PUBLIC	__real@3c23d70a
PUBLIC	__real@3c3cbaeb
PUBLIC	__real@3c87f161
PUBLIC	__real@3c88f430
PUBLIC	__real@3c8ceb26
PUBLIC	__real@3c8cecdc
PUBLIC	__real@3c8cecdf
PUBLIC	__real@3cb594ce
PUBLIC	__real@3d08e69d
PUBLIC	__real@3d0efa35
PUBLIC	__real@3db75e55
PUBLIC	__real@3de0d4f9
PUBLIC	__real@3de427d5
PUBLIC	__real@3e3e425b
PUBLIC	__real@3e5b22d1
PUBLIC	__real@3ebd70a4
PUBLIC	__real@3ed173f2
PUBLIC	__real@3ed174a2
PUBLIC	__real@3f000000
PUBLIC	__real@3f288659
PUBLIC	__real@3f7c5363
PUBLIC	__real@3f800000
PUBLIC	__real@3f845a43
PUBLIC	__real@3fa30f28
PUBLIC	__real@3fa6571855555555
PUBLIC	__real@3fc00000
PUBLIC	__real@3fd06f29
PUBLIC	__real@3fe06e07
PUBLIC	__real@40000000
PUBLIC	__real@4016af4b
PUBLIC	__real@40490fdb
PUBLIC	__real@40506f29
PUBLIC	__real@40730fc1
PUBLIC	__real@4073dda5
PUBLIC	__real@407ee6df
PUBLIC	__real@4083a3c4
PUBLIC	__real@4090c3bd
PUBLIC	__real@4096bd97
PUBLIC	__real@409ca394
PUBLIC	__real@40b1c5b2
PUBLIC	__real@40c7aa69
PUBLIC	__real@40c7ae6b
PUBLIC	__real@40c90fdb
PUBLIC	__real@40c93c36
PUBLIC	__real@41400000
PUBLIC	__real@4152d285
PUBLIC	__real@41c00000
PUBLIC	__real@42700000
PUBLIC	__real@4281f370
PUBLIC	__real@42e52ee0
PUBLIC	__real@43340000
PUBLIC	__real@437f0000
PUBLIC	__real@438b6ab1
PUBLIC	__real@438d4c57
PUBLIC	__real@43aeb108
PUBLIC	__real@43b40000
PUBLIC	__real@45610000
PUBLIC	__real@45bb9971
PUBLIC	__real@470c9f0d
PUBLIC	__real@470ead00
PUBLIC	__real@48c6e486
PUBLIC	__real@48c9d2ec
PUBLIC	__real@48e901db
PUBLIC	__real@48eafe7c
PUBLIC	__real@48ebf041
PUBLIC	__real@49596a64
PUBLIC	__real@496901db
PUBLIC	__real@496a790e
PUBLIC	__real@496bf041
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_fclose:PROC
EXTRN	_fscanf:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	_acos:PROC
EXTRN	_asin:PROC
EXTRN	_atan:PROC
EXTRN	_atan2:PROC
EXTRN	_cos:PROC
EXTRN	_fabs:PROC
EXTRN	_sin:PROC
EXTRN	_tan:PROC
EXTRN	_floor:PROC
EXTRN	_memcpy:PROC
EXTRN	_strcmp:PROC
EXTRN	_strupr:PROC
EXTRN	?FILE_Open@@YAPAU_iobuf@@PAD0@Z:PROC		; FILE_Open
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?Julian1980@CStar@@1MA DD 01H DUP (?)			; CStar::Julian1980
?Julian2000@CStar@@1MA DD 01H DUP (?)			; CStar::Julian2000
_BSS	ENDS
CRT$XCU	SEGMENT
?Julian1980$initializer$@CStar@@1P6AXXZA DD FLAT:??__E?Julian1980@CStar@@1MA@@YAXXZ ; CStar::Julian1980$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@496bf041
CONST	SEGMENT
__real@496bf041 DD 0496bf041r			; 966404
CONST	ENDS
;	COMDAT __real@496a790e
CONST	SEGMENT
__real@496a790e DD 0496a790er			; 960401
CONST	ENDS
;	COMDAT __real@496901db
CONST	SEGMENT
__real@496901db DD 0496901dbr			; 954398
CONST	ENDS
;	COMDAT __real@49596a64
CONST	SEGMENT
__real@49596a64 DD 049596a64r			; 890534
CONST	ENDS
;	COMDAT __real@48ebf041
CONST	SEGMENT
__real@48ebf041 DD 048ebf041r			; 483202
CONST	ENDS
;	COMDAT __real@48eafe7c
CONST	SEGMENT
__real@48eafe7c DD 048eafe7cr			; 481268
CONST	ENDS
;	COMDAT __real@48e901db
CONST	SEGMENT
__real@48e901db DD 048e901dbr			; 477199
CONST	ENDS
;	COMDAT __real@48c9d2ec
CONST	SEGMENT
__real@48c9d2ec DD 048c9d2ecr			; 413335
CONST	ENDS
;	COMDAT __real@48c6e486
CONST	SEGMENT
__real@48c6e486 DD 048c6e486r			; 407332
CONST	ENDS
;	COMDAT __real@470ead00
CONST	SEGMENT
__real@470ead00 DD 0470ead00r			; 36525
CONST	ENDS
;	COMDAT __real@470c9f0d
CONST	SEGMENT
__real@470c9f0d DD 0470c9f0dr			; 35999.1
CONST	ENDS
;	COMDAT __real@45bb9971
CONST	SEGMENT
__real@45bb9971 DD 045bb9971r			; 6003.18
CONST	ENDS
;	COMDAT __real@45610000
CONST	SEGMENT
__real@45610000 DD 045610000r			; 3600
CONST	ENDS
;	COMDAT __real@43b40000
CONST	SEGMENT
__real@43b40000 DD 043b40000r			; 360
CONST	ENDS
;	COMDAT __real@43aeb108
CONST	SEGMENT
__real@43aeb108 DD 043aeb108r			; 349.383
CONST	ENDS
;	COMDAT __real@438d4c57
CONST	SEGMENT
__real@438d4c57 DD 0438d4c57r			; 282.596
CONST	ENDS
;	COMDAT __real@438b6ab1
CONST	SEGMENT
__real@438b6ab1 DD 0438b6ab1r			; 278.834
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@43340000
CONST	SEGMENT
__real@43340000 DD 043340000r			; 180
CONST	ENDS
;	COMDAT __real@42e52ee0
CONST	SEGMENT
__real@42e52ee0 DD 042e52ee0r			; 114.592
CONST	ENDS
;	COMDAT __real@4281f370
CONST	SEGMENT
__real@4281f370 DD 04281f370r			; 64.9755
CONST	ENDS
;	COMDAT __real@42700000
CONST	SEGMENT
__real@42700000 DD 042700000r			; 60
CONST	ENDS
;	COMDAT __real@41c00000
CONST	SEGMENT
__real@41c00000 DD 041c00000r			; 24
CONST	ENDS
;	COMDAT __real@4152d285
CONST	SEGMENT
__real@4152d285 DD 04152d285r			; 13.1764
CONST	ENDS
;	COMDAT __real@41400000
CONST	SEGMENT
__real@41400000 DD 041400000r			; 12
CONST	ENDS
;	COMDAT __real@40c93c36
CONST	SEGMENT
__real@40c93c36 DD 040c93c36r			; 6.2886
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40c7ae6b
CONST	SEGMENT
__real@40c7ae6b DD 040c7ae6br			; 6.24004
CONST	ENDS
;	COMDAT __real@40c7aa69
CONST	SEGMENT
__real@40c7aa69 DD 040c7aa69r			; 6.23955
CONST	ENDS
;	COMDAT __real@40b1c5b2
CONST	SEGMENT
__real@40b1c5b2 DD 040b1c5b2r			; 5.55538
CONST	ENDS
;	COMDAT __real@409ca394
CONST	SEGMENT
__real@409ca394 DD 0409ca394r			; 4.89497
CONST	ENDS
;	COMDAT __real@4096bd97
CONST	SEGMENT
__real@4096bd97 DD 04096bd97r			; 4.71064
CONST	ENDS
;	COMDAT __real@4090c3bd
CONST	SEGMENT
__real@4090c3bd DD 04090c3bdr			; 4.52389
CONST	ENDS
;	COMDAT __real@4083a3c4
CONST	SEGMENT
__real@4083a3c4 DD 04083a3c4r			; 4.11374
CONST	ENDS
;	COMDAT __real@407ee6df
CONST	SEGMENT
__real@407ee6df DD 0407ee6dfr			; 3.98284
CONST	ENDS
;	COMDAT __real@4073dda5
CONST	SEGMENT
__real@4073dda5 DD 04073dda5r			; 3.8104
CONST	ENDS
;	COMDAT __real@40730fc1
CONST	SEGMENT
__real@40730fc1 DD 040730fc1r			; 3.79784
CONST	ENDS
;	COMDAT __real@40506f29
CONST	SEGMENT
__real@40506f29 DD 040506f29r			; 3.25678
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@4016af4b
CONST	SEGMENT
__real@4016af4b DD 04016af4br			; 2.35445
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3fe06e07
CONST	SEGMENT
__real@3fe06e07 DD 03fe06e07r			; 1.75336
CONST	ENDS
;	COMDAT __real@3fd06f29
CONST	SEGMENT
__real@3fd06f29 DD 03fd06f29r			; 1.62839
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3fa6571855555555
CONST	SEGMENT
__real@3fa6571855555555 DQ 03fa6571855555555r	; 0.0436332
CONST	ENDS
;	COMDAT __real@3fa30f28
CONST	SEGMENT
__real@3fa30f28 DD 03fa30f28r			; 1.2739
CONST	ENDS
;	COMDAT __real@3f845a43
CONST	SEGMENT
__real@3f845a43 DD 03f845a43r			; 1.034
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7c5363
CONST	SEGMENT
__real@3f7c5363 DD 03f7c5363r			; 0.985647
CONST	ENDS
;	COMDAT __real@3f288659
CONST	SEGMENT
__real@3f288659 DD 03f288659r			; 0.6583
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ed174a2
CONST	SEGMENT
__real@3ed174a2 DD 03ed174a2r			; 0.409093
CONST	ENDS
;	COMDAT __real@3ed173f2
CONST	SEGMENT
__real@3ed173f2 DD 03ed173f2r			; 0.409088
CONST	ENDS
;	COMDAT __real@3ebd70a4
CONST	SEGMENT
__real@3ebd70a4 DD 03ebd70a4r			; 0.37
CONST	ENDS
;	COMDAT __real@3e5b22d1
CONST	SEGMENT
__real@3e5b22d1 DD 03e5b22d1r			; 0.214
CONST	ENDS
;	COMDAT __real@3e3e425b
CONST	SEGMENT
__real@3e3e425b DD 03e3e425br			; 0.1858
CONST	ENDS
;	COMDAT __real@3de427d5
CONST	SEGMENT
__real@3de427d5 DD 03de427d5r			; 0.111404
CONST	ENDS
;	COMDAT __real@3de0d4f9
CONST	SEGMENT
__real@3de0d4f9 DD 03de0d4f9r			; 0.109781
CONST	ENDS
;	COMDAT __real@3db75e55
CONST	SEGMENT
__real@3db75e55 DD 03db75e55r			; 0.0895354
CONST	ENDS
;	COMDAT __real@3d0efa35
CONST	SEGMENT
__real@3d0efa35 DD 03d0efa35r			; 0.0349066
CONST	ENDS
;	COMDAT __real@3d08e69d
CONST	SEGMENT
__real@3d08e69d DD 03d08e69dr			; 0.0334231
CONST	ENDS
;	COMDAT __real@3cb594ce
CONST	SEGMENT
__real@3cb594ce DD 03cb594cer			; 0.0221657
CONST	ENDS
;	COMDAT __real@3c8cecdf
CONST	SEGMENT
__real@3c8cecdf DD 03c8cecdfr			; 0.0172028
CONST	ENDS
;	COMDAT __real@3c8cecdc
CONST	SEGMENT
__real@3c8cecdc DD 03c8cecdcr			; 0.0172028
CONST	ENDS
;	COMDAT __real@3c8ceb26
CONST	SEGMENT
__real@3c8ceb26 DD 03c8ceb26r			; 0.017202
CONST	ENDS
;	COMDAT __real@3c88f430
CONST	SEGMENT
__real@3c88f430 DD 03c88f430r			; 0.016718
CONST	ENDS
;	COMDAT __real@3c87f161
CONST	SEGMENT
__real@3c87f161 DD 03c87f161r			; 0.0165946
CONST	ENDS
;	COMDAT __real@3c3cbaeb
CONST	SEGMENT
__real@3c3cbaeb DD 03c3cbaebr			; 0.0115192
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@3ba02279
CONST	SEGMENT
__real@3ba02279 DD 03ba02279r			; 0.00488692
CONST	ENDS
;	COMDAT __real@3b7033b5
CONST	SEGMENT
__real@3b7033b5 DD 03b7033b5r			; 0.00366519
CONST	ENDS
;	COMDAT __real@3b59535b
CONST	SEGMENT
__real@3b59535b DD 03b59535br			; 0.00331613
CONST	ENDS
;	COMDAT __real@3b427301
CONST	SEGMENT
__real@3b427301 DD 03b427301r			; 0.00296706
CONST	ENDS
;	COMDAT __real@3afba3e4
CONST	SEGMENT
__real@3afba3e4 DD 03afba3e4r			; 0.00191986
CONST	ENDS
;	COMDAT __real@3a6cffd2
CONST	SEGMENT
__real@3a6cffd2 DD 03a6cffd2r			; 0.000904081
CONST	ENDS
;	COMDAT __real@39b702d4
CONST	SEGMENT
__real@39b702d4 DD 039b702d4r			; 0.000349066
CONST	ENDS
;	COMDAT __real@392ddc49
CONST	SEGMENT
__real@392ddc49 DD 0392ddc49r			; 0.000165806
CONST	ENDS
;	COMDAT __real@390ebfa5
CONST	SEGMENT
__real@390ebfa5 DD 0390ebfa5r			; 0.000136136
CONST	ENDS
;	COMDAT __real@384cf8ec
CONST	SEGMENT
__real@384cf8ec DD 0384cf8ecr			; 4.88692e-005
CONST	ENDS
;	COMDAT __real@358637bd
CONST	SEGMENT
__real@358637bd DD 0358637bdr			; 1e-006
CONST	ENDS
;	COMDAT __real@3246d751
CONST	SEGMENT
__real@3246d751 DD 03246d751r			; 1.15741e-008
CONST	ENDS
;	COMDAT __real@31efe051
CONST	SEGMENT
__real@31efe051 DD 031efe051r			; 6.98132e-009
CONST	ENDS
;	COMDAT __real@31d5ab75
CONST	SEGMENT
__real@31d5ab75 DD 031d5ab75r			; 6.21861e-009
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_05KCDNKPCA@?$CFf?5?$CFf?$AA@
CONST	SEGMENT
??_C@_05KCDNKPCA@?$CFf?5?$CFf?$AA@ DB '%f %f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05HPMPOKFN@?$CF?$FL?$FO?6?$FN?$AA@
CONST	SEGMENT
??_C@_05HPMPOKFN@?$CF?$FL?$FO?6?$FN?$AA@ DB '%[^', 0aH, ']', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HMAAHFIK@MAXINTENSITY?$AA@
CONST	SEGMENT
??_C@_0N@HMAAHFIK@MAXINTENSITY?$AA@ DB 'MAXINTENSITY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DMEPANPM@MININTENSITY?$AA@
CONST	SEGMENT
??_C@_0N@DMEPANPM@MININTENSITY?$AA@ DB 'MININTENSITY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06CMDGNHCO@MAXMAG?$AA@
CONST	SEGMENT
??_C@_06CMDGNHCO@MAXMAG?$AA@ DB 'MAXMAG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02NJPGOMH@?$CFf?$AA@
CONST	SEGMENT
??_C@_02NJPGOMH@?$CFf?$AA@ DB '%f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06CPMFDHGB@MINMAG?$AA@
CONST	SEGMENT
??_C@_06CPMFDHGB@MINMAG?$AA@ DB 'MINMAG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09CECCMBEE@TOTALSTAR?$AA@
CONST	SEGMENT
??_C@_09CECCMBEE@TOTALSTAR?$AA@ DB 'TOTALSTAR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FENPLIEF@TOTALCONSTELLATION?$AA@
CONST	SEGMENT
??_C@_0BD@FENPLIEF@TOTALCONSTELLATION?$AA@ DB 'TOTALCONSTELLATION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04MOLBCOPG@ZZZZ?$AA@
CONST	SEGMENT
??_C@_04MOLBCOPG@ZZZZ?$AA@ DB 'ZZZZ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
CRT$XCU	SEGMENT
?Julian2000$initializer$@CStar@@1P6AXXZA DD FLAT:??__E?Julian2000@CStar@@1MA@@YAXXZ ; CStar::Julian2000$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\weather\star.cpp
;	COMDAT ??__E?Julian2000@CStar@@1MA@@YAXXZ
text$yc	SEGMENT
??__E?Julian2000@CStar@@1MA@@YAXXZ PROC			; `dynamic initializer for 'CStar::Julian2000'', COMDAT

; 24   : float CStar::Julian2000 = Julian (2000,1,1.5f);

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __real@3fc00000
	movss	DWORD PTR [esp], xmm0
	push	1
	push	2000					; 000007d0H
	call	?Julian@CStar@@KAMHHM@Z			; CStar::Julian
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR ?Julian2000@CStar@@1MA	; CStar::Julian2000
	pop	ebp
	ret	0
??__E?Julian2000@CStar@@1MA@@YAXXZ ENDP			; `dynamic initializer for 'CStar::Julian2000''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\weather\star.cpp
;	COMDAT ??__E?Julian1980@CStar@@1MA@@YAXXZ
text$yc	SEGMENT
??__E?Julian1980@CStar@@1MA@@YAXXZ PROC			; `dynamic initializer for 'CStar::Julian1980'', COMDAT

; 23   : float CStar::Julian1980 = Julian (1980,1,0.0f);

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	1
	push	1980					; 000007bcH
	call	?Julian@CStar@@KAMHHM@Z			; CStar::Julian
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR ?Julian1980@CStar@@1MA	; CStar::Julian1980
	pop	ebp
	ret	0
??__E?Julian1980@CStar@@1MA@@YAXXZ ENDP			; `dynamic initializer for 'CStar::Julian1980''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\weather\star.cpp
_TEXT	SEGMENT
tv76 = -20						; size = 8
tv74 = -12						; size = 4
tv69 = -8						; size = 4
tv71 = -2						; size = 2
_minintensity$ = 8					; size = 4
?RemoveDimStar@CStar@@SAXM@Z PROC			; CStar::RemoveDimStar

; 690  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 691  : 	minStarIntensity = (unsigned int) (minintensity * 255.0f);

	movss	xmm0, DWORD PTR _minintensity$[ebp]
	mulss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR tv69[ebp], xmm0
	fld	DWORD PTR tv69[ebp]
	fnstcw	WORD PTR tv71[ebp]
	movzx	eax, WORD PTR tv71[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv74[ebp], eax
	fldcw	WORD PTR tv74[ebp]
	fistp	QWORD PTR tv76[ebp]
	fldcw	WORD PTR tv71[ebp]
	mov	eax, DWORD PTR tv76[ebp]
	mov	DWORD PTR ?minStarIntensity@CStar@@1HA, eax ; CStar::minStarIntensity

; 692  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveDimStar@CStar@@SAXM@Z ENDP			; CStar::RemoveDimStar
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\weather\star.cpp
_TEXT	SEGMENT
tv308 = -104						; size = 4
_V$ = -100						; size = 4
tv299 = -96						; size = 4
_A4$ = -92						; size = 4
_mEc$ = -88						; size = 4
tv290 = -84						; size = 4
tv283 = -80						; size = 4
_A3$ = -76						; size = 4
tv269 = -72						; size = 4
tv248 = -68						; size = 4
tv242 = -64						; size = 4
tv311 = -60						; size = 4
tv236 = -56						; size = 4
_N$ = -52						; size = 4
_lP$ = -48						; size = 4
_Ae$ = -44						; size = 4
_Ev$ = -40						; size = 4
_MmP$ = -36						; size = 4
_MM$ = -32						; size = 4
_sinM$ = -28						; size = 4
_M$ = -24						; size = 4
_MoonAge$ = -20						; size = 4
_Lambdasun$ = -16					; size = 4
_ml$ = -12						; size = 4
_Day$ = -8						; size = 4
_Ec$ = -4						; size = 4
?GetMoonPhase@CStar@@SAMXZ PROC				; CStar::GetMoonPhase

; 598  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H

; 599  : 	float Day = CurrentJulian - Julian1980;

	movss	xmm0, DWORD PTR ?CurrentJulian@CStar@@1MA
	subss	xmm0, DWORD PTR ?Julian1980@CStar@@1MA
	movss	DWORD PTR _Day$[ebp], xmm0

; 600  : 	float N = FixAngle ((360.0f/365.2422f) * Day);

	movss	xmm0, DWORD PTR __real@3f7c5363
	mulss	xmm0, DWORD PTR _Day$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FixAngle@CStar@@KAMM@Z			; CStar::FixAngle
	add	esp, 4
	fstp	DWORD PTR _N$[ebp]

; 601  : 	float M = FixAngle(N + elonge - elongp);

	movss	xmm0, DWORD PTR _N$[ebp]
	addss	xmm0, DWORD PTR __real@438b6ab1
	subss	xmm0, DWORD PTR __real@438d4c57
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FixAngle@CStar@@KAMM@Z			; CStar::FixAngle
	add	esp, 4
	fstp	DWORD PTR _M$[ebp]

; 602  : 	float Ec = Kepler (M, eccent);

	push	ecx
	movss	xmm0, DWORD PTR __real@3c88f430
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _M$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Kepler@CStar@@KAMMM@Z			; CStar::Kepler
	add	esp, 8
	fstp	DWORD PTR _Ec$[ebp]

; 603  : 	Ec = (float) sqrt((1 + eccent) / (1 - eccent)) * (float) tan(Ec/2);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f845a43
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv236[ebp]
	movss	xmm0, DWORD PTR tv236[ebp]
	movss	xmm1, DWORD PTR _Ec$[ebp]
	divss	xmm1, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv311[ebp], xmm0
	call	?tan@@YAMM@Z				; tan
	add	esp, 4
	fstp	DWORD PTR tv242[ebp]
	movss	xmm0, DWORD PTR tv311[ebp]
	mulss	xmm0, DWORD PTR tv242[ebp]
	movss	DWORD PTR _Ec$[ebp], xmm0

; 604  : 	Ec = radtodeg(2) * (float) atan (Ec);

	push	ecx
	movss	xmm0, DWORD PTR _Ec$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	fstp	DWORD PTR tv248[ebp]
	movss	xmm0, DWORD PTR tv248[ebp]
	mulss	xmm0, DWORD PTR __real@42e52ee0
	movss	DWORD PTR _Ec$[ebp], xmm0

; 605  : 	float Lambdasun = FixAngle (Ec + elongp);

	movss	xmm0, DWORD PTR _Ec$[ebp]
	addss	xmm0, DWORD PTR __real@438d4c57
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FixAngle@CStar@@KAMM@Z			; CStar::FixAngle
	add	esp, 4
	fstp	DWORD PTR _Lambdasun$[ebp]

; 606  : 	float ml = FixAngle (13.1763966f * Day + mmlong);

	movss	xmm0, DWORD PTR __real@4152d285
	mulss	xmm0, DWORD PTR _Day$[ebp]
	addss	xmm0, DWORD PTR __real@4281f370
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FixAngle@CStar@@KAMM@Z			; CStar::FixAngle
	add	esp, 4
	fstp	DWORD PTR _ml$[ebp]

; 607  : 	float MM = FixAngle (ml - 0.1114041f * Day - mmlongp);

	movss	xmm0, DWORD PTR __real@3de427d5
	mulss	xmm0, DWORD PTR _Day$[ebp]
	movss	xmm1, DWORD PTR _ml$[ebp]
	subss	xmm1, xmm0
	subss	xmm1, DWORD PTR __real@43aeb108
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?FixAngle@CStar@@KAMM@Z			; CStar::FixAngle
	add	esp, 4
	fstp	DWORD PTR _MM$[ebp]

; 608  : //	float MN = FixAngle (mlnode - 0.0529539f * Day);
; 609  : 	float Ev = 1.2739f * (float) sin (degtorad(2 * (ml - Lambdasun) - MM));

	movss	xmm0, DWORD PTR _ml$[ebp]
	subss	xmm0, DWORD PTR _Lambdasun$[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	subss	xmm0, DWORD PTR _MM$[ebp]
	mulss	xmm0, DWORD PTR __real@40490fdb
	divss	xmm0, DWORD PTR __real@43340000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv269[ebp]
	movss	xmm0, DWORD PTR tv269[ebp]
	mulss	xmm0, DWORD PTR __real@3fa30f28
	movss	DWORD PTR _Ev$[ebp], xmm0

; 610  : 	float sinM = (float) sin(degtorad(M));

	movss	xmm0, DWORD PTR _M$[ebp]
	mulss	xmm0, DWORD PTR __real@40490fdb
	divss	xmm0, DWORD PTR __real@43340000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _sinM$[ebp]

; 611  : 	float Ae = 0.1858f * sinM;

	movss	xmm0, DWORD PTR __real@3e3e425b
	mulss	xmm0, DWORD PTR _sinM$[ebp]
	movss	DWORD PTR _Ae$[ebp], xmm0

; 612  : 	float A3 = 0.37f * sinM;

	movss	xmm0, DWORD PTR __real@3ebd70a4
	mulss	xmm0, DWORD PTR _sinM$[ebp]
	movss	DWORD PTR _A3$[ebp], xmm0

; 613  : 	float MmP = degtorad((MM + Ev - Ae - A3));

	movss	xmm0, DWORD PTR _MM$[ebp]
	addss	xmm0, DWORD PTR _Ev$[ebp]
	subss	xmm0, DWORD PTR _Ae$[ebp]
	subss	xmm0, DWORD PTR _A3$[ebp]
	mulss	xmm0, DWORD PTR __real@40490fdb
	divss	xmm0, DWORD PTR __real@43340000
	movss	DWORD PTR _MmP$[ebp], xmm0

; 614  : 	float mEc = 6.2886f * (float) sin(MmP);

	push	ecx
	movss	xmm0, DWORD PTR _MmP$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv283[ebp]
	movss	xmm0, DWORD PTR tv283[ebp]
	mulss	xmm0, DWORD PTR __real@40c93c36
	movss	DWORD PTR _mEc$[ebp], xmm0

; 615  : 	float A4 = 0.214f * (float) sin (2 * MmP);

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _MmP$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv290[ebp]
	movss	xmm0, DWORD PTR tv290[ebp]
	mulss	xmm0, DWORD PTR __real@3e5b22d1
	movss	DWORD PTR _A4$[ebp], xmm0

; 616  : 	float lP = ml + Ev + mEc - Ae + A4;

	movss	xmm0, DWORD PTR _ml$[ebp]
	addss	xmm0, DWORD PTR _Ev$[ebp]
	addss	xmm0, DWORD PTR _mEc$[ebp]
	subss	xmm0, DWORD PTR _Ae$[ebp]
	addss	xmm0, DWORD PTR _A4$[ebp]
	movss	DWORD PTR _lP$[ebp], xmm0

; 617  : 	float V = 0.6583f * (float) sin(degtorad(2) * (lP-Lambdasun));

	movss	xmm0, DWORD PTR _lP$[ebp]
	subss	xmm0, DWORD PTR _Lambdasun$[ebp]
	mulss	xmm0, DWORD PTR __real@3d0efa35
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv299[ebp]
	movss	xmm0, DWORD PTR tv299[ebp]
	mulss	xmm0, DWORD PTR __real@3f288659
	movss	DWORD PTR _V$[ebp], xmm0

; 618  : 	float MoonAge = lP + V - Lambdasun;

	movss	xmm0, DWORD PTR _lP$[ebp]
	addss	xmm0, DWORD PTR _V$[ebp]
	subss	xmm0, DWORD PTR _Lambdasun$[ebp]
	movss	DWORD PTR _MoonAge$[ebp], xmm0

; 619  : 	MoonAge = GetRange(MoonAge+180.0f);

	movss	xmm0, DWORD PTR _MoonAge$[ebp]
	addss	xmm0, DWORD PTR __real@43340000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?GetRange@CStar@@KAMM@Z			; CStar::GetRange
	add	esp, 4
	fstp	DWORD PTR _MoonAge$[ebp]

; 620  : 	return MoonAge / 360.0f;

	movss	xmm0, DWORD PTR _MoonAge$[ebp]
	divss	xmm0, DWORD PTR __real@43b40000
	movss	DWORD PTR tv308[ebp], xmm0
	fld	DWORD PTR tv308[ebp]

; 621  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetMoonPhase@CStar@@SAMXZ ENDP				; CStar::GetMoonPhase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\weather\star.cpp
_TEXT	SEGMENT
_ra$ = -8						; size = 4
_dec$ = -4						; size = 4
_az$ = 8						; size = 4
_alt$ = 12						; size = 4
?CalculateMoonPosition@CStar@@SAXPAM0@Z PROC		; CStar::CalculateMoonPosition

; 681  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 682  : 	float ra, dec;
; 683  : 	GetMoonRaDec (&ra, &dec);

	lea	eax, DWORD PTR _dec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ra$[ebp]
	push	ecx
	call	?GetMoonRaDec@CStar@@SAXPAM0@Z		; CStar::GetMoonRaDec
	add	esp, 8

; 684  : 	ConvertPosition (ra, dec, &MoonAz, &MoonAlt);

	push	OFFSET ?MoonAlt@CStar@@1MA		; CStar::MoonAlt
	push	OFFSET ?MoonAz@CStar@@1MA		; CStar::MoonAz
	push	ecx
	movss	xmm0, DWORD PTR _dec$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ra$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?ConvertPosition@CStar@@SAXMMPAM0@Z	; CStar::ConvertPosition
	add	esp, 16					; 00000010H

; 685  : 	*az = MoonAz;

	mov	edx, DWORD PTR _az$[ebp]
	movss	xmm0, DWORD PTR ?MoonAz@CStar@@1MA
	movss	DWORD PTR [edx], xmm0

; 686  : 	*alt = MoonAlt;

	mov	eax, DWORD PTR _alt$[ebp]
	movss	xmm0, DWORD PTR ?MoonAlt@CStar@@1MA
	movss	DWORD PTR [eax], xmm0

; 687  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CalculateMoonPosition@CStar@@SAXPAM0@Z ENDP		; CStar::CalculateMoonPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\weather\star.cpp
_TEXT	SEGMENT
_ra$ = -8						; size = 4
_dec$ = -4						; size = 4
_az$ = 8						; size = 4
_alt$ = 12						; size = 4
?CalculateSunPosition@CStar@@SAXPAM0@Z PROC		; CStar::CalculateSunPosition

; 672  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 673  : 	float ra, dec;
; 674  : 	GetSunRaDec (&ra, &dec);

	lea	eax, DWORD PTR _dec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ra$[ebp]
	push	ecx
	call	?GetSunRaDec@CStar@@SAXPAM0@Z		; CStar::GetSunRaDec
	add	esp, 8

; 675  : 	ConvertPosition (ra, dec, &SunAz, &SunAlt);

	push	OFFSET ?SunAlt@CStar@@1MA		; CStar::SunAlt
	push	OFFSET ?SunAz@CStar@@1MA		; CStar::SunAz
	push	ecx
	movss	xmm0, DWORD PTR _dec$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ra$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?ConvertPosition@CStar@@SAXMMPAM0@Z	; CStar::ConvertPosition
	add	esp, 16					; 00000010H

; 676  : 	*az = SunAz;

	mov	edx, DWORD PTR _az$[ebp]
	movss	xmm0, DWORD PTR ?SunAz@CStar@@1MA
	movss	DWORD PTR [edx], xmm0

; 677  : 	*alt = SunAlt;

	mov	eax, DWORD PTR _alt$[ebp]
	movss	xmm0, DWORD PTR ?SunAlt@CStar@@1MA
	movss	DWORD PTR [eax], xmm0

; 678  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CalculateSunPosition@CStar@@SAXPAM0@Z ENDP		; CStar::CalculateSunPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\weather\star.cpp
_TEXT	SEGMENT
_sinHA$ = -36						; size = 4
_cosALT$ = -32						; size = 4
_cosHA$ = -28						; size = 4
_cosDEC$ = -24						; size = 4
_altitude$ = -20					; size = 4
_sinDEC$ = -16						; size = 4
_sinALT$ = -12						; size = 4
_HourAngle$ = -8					; size = 4
_azimuth$ = -4						; size = 4
_ra$ = 8						; size = 4
_dec$ = 12						; size = 4
_az$ = 16						; size = 4
_alt$ = 20						; size = 4
?ConvertPosition@CStar@@SAXMMPAM0@Z PROC		; CStar::ConvertPosition

; 483  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H

; 484  : 	float HourAngle = GetRangeRad(LocalSiderialTime - ra);

	movss	xmm0, DWORD PTR ?LocalSiderialTime@CStar@@1MA
	subss	xmm0, DWORD PTR _ra$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?GetRangeRad@CStar@@KAMM@Z		; CStar::GetRangeRad
	add	esp, 4
	fstp	DWORD PTR _HourAngle$[ebp]

; 485  : 	float sinDEC = (float) sin(dec);

	push	ecx
	movss	xmm0, DWORD PTR _dec$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _sinDEC$[ebp]

; 486  : 	float cosDEC = (float) cos(dec);

	push	ecx
	movss	xmm0, DWORD PTR _dec$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _cosDEC$[ebp]

; 487  : 	float cosHA = (float) cos(HourAngle);

	push	ecx
	movss	xmm0, DWORD PTR _HourAngle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _cosHA$[ebp]

; 488  : 	float sinHA = (float) sin(HourAngle);

	push	ecx
	movss	xmm0, DWORD PTR _HourAngle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _sinHA$[ebp]

; 489  : 	float sinALT = sinDEC * sinLatitude + cosDEC * cosLatitude * cosHA;

	movss	xmm0, DWORD PTR _sinDEC$[ebp]
	mulss	xmm0, DWORD PTR ?sinLatitude@CStar@@1MA
	movss	xmm1, DWORD PTR _cosDEC$[ebp]
	mulss	xmm1, DWORD PTR ?cosLatitude@CStar@@1MA
	mulss	xmm1, DWORD PTR _cosHA$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _sinALT$[ebp], xmm0

; 490  : 	float altitude = (float) asin(sinALT);

	push	ecx
	movss	xmm0, DWORD PTR _sinALT$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?asin@@YAMM@Z				; asin
	add	esp, 4
	fstp	DWORD PTR _altitude$[ebp]

; 491  : 	float cosALT = (float) cos(altitude);

	push	ecx
	movss	xmm0, DWORD PTR _altitude$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _cosALT$[ebp]

; 492  : 	float azimuth = (float) acos((sinDEC - sinALT * sinLatitude) / (cosALT * cosLatitude));

	movss	xmm0, DWORD PTR _sinALT$[ebp]
	mulss	xmm0, DWORD PTR ?sinLatitude@CStar@@1MA
	movss	xmm1, DWORD PTR _sinDEC$[ebp]
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR _cosALT$[ebp]
	mulss	xmm0, DWORD PTR ?cosLatitude@CStar@@1MA
	divss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?acos@@YAMM@Z				; acos
	add	esp, 4
	fstp	DWORD PTR _azimuth$[ebp]

; 493  : 	if (sinHA >= 0) azimuth = 2*PI - azimuth;

	movss	xmm0, DWORD PTR _sinHA$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN1@ConvertPos
	movss	xmm0, DWORD PTR __real@40c90fdb
	subss	xmm0, DWORD PTR _azimuth$[ebp]
	movss	DWORD PTR _azimuth$[ebp], xmm0
$LN1@ConvertPos:

; 494  : 
; 495  : 	*az = (float) azimuth;

	mov	eax, DWORD PTR _az$[ebp]
	movss	xmm0, DWORD PTR _azimuth$[ebp]
	movss	DWORD PTR [eax], xmm0

; 496  : 	*alt = (float) altitude;

	mov	ecx, DWORD PTR _alt$[ebp]
	movss	xmm0, DWORD PTR _altitude$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 497  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ConvertPosition@CStar@@SAXMMPAM0@Z ENDP		; CStar::ConvertPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\weather\star.cpp
_TEXT	SEGMENT
_sinAZ$ = -44						; size = 4
_cosAZ$ = -40						; size = 4
_sinHA$ = -36						; size = 4
_altitude$ = -32					; size = 4
_cosHA$ = -28						; size = 4
_cosDEC$ = -24						; size = 4
_sinDEC$ = -20						; size = 4
_HourAngle$ = -16					; size = 4
_sinALT$ = -12						; size = 4
_cosALT$ = -8						; size = 4
_azimuth$ = -4						; size = 4
_ra$ = 8						; size = 4
_dec$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_z$ = 24						; size = 4
?ConvertCoord@CStar@@SAXMMPAM00@Z PROC			; CStar::ConvertCoord

; 500  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH

; 501  : 	float HourAngle = GetRangeRad(LocalSiderialTime - ra);

	movss	xmm0, DWORD PTR ?LocalSiderialTime@CStar@@1MA
	subss	xmm0, DWORD PTR _ra$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?GetRangeRad@CStar@@KAMM@Z		; CStar::GetRangeRad
	add	esp, 4
	fstp	DWORD PTR _HourAngle$[ebp]

; 502  : 	float sinDEC = (float) sin(dec);

	push	ecx
	movss	xmm0, DWORD PTR _dec$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _sinDEC$[ebp]

; 503  : 	float cosDEC = (float) cos(dec);

	push	ecx
	movss	xmm0, DWORD PTR _dec$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _cosDEC$[ebp]

; 504  : 	float cosHA = (float) cos(HourAngle);

	push	ecx
	movss	xmm0, DWORD PTR _HourAngle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _cosHA$[ebp]

; 505  : 	float sinHA = (float) sin(HourAngle);

	push	ecx
	movss	xmm0, DWORD PTR _HourAngle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _sinHA$[ebp]

; 506  : 	float sinALT = sinDEC * sinLatitude + cosDEC * cosLatitude * cosHA;

	movss	xmm0, DWORD PTR _sinDEC$[ebp]
	mulss	xmm0, DWORD PTR ?sinLatitude@CStar@@1MA
	movss	xmm1, DWORD PTR _cosDEC$[ebp]
	mulss	xmm1, DWORD PTR ?cosLatitude@CStar@@1MA
	mulss	xmm1, DWORD PTR _cosHA$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _sinALT$[ebp], xmm0

; 507  : 	float altitude = (float) asin(sinALT);

	push	ecx
	movss	xmm0, DWORD PTR _sinALT$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?asin@@YAMM@Z				; asin
	add	esp, 4
	fstp	DWORD PTR _altitude$[ebp]

; 508  : 	float cosALT = (float) cos(altitude);

	push	ecx
	movss	xmm0, DWORD PTR _altitude$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _cosALT$[ebp]

; 509  : 	float azimuth = (float) acos((sinDEC - sinALT * sinLatitude) / (cosALT * cosLatitude));

	movss	xmm0, DWORD PTR _sinALT$[ebp]
	mulss	xmm0, DWORD PTR ?sinLatitude@CStar@@1MA
	movss	xmm1, DWORD PTR _sinDEC$[ebp]
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR _cosALT$[ebp]
	mulss	xmm0, DWORD PTR ?cosLatitude@CStar@@1MA
	divss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?acos@@YAMM@Z				; acos
	add	esp, 4
	fstp	DWORD PTR _azimuth$[ebp]

; 510  : 	if (sinHA >= 0) azimuth = 2*PI - azimuth;

	movss	xmm0, DWORD PTR _sinHA$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN1@ConvertCoo
	movss	xmm0, DWORD PTR __real@40c90fdb
	subss	xmm0, DWORD PTR _azimuth$[ebp]
	movss	DWORD PTR _azimuth$[ebp], xmm0
$LN1@ConvertCoo:

; 511  : 	float sinAZ = (float) sin(azimuth);

	push	ecx
	movss	xmm0, DWORD PTR _azimuth$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _sinAZ$[ebp]

; 512  : 	float cosAZ = (float) cos(azimuth);

	push	ecx
	movss	xmm0, DWORD PTR _azimuth$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _cosAZ$[ebp]

; 513  : 
; 514  : // X = North Y = East Z = Down
; 515  : 	*x = (float) (cosAZ * cosALT);

	movss	xmm0, DWORD PTR _cosAZ$[ebp]
	mulss	xmm0, DWORD PTR _cosALT$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax], xmm0

; 516  : 	*y = (float) (sinAZ * cosALT);

	movss	xmm0, DWORD PTR _sinAZ$[ebp]
	mulss	xmm0, DWORD PTR _cosALT$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 517  : 	*z = (float) (-sinALT);

	movss	xmm0, DWORD PTR _sinALT$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _z$[ebp]
	movss	DWORD PTR [edx], xmm0

; 518  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ConvertCoord@CStar@@SAXMMPAM00@Z ENDP			; CStar::ConvertCoord
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\weather\star.cpp
_TEXT	SEGMENT
tv554 = -188						; size = 4
tv327 = -184						; size = 4
_ze$ = -180						; size = 4
tv375 = -176						; size = 4
_xg$ = -172						; size = 4
tv403 = -168						; size = 4
tv520 = -164						; size = 4
tv351 = -160						; size = 4
tv513 = -156						; size = 4
tv573 = -152						; size = 4
tv506 = -148						; size = 4
tv284 = -144						; size = 4
tv495 = -140						; size = 4
tv363 = -136						; size = 4
_gp$ = -132						; size = 4
tv339 = -128						; size = 4
tv647 = -124						; size = 4
tv427 = -120						; size = 4
tv488 = -116						; size = 4
tv415 = -112						; size = 4
tv645 = -108						; size = 4
tv571 = -104						; size = 4
tv476 = -100						; size = 4
tv569 = -96						; size = 4
tv643 = -92						; size = 4
tv567 = -88						; size = 4
tv464 = -84						; size = 4
tv565 = -80						; size = 4
tv451 = -76						; size = 4
tv563 = -72						; size = 4
tv641 = -68						; size = 4
tv561 = -64						; size = 4
tv439 = -60						; size = 4
tv575 = -56						; size = 4
tv387 = -52						; size = 4
_cosecl$ = -48						; size = 4
_bm$ = -44						; size = 4
_zg$ = -40						; size = 4
_ecl$ = -36						; size = 4
_sinecl$ = -32						; size = 4
_yg$ = -28						; size = 4
_cosbm$ = -24						; size = 4
_ye$ = -20						; size = 4
_xe$ = -16						; size = 4
_rm$ = -12						; size = 4
_l$ = -8						; size = 4
_t$ = -4						; size = 4
_ra$ = 8						; size = 4
_dec$ = 12						; size = 4
?GetMoonRaDec@CStar@@SAXPAM0@Z PROC			; CStar::GetMoonRaDec

; 636  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 188				; 000000bcH

; 637  : 	float t = degtorad(deltaJulian) / 36525.0f;

	movss	xmm0, DWORD PTR ?deltaJulian@CStar@@1MA
	mulss	xmm0, DWORD PTR __real@40490fdb
	divss	xmm0, DWORD PTR __real@43340000
	divss	xmm0, DWORD PTR __real@470ead00
	movss	DWORD PTR _t$[ebp], xmm0

; 638  : 	float l =								 GetRangeRad(degtorad(218.32f) + 481267.883f * t)
; 639  : 				+ degtorad(6.29f)*(float)sin(GetRangeRad(degtorad(134.9f)  + 477198.85f  * t))
; 640  : 				- degtorad(1.27f)*(float)sin(GetRangeRad(degtorad(259.2f)  - 413335.38f  * t))
; 641  : 				+ degtorad(0.66f)*(float)sin(GetRangeRad(degtorad(235.7f)  + 890534.23f  * t))
; 642  : 				+ degtorad(0.21f)*(float)sin(GetRangeRad(degtorad(269.9f)  + 954397.7f   * t))
; 643  : 				- degtorad(0.19f)*(float)sin(GetRangeRad(degtorad(357.5f)  +  35999.05f  * t))
; 644  : 				- degtorad(0.11f)*(float)sin(GetRangeRad(degtorad(186.6f)  + 966404.05f  * t));

	movss	xmm0, DWORD PTR __real@48eafe7c
	mulss	xmm0, DWORD PTR _t$[ebp]
	addss	xmm0, DWORD PTR __real@4073dda5
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?GetRangeRad@CStar@@KAMM@Z		; CStar::GetRangeRad
	add	esp, 4
	fstp	DWORD PTR tv284[ebp]
	movss	xmm0, DWORD PTR tv284[ebp]
	movss	xmm1, DWORD PTR __real@48e901db
	mulss	xmm1, DWORD PTR _t$[ebp]
	addss	xmm1, DWORD PTR __real@4016af4b
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv561[ebp], xmm0
	call	?GetRangeRad@CStar@@KAMM@Z		; CStar::GetRangeRad
	fstp	DWORD PTR [esp]
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv327[ebp]
	movss	xmm0, DWORD PTR tv327[ebp]
	mulss	xmm0, DWORD PTR __real@3de0d4f9
	movss	xmm1, DWORD PTR tv561[ebp]
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@48c9d2ec
	mulss	xmm0, DWORD PTR _t$[ebp]
	movss	xmm2, DWORD PTR __real@4090c3bd
	subss	xmm2, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm2
	movss	DWORD PTR tv563[ebp], xmm1
	call	?GetRangeRad@CStar@@KAMM@Z		; CStar::GetRangeRad
	fstp	DWORD PTR [esp]
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv339[ebp]
	movss	xmm0, DWORD PTR tv339[ebp]
	mulss	xmm0, DWORD PTR __real@3cb594ce
	movss	xmm1, DWORD PTR tv563[ebp]
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@49596a64
	mulss	xmm0, DWORD PTR _t$[ebp]
	addss	xmm0, DWORD PTR __real@4083a3c4
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	DWORD PTR tv565[ebp], xmm1
	call	?GetRangeRad@CStar@@KAMM@Z		; CStar::GetRangeRad
	fstp	DWORD PTR [esp]
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv351[ebp]
	movss	xmm0, DWORD PTR tv351[ebp]
	mulss	xmm0, DWORD PTR __real@3c3cbaeb
	movss	xmm1, DWORD PTR tv565[ebp]
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@496901db
	mulss	xmm0, DWORD PTR _t$[ebp]
	addss	xmm0, DWORD PTR __real@4096bd97
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	DWORD PTR tv567[ebp], xmm1
	call	?GetRangeRad@CStar@@KAMM@Z		; CStar::GetRangeRad
	fstp	DWORD PTR [esp]
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv363[ebp]
	movss	xmm0, DWORD PTR tv363[ebp]
	mulss	xmm0, DWORD PTR __real@3b7033b5
	movss	xmm1, DWORD PTR tv567[ebp]
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@470c9f0d
	mulss	xmm0, DWORD PTR _t$[ebp]
	addss	xmm0, DWORD PTR __real@40c7aa69
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	DWORD PTR tv569[ebp], xmm1
	call	?GetRangeRad@CStar@@KAMM@Z		; CStar::GetRangeRad
	fstp	DWORD PTR [esp]
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv375[ebp]
	movss	xmm0, DWORD PTR tv375[ebp]
	mulss	xmm0, DWORD PTR __real@3b59535b
	movss	xmm1, DWORD PTR tv569[ebp]
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@496bf041
	mulss	xmm0, DWORD PTR _t$[ebp]
	addss	xmm0, DWORD PTR __real@40506f29
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	DWORD PTR tv571[ebp], xmm1
	call	?GetRangeRad@CStar@@KAMM@Z		; CStar::GetRangeRad
	fstp	DWORD PTR [esp]
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv387[ebp]
	movss	xmm0, DWORD PTR tv387[ebp]
	mulss	xmm0, DWORD PTR __real@3afba3e4
	movss	xmm1, DWORD PTR tv571[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _l$[ebp], xmm1

; 645  : 	l = GetRangeRad(l);

	push	ecx
	movss	xmm0, DWORD PTR _l$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?GetRangeRad@CStar@@KAMM@Z		; CStar::GetRangeRad
	add	esp, 4
	fstp	DWORD PTR _l$[ebp]

; 646  : 	float bm =    degtorad(5.13f)*(float)sin(GetRangeRad(degtorad( 93.3f)  + 483202.03f  * t))
; 647  : 				+ degtorad(0.28f)*(float)sin(GetRangeRad(degtorad(228.2f)  + 960400.87f  * t))
; 648  : 				- degtorad(0.28f)*(float)sin(GetRangeRad(degtorad(318.3f)  +   6003.18f  * t))
; 649  : 				- degtorad(0.17f)*(float)sin(GetRangeRad(degtorad(217.6f)  - 407332.2f   * t));

	movss	xmm0, DWORD PTR __real@48ebf041
	mulss	xmm0, DWORD PTR _t$[ebp]
	addss	xmm0, DWORD PTR __real@3fd06f29
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?GetRangeRad@CStar@@KAMM@Z		; CStar::GetRangeRad
	fstp	DWORD PTR [esp]
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv403[ebp]
	movss	xmm0, DWORD PTR tv403[ebp]
	mulss	xmm0, DWORD PTR __real@3db75e55
	movss	xmm1, DWORD PTR __real@496a790e
	mulss	xmm1, DWORD PTR _t$[ebp]
	addss	xmm1, DWORD PTR __real@407ee6df
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv573[ebp], xmm0
	call	?GetRangeRad@CStar@@KAMM@Z		; CStar::GetRangeRad
	fstp	DWORD PTR [esp]
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv415[ebp]
	movss	xmm0, DWORD PTR tv415[ebp]
	mulss	xmm0, DWORD PTR __real@3ba02279
	movss	xmm1, DWORD PTR tv573[ebp]
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@45bb9971
	mulss	xmm0, DWORD PTR _t$[ebp]
	addss	xmm0, DWORD PTR __real@40b1c5b2
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	DWORD PTR tv575[ebp], xmm1
	call	?GetRangeRad@CStar@@KAMM@Z		; CStar::GetRangeRad
	fstp	DWORD PTR [esp]
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv427[ebp]
	movss	xmm0, DWORD PTR tv427[ebp]
	mulss	xmm0, DWORD PTR __real@3ba02279
	movss	xmm1, DWORD PTR tv575[ebp]
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@48c6e486
	mulss	xmm0, DWORD PTR _t$[ebp]
	movss	xmm2, DWORD PTR __real@40730fc1
	subss	xmm2, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm2
	movss	DWORD PTR tv641[ebp], xmm1
	call	?GetRangeRad@CStar@@KAMM@Z		; CStar::GetRangeRad
	fstp	DWORD PTR [esp]
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv439[ebp]
	movss	xmm0, DWORD PTR tv439[ebp]
	mulss	xmm0, DWORD PTR __real@3b427301
	movss	xmm1, DWORD PTR tv641[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _bm$[ebp], xmm1

; 650  : 	float gp =    degtorad(0.9508f)
; 651  : 				+ degtorad(0.0518f)*(float)cos(GetRangeRad(degtorad(134.9f) + 477198.85f * t))
; 652  : 				+ degtorad(0.0095f)*(float)cos(GetRangeRad(degtorad(259.2f) - 413335.38f * t))
; 653  : 				+ degtorad(0.0078f)*(float)cos(GetRangeRad(degtorad(235.7f) + 890534.23f * t))
; 654  : 				+ degtorad(0.0028f)*(float)cos(GetRangeRad(degtorad(269.9f) + 954397.7f  * t));

	movss	xmm0, DWORD PTR __real@48e901db
	mulss	xmm0, DWORD PTR _t$[ebp]
	addss	xmm0, DWORD PTR __real@4016af4b
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?GetRangeRad@CStar@@KAMM@Z		; CStar::GetRangeRad
	fstp	DWORD PTR [esp]
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR tv451[ebp]
	movss	xmm0, DWORD PTR tv451[ebp]
	mulss	xmm0, DWORD PTR __real@3a6cffd2
	addss	xmm0, DWORD PTR __real@3c87f161
	movss	xmm1, DWORD PTR __real@48c9d2ec
	mulss	xmm1, DWORD PTR _t$[ebp]
	movss	xmm2, DWORD PTR __real@4090c3bd
	subss	xmm2, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm2
	movss	DWORD PTR tv643[ebp], xmm0
	call	?GetRangeRad@CStar@@KAMM@Z		; CStar::GetRangeRad
	fstp	DWORD PTR [esp]
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR tv464[ebp]
	movss	xmm0, DWORD PTR tv464[ebp]
	mulss	xmm0, DWORD PTR __real@392ddc49
	movss	xmm1, DWORD PTR tv643[ebp]
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@49596a64
	mulss	xmm0, DWORD PTR _t$[ebp]
	addss	xmm0, DWORD PTR __real@4083a3c4
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	DWORD PTR tv645[ebp], xmm1
	call	?GetRangeRad@CStar@@KAMM@Z		; CStar::GetRangeRad
	fstp	DWORD PTR [esp]
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR tv476[ebp]
	movss	xmm0, DWORD PTR tv476[ebp]
	mulss	xmm0, DWORD PTR __real@390ebfa5
	movss	xmm1, DWORD PTR tv645[ebp]
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@496901db
	mulss	xmm0, DWORD PTR _t$[ebp]
	addss	xmm0, DWORD PTR __real@4096bd97
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	DWORD PTR tv647[ebp], xmm1
	call	?GetRangeRad@CStar@@KAMM@Z		; CStar::GetRangeRad
	fstp	DWORD PTR [esp]
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR tv488[ebp]
	movss	xmm0, DWORD PTR tv488[ebp]
	mulss	xmm0, DWORD PTR __real@384cf8ec
	movss	xmm1, DWORD PTR tv647[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _gp$[ebp], xmm1

; 655  : //	float sdia = 0.2725f * gp;
; 656  : 	float rm = 1.0f / (float) sin(gp);

	push	ecx
	movss	xmm0, DWORD PTR _gp$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv495[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR tv495[ebp]
	movss	DWORD PTR _rm$[ebp], xmm0

; 657  : 	float cosbm = (float) cos(bm);

	push	ecx
	movss	xmm0, DWORD PTR _bm$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _cosbm$[ebp]

; 658  : 	float xg = rm * (float) cos(l) * cosbm;

	push	ecx
	movss	xmm0, DWORD PTR _l$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR tv506[ebp]
	movss	xmm0, DWORD PTR tv506[ebp]
	mulss	xmm0, DWORD PTR _rm$[ebp]
	mulss	xmm0, DWORD PTR _cosbm$[ebp]
	movss	DWORD PTR _xg$[ebp], xmm0

; 659  : 	float yg = rm * (float) sin(l) * cosbm;

	push	ecx
	movss	xmm0, DWORD PTR _l$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv513[ebp]
	movss	xmm0, DWORD PTR tv513[ebp]
	mulss	xmm0, DWORD PTR _rm$[ebp]
	mulss	xmm0, DWORD PTR _cosbm$[ebp]
	movss	DWORD PTR _yg$[ebp], xmm0

; 660  : 	float zg = rm * (float) sin(bm);

	push	ecx
	movss	xmm0, DWORD PTR _bm$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv520[ebp]
	movss	xmm0, DWORD PTR tv520[ebp]
	mulss	xmm0, DWORD PTR _rm$[ebp]
	movss	DWORD PTR _zg$[ebp], xmm0

; 661  : 	float ecl = degtorad(23.4393f) - degtorad(3.563e-7f) * deltaJulian;

	movss	xmm0, DWORD PTR __real@31d5ab75
	mulss	xmm0, DWORD PTR ?deltaJulian@CStar@@1MA
	movss	xmm1, DWORD PTR __real@3ed174a2
	subss	xmm1, xmm0
	movss	DWORD PTR _ecl$[ebp], xmm1

; 662  : 	float cosecl = (float) cos(ecl);

	push	ecx
	movss	xmm0, DWORD PTR _ecl$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _cosecl$[ebp]

; 663  : 	float sinecl = (float) sin(ecl);

	push	ecx
	movss	xmm0, DWORD PTR _ecl$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _sinecl$[ebp]

; 664  : 	float xe = xg;

	movss	xmm0, DWORD PTR _xg$[ebp]
	movss	DWORD PTR _xe$[ebp], xmm0

; 665  : 	float ye = yg * cosecl - zg * sinecl;

	movss	xmm0, DWORD PTR _yg$[ebp]
	mulss	xmm0, DWORD PTR _cosecl$[ebp]
	movss	xmm1, DWORD PTR _zg$[ebp]
	mulss	xmm1, DWORD PTR _sinecl$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _ye$[ebp], xmm0

; 666  : 	float ze = yg * sinecl + zg * cosecl;

	movss	xmm0, DWORD PTR _yg$[ebp]
	mulss	xmm0, DWORD PTR _sinecl$[ebp]
	movss	xmm1, DWORD PTR _zg$[ebp]
	mulss	xmm1, DWORD PTR _cosecl$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _ze$[ebp], xmm0

; 667  : 	*ra = GetRangeRad((float) atan2(ye, xe));

	push	ecx
	movss	xmm0, DWORD PTR _xe$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ye$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?atan2@@YAMMM@Z				; atan2
	add	esp, 4
	fstp	DWORD PTR [esp]
	call	?GetRangeRad@CStar@@KAMM@Z		; CStar::GetRangeRad
	add	esp, 4
	mov	eax, DWORD PTR _ra$[ebp]
	fstp	DWORD PTR [eax]

; 668  : 	*dec = (float) atan (ze/sqrt(xe*xe + ye*ye));

	movss	xmm0, DWORD PTR _xe$[ebp]
	mulss	xmm0, DWORD PTR _xe$[ebp]
	movss	xmm1, DWORD PTR _ye$[ebp]
	mulss	xmm1, DWORD PTR _ye$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv554[ebp]
	movss	xmm0, DWORD PTR _ze$[ebp]
	divss	xmm0, DWORD PTR tv554[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	mov	ecx, DWORD PTR _dec$[ebp]
	fstp	DWORD PTR [ecx]

; 669  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetMoonRaDec@CStar@@SAXPAM0@Z ENDP			; CStar::GetMoonRaDec
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\weather\star.cpp
_TEXT	SEGMENT
tv202 = -44						; size = 4
tv186 = -40						; size = 4
tv208 = -36						; size = 4
tv163 = -32						; size = 4
_g2$ = -28						; size = 4
_L$ = -24						; size = 4
tv155 = -20						; size = 4
_sinlambda$ = -16					; size = 4
_epsilon$ = -12						; size = 4
_lambda$ = -8						; size = 4
_g$ = -4						; size = 4
_ra$ = 8						; size = 4
_dec$ = 12						; size = 4
?GetSunRaDec@CStar@@SAXPAM0@Z PROC			; CStar::GetSunRaDec

; 624  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH

; 625  : 	float g = GetRangeRad(degtorad(357.528f) + degtorad(0.9856003f)*deltaJulian);

	movss	xmm0, DWORD PTR __real@3c8ceb26
	mulss	xmm0, DWORD PTR ?deltaJulian@CStar@@1MA
	addss	xmm0, DWORD PTR __real@40c7ae6b
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?GetRangeRad@CStar@@KAMM@Z		; CStar::GetRangeRad
	add	esp, 4
	fstp	DWORD PTR _g$[ebp]

; 626  : 	float g2 = g * 2;

	movss	xmm0, DWORD PTR _g$[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _g2$[ebp], xmm0

; 627  : 	float L = GetRangeRad(degtorad(280.461f) + degtorad(0.9856474f)*deltaJulian);

	movss	xmm0, DWORD PTR __real@3c8cecdf
	mulss	xmm0, DWORD PTR ?deltaJulian@CStar@@1MA
	addss	xmm0, DWORD PTR __real@409ca394
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?GetRangeRad@CStar@@KAMM@Z		; CStar::GetRangeRad
	add	esp, 4
	fstp	DWORD PTR _L$[ebp]

; 628  : 	float lambda = GetRangeRad(L + degtorad(1.915f) * (float) sin(g) + degtorad(0.02f) * (float) sin(g2));

	push	ecx
	movss	xmm0, DWORD PTR _g$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv155[ebp]
	movss	xmm0, DWORD PTR tv155[ebp]
	mulss	xmm0, DWORD PTR __real@3d08e69d
	addss	xmm0, DWORD PTR _L$[ebp]
	push	ecx
	movss	xmm1, DWORD PTR _g2$[ebp]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv208[ebp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv163[ebp]
	movss	xmm0, DWORD PTR tv163[ebp]
	mulss	xmm0, DWORD PTR __real@39b702d4
	movss	xmm1, DWORD PTR tv208[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?GetRangeRad@CStar@@KAMM@Z		; CStar::GetRangeRad
	add	esp, 4
	fstp	DWORD PTR _lambda$[ebp]

; 629  : 	float epsilon = GetRangeRad (degtorad(23.439f) - degtorad(0.0000004f)*deltaJulian);

	movss	xmm0, DWORD PTR __real@31efe051
	mulss	xmm0, DWORD PTR ?deltaJulian@CStar@@1MA
	movss	xmm1, DWORD PTR __real@3ed173f2
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?GetRangeRad@CStar@@KAMM@Z		; CStar::GetRangeRad
	add	esp, 4
	fstp	DWORD PTR _epsilon$[ebp]

; 630  : 	float sinlambda = (float) sin(lambda);

	push	ecx
	movss	xmm0, DWORD PTR _lambda$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _sinlambda$[ebp]

; 631  : 	*ra = GetRangeRad((float) atan2 (cos(epsilon) * sinlambda, cos(lambda)));

	push	ecx
	movss	xmm0, DWORD PTR _lambda$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _epsilon$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR tv186[ebp]
	movss	xmm0, DWORD PTR tv186[ebp]
	mulss	xmm0, DWORD PTR _sinlambda$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?atan2@@YAMMM@Z				; atan2
	add	esp, 4
	fstp	DWORD PTR [esp]
	call	?GetRangeRad@CStar@@KAMM@Z		; CStar::GetRangeRad
	add	esp, 4
	mov	eax, DWORD PTR _ra$[ebp]
	fstp	DWORD PTR [eax]

; 632  : 	*dec = (float) asin (sin(epsilon) * sinlambda);

	push	ecx
	movss	xmm0, DWORD PTR _epsilon$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv202[ebp]
	movss	xmm0, DWORD PTR tv202[ebp]
	mulss	xmm0, DWORD PTR _sinlambda$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?asin@@YAMM@Z				; asin
	add	esp, 4
	mov	ecx, DWORD PTR _dec$[ebp]
	fstp	DWORD PTR [ecx]

; 633  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetSunRaDec@CStar@@SAXPAM0@Z ENDP			; CStar::GetSunRaDec
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\weather\star.cpp
_TEXT	SEGMENT
_intensity$1 = -16					; size = 4
_i$ = -12						; size = 4
_star$ = -8						; size = 4
_coord$ = -4						; size = 4
?UpdateStar@CStar@@SAXXZ PROC				; CStar::UpdateStar

; 416  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 417  : 	StarRecord *star = CurrentStarData -> star;

	mov	eax, DWORD PTR ?CurrentStarData@CStar@@1PAUStarData@@A ; CStar::CurrentStarData
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _star$[ebp], ecx

; 418  : 	StarCoord *coord = CurrentStarData -> coord;

	mov	edx, DWORD PTR ?CurrentStarData@CStar@@1PAUStarData@@A ; CStar::CurrentStarData
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _coord$[ebp], eax

; 419  : 	CurrentStarData -> totalcoord = 0;

	mov	ecx, DWORD PTR ?CurrentStarData@CStar@@1PAUStarData@@A ; CStar::CurrentStarData
	mov	DWORD PTR [ecx+4], 0

; 420  : 	int i;
; 421  : 	for (i=0; i < CurrentStarData -> totalstar; i++, star++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@UpdateStar
$LN8@UpdateStar:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	mov	eax, DWORD PTR _star$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _star$[ebp], eax
$LN9@UpdateStar:
	mov	ecx, DWORD PTR ?CurrentStarData@CStar@@1PAUStarData@@A ; CStar::CurrentStarData
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jge	$LN7@UpdateStar

; 422  : 		if (star -> color < minStarIntensity) continue;	// skip dim star

	mov	eax, DWORD PTR _star$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR ?minStarIntensity@CStar@@1HA ; CStar::minStarIntensity
	jge	SHORT $LN6@UpdateStar
	jmp	SHORT $LN8@UpdateStar
$LN6@UpdateStar:

; 423  : 		if (CalculateStarCoord (star -> ra, star -> dec, coord)) {

	mov	edx, DWORD PTR _coord$[ebp]
	push	edx
	mov	eax, DWORD PTR _star$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _star$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR [esp], xmm0
	call	?CalculateStarCoord@CStar@@KAHMMPAUStarCoord@@@Z ; CStar::CalculateStarCoord
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN5@UpdateStar

; 424  : 			if (InsideRange(coord -> az, SunAz) && InsideRange(coord -> alt, SunAlt))

	push	ecx
	movss	xmm0, DWORD PTR ?SunAz@CStar@@1MA
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _coord$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+16]
	movss	DWORD PTR [esp], xmm0
	call	?InsideRange@CStar@@KAHMM@Z		; CStar::InsideRange
	add	esp, 8
	test	eax, eax
	je	SHORT $LN4@UpdateStar
	push	ecx
	movss	xmm0, DWORD PTR ?SunAlt@CStar@@1MA
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _coord$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR [esp], xmm0
	call	?InsideRange@CStar@@KAHMM@Z		; CStar::InsideRange
	add	esp, 8
	test	eax, eax
	je	SHORT $LN4@UpdateStar

; 425  : 				coord -> flag |= STAR_BEHIND_SUN;

	mov	ecx, DWORD PTR _coord$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	or	edx, 1
	mov	eax, DWORD PTR _coord$[ebp]
	mov	DWORD PTR [eax+24], edx
$LN4@UpdateStar:

; 426  : 			if (InsideRange(coord -> az, MoonAz) && InsideRange(coord -> alt, MoonAlt))

	push	ecx
	movss	xmm0, DWORD PTR ?MoonAz@CStar@@1MA
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _coord$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR [esp], xmm0
	call	?InsideRange@CStar@@KAHMM@Z		; CStar::InsideRange
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@UpdateStar
	push	ecx
	movss	xmm0, DWORD PTR ?MoonAlt@CStar@@1MA
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _coord$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+20]
	movss	DWORD PTR [esp], xmm0
	call	?InsideRange@CStar@@KAHMM@Z		; CStar::InsideRange
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@UpdateStar

; 427  : 				coord -> flag |= STAR_BEHIND_SUN;

	mov	eax, DWORD PTR _coord$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	or	ecx, 1
	mov	edx, DWORD PTR _coord$[ebp]
	mov	DWORD PTR [edx+24], ecx
$LN3@UpdateStar:

; 428  : 			if (coord -> alt < HorizonRange) {

	mov	eax, DWORD PTR _coord$[ebp]
	movss	xmm0, DWORD PTR ?HorizonRange@CStar@@1MA
	comiss	xmm0, DWORD PTR [eax+20]
	jbe	SHORT $LN2@UpdateStar

; 429  : 				float intensity = (coord -> alt - Horizon) * IntensityRange;

	mov	ecx, DWORD PTR _coord$[ebp]
	movss	xmm0, DWORD PTR [ecx+20]
	subss	xmm0, DWORD PTR ?Horizon@CStar@@1MA
	mulss	xmm0, DWORD PTR ?IntensityRange@CStar@@1MA
	movss	DWORD PTR _intensity$1[ebp], xmm0

; 430  : 				coord -> color = FloatToInt32(intensity * star -> color);

	mov	edx, DWORD PTR _star$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+8]
	mulss	xmm0, DWORD PTR _intensity$1[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, DWORD PTR _coord$[ebp]
	mov	DWORD PTR [ecx+12], eax
	jmp	SHORT $LN1@UpdateStar
$LN2@UpdateStar:

; 431  : 			}
; 432  : 			else coord -> color = star -> color;

	mov	edx, DWORD PTR _coord$[ebp]
	mov	eax, DWORD PTR _star$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+12], ecx
$LN1@UpdateStar:

; 433  : 			coord++;

	mov	edx, DWORD PTR _coord$[ebp]
	add	edx, 28					; 0000001cH
	mov	DWORD PTR _coord$[ebp], edx

; 434  : 			CurrentStarData -> totalcoord++;

	mov	eax, DWORD PTR ?CurrentStarData@CStar@@1PAUStarData@@A ; CStar::CurrentStarData
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR ?CurrentStarData@CStar@@1PAUStarData@@A ; CStar::CurrentStarData
	mov	DWORD PTR [edx+4], ecx
$LN5@UpdateStar:

; 435  : 		}
; 436  : 	}

	jmp	$LN8@UpdateStar
$LN7@UpdateStar:

; 437  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateStar@CStar@@SAXXZ ENDP				; CStar::UpdateStar
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\weather\star.cpp
_TEXT	SEGMENT
_horizon$ = 8						; size = 4
_range$ = 12						; size = 4
?SetHorizon@CStar@@SAXMM@Z PROC				; CStar::SetHorizon

; 695  : { 

	push	ebp
	mov	ebp, esp

; 696  : 	Horizon = horizon; 

	movss	xmm0, DWORD PTR _horizon$[ebp]
	movss	DWORD PTR ?Horizon@CStar@@1MA, xmm0

; 697  : 	HorizonRange = horizon + range; 

	movss	xmm0, DWORD PTR _horizon$[ebp]
	addss	xmm0, DWORD PTR _range$[ebp]
	movss	DWORD PTR ?HorizonRange@CStar@@1MA, xmm0

; 698  : 	IntensityRange = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?IntensityRange@CStar@@1MA, xmm0

; 699  : 	if (range) IntensityRange /= range;

	movss	xmm0, DWORD PTR _range$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN1@SetHorizon
	movss	xmm0, DWORD PTR ?IntensityRange@CStar@@1MA
	divss	xmm0, DWORD PTR _range$[ebp]
	movss	DWORD PTR ?IntensityRange@CStar@@1MA, xmm0
$LN1@SetHorizon:

; 700  : }

	pop	ebp
	ret	0
?SetHorizon@CStar@@SAXMM@Z ENDP				; CStar::SetHorizon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\weather\star.cpp
_TEXT	SEGMENT
_latitude$ = 8						; size = 4
_longitude$ = 12					; size = 4
?SetLocation@CStar@@SAXMM@Z PROC			; CStar::SetLocation

; 521  : {

	push	ebp
	mov	ebp, esp

; 522  : 	Latitude = degtorad(latitude);

	movss	xmm0, DWORD PTR _latitude$[ebp]
	mulss	xmm0, DWORD PTR __real@40490fdb
	divss	xmm0, DWORD PTR __real@43340000
	movss	DWORD PTR ?Latitude@CStar@@1MA, xmm0

; 523  : 	Longitude = degtorad(longitude);

	movss	xmm0, DWORD PTR _longitude$[ebp]
	mulss	xmm0, DWORD PTR __real@40490fdb
	divss	xmm0, DWORD PTR __real@43340000
	movss	DWORD PTR ?Longitude@CStar@@1MA, xmm0

; 524  : 	sinLatitude = (float) sin(Latitude);

	push	ecx
	movss	xmm0, DWORD PTR ?Latitude@CStar@@1MA
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR ?sinLatitude@CStar@@1MA	; CStar::sinLatitude

; 525  : 	cosLatitude = (float) cos(Latitude);

	push	ecx
	movss	xmm0, DWORD PTR ?Latitude@CStar@@1MA
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR ?cosLatitude@CStar@@1MA	; CStar::cosLatitude

; 526  : 	mustSetLocalSiderialTime = 1;

	mov	DWORD PTR ?mustSetLocalSiderialTime@CStar@@1HA, 1 ; CStar::mustSetLocalSiderialTime

; 527  : }

	pop	ebp
	ret	0
?SetLocation@CStar@@SAXMM@Z ENDP			; CStar::SetLocation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\weather\star.cpp
_TEXT	SEGMENT
_curtime$ = -8						; size = 4
tv77 = -4						; size = 4
_hour$ = 8						; size = 4
_minute$ = 12						; size = 4
_second$ = 16						; size = 4
?SetUniversalTime@CStar@@SAXHHM@Z PROC			; CStar::SetUniversalTime

; 551  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 552  : 	float curtime = ConvertHour (hour, minute, second) / 24.0f;

	push	ecx
	movss	xmm0, DWORD PTR _second$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _minute$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hour$[ebp]
	push	ecx
	call	?ConvertHour@CStar@@SAMHHM@Z		; CStar::ConvertHour
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR tv77[ebp]
	movss	xmm0, DWORD PTR tv77[ebp]
	divss	xmm0, DWORD PTR __real@41c00000
	movss	DWORD PTR _curtime$[ebp], xmm0

; 553  : 	SetUniversalTime (curtime);

	push	ecx
	movss	xmm0, DWORD PTR _curtime$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SetUniversalTime@CStar@@SAXM@Z		; CStar::SetUniversalTime
	add	esp, 4

; 554  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SetUniversalTime@CStar@@SAXHHM@Z ENDP			; CStar::SetUniversalTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\weather\star.cpp
_TEXT	SEGMENT
_curtime$ = 8						; size = 4
?SetUniversalTime@CStar@@SAXM@Z PROC			; CStar::SetUniversalTime

; 539  : {

	push	ebp
	mov	ebp, esp

; 540  : 	UniversalTime = curtime;

	movss	xmm0, DWORD PTR _curtime$[ebp]
	movss	DWORD PTR ?UniversalTime@CStar@@1MA, xmm0

; 541  : 	if (UniversalTime >= 1.0f) {

	movss	xmm0, DWORD PTR ?UniversalTime@CStar@@1MA
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN1@SetUnivers

; 542  : 		ExtraDay = FloatToInt32(UniversalTime);

	push	ecx
	movss	xmm0, DWORD PTR ?UniversalTime@CStar@@1MA
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR ?ExtraDay@CStar@@1HA, eax	; CStar::ExtraDay

; 543  : 		UniversalTime -= ExtraDay;

	cvtsi2ss xmm0, DWORD PTR ?ExtraDay@CStar@@1HA	; CStar::ExtraDay
	movss	xmm1, DWORD PTR ?UniversalTime@CStar@@1MA
	subss	xmm1, xmm0
	movss	DWORD PTR ?UniversalTime@CStar@@1MA, xmm1
$LN1@SetUnivers:

; 544  : 	}
; 545  : 	UniversalTimeDegree =  degtorad(360.0f) * UniversalTime;

	movss	xmm0, DWORD PTR __real@40c90fdb
	mulss	xmm0, DWORD PTR ?UniversalTime@CStar@@1MA
	movss	DWORD PTR ?UniversalTimeDegree@CStar@@1MA, xmm0

; 546  : 	CalculateDeltaJulian ();

	call	?CalculateDeltaJulian@CStar@@KAXXZ	; CStar::CalculateDeltaJulian

; 547  : 	CalculateLocalSiderialTime ();

	call	?CalculateLocalSiderialTime@CStar@@KAXXZ ; CStar::CalculateLocalSiderialTime

; 548  : }

	pop	ebp
	ret	0
?SetUniversalTime@CStar@@SAXM@Z ENDP			; CStar::SetUniversalTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\weather\star.cpp
_TEXT	SEGMENT
tv71 = -16						; size = 8
_hour$ = -8						; size = 4
tv67 = -4						; size = 4
_mseconds$ = 8						; size = 4
?SetUniversalTime@CStar@@SAXI@Z PROC			; CStar::SetUniversalTime

; 557  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 558  : 	float hour = mseconds * (1.0f / (24.0f*3600000.0f));

	mov	eax, DWORD PTR _mseconds$[ebp]
	mov	DWORD PTR tv67[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv67[ebp]
	mov	ecx, DWORD PTR tv67[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv71[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv71[ebp]
	mulss	xmm0, DWORD PTR __real@3246d751
	movss	DWORD PTR _hour$[ebp], xmm0

; 559  : 	SetUniversalTime (hour);

	push	ecx
	movss	xmm0, DWORD PTR _hour$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SetUniversalTime@CStar@@SAXM@Z		; CStar::SetUniversalTime
	add	esp, 4

; 560  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SetUniversalTime@CStar@@SAXI@Z ENDP			; CStar::SetUniversalTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\weather\star.cpp
_TEXT	SEGMENT
_day$ = 8						; size = 4
_month$ = 12						; size = 4
_year$ = 16						; size = 4
?SetDate@CStar@@SAXHHH@Z PROC				; CStar::SetDate

; 530  : {

	push	ebp
	mov	ebp, esp

; 531  : 	Year = year;

	mov	eax, DWORD PTR _year$[ebp]
	mov	DWORD PTR ?Year@CStar@@1HA, eax		; CStar::Year

; 532  : 	Month = month;

	mov	ecx, DWORD PTR _month$[ebp]
	mov	DWORD PTR ?Month@CStar@@1HA, ecx	; CStar::Month

; 533  : 	Day = day;

	mov	edx, DWORD PTR _day$[ebp]
	mov	DWORD PTR ?Day@CStar@@1HA, edx		; CStar::Day

; 534  : 	ExtraDay = 0;

	mov	DWORD PTR ?ExtraDay@CStar@@1HA, 0	; CStar::ExtraDay

; 535  : 	mustSetdeltaJulian = 1;

	mov	DWORD PTR ?mustSetdeltaJulian@CStar@@1HA, 1 ; CStar::mustSetdeltaJulian

; 536  : }

	pop	ebp
	ret	0
?SetDate@CStar@@SAXHHH@Z ENDP				; CStar::SetDate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\weather\star.cpp
_TEXT	SEGMENT
_maxday$1 = -16						; size = 4
_y$ = -12						; size = 4
_m$ = -8						; size = 4
_d$ = -4						; size = 4
_day$ = 8						; size = 4
_month$ = 12						; size = 4
_year$ = 16						; size = 4
_extraday$ = 20						; size = 4
?CalculateDate@CStar@@SAXPAH00H@Z PROC			; CStar::CalculateDate

; 223  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 224  : 	if (!extraday) return;

	cmp	DWORD PTR _extraday$[ebp], 0
	jne	SHORT $LN9@CalculateD
	jmp	$LN10@CalculateD
$LN9@CalculateD:

; 225  : 	int d = *day + extraday;

	mov	eax, DWORD PTR _day$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _extraday$[ebp]
	mov	DWORD PTR _d$[ebp], ecx

; 226  : 	int m = *month;

	mov	edx, DWORD PTR _month$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _m$[ebp], eax

; 227  : 	int y = *year;

	mov	ecx, DWORD PTR _year$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _y$[ebp], edx

; 228  : 	if (m > 1) {

	cmp	DWORD PTR _m$[ebp], 1
	jle	SHORT $LN7@CalculateD

; 229  : 		d += GetTotalDay (m-1, y);

	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	sub	ecx, 1
	push	ecx
	call	?GetTotalDay@CStar@@SAHHH@Z		; CStar::GetTotalDay
	add	esp, 8
	add	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR _d$[ebp], eax

; 230  : 		m = 1;

	mov	DWORD PTR _m$[ebp], 1
$LN7@CalculateD:

; 231  : 	}
; 232  : 	while (1) {

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@CalculateD

; 233  : 		int maxday = 365 + LeapYear (y);

	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	call	?LeapYear@CStar@@SAHH@Z			; CStar::LeapYear
	add	esp, 4
	add	eax, 365				; 0000016dH
	mov	DWORD PTR _maxday$1[ebp], eax

; 234  : 		if (d <= maxday) break;

	mov	ecx, DWORD PTR _d$[ebp]
	cmp	ecx, DWORD PTR _maxday$1[ebp]
	jg	SHORT $LN5@CalculateD
	jmp	SHORT $LN3@CalculateD

; 235  : 		else {

	jmp	SHORT $LN4@CalculateD
$LN5@CalculateD:

; 236  : 			y++;

	mov	edx, DWORD PTR _y$[ebp]
	add	edx, 1
	mov	DWORD PTR _y$[ebp], edx

; 237  : 			d -= maxday;

	mov	eax, DWORD PTR _d$[ebp]
	sub	eax, DWORD PTR _maxday$1[ebp]
	mov	DWORD PTR _d$[ebp], eax
$LN4@CalculateD:

; 238  : 		}
; 239  : 	}

	jmp	SHORT $LN7@CalculateD
$LN3@CalculateD:

; 240  : 	while (1) {

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN2@CalculateD

; 241  : 		if (d <= DaysInMonth[m-1]) break;

	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _d$[ebp]
	cmp	eax, DWORD PTR ?DaysInMonth@CStar@@1PAHA[edx*4-4]
	jg	SHORT $LN1@CalculateD
	jmp	SHORT $LN2@CalculateD
$LN1@CalculateD:

; 242  : 		d -= DaysInMonth[m-1];

	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR _d$[ebp]
	sub	edx, DWORD PTR ?DaysInMonth@CStar@@1PAHA[ecx*4-4]
	mov	DWORD PTR _d$[ebp], edx

; 243  : 		m++;

	mov	eax, DWORD PTR _m$[ebp]
	add	eax, 1
	mov	DWORD PTR _m$[ebp], eax

; 244  : 	}

	jmp	SHORT $LN3@CalculateD
$LN2@CalculateD:

; 245  : 	*day = d;

	mov	ecx, DWORD PTR _day$[ebp]
	mov	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR [ecx], edx

; 246  : 	*month = m;

	mov	eax, DWORD PTR _month$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [eax], ecx

; 247  : 	*year = y;

	mov	edx, DWORD PTR _year$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR [edx], eax
$LN10@CalculateD:

; 248  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CalculateDate@CStar@@SAXPAH00H@Z ENDP			; CStar::CalculateDate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\weather\star.cpp
_TEXT	SEGMENT
tv72 = -4						; size = 4
_hour$ = 8						; size = 4
_min$ = 12						; size = 4
_sec$ = 16						; size = 4
?ConvertHour@CStar@@SAMHHM@Z PROC			; CStar::ConvertHour

; 218  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 219  : 	return hour + min / 60.0f + sec / 3600.0f;

	cvtsi2ss xmm0, DWORD PTR _hour$[ebp]
	cvtsi2ss xmm1, DWORD PTR _min$[ebp]
	divss	xmm1, DWORD PTR __real@42700000
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _sec$[ebp]
	divss	xmm1, DWORD PTR __real@45610000
	addss	xmm0, xmm1
	movss	DWORD PTR tv72[ebp], xmm0
	fld	DWORD PTR tv72[ebp]

; 220  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ConvertHour@CStar@@SAMHHM@Z ENDP			; CStar::ConvertHour
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\weather\star.cpp
_TEXT	SEGMENT
_days$ = -8						; size = 4
_i$ = -4						; size = 4
_month$ = 8						; size = 4
_year$ = 12						; size = 4
?GetTotalDay@CStar@@SAHHH@Z PROC			; CStar::GetTotalDay

; 206  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 207  : 	if (month > 2) {

	cmp	DWORD PTR _month$[ebp], 2
	jle	SHORT $LN6@GetTotalDa

; 208  : 		if (LeapYear(year)) DaysInMonth[1] = 29;

	mov	eax, DWORD PTR _year$[ebp]
	push	eax
	call	?LeapYear@CStar@@SAHH@Z			; CStar::LeapYear
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@GetTotalDa
	mov	ecx, 4
	shl	ecx, 0
	mov	DWORD PTR ?DaysInMonth@CStar@@1PAHA[ecx], 29 ; 0000001dH
	jmp	SHORT $LN6@GetTotalDa
$LN5@GetTotalDa:

; 209  : 		else DaysInMonth[1] = 28;

	mov	edx, 4
	shl	edx, 0
	mov	DWORD PTR ?DaysInMonth@CStar@@1PAHA[edx], 28 ; 0000001cH
$LN6@GetTotalDa:

; 210  : 	}
; 211  : 	int i;
; 212  : 	int days = 0;

	mov	DWORD PTR _days$[ebp], 0

; 213  : 	for (i=0; i < month; i++) days += DaysInMonth[i];

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@GetTotalDa
$LN2@GetTotalDa:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@GetTotalDa:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _month$[ebp]
	jge	SHORT $LN1@GetTotalDa
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _days$[ebp]
	add	eax, DWORD PTR ?DaysInMonth@CStar@@1PAHA[edx*4]
	mov	DWORD PTR _days$[ebp], eax
	jmp	SHORT $LN2@GetTotalDa
$LN1@GetTotalDa:

; 214  : 	return days;

	mov	eax, DWORD PTR _days$[ebp]

; 215  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetTotalDay@CStar@@SAHHH@Z ENDP			; CStar::GetTotalDay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\weather\star.cpp
_TEXT	SEGMENT
_leap$ = -4						; size = 4
_year$ = 8						; size = 4
?LeapYear@CStar@@SAHH@Z PROC				; CStar::LeapYear

; 196  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 197  : 	int leap = 0;

	mov	DWORD PTR _leap$[ebp], 0

; 198  : 	if (!(year & 3)) {

	mov	eax, DWORD PTR _year$[ebp]
	and	eax, 3
	jne	SHORT $LN4@LeapYear

; 199  : 		if (!(year % 400)) leap = 1;

	mov	eax, DWORD PTR _year$[ebp]
	cdq
	mov	ecx, 400				; 00000190H
	idiv	ecx
	test	edx, edx
	jne	SHORT $LN3@LeapYear
	mov	DWORD PTR _leap$[ebp], 1
	jmp	SHORT $LN4@LeapYear
$LN3@LeapYear:

; 200  : 		else if (year % 100) leap = 1;

	mov	eax, DWORD PTR _year$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	test	edx, edx
	je	SHORT $LN4@LeapYear
	mov	DWORD PTR _leap$[ebp], 1
$LN4@LeapYear:

; 201  : 	}
; 202  : 	return leap;

	mov	eax, DWORD PTR _leap$[ebp]

; 203  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?LeapYear@CStar@@SAHH@Z ENDP				; CStar::LeapYear
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\weather\star.cpp
_TEXT	SEGMENT
?Cleanup@CStar@@SAXXZ PROC				; CStar::Cleanup

; 398  : {

	push	ebp
	mov	ebp, esp

; 399  : 	if (CurrentStarData) {

	cmp	DWORD PTR ?CurrentStarData@CStar@@1PAUStarData@@A, 0 ; CStar::CurrentStarData
	je	SHORT $LN2@Cleanup

; 400  : 		FREE(CurrentStarData -> coord);

	mov	eax, DWORD PTR ?CurrentStarData@CStar@@1PAUStarData@@A ; CStar::CurrentStarData
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_free
	add	esp, 4

; 401  : 		FREE(CurrentStarData -> star);

	mov	edx, DWORD PTR ?CurrentStarData@CStar@@1PAUStarData@@A ; CStar::CurrentStarData
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_free
	add	esp, 4

; 402  : 		FREE(CurrentStarData);

	mov	ecx, DWORD PTR ?CurrentStarData@CStar@@1PAUStarData@@A ; CStar::CurrentStarData
	push	ecx
	call	_free
	add	esp, 4

; 403  : 		CurrentStarData = 0;

	mov	DWORD PTR ?CurrentStarData@CStar@@1PAUStarData@@A, 0 ; CStar::CurrentStarData
$LN2@Cleanup:

; 404  : 	}
; 405  : }

	pop	ebp
	ret	0
?Cleanup@CStar@@SAXXZ ENDP				; CStar::Cleanup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\weather\star.cpp
_TEXT	SEGMENT
_deltaint$ = -388					; size = 4
_deltamag$ = -384					; size = 4
_maxint$ = -380						; size = 4
_minint$ = -376						; size = 4
_totalcons$ = -372					; size = 4
tv174 = -368						; size = 4
_coord$ = -364						; size = 4
_minmag$ = -360						; size = 4
_maxmag$ = -356						; size = 4
_max$ = -352						; size = 4
_totalstar$ = -348					; size = 4
_mag$ = -344						; size = 4
_star$ = -340						; size = 4
_curstar$ = -336					; size = 4
_j$ = -332						; size = 4
_i$ = -328						; size = 4
_in$ = -324						; size = 4
_data$ = -320						; size = 4
_tempstar$1 = -316					; size = 12
_buffer$ = -304						; size = 300
__$ArrayPad$ = -4					; size = 4
_starfile$ = 8						; size = 4
_maxmagnitude$ = 12					; size = 4
?Setup@CStar@@SAHPADM@Z PROC				; CStar::Setup

; 270  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 388				; 00000184H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi

; 271  : 	Cleanup ();

	call	?Cleanup@CStar@@SAXXZ			; CStar::Cleanup

; 272  : 	FILE *in = FILE_Open (starfile, "r");

	push	OFFSET ??_C@_01KDCPPGHE@r?$AA@
	mov	eax, DWORD PTR _starfile$[ebp]
	push	eax
	call	?FILE_Open@@YAPAU_iobuf@@PAD0@Z		; FILE_Open
	add	esp, 8
	mov	DWORD PTR _in$[ebp], eax

; 273  : 	if (in == NULL) return 1;

	cmp	DWORD PTR _in$[ebp], 0
	jne	SHORT $LN39@Setup
	mov	eax, 1
	jmp	$LN40@Setup
$LN39@Setup:

; 274  : 
; 275  : 	char buffer[MAXSTRING];
; 276  : 
; 277  : 	int		totalcons=0, totalstar=0;

	mov	DWORD PTR _totalcons$[ebp], 0
	mov	DWORD PTR _totalstar$[ebp], 0

; 278  : 	float	minmag=0.0F, maxmag=0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _minmag$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _maxmag$[ebp], xmm0

; 279  : 	float	minint, maxint;
; 280  : 
; 281  : 	minint = 0.5f;

	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _minint$[ebp], xmm0

; 282  : 	maxint = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _maxint$[ebp], xmm0

; 283  : 	fscanf (in, "%s", buffer);		// StarInfo

	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	call	_fscanf
	add	esp, 12					; 0000000cH
$LN38@Setup:

; 284  : 	while (1) {

	mov	eax, 1
	test	eax, eax
	je	$LN37@Setup

; 285  : 		fscanf (in, "%s", buffer);

	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	call	_fscanf
	add	esp, 12					; 0000000cH

; 286  : 		strupr (buffer);

	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_strupr
	add	esp, 4

; 287  : 		if (!strcmp (buffer, "ZZZZ")) break;

	push	OFFSET ??_C@_04MOLBCOPG@ZZZZ?$AA@
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN36@Setup
	jmp	$LN37@Setup
	jmp	$LN23@Setup
$LN36@Setup:

; 288  : 		else if (!strcmp (buffer, "TOTALCONSTELLATION")) {

	push	OFFSET ??_C@_0BD@FENPLIEF@TOTALCONSTELLATION?$AA@
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN34@Setup

; 289  : 			fscanf (in, "%d", &totalcons);

	lea	eax, DWORD PTR _totalcons$[ebp]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	call	_fscanf
	add	esp, 12					; 0000000cH
	jmp	$LN23@Setup
$LN34@Setup:

; 290  : 		}
; 291  : 		else if (!strcmp (buffer, "TOTALSTAR")) {

	push	OFFSET ??_C@_09CECCMBEE@TOTALSTAR?$AA@
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN32@Setup

; 292  : 			fscanf (in, "%d", &totalstar);

	lea	eax, DWORD PTR _totalstar$[ebp]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	call	_fscanf
	add	esp, 12					; 0000000cH
	jmp	$LN23@Setup
$LN32@Setup:

; 293  : 		}
; 294  : 		else if (!strcmp (buffer, "MINMAG")) {

	push	OFFSET ??_C@_06CPMFDHGB@MINMAG?$AA@
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN30@Setup

; 295  : 			fscanf (in, "%f", &minmag);

	lea	eax, DWORD PTR _minmag$[ebp]
	push	eax
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	call	_fscanf
	add	esp, 12					; 0000000cH
	jmp	$LN23@Setup
$LN30@Setup:

; 296  : 		}
; 297  : 		else if (!strcmp (buffer, "MAXMAG")) {

	push	OFFSET ??_C@_06CMDGNHCO@MAXMAG?$AA@
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN28@Setup

; 298  : 			fscanf (in, "%f", &maxmag);

	lea	eax, DWORD PTR _maxmag$[ebp]
	push	eax
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	call	_fscanf
	add	esp, 12					; 0000000cH

; 299  : 			if (maxmag > maxmagnitude) maxmag = maxmagnitude;

	movss	xmm0, DWORD PTR _maxmag$[ebp]
	comiss	xmm0, DWORD PTR _maxmagnitude$[ebp]
	jbe	SHORT $LN27@Setup
	movss	xmm0, DWORD PTR _maxmagnitude$[ebp]
	movss	DWORD PTR _maxmag$[ebp], xmm0
$LN27@Setup:

; 300  : 		}

	jmp	SHORT $LN23@Setup
$LN28@Setup:

; 301  : 		else if (!strcmp (buffer, "MININTENSITY")) {

	push	OFFSET ??_C@_0N@DMEPANPM@MININTENSITY?$AA@
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN25@Setup

; 302  : 			fscanf (in, "%f", &minint);

	lea	eax, DWORD PTR _minint$[ebp]
	push	eax
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	call	_fscanf
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN23@Setup
$LN25@Setup:

; 303  : 		}
; 304  : 		else if (!strcmp (buffer, "MAXINTENSITY")) {

	push	OFFSET ??_C@_0N@HMAAHFIK@MAXINTENSITY?$AA@
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN23@Setup

; 305  : 			fscanf (in, "%f", &maxint);

	lea	eax, DWORD PTR _maxint$[ebp]
	push	eax
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	call	_fscanf
	add	esp, 12					; 0000000cH
$LN23@Setup:

; 306  : 		}
; 307  : 	}

	jmp	$LN38@Setup
$LN37@Setup:

; 308  : 
; 309  : 	StarData *data = NEW (StarData);

	push	16					; 00000010H
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _data$[ebp], eax

; 310  : 	if (!data) {

	cmp	DWORD PTR _data$[ebp], 0
	jne	SHORT $LN22@Setup

; 311  : 		fclose (in);

	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	call	_fclose
	add	esp, 4

; 312  : 		return 2;

	mov	eax, 2
	jmp	$LN40@Setup
$LN22@Setup:

; 313  : 	}
; 314  : 
; 315  : 	if(!totalstar){

	cmp	DWORD PTR _totalstar$[ebp], 0
	jne	SHORT $LN21@Setup

; 316  : 		fclose (in);

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 317  : 		return 2;

	mov	eax, 2
	jmp	$LN40@Setup
$LN21@Setup:

; 318  : 	}
; 319  : 
; 320  : 	StarRecord *star = NEWARRAY (StarRecord, totalstar);

	mov	ecx, DWORD PTR _totalstar$[ebp]
	imul	ecx, 12					; 0000000cH
	push	ecx
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _star$[ebp], eax

; 321  : 	if (!star) {

	cmp	DWORD PTR _star$[ebp], 0
	jne	SHORT $LN20@Setup

; 322  : 		FREE(data);

	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	call	_free
	add	esp, 4

; 323  : 		fclose (in);

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 324  : 		return 2;

	mov	eax, 2
	jmp	$LN40@Setup
$LN20@Setup:

; 325  : 	}
; 326  : 	data -> star = star;

	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR _star$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 327  : 	data -> totalstar = totalstar;

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _totalstar$[ebp]
	mov	DWORD PTR [eax], ecx

; 328  : 
; 329  : 	float	deltamag = max(0.01F, maxmag - minmag);

	movss	xmm0, DWORD PTR _maxmag$[ebp]
	subss	xmm0, DWORD PTR _minmag$[ebp]
	movss	xmm1, DWORD PTR __real@3c23d70a
	comiss	xmm1, xmm0
	jbe	SHORT $LN42@Setup
	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR tv174[ebp], xmm0
	jmp	SHORT $LN43@Setup
$LN42@Setup:
	movss	xmm0, DWORD PTR _maxmag$[ebp]
	subss	xmm0, DWORD PTR _minmag$[ebp]
	movss	DWORD PTR tv174[ebp], xmm0
$LN43@Setup:
	movss	xmm0, DWORD PTR tv174[ebp]
	movss	DWORD PTR _deltamag$[ebp], xmm0

; 330  : 	float	deltaint = (maxint - minint) / deltamag;

	movss	xmm0, DWORD PTR _maxint$[ebp]
	subss	xmm0, DWORD PTR _minint$[ebp]
	divss	xmm0, DWORD PTR _deltamag$[ebp]
	movss	DWORD PTR _deltaint$[ebp], xmm0

; 331  : 
; 332  : 	StarRecord	*curstar = star;

	mov	edx, DWORD PTR _star$[ebp]
	mov	DWORD PTR _curstar$[ebp], edx

; 333  : 	int i, j;
; 334  : 	float	mag;
; 335  : 	for (i=0; i < totalcons;i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN19@Setup
$LN18@Setup:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN19@Setup:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _totalcons$[ebp]
	jge	$LN17@Setup

; 336  : 		fscanf (in, "%s", buffer);		// Constellation

	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_fscanf
	add	esp, 12					; 0000000cH

; 337  : 		fscanf (in, "%[^\n]", buffer);

	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	push	OFFSET ??_C@_05HPMPOKFN@?$CF?$FL?$FO?6?$FN?$AA@
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	call	_fscanf
	add	esp, 12					; 0000000cH

; 338  : 		fscanf (in, "%s", buffer);		// TotalStar

	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	call	_fscanf
	add	esp, 12					; 0000000cH

; 339  : 		fscanf (in, "%d", &totalstar);

	lea	edx, DWORD PTR _totalstar$[ebp]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_fscanf
	add	esp, 12					; 0000000cH

; 340  : 		for (j=0; j < totalstar;j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN16@Setup
$LN15@Setup:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN16@Setup:
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR _totalstar$[ebp]
	jge	$LN14@Setup

; 341  : 			fscanf (in, "%s", buffer);	// Mag

	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	call	_fscanf
	add	esp, 12					; 0000000cH

; 342  : 			fscanf (in, "%f", &mag);

	lea	edx, DWORD PTR _mag$[ebp]
	push	edx
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_fscanf
	add	esp, 12					; 0000000cH

; 343  : 			fscanf (in, "%s", buffer);	// RaDec

	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	call	_fscanf
	add	esp, 12					; 0000000cH

; 344  : 			fscanf (in, "%f %f", &curstar -> ra, &curstar -> dec);

	mov	eax, DWORD PTR _curstar$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _curstar$[ebp]
	push	ecx
	push	OFFSET ??_C@_05KCDNKPCA@?$CFf?5?$CFf?$AA@
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	call	_fscanf
	add	esp, 16					; 00000010H

; 345  : 			curstar -> ra = hourtorad(curstar -> ra);

	mov	eax, DWORD PTR _curstar$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR __real@40490fdb
	divss	xmm0, DWORD PTR __real@41400000
	mov	ecx, DWORD PTR _curstar$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 346  : 			curstar -> dec = degtorad(curstar -> dec);

	mov	edx, DWORD PTR _curstar$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR __real@40490fdb
	divss	xmm0, DWORD PTR __real@43340000
	mov	eax, DWORD PTR _curstar$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 347  : 			fscanf (in, "%s", buffer);	// ID

	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	call	_fscanf
	add	esp, 12					; 0000000cH

; 348  : 			fscanf (in, "%[^\n]", buffer);

	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	push	OFFSET ??_C@_05HPMPOKFN@?$CF?$FL?$FO?6?$FN?$AA@
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	call	_fscanf
	add	esp, 12					; 0000000cH

; 349  : 			if (mag < maxmagnitude) {

	movss	xmm0, DWORD PTR _maxmagnitude$[ebp]
	comiss	xmm0, DWORD PTR _mag$[ebp]
	jbe	$LN13@Setup

; 350  : 				mag = (mag - minmag) * deltaint;

	movss	xmm0, DWORD PTR _mag$[ebp]
	subss	xmm0, DWORD PTR _minmag$[ebp]
	mulss	xmm0, DWORD PTR _deltaint$[ebp]
	movss	DWORD PTR _mag$[ebp], xmm0

; 351  : 				if (mag > 1.0f) mag = 1.0f;	// just in case

	movss	xmm0, DWORD PTR _mag$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN12@Setup
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _mag$[ebp], xmm0
$LN12@Setup:

; 352  : 				curstar -> color = FloatToInt32((1.0f - mag) * 255.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _mag$[ebp]
	mulss	xmm0, DWORD PTR __real@437f0000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	edx, DWORD PTR _curstar$[ebp]
	mov	DWORD PTR [edx+8], eax

; 353  : 				curstar++;

	mov	eax, DWORD PTR _curstar$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _curstar$[ebp], eax
	jmp	SHORT $LN11@Setup
$LN13@Setup:

; 354  : 			}
; 355  : 			else data -> totalstar--;

	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, 1
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax], edx
$LN11@Setup:

; 356  : 		}

	jmp	$LN15@Setup
$LN14@Setup:

; 357  : 	}

	jmp	$LN18@Setup
$LN17@Setup:

; 358  : 	fclose (in);

	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	call	_fclose
	add	esp, 4

; 359  : 
; 360  : 	star = NEWARRAY (StarRecord, data -> totalstar);

	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [edx]
	imul	eax, 12					; 0000000cH
	push	eax
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _star$[ebp], eax

; 361  : 	if (!star) {

	cmp	DWORD PTR _star$[ebp], 0
	jne	SHORT $LN10@Setup

; 362  : 		FREE(data -> star);

	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_free
	add	esp, 4

; 363  : 		FREE(data);

	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_free
	add	esp, 4

; 364  : 		return 2;

	mov	eax, 2
	jmp	$LN40@Setup
$LN10@Setup:

; 365  : 	}
; 366  : 	memcpy (star, data -> star, sizeof(StarRecord) * data -> totalstar);

	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx]
	imul	edx, 12					; 0000000cH
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _star$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 367  : 	FREE(data -> star);

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_free
	add	esp, 4

; 368  : 	data -> star = star;

	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR _star$[ebp]
	mov	DWORD PTR [edx+8], eax

; 369  : 
; 370  : 	StarCoord *coord = NEWARRAY (StarCoord, data -> totalstar);

	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx]
	imul	edx, 28					; 0000001cH
	push	edx
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _coord$[ebp], eax

; 371  : 	if (!coord) {

	cmp	DWORD PTR _coord$[ebp], 0
	jne	SHORT $LN9@Setup

; 372  : 		FREE(data -> star);

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_free
	add	esp, 4

; 373  : 		FREE(data);

	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	call	_free
	add	esp, 4

; 374  : 		return 2;

	mov	eax, 2
	jmp	$LN40@Setup
$LN9@Setup:

; 375  : 	}
; 376  : 	data -> coord = coord;

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _coord$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 377  : 	data -> totalcoord = 0;

	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx+4], 0

; 378  : 
; 379  : 	int max;
; 380  : 	for (i=0; i < data -> totalstar; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@Setup
$LN7@Setup:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@Setup:
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jge	$LN6@Setup

; 381  : 		max = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _max$[ebp], eax

; 382  : 		for (j=i + 1; j < data -> totalstar; j++) {

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
	jmp	SHORT $LN5@Setup
$LN4@Setup:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN5@Setup:
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN3@Setup

; 383  : 			if (data -> star[j].color >  data -> star[max].color) max = j;

	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _max$[ebp]
	imul	eax, 12					; 0000000cH
	mov	esi, DWORD PTR _data$[ebp]
	mov	esi, DWORD PTR [esi+8]
	mov	ecx, DWORD PTR [ecx+edx+8]
	cmp	ecx, DWORD PTR [esi+eax+8]
	jle	SHORT $LN2@Setup
	mov	edx, DWORD PTR _j$[ebp]
	mov	DWORD PTR _max$[ebp], edx
$LN2@Setup:

; 384  : 		}

	jmp	SHORT $LN4@Setup
$LN3@Setup:

; 385  : 		if (i != max) {

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _max$[ebp]
	je	$LN1@Setup

; 386  : 			StarRecord tempstar = data -> star[max];

	mov	ecx, DWORD PTR _max$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, ecx
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tempstar$1[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _tempstar$1[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _tempstar$1[ebp+8], eax

; 387  : 			data -> star[max] = data -> star[i];

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, ecx
	mov	ecx, DWORD PTR _max$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [edx+8]
	add	edx, ecx
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax

; 388  : 			data -> star[i] = tempstar;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, ecx
	mov	ecx, DWORD PTR _tempstar$1[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _tempstar$1[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _tempstar$1[ebp+8]
	mov	DWORD PTR [eax+8], ecx
$LN1@Setup:

; 389  : 		}
; 390  : 	}

	jmp	$LN7@Setup
$LN6@Setup:

; 391  : 
; 392  : 	minStarIntensity = 0;

	mov	DWORD PTR ?minStarIntensity@CStar@@1HA, 0 ; CStar::minStarIntensity

; 393  : 	CurrentStarData = data;

	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR ?CurrentStarData@CStar@@1PAUStarData@@A, edx ; CStar::CurrentStarData

; 394  : 	return 0;

	xor	eax, eax
$LN40@Setup:

; 395  : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?Setup@CStar@@SAHPADM@Z ENDP				; CStar::Setup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\weather\star.cpp
_TEXT	SEGMENT
_starpos$ = 8						; size = 4
_pos$ = 12						; size = 4
?InsideRange@CStar@@KAHMM@Z PROC			; CStar::InsideRange

; 409  : {

	push	ebp
	mov	ebp, esp

; 410  : 	if (starpos < pos-degtorad(MAXRANGE)) return 0;

	cvtss2sd xmm0, DWORD PTR _starpos$[ebp]
	cvtss2sd xmm1, DWORD PTR _pos$[ebp]
	subsd	xmm1, QWORD PTR __real@3fa6571855555555
	comisd	xmm1, xmm0
	jbe	SHORT $LN2@InsideRang
	xor	eax, eax
	jmp	SHORT $LN3@InsideRang
$LN2@InsideRang:

; 411  : 	if (starpos > pos+degtorad(MAXRANGE)) return 0;

	cvtss2sd xmm0, DWORD PTR _starpos$[ebp]
	cvtss2sd xmm1, DWORD PTR _pos$[ebp]
	addsd	xmm1, QWORD PTR __real@3fa6571855555555
	comisd	xmm0, xmm1
	jbe	SHORT $LN1@InsideRang
	xor	eax, eax
	jmp	SHORT $LN3@InsideRang
$LN1@InsideRang:

; 412  : 	return 1;

	mov	eax, 1
$LN3@InsideRang:

; 413  : }

	pop	ebp
	ret	0
?InsideRange@CStar@@KAHMM@Z ENDP			; CStar::InsideRange
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\weather\star.cpp
_TEXT	SEGMENT
_angle$ = 8						; size = 4
?GetRangeRad@CStar@@KAMM@Z PROC				; CStar::GetRangeRad

; 447  : {

	push	ebp
	mov	ebp, esp
$LN4@GetRangeRa:

; 448  : 	while (angle >= PI*2) angle -= PI*2;

	movss	xmm0, DWORD PTR _angle$[ebp]
	comiss	xmm0, DWORD PTR __real@40c90fdb
	jb	SHORT $LN3@GetRangeRa
	movss	xmm0, DWORD PTR _angle$[ebp]
	subss	xmm0, DWORD PTR __real@40c90fdb
	movss	DWORD PTR _angle$[ebp], xmm0
	jmp	SHORT $LN4@GetRangeRa
$LN3@GetRangeRa:

; 449  : 	while (angle < 0) angle += PI*2;

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _angle$[ebp]
	jbe	SHORT $LN1@GetRangeRa
	movss	xmm0, DWORD PTR _angle$[ebp]
	addss	xmm0, DWORD PTR __real@40c90fdb
	movss	DWORD PTR _angle$[ebp], xmm0
	jmp	SHORT $LN3@GetRangeRa
$LN1@GetRangeRa:

; 450  : 	return angle;

	fld	DWORD PTR _angle$[ebp]

; 451  : }

	pop	ebp
	ret	0
?GetRangeRad@CStar@@KAMM@Z ENDP				; CStar::GetRangeRad
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\weather\star.cpp
_TEXT	SEGMENT
_angle$ = 8						; size = 4
?GetRange@CStar@@KAMM@Z PROC				; CStar::GetRange

; 440  : {

	push	ebp
	mov	ebp, esp
$LN4@GetRange:

; 441  : 	while (angle >= 360.0f) angle -= 360.0f;

	movss	xmm0, DWORD PTR _angle$[ebp]
	comiss	xmm0, DWORD PTR __real@43b40000
	jb	SHORT $LN3@GetRange
	movss	xmm0, DWORD PTR _angle$[ebp]
	subss	xmm0, DWORD PTR __real@43b40000
	movss	DWORD PTR _angle$[ebp], xmm0
	jmp	SHORT $LN4@GetRange
$LN3@GetRange:

; 442  : 	while (angle < 0) angle += 360.0f;

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _angle$[ebp]
	jbe	SHORT $LN1@GetRange
	movss	xmm0, DWORD PTR _angle$[ebp]
	addss	xmm0, DWORD PTR __real@43b40000
	movss	DWORD PTR _angle$[ebp], xmm0
	jmp	SHORT $LN3@GetRange
$LN1@GetRange:

; 443  : 	return angle;

	fld	DWORD PTR _angle$[ebp]

; 444  : }

	pop	ebp
	ret	0
?GetRange@CStar@@KAMM@Z ENDP				; CStar::GetRange
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\weather\star.cpp
_TEXT	SEGMENT
tv142 = -20						; size = 4
tv132 = -16						; size = 4
tv92 = -12						; size = 4
_delta$ = -8						; size = 4
_e$ = -4						; size = 4
_m$ = 8							; size = 4
_ecc$ = 12						; size = 4
?Kepler@CStar@@KAMMM@Z PROC				; CStar::Kepler

; 585  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 586  : 	float e, delta;
; 587  : 
; 588  : 	e = m = degtorad(m);

	movss	xmm0, DWORD PTR _m$[ebp]
	mulss	xmm0, DWORD PTR __real@40490fdb
	divss	xmm0, DWORD PTR __real@43340000
	movss	DWORD PTR _m$[ebp], xmm0
	movss	xmm0, DWORD PTR _m$[ebp]
	movss	DWORD PTR _e$[ebp], xmm0
$LN3@Kepler:

; 589  : 	do {
; 590  : 		delta = e - ecc * (float) sin(e) - m;

	push	ecx
	movss	xmm0, DWORD PTR _e$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv92[ebp]
	movss	xmm0, DWORD PTR tv92[ebp]
	mulss	xmm0, DWORD PTR _ecc$[ebp]
	movss	xmm1, DWORD PTR _e$[ebp]
	subss	xmm1, xmm0
	subss	xmm1, DWORD PTR _m$[ebp]
	movss	DWORD PTR _delta$[ebp], xmm1

; 591  : 		e -= (delta / (1 - ecc * (float) cos(e)));

	push	ecx
	movss	xmm0, DWORD PTR _e$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR tv132[ebp]
	movss	xmm0, DWORD PTR tv132[ebp]
	mulss	xmm0, DWORD PTR _ecc$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR _delta$[ebp]
	divss	xmm0, xmm1
	movss	xmm1, DWORD PTR _e$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _e$[ebp], xmm1

; 592  : 	} while (fabs(delta) > EPSILON);

	push	ecx
	movss	xmm0, DWORD PTR _delta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv142[ebp]
	movss	xmm0, DWORD PTR tv142[ebp]
	comiss	xmm0, DWORD PTR __real@358637bd
	ja	$LN3@Kepler

; 593  : 	return e;

	fld	DWORD PTR _e$[ebp]

; 594  : };

	mov	esp, ebp
	pop	ebp
	ret	0
?Kepler@CStar@@KAMMM@Z ENDP				; CStar::Kepler
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\weather\star.cpp
_TEXT	SEGMENT
tv79 = -8						; size = 4
tv75 = -4						; size = 4
_N$ = 8							; size = 4
?FixAngle@CStar@@KAMM@Z PROC				; CStar::FixAngle

; 580  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 581  : 	return N - 360.0f * (float) floor(N / 360.0f);

	movss	xmm0, DWORD PTR _N$[ebp]
	divss	xmm0, DWORD PTR __real@43b40000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?floor@@YAMM@Z				; floor
	add	esp, 4
	fstp	DWORD PTR tv75[ebp]
	movss	xmm0, DWORD PTR tv75[ebp]
	mulss	xmm0, DWORD PTR __real@43b40000
	movss	xmm1, DWORD PTR _N$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR tv79[ebp], xmm1
	fld	DWORD PTR tv79[ebp]

; 582  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FixAngle@CStar@@KAMM@Z ENDP				; CStar::FixAngle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\weather\star.cpp
_TEXT	SEGMENT
_c$ = -4						; size = 4
_year$ = 8						; size = 4
_month$ = 12						; size = 4
_day$ = 16						; size = 4
?Julian@CStar@@KAMHHM@Z PROC				; CStar::Julian

; 252  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 253  :     if (month > 2) {

	cmp	DWORD PTR _month$[ebp], 2
	jle	SHORT $LN2@Julian

; 254  :         month = month - 3;

	mov	eax, DWORD PTR _month$[ebp]
	sub	eax, 3
	mov	DWORD PTR _month$[ebp], eax

; 255  :     } 
; 256  : 	else {

	jmp	SHORT $LN1@Julian
$LN2@Julian:

; 257  :         month = month + 9;

	mov	ecx, DWORD PTR _month$[ebp]
	add	ecx, 9
	mov	DWORD PTR _month$[ebp], ecx

; 258  :         year--;

	mov	edx, DWORD PTR _year$[ebp]
	sub	edx, 1
	mov	DWORD PTR _year$[ebp], edx
$LN1@Julian:

; 259  :     }
; 260  :     int c = year / 100;

	mov	eax, DWORD PTR _year$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _c$[ebp], eax

; 261  :     year -= (100 * c);

	mov	edx, DWORD PTR _c$[ebp]
	imul	edx, 100				; 00000064H
	mov	eax, DWORD PTR _year$[ebp]
	sub	eax, edx
	mov	DWORD PTR _year$[ebp], eax

; 262  : 	c = (c * 146097) >> 2;

	mov	ecx, DWORD PTR _c$[ebp]
	imul	ecx, 146097				; 00023ab1H
	sar	ecx, 2
	mov	DWORD PTR _c$[ebp], ecx

; 263  : 	year = (year * 1461) >> 2;

	mov	edx, DWORD PTR _year$[ebp]
	imul	edx, 1461				; 000005b5H
	sar	edx, 2
	mov	DWORD PTR _year$[ebp], edx

; 264  : 	month = (month * 153 + 2) / 5;

	mov	eax, DWORD PTR _month$[ebp]
	imul	eax, 153				; 00000099H
	add	eax, 2
	cdq
	mov	ecx, 5
	idiv	ecx
	mov	DWORD PTR _month$[ebp], eax

; 265  : 	day += (c + year + month + 1721119);

	mov	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR _year$[ebp]
	mov	eax, DWORD PTR _month$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1721119]
	cvtsi2ss xmm0, ecx
	addss	xmm0, DWORD PTR _day$[ebp]
	movss	DWORD PTR _day$[ebp], xmm0

; 266  :     return (day);

	fld	DWORD PTR _day$[ebp]

; 267  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Julian@CStar@@KAMHHM@Z ENDP				; CStar::Julian
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\weather\star.cpp
_TEXT	SEGMENT
_sinAZ$ = -44						; size = 4
_cosAZ$ = -40						; size = 4
_sinHA$ = -36						; size = 4
_cosHA$ = -32						; size = 4
_cosDEC$ = -28						; size = 4
_sinDEC$ = -24						; size = 4
_HourAngle$ = -20					; size = 4
_sinALT$ = -16						; size = 4
_cosALT$ = -12						; size = 4
_altitude$ = -8						; size = 4
_azimuth$ = -4						; size = 4
_ra$ = 8						; size = 4
_dec$ = 12						; size = 4
_star$ = 16						; size = 4
?CalculateStarCoord@CStar@@KAHMMPAUStarCoord@@@Z PROC	; CStar::CalculateStarCoord

; 454  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH

; 455  : 	if (mustSetdeltaJulian) CalculateDeltaJulian ();

	cmp	DWORD PTR ?mustSetdeltaJulian@CStar@@1HA, 0 ; CStar::mustSetdeltaJulian
	je	SHORT $LN4@CalculateS
	call	?CalculateDeltaJulian@CStar@@KAXXZ	; CStar::CalculateDeltaJulian
$LN4@CalculateS:

; 456  : 	if (mustSetLocalSiderialTime) CalculateLocalSiderialTime ();

	cmp	DWORD PTR ?mustSetLocalSiderialTime@CStar@@1HA, 0 ; CStar::mustSetLocalSiderialTime
	je	SHORT $LN3@CalculateS
	call	?CalculateLocalSiderialTime@CStar@@KAXXZ ; CStar::CalculateLocalSiderialTime
$LN3@CalculateS:

; 457  : 	float HourAngle = GetRangeRad(LocalSiderialTime - ra);

	movss	xmm0, DWORD PTR ?LocalSiderialTime@CStar@@1MA
	subss	xmm0, DWORD PTR _ra$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?GetRangeRad@CStar@@KAMM@Z		; CStar::GetRangeRad
	add	esp, 4
	fstp	DWORD PTR _HourAngle$[ebp]

; 458  : 	float sinDEC = (float) sin(dec);

	push	ecx
	movss	xmm0, DWORD PTR _dec$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _sinDEC$[ebp]

; 459  : 	float cosDEC = (float) cos(dec);

	push	ecx
	movss	xmm0, DWORD PTR _dec$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _cosDEC$[ebp]

; 460  : 	float cosHA = (float) cos(HourAngle);

	push	ecx
	movss	xmm0, DWORD PTR _HourAngle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _cosHA$[ebp]

; 461  : 	float sinHA = (float) sin(HourAngle);

	push	ecx
	movss	xmm0, DWORD PTR _HourAngle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _sinHA$[ebp]

; 462  : 	float sinALT = sinDEC * sinLatitude + cosDEC * cosLatitude * cosHA;

	movss	xmm0, DWORD PTR _sinDEC$[ebp]
	mulss	xmm0, DWORD PTR ?sinLatitude@CStar@@1MA
	movss	xmm1, DWORD PTR _cosDEC$[ebp]
	mulss	xmm1, DWORD PTR ?cosLatitude@CStar@@1MA
	mulss	xmm1, DWORD PTR _cosHA$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _sinALT$[ebp], xmm0

; 463  : 	float altitude = (float) asin(sinALT);

	push	ecx
	movss	xmm0, DWORD PTR _sinALT$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?asin@@YAMM@Z				; asin
	add	esp, 4
	fstp	DWORD PTR _altitude$[ebp]

; 464  : 	if (altitude < Horizon) return 0;

	movss	xmm0, DWORD PTR ?Horizon@CStar@@1MA
	comiss	xmm0, DWORD PTR _altitude$[ebp]
	jbe	SHORT $LN2@CalculateS
	xor	eax, eax
	jmp	$LN5@CalculateS
$LN2@CalculateS:

; 465  : 	float cosALT = (float) cos(altitude);

	push	ecx
	movss	xmm0, DWORD PTR _altitude$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _cosALT$[ebp]

; 466  : 	float azimuth = (float) acos((sinDEC - sinALT * sinLatitude) / (cosALT * cosLatitude));

	movss	xmm0, DWORD PTR _sinALT$[ebp]
	mulss	xmm0, DWORD PTR ?sinLatitude@CStar@@1MA
	movss	xmm1, DWORD PTR _sinDEC$[ebp]
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR _cosALT$[ebp]
	mulss	xmm0, DWORD PTR ?cosLatitude@CStar@@1MA
	divss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?acos@@YAMM@Z				; acos
	add	esp, 4
	fstp	DWORD PTR _azimuth$[ebp]

; 467  : 	if (sinHA >= 0) azimuth = 2*PI - azimuth;

	movss	xmm0, DWORD PTR _sinHA$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN1@CalculateS
	movss	xmm0, DWORD PTR __real@40c90fdb
	subss	xmm0, DWORD PTR _azimuth$[ebp]
	movss	DWORD PTR _azimuth$[ebp], xmm0
$LN1@CalculateS:

; 468  : 	float sinAZ = (float) sin(azimuth);

	push	ecx
	movss	xmm0, DWORD PTR _azimuth$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _sinAZ$[ebp]

; 469  : 	float cosAZ = (float) cos(azimuth);

	push	ecx
	movss	xmm0, DWORD PTR _azimuth$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _cosAZ$[ebp]

; 470  : 
; 471  : 	star -> az = (float) azimuth;

	mov	eax, DWORD PTR _star$[ebp]
	movss	xmm0, DWORD PTR _azimuth$[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 472  : 	star -> alt = (float) altitude;

	mov	ecx, DWORD PTR _star$[ebp]
	movss	xmm0, DWORD PTR _altitude$[ebp]
	movss	DWORD PTR [ecx+20], xmm0

; 473  : 	star -> flag = 0;

	mov	edx, DWORD PTR _star$[ebp]
	mov	DWORD PTR [edx+24], 0

; 474  : 
; 475  : // X = North Y = East Z = Down
; 476  : 	star -> x = (float) (cosAZ * cosALT);

	movss	xmm0, DWORD PTR _cosAZ$[ebp]
	mulss	xmm0, DWORD PTR _cosALT$[ebp]
	mov	eax, DWORD PTR _star$[ebp]
	movss	DWORD PTR [eax], xmm0

; 477  : 	star -> y = (float) (sinAZ * cosALT);

	movss	xmm0, DWORD PTR _sinAZ$[ebp]
	mulss	xmm0, DWORD PTR _cosALT$[ebp]
	mov	ecx, DWORD PTR _star$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 478  : 	star -> z = (float) (-sinALT);

	movss	xmm0, DWORD PTR _sinALT$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _star$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 479  : 	return 1;

	mov	eax, 1
$LN5@CalculateS:

; 480  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CalculateStarCoord@CStar@@KAHMMPAUStarCoord@@@Z ENDP	; CStar::CalculateStarCoord
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\weather\star.cpp
_TEXT	SEGMENT
?CalculateLocalSiderialTime@CStar@@KAXXZ PROC		; CStar::CalculateLocalSiderialTime

; 563  : {

	push	ebp
	mov	ebp, esp

; 564  : 	LocalSiderialTime = GetRangeRad(degtorad(100.46f) + degtorad(0.985647f) * deltaJulian + Longitude + UniversalTimeDegree);

	movss	xmm0, DWORD PTR __real@3c8cecdc
	mulss	xmm0, DWORD PTR ?deltaJulian@CStar@@1MA
	addss	xmm0, DWORD PTR __real@3fe06e07
	addss	xmm0, DWORD PTR ?Longitude@CStar@@1MA
	addss	xmm0, DWORD PTR ?UniversalTimeDegree@CStar@@1MA
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?GetRangeRad@CStar@@KAMM@Z		; CStar::GetRangeRad
	add	esp, 4
	fstp	DWORD PTR ?LocalSiderialTime@CStar@@1MA	; CStar::LocalSiderialTime

; 565  : 	mustSetLocalSiderialTime = 0;

	mov	DWORD PTR ?mustSetLocalSiderialTime@CStar@@1HA, 0 ; CStar::mustSetLocalSiderialTime

; 566  : }

	pop	ebp
	ret	0
?CalculateLocalSiderialTime@CStar@@KAXXZ ENDP		; CStar::CalculateLocalSiderialTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\weather\star.cpp
_TEXT	SEGMENT
_year$ = -12						; size = 4
_month$ = -8						; size = 4
_day$ = -4						; size = 4
?CalculateDeltaJulian@CStar@@KAXXZ PROC			; CStar::CalculateDeltaJulian

; 569  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 570  : 	int year = Year;

	mov	eax, DWORD PTR ?Year@CStar@@1HA		; CStar::Year
	mov	DWORD PTR _year$[ebp], eax

; 571  : 	int month = Month;

	mov	ecx, DWORD PTR ?Month@CStar@@1HA	; CStar::Month
	mov	DWORD PTR _month$[ebp], ecx

; 572  : 	int day = Day;

	mov	edx, DWORD PTR ?Day@CStar@@1HA		; CStar::Day
	mov	DWORD PTR _day$[ebp], edx

; 573  : 	CalculateDate (&day, &month, &year, ExtraDay);

	mov	eax, DWORD PTR ?ExtraDay@CStar@@1HA	; CStar::ExtraDay
	push	eax
	lea	ecx, DWORD PTR _year$[ebp]
	push	ecx
	lea	edx, DWORD PTR _month$[ebp]
	push	edx
	lea	eax, DWORD PTR _day$[ebp]
	push	eax
	call	?CalculateDate@CStar@@SAXPAH00H@Z	; CStar::CalculateDate
	add	esp, 16					; 00000010H

; 574  : 	CurrentJulian = Julian (year, month, day + UniversalTime);

	cvtsi2ss xmm0, DWORD PTR _day$[ebp]
	addss	xmm0, DWORD PTR ?UniversalTime@CStar@@1MA
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _month$[ebp]
	push	ecx
	mov	edx, DWORD PTR _year$[ebp]
	push	edx
	call	?Julian@CStar@@KAMHHM@Z			; CStar::Julian
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR ?CurrentJulian@CStar@@1MA	; CStar::CurrentJulian

; 575  : 	deltaJulian = CurrentJulian - Julian2000;

	movss	xmm0, DWORD PTR ?CurrentJulian@CStar@@1MA
	subss	xmm0, DWORD PTR ?Julian2000@CStar@@1MA
	movss	DWORD PTR ?deltaJulian@CStar@@1MA, xmm0

; 576  : 	mustSetdeltaJulian = 0;

	mov	DWORD PTR ?mustSetdeltaJulian@CStar@@1HA, 0 ; CStar::mustSetdeltaJulian

; 577  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CalculateDeltaJulian@CStar@@KAXXZ ENDP			; CStar::CalculateDeltaJulian
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?tan@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?tan@@YAMM@Z PROC					; tan, COMDAT

; 543  :         {return (tanf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_tanf
	add	esp, 4
	pop	ebp
	ret	0
?tan@@YAMM@Z ENDP					; tan
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 537  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?floor@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?floor@@YAMM@Z PROC					; floor, COMDAT

; 519  :         {return (floorf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_floorf
	add	esp, 4
	pop	ebp
	ret	0
?floor@@YAMM@Z ENDP					; floor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 511  :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?atan2@@YAMMM@Z
_TEXT	SEGMENT
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
?atan2@@YAMMM@Z PROC					; atan2, COMDAT

; 507  :         {return (atan2f(_Y, _X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __Y$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_atan2f
	add	esp, 8
	pop	ebp
	ret	0
?atan2@@YAMMM@Z ENDP					; atan2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?atan@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?atan@@YAMM@Z PROC					; atan, COMDAT

; 505  :         {return (atanf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_atanf
	add	esp, 4
	pop	ebp
	ret	0
?atan@@YAMM@Z ENDP					; atan
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?asin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?asin@@YAMM@Z PROC					; asin, COMDAT

; 503  :         {return (asinf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_asinf
	add	esp, 4
	pop	ebp
	ret	0
?asin@@YAMM@Z ENDP					; asin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?acos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?acos@@YAMM@Z PROC					; acos, COMDAT

; 501  :         {return (acosf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_acosf
	add	esp, 4
	pop	ebp
	ret	0
?acos@@YAMM@Z ENDP					; acos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _tanf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_tanf	PROC						; COMDAT

; 436  :         {return ((float)tan((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_tan
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_tanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 430  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _floorf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_floorf	PROC						; COMDAT

; 416  :         {return ((float)floor((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_floor
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_floorf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv77 = -12						; size = 8
tv79 = -4						; size = 4
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 406  :         {return ((float)atan2((double)_Y, (double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR __Y$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan2
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv77[ebp]
	movsd	xmm0, QWORD PTR tv77[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv79[ebp], xmm0
	fld	DWORD PTR tv79[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _atanf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_atanf	PROC						; COMDAT

; 404  :         {return ((float)atan((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_atanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _asinf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_asinf	PROC						; COMDAT

; 402  :         {return ((float)asin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_asin
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_asinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _acosf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_acosf	PROC						; COMDAT

; 400  :         {return ((float)acos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_acos
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_acosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
END
