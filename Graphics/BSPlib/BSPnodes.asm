; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\Graphics\BSPlib\BSPnodes.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?VT@?$CVarTypeInfo@_J@ATL@@2GB			; ATL::CVarTypeInfo<__int64>::VT
PUBLIC	?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ ; ATL::CVarTypeInfo<__int64>::pmField
PUBLIC	___pobjMapEntryFirst
PUBLIC	___pobjMapEntryLast
PUBLIC	?VT@?$CVarTypeInfo@PA_J@ATL@@2GB		; ATL::CVarTypeInfo<__int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ ; ATL::CVarTypeInfo<__int64 *>::pmField
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?VT@?$CVarTypeInfo@_K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned __int64>::VT
PUBLIC	??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@	; `string'
PUBLIC	?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64>::pmField
PUBLIC	??_C@_08PICKODJL@FileType?$AA@			; `string'
PUBLIC	??_C@_09JKPGEJCH@Interface?$AA@			; `string'
PUBLIC	??_C@_08PPIOJEA@Hardware?$AA@			; `string'
PUBLIC	?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA	; ATL::_pPerfRegFunc
PUBLIC	??_C@_04IHBFOLAC@Mime?$AA@			; `string'
PUBLIC	?_pPerfUnRegFunc@ATL@@3P6AJXZA			; ATL::_pPerfUnRegFunc
PUBLIC	??_C@_03DDIMFGBA@SAM?$AA@			; `string'
PUBLIC	?_AtlRegisterPerUser@ATL@@3_NA			; ATL::_AtlRegisterPerUser
PUBLIC	??_C@_08LOPHEHKG@SECURITY?$AA@			; `string'
PUBLIC	??_C@_06FDHFNJBJ@SYSTEM?$AA@			; `string'
PUBLIC	??_C@_08KEKAJNJI@Software?$AA@			; `string'
PUBLIC	??_C@_07KJLOKDKB@TypeLib?$AA@			; `string'
PUBLIC	?VT@?$CVarTypeInfo@PA_K@ATL@@2GB		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
PUBLIC	__GUID_00000000_0000_0000_c000_000000000046
PUBLIC	?VT@?$CVarTypeInfo@M@ATL@@2GB			; ATL::CVarTypeInfo<float>::VT
PUBLIC	?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ ; ATL::CVarTypeInfo<float>::pmField
PUBLIC	__GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
PUBLIC	?VT@?$CVarTypeInfo@PAM@ATL@@2GB			; ATL::CVarTypeInfo<float *>::VT
PUBLIC	__GUID_00020400_0000_0000_c000_000000000046
PUBLIC	?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ ; ATL::CVarTypeInfo<float *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@N@ATL@@2GB			; ATL::CVarTypeInfo<double>::VT
PUBLIC	?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ ; ATL::CVarTypeInfo<double>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAN@ATL@@2GB			; ATL::CVarTypeInfo<double *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ ; ATL::CVarTypeInfo<double *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB	; ATL::CVarTypeInfo<tagVARIANT *>::VT
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	__GUID_0002e012_0000_0000_c000_000000000046
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?VT@?$CVarTypeInfo@PA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ ; ATL::CVarTypeInfo<wchar_t *>::pmField
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t * *>::VT
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ ; ATL::CVarTypeInfo<wchar_t * *>::pmField
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown *>::VT
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown *>::pmField
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown * *>::pmField
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	__GUID_0000010c_0000_0000_c000_000000000046
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch *>::VT
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch *>::pmField
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	??_C@_05GIBEAPNE@CLSID?$AA@			; `string'
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	_IID_IAxWinHostWindow
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch * *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY>::VT
PUBLIC	?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY>::pmField
PUBLIC	??_C@_05PDIKPLII@AppID?$AA@			; `string'
PUBLIC	?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY *>::VT
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY *>::pmField
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?chDirSep@ATL@@3DB				; ATL::chDirSep
PUBLIC	?chRightBracket@ATL@@3DB			; ATL::chRightBracket
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?chLeftBracket@ATL@@3DB				; ATL::chLeftBracket
PUBLIC	?chQuote@ATL@@3DB				; ATL::chQuote
PUBLIC	?chEquals@ATL@@3DB				; ATL::chEquals
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?szStringVal@ATL@@3QBDB				; ATL::szStringVal
PUBLIC	??_C@_01CPLAODJH@S?$AA@				; `string'
PUBLIC	?multiszStringVal@ATL@@3QBDB			; ATL::multiszStringVal
PUBLIC	_IID_IAxWinHostWindowLic
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	??_C@_01PLPBNMEI@M?$AA@				; `string'
PUBLIC	?szDwordVal@ATL@@3QBDB				; ATL::szDwordVal
PUBLIC	??_C@_01CKDDGHAB@D?$AA@				; `string'
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?szBinaryVal@ATL@@3QBDB				; ATL::szBinaryVal
PUBLIC	??_C@_01HMGJMAIH@B?$AA@				; `string'
PUBLIC	?szValToken@ATL@@3QBDB				; ATL::szValToken
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	??_C@_03LAIAPFCB@Val?$AA@			; `string'
PUBLIC	?szForceRemove@ATL@@3QBDB			; ATL::szForceRemove
PUBLIC	??_C@_0M@DBGDLGLL@ForceRemove?$AA@		; `string'
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?szNoRemove@ATL@@3QBDB				; ATL::szNoRemove
PUBLIC	??_C@_08KAAPDIAN@NoRemove?$AA@			; `string'
PUBLIC	?szDelete@ATL@@3QBDB				; ATL::szDelete
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	??_C@_06JBKGCNBB@Delete?$AA@			; `string'
PUBLIC	?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA	; ATL::CComApartment::ATL_CREATE_OBJECT
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	_IID_IAxWinAmbientDispatch
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A ; ATL::_pAtlAutoThreadModule
PUBLIC	?ShadowBSPRendering@@3_NA			; ShadowBSPRendering
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?ShadowAlphaLevel@@3MA				; ShadowAlphaLevel
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?m_bInitFailed@CAtlBaseModule@ATL@@2_NA		; ATL::CAtlBaseModule::m_bInitFailed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	__GUID_00000000_0000_0000_0000_000000000000
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?MAX_VALUE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_VALUE
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?rgszNeverDelete@CRegParser@ATL@@1QBQBDB	; ATL::CRegParser::rgszNeverDelete
PUBLIC	?cbNeverDelete@CRegParser@ATL@@1HB		; ATL::CRegParser::cbNeverDelete
PUBLIC	?MAX_TYPE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_TYPE
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	_IID_IAxWinAmbientDispatchEx
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	_IID_IInternalConnection
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	__GUID_1cf2b120_547d_101b_8e65_08002b2bd119
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?_pAtlModule@ATL@@3PAVCAtlModule@1@A		; ATL::_pAtlModule
PUBLIC	?m_libid@CAtlModule@ATL@@2U_GUID@@A		; ATL::CAtlModule::m_libid
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	__GUID_00000146_0000_0000_c000_000000000046
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?VT@?$CVarTypeInfo@D@ATL@@2GB			; ATL::CVarTypeInfo<char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ ; ATL::CVarTypeInfo<char>::pmField
PUBLIC	?VT@?$CVarTypeInfo@E@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ ; ATL::CVarTypeInfo<unsigned char>::pmField
PUBLIC	_CLSID_Registrar
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?_Min@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Min
PUBLIC	?VT@?$CVarTypeInfo@PAD@ATL@@2GB			; ATL::CVarTypeInfo<char *>::VT
PUBLIC	?_Max@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Max
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ ; ATL::CVarTypeInfo<char *>::pmField
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?_Min@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Min
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?_Max@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Max
PUBLIC	?VT@?$CVarTypeInfo@PAE@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char *>::VT
PUBLIC	__GUID_00000109_0000_0000_c000_000000000046
PUBLIC	?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ ; ATL::CVarTypeInfo<unsigned char *>::pmField
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?_Min@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Min
PUBLIC	__GUID_b196b284_bab4_101a_b69c_00aa00341d07
PUBLIC	?_Max@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Max
PUBLIC	?VT@?$CVarTypeInfo@F@ATL@@2GB			; ATL::CVarTypeInfo<short>::VT
PUBLIC	_IID_IRegistrar
PUBLIC	?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ ; ATL::CVarTypeInfo<short>::pmField
PUBLIC	?_Min@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Min
PUBLIC	?_Max@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Max
PUBLIC	?VT@?$CVarTypeInfo@PAF@ATL@@2GB			; ATL::CVarTypeInfo<short *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ ; ATL::CVarTypeInfo<short *>::pmField
PUBLIC	?_Min@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Min
PUBLIC	__GUID_00000001_0000_0000_c000_000000000046
PUBLIC	?_Max@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Max
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?VT@?$CVarTypeInfo@G@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short>::VT
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ ; ATL::CVarTypeInfo<unsigned short>::pmField
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	__GUID_00020401_0000_0000_c000_000000000046
PUBLIC	?_Min@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Min
PUBLIC	_LIBID_ATLLib
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?_Max@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Max
PUBLIC	__GUID_00020412_0000_0000_c000_000000000046
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?VT@?$CVarTypeInfo@PAG@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short *>::VT
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ ; ATL::CVarTypeInfo<unsigned short *>::pmField
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?VT@?$CVarTypeInfo@H@ATL@@2GB			; ATL::CVarTypeInfo<int>::VT
PUBLIC	?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ ; ATL::CVarTypeInfo<int>::pmField
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?VT@?$CVarTypeInfo@PAH@ATL@@2GB			; ATL::CVarTypeInfo<int *>::VT
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ ; ATL::CVarTypeInfo<int *>::pmField
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?VT@?$CVarTypeInfo@I@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int>::VT
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ ; ATL::CVarTypeInfo<unsigned int>::pmField
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?VT@?$CVarTypeInfo@PAI@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ ; ATL::CVarTypeInfo<unsigned int *>::pmField
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?VT@?$CVarTypeInfo@J@ATL@@2GB			; ATL::CVarTypeInfo<long>::VT
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ ; ATL::CVarTypeInfo<long>::pmField
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?_pModule@ATL@@3PAVCComModule@1@A		; ATL::_pModule
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?VT@?$CVarTypeInfo@PAJ@ATL@@2GB			; ATL::CVarTypeInfo<long *>::VT
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ ; ATL::CVarTypeInfo<long *>::pmField
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	_IID_IDocHostUIHandlerDispatch
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?VT@?$CVarTypeInfo@K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long>::VT
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ ; ATL::CVarTypeInfo<unsigned long>::pmField
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?VT@?$CVarTypeInfo@PAK@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long *>::VT
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ ; ATL::CVarTypeInfo<unsigned long *>::pmField
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA
_BSS	SEGMENT
?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA DD 01H DUP (?) ; ATL::_pPerfRegFunc
_BSS	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZA
_BSS	SEGMENT
?_pPerfUnRegFunc@ATL@@3P6AJXZA DD 01H DUP (?)		; ATL::_pPerfUnRegFunc
_BSS	ENDS
;	COMDAT ?_AtlRegisterPerUser@ATL@@3_NA
_BSS	SEGMENT
?_AtlRegisterPerUser@ATL@@3_NA DB 01H DUP (?)		; ATL::_AtlRegisterPerUser
_BSS	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_BSS	SEGMENT
?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA DD 01H DUP (?) ; ATL::CComApartment::ATL_CREATE_OBJECT
_BSS	ENDS
;	COMDAT ?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A
_BSS	SEGMENT
?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A DD 01H DUP (?) ; ATL::_pAtlAutoThreadModule
_BSS	ENDS
_BSS	SEGMENT
?ShadowBSPRendering@@3_NA DB 01H DUP (?)		; ShadowBSPRendering
	ALIGN	4

?ShadowAlphaLevel@@3MA DD 01H DUP (?)			; ShadowAlphaLevel
_BSS	ENDS
;	COMDAT ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA
_BSS	SEGMENT
?m_bInitFailed@CAtlBaseModule@ATL@@2_NA DB 01H DUP (?)	; ATL::CAtlBaseModule::m_bInitFailed
_BSS	ENDS
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_BSS	SEGMENT
?_pAtlModule@ATL@@3PAVCAtlModule@1@A DD 01H DUP (?)	; ATL::_pAtlModule
_BSS	ENDS
;	COMDAT ?m_libid@CAtlModule@ATL@@2U_GUID@@A
_BSS	SEGMENT
?m_libid@CAtlModule@ATL@@2U_GUID@@A DB 010H DUP (?)	; ATL::CAtlModule::m_libid
_BSS	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_BSS	SEGMENT
?_pModule@ATL@@3PAVCComModule@1@A DD 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long *>::pmField
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAK@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAK@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned long *>::VT
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long>::pmField
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@K@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned long>::VT
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
_IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ DD 08H ; ATL::CVarTypeInfo<long *>::pmField
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAJ@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAJ@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<long *>::VT
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ DD 08H ; ATL::CVarTypeInfo<long>::pmField
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@J@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<long>::VT
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAI@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAI@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned int *>::VT
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int>::pmField
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@I@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@I@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned int>::VT
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ DD 08H ; ATL::CVarTypeInfo<int *>::pmField
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAH@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAH@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<int *>::VT
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ DD 08H ; ATL::CVarTypeInfo<int>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@H@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@H@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<int>::VT
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short *>::pmField
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAG@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAG@ATL@@2GB DW 04012H		; ATL::CVarTypeInfo<unsigned short *>::VT
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT __GUID_00020412_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020412_0000_0000_c000_000000000046 DD 020412H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Max@?$AtlLimits@_K@ATL@@2_KB DQ ffffffffffffffffH	; ATL::AtlLimits<unsigned __int64>::_Max
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT
_LIBID_ATLLib DD 044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Min@?$AtlLimits@_K@ATL@@2_KB DQ 0000000000000000H	; ATL::AtlLimits<unsigned __int64>::_Min
CONST	ENDS
;	COMDAT __GUID_00020401_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020401_0000_0000_c000_000000000046 DD 020401H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short>::pmField
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@G@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@G@ATL@@2GB DW 012H			; ATL::CVarTypeInfo<unsigned short>::VT
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Max@?$AtlLimits@_J@ATL@@2_JB DQ 7fffffffffffffffH	; ATL::AtlLimits<__int64>::_Max
CONST	ENDS
;	COMDAT __GUID_00000001_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000001_0000_0000_c000_000000000046 DD 01H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Min@?$AtlLimits@_J@ATL@@2_JB DQ 8000000000000000H	; ATL::AtlLimits<__int64>::_Min
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ DD 08H ; ATL::CVarTypeInfo<short *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAF@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAF@ATL@@2GB DW 04002H		; ATL::CVarTypeInfo<short *>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Max@?$AtlLimits@K@ATL@@2KB DD 0ffffffffH		; ATL::AtlLimits<unsigned long>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Min@?$AtlLimits@K@ATL@@2KB DD 00H			; ATL::AtlLimits<unsigned long>::_Min
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ DD 08H ; ATL::CVarTypeInfo<short>::pmField
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT
_IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@F@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@F@ATL@@2GB DW 02H			; ATL::CVarTypeInfo<short>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Max@?$AtlLimits@J@ATL@@2JB DD 07fffffffH		; ATL::AtlLimits<long>::_Max
CONST	ENDS
;	COMDAT __GUID_b196b284_bab4_101a_b69c_00aa00341d07
CONST	SEGMENT
__GUID_b196b284_bab4_101a_b69c_00aa00341d07 DD 0b196b284H
	DW	0bab4H
	DW	0101aH
	DB	0b6H
	DB	09cH
	DB	00H
	DB	0aaH
	DB	00H
	DB	034H
	DB	01dH
	DB	07H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Min@?$AtlLimits@J@ATL@@2JB DD 080000000H		; ATL::AtlLimits<long>::_Min
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT __GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
CONST	SEGMENT
__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713 DD 07fd52380H
	DW	04e07H
	DW	0101bH
	DB	0aeH
	DB	02dH
	DB	08H
	DB	00H
	DB	02bH
	DB	02eH
	DB	0c7H
	DB	013H
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char *>::pmField
CONST	ENDS
;	COMDAT __GUID_00000109_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000109_0000_0000_c000_000000000046 DD 0109H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAE@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAE@ATL@@2GB DW 04011H		; ATL::CVarTypeInfo<unsigned char *>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Max@?$AtlLimits@I@ATL@@2IB DD 0ffffffffH		; ATL::AtlLimits<unsigned int>::_Max
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Min@?$AtlLimits@I@ATL@@2IB DD 00H			; ATL::AtlLimits<unsigned int>::_Min
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ DD 08H ; ATL::CVarTypeInfo<char *>::pmField
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Max@?$AtlLimits@H@ATL@@2HB DD 07fffffffH		; ATL::AtlLimits<int>::_Max
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAD@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAD@ATL@@2GB DW 04010H		; ATL::CVarTypeInfo<char *>::VT
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Min@?$AtlLimits@H@ATL@@2HB DD 080000000H		; ATL::AtlLimits<int>::_Min
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT
_CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@E@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@E@ATL@@2GB DW 011H			; ATL::CVarTypeInfo<unsigned char>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ DD 08H ; ATL::CVarTypeInfo<char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@D@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@D@ATL@@2GB DW 010H			; ATL::CVarTypeInfo<char>::VT
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT __GUID_00000146_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000146_0000_0000_c000_000000000046 DD 0146H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT __GUID_1cf2b120_547d_101b_8e65_08002b2bd119
CONST	SEGMENT
__GUID_1cf2b120_547d_101b_8e65_08002b2bd119 DD 01cf2b120H
	DW	0547dH
	DW	0101bH
	DB	08eH
	DB	065H
	DB	08H
	DB	00H
	DB	02bH
	DB	02bH
	DB	0d1H
	DB	019H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT
_IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatchEx
CONST	SEGMENT
_IID_IAxWinAmbientDispatchEx DD 0b2d0778bH
	DW	0ac99H
	DW	04c58H
	DB	0a5H
	DB	0c8H
	DB	0e7H
	DB	072H
	DB	04eH
	DB	053H
	DB	016H
	DB	0b5H
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT __GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
CONST	SEGMENT
__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352 DD 0fc4801a3H
	DW	02ba9H
	DW	011cfH
	DB	0a2H
	DB	029H
	DB	00H
	DB	0aaH
	DB	00H
	DB	03dH
	DB	073H
	DB	052H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?MAX_TYPE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_TYPE@CRegParser@ATL@@1HB DD 01000H			; ATL::CRegParser::MAX_TYPE
CONST	ENDS
;	COMDAT ?cbNeverDelete@CRegParser@ATL@@1HB
CONST	SEGMENT
?cbNeverDelete@CRegParser@ATL@@1HB DD 0cH		; ATL::CRegParser::cbNeverDelete
CONST	ENDS
;	COMDAT ?rgszNeverDelete@CRegParser@ATL@@1QBQBDB
CONST	SEGMENT
?rgszNeverDelete@CRegParser@ATL@@1QBQBDB DD FLAT:??_C@_05PDIKPLII@AppID?$AA@ ; ATL::CRegParser::rgszNeverDelete
	DD	FLAT:??_C@_05GIBEAPNE@CLSID?$AA@
	DD	FLAT:??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
	DD	FLAT:??_C@_08PICKODJL@FileType?$AA@
	DD	FLAT:??_C@_09JKPGEJCH@Interface?$AA@
	DD	FLAT:??_C@_08PPIOJEA@Hardware?$AA@
	DD	FLAT:??_C@_04IHBFOLAC@Mime?$AA@
	DD	FLAT:??_C@_03DDIMFGBA@SAM?$AA@
	DD	FLAT:??_C@_08LOPHEHKG@SECURITY?$AA@
	DD	FLAT:??_C@_06FDHFNJBJ@SYSTEM?$AA@
	DD	FLAT:??_C@_08KEKAJNJI@Software?$AA@
	DD	FLAT:??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?MAX_VALUE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_VALUE@CRegParser@ATL@@1HB DD 01000H		; ATL::CRegParser::MAX_VALUE
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
CONST	SEGMENT
__GUID_00000000_0000_0000_0000_000000000000 DD 00H
	DW	00H
	DW	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT
_IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ??_C@_06JBKGCNBB@Delete?$AA@
CONST	SEGMENT
??_C@_06JBKGCNBB@Delete?$AA@ DB 'Delete', 00H		; `string'
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?szDelete@ATL@@3QBDB
CONST	SEGMENT
?szDelete@ATL@@3QBDB DD FLAT:??_C@_06JBKGCNBB@Delete?$AA@ ; ATL::szDelete
CONST	ENDS
;	COMDAT ??_C@_08KAAPDIAN@NoRemove?$AA@
CONST	SEGMENT
??_C@_08KAAPDIAN@NoRemove?$AA@ DB 'NoRemove', 00H	; `string'
CONST	ENDS
;	COMDAT ?szNoRemove@ATL@@3QBDB
CONST	SEGMENT
?szNoRemove@ATL@@3QBDB DD FLAT:??_C@_08KAAPDIAN@NoRemove?$AA@ ; ATL::szNoRemove
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ??_C@_0M@DBGDLGLL@ForceRemove?$AA@
CONST	SEGMENT
??_C@_0M@DBGDLGLL@ForceRemove?$AA@ DB 'ForceRemove', 00H ; `string'
CONST	ENDS
;	COMDAT ?szForceRemove@ATL@@3QBDB
CONST	SEGMENT
?szForceRemove@ATL@@3QBDB DD FLAT:??_C@_0M@DBGDLGLL@ForceRemove?$AA@ ; ATL::szForceRemove
CONST	ENDS
;	COMDAT ??_C@_03LAIAPFCB@Val?$AA@
CONST	SEGMENT
??_C@_03LAIAPFCB@Val?$AA@ DB 'Val', 00H			; `string'
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?szValToken@ATL@@3QBDB
CONST	SEGMENT
?szValToken@ATL@@3QBDB DD FLAT:??_C@_03LAIAPFCB@Val?$AA@ ; ATL::szValToken
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B?$AA@
CONST	SEGMENT
??_C@_01HMGJMAIH@B?$AA@ DB 'B', 00H			; `string'
CONST	ENDS
;	COMDAT ?szBinaryVal@ATL@@3QBDB
CONST	SEGMENT
?szBinaryVal@ATL@@3QBDB DD FLAT:??_C@_01HMGJMAIH@B?$AA@	; ATL::szBinaryVal
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D?$AA@
CONST	SEGMENT
??_C@_01CKDDGHAB@D?$AA@ DB 'D', 00H			; `string'
CONST	ENDS
;	COMDAT ?szDwordVal@ATL@@3QBDB
CONST	SEGMENT
?szDwordVal@ATL@@3QBDB DD FLAT:??_C@_01CKDDGHAB@D?$AA@	; ATL::szDwordVal
CONST	ENDS
;	COMDAT ??_C@_01PLPBNMEI@M?$AA@
CONST	SEGMENT
??_C@_01PLPBNMEI@M?$AA@ DB 'M', 00H			; `string'
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindowLic
CONST	SEGMENT
_IID_IAxWinHostWindowLic DD 03935bda8H
	DW	04ed9H
	DW	0495cH
	DB	086H
	DB	050H
	DB	0e0H
	DB	01fH
	DB	0c1H
	DB	0e3H
	DB	08aH
	DB	04bH
CONST	ENDS
;	COMDAT ?multiszStringVal@ATL@@3QBDB
CONST	SEGMENT
?multiszStringVal@ATL@@3QBDB DD FLAT:??_C@_01PLPBNMEI@M?$AA@ ; ATL::multiszStringVal
CONST	ENDS
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT
??_C@_01CPLAODJH@S?$AA@ DB 'S', 00H			; `string'
CONST	ENDS
;	COMDAT ?szStringVal@ATL@@3QBDB
CONST	SEGMENT
?szStringVal@ATL@@3QBDB DD FLAT:??_C@_01CPLAODJH@S?$AA@	; ATL::szStringVal
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?chEquals@ATL@@3DB
CONST	SEGMENT
?chEquals@ATL@@3DB DB 03dH				; ATL::chEquals
CONST	ENDS
;	COMDAT ?chQuote@ATL@@3DB
CONST	SEGMENT
?chQuote@ATL@@3DB DB 027H				; ATL::chQuote
CONST	ENDS
;	COMDAT ?chLeftBracket@ATL@@3DB
CONST	SEGMENT
?chLeftBracket@ATL@@3DB DB 07bH				; ATL::chLeftBracket
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?chRightBracket@ATL@@3DB
CONST	SEGMENT
?chRightBracket@ATL@@3DB DB 07dH			; ATL::chRightBracket
CONST	ENDS
;	COMDAT ?chDirSep@ATL@@3DB
CONST	SEGMENT
?chDirSep@ATL@@3DB DB 05cH				; ATL::chDirSep
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY *>::pmField
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB DW 04006H	; ATL::CVarTypeInfo<tagCY *>::VT
CONST	ENDS
;	COMDAT ??_C@_05PDIKPLII@AppID?$AA@
CONST	SEGMENT
??_C@_05PDIKPLII@AppID?$AA@ DB 'AppID', 00H		; `string'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB DW 06H		; ATL::CVarTypeInfo<tagCY>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB DW 04009H	; ATL::CVarTypeInfo<IDispatch * *>::VT
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT
_IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ??_C@_05GIBEAPNE@CLSID?$AA@
CONST	SEGMENT
??_C@_05GIBEAPNE@CLSID?$AA@ DB 'CLSID', 00H		; `string'
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch *>::pmField
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB DW 09H	; ATL::CVarTypeInfo<IDispatch *>::VT
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT __GUID_0000010c_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_0000010c_0000_0000_c000_000000000046 DD 010cH
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB DW 0400dH	; ATL::CVarTypeInfo<IUnknown * *>::VT
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
_NEAR_CLIP_DISTANCE DD 03f800000r		; 1
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown *>::pmField
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB DW 0dH	; ATL::CVarTypeInfo<IUnknown *>::VT
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t * *>::pmField
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB DW 04008H		; ATL::CVarTypeInfo<wchar_t * *>::VT
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_W@ATL@@2GB DW 08H			; ATL::CVarTypeInfo<wchar_t *>::VT
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT __GUID_0002e012_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_0002e012_0000_0000_c000_000000000046 DD 02e012H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB DW 0400cH	; ATL::CVarTypeInfo<tagVARIANT *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ DD 08H ; ATL::CVarTypeInfo<double *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAN@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAN@ATL@@2GB DW 04005H		; ATL::CVarTypeInfo<double *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ DD 08H ; ATL::CVarTypeInfo<double>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@N@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@N@ATL@@2GB DW 05H			; ATL::CVarTypeInfo<double>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ DD 08H ; ATL::CVarTypeInfo<float *>::pmField
CONST	ENDS
;	COMDAT __GUID_00020400_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020400_0000_0000_c000_000000000046 DD 020400H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAM@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAM@ATL@@2GB DW 04004H		; ATL::CVarTypeInfo<float *>::VT
CONST	ENDS
;	COMDAT __GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
CONST	SEGMENT
__GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851 DD 0a6bc3ac0H
	DW	0dbaaH
	DW	011ceH
	DB	09dH
	DB	0e3H
	DB	00H
	DB	0aaH
	DB	00H
	DB	04bH
	DB	0b8H
	DB	051H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ DD 08H ; ATL::CVarTypeInfo<float>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@M@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@M@ATL@@2GB DW 04H			; ATL::CVarTypeInfo<float>::VT
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000000_0000_0000_c000_000000000046 DD 00H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_K@ATL@@2GB DW 04015H		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
CONST	ENDS
;	COMDAT ??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	SEGMENT
??_C@_07KJLOKDKB@TypeLib?$AA@ DB 'TypeLib', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KEKAJNJI@Software?$AA@
CONST	SEGMENT
??_C@_08KEKAJNJI@Software?$AA@ DB 'Software', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDHFNJBJ@SYSTEM?$AA@
CONST	SEGMENT
??_C@_06FDHFNJBJ@SYSTEM?$AA@ DB 'SYSTEM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LOPHEHKG@SECURITY?$AA@
CONST	SEGMENT
??_C@_08LOPHEHKG@SECURITY?$AA@ DB 'SECURITY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03DDIMFGBA@SAM?$AA@
CONST	SEGMENT
??_C@_03DDIMFGBA@SAM?$AA@ DB 'SAM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IHBFOLAC@Mime?$AA@
CONST	SEGMENT
??_C@_04IHBFOLAC@Mime?$AA@ DB 'Mime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPIOJEA@Hardware?$AA@
CONST	SEGMENT
??_C@_08PPIOJEA@Hardware?$AA@ DB 'Hardware', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JKPGEJCH@Interface?$AA@
CONST	SEGMENT
??_C@_09JKPGEJCH@Interface?$AA@ DB 'Interface', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PICKODJL@FileType?$AA@
CONST	SEGMENT
??_C@_08PICKODJL@FileType?$AA@ DB 'FileType', 00H	; `string'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64>::pmField
CONST	ENDS
;	COMDAT ??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
CONST	SEGMENT
??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@ DB 'Component Categories', 00H ; `string'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_K@ATL@@2GB DW 015H			; ATL::CVarTypeInfo<unsigned __int64>::VT
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_J@ATL@@2GB DW 04014H		; ATL::CVarTypeInfo<__int64 *>::VT
CONST	ENDS
;	COMDAT ___pobjMapEntryLast
ATL$__z	SEGMENT
___pobjMapEntryLast DD 00H
ATL$__z	ENDS
;	COMDAT ___pobjMapEntryFirst
ATL$__a	SEGMENT
___pobjMapEntryFirst DD 00H
ATL$__a	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_J@ATL@@2GB DW 014H			; ATL::CVarTypeInfo<__int64>::VT
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??1CComBSTR@ATL@@QAE@XZ				; ATL::CComBSTR::~CComBSTR
PUBLIC	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
PUBLIC	??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	??0BNode@@QAE@PAEPAPAW4BNodeType@@@Z		; BNode::BNode
PUBLIC	??1BNode@@UAE@XZ				; BNode::~BNode
PUBLIC	??2BNode@@SAPAXIPAX@Z				; BNode::operator new
PUBLIC	??3BNode@@SAXPAX@Z				; BNode::operator delete
PUBLIC	?RestorePointers@BNode@@SAPAV1@PAEHPAPAW4BNodeType@@@Z ; BNode::RestorePointers
PUBLIC	?Type@BNode@@UAE?AW4BNodeType@@XZ		; BNode::Type
PUBLIC	??_GBNode@@UAEPAXI@Z				; BNode::`scalar deleting destructor'
PUBLIC	??0BSubTree@@QAE@PAEPAPAW4BNodeType@@@Z		; BSubTree::BSubTree
PUBLIC	??1BSubTree@@UAE@XZ				; BSubTree::~BSubTree
PUBLIC	?Draw@BSubTree@@UAEXXZ				; BSubTree::Draw
PUBLIC	?Type@BSubTree@@UAE?AW4BNodeType@@XZ		; BSubTree::Type
PUBLIC	??_GBSubTree@@UAEPAXI@Z				; BSubTree::`scalar deleting destructor'
PUBLIC	??0BRoot@@QAE@PAEPAPAW4BNodeType@@@Z		; BRoot::BRoot
PUBLIC	??1BRoot@@UAE@XZ				; BRoot::~BRoot
PUBLIC	?LoadTextures@BRoot@@QAEXXZ			; BRoot::LoadTextures
PUBLIC	?UnloadTextures@BRoot@@QAEXXZ			; BRoot::UnloadTextures
PUBLIC	?Draw@BRoot@@UAEXXZ				; BRoot::Draw
PUBLIC	?Type@BRoot@@UAE?AW4BNodeType@@XZ		; BRoot::Type
PUBLIC	??_GBRoot@@UAEPAXI@Z				; BRoot::`scalar deleting destructor'
PUBLIC	??0BSpecialXform@@QAE@PAEPAPAW4BNodeType@@@Z	; BSpecialXform::BSpecialXform
PUBLIC	??1BSpecialXform@@UAE@XZ			; BSpecialXform::~BSpecialXform
PUBLIC	?Draw@BSpecialXform@@UAEXXZ			; BSpecialXform::Draw
PUBLIC	?Type@BSpecialXform@@UAE?AW4BNodeType@@XZ	; BSpecialXform::Type
PUBLIC	??_GBSpecialXform@@UAEPAXI@Z			; BSpecialXform::`scalar deleting destructor'
PUBLIC	??0BSlotNode@@QAE@PAEPAPAW4BNodeType@@@Z	; BSlotNode::BSlotNode
PUBLIC	??1BSlotNode@@UAE@XZ				; BSlotNode::~BSlotNode
PUBLIC	?Draw@BSlotNode@@UAEXXZ				; BSlotNode::Draw
PUBLIC	?Type@BSlotNode@@UAE?AW4BNodeType@@XZ		; BSlotNode::Type
PUBLIC	??_GBSlotNode@@UAEPAXI@Z			; BSlotNode::`scalar deleting destructor'
PUBLIC	??0BDofNode@@QAE@PAEPAPAW4BNodeType@@@Z		; BDofNode::BDofNode
PUBLIC	??1BDofNode@@UAE@XZ				; BDofNode::~BDofNode
PUBLIC	?Draw@BDofNode@@UAEXXZ				; BDofNode::Draw
PUBLIC	?Type@BDofNode@@UAE?AW4BNodeType@@XZ		; BDofNode::Type
PUBLIC	??_GBDofNode@@UAEPAXI@Z				; BDofNode::`scalar deleting destructor'
PUBLIC	??0BXDofNode@@QAE@PAEPAPAW4BNodeType@@@Z	; BXDofNode::BXDofNode
PUBLIC	??1BXDofNode@@UAE@XZ				; BXDofNode::~BXDofNode
PUBLIC	?Draw@BXDofNode@@UAEXXZ				; BXDofNode::Draw
PUBLIC	?Type@BXDofNode@@UAE?AW4BNodeType@@XZ		; BXDofNode::Type
PUBLIC	??_GBXDofNode@@UAEPAXI@Z			; BXDofNode::`scalar deleting destructor'
PUBLIC	??0BTransNode@@QAE@PAEPAPAW4BNodeType@@@Z	; BTransNode::BTransNode
PUBLIC	??1BTransNode@@UAE@XZ				; BTransNode::~BTransNode
PUBLIC	?Draw@BTransNode@@UAEXXZ			; BTransNode::Draw
PUBLIC	?Type@BTransNode@@UAE?AW4BNodeType@@XZ		; BTransNode::Type
PUBLIC	??_GBTransNode@@UAEPAXI@Z			; BTransNode::`scalar deleting destructor'
PUBLIC	??0BScaleNode@@QAE@PAEPAPAW4BNodeType@@@Z	; BScaleNode::BScaleNode
PUBLIC	??1BScaleNode@@UAE@XZ				; BScaleNode::~BScaleNode
PUBLIC	?Draw@BScaleNode@@UAEXXZ			; BScaleNode::Draw
PUBLIC	?Type@BScaleNode@@UAE?AW4BNodeType@@XZ		; BScaleNode::Type
PUBLIC	??_GBScaleNode@@UAEPAXI@Z			; BScaleNode::`scalar deleting destructor'
PUBLIC	??0BSwitchNode@@QAE@PAEPAPAW4BNodeType@@@Z	; BSwitchNode::BSwitchNode
PUBLIC	??1BSwitchNode@@UAE@XZ				; BSwitchNode::~BSwitchNode
PUBLIC	?Draw@BSwitchNode@@UAEXXZ			; BSwitchNode::Draw
PUBLIC	?Type@BSwitchNode@@UAE?AW4BNodeType@@XZ		; BSwitchNode::Type
PUBLIC	??_GBSwitchNode@@UAEPAXI@Z			; BSwitchNode::`scalar deleting destructor'
PUBLIC	??0BXSwitchNode@@QAE@PAEPAPAW4BNodeType@@@Z	; BXSwitchNode::BXSwitchNode
PUBLIC	??1BXSwitchNode@@UAE@XZ				; BXSwitchNode::~BXSwitchNode
PUBLIC	?Draw@BXSwitchNode@@UAEXXZ			; BXSwitchNode::Draw
PUBLIC	?Type@BXSwitchNode@@UAE?AW4BNodeType@@XZ	; BXSwitchNode::Type
PUBLIC	??_GBXSwitchNode@@UAEPAXI@Z			; BXSwitchNode::`scalar deleting destructor'
PUBLIC	??0BSplitterNode@@QAE@PAEPAPAW4BNodeType@@@Z	; BSplitterNode::BSplitterNode
PUBLIC	??1BSplitterNode@@UAE@XZ			; BSplitterNode::~BSplitterNode
PUBLIC	?Draw@BSplitterNode@@UAEXXZ			; BSplitterNode::Draw
PUBLIC	?Type@BSplitterNode@@UAE?AW4BNodeType@@XZ	; BSplitterNode::Type
PUBLIC	??_GBSplitterNode@@UAEPAXI@Z			; BSplitterNode::`scalar deleting destructor'
PUBLIC	??0BPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z	; BPrimitiveNode::BPrimitiveNode
PUBLIC	??1BPrimitiveNode@@UAE@XZ			; BPrimitiveNode::~BPrimitiveNode
PUBLIC	?Draw@BPrimitiveNode@@UAEXXZ			; BPrimitiveNode::Draw
PUBLIC	?Type@BPrimitiveNode@@UAE?AW4BNodeType@@XZ	; BPrimitiveNode::Type
PUBLIC	??_GBPrimitiveNode@@UAEPAXI@Z			; BPrimitiveNode::`scalar deleting destructor'
PUBLIC	??0BLitPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z ; BLitPrimitiveNode::BLitPrimitiveNode
PUBLIC	??1BLitPrimitiveNode@@UAE@XZ			; BLitPrimitiveNode::~BLitPrimitiveNode
PUBLIC	?Draw@BLitPrimitiveNode@@UAEXXZ			; BLitPrimitiveNode::Draw
PUBLIC	?Type@BLitPrimitiveNode@@UAE?AW4BNodeType@@XZ	; BLitPrimitiveNode::Type
PUBLIC	??_GBLitPrimitiveNode@@UAEPAXI@Z		; BLitPrimitiveNode::`scalar deleting destructor'
PUBLIC	??0BCulledPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z ; BCulledPrimitiveNode::BCulledPrimitiveNode
PUBLIC	??1BCulledPrimitiveNode@@UAE@XZ			; BCulledPrimitiveNode::~BCulledPrimitiveNode
PUBLIC	?Draw@BCulledPrimitiveNode@@UAEXXZ		; BCulledPrimitiveNode::Draw
PUBLIC	?Type@BCulledPrimitiveNode@@UAE?AW4BNodeType@@XZ ; BCulledPrimitiveNode::Type
PUBLIC	??_GBCulledPrimitiveNode@@UAEPAXI@Z		; BCulledPrimitiveNode::`scalar deleting destructor'
PUBLIC	??0BLightStringNode@@QAE@PAEPAPAW4BNodeType@@@Z	; BLightStringNode::BLightStringNode
PUBLIC	??1BLightStringNode@@UAE@XZ			; BLightStringNode::~BLightStringNode
PUBLIC	?Draw@BLightStringNode@@UAEXXZ			; BLightStringNode::Draw
PUBLIC	?Type@BLightStringNode@@UAE?AW4BNodeType@@XZ	; BLightStringNode::Type
PUBLIC	??_GBLightStringNode@@UAEPAXI@Z			; BLightStringNode::`scalar deleting destructor'
PUBLIC	??0BRenderControlNode@@QAE@PAEPAPAW4BNodeType@@@Z ; BRenderControlNode::BRenderControlNode
PUBLIC	??1BRenderControlNode@@UAE@XZ			; BRenderControlNode::~BRenderControlNode
PUBLIC	?Draw@BRenderControlNode@@UAEXXZ		; BRenderControlNode::Draw
PUBLIC	?Type@BRenderControlNode@@UAE?AW4BNodeType@@XZ	; BRenderControlNode::Type
PUBLIC	??_GBRenderControlNode@@UAEPAXI@Z		; BRenderControlNode::`scalar deleting destructor'
PUBLIC	?SetTextureTable@StateStackClass@@SAXPBH@Z	; StateStackClass::SetTextureTable
PUBLIC	?mlSinCos@@YAXPAUmlTrig@@M@Z			; mlSinCos
PUBLIC	?Process_DOFRot@@YAMHHMMMM@Z			; Process_DOFRot
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_7BNode@@6B@					; BNode::`vftable'
PUBLIC	??_7BSubTree@@6B@				; BSubTree::`vftable'
PUBLIC	??_7BRoot@@6B@					; BRoot::`vftable'
PUBLIC	??_7BSpecialXform@@6B@				; BSpecialXform::`vftable'
PUBLIC	??_7BSlotNode@@6B@				; BSlotNode::`vftable'
PUBLIC	??_7BDofNode@@6B@				; BDofNode::`vftable'
PUBLIC	??_7BXDofNode@@6B@				; BXDofNode::`vftable'
PUBLIC	??_7BTransNode@@6B@				; BTransNode::`vftable'
PUBLIC	??_7BScaleNode@@6B@				; BScaleNode::`vftable'
PUBLIC	??_7BSwitchNode@@6B@				; BSwitchNode::`vftable'
PUBLIC	??_7BXSwitchNode@@6B@				; BXSwitchNode::`vftable'
PUBLIC	??_7BSplitterNode@@6B@				; BSplitterNode::`vftable'
PUBLIC	??_7BPrimitiveNode@@6B@				; BPrimitiveNode::`vftable'
PUBLIC	??_7BLitPrimitiveNode@@6B@			; BLitPrimitiveNode::`vftable'
PUBLIC	??_7BCulledPrimitiveNode@@6B@			; BCulledPrimitiveNode::`vftable'
PUBLIC	??_7BLightStringNode@@6B@			; BLightStringNode::`vftable'
PUBLIC	??_7BRenderControlNode@@6B@			; BRenderControlNode::`vftable'
PUBLIC	??_C@_0M@CFLADCE@Feb?518?52013?$AA@		; `string'
PUBLIC	??_C@_0N@HOMANILB@BSPnodes?4cpp?$AA@		; `string'
PUBLIC	??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0CF@IAGBJGEG@Decoding?5unrecognized?5BSP?5node?5t@ ; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4BNode@@6B@					; BNode::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBNode@@@8				; BNode `RTTI Type Descriptor'
PUBLIC	??_R3BNode@@8					; BNode::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BNode@@8					; BNode::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BNode@@8				; BNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4BSubTree@@6B@				; BSubTree::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBSubTree@@@8				; BSubTree `RTTI Type Descriptor'
PUBLIC	??_R3BSubTree@@8				; BSubTree::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BSubTree@@8				; BSubTree::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BSubTree@@8			; BSubTree::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4BRoot@@6B@					; BRoot::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBRoot@@@8				; BRoot `RTTI Type Descriptor'
PUBLIC	??_R3BRoot@@8					; BRoot::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BRoot@@8					; BRoot::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BRoot@@8				; BRoot::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4BSpecialXform@@6B@				; BSpecialXform::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBSpecialXform@@@8			; BSpecialXform `RTTI Type Descriptor'
PUBLIC	??_R3BSpecialXform@@8				; BSpecialXform::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BSpecialXform@@8				; BSpecialXform::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BSpecialXform@@8			; BSpecialXform::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4BSlotNode@@6B@				; BSlotNode::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBSlotNode@@@8				; BSlotNode `RTTI Type Descriptor'
PUBLIC	??_R3BSlotNode@@8				; BSlotNode::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BSlotNode@@8				; BSlotNode::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BSlotNode@@8			; BSlotNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4BDofNode@@6B@				; BDofNode::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBDofNode@@@8				; BDofNode `RTTI Type Descriptor'
PUBLIC	??_R3BDofNode@@8				; BDofNode::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BDofNode@@8				; BDofNode::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BDofNode@@8			; BDofNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4BXDofNode@@6B@				; BXDofNode::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBXDofNode@@@8				; BXDofNode `RTTI Type Descriptor'
PUBLIC	??_R3BXDofNode@@8				; BXDofNode::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BXDofNode@@8				; BXDofNode::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BXDofNode@@8			; BXDofNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4BTransNode@@6B@				; BTransNode::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBTransNode@@@8				; BTransNode `RTTI Type Descriptor'
PUBLIC	??_R3BTransNode@@8				; BTransNode::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BTransNode@@8				; BTransNode::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BTransNode@@8			; BTransNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4BScaleNode@@6B@				; BScaleNode::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBScaleNode@@@8				; BScaleNode `RTTI Type Descriptor'
PUBLIC	??_R3BScaleNode@@8				; BScaleNode::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BScaleNode@@8				; BScaleNode::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BScaleNode@@8			; BScaleNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4BSwitchNode@@6B@				; BSwitchNode::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBSwitchNode@@@8				; BSwitchNode `RTTI Type Descriptor'
PUBLIC	??_R3BSwitchNode@@8				; BSwitchNode::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BSwitchNode@@8				; BSwitchNode::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BSwitchNode@@8			; BSwitchNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4BXSwitchNode@@6B@				; BXSwitchNode::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBXSwitchNode@@@8			; BXSwitchNode `RTTI Type Descriptor'
PUBLIC	??_R3BXSwitchNode@@8				; BXSwitchNode::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BXSwitchNode@@8				; BXSwitchNode::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BXSwitchNode@@8			; BXSwitchNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4BSplitterNode@@6B@				; BSplitterNode::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBSplitterNode@@@8			; BSplitterNode `RTTI Type Descriptor'
PUBLIC	??_R3BSplitterNode@@8				; BSplitterNode::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BSplitterNode@@8				; BSplitterNode::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BSplitterNode@@8			; BSplitterNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4BPrimitiveNode@@6B@			; BPrimitiveNode::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBPrimitiveNode@@@8			; BPrimitiveNode `RTTI Type Descriptor'
PUBLIC	??_R3BPrimitiveNode@@8				; BPrimitiveNode::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BPrimitiveNode@@8				; BPrimitiveNode::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BPrimitiveNode@@8			; BPrimitiveNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4BLitPrimitiveNode@@6B@			; BLitPrimitiveNode::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBLitPrimitiveNode@@@8			; BLitPrimitiveNode `RTTI Type Descriptor'
PUBLIC	??_R3BLitPrimitiveNode@@8			; BLitPrimitiveNode::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BLitPrimitiveNode@@8			; BLitPrimitiveNode::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BLitPrimitiveNode@@8		; BLitPrimitiveNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4BCulledPrimitiveNode@@6B@			; BCulledPrimitiveNode::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBCulledPrimitiveNode@@@8		; BCulledPrimitiveNode `RTTI Type Descriptor'
PUBLIC	??_R3BCulledPrimitiveNode@@8			; BCulledPrimitiveNode::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BCulledPrimitiveNode@@8			; BCulledPrimitiveNode::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BCulledPrimitiveNode@@8		; BCulledPrimitiveNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4BLightStringNode@@6B@			; BLightStringNode::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBLightStringNode@@@8			; BLightStringNode `RTTI Type Descriptor'
PUBLIC	??_R3BLightStringNode@@8			; BLightStringNode::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BLightStringNode@@8			; BLightStringNode::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BLightStringNode@@8		; BLightStringNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4BRenderControlNode@@6B@			; BRenderControlNode::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBRenderControlNode@@@8			; BRenderControlNode `RTTI Type Descriptor'
PUBLIC	??_R3BRenderControlNode@@8			; BRenderControlNode::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BRenderControlNode@@8			; BRenderControlNode::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BRenderControlNode@@8		; BRenderControlNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3c8efa2d
PUBLIC	__real@3f800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_exit:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	__imp__SysFreeString@4:PROC
EXTRN	_sprintf:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?MatrixMult@@YAXPBUTrotation@@0PAU1@@Z:PROC	; MatrixMult
EXTRN	?setGlobalZBias@ContextMPR@@QAEXM@Z:PROC	; ContextMPR::setGlobalZBias
EXTRN	?RestorePrimPointers@@YAPAUPrim@@PAEH@Z:PROC	; RestorePrimPointers
EXTRN	??_EBNode@@UAEPAXI@Z:PROC			; BNode::`vector deleting destructor'
EXTRN	??_EBSubTree@@UAEPAXI@Z:PROC			; BSubTree::`vector deleting destructor'
EXTRN	??_EBRoot@@UAEPAXI@Z:PROC			; BRoot::`vector deleting destructor'
EXTRN	??_EBSpecialXform@@UAEPAXI@Z:PROC		; BSpecialXform::`vector deleting destructor'
EXTRN	??_EBSlotNode@@UAEPAXI@Z:PROC			; BSlotNode::`vector deleting destructor'
EXTRN	??_EBDofNode@@UAEPAXI@Z:PROC			; BDofNode::`vector deleting destructor'
EXTRN	??_EBXDofNode@@UAEPAXI@Z:PROC			; BXDofNode::`vector deleting destructor'
EXTRN	??_EBTransNode@@UAEPAXI@Z:PROC			; BTransNode::`vector deleting destructor'
EXTRN	??_EBScaleNode@@UAEPAXI@Z:PROC			; BScaleNode::`vector deleting destructor'
EXTRN	??_EBSwitchNode@@UAEPAXI@Z:PROC			; BSwitchNode::`vector deleting destructor'
EXTRN	??_EBXSwitchNode@@UAEPAXI@Z:PROC		; BXSwitchNode::`vector deleting destructor'
EXTRN	??_EBSplitterNode@@UAEPAXI@Z:PROC		; BSplitterNode::`vector deleting destructor'
EXTRN	??_EBPrimitiveNode@@UAEPAXI@Z:PROC		; BPrimitiveNode::`vector deleting destructor'
EXTRN	??_EBLitPrimitiveNode@@UAEPAXI@Z:PROC		; BLitPrimitiveNode::`vector deleting destructor'
EXTRN	??_EBCulledPrimitiveNode@@UAEPAXI@Z:PROC	; BCulledPrimitiveNode::`vector deleting destructor'
EXTRN	??_EBLightStringNode@@UAEPAXI@Z:PROC		; BLightStringNode::`vector deleting destructor'
EXTRN	??_EBRenderControlNode@@UAEPAXI@Z:PROC		; BRenderControlNode::`vector deleting destructor'
EXTRN	?DrawSubObject@StateStackClass@@SAXPAVObjectInstance@@PBUTrotation@@PBUTpoint@@@Z:PROC ; StateStackClass::DrawSubObject
EXTRN	?CompoundTransform@StateStackClass@@SAXPBUTrotation@@PBUTpoint@@@Z:PROC ; StateStackClass::CompoundTransform
EXTRN	?Light@StateStackClass@@SAXPBUPnormal@@HPBUTpoint@@@Z:PROC ; StateStackClass::Light
EXTRN	?PushAll@StateStackClass@@SAXXZ:PROC		; StateStackClass::PushAll
EXTRN	?PopAll@StateStackClass@@SAXXZ:PROC		; StateStackClass::PopAll
EXTRN	?PushVerts@StateStackClass@@SAXXZ:PROC		; StateStackClass::PushVerts
EXTRN	?PopVerts@StateStackClass@@SAXXZ:PROC		; StateStackClass::PopVerts
EXTRN	?TransformBillboardWithClip@StateStackClass@@SAXPAUTpoint@@HW4BTransformType@@@Z:PROC ; StateStackClass::TransformBillboardWithClip
EXTRN	?Reference@TextureBankClass@@SAXH@Z:PROC	; TextureBankClass::Reference
EXTRN	?Release@TextureBankClass@@SAXH@Z:PROC		; TextureBankClass::Release
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?DrawPrimJumpTable@@3PBQ6AXPAUPrim@@@ZB:DWORD	; DrawPrimJumpTable
EXTRN	?Transform@StateStackClass@@2P6AXPAUTpoint@@H@ZA:DWORD ; StateStackClass::Transform
EXTRN	?CurrentInstance@StateStackClass@@2PAVObjectInstance@@A:DWORD ; StateStackClass::CurrentInstance
EXTRN	?CurrentTextureTable@StateStackClass@@2PBHB:DWORD ; StateStackClass::CurrentTextureTable
EXTRN	?ObjSpaceEye@StateStackClass@@2UTpoint@@A:BYTE	; StateStackClass::ObjSpaceEye
EXTRN	?context@StateStackClass@@2PAVContextMPR@@A:DWORD ; StateStackClass::context
EXTRN	?ScriptArray@@3PAP6AXXZA:BYTE			; ScriptArray
EXTRN	?ScriptArrayLength@@3HA:DWORD			; ScriptArrayLength
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3c8efa2d
CONST	SEGMENT
__real@3c8efa2d DD 03c8efa2dr			; 0.0174533
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@BRenderControlNode@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BRenderControlNode@@8 DD FLAT:??_R0?AVBRenderControlNode@@@8 ; BRenderControlNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BRenderControlNode@@8
rdata$r	ENDS
;	COMDAT ??_R2BRenderControlNode@@8
rdata$r	SEGMENT
??_R2BRenderControlNode@@8 DD FLAT:??_R1A@?0A@EA@BRenderControlNode@@8 ; BRenderControlNode::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BNode@@8
rdata$r	ENDS
;	COMDAT ??_R3BRenderControlNode@@8
rdata$r	SEGMENT
??_R3BRenderControlNode@@8 DD 00H			; BRenderControlNode::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2BRenderControlNode@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBRenderControlNode@@@8
_DATA	SEGMENT
??_R0?AVBRenderControlNode@@@8 DD FLAT:??_7type_info@@6B@ ; BRenderControlNode `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBRenderControlNode@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BRenderControlNode@@6B@
rdata$r	SEGMENT
??_R4BRenderControlNode@@6B@ DD 00H			; BRenderControlNode::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBRenderControlNode@@@8
	DD	FLAT:??_R3BRenderControlNode@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BLightStringNode@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BLightStringNode@@8 DD FLAT:??_R0?AVBLightStringNode@@@8 ; BLightStringNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BLightStringNode@@8
rdata$r	ENDS
;	COMDAT ??_R2BLightStringNode@@8
rdata$r	SEGMENT
??_R2BLightStringNode@@8 DD FLAT:??_R1A@?0A@EA@BLightStringNode@@8 ; BLightStringNode::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BPrimitiveNode@@8
	DD	FLAT:??_R1A@?0A@EA@BNode@@8
rdata$r	ENDS
;	COMDAT ??_R3BLightStringNode@@8
rdata$r	SEGMENT
??_R3BLightStringNode@@8 DD 00H				; BLightStringNode::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2BLightStringNode@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBLightStringNode@@@8
_DATA	SEGMENT
??_R0?AVBLightStringNode@@@8 DD FLAT:??_7type_info@@6B@	; BLightStringNode `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBLightStringNode@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BLightStringNode@@6B@
rdata$r	SEGMENT
??_R4BLightStringNode@@6B@ DD 00H			; BLightStringNode::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBLightStringNode@@@8
	DD	FLAT:??_R3BLightStringNode@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BCulledPrimitiveNode@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BCulledPrimitiveNode@@8 DD FLAT:??_R0?AVBCulledPrimitiveNode@@@8 ; BCulledPrimitiveNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BCulledPrimitiveNode@@8
rdata$r	ENDS
;	COMDAT ??_R2BCulledPrimitiveNode@@8
rdata$r	SEGMENT
??_R2BCulledPrimitiveNode@@8 DD FLAT:??_R1A@?0A@EA@BCulledPrimitiveNode@@8 ; BCulledPrimitiveNode::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BNode@@8
rdata$r	ENDS
;	COMDAT ??_R3BCulledPrimitiveNode@@8
rdata$r	SEGMENT
??_R3BCulledPrimitiveNode@@8 DD 00H			; BCulledPrimitiveNode::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2BCulledPrimitiveNode@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBCulledPrimitiveNode@@@8
_DATA	SEGMENT
??_R0?AVBCulledPrimitiveNode@@@8 DD FLAT:??_7type_info@@6B@ ; BCulledPrimitiveNode `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBCulledPrimitiveNode@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BCulledPrimitiveNode@@6B@
rdata$r	SEGMENT
??_R4BCulledPrimitiveNode@@6B@ DD 00H			; BCulledPrimitiveNode::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBCulledPrimitiveNode@@@8
	DD	FLAT:??_R3BCulledPrimitiveNode@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BLitPrimitiveNode@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BLitPrimitiveNode@@8 DD FLAT:??_R0?AVBLitPrimitiveNode@@@8 ; BLitPrimitiveNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BLitPrimitiveNode@@8
rdata$r	ENDS
;	COMDAT ??_R2BLitPrimitiveNode@@8
rdata$r	SEGMENT
??_R2BLitPrimitiveNode@@8 DD FLAT:??_R1A@?0A@EA@BLitPrimitiveNode@@8 ; BLitPrimitiveNode::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BNode@@8
rdata$r	ENDS
;	COMDAT ??_R3BLitPrimitiveNode@@8
rdata$r	SEGMENT
??_R3BLitPrimitiveNode@@8 DD 00H			; BLitPrimitiveNode::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2BLitPrimitiveNode@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBLitPrimitiveNode@@@8
_DATA	SEGMENT
??_R0?AVBLitPrimitiveNode@@@8 DD FLAT:??_7type_info@@6B@ ; BLitPrimitiveNode `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBLitPrimitiveNode@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BLitPrimitiveNode@@6B@
rdata$r	SEGMENT
??_R4BLitPrimitiveNode@@6B@ DD 00H			; BLitPrimitiveNode::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBLitPrimitiveNode@@@8
	DD	FLAT:??_R3BLitPrimitiveNode@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BPrimitiveNode@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BPrimitiveNode@@8 DD FLAT:??_R0?AVBPrimitiveNode@@@8 ; BPrimitiveNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BPrimitiveNode@@8
rdata$r	ENDS
;	COMDAT ??_R2BPrimitiveNode@@8
rdata$r	SEGMENT
??_R2BPrimitiveNode@@8 DD FLAT:??_R1A@?0A@EA@BPrimitiveNode@@8 ; BPrimitiveNode::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BNode@@8
rdata$r	ENDS
;	COMDAT ??_R3BPrimitiveNode@@8
rdata$r	SEGMENT
??_R3BPrimitiveNode@@8 DD 00H				; BPrimitiveNode::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2BPrimitiveNode@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBPrimitiveNode@@@8
_DATA	SEGMENT
??_R0?AVBPrimitiveNode@@@8 DD FLAT:??_7type_info@@6B@	; BPrimitiveNode `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBPrimitiveNode@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BPrimitiveNode@@6B@
rdata$r	SEGMENT
??_R4BPrimitiveNode@@6B@ DD 00H				; BPrimitiveNode::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBPrimitiveNode@@@8
	DD	FLAT:??_R3BPrimitiveNode@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BSplitterNode@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BSplitterNode@@8 DD FLAT:??_R0?AVBSplitterNode@@@8 ; BSplitterNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BSplitterNode@@8
rdata$r	ENDS
;	COMDAT ??_R2BSplitterNode@@8
rdata$r	SEGMENT
??_R2BSplitterNode@@8 DD FLAT:??_R1A@?0A@EA@BSplitterNode@@8 ; BSplitterNode::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BNode@@8
rdata$r	ENDS
;	COMDAT ??_R3BSplitterNode@@8
rdata$r	SEGMENT
??_R3BSplitterNode@@8 DD 00H				; BSplitterNode::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2BSplitterNode@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBSplitterNode@@@8
_DATA	SEGMENT
??_R0?AVBSplitterNode@@@8 DD FLAT:??_7type_info@@6B@	; BSplitterNode `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBSplitterNode@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BSplitterNode@@6B@
rdata$r	SEGMENT
??_R4BSplitterNode@@6B@ DD 00H				; BSplitterNode::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBSplitterNode@@@8
	DD	FLAT:??_R3BSplitterNode@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BXSwitchNode@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BXSwitchNode@@8 DD FLAT:??_R0?AVBXSwitchNode@@@8 ; BXSwitchNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BXSwitchNode@@8
rdata$r	ENDS
;	COMDAT ??_R2BXSwitchNode@@8
rdata$r	SEGMENT
??_R2BXSwitchNode@@8 DD FLAT:??_R1A@?0A@EA@BXSwitchNode@@8 ; BXSwitchNode::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BNode@@8
rdata$r	ENDS
;	COMDAT ??_R3BXSwitchNode@@8
rdata$r	SEGMENT
??_R3BXSwitchNode@@8 DD 00H				; BXSwitchNode::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2BXSwitchNode@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBXSwitchNode@@@8
_DATA	SEGMENT
??_R0?AVBXSwitchNode@@@8 DD FLAT:??_7type_info@@6B@	; BXSwitchNode `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBXSwitchNode@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BXSwitchNode@@6B@
rdata$r	SEGMENT
??_R4BXSwitchNode@@6B@ DD 00H				; BXSwitchNode::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBXSwitchNode@@@8
	DD	FLAT:??_R3BXSwitchNode@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BSwitchNode@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BSwitchNode@@8 DD FLAT:??_R0?AVBSwitchNode@@@8 ; BSwitchNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BSwitchNode@@8
rdata$r	ENDS
;	COMDAT ??_R2BSwitchNode@@8
rdata$r	SEGMENT
??_R2BSwitchNode@@8 DD FLAT:??_R1A@?0A@EA@BSwitchNode@@8 ; BSwitchNode::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BNode@@8
rdata$r	ENDS
;	COMDAT ??_R3BSwitchNode@@8
rdata$r	SEGMENT
??_R3BSwitchNode@@8 DD 00H				; BSwitchNode::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2BSwitchNode@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBSwitchNode@@@8
_DATA	SEGMENT
??_R0?AVBSwitchNode@@@8 DD FLAT:??_7type_info@@6B@	; BSwitchNode `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBSwitchNode@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BSwitchNode@@6B@
rdata$r	SEGMENT
??_R4BSwitchNode@@6B@ DD 00H				; BSwitchNode::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBSwitchNode@@@8
	DD	FLAT:??_R3BSwitchNode@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BScaleNode@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BScaleNode@@8 DD FLAT:??_R0?AVBScaleNode@@@8 ; BScaleNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BScaleNode@@8
rdata$r	ENDS
;	COMDAT ??_R2BScaleNode@@8
rdata$r	SEGMENT
??_R2BScaleNode@@8 DD FLAT:??_R1A@?0A@EA@BScaleNode@@8	; BScaleNode::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BSubTree@@8
	DD	FLAT:??_R1A@?0A@EA@BNode@@8
rdata$r	ENDS
;	COMDAT ??_R3BScaleNode@@8
rdata$r	SEGMENT
??_R3BScaleNode@@8 DD 00H				; BScaleNode::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2BScaleNode@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBScaleNode@@@8
_DATA	SEGMENT
??_R0?AVBScaleNode@@@8 DD FLAT:??_7type_info@@6B@	; BScaleNode `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBScaleNode@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BScaleNode@@6B@
rdata$r	SEGMENT
??_R4BScaleNode@@6B@ DD 00H				; BScaleNode::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBScaleNode@@@8
	DD	FLAT:??_R3BScaleNode@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BTransNode@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BTransNode@@8 DD FLAT:??_R0?AVBTransNode@@@8 ; BTransNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BTransNode@@8
rdata$r	ENDS
;	COMDAT ??_R2BTransNode@@8
rdata$r	SEGMENT
??_R2BTransNode@@8 DD FLAT:??_R1A@?0A@EA@BTransNode@@8	; BTransNode::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BSubTree@@8
	DD	FLAT:??_R1A@?0A@EA@BNode@@8
rdata$r	ENDS
;	COMDAT ??_R3BTransNode@@8
rdata$r	SEGMENT
??_R3BTransNode@@8 DD 00H				; BTransNode::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2BTransNode@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBTransNode@@@8
_DATA	SEGMENT
??_R0?AVBTransNode@@@8 DD FLAT:??_7type_info@@6B@	; BTransNode `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBTransNode@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BTransNode@@6B@
rdata$r	SEGMENT
??_R4BTransNode@@6B@ DD 00H				; BTransNode::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBTransNode@@@8
	DD	FLAT:??_R3BTransNode@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BXDofNode@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BXDofNode@@8 DD FLAT:??_R0?AVBXDofNode@@@8 ; BXDofNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BXDofNode@@8
rdata$r	ENDS
;	COMDAT ??_R2BXDofNode@@8
rdata$r	SEGMENT
??_R2BXDofNode@@8 DD FLAT:??_R1A@?0A@EA@BXDofNode@@8	; BXDofNode::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BSubTree@@8
	DD	FLAT:??_R1A@?0A@EA@BNode@@8
rdata$r	ENDS
;	COMDAT ??_R3BXDofNode@@8
rdata$r	SEGMENT
??_R3BXDofNode@@8 DD 00H				; BXDofNode::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2BXDofNode@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBXDofNode@@@8
_DATA	SEGMENT
??_R0?AVBXDofNode@@@8 DD FLAT:??_7type_info@@6B@	; BXDofNode `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBXDofNode@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BXDofNode@@6B@
rdata$r	SEGMENT
??_R4BXDofNode@@6B@ DD 00H				; BXDofNode::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBXDofNode@@@8
	DD	FLAT:??_R3BXDofNode@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BDofNode@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BDofNode@@8 DD FLAT:??_R0?AVBDofNode@@@8	; BDofNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BDofNode@@8
rdata$r	ENDS
;	COMDAT ??_R2BDofNode@@8
rdata$r	SEGMENT
??_R2BDofNode@@8 DD FLAT:??_R1A@?0A@EA@BDofNode@@8	; BDofNode::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BSubTree@@8
	DD	FLAT:??_R1A@?0A@EA@BNode@@8
rdata$r	ENDS
;	COMDAT ??_R3BDofNode@@8
rdata$r	SEGMENT
??_R3BDofNode@@8 DD 00H					; BDofNode::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2BDofNode@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBDofNode@@@8
_DATA	SEGMENT
??_R0?AVBDofNode@@@8 DD FLAT:??_7type_info@@6B@		; BDofNode `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBDofNode@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BDofNode@@6B@
rdata$r	SEGMENT
??_R4BDofNode@@6B@ DD 00H				; BDofNode::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBDofNode@@@8
	DD	FLAT:??_R3BDofNode@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BSlotNode@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BSlotNode@@8 DD FLAT:??_R0?AVBSlotNode@@@8 ; BSlotNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BSlotNode@@8
rdata$r	ENDS
;	COMDAT ??_R2BSlotNode@@8
rdata$r	SEGMENT
??_R2BSlotNode@@8 DD FLAT:??_R1A@?0A@EA@BSlotNode@@8	; BSlotNode::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BNode@@8
rdata$r	ENDS
;	COMDAT ??_R3BSlotNode@@8
rdata$r	SEGMENT
??_R3BSlotNode@@8 DD 00H				; BSlotNode::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2BSlotNode@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBSlotNode@@@8
_DATA	SEGMENT
??_R0?AVBSlotNode@@@8 DD FLAT:??_7type_info@@6B@	; BSlotNode `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBSlotNode@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BSlotNode@@6B@
rdata$r	SEGMENT
??_R4BSlotNode@@6B@ DD 00H				; BSlotNode::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBSlotNode@@@8
	DD	FLAT:??_R3BSlotNode@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BSpecialXform@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BSpecialXform@@8 DD FLAT:??_R0?AVBSpecialXform@@@8 ; BSpecialXform::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BSpecialXform@@8
rdata$r	ENDS
;	COMDAT ??_R2BSpecialXform@@8
rdata$r	SEGMENT
??_R2BSpecialXform@@8 DD FLAT:??_R1A@?0A@EA@BSpecialXform@@8 ; BSpecialXform::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BNode@@8
rdata$r	ENDS
;	COMDAT ??_R3BSpecialXform@@8
rdata$r	SEGMENT
??_R3BSpecialXform@@8 DD 00H				; BSpecialXform::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2BSpecialXform@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBSpecialXform@@@8
_DATA	SEGMENT
??_R0?AVBSpecialXform@@@8 DD FLAT:??_7type_info@@6B@	; BSpecialXform `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBSpecialXform@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BSpecialXform@@6B@
rdata$r	SEGMENT
??_R4BSpecialXform@@6B@ DD 00H				; BSpecialXform::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBSpecialXform@@@8
	DD	FLAT:??_R3BSpecialXform@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BRoot@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BRoot@@8 DD FLAT:??_R0?AVBRoot@@@8	; BRoot::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BRoot@@8
rdata$r	ENDS
;	COMDAT ??_R2BRoot@@8
rdata$r	SEGMENT
??_R2BRoot@@8 DD FLAT:??_R1A@?0A@EA@BRoot@@8		; BRoot::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BSubTree@@8
	DD	FLAT:??_R1A@?0A@EA@BNode@@8
rdata$r	ENDS
;	COMDAT ??_R3BRoot@@8
rdata$r	SEGMENT
??_R3BRoot@@8 DD 00H					; BRoot::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2BRoot@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBRoot@@@8
_DATA	SEGMENT
??_R0?AVBRoot@@@8 DD FLAT:??_7type_info@@6B@		; BRoot `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBRoot@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BRoot@@6B@
rdata$r	SEGMENT
??_R4BRoot@@6B@ DD 00H					; BRoot::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBRoot@@@8
	DD	FLAT:??_R3BRoot@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BSubTree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BSubTree@@8 DD FLAT:??_R0?AVBSubTree@@@8	; BSubTree::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BSubTree@@8
rdata$r	ENDS
;	COMDAT ??_R2BSubTree@@8
rdata$r	SEGMENT
??_R2BSubTree@@8 DD FLAT:??_R1A@?0A@EA@BSubTree@@8	; BSubTree::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BNode@@8
rdata$r	ENDS
;	COMDAT ??_R3BSubTree@@8
rdata$r	SEGMENT
??_R3BSubTree@@8 DD 00H					; BSubTree::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2BSubTree@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBSubTree@@@8
_DATA	SEGMENT
??_R0?AVBSubTree@@@8 DD FLAT:??_7type_info@@6B@		; BSubTree `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBSubTree@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BSubTree@@6B@
rdata$r	SEGMENT
??_R4BSubTree@@6B@ DD 00H				; BSubTree::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBSubTree@@@8
	DD	FLAT:??_R3BSubTree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BNode@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BNode@@8 DD FLAT:??_R0?AVBNode@@@8	; BNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BNode@@8
rdata$r	ENDS
;	COMDAT ??_R2BNode@@8
rdata$r	SEGMENT
??_R2BNode@@8 DD FLAT:??_R1A@?0A@EA@BNode@@8		; BNode::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3BNode@@8
rdata$r	SEGMENT
??_R3BNode@@8 DD 00H					; BNode::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2BNode@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBNode@@@8
_DATA	SEGMENT
??_R0?AVBNode@@@8 DD FLAT:??_7type_info@@6B@		; BNode `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBNode@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BNode@@6B@
rdata$r	SEGMENT
??_R4BNode@@6B@ DD 00H					; BNode::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBNode@@@8
	DD	FLAT:??_R3BNode@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@IAGBJGEG@Decoding?5unrecognized?5BSP?5node?5t@
CONST	SEGMENT
??_C@_0CF@IAGBJGEG@Decoding?5unrecognized?5BSP?5node?5t@ DB 'Decoding unr'
	DB	'ecognized BSP node type.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@ DB 'Error:  %'
	DB	'0d  %s  %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HOMANILB@BSPnodes?4cpp?$AA@
CONST	SEGMENT
??_C@_0N@HOMANILB@BSPnodes?4cpp?$AA@ DB 'BSPnodes.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
CONST	SEGMENT
??_C@_0M@CFLADCE@Feb?518?52013?$AA@ DB 'Feb 18 2013', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7BRenderControlNode@@6B@
CONST	SEGMENT
??_7BRenderControlNode@@6B@ DD FLAT:??_R4BRenderControlNode@@6B@ ; BRenderControlNode::`vftable'
	DD	FLAT:??_EBRenderControlNode@@UAEPAXI@Z
	DD	FLAT:?Draw@BRenderControlNode@@UAEXXZ
	DD	FLAT:?Type@BRenderControlNode@@UAE?AW4BNodeType@@XZ
CONST	ENDS
;	COMDAT ??_7BLightStringNode@@6B@
CONST	SEGMENT
??_7BLightStringNode@@6B@ DD FLAT:??_R4BLightStringNode@@6B@ ; BLightStringNode::`vftable'
	DD	FLAT:??_EBLightStringNode@@UAEPAXI@Z
	DD	FLAT:?Draw@BLightStringNode@@UAEXXZ
	DD	FLAT:?Type@BLightStringNode@@UAE?AW4BNodeType@@XZ
CONST	ENDS
;	COMDAT ??_7BCulledPrimitiveNode@@6B@
CONST	SEGMENT
??_7BCulledPrimitiveNode@@6B@ DD FLAT:??_R4BCulledPrimitiveNode@@6B@ ; BCulledPrimitiveNode::`vftable'
	DD	FLAT:??_EBCulledPrimitiveNode@@UAEPAXI@Z
	DD	FLAT:?Draw@BCulledPrimitiveNode@@UAEXXZ
	DD	FLAT:?Type@BCulledPrimitiveNode@@UAE?AW4BNodeType@@XZ
CONST	ENDS
;	COMDAT ??_7BLitPrimitiveNode@@6B@
CONST	SEGMENT
??_7BLitPrimitiveNode@@6B@ DD FLAT:??_R4BLitPrimitiveNode@@6B@ ; BLitPrimitiveNode::`vftable'
	DD	FLAT:??_EBLitPrimitiveNode@@UAEPAXI@Z
	DD	FLAT:?Draw@BLitPrimitiveNode@@UAEXXZ
	DD	FLAT:?Type@BLitPrimitiveNode@@UAE?AW4BNodeType@@XZ
CONST	ENDS
;	COMDAT ??_7BPrimitiveNode@@6B@
CONST	SEGMENT
??_7BPrimitiveNode@@6B@ DD FLAT:??_R4BPrimitiveNode@@6B@ ; BPrimitiveNode::`vftable'
	DD	FLAT:??_EBPrimitiveNode@@UAEPAXI@Z
	DD	FLAT:?Draw@BPrimitiveNode@@UAEXXZ
	DD	FLAT:?Type@BPrimitiveNode@@UAE?AW4BNodeType@@XZ
CONST	ENDS
;	COMDAT ??_7BSplitterNode@@6B@
CONST	SEGMENT
??_7BSplitterNode@@6B@ DD FLAT:??_R4BSplitterNode@@6B@	; BSplitterNode::`vftable'
	DD	FLAT:??_EBSplitterNode@@UAEPAXI@Z
	DD	FLAT:?Draw@BSplitterNode@@UAEXXZ
	DD	FLAT:?Type@BSplitterNode@@UAE?AW4BNodeType@@XZ
CONST	ENDS
;	COMDAT ??_7BXSwitchNode@@6B@
CONST	SEGMENT
??_7BXSwitchNode@@6B@ DD FLAT:??_R4BXSwitchNode@@6B@	; BXSwitchNode::`vftable'
	DD	FLAT:??_EBXSwitchNode@@UAEPAXI@Z
	DD	FLAT:?Draw@BXSwitchNode@@UAEXXZ
	DD	FLAT:?Type@BXSwitchNode@@UAE?AW4BNodeType@@XZ
CONST	ENDS
;	COMDAT ??_7BSwitchNode@@6B@
CONST	SEGMENT
??_7BSwitchNode@@6B@ DD FLAT:??_R4BSwitchNode@@6B@	; BSwitchNode::`vftable'
	DD	FLAT:??_EBSwitchNode@@UAEPAXI@Z
	DD	FLAT:?Draw@BSwitchNode@@UAEXXZ
	DD	FLAT:?Type@BSwitchNode@@UAE?AW4BNodeType@@XZ
CONST	ENDS
;	COMDAT ??_7BScaleNode@@6B@
CONST	SEGMENT
??_7BScaleNode@@6B@ DD FLAT:??_R4BScaleNode@@6B@	; BScaleNode::`vftable'
	DD	FLAT:??_EBScaleNode@@UAEPAXI@Z
	DD	FLAT:?Draw@BScaleNode@@UAEXXZ
	DD	FLAT:?Type@BScaleNode@@UAE?AW4BNodeType@@XZ
CONST	ENDS
;	COMDAT ??_7BTransNode@@6B@
CONST	SEGMENT
??_7BTransNode@@6B@ DD FLAT:??_R4BTransNode@@6B@	; BTransNode::`vftable'
	DD	FLAT:??_EBTransNode@@UAEPAXI@Z
	DD	FLAT:?Draw@BTransNode@@UAEXXZ
	DD	FLAT:?Type@BTransNode@@UAE?AW4BNodeType@@XZ
CONST	ENDS
;	COMDAT ??_7BXDofNode@@6B@
CONST	SEGMENT
??_7BXDofNode@@6B@ DD FLAT:??_R4BXDofNode@@6B@		; BXDofNode::`vftable'
	DD	FLAT:??_EBXDofNode@@UAEPAXI@Z
	DD	FLAT:?Draw@BXDofNode@@UAEXXZ
	DD	FLAT:?Type@BXDofNode@@UAE?AW4BNodeType@@XZ
CONST	ENDS
;	COMDAT ??_7BDofNode@@6B@
CONST	SEGMENT
??_7BDofNode@@6B@ DD FLAT:??_R4BDofNode@@6B@		; BDofNode::`vftable'
	DD	FLAT:??_EBDofNode@@UAEPAXI@Z
	DD	FLAT:?Draw@BDofNode@@UAEXXZ
	DD	FLAT:?Type@BDofNode@@UAE?AW4BNodeType@@XZ
CONST	ENDS
;	COMDAT ??_7BSlotNode@@6B@
CONST	SEGMENT
??_7BSlotNode@@6B@ DD FLAT:??_R4BSlotNode@@6B@		; BSlotNode::`vftable'
	DD	FLAT:??_EBSlotNode@@UAEPAXI@Z
	DD	FLAT:?Draw@BSlotNode@@UAEXXZ
	DD	FLAT:?Type@BSlotNode@@UAE?AW4BNodeType@@XZ
CONST	ENDS
;	COMDAT ??_7BSpecialXform@@6B@
CONST	SEGMENT
??_7BSpecialXform@@6B@ DD FLAT:??_R4BSpecialXform@@6B@	; BSpecialXform::`vftable'
	DD	FLAT:??_EBSpecialXform@@UAEPAXI@Z
	DD	FLAT:?Draw@BSpecialXform@@UAEXXZ
	DD	FLAT:?Type@BSpecialXform@@UAE?AW4BNodeType@@XZ
CONST	ENDS
;	COMDAT ??_7BRoot@@6B@
CONST	SEGMENT
??_7BRoot@@6B@ DD FLAT:??_R4BRoot@@6B@			; BRoot::`vftable'
	DD	FLAT:??_EBRoot@@UAEPAXI@Z
	DD	FLAT:?Draw@BRoot@@UAEXXZ
	DD	FLAT:?Type@BRoot@@UAE?AW4BNodeType@@XZ
CONST	ENDS
;	COMDAT ??_7BSubTree@@6B@
CONST	SEGMENT
??_7BSubTree@@6B@ DD FLAT:??_R4BSubTree@@6B@		; BSubTree::`vftable'
	DD	FLAT:??_EBSubTree@@UAEPAXI@Z
	DD	FLAT:?Draw@BSubTree@@UAEXXZ
	DD	FLAT:?Type@BSubTree@@UAE?AW4BNodeType@@XZ
CONST	ENDS
;	COMDAT ??_7BNode@@6B@
CONST	SEGMENT
??_7BNode@@6B@ DD FLAT:??_R4BNode@@6B@			; BNode::`vftable'
	DD	FLAT:??_EBNode@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:?Type@BNode@@UAE?AW4BNodeType@@XZ
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1BSplitterNode@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1BSplitterNode@@UAE@XZ$0
__ehfuncinfo$??1BSplitterNode@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1BSplitterNode@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1BXSwitchNode@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1BXSwitchNode@@UAE@XZ$0
__ehfuncinfo$??1BXSwitchNode@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1BXSwitchNode@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1BSwitchNode@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1BSwitchNode@@UAE@XZ$0
__ehfuncinfo$??1BSwitchNode@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1BSwitchNode@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1BSpecialXform@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1BSpecialXform@@UAE@XZ$0
__ehfuncinfo$??1BSpecialXform@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1BSpecialXform@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1BSubTree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1BSubTree@@UAE@XZ$0
__ehfuncinfo$??1BSubTree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1BSubTree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$??0BCulledPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0BCulledPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z$0
__unwindtable$??0BLitPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0BLitPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z$0
__unwindtable$??0BPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0BPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z$0
__unwindtable$??0BSplitterNode@@QAE@PAEPAPAW4BNodeType@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0BSplitterNode@@QAE@PAEPAPAW4BNodeType@@@Z$0
__unwindtable$??0BXSwitchNode@@QAE@PAEPAPAW4BNodeType@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0BXSwitchNode@@QAE@PAEPAPAW4BNodeType@@@Z$0
__unwindtable$??0BSwitchNode@@QAE@PAEPAPAW4BNodeType@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0BSwitchNode@@QAE@PAEPAPAW4BNodeType@@@Z$0
__unwindtable$??0BSpecialXform@@QAE@PAEPAPAW4BNodeType@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0BSpecialXform@@QAE@PAEPAPAW4BNodeType@@@Z$0
__unwindtable$??0BSubTree@@QAE@PAEPAPAW4BNodeType@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0BSubTree@@QAE@PAEPAPAW4BNodeType@@@Z$0
__ehfuncinfo$??0BCulledPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0BCulledPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0BLitPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0BLitPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0BPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0BPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0BSplitterNode@@QAE@PAEPAPAW4BNodeType@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0BSplitterNode@@QAE@PAEPAPAW4BNodeType@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0BXSwitchNode@@QAE@PAEPAPAW4BNodeType@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0BXSwitchNode@@QAE@PAEPAPAW4BNodeType@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0BSwitchNode@@QAE@PAEPAPAW4BNodeType@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0BSwitchNode@@QAE@PAEPAPAW4BNodeType@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0BSpecialXform@@QAE@PAEPAPAW4BNodeType@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0BSpecialXform@@QAE@PAEPAPAW4BNodeType@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0BSubTree@@QAE@PAEPAPAW4BNodeType@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0BSubTree@@QAE@PAEPAPAW4BNodeType@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
tv140 = -8						; size = 4
_dofrot$ = -4						; size = 4
_dofNumber$ = 8						; size = 4
_flags$ = 12						; size = 4
_min$ = 16						; size = 4
_max$ = 20						; size = 4
_multiplier$ = 24					; size = 4
_unused$ = 28						; size = 4
?Process_DOFRot@@YAMHHMMMM@Z PROC			; Process_DOFRot

; 379  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 380  : 	float dofrot=TheStateStack.CurrentInstance->DOFValues[dofNumber].rotation;

	mov	eax, DWORD PTR ?CurrentInstance@StateStackClass@@2PAVObjectInstance@@A ; StateStackClass::CurrentInstance
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _dofNumber$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx*8]
	movss	DWORD PTR _dofrot$[ebp], xmm0

; 381  : 
; 382  : 	if(flags & XDOF_NEGATE)

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 1
	je	SHORT $LN6@Process_DO

; 383  : 	{
; 384  : 	  dofrot=-dofrot;

	movss	xmm0, DWORD PTR _dofrot$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _dofrot$[ebp], xmm0
$LN6@Process_DO:

; 385  : 	}
; 386  : 
; 387  : 	if(flags & XDOF_MINMAX)

	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 2
	je	SHORT $LN3@Process_DO

; 388  : 	{
; 389  : 	  if(dofrot<min)

	movss	xmm0, DWORD PTR _min$[ebp]
	comiss	xmm0, DWORD PTR _dofrot$[ebp]
	jbe	SHORT $LN4@Process_DO

; 390  : 		dofrot=min;

	movss	xmm0, DWORD PTR _min$[ebp]
	movss	DWORD PTR _dofrot$[ebp], xmm0
$LN4@Process_DO:

; 391  : 	  if(dofrot>max)

	movss	xmm0, DWORD PTR _dofrot$[ebp]
	comiss	xmm0, DWORD PTR _max$[ebp]
	jbe	SHORT $LN3@Process_DO

; 392  : 		dofrot=max;

	movss	xmm0, DWORD PTR _max$[ebp]
	movss	DWORD PTR _dofrot$[ebp], xmm0
$LN3@Process_DO:

; 393  : 	}
; 394  : 
; 395  : 	if(flags & XDOF_SUBRANGE && min!=max)

	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 4
	je	SHORT $LN1@Process_DO
	movss	xmm0, DWORD PTR _min$[ebp]
	ucomiss	xmm0, DWORD PTR _max$[ebp]
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN1@Process_DO

; 396  : 	{
; 397  : 	  // rescales dofrot so it is 0.0 at Min and 1.0 at Max
; 398  : 	  // it could exceed those bounds, unless MINMAX is set.
; 399  : 	  dofrot-=min;

	movss	xmm0, DWORD PTR _dofrot$[ebp]
	subss	xmm0, DWORD PTR _min$[ebp]
	movss	DWORD PTR _dofrot$[ebp], xmm0

; 400  : 	  dofrot/=max-min;

	movss	xmm0, DWORD PTR _max$[ebp]
	subss	xmm0, DWORD PTR _min$[ebp]
	movss	xmm1, DWORD PTR _dofrot$[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _dofrot$[ebp], xmm1

; 401  : 	  // for dofs, convert it to 1 radian
; 402  : 	  if(flags & XDOF_ISDOF)

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, -2147483648			; 80000000H
	je	SHORT $LN1@Process_DO

; 403  : 		  dofrot*=(float)(3.14159/180.0);

	movss	xmm0, DWORD PTR _dofrot$[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa2d
	movss	DWORD PTR _dofrot$[ebp], xmm0
$LN1@Process_DO:

; 404  : 	  // then it get's rescaled below.
; 405  : 	}
; 406  : 
; 407  : 	return(dofrot*=multiplier);

	movss	xmm0, DWORD PTR _dofrot$[ebp]
	mulss	xmm0, DWORD PTR _multiplier$[ebp]
	movss	DWORD PTR _dofrot$[ebp], xmm0
	movss	xmm0, DWORD PTR _dofrot$[ebp]
	movss	DWORD PTR tv140[ebp], xmm0
	fld	DWORD PTR tv140[ebp]

; 408  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Process_DOFRot@@YAMHHMMMM@Z ENDP			; Process_DOFRot
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?mlSinCos@@YAXPAUmlTrig@@M@Z
_TEXT	SEGMENT
_trig$ = 8						; size = 4
_angle$ = 12						; size = 4
?mlSinCos@@YAXPAUmlTrig@@M@Z PROC			; mlSinCos, COMDAT

; 12   : {

	push	ebp
	mov	ebp, esp

; 13   : #if defined(_MSC_VER)
; 14   : 	__asm 
; 15   : 	{
; 16   : 		__asm	mov     ecx, trig;

	mov	ecx, DWORD PTR _trig$[ebp]

; 17   : 		__asm	fld     dword ptr [angle];

	fld	DWORD PTR _angle$[ebp]

; 18   : 		__asm	fsincos;

	fsincos

; 19   : 		__asm	fstp    dword ptr [ecx]trig.cos;

	fstp	DWORD PTR [ecx+4]

; 20   : 		__asm	fstp    dword ptr [ecx]trig.sin;

	fstp	DWORD PTR [ecx]

; 21   : 	}
; 22   : #else
; 23   : 	trig->sin = (Float32)sin(angle);
; 24   : 	trig->cos = (Float32)cos(angle);
; 25   : #endif
; 26   : }

	pop	ebp
	ret	0
?mlSinCos@@YAXPAUmlTrig@@M@Z ENDP			; mlSinCos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\statestack.h
;	COMDAT ?SetTextureTable@StateStackClass@@SAXPBH@Z
_TEXT	SEGMENT
_pTexIDs$ = 8						; size = 4
?SetTextureTable@StateStackClass@@SAXPBH@Z PROC		; StateStackClass::SetTextureTable, COMDAT

; 91   : 	static void SetTextureTable(const int *pTexIDs) { CurrentTextureTable = pTexIDs; };

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pTexIDs$[ebp]
	mov	DWORD PTR ?CurrentTextureTable@StateStackClass@@2PBHB, eax ; StateStackClass::CurrentTextureTable
	pop	ebp
	ret	0
?SetTextureTable@StateStackClass@@SAXPBH@Z ENDP		; StateStackClass::SetTextureTable
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GBRenderControlNode@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBRenderControlNode@@UAEPAXI@Z PROC			; BRenderControlNode::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BRenderControlNode@@UAE@XZ		; BRenderControlNode::~BRenderControlNode
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3BNode@@SAXPAX@Z			; BNode::operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBRenderControlNode@@UAEPAXI@Z ENDP			; BRenderControlNode::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ?Type@BRenderControlNode@@UAE?AW4BNodeType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@BRenderControlNode@@UAE?AW4BNodeType@@XZ PROC	; BRenderControlNode::Type, COMDAT
; _this$ = ecx

; 312  : 	virtual BNodeType	Type(void)	{ return tagBRenderControlNode; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 16					; 00000010H
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@BRenderControlNode@@UAE?AW4BNodeType@@XZ ENDP	; BRenderControlNode::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
tv65 = -8						; size = 4
_this$ = -4						; size = 4
?Draw@BRenderControlNode@@UAEXXZ PROC			; BRenderControlNode::Draw
; _this$ = ecx

; 766  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 767  : 	switch(Control)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 1
	je	SHORT $LN1@Draw
	jmp	SHORT $LN2@Draw
$LN1@Draw:

; 768  : 	{
; 769  : 	case rcZBias:
; 770  : 		TheStateStack.context->setGlobalZBias(FArg[0]);

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx+28]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?context@StateStackClass@@2PAVContextMPR@@A ; StateStackClass::context
	call	?setGlobalZBias@ContextMPR@@QAEXM@Z	; ContextMPR::setGlobalZBias
$LN2@Draw:

; 771  : 		break;
; 772  : 	}
; 773  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Draw@BRenderControlNode@@UAEXXZ ENDP			; BRenderControlNode::Draw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ??1BRenderControlNode@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1BRenderControlNode@@UAE@XZ PROC			; BRenderControlNode::~BRenderControlNode, COMDAT
; _this$ = ecx

; 305  : 	virtual ~BRenderControlNode()	{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BRenderControlNode@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BNode@@UAE@XZ			; BNode::~BNode
	mov	esp, ebp
	pop	ebp
	ret	0
??1BRenderControlNode@@UAE@XZ ENDP			; BRenderControlNode::~BRenderControlNode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_baseAddress$ = 8					; size = 4
_tagListPtr$ = 12					; size = 4
??0BRenderControlNode@@QAE@PAEPAPAW4BNodeType@@@Z PROC	; BRenderControlNode::BRenderControlNode
; _this$ = ecx

; 263  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _tagListPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _baseAddress$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BNode@@QAE@PAEPAPAW4BNodeType@@@Z	; BNode::BNode
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7BRenderControlNode@@6B@

; 264  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0BRenderControlNode@@QAE@PAEPAPAW4BNodeType@@@Z ENDP	; BRenderControlNode::BRenderControlNode
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GBLightStringNode@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBLightStringNode@@UAEPAXI@Z PROC			; BLightStringNode::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BLightStringNode@@UAE@XZ		; BLightStringNode::~BLightStringNode
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3BNode@@SAXPAX@Z			; BNode::operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBLightStringNode@@UAEPAXI@Z ENDP			; BLightStringNode::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ?Type@BLightStringNode@@UAE?AW4BNodeType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@BLightStringNode@@UAE?AW4BNodeType@@XZ PROC	; BLightStringNode::Type, COMDAT
; _this$ = ecx

; 297  : 	virtual BNodeType	Type(void)	{ return tagBLightStringNode; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 11					; 0000000bH
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@BLightStringNode@@UAE?AW4BNodeType@@XZ ENDP	; BLightStringNode::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Draw@BLightStringNode@@UAEXXZ PROC			; BLightStringNode::Draw
; _this$ = ecx

; 732  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 733  : 	// Clobber the primitive color with the appropriate front or back color
; 734  : 	if ((A*TheStateStack.ObjSpaceEye.x + B*TheStateStack.ObjSpaceEye.y + C*TheStateStack.ObjSpaceEye.z + D) >= 0) {

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR ?ObjSpaceEye@StateStackClass@@2UTpoint@@A
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+16]
	mulss	xmm1, DWORD PTR ?ObjSpaceEye@StateStackClass@@2UTpoint@@A+4
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+20]
	mulss	xmm1, DWORD PTR ?ObjSpaceEye@StateStackClass@@2UTpoint@@A+8
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+24]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN2@Draw

; 735  : 		((PrimPointFC*)prim)->rgba = rgbaFront;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+12], ecx

; 736  : 	} else {

	jmp	SHORT $LN1@Draw
$LN2@Draw:

; 737  : 		((PrimPointFC*)prim)->rgba = rgbaBack;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+12], edx
$LN1@Draw:

; 738  : 	}
; 739  : 
; 740  : 	// Call the appropriate draw function for this polygon
; 741  : 	DrawPrimJumpTable[prim->type]( prim );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?DrawPrimJumpTable@@3PBQ6AXPAUPrim@@@ZB ; DrawPrimJumpTable
	mov	eax, DWORD PTR [edx+ecx*4]
	call	eax
	add	esp, 4

; 742  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Draw@BLightStringNode@@UAEXXZ ENDP			; BLightStringNode::Draw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ??1BLightStringNode@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1BLightStringNode@@UAE@XZ PROC			; BLightStringNode::~BLightStringNode, COMDAT
; _this$ = ecx

; 289  : 	virtual~BLightStringNode()	{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BLightStringNode@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BPrimitiveNode@@UAE@XZ		; BPrimitiveNode::~BPrimitiveNode
	mov	esp, ebp
	pop	ebp
	ret	0
??1BLightStringNode@@UAE@XZ ENDP			; BLightStringNode::~BLightStringNode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_baseAddress$ = 8					; size = 4
_tagListPtr$ = 12					; size = 4
??0BLightStringNode@@QAE@PAEPAPAW4BNodeType@@@Z PROC	; BLightStringNode::BLightStringNode
; _this$ = ecx

; 257  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _tagListPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _baseAddress$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z ; BPrimitiveNode::BPrimitiveNode
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7BLightStringNode@@6B@

; 258  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0BLightStringNode@@QAE@PAEPAPAW4BNodeType@@@Z ENDP	; BLightStringNode::BLightStringNode
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GBCulledPrimitiveNode@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBCulledPrimitiveNode@@UAEPAXI@Z PROC		; BCulledPrimitiveNode::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BCulledPrimitiveNode@@UAE@XZ		; BCulledPrimitiveNode::~BCulledPrimitiveNode
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3BNode@@SAXPAX@Z			; BNode::operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBCulledPrimitiveNode@@UAEPAXI@Z ENDP		; BCulledPrimitiveNode::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ?Type@BCulledPrimitiveNode@@UAE?AW4BNodeType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@BCulledPrimitiveNode@@UAE?AW4BNodeType@@XZ PROC	; BCulledPrimitiveNode::Type, COMDAT
; _this$ = ecx

; 282  : 	virtual BNodeType	Type(void)	{ return tagBCulledPrimitiveNode; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 9
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@BCulledPrimitiveNode@@UAE?AW4BNodeType@@XZ ENDP	; BCulledPrimitiveNode::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Draw@BCulledPrimitiveNode@@UAEXXZ PROC			; BCulledPrimitiveNode::Draw
; _this$ = ecx

; 722  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 723  : 	// Only draw front facing polygons
; 724  : 	if ((poly->A*TheStateStack.ObjSpaceEye.x + poly->B*TheStateStack.ObjSpaceEye.y + poly->C*TheStateStack.ObjSpaceEye.z + poly->D) >= 0){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movss	xmm0, DWORD PTR [ecx+12]
	mulss	xmm0, DWORD PTR ?ObjSpaceEye@StateStackClass@@2UTpoint@@A
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movss	xmm1, DWORD PTR [eax+16]
	mulss	xmm1, DWORD PTR ?ObjSpaceEye@StateStackClass@@2UTpoint@@A+4
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR [edx+20]
	mulss	xmm1, DWORD PTR ?ObjSpaceEye@StateStackClass@@2UTpoint@@A+8
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+24]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN1@Draw

; 725  : 		// Call the appropriate draw function for this polygon
; 726  : 		DrawPrimJumpTable[poly->type]( poly );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?DrawPrimJumpTable@@3PBQ6AXPAUPrim@@@ZB ; DrawPrimJumpTable
	mov	edx, DWORD PTR [ecx+eax*4]
	call	edx
	add	esp, 4
$LN1@Draw:

; 727  : 
; 728  : 	}
; 729  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Draw@BCulledPrimitiveNode@@UAEXXZ ENDP			; BCulledPrimitiveNode::Draw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ??1BCulledPrimitiveNode@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1BCulledPrimitiveNode@@UAE@XZ PROC			; BCulledPrimitiveNode::~BCulledPrimitiveNode, COMDAT
; _this$ = ecx

; 277  : 	virtual~BCulledPrimitiveNode()	{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BCulledPrimitiveNode@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BNode@@UAE@XZ			; BNode::~BNode
	mov	esp, ebp
	pop	ebp
	ret	0
??1BCulledPrimitiveNode@@UAE@XZ ENDP			; BCulledPrimitiveNode::~BCulledPrimitiveNode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_baseAddress$ = 8					; size = 4
_tagListPtr$ = 12					; size = 4
??0BCulledPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z PROC ; BCulledPrimitiveNode::BCulledPrimitiveNode
; _this$ = ecx

; 248  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0BCulledPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _tagListPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _baseAddress$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BNode@@QAE@PAEPAPAW4BNodeType@@@Z	; BNode::BNode
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7BCulledPrimitiveNode@@6B@

; 249  : 	// Now fixup our polygon
; 250  : 	poly		= (Poly*)RestorePrimPointers( baseAddress, (int)poly );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _baseAddress$[ebp]
	push	edx
	call	?RestorePrimPointers@@YAPAUPrim@@PAEH@Z	; RestorePrimPointers
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 251  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0BCulledPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BNode@@UAE@XZ			; BNode::~BNode
__ehhandler$??0BCulledPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0BCulledPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0BCulledPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z ENDP ; BCulledPrimitiveNode::BCulledPrimitiveNode
; Function compile flags: /Odtp
;	COMDAT ??_GBLitPrimitiveNode@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBLitPrimitiveNode@@UAEPAXI@Z PROC			; BLitPrimitiveNode::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BLitPrimitiveNode@@UAE@XZ		; BLitPrimitiveNode::~BLitPrimitiveNode
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3BNode@@SAXPAX@Z			; BNode::operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBLitPrimitiveNode@@UAEPAXI@Z ENDP			; BLitPrimitiveNode::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ?Type@BLitPrimitiveNode@@UAE?AW4BNodeType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@BLitPrimitiveNode@@UAE?AW4BNodeType@@XZ PROC	; BLitPrimitiveNode::Type, COMDAT
; _this$ = ecx

; 270  : 	virtual BNodeType	Type(void)	{ return tagBLitPrimitiveNode; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 8
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@BLitPrimitiveNode@@UAE?AW4BNodeType@@XZ ENDP	; BLitPrimitiveNode::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Draw@BLitPrimitiveNode@@UAEXXZ PROC			; BLitPrimitiveNode::Draw
; _this$ = ecx

; 711  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 712  : 	// Choose the front facing polygon so that lighting is correct
; 713  : 	if ((poly->A*TheStateStack.ObjSpaceEye.x + poly->B*TheStateStack.ObjSpaceEye.y + poly->C*TheStateStack.ObjSpaceEye.z + poly->D) >= 0) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movss	xmm0, DWORD PTR [ecx+12]
	mulss	xmm0, DWORD PTR ?ObjSpaceEye@StateStackClass@@2UTpoint@@A
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movss	xmm1, DWORD PTR [eax+16]
	mulss	xmm1, DWORD PTR ?ObjSpaceEye@StateStackClass@@2UTpoint@@A+4
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR [edx+20]
	mulss	xmm1, DWORD PTR ?ObjSpaceEye@StateStackClass@@2UTpoint@@A+8
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+24]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN2@Draw

; 714  : 		DrawPrimJumpTable[poly->type]( poly );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?DrawPrimJumpTable@@3PBQ6AXPAUPrim@@@ZB ; DrawPrimJumpTable
	mov	edx, DWORD PTR [ecx+eax*4]
	call	edx
	add	esp, 4

; 715  : 	} else {

	jmp	SHORT $LN1@Draw
$LN2@Draw:

; 716  : 		DrawPrimJumpTable[poly->type]( backpoly );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?DrawPrimJumpTable@@3PBQ6AXPAUPrim@@@ZB ; DrawPrimJumpTable
	mov	eax, DWORD PTR [edx+ecx*4]
	call	eax
	add	esp, 4
$LN1@Draw:

; 717  : 	}
; 718  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Draw@BLitPrimitiveNode@@UAEXXZ ENDP			; BLitPrimitiveNode::Draw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ??1BLitPrimitiveNode@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1BLitPrimitiveNode@@UAE@XZ PROC			; BLitPrimitiveNode::~BLitPrimitiveNode, COMDAT
; _this$ = ecx

; 264  : 	virtual ~BLitPrimitiveNode()	{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BLitPrimitiveNode@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BNode@@UAE@XZ			; BNode::~BNode
	mov	esp, ebp
	pop	ebp
	ret	0
??1BLitPrimitiveNode@@UAE@XZ ENDP			; BLitPrimitiveNode::~BLitPrimitiveNode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_baseAddress$ = 8					; size = 4
_tagListPtr$ = 12					; size = 4
??0BLitPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z PROC	; BLitPrimitiveNode::BLitPrimitiveNode
; _this$ = ecx

; 238  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0BLitPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _tagListPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _baseAddress$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BNode@@QAE@PAEPAPAW4BNodeType@@@Z	; BNode::BNode
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7BLitPrimitiveNode@@6B@

; 239  : 	// Now fixup our polygons
; 240  : 	poly		= (Poly*)RestorePrimPointers( baseAddress, (int)poly );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _baseAddress$[ebp]
	push	edx
	call	?RestorePrimPointers@@YAPAUPrim@@PAEH@Z	; RestorePrimPointers
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 241  : 	backpoly	= (Poly*)RestorePrimPointers( baseAddress, (int)backpoly );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _baseAddress$[ebp]
	push	ecx
	call	?RestorePrimPointers@@YAPAUPrim@@PAEH@Z	; RestorePrimPointers
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], eax

; 242  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0BLitPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BNode@@UAE@XZ			; BNode::~BNode
__ehhandler$??0BLitPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0BLitPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0BLitPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z ENDP	; BLitPrimitiveNode::BLitPrimitiveNode
; Function compile flags: /Odtp
;	COMDAT ??_GBPrimitiveNode@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBPrimitiveNode@@UAEPAXI@Z PROC			; BPrimitiveNode::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BPrimitiveNode@@UAE@XZ		; BPrimitiveNode::~BPrimitiveNode
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3BNode@@SAXPAX@Z			; BNode::operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBPrimitiveNode@@UAEPAXI@Z ENDP			; BPrimitiveNode::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ?Type@BPrimitiveNode@@UAE?AW4BNodeType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@BPrimitiveNode@@UAE?AW4BNodeType@@XZ PROC		; BPrimitiveNode::Type, COMDAT
; _this$ = ecx

; 257  : 	virtual BNodeType	Type(void)	{ return tagBPrimitiveNode; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 7
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@BPrimitiveNode@@UAE?AW4BNodeType@@XZ ENDP		; BPrimitiveNode::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Draw@BPrimitiveNode@@UAEXXZ PROC			; BPrimitiveNode::Draw
; _this$ = ecx

; 705  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 706  : 	// Call the appropriate draw function for this primitive
; 707  : 	DrawPrimJumpTable[prim->type]( prim );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?DrawPrimJumpTable@@3PBQ6AXPAUPrim@@@ZB ; DrawPrimJumpTable
	mov	eax, DWORD PTR [edx+ecx*4]
	call	eax
	add	esp, 4

; 708  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Draw@BPrimitiveNode@@UAEXXZ ENDP			; BPrimitiveNode::Draw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ??1BPrimitiveNode@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1BPrimitiveNode@@UAE@XZ PROC				; BPrimitiveNode::~BPrimitiveNode, COMDAT
; _this$ = ecx

; 252  : 	virtual ~BPrimitiveNode()	{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BPrimitiveNode@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BNode@@UAE@XZ			; BNode::~BNode
	mov	esp, ebp
	pop	ebp
	ret	0
??1BPrimitiveNode@@UAE@XZ ENDP				; BPrimitiveNode::~BPrimitiveNode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_baseAddress$ = 8					; size = 4
_tagListPtr$ = 12					; size = 4
??0BPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z PROC	; BPrimitiveNode::BPrimitiveNode
; _this$ = ecx

; 229  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0BPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _tagListPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _baseAddress$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BNode@@QAE@PAEPAPAW4BNodeType@@@Z	; BNode::BNode
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7BPrimitiveNode@@6B@

; 230  : 	// Now fixup our polygon
; 231  : 	prim		= RestorePrimPointers( baseAddress, (int)prim );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _baseAddress$[ebp]
	push	edx
	call	?RestorePrimPointers@@YAPAUPrim@@PAEH@Z	; RestorePrimPointers
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 232  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0BPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BNode@@UAE@XZ			; BNode::~BNode
__ehhandler$??0BPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0BPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0BPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z ENDP	; BPrimitiveNode::BPrimitiveNode
; Function compile flags: /Odtp
;	COMDAT ??_GBSplitterNode@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBSplitterNode@@UAEPAXI@Z PROC			; BSplitterNode::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BSplitterNode@@UAE@XZ		; BSplitterNode::~BSplitterNode
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3BNode@@SAXPAX@Z			; BNode::operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBSplitterNode@@UAEPAXI@Z ENDP			; BSplitterNode::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ?Type@BSplitterNode@@UAE?AW4BNodeType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@BSplitterNode@@UAE?AW4BNodeType@@XZ PROC		; BSplitterNode::Type, COMDAT
; _this$ = ecx

; 245  : 	virtual BNodeType	Type(void)	{ return tagBSplitterNode; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 6
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@BSplitterNode@@UAE?AW4BNodeType@@XZ ENDP		; BSplitterNode::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_child$ = -4						; size = 4
?Draw@BSplitterNode@@UAEXXZ PROC			; BSplitterNode::Draw
; _this$ = ecx

; 662  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 663  : 	BNode	*child;
; 664  : 
; 665  : 	ShiAssert( front );
; 666  : 	ShiAssert( back );
; 667  : 
; 668  : 	if (A*TheStateStack.ObjSpaceEye.x + 
; 669  : 		B*TheStateStack.ObjSpaceEye.y + 
; 670  : 		C*TheStateStack.ObjSpaceEye.z + D > 0.0f) {

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR ?ObjSpaceEye@StateStackClass@@2UTpoint@@A
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+12]
	mulss	xmm1, DWORD PTR ?ObjSpaceEye@StateStackClass@@2UTpoint@@A+4
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+16]
	mulss	xmm1, DWORD PTR ?ObjSpaceEye@StateStackClass@@2UTpoint@@A+8
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+20]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN14@Draw

; 671  : 
; 672  : 		child = front;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _child$[ebp], edx
$LN13@Draw:

; 673  : 		do
; 674  : 		{
; 675  : 			child->Draw();

	mov	eax, DWORD PTR _child$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _child$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax

; 676  : 			child = child->sibling;

	mov	ecx, DWORD PTR _child$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _child$[ebp], edx

; 677  : 		} while (child);

	cmp	DWORD PTR _child$[ebp], 0
	jne	SHORT $LN13@Draw

; 678  : 
; 679  : 		child = back;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _child$[ebp], ecx
$LN10@Draw:

; 680  : 		do
; 681  : 		{
; 682  : 			child->Draw();

	mov	edx, DWORD PTR _child$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _child$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx

; 683  : 			child = child->sibling;

	mov	eax, DWORD PTR _child$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _child$[ebp], ecx

; 684  : 		} while (child);

	cmp	DWORD PTR _child$[ebp], 0
	jne	SHORT $LN10@Draw

; 685  : 	}
; 686  : 	else

	jmp	SHORT $LN1@Draw
$LN14@Draw:

; 687  : 	{
; 688  : 		child = back;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _child$[ebp], eax
$LN6@Draw:

; 689  : 		do
; 690  : 		{
; 691  : 			child->Draw();

	mov	ecx, DWORD PTR _child$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _child$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax

; 692  : 			child = child->sibling;

	mov	ecx, DWORD PTR _child$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _child$[ebp], edx

; 693  : 		} while (child);

	cmp	DWORD PTR _child$[ebp], 0
	jne	SHORT $LN6@Draw

; 694  : 
; 695  : 		child = front;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _child$[ebp], ecx
$LN3@Draw:

; 696  : 		do
; 697  : 		{
; 698  : 			child->Draw();

	mov	edx, DWORD PTR _child$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _child$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx

; 699  : 			child = child->sibling;

	mov	eax, DWORD PTR _child$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _child$[ebp], ecx

; 700  : 		} while (child);

	cmp	DWORD PTR _child$[ebp], 0
	jne	SHORT $LN3@Draw
$LN1@Draw:

; 701  : 	}
; 702  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Draw@BSplitterNode@@UAEXXZ ENDP			; BSplitterNode::Draw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ??1BSplitterNode@@UAE@XZ
_TEXT	SEGMENT
tv89 = -40						; size = 4
$T2 = -36						; size = 4
tv81 = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
$T5 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1BSplitterNode@@UAE@XZ PROC				; BSplitterNode::~BSplitterNode, COMDAT
; _this$ = ecx

; 238  : 	virtual ~BSplitterNode()	{ delete front; delete back; };

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1BSplitterNode@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BSplitterNode@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR $T3[ebp], edx
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T5[ebp], eax
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN3@BSplitterN
	push	1
	mov	ecx, DWORD PTR $T5[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T5[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN4@BSplitterN
$LN3@BSplitterN:
	mov	DWORD PTR tv81[ebp], 0
$LN4@BSplitterN:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T4[ebp], eax
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN5@BSplitterN
	push	1
	mov	ecx, DWORD PTR $T4[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T4[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv89[ebp], eax
	jmp	SHORT $LN1@BSplitterN
$LN5@BSplitterN:
	mov	DWORD PTR tv89[ebp], 0
$LN1@BSplitterN:
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BNode@@UAE@XZ			; BNode::~BNode
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1BSplitterNode@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BNode@@UAE@XZ			; BNode::~BNode
__ehhandler$??1BSplitterNode@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1BSplitterNode@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1BSplitterNode@@UAE@XZ ENDP				; BSplitterNode::~BSplitterNode
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_baseAddress$ = 8					; size = 4
_tagListPtr$ = 12					; size = 4
??0BSplitterNode@@QAE@PAEPAPAW4BNodeType@@@Z PROC	; BSplitterNode::BSplitterNode
; _this$ = ecx

; 219  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0BSplitterNode@@QAE@PAEPAPAW4BNodeType@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _tagListPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _baseAddress$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BNode@@QAE@PAEPAPAW4BNodeType@@@Z	; BNode::BNode
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7BSplitterNode@@6B@

; 220  : 	// Fixup our dependents
; 221  : 	front	= RestorePointers( baseAddress, (int)front, tagListPtr );

	mov	eax, DWORD PTR _tagListPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _baseAddress$[ebp]
	push	eax
	call	?RestorePointers@BNode@@SAPAV1@PAEHPAPAW4BNodeType@@@Z ; BNode::RestorePointers
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 222  : 	back	= RestorePointers( baseAddress, (int)back,  tagListPtr );

	mov	edx, DWORD PTR _tagListPtr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _baseAddress$[ebp]
	push	edx
	call	?RestorePointers@BNode@@SAPAV1@PAEHPAPAW4BNodeType@@@Z ; BNode::RestorePointers
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 223  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0BSplitterNode@@QAE@PAEPAPAW4BNodeType@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BNode@@UAE@XZ			; BNode::~BNode
__ehhandler$??0BSplitterNode@@QAE@PAEPAPAW4BNodeType@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0BSplitterNode@@QAE@PAEPAPAW4BNodeType@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0BSplitterNode@@QAE@PAEPAPAW4BNodeType@@@Z ENDP	; BSplitterNode::BSplitterNode
; Function compile flags: /Odtp
;	COMDAT ??_GBXSwitchNode@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBXSwitchNode@@UAEPAXI@Z PROC			; BXSwitchNode::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BXSwitchNode@@UAE@XZ			; BXSwitchNode::~BXSwitchNode
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3BNode@@SAXPAX@Z			; BNode::operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBXSwitchNode@@UAEPAXI@Z ENDP			; BXSwitchNode::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ?Type@BXSwitchNode@@UAE?AW4BNodeType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@BXSwitchNode@@UAE?AW4BNodeType@@XZ PROC		; BXSwitchNode::Type, COMDAT
; _this$ = ecx

; 231  : 	virtual BNodeType	Type(void)	{ return tagBSwitchNode; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 5
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@BXSwitchNode@@UAE?AW4BNodeType@@XZ ENDP		; BXSwitchNode::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_mask$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?Draw@BXSwitchNode@@UAEXXZ PROC				; BXSwitchNode::Draw
; _this$ = ecx

; 631  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 632  : 	UInt32		mask;
; 633  : 	int			i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 634  : 
; 635  : 	ShiAssert( switchNumber < TheStateStack.CurrentInstance->ParentObject->nSwitches );
; 636  : 	if (switchNumber >= TheStateStack.CurrentInstance->ParentObject->nSwitches)

	mov	eax, DWORD PTR ?CurrentInstance@StateStackClass@@2PAVObjectInstance@@A ; StateStackClass::CurrentInstance
	mov	ecx, DWORD PTR [eax+32]
	movsx	edx, WORD PTR [ecx+52]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], edx
	jl	SHORT $LN6@Draw

; 637  : 		return;

	jmp	$LN7@Draw
$LN6@Draw:

; 638  : 	mask = TheStateStack.CurrentInstance->SwitchValues[switchNumber];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR ?CurrentInstance@StateStackClass@@2PAVObjectInstance@@A ; StateStackClass::CurrentInstance
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _mask$[ebp], edx

; 639  : 	
; 640  : 	if(flags & XSWT_REVERSED_EFFECT)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 1
	je	SHORT $LN4@Draw

; 641  : 		mask=~mask;

	mov	edx, DWORD PTR _mask$[ebp]
	not	edx
	mov	DWORD PTR _mask$[ebp], edx
$LN4@Draw:

; 642  : 	
; 643  : 	
; 644  : 	while (i < numChildren) 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jge	SHORT $LN7@Draw

; 645  : 	{
; 646  : 		if(subTrees[i] )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	DWORD PTR [eax+ecx*4], 0
	je	SHORT $LN2@Draw

; 647  : 		{
; 648  : 			// Only draw this subtree if the corresponding switch bit is set
; 649  : 			if (mask & 1) {

	mov	edx, DWORD PTR _mask$[ebp]
	and	edx, 1
	je	SHORT $LN1@Draw

; 650  : 				TheStateStack.PushVerts();

	call	?PushVerts@StateStackClass@@SAXXZ	; StateStackClass::PushVerts

; 651  : 				subTrees[i]->Draw();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [eax+4]
	call	edx

; 652  : 				TheStateStack.PopVerts();

	call	?PopVerts@StateStackClass@@SAXXZ	; StateStackClass::PopVerts
$LN1@Draw:

; 653  : 			}
; 654  : 			mask >>= 1;

	mov	eax, DWORD PTR _mask$[ebp]
	shr	eax, 1
	mov	DWORD PTR _mask$[ebp], eax

; 655  : 			i++;

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN2@Draw:

; 656  : 		}
; 657  : 	}

	jmp	SHORT $LN4@Draw
$LN7@Draw:

; 658  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Draw@BXSwitchNode@@UAEXXZ ENDP				; BXSwitchNode::Draw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ??1BXSwitchNode@@UAE@XZ
_TEXT	SEGMENT
tv95 = -32						; size = 4
$T2 = -28						; size = 4
tv79 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1BXSwitchNode@@UAE@XZ PROC				; BXSwitchNode::~BXSwitchNode, COMDAT
; _this$ = ecx

; 223  : 	virtual ~BXSwitchNode()	{ while (numChildren--) delete subTrees[numChildren]; };

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1BXSwitchNode@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BXSwitchNode@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
$LN2@BXSwitchNo:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR tv79[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx
	cmp	DWORD PTR tv79[ebp], 0
	je	SHORT $LN3@BXSwitchNo
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T3[ebp], edx
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN5@BXSwitchNo
	push	1
	mov	eax, DWORD PTR $T3[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv95[ebp], eax
	jmp	SHORT $LN6@BXSwitchNo
$LN5@BXSwitchNo:
	mov	DWORD PTR tv95[ebp], 0
$LN6@BXSwitchNo:
	jmp	SHORT $LN2@BXSwitchNo
$LN3@BXSwitchNo:
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BNode@@UAE@XZ			; BNode::~BNode
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1BXSwitchNode@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BNode@@UAE@XZ			; BNode::~BNode
__ehhandler$??1BXSwitchNode@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1BXSwitchNode@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1BXSwitchNode@@UAE@XZ ENDP				; BXSwitchNode::~BXSwitchNode
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_i$2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_baseAddress$ = 8					; size = 4
_tagListPtr$ = 12					; size = 4
??0BXSwitchNode@@QAE@PAEPAPAW4BNodeType@@@Z PROC	; BXSwitchNode::BXSwitchNode
; _this$ = ecx

; 205  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0BXSwitchNode@@QAE@PAEPAPAW4BNodeType@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _tagListPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _baseAddress$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BNode@@QAE@PAEPAPAW4BNodeType@@@Z	; BNode::BNode
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7BXSwitchNode@@6B@

; 206  : 	// Fixup our table of children
; 207  : 	subTrees = (BSubTree**)(baseAddress + (int)subTrees);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _baseAddress$[ebp]
	add	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 208  : 
; 209  : 	// Now fixup each child tree
; 210  : 	for (int i=0; i<numChildren; i++) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN3@BXSwitchNo
$LN2@BXSwitchNo:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN3@BXSwitchNo:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$2[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	jge	SHORT $LN4@BXSwitchNo

; 211  : 		subTrees[i] = (BSubTree*)RestorePointers( baseAddress, (int)subTrees[i], tagListPtr );

	mov	eax, DWORD PTR _tagListPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR _baseAddress$[ebp]
	push	edx
	call	?RestorePointers@BNode@@SAPAV1@PAEHPAPAW4BNodeType@@@Z ; BNode::RestorePointers
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _i$2[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 212  : 	}

	jmp	SHORT $LN2@BXSwitchNo
$LN4@BXSwitchNo:

; 213  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0BXSwitchNode@@QAE@PAEPAPAW4BNodeType@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BNode@@UAE@XZ			; BNode::~BNode
__ehhandler$??0BXSwitchNode@@QAE@PAEPAPAW4BNodeType@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0BXSwitchNode@@QAE@PAEPAPAW4BNodeType@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0BXSwitchNode@@QAE@PAEPAPAW4BNodeType@@@Z ENDP	; BXSwitchNode::BXSwitchNode
; Function compile flags: /Odtp
;	COMDAT ??_GBSwitchNode@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBSwitchNode@@UAEPAXI@Z PROC				; BSwitchNode::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BSwitchNode@@UAE@XZ			; BSwitchNode::~BSwitchNode
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3BNode@@SAXPAX@Z			; BNode::operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBSwitchNode@@UAEPAXI@Z ENDP				; BSwitchNode::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ?Type@BSwitchNode@@UAE?AW4BNodeType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@BSwitchNode@@UAE?AW4BNodeType@@XZ PROC		; BSwitchNode::Type, COMDAT
; _this$ = ecx

; 216  : 	virtual BNodeType	Type(void)	{ return tagBSwitchNode; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 5
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@BSwitchNode@@UAE?AW4BNodeType@@XZ ENDP		; BSwitchNode::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_mask$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?Draw@BSwitchNode@@UAEXXZ PROC				; BSwitchNode::Draw
; _this$ = ecx

; 595  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 596  : 	UInt32		mask;
; 597  : 	int			i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 598  : 
; 599  : 	ShiAssert( switchNumber < TheStateStack.CurrentInstance->ParentObject->nSwitches );
; 600  : 	if (switchNumber >= TheStateStack.CurrentInstance->ParentObject->nSwitches)

	mov	eax, DWORD PTR ?CurrentInstance@StateStackClass@@2PAVObjectInstance@@A ; StateStackClass::CurrentInstance
	mov	ecx, DWORD PTR [eax+32]
	movsx	edx, WORD PTR [ecx+52]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], edx
	jl	SHORT $LN5@Draw

; 601  : 		return;

	jmp	SHORT $LN6@Draw
$LN5@Draw:

; 602  : 	mask = TheStateStack.CurrentInstance->SwitchValues[switchNumber];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR ?CurrentInstance@StateStackClass@@2PAVObjectInstance@@A ; StateStackClass::CurrentInstance
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _mask$[ebp], edx
$LN4@Draw:

; 603  : 
; 604  : #if 0	// This will generally be faster due to early termination
; 605  : 	// Go until all ON switch children have been drawn.
; 606  : 	while (mask) {
; 607  : #else	// This will work even if the mask is set for non-existent children
; 608  : 	// Go until all children have been considered for drawing.
; 609  : 	while (i < numChildren) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN6@Draw

; 610  : #endif
; 611  : 		if( subTrees[i] ) // MLR 2003-10-12 changed from ShiAssert.

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	DWORD PTR [eax+ecx*4], 0
	je	SHORT $LN2@Draw

; 612  : 		{
; 613  : 
; 614  : 			// Only draw this subtree if the corresponding switch bit is set
; 615  : 			if (mask & 1) {

	mov	edx, DWORD PTR _mask$[ebp]
	and	edx, 1
	je	SHORT $LN1@Draw

; 616  : 				TheStateStack.PushVerts();

	call	?PushVerts@StateStackClass@@SAXXZ	; StateStackClass::PushVerts

; 617  : 				subTrees[i]->Draw();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [eax+4]
	call	edx

; 618  : 				TheStateStack.PopVerts();

	call	?PopVerts@StateStackClass@@SAXXZ	; StateStackClass::PopVerts
$LN1@Draw:

; 619  : 			}
; 620  : 			mask >>= 1;

	mov	eax, DWORD PTR _mask$[ebp]
	shr	eax, 1
	mov	DWORD PTR _mask$[ebp], eax

; 621  : 			i++;

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN2@Draw:

; 622  : 		}
; 623  : 	}

	jmp	SHORT $LN4@Draw
$LN6@Draw:

; 624  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Draw@BSwitchNode@@UAEXXZ ENDP				; BSwitchNode::Draw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ??1BSwitchNode@@UAE@XZ
_TEXT	SEGMENT
tv95 = -32						; size = 4
$T2 = -28						; size = 4
tv79 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1BSwitchNode@@UAE@XZ PROC				; BSwitchNode::~BSwitchNode, COMDAT
; _this$ = ecx

; 209  : 	virtual ~BSwitchNode()	{ while (numChildren--) delete subTrees[numChildren]; };

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1BSwitchNode@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BSwitchNode@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
$LN2@BSwitchNod:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR tv79[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx
	cmp	DWORD PTR tv79[ebp], 0
	je	SHORT $LN3@BSwitchNod
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T3[ebp], edx
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN5@BSwitchNod
	push	1
	mov	eax, DWORD PTR $T3[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv95[ebp], eax
	jmp	SHORT $LN6@BSwitchNod
$LN5@BSwitchNod:
	mov	DWORD PTR tv95[ebp], 0
$LN6@BSwitchNod:
	jmp	SHORT $LN2@BSwitchNod
$LN3@BSwitchNod:
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BNode@@UAE@XZ			; BNode::~BNode
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1BSwitchNode@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BNode@@UAE@XZ			; BNode::~BNode
__ehhandler$??1BSwitchNode@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1BSwitchNode@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1BSwitchNode@@UAE@XZ ENDP				; BSwitchNode::~BSwitchNode
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_i$2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_baseAddress$ = 8					; size = 4
_tagListPtr$ = 12					; size = 4
??0BSwitchNode@@QAE@PAEPAPAW4BNodeType@@@Z PROC		; BSwitchNode::BSwitchNode
; _this$ = ecx

; 192  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0BSwitchNode@@QAE@PAEPAPAW4BNodeType@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _tagListPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _baseAddress$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BNode@@QAE@PAEPAPAW4BNodeType@@@Z	; BNode::BNode
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7BSwitchNode@@6B@

; 193  : 	// Fixup our table of children
; 194  : 	subTrees = (BSubTree**)(baseAddress + (int)subTrees);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _baseAddress$[ebp]
	add	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 195  : 
; 196  : 	// Now fixup each child tree
; 197  : 	for (int i=0; i<numChildren; i++) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN3@BSwitchNod
$LN2@BSwitchNod:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN3@BSwitchNod:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$2[ebp]
	cmp	edx, DWORD PTR [ecx+12]
	jge	SHORT $LN4@BSwitchNod

; 198  : 		subTrees[i] = (BSubTree*)RestorePointers( baseAddress, (int)subTrees[i], tagListPtr );

	mov	eax, DWORD PTR _tagListPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR _baseAddress$[ebp]
	push	edx
	call	?RestorePointers@BNode@@SAPAV1@PAEHPAPAW4BNodeType@@@Z ; BNode::RestorePointers
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR _i$2[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 199  : 	}

	jmp	SHORT $LN2@BSwitchNod
$LN4@BSwitchNod:

; 200  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0BSwitchNode@@QAE@PAEPAPAW4BNodeType@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BNode@@UAE@XZ			; BNode::~BNode
__ehhandler$??0BSwitchNode@@QAE@PAEPAPAW4BNodeType@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0BSwitchNode@@QAE@PAEPAPAW4BNodeType@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0BSwitchNode@@QAE@PAEPAPAW4BNodeType@@@Z ENDP		; BSwitchNode::BSwitchNode
; Function compile flags: /Odtp
;	COMDAT ??_GBScaleNode@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBScaleNode@@UAEPAXI@Z PROC				; BScaleNode::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BScaleNode@@UAE@XZ			; BScaleNode::~BScaleNode
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3BNode@@SAXPAX@Z			; BNode::operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBScaleNode@@UAEPAXI@Z ENDP				; BScaleNode::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ?Type@BScaleNode@@UAE?AW4BNodeType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@BScaleNode@@UAE?AW4BNodeType@@XZ PROC		; BScaleNode::Type, COMDAT
; _this$ = ecx

; 201  : 	virtual BNodeType	Type(void)	{ return tagBTransNode; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@BScaleNode@@UAE?AW4BNodeType@@XZ ENDP		; BScaleNode::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_dz$ = -72						; size = 4
_dx$ = -68						; size = 4
_dy$ = -64						; size = 4
_a$ = -60						; size = 4
_this$ = -56						; size = 4
_dofRot$ = -52						; size = 36
_T$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?Draw@BScaleNode@@UAEXXZ PROC				; BScaleNode::Draw
; _this$ = ecx

; 561  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 562  : 	Ppoint	T;
; 563  : 
; 564  : 	float a=0,dx=1,dy=1,dz=1;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _a$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _dx$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _dy$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _dz$[ebp], xmm0

; 565  : 	//ShiAssert( dofNumber < TheStateStack.CurrentInstance->ParentObject->nDOFs );
; 566  : 	if (dofNumber >= TheStateStack.CurrentInstance->ParentObject->nDOFs )

	mov	eax, DWORD PTR ?CurrentInstance@StateStackClass@@2PAVObjectInstance@@A ; StateStackClass::CurrentInstance
	mov	ecx, DWORD PTR [eax+32]
	movsx	edx, WORD PTR [ecx+54]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], edx
	jl	SHORT $LN1@Draw

; 567  : 		return;

	jmp	$LN2@Draw
$LN1@Draw:

; 568  : 
; 569  : 	//a=Process_a(dofRotScalar,dofNumber,flags);
; 570  : 	a=Process_DOFRot(dofNumber,flags,min,max,multiplier,future);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+52]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+48]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+44]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+40]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	call	?Process_DOFRot@@YAMHHMMMM@Z		; Process_DOFRot
	add	esp, 24					; 00000018H
	fstp	DWORD PTR _a$[ebp]

; 571  : 
; 572  : 	dx=1.0F - (1.0f-scale.x) * a;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR [eax+60]
	mulss	xmm0, DWORD PTR _a$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	DWORD PTR _dx$[ebp], xmm1

; 573  : 	dy=1.0F - (1.0f-scale.y) * a;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR [ecx+64]
	mulss	xmm0, DWORD PTR _a$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	DWORD PTR _dy$[ebp], xmm1

; 574  : 	dz=1.0F - (1.0f-scale.z) * a;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR [edx+68]
	mulss	xmm0, DWORD PTR _a$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	DWORD PTR _dz$[ebp], xmm1

; 575  : 
; 576  :     Pmatrix	dofRot; // just a dummy to pass to CompoundTransform()
; 577  : 	dofRot.M11 = dx;	dofRot.M12 = 0.0f;	dofRot.M13 = 0.0f;

	movss	xmm0, DWORD PTR _dx$[ebp]
	movss	DWORD PTR _dofRot$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dofRot$[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dofRot$[ebp+8], xmm0

; 578  : 	dofRot.M21 = 0.0f;	dofRot.M22 = dy;	dofRot.M23 = 0.0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dofRot$[ebp+12], xmm0
	movss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR _dofRot$[ebp+16], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dofRot$[ebp+20], xmm0

; 579  : 	dofRot.M31 = 0.0f;	dofRot.M32 = 0.0;	dofRot.M33 = dz;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dofRot$[ebp+24], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dofRot$[ebp+28], xmm0
	movss	xmm0, DWORD PTR _dz$[ebp]
	movss	DWORD PTR _dofRot$[ebp+32], xmm0

; 580  : 
; 581  : 	T.x = translation.x;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+72]
	movss	DWORD PTR _T$[ebp], xmm0

; 582  : 	T.y = translation.y;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+76]
	movss	DWORD PTR _T$[ebp+4], xmm0

; 583  : 	T.z = translation.z;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+80]
	movss	DWORD PTR _T$[ebp+8], xmm0

; 584  : 
; 585  : 	// Draw our subtree
; 586  : 	TheStateStack.PushAll();

	call	?PushAll@StateStackClass@@SAXXZ		; StateStackClass::PushAll

; 587  : 	TheStateStack.CompoundTransform( &dofRot, &T );

	lea	eax, DWORD PTR _T$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dofRot$[ebp]
	push	ecx
	call	?CompoundTransform@StateStackClass@@SAXPBUTrotation@@PBUTpoint@@@Z ; StateStackClass::CompoundTransform
	add	esp, 8

; 588  : 	BSubTree::Draw();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Draw@BSubTree@@UAEXXZ			; BSubTree::Draw

; 589  : 	TheStateStack.PopAll();

	call	?PopAll@StateStackClass@@SAXXZ		; StateStackClass::PopAll
$LN2@Draw:

; 590  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?Draw@BScaleNode@@UAEXXZ ENDP				; BScaleNode::Draw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ??1BScaleNode@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1BScaleNode@@UAE@XZ PROC				; BScaleNode::~BScaleNode, COMDAT
; _this$ = ecx

; 191  : 	virtual ~BScaleNode()		{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BScaleNode@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BSubTree@@UAE@XZ			; BSubTree::~BSubTree
	mov	esp, ebp
	pop	ebp
	ret	0
??1BScaleNode@@UAE@XZ ENDP				; BScaleNode::~BScaleNode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_baseAddress$ = 8					; size = 4
_tagListPtr$ = 12					; size = 4
??0BScaleNode@@QAE@PAEPAPAW4BNodeType@@@Z PROC		; BScaleNode::BScaleNode
; _this$ = ecx

; 185  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _tagListPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _baseAddress$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BSubTree@@QAE@PAEPAPAW4BNodeType@@@Z	; BSubTree::BSubTree
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7BScaleNode@@6B@

; 186  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0BScaleNode@@QAE@PAEPAPAW4BNodeType@@@Z ENDP		; BScaleNode::BScaleNode
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GBTransNode@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBTransNode@@UAEPAXI@Z PROC				; BTransNode::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BTransNode@@UAE@XZ			; BTransNode::~BTransNode
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3BNode@@SAXPAX@Z			; BNode::operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBTransNode@@UAEPAXI@Z ENDP				; BTransNode::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ?Type@BTransNode@@UAE?AW4BNodeType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@BTransNode@@UAE?AW4BNodeType@@XZ PROC		; BTransNode::Type, COMDAT
; _this$ = ecx

; 182  : 	virtual BNodeType	Type(void)	{ return tagBTransNode; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@BTransNode@@UAE?AW4BNodeType@@XZ ENDP		; BTransNode::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_a$ = -60						; size = 4
_this$ = -56						; size = 4
_dofRot$ = -52						; size = 36
_T$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?Draw@BTransNode@@UAEXXZ PROC				; BTransNode::Draw
; _this$ = ecx

; 526  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 527  : 	Ppoint	T;
; 528  : 
; 529  :     Pmatrix	dofRot; // just a dummy to pass to CompoundTransform()
; 530  : 	dofRot.M11 = 1.0f;	dofRot.M12 = 0.0f;	dofRot.M13 = 0.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _dofRot$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dofRot$[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dofRot$[ebp+8], xmm0

; 531  : 	dofRot.M21 = 0.0f;	dofRot.M22 = 1.0f;	dofRot.M23 = 0.0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dofRot$[ebp+12], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _dofRot$[ebp+16], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dofRot$[ebp+20], xmm0

; 532  : 	dofRot.M31 = 0.0f;	dofRot.M32 = 0.0;	dofRot.M33 = 1.0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dofRot$[ebp+24], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dofRot$[ebp+28], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _dofRot$[ebp+32], xmm0

; 533  : 
; 534  : 
; 535  : 
; 536  : 	float a=0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _a$[ebp], xmm0

; 537  : 	//ShiAssert( dofNumber < TheStateStack.CurrentInstance->ParentObject->nDOFs );
; 538  : 	if (dofNumber >= TheStateStack.CurrentInstance->ParentObject->nDOFs )

	mov	eax, DWORD PTR ?CurrentInstance@StateStackClass@@2PAVObjectInstance@@A ; StateStackClass::CurrentInstance
	mov	ecx, DWORD PTR [eax+32]
	movsx	edx, WORD PTR [ecx+54]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], edx
	jl	SHORT $LN1@Draw

; 539  : 		return;

	jmp	$LN2@Draw
$LN1@Draw:

; 540  : 
; 541  : 	// the multiplier gets converted from radians to degrees
; 542  : 	a=Process_DOFRot(dofNumber,flags,min,max,multiplier,future);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+52]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+48]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+44]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+40]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	call	?Process_DOFRot@@YAMHHMMMM@Z		; Process_DOFRot
	add	esp, 24					; 00000018H
	fstp	DWORD PTR _a$[ebp]

; 543  : 
; 544  : 
; 545  : 	T.x = translation.x * a;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+60]
	mulss	xmm0, DWORD PTR _a$[ebp]
	movss	DWORD PTR _T$[ebp], xmm0

; 546  : 	T.y = translation.y * a;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+64]
	mulss	xmm0, DWORD PTR _a$[ebp]
	movss	DWORD PTR _T$[ebp+4], xmm0

; 547  : 	T.z = translation.z * a;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+68]
	mulss	xmm0, DWORD PTR _a$[ebp]
	movss	DWORD PTR _T$[ebp+8], xmm0

; 548  : 
; 549  : 	// Draw our subtree
; 550  : 	TheStateStack.PushAll();

	call	?PushAll@StateStackClass@@SAXXZ		; StateStackClass::PushAll

; 551  : 	TheStateStack.CompoundTransform( &dofRot, &T );

	lea	eax, DWORD PTR _T$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dofRot$[ebp]
	push	ecx
	call	?CompoundTransform@StateStackClass@@SAXPBUTrotation@@PBUTpoint@@@Z ; StateStackClass::CompoundTransform
	add	esp, 8

; 552  : 	BSubTree::Draw();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Draw@BSubTree@@UAEXXZ			; BSubTree::Draw

; 553  : 	TheStateStack.PopAll();

	call	?PopAll@StateStackClass@@SAXXZ		; StateStackClass::PopAll
$LN2@Draw:

; 554  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?Draw@BTransNode@@UAEXXZ ENDP				; BTransNode::Draw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ??1BTransNode@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1BTransNode@@UAE@XZ PROC				; BTransNode::~BTransNode, COMDAT
; _this$ = ecx

; 174  : 	virtual ~BTransNode()		{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BTransNode@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BSubTree@@UAE@XZ			; BSubTree::~BSubTree
	mov	esp, ebp
	pop	ebp
	ret	0
??1BTransNode@@UAE@XZ ENDP				; BTransNode::~BTransNode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_baseAddress$ = 8					; size = 4
_tagListPtr$ = 12					; size = 4
??0BTransNode@@QAE@PAEPAPAW4BNodeType@@@Z PROC		; BTransNode::BTransNode
; _this$ = ecx

; 179  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _tagListPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _baseAddress$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BSubTree@@QAE@PAEPAPAW4BNodeType@@@Z	; BSubTree::BSubTree
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7BTransNode@@6B@

; 180  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0BTransNode@@QAE@PAEPAPAW4BNodeType@@@Z ENDP		; BTransNode::BTransNode
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GBXDofNode@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBXDofNode@@UAEPAXI@Z PROC				; BXDofNode::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BXDofNode@@UAE@XZ			; BXDofNode::~BXDofNode
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3BNode@@SAXPAX@Z			; BNode::operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBXDofNode@@UAEPAXI@Z ENDP				; BXDofNode::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ?Type@BXDofNode@@UAE?AW4BNodeType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@BXDofNode@@UAE?AW4BNodeType@@XZ PROC		; BXDofNode::Type, COMDAT
; _this$ = ecx

; 166  : 	virtual BNodeType	Type(void)	{ return tagBDofNode; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@BXDofNode@@UAE?AW4BNodeType@@XZ ENDP		; BXDofNode::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_dofrot$ = -104						; size = 4
_trig$ = -100						; size = 8
_this$ = -92						; size = 4
_R$ = -88						; size = 36
_dofRot$ = -52						; size = 36
_T$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?Draw@BXDofNode@@UAEXXZ PROC				; BXDofNode::Draw
; _this$ = ecx

; 412  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 413  : 	Pmatrix	dofRot;
; 414  : 	Pmatrix	R;
; 415  : 	Ppoint	T;
; 416  : 	mlTrig trig;
; 417  : 
; 418  : 	ShiAssert( dofNumber < TheStateStack.CurrentInstance->ParentObject->nDOFs );
; 419  : 	if (dofNumber >= TheStateStack.CurrentInstance->ParentObject->nDOFs )

	mov	eax, DWORD PTR ?CurrentInstance@StateStackClass@@2PAVObjectInstance@@A ; StateStackClass::CurrentInstance
	mov	ecx, DWORD PTR [eax+32]
	movsx	edx, WORD PTR [ecx+54]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], edx
	jl	SHORT $LN1@Draw

; 420  : 		return;

	jmp	$LN2@Draw
$LN1@Draw:

; 421  : 	// Set up our free rotation
; 422  : 
; 423  : 	float dofrot=Process_DOFRot(dofNumber,flags,min,max,multiplier,future);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+52]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+48]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+44]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+40]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	call	?Process_DOFRot@@YAMHHMMMM@Z		; Process_DOFRot
	add	esp, 24					; 00000018H
	fstp	DWORD PTR _dofrot$[ebp]

; 424  : 
; 425  : 	/*
; 426  : 	float dofrot=TheStateStack.CurrentInstance->DOFValues[dofNumber].rotation;
; 427  : 
; 428  : 	if(flags & XDOF_NEGATE)
; 429  : 	{
; 430  : 	  dofrot=-dofrot;
; 431  : 	}
; 432  : 
; 433  : 	if(flags & XDOF_MINMAX)
; 434  : 	{
; 435  : 	  if(dofrot<min)
; 436  : 		dofrot=min;
; 437  : 	  if(dofrot>max)
; 438  : 		dofrot=max;
; 439  : 	}
; 440  : 
; 441  : 	if(flags & XDOF_SUBRANGE && min!=max)
; 442  : 	{
; 443  : 	  // rescales dofrot so it is 0.0 at Min and 1.0 at Max
; 444  : 	  // it could exceed those bounds, unless MINMAX is set.
; 445  : 	  dofrot-=min;
; 446  : 	  dofrot/=max-min;
; 447  : 	  // then it get's rescaled below.
; 448  : 	}
; 449  : 
; 450  : 	dofrot*=multiplier;
; 451  : */
; 452  : 
; 453  : 
; 454  : 	mlSinCos (&trig, dofrot);

	push	ecx
	movss	xmm0, DWORD PTR _dofrot$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _trig$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 455  : 	dofRot.M11 = 1.0f;	dofRot.M12 = 0.0f;	dofRot.M13 = 0.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _dofRot$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dofRot$[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dofRot$[ebp+8], xmm0

; 456  : 	dofRot.M21 = 0.0f;	dofRot.M22 = trig.cos;	dofRot.M23 = -trig.sin;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dofRot$[ebp+12], xmm0
	movss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _dofRot$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _trig$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _dofRot$[ebp+20], xmm0

; 457  : 	dofRot.M31 = 0.0f;	dofRot.M32 = trig.sin;	dofRot.M33 = trig.cos;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dofRot$[ebp+24], xmm0
	movss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR _dofRot$[ebp+28], xmm0
	movss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _dofRot$[ebp+32], xmm0

; 458  : 
; 459  : 
; 460  : 	// Now compose this with the rotation into our parents coordinate system
; 461  : 	MatrixMult( &rotation, &dofRot, &R );

	lea	ecx, DWORD PTR _R$[ebp]
	push	ecx
	lea	edx, DWORD PTR _dofRot$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 60					; 0000003cH
	push	eax
	call	?MatrixMult@@YAXPBUTrotation@@0PAU1@@Z	; MatrixMult
	add	esp, 12					; 0000000cH

; 462  : 
; 463  : 	// Now do our free translation
; 464  : 	// SCR 10/28/98:  THIS IS WRONG FOR TRANSLATION DOFs.  "DOFValues" is supposed to 
; 465  : 	// translate along the local x axis, but this will translate along the parent's x axis.
; 466  : 	// To fix this would require a bit more math (and/or thought).  Since it
; 467  : 	// only happens once in Falcon, I'll leave it broken and put a workaround into
; 468  : 	// the KC10 object so that the parent's and child's x axis are forced into alignment
; 469  : 	// by inserting an extra dummy DOF bead.
; 470  : 	T.x = translation.x + TheStateStack.CurrentInstance->DOFValues[dofNumber].translation;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR ?CurrentInstance@StateStackClass@@2PAVObjectInstance@@A ; StateStackClass::CurrentInstance
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+96]
	addss	xmm0, DWORD PTR [ecx+edx*8+4]
	movss	DWORD PTR _T$[ebp], xmm0

; 471  : 	T.y = translation.y;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+100]
	movss	DWORD PTR _T$[ebp+4], xmm0

; 472  : 	T.z = translation.z;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+104]
	movss	DWORD PTR _T$[ebp+8], xmm0

; 473  : 
; 474  : 	// Draw our subtree
; 475  : 	TheStateStack.PushAll();

	call	?PushAll@StateStackClass@@SAXXZ		; StateStackClass::PushAll

; 476  : 	TheStateStack.CompoundTransform( &R, &T );

	lea	eax, DWORD PTR _T$[ebp]
	push	eax
	lea	ecx, DWORD PTR _R$[ebp]
	push	ecx
	call	?CompoundTransform@StateStackClass@@SAXPBUTrotation@@PBUTpoint@@@Z ; StateStackClass::CompoundTransform
	add	esp, 8

; 477  : 	BSubTree::Draw();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Draw@BSubTree@@UAEXXZ			; BSubTree::Draw

; 478  : 	TheStateStack.PopAll();

	call	?PopAll@StateStackClass@@SAXXZ		; StateStackClass::PopAll
$LN2@Draw:

; 479  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?Draw@BXDofNode@@UAEXXZ ENDP				; BXDofNode::Draw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ??1BXDofNode@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1BXDofNode@@UAE@XZ PROC				; BXDofNode::~BXDofNode, COMDAT
; _this$ = ecx

; 157  : 	virtual ~BXDofNode()		{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BXDofNode@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BSubTree@@UAE@XZ			; BSubTree::~BSubTree
	mov	esp, ebp
	pop	ebp
	ret	0
??1BXDofNode@@UAE@XZ ENDP				; BXDofNode::~BXDofNode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_baseAddress$ = 8					; size = 4
_tagListPtr$ = 12					; size = 4
??0BXDofNode@@QAE@PAEPAPAW4BNodeType@@@Z PROC		; BXDofNode::BXDofNode
; _this$ = ecx

; 171  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _tagListPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _baseAddress$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BSubTree@@QAE@PAEPAPAW4BNodeType@@@Z	; BSubTree::BSubTree
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7BXDofNode@@6B@

; 172  : 	flags|=XDOF_ISDOF;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	or	ecx, -2147483648			; 80000000H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+56], ecx

; 173  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0BXDofNode@@QAE@PAEPAPAW4BNodeType@@@Z ENDP		; BXDofNode::BXDofNode
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GBDofNode@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBDofNode@@UAEPAXI@Z PROC				; BDofNode::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BDofNode@@UAE@XZ			; BDofNode::~BDofNode
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3BNode@@SAXPAX@Z			; BNode::operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBDofNode@@UAEPAXI@Z ENDP				; BDofNode::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ?Type@BDofNode@@UAE?AW4BNodeType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@BDofNode@@UAE?AW4BNodeType@@XZ PROC		; BDofNode::Type, COMDAT
; _this$ = ecx

; 149  : 	virtual BNodeType	Type(void)	{ return tagBDofNode; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@BDofNode@@UAE?AW4BNodeType@@XZ ENDP		; BDofNode::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_trig$ = -100						; size = 8
_this$ = -92						; size = 4
_R$ = -88						; size = 36
_dofRot$ = -52						; size = 36
_T$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?Draw@BDofNode@@UAEXXZ PROC				; BDofNode::Draw
; _this$ = ecx

; 336  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 337  : 	Pmatrix	dofRot;
; 338  : 	Pmatrix	R;
; 339  : 	Ppoint	T;
; 340  : 	mlTrig trig;
; 341  : 
; 342  : 	ShiAssert( dofNumber < TheStateStack.CurrentInstance->ParentObject->nDOFs );
; 343  : 	if (dofNumber >= TheStateStack.CurrentInstance->ParentObject->nDOFs )

	mov	eax, DWORD PTR ?CurrentInstance@StateStackClass@@2PAVObjectInstance@@A ; StateStackClass::CurrentInstance
	mov	ecx, DWORD PTR [eax+32]
	movsx	edx, WORD PTR [ecx+54]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], edx
	jl	SHORT $LN1@Draw

; 344  : 		return;

	jmp	$LN2@Draw
$LN1@Draw:

; 345  : 	// Set up our free rotation
; 346  : 	mlSinCos (&trig, TheStateStack.CurrentInstance->DOFValues[dofNumber].rotation);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR ?CurrentInstance@StateStackClass@@2PAVObjectInstance@@A ; StateStackClass::CurrentInstance
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+edx*8]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _trig$[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 347  : 	dofRot.M11 = 1.0f;	dofRot.M12 = 0.0f;	dofRot.M13 = 0.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _dofRot$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dofRot$[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dofRot$[ebp+8], xmm0

; 348  : 	dofRot.M21 = 0.0f;	dofRot.M22 = trig.cos;	dofRot.M23 = -trig.sin;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dofRot$[ebp+12], xmm0
	movss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _dofRot$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _trig$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _dofRot$[ebp+20], xmm0

; 349  : 	dofRot.M31 = 0.0f;	dofRot.M32 = trig.sin;	dofRot.M33 = trig.cos;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dofRot$[ebp+24], xmm0
	movss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR _dofRot$[ebp+28], xmm0
	movss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _dofRot$[ebp+32], xmm0

; 350  : 
; 351  : 
; 352  : 	// Now compose this with the rotation into our parents coordinate system
; 353  : 	MatrixMult( &rotation, &dofRot, &R );

	lea	eax, DWORD PTR _R$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dofRot$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 40					; 00000028H
	push	edx
	call	?MatrixMult@@YAXPBUTrotation@@0PAU1@@Z	; MatrixMult
	add	esp, 12					; 0000000cH

; 354  : 
; 355  : 	// Now do our free translation
; 356  : 	// SCR 10/28/98:  THIS IS WRONG FOR TRANSLATION DOFs.  "DOFValues" is supposed to 
; 357  : 	// translate along the local x axis, but this will translate along the parent's x axis.
; 358  : 	// To fix this would require a bit more math (and/or thought).  Since it
; 359  : 	// only happens once in Falcon, I'll leave it broken and put a workaround into
; 360  : 	// the KC10 object so that the parent's and child's x axis are forced into alignment
; 361  : 	// by inserting an extra dummy DOF bead.
; 362  : 	T.x = translation.x + TheStateStack.CurrentInstance->DOFValues[dofNumber].translation;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR ?CurrentInstance@StateStackClass@@2PAVObjectInstance@@A ; StateStackClass::CurrentInstance
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+76]
	addss	xmm0, DWORD PTR [eax+ecx*8+4]
	movss	DWORD PTR _T$[ebp], xmm0

; 363  : 	T.y = translation.y;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+80]
	movss	DWORD PTR _T$[ebp+4], xmm0

; 364  : 	T.z = translation.z;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+84]
	movss	DWORD PTR _T$[ebp+8], xmm0

; 365  : 
; 366  : 	// Draw our subtree
; 367  : 	TheStateStack.PushAll();

	call	?PushAll@StateStackClass@@SAXXZ		; StateStackClass::PushAll

; 368  : 	TheStateStack.CompoundTransform( &R, &T );

	lea	edx, DWORD PTR _T$[ebp]
	push	edx
	lea	eax, DWORD PTR _R$[ebp]
	push	eax
	call	?CompoundTransform@StateStackClass@@SAXPBUTrotation@@PBUTpoint@@@Z ; StateStackClass::CompoundTransform
	add	esp, 8

; 369  : 	BSubTree::Draw();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Draw@BSubTree@@UAEXXZ			; BSubTree::Draw

; 370  : 	TheStateStack.PopAll();

	call	?PopAll@StateStackClass@@SAXXZ		; StateStackClass::PopAll
$LN2@Draw:

; 371  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?Draw@BDofNode@@UAEXXZ ENDP				; BDofNode::Draw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ??1BDofNode@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1BDofNode@@UAE@XZ PROC				; BDofNode::~BDofNode, COMDAT
; _this$ = ecx

; 142  : 	virtual ~BDofNode()		{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BDofNode@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BSubTree@@UAE@XZ			; BSubTree::~BSubTree
	mov	esp, ebp
	pop	ebp
	ret	0
??1BDofNode@@UAE@XZ ENDP				; BDofNode::~BDofNode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_baseAddress$ = 8					; size = 4
_tagListPtr$ = 12					; size = 4
??0BDofNode@@QAE@PAEPAPAW4BNodeType@@@Z PROC		; BDofNode::BDofNode
; _this$ = ecx

; 165  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _tagListPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _baseAddress$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BSubTree@@QAE@PAEPAPAW4BNodeType@@@Z	; BSubTree::BSubTree
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7BDofNode@@6B@

; 166  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0BDofNode@@QAE@PAEPAPAW4BNodeType@@@Z ENDP		; BDofNode::BDofNode
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GBSlotNode@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBSlotNode@@UAEPAXI@Z PROC				; BSlotNode::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BSlotNode@@UAE@XZ			; BSlotNode::~BSlotNode
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3BNode@@SAXPAX@Z			; BNode::operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBSlotNode@@UAEPAXI@Z ENDP				; BSlotNode::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ?Type@BSlotNode@@UAE?AW4BNodeType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@BSlotNode@@UAE?AW4BNodeType@@XZ PROC		; BSlotNode::Type, COMDAT
; _this$ = ecx

; 135  : 	virtual BNodeType	Type(void)	{ return tagBSlotNode; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 3
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@BSlotNode@@UAE?AW4BNodeType@@XZ ENDP		; BSlotNode::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_subObject$ = -8					; size = 4
_this$ = -4						; size = 4
?Draw@BSlotNode@@UAEXXZ PROC				; BSlotNode::Draw
; _this$ = ecx

; 324  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 325  : 	ShiAssert( slotNumber < TheStateStack.CurrentInstance->ParentObject->nSlots );
; 326  : 	if (slotNumber >= TheStateStack.CurrentInstance->ParentObject->nSlots )

	mov	eax, DWORD PTR ?CurrentInstance@StateStackClass@@2PAVObjectInstance@@A ; StateStackClass::CurrentInstance
	mov	ecx, DWORD PTR [eax+32]
	movzx	edx, BYTE PTR [ecx+51]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+56], edx
	jl	SHORT $LN2@Draw

; 327  : 		return; // JPO fix

	jmp	SHORT $LN3@Draw
$LN2@Draw:

; 328  : 	ObjectInstance *subObject = TheStateStack.CurrentInstance->SlotChildren[slotNumber];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR ?CurrentInstance@StateStackClass@@2PAVObjectInstance@@A ; StateStackClass::CurrentInstance
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _subObject$[ebp], edx

; 329  : 
; 330  : 	if (subObject) {

	cmp	DWORD PTR _subObject$[ebp], 0
	je	SHORT $LN3@Draw

; 331  : 		TheStateStack.DrawSubObject( subObject, &rotation, &origin );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 44					; 0000002cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _subObject$[ebp]
	push	edx
	call	?DrawSubObject@StateStackClass@@SAXPAVObjectInstance@@PBUTrotation@@PBUTpoint@@@Z ; StateStackClass::DrawSubObject
	add	esp, 12					; 0000000cH
$LN3@Draw:

; 332  : 	}
; 333  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Draw@BSlotNode@@UAEXXZ ENDP				; BSlotNode::Draw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ??1BSlotNode@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1BSlotNode@@UAE@XZ PROC				; BSlotNode::~BSlotNode, COMDAT
; _this$ = ecx

; 128  : 	virtual ~BSlotNode()	{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BSlotNode@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BNode@@UAE@XZ			; BNode::~BNode
	mov	esp, ebp
	pop	ebp
	ret	0
??1BSlotNode@@UAE@XZ ENDP				; BSlotNode::~BSlotNode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_baseAddress$ = 8					; size = 4
_tagListPtr$ = 12					; size = 4
??0BSlotNode@@QAE@PAEPAPAW4BNodeType@@@Z PROC		; BSlotNode::BSlotNode
; _this$ = ecx

; 158  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _tagListPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _baseAddress$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BNode@@QAE@PAEPAPAW4BNodeType@@@Z	; BNode::BNode
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7BSlotNode@@6B@

; 159  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0BSlotNode@@QAE@PAEPAPAW4BNodeType@@@Z ENDP		; BSlotNode::BSlotNode
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GBSpecialXform@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBSpecialXform@@UAEPAXI@Z PROC			; BSpecialXform::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BSpecialXform@@UAE@XZ		; BSpecialXform::~BSpecialXform
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3BNode@@SAXPAX@Z			; BNode::operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBSpecialXform@@UAEPAXI@Z ENDP			; BSpecialXform::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ?Type@BSpecialXform@@UAE?AW4BNodeType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@BSpecialXform@@UAE?AW4BNodeType@@XZ PROC		; BSpecialXform::Type, COMDAT
; _this$ = ecx

; 121  : 	virtual BNodeType	Type(void)	{ return tagBSpecialXform; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 10					; 0000000aH
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@BSpecialXform@@UAE?AW4BNodeType@@XZ ENDP		; BSpecialXform::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Draw@BSpecialXform@@UAEXXZ PROC			; BSpecialXform::Draw
; _this$ = ecx

; 314  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 315  : 	ShiAssert( subTree );
; 316  : 
; 317  : 	TheStateStack.PushVerts();

	call	?PushVerts@StateStackClass@@SAXXZ	; StateStackClass::PushVerts

; 318  : 	TheStateStack.TransformBillboardWithClip( pCoords, nCoords, type );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	?TransformBillboardWithClip@StateStackClass@@SAXPAUTpoint@@HW4BTransformType@@@Z ; StateStackClass::TransformBillboardWithClip
	add	esp, 12					; 0000000cH

; 319  : 	subTree->Draw();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+4]
	call	edx

; 320  : 	TheStateStack.PopVerts();

	call	?PopVerts@StateStackClass@@SAXXZ	; StateStackClass::PopVerts

; 321  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Draw@BSpecialXform@@UAEXXZ ENDP			; BSpecialXform::Draw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ??1BSpecialXform@@UAE@XZ
_TEXT	SEGMENT
tv81 = -28						; size = 4
$T2 = -24						; size = 4
_this$ = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1BSpecialXform@@UAE@XZ PROC				; BSpecialXform::~BSpecialXform, COMDAT
; _this$ = ecx

; 111  : 	virtual ~BSpecialXform()	{ delete subTree; };

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1BSpecialXform@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BSpecialXform@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T3[ebp], eax
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@BSpecialXf
	push	1
	mov	ecx, DWORD PTR $T3[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN1@BSpecialXf
$LN3@BSpecialXf:
	mov	DWORD PTR tv81[ebp], 0
$LN1@BSpecialXf:
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BNode@@UAE@XZ			; BNode::~BNode
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1BSpecialXform@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BNode@@UAE@XZ			; BNode::~BNode
__ehhandler$??1BSpecialXform@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1BSpecialXform@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1BSpecialXform@@UAE@XZ ENDP				; BSpecialXform::~BSpecialXform
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_baseAddress$ = 8					; size = 4
_tagListPtr$ = 12					; size = 4
??0BSpecialXform@@QAE@PAEPAPAW4BNodeType@@@Z PROC	; BSpecialXform::BSpecialXform
; _this$ = ecx

; 146  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0BSpecialXform@@QAE@PAEPAPAW4BNodeType@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _tagListPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _baseAddress$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BNode@@QAE@PAEPAPAW4BNodeType@@@Z	; BNode::BNode
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7BSpecialXform@@6B@

; 147  : 	// Fixup our dependents
; 148  : 	subTree		= RestorePointers( baseAddress, (int)subTree, tagListPtr );

	mov	eax, DWORD PTR _tagListPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _baseAddress$[ebp]
	push	eax
	call	?RestorePointers@BNode@@SAPAV1@PAEHPAPAW4BNodeType@@@Z ; BNode::RestorePointers
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 149  : 
; 150  : 	// Fixup our data pointers
; 151  : 	pCoords		= (Tpoint *)(baseAddress + (int)pCoords);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _baseAddress$[ebp]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 152  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0BSpecialXform@@QAE@PAEPAPAW4BNodeType@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BNode@@UAE@XZ			; BNode::~BNode
__ehhandler$??0BSpecialXform@@QAE@PAEPAPAW4BNodeType@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0BSpecialXform@@QAE@PAEPAPAW4BNodeType@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0BSpecialXform@@QAE@PAEPAPAW4BNodeType@@@Z ENDP	; BSpecialXform::BSpecialXform
; Function compile flags: /Odtp
;	COMDAT ??_GBRoot@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBRoot@@UAEPAXI@Z PROC				; BRoot::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BRoot@@UAE@XZ			; BRoot::~BRoot
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3BNode@@SAXPAX@Z			; BNode::operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBRoot@@UAEPAXI@Z ENDP				; BRoot::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ?Type@BRoot@@UAE?AW4BNodeType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@BRoot@@UAE?AW4BNodeType@@XZ PROC			; BRoot::Type, COMDAT
; _this$ = ecx

; 104  : 	virtual BNodeType	Type(void)	{ return tagBRoot; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 2
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@BRoot@@UAE?AW4BNodeType@@XZ ENDP			; BRoot::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_texOffset$ = -12					; size = 4
tv73 = -8						; size = 4
_this$ = -4						; size = 4
?Draw@BRoot@@UAEXXZ PROC				; BRoot::Draw
; _this$ = ecx

; 294  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 295  : 	// Compute the offset to the first texture in the texture set
; 296  : 	int texOffset = TheStateStack.CurrentInstance->TextureSet * 
; 297  : 		(nTexIDs/max(1,TheStateStack.CurrentInstance->ParentObject->nTextureSets)); // Cobra - TexSets = 0 CTD

	mov	eax, DWORD PTR ?CurrentInstance@StateStackClass@@2PAVObjectInstance@@A ; StateStackClass::CurrentInstance
	mov	ecx, DWORD PTR [eax+32]
	movsx	edx, WORD PTR [ecx+44]
	cmp	edx, 1
	jge	SHORT $LN5@Draw
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN6@Draw
$LN5@Draw:
	mov	eax, DWORD PTR ?CurrentInstance@StateStackClass@@2PAVObjectInstance@@A ; StateStackClass::CurrentInstance
	mov	ecx, DWORD PTR [eax+32]
	movsx	edx, WORD PTR [ecx+44]
	mov	DWORD PTR tv73[ebp], edx
$LN6@Draw:
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	cdq
	idiv	DWORD PTR tv73[ebp]
	mov	ecx, DWORD PTR ?CurrentInstance@StateStackClass@@2PAVObjectInstance@@A ; StateStackClass::CurrentInstance
	imul	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR _texOffset$[ebp], eax

; 298  : 	TheStateStack.SetTextureTable( pTexIDs + texOffset );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _texOffset$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	call	?SetTextureTable@StateStackClass@@SAXPBH@Z ; StateStackClass::SetTextureTable
	add	esp, 4

; 299  : 								   
; 300  : 	if (ScriptNumber > 0) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jle	SHORT $LN2@Draw

; 301  : 		ShiAssert( ScriptNumber < ScriptArrayLength );
; 302  : 		if (ScriptNumber < ScriptArrayLength) {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	cmp	edx, DWORD PTR ?ScriptArrayLength@@3HA	; ScriptArrayLength
	jge	SHORT $LN2@Draw

; 303  : 			ScriptArray[ScriptNumber]();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR ?ScriptArray@@3PAP6AXXZA[ecx*4]
	call	edx
$LN2@Draw:

; 304  : 		}
; 305  : 	}
; 306  : 
; 307  : 	BSubTree::Draw();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Draw@BSubTree@@UAEXXZ			; BSubTree::Draw

; 308  : 	// LOOK HERE JAM!!!!
; 309  : 	//TheStateStack.context.setGlobalZBias(0);
; 310  : 
; 311  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Draw@BRoot@@UAEXXZ ENDP				; BRoot::Draw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$1 = -4						; size = 4
?UnloadTextures@BRoot@@QAEXXZ PROC			; BRoot::UnloadTextures
; _this$ = ecx

; 757  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 758  : 	for (int i=0; i<nTexIDs; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@UnloadText
$LN3@UnloadText:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@UnloadText:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$1[ebp]
	cmp	edx, DWORD PTR [ecx+40]
	jge	SHORT $LN5@UnloadText

; 759  : 		if (pTexIDs[i] >= 0) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$1[ebp]
	cmp	DWORD PTR [ecx+edx*4], 0
	jl	SHORT $LN1@UnloadText

; 760  : 			TheTextureBank.Release( pTexIDs[i] );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	?Release@TextureBankClass@@SAXH@Z	; TextureBankClass::Release
	add	esp, 4
$LN1@UnloadText:

; 761  : 		}
; 762  : 	}

	jmp	SHORT $LN3@UnloadText
$LN5@UnloadText:

; 763  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?UnloadTextures@BRoot@@QAEXXZ ENDP			; BRoot::UnloadTextures
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$1 = -4						; size = 4
?LoadTextures@BRoot@@QAEXXZ PROC			; BRoot::LoadTextures
; _this$ = ecx

; 746  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 747  : 	for (int i=0; i<nTexIDs; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@LoadTextur
$LN3@LoadTextur:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@LoadTextur:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$1[ebp]
	cmp	edx, DWORD PTR [ecx+40]
	jge	SHORT $LN5@LoadTextur

; 748  : 		// Skip unsed texture indices
; 749  : 		if (pTexIDs[i] >= 0) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$1[ebp]
	cmp	DWORD PTR [ecx+edx*4], 0
	jl	SHORT $LN1@LoadTextur

; 750  : 			TheTextureBank.Reference( pTexIDs[i] );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	?Reference@TextureBankClass@@SAXH@Z	; TextureBankClass::Reference
	add	esp, 4
$LN1@LoadTextur:

; 751  : 		}
; 752  : 	}

	jmp	SHORT $LN3@LoadTextur
$LN5@LoadTextur:

; 753  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?LoadTextures@BRoot@@QAEXXZ ENDP			; BRoot::LoadTextures
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ??1BRoot@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1BRoot@@UAE@XZ PROC					; BRoot::~BRoot, COMDAT
; _this$ = ecx

; 94   : 	virtual ~BRoot()	{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BRoot@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BSubTree@@UAE@XZ			; BSubTree::~BSubTree
	mov	esp, ebp
	pop	ebp
	ret	0
??1BRoot@@UAE@XZ ENDP					; BRoot::~BRoot
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_baseAddress$ = 8					; size = 4
_tagListPtr$ = 12					; size = 4
??0BRoot@@QAE@PAEPAPAW4BNodeType@@@Z PROC		; BRoot::BRoot
; _this$ = ecx

; 137  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _tagListPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _baseAddress$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BSubTree@@QAE@PAEPAPAW4BNodeType@@@Z	; BSubTree::BSubTree
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7BRoot@@6B@

; 138  : 	// Fixup our extra data pointers
; 139  : 	pTexIDs		= (int*)(baseAddress + (int)pTexIDs);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _baseAddress$[ebp]
	add	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+36], ecx

; 140  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0BRoot@@QAE@PAEPAPAW4BNodeType@@@Z ENDP		; BRoot::BRoot
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GBSubTree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBSubTree@@UAEPAXI@Z PROC				; BSubTree::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BSubTree@@UAE@XZ			; BSubTree::~BSubTree
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3BNode@@SAXPAX@Z			; BNode::operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBSubTree@@UAEPAXI@Z ENDP				; BSubTree::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ?Type@BSubTree@@UAE?AW4BNodeType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@BSubTree@@UAE?AW4BNodeType@@XZ PROC		; BSubTree::Type, COMDAT
; _this$ = ecx

; 87   : 	virtual BNodeType	Type(void)	{ return tagBSubTree; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@BSubTree@@UAE?AW4BNodeType@@XZ ENDP		; BSubTree::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_child$ = -8						; size = 4
_this$ = -4						; size = 4
?Draw@BSubTree@@UAEXXZ PROC				; BSubTree::Draw
; _this$ = ecx

; 268  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 269  : 	BNode *child;
; 270  : 
; 271  : 	if(nNormals) TheStateStack.Light(pNormals,nNormals,pCoords); //- COBRA - RED - Call only if Normals available

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN6@Draw
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	?Light@StateStackClass@@SAXPBUPnormal@@HPBUTpoint@@@Z ; StateStackClass::Light
	add	esp, 12					; 0000000cH
$LN6@Draw:

; 272  : 
; 273  : 	if(nDynamicCoords == 0)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN5@Draw

; 274  : 		TheStateStack.Transform(pCoords,nCoords);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR ?Transform@StateStackClass@@2P6AXPAUTpoint@@H@ZA ; StateStackClass::Transform
	add	esp, 8

; 275  : 	else

	jmp	SHORT $LN4@Draw
$LN5@Draw:

; 276  : 	{
; 277  : 		TheStateStack.Transform(pCoords,nCoords-nDynamicCoords);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR ?Transform@StateStackClass@@2P6AXPAUTpoint@@H@ZA ; StateStackClass::Transform
	add	esp, 8

; 278  : 		TheStateStack.Transform(TheStateStack.CurrentInstance->DynamicCoords+DynamicCoordOffset,nDynamicCoords);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR ?CurrentInstance@StateStackClass@@2PAVObjectInstance@@A ; StateStackClass::CurrentInstance
	add	edx, DWORD PTR [eax+12]
	push	edx
	call	DWORD PTR ?Transform@StateStackClass@@2P6AXPAUTpoint@@H@ZA ; StateStackClass::Transform
	add	esp, 8
$LN4@Draw:

; 279  : 	}
; 280  : 
; 281  : 	child = subTree;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _child$[ebp], edx
$LN3@Draw:

; 282  : 	ShiAssert(FALSE == F4IsBadReadPtr( child, sizeof*child) );
; 283  : 
; 284  : 	do
; 285  : 	{
; 286  : 		child->Draw();

	mov	eax, DWORD PTR _child$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _child$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax

; 287  : 		child = child->sibling;

	mov	ecx, DWORD PTR _child$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _child$[ebp], edx

; 288  : 	}
; 289  : 	while(child); // JB 010306 CTD

	cmp	DWORD PTR _child$[ebp], 0
	jne	SHORT $LN3@Draw

; 290  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Draw@BSubTree@@UAEXXZ ENDP				; BSubTree::Draw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ??1BSubTree@@UAE@XZ
_TEXT	SEGMENT
tv81 = -28						; size = 4
$T2 = -24						; size = 4
_this$ = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1BSubTree@@UAE@XZ PROC				; BSubTree::~BSubTree, COMDAT
; _this$ = ecx

; 72   : 	virtual ~BSubTree()	{ delete subTree; };

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1BSubTree@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BSubTree@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T3[ebp], eax
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@BSubTree
	push	1
	mov	ecx, DWORD PTR $T3[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN1@BSubTree
$LN3@BSubTree:
	mov	DWORD PTR tv81[ebp], 0
$LN1@BSubTree:
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BNode@@UAE@XZ			; BNode::~BNode
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1BSubTree@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BNode@@UAE@XZ			; BNode::~BNode
__ehhandler$??1BSubTree@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1BSubTree@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1BSubTree@@UAE@XZ ENDP				; BSubTree::~BSubTree
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_baseAddress$ = 8					; size = 4
_tagListPtr$ = 12					; size = 4
??0BSubTree@@QAE@PAEPAPAW4BNodeType@@@Z PROC		; BSubTree::BSubTree
; _this$ = ecx

; 124  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0BSubTree@@QAE@PAEPAPAW4BNodeType@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _tagListPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _baseAddress$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BNode@@QAE@PAEPAPAW4BNodeType@@@Z	; BNode::BNode
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7BSubTree@@6B@

; 125  : 	// Fixup our dependents
; 126  : 	subTree		= RestorePointers( baseAddress, (int)subTree, tagListPtr );

	mov	eax, DWORD PTR _tagListPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _baseAddress$[ebp]
	push	eax
	call	?RestorePointers@BNode@@SAPAV1@PAEHPAPAW4BNodeType@@@Z ; BNode::RestorePointers
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], eax

; 127  : 
; 128  : 	// Fixup our data pointers
; 129  : 	pCoords		= (Ppoint *)(baseAddress + (int)pCoords);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _baseAddress$[ebp]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 130  : 	pNormals	= (Pnormal *)(baseAddress + (int)pNormals);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _baseAddress$[ebp]
	add	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 131  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0BSubTree@@QAE@PAEPAPAW4BNodeType@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BNode@@UAE@XZ			; BNode::~BNode
__ehhandler$??0BSubTree@@QAE@PAEPAPAW4BNodeType@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0BSubTree@@QAE@PAEPAPAW4BNodeType@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0BSubTree@@QAE@PAEPAPAW4BNodeType@@@Z ENDP		; BSubTree::BSubTree
; Function compile flags: /Odtp
;	COMDAT ??_GBNode@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBNode@@UAEPAXI@Z PROC				; BNode::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BNode@@UAE@XZ			; BNode::~BNode
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3BNode@@SAXPAX@Z			; BNode::operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBNode@@UAEPAXI@Z ENDP				; BNode::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ?Type@BNode@@UAE?AW4BNodeType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@BNode@@UAE?AW4BNodeType@@XZ PROC			; BNode::Type, COMDAT
; _this$ = ecx

; 65   : 	virtual BNodeType	Type(void)	{ return tagBNode; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@BNode@@UAE?AW4BNodeType@@XZ ENDP			; BNode::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_tag$ = -724						; size = 4
$T1 = -720						; size = 4
tv79 = -716						; size = 4
$T2 = -712						; size = 4
tv321 = -708						; size = 4
$T3 = -704						; size = 4
$T4 = -700						; size = 4
$T5 = -696						; size = 4
tv307 = -692						; size = 4
$T6 = -688						; size = 4
$T7 = -684						; size = 4
$T8 = -680						; size = 4
tv293 = -676						; size = 4
$T9 = -672						; size = 4
$T10 = -668						; size = 4
$T11 = -664						; size = 4
tv279 = -660						; size = 4
$T12 = -656						; size = 4
$T13 = -652						; size = 4
tv195 = -648						; size = 4
tv265 = -644						; size = 4
tv181 = -640						; size = 4
$T14 = -636						; size = 4
tv167 = -632						; size = 4
tv251 = -628						; size = 4
tv153 = -624						; size = 4
$T15 = -620						; size = 4
tv139 = -616						; size = 4
tv237 = -612						; size = 4
tv93 = -608						; size = 4
$T16 = -604						; size = 4
tv223 = -600						; size = 4
tv209 = -596						; size = 4
tv66 = -592						; size = 4
_node$ = -588						; size = 4
_buffer$17 = -584					; size = 580
__$ArrayPad$ = -4					; size = 4
_baseAddress$ = 8					; size = 4
_offset$ = 12						; size = 4
_tagListPtr$ = 16					; size = 4
?RestorePointers@BNode@@SAPAV1@PAEHPAPAW4BNodeType@@@Z PROC ; BNode::RestorePointers

; 41   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 724				; 000002d4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 42   : 	BNode		*node;
; 43   : 	BNodeType	tag;
; 44   : 
; 45   : 	// Get this record's tag then advance the pointer to the next tag we'll need
; 46   : 	tag = **tagListPtr;

	mov	eax, DWORD PTR _tagListPtr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _tag$[ebp], edx

; 47   : 	*tagListPtr = (*tagListPtr)+1;

	mov	eax, DWORD PTR _tagListPtr$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _tagListPtr$[ebp]
	mov	DWORD PTR [edx], ecx

; 48   : 	
; 49   : 
; 50   : 	// Apply the proper virtual table setup and constructor
; 51   : 	switch( tag ) {

	mov	eax, DWORD PTR _tag$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR tv66[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv66[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 15			; 0000000fH
	ja	$LN1@RestorePoi
	mov	edx, DWORD PTR tv66[ebp]
	jmp	DWORD PTR $LN54@RestorePoi[edx*4]
$LN17@RestorePoi:

; 52   : 	  case tagBSubTree:
; 53   : 		node = new (baseAddress+offset) BSubTree( baseAddress, tagListPtr );

	mov	eax, DWORD PTR _baseAddress$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	push	eax
	push	36					; 00000024H
	call	??2BNode@@SAPAXIPAX@Z			; BNode::operator new
	add	esp, 8
	mov	DWORD PTR $T12[ebp], eax
	cmp	DWORD PTR $T12[ebp], 0
	je	SHORT $LN22@RestorePoi
	mov	ecx, DWORD PTR _tagListPtr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _baseAddress$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T12[ebp]
	call	??0BSubTree@@QAE@PAEPAPAW4BNodeType@@@Z	; BSubTree::BSubTree
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN23@RestorePoi
$LN22@RestorePoi:
	mov	DWORD PTR tv79[ebp], 0
$LN23@RestorePoi:
	mov	eax, DWORD PTR tv79[ebp]
	mov	DWORD PTR _node$[ebp], eax

; 54   : 		break;

	jmp	$LN18@RestorePoi
$LN16@RestorePoi:

; 55   : 	  case tagBRoot:
; 56   : 		node = new (baseAddress+offset) BRoot( baseAddress, tagListPtr );

	mov	ecx, DWORD PTR _baseAddress$[ebp]
	add	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	push	48					; 00000030H
	call	??2BNode@@SAPAXIPAX@Z			; BNode::operator new
	add	esp, 8
	mov	DWORD PTR $T11[ebp], eax
	cmp	DWORD PTR $T11[ebp], 0
	je	SHORT $LN24@RestorePoi
	mov	edx, DWORD PTR _tagListPtr$[ebp]
	push	edx
	mov	eax, DWORD PTR _baseAddress$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T11[ebp]
	call	??0BRoot@@QAE@PAEPAPAW4BNodeType@@@Z	; BRoot::BRoot
	mov	DWORD PTR tv93[ebp], eax
	jmp	SHORT $LN25@RestorePoi
$LN24@RestorePoi:
	mov	DWORD PTR tv93[ebp], 0
$LN25@RestorePoi:
	mov	ecx, DWORD PTR tv93[ebp]
	mov	DWORD PTR _node$[ebp], ecx

; 57   : 		break;

	jmp	$LN18@RestorePoi
$LN15@RestorePoi:

; 58   : 	  case tagBSpecialXform:
; 59   : 		node = new (baseAddress+offset) BSpecialXform( baseAddress, tagListPtr );

	mov	edx, DWORD PTR _baseAddress$[ebp]
	add	edx, DWORD PTR _offset$[ebp]
	push	edx
	push	24					; 00000018H
	call	??2BNode@@SAPAXIPAX@Z			; BNode::operator new
	add	esp, 8
	mov	DWORD PTR $T5[ebp], eax
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN26@RestorePoi
	mov	eax, DWORD PTR _tagListPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _baseAddress$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0BSpecialXform@@QAE@PAEPAPAW4BNodeType@@@Z ; BSpecialXform::BSpecialXform
	mov	DWORD PTR tv139[ebp], eax
	jmp	SHORT $LN27@RestorePoi
$LN26@RestorePoi:
	mov	DWORD PTR tv139[ebp], 0
$LN27@RestorePoi:
	mov	edx, DWORD PTR tv139[ebp]
	mov	DWORD PTR _node$[ebp], edx

; 60   : 		break;

	jmp	$LN18@RestorePoi
$LN14@RestorePoi:

; 61   : 	  case tagBSlotNode:
; 62   : 		node = new (baseAddress+offset) BSlotNode( baseAddress, tagListPtr );

	mov	eax, DWORD PTR _baseAddress$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	push	eax
	push	60					; 0000003cH
	call	??2BNode@@SAPAXIPAX@Z			; BNode::operator new
	add	esp, 8
	mov	DWORD PTR $T9[ebp], eax
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN28@RestorePoi
	mov	ecx, DWORD PTR _tagListPtr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _baseAddress$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T9[ebp]
	call	??0BSlotNode@@QAE@PAEPAPAW4BNodeType@@@Z ; BSlotNode::BSlotNode
	mov	DWORD PTR tv153[ebp], eax
	jmp	SHORT $LN29@RestorePoi
$LN28@RestorePoi:
	mov	DWORD PTR tv153[ebp], 0
$LN29@RestorePoi:
	mov	eax, DWORD PTR tv153[ebp]
	mov	DWORD PTR _node$[ebp], eax

; 63   : 		break;

	jmp	$LN18@RestorePoi
$LN13@RestorePoi:

; 64   : 	  case tagBDofNode:
; 65   : 		node = new (baseAddress+offset) BDofNode( baseAddress, tagListPtr );

	mov	ecx, DWORD PTR _baseAddress$[ebp]
	add	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	push	88					; 00000058H
	call	??2BNode@@SAPAXIPAX@Z			; BNode::operator new
	add	esp, 8
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN30@RestorePoi
	mov	edx, DWORD PTR _tagListPtr$[ebp]
	push	edx
	mov	eax, DWORD PTR _baseAddress$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T2[ebp]
	call	??0BDofNode@@QAE@PAEPAPAW4BNodeType@@@Z	; BDofNode::BDofNode
	mov	DWORD PTR tv167[ebp], eax
	jmp	SHORT $LN31@RestorePoi
$LN30@RestorePoi:
	mov	DWORD PTR tv167[ebp], 0
$LN31@RestorePoi:
	mov	ecx, DWORD PTR tv167[ebp]
	mov	DWORD PTR _node$[ebp], ecx

; 66   : 		break;

	jmp	$LN18@RestorePoi
$LN12@RestorePoi:

; 67   : 	  case tagBSwitchNode:
; 68   : 		node = new (baseAddress+offset) BSwitchNode( baseAddress, tagListPtr );

	mov	edx, DWORD PTR _baseAddress$[ebp]
	add	edx, DWORD PTR _offset$[ebp]
	push	edx
	push	20					; 00000014H
	call	??2BNode@@SAPAXIPAX@Z			; BNode::operator new
	add	esp, 8
	mov	DWORD PTR $T8[ebp], eax
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN32@RestorePoi
	mov	eax, DWORD PTR _tagListPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _baseAddress$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T8[ebp]
	call	??0BSwitchNode@@QAE@PAEPAPAW4BNodeType@@@Z ; BSwitchNode::BSwitchNode
	mov	DWORD PTR tv181[ebp], eax
	jmp	SHORT $LN33@RestorePoi
$LN32@RestorePoi:
	mov	DWORD PTR tv181[ebp], 0
$LN33@RestorePoi:
	mov	edx, DWORD PTR tv181[ebp]
	mov	DWORD PTR _node$[ebp], edx

; 69   : 		break;

	jmp	$LN18@RestorePoi
$LN11@RestorePoi:

; 70   : 	  case tagBSplitterNode:
; 71   : 		node = new (baseAddress+offset) BSplitterNode( baseAddress, tagListPtr );

	mov	eax, DWORD PTR _baseAddress$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	push	eax
	push	32					; 00000020H
	call	??2BNode@@SAPAXIPAX@Z			; BNode::operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN34@RestorePoi
	mov	ecx, DWORD PTR _tagListPtr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _baseAddress$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0BSplitterNode@@QAE@PAEPAPAW4BNodeType@@@Z ; BSplitterNode::BSplitterNode
	mov	DWORD PTR tv195[ebp], eax
	jmp	SHORT $LN35@RestorePoi
$LN34@RestorePoi:
	mov	DWORD PTR tv195[ebp], 0
$LN35@RestorePoi:
	mov	eax, DWORD PTR tv195[ebp]
	mov	DWORD PTR _node$[ebp], eax

; 72   : 		break;

	jmp	$LN18@RestorePoi
$LN10@RestorePoi:

; 73   : 	  case tagBPrimitiveNode:
; 74   : 		node = new (baseAddress+offset) BPrimitiveNode( baseAddress, tagListPtr );

	mov	ecx, DWORD PTR _baseAddress$[ebp]
	add	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	push	12					; 0000000cH
	call	??2BNode@@SAPAXIPAX@Z			; BNode::operator new
	add	esp, 8
	mov	DWORD PTR $T6[ebp], eax
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN36@RestorePoi
	mov	edx, DWORD PTR _tagListPtr$[ebp]
	push	edx
	mov	eax, DWORD PTR _baseAddress$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T6[ebp]
	call	??0BPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z ; BPrimitiveNode::BPrimitiveNode
	mov	DWORD PTR tv209[ebp], eax
	jmp	SHORT $LN37@RestorePoi
$LN36@RestorePoi:
	mov	DWORD PTR tv209[ebp], 0
$LN37@RestorePoi:
	mov	ecx, DWORD PTR tv209[ebp]
	mov	DWORD PTR _node$[ebp], ecx

; 75   : 		break;

	jmp	$LN18@RestorePoi
$LN9@RestorePoi:

; 76   : 	  case tagBLitPrimitiveNode:
; 77   : 		node = new (baseAddress+offset) BLitPrimitiveNode( baseAddress, tagListPtr );

	mov	edx, DWORD PTR _baseAddress$[ebp]
	add	edx, DWORD PTR _offset$[ebp]
	push	edx
	push	16					; 00000010H
	call	??2BNode@@SAPAXIPAX@Z			; BNode::operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN38@RestorePoi
	mov	eax, DWORD PTR _tagListPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _baseAddress$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0BLitPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z ; BLitPrimitiveNode::BLitPrimitiveNode
	mov	DWORD PTR tv223[ebp], eax
	jmp	SHORT $LN39@RestorePoi
$LN38@RestorePoi:
	mov	DWORD PTR tv223[ebp], 0
$LN39@RestorePoi:
	mov	edx, DWORD PTR tv223[ebp]
	mov	DWORD PTR _node$[ebp], edx

; 78   : 		break;

	jmp	$LN18@RestorePoi
$LN8@RestorePoi:

; 79   : 	  case tagBCulledPrimitiveNode:
; 80   : 		node = new (baseAddress+offset) BCulledPrimitiveNode( baseAddress, tagListPtr );

	mov	eax, DWORD PTR _baseAddress$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	push	eax
	push	12					; 0000000cH
	call	??2BNode@@SAPAXIPAX@Z			; BNode::operator new
	add	esp, 8
	mov	DWORD PTR $T16[ebp], eax
	cmp	DWORD PTR $T16[ebp], 0
	je	SHORT $LN40@RestorePoi
	mov	ecx, DWORD PTR _tagListPtr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _baseAddress$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T16[ebp]
	call	??0BCulledPrimitiveNode@@QAE@PAEPAPAW4BNodeType@@@Z ; BCulledPrimitiveNode::BCulledPrimitiveNode
	mov	DWORD PTR tv237[ebp], eax
	jmp	SHORT $LN41@RestorePoi
$LN40@RestorePoi:
	mov	DWORD PTR tv237[ebp], 0
$LN41@RestorePoi:
	mov	eax, DWORD PTR tv237[ebp]
	mov	DWORD PTR _node$[ebp], eax

; 81   : 		break;

	jmp	$LN18@RestorePoi
$LN7@RestorePoi:

; 82   : 	  case tagBLightStringNode:
; 83   : 		node = new (baseAddress+offset) BLightStringNode( baseAddress, tagListPtr );

	mov	ecx, DWORD PTR _baseAddress$[ebp]
	add	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	push	36					; 00000024H
	call	??2BNode@@SAPAXIPAX@Z			; BNode::operator new
	add	esp, 8
	mov	DWORD PTR $T15[ebp], eax
	cmp	DWORD PTR $T15[ebp], 0
	je	SHORT $LN42@RestorePoi
	mov	edx, DWORD PTR _tagListPtr$[ebp]
	push	edx
	mov	eax, DWORD PTR _baseAddress$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T15[ebp]
	call	??0BLightStringNode@@QAE@PAEPAPAW4BNodeType@@@Z ; BLightStringNode::BLightStringNode
	mov	DWORD PTR tv251[ebp], eax
	jmp	SHORT $LN43@RestorePoi
$LN42@RestorePoi:
	mov	DWORD PTR tv251[ebp], 0
$LN43@RestorePoi:
	mov	ecx, DWORD PTR tv251[ebp]
	mov	DWORD PTR _node$[ebp], ecx

; 84   : 		break;

	jmp	$LN18@RestorePoi
$LN6@RestorePoi:

; 85   : 	  case tagBTransNode:
; 86   : 		node = new (baseAddress+offset) BTransNode( baseAddress, tagListPtr );

	mov	edx, DWORD PTR _baseAddress$[ebp]
	add	edx, DWORD PTR _offset$[ebp]
	push	edx
	push	72					; 00000048H
	call	??2BNode@@SAPAXIPAX@Z			; BNode::operator new
	add	esp, 8
	mov	DWORD PTR $T14[ebp], eax
	cmp	DWORD PTR $T14[ebp], 0
	je	SHORT $LN44@RestorePoi
	mov	eax, DWORD PTR _tagListPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _baseAddress$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T14[ebp]
	call	??0BTransNode@@QAE@PAEPAPAW4BNodeType@@@Z ; BTransNode::BTransNode
	mov	DWORD PTR tv265[ebp], eax
	jmp	SHORT $LN45@RestorePoi
$LN44@RestorePoi:
	mov	DWORD PTR tv265[ebp], 0
$LN45@RestorePoi:
	mov	edx, DWORD PTR tv265[ebp]
	mov	DWORD PTR _node$[ebp], edx

; 87   : 		break;

	jmp	$LN18@RestorePoi
$LN5@RestorePoi:

; 88   : 	  case tagBScaleNode:
; 89   : 		node = new (baseAddress+offset) BScaleNode( baseAddress, tagListPtr );

	mov	eax, DWORD PTR _baseAddress$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	push	eax
	push	84					; 00000054H
	call	??2BNode@@SAPAXIPAX@Z			; BNode::operator new
	add	esp, 8
	mov	DWORD PTR $T13[ebp], eax
	cmp	DWORD PTR $T13[ebp], 0
	je	SHORT $LN46@RestorePoi
	mov	ecx, DWORD PTR _tagListPtr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _baseAddress$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T13[ebp]
	call	??0BScaleNode@@QAE@PAEPAPAW4BNodeType@@@Z ; BScaleNode::BScaleNode
	mov	DWORD PTR tv279[ebp], eax
	jmp	SHORT $LN47@RestorePoi
$LN46@RestorePoi:
	mov	DWORD PTR tv279[ebp], 0
$LN47@RestorePoi:
	mov	eax, DWORD PTR tv279[ebp]
	mov	DWORD PTR _node$[ebp], eax

; 90   : 		break;

	jmp	$LN18@RestorePoi
$LN4@RestorePoi:

; 91   : 	  case tagBXDofNode:
; 92   : 		node = new (baseAddress+offset) BXDofNode( baseAddress, tagListPtr );

	mov	ecx, DWORD PTR _baseAddress$[ebp]
	add	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	push	108					; 0000006cH
	call	??2BNode@@SAPAXIPAX@Z			; BNode::operator new
	add	esp, 8
	mov	DWORD PTR $T10[ebp], eax
	cmp	DWORD PTR $T10[ebp], 0
	je	SHORT $LN48@RestorePoi
	mov	edx, DWORD PTR _tagListPtr$[ebp]
	push	edx
	mov	eax, DWORD PTR _baseAddress$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T10[ebp]
	call	??0BXDofNode@@QAE@PAEPAPAW4BNodeType@@@Z ; BXDofNode::BXDofNode
	mov	DWORD PTR tv293[ebp], eax
	jmp	SHORT $LN49@RestorePoi
$LN48@RestorePoi:
	mov	DWORD PTR tv293[ebp], 0
$LN49@RestorePoi:
	mov	ecx, DWORD PTR tv293[ebp]
	mov	DWORD PTR _node$[ebp], ecx

; 93   : 		break;

	jmp	$LN18@RestorePoi
$LN3@RestorePoi:

; 94   : 	  case tagBXSwitchNode:
; 95   : 		node = new (baseAddress+offset) BXSwitchNode( baseAddress, tagListPtr );

	mov	edx, DWORD PTR _baseAddress$[ebp]
	add	edx, DWORD PTR _offset$[ebp]
	push	edx
	push	24					; 00000018H
	call	??2BNode@@SAPAXIPAX@Z			; BNode::operator new
	add	esp, 8
	mov	DWORD PTR $T7[ebp], eax
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN50@RestorePoi
	mov	eax, DWORD PTR _tagListPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _baseAddress$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T7[ebp]
	call	??0BXSwitchNode@@QAE@PAEPAPAW4BNodeType@@@Z ; BXSwitchNode::BXSwitchNode
	mov	DWORD PTR tv307[ebp], eax
	jmp	SHORT $LN51@RestorePoi
$LN50@RestorePoi:
	mov	DWORD PTR tv307[ebp], 0
$LN51@RestorePoi:
	mov	edx, DWORD PTR tv307[ebp]
	mov	DWORD PTR _node$[ebp], edx

; 96   : 		break;

	jmp	$LN18@RestorePoi
$LN2@RestorePoi:

; 97   : 	  case tagBRenderControlNode:
; 98   : 		node = new (baseAddress+offset) BRenderControlNode( baseAddress, tagListPtr );

	mov	eax, DWORD PTR _baseAddress$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	push	eax
	push	44					; 0000002cH
	call	??2BNode@@SAPAXIPAX@Z			; BNode::operator new
	add	esp, 8
	mov	DWORD PTR $T4[ebp], eax
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN52@RestorePoi
	mov	ecx, DWORD PTR _tagListPtr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _baseAddress$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0BRenderControlNode@@QAE@PAEPAPAW4BNodeType@@@Z ; BRenderControlNode::BRenderControlNode
	mov	DWORD PTR tv321[ebp], eax
	jmp	SHORT $LN53@RestorePoi
$LN52@RestorePoi:
	mov	DWORD PTR tv321[ebp], 0
$LN53@RestorePoi:
	mov	eax, DWORD PTR tv321[ebp]
	mov	DWORD PTR _node$[ebp], eax

; 99   : 		break;

	jmp	SHORT $LN18@RestorePoi
$LN1@RestorePoi:

; 100  : 
; 101  : 	  default:
; 102  : 		ShiError("Decoding unrecognized BSP node type.");

	push	OFFSET ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
	push	OFFSET ??_C@_0N@HOMANILB@BSPnodes?4cpp?$AA@
	push	102					; 00000066H
	push	OFFSET ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
	lea	ecx, DWORD PTR _buffer$17[ebp]
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H
	push	0
	push	OFFSET ??_C@_0CF@IAGBJGEG@Decoding?5unrecognized?5BSP?5node?5t@
	lea	edx, DWORD PTR _buffer$17[ebp]
	push	edx
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	push	-1
	call	_exit
$LN18@RestorePoi:

; 103  : 	}
; 104  : 
; 105  : 	return node;

	mov	eax, DWORD PTR _node$[ebp]
$LN21@RestorePoi:

; 106  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN54@RestorePoi:
	DD	$LN17@RestorePoi
	DD	$LN16@RestorePoi
	DD	$LN14@RestorePoi
	DD	$LN13@RestorePoi
	DD	$LN12@RestorePoi
	DD	$LN11@RestorePoi
	DD	$LN10@RestorePoi
	DD	$LN9@RestorePoi
	DD	$LN8@RestorePoi
	DD	$LN15@RestorePoi
	DD	$LN7@RestorePoi
	DD	$LN6@RestorePoi
	DD	$LN5@RestorePoi
	DD	$LN4@RestorePoi
	DD	$LN3@RestorePoi
	DD	$LN2@RestorePoi
?RestorePointers@BNode@@SAPAV1@PAEHPAPAW4BNodeType@@@Z ENDP ; BNode::RestorePointers
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ??3BNode@@SAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??3BNode@@SAXPAX@Z PROC					; BNode::operator delete, COMDAT

; 56   : 	void operator delete(void *)			{ };

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
??3BNode@@SAXPAX@Z ENDP					; BNode::operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ??2BNode@@SAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_p$ = 12						; size = 4
??2BNode@@SAPAXIPAX@Z PROC				; BNode::operator new, COMDAT

; 54   : 	void *operator new(size_t, void *p)	{ return p; };

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _p$[ebp]
	pop	ebp
	ret	0
??2BNode@@SAPAXIPAX@Z ENDP				; BNode::operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\bspnodes.h
;	COMDAT ??1BNode@@UAE@XZ
_TEXT	SEGMENT
tv72 = -16						; size = 4
$T1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -4						; size = 4
??1BNode@@UAE@XZ PROC					; BNode::~BNode, COMDAT
; _this$ = ecx

; 51   : 	virtual ~BNode()									{ delete sibling; };

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BNode@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN3@BNode
	push	1
	mov	ecx, DWORD PTR $T2[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN1@BNode
$LN3@BNode:
	mov	DWORD PTR tv72[ebp], 0
$LN1@BNode:
	mov	esp, ebp
	pop	ebp
	ret	0
??1BNode@@UAE@XZ ENDP					; BNode::~BNode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\bspnodes.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_baseAddress$ = 8					; size = 4
_tagListPtr$ = 12					; size = 4
??0BNode@@QAE@PAEPAPAW4BNodeType@@@Z PROC		; BNode::BNode
; _this$ = ecx

; 111  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BNode@@6B@

; 112  : 	// Fixup our sibling, if any
; 113  : 	if ((int)sibling >= 0) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jl	SHORT $LN2@BNode

; 114  : 		sibling = RestorePointers( baseAddress, (int)sibling, tagListPtr );

	mov	edx, DWORD PTR _tagListPtr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _baseAddress$[ebp]
	push	edx
	call	?RestorePointers@BNode@@SAPAV1@PAEHPAPAW4BNodeType@@@Z ; BNode::RestorePointers
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 115  : 	} else {

	jmp	SHORT $LN3@BNode
$LN2@BNode:

; 116  : 		sibling = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
$LN3@BNode:

; 117  : 	}
; 118  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0BNode@@QAE@PAEPAPAW4BNodeType@@@Z ENDP		; BNode::BNode
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z PROC	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ENDP	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ PROC	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CComBSTR@ATL@@QAE@XZ			; ATL::CComBSTR::~CComBSTR
	mov	esp, ebp
	pop	ebp
	ret	0
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ ENDP	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\atlmfc\include\atlcomcli.h
;	COMDAT ??1CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CComBSTR@ATL@@QAE@XZ PROC				; ATL::CComBSTR::~CComBSTR, COMDAT
; _this$ = ecx

; 1656 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1657 :     ::SysFreeString(m_str);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__SysFreeString@4

; 1658 : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1CComBSTR@ATL@@QAE@XZ ENDP				; ATL::CComBSTR::~CComBSTR
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Where$[ebp]
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
