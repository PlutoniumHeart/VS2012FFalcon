; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\Graphics\BSPlib\TexBank.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?VT@?$CVarTypeInfo@_J@ATL@@2GB			; ATL::CVarTypeInfo<__int64>::VT
PUBLIC	?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ ; ATL::CVarTypeInfo<__int64>::pmField
PUBLIC	?nTextures@TextureBankClass@@2HA		; TextureBankClass::nTextures
PUBLIC	?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
PUBLIC	___pobjMapEntryFirst
PUBLIC	___pobjMapEntryLast
PUBLIC	?TempTexturePool@TextureBankClass@@2PAUTempTexBankEntry@@A ; TextureBankClass::TempTexturePool
PUBLIC	?baseName@TextureBankClass@@1PADA		; TextureBankClass::baseName
PUBLIC	?deferredLoadState@TextureBankClass@@1HA	; TextureBankClass::deferredLoadState
PUBLIC	?VT@?$CVarTypeInfo@PA_J@ATL@@2GB		; ATL::CVarTypeInfo<__int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ ; ATL::CVarTypeInfo<__int64 *>::pmField
PUBLIC	?CompressedBuffer@TextureBankClass@@1PAEA	; TextureBankClass::CompressedBuffer
PUBLIC	?TexBuffer@TextureBankClass@@1PAEA		; TextureBankClass::TexBuffer
PUBLIC	?TexBufferSize@TextureBankClass@@1KA		; TextureBankClass::TexBufferSize
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?VT@?$CVarTypeInfo@_K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned __int64>::VT
PUBLIC	??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@	; `string'
PUBLIC	?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64>::pmField
PUBLIC	??_C@_08PICKODJL@FileType?$AA@			; `string'
PUBLIC	??_C@_09JKPGEJCH@Interface?$AA@			; `string'
PUBLIC	??_C@_08PPIOJEA@Hardware?$AA@			; `string'
PUBLIC	?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA	; ATL::_pPerfRegFunc
PUBLIC	??_C@_04IHBFOLAC@Mime?$AA@			; `string'
PUBLIC	?_pPerfUnRegFunc@ATL@@3P6AJXZA			; ATL::_pPerfUnRegFunc
PUBLIC	??_C@_03DDIMFGBA@SAM?$AA@			; `string'
PUBLIC	?_AtlRegisterPerUser@ATL@@3_NA			; ATL::_AtlRegisterPerUser
PUBLIC	??_C@_08LOPHEHKG@SECURITY?$AA@			; `string'
PUBLIC	??_C@_06FDHFNJBJ@SYSTEM?$AA@			; `string'
PUBLIC	??_C@_08KEKAJNJI@Software?$AA@			; `string'
PUBLIC	??_C@_07KJLOKDKB@TypeLib?$AA@			; `string'
PUBLIC	?VT@?$CVarTypeInfo@PA_K@ATL@@2GB		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
PUBLIC	__GUID_00000000_0000_0000_c000_000000000046
PUBLIC	?VT@?$CVarTypeInfo@M@ATL@@2GB			; ATL::CVarTypeInfo<float>::VT
PUBLIC	?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ ; ATL::CVarTypeInfo<float>::pmField
PUBLIC	__GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
PUBLIC	?VT@?$CVarTypeInfo@PAM@ATL@@2GB			; ATL::CVarTypeInfo<float *>::VT
PUBLIC	__GUID_00020400_0000_0000_c000_000000000046
PUBLIC	?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ ; ATL::CVarTypeInfo<float *>::pmField
PUBLIC	?TexFlags@TextureBankClass@@1PAUTexFlagsType@@A	; TextureBankClass::TexFlags
PUBLIC	?RatedLoad@TextureBankClass@@1_NA		; TextureBankClass::RatedLoad
PUBLIC	?CacheLoad@TextureBankClass@@1PAFA		; TextureBankClass::CacheLoad
PUBLIC	?CacheRelease@TextureBankClass@@1PAFA		; TextureBankClass::CacheRelease
PUBLIC	?LoadIn@TextureBankClass@@1FA			; TextureBankClass::LoadIn
PUBLIC	?VT@?$CVarTypeInfo@N@ATL@@2GB			; ATL::CVarTypeInfo<double>::VT
PUBLIC	?LoadOut@TextureBankClass@@1FA			; TextureBankClass::LoadOut
PUBLIC	?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ ; ATL::CVarTypeInfo<double>::pmField
PUBLIC	?ReleaseIn@TextureBankClass@@1FA		; TextureBankClass::ReleaseIn
PUBLIC	?ReleaseOut@TextureBankClass@@1FA		; TextureBankClass::ReleaseOut
PUBLIC	?VT@?$CVarTypeInfo@PAN@ATL@@2GB			; ATL::CVarTypeInfo<double *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ ; ATL::CVarTypeInfo<double *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB	; ATL::CVarTypeInfo<tagVARIANT *>::VT
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	__GUID_0002e012_0000_0000_c000_000000000046
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?VT@?$CVarTypeInfo@PA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ ; ATL::CVarTypeInfo<wchar_t *>::pmField
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t * *>::VT
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ ; ATL::CVarTypeInfo<wchar_t * *>::pmField
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown *>::VT
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown *>::pmField
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown * *>::pmField
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	__GUID_0000010c_0000_0000_c000_000000000046
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch *>::VT
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch *>::pmField
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	??_C@_05GIBEAPNE@CLSID?$AA@			; `string'
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	_IID_IAxWinHostWindow
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch * *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY>::VT
PUBLIC	?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY>::pmField
PUBLIC	??_C@_05PDIKPLII@AppID?$AA@			; `string'
PUBLIC	?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY *>::VT
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY *>::pmField
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?chDirSep@ATL@@3DB				; ATL::chDirSep
PUBLIC	?chRightBracket@ATL@@3DB			; ATL::chRightBracket
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?chLeftBracket@ATL@@3DB				; ATL::chLeftBracket
PUBLIC	?chQuote@ATL@@3DB				; ATL::chQuote
PUBLIC	?chEquals@ATL@@3DB				; ATL::chEquals
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?szStringVal@ATL@@3QBDB				; ATL::szStringVal
PUBLIC	??_C@_01CPLAODJH@S?$AA@				; `string'
PUBLIC	?multiszStringVal@ATL@@3QBDB			; ATL::multiszStringVal
PUBLIC	_IID_IAxWinHostWindowLic
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	??_C@_01PLPBNMEI@M?$AA@				; `string'
PUBLIC	?szDwordVal@ATL@@3QBDB				; ATL::szDwordVal
PUBLIC	??_C@_01CKDDGHAB@D?$AA@				; `string'
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?szBinaryVal@ATL@@3QBDB				; ATL::szBinaryVal
PUBLIC	??_C@_01HMGJMAIH@B?$AA@				; `string'
PUBLIC	?szValToken@ATL@@3QBDB				; ATL::szValToken
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	??_C@_03LAIAPFCB@Val?$AA@			; `string'
PUBLIC	?szForceRemove@ATL@@3QBDB			; ATL::szForceRemove
PUBLIC	??_C@_0M@DBGDLGLL@ForceRemove?$AA@		; `string'
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?szNoRemove@ATL@@3QBDB				; ATL::szNoRemove
PUBLIC	??_C@_08KAAPDIAN@NoRemove?$AA@			; `string'
PUBLIC	?szDelete@ATL@@3QBDB				; ATL::szDelete
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	??_C@_06JBKGCNBB@Delete?$AA@			; `string'
PUBLIC	?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA	; ATL::CComApartment::ATL_CREATE_OBJECT
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	_IID_IAxWinAmbientDispatch
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A ; ATL::_pAtlAutoThreadModule
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?m_bInitFailed@CAtlBaseModule@ATL@@2_NA		; ATL::CAtlBaseModule::m_bInitFailed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?gDebugTextureID@@3KA				; gDebugTextureID
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?nVer@@3HA					; nVer
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	__GUID_00000000_0000_0000_0000_000000000000
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?MAX_VALUE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_VALUE
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?rgszNeverDelete@CRegParser@ATL@@1QBQBDB	; ATL::CRegParser::rgszNeverDelete
PUBLIC	?cbNeverDelete@CRegParser@ATL@@1HB		; ATL::CRegParser::cbNeverDelete
PUBLIC	?MAX_TYPE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_TYPE
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	_IID_IAxWinAmbientDispatchEx
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	_IID_IInternalConnection
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	__GUID_1cf2b120_547d_101b_8e65_08002b2bd119
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?_pAtlModule@ATL@@3PAVCAtlModule@1@A		; ATL::_pAtlModule
PUBLIC	?m_libid@CAtlModule@ATL@@2U_GUID@@A		; ATL::CAtlModule::m_libid
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	__GUID_00000146_0000_0000_c000_000000000046
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?VT@?$CVarTypeInfo@D@ATL@@2GB			; ATL::CVarTypeInfo<char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ ; ATL::CVarTypeInfo<char>::pmField
PUBLIC	?VT@?$CVarTypeInfo@E@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ ; ATL::CVarTypeInfo<unsigned char>::pmField
PUBLIC	_CLSID_Registrar
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?_Min@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Min
PUBLIC	?VT@?$CVarTypeInfo@PAD@ATL@@2GB			; ATL::CVarTypeInfo<char *>::VT
PUBLIC	?_Max@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Max
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ ; ATL::CVarTypeInfo<char *>::pmField
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?_Min@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Min
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?_Max@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Max
PUBLIC	?VT@?$CVarTypeInfo@PAE@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char *>::VT
PUBLIC	__GUID_00000109_0000_0000_c000_000000000046
PUBLIC	?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ ; ATL::CVarTypeInfo<unsigned char *>::pmField
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?_Min@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Min
PUBLIC	__GUID_b196b284_bab4_101a_b69c_00aa00341d07
PUBLIC	?_Max@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Max
PUBLIC	?VT@?$CVarTypeInfo@F@ATL@@2GB			; ATL::CVarTypeInfo<short>::VT
PUBLIC	_IID_IRegistrar
PUBLIC	?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ ; ATL::CVarTypeInfo<short>::pmField
PUBLIC	?_Min@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Min
PUBLIC	?_Max@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Max
PUBLIC	?VT@?$CVarTypeInfo@PAF@ATL@@2GB			; ATL::CVarTypeInfo<short *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ ; ATL::CVarTypeInfo<short *>::pmField
PUBLIC	?_Min@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Min
PUBLIC	__GUID_00000001_0000_0000_c000_000000000046
PUBLIC	?_Max@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Max
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?VT@?$CVarTypeInfo@G@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short>::VT
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ ; ATL::CVarTypeInfo<unsigned short>::pmField
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	__GUID_00020401_0000_0000_c000_000000000046
PUBLIC	?_Min@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Min
PUBLIC	_LIBID_ATLLib
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?_Max@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Max
PUBLIC	__GUID_00020412_0000_0000_c000_000000000046
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?VT@?$CVarTypeInfo@PAG@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short *>::VT
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ ; ATL::CVarTypeInfo<unsigned short *>::pmField
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?VT@?$CVarTypeInfo@H@ATL@@2GB			; ATL::CVarTypeInfo<int>::VT
PUBLIC	?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ ; ATL::CVarTypeInfo<int>::pmField
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?VT@?$CVarTypeInfo@PAH@ATL@@2GB			; ATL::CVarTypeInfo<int *>::VT
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ ; ATL::CVarTypeInfo<int *>::pmField
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?VT@?$CVarTypeInfo@I@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int>::VT
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ ; ATL::CVarTypeInfo<unsigned int>::pmField
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?VT@?$CVarTypeInfo@PAI@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ ; ATL::CVarTypeInfo<unsigned int *>::pmField
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?VT@?$CVarTypeInfo@J@ATL@@2GB			; ATL::CVarTypeInfo<long>::VT
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ ; ATL::CVarTypeInfo<long>::pmField
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?_pModule@ATL@@3PAVCComModule@1@A		; ATL::_pModule
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?VT@?$CVarTypeInfo@PAJ@ATL@@2GB			; ATL::CVarTypeInfo<long *>::VT
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ ; ATL::CVarTypeInfo<long *>::pmField
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	_IID_IDocHostUIHandlerDispatch
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?VT@?$CVarTypeInfo@K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long>::VT
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ ; ATL::CVarTypeInfo<unsigned long>::pmField
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?VT@?$CVarTypeInfo@PAK@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long *>::VT
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ ; ATL::CVarTypeInfo<unsigned long *>::pmField
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
_BSS	SEGMENT
?nTextures@TextureBankClass@@2HA DD 01H DUP (?)		; TextureBankClass::nTextures
?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A DD 01H DUP (?) ; TextureBankClass::TexturePool
?TempTexturePool@TextureBankClass@@2PAUTempTexBankEntry@@A DD 01H DUP (?) ; TextureBankClass::TempTexturePool
?baseName@TextureBankClass@@1PADA DB 0100H DUP (?)	; TextureBankClass::baseName
?deferredLoadState@TextureBankClass@@1HA DD 01H DUP (?)	; TextureBankClass::deferredLoadState
?CompressedBuffer@TextureBankClass@@1PAEA DD 01H DUP (?) ; TextureBankClass::CompressedBuffer
?TexBuffer@TextureBankClass@@1PAEA DD 01H DUP (?)	; TextureBankClass::TexBuffer
?TexBufferSize@TextureBankClass@@1KA DD 01H DUP (?)	; TextureBankClass::TexBufferSize
_BSS	ENDS
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA
_BSS	SEGMENT
?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA DD 01H DUP (?) ; ATL::_pPerfRegFunc
_BSS	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZA
_BSS	SEGMENT
?_pPerfUnRegFunc@ATL@@3P6AJXZA DD 01H DUP (?)		; ATL::_pPerfUnRegFunc
_BSS	ENDS
;	COMDAT ?_AtlRegisterPerUser@ATL@@3_NA
_BSS	SEGMENT
?_AtlRegisterPerUser@ATL@@3_NA DB 01H DUP (?)		; ATL::_AtlRegisterPerUser
_BSS	ENDS
_BSS	SEGMENT
?TexFlags@TextureBankClass@@1PAUTexFlagsType@@A DD 01H DUP (?) ; TextureBankClass::TexFlags
?RatedLoad@TextureBankClass@@1_NA DB 01H DUP (?)	; TextureBankClass::RatedLoad
	ALIGN	4

?CacheLoad@TextureBankClass@@1PAFA DD 01H DUP (?)	; TextureBankClass::CacheLoad
?CacheRelease@TextureBankClass@@1PAFA DD 01H DUP (?)	; TextureBankClass::CacheRelease
?LoadIn@TextureBankClass@@1FA DW 01H DUP (?)		; TextureBankClass::LoadIn
	ALIGN	4

?LoadOut@TextureBankClass@@1FA DW 01H DUP (?)		; TextureBankClass::LoadOut
	ALIGN	4

?ReleaseIn@TextureBankClass@@1FA DW 01H DUP (?)		; TextureBankClass::ReleaseIn
	ALIGN	4

?ReleaseOut@TextureBankClass@@1FA DW 01H DUP (?)	; TextureBankClass::ReleaseOut
_BSS	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_BSS	SEGMENT
?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA DD 01H DUP (?) ; ATL::CComApartment::ATL_CREATE_OBJECT
_BSS	ENDS
;	COMDAT ?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A
_BSS	SEGMENT
?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A DD 01H DUP (?) ; ATL::_pAtlAutoThreadModule
_BSS	ENDS
;	COMDAT ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA
_BSS	SEGMENT
?m_bInitFailed@CAtlBaseModule@ATL@@2_NA DB 01H DUP (?)	; ATL::CAtlBaseModule::m_bInitFailed
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

?gDebugTextureID@@3KA DD 01H DUP (?)			; gDebugTextureID
?nVer@@3HA DD	01H DUP (?)				; nVer
_BSS	ENDS
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_BSS	SEGMENT
?_pAtlModule@ATL@@3PAVCAtlModule@1@A DD 01H DUP (?)	; ATL::_pAtlModule
_BSS	ENDS
;	COMDAT ?m_libid@CAtlModule@ATL@@2U_GUID@@A
_BSS	SEGMENT
?m_libid@CAtlModule@ATL@@2U_GUID@@A DB 010H DUP (?)	; ATL::CAtlModule::m_libid
_BSS	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_BSS	SEGMENT
?_pModule@ATL@@3PAVCComModule@1@A DD 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long *>::pmField
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAK@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAK@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned long *>::VT
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long>::pmField
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@K@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned long>::VT
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
_IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ DD 08H ; ATL::CVarTypeInfo<long *>::pmField
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAJ@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAJ@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<long *>::VT
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ DD 08H ; ATL::CVarTypeInfo<long>::pmField
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@J@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<long>::VT
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAI@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAI@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned int *>::VT
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int>::pmField
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@I@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@I@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned int>::VT
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ DD 08H ; ATL::CVarTypeInfo<int *>::pmField
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAH@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAH@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<int *>::VT
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ DD 08H ; ATL::CVarTypeInfo<int>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@H@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@H@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<int>::VT
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short *>::pmField
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAG@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAG@ATL@@2GB DW 04012H		; ATL::CVarTypeInfo<unsigned short *>::VT
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT __GUID_00020412_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020412_0000_0000_c000_000000000046 DD 020412H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Max@?$AtlLimits@_K@ATL@@2_KB DQ ffffffffffffffffH	; ATL::AtlLimits<unsigned __int64>::_Max
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT
_LIBID_ATLLib DD 044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Min@?$AtlLimits@_K@ATL@@2_KB DQ 0000000000000000H	; ATL::AtlLimits<unsigned __int64>::_Min
CONST	ENDS
;	COMDAT __GUID_00020401_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020401_0000_0000_c000_000000000046 DD 020401H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short>::pmField
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@G@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@G@ATL@@2GB DW 012H			; ATL::CVarTypeInfo<unsigned short>::VT
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Max@?$AtlLimits@_J@ATL@@2_JB DQ 7fffffffffffffffH	; ATL::AtlLimits<__int64>::_Max
CONST	ENDS
;	COMDAT __GUID_00000001_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000001_0000_0000_c000_000000000046 DD 01H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Min@?$AtlLimits@_J@ATL@@2_JB DQ 8000000000000000H	; ATL::AtlLimits<__int64>::_Min
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ DD 08H ; ATL::CVarTypeInfo<short *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAF@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAF@ATL@@2GB DW 04002H		; ATL::CVarTypeInfo<short *>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Max@?$AtlLimits@K@ATL@@2KB DD 0ffffffffH		; ATL::AtlLimits<unsigned long>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Min@?$AtlLimits@K@ATL@@2KB DD 00H			; ATL::AtlLimits<unsigned long>::_Min
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ DD 08H ; ATL::CVarTypeInfo<short>::pmField
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT
_IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@F@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@F@ATL@@2GB DW 02H			; ATL::CVarTypeInfo<short>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Max@?$AtlLimits@J@ATL@@2JB DD 07fffffffH		; ATL::AtlLimits<long>::_Max
CONST	ENDS
;	COMDAT __GUID_b196b284_bab4_101a_b69c_00aa00341d07
CONST	SEGMENT
__GUID_b196b284_bab4_101a_b69c_00aa00341d07 DD 0b196b284H
	DW	0bab4H
	DW	0101aH
	DB	0b6H
	DB	09cH
	DB	00H
	DB	0aaH
	DB	00H
	DB	034H
	DB	01dH
	DB	07H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Min@?$AtlLimits@J@ATL@@2JB DD 080000000H		; ATL::AtlLimits<long>::_Min
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT __GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
CONST	SEGMENT
__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713 DD 07fd52380H
	DW	04e07H
	DW	0101bH
	DB	0aeH
	DB	02dH
	DB	08H
	DB	00H
	DB	02bH
	DB	02eH
	DB	0c7H
	DB	013H
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char *>::pmField
CONST	ENDS
;	COMDAT __GUID_00000109_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000109_0000_0000_c000_000000000046 DD 0109H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAE@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAE@ATL@@2GB DW 04011H		; ATL::CVarTypeInfo<unsigned char *>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Max@?$AtlLimits@I@ATL@@2IB DD 0ffffffffH		; ATL::AtlLimits<unsigned int>::_Max
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Min@?$AtlLimits@I@ATL@@2IB DD 00H			; ATL::AtlLimits<unsigned int>::_Min
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ DD 08H ; ATL::CVarTypeInfo<char *>::pmField
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Max@?$AtlLimits@H@ATL@@2HB DD 07fffffffH		; ATL::AtlLimits<int>::_Max
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAD@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAD@ATL@@2GB DW 04010H		; ATL::CVarTypeInfo<char *>::VT
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Min@?$AtlLimits@H@ATL@@2HB DD 080000000H		; ATL::AtlLimits<int>::_Min
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT
_CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@E@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@E@ATL@@2GB DW 011H			; ATL::CVarTypeInfo<unsigned char>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ DD 08H ; ATL::CVarTypeInfo<char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@D@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@D@ATL@@2GB DW 010H			; ATL::CVarTypeInfo<char>::VT
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT __GUID_00000146_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000146_0000_0000_c000_000000000046 DD 0146H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT __GUID_1cf2b120_547d_101b_8e65_08002b2bd119
CONST	SEGMENT
__GUID_1cf2b120_547d_101b_8e65_08002b2bd119 DD 01cf2b120H
	DW	0547dH
	DW	0101bH
	DB	08eH
	DB	065H
	DB	08H
	DB	00H
	DB	02bH
	DB	02bH
	DB	0d1H
	DB	019H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT
_IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatchEx
CONST	SEGMENT
_IID_IAxWinAmbientDispatchEx DD 0b2d0778bH
	DW	0ac99H
	DW	04c58H
	DB	0a5H
	DB	0c8H
	DB	0e7H
	DB	072H
	DB	04eH
	DB	053H
	DB	016H
	DB	0b5H
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT __GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
CONST	SEGMENT
__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352 DD 0fc4801a3H
	DW	02ba9H
	DW	011cfH
	DB	0a2H
	DB	029H
	DB	00H
	DB	0aaH
	DB	00H
	DB	03dH
	DB	073H
	DB	052H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?MAX_TYPE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_TYPE@CRegParser@ATL@@1HB DD 01000H			; ATL::CRegParser::MAX_TYPE
CONST	ENDS
;	COMDAT ?cbNeverDelete@CRegParser@ATL@@1HB
CONST	SEGMENT
?cbNeverDelete@CRegParser@ATL@@1HB DD 0cH		; ATL::CRegParser::cbNeverDelete
CONST	ENDS
;	COMDAT ?rgszNeverDelete@CRegParser@ATL@@1QBQBDB
CONST	SEGMENT
?rgszNeverDelete@CRegParser@ATL@@1QBQBDB DD FLAT:??_C@_05PDIKPLII@AppID?$AA@ ; ATL::CRegParser::rgszNeverDelete
	DD	FLAT:??_C@_05GIBEAPNE@CLSID?$AA@
	DD	FLAT:??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
	DD	FLAT:??_C@_08PICKODJL@FileType?$AA@
	DD	FLAT:??_C@_09JKPGEJCH@Interface?$AA@
	DD	FLAT:??_C@_08PPIOJEA@Hardware?$AA@
	DD	FLAT:??_C@_04IHBFOLAC@Mime?$AA@
	DD	FLAT:??_C@_03DDIMFGBA@SAM?$AA@
	DD	FLAT:??_C@_08LOPHEHKG@SECURITY?$AA@
	DD	FLAT:??_C@_06FDHFNJBJ@SYSTEM?$AA@
	DD	FLAT:??_C@_08KEKAJNJI@Software?$AA@
	DD	FLAT:??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?MAX_VALUE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_VALUE@CRegParser@ATL@@1HB DD 01000H		; ATL::CRegParser::MAX_VALUE
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
CONST	SEGMENT
__GUID_00000000_0000_0000_0000_000000000000 DD 00H
	DW	00H
	DW	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT
_IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ??_C@_06JBKGCNBB@Delete?$AA@
CONST	SEGMENT
??_C@_06JBKGCNBB@Delete?$AA@ DB 'Delete', 00H		; `string'
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?szDelete@ATL@@3QBDB
CONST	SEGMENT
?szDelete@ATL@@3QBDB DD FLAT:??_C@_06JBKGCNBB@Delete?$AA@ ; ATL::szDelete
CONST	ENDS
;	COMDAT ??_C@_08KAAPDIAN@NoRemove?$AA@
CONST	SEGMENT
??_C@_08KAAPDIAN@NoRemove?$AA@ DB 'NoRemove', 00H	; `string'
CONST	ENDS
;	COMDAT ?szNoRemove@ATL@@3QBDB
CONST	SEGMENT
?szNoRemove@ATL@@3QBDB DD FLAT:??_C@_08KAAPDIAN@NoRemove?$AA@ ; ATL::szNoRemove
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ??_C@_0M@DBGDLGLL@ForceRemove?$AA@
CONST	SEGMENT
??_C@_0M@DBGDLGLL@ForceRemove?$AA@ DB 'ForceRemove', 00H ; `string'
CONST	ENDS
;	COMDAT ?szForceRemove@ATL@@3QBDB
CONST	SEGMENT
?szForceRemove@ATL@@3QBDB DD FLAT:??_C@_0M@DBGDLGLL@ForceRemove?$AA@ ; ATL::szForceRemove
CONST	ENDS
;	COMDAT ??_C@_03LAIAPFCB@Val?$AA@
CONST	SEGMENT
??_C@_03LAIAPFCB@Val?$AA@ DB 'Val', 00H			; `string'
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?szValToken@ATL@@3QBDB
CONST	SEGMENT
?szValToken@ATL@@3QBDB DD FLAT:??_C@_03LAIAPFCB@Val?$AA@ ; ATL::szValToken
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B?$AA@
CONST	SEGMENT
??_C@_01HMGJMAIH@B?$AA@ DB 'B', 00H			; `string'
CONST	ENDS
;	COMDAT ?szBinaryVal@ATL@@3QBDB
CONST	SEGMENT
?szBinaryVal@ATL@@3QBDB DD FLAT:??_C@_01HMGJMAIH@B?$AA@	; ATL::szBinaryVal
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D?$AA@
CONST	SEGMENT
??_C@_01CKDDGHAB@D?$AA@ DB 'D', 00H			; `string'
CONST	ENDS
;	COMDAT ?szDwordVal@ATL@@3QBDB
CONST	SEGMENT
?szDwordVal@ATL@@3QBDB DD FLAT:??_C@_01CKDDGHAB@D?$AA@	; ATL::szDwordVal
CONST	ENDS
;	COMDAT ??_C@_01PLPBNMEI@M?$AA@
CONST	SEGMENT
??_C@_01PLPBNMEI@M?$AA@ DB 'M', 00H			; `string'
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindowLic
CONST	SEGMENT
_IID_IAxWinHostWindowLic DD 03935bda8H
	DW	04ed9H
	DW	0495cH
	DB	086H
	DB	050H
	DB	0e0H
	DB	01fH
	DB	0c1H
	DB	0e3H
	DB	08aH
	DB	04bH
CONST	ENDS
;	COMDAT ?multiszStringVal@ATL@@3QBDB
CONST	SEGMENT
?multiszStringVal@ATL@@3QBDB DD FLAT:??_C@_01PLPBNMEI@M?$AA@ ; ATL::multiszStringVal
CONST	ENDS
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT
??_C@_01CPLAODJH@S?$AA@ DB 'S', 00H			; `string'
CONST	ENDS
;	COMDAT ?szStringVal@ATL@@3QBDB
CONST	SEGMENT
?szStringVal@ATL@@3QBDB DD FLAT:??_C@_01CPLAODJH@S?$AA@	; ATL::szStringVal
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?chEquals@ATL@@3DB
CONST	SEGMENT
?chEquals@ATL@@3DB DB 03dH				; ATL::chEquals
CONST	ENDS
;	COMDAT ?chQuote@ATL@@3DB
CONST	SEGMENT
?chQuote@ATL@@3DB DB 027H				; ATL::chQuote
CONST	ENDS
;	COMDAT ?chLeftBracket@ATL@@3DB
CONST	SEGMENT
?chLeftBracket@ATL@@3DB DB 07bH				; ATL::chLeftBracket
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?chRightBracket@ATL@@3DB
CONST	SEGMENT
?chRightBracket@ATL@@3DB DB 07dH			; ATL::chRightBracket
CONST	ENDS
;	COMDAT ?chDirSep@ATL@@3DB
CONST	SEGMENT
?chDirSep@ATL@@3DB DB 05cH				; ATL::chDirSep
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY *>::pmField
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB DW 04006H	; ATL::CVarTypeInfo<tagCY *>::VT
CONST	ENDS
;	COMDAT ??_C@_05PDIKPLII@AppID?$AA@
CONST	SEGMENT
??_C@_05PDIKPLII@AppID?$AA@ DB 'AppID', 00H		; `string'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB DW 06H		; ATL::CVarTypeInfo<tagCY>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB DW 04009H	; ATL::CVarTypeInfo<IDispatch * *>::VT
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT
_IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ??_C@_05GIBEAPNE@CLSID?$AA@
CONST	SEGMENT
??_C@_05GIBEAPNE@CLSID?$AA@ DB 'CLSID', 00H		; `string'
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch *>::pmField
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB DW 09H	; ATL::CVarTypeInfo<IDispatch *>::VT
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT __GUID_0000010c_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_0000010c_0000_0000_c000_000000000046 DD 010cH
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB DW 0400dH	; ATL::CVarTypeInfo<IUnknown * *>::VT
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown *>::pmField
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB DW 0dH	; ATL::CVarTypeInfo<IUnknown *>::VT
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t * *>::pmField
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB DW 04008H		; ATL::CVarTypeInfo<wchar_t * *>::VT
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_W@ATL@@2GB DW 08H			; ATL::CVarTypeInfo<wchar_t *>::VT
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT __GUID_0002e012_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_0002e012_0000_0000_c000_000000000046 DD 02e012H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB DW 0400cH	; ATL::CVarTypeInfo<tagVARIANT *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ DD 08H ; ATL::CVarTypeInfo<double *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAN@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAN@ATL@@2GB DW 04005H		; ATL::CVarTypeInfo<double *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ DD 08H ; ATL::CVarTypeInfo<double>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@N@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@N@ATL@@2GB DW 05H			; ATL::CVarTypeInfo<double>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ DD 08H ; ATL::CVarTypeInfo<float *>::pmField
CONST	ENDS
;	COMDAT __GUID_00020400_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020400_0000_0000_c000_000000000046 DD 020400H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAM@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAM@ATL@@2GB DW 04004H		; ATL::CVarTypeInfo<float *>::VT
CONST	ENDS
;	COMDAT __GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
CONST	SEGMENT
__GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851 DD 0a6bc3ac0H
	DW	0dbaaH
	DW	011ceH
	DB	09dH
	DB	0e3H
	DB	00H
	DB	0aaH
	DB	00H
	DB	04bH
	DB	0b8H
	DB	051H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ DD 08H ; ATL::CVarTypeInfo<float>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@M@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@M@ATL@@2GB DW 04H			; ATL::CVarTypeInfo<float>::VT
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000000_0000_0000_c000_000000000046 DD 00H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_K@ATL@@2GB DW 04015H		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
CONST	ENDS
;	COMDAT ??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	SEGMENT
??_C@_07KJLOKDKB@TypeLib?$AA@ DB 'TypeLib', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KEKAJNJI@Software?$AA@
CONST	SEGMENT
??_C@_08KEKAJNJI@Software?$AA@ DB 'Software', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDHFNJBJ@SYSTEM?$AA@
CONST	SEGMENT
??_C@_06FDHFNJBJ@SYSTEM?$AA@ DB 'SYSTEM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LOPHEHKG@SECURITY?$AA@
CONST	SEGMENT
??_C@_08LOPHEHKG@SECURITY?$AA@ DB 'SECURITY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03DDIMFGBA@SAM?$AA@
CONST	SEGMENT
??_C@_03DDIMFGBA@SAM?$AA@ DB 'SAM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IHBFOLAC@Mime?$AA@
CONST	SEGMENT
??_C@_04IHBFOLAC@Mime?$AA@ DB 'Mime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPIOJEA@Hardware?$AA@
CONST	SEGMENT
??_C@_08PPIOJEA@Hardware?$AA@ DB 'Hardware', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JKPGEJCH@Interface?$AA@
CONST	SEGMENT
??_C@_09JKPGEJCH@Interface?$AA@ DB 'Interface', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PICKODJL@FileType?$AA@
CONST	SEGMENT
??_C@_08PICKODJL@FileType?$AA@ DB 'FileType', 00H	; `string'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64>::pmField
CONST	ENDS
;	COMDAT ??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
CONST	SEGMENT
??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@ DB 'Component Categories', 00H ; `string'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_K@ATL@@2GB DW 015H			; ATL::CVarTypeInfo<unsigned __int64>::VT
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_J@ATL@@2GB DW 04014H		; ATL::CVarTypeInfo<__int64 *>::VT
CONST	ENDS
;	COMDAT ___pobjMapEntryLast
ATL$__z	SEGMENT
___pobjMapEntryLast DD 00H
ATL$__z	ENDS
;	COMDAT ___pobjMapEntryFirst
ATL$__a	SEGMENT
___pobjMapEntryFirst DD 00H
ATL$__a	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_J@ATL@@2GB DW 014H			; ATL::CVarTypeInfo<__int64>::VT
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??1CComBSTR@ATL@@QAE@XZ				; ATL::CComBSTR::~CComBSTR
PUBLIC	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
PUBLIC	??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?WakeUp@Loader@@QAEXXZ				; Loader::WakeUp
PUBLIC	?Paused@Loader@@QAEHXZ				; Loader::Paused
PUBLIC	?glAllocateMemory@@YAPAXHH@Z			; glAllocateMemory
PUBLIC	?IsReady@FileMemMap@@QAEHXZ			; FileMemMap::IsReady
PUBLIC	?SetPalette@Texture@@QAEXPAVPalette@@@Z		; Texture::SetPalette
PUBLIC	?GetPalette@Texture@@QAEPAVPalette@@XZ		; Texture::GetPalette
PUBLIC	?TexHandle@Texture@@QAEKXZ			; Texture::TexHandle
PUBLIC	??0TexBankEntry@@QAE@XZ				; TexBankEntry::TexBankEntry
PUBLIC	??1TexBankEntry@@QAE@XZ				; TexBankEntry::~TexBankEntry
PUBLIC	??_ETexBankEntry@@QAEPAXI@Z			; TexBankEntry::`vector deleting destructor'
PUBLIC	??0TempTexBankEntry@@QAE@XZ			; TempTexBankEntry::TempTexBankEntry
PUBLIC	??1TempTexBankEntry@@QAE@XZ			; TempTexBankEntry::~TempTexBankEntry
PUBLIC	??_ETempTexBankEntry@@QAEPAXI@Z			; TempTexBankEntry::`vector deleting destructor'
PUBLIC	?Setup@TextureBankClass@@SAXH@Z			; TextureBankClass::Setup
PUBLIC	?Cleanup@TextureBankClass@@SAXXZ		; TextureBankClass::Cleanup
PUBLIC	?ReadPool@TextureBankClass@@SAXHPAD@Z		; TextureBankClass::ReadPool
PUBLIC	?FlushHandles@TextureBankClass@@SAXXZ		; TextureBankClass::FlushHandles
PUBLIC	?Reference@TextureBankClass@@SAXH@Z		; TextureBankClass::Reference
PUBLIC	?Release@TextureBankClass@@SAXH@Z		; TextureBankClass::Release
PUBLIC	?Select@TextureBankClass@@SAXH@Z		; TextureBankClass::Select
PUBLIC	?RestoreAll@TextureBankClass@@SAXXZ		; TextureBankClass::RestoreAll
PUBLIC	?SetDeferredLoad@TextureBankClass@@SAXH@Z	; TextureBankClass::SetDeferredLoad
PUBLIC	?IsValidIndex@TextureBankClass@@SAHH@Z		; TextureBankClass::IsValidIndex
PUBLIC	?SyncDDSTextures@TextureBankClass@@SAX_N@Z	; TextureBankClass::SyncDDSTextures
PUBLIC	?RestoreTexturePool@TextureBankClass@@SAXXZ	; TextureBankClass::RestoreTexturePool
PUBLIC	?SelectHandle@TextureBankClass@@SAXK@Z		; TextureBankClass::SelectHandle
PUBLIC	?GetHandle@TextureBankClass@@SAKK@Z		; TextureBankClass::GetHandle
PUBLIC	?AllocCompressedBuffer@TextureBankClass@@KAXH@Z	; TextureBankClass::AllocCompressedBuffer
PUBLIC	?FreeCompressedBuffer@TextureBankClass@@KAXXZ	; TextureBankClass::FreeCompressedBuffer
PUBLIC	?OpenTextureFile@TextureBankClass@@KAXXZ	; TextureBankClass::OpenTextureFile
PUBLIC	?ReadImageData@TextureBankClass@@KAXH_N@Z	; TextureBankClass::ReadImageData
PUBLIC	?CloseTextureFile@TextureBankClass@@KAXXZ	; TextureBankClass::CloseTextureFile
PUBLIC	?LoaderCallBack@TextureBankClass@@KAXPAULoaderQ@@@Z ; TextureBankClass::LoaderCallBack
PUBLIC	?UnpackPalettizedTexture@TextureBankClass@@KAXK@Z ; TextureBankClass::UnpackPalettizedTexture
PUBLIC	?ReadImageDDS@TextureBankClass@@KAXK@Z		; TextureBankClass::ReadImageDDS
PUBLIC	?ReadImageDDSN@TextureBankClass@@KAXK@Z		; TextureBankClass::ReadImageDDSN
PUBLIC	?CreateCallBack@TextureBankClass@@KAXPAULoaderQ@@@Z ; TextureBankClass::CreateCallBack
PUBLIC	?UpdateBank@TextureBankClass@@SA_NXZ		; TextureBankClass::UpdateBank
PUBLIC	?WaitUpdates@TextureBankClass@@SAXXZ		; TextureBankClass::WaitUpdates
PUBLIC	?ReferenceTexSet@TextureBankClass@@SAXPAKK@Z	; TextureBankClass::ReferenceTexSet
PUBLIC	?ReleaseTexSet@TextureBankClass@@SAXPAKK@Z	; TextureBankClass::ReleaseTexSet
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	?TexFileMap@TextureBankClass@@1VFileMemMap@@A	; TextureBankClass::TexFileMap
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_0CA@MCLDJOEI@Reading?5object?5texture?5bank?3?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0M@CFLADCE@Feb?518?52013?$AA@		; `string'
PUBLIC	??_C@_0M@GHJDMFO@TexBank?4cpp?$AA@		; `string'
PUBLIC	??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_04HHAJJAF@?4TEX?$AA@			; `string'
PUBLIC	??_C@_0CH@JHKLPDNN@Failed?5to?5open?5object?5texture?5fi@ ; `string'
PUBLIC	??_C@_0CC@LLKHLGAO@?$CFs?3?5Bad?5object?5texture?5seek?5?$CI?$CF0d@ ; `string'
PUBLIC	??_C@_0EJ@HFPNGIJC@Failed?5to?5allocate?5memory?5for?5a?5@ ; `string'
PUBLIC	??_C@_09PBDPKFAL@?$CFs?2?$CFd?4dds?$AA@		; `string'
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_05BJOCMKHE@?$CFs?2?$CFd?$AA@		; `string'
PUBLIC	??_C@_02GMLFBBN@wb?$AA@				; `string'
PUBLIC	??_C@_0L@JAOPDGFP@?$CFs?2?$CFdN?4dds?$AA@	; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__errno:PROC
EXTRN	_exit:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strcpy:PROC
EXTRN	_strcat:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	_strerror:PROC
EXTRN	__imp__CreateDirectoryA@8:PROC
EXTRN	__imp__SetEvent@4:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	__imp__SysFreeString@4:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	_fread:PROC
EXTRN	_sprintf:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	_read:PROC
EXTRN	_LZSS_Expand:PROC
EXTRN	?EnqueueRequest@Loader@@QAEXPAULoaderQ@@@Z:PROC	; Loader::EnqueueRequest
EXTRN	?SetPause@Loader@@QAEXH@Z:PROC			; Loader::SetPause
EXTRN	?SelectTexture1@ContextMPR@@QAEXH@Z:PROC	; ContextMPR::SelectTexture1
EXTRN	??0FileMemMap@@QAE@XZ:PROC			; FileMemMap::FileMemMap
EXTRN	??1FileMemMap@@QAE@XZ:PROC			; FileMemMap::~FileMemMap
EXTRN	?Open@FileMemMap@@QAEHPBDHH@Z:PROC		; FileMemMap::Open
EXTRN	?Close@FileMemMap@@QAEXXZ:PROC			; FileMemMap::Close
EXTRN	?GetData@FileMemMap@@QAEPAEHH@Z:PROC		; FileMemMap::GetData
EXTRN	?ReadDataAt@FileMemMap@@QAEHKPAXK@Z:PROC	; FileMemMap::ReadDataAt
EXTRN	?Reference@Palette@@QAEXXZ:PROC			; Palette::Reference
EXTRN	??0Texture@@QAE@XZ:PROC				; Texture::Texture
EXTRN	??1Texture@@QAE@XZ:PROC				; Texture::~Texture
EXTRN	?CreateTexture@Texture@@QAE_NPAD@Z:PROC		; Texture::CreateTexture
EXTRN	?FreeAll@Texture@@QAEXXZ:PROC			; Texture::FreeAll
EXTRN	?DumpImageToFile@Texture@@QAE_NPADH@Z:PROC	; Texture::DumpImageToFile
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?TheLoader@@3VLoader@@A:BYTE			; TheLoader
EXTRN	?context@StateStackClass@@2PAVContextMPR@@A:DWORD ; StateStackClass::context
EXTRN	?PalettePool@PaletteBankClass@@2PAVPalette@@A:DWORD ; PaletteBankClass::PalettePool
EXTRN	?DisplayOptions@@3VDisplayOptionsClass@@A:BYTE	; DisplayOptions
EXTRN	?g_bUseMappedFiles@@3_NA:BYTE			; g_bUseMappedFiles
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

?TexFileMap@TextureBankClass@@1VFileMemMap@@A DB 010H DUP (?) ; TextureBankClass::TexFileMap
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JAOPDGFP@?$CFs?2?$CFdN?4dds?$AA@
CONST	SEGMENT
??_C@_0L@JAOPDGFP@?$CFs?2?$CFdN?4dds?$AA@ DB '%s\%dN.dds', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT
??_C@_02GMLFBBN@wb?$AA@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05BJOCMKHE@?$CFs?2?$CFd?$AA@
CONST	SEGMENT
??_C@_05BJOCMKHE@?$CFs?2?$CFd?$AA@ DB '%s\%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09PBDPKFAL@?$CFs?2?$CFd?4dds?$AA@
CONST	SEGMENT
??_C@_09PBDPKFAL@?$CFs?2?$CFd?4dds?$AA@ DB '%s\%d.dds', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@HFPNGIJC@Failed?5to?5allocate?5memory?5for?5a?5@
CONST	SEGMENT
??_C@_0EJ@HFPNGIJC@Failed?5to?5allocate?5memory?5for?5a?5@ DB 'Failed to '
	DB	'allocate memory for a object texture load state change reques'
	DB	't', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@LLKHLGAO@?$CFs?3?5Bad?5object?5texture?5seek?5?$CI?$CF0d@
CONST	SEGMENT
??_C@_0CC@LLKHLGAO@?$CFs?3?5Bad?5object?5texture?5seek?5?$CI?$CF0d@ DB '%'
	DB	's: Bad object texture seek (%0d)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@JHKLPDNN@Failed?5to?5open?5object?5texture?5fi@
CONST	SEGMENT
??_C@_0CH@JHKLPDNN@Failed?5to?5open?5object?5texture?5fi@ DB 'Failed to o'
	DB	'pen object texture file %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04HHAJJAF@?4TEX?$AA@
CONST	SEGMENT
??_C@_04HHAJJAF@?4TEX?$AA@ DB '.TEX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@ DB 'Error:  %'
	DB	'0d  %s  %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GHJDMFO@TexBank?4cpp?$AA@
CONST	SEGMENT
??_C@_0M@GHJDMFO@TexBank?4cpp?$AA@ DB 'TexBank.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
CONST	SEGMENT
??_C@_0M@CFLADCE@Feb?518?52013?$AA@ DB 'Feb 18 2013', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MCLDJOEI@Reading?5object?5texture?5bank?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0CA@MCLDJOEI@Reading?5object?5texture?5bank?3?5?$CFs?$AA@ DB 'Readi'
	DB	'ng object texture bank: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?Setup@TextureBankClass@@SAXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Setup@TextureBankClass@@SAXH@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Setup@TextureBankClass@@SAXH@Z$1
__ehfuncinfo$?Setup@TextureBankClass@@SAXH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Setup@TextureBankClass@@SAXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1TexBankEntry@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1TexBankEntry@@QAE@XZ$0
__ehfuncinfo$??1TexBankEntry@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1TexBankEntry@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0TexBankEntry@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0TexBankEntry@@QAE@XZ$0
__ehfuncinfo$??0TexBankEntry@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0TexBankEntry@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?TexFileMap$initializer$@TextureBankClass@@1P6AXXZA DD FLAT:??__E?TexFileMap@TextureBankClass@@1VFileMemMap@@A@@YAXXZ ; TextureBankClass::TexFileMap$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?TexFileMap@TextureBankClass@@1VFileMemMap@@A@@YAXXZ
text$yd	SEGMENT
??__F?TexFileMap@TextureBankClass@@1VFileMemMap@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'TextureBankClass::TexFileMap'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?TexFileMap@TextureBankClass@@1VFileMemMap@@A ; TextureBankClass::TexFileMap
	call	??1FileMemMap@@QAE@XZ			; FileMemMap::~FileMemMap
	pop	ebp
	ret	0
??__F?TexFileMap@TextureBankClass@@1VFileMemMap@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'TextureBankClass::TexFileMap''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\texbank.cpp
;	COMDAT ??__E?TexFileMap@TextureBankClass@@1VFileMemMap@@A@@YAXXZ
text$yc	SEGMENT
??__E?TexFileMap@TextureBankClass@@1VFileMemMap@@A@@YAXXZ PROC ; `dynamic initializer for 'TextureBankClass::TexFileMap'', COMDAT

; 30   : FileMemMap TextureBankClass::TexFileMap;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?TexFileMap@TextureBankClass@@1VFileMemMap@@A ; TextureBankClass::TexFileMap
	call	??0FileMemMap@@QAE@XZ			; FileMemMap::FileMemMap
	push	OFFSET ??__F?TexFileMap@TextureBankClass@@1VFileMemMap@@A@@YAXXZ ; `dynamic atexit destructor for 'TextureBankClass::TexFileMap''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?TexFileMap@TextureBankClass@@1VFileMemMap@@A@@YAXXZ ENDP ; `dynamic initializer for 'TextureBankClass::TexFileMap''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\texbank.cpp
_TEXT	SEGMENT
tv66 = -4						; size = 4
_TexList$ = 8						; size = 4
_Nr$ = 12						; size = 4
?ReleaseTexSet@TextureBankClass@@SAXPAKK@Z PROC		; TextureBankClass::ReleaseTexSet

; 910  : {

	push	ebp
	mov	ebp, esp
	push	ecx
$LN2@ReleaseTex:

; 911  :     while (Nr--) 

	mov	eax, DWORD PTR _Nr$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR _Nr$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _Nr$[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 0
	je	SHORT $LN3@ReleaseTex

; 912  :     {
; 913  :         Release(*TexList);

	mov	edx, DWORD PTR _TexList$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?Release@TextureBankClass@@SAXH@Z	; TextureBankClass::Release
	add	esp, 4

; 914  :         TexList++;

	mov	ecx, DWORD PTR _TexList$[ebp]
	add	ecx, 4
	mov	DWORD PTR _TexList$[ebp], ecx

; 915  :     }

	jmp	SHORT $LN2@ReleaseTex
$LN3@ReleaseTex:

; 916  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ReleaseTexSet@TextureBankClass@@SAXPAKK@Z ENDP		; TextureBankClass::ReleaseTexSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\texbank.cpp
_TEXT	SEGMENT
tv66 = -4						; size = 4
_TexList$ = 8						; size = 4
_Nr$ = 12						; size = 4
?ReferenceTexSet@TextureBankClass@@SAXPAKK@Z PROC	; TextureBankClass::ReferenceTexSet

; 901  : {

	push	ebp
	mov	ebp, esp
	push	ecx
$LN2@ReferenceT:

; 902  :     while (Nr--) 

	mov	eax, DWORD PTR _Nr$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR _Nr$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _Nr$[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 0
	je	SHORT $LN3@ReferenceT

; 903  :     {
; 904  :         Reference(*TexList);

	mov	edx, DWORD PTR _TexList$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?Reference@TextureBankClass@@SAXH@Z	; TextureBankClass::Reference
	add	esp, 4

; 905  :         TexList++;

	mov	ecx, DWORD PTR _TexList$[ebp]
	add	ecx, 4
	mov	DWORD PTR _TexList$[ebp], ecx

; 906  :     }

	jmp	SHORT $LN2@ReferenceT
$LN3@ReferenceT:

; 907  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ReferenceTexSet@TextureBankClass@@SAXPAKK@Z ENDP	; TextureBankClass::ReferenceTexSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\texbank.cpp
_TEXT	SEGMENT
?WaitUpdates@TextureBankClass@@SAXXZ PROC		; TextureBankClass::WaitUpdates

; 870  : {

	push	ebp
	mov	ebp, esp

; 871  :     // if no data to wait, exit here
; 872  :     if (LoadIn == LoadOut && ReleaseIn == ReleaseOut)

	movsx	eax, WORD PTR ?LoadIn@TextureBankClass@@1FA ; TextureBankClass::LoadIn
	movsx	ecx, WORD PTR ?LoadOut@TextureBankClass@@1FA ; TextureBankClass::LoadOut
	cmp	eax, ecx
	jne	SHORT $LN5@WaitUpdate
	movsx	edx, WORD PTR ?ReleaseIn@TextureBankClass@@1FA ; TextureBankClass::ReleaseIn
	movsx	eax, WORD PTR ?ReleaseOut@TextureBankClass@@1FA ; TextureBankClass::ReleaseOut
	cmp	edx, eax
	jne	SHORT $LN5@WaitUpdate

; 873  : 		return;

	jmp	SHORT $LN6@WaitUpdate
$LN5@WaitUpdate:

; 874  : 
; 875  :     // Pause the Loader...
; 876  :     TheLoader.SetPause(true);

	push	1
	mov	ecx, OFFSET ?TheLoader@@3VLoader@@A	; TheLoader
	call	?SetPause@Loader@@QAEXH@Z		; Loader::SetPause
$LN4@WaitUpdate:

; 877  : 
; 878  :     while (!TheLoader.Paused())

	mov	ecx, OFFSET ?TheLoader@@3VLoader@@A	; TheLoader
	call	?Paused@Loader@@QAEHXZ			; Loader::Paused
	test	eax, eax
	jne	SHORT $LN3@WaitUpdate

; 879  : 		;

	jmp	SHORT $LN4@WaitUpdate
$LN3@WaitUpdate:

; 880  : 
; 881  :     // Not slow loading
; 882  :     RatedLoad = false;

	mov	BYTE PTR ?RatedLoad@TextureBankClass@@1_NA, 0 ; TextureBankClass::RatedLoad
$LN2@WaitUpdate:

; 883  : 
; 884  :     // Parse all objects till any opration to do
; 885  :     while (UpdateBank())

	call	?UpdateBank@TextureBankClass@@SA_NXZ	; TextureBankClass::UpdateBank
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@WaitUpdate

; 886  : 		;

	jmp	SHORT $LN2@WaitUpdate
$LN1@WaitUpdate:

; 887  : 
; 888  :     // Restore rated loading
; 889  :     RatedLoad = true;

	mov	BYTE PTR ?RatedLoad@TextureBankClass@@1_NA, 1 ; TextureBankClass::RatedLoad

; 890  :     // Run the Loader again
; 891  :     TheLoader.SetPause(false);

	push	0
	mov	ecx, OFFSET ?TheLoader@@3VLoader@@A	; TheLoader
	call	?SetPause@Loader@@QAEXH@Z		; Loader::SetPause
$LN6@WaitUpdate:

; 892  : }

	pop	ebp
	ret	0
?WaitUpdates@TextureBankClass@@SAXXZ ENDP		; TextureBankClass::WaitUpdates
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\texbank.cpp
_TEXT	SEGMENT
_id$ = -4						; size = 4
?UpdateBank@TextureBankClass@@SA_NXZ PROC		; TextureBankClass::UpdateBank

; 807  : {

	push	ebp
	mov	ebp, esp
	push	ecx
$LN12@UpdateBank:

; 808  :     DWORD id;
; 809  : 
; 810  :     // till when data to update into caches
; 811  :     while (LoadIn != LoadOut || ReleaseIn != ReleaseOut)

	movsx	eax, WORD PTR ?LoadIn@TextureBankClass@@1FA ; TextureBankClass::LoadIn
	movsx	ecx, WORD PTR ?LoadOut@TextureBankClass@@1FA ; TextureBankClass::LoadOut
	cmp	eax, ecx
	jne	SHORT $LN10@UpdateBank
	movsx	edx, WORD PTR ?ReleaseIn@TextureBankClass@@1FA ; TextureBankClass::ReleaseIn
	movsx	eax, WORD PTR ?ReleaseOut@TextureBankClass@@1FA ; TextureBankClass::ReleaseOut
	cmp	edx, eax
	je	$LN11@UpdateBank
$LN10@UpdateBank:

; 812  :     {
; 813  : 
; 814  :         // check for textures to be released
; 815  :         if (ReleaseIn != ReleaseOut)

	movsx	ecx, WORD PTR ?ReleaseIn@TextureBankClass@@1FA ; TextureBankClass::ReleaseIn
	movsx	edx, WORD PTR ?ReleaseOut@TextureBankClass@@1FA ; TextureBankClass::ReleaseOut
	cmp	ecx, edx
	je	$LN9@UpdateBank

; 816  :         {
; 817  :             // get the 1st texture Id from cache
; 818  :             id = CacheRelease[ReleaseOut++];

	movsx	eax, WORD PTR ?ReleaseOut@TextureBankClass@@1FA ; TextureBankClass::ReleaseOut
	mov	ecx, DWORD PTR ?CacheRelease@TextureBankClass@@1PAFA ; TextureBankClass::CacheRelease
	movsx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _id$[ebp], edx
	mov	ax, WORD PTR ?ReleaseOut@TextureBankClass@@1FA ; TextureBankClass::ReleaseOut
	add	ax, 1
	mov	WORD PTR ?ReleaseOut@TextureBankClass@@1FA, ax ; TextureBankClass::ReleaseOut

; 819  : 
; 820  :             // if not an order again, and no Referenced, release it
; 821  :             if (!TexFlags[id].OnOrder && !TexturePool[id].refCount && TexFlags[id].OnRelease) 

	mov	ecx, DWORD PTR _id$[ebp]
	mov	edx, DWORD PTR ?TexFlags@TextureBankClass@@1PAUTexFlagsType@@A ; TextureBankClass::TexFlags
	movsx	eax, BYTE PTR [edx+ecx*2]
	test	eax, eax
	jne	SHORT $LN8@UpdateBank
	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	cmp	DWORD PTR [edx+ecx+60], 0
	jne	SHORT $LN8@UpdateBank
	mov	eax, DWORD PTR _id$[ebp]
	mov	ecx, DWORD PTR ?TexFlags@TextureBankClass@@1PAUTexFlagsType@@A ; TextureBankClass::TexFlags
	movsx	edx, BYTE PTR [ecx+eax*2+1]
	test	edx, edx
	je	SHORT $LN8@UpdateBank

; 822  : 				TexturePool[id].tex.FreeAll();

	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	lea	ecx, DWORD PTR [ecx+eax+8]
	call	?FreeAll@Texture@@QAEXXZ		; Texture::FreeAll
$LN8@UpdateBank:

; 823  : 
; 824  :             // clear flag, in any case
; 825  :             TexFlags[id].OnRelease = false;

	mov	edx, DWORD PTR _id$[ebp]
	mov	eax, DWORD PTR ?TexFlags@TextureBankClass@@1PAUTexFlagsType@@A ; TextureBankClass::TexFlags
	mov	BYTE PTR [eax+edx*2+1], 0

; 826  : 
; 827  :             // ring the pointer
; 828  :             if (ReleaseOut >= (nTextures + CACHE_MARGIN)) 

	movsx	ecx, WORD PTR ?ReleaseOut@TextureBankClass@@1FA ; TextureBankClass::ReleaseOut
	mov	edx, DWORD PTR ?nTextures@TextureBankClass@@2HA ; TextureBankClass::nTextures
	add	edx, 32					; 00000020H
	cmp	ecx, edx
	jl	SHORT $LN7@UpdateBank

; 829  : 				ReleaseOut = 0;

	xor	eax, eax
	mov	WORD PTR ?ReleaseOut@TextureBankClass@@1FA, ax ; TextureBankClass::ReleaseOut
$LN7@UpdateBank:

; 830  : 
; 831  :             // if any action, terminate here
; 832  :             if (RatedLoad) 

	movzx	ecx, BYTE PTR ?RatedLoad@TextureBankClass@@1_NA ; TextureBankClass::RatedLoad
	test	ecx, ecx
	je	SHORT $LN9@UpdateBank

; 833  : 				return true;

	mov	al, 1
	jmp	$LN13@UpdateBank
$LN9@UpdateBank:

; 834  :         }
; 835  : 
; 836  :         // check for textures to be released
; 837  :         if (LoadIn != LoadOut)

	movsx	edx, WORD PTR ?LoadIn@TextureBankClass@@1FA ; TextureBankClass::LoadIn
	movsx	eax, WORD PTR ?LoadOut@TextureBankClass@@1FA ; TextureBankClass::LoadOut
	cmp	edx, eax
	je	$LN5@UpdateBank

; 838  :         {
; 839  :             // get the 1st texture Id from cache
; 840  :             id = CacheLoad[LoadOut++];

	movsx	ecx, WORD PTR ?LoadOut@TextureBankClass@@1FA ; TextureBankClass::LoadOut
	mov	edx, DWORD PTR ?CacheLoad@TextureBankClass@@1PAFA ; TextureBankClass::CacheLoad
	movsx	eax, WORD PTR [edx+ecx*2]
	mov	DWORD PTR _id$[ebp], eax
	mov	cx, WORD PTR ?LoadOut@TextureBankClass@@1FA ; TextureBankClass::LoadOut
	add	cx, 1
	mov	WORD PTR ?LoadOut@TextureBankClass@@1FA, cx ; TextureBankClass::LoadOut

; 841  : 
; 842  :             // if Texture not yet loaded, load it
; 843  :             if (!TexturePool[id].tex.imageData) 

	mov	edx, DWORD PTR _id$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	cmp	DWORD PTR [eax+edx+12], 0
	jne	SHORT $LN4@UpdateBank

; 844  : 				ReadImageData(id);

	push	0
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	call	?ReadImageData@TextureBankClass@@KAXH_N@Z ; TextureBankClass::ReadImageData
	add	esp, 8
$LN4@UpdateBank:

; 845  : 
; 846  :             // if Texture not yet crated, crate it
; 847  :             if (!TexturePool[id].tex.TexHandle()) 

	mov	edx, DWORD PTR _id$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	lea	ecx, DWORD PTR [eax+edx+8]
	call	?TexHandle@Texture@@QAEKXZ		; Texture::TexHandle
	test	eax, eax
	jne	SHORT $LN3@UpdateBank

; 848  : 				TexturePool[id].tex.CreateTexture();

	push	0
	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	lea	ecx, DWORD PTR [edx+ecx+8]
	call	?CreateTexture@Texture@@QAE_NPAD@Z	; Texture::CreateTexture
$LN3@UpdateBank:

; 849  : 
; 850  :             // clear flag, in any case
; 851  :             TexFlags[id].OnOrder = false;

	mov	eax, DWORD PTR _id$[ebp]
	mov	ecx, DWORD PTR ?TexFlags@TextureBankClass@@1PAUTexFlagsType@@A ; TextureBankClass::TexFlags
	mov	BYTE PTR [ecx+eax*2], 0

; 852  : 
; 853  :             // ring the pointer
; 854  :             if (LoadOut >= (nTextures + CACHE_MARGIN))

	movsx	edx, WORD PTR ?LoadOut@TextureBankClass@@1FA ; TextureBankClass::LoadOut
	mov	eax, DWORD PTR ?nTextures@TextureBankClass@@2HA ; TextureBankClass::nTextures
	add	eax, 32					; 00000020H
	cmp	edx, eax
	jl	SHORT $LN2@UpdateBank

; 855  : 				LoadOut = 0;

	xor	ecx, ecx
	mov	WORD PTR ?LoadOut@TextureBankClass@@1FA, cx ; TextureBankClass::LoadOut
$LN2@UpdateBank:

; 856  : 
; 857  :             // if any action, terminate here
; 858  :             if (RatedLoad) 

	movzx	edx, BYTE PTR ?RatedLoad@TextureBankClass@@1_NA ; TextureBankClass::RatedLoad
	test	edx, edx
	je	SHORT $LN5@UpdateBank

; 859  : 				return true;

	mov	al, 1
	jmp	SHORT $LN13@UpdateBank
$LN5@UpdateBank:

; 860  :         }
; 861  : 
; 862  :     }

	jmp	$LN12@UpdateBank
$LN11@UpdateBank:

; 863  : 
; 864  :     // if here, nothing done, back is up to date
; 865  :     return false;

	xor	al, al
$LN13@UpdateBank:

; 866  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateBank@TextureBankClass@@SA_NXZ ENDP		; TextureBankClass::UpdateBank
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\texbank.cpp
_TEXT	SEGMENT
_request$ = 8						; size = 4
?CreateCallBack@TextureBankClass@@KAXPAULoaderQ@@@Z PROC ; TextureBankClass::CreateCallBack

; 896  : {

	push	ebp
	mov	ebp, esp

; 897  : }

	pop	ebp
	ret	0
?CreateCallBack@TextureBankClass@@KAXPAULoaderQ@@@Z ENDP ; TextureBankClass::CreateCallBack
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\texbank.cpp
_TEXT	SEGMENT
_dwMagic$ = -404					; size = 4
tv148 = -400						; size = 4
_dwSize$ = -396						; size = 4
_fp$ = -392						; size = 4
tv179 = -388						; size = 4
_ddsd$ = -384						; size = 124
_szFile$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_id$ = 8						; size = 4
?ReadImageDDSN@TextureBankClass@@KAXK@Z PROC		; TextureBankClass::ReadImageDDSN

; 664  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 404				; 00000194H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 665  :     DDSURFACEDESC2 ddsd;
; 666  :     DWORD dwSize, dwMagic;
; 667  :     char szFile[256];
; 668  :     FILE *fp;
; 669  : 
; 670  :     sprintf(szFile, "%s\\%dN.dds", baseName, id);

	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	push	OFFSET ?baseName@TextureBankClass@@1PADA ; TextureBankClass::baseName
	push	OFFSET ??_C@_0L@JAOPDGFP@?$CFs?2?$CFdN?4dds?$AA@
	lea	ecx, DWORD PTR _szFile$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 671  :     fp = fopen(szFile, "rb");

	push	OFFSET ??_C@_02JDPG@rb?$AA@
	lea	edx, DWORD PTR _szFile$[ebp]
	push	edx
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 672  : 
; 673  :     if (!fp)

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN22@ReadImageD

; 674  :     {
; 675  :         return;

	jmp	$LN23@ReadImageD
$LN22@ReadImageD:

; 676  :     }
; 677  : 
; 678  :     TexturePool[id].texN.flags |= MPR_TI_DDS;

	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	edx, DWORD PTR [ecx+eax+40]
	or	edx, 256				; 00000100H
	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [ecx+eax+40], edx

; 679  :     TexturePool[id].texN.flags &= ~MPR_TI_PALETTE;

	mov	edx, DWORD PTR _id$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	ecx, DWORD PTR [eax+edx+40]
	and	ecx, -129				; ffffff7fH
	mov	edx, DWORD PTR _id$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [eax+edx+40], ecx

; 680  :     TexturePool[id].texN.flags &= ~MPR_TI_INVALID;

	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	eax, DWORD PTR [edx+ecx+40]
	and	eax, -1048577				; ffefffffH
	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [edx+ecx+40], eax

; 681  : 
; 682  :     fread(&dwMagic, 1, sizeof(DWORD), fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	4
	push	1
	lea	ecx, DWORD PTR _dwMagic$[ebp]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 683  :     ShiAssert(dwMagic == MAKEFOURCC('D', 'D', 'S', ' '));
; 684  : 
; 685  :     // Read first compressed mipmap
; 686  :     fread(&ddsd, 1, sizeof(DDSURFACEDESC2), fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	push	124					; 0000007cH
	push	1
	lea	eax, DWORD PTR _ddsd$[ebp]
	push	eax
	call	_fread
	add	esp, 16					; 00000010H

; 687  : 
; 688  :     // MLR 1/25/2004 - Little kludge so F4 can read DDS files made by dxtex
; 689  :     if (ddsd.dwLinearSize == 0)

	cmp	DWORD PTR _ddsd$[ebp+16], 0
	jne	SHORT $LN21@ReadImageD

; 690  :     {
; 691  :         if (ddsd.ddpfPixelFormat.dwFourCC == MAKEFOURCC('D', 'X', 'T', '3') ||
; 692  :             ddsd.ddpfPixelFormat.dwFourCC == MAKEFOURCC('D', 'X', 'T', '5'))

	cmp	DWORD PTR _ddsd$[ebp+80], 861165636	; 33545844H
	je	SHORT $LN19@ReadImageD
	cmp	DWORD PTR _ddsd$[ebp+80], 894720068	; 35545844H
	jne	SHORT $LN20@ReadImageD
$LN19@ReadImageD:

; 693  :         {
; 694  :             ddsd.dwLinearSize = ddsd.dwWidth * ddsd.dwWidth;

	mov	ecx, DWORD PTR _ddsd$[ebp+12]
	imul	ecx, DWORD PTR _ddsd$[ebp+12]
	mov	DWORD PTR _ddsd$[ebp+16], ecx

; 695  :             ddsd.dwFlags |= DDSD_LINEARSIZE;

	mov	edx, DWORD PTR _ddsd$[ebp+4]
	or	edx, 524288				; 00080000H
	mov	DWORD PTR _ddsd$[ebp+4], edx
$LN20@ReadImageD:

; 696  :         }
; 697  : 
; 698  :         if (ddsd.ddpfPixelFormat.dwFourCC == MAKEFOURCC('D', 'X', 'T', '1'))

	cmp	DWORD PTR _ddsd$[ebp+80], 827611204	; 31545844H
	jne	SHORT $LN21@ReadImageD

; 699  :         {
; 700  :             ddsd.dwLinearSize = ddsd.dwWidth * ddsd.dwWidth / 2;

	mov	eax, DWORD PTR _ddsd$[ebp+12]
	imul	eax, DWORD PTR _ddsd$[ebp+12]
	shr	eax, 1
	mov	DWORD PTR _ddsd$[ebp+16], eax

; 701  :             ddsd.dwFlags |= DDSD_LINEARSIZE;

	mov	ecx, DWORD PTR _ddsd$[ebp+4]
	or	ecx, 524288				; 00080000H
	mov	DWORD PTR _ddsd$[ebp+4], ecx
$LN21@ReadImageD:

; 702  :         }
; 703  :     }
; 704  : 
; 705  :     ShiAssert(ddsd.dwFlags & DDSD_LINEARSIZE)
; 706  : 
; 707  :     switch (ddsd.ddpfPixelFormat.dwFourCC)

	mov	edx, DWORD PTR _ddsd$[ebp+80]
	mov	DWORD PTR tv148[ebp], edx
	cmp	DWORD PTR tv148[ebp], 827611204		; 31545844H
	je	SHORT $LN15@ReadImageD
	cmp	DWORD PTR tv148[ebp], 861165636		; 33545844H
	je	SHORT $LN14@ReadImageD
	cmp	DWORD PTR tv148[ebp], 894720068		; 35545844H
	je	SHORT $LN13@ReadImageD
	jmp	SHORT $LN16@ReadImageD
$LN15@ReadImageD:

; 708  :     {
; 709  :         case MAKEFOURCC('D', 'X', 'T', '1'):
; 710  :             TexturePool[id].texN.flags |= MPR_TI_DXT1;

	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	edx, DWORD PTR [ecx+eax+40]
	or	edx, 512				; 00000200H
	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [ecx+eax+40], edx

; 711  :             break;

	jmp	SHORT $LN16@ReadImageD
$LN14@ReadImageD:

; 712  : 
; 713  :         case MAKEFOURCC('D', 'X', 'T', '3'):
; 714  :             TexturePool[id].tex.flags |= MPR_TI_DXT3;

	mov	edx, DWORD PTR _id$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	ecx, DWORD PTR [eax+edx+16]
	or	ecx, 1024				; 00000400H
	mov	edx, DWORD PTR _id$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [eax+edx+16], ecx

; 715  :             break;

	jmp	SHORT $LN16@ReadImageD
$LN13@ReadImageD:

; 716  : 
; 717  :         case MAKEFOURCC('D', 'X', 'T', '5'):
; 718  :             TexturePool[id].texN.flags |= MPR_TI_DXT5;

	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	eax, DWORD PTR [edx+ecx+40]
	or	eax, 2048				; 00000800H
	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [edx+ecx+40], eax
$LN16@ReadImageD:

; 719  :             break;
; 720  : 
; 721  :         default:
; 722  :             ShiAssert(false);
; 723  :     }
; 724  : 
; 725  :     switch (ddsd.dwWidth)

	mov	eax, DWORD PTR _ddsd$[ebp+12]
	mov	DWORD PTR tv179[ebp], eax
	cmp	DWORD PTR tv179[ebp], 256		; 00000100H
	ja	SHORT $LN25@ReadImageD
	cmp	DWORD PTR tv179[ebp], 256		; 00000100H
	je	$LN5@ReadImageD
	mov	ecx, DWORD PTR tv179[ebp]
	sub	ecx, 16					; 00000010H
	mov	DWORD PTR tv179[ebp], ecx
	cmp	DWORD PTR tv179[ebp], 112		; 00000070H
	ja	$LN10@ReadImageD
	mov	edx, DWORD PTR tv179[ebp]
	movzx	eax, BYTE PTR $LN26@ReadImageD[edx]
	jmp	DWORD PTR $LN27@ReadImageD[eax*4]
$LN25@ReadImageD:
	cmp	DWORD PTR tv179[ebp], 512		; 00000200H
	je	$LN4@ReadImageD
	cmp	DWORD PTR tv179[ebp], 1024		; 00000400H
	je	$LN3@ReadImageD
	cmp	DWORD PTR tv179[ebp], 2048		; 00000800H
	je	$LN2@ReadImageD
	jmp	$LN10@ReadImageD
$LN9@ReadImageD:

; 726  :     {
; 727  :         case 16:
; 728  :             TexturePool[id].texN.flags |= MPR_TI_16;

	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	eax, DWORD PTR [edx+ecx+40]
	or	eax, 4096				; 00001000H
	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [edx+ecx+40], eax

; 729  :             break;

	jmp	$LN10@ReadImageD
$LN8@ReadImageD:

; 730  : 
; 731  :         case 32:
; 732  :             TexturePool[id].texN.flags |= MPR_TI_32;

	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	edx, DWORD PTR [ecx+eax+40]
	or	edx, 8192				; 00002000H
	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [ecx+eax+40], edx

; 733  :             break;

	jmp	$LN10@ReadImageD
$LN7@ReadImageD:

; 734  : 
; 735  :         case 64:
; 736  :             TexturePool[id].texN.flags |= MPR_TI_64;

	mov	edx, DWORD PTR _id$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	ecx, DWORD PTR [eax+edx+40]
	or	ecx, 16384				; 00004000H
	mov	edx, DWORD PTR _id$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [eax+edx+40], ecx

; 737  :             break;

	jmp	$LN10@ReadImageD
$LN6@ReadImageD:

; 738  : 
; 739  :         case 128:
; 740  :             TexturePool[id].texN.flags |= MPR_TI_128;

	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	eax, DWORD PTR [edx+ecx+40]
	or	eax, 32768				; 00008000H
	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [edx+ecx+40], eax

; 741  :             break;

	jmp	$LN10@ReadImageD
$LN5@ReadImageD:

; 742  : 
; 743  :         case 256:
; 744  :             TexturePool[id].texN.flags |= MPR_TI_256;

	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	edx, DWORD PTR [ecx+eax+40]
	or	edx, 65536				; 00010000H
	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [ecx+eax+40], edx

; 745  :             break;

	jmp	SHORT $LN10@ReadImageD
$LN4@ReadImageD:

; 746  : 
; 747  :         case 512:
; 748  :             TexturePool[id].texN.flags |= MPR_TI_512;

	mov	edx, DWORD PTR _id$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	ecx, DWORD PTR [eax+edx+40]
	or	ecx, 131072				; 00020000H
	mov	edx, DWORD PTR _id$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [eax+edx+40], ecx

; 749  :             break;

	jmp	SHORT $LN10@ReadImageD
$LN3@ReadImageD:

; 750  : 
; 751  :         case 1024:
; 752  :             TexturePool[id].texN.flags |= MPR_TI_1024;

	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	eax, DWORD PTR [edx+ecx+40]
	or	eax, 262144				; 00040000H
	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [edx+ecx+40], eax

; 753  :             break;

	jmp	SHORT $LN10@ReadImageD
$LN2@ReadImageD:

; 754  : 
; 755  :         case 2048:
; 756  :             TexturePool[id].texN.flags |= MPR_TI_2048;

	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	edx, DWORD PTR [ecx+eax+40]
	or	edx, 524288				; 00080000H
	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [ecx+eax+40], edx
$LN10@ReadImageD:

; 757  :             break;
; 758  : 
; 759  :         default:
; 760  :             ShiAssert(false);
; 761  :     }
; 762  : 
; 763  :     dwSize = ddsd.dwLinearSize;

	mov	edx, DWORD PTR _ddsd$[ebp+16]
	mov	DWORD PTR _dwSize$[ebp], edx

; 764  :     TexturePool[id].texN.imageData = (BYTE *)glAllocateMemory(dwSize, FALSE);

	push	0
	mov	eax, DWORD PTR _dwSize$[ebp]
	push	eax
	call	?glAllocateMemory@@YAPAXHH@Z		; glAllocateMemory
	add	esp, 8
	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [edx+ecx+36], eax

; 765  :     fread(TexturePool[id].texN.imageData, 1, dwSize, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwSize$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _id$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	ecx, DWORD PTR [eax+edx+36]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 766  : 
; 767  :     TexturePool[id].texN.dimensions = dwSize;

	mov	edx, DWORD PTR _id$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	ecx, DWORD PTR _dwSize$[ebp]
	mov	DWORD PTR [eax+edx+32], ecx

; 768  : 
; 769  :     fclose(fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_fclose
	add	esp, 4
$LN23@ReadImageD:

; 770  : 
; 771  : #ifdef _DEBUG
; 772  :     textureCount++;
; 773  : #endif
; 774  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN27@ReadImageD:
	DD	$LN9@ReadImageD
	DD	$LN8@ReadImageD
	DD	$LN7@ReadImageD
	DD	$LN6@ReadImageD
	DD	$LN10@ReadImageD
$LN26@ReadImageD:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
?ReadImageDDSN@TextureBankClass@@KAXK@Z ENDP		; TextureBankClass::ReadImageDDSN
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\texbank.cpp
_TEXT	SEGMENT
_dwMagic$ = -404					; size = 4
tv139 = -400						; size = 4
_dwSize$ = -396						; size = 4
_fp$ = -392						; size = 4
tv170 = -388						; size = 4
_ddsd$ = -384						; size = 124
_szFile$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_id$ = 8						; size = 4
?ReadImageDDS@TextureBankClass@@KAXK@Z PROC		; TextureBankClass::ReadImageDDS

; 552  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 404				; 00000194H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 553  :     DDSURFACEDESC2 ddsd;
; 554  :     DWORD dwSize, dwMagic;
; 555  :     char szFile[256];
; 556  :     FILE *fp;
; 557  : 
; 558  :     TexturePool[id].tex.flags |= MPR_TI_DDS;

	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	edx, DWORD PTR [ecx+eax+16]
	or	edx, 256				; 00000100H
	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [ecx+eax+16], edx

; 559  :     TexturePool[id].tex.flags &= ~MPR_TI_PALETTE;

	mov	edx, DWORD PTR _id$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	ecx, DWORD PTR [eax+edx+16]
	and	ecx, -129				; ffffff7fH
	mov	edx, DWORD PTR _id$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [eax+edx+16], ecx

; 560  : 
; 561  :     sprintf(szFile, "%s\\%d.dds", baseName, id);

	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	push	OFFSET ?baseName@TextureBankClass@@1PADA ; TextureBankClass::baseName
	push	OFFSET ??_C@_09PBDPKFAL@?$CFs?2?$CFd?4dds?$AA@
	lea	edx, DWORD PTR _szFile$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 562  :     fp = fopen(szFile, "rb");

	push	OFFSET ??_C@_02JDPG@rb?$AA@
	lea	eax, DWORD PTR _szFile$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 563  : 
; 564  :     // RV - RED - Avoid CTD if a missing texture
; 565  :     if (!fp) 

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN22@ReadImageD

; 566  : 		return;

	jmp	$LN23@ReadImageD
$LN22@ReadImageD:

; 567  : 
; 568  :     fread(&dwMagic, 1, sizeof(DWORD), fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	push	4
	push	1
	lea	edx, DWORD PTR _dwMagic$[ebp]
	push	edx
	call	_fread
	add	esp, 16					; 00000010H

; 569  :     ShiAssert(dwMagic == MAKEFOURCC('D', 'D', 'S', ' '));
; 570  : 
; 571  :     // Read first compressed mipmap
; 572  :     fread(&ddsd, 1, sizeof(DDSURFACEDESC2), fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	124					; 0000007cH
	push	1
	lea	ecx, DWORD PTR _ddsd$[ebp]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 573  : 
; 574  :     // MLR 1/25/2004 - Little kludge so F4 can read DDS files made by dxtex
; 575  :     if (ddsd.dwLinearSize == 0)

	cmp	DWORD PTR _ddsd$[ebp+16], 0
	jne	SHORT $LN21@ReadImageD

; 576  :     {
; 577  :         if (ddsd.ddpfPixelFormat.dwFourCC == MAKEFOURCC('D', 'X', 'T', '3') ||
; 578  :             ddsd.ddpfPixelFormat.dwFourCC == MAKEFOURCC('D', 'X', 'T', '5'))

	cmp	DWORD PTR _ddsd$[ebp+80], 861165636	; 33545844H
	je	SHORT $LN19@ReadImageD
	cmp	DWORD PTR _ddsd$[ebp+80], 894720068	; 35545844H
	jne	SHORT $LN20@ReadImageD
$LN19@ReadImageD:

; 579  :         {
; 580  :             ddsd.dwLinearSize = ddsd.dwWidth * ddsd.dwWidth;

	mov	edx, DWORD PTR _ddsd$[ebp+12]
	imul	edx, DWORD PTR _ddsd$[ebp+12]
	mov	DWORD PTR _ddsd$[ebp+16], edx

; 581  :             ddsd.dwFlags |= DDSD_LINEARSIZE;

	mov	eax, DWORD PTR _ddsd$[ebp+4]
	or	eax, 524288				; 00080000H
	mov	DWORD PTR _ddsd$[ebp+4], eax
$LN20@ReadImageD:

; 582  :         }
; 583  : 
; 584  :         if (ddsd.ddpfPixelFormat.dwFourCC == MAKEFOURCC('D', 'X', 'T', '1'))

	cmp	DWORD PTR _ddsd$[ebp+80], 827611204	; 31545844H
	jne	SHORT $LN21@ReadImageD

; 585  :         {
; 586  :             ddsd.dwLinearSize = ddsd.dwWidth * ddsd.dwWidth / 2;

	mov	ecx, DWORD PTR _ddsd$[ebp+12]
	imul	ecx, DWORD PTR _ddsd$[ebp+12]
	shr	ecx, 1
	mov	DWORD PTR _ddsd$[ebp+16], ecx

; 587  :             ddsd.dwFlags |= DDSD_LINEARSIZE;

	mov	edx, DWORD PTR _ddsd$[ebp+4]
	or	edx, 524288				; 00080000H
	mov	DWORD PTR _ddsd$[ebp+4], edx
$LN21@ReadImageD:

; 588  :         }
; 589  :     }
; 590  : 
; 591  : 
; 592  :     ShiAssert(ddsd.dwFlags & DDSD_LINEARSIZE)
; 593  : 
; 594  :     switch (ddsd.ddpfPixelFormat.dwFourCC)

	mov	eax, DWORD PTR _ddsd$[ebp+80]
	mov	DWORD PTR tv139[ebp], eax
	cmp	DWORD PTR tv139[ebp], 827611204		; 31545844H
	je	SHORT $LN15@ReadImageD
	cmp	DWORD PTR tv139[ebp], 861165636		; 33545844H
	je	SHORT $LN14@ReadImageD
	cmp	DWORD PTR tv139[ebp], 894720068		; 35545844H
	je	SHORT $LN13@ReadImageD
	jmp	SHORT $LN16@ReadImageD
$LN15@ReadImageD:

; 595  :     {
; 596  :         case MAKEFOURCC('D', 'X', 'T', '1'):
; 597  :             TexturePool[id].tex.flags |= MPR_TI_DXT1;

	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	eax, DWORD PTR [edx+ecx+16]
	or	eax, 512				; 00000200H
	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [edx+ecx+16], eax

; 598  :             break;

	jmp	SHORT $LN16@ReadImageD
$LN14@ReadImageD:

; 599  : 
; 600  :         case MAKEFOURCC('D', 'X', 'T', '3'):
; 601  :             TexturePool[id].tex.flags |= MPR_TI_DXT3;

	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	edx, DWORD PTR [ecx+eax+16]
	or	edx, 1024				; 00000400H
	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [ecx+eax+16], edx

; 602  :             break;

	jmp	SHORT $LN16@ReadImageD
$LN13@ReadImageD:

; 603  : 
; 604  :         case MAKEFOURCC('D', 'X', 'T', '5'):
; 605  :             TexturePool[id].tex.flags |= MPR_TI_DXT5;

	mov	edx, DWORD PTR _id$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	ecx, DWORD PTR [eax+edx+16]
	or	ecx, 2048				; 00000800H
	mov	edx, DWORD PTR _id$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [eax+edx+16], ecx
$LN16@ReadImageD:

; 606  :             break;
; 607  : 
; 608  :         default:
; 609  :             ShiAssert(false);
; 610  :     }
; 611  : 
; 612  :     switch (ddsd.dwWidth)

	mov	ecx, DWORD PTR _ddsd$[ebp+12]
	mov	DWORD PTR tv170[ebp], ecx
	cmp	DWORD PTR tv170[ebp], 256		; 00000100H
	ja	SHORT $LN25@ReadImageD
	cmp	DWORD PTR tv170[ebp], 256		; 00000100H
	je	$LN5@ReadImageD
	mov	edx, DWORD PTR tv170[ebp]
	sub	edx, 16					; 00000010H
	mov	DWORD PTR tv170[ebp], edx
	cmp	DWORD PTR tv170[ebp], 112		; 00000070H
	ja	$LN10@ReadImageD
	mov	eax, DWORD PTR tv170[ebp]
	movzx	ecx, BYTE PTR $LN26@ReadImageD[eax]
	jmp	DWORD PTR $LN27@ReadImageD[ecx*4]
$LN25@ReadImageD:
	cmp	DWORD PTR tv170[ebp], 512		; 00000200H
	je	$LN4@ReadImageD
	cmp	DWORD PTR tv170[ebp], 1024		; 00000400H
	je	$LN3@ReadImageD
	cmp	DWORD PTR tv170[ebp], 2048		; 00000800H
	je	$LN2@ReadImageD
	jmp	$LN10@ReadImageD
$LN9@ReadImageD:

; 613  :     {
; 614  :         case 16:
; 615  :             TexturePool[id].tex.flags |= MPR_TI_16;

	mov	edx, DWORD PTR _id$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	ecx, DWORD PTR [eax+edx+16]
	or	ecx, 4096				; 00001000H
	mov	edx, DWORD PTR _id$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [eax+edx+16], ecx

; 616  :             break;

	jmp	$LN10@ReadImageD
$LN8@ReadImageD:

; 617  : 
; 618  :         case 32:
; 619  :             TexturePool[id].tex.flags |= MPR_TI_32;

	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	eax, DWORD PTR [edx+ecx+16]
	or	eax, 8192				; 00002000H
	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [edx+ecx+16], eax

; 620  :             break;

	jmp	$LN10@ReadImageD
$LN7@ReadImageD:

; 621  : 
; 622  :         case 64:
; 623  :             TexturePool[id].tex.flags |= MPR_TI_64;

	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	edx, DWORD PTR [ecx+eax+16]
	or	edx, 16384				; 00004000H
	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [ecx+eax+16], edx

; 624  :             break;

	jmp	$LN10@ReadImageD
$LN6@ReadImageD:

; 625  : 
; 626  :         case 128:
; 627  :             TexturePool[id].tex.flags |= MPR_TI_128;

	mov	edx, DWORD PTR _id$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	ecx, DWORD PTR [eax+edx+16]
	or	ecx, 32768				; 00008000H
	mov	edx, DWORD PTR _id$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [eax+edx+16], ecx

; 628  :             break;

	jmp	$LN10@ReadImageD
$LN5@ReadImageD:

; 629  : 
; 630  :         case 256:
; 631  :             TexturePool[id].tex.flags |= MPR_TI_256;

	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	eax, DWORD PTR [edx+ecx+16]
	or	eax, 65536				; 00010000H
	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [edx+ecx+16], eax

; 632  :             break;

	jmp	SHORT $LN10@ReadImageD
$LN4@ReadImageD:

; 633  : 
; 634  :         case 512:
; 635  :             TexturePool[id].tex.flags |= MPR_TI_512;

	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	edx, DWORD PTR [ecx+eax+16]
	or	edx, 131072				; 00020000H
	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [ecx+eax+16], edx

; 636  :             break;

	jmp	SHORT $LN10@ReadImageD
$LN3@ReadImageD:

; 637  : 
; 638  :         case 1024:
; 639  :             TexturePool[id].tex.flags |= MPR_TI_1024;

	mov	edx, DWORD PTR _id$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	ecx, DWORD PTR [eax+edx+16]
	or	ecx, 262144				; 00040000H
	mov	edx, DWORD PTR _id$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [eax+edx+16], ecx

; 640  :             break;

	jmp	SHORT $LN10@ReadImageD
$LN2@ReadImageD:

; 641  : 
; 642  :         case 2048:
; 643  :             TexturePool[id].tex.flags |= MPR_TI_2048;

	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	eax, DWORD PTR [edx+ecx+16]
	or	eax, 524288				; 00080000H
	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [edx+ecx+16], eax
$LN10@ReadImageD:

; 644  :             break;
; 645  : 
; 646  :         default:
; 647  :             ShiAssert(false);
; 648  :     }
; 649  : 
; 650  :     dwSize = ddsd.dwLinearSize;

	mov	eax, DWORD PTR _ddsd$[ebp+16]
	mov	DWORD PTR _dwSize$[ebp], eax

; 651  :     TexturePool[id].tex.imageData = (BYTE *)glAllocateMemory(dwSize, FALSE);

	push	0
	mov	ecx, DWORD PTR _dwSize$[ebp]
	push	ecx
	call	?glAllocateMemory@@YAPAXHH@Z		; glAllocateMemory
	add	esp, 8
	mov	edx, DWORD PTR _id$[ebp]
	shl	edx, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [ecx+edx+12], eax

; 652  :     fread(TexturePool[id].tex.imageData, 1, dwSize, fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	mov	eax, DWORD PTR _dwSize$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	eax, DWORD PTR [edx+ecx+12]
	push	eax
	call	_fread
	add	esp, 16					; 00000010H

; 653  : 
; 654  :     TexturePool[id].tex.dimensions = dwSize;

	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	eax, DWORD PTR _dwSize$[ebp]
	mov	DWORD PTR [edx+ecx+8], eax

; 655  : 
; 656  :     fclose(fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	_fclose
	add	esp, 4
$LN23@ReadImageD:

; 657  : 
; 658  : #ifdef _DEBUG
; 659  :     textureCount++;
; 660  : #endif
; 661  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN27@ReadImageD:
	DD	$LN9@ReadImageD
	DD	$LN8@ReadImageD
	DD	$LN7@ReadImageD
	DD	$LN6@ReadImageD
	DD	$LN10@ReadImageD
$LN26@ReadImageD:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
?ReadImageDDS@TextureBankClass@@KAXK@Z ENDP		; TextureBankClass::ReadImageDDS
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\texbank.cpp
_TEXT	SEGMENT
_fp$1 = -264						; size = 4
_szFile$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_id$ = 8						; size = 4
?UnpackPalettizedTexture@TextureBankClass@@KAXK@Z PROC	; TextureBankClass::UnpackPalettizedTexture

; 524  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 525  :     char szFile[256];
; 526  : 
; 527  :     CreateDirectory(baseName, NULL);

	push	0
	push	OFFSET ?baseName@TextureBankClass@@1PADA ; TextureBankClass::baseName
	call	DWORD PTR __imp__CreateDirectoryA@8

; 528  : 
; 529  :     if (TexturePool[id].tex.dimensions > 0)

	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	cmp	DWORD PTR [ecx+eax+8], 0
	jle	$LN2@UnpackPale

; 530  :     {
; 531  :         //sfr: (see my comment regarding palette origin above)
; 532  :         TexturePool[id].tex.SetPalette(&ThePaletteBank.PalettePool[TexturePool[id].palID]);

	mov	edx, DWORD PTR _id$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	ecx, DWORD PTR [eax+edx+56]
	imul	ecx, 1032				; 00000408H
	add	ecx, DWORD PTR ?PalettePool@PaletteBankClass@@2PAVPalette@@A ; PaletteBankClass::PalettePool
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	lea	ecx, DWORD PTR [eax+edx+8]
	call	?SetPalette@Texture@@QAEXPAVPalette@@@Z	; Texture::SetPalette

; 533  :         ShiAssert(TexturePool[id].tex.GetPalette());
; 534  :         TexturePool[id].tex.GetPalette()->Reference();

	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	lea	ecx, DWORD PTR [edx+ecx+8]
	call	?GetPalette@Texture@@QAEPAVPalette@@XZ	; Texture::GetPalette
	mov	ecx, eax
	call	?Reference@Palette@@QAEXXZ		; Palette::Reference

; 535  : 
; 536  :         ReadImageData(id, true);

	push	1
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	call	?ReadImageData@TextureBankClass@@KAXH_N@Z ; TextureBankClass::ReadImageData
	add	esp, 8

; 537  :         sprintf(szFile, "%s\\%d", baseName, id);

	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	push	OFFSET ?baseName@TextureBankClass@@1PADA ; TextureBankClass::baseName
	push	OFFSET ??_C@_05BJOCMKHE@?$CFs?2?$CFd?$AA@
	lea	edx, DWORD PTR _szFile$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 538  :         TexturePool[id].tex.DumpImageToFile(szFile, TexturePool[id].palID);

	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	edx, DWORD PTR [ecx+eax+56]
	push	edx
	lea	eax, DWORD PTR _szFile$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	lea	ecx, DWORD PTR [edx+ecx+8]
	call	?DumpImageToFile@Texture@@QAE_NPADH@Z	; Texture::DumpImageToFile

; 539  :         Release(id);

	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	call	?Release@TextureBankClass@@SAXH@Z	; TextureBankClass::Release
	add	esp, 4

; 540  :     }
; 541  :     else

	jmp	SHORT $LN3@UnpackPale
$LN2@UnpackPale:

; 542  :     {
; 543  :         sprintf(szFile, "%s\\%d.dds", baseName, id);

	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	push	OFFSET ?baseName@TextureBankClass@@1PADA ; TextureBankClass::baseName
	push	OFFSET ??_C@_09PBDPKFAL@?$CFs?2?$CFd?4dds?$AA@
	lea	edx, DWORD PTR _szFile$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 544  :         FILE* fp = fopen(szFile, "wb");

	push	OFFSET ??_C@_02GMLFBBN@wb?$AA@
	lea	eax, DWORD PTR _szFile$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$1[ebp], eax

; 545  :         fclose(fp);

	mov	ecx, DWORD PTR _fp$1[ebp]
	push	ecx
	call	_fclose
	add	esp, 4
$LN3@UnpackPale:

; 546  :     }
; 547  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?UnpackPalettizedTexture@TextureBankClass@@KAXK@Z ENDP	; TextureBankClass::UnpackPalettizedTexture
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\texbank.cpp
_TEXT	SEGMENT
$T1 = -16						; size = 4
_state$ = -12						; size = 4
_Count$2 = -8						; size = 4
_id$3 = -4						; size = 4
_request$ = 8						; size = 4
?LoaderCallBack@TextureBankClass@@KAXPAULoaderQ@@@Z PROC ; TextureBankClass::LoaderCallBack

; 414  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 415  :     BOOL state = (int)request->parameter;

	mov	eax, DWORD PTR _request$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _state$[ebp], ecx

; 416  : 
; 417  :     //EnterCriticalSection(&ObjectLOD::cs_ObjectLOD);
; 418  : 
; 419  :     // If we're turning deferred loads off, go back and do all the loads we held up
; 420  :     if (deferredLoadState && !state)

	cmp	DWORD PTR ?deferredLoadState@TextureBankClass@@1HA, 0 ; TextureBankClass::deferredLoadState
	je	$LN8@LoaderCall
	cmp	DWORD PTR _state$[ebp], 0
	jne	$LN8@LoaderCall

; 421  :     {
; 422  :         DWORD Count = 5;

	mov	DWORD PTR _Count$2[ebp], 5

; 423  : 
; 424  :         // Check each texture
; 425  :         for (int id = 0; id < nTextures; id++)

	mov	DWORD PTR _id$3[ebp], 0
	jmp	SHORT $LN7@LoaderCall
$LN6@LoaderCall:
	mov	edx, DWORD PTR _id$3[ebp]
	add	edx, 1
	mov	DWORD PTR _id$3[ebp], edx
$LN7@LoaderCall:
	mov	eax, DWORD PTR _id$3[ebp]
	cmp	eax, DWORD PTR ?nTextures@TextureBankClass@@2HA ; TextureBankClass::nTextures
	jge	SHORT $LN8@LoaderCall

; 426  :         {
; 427  :             // See if it is in use
; 428  :             if (TexturePool[id].refCount)

	mov	ecx, DWORD PTR _id$3[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	cmp	DWORD PTR [edx+ecx+60], 0
	je	SHORT $LN4@LoaderCall

; 429  : 
; 430  :                 // This one is in use. Is it already loaded?
; 431  :                 if (/*!TexturePool[id].tex.imageData &&*/ !TexturePool[id].tex.TexHandle())

	mov	eax, DWORD PTR _id$3[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	lea	ecx, DWORD PTR [ecx+eax+8]
	call	?TexHandle@Texture@@QAEKXZ		; Texture::TexHandle
	test	eax, eax
	jne	SHORT $LN4@LoaderCall

; 432  :                 {
; 433  : 
; 434  :                     // Nope, go get it.
; 435  :                     if (!TexturePool[id].tex.imageData) ReadImageData(id);

	mov	edx, DWORD PTR _id$3[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	cmp	DWORD PTR [eax+edx+12], 0
	jne	SHORT $LN2@LoaderCall
	push	0
	mov	ecx, DWORD PTR _id$3[ebp]
	push	ecx
	call	?ReadImageData@TextureBankClass@@KAXH_N@Z ; TextureBankClass::ReadImageData
	add	esp, 8
$LN2@LoaderCall:

; 436  : 
; 437  :                     TexturePool[id].tex.CreateTexture();

	push	0
	mov	edx, DWORD PTR _id$3[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	lea	ecx, DWORD PTR [eax+edx+8]
	call	?CreateTexture@Texture@@QAE_NPAD@Z	; Texture::CreateTexture

; 438  :                     Count--;

	mov	ecx, DWORD PTR _Count$2[ebp]
	sub	ecx, 1
	mov	DWORD PTR _Count$2[ebp], ecx
$LN4@LoaderCall:

; 439  :                     //TexturePool[id].tex.FreeImage();
; 440  :                 }
; 441  : 
; 442  :             if (!Count) break;

	cmp	DWORD PTR _Count$2[ebp], 0
	jne	SHORT $LN1@LoaderCall
	jmp	SHORT $LN8@LoaderCall
$LN1@LoaderCall:

; 443  :         }

	jmp	$LN6@LoaderCall
$LN8@LoaderCall:

; 444  :     }
; 445  : 
; 446  :     // Now store the new state
; 447  :     deferredLoadState = state;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR ?deferredLoadState@TextureBankClass@@1HA, edx ; TextureBankClass::deferredLoadState

; 448  : 
; 449  :     //LeaveCriticalSection(&ObjectLOD::cs_ObjectLOD);
; 450  : 
; 451  :     // Free the request queue entry
; 452  :     delete request;

	mov	eax, DWORD PTR _request$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 453  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?LoaderCallBack@TextureBankClass@@KAXPAULoaderQ@@@Z ENDP ; TextureBankClass::LoaderCallBack
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\texbank.cpp
_TEXT	SEGMENT
?CloseTextureFile@TextureBankClass@@KAXXZ PROC		; TextureBankClass::CloseTextureFile

; 243  : {

	push	ebp
	mov	ebp, esp

; 244  :     TexFileMap.Close();

	mov	ecx, OFFSET ?TexFileMap@TextureBankClass@@1VFileMemMap@@A ; TextureBankClass::TexFileMap
	call	?Close@FileMemMap@@QAEXXZ		; FileMemMap::Close

; 245  : }

	pop	ebp
	ret	0
?CloseTextureFile@TextureBankClass@@KAXXZ ENDP		; TextureBankClass::CloseTextureFile
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\texbank.cpp
_TEXT	SEGMENT
_retval$ = -720						; size = 4
_cdataSize$ = -716					; size = 4
_cdata$ = -712						; size = 4
_size$ = -708						; size = 4
_buffer$1 = -704					; size = 580
_message$2 = -124					; size = 120
__$ArrayPad$ = -4					; size = 4
_id$ = 8						; size = 4
_forceNoDDS$ = 12					; size = 1
?ReadImageData@TextureBankClass@@KAXH_N@Z PROC		; TextureBankClass::ReadImageData

; 337  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 720				; 000002d0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi

; 338  :     int retval;
; 339  :     int size;
; 340  :     BYTE *cdata;
; 341  :     //sfr: added for more control
; 342  :     int cdataSize;
; 343  : 
; 344  : 
; 345  :     ShiAssert(TexturePool[id].refCount);
; 346  : 
; 347  :     if (!forceNoDDS && DisplayOptions.m_texMode == DisplayOptionsClass::TEX_MODE_DDS)

	movzx	eax, BYTE PTR _forceNoDDS$[ebp]
	test	eax, eax
	jne	SHORT $LN4@ReadImageD
	cmp	DWORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+24, 70161 ; 00011211H
	jne	SHORT $LN4@ReadImageD

; 348  :     {
; 349  :         ReadImageDDS(id);

	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	call	?ReadImageDDS@TextureBankClass@@KAXK@Z	; TextureBankClass::ReadImageDDS
	add	esp, 4

; 350  :         ReadImageDDSN(id);

	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	call	?ReadImageDDSN@TextureBankClass@@KAXK@Z	; TextureBankClass::ReadImageDDSN
	add	esp, 4

; 351  :         return;

	jmp	$LN6@ReadImageD
$LN4@ReadImageD:

; 352  :     }
; 353  : 
; 354  :     if (g_bUseMappedFiles)

	movzx	eax, BYTE PTR ?g_bUseMappedFiles@@3_NA	; g_bUseMappedFiles
	test	eax, eax
	je	SHORT $LN3@ReadImageD

; 355  :     {
; 356  :         cdata = TexFileMap.GetData(TexturePool[id].fileOffset, TexturePool[id].fileSize);

	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	eax, DWORD PTR [edx+ecx+4]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, OFFSET ?TexFileMap@TextureBankClass@@1VFileMemMap@@A ; TextureBankClass::TexFileMap
	call	?GetData@FileMemMap@@QAEPAEHH@Z		; FileMemMap::GetData
	mov	DWORD PTR _cdata$[ebp], eax

; 357  :         cdataSize = TexturePool[id].fileSize - TexturePool[id].fileOffset;

	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _id$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	esi, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	ecx, DWORD PTR [eax+ecx+4]
	sub	ecx, DWORD PTR [esi+edx]
	mov	DWORD PTR _cdataSize$[ebp], ecx

; 358  :         ShiAssert(cdata);
; 359  :     }
; 360  :     else

	jmp	$LN2@ReadImageD
$LN3@ReadImageD:

; 361  :     {
; 362  :         if (!TexFileMap.ReadDataAt(TexturePool[id].fileOffset, CompressedBuffer, TexturePool[id].fileSize))

	mov	edx, DWORD PTR _id$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	ecx, DWORD PTR [eax+edx+4]
	push	ecx
	mov	edx, DWORD PTR ?CompressedBuffer@TextureBankClass@@1PAEA ; TextureBankClass::CompressedBuffer
	push	edx
	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	ecx, OFFSET ?TexFileMap@TextureBankClass@@1VFileMemMap@@A ; TextureBankClass::TexFileMap
	call	?ReadDataAt@FileMemMap@@QAEHKPAXK@Z	; FileMemMap::ReadDataAt
	test	eax, eax
	jne	SHORT $LN1@ReadImageD

; 363  :         {
; 364  :             char message[120];
; 365  :             sprintf(message, "%s: Bad object texture seek (%0d)", strerror(errno), TexturePool[id].fileOffset);

	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	__errno
	mov	eax, DWORD PTR [eax]
	push	eax
	call	_strerror
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0CC@LLKHLGAO@?$CFs?3?5Bad?5object?5texture?5seek?5?$CI?$CF0d@
	lea	ecx, DWORD PTR _message$2[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 366  :             ShiError(message);

	push	OFFSET ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
	push	OFFSET ??_C@_0M@GHJDMFO@TexBank?4cpp?$AA@
	push	366					; 0000016eH
	push	OFFSET ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
	lea	edx, DWORD PTR _buffer$1[ebp]
	push	edx
	call	_sprintf
	add	esp, 20					; 00000014H
	push	0
	lea	eax, DWORD PTR _message$2[ebp]
	push	eax
	lea	ecx, DWORD PTR _buffer$1[ebp]
	push	ecx
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	push	-1
	call	_exit
$LN1@ReadImageD:

; 367  :         }
; 368  : 
; 369  :         cdata = CompressedBuffer;

	mov	edx, DWORD PTR ?CompressedBuffer@TextureBankClass@@1PAEA ; TextureBankClass::CompressedBuffer
	mov	DWORD PTR _cdata$[ebp], edx

; 370  :         //sfr: in this case, im not sure size is this
; 371  :         // FRB - fileOffset - fileOffset ????
; 372  :         //cdataSize = TexturePool[id].fileOffset - TexturePool[id].fileOffset;
; 373  :         cdataSize = TexturePool[id].fileSize - TexturePool[id].fileOffset;

	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	esi, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	eax, DWORD PTR [edx+eax+4]
	sub	eax, DWORD PTR [esi+ecx]
	mov	DWORD PTR _cdataSize$[ebp], eax
$LN2@ReadImageD:

; 374  :     }
; 375  : 
; 376  :     // Allocate memory for the new texture
; 377  :     size = TexturePool[id].tex.dimensions;

	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	eax, DWORD PTR [edx+ecx+8]
	mov	DWORD PTR _size$[ebp], eax

; 378  :     size = size * size;

	mov	ecx, DWORD PTR _size$[ebp]
	imul	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], ecx

; 379  : 
; 380  :     TexturePool[id].tex.imageData = glAllocateMemory(size, FALSE);

	push	0
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	call	?glAllocateMemory@@YAPAXHH@Z		; glAllocateMemory
	add	esp, 8
	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [edx+ecx+12], eax

; 381  :     ShiAssert(TexturePool[id].tex.imageData);
; 382  : 
; 383  :     // Uncompress the data into the texture structure
; 384  :     //sfr: using new cdataSize for control
; 385  :     retval = LZSS_Expand(cdata, cdataSize, (BYTE*)TexturePool[id].tex.imageData, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	eax, DWORD PTR [edx+ecx+12]
	push	eax
	mov	ecx, DWORD PTR _cdataSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cdata$[ebp]
	push	edx
	call	_LZSS_Expand
	add	esp, 16					; 00000010H
	mov	DWORD PTR _retval$[ebp], eax
$LN6@ReadImageD:

; 386  :     ShiAssert(retval == TexturePool[id].fileSize);
; 387  : 
; 388  : #ifdef _DEBUG
; 389  :     textureCount++;
; 390  : #endif
; 391  : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ReadImageData@TextureBankClass@@KAXH_N@Z ENDP		; TextureBankClass::ReadImageData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\texbank.cpp
_TEXT	SEGMENT
tv72 = -1104						; size = 4
_buffer$1 = -1100					; size = 580
_message$2 = -520					; size = 256
_filename$ = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
?OpenTextureFile@TextureBankClass@@KAXXZ PROC		; TextureBankClass::OpenTextureFile

; 226  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1104				; 00000450H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 227  :     char filename[_MAX_PATH];
; 228  : 
; 229  :     ShiAssert(!TexFileMap.IsReady());
; 230  : 
; 231  :     strcpy(filename, baseName);

	push	OFFSET ?baseName@TextureBankClass@@1PADA ; TextureBankClass::baseName
	lea	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8

; 232  :     strcat(filename, ".TEX");

	push	OFFSET ??_C@_04HHAJJAF@?4TEX?$AA@
	lea	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8

; 233  : 
; 234  :     if (!TexFileMap.Open(filename, FALSE, !g_bUseMappedFiles))

	movzx	edx, BYTE PTR ?g_bUseMappedFiles@@3_NA	; g_bUseMappedFiles
	test	edx, edx
	jne	SHORT $LN4@OpenTextur
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN5@OpenTextur
$LN4@OpenTextur:
	mov	DWORD PTR tv72[ebp], 0
$LN5@OpenTextur:
	mov	eax, DWORD PTR tv72[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	mov	ecx, OFFSET ?TexFileMap@TextureBankClass@@1VFileMemMap@@A ; TextureBankClass::TexFileMap
	call	?Open@FileMemMap@@QAEHPBDHH@Z		; FileMemMap::Open
	test	eax, eax
	jne	SHORT $LN3@OpenTextur

; 235  :     {
; 236  :         char message[256];
; 237  :         sprintf(message, "Failed to open object texture file %s\n", filename);

	lea	edx, DWORD PTR _filename$[ebp]
	push	edx
	push	OFFSET ??_C@_0CH@JHKLPDNN@Failed?5to?5open?5object?5texture?5fi@
	lea	eax, DWORD PTR _message$2[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 238  :         ShiError(message);

	push	OFFSET ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
	push	OFFSET ??_C@_0M@GHJDMFO@TexBank?4cpp?$AA@
	push	238					; 000000eeH
	push	OFFSET ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
	lea	ecx, DWORD PTR _buffer$1[ebp]
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H
	push	0
	lea	edx, DWORD PTR _message$2[ebp]
	push	edx
	lea	eax, DWORD PTR _buffer$1[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	push	-1
	call	_exit
$LN3@OpenTextur:

; 239  :     }
; 240  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?OpenTextureFile@TextureBankClass@@KAXXZ ENDP		; TextureBankClass::OpenTextureFile
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\texbank.cpp
_TEXT	SEGMENT
$T1 = -4						; size = 4
?FreeCompressedBuffer@TextureBankClass@@KAXXZ PROC	; TextureBankClass::FreeCompressedBuffer

; 199  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 200  : #ifdef USE_SH_POOLS
; 201  :     MemFreePtr(CompressedBuffer);
; 202  : #else
; 203  :     delete[] CompressedBuffer;

	mov	eax, DWORD PTR ?CompressedBuffer@TextureBankClass@@1PAEA ; TextureBankClass::CompressedBuffer
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 204  : #endif
; 205  : 
; 206  :     CompressedBuffer = NULL;

	mov	DWORD PTR ?CompressedBuffer@TextureBankClass@@1PAEA, 0 ; TextureBankClass::CompressedBuffer

; 207  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FreeCompressedBuffer@TextureBankClass@@KAXXZ ENDP	; TextureBankClass::FreeCompressedBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\texbank.cpp
_TEXT	SEGMENT
$T1 = -4						; size = 4
_maxCompressedSize$ = 8					; size = 4
?AllocCompressedBuffer@TextureBankClass@@KAXH@Z PROC	; TextureBankClass::AllocCompressedBuffer

; 210  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 211  : #ifdef USE_SH_POOLS
; 212  :     CompressedBuffer = (BYTE *)MemAllocPtr(gBSPLibMemPool, sizeof(BYTE) * maxCompressedSize, 0);
; 213  : #else
; 214  :     CompressedBuffer = new BYTE[maxCompressedSize];

	mov	eax, DWORD PTR _maxCompressedSize$[ebp]
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR ?CompressedBuffer@TextureBankClass@@1PAEA, ecx ; TextureBankClass::CompressedBuffer

; 215  : #endif
; 216  : 
; 217  :     ShiAssert(CompressedBuffer);
; 218  : 
; 219  :     if (CompressedBuffer)

	cmp	DWORD PTR ?CompressedBuffer@TextureBankClass@@1PAEA, 0 ; TextureBankClass::CompressedBuffer
	je	SHORT $LN2@AllocCompr

; 220  :     {
; 221  :         ZeroMemory(CompressedBuffer, maxCompressedSize);

	mov	edx, DWORD PTR _maxCompressedSize$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR ?CompressedBuffer@TextureBankClass@@1PAEA ; TextureBankClass::CompressedBuffer
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
$LN2@AllocCompr:

; 222  :     }
; 223  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AllocCompressedBuffer@TextureBankClass@@KAXH@Z ENDP	; TextureBankClass::AllocCompressedBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\texbank.cpp
_TEXT	SEGMENT
_id$ = 8						; size = 4
?GetHandle@TextureBankClass@@SAKK@Z PROC		; TextureBankClass::GetHandle

; 792  : {

	push	ebp
	mov	ebp, esp

; 793  :     // if already on release, avoid using or requesting it
; 794  :     if (TexFlags[id].OnRelease) return NULL;

	mov	eax, DWORD PTR _id$[ebp]
	mov	ecx, DWORD PTR ?TexFlags@TextureBankClass@@1PAUTexFlagsType@@A ; TextureBankClass::TexFlags
	movsx	edx, BYTE PTR [ecx+eax*2+1]
	test	edx, edx
	je	SHORT $LN2@GetHandle
	xor	eax, eax
	jmp	SHORT $LN3@GetHandle
$LN2@GetHandle:

; 795  : 
; 796  :     // if the Handle is prsent, return it
; 797  :     if (IsValidIndex(id) && TexturePool[id].tex.TexHandle()) return TexturePool[id].tex.TexHandle();

	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	call	?IsValidIndex@TextureBankClass@@SAHH@Z	; TextureBankClass::IsValidIndex
	add	esp, 4
	test	eax, eax
	je	SHORT $LN1@GetHandle
	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	lea	ecx, DWORD PTR [edx+ecx+8]
	call	?TexHandle@Texture@@QAEKXZ		; Texture::TexHandle
	test	eax, eax
	je	SHORT $LN1@GetHandle
	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	lea	ecx, DWORD PTR [ecx+eax+8]
	call	?TexHandle@Texture@@QAEKXZ		; Texture::TexHandle
	jmp	SHORT $LN3@GetHandle
$LN1@GetHandle:

; 798  : 
; 799  :     // return  a null pointer that means BLANK SURFACE
; 800  :     return NULL;

	xor	eax, eax
$LN3@GetHandle:

; 801  : }

	pop	ebp
	ret	0
?GetHandle@TextureBankClass@@SAKK@Z ENDP		; TextureBankClass::GetHandle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\texbank.cpp
_TEXT	SEGMENT
_TexHandle$ = 8						; size = 4
?SelectHandle@TextureBankClass@@SAXK@Z PROC		; TextureBankClass::SelectHandle

; 478  : {

	push	ebp
	mov	ebp, esp

; 479  :     TheStateStack.context->SelectTexture1(TexHandle);

	mov	eax, DWORD PTR _TexHandle$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?context@StateStackClass@@2PAVContextMPR@@A ; StateStackClass::context
	call	?SelectTexture1@ContextMPR@@QAEXH@Z	; ContextMPR::SelectTexture1

; 480  : }

	pop	ebp
	ret	0
?SelectHandle@TextureBankClass@@SAXK@Z ENDP		; TextureBankClass::SelectHandle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\texbank.cpp
_TEXT	SEGMENT
_i$1 = -4						; size = 4
?RestoreTexturePool@TextureBankClass@@SAXXZ PROC	; TextureBankClass::RestoreTexturePool

; 777  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi

; 778  :     for (int i = 0; i < nTextures; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@RestoreTex
$LN2@RestoreTex:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@RestoreTex:
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR ?nTextures@TextureBankClass@@2HA ; TextureBankClass::nTextures
	jge	$LN4@RestoreTex

; 779  :     {
; 780  :         TexturePool[i].fileOffset = TempTexturePool[i].fileOffset;

	mov	edx, DWORD PTR _i$1[ebp]
	imul	edx, 40					; 00000028H
	mov	eax, DWORD PTR _i$1[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	esi, DWORD PTR ?TempTexturePool@TextureBankClass@@2PAUTempTexBankEntry@@A ; TextureBankClass::TempTexturePool
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [ecx+eax], edx

; 781  :         TexturePool[i].fileSize = TempTexturePool[i].fileSize;

	mov	eax, DWORD PTR _i$1[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR _i$1[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	esi, DWORD PTR ?TempTexturePool@TextureBankClass@@2PAUTempTexBankEntry@@A ; TextureBankClass::TempTexturePool
	mov	eax, DWORD PTR [esi+eax+4]
	mov	DWORD PTR [edx+ecx+4], eax

; 782  :         TexturePool[i].tex = TempTexturePool[i].tex;

	mov	ecx, DWORD PTR _i$1[ebp]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR ?TempTexturePool@TextureBankClass@@2PAUTempTexBankEntry@@A ; TextureBankClass::TempTexturePool
	lea	eax, DWORD PTR [edx+ecx+8]
	mov	ecx, DWORD PTR _i$1[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	lea	ecx, DWORD PTR [edx+ecx+8]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], eax

; 783  :         TexturePool[i].texN = TempTexturePool[i].tex;

	mov	ecx, DWORD PTR _i$1[ebp]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR ?TempTexturePool@TextureBankClass@@2PAUTempTexBankEntry@@A ; TextureBankClass::TempTexturePool
	lea	eax, DWORD PTR [edx+ecx+8]
	mov	ecx, DWORD PTR _i$1[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	lea	ecx, DWORD PTR [edx+ecx+32]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], eax

; 784  :         TexturePool[i].palID = TempTexturePool[i].palID;

	mov	ecx, DWORD PTR _i$1[ebp]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _i$1[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	esi, DWORD PTR ?TempTexturePool@TextureBankClass@@2PAUTempTexBankEntry@@A ; TextureBankClass::TempTexturePool
	mov	ecx, DWORD PTR [esi+ecx+32]
	mov	DWORD PTR [eax+edx+56], ecx

; 785  :         TexturePool[i].refCount = TempTexturePool[i].refCount;

	mov	edx, DWORD PTR _i$1[ebp]
	imul	edx, 40					; 00000028H
	mov	eax, DWORD PTR _i$1[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	esi, DWORD PTR ?TempTexturePool@TextureBankClass@@2PAUTempTexBankEntry@@A ; TextureBankClass::TempTexturePool
	mov	edx, DWORD PTR [esi+edx+36]
	mov	DWORD PTR [ecx+eax+60], edx

; 786  :     }

	jmp	$LN2@RestoreTex
$LN4@RestoreTex:

; 787  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?RestoreTexturePool@TextureBankClass@@SAXXZ ENDP	; TextureBankClass::RestoreTexturePool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\texbank.cpp
_TEXT	SEGMENT
_fp$ = -268						; size = 4
_id$1 = -264						; size = 4
_szFile$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_bForce$ = 8						; size = 1
?SyncDDSTextures@TextureBankClass@@SAX_N@Z PROC		; TextureBankClass::SyncDDSTextures

; 493  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 494  :     char szFile[256];
; 495  :     FILE *fp;
; 496  : 
; 497  :     ShiAssert(TexturePool);
; 498  : 
; 499  :     CreateDirectory(baseName, NULL);

	push	0
	push	OFFSET ?baseName@TextureBankClass@@1PADA ; TextureBankClass::baseName
	call	DWORD PTR __imp__CreateDirectoryA@8

; 500  : 
; 501  :     for (DWORD id = 0; id < (DWORD)nTextures; id++)

	mov	DWORD PTR _id$1[ebp], 0
	jmp	SHORT $LN7@SyncDDSTex
$LN6@SyncDDSTex:
	mov	eax, DWORD PTR _id$1[ebp]
	add	eax, 1
	mov	DWORD PTR _id$1[ebp], eax
$LN7@SyncDDSTex:
	mov	ecx, DWORD PTR _id$1[ebp]
	cmp	ecx, DWORD PTR ?nTextures@TextureBankClass@@2HA ; TextureBankClass::nTextures
	jae	$LN8@SyncDDSTex

; 502  :     {
; 503  :         sprintf(szFile, "%s\\%d.dds", baseName, id);

	mov	edx, DWORD PTR _id$1[ebp]
	push	edx
	push	OFFSET ?baseName@TextureBankClass@@1PADA ; TextureBankClass::baseName
	push	OFFSET ??_C@_09PBDPKFAL@?$CFs?2?$CFd?4dds?$AA@
	lea	eax, DWORD PTR _szFile$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 504  :         fp = fopen(szFile, "rb");

	push	OFFSET ??_C@_02JDPG@rb?$AA@
	lea	ecx, DWORD PTR _szFile$[ebp]
	push	ecx
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 505  : 
; 506  :         if (!fp || bForce)

	cmp	DWORD PTR _fp$[ebp], 0
	je	SHORT $LN3@SyncDDSTex
	movzx	edx, BYTE PTR _bForce$[ebp]
	test	edx, edx
	je	SHORT $LN4@SyncDDSTex
$LN3@SyncDDSTex:

; 507  :         {
; 508  :             if (fp)

	cmp	DWORD PTR _fp$[ebp], 0
	je	SHORT $LN2@SyncDDSTex

; 509  :                 fclose(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4
$LN2@SyncDDSTex:

; 510  : 
; 511  :             UnpackPalettizedTexture(id);

	mov	ecx, DWORD PTR _id$1[ebp]
	push	ecx
	call	?UnpackPalettizedTexture@TextureBankClass@@KAXK@Z ; TextureBankClass::UnpackPalettizedTexture
	add	esp, 4

; 512  :         }
; 513  :         else

	jmp	SHORT $LN1@SyncDDSTex
$LN4@SyncDDSTex:

; 514  :             fclose(fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_fclose
	add	esp, 4
$LN1@SyncDDSTex:

; 515  : 
; 516  :         TexturePool[id].tex.flags |= MPR_TI_DDS;

	mov	eax, DWORD PTR _id$1[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	edx, DWORD PTR [ecx+eax+16]
	or	edx, 256				; 00000100H
	mov	eax, DWORD PTR _id$1[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [ecx+eax+16], edx

; 517  :         TexturePool[id].tex.flags &= ~MPR_TI_PALETTE;

	mov	edx, DWORD PTR _id$1[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	ecx, DWORD PTR [eax+edx+16]
	and	ecx, -129				; ffffff7fH
	mov	edx, DWORD PTR _id$1[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [eax+edx+16], ecx

; 518  :         TexturePool[id].texN.flags |= MPR_TI_DDS;

	mov	ecx, DWORD PTR _id$1[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	eax, DWORD PTR [edx+ecx+40]
	or	eax, 256				; 00000100H
	mov	ecx, DWORD PTR _id$1[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [edx+ecx+40], eax

; 519  :         TexturePool[id].texN.flags &= ~MPR_TI_PALETTE;

	mov	eax, DWORD PTR _id$1[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	edx, DWORD PTR [ecx+eax+40]
	and	edx, -129				; ffffff7fH
	mov	eax, DWORD PTR _id$1[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [ecx+eax+40], edx

; 520  :     }

	jmp	$LN6@SyncDDSTex
$LN8@SyncDDSTex:

; 521  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?SyncDDSTextures@TextureBankClass@@SAX_N@Z ENDP		; TextureBankClass::SyncDDSTextures
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\texbank.cpp
_TEXT	SEGMENT
tv66 = -4						; size = 4
_id$ = 8						; size = 4
?IsValidIndex@TextureBankClass@@SAHH@Z PROC		; TextureBankClass::IsValidIndex

; 484  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 485  :     return((id >= 0) && (id < nTextures));

	cmp	DWORD PTR _id$[ebp], 0
	jl	SHORT $LN3@IsValidInd
	mov	eax, DWORD PTR _id$[ebp]
	cmp	eax, DWORD PTR ?nTextures@TextureBankClass@@2HA ; TextureBankClass::nTextures
	jge	SHORT $LN3@IsValidInd
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@IsValidInd
$LN3@IsValidInd:
	mov	DWORD PTR tv66[ebp], 0
$LN4@IsValidInd:
	mov	eax, DWORD PTR tv66[ebp]

; 486  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsValidIndex@TextureBankClass@@SAHH@Z ENDP		; TextureBankClass::IsValidIndex
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\texbank.cpp
_TEXT	SEGMENT
$T1 = -592						; size = 4
_request$ = -588					; size = 4
_buffer$2 = -584					; size = 580
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
?SetDeferredLoad@TextureBankClass@@SAXH@Z PROC		; TextureBankClass::SetDeferredLoad

; 394  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 592				; 00000250H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 395  :     LoaderQ *request;
; 396  : 
; 397  :     // Allocate space for the async request
; 398  :     request = new LoaderQ;

	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR _request$[ebp], eax

; 399  : 
; 400  :     if (!request)

	cmp	DWORD PTR _request$[ebp], 0
	jne	SHORT $LN1@SetDeferre

; 401  :         ShiError("Failed to allocate memory for a object texture load state change request");

	push	OFFSET ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
	push	OFFSET ??_C@_0M@GHJDMFO@TexBank?4cpp?$AA@
	push	401					; 00000191H
	push	OFFSET ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
	lea	ecx, DWORD PTR _buffer$2[ebp]
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H
	push	0
	push	OFFSET ??_C@_0EJ@HFPNGIJC@Failed?5to?5allocate?5memory?5for?5a?5@
	lea	edx, DWORD PTR _buffer$2[ebp]
	push	edx
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	push	-1
	call	_exit
$LN1@SetDeferre:

; 402  : 
; 403  :     // Build the data transfer request to get the required object data
; 404  :     request->filename = NULL;

	mov	eax, DWORD PTR _request$[ebp]
	mov	DWORD PTR [eax], 0

; 405  :     request->fileoffset = 0;

	mov	ecx, DWORD PTR _request$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 406  :     request->callback = LoaderCallBack;

	mov	edx, DWORD PTR _request$[ebp]
	mov	DWORD PTR [edx+8], OFFSET ?LoaderCallBack@TextureBankClass@@KAXPAULoaderQ@@@Z ; TextureBankClass::LoaderCallBack

; 407  :     request->parameter = (void*)state;

	mov	eax, DWORD PTR _request$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 408  : 
; 409  :     // Submit the request to the asynchronous loader
; 410  :     TheLoader.EnqueueRequest(request);

	mov	edx, DWORD PTR _request$[ebp]
	push	edx
	mov	ecx, OFFSET ?TheLoader@@3VLoader@@A	; TheLoader
	call	?EnqueueRequest@Loader@@QAEXPAULoaderQ@@@Z ; Loader::EnqueueRequest
$LN3@SetDeferre:

; 411  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?SetDeferredLoad@TextureBankClass@@SAXH@Z ENDP		; TextureBankClass::SetDeferredLoad
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\texbank.cpp
_TEXT	SEGMENT
?RestoreAll@TextureBankClass@@SAXXZ PROC		; TextureBankClass::RestoreAll

; 489  : {

	push	ebp
	mov	ebp, esp

; 490  : }

	pop	ebp
	ret	0
?RestoreAll@TextureBankClass@@SAXXZ ENDP		; TextureBankClass::RestoreAll
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\texbank.cpp
_TEXT	SEGMENT
_id$ = 8						; size = 4
?Select@TextureBankClass@@SAXH@Z PROC			; TextureBankClass::Select

; 473  : {

	push	ebp
	mov	ebp, esp

; 474  : }

	pop	ebp
	ret	0
?Select@TextureBankClass@@SAXH@Z ENDP			; TextureBankClass::Select
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\texbank.cpp
_TEXT	SEGMENT
_id$ = 8						; size = 4
?Release@TextureBankClass@@SAXH@Z PROC			; TextureBankClass::Release

; 309  : {

	push	ebp
	mov	ebp, esp

; 310  :     ShiAssert(IsValidIndex(id));
; 311  :     ShiAssert(TexturePool[id].refCount >= 0);
; 312  : 
; 313  :     // RED - no reference, no party... !!!!!
; 314  :     if (!TexturePool[id].refCount) 

	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	cmp	DWORD PTR [ecx+eax+60], 0
	jne	SHORT $LN4@Release

; 315  :         return;

	jmp	$LN5@Release
$LN4@Release:

; 316  : 
; 317  :     TexturePool[id].refCount--;

	mov	edx, DWORD PTR _id$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	ecx, DWORD PTR [eax+edx+60]
	sub	ecx, 1
	mov	edx, DWORD PTR _id$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [eax+edx+60], ecx

; 318  : 
; 319  :     if (TexturePool[id].refCount == 0)

	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	cmp	DWORD PTR [edx+ecx+60], 0
	jne	SHORT $LN5@Release

; 320  :     {
; 321  :         if (!TexFlags[id].OnRelease)

	mov	eax, DWORD PTR _id$[ebp]
	mov	ecx, DWORD PTR ?TexFlags@TextureBankClass@@1PAUTexFlagsType@@A ; TextureBankClass::TexFlags
	movsx	edx, BYTE PTR [ecx+eax*2+1]
	test	edx, edx
	jne	SHORT $LN5@Release

; 322  :         {
; 323  :             TexFlags[id].OnRelease = true;

	mov	eax, DWORD PTR _id$[ebp]
	mov	ecx, DWORD PTR ?TexFlags@TextureBankClass@@1PAUTexFlagsType@@A ; TextureBankClass::TexFlags
	mov	BYTE PTR [ecx+eax*2+1], 1

; 324  :             // put into load cache
; 325  :             CacheRelease[ReleaseIn++] = id;

	movsx	edx, WORD PTR ?ReleaseIn@TextureBankClass@@1FA ; TextureBankClass::ReleaseIn
	mov	eax, DWORD PTR ?CacheRelease@TextureBankClass@@1PAFA ; TextureBankClass::CacheRelease
	mov	cx, WORD PTR _id$[ebp]
	mov	WORD PTR [eax+edx*2], cx
	mov	dx, WORD PTR ?ReleaseIn@TextureBankClass@@1FA ; TextureBankClass::ReleaseIn
	add	dx, 1
	mov	WORD PTR ?ReleaseIn@TextureBankClass@@1FA, dx ; TextureBankClass::ReleaseIn

; 326  : 
; 327  :             // Ring the pointer
; 328  :             if (ReleaseIn >= (nTextures + CACHE_MARGIN)) ReleaseIn = 0;

	movsx	eax, WORD PTR ?ReleaseIn@TextureBankClass@@1FA ; TextureBankClass::ReleaseIn
	mov	ecx, DWORD PTR ?nTextures@TextureBankClass@@2HA ; TextureBankClass::nTextures
	add	ecx, 32					; 00000020H
	cmp	eax, ecx
	jl	SHORT $LN1@Release
	xor	edx, edx
	mov	WORD PTR ?ReleaseIn@TextureBankClass@@1FA, dx ; TextureBankClass::ReleaseIn
$LN1@Release:

; 329  : 
; 330  :             // Kick the Loader
; 331  :             TheLoader.WakeUp();

	mov	ecx, OFFSET ?TheLoader@@3VLoader@@A	; TheLoader
	call	?WakeUp@Loader@@QAEXXZ			; Loader::WakeUp
$LN5@Release:

; 332  :         }
; 333  :     }
; 334  : }

	pop	ebp
	ret	0
?Release@TextureBankClass@@SAXH@Z ENDP			; TextureBankClass::Release
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\texbank.cpp
_TEXT	SEGMENT
_isLoaded$ = -8						; size = 4
_temp$ = -2						; size = 1
tv67 = -1						; size = 1
_id$ = 8						; size = 4
?Reference@TextureBankClass@@SAXH@Z PROC		; TextureBankClass::Reference

; 248  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 249  :     int  isLoaded;
; 250  : 
; 251  :     gDebugTextureID = id;

	mov	eax, DWORD PTR _id$[ebp]
	mov	DWORD PTR ?gDebugTextureID@@3KA, eax	; gDebugTextureID

; 252  : 
; 253  : 	bool temp = IsValidIndex(id);

	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	call	?IsValidIndex@TextureBankClass@@SAHH@Z	; TextureBankClass::IsValidIndex
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@Reference
	mov	BYTE PTR tv67[ebp], 1
	jmp	SHORT $LN9@Reference
$LN8@Reference:
	mov	BYTE PTR tv67[ebp], 0
$LN9@Reference:
	mov	dl, BYTE PTR tv67[ebp]
	mov	BYTE PTR _temp$[ebp], dl

; 254  : 
; 255  :     ShiAssert(IsValidIndex(id));
; 256  : 
; 257  :     // Get our reference to this texture recorded to ensure it doesn't disappear out from under us
; 258  :     //EnterCriticalSection(&ObjectLOD::cs_ObjectLOD);
; 259  : 
; 260  :     isLoaded = TexturePool[id].refCount;

	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	edx, DWORD PTR [ecx+eax+60]
	mov	DWORD PTR _isLoaded$[ebp], edx

; 261  :     ShiAssert(isLoaded >= 0);
; 262  :     TexturePool[id].refCount++;

	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	edx, DWORD PTR [ecx+eax+60]
	add	edx, 1
	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [ecx+eax+60], edx

; 263  : 
; 264  :     // If we already have the data, just verify that fact. Otherwise, load it.
; 265  :     if (isLoaded)

	cmp	DWORD PTR _isLoaded$[ebp], 0
	je	SHORT $LN5@Reference

; 266  :     {
; 267  :         ;
; 268  :     }
; 269  :     else

	jmp	$LN4@Reference
$LN5@Reference:

; 270  :     {
; 271  :         ShiAssert(TexFileMap.IsReady());
; 272  :         ShiAssert(CompressedBuffer);
; 273  :         if(TexturePool[id].tex.imageData != NULL)

	mov	edx, DWORD PTR _id$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	cmp	DWORD PTR [eax+edx+12], 0
	je	SHORT $LN3@Reference

; 274  :             return;

	jmp	$LN6@Reference
$LN3@Reference:

; 275  :         ShiAssert(TexturePool[id].tex.TexHandle() == NULL);
; 276  : 
; 277  :         // Get the palette pointer
; 278  :         // would be great if we could set a flag saying this palette comes from bank...
; 279  :         // but since we cannot add anything to texture structure (because Jammer read them
; 280  :         // directly from file instead of from a method) I make the check when releasing
; 281  :         // the palette.
; 282  :         TexturePool[id].tex.SetPalette(&ThePaletteBank.PalettePool[TexturePool[id].palID]);

	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	eax, DWORD PTR [edx+ecx+56]
	imul	eax, 1032				; 00000408H
	add	eax, DWORD PTR ?PalettePool@PaletteBankClass@@2PAVPalette@@A ; PaletteBankClass::PalettePool
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	lea	ecx, DWORD PTR [edx+ecx+8]
	call	?SetPalette@Texture@@QAEXPAVPalette@@@Z	; Texture::SetPalette

; 283  :         ShiAssert(TexturePool[id].tex.GetPalette());
; 284  :         TexturePool[id].tex.GetPalette()->Reference();

	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	lea	ecx, DWORD PTR [ecx+eax+8]
	call	?GetPalette@Texture@@QAEPAVPalette@@XZ	; Texture::GetPalette
	mov	ecx, eax
	call	?Reference@Palette@@QAEXXZ		; Palette::Reference

; 285  : 
; 286  :         // Mark for the request if not already marked
; 287  :         if (!TexFlags[id].OnOrder)

	mov	edx, DWORD PTR _id$[ebp]
	mov	eax, DWORD PTR ?TexFlags@TextureBankClass@@1PAUTexFlagsType@@A ; TextureBankClass::TexFlags
	movsx	ecx, BYTE PTR [eax+edx*2]
	test	ecx, ecx
	jne	SHORT $LN4@Reference

; 288  :         {
; 289  :             TexFlags[id].OnOrder = true;

	mov	edx, DWORD PTR _id$[ebp]
	mov	eax, DWORD PTR ?TexFlags@TextureBankClass@@1PAUTexFlagsType@@A ; TextureBankClass::TexFlags
	mov	BYTE PTR [eax+edx*2], 1

; 290  :             // put into load cache
; 291  :             CacheLoad[LoadIn++] = id;

	movsx	ecx, WORD PTR ?LoadIn@TextureBankClass@@1FA ; TextureBankClass::LoadIn
	mov	edx, DWORD PTR ?CacheLoad@TextureBankClass@@1PAFA ; TextureBankClass::CacheLoad
	mov	ax, WORD PTR _id$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	mov	cx, WORD PTR ?LoadIn@TextureBankClass@@1FA ; TextureBankClass::LoadIn
	add	cx, 1
	mov	WORD PTR ?LoadIn@TextureBankClass@@1FA, cx ; TextureBankClass::LoadIn

; 292  : 
; 293  :             // Ring the pointer
; 294  :             if (LoadIn >= (nTextures + CACHE_MARGIN)) LoadIn = 0;

	movsx	edx, WORD PTR ?LoadIn@TextureBankClass@@1FA ; TextureBankClass::LoadIn
	mov	eax, DWORD PTR ?nTextures@TextureBankClass@@2HA ; TextureBankClass::nTextures
	add	eax, 32					; 00000020H
	cmp	edx, eax
	jl	SHORT $LN1@Reference
	xor	ecx, ecx
	mov	WORD PTR ?LoadIn@TextureBankClass@@1FA, cx ; TextureBankClass::LoadIn
$LN1@Reference:

; 295  : 
; 296  :             // Kick the Loader
; 297  :             TheLoader.WakeUp();

	mov	ecx, OFFSET ?TheLoader@@3VLoader@@A	; TheLoader
	call	?WakeUp@Loader@@QAEXXZ			; Loader::WakeUp
$LN4@Reference:

; 298  : 
; 299  :         }
; 300  : 
; 301  :     }
; 302  : 
; 303  :     gDebugTextureID = -1;

	mov	DWORD PTR ?gDebugTextureID@@3KA, -1	; gDebugTextureID
$LN6@Reference:

; 304  : 
; 305  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Reference@TextureBankClass@@SAXH@Z ENDP		; TextureBankClass::Reference
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\texbank.cpp
_TEXT	SEGMENT
_id$ = -4						; size = 4
?FlushHandles@TextureBankClass@@SAXXZ PROC		; TextureBankClass::FlushHandles

; 456  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 457  :     int id;
; 458  : 
; 459  :     for (id = 0; id < nTextures; id++)

	mov	DWORD PTR _id$[ebp], 0
	jmp	SHORT $LN5@FlushHandl
$LN4@FlushHandl:
	mov	eax, DWORD PTR _id$[ebp]
	add	eax, 1
	mov	DWORD PTR _id$[ebp], eax
$LN5@FlushHandl:
	mov	ecx, DWORD PTR _id$[ebp]
	cmp	ecx, DWORD PTR ?nTextures@TextureBankClass@@2HA ; TextureBankClass::nTextures
	jge	SHORT $LN3@FlushHandl
$LN2@FlushHandl:

; 460  :     {
; 461  :         //ShiAssert(TexturePool[id].refCount == 0);
; 462  : 
; 463  :         while (TexturePool[id].refCount > 0)

	mov	edx, DWORD PTR _id$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	cmp	DWORD PTR [eax+edx+60], 0
	jle	SHORT $LN1@FlushHandl

; 464  :         {
; 465  :             Release(id);

	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	call	?Release@TextureBankClass@@SAXH@Z	; TextureBankClass::Release
	add	esp, 4

; 466  :         }

	jmp	SHORT $LN2@FlushHandl
$LN1@FlushHandl:

; 467  :     }

	jmp	SHORT $LN4@FlushHandl
$LN3@FlushHandl:

; 468  : 
; 469  :     WaitUpdates();

	call	?WaitUpdates@TextureBankClass@@SAXXZ	; TextureBankClass::WaitUpdates

; 470  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FlushHandles@TextureBankClass@@SAXXZ ENDP		; TextureBankClass::FlushHandles
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\texbank.cpp
_TEXT	SEGMENT
$T1 = -856						; size = 4
_maxCompressedSize$ = -852				; size = 4
_result$ = -848						; size = 4
_i$2 = -844						; size = 4
_buffer$3 = -840					; size = 580
_message$4 = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_file$ = 8						; size = 4
_basename$ = 12						; size = 4
?ReadPool@TextureBankClass@@SAXHPAD@Z PROC		; TextureBankClass::ReadPool

; 128  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 856				; 00000358H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi

; 129  :     int result;
; 130  :     int maxCompressedSize;
; 131  : 
; 132  :     ZeroMemory(baseName, sizeof(baseName));

	push	256					; 00000100H
	push	0
	push	OFFSET ?baseName@TextureBankClass@@1PADA ; TextureBankClass::baseName
	call	_memset
	add	esp, 12					; 0000000cH

; 133  :     sprintf(baseName, "%s", basename);

	mov	eax, DWORD PTR _basename$[ebp]
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	OFFSET ?baseName@TextureBankClass@@1PADA ; TextureBankClass::baseName
	call	_sprintf
	add	esp, 12					; 0000000cH

; 134  : 
; 135  :     // Read the number of textures in the pool
; 136  :     result = read(file, &nTextures, sizeof(nTextures));

	push	4
	push	OFFSET ?nTextures@TextureBankClass@@2HA	; TextureBankClass::nTextures
	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	call	_read
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax

; 137  : 
; 138  :     if (nTextures == 0) return;

	cmp	DWORD PTR ?nTextures@TextureBankClass@@2HA, 0 ; TextureBankClass::nTextures
	jne	SHORT $LN7@ReadPool
	jmp	$LN9@ReadPool
$LN7@ReadPool:

; 139  : 
; 140  :     // Read the size of the biggest compressed texture in the pool
; 141  :     result = read(file, &maxCompressedSize, sizeof(maxCompressedSize));

	push	4
	lea	edx, DWORD PTR _maxCompressedSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_read
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax

; 142  : 
; 143  :     // HACK - KO.dxh version - Note maxCompressedSize is used for the old BMP
; 144  :     // textures, not DDS textures.
; 145  :     nVer = maxCompressedSize;

	mov	ecx, DWORD PTR _maxCompressedSize$[ebp]
	mov	DWORD PTR ?nVer@@3HA, ecx		; nVer

; 146  : 
; 147  : #ifdef USE_SH_POOLS
; 148  :     CompressedBuffer = (BYTE *)MemAllocPtr(gBSPLibMemPool, sizeof(BYTE) * maxCompressedSize, 0);
; 149  : #else
; 150  :     CompressedBuffer = new BYTE[maxCompressedSize];

	mov	edx, DWORD PTR _maxCompressedSize$[ebp]
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR ?CompressedBuffer@TextureBankClass@@1PAEA, eax ; TextureBankClass::CompressedBuffer

; 151  : #endif
; 152  :     ShiAssert(CompressedBuffer);
; 153  : 
; 154  :     if (CompressedBuffer)

	cmp	DWORD PTR ?CompressedBuffer@TextureBankClass@@1PAEA, 0 ; TextureBankClass::CompressedBuffer
	je	SHORT $LN6@ReadPool

; 155  :     {
; 156  :         ZeroMemory(CompressedBuffer, maxCompressedSize);

	mov	ecx, DWORD PTR _maxCompressedSize$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR ?CompressedBuffer@TextureBankClass@@1PAEA ; TextureBankClass::CompressedBuffer
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
$LN6@ReadPool:

; 157  :     }
; 158  : 
; 159  :     // Setup the pool
; 160  :     Setup(nTextures);

	mov	eax, DWORD PTR ?nTextures@TextureBankClass@@2HA ; TextureBankClass::nTextures
	push	eax
	call	?Setup@TextureBankClass@@SAXH@Z		; TextureBankClass::Setup
	add	esp, 4

; 161  : 
; 162  :     // sfr: Ok some ????? did this and now we cannot change Texture class a bit
; 163  :     // since this stop working
; 164  :     result = read(file, TempTexturePool, sizeof(*TempTexturePool) * nTextures);

	mov	ecx, DWORD PTR ?nTextures@TextureBankClass@@2HA ; TextureBankClass::nTextures
	imul	ecx, 40					; 00000028H
	push	ecx
	mov	edx, DWORD PTR ?TempTexturePool@TextureBankClass@@2PAUTempTexBankEntry@@A ; TextureBankClass::TempTexturePool
	push	edx
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_read
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax

; 165  : 
; 166  :     if (result < 0)

	cmp	DWORD PTR _result$[ebp], 0
	jge	SHORT $LN5@ReadPool

; 167  :     {
; 168  :         char message[256];
; 169  :         sprintf(message, "Reading object texture bank: %s", strerror(errno));

	call	__errno
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_strerror
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0CA@MCLDJOEI@Reading?5object?5texture?5bank?3?5?$CFs?$AA@
	lea	edx, DWORD PTR _message$4[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 170  :         ShiError(message);

	push	OFFSET ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
	push	OFFSET ??_C@_0M@GHJDMFO@TexBank?4cpp?$AA@
	push	170					; 000000aaH
	push	OFFSET ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
	lea	eax, DWORD PTR _buffer$3[ebp]
	push	eax
	call	_sprintf
	add	esp, 20					; 00000014H
	push	0
	lea	ecx, DWORD PTR _message$4[ebp]
	push	ecx
	lea	edx, DWORD PTR _buffer$3[ebp]
	push	edx
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	push	-1
	call	_exit
$LN5@ReadPool:

; 171  :     }
; 172  : 
; 173  :     for (int i = 0; i < nTextures; i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@ReadPool
$LN3@ReadPool:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@ReadPool:
	mov	ecx, DWORD PTR _i$2[ebp]
	cmp	ecx, DWORD PTR ?nTextures@TextureBankClass@@2HA ; TextureBankClass::nTextures
	jge	$LN2@ReadPool

; 174  :     {
; 175  :         TexturePool[i].fileOffset = TempTexturePool[i].fileOffset;

	mov	edx, DWORD PTR _i$2[ebp]
	imul	edx, 40					; 00000028H
	mov	eax, DWORD PTR _i$2[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	esi, DWORD PTR ?TempTexturePool@TextureBankClass@@2PAUTempTexBankEntry@@A ; TextureBankClass::TempTexturePool
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [ecx+eax], edx

; 176  :         TexturePool[i].fileSize = TempTexturePool[i].fileSize;

	mov	eax, DWORD PTR _i$2[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR _i$2[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	esi, DWORD PTR ?TempTexturePool@TextureBankClass@@2PAUTempTexBankEntry@@A ; TextureBankClass::TempTexturePool
	mov	eax, DWORD PTR [esi+eax+4]
	mov	DWORD PTR [edx+ecx+4], eax

; 177  : 
; 178  :         TexturePool[i].tex = TempTexturePool[i].tex;

	mov	ecx, DWORD PTR _i$2[ebp]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR ?TempTexturePool@TextureBankClass@@2PAUTempTexBankEntry@@A ; TextureBankClass::TempTexturePool
	lea	eax, DWORD PTR [edx+ecx+8]
	mov	ecx, DWORD PTR _i$2[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	lea	ecx, DWORD PTR [edx+ecx+8]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], eax

; 179  :         TexturePool[i].tex.flags |= MPR_TI_INVALID;

	mov	ecx, DWORD PTR _i$2[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	eax, DWORD PTR [edx+ecx+16]
	or	eax, 1048576				; 00100000H
	mov	ecx, DWORD PTR _i$2[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [edx+ecx+16], eax

; 180  :         TexturePool[i].texN = TempTexturePool[i].tex;

	mov	eax, DWORD PTR _i$2[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR ?TempTexturePool@TextureBankClass@@2PAUTempTexBankEntry@@A ; TextureBankClass::TempTexturePool
	lea	edx, DWORD PTR [ecx+eax+8]
	mov	eax, DWORD PTR _i$2[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	lea	eax, DWORD PTR [ecx+eax+32]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], ecx
	mov	ecx, DWORD PTR [edx+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR [edx+20]
	mov	DWORD PTR [eax+20], edx

; 181  :         TexturePool[i].texN.flags |= MPR_TI_INVALID;

	mov	eax, DWORD PTR _i$2[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	edx, DWORD PTR [ecx+eax+40]
	or	edx, 1048576				; 00100000H
	mov	eax, DWORD PTR _i$2[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [ecx+eax+40], edx

; 182  : 
; 183  :         if (DisplayOptions.bMipmapping)

	movzx	edx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+15
	test	edx, edx
	je	SHORT $LN1@ReadPool

; 184  :         {
; 185  :             TexturePool[i].tex.flags |= MPR_TI_MIPMAP;

	mov	eax, DWORD PTR _i$2[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	edx, DWORD PTR [ecx+eax+16]
	or	edx, 1
	mov	eax, DWORD PTR _i$2[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [ecx+eax+16], edx

; 186  :             TexturePool[i].texN.flags |= MPR_TI_MIPMAP;

	mov	edx, DWORD PTR _i$2[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	ecx, DWORD PTR [eax+edx+40]
	or	ecx, 1
	mov	edx, DWORD PTR _i$2[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [eax+edx+40], ecx
$LN1@ReadPool:

; 187  :         }
; 188  : 
; 189  :         TexturePool[i].palID = 0;//TempTexturePool[i].palID;

	mov	ecx, DWORD PTR _i$2[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [edx+ecx+56], 0

; 190  :         TexturePool[i].refCount = 0;//TempTexturePool[i].refCount;

	mov	eax, DWORD PTR _i$2[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR [ecx+eax+60], 0

; 191  :     }

	jmp	$LN3@ReadPool
$LN2@ReadPool:

; 192  : 
; 193  : 
; 194  : 
; 195  :     OpenTextureFile();

	call	?OpenTextureFile@TextureBankClass@@KAXXZ ; TextureBankClass::OpenTextureFile
$LN9@ReadPool:

; 196  : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ReadPool@TextureBankClass@@SAXHPAD@Z ENDP		; TextureBankClass::ReadPool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\texbank.cpp
_TEXT	SEGMENT
$T1 = -28						; size = 4
tv73 = -24						; size = 4
$T2 = -20						; size = 4
tv68 = -16						; size = 4
$T3 = -12						; size = 4
$T4 = -8						; size = 4
$T5 = -4						; size = 4
?Cleanup@TextureBankClass@@SAXXZ PROC			; TextureBankClass::Cleanup

; 87   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 88   :     // wait for any update on textures
; 89   :     WaitUpdates();

	call	?WaitUpdates@TextureBankClass@@SAXXZ	; TextureBankClass::WaitUpdates

; 90   :     // Clean up our array of texture headers
; 91   : #ifdef USE_SH_POOLS
; 92   :     MemFreePtr(TexturePool);
; 93   :     MemFreePtr(TempTexturePool);
; 94   : #else
; 95   :     delete[] TexturePool;

	mov	eax, DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A ; TextureBankClass::TexturePool
	mov	DWORD PTR $T3[ebp], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T5[ebp], ecx
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN7@Cleanup
	push	3
	mov	ecx, DWORD PTR $T5[ebp]
	call	??_ETexBankEntry@@QAEPAXI@Z
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN8@Cleanup
$LN7@Cleanup:
	mov	DWORD PTR tv68[ebp], 0
$LN8@Cleanup:

; 96   :     delete[] TempTexturePool;

	mov	edx, DWORD PTR ?TempTexturePool@TextureBankClass@@2PAUTempTexBankEntry@@A ; TextureBankClass::TempTexturePool
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T4[ebp], eax
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN9@Cleanup
	push	3
	mov	ecx, DWORD PTR $T4[ebp]
	call	??_ETempTexBankEntry@@QAEPAXI@Z
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN10@Cleanup
$LN9@Cleanup:
	mov	DWORD PTR tv73[ebp], 0
$LN10@Cleanup:

; 97   : #endif
; 98   :     TexturePool = NULL;

	mov	DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A, 0 ; TextureBankClass::TexturePool

; 99   :     TempTexturePool = NULL;

	mov	DWORD PTR ?TempTexturePool@TextureBankClass@@2PAUTempTexBankEntry@@A, 0 ; TextureBankClass::TempTexturePool

; 100  :     nTextures = 0;

	mov	DWORD PTR ?nTextures@TextureBankClass@@2HA, 0 ; TextureBankClass::nTextures

; 101  : 
; 102  :     if (TexFlags) free(TexFlags), TexFlags = NULL;

	cmp	DWORD PTR ?TexFlags@TextureBankClass@@1PAUTexFlagsType@@A, 0 ; TextureBankClass::TexFlags
	je	SHORT $LN4@Cleanup
	mov	ecx, DWORD PTR ?TexFlags@TextureBankClass@@1PAUTexFlagsType@@A ; TextureBankClass::TexFlags
	push	ecx
	call	_free
	add	esp, 4
	mov	DWORD PTR ?TexFlags@TextureBankClass@@1PAUTexFlagsType@@A, 0 ; TextureBankClass::TexFlags
$LN4@Cleanup:

; 103  : 
; 104  :     // Clean up the decompression buffer
; 105  : #ifdef USE_SH_POOLS
; 106  :     MemFreePtr(CompressedBuffer);
; 107  : #else
; 108  :     delete[] CompressedBuffer;

	mov	edx, DWORD PTR ?CompressedBuffer@TextureBankClass@@1PAEA ; TextureBankClass::CompressedBuffer
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 109  : #endif
; 110  :     CompressedBuffer = NULL;

	mov	DWORD PTR ?CompressedBuffer@TextureBankClass@@1PAEA, 0 ; TextureBankClass::CompressedBuffer

; 111  : 
; 112  :     RatedLoad = false;

	mov	BYTE PTR ?RatedLoad@TextureBankClass@@1_NA, 0 ; TextureBankClass::RatedLoad

; 113  : 
; 114  :     if (CacheLoad)  free(CacheLoad), CacheLoad = NULL;

	cmp	DWORD PTR ?CacheLoad@TextureBankClass@@1PAFA, 0 ; TextureBankClass::CacheLoad
	je	SHORT $LN3@Cleanup
	mov	ecx, DWORD PTR ?CacheLoad@TextureBankClass@@1PAFA ; TextureBankClass::CacheLoad
	push	ecx
	call	_free
	add	esp, 4
	mov	DWORD PTR ?CacheLoad@TextureBankClass@@1PAFA, 0 ; TextureBankClass::CacheLoad
$LN3@Cleanup:

; 115  : 
; 116  :     if (CacheRelease)  free(CacheRelease), CacheRelease = NULL;

	cmp	DWORD PTR ?CacheRelease@TextureBankClass@@1PAFA, 0 ; TextureBankClass::CacheRelease
	je	SHORT $LN2@Cleanup
	mov	edx, DWORD PTR ?CacheRelease@TextureBankClass@@1PAFA ; TextureBankClass::CacheRelease
	push	edx
	call	_free
	add	esp, 4
	mov	DWORD PTR ?CacheRelease@TextureBankClass@@1PAFA, 0 ; TextureBankClass::CacheRelease
$LN2@Cleanup:

; 117  : 
; 118  :     LoadIn = LoadOut = ReleaseIn = ReleaseOut = 0;

	xor	eax, eax
	mov	WORD PTR ?ReleaseOut@TextureBankClass@@1FA, ax ; TextureBankClass::ReleaseOut
	mov	cx, WORD PTR ?ReleaseOut@TextureBankClass@@1FA ; TextureBankClass::ReleaseOut
	mov	WORD PTR ?ReleaseIn@TextureBankClass@@1FA, cx ; TextureBankClass::ReleaseIn
	mov	dx, WORD PTR ?ReleaseIn@TextureBankClass@@1FA ; TextureBankClass::ReleaseIn
	mov	WORD PTR ?LoadOut@TextureBankClass@@1FA, dx ; TextureBankClass::LoadOut
	mov	ax, WORD PTR ?LoadOut@TextureBankClass@@1FA ; TextureBankClass::LoadOut
	mov	WORD PTR ?LoadIn@TextureBankClass@@1FA, ax ; TextureBankClass::LoadIn

; 119  : 
; 120  :     // Close our texture resource file
; 121  :     if (TexFileMap.IsReady())

	mov	ecx, OFFSET ?TexFileMap@TextureBankClass@@1VFileMemMap@@A ; TextureBankClass::TexFileMap
	call	?IsReady@FileMemMap@@QAEHXZ		; FileMemMap::IsReady
	test	eax, eax
	je	SHORT $LN5@Cleanup

; 122  :     {
; 123  :         CloseTextureFile();

	call	?CloseTextureFile@TextureBankClass@@KAXXZ ; TextureBankClass::CloseTextureFile
$LN5@Cleanup:

; 124  :     }
; 125  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Cleanup@TextureBankClass@@SAXXZ ENDP			; TextureBankClass::Cleanup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\texbank.cpp
_TEXT	SEGMENT
$T2 = -44						; size = 4
$T3 = -40						; size = 4
tv141 = -36						; size = 4
tv87 = -32						; size = 4
$T4 = -28						; size = 4
$T5 = -24						; size = 4
$T6 = -20						; size = 4
$T7 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nEntries$ = 8						; size = 4
?Setup@TextureBankClass@@SAXH@Z PROC			; TextureBankClass::Setup

; 52   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Setup@TextureBankClass@@SAXH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 53   :     // Create our array of texture headers
; 54   :     nTextures = nEntries;

	mov	eax, DWORD PTR _nEntries$[ebp]
	mov	DWORD PTR ?nTextures@TextureBankClass@@2HA, eax ; TextureBankClass::nTextures

; 55   : 
; 56   :     if (nEntries)

	cmp	DWORD PTR _nEntries$[ebp], 0
	je	$LN2@Setup

; 57   :     {
; 58   : #ifdef USE_SH_POOLS
; 59   :         TexturePool = (TexBankEntry *)MemAllocPtr(gBSPLibMemPool, sizeof(TexBankEntry) * nEntries, 0);
; 60   :         TempTexturePool = (TempTexBankEntry *)MemAllocPtr(gBSPLibMemPool, sizeof(TempTexBankEntry) * nEntries, 0);
; 61   : #else
; 62   :         TexturePool = new TexBankEntry[nEntries];

	mov	ecx, DWORD PTR _nEntries$[ebp]
	mov	DWORD PTR $T5[ebp], ecx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T5[ebp]
	mov	edx, 64					; 00000040H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN5@Setup
	mov	ecx, DWORD PTR $T7[ebp]
	mov	edx, DWORD PTR $T5[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1TexBankEntry@@QAE@XZ
	push	OFFSET ??0TexBankEntry@@QAE@XZ
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	push	64					; 00000040H
	mov	ecx, DWORD PTR $T7[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T7[ebp]
	add	edx, 4
	mov	DWORD PTR tv87[ebp], edx
	jmp	SHORT $LN6@Setup
$LN5@Setup:
	mov	DWORD PTR tv87[ebp], 0
$LN6@Setup:
	mov	eax, DWORD PTR tv87[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A, ecx ; TextureBankClass::TexturePool

; 63   :         TempTexturePool = new TempTexBankEntry[nEntries];

	mov	edx, DWORD PTR _nEntries$[ebp]
	mov	DWORD PTR $T4[ebp], edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T4[ebp]
	mov	edx, 40					; 00000028H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN7@Setup
	mov	ecx, DWORD PTR $T6[ebp]
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1TempTexBankEntry@@QAE@XZ
	push	OFFSET ??0TempTexBankEntry@@QAE@XZ
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	push	40					; 00000028H
	mov	ecx, DWORD PTR $T6[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T6[ebp]
	add	edx, 4
	mov	DWORD PTR tv141[ebp], edx
	jmp	SHORT $LN8@Setup
$LN7@Setup:
	mov	DWORD PTR tv141[ebp], 0
$LN8@Setup:
	mov	eax, DWORD PTR tv141[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR ?TempTexturePool@TextureBankClass@@2PAUTempTexBankEntry@@A, ecx ; TextureBankClass::TempTexturePool

; 64   : #endif
; 65   : 
; 66   :         TexFlags = (TexFlagsType*) malloc(nTextures * sizeof(TexFlagsType));

	mov	edx, DWORD PTR ?nTextures@TextureBankClass@@2HA ; TextureBankClass::nTextures
	shl	edx, 1
	push	edx
	call	_malloc
	add	esp, 4
	mov	DWORD PTR ?TexFlags@TextureBankClass@@1PAUTexFlagsType@@A, eax ; TextureBankClass::TexFlags

; 67   :         memset(TexFlags, 0, nTextures *  sizeof(TexFlagsType));

	mov	eax, DWORD PTR ?nTextures@TextureBankClass@@2HA ; TextureBankClass::nTextures
	shl	eax, 1
	push	eax
	push	0
	mov	ecx, DWORD PTR ?TexFlags@TextureBankClass@@1PAUTexFlagsType@@A ; TextureBankClass::TexFlags
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 68   :         // Allocte acche with a little safety margin
; 69   :         CacheLoad = (short*) malloc(sizeof(short) * (nTextures + CACHE_MARGIN));

	mov	edx, DWORD PTR ?nTextures@TextureBankClass@@2HA ; TextureBankClass::nTextures
	lea	eax, DWORD PTR [edx+edx+64]
	push	eax
	call	_malloc
	add	esp, 4
	mov	DWORD PTR ?CacheLoad@TextureBankClass@@1PAFA, eax ; TextureBankClass::CacheLoad

; 70   :         CacheRelease = (short*) malloc(sizeof(short) * (nTextures + CACHE_MARGIN));

	mov	ecx, DWORD PTR ?nTextures@TextureBankClass@@2HA ; TextureBankClass::nTextures
	lea	edx, DWORD PTR [ecx+ecx+64]
	push	edx
	call	_malloc
	add	esp, 4
	mov	DWORD PTR ?CacheRelease@TextureBankClass@@1PAFA, eax ; TextureBankClass::CacheRelease

; 71   :     }
; 72   :     else

	jmp	SHORT $LN1@Setup
$LN2@Setup:

; 73   :     {
; 74   :         TexturePool = NULL;

	mov	DWORD PTR ?TexturePool@TextureBankClass@@2PAUTexBankEntry@@A, 0 ; TextureBankClass::TexturePool

; 75   :         TempTexturePool = NULL;

	mov	DWORD PTR ?TempTexturePool@TextureBankClass@@2PAUTempTexBankEntry@@A, 0 ; TextureBankClass::TempTexturePool

; 76   :         TexFlags = NULL;

	mov	DWORD PTR ?TexFlags@TextureBankClass@@1PAUTexFlagsType@@A, 0 ; TextureBankClass::TexFlags

; 77   :         TexBuffer = NULL;

	mov	DWORD PTR ?TexBuffer@TextureBankClass@@1PAEA, 0 ; TextureBankClass::TexBuffer

; 78   :         CacheLoad = NULL;

	mov	DWORD PTR ?CacheLoad@TextureBankClass@@1PAFA, 0 ; TextureBankClass::CacheLoad

; 79   :         CacheRelease = NULL;

	mov	DWORD PTR ?CacheRelease@TextureBankClass@@1PAFA, 0 ; TextureBankClass::CacheRelease
$LN1@Setup:

; 80   :     }
; 81   : 
; 82   :     RatedLoad = true;

	mov	BYTE PTR ?RatedLoad@TextureBankClass@@1_NA, 1 ; TextureBankClass::RatedLoad

; 83   :     LoadIn = LoadOut = ReleaseIn = ReleaseOut = 0;

	xor	eax, eax
	mov	WORD PTR ?ReleaseOut@TextureBankClass@@1FA, ax ; TextureBankClass::ReleaseOut
	mov	cx, WORD PTR ?ReleaseOut@TextureBankClass@@1FA ; TextureBankClass::ReleaseOut
	mov	WORD PTR ?ReleaseIn@TextureBankClass@@1FA, cx ; TextureBankClass::ReleaseIn
	mov	dx, WORD PTR ?ReleaseIn@TextureBankClass@@1FA ; TextureBankClass::ReleaseIn
	mov	WORD PTR ?LoadOut@TextureBankClass@@1FA, dx ; TextureBankClass::LoadOut
	mov	ax, WORD PTR ?LoadOut@TextureBankClass@@1FA ; TextureBankClass::LoadOut
	mov	WORD PTR ?LoadIn@TextureBankClass@@1FA, ax ; TextureBankClass::LoadIn

; 84   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Setup@TextureBankClass@@SAXH@Z$0:
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__unwindfunclet$?Setup@TextureBankClass@@SAXH@Z$1:
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__ehhandler$?Setup@TextureBankClass@@SAXH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Setup@TextureBankClass@@SAXH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Setup@TextureBankClass@@SAXH@Z ENDP			; TextureBankClass::Setup
; Function compile flags: /Odtp
;	COMDAT ??_ETempTexBankEntry@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ETempTexBankEntry@@QAEPAXI@Z PROC			; TempTexBankEntry::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1TempTexBankEntry@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	40					; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TempTexBankEntry@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_ETempTexBankEntry@@QAEPAXI@Z ENDP			; TempTexBankEntry::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1TempTexBankEntry@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1TempTexBankEntry@@QAE@XZ PROC			; TempTexBankEntry::~TempTexBankEntry, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1Texture@@QAE@XZ			; Texture::~Texture
	mov	esp, ebp
	pop	ebp
	ret	0
??1TempTexBankEntry@@QAE@XZ ENDP			; TempTexBankEntry::~TempTexBankEntry
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0TempTexBankEntry@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0TempTexBankEntry@@QAE@XZ PROC			; TempTexBankEntry::TempTexBankEntry, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0Texture@@QAE@XZ			; Texture::Texture
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0TempTexBankEntry@@QAE@XZ ENDP			; TempTexBankEntry::TempTexBankEntry
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_ETexBankEntry@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ETexBankEntry@@QAEPAXI@Z PROC			; TexBankEntry::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1TexBankEntry@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	64					; 00000040H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TexBankEntry@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_ETexBankEntry@@QAEPAXI@Z ENDP			; TexBankEntry::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1TexBankEntry@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1TexBankEntry@@QAE@XZ PROC				; TexBankEntry::~TexBankEntry, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1TexBankEntry@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??1Texture@@QAE@XZ			; Texture::~Texture
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1Texture@@QAE@XZ			; Texture::~Texture
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1TexBankEntry@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1Texture@@QAE@XZ			; Texture::~Texture
__ehhandler$??1TexBankEntry@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1TexBankEntry@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1TexBankEntry@@QAE@XZ ENDP				; TexBankEntry::~TexBankEntry
; Function compile flags: /Odtp
;	COMDAT ??0TexBankEntry@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0TexBankEntry@@QAE@XZ PROC				; TexBankEntry::TexBankEntry, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0TexBankEntry@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0Texture@@QAE@XZ			; Texture::Texture
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0Texture@@QAE@XZ			; Texture::Texture
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0TexBankEntry@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1Texture@@QAE@XZ			; Texture::~Texture
__ehhandler$??0TexBankEntry@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0TexBankEntry@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0TexBankEntry@@QAE@XZ ENDP				; TexBankEntry::TexBankEntry
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tex.h
;	COMDAT ?TexHandle@Texture@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?TexHandle@Texture@@QAEKXZ PROC				; Texture::TexHandle, COMDAT
; _this$ = ecx

; 60   : 	DWORD TexHandle() { return (DWORD) texHandle; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?TexHandle@Texture@@QAEKXZ ENDP				; Texture::TexHandle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tex.h
;	COMDAT ?GetPalette@Texture@@QAEPAVPalette@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPalette@Texture@@QAEPAVPalette@@XZ PROC		; Texture::GetPalette, COMDAT
; _this$ = ecx

; 33   : 	Palette *GetPalette(){ return this->palette; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPalette@Texture@@QAEPAVPalette@@XZ ENDP		; Texture::GetPalette
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tex.h
;	COMDAT ?SetPalette@Texture@@QAEXPAVPalette@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
?SetPalette@Texture@@QAEXPAVPalette@@@Z PROC		; Texture::SetPalette, COMDAT
; _this$ = ecx

; 32   : 	void SetPalette(Palette *p){this->palette = p;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetPalette@Texture@@QAEXPAVPalette@@@Z ENDP		; Texture::SetPalette
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\filememmap.h
;	COMDAT ?IsReady@FileMemMap@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
?IsReady@FileMemMap@@QAEHXZ PROC			; FileMemMap::IsReady, COMDAT
; _this$ = ecx

; 23   :     BOOL IsReady() { return m_hFile != INVALID_HANDLE_VALUE; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], -1
	je	SHORT $LN3@IsReady
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@IsReady
$LN3@IsReady:
	mov	DWORD PTR tv66[ebp], 0
$LN4@IsReady:
	mov	eax, DWORD PTR tv66[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsReady@FileMemMap@@QAEHXZ ENDP			; FileMemMap::IsReady
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\grinline.h
;	COMDAT ?glAllocateMemory@@YAPAXHH@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_buf$ = -4						; size = 4
_totalbytes$ = 8					; size = 4
_clearit$ = 12						; size = 4
?glAllocateMemory@@YAPAXHH@Z PROC			; glAllocateMemory, COMDAT

; 21   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 22   : #ifdef USE_SH_POOLS
; 23   : 	char *buf = (char *)MemAllocPtr( glMemPool, totalbytes, 0 );
; 24   : #else
; 25   : 	char *buf = new char[totalbytes];

	mov	eax, DWORD PTR _totalbytes$[ebp]
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR _buf$[ebp], ecx

; 26   : #endif
; 27   : 	if (buf && clearit) memset (buf, 0, totalbytes);

	cmp	DWORD PTR _buf$[ebp], 0
	je	SHORT $LN1@glAllocate
	cmp	DWORD PTR _clearit$[ebp], 0
	je	SHORT $LN1@glAllocate
	mov	edx, DWORD PTR _totalbytes$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
$LN1@glAllocate:

; 28   : 	return buf;

	mov	eax, DWORD PTR _buf$[ebp]

; 29   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?glAllocateMemory@@YAPAXHH@Z ENDP			; glAllocateMemory
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\loader.h
;	COMDAT ?Paused@Loader@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?Paused@Loader@@QAEHXZ PROC				; Loader::Paused, COMDAT
; _this$ = ecx

; 55   : 	BOOL Paused( void )		{ return paused == PAUSED; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+84], 2
	jne	SHORT $LN3@Paused
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@Paused
$LN3@Paused:
	mov	DWORD PTR tv67[ebp], 0
$LN4@Paused:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?Paused@Loader@@QAEHXZ ENDP				; Loader::Paused
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\loader.h
;	COMDAT ?WakeUp@Loader@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?WakeUp@Loader@@QAEXXZ PROC				; Loader::WakeUp, COMDAT
; _this$ = ecx

; 48   : 	void WakeUp(void)			  { SetEvent( WakeEventHandle ); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	DWORD PTR __imp__SetEvent@4
	mov	esp, ebp
	pop	ebp
	ret	0
?WakeUp@Loader@@QAEXXZ ENDP				; Loader::WakeUp
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z PROC	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ENDP	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ PROC	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CComBSTR@ATL@@QAE@XZ			; ATL::CComBSTR::~CComBSTR
	mov	esp, ebp
	pop	ebp
	ret	0
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ ENDP	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\atlmfc\include\atlcomcli.h
;	COMDAT ??1CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CComBSTR@ATL@@QAE@XZ PROC				; ATL::CComBSTR::~CComBSTR, COMDAT
; _this$ = ecx

; 1656 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1657 :     ::SysFreeString(m_str);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__SysFreeString@4

; 1658 : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1CComBSTR@ATL@@QAE@XZ ENDP				; ATL::CComBSTR::~CComBSTR
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Where$[ebp]
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
