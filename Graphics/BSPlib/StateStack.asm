; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\Graphics\BSPlib\StateStack.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?VT@?$CVarTypeInfo@_J@ATL@@2GB			; ATL::CVarTypeInfo<__int64>::VT
PUBLIC	?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ ; ATL::CVarTypeInfo<__int64>::pmField
PUBLIC	___pobjMapEntryFirst
PUBLIC	___pobjMapEntryLast
PUBLIC	?VT@?$CVarTypeInfo@PA_J@ATL@@2GB		; ATL::CVarTypeInfo<__int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ ; ATL::CVarTypeInfo<__int64 *>::pmField
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?VT@?$CVarTypeInfo@_K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned __int64>::VT
PUBLIC	??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@	; `string'
PUBLIC	?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64>::pmField
PUBLIC	??_C@_08PICKODJL@FileType?$AA@			; `string'
PUBLIC	??_C@_09JKPGEJCH@Interface?$AA@			; `string'
PUBLIC	??_C@_08PPIOJEA@Hardware?$AA@			; `string'
PUBLIC	?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA	; ATL::_pPerfRegFunc
PUBLIC	??_C@_04IHBFOLAC@Mime?$AA@			; `string'
PUBLIC	?_pPerfUnRegFunc@ATL@@3P6AJXZA			; ATL::_pPerfUnRegFunc
PUBLIC	??_C@_03DDIMFGBA@SAM?$AA@			; `string'
PUBLIC	?_AtlRegisterPerUser@ATL@@3_NA			; ATL::_AtlRegisterPerUser
PUBLIC	??_C@_08LOPHEHKG@SECURITY?$AA@			; `string'
PUBLIC	??_C@_06FDHFNJBJ@SYSTEM?$AA@			; `string'
PUBLIC	??_C@_08KEKAJNJI@Software?$AA@			; `string'
PUBLIC	??_C@_07KJLOKDKB@TypeLib?$AA@			; `string'
PUBLIC	?VT@?$CVarTypeInfo@PA_K@ATL@@2GB		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
PUBLIC	__GUID_00000000_0000_0000_c000_000000000046
PUBLIC	?VT@?$CVarTypeInfo@M@ATL@@2GB			; ATL::CVarTypeInfo<float>::VT
PUBLIC	?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ ; ATL::CVarTypeInfo<float>::pmField
PUBLIC	__GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
PUBLIC	?VT@?$CVarTypeInfo@PAM@ATL@@2GB			; ATL::CVarTypeInfo<float *>::VT
PUBLIC	__GUID_00020400_0000_0000_c000_000000000046
PUBLIC	?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ ; ATL::CVarTypeInfo<float *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@N@ATL@@2GB			; ATL::CVarTypeInfo<double>::VT
PUBLIC	?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ ; ATL::CVarTypeInfo<double>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAN@ATL@@2GB			; ATL::CVarTypeInfo<double *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ ; ATL::CVarTypeInfo<double *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB	; ATL::CVarTypeInfo<tagVARIANT *>::VT
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	__GUID_0002e012_0000_0000_c000_000000000046
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?VT@?$CVarTypeInfo@PA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ ; ATL::CVarTypeInfo<wchar_t *>::pmField
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t * *>::VT
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ ; ATL::CVarTypeInfo<wchar_t * *>::pmField
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown *>::VT
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown *>::pmField
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown * *>::pmField
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	__GUID_0000010c_0000_0000_c000_000000000046
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch *>::VT
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch *>::pmField
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	??_C@_05GIBEAPNE@CLSID?$AA@			; `string'
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	_IID_IAxWinHostWindow
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch * *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY>::VT
PUBLIC	?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY>::pmField
PUBLIC	??_C@_05PDIKPLII@AppID?$AA@			; `string'
PUBLIC	?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY *>::VT
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY *>::pmField
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?chDirSep@ATL@@3DB				; ATL::chDirSep
PUBLIC	?chRightBracket@ATL@@3DB			; ATL::chRightBracket
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?chLeftBracket@ATL@@3DB				; ATL::chLeftBracket
PUBLIC	?chQuote@ATL@@3DB				; ATL::chQuote
PUBLIC	?chEquals@ATL@@3DB				; ATL::chEquals
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?szStringVal@ATL@@3QBDB				; ATL::szStringVal
PUBLIC	??_C@_01CPLAODJH@S?$AA@				; `string'
PUBLIC	?multiszStringVal@ATL@@3QBDB			; ATL::multiszStringVal
PUBLIC	_IID_IAxWinHostWindowLic
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	??_C@_01PLPBNMEI@M?$AA@				; `string'
PUBLIC	?szDwordVal@ATL@@3QBDB				; ATL::szDwordVal
PUBLIC	??_C@_01CKDDGHAB@D?$AA@				; `string'
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?szBinaryVal@ATL@@3QBDB				; ATL::szBinaryVal
PUBLIC	??_C@_01HMGJMAIH@B?$AA@				; `string'
PUBLIC	?szValToken@ATL@@3QBDB				; ATL::szValToken
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	??_C@_03LAIAPFCB@Val?$AA@			; `string'
PUBLIC	?szForceRemove@ATL@@3QBDB			; ATL::szForceRemove
PUBLIC	??_C@_0M@DBGDLGLL@ForceRemove?$AA@		; `string'
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?szNoRemove@ATL@@3QBDB				; ATL::szNoRemove
PUBLIC	??_C@_08KAAPDIAN@NoRemove?$AA@			; `string'
PUBLIC	?szDelete@ATL@@3QBDB				; ATL::szDelete
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	??_C@_06JBKGCNBB@Delete?$AA@			; `string'
PUBLIC	?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA	; ATL::CComApartment::ATL_CREATE_OBJECT
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	_IID_IAxWinAmbientDispatch
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A ; ATL::_pAtlAutoThreadModule
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?m_bInitFailed@CAtlBaseModule@ATL@@2_NA		; ATL::CAtlBaseModule::m_bInitFailed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?verts@@3HA					; verts
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	__GUID_00000000_0000_0000_0000_000000000000
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?MAX_VALUE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_VALUE
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?rgszNeverDelete@CRegParser@ATL@@1QBQBDB	; ATL::CRegParser::rgszNeverDelete
PUBLIC	?cbNeverDelete@CRegParser@ATL@@1HB		; ATL::CRegParser::cbNeverDelete
PUBLIC	?MAX_TYPE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_TYPE
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?Kpos@@3UTpoint@@A				; Kpos
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	_IID_IAxWinAmbientDispatchEx
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	_IID_IInternalConnection
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	__GUID_1cf2b120_547d_101b_8e65_08002b2bd119
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?_pAtlModule@ATL@@3PAVCAtlModule@1@A		; ATL::_pAtlModule
PUBLIC	?m_libid@CAtlModule@ATL@@2U_GUID@@A		; ATL::CAtlModule::m_libid
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	__GUID_00000146_0000_0000_c000_000000000046
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?Transform@StateStackClass@@2P6AXPAUTpoint@@H@ZA ; StateStackClass::Transform
PUBLIC	?XformedPosPool@StateStackClass@@2PAUSpoint@@A	; StateStackClass::XformedPosPool
PUBLIC	?IntensityPool@StateStackClass@@2PAMA		; StateStackClass::IntensityPool
PUBLIC	?VT@?$CVarTypeInfo@D@ATL@@2GB			; ATL::CVarTypeInfo<char>::VT
PUBLIC	?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A	; StateStackClass::ClipInfoPool
PUBLIC	?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ ; ATL::CVarTypeInfo<char>::pmField
PUBLIC	?XformedPosPoolNext@StateStackClass@@2PAUSpoint@@A ; StateStackClass::XformedPosPoolNext
PUBLIC	?IntensityPoolNext@StateStackClass@@2PAMA	; StateStackClass::IntensityPoolNext
PUBLIC	?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPoolNext
PUBLIC	?CurrentInstance@StateStackClass@@2PAVObjectInstance@@A ; StateStackClass::CurrentInstance
PUBLIC	?CurrentLOD@StateStackClass@@2PBVObjectLOD@@B	; StateStackClass::CurrentLOD
PUBLIC	?VT@?$CVarTypeInfo@E@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char>::VT
PUBLIC	?CurrentTextureTable@StateStackClass@@2PBHB	; StateStackClass::CurrentTextureTable
PUBLIC	?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ ; ATL::CVarTypeInfo<unsigned char>::pmField
PUBLIC	?LODRange@StateStackClass@@2MA			; StateStackClass::LODRange
PUBLIC	?fogValue@StateStackClass@@2MA			; StateStackClass::fogValue
PUBLIC	?Rotation@StateStackClass@@2UTrotation@@A	; StateStackClass::Rotation
PUBLIC	_CLSID_Registrar
PUBLIC	?Xlation@StateStackClass@@2UTpoint@@A		; StateStackClass::Xlation
PUBLIC	?mV@StateStackClass@@2VMatrix@D3DFrame@@A	; StateStackClass::mV
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?_Min@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Min
PUBLIC	?mW@StateStackClass@@2VMatrix@D3DFrame@@A	; StateStackClass::mW
PUBLIC	?VT@?$CVarTypeInfo@PAD@ATL@@2GB			; ATL::CVarTypeInfo<char *>::VT
PUBLIC	?_Max@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Max
PUBLIC	?mP@StateStackClass@@2VMatrix@D3DFrame@@A	; StateStackClass::mP
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ ; ATL::CVarTypeInfo<char *>::pmField
PUBLIC	?LODBiasInv@StateStackClass@@2MA		; StateStackClass::LODBiasInv
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?ObjSpaceEye@StateStackClass@@2UTpoint@@A	; StateStackClass::ObjSpaceEye
PUBLIC	?ObjSpaceLight@StateStackClass@@2UTpoint@@A	; StateStackClass::ObjSpaceLight
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?Tb@StateStackClass@@2PAUTrotation@@A		; StateStackClass::Tb
PUBLIC	?_Min@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Min
PUBLIC	?Tt@StateStackClass@@2PAUTrotation@@A		; StateStackClass::Tt
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?_Max@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Max
PUBLIC	?VT@?$CVarTypeInfo@PAE@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char *>::VT
PUBLIC	?lightAmbient@StateStackClass@@2MA		; StateStackClass::lightAmbient
PUBLIC	__GUID_00000109_0000_0000_c000_000000000046
PUBLIC	?lightDiffuse@StateStackClass@@2MA		; StateStackClass::lightDiffuse
PUBLIC	?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ ; ATL::CVarTypeInfo<unsigned char *>::pmField
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?lightSpecular@StateStackClass@@2MA		; StateStackClass::lightSpecular
PUBLIC	__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
PUBLIC	?lightVector@StateStackClass@@2UTpoint@@A	; StateStackClass::lightVector
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?context@StateStackClass@@2PAVContextMPR@@A	; StateStackClass::context
PUBLIC	?_Min@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Min
PUBLIC	?stack@StateStackClass@@1PAUStateStackFrame@@A	; StateStackClass::stack
PUBLIC	__GUID_b196b284_bab4_101a_b69c_00aa00341d07
PUBLIC	?_Max@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Max
PUBLIC	?stackDepth@StateStackClass@@1HA		; StateStackClass::stackDepth
PUBLIC	?VT@?$CVarTypeInfo@F@ATL@@2GB			; ATL::CVarTypeInfo<short>::VT
PUBLIC	_IID_IRegistrar
PUBLIC	?hAspectWidthCorrection@StateStackClass@@1MA	; StateStackClass::hAspectWidthCorrection
PUBLIC	?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ ; ATL::CVarTypeInfo<short>::pmField
PUBLIC	?hAspectDepthCorrection@StateStackClass@@1MA	; StateStackClass::hAspectDepthCorrection
PUBLIC	?vAspectWidthCorrection@StateStackClass@@1MA	; StateStackClass::vAspectWidthCorrection
PUBLIC	?vAspectDepthCorrection@StateStackClass@@1MA	; StateStackClass::vAspectDepthCorrection
PUBLIC	?_Min@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Min
PUBLIC	?scaleX@StateStackClass@@1MA			; StateStackClass::scaleX
PUBLIC	?_Max@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Max
PUBLIC	?scaleY@StateStackClass@@1MA			; StateStackClass::scaleY
PUBLIC	?VT@?$CVarTypeInfo@PAF@ATL@@2GB			; ATL::CVarTypeInfo<short *>::VT
PUBLIC	?shiftX@StateStackClass@@1MA			; StateStackClass::shiftX
PUBLIC	?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ ; ATL::CVarTypeInfo<short *>::pmField
PUBLIC	?shiftY@StateStackClass@@1MA			; StateStackClass::shiftY
PUBLIC	?LODused@StateStackClass@@1HA			; StateStackClass::LODused
PUBLIC	?_Min@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Min
PUBLIC	__GUID_00000001_0000_0000_c000_000000000046
PUBLIC	?_Max@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Max
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?VT@?$CVarTypeInfo@G@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short>::VT
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ ; ATL::CVarTypeInfo<unsigned short>::pmField
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	__GUID_00020401_0000_0000_c000_000000000046
PUBLIC	?_Min@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Min
PUBLIC	_LIBID_ATLLib
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?_Max@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Max
PUBLIC	__GUID_00020412_0000_0000_c000_000000000046
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?VT@?$CVarTypeInfo@PAG@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short *>::VT
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ ; ATL::CVarTypeInfo<unsigned short *>::pmField
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?VT@?$CVarTypeInfo@H@ATL@@2GB			; ATL::CVarTypeInfo<int>::VT
PUBLIC	?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ ; ATL::CVarTypeInfo<int>::pmField
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?VT@?$CVarTypeInfo@PAH@ATL@@2GB			; ATL::CVarTypeInfo<int *>::VT
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ ; ATL::CVarTypeInfo<int *>::pmField
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?VT@?$CVarTypeInfo@I@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int>::VT
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ ; ATL::CVarTypeInfo<unsigned int>::pmField
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?VT@?$CVarTypeInfo@PAI@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ ; ATL::CVarTypeInfo<unsigned int *>::pmField
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?VT@?$CVarTypeInfo@J@ATL@@2GB			; ATL::CVarTypeInfo<long>::VT
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ ; ATL::CVarTypeInfo<long>::pmField
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?_pModule@ATL@@3PAVCComModule@1@A		; ATL::_pModule
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?VT@?$CVarTypeInfo@PAJ@ATL@@2GB			; ATL::CVarTypeInfo<long *>::VT
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ ; ATL::CVarTypeInfo<long *>::pmField
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	_IID_IDocHostUIHandlerDispatch
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?VT@?$CVarTypeInfo@K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long>::VT
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ ; ATL::CVarTypeInfo<unsigned long>::pmField
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?VT@?$CVarTypeInfo@PAK@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long *>::VT
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ ; ATL::CVarTypeInfo<unsigned long *>::pmField
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA
_BSS	SEGMENT
?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA DD 01H DUP (?) ; ATL::_pPerfRegFunc
_BSS	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZA
_BSS	SEGMENT
?_pPerfUnRegFunc@ATL@@3P6AJXZA DD 01H DUP (?)		; ATL::_pPerfUnRegFunc
_BSS	ENDS
;	COMDAT ?_AtlRegisterPerUser@ATL@@3_NA
_BSS	SEGMENT
?_AtlRegisterPerUser@ATL@@3_NA DB 01H DUP (?)		; ATL::_AtlRegisterPerUser
_BSS	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_BSS	SEGMENT
?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA DD 01H DUP (?) ; ATL::CComApartment::ATL_CREATE_OBJECT
_BSS	ENDS
;	COMDAT ?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A
_BSS	SEGMENT
?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A DD 01H DUP (?) ; ATL::_pAtlAutoThreadModule
_BSS	ENDS
;	COMDAT ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA
_BSS	SEGMENT
?m_bInitFailed@CAtlBaseModule@ATL@@2_NA DB 01H DUP (?)	; ATL::CAtlBaseModule::m_bInitFailed
_BSS	ENDS
_BSS	SEGMENT
?verts@@3HA DD	01H DUP (?)				; verts
?Kpos@@3UTpoint@@A DB 0cH DUP (?)			; Kpos
_BSS	ENDS
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_BSS	SEGMENT
?_pAtlModule@ATL@@3PAVCAtlModule@1@A DD 01H DUP (?)	; ATL::_pAtlModule
_BSS	ENDS
;	COMDAT ?m_libid@CAtlModule@ATL@@2U_GUID@@A
_BSS	SEGMENT
?m_libid@CAtlModule@ATL@@2U_GUID@@A DB 010H DUP (?)	; ATL::CAtlModule::m_libid
_BSS	ENDS
_BSS	SEGMENT
?Transform@StateStackClass@@2P6AXPAUTpoint@@H@ZA DD 01H DUP (?) ; StateStackClass::Transform
?XformedPosPool@StateStackClass@@2PAUSpoint@@A DD 01H DUP (?) ; StateStackClass::XformedPosPool
?IntensityPool@StateStackClass@@2PAMA DD 01H DUP (?)	; StateStackClass::IntensityPool
?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A DD 01H DUP (?) ; StateStackClass::ClipInfoPool
?XformedPosPoolNext@StateStackClass@@2PAUSpoint@@A DD 01H DUP (?) ; StateStackClass::XformedPosPoolNext
?IntensityPoolNext@StateStackClass@@2PAMA DD 01H DUP (?) ; StateStackClass::IntensityPoolNext
?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A DD 01H DUP (?) ; StateStackClass::ClipInfoPoolNext
?CurrentInstance@StateStackClass@@2PAVObjectInstance@@A DD 01H DUP (?) ; StateStackClass::CurrentInstance
?CurrentLOD@StateStackClass@@2PBVObjectLOD@@B DD 01H DUP (?) ; StateStackClass::CurrentLOD
?CurrentTextureTable@StateStackClass@@2PBHB DD 01H DUP (?) ; StateStackClass::CurrentTextureTable
?LODRange@StateStackClass@@2MA DD 01H DUP (?)		; StateStackClass::LODRange
?fogValue@StateStackClass@@2MA DD 01H DUP (?)		; StateStackClass::fogValue
?Rotation@StateStackClass@@2UTrotation@@A DB 024H DUP (?) ; StateStackClass::Rotation
?Xlation@StateStackClass@@2UTpoint@@A DB 0cH DUP (?)	; StateStackClass::Xlation
?mV@StateStackClass@@2VMatrix@D3DFrame@@A DB 040H DUP (?) ; StateStackClass::mV
?mW@StateStackClass@@2VMatrix@D3DFrame@@A DB 040H DUP (?) ; StateStackClass::mW
?mP@StateStackClass@@2VMatrix@D3DFrame@@A DB 040H DUP (?) ; StateStackClass::mP
?LODBiasInv@StateStackClass@@2MA DD 01H DUP (?)		; StateStackClass::LODBiasInv
?ObjSpaceEye@StateStackClass@@2UTpoint@@A DB 0cH DUP (?) ; StateStackClass::ObjSpaceEye
?ObjSpaceLight@StateStackClass@@2UTpoint@@A DB 0cH DUP (?) ; StateStackClass::ObjSpaceLight
?Tb@StateStackClass@@2PAUTrotation@@A DD 01H DUP (?)	; StateStackClass::Tb
?Tt@StateStackClass@@2PAUTrotation@@A DD 01H DUP (?)	; StateStackClass::Tt
?lightVector@StateStackClass@@2UTpoint@@A DB 0cH DUP (?) ; StateStackClass::lightVector
?context@StateStackClass@@2PAVContextMPR@@A DD 01H DUP (?) ; StateStackClass::context
?stack@StateStackClass@@1PAUStateStackFrame@@A DB 01720H DUP (?) ; StateStackClass::stack
?stackDepth@StateStackClass@@1HA DD 01H DUP (?)		; StateStackClass::stackDepth
?hAspectWidthCorrection@StateStackClass@@1MA DD 01H DUP (?) ; StateStackClass::hAspectWidthCorrection
?hAspectDepthCorrection@StateStackClass@@1MA DD 01H DUP (?) ; StateStackClass::hAspectDepthCorrection
?vAspectWidthCorrection@StateStackClass@@1MA DD 01H DUP (?) ; StateStackClass::vAspectWidthCorrection
?vAspectDepthCorrection@StateStackClass@@1MA DD 01H DUP (?) ; StateStackClass::vAspectDepthCorrection
?scaleX@StateStackClass@@1MA DD 01H DUP (?)		; StateStackClass::scaleX
?scaleY@StateStackClass@@1MA DD 01H DUP (?)		; StateStackClass::scaleY
?shiftX@StateStackClass@@1MA DD 01H DUP (?)		; StateStackClass::shiftX
?shiftY@StateStackClass@@1MA DD 01H DUP (?)		; StateStackClass::shiftY
?LODused@StateStackClass@@1HA DD 01H DUP (?)		; StateStackClass::LODused
_BSS	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_BSS	SEGMENT
?_pModule@ATL@@3PAVCComModule@1@A DD 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long *>::pmField
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAK@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAK@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned long *>::VT
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long>::pmField
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@K@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned long>::VT
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
_IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ DD 08H ; ATL::CVarTypeInfo<long *>::pmField
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAJ@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAJ@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<long *>::VT
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ DD 08H ; ATL::CVarTypeInfo<long>::pmField
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@J@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<long>::VT
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAI@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAI@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned int *>::VT
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int>::pmField
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@I@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@I@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned int>::VT
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ DD 08H ; ATL::CVarTypeInfo<int *>::pmField
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAH@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAH@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<int *>::VT
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ DD 08H ; ATL::CVarTypeInfo<int>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@H@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@H@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<int>::VT
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short *>::pmField
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAG@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAG@ATL@@2GB DW 04012H		; ATL::CVarTypeInfo<unsigned short *>::VT
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT __GUID_00020412_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020412_0000_0000_c000_000000000046 DD 020412H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Max@?$AtlLimits@_K@ATL@@2_KB DQ ffffffffffffffffH	; ATL::AtlLimits<unsigned __int64>::_Max
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT
_LIBID_ATLLib DD 044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Min@?$AtlLimits@_K@ATL@@2_KB DQ 0000000000000000H	; ATL::AtlLimits<unsigned __int64>::_Min
CONST	ENDS
;	COMDAT __GUID_00020401_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020401_0000_0000_c000_000000000046 DD 020401H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short>::pmField
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@G@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@G@ATL@@2GB DW 012H			; ATL::CVarTypeInfo<unsigned short>::VT
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Max@?$AtlLimits@_J@ATL@@2_JB DQ 7fffffffffffffffH	; ATL::AtlLimits<__int64>::_Max
CONST	ENDS
;	COMDAT __GUID_00000001_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000001_0000_0000_c000_000000000046 DD 01H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Min@?$AtlLimits@_J@ATL@@2_JB DQ 8000000000000000H	; ATL::AtlLimits<__int64>::_Min
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ DD 08H ; ATL::CVarTypeInfo<short *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAF@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAF@ATL@@2GB DW 04002H		; ATL::CVarTypeInfo<short *>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Max@?$AtlLimits@K@ATL@@2KB DD 0ffffffffH		; ATL::AtlLimits<unsigned long>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Min@?$AtlLimits@K@ATL@@2KB DD 00H			; ATL::AtlLimits<unsigned long>::_Min
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ DD 08H ; ATL::CVarTypeInfo<short>::pmField
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT
_IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@F@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@F@ATL@@2GB DW 02H			; ATL::CVarTypeInfo<short>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Max@?$AtlLimits@J@ATL@@2JB DD 07fffffffH		; ATL::AtlLimits<long>::_Max
CONST	ENDS
;	COMDAT __GUID_b196b284_bab4_101a_b69c_00aa00341d07
CONST	SEGMENT
__GUID_b196b284_bab4_101a_b69c_00aa00341d07 DD 0b196b284H
	DW	0bab4H
	DW	0101aH
	DB	0b6H
	DB	09cH
	DB	00H
	DB	0aaH
	DB	00H
	DB	034H
	DB	01dH
	DB	07H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Min@?$AtlLimits@J@ATL@@2JB DD 080000000H		; ATL::AtlLimits<long>::_Min
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT __GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
CONST	SEGMENT
__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713 DD 07fd52380H
	DW	04e07H
	DW	0101bH
	DB	0aeH
	DB	02dH
	DB	08H
	DB	00H
	DB	02bH
	DB	02eH
	DB	0c7H
	DB	013H
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char *>::pmField
CONST	ENDS
;	COMDAT __GUID_00000109_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000109_0000_0000_c000_000000000046 DD 0109H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
_DATA	SEGMENT
?lightAmbient@StateStackClass@@2MA DD 03e99999ar ; 0.3	; StateStackClass::lightAmbient
?lightDiffuse@StateStackClass@@2MA DD 03f19999ar ; 0.6	; StateStackClass::lightDiffuse
?lightSpecular@StateStackClass@@2MA DD 03f19999ar ; 0.6	; StateStackClass::lightSpecular
_DATA	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAE@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAE@ATL@@2GB DW 04011H		; ATL::CVarTypeInfo<unsigned char *>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Max@?$AtlLimits@I@ATL@@2IB DD 0ffffffffH		; ATL::AtlLimits<unsigned int>::_Max
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Min@?$AtlLimits@I@ATL@@2IB DD 00H			; ATL::AtlLimits<unsigned int>::_Min
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ DD 08H ; ATL::CVarTypeInfo<char *>::pmField
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Max@?$AtlLimits@H@ATL@@2HB DD 07fffffffH		; ATL::AtlLimits<int>::_Max
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAD@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAD@ATL@@2GB DW 04010H		; ATL::CVarTypeInfo<char *>::VT
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Min@?$AtlLimits@H@ATL@@2HB DD 080000000H		; ATL::AtlLimits<int>::_Min
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT
_CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@E@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@E@ATL@@2GB DW 011H			; ATL::CVarTypeInfo<unsigned char>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ DD 08H ; ATL::CVarTypeInfo<char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@D@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@D@ATL@@2GB DW 010H			; ATL::CVarTypeInfo<char>::VT
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT __GUID_00000146_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000146_0000_0000_c000_000000000046 DD 0146H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT __GUID_1cf2b120_547d_101b_8e65_08002b2bd119
CONST	SEGMENT
__GUID_1cf2b120_547d_101b_8e65_08002b2bd119 DD 01cf2b120H
	DW	0547dH
	DW	0101bH
	DB	08eH
	DB	065H
	DB	08H
	DB	00H
	DB	02bH
	DB	02bH
	DB	0d1H
	DB	019H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT
_IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatchEx
CONST	SEGMENT
_IID_IAxWinAmbientDispatchEx DD 0b2d0778bH
	DW	0ac99H
	DW	04c58H
	DB	0a5H
	DB	0c8H
	DB	0e7H
	DB	072H
	DB	04eH
	DB	053H
	DB	016H
	DB	0b5H
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT __GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
CONST	SEGMENT
__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352 DD 0fc4801a3H
	DW	02ba9H
	DW	011cfH
	DB	0a2H
	DB	029H
	DB	00H
	DB	0aaH
	DB	00H
	DB	03dH
	DB	073H
	DB	052H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?MAX_TYPE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_TYPE@CRegParser@ATL@@1HB DD 01000H			; ATL::CRegParser::MAX_TYPE
CONST	ENDS
;	COMDAT ?cbNeverDelete@CRegParser@ATL@@1HB
CONST	SEGMENT
?cbNeverDelete@CRegParser@ATL@@1HB DD 0cH		; ATL::CRegParser::cbNeverDelete
CONST	ENDS
;	COMDAT ?rgszNeverDelete@CRegParser@ATL@@1QBQBDB
CONST	SEGMENT
?rgszNeverDelete@CRegParser@ATL@@1QBQBDB DD FLAT:??_C@_05PDIKPLII@AppID?$AA@ ; ATL::CRegParser::rgszNeverDelete
	DD	FLAT:??_C@_05GIBEAPNE@CLSID?$AA@
	DD	FLAT:??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
	DD	FLAT:??_C@_08PICKODJL@FileType?$AA@
	DD	FLAT:??_C@_09JKPGEJCH@Interface?$AA@
	DD	FLAT:??_C@_08PPIOJEA@Hardware?$AA@
	DD	FLAT:??_C@_04IHBFOLAC@Mime?$AA@
	DD	FLAT:??_C@_03DDIMFGBA@SAM?$AA@
	DD	FLAT:??_C@_08LOPHEHKG@SECURITY?$AA@
	DD	FLAT:??_C@_06FDHFNJBJ@SYSTEM?$AA@
	DD	FLAT:??_C@_08KEKAJNJI@Software?$AA@
	DD	FLAT:??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?MAX_VALUE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_VALUE@CRegParser@ATL@@1HB DD 01000H		; ATL::CRegParser::MAX_VALUE
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
CONST	SEGMENT
__GUID_00000000_0000_0000_0000_000000000000 DD 00H
	DW	00H
	DW	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT
_IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ??_C@_06JBKGCNBB@Delete?$AA@
CONST	SEGMENT
??_C@_06JBKGCNBB@Delete?$AA@ DB 'Delete', 00H		; `string'
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?szDelete@ATL@@3QBDB
CONST	SEGMENT
?szDelete@ATL@@3QBDB DD FLAT:??_C@_06JBKGCNBB@Delete?$AA@ ; ATL::szDelete
CONST	ENDS
;	COMDAT ??_C@_08KAAPDIAN@NoRemove?$AA@
CONST	SEGMENT
??_C@_08KAAPDIAN@NoRemove?$AA@ DB 'NoRemove', 00H	; `string'
CONST	ENDS
;	COMDAT ?szNoRemove@ATL@@3QBDB
CONST	SEGMENT
?szNoRemove@ATL@@3QBDB DD FLAT:??_C@_08KAAPDIAN@NoRemove?$AA@ ; ATL::szNoRemove
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ??_C@_0M@DBGDLGLL@ForceRemove?$AA@
CONST	SEGMENT
??_C@_0M@DBGDLGLL@ForceRemove?$AA@ DB 'ForceRemove', 00H ; `string'
CONST	ENDS
;	COMDAT ?szForceRemove@ATL@@3QBDB
CONST	SEGMENT
?szForceRemove@ATL@@3QBDB DD FLAT:??_C@_0M@DBGDLGLL@ForceRemove?$AA@ ; ATL::szForceRemove
CONST	ENDS
;	COMDAT ??_C@_03LAIAPFCB@Val?$AA@
CONST	SEGMENT
??_C@_03LAIAPFCB@Val?$AA@ DB 'Val', 00H			; `string'
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?szValToken@ATL@@3QBDB
CONST	SEGMENT
?szValToken@ATL@@3QBDB DD FLAT:??_C@_03LAIAPFCB@Val?$AA@ ; ATL::szValToken
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B?$AA@
CONST	SEGMENT
??_C@_01HMGJMAIH@B?$AA@ DB 'B', 00H			; `string'
CONST	ENDS
;	COMDAT ?szBinaryVal@ATL@@3QBDB
CONST	SEGMENT
?szBinaryVal@ATL@@3QBDB DD FLAT:??_C@_01HMGJMAIH@B?$AA@	; ATL::szBinaryVal
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D?$AA@
CONST	SEGMENT
??_C@_01CKDDGHAB@D?$AA@ DB 'D', 00H			; `string'
CONST	ENDS
;	COMDAT ?szDwordVal@ATL@@3QBDB
CONST	SEGMENT
?szDwordVal@ATL@@3QBDB DD FLAT:??_C@_01CKDDGHAB@D?$AA@	; ATL::szDwordVal
CONST	ENDS
;	COMDAT ??_C@_01PLPBNMEI@M?$AA@
CONST	SEGMENT
??_C@_01PLPBNMEI@M?$AA@ DB 'M', 00H			; `string'
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindowLic
CONST	SEGMENT
_IID_IAxWinHostWindowLic DD 03935bda8H
	DW	04ed9H
	DW	0495cH
	DB	086H
	DB	050H
	DB	0e0H
	DB	01fH
	DB	0c1H
	DB	0e3H
	DB	08aH
	DB	04bH
CONST	ENDS
;	COMDAT ?multiszStringVal@ATL@@3QBDB
CONST	SEGMENT
?multiszStringVal@ATL@@3QBDB DD FLAT:??_C@_01PLPBNMEI@M?$AA@ ; ATL::multiszStringVal
CONST	ENDS
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT
??_C@_01CPLAODJH@S?$AA@ DB 'S', 00H			; `string'
CONST	ENDS
;	COMDAT ?szStringVal@ATL@@3QBDB
CONST	SEGMENT
?szStringVal@ATL@@3QBDB DD FLAT:??_C@_01CPLAODJH@S?$AA@	; ATL::szStringVal
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?chEquals@ATL@@3DB
CONST	SEGMENT
?chEquals@ATL@@3DB DB 03dH				; ATL::chEquals
CONST	ENDS
;	COMDAT ?chQuote@ATL@@3DB
CONST	SEGMENT
?chQuote@ATL@@3DB DB 027H				; ATL::chQuote
CONST	ENDS
;	COMDAT ?chLeftBracket@ATL@@3DB
CONST	SEGMENT
?chLeftBracket@ATL@@3DB DB 07bH				; ATL::chLeftBracket
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?chRightBracket@ATL@@3DB
CONST	SEGMENT
?chRightBracket@ATL@@3DB DB 07dH			; ATL::chRightBracket
CONST	ENDS
;	COMDAT ?chDirSep@ATL@@3DB
CONST	SEGMENT
?chDirSep@ATL@@3DB DB 05cH				; ATL::chDirSep
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY *>::pmField
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB DW 04006H	; ATL::CVarTypeInfo<tagCY *>::VT
CONST	ENDS
;	COMDAT ??_C@_05PDIKPLII@AppID?$AA@
CONST	SEGMENT
??_C@_05PDIKPLII@AppID?$AA@ DB 'AppID', 00H		; `string'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB DW 06H		; ATL::CVarTypeInfo<tagCY>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB DW 04009H	; ATL::CVarTypeInfo<IDispatch * *>::VT
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT
_IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ??_C@_05GIBEAPNE@CLSID?$AA@
CONST	SEGMENT
??_C@_05GIBEAPNE@CLSID?$AA@ DB 'CLSID', 00H		; `string'
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch *>::pmField
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB DW 09H	; ATL::CVarTypeInfo<IDispatch *>::VT
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT __GUID_0000010c_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_0000010c_0000_0000_c000_000000000046 DD 010cH
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB DW 0400dH	; ATL::CVarTypeInfo<IUnknown * *>::VT
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
_NEAR_CLIP_DISTANCE DD 03f800000r		; 1
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown *>::pmField
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB DW 0dH	; ATL::CVarTypeInfo<IUnknown *>::VT
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t * *>::pmField
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB DW 04008H		; ATL::CVarTypeInfo<wchar_t * *>::VT
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_W@ATL@@2GB DW 08H			; ATL::CVarTypeInfo<wchar_t *>::VT
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT __GUID_0002e012_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_0002e012_0000_0000_c000_000000000046 DD 02e012H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB DW 0400cH	; ATL::CVarTypeInfo<tagVARIANT *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ DD 08H ; ATL::CVarTypeInfo<double *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAN@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAN@ATL@@2GB DW 04005H		; ATL::CVarTypeInfo<double *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ DD 08H ; ATL::CVarTypeInfo<double>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@N@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@N@ATL@@2GB DW 05H			; ATL::CVarTypeInfo<double>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ DD 08H ; ATL::CVarTypeInfo<float *>::pmField
CONST	ENDS
;	COMDAT __GUID_00020400_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020400_0000_0000_c000_000000000046 DD 020400H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAM@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAM@ATL@@2GB DW 04004H		; ATL::CVarTypeInfo<float *>::VT
CONST	ENDS
;	COMDAT __GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
CONST	SEGMENT
__GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851 DD 0a6bc3ac0H
	DW	0dbaaH
	DW	011ceH
	DB	09dH
	DB	0e3H
	DB	00H
	DB	0aaH
	DB	00H
	DB	04bH
	DB	0b8H
	DB	051H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ DD 08H ; ATL::CVarTypeInfo<float>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@M@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@M@ATL@@2GB DW 04H			; ATL::CVarTypeInfo<float>::VT
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000000_0000_0000_c000_000000000046 DD 00H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_K@ATL@@2GB DW 04015H		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
CONST	ENDS
;	COMDAT ??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	SEGMENT
??_C@_07KJLOKDKB@TypeLib?$AA@ DB 'TypeLib', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KEKAJNJI@Software?$AA@
CONST	SEGMENT
??_C@_08KEKAJNJI@Software?$AA@ DB 'Software', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDHFNJBJ@SYSTEM?$AA@
CONST	SEGMENT
??_C@_06FDHFNJBJ@SYSTEM?$AA@ DB 'SYSTEM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LOPHEHKG@SECURITY?$AA@
CONST	SEGMENT
??_C@_08LOPHEHKG@SECURITY?$AA@ DB 'SECURITY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03DDIMFGBA@SAM?$AA@
CONST	SEGMENT
??_C@_03DDIMFGBA@SAM?$AA@ DB 'SAM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IHBFOLAC@Mime?$AA@
CONST	SEGMENT
??_C@_04IHBFOLAC@Mime?$AA@ DB 'Mime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPIOJEA@Hardware?$AA@
CONST	SEGMENT
??_C@_08PPIOJEA@Hardware?$AA@ DB 'Hardware', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JKPGEJCH@Interface?$AA@
CONST	SEGMENT
??_C@_09JKPGEJCH@Interface?$AA@ DB 'Interface', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PICKODJL@FileType?$AA@
CONST	SEGMENT
??_C@_08PICKODJL@FileType?$AA@ DB 'FileType', 00H	; `string'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64>::pmField
CONST	ENDS
;	COMDAT ??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
CONST	SEGMENT
??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@ DB 'Component Categories', 00H ; `string'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_K@ATL@@2GB DW 015H			; ATL::CVarTypeInfo<unsigned __int64>::VT
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_J@ATL@@2GB DW 04014H		; ATL::CVarTypeInfo<__int64 *>::VT
CONST	ENDS
;	COMDAT ___pobjMapEntryLast
ATL$__z	SEGMENT
___pobjMapEntryLast DD 00H
ATL$__z	ENDS
;	COMDAT ___pobjMapEntryFirst
ATL$__a	SEGMENT
___pobjMapEntryFirst DD 00H
ATL$__a	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_J@ATL@@2GB DW 014H			; ATL::CVarTypeInfo<__int64>::VT
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??1CComBSTR@ATL@@QAE@XZ				; ATL::CComBSTR::~CComBSTR
PUBLIC	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
PUBLIC	??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
PUBLIC	??0_D3DVECTOR@@QAE@XZ				; _D3DVECTOR::_D3DVECTOR
PUBLIC	_fabsf
PUBLIC	_asinf
PUBLIC	_cosf
PUBLIC	_sinf
PUBLIC	?asin@@YAMM@Z					; asin
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?Draw@ObjectLOD@@QBEXXZ				; ObjectLOD::Draw
PUBLIC	?Radius@ObjectInstance@@QBEMXZ			; ObjectInstance::Radius
PUBLIC	??DD3DFrame@@YA?AVMatrix@0@ABV10@0@Z		; D3DFrame::operator*
PUBLIC	??0Vector@D3DFrame@@QAE@XZ			; D3DFrame::Vector::Vector
PUBLIC	??4Matrix@D3DFrame@@QAEAAV01@ABV01@@Z		; D3DFrame::Matrix::operator=
PUBLIC	?InitIdentity@Matrix@D3DFrame@@QAEXXZ		; D3DFrame::Matrix::InitIdentity
PUBLIC	?SetViewMatrix@Matrix@D3DFrame@@QAEXMMMVVector@2@@Z ; D3DFrame::Matrix::SetViewMatrix
PUBLIC	??0StateStackClass@@QAE@XZ			; StateStackClass::StateStackClass
PUBLIC	??1StateStackClass@@QAE@XZ			; StateStackClass::~StateStackClass
PUBLIC	?SetContext@StateStackClass@@SAXPAVContextMPR@@@Z ; StateStackClass::SetContext
PUBLIC	?SetLight@StateStackClass@@SAXMMMPAUTpoint@@@Z	; StateStackClass::SetLight
PUBLIC	?SetCameraProperties@StateStackClass@@SAXMMMMMM@Z ; StateStackClass::SetCameraProperties
PUBLIC	?SetLODBias@StateStackClass@@SAXM@Z		; StateStackClass::SetLODBias
PUBLIC	?SetTextureState@StateStackClass@@SAXH@Z	; StateStackClass::SetTextureState
PUBLIC	?SetFog@StateStackClass@@SAXMPAUPcolor@@@Z	; StateStackClass::SetFog
PUBLIC	?SetCamera@StateStackClass@@SAXPBUTpoint@@PBUTrotation@@PAU3@2@Z ; StateStackClass::SetCamera
PUBLIC	?SetView@StateStackClass@@SAXPBUTpoint@@PAUTrotation@@@Z ; StateStackClass::SetView
PUBLIC	?SetWorld@StateStackClass@@SAXPBUTrotation@@PBUTpoint@@@Z ; StateStackClass::SetWorld
PUBLIC	?SetProjection@StateStackClass@@SAXMM@Z		; StateStackClass::SetProjection
PUBLIC	?DrawObject@StateStackClass@@SAXPAVObjectInstance@@PBUTrotation@@PBUTpoint@@M@Z ; StateStackClass::DrawObject
PUBLIC	?DrawWarpedObject@StateStackClass@@SAXPAVObjectInstance@@PBUTrotation@@PBUTpoint@@MMMM@Z ; StateStackClass::DrawWarpedObject
PUBLIC	?DrawSubObject@StateStackClass@@SAXPAVObjectInstance@@PBUTrotation@@PBUTpoint@@@Z ; StateStackClass::DrawSubObject
PUBLIC	?CompoundTransform@StateStackClass@@SAXPBUTrotation@@PBUTpoint@@@Z ; StateStackClass::CompoundTransform
PUBLIC	?Light@StateStackClass@@SAXPBUPnormal@@HPBUTpoint@@@Z ; StateStackClass::Light
PUBLIC	?PushAll@StateStackClass@@SAXXZ			; StateStackClass::PushAll
PUBLIC	?PopAll@StateStackClass@@SAXXZ			; StateStackClass::PopAll
PUBLIC	?PushVerts@StateStackClass@@SAXXZ		; StateStackClass::PushVerts
PUBLIC	?PopVerts@StateStackClass@@SAXXZ		; StateStackClass::PopVerts
PUBLIC	?TransformBillboardWithClip@StateStackClass@@SAXPAUTpoint@@HW4BTransformType@@@Z ; StateStackClass::TransformBillboardWithClip
PUBLIC	?XtoPixel@StateStackClass@@SAMM@Z		; StateStackClass::XtoPixel
PUBLIC	?YtoPixel@StateStackClass@@SAMM@Z		; StateStackClass::YtoPixel
PUBLIC	?IsValidPosIndex@StateStackClass@@SAHH@Z	; StateStackClass::IsValidPosIndex
PUBLIC	?IsValidIntensityIndex@StateStackClass@@SAHH@Z	; StateStackClass::IsValidIntensityIndex
PUBLIC	?TransformNoClip@StateStackClass@@KAXPAUTpoint@@H@Z ; StateStackClass::TransformNoClip
PUBLIC	?TransformWithClip@StateStackClass@@KAXPAUTpoint@@H@Z ; StateStackClass::TransformWithClip
PUBLIC	?CheckBoundingSphereClipping@StateStackClass@@KAKXZ ; StateStackClass::CheckBoundingSphereClipping
PUBLIC	?TransformInline@StateStackClass@@KAXPAUTpoint@@HH@Z ; StateStackClass::TransformInline
PUBLIC	?pvtDrawObject@StateStackClass@@KAXKPAVObjectInstance@@PBUTrotation@@PBUTpoint@@MMMM@Z ; StateStackClass::pvtDrawObject
PUBLIC	?SqrtF@@YAMM@Z					; SqrtF
PUBLIC	?checked_atan2@@YANNN@Z				; checked_atan2
PUBLIC	?SetFogColor@CDXEngine@@QAEXPAU_D3DCOLORVALUE@@@Z ; CDXEngine::SetFogColor
PUBLIC	?SetSunVector@CDXEngine@@QAEXU_D3DVECTOR@@@Z	; CDXEngine::SetSunVector
PUBLIC	?SetLODBias@CDXEngine@@QAEXM@Z			; CDXEngine::SetLODBias
PUBLIC	?normalizeVector@@YAXPAUTpoint@@@Z		; normalizeVector
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	?TheStateStack@@3VStateStackClass@@A		; TheStateStack
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3f800000
PUBLIC	__real@3ff921fb54442d18
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@437fe666
PUBLIC	__real@8000000000000000
PUBLIC	__real@bff921fb54442d18
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	__imp__SysFreeString@4:PROC
EXTRN	_asin:PROC
EXTRN	_atan:PROC
EXTRN	_cos:PROC
EXTRN	_fabs:PROC
EXTRN	_sin:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?SetState@ContextMPR@@QAEXGK@Z:PROC		; ContextMPR::SetState
EXTRN	?ChooseLOD@ObjectParent@@QAEPAVObjectLOD@@MPAHPAM@Z:PROC ; ObjectParent::ChooseLOD
EXTRN	?MatrixMult@@YAXPBUTrotation@@0PAU1@@Z:PROC	; MatrixMult
EXTRN	?MatrixMultTranspose@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z:PROC ; MatrixMultTranspose
EXTRN	?F4IsBadCodePtr@@YA_NPAX@Z:PROC			; F4IsBadCodePtr
EXTRN	?AssignPmatrixToD3DXMATRIX@@YAXPAUD3DXMATRIX@@PAUTrotation@@@Z:PROC ; AssignPmatrixToD3DXMATRIX
EXTRN	?DrawObject@CDXEngine@@QAEXPAVObjectInstance@@PAUD3DXMATRIX@@PBUTpoint@@MMMM_NK@Z:PROC ; CDXEngine::DrawObject
EXTRN	?SetCamera@CDXEngine@@QAEXPAUD3DXMATRIX@@U_D3DVECTOR@@0@Z:PROC ; CDXEngine::SetCamera
EXTRN	?SetFogLevel@CDXEngine@@QAEXM@Z:PROC		; CDXEngine::SetFogLevel
EXTRN	?SetSunLight@CDXEngine@@QAEXMMM@Z:PROC		; CDXEngine::SetSunLight
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?RenderStateTable@@3PBHB:DWORD			; RenderStateTable
EXTRN	?RenderStateTablePC@@3PBHB:DWORD		; RenderStateTablePC
EXTRN	?RenderStateTableNPC@@3PBHB:DWORD		; RenderStateTableNPC
EXTRN	?RenderStateTableNoTex@@3QBHB:BYTE		; RenderStateTableNoTex
EXTRN	?RenderStateTableWithPCTex@@3QBHB:BYTE		; RenderStateTableWithPCTex
EXTRN	?RenderStateTableWithNPCTex@@3QBHB:BYTE		; RenderStateTableWithNPCTex
EXTRN	?DrawPrimJumpTable@@3PBQ6AXPAUPrim@@@ZB:DWORD	; DrawPrimJumpTable
EXTRN	?DrawPrimNoClipJumpTable@@3PBQ6AXPAUPrim@@@ZB:DWORD ; DrawPrimNoClipJumpTable
EXTRN	?ClipPrimJumpTable@@3PBQ6AXPAUPrim@@K@ZB:DWORD	; ClipPrimJumpTable
EXTRN	?DrawPrimNoFogNoClipJumpTable@@3PBQ6AXPAUPrim@@@ZB:DWORD ; DrawPrimNoFogNoClipJumpTable
EXTRN	?ClipPrimNoFogJumpTable@@3PBQ6AXPAUPrim@@K@ZB:DWORD ; ClipPrimNoFogJumpTable
EXTRN	?DrawPrimFogNoClipJumpTable@@3PBQ6AXPAUPrim@@@ZB:DWORD ; DrawPrimFogNoClipJumpTable
EXTRN	?ClipPrimFogJumpTable@@3PBQ6AXPAUPrim@@K@ZB:DWORD ; ClipPrimFogJumpTable
EXTRN	?DrawPrimWithClipJumpTable@@3QBQ6AXPAUPrim@@@ZB:BYTE ; DrawPrimWithClipJumpTable
EXTRN	?DrawPrimNoClipWithTexJumpTable@@3QBQ6AXPAUPrim@@@ZB:BYTE ; DrawPrimNoClipWithTexJumpTable
EXTRN	?DrawPrimNoClipNoTexJumpTable@@3QBQ6AXPAUPrim@@@ZB:BYTE ; DrawPrimNoClipNoTexJumpTable
EXTRN	?DrawPrimFogNoClipWithTexJumpTable@@3QBQ6AXPAUPrim@@@ZB:BYTE ; DrawPrimFogNoClipWithTexJumpTable
EXTRN	?DrawPrimFogNoClipNoTexJumpTable@@3QBQ6AXPAUPrim@@@ZB:BYTE ; DrawPrimFogNoClipNoTexJumpTable
EXTRN	?ClipPrimWithTexJumpTable@@3QBQ6AXPAUPrim@@K@ZB:BYTE ; ClipPrimWithTexJumpTable
EXTRN	?ClipPrimNoTexJumpTable@@3QBQ6AXPAUPrim@@K@ZB:BYTE ; ClipPrimNoTexJumpTable
EXTRN	?ClipPrimFogWithTexJumpTable@@3QBQ6AXPAUPrim@@K@ZB:BYTE ; ClipPrimFogWithTexJumpTable
EXTRN	?ClipPrimFogNoTexJumpTable@@3QBQ6AXPAUPrim@@K@ZB:BYTE ; ClipPrimFogNoTexJumpTable
EXTRN	?TheObjectListLength@@3HA:DWORD			; TheObjectListLength
EXTRN	?DisplayOptions@@3VDisplayOptionsClass@@A:BYTE	; DisplayOptions
EXTRN	?TheSun@CDXEngine@@2U_D3DLIGHT7@@A:BYTE		; CDXEngine::TheSun
EXTRN	?m_LODBiasCx@CDXEngine@@0MA:DWORD		; CDXEngine::m_LODBiasCx
EXTRN	?m_FogColor@CDXEngine@@0U_D3DCOLORVALUE@@A:BYTE	; CDXEngine::m_FogColor
EXTRN	?TheDXEngine@@3VCDXEngine@@A:BYTE		; TheDXEngine
EXTRN	?g_bUse_DX_Engine@@3_NA:BYTE			; g_bUse_DX_Engine
EXTRN	?g_bSlowButSafe@@3_NA:BYTE			; g_bSlowButSafe
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

?TheStateStack@@3VStateStackClass@@A DB 01H DUP (?)	; TheStateStack
	ALIGN	4

_XformedPosPoolBuffer DB 020000H DUP (?)
_IntensityPoolBuffer DD 02008H DUP (?)
_ClipInfoPoolBuffer DB 020020H DUP (?)
_BSS	ENDS
;	COMDAT ?in@?1??pvtDrawObject@StateStackClass@@KAXKPAVObjectInstance@@PBUTrotation@@PBUTpoint@@MMMM@Z@4HA
_BSS	SEGMENT
?in@?1??pvtDrawObject@StateStackClass@@KAXKPAVObjectInstance@@PBUTrotation@@PBUTpoint@@MMMM@Z@4HA DD 01H DUP (?) ; `StateStackClass::pvtDrawObject'::`2'::in
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bff921fb54442d18
CONST	SEGMENT
__real@bff921fb54442d18 DQ 0bff921fb54442d18r	; -1.5708
CONST	ENDS
;	COMDAT __real@8000000000000000
CONST	SEGMENT
__real@8000000000000000 DQ 08000000000000000r	; -0
CONST	ENDS
;	COMDAT __real@437fe666
CONST	SEGMENT
__real@437fe666 DD 0437fe666r			; 255.9
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@3ff921fb54442d18
CONST	SEGMENT
__real@3ff921fb54442d18 DQ 03ff921fb54442d18r	; 1.5708
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_TheStateStack$initializer$ DD FLAT:??__ETheStateStack@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\statestack.cpp
;	COMDAT ?normalizeVector@@YAXPAUTpoint@@@Z
_TEXT	SEGMENT
_mag$ = -4						; size = 4
_v$ = 8							; size = 4
?normalizeVector@@YAXPAUTpoint@@@Z PROC			; normalizeVector, COMDAT

; 90   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 91   : 	float mag = SqrtF(v->x*v->x+v->y*v->y+v->z*v->z);

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtF@@YAMM@Z				; SqrtF
	add	esp, 4
	fstp	DWORD PTR _mag$[ebp]

; 92   : 	v->x /= mag;

	mov	eax, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	divss	xmm0, DWORD PTR _mag$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 93   : 	v->y /= mag;

	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	divss	xmm0, DWORD PTR _mag$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 94   : 	v->z /= mag;

	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	divss	xmm0, DWORD PTR _mag$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 95   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?normalizeVector@@YAXPAUTpoint@@@Z ENDP			; normalizeVector
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__FTheStateStack@@YAXXZ
text$yd	SEGMENT
??__FTheStateStack@@YAXXZ PROC				; `dynamic atexit destructor for 'TheStateStack'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?TheStateStack@@3VStateStackClass@@A ; TheStateStack
	call	??1StateStackClass@@QAE@XZ		; StateStackClass::~StateStackClass
	pop	ebp
	ret	0
??__FTheStateStack@@YAXXZ ENDP				; `dynamic atexit destructor for 'TheStateStack''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\statestack.cpp
;	COMDAT ??__ETheStateStack@@YAXXZ
text$yc	SEGMENT
??__ETheStateStack@@YAXXZ PROC				; `dynamic initializer for 'TheStateStack'', COMDAT

; 37   : StateStackClass	TheStateStack;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?TheStateStack@@3VStateStackClass@@A ; TheStateStack
	call	??0StateStackClass@@QAE@XZ		; StateStackClass::StateStackClass
	push	OFFSET ??__FTheStateStack@@YAXXZ	; `dynamic atexit destructor for 'TheStateStack''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__ETheStateStack@@YAXXZ ENDP				; `dynamic initializer for 'TheStateStack''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.h
;	COMDAT ?SetLODBias@CDXEngine@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Bias$ = 8						; size = 4
?SetLODBias@CDXEngine@@QAEXM@Z PROC			; CDXEngine::SetLODBias, COMDAT
; _this$ = ecx

; 142  : 	void SetLODBias(float Bias) { m_LODBiasCx=Bias; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	movss	xmm0, DWORD PTR _Bias$[ebp]
	movss	DWORD PTR ?m_LODBiasCx@CDXEngine@@0MA, xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
?SetLODBias@CDXEngine@@QAEXM@Z ENDP			; CDXEngine::SetLODBias
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.h
;	COMDAT ?SetSunVector@CDXEngine@@QAEXU_D3DVECTOR@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Direction$ = 8						; size = 12
?SetSunVector@CDXEngine@@QAEXU_D3DVECTOR@@@Z PROC	; CDXEngine::SetSunVector, COMDAT
; _this$ = ecx

; 141  : 	void SetSunVector(D3DVECTOR Direction) { TheSun.dvDirection=Direction; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _Direction$[ebp]
	mov	DWORD PTR ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A+64, eax
	mov	ecx, DWORD PTR _Direction$[ebp+4]
	mov	DWORD PTR ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A+68, ecx
	mov	edx, DWORD PTR _Direction$[ebp+8]
	mov	DWORD PTR ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A+72, edx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetSunVector@CDXEngine@@QAEXU_D3DVECTOR@@@Z ENDP	; CDXEngine::SetSunVector
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.h
;	COMDAT ?SetFogColor@CDXEngine@@QAEXPAU_D3DCOLORVALUE@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Color$ = 8						; size = 4
?SetFogColor@CDXEngine@@QAEXPAU_D3DCOLORVALUE@@@Z PROC	; CDXEngine::SetFogColor, COMDAT
; _this$ = ecx

; 121  : 	void SetFogColor(D3DCOLORVALUE *Color) { m_FogColor=*Color; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _Color$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR ?m_FogColor@CDXEngine@@0U_D3DCOLORVALUE@@A, ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR ?m_FogColor@CDXEngine@@0U_D3DCOLORVALUE@@A+4, edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR ?m_FogColor@CDXEngine@@0U_D3DCOLORVALUE@@A+8, ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR ?m_FogColor@CDXEngine@@0U_D3DCOLORVALUE@@A+12, edx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFogColor@CDXEngine@@QAEXPAU_D3DCOLORVALUE@@@Z ENDP	; CDXEngine::SetFogColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?checked_atan2@@YANNN@Z
_TEXT	SEGMENT
_z$ = -8						; size = 8
_y$ = 8							; size = 8
_x$ = 16						; size = 8
?checked_atan2@@YANNN@Z PROC				; checked_atan2, COMDAT

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 47   : 	double z;
; 48   : 	
; 49   : 	if (x == -0.0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@8000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@checked_at

; 50   : 		x = 0.0;

	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _x$[ebp], xmm0
$LN8@checked_at:

; 51   : 	
; 52   : 	if (x != 0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@checked_at

; 53   : 		z = atan(y / x);

	movsd	xmm0, QWORD PTR _y$[ebp]
	divsd	xmm0, QWORD PTR _x$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR _z$[ebp]
	jmp	SHORT $LN4@checked_at
$LN7@checked_at:

; 54   : 	else if (y > 0)

	movsd	xmm0, QWORD PTR _y$[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN5@checked_at

; 55   : 		z = HALF_DPI;

	movsd	xmm0, QWORD PTR __real@3ff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 56   : 	else

	jmp	SHORT $LN4@checked_at
$LN5@checked_at:

; 57   : 		z = -HALF_DPI;

	movsd	xmm0, QWORD PTR __real@bff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN4@checked_at:

; 58   : 
; 59   : 	if (x < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _x$[ebp]
	jbe	SHORT $LN1@checked_at

; 60   : 	{
; 61   : 		if (y < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _y$[ebp]
	jbe	SHORT $LN2@checked_at

; 62   : 			z -= DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	subsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 63   : 		else

	jmp	SHORT $LN1@checked_at
$LN2@checked_at:

; 64   : 			z += DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	addsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN1@checked_at:

; 65   : 	}
; 66   : 
; 67   : 	return z;

	fld	QWORD PTR _z$[ebp]

; 68   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?checked_atan2@@YANNN@Z ENDP				; checked_atan2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\fmath.h
;	COMDAT ?SqrtF@@YAMM@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
?SqrtF@@YAMM@Z PROC					; SqrtF, COMDAT

; 49   : {

	push	ebp
	mov	ebp, esp

; 50   : 	_asm
; 51   : 	{
; 52   : 		fld f;

	fld	DWORD PTR _f$[ebp]

; 53   : 		fsqrt;

	fsqrt

; 54   : 		fstp f;

	fstp	DWORD PTR _f$[ebp]

; 55   : 	}
; 56   : 
; 57   : 	return f;

	fld	DWORD PTR _f$[ebp]

; 58   : }

	pop	ebp
	ret	0
?SqrtF@@YAMM@Z ENDP					; SqrtF
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\statestack.cpp
_TEXT	SEGMENT
_MaxLODRange$ = -288					; size = 4
_clipFlag$ = -284					; size = 4
_cx$1 = -280						; size = 4
_cz$2 = -276						; size = 4
_cy$3 = -272						; size = 4
$T4 = -268						; size = 64
_mT$5 = -204						; size = 64
_tempM$6 = -140						; size = 36
_mS$7 = -104						; size = 64
_stretchM$8 = -40					; size = 36
__$ArrayPad$ = -4					; size = 4
_operation$ = 8						; size = 4
_objInst$ = 12						; size = 4
_rot$ = 16						; size = 4
_pos$ = 20						; size = 4
_sx$ = 24						; size = 4
_sy$ = 28						; size = 4
_sz$ = 32						; size = 4
_scale$ = 36						; size = 4
?pvtDrawObject@StateStackClass@@KAXKPAVObjectInstance@@PBUTrotation@@PBUTpoint@@MMMM@Z PROC ; StateStackClass::pvtDrawObject

; 321  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi

; 322  : 
; 323  : 	UInt32 clipFlag;
; 324  : 	float MaxLODRange;
; 325  : 	static int in = 0;
; 326  : 	
; 327  : 	ShiAssert(objInst);
; 328  : 
; 329  : 	PushAll();

	call	?PushAll@StateStackClass@@SAXXZ		; StateStackClass::PushAll

; 330  : 
; 331  : 	// Set up our transformations
; 332  : 	CompoundTransform(rot,pos);

	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rot$[ebp]
	push	ecx
	call	?CompoundTransform@StateStackClass@@SAXPBUTrotation@@PBUTpoint@@@Z ; StateStackClass::CompoundTransform
	add	esp, 8

; 333  : 
; 334  : 
; 335  : 	SetWorld(rot,pos);

	mov	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _rot$[ebp]
	push	eax
	call	?SetWorld@StateStackClass@@SAXPBUTrotation@@PBUTpoint@@@Z ; StateStackClass::SetWorld
	add	esp, 8

; 336  : 
; 337  : 	if((operation & OP_WARP)||(scale != 1.f))

	mov	ecx, DWORD PTR _operation$[ebp]
	and	ecx, 2
	jne	SHORT $LN13@pvtDrawObj
	movss	xmm0, DWORD PTR _scale$[ebp]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN14@pvtDrawObj
$LN13@pvtDrawObj:

; 338  : 	{
; 339  : 		Pmatrix	tempM;
; 340  : 		float	cx,cy,cz;
; 341  : 		cx=cz=cy=scale;

	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR _cy$3[ebp], xmm0
	movss	xmm0, DWORD PTR _cy$3[ebp]
	movss	DWORD PTR _cz$2[ebp], xmm0
	movss	xmm0, DWORD PTR _cz$2[ebp]
	movss	DWORD PTR _cx$1[ebp], xmm0

; 342  : 
; 343  : 		if(operation & OP_WARP){

	mov	edx, DWORD PTR _operation$[ebp]
	and	edx, 2
	je	SHORT $LN12@pvtDrawObj

; 344  : 			cx*=sx;

	movss	xmm0, DWORD PTR _cx$1[ebp]
	mulss	xmm0, DWORD PTR _sx$[ebp]
	movss	DWORD PTR _cx$1[ebp], xmm0

; 345  : 			cy*=sy;

	movss	xmm0, DWORD PTR _cy$3[ebp]
	mulss	xmm0, DWORD PTR _sy$[ebp]
	movss	DWORD PTR _cy$3[ebp], xmm0

; 346  : 			cz*=sz;

	movss	xmm0, DWORD PTR _cz$2[ebp]
	mulss	xmm0, DWORD PTR _sz$[ebp]
	movss	DWORD PTR _cz$2[ebp], xmm0
$LN12@pvtDrawObj:

; 347  : 		}
; 348  : 
; 349  : 		ShiAssert((sx > 0.0f) && (sx <= 1.0f));
; 350  : 		ShiAssert((sy > 0.0f) && (sy <= 1.0f));
; 351  : 		ShiAssert((sz > 0.0f) && (sz <= 1.0f));
; 352  : 
; 353  : 		Pmatrix	stretchM = {	cx,		0.f,	0.f,

	movss	xmm0, DWORD PTR _cx$1[ebp]
	movss	DWORD PTR _stretchM$8[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _stretchM$8[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _stretchM$8[ebp+8], xmm0

; 354  : 								0.f,	cy,		0.f,

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _stretchM$8[ebp+12], xmm0
	movss	xmm0, DWORD PTR _cy$3[ebp]
	movss	DWORD PTR _stretchM$8[ebp+16], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _stretchM$8[ebp+20], xmm0

; 355  : 								0.f,	0.f,	cz	};

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _stretchM$8[ebp+24], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _stretchM$8[ebp+28], xmm0
	movss	xmm0, DWORD PTR _cz$2[ebp]
	movss	DWORD PTR _stretchM$8[ebp+32], xmm0

; 356  : 
; 357  : 		tempM = Rotation;

	mov	ecx, 9
	mov	esi, OFFSET ?Rotation@StateStackClass@@2UTrotation@@A ; StateStackClass::Rotation
	lea	edi, DWORD PTR _tempM$6[ebp]
	rep movsd

; 358  : 		MatrixMult(&tempM,&stretchM,&Rotation);

	push	OFFSET ?Rotation@StateStackClass@@2UTrotation@@A ; StateStackClass::Rotation
	lea	eax, DWORD PTR _stretchM$8[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempM$6[ebp]
	push	ecx
	call	?MatrixMult@@YAXPBUTrotation@@0PAU1@@Z	; MatrixMult
	add	esp, 12					; 0000000cH

; 359  : 
; 360  : 		D3DFrame::Matrix mS,mT;
; 361  : 		mT = mW;

	push	OFFSET ?mW@StateStackClass@@2VMatrix@D3DFrame@@A ; StateStackClass::mW
	lea	ecx, DWORD PTR _mT$5[ebp]
	call	??4Matrix@D3DFrame@@QAEAAV01@ABV01@@Z	; D3DFrame::Matrix::operator=

; 362  : 		mS.InitIdentity();

	lea	ecx, DWORD PTR _mS$7[ebp]
	call	?InitIdentity@Matrix@D3DFrame@@QAEXXZ	; D3DFrame::Matrix::InitIdentity

; 363  : 		mS.m[0][0]=cx; mS.m[1][1]=cy; mS.m[2][2]=cz;

	mov	edx, 16					; 00000010H
	imul	edx, 0
	lea	eax, DWORD PTR _mS$7[ebp+edx]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR _cx$1[ebp]
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	lea	eax, DWORD PTR _mS$7[ebp+edx]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _cy$3[ebp]
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	lea	eax, DWORD PTR _mS$7[ebp+edx]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _cz$2[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 364  : 		mW = mS*mT;

	lea	edx, DWORD PTR _mT$5[ebp]
	push	edx
	lea	eax, DWORD PTR _mS$7[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	??DD3DFrame@@YA?AVMatrix@0@ABV10@0@Z	; D3DFrame::operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, OFFSET ?mW@StateStackClass@@2VMatrix@D3DFrame@@A ; StateStackClass::mW
	call	??4Matrix@D3DFrame@@QAEAAV01@ABV01@@Z	; D3DFrame::Matrix::operator=
$LN14@pvtDrawObj:

; 365  : 	}
; 366  : 
; 367  : /*	if(scale != 1.f)
; 368  : 	{
; 369  : 		Pmatrix	tempM;
; 370  : 
; 371  : 		Pmatrix scaleM = {	scale,	0.f,	0.f,
; 372  : 							0.f,	scale,	0.f,
; 373  : 							0.f,	0.f,	scale };
; 374  : 
; 375  : 		tempM = Rotation;
; 376  : 		MatrixMult(&tempM,&scaleM,&Rotation);
; 377  : 
; 378  : 		D3DFrame::Matrix mS,mT;
; 379  : 		mT = mW;
; 380  : 		mS.InitIdentity();
; 381  : 		mS.m[0][0]=scale; mS.m[1][1]=scale; mS.m[2][2]=scale;
; 382  : 		mW = mS*mT;
; 383  : 	}*/
; 384  : 
; 385  : 	// Store the adjusted range for LOD determinations
; 386  : 	LODRange = Xlation.x * LODBiasInv;

	movss	xmm0, DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A
	mulss	xmm0, DWORD PTR ?LODBiasInv@StateStackClass@@2MA
	movss	DWORD PTR ?LODRange@StateStackClass@@2MA, xmm0

; 387  : 
; 388  : 	// Choose the appropriate LOD of the object to be drawn
; 389  : 	CurrentInstance = objInst;

	mov	edx, DWORD PTR _objInst$[ebp]
	mov	DWORD PTR ?CurrentInstance@StateStackClass@@2PAVObjectInstance@@A, edx ; StateStackClass::CurrentInstance

; 390  : 
; 391  : 	if (objInst->ParentObject)

	mov	eax, DWORD PTR _objInst$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	$LN4@pvtDrawObj

; 392  : 	{
; 393  : 		if (g_bSlowButSafe && F4IsBadCodePtr((FARPROC) objInst->ParentObject)) // JB 010220 CTD (too much CPU)

	movzx	ecx, BYTE PTR ?g_bSlowButSafe@@3_NA	; g_bSlowButSafe
	test	ecx, ecx
	je	SHORT $LN10@pvtDrawObj
	mov	edx, DWORD PTR _objInst$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	?F4IsBadCodePtr@@YA_NPAX@Z		; F4IsBadCodePtr
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN10@pvtDrawObj

; 394  : 			CurrentLOD = 0; // JB 010220 CTD

	mov	DWORD PTR ?CurrentLOD@StateStackClass@@2PBVObjectLOD@@B, 0 ; StateStackClass::CurrentLOD

; 395  : 		else // JB 010220 CTD

	jmp	SHORT $LN6@pvtDrawObj
$LN10@pvtDrawObj:

; 396  : 		if (objInst->id < 0 || objInst->id >= TheObjectListLength || objInst->TextureSet < 0) // JB 010705 CTD second try

	mov	edx, DWORD PTR _objInst$[ebp]
	cmp	DWORD PTR [edx+20], 0
	jl	SHORT $LN7@pvtDrawObj
	mov	eax, DWORD PTR _objInst$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR ?TheObjectListLength@@3HA ; TheObjectListLength
	jge	SHORT $LN7@pvtDrawObj
	mov	edx, DWORD PTR _objInst$[ebp]
	cmp	DWORD PTR [edx+16], 0
	jge	SHORT $LN8@pvtDrawObj
$LN7@pvtDrawObj:

; 397  : 		{
; 398  : 			ShiAssert(FALSE);
; 399  : 			CurrentLOD = 0;

	mov	DWORD PTR ?CurrentLOD@StateStackClass@@2PBVObjectLOD@@B, 0 ; StateStackClass::CurrentLOD

; 400  : 		}
; 401  : 		else 

	jmp	SHORT $LN6@pvtDrawObj
$LN8@pvtDrawObj:

; 402  : 			CurrentLOD = objInst->ParentObject->ChooseLOD(LODRange,&LODused,&MaxLODRange);

	lea	eax, DWORD PTR _MaxLODRange$[ebp]
	push	eax
	push	OFFSET ?LODused@StateStackClass@@1HA	; StateStackClass::LODused
	push	ecx
	movss	xmm0, DWORD PTR ?LODRange@StateStackClass@@2MA
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _objInst$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?ChooseLOD@ObjectParent@@QAEPAVObjectLOD@@MPAHPAM@Z ; ObjectParent::ChooseLOD
	mov	DWORD PTR ?CurrentLOD@StateStackClass@@2PBVObjectLOD@@B, eax ; StateStackClass::CurrentLOD
$LN6@pvtDrawObj:

; 403  : 
; 404  : 		if(CurrentLOD)

	cmp	DWORD PTR ?CurrentLOD@StateStackClass@@2PBVObjectLOD@@B, 0 ; StateStackClass::CurrentLOD
	je	$LN4@pvtDrawObj

; 405  : 		{
; 406  : 			// Decide if we need clipping, or if the object is totally off screen
; 407  : 			clipFlag = CheckBoundingSphereClipping();

	call	?CheckBoundingSphereClipping@StateStackClass@@KAKXZ ; StateStackClass::CheckBoundingSphereClipping
	mov	DWORD PTR _clipFlag$[ebp], eax

; 408  : 
; 409  : 			// Continue only if some part of the bounding volume is on screen
; 410  : 			if (clipFlag != OFF_SCREEN)

	cmp	DWORD PTR _clipFlag$[ebp], 255		; 000000ffH
	je	SHORT $LN4@pvtDrawObj

; 411  : 			{
; 412  : 			// Set the jump pointers to turn on/off clipping
; 413  : 				if (clipFlag == ON_SCREEN)

	cmp	DWORD PTR _clipFlag$[ebp], 0
	jne	SHORT $LN3@pvtDrawObj

; 414  : 				{
; 415  : 					Transform = TransformNoClip;

	mov	DWORD PTR ?Transform@StateStackClass@@2P6AXPAUTpoint@@H@ZA, OFFSET ?TransformNoClip@StateStackClass@@KAXPAUTpoint@@H@Z ; StateStackClass::Transform, StateStackClass::TransformNoClip

; 416  : 					DrawPrimJumpTable = DrawPrimNoClipJumpTable;

	mov	edx, DWORD PTR ?DrawPrimNoClipJumpTable@@3PBQ6AXPAUPrim@@@ZB ; DrawPrimNoClipJumpTable
	mov	DWORD PTR ?DrawPrimJumpTable@@3PBQ6AXPAUPrim@@@ZB, edx ; DrawPrimJumpTable

; 417  : 				}
; 418  : 				else

	jmp	SHORT $LN2@pvtDrawObj
$LN3@pvtDrawObj:

; 419  : 				{
; 420  : 					Transform = TransformWithClip;

	mov	DWORD PTR ?Transform@StateStackClass@@2P6AXPAUTpoint@@H@ZA, OFFSET ?TransformWithClip@StateStackClass@@KAXPAUTpoint@@H@Z ; StateStackClass::Transform, StateStackClass::TransformWithClip

; 421  : 					DrawPrimJumpTable = DrawPrimWithClipJumpTable;

	mov	DWORD PTR ?DrawPrimJumpTable@@3PBQ6AXPAUPrim@@@ZB, OFFSET ?DrawPrimWithClipJumpTable@@3QBQ6AXPAUPrim@@@ZB ; DrawPrimJumpTable, DrawPrimWithClipJumpTable
$LN2@pvtDrawObj:

; 422  : 				}
; 423  : 
; 424  : 				// Choose perspective correction or not
; 425  : 	//			if ((Xlation.x > CurrentInstance->Radius() * PERSP_CORR_RADIUS_MULTIPLIER) && 
; 426  : 	//				!(CurrentLOD->flags & ObjectLOD::PERSP_CORR))
; 427  : 	//			{
; 428  : 	//				RenderStateTable = RenderStateTableNPC;
; 429  : 	//			}
; 430  : 	//			else
; 431  : 	//			{
; 432  : 					RenderStateTable = RenderStateTablePC;

	mov	eax, DWORD PTR ?RenderStateTablePC@@3PBHB ; RenderStateTablePC
	mov	DWORD PTR ?RenderStateTable@@3PBHB, eax	; RenderStateTable

; 433  : 	//			}
; 434  : 
; 435  : 				in ++;

	mov	ecx, DWORD PTR ?in@?1??pvtDrawObject@StateStackClass@@KAXKPAVObjectInstance@@PBUTrotation@@PBUTpoint@@MMMM@Z@4HA
	add	ecx, 1
	mov	DWORD PTR ?in@?1??pvtDrawObject@StateStackClass@@KAXKPAVObjectInstance@@PBUTrotation@@PBUTpoint@@MMMM@Z@4HA, ecx

; 436  : 
; 437  : 				if (in == 1)

	cmp	DWORD PTR ?in@?1??pvtDrawObject@StateStackClass@@KAXKPAVObjectInstance@@PBUTrotation@@PBUTpoint@@MMMM@Z@4HA, 1
	jne	SHORT $LN1@pvtDrawObj

; 438  : 				{
; 439  : 					verts = 0;

	mov	DWORD PTR ?verts@@3HA, 0		; verts
$LN1@pvtDrawObj:

; 440  : 				}
; 441  : 
; 442  : 				// Draw the object
; 443  : 				CurrentLOD->Draw();

	mov	ecx, DWORD PTR ?CurrentLOD@StateStackClass@@2PBVObjectLOD@@B ; StateStackClass::CurrentLOD
	call	?Draw@ObjectLOD@@QBEXXZ			; ObjectLOD::Draw

; 444  : 
; 445  : //				if (in == 1)
; 446  : //				{
; 447  : //					if (verts)
; 448  : //					{
; 449  : //						MonoPrint ("Obj %d:%d %d : %d\n", objInst->id, LODused, (int) MaxLODRange, verts);
; 450  : //					}
; 451  : //				}
; 452  : 
; 453  : 				in --;

	mov	edx, DWORD PTR ?in@?1??pvtDrawObject@StateStackClass@@KAXKPAVObjectInstance@@PBUTrotation@@PBUTpoint@@MMMM@Z@4HA
	sub	edx, 1
	mov	DWORD PTR ?in@?1??pvtDrawObject@StateStackClass@@KAXKPAVObjectInstance@@PBUTrotation@@PBUTpoint@@MMMM@Z@4HA, edx
$LN4@pvtDrawObj:

; 454  : 			}
; 455  : 		}
; 456  : 	}
; 457  : 
; 458  : 	PopAll();

	call	?PopAll@StateStackClass@@SAXXZ		; StateStackClass::PopAll

; 459  : }

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?pvtDrawObject@StateStackClass@@KAXKPAVObjectInstance@@PBUTrotation@@PBUTpoint@@MMMM@Z ENDP ; StateStackClass::pvtDrawObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\statestack.cpp
_TEXT	SEGMENT
tv256 = -28						; size = 4
tv243 = -24						; size = 4
tv66 = -20						; size = 4
_OneOverZ$1 = -16					; size = 4
_scratch_y$ = -12					; size = 4
_scratch_x$ = -8					; size = 4
_scratch_z$ = -4					; size = 4
_p$ = 8							; size = 4
_n$ = 12						; size = 4
_clip$ = 16						; size = 4
?TransformInline@StateStackClass@@KAXPAUTpoint@@HH@Z PROC ; StateStackClass::TransformInline

; 732  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
$LN10@TransformI:

; 733  : 	float scratch_x,scratch_y,scratch_z;
; 734  : 
; 735  : 	// Make sure we've got enough room in the transformed position pool
; 736  : 	ShiAssert(IsValidPosIndex(n-1));
; 737  : 
; 738  : 	while(n--)

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR _n$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 0
	je	$LN9@TransformI

; 739  : 	{
; 740  : 		scratch_z = Rotation.M11 * p->x + Rotation.M12 * p->y + Rotation.M13 * p->z + Xlation.x;

	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR ?Rotation@StateStackClass@@2UTrotation@@A
	mulss	xmm0, DWORD PTR [edx]
	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm1, DWORD PTR ?Rotation@StateStackClass@@2UTrotation@@A+4
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm1, DWORD PTR ?Rotation@StateStackClass@@2UTrotation@@A+8
	mulss	xmm1, DWORD PTR [ecx+8]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A
	movss	DWORD PTR _scratch_z$[ebp], xmm0

; 741  : 		scratch_x = Rotation.M21 * p->x + Rotation.M22 * p->y + Rotation.M23 * p->z + Xlation.y;

	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR ?Rotation@StateStackClass@@2UTrotation@@A+12
	mulss	xmm0, DWORD PTR [edx]
	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm1, DWORD PTR ?Rotation@StateStackClass@@2UTrotation@@A+16
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm1, DWORD PTR ?Rotation@StateStackClass@@2UTrotation@@A+20
	mulss	xmm1, DWORD PTR [ecx+8]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A+4
	movss	DWORD PTR _scratch_x$[ebp], xmm0

; 742  : 		scratch_y = Rotation.M31 * p->x + Rotation.M32 * p->y + Rotation.M33 * p->z + Xlation.z;

	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR ?Rotation@StateStackClass@@2UTrotation@@A+24
	mulss	xmm0, DWORD PTR [edx]
	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm1, DWORD PTR ?Rotation@StateStackClass@@2UTrotation@@A+28
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm1, DWORD PTR ?Rotation@StateStackClass@@2UTrotation@@A+32
	mulss	xmm1, DWORD PTR [ecx+8]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A+8
	movss	DWORD PTR _scratch_y$[ebp], xmm0

; 743  : 
; 744  : 		if(clip)

	cmp	DWORD PTR _clip$[ebp], 0
	je	$LN8@TransformI

; 745  : 		{
; 746  : 			ClipInfoPoolNext->clipFlag = ON_SCREEN;

	mov	edx, DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPoolNext
	mov	DWORD PTR [edx], 0

; 747  : 
; 748  : 			if(scratch_z < NEAR_CLIP_DISTANCE)

	movss	xmm0, DWORD PTR _NEAR_CLIP_DISTANCE
	comiss	xmm0, DWORD PTR _scratch_z$[ebp]
	jbe	SHORT $LN7@TransformI

; 749  : 				ClipInfoPoolNext->clipFlag |= CLIP_NEAR;

	mov	eax, DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPoolNext
	mov	ecx, DWORD PTR [eax]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPoolNext
	mov	DWORD PTR [edx], ecx
$LN7@TransformI:

; 750  : 
; 751  : 			if(fabs(scratch_y) > scratch_z)

	push	ecx
	movss	xmm0, DWORD PTR _scratch_y$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv243[ebp]
	movss	xmm0, DWORD PTR tv243[ebp]
	comiss	xmm0, DWORD PTR _scratch_z$[ebp]
	jbe	SHORT $LN4@TransformI

; 752  : 			{
; 753  : 				if(scratch_y > scratch_z)

	movss	xmm0, DWORD PTR _scratch_y$[ebp]
	comiss	xmm0, DWORD PTR _scratch_z$[ebp]
	jbe	SHORT $LN5@TransformI

; 754  : 					ClipInfoPoolNext->clipFlag |= CLIP_BOTTOM;

	mov	eax, DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPoolNext
	mov	ecx, DWORD PTR [eax]
	or	ecx, 8
	mov	edx, DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPoolNext
	mov	DWORD PTR [edx], ecx

; 755  : 				else

	jmp	SHORT $LN4@TransformI
$LN5@TransformI:

; 756  : 					ClipInfoPoolNext->clipFlag |= CLIP_TOP;

	mov	eax, DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPoolNext
	mov	ecx, DWORD PTR [eax]
	or	ecx, 4
	mov	edx, DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPoolNext
	mov	DWORD PTR [edx], ecx
$LN4@TransformI:

; 757  : 			}
; 758  : 
; 759  : 			if(fabs(scratch_x) > scratch_z)

	push	ecx
	movss	xmm0, DWORD PTR _scratch_x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv256[ebp]
	movss	xmm0, DWORD PTR tv256[ebp]
	comiss	xmm0, DWORD PTR _scratch_z$[ebp]
	jbe	SHORT $LN1@TransformI

; 760  : 			{
; 761  : 				if(scratch_x > scratch_z)

	movss	xmm0, DWORD PTR _scratch_x$[ebp]
	comiss	xmm0, DWORD PTR _scratch_z$[ebp]
	jbe	SHORT $LN2@TransformI

; 762  : 					ClipInfoPoolNext->clipFlag |= CLIP_RIGHT;

	mov	eax, DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPoolNext
	mov	ecx, DWORD PTR [eax]
	or	ecx, 2
	mov	edx, DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPoolNext
	mov	DWORD PTR [edx], ecx

; 763  : 				else

	jmp	SHORT $LN1@TransformI
$LN2@TransformI:

; 764  : 					ClipInfoPoolNext->clipFlag |= CLIP_LEFT;

	mov	eax, DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPoolNext
	mov	ecx, DWORD PTR [eax]
	or	ecx, 1
	mov	edx, DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPoolNext
	mov	DWORD PTR [edx], ecx
$LN1@TransformI:

; 765  : 			}
; 766  : 
; 767  : 			ClipInfoPoolNext->csX = scratch_x;

	mov	eax, DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPoolNext
	movss	xmm0, DWORD PTR _scratch_x$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 768  : 			ClipInfoPoolNext->csY = scratch_y;

	mov	ecx, DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPoolNext
	movss	xmm0, DWORD PTR _scratch_y$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 769  : 			ClipInfoPoolNext->csZ = scratch_z;

	mov	edx, DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPoolNext
	movss	xmm0, DWORD PTR _scratch_z$[ebp]
	movss	DWORD PTR [edx+12], xmm0

; 770  : 
; 771  : 			ClipInfoPoolNext++;

	mov	eax, DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPoolNext
	add	eax, 16					; 00000010H
	mov	DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A, eax ; StateStackClass::ClipInfoPoolNext
$LN8@TransformI:

; 772  : 		}
; 773  : 
; 774  : 		register float OneOverZ = 1.f/scratch_z;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _scratch_z$[ebp]
	movss	DWORD PTR _OneOverZ$1[ebp], xmm0

; 775  : 		p++;

	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _p$[ebp], ecx

; 776  : 
; 777  : 		XformedPosPoolNext->z = scratch_z;

	mov	edx, DWORD PTR ?XformedPosPoolNext@StateStackClass@@2PAUSpoint@@A ; StateStackClass::XformedPosPoolNext
	movss	xmm0, DWORD PTR _scratch_z$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 778  : 		XformedPosPoolNext->x = XtoPixel(scratch_x * OneOverZ);

	movss	xmm0, DWORD PTR _scratch_x$[ebp]
	mulss	xmm0, DWORD PTR _OneOverZ$1[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?XtoPixel@StateStackClass@@SAMM@Z	; StateStackClass::XtoPixel
	add	esp, 4
	mov	eax, DWORD PTR ?XformedPosPoolNext@StateStackClass@@2PAUSpoint@@A ; StateStackClass::XformedPosPoolNext
	fstp	DWORD PTR [eax]

; 779  : 		XformedPosPoolNext->y = YtoPixel(scratch_y * OneOverZ);

	movss	xmm0, DWORD PTR _scratch_y$[ebp]
	mulss	xmm0, DWORD PTR _OneOverZ$1[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?YtoPixel@StateStackClass@@SAMM@Z	; StateStackClass::YtoPixel
	add	esp, 4
	mov	ecx, DWORD PTR ?XformedPosPoolNext@StateStackClass@@2PAUSpoint@@A ; StateStackClass::XformedPosPoolNext
	fstp	DWORD PTR [ecx+4]

; 780  : 		XformedPosPoolNext++;

	mov	edx, DWORD PTR ?XformedPosPoolNext@StateStackClass@@2PAUSpoint@@A ; StateStackClass::XformedPosPoolNext
	add	edx, 16					; 00000010H
	mov	DWORD PTR ?XformedPosPoolNext@StateStackClass@@2PAUSpoint@@A, edx ; StateStackClass::XformedPosPoolNext

; 781  : 	}

	jmp	$LN10@TransformI
$LN9@TransformI:

; 782  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?TransformInline@StateStackClass@@KAXPAUTpoint@@HH@Z ENDP ; StateStackClass::TransformInline
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\statestack.cpp
_TEXT	SEGMENT
_rx$ = -12						; size = 4
_rd$ = -8						; size = 4
_rh$ = -4						; size = 4
?CheckBoundingSphereClipping@StateStackClass@@KAKXZ PROC ; StateStackClass::CheckBoundingSphereClipping

; 511  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 512  : 	// Decide if we need clipping, or if the object is totally off screen
; 513  : 	// REMEMBER:  Xlation is camera oriented, but still X front, Y right, Z down
; 514  : 	//			  so range from viewer is in the X term.
; 515  : 	// NOTE:  We compute "d", the distance from the viewer at which the bounding
; 516  : 	//		  sphere should intersect the view frustum.  We use .707 since the
; 517  : 	//		  rotation matrix already normalized us to a 45 degree half angle.
; 518  : 	//		  We do have to adjust the radius shift by the FOV correction factors,
; 519  : 	//		  though, since it didn't go through the matix.
; 520  : 	// NOTE2: We could develop the complete set of clip flags here by continuing to 
; 521  : 	//        check other edges instead of returning in the clipped cases.  For now,
; 522  : 	//        we only need to know if it IS clipped or not, so we terminate early.
; 523  : 	// TODO:  We should roll the radius of any attached slot children into the check radius
; 524  : 	//		  to ensure that we don't reject a parent object whose _children_ may be on screen.
; 525  : 	//        (though this should be fairly rare in practice)
; 526  : 	float	rd;
; 527  : 	float	rh;
; 528  : 	float	rx;
; 529  : //	UInt32	clipFlag = ON_SCREEN;
; 530  : 
; 531  : 	rx=CurrentInstance->Radius();

	mov	ecx, DWORD PTR ?CurrentInstance@StateStackClass@@2PAVObjectInstance@@A ; StateStackClass::CurrentInstance
	call	?Radius@ObjectInstance@@QBEMXZ		; ObjectInstance::Radius
	fstp	DWORD PTR _rx$[ebp]

; 532  : 	rd = rx * vAspectDepthCorrection;

	movss	xmm0, DWORD PTR _rx$[ebp]
	mulss	xmm0, DWORD PTR ?vAspectDepthCorrection@StateStackClass@@1MA
	movss	DWORD PTR _rd$[ebp], xmm0

; 533  : 	rh = rx * vAspectWidthCorrection;

	movss	xmm0, DWORD PTR _rx$[ebp]
	mulss	xmm0, DWORD PTR ?vAspectWidthCorrection@StateStackClass@@1MA
	movss	DWORD PTR _rh$[ebp], xmm0

; 534  : 	if (-(Xlation.z - rh) >= Xlation.x - rd) {

	movss	xmm0, DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A+8
	subss	xmm0, DWORD PTR _rh$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A
	subss	xmm1, DWORD PTR _rd$[ebp]
	comiss	xmm0, xmm1
	jb	SHORT $LN10@CheckBound

; 535  : 		if (-(Xlation.z + rh) > Xlation.x + rd) {

	movss	xmm0, DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A+8
	addss	xmm0, DWORD PTR _rh$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A
	addss	xmm1, DWORD PTR _rd$[ebp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN9@CheckBound

; 536  : 			return OFF_SCREEN;			// Trivial reject top

	mov	eax, 255				; 000000ffH
	jmp	$LN11@CheckBound
$LN9@CheckBound:

; 537  : 		}
; 538  : //		clipFlag = CLIP_TOP;
; 539  : 		return CLIP_TOP;

	mov	eax, 4
	jmp	$LN11@CheckBound
$LN10@CheckBound:

; 540  : 	}
; 541  : 	if (Xlation.z + rh >= Xlation.x - rd) {

	movss	xmm0, DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A+8
	addss	xmm0, DWORD PTR _rh$[ebp]
	movss	xmm1, DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A
	subss	xmm1, DWORD PTR _rd$[ebp]
	comiss	xmm0, xmm1
	jb	SHORT $LN8@CheckBound

; 542  : 		if (Xlation.z - rh > Xlation.x + rd) {

	movss	xmm0, DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A+8
	subss	xmm0, DWORD PTR _rh$[ebp]
	movss	xmm1, DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A
	addss	xmm1, DWORD PTR _rd$[ebp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN7@CheckBound

; 543  : 			return OFF_SCREEN;			// Trivial reject bottom

	mov	eax, 255				; 000000ffH
	jmp	$LN11@CheckBound
$LN7@CheckBound:

; 544  : 		}
; 545  : //		clipFlag |= CLIP_BOTTOM;
; 546  : 		return CLIP_BOTTOM;

	mov	eax, 8
	jmp	$LN11@CheckBound
$LN8@CheckBound:

; 547  : 	}
; 548  : 
; 549  : 	rd = rx * hAspectDepthCorrection;

	movss	xmm0, DWORD PTR _rx$[ebp]
	mulss	xmm0, DWORD PTR ?hAspectDepthCorrection@StateStackClass@@1MA
	movss	DWORD PTR _rd$[ebp], xmm0

; 550  : 	rh = rx * hAspectWidthCorrection;

	movss	xmm0, DWORD PTR _rx$[ebp]
	mulss	xmm0, DWORD PTR ?hAspectWidthCorrection@StateStackClass@@1MA
	movss	DWORD PTR _rh$[ebp], xmm0

; 551  : 	if (-(Xlation.y - rh) >= Xlation.x - rd) {

	movss	xmm0, DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A+4
	subss	xmm0, DWORD PTR _rh$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A
	subss	xmm1, DWORD PTR _rd$[ebp]
	comiss	xmm0, xmm1
	jb	SHORT $LN6@CheckBound

; 552  : 		if (-(Xlation.x + rh) > Xlation.x + rd) {

	movss	xmm0, DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A
	addss	xmm0, DWORD PTR _rh$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A
	addss	xmm1, DWORD PTR _rd$[ebp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN5@CheckBound

; 553  : 			return OFF_SCREEN;			// Trivial reject left

	mov	eax, 255				; 000000ffH
	jmp	$LN11@CheckBound
$LN5@CheckBound:

; 554  : 		}
; 555  : //		clipFlag |= CLIP_LEFT;
; 556  : 		return CLIP_LEFT;

	mov	eax, 1
	jmp	$LN11@CheckBound
$LN6@CheckBound:

; 557  : 	}
; 558  : 	if (Xlation.y + rh >= Xlation.x - rd) {

	movss	xmm0, DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A+4
	addss	xmm0, DWORD PTR _rh$[ebp]
	movss	xmm1, DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A
	subss	xmm1, DWORD PTR _rd$[ebp]
	comiss	xmm0, xmm1
	jb	SHORT $LN4@CheckBound

; 559  : 		if (Xlation.y - rh > Xlation.x + rd) {

	movss	xmm0, DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A+4
	subss	xmm0, DWORD PTR _rh$[ebp]
	movss	xmm1, DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A
	addss	xmm1, DWORD PTR _rd$[ebp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN3@CheckBound

; 560  : 			return OFF_SCREEN;			// Trivial reject right

	mov	eax, 255				; 000000ffH
	jmp	SHORT $LN11@CheckBound
$LN3@CheckBound:

; 561  : 		}
; 562  : //		clipFlag |= CLIP_RIGHT;
; 563  : 		return CLIP_RIGHT;

	mov	eax, 2
	jmp	SHORT $LN11@CheckBound
$LN4@CheckBound:

; 564  : 	}
; 565  : 
; 566  : 	rh = rx;

	movss	xmm0, DWORD PTR _rx$[ebp]
	movss	DWORD PTR _rh$[ebp], xmm0

; 567  : 	if (Xlation.x - rh < NEAR_CLIP_DISTANCE) {

	movss	xmm0, DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A
	subss	xmm0, DWORD PTR _rh$[ebp]
	movss	xmm1, DWORD PTR _NEAR_CLIP_DISTANCE
	comiss	xmm1, xmm0
	jbe	SHORT $LN2@CheckBound

; 568  : 		if (Xlation.x + rh < NEAR_CLIP_DISTANCE) {

	movss	xmm0, DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A
	addss	xmm0, DWORD PTR _rh$[ebp]
	movss	xmm1, DWORD PTR _NEAR_CLIP_DISTANCE
	comiss	xmm1, xmm0
	jbe	SHORT $LN1@CheckBound

; 569  : 			return OFF_SCREEN;			// Trivial reject near

	mov	eax, 255				; 000000ffH
	jmp	SHORT $LN11@CheckBound
$LN1@CheckBound:

; 570  : 		}
; 571  : //		clipFlag |= CLIP_NEAR;
; 572  : 		return CLIP_NEAR;

	mov	eax, 16					; 00000010H
	jmp	SHORT $LN11@CheckBound
$LN2@CheckBound:

; 573  : 	}
; 574  : 
; 575  : //	return clipFlag;
; 576  : 	return ON_SCREEN;

	xor	eax, eax
$LN11@CheckBound:

; 577  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CheckBoundingSphereClipping@StateStackClass@@KAKXZ ENDP ; StateStackClass::CheckBoundingSphereClipping
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\statestack.cpp
_TEXT	SEGMENT
_p$ = 8							; size = 4
_n$ = 12						; size = 4
?TransformWithClip@StateStackClass@@KAXPAUTpoint@@H@Z PROC ; StateStackClass::TransformWithClip

; 790  : {

	push	ebp
	mov	ebp, esp

; 791  : 	// TODO:  Need to make sure we're not going to walk off the end...
; 792  : 	TransformInline(p, n, TRUE);

	push	1
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?TransformInline@StateStackClass@@KAXPAUTpoint@@HH@Z ; StateStackClass::TransformInline
	add	esp, 12					; 0000000cH

; 793  : }

	pop	ebp
	ret	0
?TransformWithClip@StateStackClass@@KAXPAUTpoint@@H@Z ENDP ; StateStackClass::TransformWithClip
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\statestack.cpp
_TEXT	SEGMENT
_p$ = 8							; size = 4
_n$ = 12						; size = 4
?TransformNoClip@StateStackClass@@KAXPAUTpoint@@H@Z PROC ; StateStackClass::TransformNoClip

; 785  : {

	push	ebp
	mov	ebp, esp

; 786  : 	TransformInline(p, n, FALSE);

	push	0
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?TransformInline@StateStackClass@@KAXPAUTpoint@@HH@Z ; StateStackClass::TransformInline
	add	esp, 12					; 0000000cH

; 787  : }

	pop	ebp
	ret	0
?TransformNoClip@StateStackClass@@KAXPAUTpoint@@H@Z ENDP ; StateStackClass::TransformNoClip
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\statestack.cpp
_TEXT	SEGMENT
tv68 = -4						; size = 4
_i$ = 8							; size = 4
?IsValidIntensityIndex@StateStackClass@@SAHH@Z PROC	; StateStackClass::IsValidIntensityIndex

; 861  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 862  : 	return (i+IntensityPool < IntensityPoolBuffer+MAX_VERT_POOL_SIZE);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR ?IntensityPool@StateStackClass@@2PAMA ; StateStackClass::IntensityPool
	lea	edx, DWORD PTR [ecx+eax*4]
	cmp	edx, OFFSET _IntensityPoolBuffer+32768
	jae	SHORT $LN3@IsValidInt
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsValidInt
$LN3@IsValidInt:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsValidInt:
	mov	eax, DWORD PTR tv68[ebp]

; 863  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsValidIntensityIndex@StateStackClass@@SAHH@Z ENDP	; StateStackClass::IsValidIntensityIndex
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\statestack.cpp
_TEXT	SEGMENT
tv68 = -4						; size = 4
_i$ = 8							; size = 4
?IsValidPosIndex@StateStackClass@@SAHH@Z PROC		; StateStackClass::IsValidPosIndex

; 856  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 857  : 	return (i+XformedPosPool < XformedPosPoolBuffer+MAX_VERT_POOL_SIZE);

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR ?XformedPosPool@StateStackClass@@2PAUSpoint@@A ; StateStackClass::XformedPosPool
	cmp	eax, OFFSET _XformedPosPoolBuffer+131072
	jae	SHORT $LN3@IsValidPos
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsValidPos
$LN3@IsValidPos:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsValidPos:
	mov	eax, DWORD PTR tv68[ebp]

; 858  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsValidPosIndex@StateStackClass@@SAHH@Z ENDP		; StateStackClass::IsValidPosIndex
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\statestack.h
;	COMDAT ?YtoPixel@StateStackClass@@SAMM@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
_y$ = 8							; size = 4
?YtoPixel@StateStackClass@@SAMM@Z PROC			; StateStackClass::YtoPixel, COMDAT

; 102  :     inline static float YtoPixel(float y) { return (y*scaleY)+shiftY; };

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	mulss	xmm0, DWORD PTR ?scaleY@StateStackClass@@1MA
	addss	xmm0, DWORD PTR ?shiftY@StateStackClass@@1MA
	movss	DWORD PTR tv69[ebp], xmm0
	fld	DWORD PTR tv69[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?YtoPixel@StateStackClass@@SAMM@Z ENDP			; StateStackClass::YtoPixel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\statestack.h
;	COMDAT ?XtoPixel@StateStackClass@@SAMM@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
_x$ = 8							; size = 4
?XtoPixel@StateStackClass@@SAMM@Z PROC			; StateStackClass::XtoPixel, COMDAT

; 101  :     inline static float XtoPixel(float x) { return (x*scaleX)+shiftX; };

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR ?scaleX@StateStackClass@@1MA
	addss	xmm0, DWORD PTR ?shiftX@StateStackClass@@1MA
	movss	DWORD PTR tv69[ebp], xmm0
	fld	DWORD PTR tv69[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?XtoPixel@StateStackClass@@SAMM@Z ENDP			; StateStackClass::XtoPixel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\statestack.cpp
_TEXT	SEGMENT
tv244 = -32						; size = 4
tv231 = -28						; size = 4
tv67 = -24						; size = 4
_OneOverZ$1 = -20					; size = 4
_scratch_y$ = -16					; size = 4
_scratch_x$ = -12					; size = 4
_scratch_z$ = -8					; size = 4
_T$ = -4						; size = 4
_p$ = 8							; size = 4
_n$ = 12						; size = 4
_type$ = 16						; size = 4
?TransformBillboardWithClip@StateStackClass@@SAXPAUTpoint@@HW4BTransformType@@@Z PROC ; StateStackClass::TransformBillboardWithClip

; 796  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 797  : 	float	scratch_x, scratch_y, scratch_z;
; 798  : 	Pmatrix	*T;
; 799  : 
; 800  : 	// Make sure we've got enough room in the transformed position pool
; 801  : 	ShiAssert(IsValidPosIndex(n-1));
; 802  : 
; 803  : 	if(type == Tree)

	cmp	DWORD PTR _type$[ebp], 2
	jne	SHORT $LN11@TransformB

; 804  : 	{
; 805  : 		T = Tt;

	mov	eax, DWORD PTR ?Tt@StateStackClass@@2PAUTrotation@@A ; StateStackClass::Tt
	mov	DWORD PTR _T$[ebp], eax

; 806  : 	}
; 807  : 	else

	jmp	SHORT $LN10@TransformB
$LN11@TransformB:

; 808  : 	{
; 809  : 		T = Tb;

	mov	ecx, DWORD PTR ?Tb@StateStackClass@@2PAUTrotation@@A ; StateStackClass::Tb
	mov	DWORD PTR _T$[ebp], ecx
$LN10@TransformB:

; 810  : 	}
; 811  : 
; 812  : 	while(n--)

	mov	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR tv67[ebp], edx
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	mov	DWORD PTR _n$[ebp], eax
	cmp	DWORD PTR tv67[ebp], 0
	je	$LN8@TransformB

; 813  : 	{
; 814  : 		scratch_z = T->M11 * p->x + T->M12 * p->y + T->M13 * p->z + Xlation.x;

	mov	ecx, DWORD PTR _T$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR [edx]
	mov	eax, DWORD PTR _T$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	mulss	xmm1, DWORD PTR [ecx+4]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _T$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm1, DWORD PTR [edx+8]
	mulss	xmm1, DWORD PTR [eax+8]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A
	movss	DWORD PTR _scratch_z$[ebp], xmm0

; 815  : 		scratch_x = T->M21 * p->x + T->M22 * p->y + T->M23 * p->z + Xlation.y;

	mov	ecx, DWORD PTR _T$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx+12]
	mulss	xmm0, DWORD PTR [edx]
	mov	eax, DWORD PTR _T$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm1, DWORD PTR [eax+16]
	mulss	xmm1, DWORD PTR [ecx+4]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _T$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm1, DWORD PTR [edx+20]
	mulss	xmm1, DWORD PTR [eax+8]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A+4
	movss	DWORD PTR _scratch_x$[ebp], xmm0

; 816  : 		scratch_y = T->M31 * p->x + T->M32 * p->y + T->M33 * p->z + Xlation.z;

	mov	ecx, DWORD PTR _T$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx+24]
	mulss	xmm0, DWORD PTR [edx]
	mov	eax, DWORD PTR _T$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm1, DWORD PTR [eax+28]
	mulss	xmm1, DWORD PTR [ecx+4]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _T$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm1, DWORD PTR [edx+32]
	mulss	xmm1, DWORD PTR [eax+8]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A+8
	movss	DWORD PTR _scratch_y$[ebp], xmm0

; 817  : 
; 818  : 		ClipInfoPoolNext->clipFlag = ON_SCREEN;

	mov	ecx, DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPoolNext
	mov	DWORD PTR [ecx], 0

; 819  : 
; 820  : 		if(scratch_z < NEAR_CLIP_DISTANCE)

	movss	xmm0, DWORD PTR _NEAR_CLIP_DISTANCE
	comiss	xmm0, DWORD PTR _scratch_z$[ebp]
	jbe	SHORT $LN7@TransformB

; 821  : 			ClipInfoPoolNext->clipFlag |= CLIP_NEAR;

	mov	edx, DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPoolNext
	mov	eax, DWORD PTR [edx]
	or	eax, 16					; 00000010H
	mov	ecx, DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPoolNext
	mov	DWORD PTR [ecx], eax
$LN7@TransformB:

; 822  : 
; 823  : 		if(fabs(scratch_y) > scratch_z)

	push	ecx
	movss	xmm0, DWORD PTR _scratch_y$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv231[ebp]
	movss	xmm0, DWORD PTR tv231[ebp]
	comiss	xmm0, DWORD PTR _scratch_z$[ebp]
	jbe	SHORT $LN4@TransformB

; 824  : 		{
; 825  : 			if(scratch_y > scratch_z)

	movss	xmm0, DWORD PTR _scratch_y$[ebp]
	comiss	xmm0, DWORD PTR _scratch_z$[ebp]
	jbe	SHORT $LN5@TransformB

; 826  : 				ClipInfoPoolNext->clipFlag |= CLIP_BOTTOM;

	mov	edx, DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPoolNext
	mov	eax, DWORD PTR [edx]
	or	eax, 8
	mov	ecx, DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPoolNext
	mov	DWORD PTR [ecx], eax

; 827  : 			else

	jmp	SHORT $LN4@TransformB
$LN5@TransformB:

; 828  : 				ClipInfoPoolNext->clipFlag |= CLIP_TOP;

	mov	edx, DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPoolNext
	mov	eax, DWORD PTR [edx]
	or	eax, 4
	mov	ecx, DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPoolNext
	mov	DWORD PTR [ecx], eax
$LN4@TransformB:

; 829  : 		}
; 830  : 
; 831  : 		if(fabs(scratch_x) > scratch_z)

	push	ecx
	movss	xmm0, DWORD PTR _scratch_x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv244[ebp]
	movss	xmm0, DWORD PTR tv244[ebp]
	comiss	xmm0, DWORD PTR _scratch_z$[ebp]
	jbe	SHORT $LN1@TransformB

; 832  : 		{
; 833  : 			if(scratch_x > scratch_z)

	movss	xmm0, DWORD PTR _scratch_x$[ebp]
	comiss	xmm0, DWORD PTR _scratch_z$[ebp]
	jbe	SHORT $LN2@TransformB

; 834  : 				ClipInfoPoolNext->clipFlag |= CLIP_RIGHT;

	mov	edx, DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPoolNext
	mov	eax, DWORD PTR [edx]
	or	eax, 2
	mov	ecx, DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPoolNext
	mov	DWORD PTR [ecx], eax

; 835  : 			else

	jmp	SHORT $LN1@TransformB
$LN2@TransformB:

; 836  : 				ClipInfoPoolNext->clipFlag |= CLIP_LEFT;

	mov	edx, DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPoolNext
	mov	eax, DWORD PTR [edx]
	or	eax, 1
	mov	ecx, DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPoolNext
	mov	DWORD PTR [ecx], eax
$LN1@TransformB:

; 837  : 		}
; 838  : 
; 839  : 		ClipInfoPoolNext->csX = scratch_x;

	mov	edx, DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPoolNext
	movss	xmm0, DWORD PTR _scratch_x$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 840  : 		ClipInfoPoolNext->csY = scratch_y;

	mov	eax, DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPoolNext
	movss	xmm0, DWORD PTR _scratch_y$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 841  : 		ClipInfoPoolNext->csZ = scratch_z;

	mov	ecx, DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPoolNext
	movss	xmm0, DWORD PTR _scratch_z$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 842  : 
; 843  : 		ClipInfoPoolNext++;

	mov	edx, DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPoolNext
	add	edx, 16					; 00000010H
	mov	DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A, edx ; StateStackClass::ClipInfoPoolNext

; 844  : 
; 845  : 		register float OneOverZ = 1.f/scratch_z;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _scratch_z$[ebp]
	movss	DWORD PTR _OneOverZ$1[ebp], xmm0

; 846  : 		p++;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _p$[ebp], eax

; 847  : 
; 848  : 		XformedPosPoolNext->z = scratch_z;

	mov	ecx, DWORD PTR ?XformedPosPoolNext@StateStackClass@@2PAUSpoint@@A ; StateStackClass::XformedPosPoolNext
	movss	xmm0, DWORD PTR _scratch_z$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 849  : 		XformedPosPoolNext->x = XtoPixel(scratch_x * OneOverZ);

	movss	xmm0, DWORD PTR _scratch_x$[ebp]
	mulss	xmm0, DWORD PTR _OneOverZ$1[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?XtoPixel@StateStackClass@@SAMM@Z	; StateStackClass::XtoPixel
	add	esp, 4
	mov	edx, DWORD PTR ?XformedPosPoolNext@StateStackClass@@2PAUSpoint@@A ; StateStackClass::XformedPosPoolNext
	fstp	DWORD PTR [edx]

; 850  : 		XformedPosPoolNext->y = YtoPixel(scratch_y * OneOverZ);

	movss	xmm0, DWORD PTR _scratch_y$[ebp]
	mulss	xmm0, DWORD PTR _OneOverZ$1[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?YtoPixel@StateStackClass@@SAMM@Z	; StateStackClass::YtoPixel
	add	esp, 4
	mov	eax, DWORD PTR ?XformedPosPoolNext@StateStackClass@@2PAUSpoint@@A ; StateStackClass::XformedPosPoolNext
	fstp	DWORD PTR [eax+4]

; 851  : 		XformedPosPoolNext++;

	mov	ecx, DWORD PTR ?XformedPosPoolNext@StateStackClass@@2PAUSpoint@@A ; StateStackClass::XformedPosPoolNext
	add	ecx, 16					; 00000010H
	mov	DWORD PTR ?XformedPosPoolNext@StateStackClass@@2PAUSpoint@@A, ecx ; StateStackClass::XformedPosPoolNext

; 852  : 	}

	jmp	$LN10@TransformB
$LN8@TransformB:

; 853  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?TransformBillboardWithClip@StateStackClass@@SAXPAUTpoint@@HW4BTransformType@@@Z ENDP ; StateStackClass::TransformBillboardWithClip
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\statestack.cpp
_TEXT	SEGMENT
?PopVerts@StateStackClass@@SAXXZ PROC			; StateStackClass::PopVerts

; 650  : {

	push	ebp
	mov	ebp, esp

; 651  : 	stackDepth--;

	mov	eax, DWORD PTR ?stackDepth@StateStackClass@@1HA ; StateStackClass::stackDepth
	sub	eax, 1
	mov	DWORD PTR ?stackDepth@StateStackClass@@1HA, eax ; StateStackClass::stackDepth

; 652  : 
; 653  : 	XformedPosPoolNext	= XformedPosPool;

	mov	ecx, DWORD PTR ?XformedPosPool@StateStackClass@@2PAUSpoint@@A ; StateStackClass::XformedPosPool
	mov	DWORD PTR ?XformedPosPoolNext@StateStackClass@@2PAUSpoint@@A, ecx ; StateStackClass::XformedPosPoolNext

; 654  : 	IntensityPoolNext		= IntensityPool;

	mov	edx, DWORD PTR ?IntensityPool@StateStackClass@@2PAMA ; StateStackClass::IntensityPool
	mov	DWORD PTR ?IntensityPoolNext@StateStackClass@@2PAMA, edx ; StateStackClass::IntensityPoolNext

; 655  : 	ClipInfoPoolNext	= ClipInfoPool;

	mov	eax, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A, eax ; StateStackClass::ClipInfoPoolNext

; 656  : 
; 657  : 	XformedPosPool		= stack[stackDepth].XformedPosPool;

	mov	ecx, DWORD PTR ?stackDepth@StateStackClass@@1HA ; StateStackClass::stackDepth
	imul	ecx, 296				; 00000128H
	mov	edx, DWORD PTR ?stack@StateStackClass@@1PAUStateStackFrame@@A[ecx]
	mov	DWORD PTR ?XformedPosPool@StateStackClass@@2PAUSpoint@@A, edx ; StateStackClass::XformedPosPool

; 658  : 	IntensityPool			= stack[stackDepth].IntensityPool;

	mov	eax, DWORD PTR ?stackDepth@StateStackClass@@1HA ; StateStackClass::stackDepth
	imul	eax, 296				; 00000128H
	mov	ecx, DWORD PTR ?stack@StateStackClass@@1PAUStateStackFrame@@A[eax+4]
	mov	DWORD PTR ?IntensityPool@StateStackClass@@2PAMA, ecx ; StateStackClass::IntensityPool

; 659  : 	ClipInfoPool		= stack[stackDepth].ClipInfoPool;

	mov	edx, DWORD PTR ?stackDepth@StateStackClass@@1HA ; StateStackClass::stackDepth
	imul	edx, 296				; 00000128H
	mov	eax, DWORD PTR ?stack@StateStackClass@@1PAUStateStackFrame@@A[edx+8]
	mov	DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A, eax ; StateStackClass::ClipInfoPool

; 660  : }

	pop	ebp
	ret	0
?PopVerts@StateStackClass@@SAXXZ ENDP			; StateStackClass::PopVerts
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\statestack.cpp
_TEXT	SEGMENT
?PushVerts@StateStackClass@@SAXXZ PROC			; StateStackClass::PushVerts

; 634  : {

	push	ebp
	mov	ebp, esp

; 635  : 	ShiAssert(stackDepth < MAX_STATE_STACK_DEPTH);
; 636  : 
; 637  : 	stack[stackDepth].XformedPosPool	= XformedPosPool;

	mov	eax, DWORD PTR ?stackDepth@StateStackClass@@1HA ; StateStackClass::stackDepth
	imul	eax, 296				; 00000128H
	mov	ecx, DWORD PTR ?XformedPosPool@StateStackClass@@2PAUSpoint@@A ; StateStackClass::XformedPosPool
	mov	DWORD PTR ?stack@StateStackClass@@1PAUStateStackFrame@@A[eax], ecx

; 638  : 	stack[stackDepth].IntensityPool		= IntensityPool;

	mov	edx, DWORD PTR ?stackDepth@StateStackClass@@1HA ; StateStackClass::stackDepth
	imul	edx, 296				; 00000128H
	mov	eax, DWORD PTR ?IntensityPool@StateStackClass@@2PAMA ; StateStackClass::IntensityPool
	mov	DWORD PTR ?stack@StateStackClass@@1PAUStateStackFrame@@A[edx+4], eax

; 639  : 	stack[stackDepth].ClipInfoPool		= ClipInfoPool;

	mov	ecx, DWORD PTR ?stackDepth@StateStackClass@@1HA ; StateStackClass::stackDepth
	imul	ecx, 296				; 00000128H
	mov	edx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	DWORD PTR ?stack@StateStackClass@@1PAUStateStackFrame@@A[ecx+8], edx

; 640  : 
; 641  : 	XformedPosPool						= XformedPosPoolNext;

	mov	eax, DWORD PTR ?XformedPosPoolNext@StateStackClass@@2PAUSpoint@@A ; StateStackClass::XformedPosPoolNext
	mov	DWORD PTR ?XformedPosPool@StateStackClass@@2PAUSpoint@@A, eax ; StateStackClass::XformedPosPool

; 642  : 	IntensityPool							= IntensityPoolNext;

	mov	ecx, DWORD PTR ?IntensityPoolNext@StateStackClass@@2PAMA ; StateStackClass::IntensityPoolNext
	mov	DWORD PTR ?IntensityPool@StateStackClass@@2PAMA, ecx ; StateStackClass::IntensityPool

; 643  : 	ClipInfoPool						= ClipInfoPoolNext;

	mov	edx, DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPoolNext
	mov	DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A, edx ; StateStackClass::ClipInfoPool

; 644  : 
; 645  : 	stackDepth++;

	mov	eax, DWORD PTR ?stackDepth@StateStackClass@@1HA ; StateStackClass::stackDepth
	add	eax, 1
	mov	DWORD PTR ?stackDepth@StateStackClass@@1HA, eax ; StateStackClass::stackDepth

; 646  : }

	pop	ebp
	ret	0
?PushVerts@StateStackClass@@SAXXZ ENDP			; StateStackClass::PushVerts
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\statestack.cpp
_TEXT	SEGMENT
?PopAll@StateStackClass@@SAXXZ PROC			; StateStackClass::PopAll

; 608  : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 609  : 	stackDepth--;

	mov	eax, DWORD PTR ?stackDepth@StateStackClass@@1HA ; StateStackClass::stackDepth
	sub	eax, 1
	mov	DWORD PTR ?stackDepth@StateStackClass@@1HA, eax ; StateStackClass::stackDepth

; 610  : 
; 611  : 	XformedPosPoolNext	= XformedPosPool;

	mov	ecx, DWORD PTR ?XformedPosPool@StateStackClass@@2PAUSpoint@@A ; StateStackClass::XformedPosPool
	mov	DWORD PTR ?XformedPosPoolNext@StateStackClass@@2PAUSpoint@@A, ecx ; StateStackClass::XformedPosPoolNext

; 612  : 	IntensityPoolNext		= IntensityPool;

	mov	edx, DWORD PTR ?IntensityPool@StateStackClass@@2PAMA ; StateStackClass::IntensityPool
	mov	DWORD PTR ?IntensityPoolNext@StateStackClass@@2PAMA, edx ; StateStackClass::IntensityPoolNext

; 613  : 	ClipInfoPoolNext	= ClipInfoPool;

	mov	eax, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A, eax ; StateStackClass::ClipInfoPoolNext

; 614  : 
; 615  : 	XformedPosPool		= stack[stackDepth].XformedPosPool;

	mov	ecx, DWORD PTR ?stackDepth@StateStackClass@@1HA ; StateStackClass::stackDepth
	imul	ecx, 296				; 00000128H
	mov	edx, DWORD PTR ?stack@StateStackClass@@1PAUStateStackFrame@@A[ecx]
	mov	DWORD PTR ?XformedPosPool@StateStackClass@@2PAUSpoint@@A, edx ; StateStackClass::XformedPosPool

; 616  : 	IntensityPool			= stack[stackDepth].IntensityPool;

	mov	eax, DWORD PTR ?stackDepth@StateStackClass@@1HA ; StateStackClass::stackDepth
	imul	eax, 296				; 00000128H
	mov	ecx, DWORD PTR ?stack@StateStackClass@@1PAUStateStackFrame@@A[eax+4]
	mov	DWORD PTR ?IntensityPool@StateStackClass@@2PAMA, ecx ; StateStackClass::IntensityPool

; 617  : 	ClipInfoPool		= stack[stackDepth].ClipInfoPool;

	mov	edx, DWORD PTR ?stackDepth@StateStackClass@@1HA ; StateStackClass::stackDepth
	imul	edx, 296				; 00000128H
	mov	eax, DWORD PTR ?stack@StateStackClass@@1PAUStateStackFrame@@A[edx+8]
	mov	DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A, eax ; StateStackClass::ClipInfoPool

; 618  : 
; 619  : 	Rotation			= stack[stackDepth].Rotation;

	mov	esi, DWORD PTR ?stackDepth@StateStackClass@@1HA ; StateStackClass::stackDepth
	imul	esi, 296				; 00000128H
	add	esi, OFFSET ?stack@StateStackClass@@1PAUStateStackFrame@@A+12
	mov	ecx, 9
	mov	edi, OFFSET ?Rotation@StateStackClass@@2UTrotation@@A ; StateStackClass::Rotation
	rep movsd

; 620  : 	Xlation				= stack[stackDepth].Xlation;

	mov	ecx, DWORD PTR ?stackDepth@StateStackClass@@1HA ; StateStackClass::stackDepth
	imul	ecx, 296				; 00000128H
	add	ecx, OFFSET ?stack@StateStackClass@@1PAUStateStackFrame@@A+48
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A, edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A+4, eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A+8, ecx

; 621  : 
; 622  : 	ObjSpaceEye			= stack[stackDepth].ObjSpaceEye;

	mov	edx, DWORD PTR ?stackDepth@StateStackClass@@1HA ; StateStackClass::stackDepth
	imul	edx, 296				; 00000128H
	add	edx, OFFSET ?stack@StateStackClass@@1PAUStateStackFrame@@A+252
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR ?ObjSpaceEye@StateStackClass@@2UTpoint@@A, eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR ?ObjSpaceEye@StateStackClass@@2UTpoint@@A+4, ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR ?ObjSpaceEye@StateStackClass@@2UTpoint@@A+8, edx

; 623  : 	ObjSpaceLight		= stack[stackDepth].ObjSpaceLight;

	mov	eax, DWORD PTR ?stackDepth@StateStackClass@@1HA ; StateStackClass::stackDepth
	imul	eax, 296				; 00000128H
	add	eax, OFFSET ?stack@StateStackClass@@1PAUStateStackFrame@@A+264
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR ?ObjSpaceLight@StateStackClass@@2UTpoint@@A, ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR ?ObjSpaceLight@StateStackClass@@2UTpoint@@A+4, edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR ?ObjSpaceLight@StateStackClass@@2UTpoint@@A+8, eax

; 624  : 
; 625  : 	CurrentInstance		= stack[stackDepth].CurrentInstance;

	mov	ecx, DWORD PTR ?stackDepth@StateStackClass@@1HA ; StateStackClass::stackDepth
	imul	ecx, 296				; 00000128H
	mov	edx, DWORD PTR ?stack@StateStackClass@@1PAUStateStackFrame@@A[ecx+280]
	mov	DWORD PTR ?CurrentInstance@StateStackClass@@2PAVObjectInstance@@A, edx ; StateStackClass::CurrentInstance

; 626  : 	CurrentLOD			= stack[stackDepth].CurrentLOD;

	mov	eax, DWORD PTR ?stackDepth@StateStackClass@@1HA ; StateStackClass::stackDepth
	imul	eax, 296				; 00000128H
	mov	ecx, DWORD PTR ?stack@StateStackClass@@1PAUStateStackFrame@@A[eax+284]
	mov	DWORD PTR ?CurrentLOD@StateStackClass@@2PBVObjectLOD@@B, ecx ; StateStackClass::CurrentLOD

; 627  : 	CurrentTextureTable	= stack[stackDepth].CurrentTextureTable;

	mov	edx, DWORD PTR ?stackDepth@StateStackClass@@1HA ; StateStackClass::stackDepth
	imul	edx, 296				; 00000128H
	mov	eax, DWORD PTR ?stack@StateStackClass@@1PAUStateStackFrame@@A[edx+276]
	mov	DWORD PTR ?CurrentTextureTable@StateStackClass@@2PBHB, eax ; StateStackClass::CurrentTextureTable

; 628  : 
; 629  : 	DrawPrimJumpTable	= stack[stackDepth].DrawPrimJumpTable;

	mov	ecx, DWORD PTR ?stackDepth@StateStackClass@@1HA ; StateStackClass::stackDepth
	imul	ecx, 296				; 00000128H
	mov	edx, DWORD PTR ?stack@StateStackClass@@1PAUStateStackFrame@@A[ecx+288]
	mov	DWORD PTR ?DrawPrimJumpTable@@3PBQ6AXPAUPrim@@@ZB, edx ; DrawPrimJumpTable

; 630  : 	Transform			= stack[stackDepth].Transform;

	mov	eax, DWORD PTR ?stackDepth@StateStackClass@@1HA ; StateStackClass::stackDepth
	imul	eax, 296				; 00000128H
	mov	ecx, DWORD PTR ?stack@StateStackClass@@1PAUStateStackFrame@@A[eax+292]
	mov	DWORD PTR ?Transform@StateStackClass@@2P6AXPAUTpoint@@H@ZA, ecx ; StateStackClass::Transform

; 631  : }

	pop	edi
	pop	esi
	pop	ebp
	ret	0
?PopAll@StateStackClass@@SAXXZ ENDP			; StateStackClass::PopAll
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\statestack.cpp
_TEXT	SEGMENT
?PushAll@StateStackClass@@SAXXZ PROC			; StateStackClass::PushAll

; 580  : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 581  : 	ShiAssert(stackDepth < MAX_STATE_STACK_DEPTH);
; 582  : 
; 583  : 	stack[stackDepth].XformedPosPool		= XformedPosPool;

	mov	eax, DWORD PTR ?stackDepth@StateStackClass@@1HA ; StateStackClass::stackDepth
	imul	eax, 296				; 00000128H
	mov	ecx, DWORD PTR ?XformedPosPool@StateStackClass@@2PAUSpoint@@A ; StateStackClass::XformedPosPool
	mov	DWORD PTR ?stack@StateStackClass@@1PAUStateStackFrame@@A[eax], ecx

; 584  : 	stack[stackDepth].IntensityPool			= IntensityPool;

	mov	edx, DWORD PTR ?stackDepth@StateStackClass@@1HA ; StateStackClass::stackDepth
	imul	edx, 296				; 00000128H
	mov	eax, DWORD PTR ?IntensityPool@StateStackClass@@2PAMA ; StateStackClass::IntensityPool
	mov	DWORD PTR ?stack@StateStackClass@@1PAUStateStackFrame@@A[edx+4], eax

; 585  : 	stack[stackDepth].ClipInfoPool			= ClipInfoPool;

	mov	ecx, DWORD PTR ?stackDepth@StateStackClass@@1HA ; StateStackClass::stackDepth
	imul	ecx, 296				; 00000128H
	mov	edx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	DWORD PTR ?stack@StateStackClass@@1PAUStateStackFrame@@A[ecx+8], edx

; 586  : 
; 587  : 	stack[stackDepth].Rotation				= Rotation;

	mov	edi, DWORD PTR ?stackDepth@StateStackClass@@1HA ; StateStackClass::stackDepth
	imul	edi, 296				; 00000128H
	add	edi, OFFSET ?stack@StateStackClass@@1PAUStateStackFrame@@A+12
	mov	ecx, 9
	mov	esi, OFFSET ?Rotation@StateStackClass@@2UTrotation@@A ; StateStackClass::Rotation
	rep movsd

; 588  : 	stack[stackDepth].Xlation				= Xlation;

	mov	eax, DWORD PTR ?stackDepth@StateStackClass@@1HA ; StateStackClass::stackDepth
	imul	eax, 296				; 00000128H
	add	eax, OFFSET ?stack@StateStackClass@@1PAUStateStackFrame@@A+48
	mov	ecx, DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A+8
	mov	DWORD PTR [eax+8], ecx

; 589  : 	
; 590  : 	stack[stackDepth].ObjSpaceEye			= ObjSpaceEye;

	mov	edx, DWORD PTR ?stackDepth@StateStackClass@@1HA ; StateStackClass::stackDepth
	imul	edx, 296				; 00000128H
	add	edx, OFFSET ?stack@StateStackClass@@1PAUStateStackFrame@@A+252
	mov	eax, DWORD PTR ?ObjSpaceEye@StateStackClass@@2UTpoint@@A
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR ?ObjSpaceEye@StateStackClass@@2UTpoint@@A+4
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ?ObjSpaceEye@StateStackClass@@2UTpoint@@A+8
	mov	DWORD PTR [edx+8], eax

; 591  : 	stack[stackDepth].ObjSpaceLight			= ObjSpaceLight;

	mov	ecx, DWORD PTR ?stackDepth@StateStackClass@@1HA ; StateStackClass::stackDepth
	imul	ecx, 296				; 00000128H
	add	ecx, OFFSET ?stack@StateStackClass@@1PAUStateStackFrame@@A+264
	mov	edx, DWORD PTR ?ObjSpaceLight@StateStackClass@@2UTpoint@@A
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR ?ObjSpaceLight@StateStackClass@@2UTpoint@@A+4
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR ?ObjSpaceLight@StateStackClass@@2UTpoint@@A+8
	mov	DWORD PTR [ecx+8], edx

; 592  : 	
; 593  : 	stack[stackDepth].CurrentInstance		= CurrentInstance;

	mov	eax, DWORD PTR ?stackDepth@StateStackClass@@1HA ; StateStackClass::stackDepth
	imul	eax, 296				; 00000128H
	mov	ecx, DWORD PTR ?CurrentInstance@StateStackClass@@2PAVObjectInstance@@A ; StateStackClass::CurrentInstance
	mov	DWORD PTR ?stack@StateStackClass@@1PAUStateStackFrame@@A[eax+280], ecx

; 594  : 	stack[stackDepth].CurrentLOD			= CurrentLOD;

	mov	edx, DWORD PTR ?stackDepth@StateStackClass@@1HA ; StateStackClass::stackDepth
	imul	edx, 296				; 00000128H
	mov	eax, DWORD PTR ?CurrentLOD@StateStackClass@@2PBVObjectLOD@@B ; StateStackClass::CurrentLOD
	mov	DWORD PTR ?stack@StateStackClass@@1PAUStateStackFrame@@A[edx+284], eax

; 595  : 	stack[stackDepth].CurrentTextureTable	= CurrentTextureTable;

	mov	ecx, DWORD PTR ?stackDepth@StateStackClass@@1HA ; StateStackClass::stackDepth
	imul	ecx, 296				; 00000128H
	mov	edx, DWORD PTR ?CurrentTextureTable@StateStackClass@@2PBHB ; StateStackClass::CurrentTextureTable
	mov	DWORD PTR ?stack@StateStackClass@@1PAUStateStackFrame@@A[ecx+276], edx

; 596  : 
; 597  : 	stack[stackDepth].DrawPrimJumpTable		= DrawPrimJumpTable;

	mov	eax, DWORD PTR ?stackDepth@StateStackClass@@1HA ; StateStackClass::stackDepth
	imul	eax, 296				; 00000128H
	mov	ecx, DWORD PTR ?DrawPrimJumpTable@@3PBQ6AXPAUPrim@@@ZB ; DrawPrimJumpTable
	mov	DWORD PTR ?stack@StateStackClass@@1PAUStateStackFrame@@A[eax+288], ecx

; 598  : 	stack[stackDepth].Transform				= Transform;

	mov	edx, DWORD PTR ?stackDepth@StateStackClass@@1HA ; StateStackClass::stackDepth
	imul	edx, 296				; 00000128H
	mov	eax, DWORD PTR ?Transform@StateStackClass@@2P6AXPAUTpoint@@H@ZA ; StateStackClass::Transform
	mov	DWORD PTR ?stack@StateStackClass@@1PAUStateStackFrame@@A[edx+292], eax

; 599  : 
; 600  : 	XformedPosPool							= XformedPosPoolNext;

	mov	ecx, DWORD PTR ?XformedPosPoolNext@StateStackClass@@2PAUSpoint@@A ; StateStackClass::XformedPosPoolNext
	mov	DWORD PTR ?XformedPosPool@StateStackClass@@2PAUSpoint@@A, ecx ; StateStackClass::XformedPosPool

; 601  : 	IntensityPool								= IntensityPoolNext;

	mov	edx, DWORD PTR ?IntensityPoolNext@StateStackClass@@2PAMA ; StateStackClass::IntensityPoolNext
	mov	DWORD PTR ?IntensityPool@StateStackClass@@2PAMA, edx ; StateStackClass::IntensityPool

; 602  : 	ClipInfoPool							= ClipInfoPoolNext;

	mov	eax, DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPoolNext
	mov	DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A, eax ; StateStackClass::ClipInfoPool

; 603  : 
; 604  : 	stackDepth++;

	mov	ecx, DWORD PTR ?stackDepth@StateStackClass@@1HA ; StateStackClass::stackDepth
	add	ecx, 1
	mov	DWORD PTR ?stackDepth@StateStackClass@@1HA, ecx ; StateStackClass::stackDepth

; 605  : }

	pop	edi
	pop	esi
	pop	ebp
	ret	0
?PushAll@StateStackClass@@SAXXZ ENDP			; StateStackClass::PushAll
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\statestack.cpp
_TEXT	SEGMENT
tv66 = -52						; size = 4
tv178 = -48						; size = 4
tv86 = -44						; size = 4
tv148 = -40						; size = 4
_iDiff$ = -36						; size = 4
_iSpec$ = -32						; size = 4
_halfVector$ = -28					; size = 12
_viewVector$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_n$ = 8							; size = 4
_i$ = 12						; size = 4
_p$ = 16						; size = 4
?Light@StateStackClass@@SAXPBUPnormal@@HPBUTpoint@@@Z PROC ; StateStackClass::Light

; 665  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 666  : 	float iSpec=0.f,iDiff=0.f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _iSpec$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _iDiff$[ebp], xmm0
$LN15@Light:

; 667  : 	Ppoint viewVector,halfVector;
; 668  : 
; 669  : 	ShiAssert(IsValidIntensityIndex(i-1));
; 670  : 
; 671  : 	while(i--)

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 0
	je	$LN5@Light

; 672  : 	{	
; 673  : 		// Cobra - RED - If Poly Normal facing other side dnt calculate light, 
; 674  : 		// just assign last calculated light to avoid dark spots on near polys
; 675  : 		//if((double)(ObjSpaceEye.x*n->i+ObjSpaceEye.y*n->j+ObjSpaceEye.z*n->k)<(double)0.0){		// Operations are following the Normal check to keep the pocessor
; 676  : 		//	*IntensityPoolNext = LastLight;											// cache still online and execute a backaward cache call
; 677  : 		//	n++; p++; IntensityPoolNext++;											// which is faster than a forward call for a P Class processor
; 678  : 		//	continue;																 					
; 679  : 		//}
; 680  : 		// Cobra - RED - End
; 681  : 			
; 682  : 
; 683  : 		iDiff = max(n->i*ObjSpaceLight.x+n->j*ObjSpaceLight.y+n->k*ObjSpaceLight.z,0.f)*lightDiffuse;

	mov	edx, DWORD PTR _n$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR ?ObjSpaceLight@StateStackClass@@2UTpoint@@A
	mov	eax, DWORD PTR _n$[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	mulss	xmm1, DWORD PTR ?ObjSpaceLight@StateStackClass@@2UTpoint@@A+4
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _n$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR ?ObjSpaceLight@StateStackClass@@2UTpoint@@A+8
	addss	xmm0, xmm1
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN9@Light
	mov	edx, DWORD PTR _n$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR ?ObjSpaceLight@StateStackClass@@2UTpoint@@A
	mov	eax, DWORD PTR _n$[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	mulss	xmm1, DWORD PTR ?ObjSpaceLight@StateStackClass@@2UTpoint@@A+4
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _n$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR ?ObjSpaceLight@StateStackClass@@2UTpoint@@A+8
	addss	xmm0, xmm1
	movss	DWORD PTR tv86[ebp], xmm0
	jmp	SHORT $LN10@Light
$LN9@Light:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv86[ebp], xmm0
$LN10@Light:
	movss	xmm0, DWORD PTR tv86[ebp]
	mulss	xmm0, DWORD PTR ?lightDiffuse@StateStackClass@@2MA
	movss	DWORD PTR _iDiff$[ebp], xmm0

; 684  : 
; 685  : 		// Cobra - RED - Zero is Zero both in Float and Long...but Long is faster
; 686  : 		//	...........(lightSpecular).........................................
; 687  : 		if(!LODused && ((*(long*)&lightSpecular)&0x7fffffff) && DisplayOptions.bSpecularLighting)

	cmp	DWORD PTR ?LODused@StateStackClass@@1HA, 0 ; StateStackClass::LODused
	jne	$LN1@Light
	mov	edx, DWORD PTR ?lightSpecular@StateStackClass@@2MA
	and	edx, 2147483647				; 7fffffffH
	je	$LN1@Light
	movzx	eax, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+19
	test	eax, eax
	je	$LN1@Light

; 688  : 		{
; 689  : 			viewVector.x = ObjSpaceEye.x - p->x;

	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR ?ObjSpaceEye@StateStackClass@@2UTpoint@@A
	subss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR _viewVector$[ebp], xmm0

; 690  : 			viewVector.y = ObjSpaceEye.y - p->y;

	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR ?ObjSpaceEye@StateStackClass@@2UTpoint@@A+4
	subss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR _viewVector$[ebp+4], xmm0

; 691  : 			viewVector.z = ObjSpaceEye.z - p->z;

	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR ?ObjSpaceEye@StateStackClass@@2UTpoint@@A+8
	subss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _viewVector$[ebp+8], xmm0

; 692  : 			normalizeVector(&viewVector);

	lea	ecx, DWORD PTR _viewVector$[ebp]
	push	ecx
	call	?normalizeVector@@YAXPAUTpoint@@@Z	; normalizeVector
	add	esp, 4

; 693  : 
; 694  : 			// FIXME - RED - This check should avoid any light calculation if camera NOT 
; 695  : 			// LOOKING at the poly face, even iDiff could be not calculated
; 696  : 			// but till when BSP seems to draw even hidden polys I have to assign just
; 697  : 			// iDiff to have not dark spots on near polys, however avoiding iSpec calculations
; 698  : 			if((viewVector.x*n->i+viewVector.y*n->j+viewVector.z*n->k)<0.0){	

	mov	edx, DWORD PTR _n$[ebp]
	movss	xmm0, DWORD PTR _viewVector$[ebp]
	mulss	xmm0, DWORD PTR [edx]
	mov	eax, DWORD PTR _n$[ebp]
	movss	xmm1, DWORD PTR _viewVector$[ebp+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _n$[ebp]
	movss	xmm1, DWORD PTR _viewVector$[ebp+8]
	mulss	xmm1, DWORD PTR [ecx+8]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	movsd	xmm1, QWORD PTR __real@0000000000000000
	comisd	xmm1, xmm0
	jbe	SHORT $LN3@Light

; 699  : 				*IntensityPoolNext = min(lightAmbient+iDiff,1.f);			// Operations are following the Normal check to keep the pocessor

	movss	xmm0, DWORD PTR ?lightAmbient@StateStackClass@@2MA
	addss	xmm0, DWORD PTR _iDiff$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	comiss	xmm1, xmm0
	jbe	SHORT $LN11@Light
	movss	xmm0, DWORD PTR ?lightAmbient@StateStackClass@@2MA
	addss	xmm0, DWORD PTR _iDiff$[ebp]
	movss	DWORD PTR tv148[ebp], xmm0
	jmp	SHORT $LN12@Light
$LN11@Light:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv148[ebp], xmm0
$LN12@Light:
	mov	edx, DWORD PTR ?IntensityPoolNext@StateStackClass@@2PAMA ; StateStackClass::IntensityPoolNext
	movss	xmm0, DWORD PTR tv148[ebp]
	movss	DWORD PTR [edx], xmm0

; 700  : 				n++; p++; IntensityPoolNext++;								// cache still online and execute a backaward cache call		

	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _n$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, DWORD PTR ?IntensityPoolNext@StateStackClass@@2PAMA ; StateStackClass::IntensityPoolNext
	add	edx, 4
	mov	DWORD PTR ?IntensityPoolNext@StateStackClass@@2PAMA, edx ; StateStackClass::IntensityPoolNext

; 701  : 				continue;													// which is faster than a forward call for a P Class processor

	jmp	$LN15@Light
$LN3@Light:

; 702  : 			}
; 703  : 
; 704  : 			halfVector.x = ObjSpaceLight.x + viewVector.x;

	movss	xmm0, DWORD PTR ?ObjSpaceLight@StateStackClass@@2UTpoint@@A
	addss	xmm0, DWORD PTR _viewVector$[ebp]
	movss	DWORD PTR _halfVector$[ebp], xmm0

; 705  : 			halfVector.y = ObjSpaceLight.y + viewVector.y;

	movss	xmm0, DWORD PTR ?ObjSpaceLight@StateStackClass@@2UTpoint@@A+4
	addss	xmm0, DWORD PTR _viewVector$[ebp+4]
	movss	DWORD PTR _halfVector$[ebp+4], xmm0

; 706  : 			halfVector.z = ObjSpaceLight.z + viewVector.z;

	movss	xmm0, DWORD PTR ?ObjSpaceLight@StateStackClass@@2UTpoint@@A+8
	addss	xmm0, DWORD PTR _viewVector$[ebp+8]
	movss	DWORD PTR _halfVector$[ebp+8], xmm0

; 707  : 			normalizeVector(&halfVector);

	lea	eax, DWORD PTR _halfVector$[ebp]
	push	eax
	call	?normalizeVector@@YAXPAUTpoint@@@Z	; normalizeVector
	add	esp, 4

; 708  : 
; 709  : 			// Cobra - RED - Easy using FPU... isn't it...? But now Conditional Integers improve of about 100%
; 710  : 			//iSpec = powf(max(n->i*halfVector.x+n->j*halfVector.y+n->k*halfVector.z,0.f),32.f)*lightSpecular;
; 711  : 			iSpec=n->i*halfVector.x+n->j*halfVector.y+n->k*halfVector.z;

	mov	ecx, DWORD PTR _n$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR _halfVector$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR _halfVector$[ebp+4]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _n$[ebp]
	movss	xmm1, DWORD PTR [eax+8]
	mulss	xmm1, DWORD PTR _halfVector$[ebp+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _iSpec$[ebp], xmm0

; 712  : 			if(iSpec<=0) iSpec=0;

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _iSpec$[ebp]
	jb	SHORT $LN2@Light
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _iSpec$[ebp], xmm0

; 713  : 			else {

	jmp	SHORT $LN1@Light
$LN2@Light:

; 714  : 				iSpec=iSpec*iSpec;					//	iSpec^2;

	movss	xmm0, DWORD PTR _iSpec$[ebp]
	mulss	xmm0, DWORD PTR _iSpec$[ebp]
	movss	DWORD PTR _iSpec$[ebp], xmm0

; 715  : 				iSpec=iSpec*iSpec;					//	iSpec^4;

	movss	xmm0, DWORD PTR _iSpec$[ebp]
	mulss	xmm0, DWORD PTR _iSpec$[ebp]
	movss	DWORD PTR _iSpec$[ebp], xmm0

; 716  : 				iSpec=iSpec*iSpec;					//	iSpec^8;

	movss	xmm0, DWORD PTR _iSpec$[ebp]
	mulss	xmm0, DWORD PTR _iSpec$[ebp]
	movss	DWORD PTR _iSpec$[ebp], xmm0

; 717  : 				iSpec=iSpec*iSpec;					//	iSpec^16;

	movss	xmm0, DWORD PTR _iSpec$[ebp]
	mulss	xmm0, DWORD PTR _iSpec$[ebp]
	movss	DWORD PTR _iSpec$[ebp], xmm0

; 718  : 				iSpec=iSpec*iSpec;					//	iSpec^32;

	movss	xmm0, DWORD PTR _iSpec$[ebp]
	mulss	xmm0, DWORD PTR _iSpec$[ebp]
	movss	DWORD PTR _iSpec$[ebp], xmm0

; 719  : 				iSpec*=lightSpecular;

	movss	xmm0, DWORD PTR _iSpec$[ebp]
	mulss	xmm0, DWORD PTR ?lightSpecular@StateStackClass@@2MA
	movss	DWORD PTR _iSpec$[ebp], xmm0
$LN1@Light:

; 720  : 			}
; 721  : 			// Cobra - RED - End
; 722  : 
; 723  : 		}
; 724  : 
; 725  : 		*IntensityPoolNext = min(lightAmbient+iDiff+iSpec,1.f);

	movss	xmm0, DWORD PTR ?lightAmbient@StateStackClass@@2MA
	addss	xmm0, DWORD PTR _iDiff$[ebp]
	addss	xmm0, DWORD PTR _iSpec$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	comiss	xmm1, xmm0
	jbe	SHORT $LN13@Light
	movss	xmm0, DWORD PTR ?lightAmbient@StateStackClass@@2MA
	addss	xmm0, DWORD PTR _iDiff$[ebp]
	addss	xmm0, DWORD PTR _iSpec$[ebp]
	movss	DWORD PTR tv178[ebp], xmm0
	jmp	SHORT $LN14@Light
$LN13@Light:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv178[ebp], xmm0
$LN14@Light:
	mov	ecx, DWORD PTR ?IntensityPoolNext@StateStackClass@@2PAMA ; StateStackClass::IntensityPoolNext
	movss	xmm0, DWORD PTR tv178[ebp]
	movss	DWORD PTR [ecx], xmm0

; 726  : 		n++; p++; IntensityPoolNext++;

	mov	edx, DWORD PTR _n$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _n$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR ?IntensityPoolNext@StateStackClass@@2PAMA ; StateStackClass::IntensityPoolNext
	add	ecx, 4
	mov	DWORD PTR ?IntensityPoolNext@StateStackClass@@2PAMA, ecx ; StateStackClass::IntensityPoolNext

; 727  : 	}

	jmp	$LN15@Light
$LN5@Light:

; 728  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?Light@StateStackClass@@SAXPBUPnormal@@HPBUTpoint@@@Z ENDP ; StateStackClass::Light
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\statestack.cpp
_TEXT	SEGMENT
_tempM$ = -64						; size = 36
_tempP$ = -28						; size = 12
_tempP2$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_rot$ = 8						; size = 4
_pos$ = 12						; size = 4
?CompoundTransform@StateStackClass@@SAXPBUTrotation@@PBUTpoint@@@Z PROC ; StateStackClass::CompoundTransform

; 287  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi

; 288  : 	Ppoint tempP;
; 289  : 
; 290  : 	// Compute the rotated translation vector for this object
; 291  : 	Xlation.x += pos->x * Rotation.M11 + pos->y * Rotation.M12 + pos->z * Rotation.M13;

	mov	eax, DWORD PTR _pos$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR ?Rotation@StateStackClass@@2UTrotation@@A
	mov	ecx, DWORD PTR _pos$[ebp]
	movss	xmm1, DWORD PTR [ecx+4]
	mulss	xmm1, DWORD PTR ?Rotation@StateStackClass@@2UTrotation@@A+4
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _pos$[ebp]
	movss	xmm1, DWORD PTR [edx+8]
	mulss	xmm1, DWORD PTR ?Rotation@StateStackClass@@2UTrotation@@A+8
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A
	movss	DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A, xmm0

; 292  : 	Xlation.y += pos->x * Rotation.M21 + pos->y * Rotation.M22 + pos->z * Rotation.M23;

	mov	eax, DWORD PTR _pos$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR ?Rotation@StateStackClass@@2UTrotation@@A+12
	mov	ecx, DWORD PTR _pos$[ebp]
	movss	xmm1, DWORD PTR [ecx+4]
	mulss	xmm1, DWORD PTR ?Rotation@StateStackClass@@2UTrotation@@A+16
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _pos$[ebp]
	movss	xmm1, DWORD PTR [edx+8]
	mulss	xmm1, DWORD PTR ?Rotation@StateStackClass@@2UTrotation@@A+20
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A+4
	movss	DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A+4, xmm0

; 293  : 	Xlation.z += pos->x * Rotation.M31 + pos->y * Rotation.M32 + pos->z * Rotation.M33;

	mov	eax, DWORD PTR _pos$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR ?Rotation@StateStackClass@@2UTrotation@@A+24
	mov	ecx, DWORD PTR _pos$[ebp]
	movss	xmm1, DWORD PTR [ecx+4]
	mulss	xmm1, DWORD PTR ?Rotation@StateStackClass@@2UTrotation@@A+28
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _pos$[ebp]
	movss	xmm1, DWORD PTR [edx+8]
	mulss	xmm1, DWORD PTR ?Rotation@StateStackClass@@2UTrotation@@A+32
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A+8
	movss	DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A+8, xmm0

; 294  : 
; 295  : 	Pmatrix tempM = Rotation;

	mov	ecx, 9
	mov	esi, OFFSET ?Rotation@StateStackClass@@2UTrotation@@A ; StateStackClass::Rotation
	lea	edi, DWORD PTR _tempM$[ebp]
	rep movsd

; 296  : 	tempP.x = ObjSpaceEye.x - pos->x;

	mov	eax, DWORD PTR _pos$[ebp]
	movss	xmm0, DWORD PTR ?ObjSpaceEye@StateStackClass@@2UTpoint@@A
	subss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tempP$[ebp], xmm0

; 297  : 	tempP.y = ObjSpaceEye.y - pos->y;

	mov	ecx, DWORD PTR _pos$[ebp]
	movss	xmm0, DWORD PTR ?ObjSpaceEye@StateStackClass@@2UTpoint@@A+4
	subss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR _tempP$[ebp+4], xmm0

; 298  : 	tempP.z = ObjSpaceEye.z - pos->z;

	mov	edx, DWORD PTR _pos$[ebp]
	movss	xmm0, DWORD PTR ?ObjSpaceEye@StateStackClass@@2UTpoint@@A+8
	subss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR _tempP$[ebp+8], xmm0

; 299  : 	Ppoint tempP2 = ObjSpaceLight;

	mov	eax, DWORD PTR ?ObjSpaceLight@StateStackClass@@2UTpoint@@A
	mov	DWORD PTR _tempP2$[ebp], eax
	mov	ecx, DWORD PTR ?ObjSpaceLight@StateStackClass@@2UTpoint@@A+4
	mov	DWORD PTR _tempP2$[ebp+4], ecx
	mov	edx, DWORD PTR ?ObjSpaceLight@StateStackClass@@2UTpoint@@A+8
	mov	DWORD PTR _tempP2$[ebp+8], edx

; 300  : 
; 301  : 	// Composit the camera matrix with the object rotation
; 302  : 	MatrixMult(&tempM,rot,&Rotation);

	push	OFFSET ?Rotation@StateStackClass@@2UTrotation@@A ; StateStackClass::Rotation
	mov	eax, DWORD PTR _rot$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempM$[ebp]
	push	ecx
	call	?MatrixMult@@YAXPBUTrotation@@0PAU1@@Z	; MatrixMult
	add	esp, 12					; 0000000cH

; 303  : 
; 304  : 	// Compute the eye point in object space
; 305  : 	MatrixMultTranspose(rot,&tempP,&ObjSpaceEye);

	push	OFFSET ?ObjSpaceEye@StateStackClass@@2UTpoint@@A ; StateStackClass::ObjSpaceEye
	lea	edx, DWORD PTR _tempP$[ebp]
	push	edx
	mov	eax, DWORD PTR _rot$[ebp]
	push	eax
	call	?MatrixMultTranspose@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMultTranspose
	add	esp, 12					; 0000000cH

; 306  : 
; 307  : 	// Compute the light direction in object space.
; 308  : 	MatrixMultTranspose(rot,&tempP2,&ObjSpaceLight);

	push	OFFSET ?ObjSpaceLight@StateStackClass@@2UTpoint@@A ; StateStackClass::ObjSpaceLight
	lea	ecx, DWORD PTR _tempP2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rot$[ebp]
	push	edx
	call	?MatrixMultTranspose@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMultTranspose
	add	esp, 12					; 0000000cH

; 309  : 
; 310  : }

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?CompoundTransform@StateStackClass@@SAXPBUTrotation@@PBUTpoint@@@Z ENDP ; StateStackClass::CompoundTransform
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\statestack.cpp
_TEXT	SEGMENT
_Rot$1 = -64						; size = 64
_objInst$ = 8						; size = 4
_rot$ = 12						; size = 4
_pos$ = 16						; size = 4
?DrawSubObject@StateStackClass@@SAXPAVObjectInstance@@PBUTrotation@@PBUTpoint@@@Z PROC ; StateStackClass::DrawSubObject

; 480  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H

; 481  : 	
; 482  : 	// COBRA - DX - Switching btw Old and New Engine - the Camera projections
; 483  : 	if(g_bUse_DX_Engine)	{

	movzx	eax, BYTE PTR ?g_bUse_DX_Engine@@3_NA	; g_bUse_DX_Engine
	test	eax, eax
	je	SHORT $LN2@DrawSubObj

; 484  : 		//START_PROFILE(DX_ENGINE_PROF);
; 485  : 		D3DXMATRIX	Rot;

	lea	ecx, DWORD PTR _Rot$1[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 486  : 		AssignPmatrixToD3DXMATRIX(&Rot, (Pmatrix*)rot);

	mov	ecx, DWORD PTR _rot$[ebp]
	push	ecx
	lea	edx, DWORD PTR _Rot$1[ebp]
	push	edx
	call	?AssignPmatrixToD3DXMATRIX@@YAXPAUD3DXMATRIX@@PAUTrotation@@@Z ; AssignPmatrixToD3DXMATRIX
	add	esp, 8

; 487  : 		TheDXEngine.DrawObject(objInst,&Rot,pos,1.f,1.f,1.f,1.f);

	push	0
	push	0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Rot$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _objInst$[ebp]
	push	edx
	mov	ecx, OFFSET ?TheDXEngine@@3VCDXEngine@@A ; TheDXEngine
	call	?DrawObject@CDXEngine@@QAEXPAVObjectInstance@@PAUD3DXMATRIX@@PBUTpoint@@MMMM_NK@Z ; CDXEngine::DrawObject
	jmp	SHORT $LN1@DrawSubObj
$LN2@DrawSubObj:

; 488  : 		//STOP_PROFILE(DX_ENGINE_PROF);
; 489  : 	}
; 490  : 	else pvtDrawObject(OP_NONE,objInst,rot,pos,1.f,1.f,1.f,1.f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rot$[ebp]
	push	ecx
	mov	edx, DWORD PTR _objInst$[ebp]
	push	edx
	push	0
	call	?pvtDrawObject@StateStackClass@@KAXKPAVObjectInstance@@PBUTrotation@@PBUTpoint@@MMMM@Z ; StateStackClass::pvtDrawObject
	add	esp, 32					; 00000020H
$LN1@DrawSubObj:

; 491  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DrawSubObject@StateStackClass@@SAXPAVObjectInstance@@PBUTrotation@@PBUTpoint@@@Z ENDP ; StateStackClass::DrawSubObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\statestack.cpp
_TEXT	SEGMENT
_Rot$1 = -64						; size = 64
_objInst$ = 8						; size = 4
_rot$ = 12						; size = 4
_pos$ = 16						; size = 4
_sx$ = 20						; size = 4
_sy$ = 24						; size = 4
_sz$ = 28						; size = 4
_scale$ = 32						; size = 4
?DrawWarpedObject@StateStackClass@@SAXPAVObjectInstance@@PBUTrotation@@PBUTpoint@@MMMM@Z PROC ; StateStackClass::DrawWarpedObject

; 497  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H

; 498  : 	// COBRA - DX - Switching btw Old and New Engine - the Camera projections
; 499  : 	if(g_bUse_DX_Engine)	{

	movzx	eax, BYTE PTR ?g_bUse_DX_Engine@@3_NA	; g_bUse_DX_Engine
	test	eax, eax
	je	SHORT $LN2@DrawWarped

; 500  : 		//START_PROFILE(DX_ENGINE_PROF);
; 501  : 		D3DXMATRIX	Rot;

	lea	ecx, DWORD PTR _Rot$1[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 502  : 		AssignPmatrixToD3DXMATRIX(&Rot, (Pmatrix*)rot);

	mov	ecx, DWORD PTR _rot$[ebp]
	push	ecx
	lea	edx, DWORD PTR _Rot$1[ebp]
	push	edx
	call	?AssignPmatrixToD3DXMATRIX@@YAXPAUD3DXMATRIX@@PAUTrotation@@@Z ; AssignPmatrixToD3DXMATRIX
	add	esp, 8

; 503  : 		TheDXEngine.DrawObject(objInst,&Rot,pos,sx,sy,sz,scale);

	push	0
	push	0
	push	ecx
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _sz$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _sy$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _sx$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Rot$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _objInst$[ebp]
	push	edx
	mov	ecx, OFFSET ?TheDXEngine@@3VCDXEngine@@A ; TheDXEngine
	call	?DrawObject@CDXEngine@@QAEXPAVObjectInstance@@PAUD3DXMATRIX@@PBUTpoint@@MMMM_NK@Z ; CDXEngine::DrawObject
	jmp	SHORT $LN1@DrawWarped
$LN2@DrawWarped:

; 504  : 		//STOP_PROFILE(DX_ENGINE_PROF);
; 505  : 	}
; 506  : 	else pvtDrawObject(OP_WARP,objInst,rot,pos,sx,sy,sz,scale);

	push	ecx
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _sz$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _sy$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _sx$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rot$[ebp]
	push	ecx
	mov	edx, DWORD PTR _objInst$[ebp]
	push	edx
	push	2
	call	?pvtDrawObject@StateStackClass@@KAXKPAVObjectInstance@@PBUTrotation@@PBUTpoint@@MMMM@Z ; StateStackClass::pvtDrawObject
	add	esp, 32					; 00000020H
$LN1@DrawWarped:

; 507  : 	
; 508  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DrawWarpedObject@StateStackClass@@SAXPAVObjectInstance@@PBUTrotation@@PBUTpoint@@MMMM@Z ENDP ; StateStackClass::DrawWarpedObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\statestack.cpp
_TEXT	SEGMENT
_Rot$1 = -64						; size = 64
_objInst$ = 8						; size = 4
_rot$ = 12						; size = 4
_pos$ = 16						; size = 4
_scale$ = 20						; size = 4
?DrawObject@StateStackClass@@SAXPAVObjectInstance@@PBUTrotation@@PBUTpoint@@M@Z PROC ; StateStackClass::DrawObject

; 465  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H

; 466  : 	
; 467  : 	// COBRA - DX - Switching btw Old and New Engine - the Camera projections
; 468  : 	if(g_bUse_DX_Engine)	{

	movzx	eax, BYTE PTR ?g_bUse_DX_Engine@@3_NA	; g_bUse_DX_Engine
	test	eax, eax
	je	SHORT $LN2@DrawObject

; 469  : 		//START_PROFILE(DX_ENGINE_PROF);
; 470  : 		D3DXMATRIX	Rot;

	lea	ecx, DWORD PTR _Rot$1[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 471  : 		AssignPmatrixToD3DXMATRIX(&Rot, (Pmatrix*)rot);

	mov	ecx, DWORD PTR _rot$[ebp]
	push	ecx
	lea	edx, DWORD PTR _Rot$1[ebp]
	push	edx
	call	?AssignPmatrixToD3DXMATRIX@@YAXPAUD3DXMATRIX@@PAUTrotation@@@Z ; AssignPmatrixToD3DXMATRIX
	add	esp, 8

; 472  : 		TheDXEngine.DrawObject(objInst,&Rot,pos,1.f,1.f,1.f,scale, false, NULL);

	push	0
	push	0
	push	ecx
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Rot$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _objInst$[ebp]
	push	edx
	mov	ecx, OFFSET ?TheDXEngine@@3VCDXEngine@@A ; TheDXEngine
	call	?DrawObject@CDXEngine@@QAEXPAVObjectInstance@@PAUD3DXMATRIX@@PBUTpoint@@MMMM_NK@Z ; CDXEngine::DrawObject
	jmp	SHORT $LN1@DrawObject
$LN2@DrawObject:

; 473  : 		//STOP_PROFILE(DX_ENGINE_PROF);
; 474  : 	}
; 475  : 	else pvtDrawObject(OP_NONE,objInst,rot,pos,1.f,1.f,1.f,scale);

	push	ecx
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rot$[ebp]
	push	ecx
	mov	edx, DWORD PTR _objInst$[ebp]
	push	edx
	push	0
	call	?pvtDrawObject@StateStackClass@@KAXKPAVObjectInstance@@PBUTrotation@@PBUTpoint@@MMMM@Z ; StateStackClass::pvtDrawObject
	add	esp, 32					; 00000020H
$LN1@DrawObject:

; 476  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DrawObject@StateStackClass@@SAXPAVObjectInstance@@PBUTrotation@@PBUTpoint@@M@Z ENDP ; StateStackClass::DrawObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\statestack.cpp
_TEXT	SEGMENT
_fov$ = 8						; size = 4
_aspect$ = 12						; size = 4
?SetProjection@StateStackClass@@SAXMM@Z PROC		; StateStackClass::SetProjection

; 241  : {

	push	ebp
	mov	ebp, esp

; 242  : //	if(context)
; 243  : //		mW.SetProjectionMatrix(fov,aspect,context->ZNEAR,context->ZFAR);
; 244  : }

	pop	ebp
	ret	0
?SetProjection@StateStackClass@@SAXMM@Z ENDP		; StateStackClass::SetProjection
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\statestack.cpp
_TEXT	SEGMENT
_rot$ = 8						; size = 4
_pos$ = 12						; size = 4
?SetWorld@StateStackClass@@SAXPBUTrotation@@PBUTpoint@@@Z PROC ; StateStackClass::SetWorld

; 232  : {

	push	ebp
	mov	ebp, esp

; 233  : 	mW.InitIdentity();

	mov	ecx, OFFSET ?mW@StateStackClass@@2VMatrix@D3DFrame@@A ; StateStackClass::mW
	call	?InitIdentity@Matrix@D3DFrame@@QAEXXZ	; D3DFrame::Matrix::InitIdentity

; 234  : 	mW.m[0][0]=rot->M11; mW.m[0][1]=rot->M12; mW.m[0][2]=rot->M13;

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _rot$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR ?mW@StateStackClass@@2VMatrix@D3DFrame@@A[eax+ecx], edx
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _rot$[ebp]
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR ?mW@StateStackClass@@2VMatrix@D3DFrame@@A[eax+ecx], edx
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _rot$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR ?mW@StateStackClass@@2VMatrix@D3DFrame@@A[eax+ecx], edx

; 235  : 	mW.m[1][0]=rot->M21; mW.m[1][1]=rot->M22; mW.m[1][2]=rot->M23;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _rot$[ebp]
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR ?mW@StateStackClass@@2VMatrix@D3DFrame@@A[eax+ecx], edx
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _rot$[ebp]
	mov	edx, DWORD PTR [edx+16]
	mov	DWORD PTR ?mW@StateStackClass@@2VMatrix@D3DFrame@@A[eax+ecx], edx
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _rot$[ebp]
	mov	edx, DWORD PTR [edx+20]
	mov	DWORD PTR ?mW@StateStackClass@@2VMatrix@D3DFrame@@A[eax+ecx], edx

; 236  : 	mW.m[2][0]=rot->M31; mW.m[2][1]=rot->M32; mW.m[2][2]=rot->M33; 

	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _rot$[ebp]
	mov	edx, DWORD PTR [edx+24]
	mov	DWORD PTR ?mW@StateStackClass@@2VMatrix@D3DFrame@@A[eax+ecx], edx
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _rot$[ebp]
	mov	edx, DWORD PTR [edx+28]
	mov	DWORD PTR ?mW@StateStackClass@@2VMatrix@D3DFrame@@A[eax+ecx], edx
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _rot$[ebp]
	mov	edx, DWORD PTR [edx+32]
	mov	DWORD PTR ?mW@StateStackClass@@2VMatrix@D3DFrame@@A[eax+ecx], edx

; 237  : 	mW.m[3][0]=pos->x; mW.m[3][1]=pos->y; mW.m[3][2]=pos->z; mW.m[3][3]=1.f;

	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR ?mW@StateStackClass@@2VMatrix@D3DFrame@@A[eax+ecx], edx
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR ?mW@StateStackClass@@2VMatrix@D3DFrame@@A[eax+ecx], edx
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR ?mW@StateStackClass@@2VMatrix@D3DFrame@@A[eax+ecx], edx
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	ecx, 4
	imul	ecx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?mW@StateStackClass@@2VMatrix@D3DFrame@@A[eax+ecx], xmm0

; 238  : }

	pop	ebp
	ret	0
?SetWorld@StateStackClass@@SAXPBUTrotation@@PBUTpoint@@@Z ENDP ; StateStackClass::SetWorld
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\statestack.cpp
_TEXT	SEGMENT
_vP$ = -28						; size = 12
_pitch$ = -16						; size = 4
_roll$ = -12						; size = 4
_yaw$ = -8						; size = 4
tv132 = -4						; size = 4
_pos$ = 8						; size = 4
_cameraRot$ = 12					; size = 4
?SetView@StateStackClass@@SAXPBUTpoint@@PAUTrotation@@@Z PROC ; StateStackClass::SetView

; 214  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 215  : 	D3DFrame::Vector vP;

	lea	ecx, DWORD PTR _vP$[ebp]
	call	??0Vector@D3DFrame@@QAE@XZ		; D3DFrame::Vector::Vector

; 216  : 
; 217  : 	float pitch = (float)-asin(cameraRot->M13);

	mov	eax, DWORD PTR _cameraRot$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR [esp], xmm0
	call	?asin@@YAMM@Z				; asin
	add	esp, 4
	fstp	DWORD PTR tv132[ebp]
	movss	xmm0, DWORD PTR tv132[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _pitch$[ebp], xmm0

; 218  : 	float roll = (float)atan2(cameraRot->M23,cameraRot->M33);

	mov	ecx, DWORD PTR _cameraRot$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx+32]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _cameraRot$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx+20]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _roll$[ebp]

; 219  : 	float yaw = (float)atan2(cameraRot->M12,cameraRot->M11);

	mov	eax, DWORD PTR _cameraRot$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _cameraRot$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx+4]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _yaw$[ebp]

; 220  : 
; 221  : 	vP.x=pos->y; vP.y=-pos->z; vP.z=pos->x; 

	mov	edx, DWORD PTR _pos$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR _vP$[ebp], xmm0
	mov	eax, DWORD PTR _pos$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _vP$[ebp+4], xmm0
	mov	ecx, DWORD PTR _pos$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR _vP$[ebp+8], xmm0

; 222  : 
; 223  : 	mV.SetViewMatrix(pitch,roll,yaw,vP);

	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	eax, DWORD PTR _vP$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _vP$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _vP$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	push	ecx
	movss	xmm0, DWORD PTR _yaw$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _roll$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pitch$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?mV@StateStackClass@@2VMatrix@D3DFrame@@A ; StateStackClass::mV
	call	?SetViewMatrix@Matrix@D3DFrame@@QAEXMMMVVector@2@@Z ; D3DFrame::Matrix::SetViewMatrix

; 224  : 
; 225  : /*	if(g_bUse_DX_Engine){
; 226  : 		D3DXMATRIX Camera,p;
; 227  : 		D3DXMatrixIdentity(&Camera);
; 228  : 	}*/
; 229  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SetView@StateStackClass@@SAXPBUTpoint@@PAUTrotation@@@Z ENDP ; StateStackClass::SetView
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\statestack.cpp
_TEXT	SEGMENT
_Rot$1 = -180						; size = 64
_BB$2 = -116						; size = 64
_DXPos$3 = -52						; size = 12
_Temp$4 = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
_pos$ = 8						; size = 4
_rotWaspect$ = 12					; size = 4
_Bill$ = 16						; size = 4
_Tree$ = 20						; size = 4
?SetCamera@StateStackClass@@SAXPBUTpoint@@PBUTrotation@@PAU3@2@Z PROC ; StateStackClass::SetCamera

; 247  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 180				; 000000b4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi

; 248  : 	ShiAssert(stackDepth == 0);
; 249  : 
; 250  : 	// COBRA - DX - Switching btw Old and New Engine - the Camera projections
; 251  : 	if(g_bUse_DX_Engine){

	movzx	eax, BYTE PTR ?g_bUse_DX_Engine@@3_NA	; g_bUse_DX_Engine
	test	eax, eax
	je	$LN1@SetCamera

; 252  : 		//***************************************************************************************
; 253  : 		// DX - RED - The camera & view axis has to be reverted
; 254  : 		Pmatrix Temp;
; 255  : 		ZeroMemory(&Temp,sizeof(Temp));

	push	36					; 00000024H
	push	0
	lea	ecx, DWORD PTR _Temp$4[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 256  : 		/*Temp.M31=-1.0;
; 257  : 		Temp.M23=-1.0;
; 258  : 		Temp.M12=1.0;*/
; 259  : 		Temp.M11=Temp.M22=Temp.M33=1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _Temp$4[ebp+32], xmm0
	movss	xmm0, DWORD PTR _Temp$4[ebp+32]
	movss	DWORD PTR _Temp$4[ebp+16], xmm0
	movss	xmm0, DWORD PTR _Temp$4[ebp+16]
	movss	DWORD PTR _Temp$4[ebp], xmm0

; 260  : 		MatrixMult(&Temp,rotWaspect,&Rotation);

	push	OFFSET ?Rotation@StateStackClass@@2UTrotation@@A ; StateStackClass::Rotation
	mov	edx, DWORD PTR _rotWaspect$[ebp]
	push	edx
	lea	eax, DWORD PTR _Temp$4[ebp]
	push	eax
	call	?MatrixMult@@YAXPBUTrotation@@0PAU1@@Z	; MatrixMult
	add	esp, 12					; 0000000cH

; 261  : 		D3DXMATRIX	Rot,BB;

	lea	ecx, DWORD PTR _Rot$1[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	lea	ecx, DWORD PTR _BB$2[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 262  : 		D3DVECTOR DXPos;

	lea	ecx, DWORD PTR _DXPos$3[ebp]
	call	??0_D3DVECTOR@@QAE@XZ			; _D3DVECTOR::_D3DVECTOR

; 263  : 		DXPos.x=pos->x;

	mov	ecx, DWORD PTR _pos$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR _DXPos$3[ebp], xmm0

; 264  : 		DXPos.y=pos->y;

	mov	edx, DWORD PTR _pos$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR _DXPos$3[ebp+4], xmm0

; 265  : 		DXPos.z=pos->z;

	mov	eax, DWORD PTR _pos$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _DXPos$3[ebp+8], xmm0

; 266  : 		AssignPmatrixToD3DXMATRIX(&Rot, &Rotation);

	push	OFFSET ?Rotation@StateStackClass@@2UTrotation@@A ; StateStackClass::Rotation
	lea	ecx, DWORD PTR _Rot$1[ebp]
	push	ecx
	call	?AssignPmatrixToD3DXMATRIX@@YAXPAUD3DXMATRIX@@PAUTrotation@@@Z ; AssignPmatrixToD3DXMATRIX
	add	esp, 8

; 267  : 		AssignPmatrixToD3DXMATRIX(&BB, Bill);

	mov	edx, DWORD PTR _Bill$[ebp]
	push	edx
	lea	eax, DWORD PTR _BB$2[ebp]
	push	eax
	call	?AssignPmatrixToD3DXMATRIX@@YAXPAUD3DXMATRIX@@PAUTrotation@@@Z ; AssignPmatrixToD3DXMATRIX
	add	esp, 8

; 268  : 		TheDXEngine.SetCamera(&Rot, DXPos, &BB);

	lea	ecx, DWORD PTR _BB$2[ebp]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	eax, DWORD PTR _DXPos$3[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _DXPos$3[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _DXPos$3[ebp+8]
	mov	DWORD PTR [edx+8], eax
	lea	ecx, DWORD PTR _Rot$1[ebp]
	push	ecx
	mov	ecx, OFFSET ?TheDXEngine@@3VCDXEngine@@A ; TheDXEngine
	call	?SetCamera@CDXEngine@@QAEXPAUD3DXMATRIX@@U_D3DVECTOR@@0@Z ; CDXEngine::SetCamera
$LN1@SetCamera:

; 269  : 	}
; 270  : 
; 271  : 	// Store our rotation from world to camera space (including aspect scale effects)
; 272  : 	Rotation = *rotWaspect;	

	mov	ecx, 9
	mov	esi, DWORD PTR _rotWaspect$[ebp]
	mov	edi, OFFSET ?Rotation@StateStackClass@@2UTrotation@@A ; StateStackClass::Rotation
	rep movsd

; 273  : 
; 274  : 	// Compute the vector from the camera to the origin rotated into camera space
; 275  : 	Xlation.x = -pos->x * Rotation.M11 - pos->y * Rotation.M12 - pos->z * Rotation.M13;

	mov	edx, DWORD PTR _pos$[ebp]
	movss	xmm0, DWORD PTR [edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR ?Rotation@StateStackClass@@2UTrotation@@A
	mov	eax, DWORD PTR _pos$[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	mulss	xmm1, DWORD PTR ?Rotation@StateStackClass@@2UTrotation@@A+4
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _pos$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR ?Rotation@StateStackClass@@2UTrotation@@A+8
	subss	xmm0, xmm1
	movss	DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A, xmm0

; 276  : 	Xlation.y = -pos->x * Rotation.M21 - pos->y * Rotation.M22 - pos->z * Rotation.M23;

	mov	edx, DWORD PTR _pos$[ebp]
	movss	xmm0, DWORD PTR [edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR ?Rotation@StateStackClass@@2UTrotation@@A+12
	mov	eax, DWORD PTR _pos$[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	mulss	xmm1, DWORD PTR ?Rotation@StateStackClass@@2UTrotation@@A+16
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _pos$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR ?Rotation@StateStackClass@@2UTrotation@@A+20
	subss	xmm0, xmm1
	movss	DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A+4, xmm0

; 277  : 	Xlation.z = -pos->x * Rotation.M31 - pos->y * Rotation.M32 - pos->z * Rotation.M33;

	mov	edx, DWORD PTR _pos$[ebp]
	movss	xmm0, DWORD PTR [edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR ?Rotation@StateStackClass@@2UTrotation@@A+24
	mov	eax, DWORD PTR _pos$[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	mulss	xmm1, DWORD PTR ?Rotation@StateStackClass@@2UTrotation@@A+28
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _pos$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR ?Rotation@StateStackClass@@2UTrotation@@A+32
	subss	xmm0, xmm1
	movss	DWORD PTR ?Xlation@StateStackClass@@2UTpoint@@A+8, xmm0

; 278  : 
; 279  : 	// Intialize the eye postion in world space
; 280  : 	ObjSpaceEye = *pos;

	mov	edx, DWORD PTR _pos$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR ?ObjSpaceEye@StateStackClass@@2UTpoint@@A, eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR ?ObjSpaceEye@StateStackClass@@2UTpoint@@A+4, ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR ?ObjSpaceEye@StateStackClass@@2UTpoint@@A+8, edx

; 281  : 
; 282  : 	Tb = Bill;

	mov	eax, DWORD PTR _Bill$[ebp]
	mov	DWORD PTR ?Tb@StateStackClass@@2PAUTrotation@@A, eax ; StateStackClass::Tb

; 283  : 	Tt = Tree;

	mov	ecx, DWORD PTR _Tree$[ebp]
	mov	DWORD PTR ?Tt@StateStackClass@@2PAUTrotation@@A, ecx ; StateStackClass::Tt

; 284  : }

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?SetCamera@StateStackClass@@SAXPBUTpoint@@PBUTrotation@@PAU3@2@Z ENDP ; StateStackClass::SetCamera
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\statestack.cpp
_TEXT	SEGMENT
_c$1 = -24						; size = 4
_cx$2 = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_alpha$ = 8						; size = 4
_color$ = 12						; size = 4
?SetFog@StateStackClass@@SAXMPAUPcolor@@@Z PROC		; StateStackClass::SetFog

; 188  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 189  : 	if(color)

	cmp	DWORD PTR _color$[ebp], 0
	je	$LN1@SetFog

; 190  : 	{
; 191  : 		UInt32 c;
; 192  : 
; 193  : 		c  = FloatToInt32(color->r * 255.9f);

	mov	eax, DWORD PTR _color$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR __real@437fe666
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _c$1[ebp], eax

; 194  : 		c |= FloatToInt32(color->g * 255.9f) << 8;

	mov	ecx, DWORD PTR _color$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR __real@437fe666
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	shl	eax, 8
	or	eax, DWORD PTR _c$1[ebp]
	mov	DWORD PTR _c$1[ebp], eax

; 195  : 		c |= FloatToInt32(color->b * 255.9f) << 16;

	mov	edx, DWORD PTR _color$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	mulss	xmm0, DWORD PTR __real@437fe666
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	shl	eax, 16					; 00000010H
	or	eax, DWORD PTR _c$1[ebp]
	mov	DWORD PTR _c$1[ebp], eax

; 196  : 		context->SetState(MPR_STA_FOG_COLOR,c);

	mov	eax, DWORD PTR _c$1[ebp]
	push	eax
	push	12					; 0000000cH
	mov	ecx, DWORD PTR ?context@StateStackClass@@2PAVContextMPR@@A ; StateStackClass::context
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 197  : 		D3DCOLORVALUE	cx;
; 198  : 		cx.dvR=color->r;

	mov	ecx, DWORD PTR _color$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR _cx$2[ebp], xmm0

; 199  : 		cx.dvG=color->g;

	mov	edx, DWORD PTR _color$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR _cx$2[ebp+4], xmm0

; 200  : 		cx.dvB=color->b;

	mov	eax, DWORD PTR _color$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _cx$2[ebp+8], xmm0

; 201  : 		cx.dvA=color->a;

	mov	ecx, DWORD PTR _color$[ebp]
	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR _cx$2[ebp+12], xmm0

; 202  : 		TheDXEngine.SetFogColor(&cx);

	lea	edx, DWORD PTR _cx$2[ebp]
	push	edx
	mov	ecx, OFFSET ?TheDXEngine@@3VCDXEngine@@A ; TheDXEngine
	call	?SetFogColor@CDXEngine@@QAEXPAU_D3DCOLORVALUE@@@Z ; CDXEngine::SetFogColor
$LN1@SetFog:

; 203  : 	}
; 204  : 
; 205  : 	fogValue = alpha;

	movss	xmm0, DWORD PTR _alpha$[ebp]
	movss	DWORD PTR ?fogValue@StateStackClass@@2MA, xmm0

; 206  : 	TheDXEngine.SetFogLevel(fogValue);

	push	ecx
	movss	xmm0, DWORD PTR ?fogValue@StateStackClass@@2MA
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?TheDXEngine@@3VCDXEngine@@A ; TheDXEngine
	call	?SetFogLevel@CDXEngine@@QAEXM@Z		; CDXEngine::SetFogLevel

; 207  : 
; 208  : 	// FIXME
; 209  : 	DrawPrimNoClipJumpTable = DrawPrimFogNoClipJumpTable;

	mov	eax, DWORD PTR ?DrawPrimFogNoClipJumpTable@@3PBQ6AXPAUPrim@@@ZB ; DrawPrimFogNoClipJumpTable
	mov	DWORD PTR ?DrawPrimNoClipJumpTable@@3PBQ6AXPAUPrim@@@ZB, eax ; DrawPrimNoClipJumpTable

; 210  : 	ClipPrimJumpTable		= ClipPrimFogJumpTable;

	mov	ecx, DWORD PTR ?ClipPrimFogJumpTable@@3PBQ6AXPAUPrim@@K@ZB ; ClipPrimFogJumpTable
	mov	DWORD PTR ?ClipPrimJumpTable@@3PBQ6AXPAUPrim@@K@ZB, ecx ; ClipPrimJumpTable

; 211  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?SetFog@StateStackClass@@SAXMPAUPcolor@@@Z ENDP		; StateStackClass::SetFog
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\statestack.cpp
_TEXT	SEGMENT
_state$ = 8						; size = 4
?SetTextureState@StateStackClass@@SAXH@Z PROC		; StateStackClass::SetTextureState

; 158  : {

	push	ebp
	mov	ebp, esp

; 159  : 	if(state)

	cmp	DWORD PTR _state$[ebp], 0
	je	SHORT $LN2@SetTexture

; 160  : 	{
; 161  : 		RenderStateTablePC				= RenderStateTableWithPCTex;

	mov	DWORD PTR ?RenderStateTablePC@@3PBHB, OFFSET ?RenderStateTableWithPCTex@@3QBHB ; RenderStateTablePC, RenderStateTableWithPCTex

; 162  : 		RenderStateTableNPC				= RenderStateTableWithNPCTex;

	mov	DWORD PTR ?RenderStateTableNPC@@3PBHB, OFFSET ?RenderStateTableWithNPCTex@@3QBHB ; RenderStateTableNPC, RenderStateTableWithNPCTex

; 163  : 
; 164  : 		DrawPrimNoFogNoClipJumpTable	= DrawPrimNoClipWithTexJumpTable;

	mov	DWORD PTR ?DrawPrimNoFogNoClipJumpTable@@3PBQ6AXPAUPrim@@@ZB, OFFSET ?DrawPrimNoClipWithTexJumpTable@@3QBQ6AXPAUPrim@@@ZB ; DrawPrimNoFogNoClipJumpTable, DrawPrimNoClipWithTexJumpTable

; 165  : 		ClipPrimNoFogJumpTable			= ClipPrimWithTexJumpTable;

	mov	DWORD PTR ?ClipPrimNoFogJumpTable@@3PBQ6AXPAUPrim@@K@ZB, OFFSET ?ClipPrimWithTexJumpTable@@3QBQ6AXPAUPrim@@K@ZB ; ClipPrimNoFogJumpTable, ClipPrimWithTexJumpTable

; 166  : 
; 167  : 		DrawPrimFogNoClipJumpTable		= DrawPrimFogNoClipWithTexJumpTable;

	mov	DWORD PTR ?DrawPrimFogNoClipJumpTable@@3PBQ6AXPAUPrim@@@ZB, OFFSET ?DrawPrimFogNoClipWithTexJumpTable@@3QBQ6AXPAUPrim@@@ZB ; DrawPrimFogNoClipJumpTable, DrawPrimFogNoClipWithTexJumpTable

; 168  : 		ClipPrimFogJumpTable			= ClipPrimFogWithTexJumpTable;

	mov	DWORD PTR ?ClipPrimFogJumpTable@@3PBQ6AXPAUPrim@@K@ZB, OFFSET ?ClipPrimFogWithTexJumpTable@@3QBQ6AXPAUPrim@@K@ZB ; ClipPrimFogJumpTable, ClipPrimFogWithTexJumpTable

; 169  : 	}
; 170  : 	else

	jmp	SHORT $LN1@SetTexture
$LN2@SetTexture:

; 171  : 	{
; 172  : 		RenderStateTablePC				= RenderStateTableNoTex;

	mov	DWORD PTR ?RenderStateTablePC@@3PBHB, OFFSET ?RenderStateTableNoTex@@3QBHB ; RenderStateTablePC, RenderStateTableNoTex

; 173  : 		RenderStateTableNPC				= RenderStateTableNoTex;

	mov	DWORD PTR ?RenderStateTableNPC@@3PBHB, OFFSET ?RenderStateTableNoTex@@3QBHB ; RenderStateTableNPC, RenderStateTableNoTex

; 174  : 
; 175  : 		DrawPrimNoFogNoClipJumpTable	= DrawPrimNoClipNoTexJumpTable;

	mov	DWORD PTR ?DrawPrimNoFogNoClipJumpTable@@3PBQ6AXPAUPrim@@@ZB, OFFSET ?DrawPrimNoClipNoTexJumpTable@@3QBQ6AXPAUPrim@@@ZB ; DrawPrimNoFogNoClipJumpTable, DrawPrimNoClipNoTexJumpTable

; 176  : 		ClipPrimNoFogJumpTable			= ClipPrimNoTexJumpTable;

	mov	DWORD PTR ?ClipPrimNoFogJumpTable@@3PBQ6AXPAUPrim@@K@ZB, OFFSET ?ClipPrimNoTexJumpTable@@3QBQ6AXPAUPrim@@K@ZB ; ClipPrimNoFogJumpTable, ClipPrimNoTexJumpTable

; 177  : 
; 178  : 		DrawPrimFogNoClipJumpTable		= DrawPrimFogNoClipNoTexJumpTable;

	mov	DWORD PTR ?DrawPrimFogNoClipJumpTable@@3PBQ6AXPAUPrim@@@ZB, OFFSET ?DrawPrimFogNoClipNoTexJumpTable@@3QBQ6AXPAUPrim@@@ZB ; DrawPrimFogNoClipJumpTable, DrawPrimFogNoClipNoTexJumpTable

; 179  : 		ClipPrimFogJumpTable			= ClipPrimFogNoTexJumpTable;

	mov	DWORD PTR ?ClipPrimFogJumpTable@@3PBQ6AXPAUPrim@@K@ZB, OFFSET ?ClipPrimFogNoTexJumpTable@@3QBQ6AXPAUPrim@@K@ZB ; ClipPrimFogJumpTable, ClipPrimFogNoTexJumpTable
$LN1@SetTexture:

; 180  : 	}
; 181  : 
; 182  : 	// FIXME
; 183  : 	DrawPrimNoClipJumpTable				= DrawPrimFogNoClipJumpTable;

	mov	eax, DWORD PTR ?DrawPrimFogNoClipJumpTable@@3PBQ6AXPAUPrim@@@ZB ; DrawPrimFogNoClipJumpTable
	mov	DWORD PTR ?DrawPrimNoClipJumpTable@@3PBQ6AXPAUPrim@@@ZB, eax ; DrawPrimNoClipJumpTable

; 184  : 	ClipPrimJumpTable					= ClipPrimFogJumpTable;

	mov	ecx, DWORD PTR ?ClipPrimFogJumpTable@@3PBQ6AXPAUPrim@@K@ZB ; ClipPrimFogJumpTable
	mov	DWORD PTR ?ClipPrimJumpTable@@3PBQ6AXPAUPrim@@K@ZB, ecx ; ClipPrimJumpTable

; 185  : }

	pop	ebp
	ret	0
?SetTextureState@StateStackClass@@SAXH@Z ENDP		; StateStackClass::SetTextureState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\statestack.cpp
_TEXT	SEGMENT
_bias$ = 8						; size = 4
?SetLODBias@StateStackClass@@SAXM@Z PROC		; StateStackClass::SetLODBias

; 867  : {

	push	ebp
	mov	ebp, esp

; 868  : 	LODBiasInv = 1.f/bias;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _bias$[ebp]
	movss	DWORD PTR ?LODBiasInv@StateStackClass@@2MA, xmm0

; 869  : 	TheDXEngine.SetLODBias(LODBiasInv);

	push	ecx
	movss	xmm0, DWORD PTR ?LODBiasInv@StateStackClass@@2MA
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?TheDXEngine@@3VCDXEngine@@A ; TheDXEngine
	call	?SetLODBias@CDXEngine@@QAEXM@Z		; CDXEngine::SetLODBias

; 870  : };

	pop	ebp
	ret	0
?SetLODBias@StateStackClass@@SAXM@Z ENDP		; StateStackClass::SetLODBias
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\statestack.cpp
_TEXT	SEGMENT
tv94 = -12						; size = 4
tv85 = -8						; size = 4
_rx2$ = -4						; size = 4
_ooTanHHAngle$ = 8					; size = 4
_ooTanVHAngle$ = 12					; size = 4
_sclx$ = 16						; size = 4
_scly$ = 20						; size = 4
_shftx$ = 24						; size = 4
_shfty$ = 28						; size = 4
?SetCameraProperties@StateStackClass@@SAXMMMMMM@Z PROC	; StateStackClass::SetCameraProperties

; 139  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 140  : 	float	rx2;
; 141  : 
; 142  : 	rx2 = (ooTanHHAngle*ooTanHHAngle);

	movss	xmm0, DWORD PTR _ooTanHHAngle$[ebp]
	mulss	xmm0, DWORD PTR _ooTanHHAngle$[ebp]
	movss	DWORD PTR _rx2$[ebp], xmm0

; 143  : 	hAspectDepthCorrection = 1.f/(float)sqrt(rx2 + 1.0f);

	movss	xmm0, DWORD PTR _rx2$[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv85[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR tv85[ebp]
	movss	DWORD PTR ?hAspectDepthCorrection@StateStackClass@@1MA, xmm0

; 144  : 	hAspectWidthCorrection = rx2*hAspectDepthCorrection;

	movss	xmm0, DWORD PTR _rx2$[ebp]
	mulss	xmm0, DWORD PTR ?hAspectDepthCorrection@StateStackClass@@1MA
	movss	DWORD PTR ?hAspectWidthCorrection@StateStackClass@@1MA, xmm0

; 145  : 
; 146  : 	rx2 = (ooTanVHAngle*ooTanVHAngle);

	movss	xmm0, DWORD PTR _ooTanVHAngle$[ebp]
	mulss	xmm0, DWORD PTR _ooTanVHAngle$[ebp]
	movss	DWORD PTR _rx2$[ebp], xmm0

; 147  : 	vAspectDepthCorrection = 1.f/(float)sqrt(rx2 + 1.0f);

	movss	xmm0, DWORD PTR _rx2$[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv94[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR tv94[ebp]
	movss	DWORD PTR ?vAspectDepthCorrection@StateStackClass@@1MA, xmm0

; 148  : 	vAspectWidthCorrection = rx2*vAspectDepthCorrection;

	movss	xmm0, DWORD PTR _rx2$[ebp]
	mulss	xmm0, DWORD PTR ?vAspectDepthCorrection@StateStackClass@@1MA
	movss	DWORD PTR ?vAspectWidthCorrection@StateStackClass@@1MA, xmm0

; 149  : 
; 150  : 	scaleX = sclx;

	movss	xmm0, DWORD PTR _sclx$[ebp]
	movss	DWORD PTR ?scaleX@StateStackClass@@1MA, xmm0

; 151  : 	scaleY = scly;

	movss	xmm0, DWORD PTR _scly$[ebp]
	movss	DWORD PTR ?scaleY@StateStackClass@@1MA, xmm0

; 152  : 	shiftX = shftx;

	movss	xmm0, DWORD PTR _shftx$[ebp]
	movss	DWORD PTR ?shiftX@StateStackClass@@1MA, xmm0

; 153  : 	shiftY = shfty;

	movss	xmm0, DWORD PTR _shfty$[ebp]
	movss	DWORD PTR ?shiftY@StateStackClass@@1MA, xmm0

; 154  : 
; 155  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SetCameraProperties@StateStackClass@@SAXMMMMMM@Z ENDP	; StateStackClass::SetCameraProperties
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\statestack.cpp
_TEXT	SEGMENT
_Dir$1 = -12						; size = 12
_a$ = 8							; size = 4
_d$ = 12						; size = 4
_s$ = 16						; size = 4
_atLight$ = 20						; size = 4
?SetLight@StateStackClass@@SAXMMMPAUTpoint@@@Z PROC	; StateStackClass::SetLight

; 115  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 116  : 	lightAmbient = d;

	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR ?lightAmbient@StateStackClass@@2MA, xmm0

; 117  : 	lightDiffuse = a;

	movss	xmm0, DWORD PTR _a$[ebp]
	movss	DWORD PTR ?lightDiffuse@StateStackClass@@2MA, xmm0

; 118  : 	lightSpecular = s;

	movss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR ?lightSpecular@StateStackClass@@2MA, xmm0

; 119  : 
; 120  : 	memcpy(&lightVector,atLight,sizeof(Ppoint));

	push	12					; 0000000cH
	mov	eax, DWORD PTR _atLight$[ebp]
	push	eax
	push	OFFSET ?lightVector@StateStackClass@@2UTpoint@@A ; StateStackClass::lightVector
	call	_memcpy
	add	esp, 12					; 0000000cH

; 121  : 	ObjSpaceLight = lightVector;

	mov	ecx, DWORD PTR ?lightVector@StateStackClass@@2UTpoint@@A
	mov	DWORD PTR ?ObjSpaceLight@StateStackClass@@2UTpoint@@A, ecx
	mov	edx, DWORD PTR ?lightVector@StateStackClass@@2UTpoint@@A+4
	mov	DWORD PTR ?ObjSpaceLight@StateStackClass@@2UTpoint@@A+4, edx
	mov	eax, DWORD PTR ?lightVector@StateStackClass@@2UTpoint@@A+8
	mov	DWORD PTR ?ObjSpaceLight@StateStackClass@@2UTpoint@@A+8, eax

; 122  : 
; 123  : 	// COBRA - DX - Switching btw Old and New Engine - the DX SUNLight
; 124  : 	if(g_bUse_DX_Engine){

	movzx	ecx, BYTE PTR ?g_bUse_DX_Engine@@3_NA	; g_bUse_DX_Engine
	test	ecx, ecx
	je	$LN1@SetLight

; 125  : 		// Setup light properties
; 126  : 		TheDXEngine.SetSunLight(a, d ,s);

	push	ecx
	movss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _a$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?TheDXEngine@@3VCDXEngine@@A ; TheDXEngine
	call	?SetSunLight@CDXEngine@@QAEXMMM@Z	; CDXEngine::SetSunLight

; 127  : 		
; 128  : 		// Setup Light Vector - Light direction has to be reversed
; 129  : 		D3DVECTOR	Dir;

	lea	ecx, DWORD PTR _Dir$1[ebp]
	call	??0_D3DVECTOR@@QAE@XZ			; _D3DVECTOR::_D3DVECTOR

; 130  : 		Dir.x=-ObjSpaceLight.x;

	movss	xmm0, DWORD PTR ?ObjSpaceLight@StateStackClass@@2UTpoint@@A
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _Dir$1[ebp], xmm0

; 131  : 		Dir.y=-ObjSpaceLight.y;

	movss	xmm0, DWORD PTR ?ObjSpaceLight@StateStackClass@@2UTpoint@@A+4
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _Dir$1[ebp+4], xmm0

; 132  : 		Dir.z=-ObjSpaceLight.z;

	movss	xmm0, DWORD PTR ?ObjSpaceLight@StateStackClass@@2UTpoint@@A+8
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _Dir$1[ebp+8], xmm0

; 133  : 		TheDXEngine.SetSunVector(Dir);

	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	eax, DWORD PTR _Dir$1[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _Dir$1[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _Dir$1[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, OFFSET ?TheDXEngine@@3VCDXEngine@@A ; TheDXEngine
	call	?SetSunVector@CDXEngine@@QAEXU_D3DVECTOR@@@Z ; CDXEngine::SetSunVector
$LN1@SetLight:

; 134  : 	}
; 135  : 
; 136  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SetLight@StateStackClass@@SAXMMMPAUTpoint@@@Z ENDP	; StateStackClass::SetLight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\statestack.cpp
_TEXT	SEGMENT
_cntxt$ = 8						; size = 4
?SetContext@StateStackClass@@SAXPAVContextMPR@@@Z PROC	; StateStackClass::SetContext

; 110  : {

	push	ebp
	mov	ebp, esp

; 111  : 	context = cntxt;

	mov	eax, DWORD PTR _cntxt$[ebp]
	mov	DWORD PTR ?context@StateStackClass@@2PAVContextMPR@@A, eax ; StateStackClass::context

; 112  : }

	pop	ebp
	ret	0
?SetContext@StateStackClass@@SAXPAVContextMPR@@@Z ENDP	; StateStackClass::SetContext
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\statestack.h
;	COMDAT ??1StateStackClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1StateStackClass@@QAE@XZ PROC				; StateStackClass::~StateStackClass, COMDAT
; _this$ = ecx

; 67   : 	~StateStackClass() { ShiAssert(stackDepth == 0); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1StateStackClass@@QAE@XZ ENDP				; StateStackClass::~StateStackClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\statestack.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0StateStackClass@@QAE@XZ PROC				; StateStackClass::StateStackClass
; _this$ = ecx

; 99   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 100  : 	stackDepth			= 0;

	mov	DWORD PTR ?stackDepth@StateStackClass@@1HA, 0 ; StateStackClass::stackDepth

; 101  : 	XformedPosPoolNext	= XformedPosPoolBuffer;

	mov	DWORD PTR ?XformedPosPoolNext@StateStackClass@@2PAUSpoint@@A, OFFSET _XformedPosPoolBuffer ; StateStackClass::XformedPosPoolNext

; 102  : 	IntensityPoolNext		= IntensityPoolBuffer;

	mov	DWORD PTR ?IntensityPoolNext@StateStackClass@@2PAMA, OFFSET _IntensityPoolBuffer ; StateStackClass::IntensityPoolNext

; 103  : 	ClipInfoPoolNext	= ClipInfoPoolBuffer;

	mov	DWORD PTR ?ClipInfoPoolNext@StateStackClass@@2PAUPclipInfo@@A, OFFSET _ClipInfoPoolBuffer ; StateStackClass::ClipInfoPoolNext

; 104  : 	LODBiasInv			= 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?LODBiasInv@StateStackClass@@2MA, xmm0

; 105  : 	SetTextureState(TRUE);

	push	1
	call	?SetTextureState@StateStackClass@@SAXH@Z ; StateStackClass::SetTextureState
	add	esp, 4

; 106  : 	SetFog(1.f,NULL);

	push	0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	call	?SetFog@StateStackClass@@SAXMPAUPcolor@@@Z ; StateStackClass::SetFog
	add	esp, 8

; 107  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0StateStackClass@@QAE@XZ ENDP				; StateStackClass::StateStackClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\vmath.h
;	COMDAT ?SetViewMatrix@Matrix@D3DFrame@@QAEXMMMVVector@2@@Z
_TEXT	SEGMENT
tv331 = -468						; size = 4
tv308 = -464						; size = 4
tv378 = -460						; size = 4
_this$ = -456						; size = 4
$T1 = -452						; size = 64
$T2 = -388						; size = 64
$T3 = -324						; size = 64
_mT$ = -260						; size = 64
_mZ$ = -196						; size = 64
_mX$ = -132						; size = 64
_mY$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_fPitch$ = 8						; size = 4
_fRoll$ = 12						; size = 4
_fYaw$ = 16						; size = 4
_vPos$ = 20						; size = 12
?SetViewMatrix@Matrix@D3DFrame@@QAEXMMMVVector@2@@Z PROC ; D3DFrame::Matrix::SetViewMatrix, COMDAT
; _this$ = ecx

; 504  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 468				; 000001d4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 505  : 		Matrix mT,mX,mY,mZ;
; 506  : 
; 507  : 		mT.InitIdentity();

	lea	ecx, DWORD PTR _mT$[ebp]
	call	?InitIdentity@Matrix@D3DFrame@@QAEXXZ	; D3DFrame::Matrix::InitIdentity

; 508  : 		mT.m[3][0]=-vPos.x; mT.m[3][1]=-vPos.y; mT.m[3][2]=-vPos.z;

	movss	xmm0, DWORD PTR _vPos$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, 16					; 00000010H
	imul	eax, 3
	lea	ecx, DWORD PTR _mT$[ebp+eax]
	mov	edx, 4
	imul	edx, 0
	movss	DWORD PTR [ecx+edx], xmm0
	movss	xmm0, DWORD PTR _vPos$[ebp+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, 16					; 00000010H
	imul	eax, 3
	lea	ecx, DWORD PTR _mT$[ebp+eax]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR [ecx+edx], xmm0
	movss	xmm0, DWORD PTR _vPos$[ebp+8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, 16					; 00000010H
	imul	eax, 3
	lea	ecx, DWORD PTR _mT$[ebp+eax]
	mov	edx, 4
	shl	edx, 1
	movss	DWORD PTR [ecx+edx], xmm0

; 509  : 
; 510  : 		mX.InitIdentity();

	lea	ecx, DWORD PTR _mX$[ebp]
	call	?InitIdentity@Matrix@D3DFrame@@QAEXXZ	; D3DFrame::Matrix::InitIdentity

; 511  : 		mX.m[0][0]=1; mX.m[0][1]=0; mX.m[0][2]=0;

	mov	eax, 16					; 00000010H
	imul	eax, 0
	lea	ecx, DWORD PTR _mX$[ebp+eax]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	eax, 0
	lea	ecx, DWORD PTR _mX$[ebp+eax]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	eax, 0
	lea	ecx, DWORD PTR _mX$[ebp+eax]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0

; 512  : 		mX.m[1][0]=0; mX.m[1][1]=(float)cos(fPitch); mX.m[1][2]=(float)sin(fPitch);

	mov	eax, 16					; 00000010H
	shl	eax, 0
	lea	ecx, DWORD PTR _mX$[ebp+eax]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fPitch$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	mov	eax, 16					; 00000010H
	shl	eax, 0
	lea	ecx, DWORD PTR _mX$[ebp+eax]
	mov	edx, 4
	shl	edx, 0
	fstp	DWORD PTR [ecx+edx]
	push	ecx
	movss	xmm0, DWORD PTR _fPitch$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	mov	eax, 16					; 00000010H
	shl	eax, 0
	lea	ecx, DWORD PTR _mX$[ebp+eax]
	mov	edx, 4
	shl	edx, 1
	fstp	DWORD PTR [ecx+edx]

; 513  : 		mX.m[2][0]=0; mX.m[2][1]=-(float)sin(fPitch); mX.m[2][2]=(float)cos(fPitch);

	mov	eax, 16					; 00000010H
	shl	eax, 1
	lea	ecx, DWORD PTR _mX$[ebp+eax]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fPitch$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv308[ebp]
	movss	xmm0, DWORD PTR tv308[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, 16					; 00000010H
	shl	eax, 1
	lea	ecx, DWORD PTR _mX$[ebp+eax]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR [ecx+edx], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fPitch$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	mov	eax, 16					; 00000010H
	shl	eax, 1
	lea	ecx, DWORD PTR _mX$[ebp+eax]
	mov	edx, 4
	shl	edx, 1
	fstp	DWORD PTR [ecx+edx]

; 514  : 
; 515  : 		mY.InitIdentity();

	lea	ecx, DWORD PTR _mY$[ebp]
	call	?InitIdentity@Matrix@D3DFrame@@QAEXXZ	; D3DFrame::Matrix::InitIdentity

; 516  : 		mY.m[0][0]=(float)cos(fYaw); mY.m[0][1]=0; mY.m[0][2]=-(float)sin(fYaw);

	push	ecx
	movss	xmm0, DWORD PTR _fYaw$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	mov	eax, 16					; 00000010H
	imul	eax, 0
	lea	ecx, DWORD PTR _mY$[ebp+eax]
	mov	edx, 4
	imul	edx, 0
	fstp	DWORD PTR [ecx+edx]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	lea	ecx, DWORD PTR _mY$[ebp+eax]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fYaw$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv331[ebp]
	movss	xmm0, DWORD PTR tv331[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, 16					; 00000010H
	imul	eax, 0
	lea	ecx, DWORD PTR _mY$[ebp+eax]
	mov	edx, 4
	shl	edx, 1
	movss	DWORD PTR [ecx+edx], xmm0

; 517  : 		mY.m[1][0]=0; mY.m[1][1]=1; mY.m[1][2]=0;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	lea	ecx, DWORD PTR _mY$[ebp+eax]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	lea	ecx, DWORD PTR _mY$[ebp+eax]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	lea	ecx, DWORD PTR _mY$[ebp+eax]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0

; 518  : 		mY.m[2][0]=(float)sin(fYaw); mY.m[2][1]=0; mY.m[2][2]=(float)cos(fYaw);

	push	ecx
	movss	xmm0, DWORD PTR _fYaw$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	mov	eax, 16					; 00000010H
	shl	eax, 1
	lea	ecx, DWORD PTR _mY$[ebp+eax]
	mov	edx, 4
	imul	edx, 0
	fstp	DWORD PTR [ecx+edx]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	lea	ecx, DWORD PTR _mY$[ebp+eax]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fYaw$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	mov	eax, 16					; 00000010H
	shl	eax, 1
	lea	ecx, DWORD PTR _mY$[ebp+eax]
	mov	edx, 4
	shl	edx, 1
	fstp	DWORD PTR [ecx+edx]

; 519  : 
; 520  : 		mZ.InitIdentity();

	lea	ecx, DWORD PTR _mZ$[ebp]
	call	?InitIdentity@Matrix@D3DFrame@@QAEXXZ	; D3DFrame::Matrix::InitIdentity

; 521  : 		mZ.m[0][0]=(float)cos(fRoll); mZ.m[0][1]=(float)sin(fRoll); mZ.m[0][2]=0;

	push	ecx
	movss	xmm0, DWORD PTR _fRoll$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	mov	eax, 16					; 00000010H
	imul	eax, 0
	lea	ecx, DWORD PTR _mZ$[ebp+eax]
	mov	edx, 4
	imul	edx, 0
	fstp	DWORD PTR [ecx+edx]
	push	ecx
	movss	xmm0, DWORD PTR _fRoll$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	mov	eax, 16					; 00000010H
	imul	eax, 0
	lea	ecx, DWORD PTR _mZ$[ebp+eax]
	mov	edx, 4
	shl	edx, 0
	fstp	DWORD PTR [ecx+edx]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	lea	ecx, DWORD PTR _mZ$[ebp+eax]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0

; 522  : 		mZ.m[1][0]=-(float)sin(fRoll); mZ.m[1][1]=(float)cos(fRoll); mZ.m[1][2]=0;

	push	ecx
	movss	xmm0, DWORD PTR _fRoll$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv378[ebp]
	movss	xmm0, DWORD PTR tv378[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, 16					; 00000010H
	shl	eax, 0
	lea	ecx, DWORD PTR _mZ$[ebp+eax]
	mov	edx, 4
	imul	edx, 0
	movss	DWORD PTR [ecx+edx], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fRoll$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	mov	eax, 16					; 00000010H
	shl	eax, 0
	lea	ecx, DWORD PTR _mZ$[ebp+eax]
	mov	edx, 4
	shl	edx, 0
	fstp	DWORD PTR [ecx+edx]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	lea	ecx, DWORD PTR _mZ$[ebp+eax]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0

; 523  : 		mZ.m[2][0]=0; mZ.m[2][1]=0; mZ.m[2][2]=1;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	lea	ecx, DWORD PTR _mZ$[ebp+eax]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	lea	ecx, DWORD PTR _mZ$[ebp+eax]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	lea	ecx, DWORD PTR _mZ$[ebp+eax]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+edx], xmm0

; 524  : 
; 525  : 		InitIdentity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitIdentity@Matrix@D3DFrame@@QAEXXZ	; D3DFrame::Matrix::InitIdentity

; 526  : 		*this = mX*mY*mZ*mT;

	lea	eax, DWORD PTR _mT$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mZ$[ebp]
	push	ecx
	lea	edx, DWORD PTR _mY$[ebp]
	push	edx
	lea	eax, DWORD PTR _mX$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	??DD3DFrame@@YA?AVMatrix@0@ABV10@0@Z	; D3DFrame::operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??DD3DFrame@@YA?AVMatrix@0@ABV10@0@Z	; D3DFrame::operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??DD3DFrame@@YA?AVMatrix@0@ABV10@0@Z	; D3DFrame::operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Matrix@D3DFrame@@QAEAAV01@ABV01@@Z	; D3DFrame::Matrix::operator=

; 527  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?SetViewMatrix@Matrix@D3DFrame@@QAEXMMMVVector@2@@Z ENDP ; D3DFrame::Matrix::SetViewMatrix
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\vmath.h
;	COMDAT ?InitIdentity@Matrix@D3DFrame@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InitIdentity@Matrix@D3DFrame@@QAEXXZ PROC		; D3DFrame::Matrix::InitIdentity, COMDAT
; _this$ = ecx

; 369  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 370  : 		m[0][0] = m[1][1] = m[2][2] = m[3][3] = 1.0f;

	mov	eax, 16					; 00000010H
	imul	eax, 3
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	imul	ecx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _this$[ebp]
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+eax], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+ecx], xmm0

; 371  : 		m[0][1] = m[0][2] = m[0][3] = m[3][0] = 0.0f;

	mov	edx, 16					; 00000010H
	imul	edx, 3
	add	edx, DWORD PTR _this$[ebp]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+eax], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	imul	edx, 3
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	imul	edx, 0
	add	edx, DWORD PTR _this$[ebp]
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+eax], xmm0

; 372  : 		m[1][0] = m[1][2] = m[1][3] = m[3][1] = 0.0f;

	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	imul	ecx, 3
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _this$[ebp]
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+eax], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0

; 373  : 		m[2][0] = m[2][1] = m[2][3] = m[3][2] = 0.0f;    

	mov	eax, 16					; 00000010H
	imul	eax, 3
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _this$[ebp]
	mov	eax, 4
	imul	eax, 3
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+eax], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+ecx], xmm0

; 374  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?InitIdentity@Matrix@D3DFrame@@QAEXXZ ENDP		; D3DFrame::Matrix::InitIdentity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\vmath.h
;	COMDAT ??4Matrix@D3DFrame@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_mx$ = 8						; size = 4
??4Matrix@D3DFrame@@QAEAAV01@ABV01@@Z PROC		; D3DFrame::Matrix::operator=, COMDAT
; _this$ = ecx

; 359  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 360  : 		memcpy(m, mx.m, sizeof(m));

	push	64					; 00000040H
	mov	eax, DWORD PTR _mx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 361  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 362  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??4Matrix@D3DFrame@@QAEAAV01@ABV01@@Z ENDP		; D3DFrame::Matrix::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\vmath.h
;	COMDAT ??0Vector@D3DFrame@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vector@D3DFrame@@QAE@XZ PROC				; D3DFrame::Vector::Vector, COMDAT
; _this$ = ecx

; 49   : 	Vector()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 50   : 	{
; 51   : 		x = y = z = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+4], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx], xmm0

; 52   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector@D3DFrame@@QAE@XZ ENDP				; D3DFrame::Vector::Vector
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\vmath.h
;	COMDAT ??DD3DFrame@@YA?AVMatrix@0@ABV10@0@Z
_TEXT	SEGMENT
_k$1 = -80						; size = 4
_i$2 = -76						; size = 4
_j$3 = -72						; size = 4
_ret$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
??DD3DFrame@@YA?AVMatrix@0@ABV10@0@Z PROC		; D3DFrame::operator*, COMDAT

; 986  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi

; 987  :     Matrix ret;
; 988  : 
; 989  :     for (int i=0; i<4; i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN9@operator
$LN8@operator:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN9@operator:
	cmp	DWORD PTR _i$2[ebp], 4
	jge	$LN7@operator

; 990  : 	{
; 991  :         for (int j=0; j<4; j++)

	mov	DWORD PTR _j$3[ebp], 0
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	ecx, DWORD PTR _j$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$3[ebp], ecx
$LN6@operator:
	cmp	DWORD PTR _j$3[ebp], 4
	jge	SHORT $LN4@operator

; 992  : 		{
; 993  :             ret.m[i][j] = 0.0f;

	mov	edx, DWORD PTR _i$2[ebp]
	shl	edx, 4
	lea	eax, DWORD PTR _ret$[ebp+edx]
	mov	ecx, DWORD PTR _j$3[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+ecx*4], xmm0

; 994  :             for (int k=0; k<4; k++)

	mov	DWORD PTR _k$1[ebp], 0
	jmp	SHORT $LN3@operator
$LN2@operator:
	mov	edx, DWORD PTR _k$1[ebp]
	add	edx, 1
	mov	DWORD PTR _k$1[ebp], edx
$LN3@operator:
	cmp	DWORD PTR _k$1[ebp], 4
	jge	SHORT $LN1@operator

; 995  :                 ret.m[i][j] += a.m[i][k] * b.m[k][j];

	mov	eax, DWORD PTR _i$2[ebp]
	shl	eax, 4
	lea	ecx, DWORD PTR _ret$[ebp+eax]
	mov	edx, DWORD PTR _i$2[ebp]
	shl	edx, 4
	add	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _k$1[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _b$[ebp]
	mov	esi, DWORD PTR _k$1[ebp]
	mov	edi, DWORD PTR _j$3[ebp]
	movss	xmm0, DWORD PTR [edx+esi*4]
	mulss	xmm0, DWORD PTR [eax+edi*4]
	mov	edx, DWORD PTR _j$3[ebp]
	addss	xmm0, DWORD PTR [ecx+edx*4]
	mov	eax, DWORD PTR _i$2[ebp]
	shl	eax, 4
	lea	ecx, DWORD PTR _ret$[ebp+eax]
	mov	edx, DWORD PTR _j$3[ebp]
	movss	DWORD PTR [ecx+edx*4], xmm0
	jmp	SHORT $LN2@operator
$LN1@operator:

; 996  :         }

	jmp	$LN5@operator
$LN4@operator:

; 997  :     }

	jmp	$LN8@operator
$LN7@operator:

; 998  : 
; 999  :     return ret;

	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _ret$[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1000 : }

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
??DD3DFrame@@YA?AVMatrix@0@ABV10@0@Z ENDP		; D3DFrame::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\objectinstance.h
;	COMDAT ?Radius@ObjectInstance@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Radius@ObjectInstance@@QBEMXZ PROC			; ObjectInstance::Radius, COMDAT
; _this$ = ecx

; 25   : 	float	Radius(void)	const	{ return ParentObject->radius; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	fld	DWORD PTR [ecx]
	mov	esp, ebp
	pop	ebp
	ret	0
?Radius@ObjectInstance@@QBEMXZ ENDP			; ObjectInstance::Radius
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\objectlod.h
;	COMDAT ?Draw@ObjectLOD@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Draw@ObjectLOD@@QBEXXZ PROC				; ObjectLOD::Draw, COMDAT
; _this$ = ecx

; 30   : 	void				Draw(void) const		{ ShiAssert( root ); root->Draw(); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	mov	esp, ebp
	pop	ebp
	ret	0
?Draw@ObjectLOD@@QBEXXZ ENDP				; ObjectLOD::Draw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\dxsdk\include\d3dxmath.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 199  :     D3DXMATRIX() {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 537  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 511  :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?asin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?asin@@YAMM@Z PROC					; asin, COMDAT

; 503  :         {return (asinf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_asinf
	add	esp, 4
	pop	ebp
	ret	0
?asin@@YAMM@Z ENDP					; asin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 430  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _asinf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_asinf	PROC						; COMDAT

; 402  :         {return ((float)asin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_asin
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_asinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.0\include\um\d3dtypes.h
;	COMDAT ??0_D3DVECTOR@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_D3DVECTOR@@QAE@XZ PROC				; _D3DVECTOR::_D3DVECTOR, COMDAT
; _this$ = ecx

; 234  :     _D3DVECTOR() { }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_D3DVECTOR@@QAE@XZ ENDP				; _D3DVECTOR::_D3DVECTOR
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z PROC	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ENDP	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ PROC	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CComBSTR@ATL@@QAE@XZ			; ATL::CComBSTR::~CComBSTR
	mov	esp, ebp
	pop	ebp
	ret	0
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ ENDP	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\atlmfc\include\atlcomcli.h
;	COMDAT ??1CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CComBSTR@ATL@@QAE@XZ PROC				; ATL::CComBSTR::~CComBSTR, COMDAT
; _this$ = ecx

; 1656 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1657 :     ::SysFreeString(m_str);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__SysFreeString@4

; 1658 : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1CComBSTR@ATL@@QAE@XZ ENDP				; ATL::CComBSTR::~CComBSTR
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Where$[ebp]
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
