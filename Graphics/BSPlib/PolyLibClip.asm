; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\Graphics\BSPlib\PolyLibClip.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?VT@?$CVarTypeInfo@_J@ATL@@2GB			; ATL::CVarTypeInfo<__int64>::VT
PUBLIC	?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ ; ATL::CVarTypeInfo<__int64>::pmField
PUBLIC	___pobjMapEntryFirst
PUBLIC	___pobjMapEntryLast
PUBLIC	?VT@?$CVarTypeInfo@PA_J@ATL@@2GB		; ATL::CVarTypeInfo<__int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ ; ATL::CVarTypeInfo<__int64 *>::pmField
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?VT@?$CVarTypeInfo@_K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned __int64>::VT
PUBLIC	??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@	; `string'
PUBLIC	?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64>::pmField
PUBLIC	??_C@_08PICKODJL@FileType?$AA@			; `string'
PUBLIC	??_C@_09JKPGEJCH@Interface?$AA@			; `string'
PUBLIC	??_C@_08PPIOJEA@Hardware?$AA@			; `string'
PUBLIC	?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA	; ATL::_pPerfRegFunc
PUBLIC	??_C@_04IHBFOLAC@Mime?$AA@			; `string'
PUBLIC	?_pPerfUnRegFunc@ATL@@3P6AJXZA			; ATL::_pPerfUnRegFunc
PUBLIC	??_C@_03DDIMFGBA@SAM?$AA@			; `string'
PUBLIC	?_AtlRegisterPerUser@ATL@@3_NA			; ATL::_AtlRegisterPerUser
PUBLIC	??_C@_08LOPHEHKG@SECURITY?$AA@			; `string'
PUBLIC	??_C@_06FDHFNJBJ@SYSTEM?$AA@			; `string'
PUBLIC	??_C@_08KEKAJNJI@Software?$AA@			; `string'
PUBLIC	??_C@_07KJLOKDKB@TypeLib?$AA@			; `string'
PUBLIC	?VT@?$CVarTypeInfo@PA_K@ATL@@2GB		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
PUBLIC	__GUID_00000000_0000_0000_c000_000000000046
PUBLIC	?VT@?$CVarTypeInfo@M@ATL@@2GB			; ATL::CVarTypeInfo<float>::VT
PUBLIC	?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ ; ATL::CVarTypeInfo<float>::pmField
PUBLIC	__GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
PUBLIC	?VT@?$CVarTypeInfo@PAM@ATL@@2GB			; ATL::CVarTypeInfo<float *>::VT
PUBLIC	__GUID_00020400_0000_0000_c000_000000000046
PUBLIC	?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ ; ATL::CVarTypeInfo<float *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@N@ATL@@2GB			; ATL::CVarTypeInfo<double>::VT
PUBLIC	?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ ; ATL::CVarTypeInfo<double>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAN@ATL@@2GB			; ATL::CVarTypeInfo<double *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ ; ATL::CVarTypeInfo<double *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB	; ATL::CVarTypeInfo<tagVARIANT *>::VT
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	__GUID_0002e012_0000_0000_c000_000000000046
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?VT@?$CVarTypeInfo@PA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ ; ATL::CVarTypeInfo<wchar_t *>::pmField
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t * *>::VT
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ ; ATL::CVarTypeInfo<wchar_t * *>::pmField
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown *>::VT
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown *>::pmField
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown * *>::pmField
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	__GUID_0000010c_0000_0000_c000_000000000046
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch *>::VT
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch *>::pmField
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	??_C@_05GIBEAPNE@CLSID?$AA@			; `string'
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	_IID_IAxWinHostWindow
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch * *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY>::VT
PUBLIC	?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY>::pmField
PUBLIC	??_C@_05PDIKPLII@AppID?$AA@			; `string'
PUBLIC	?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY *>::VT
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY *>::pmField
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?chDirSep@ATL@@3DB				; ATL::chDirSep
PUBLIC	?chRightBracket@ATL@@3DB			; ATL::chRightBracket
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?chLeftBracket@ATL@@3DB				; ATL::chLeftBracket
PUBLIC	?chQuote@ATL@@3DB				; ATL::chQuote
PUBLIC	?chEquals@ATL@@3DB				; ATL::chEquals
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?szStringVal@ATL@@3QBDB				; ATL::szStringVal
PUBLIC	??_C@_01CPLAODJH@S?$AA@				; `string'
PUBLIC	?multiszStringVal@ATL@@3QBDB			; ATL::multiszStringVal
PUBLIC	_IID_IAxWinHostWindowLic
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	??_C@_01PLPBNMEI@M?$AA@				; `string'
PUBLIC	?szDwordVal@ATL@@3QBDB				; ATL::szDwordVal
PUBLIC	??_C@_01CKDDGHAB@D?$AA@				; `string'
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?szBinaryVal@ATL@@3QBDB				; ATL::szBinaryVal
PUBLIC	??_C@_01HMGJMAIH@B?$AA@				; `string'
PUBLIC	?szValToken@ATL@@3QBDB				; ATL::szValToken
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	??_C@_03LAIAPFCB@Val?$AA@			; `string'
PUBLIC	?szForceRemove@ATL@@3QBDB			; ATL::szForceRemove
PUBLIC	??_C@_0M@DBGDLGLL@ForceRemove?$AA@		; `string'
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?szNoRemove@ATL@@3QBDB				; ATL::szNoRemove
PUBLIC	??_C@_08KAAPDIAN@NoRemove?$AA@			; `string'
PUBLIC	?szDelete@ATL@@3QBDB				; ATL::szDelete
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	??_C@_06JBKGCNBB@Delete?$AA@			; `string'
PUBLIC	?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA	; ATL::CComApartment::ATL_CREATE_OBJECT
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	_IID_IAxWinAmbientDispatch
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A ; ATL::_pAtlAutoThreadModule
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?m_bInitFailed@CAtlBaseModule@ATL@@2_NA		; ATL::CAtlBaseModule::m_bInitFailed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	__GUID_00000000_0000_0000_0000_000000000000
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?MAX_VALUE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_VALUE
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?rgszNeverDelete@CRegParser@ATL@@1QBQBDB	; ATL::CRegParser::rgszNeverDelete
PUBLIC	?cbNeverDelete@CRegParser@ATL@@1HB		; ATL::CRegParser::cbNeverDelete
PUBLIC	?MAX_TYPE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_TYPE
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	_IID_IAxWinAmbientDispatchEx
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	_IID_IInternalConnection
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	__GUID_1cf2b120_547d_101b_8e65_08002b2bd119
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?_pAtlModule@ATL@@3PAVCAtlModule@1@A		; ATL::_pAtlModule
PUBLIC	?m_libid@CAtlModule@ATL@@2U_GUID@@A		; ATL::CAtlModule::m_libid
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	__GUID_00000146_0000_0000_c000_000000000046
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?VT@?$CVarTypeInfo@D@ATL@@2GB			; ATL::CVarTypeInfo<char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ ; ATL::CVarTypeInfo<char>::pmField
PUBLIC	?VT@?$CVarTypeInfo@E@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ ; ATL::CVarTypeInfo<unsigned char>::pmField
PUBLIC	_CLSID_Registrar
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?_Min@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Min
PUBLIC	?VT@?$CVarTypeInfo@PAD@ATL@@2GB			; ATL::CVarTypeInfo<char *>::VT
PUBLIC	?_Max@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Max
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ ; ATL::CVarTypeInfo<char *>::pmField
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?_Min@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Min
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?_Max@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Max
PUBLIC	?VT@?$CVarTypeInfo@PAE@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char *>::VT
PUBLIC	__GUID_00000109_0000_0000_c000_000000000046
PUBLIC	?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ ; ATL::CVarTypeInfo<unsigned char *>::pmField
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?_Min@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Min
PUBLIC	__GUID_b196b284_bab4_101a_b69c_00aa00341d07
PUBLIC	?_Max@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Max
PUBLIC	?VT@?$CVarTypeInfo@F@ATL@@2GB			; ATL::CVarTypeInfo<short>::VT
PUBLIC	_IID_IRegistrar
PUBLIC	?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ ; ATL::CVarTypeInfo<short>::pmField
PUBLIC	?_Min@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Min
PUBLIC	?_Max@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Max
PUBLIC	?VT@?$CVarTypeInfo@PAF@ATL@@2GB			; ATL::CVarTypeInfo<short *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ ; ATL::CVarTypeInfo<short *>::pmField
PUBLIC	?_Min@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Min
PUBLIC	__GUID_00000001_0000_0000_c000_000000000046
PUBLIC	?_Max@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Max
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?VT@?$CVarTypeInfo@G@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short>::VT
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ ; ATL::CVarTypeInfo<unsigned short>::pmField
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	__GUID_00020401_0000_0000_c000_000000000046
PUBLIC	?_Min@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Min
PUBLIC	_LIBID_ATLLib
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?_Max@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Max
PUBLIC	__GUID_00020412_0000_0000_c000_000000000046
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?VT@?$CVarTypeInfo@PAG@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short *>::VT
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ ; ATL::CVarTypeInfo<unsigned short *>::pmField
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?VT@?$CVarTypeInfo@H@ATL@@2GB			; ATL::CVarTypeInfo<int>::VT
PUBLIC	?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ ; ATL::CVarTypeInfo<int>::pmField
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?VT@?$CVarTypeInfo@PAH@ATL@@2GB			; ATL::CVarTypeInfo<int *>::VT
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ ; ATL::CVarTypeInfo<int *>::pmField
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?VT@?$CVarTypeInfo@I@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int>::VT
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ ; ATL::CVarTypeInfo<unsigned int>::pmField
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?VT@?$CVarTypeInfo@PAI@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ ; ATL::CVarTypeInfo<unsigned int *>::pmField
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?VT@?$CVarTypeInfo@J@ATL@@2GB			; ATL::CVarTypeInfo<long>::VT
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ ; ATL::CVarTypeInfo<long>::pmField
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?_pModule@ATL@@3PAVCComModule@1@A		; ATL::_pModule
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?VT@?$CVarTypeInfo@PAJ@ATL@@2GB			; ATL::CVarTypeInfo<long *>::VT
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ ; ATL::CVarTypeInfo<long *>::pmField
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	_IID_IDocHostUIHandlerDispatch
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?VT@?$CVarTypeInfo@K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long>::VT
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ ; ATL::CVarTypeInfo<unsigned long>::pmField
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?VT@?$CVarTypeInfo@PAK@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long *>::VT
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ ; ATL::CVarTypeInfo<unsigned long *>::pmField
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA
_BSS	SEGMENT
?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA DD 01H DUP (?) ; ATL::_pPerfRegFunc
_BSS	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZA
_BSS	SEGMENT
?_pPerfUnRegFunc@ATL@@3P6AJXZA DD 01H DUP (?)		; ATL::_pPerfUnRegFunc
_BSS	ENDS
;	COMDAT ?_AtlRegisterPerUser@ATL@@3_NA
_BSS	SEGMENT
?_AtlRegisterPerUser@ATL@@3_NA DB 01H DUP (?)		; ATL::_AtlRegisterPerUser
_BSS	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_BSS	SEGMENT
?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA DD 01H DUP (?) ; ATL::CComApartment::ATL_CREATE_OBJECT
_BSS	ENDS
;	COMDAT ?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A
_BSS	SEGMENT
?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A DD 01H DUP (?) ; ATL::_pAtlAutoThreadModule
_BSS	ENDS
;	COMDAT ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA
_BSS	SEGMENT
?m_bInitFailed@CAtlBaseModule@ATL@@2_NA DB 01H DUP (?)	; ATL::CAtlBaseModule::m_bInitFailed
_BSS	ENDS
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_BSS	SEGMENT
?_pAtlModule@ATL@@3PAVCAtlModule@1@A DD 01H DUP (?)	; ATL::_pAtlModule
_BSS	ENDS
;	COMDAT ?m_libid@CAtlModule@ATL@@2U_GUID@@A
_BSS	SEGMENT
?m_libid@CAtlModule@ATL@@2U_GUID@@A DB 010H DUP (?)	; ATL::CAtlModule::m_libid
_BSS	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_BSS	SEGMENT
?_pModule@ATL@@3PAVCComModule@1@A DD 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long *>::pmField
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAK@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAK@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned long *>::VT
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long>::pmField
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@K@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned long>::VT
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
_IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ DD 08H ; ATL::CVarTypeInfo<long *>::pmField
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAJ@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAJ@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<long *>::VT
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ DD 08H ; ATL::CVarTypeInfo<long>::pmField
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@J@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<long>::VT
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAI@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAI@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned int *>::VT
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int>::pmField
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@I@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@I@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned int>::VT
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ DD 08H ; ATL::CVarTypeInfo<int *>::pmField
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAH@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAH@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<int *>::VT
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ DD 08H ; ATL::CVarTypeInfo<int>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@H@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@H@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<int>::VT
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short *>::pmField
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAG@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAG@ATL@@2GB DW 04012H		; ATL::CVarTypeInfo<unsigned short *>::VT
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT __GUID_00020412_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020412_0000_0000_c000_000000000046 DD 020412H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Max@?$AtlLimits@_K@ATL@@2_KB DQ ffffffffffffffffH	; ATL::AtlLimits<unsigned __int64>::_Max
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT
_LIBID_ATLLib DD 044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Min@?$AtlLimits@_K@ATL@@2_KB DQ 0000000000000000H	; ATL::AtlLimits<unsigned __int64>::_Min
CONST	ENDS
;	COMDAT __GUID_00020401_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020401_0000_0000_c000_000000000046 DD 020401H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short>::pmField
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@G@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@G@ATL@@2GB DW 012H			; ATL::CVarTypeInfo<unsigned short>::VT
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Max@?$AtlLimits@_J@ATL@@2_JB DQ 7fffffffffffffffH	; ATL::AtlLimits<__int64>::_Max
CONST	ENDS
;	COMDAT __GUID_00000001_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000001_0000_0000_c000_000000000046 DD 01H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Min@?$AtlLimits@_J@ATL@@2_JB DQ 8000000000000000H	; ATL::AtlLimits<__int64>::_Min
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ DD 08H ; ATL::CVarTypeInfo<short *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAF@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAF@ATL@@2GB DW 04002H		; ATL::CVarTypeInfo<short *>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Max@?$AtlLimits@K@ATL@@2KB DD 0ffffffffH		; ATL::AtlLimits<unsigned long>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Min@?$AtlLimits@K@ATL@@2KB DD 00H			; ATL::AtlLimits<unsigned long>::_Min
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ DD 08H ; ATL::CVarTypeInfo<short>::pmField
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT
_IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@F@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@F@ATL@@2GB DW 02H			; ATL::CVarTypeInfo<short>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Max@?$AtlLimits@J@ATL@@2JB DD 07fffffffH		; ATL::AtlLimits<long>::_Max
CONST	ENDS
;	COMDAT __GUID_b196b284_bab4_101a_b69c_00aa00341d07
CONST	SEGMENT
__GUID_b196b284_bab4_101a_b69c_00aa00341d07 DD 0b196b284H
	DW	0bab4H
	DW	0101aH
	DB	0b6H
	DB	09cH
	DB	00H
	DB	0aaH
	DB	00H
	DB	034H
	DB	01dH
	DB	07H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Min@?$AtlLimits@J@ATL@@2JB DD 080000000H		; ATL::AtlLimits<long>::_Min
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT __GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
CONST	SEGMENT
__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713 DD 07fd52380H
	DW	04e07H
	DW	0101bH
	DB	0aeH
	DB	02dH
	DB	08H
	DB	00H
	DB	02bH
	DB	02eH
	DB	0c7H
	DB	013H
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char *>::pmField
CONST	ENDS
;	COMDAT __GUID_00000109_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000109_0000_0000_c000_000000000046 DD 0109H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAE@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAE@ATL@@2GB DW 04011H		; ATL::CVarTypeInfo<unsigned char *>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Max@?$AtlLimits@I@ATL@@2IB DD 0ffffffffH		; ATL::AtlLimits<unsigned int>::_Max
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Min@?$AtlLimits@I@ATL@@2IB DD 00H			; ATL::AtlLimits<unsigned int>::_Min
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ DD 08H ; ATL::CVarTypeInfo<char *>::pmField
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Max@?$AtlLimits@H@ATL@@2HB DD 07fffffffH		; ATL::AtlLimits<int>::_Max
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAD@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAD@ATL@@2GB DW 04010H		; ATL::CVarTypeInfo<char *>::VT
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Min@?$AtlLimits@H@ATL@@2HB DD 080000000H		; ATL::AtlLimits<int>::_Min
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT
_CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@E@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@E@ATL@@2GB DW 011H			; ATL::CVarTypeInfo<unsigned char>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ DD 08H ; ATL::CVarTypeInfo<char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@D@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@D@ATL@@2GB DW 010H			; ATL::CVarTypeInfo<char>::VT
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT __GUID_00000146_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000146_0000_0000_c000_000000000046 DD 0146H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT __GUID_1cf2b120_547d_101b_8e65_08002b2bd119
CONST	SEGMENT
__GUID_1cf2b120_547d_101b_8e65_08002b2bd119 DD 01cf2b120H
	DW	0547dH
	DW	0101bH
	DB	08eH
	DB	065H
	DB	08H
	DB	00H
	DB	02bH
	DB	02bH
	DB	0d1H
	DB	019H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT
_IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatchEx
CONST	SEGMENT
_IID_IAxWinAmbientDispatchEx DD 0b2d0778bH
	DW	0ac99H
	DW	04c58H
	DB	0a5H
	DB	0c8H
	DB	0e7H
	DB	072H
	DB	04eH
	DB	053H
	DB	016H
	DB	0b5H
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT __GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
CONST	SEGMENT
__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352 DD 0fc4801a3H
	DW	02ba9H
	DW	011cfH
	DB	0a2H
	DB	029H
	DB	00H
	DB	0aaH
	DB	00H
	DB	03dH
	DB	073H
	DB	052H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?MAX_TYPE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_TYPE@CRegParser@ATL@@1HB DD 01000H			; ATL::CRegParser::MAX_TYPE
CONST	ENDS
;	COMDAT ?cbNeverDelete@CRegParser@ATL@@1HB
CONST	SEGMENT
?cbNeverDelete@CRegParser@ATL@@1HB DD 0cH		; ATL::CRegParser::cbNeverDelete
CONST	ENDS
;	COMDAT ?rgszNeverDelete@CRegParser@ATL@@1QBQBDB
CONST	SEGMENT
?rgszNeverDelete@CRegParser@ATL@@1QBQBDB DD FLAT:??_C@_05PDIKPLII@AppID?$AA@ ; ATL::CRegParser::rgszNeverDelete
	DD	FLAT:??_C@_05GIBEAPNE@CLSID?$AA@
	DD	FLAT:??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
	DD	FLAT:??_C@_08PICKODJL@FileType?$AA@
	DD	FLAT:??_C@_09JKPGEJCH@Interface?$AA@
	DD	FLAT:??_C@_08PPIOJEA@Hardware?$AA@
	DD	FLAT:??_C@_04IHBFOLAC@Mime?$AA@
	DD	FLAT:??_C@_03DDIMFGBA@SAM?$AA@
	DD	FLAT:??_C@_08LOPHEHKG@SECURITY?$AA@
	DD	FLAT:??_C@_06FDHFNJBJ@SYSTEM?$AA@
	DD	FLAT:??_C@_08KEKAJNJI@Software?$AA@
	DD	FLAT:??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?MAX_VALUE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_VALUE@CRegParser@ATL@@1HB DD 01000H		; ATL::CRegParser::MAX_VALUE
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
CONST	SEGMENT
__GUID_00000000_0000_0000_0000_000000000000 DD 00H
	DW	00H
	DW	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT
_IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ??_C@_06JBKGCNBB@Delete?$AA@
CONST	SEGMENT
??_C@_06JBKGCNBB@Delete?$AA@ DB 'Delete', 00H		; `string'
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?szDelete@ATL@@3QBDB
CONST	SEGMENT
?szDelete@ATL@@3QBDB DD FLAT:??_C@_06JBKGCNBB@Delete?$AA@ ; ATL::szDelete
CONST	ENDS
;	COMDAT ??_C@_08KAAPDIAN@NoRemove?$AA@
CONST	SEGMENT
??_C@_08KAAPDIAN@NoRemove?$AA@ DB 'NoRemove', 00H	; `string'
CONST	ENDS
;	COMDAT ?szNoRemove@ATL@@3QBDB
CONST	SEGMENT
?szNoRemove@ATL@@3QBDB DD FLAT:??_C@_08KAAPDIAN@NoRemove?$AA@ ; ATL::szNoRemove
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ??_C@_0M@DBGDLGLL@ForceRemove?$AA@
CONST	SEGMENT
??_C@_0M@DBGDLGLL@ForceRemove?$AA@ DB 'ForceRemove', 00H ; `string'
CONST	ENDS
;	COMDAT ?szForceRemove@ATL@@3QBDB
CONST	SEGMENT
?szForceRemove@ATL@@3QBDB DD FLAT:??_C@_0M@DBGDLGLL@ForceRemove?$AA@ ; ATL::szForceRemove
CONST	ENDS
;	COMDAT ??_C@_03LAIAPFCB@Val?$AA@
CONST	SEGMENT
??_C@_03LAIAPFCB@Val?$AA@ DB 'Val', 00H			; `string'
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?szValToken@ATL@@3QBDB
CONST	SEGMENT
?szValToken@ATL@@3QBDB DD FLAT:??_C@_03LAIAPFCB@Val?$AA@ ; ATL::szValToken
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B?$AA@
CONST	SEGMENT
??_C@_01HMGJMAIH@B?$AA@ DB 'B', 00H			; `string'
CONST	ENDS
;	COMDAT ?szBinaryVal@ATL@@3QBDB
CONST	SEGMENT
?szBinaryVal@ATL@@3QBDB DD FLAT:??_C@_01HMGJMAIH@B?$AA@	; ATL::szBinaryVal
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D?$AA@
CONST	SEGMENT
??_C@_01CKDDGHAB@D?$AA@ DB 'D', 00H			; `string'
CONST	ENDS
;	COMDAT ?szDwordVal@ATL@@3QBDB
CONST	SEGMENT
?szDwordVal@ATL@@3QBDB DD FLAT:??_C@_01CKDDGHAB@D?$AA@	; ATL::szDwordVal
CONST	ENDS
;	COMDAT ??_C@_01PLPBNMEI@M?$AA@
CONST	SEGMENT
??_C@_01PLPBNMEI@M?$AA@ DB 'M', 00H			; `string'
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindowLic
CONST	SEGMENT
_IID_IAxWinHostWindowLic DD 03935bda8H
	DW	04ed9H
	DW	0495cH
	DB	086H
	DB	050H
	DB	0e0H
	DB	01fH
	DB	0c1H
	DB	0e3H
	DB	08aH
	DB	04bH
CONST	ENDS
;	COMDAT ?multiszStringVal@ATL@@3QBDB
CONST	SEGMENT
?multiszStringVal@ATL@@3QBDB DD FLAT:??_C@_01PLPBNMEI@M?$AA@ ; ATL::multiszStringVal
CONST	ENDS
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT
??_C@_01CPLAODJH@S?$AA@ DB 'S', 00H			; `string'
CONST	ENDS
;	COMDAT ?szStringVal@ATL@@3QBDB
CONST	SEGMENT
?szStringVal@ATL@@3QBDB DD FLAT:??_C@_01CPLAODJH@S?$AA@	; ATL::szStringVal
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?chEquals@ATL@@3DB
CONST	SEGMENT
?chEquals@ATL@@3DB DB 03dH				; ATL::chEquals
CONST	ENDS
;	COMDAT ?chQuote@ATL@@3DB
CONST	SEGMENT
?chQuote@ATL@@3DB DB 027H				; ATL::chQuote
CONST	ENDS
;	COMDAT ?chLeftBracket@ATL@@3DB
CONST	SEGMENT
?chLeftBracket@ATL@@3DB DB 07bH				; ATL::chLeftBracket
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?chRightBracket@ATL@@3DB
CONST	SEGMENT
?chRightBracket@ATL@@3DB DB 07dH			; ATL::chRightBracket
CONST	ENDS
;	COMDAT ?chDirSep@ATL@@3DB
CONST	SEGMENT
?chDirSep@ATL@@3DB DB 05cH				; ATL::chDirSep
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY *>::pmField
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB DW 04006H	; ATL::CVarTypeInfo<tagCY *>::VT
CONST	ENDS
;	COMDAT ??_C@_05PDIKPLII@AppID?$AA@
CONST	SEGMENT
??_C@_05PDIKPLII@AppID?$AA@ DB 'AppID', 00H		; `string'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB DW 06H		; ATL::CVarTypeInfo<tagCY>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB DW 04009H	; ATL::CVarTypeInfo<IDispatch * *>::VT
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT
_IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ??_C@_05GIBEAPNE@CLSID?$AA@
CONST	SEGMENT
??_C@_05GIBEAPNE@CLSID?$AA@ DB 'CLSID', 00H		; `string'
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch *>::pmField
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB DW 09H	; ATL::CVarTypeInfo<IDispatch *>::VT
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT __GUID_0000010c_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_0000010c_0000_0000_c000_000000000046 DD 010cH
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB DW 0400dH	; ATL::CVarTypeInfo<IUnknown * *>::VT
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
_NEAR_CLIP_DISTANCE DD 03f800000r		; 1
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown *>::pmField
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB DW 0dH	; ATL::CVarTypeInfo<IUnknown *>::VT
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t * *>::pmField
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB DW 04008H		; ATL::CVarTypeInfo<wchar_t * *>::VT
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_W@ATL@@2GB DW 08H			; ATL::CVarTypeInfo<wchar_t *>::VT
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT __GUID_0002e012_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_0002e012_0000_0000_c000_000000000046 DD 02e012H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB DW 0400cH	; ATL::CVarTypeInfo<tagVARIANT *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ DD 08H ; ATL::CVarTypeInfo<double *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAN@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAN@ATL@@2GB DW 04005H		; ATL::CVarTypeInfo<double *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ DD 08H ; ATL::CVarTypeInfo<double>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@N@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@N@ATL@@2GB DW 05H			; ATL::CVarTypeInfo<double>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ DD 08H ; ATL::CVarTypeInfo<float *>::pmField
CONST	ENDS
;	COMDAT __GUID_00020400_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020400_0000_0000_c000_000000000046 DD 020400H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAM@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAM@ATL@@2GB DW 04004H		; ATL::CVarTypeInfo<float *>::VT
CONST	ENDS
;	COMDAT __GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
CONST	SEGMENT
__GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851 DD 0a6bc3ac0H
	DW	0dbaaH
	DW	011ceH
	DB	09dH
	DB	0e3H
	DB	00H
	DB	0aaH
	DB	00H
	DB	04bH
	DB	0b8H
	DB	051H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ DD 08H ; ATL::CVarTypeInfo<float>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@M@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@M@ATL@@2GB DW 04H			; ATL::CVarTypeInfo<float>::VT
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000000_0000_0000_c000_000000000046 DD 00H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_K@ATL@@2GB DW 04015H		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
CONST	ENDS
;	COMDAT ??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	SEGMENT
??_C@_07KJLOKDKB@TypeLib?$AA@ DB 'TypeLib', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KEKAJNJI@Software?$AA@
CONST	SEGMENT
??_C@_08KEKAJNJI@Software?$AA@ DB 'Software', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDHFNJBJ@SYSTEM?$AA@
CONST	SEGMENT
??_C@_06FDHFNJBJ@SYSTEM?$AA@ DB 'SYSTEM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LOPHEHKG@SECURITY?$AA@
CONST	SEGMENT
??_C@_08LOPHEHKG@SECURITY?$AA@ DB 'SECURITY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03DDIMFGBA@SAM?$AA@
CONST	SEGMENT
??_C@_03DDIMFGBA@SAM?$AA@ DB 'SAM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IHBFOLAC@Mime?$AA@
CONST	SEGMENT
??_C@_04IHBFOLAC@Mime?$AA@ DB 'Mime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPIOJEA@Hardware?$AA@
CONST	SEGMENT
??_C@_08PPIOJEA@Hardware?$AA@ DB 'Hardware', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JKPGEJCH@Interface?$AA@
CONST	SEGMENT
??_C@_09JKPGEJCH@Interface?$AA@ DB 'Interface', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PICKODJL@FileType?$AA@
CONST	SEGMENT
??_C@_08PICKODJL@FileType?$AA@ DB 'FileType', 00H	; `string'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64>::pmField
CONST	ENDS
;	COMDAT ??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
CONST	SEGMENT
??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@ DB 'Component Categories', 00H ; `string'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_K@ATL@@2GB DW 015H			; ATL::CVarTypeInfo<unsigned __int64>::VT
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_J@ATL@@2GB DW 04014H		; ATL::CVarTypeInfo<__int64 *>::VT
CONST	ENDS
;	COMDAT ___pobjMapEntryLast
ATL$__z	SEGMENT
___pobjMapEntryLast DD 00H
ATL$__z	ENDS
;	COMDAT ___pobjMapEntryFirst
ATL$__a	SEGMENT
___pobjMapEntryFirst DD 00H
ATL$__a	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_J@ATL@@2GB DW 014H			; ATL::CVarTypeInfo<__int64>::VT
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??1CComBSTR@ATL@@QAE@XZ				; ATL::CComBSTR::~CComBSTR
PUBLIC	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
PUBLIC	??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
PUBLIC	_fabsf
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?ClipPrimPoint@@YAXPAUPrimPointFC@@K@Z		; ClipPrimPoint
PUBLIC	?ClipPrimLine@@YAXPAUPrimLineFC@@K@Z		; ClipPrimLine
PUBLIC	?ClipPoly@@YAXPAUPolyFC@@K@Z			; ClipPoly
PUBLIC	?ClipPolyL@@YAXPAUPolyFCN@@K@Z			; ClipPolyL
PUBLIC	?ClipPolyG@@YAXPAUPolyVC@@K@Z			; ClipPolyG
PUBLIC	?ClipPolyGL@@YAXPAUPolyVCN@@K@Z			; ClipPolyGL
PUBLIC	?ClipPolyT@@YAXPAUPolyTexFC@@K@Z		; ClipPolyT
PUBLIC	?ClipPolyTL@@YAXPAUPolyTexFCN@@K@Z		; ClipPolyTL
PUBLIC	?ClipPolyTG@@YAXPAUPolyTexVC@@K@Z		; ClipPolyTG
PUBLIC	?ClipPolyTGL@@YAXPAUPolyTexVCN@@K@Z		; ClipPolyTGL
PUBLIC	?ClipPrimFPoint@@YAXPAUPrimPointFC@@K@Z		; ClipPrimFPoint
PUBLIC	?ClipPrimFLine@@YAXPAUPrimLineFC@@K@Z		; ClipPrimFLine
PUBLIC	?ClipPolyF@@YAXPAUPolyFC@@K@Z			; ClipPolyF
PUBLIC	?ClipPolyFL@@YAXPAUPolyFCN@@K@Z			; ClipPolyFL
PUBLIC	?ClipPolyFG@@YAXPAUPolyVC@@K@Z			; ClipPolyFG
PUBLIC	?ClipPolyFGL@@YAXPAUPolyVCN@@K@Z		; ClipPolyFGL
PUBLIC	?ClipPolyFT@@YAXPAUPolyTexFC@@K@Z		; ClipPolyFT
PUBLIC	?ClipPolyFTL@@YAXPAUPolyTexFCN@@K@Z		; ClipPolyFTL
PUBLIC	?ClipPolyFTG@@YAXPAUPolyTexVC@@K@Z		; ClipPolyFTG
PUBLIC	?ClipPolyFTGL@@YAXPAUPolyTexVCN@@K@Z		; ClipPolyFTGL
PUBLIC	?ClipPolyAT@@YAXPAUPolyTexFC@@K@Z		; ClipPolyAT
PUBLIC	?ClipPolyATL@@YAXPAUPolyTexFCN@@K@Z		; ClipPolyATL
PUBLIC	?ClipPolyATG@@YAXPAUPolyTexVC@@K@Z		; ClipPolyATG
PUBLIC	?ClipPolyATGL@@YAXPAUPolyTexVCN@@K@Z		; ClipPolyATGL
PUBLIC	?ClipPolyFAT@@YAXPAUPolyTexFC@@K@Z		; ClipPolyFAT
PUBLIC	?ClipPolyFATL@@YAXPAUPolyTexFCN@@K@Z		; ClipPolyFATL
PUBLIC	?ClipPolyFATG@@YAXPAUPolyTexVC@@K@Z		; ClipPolyFATG
PUBLIC	?ClipPolyFATGL@@YAXPAUPolyTexVCN@@K@Z		; ClipPolyFATGL
PUBLIC	?XtoPixel@StateStackClass@@SAMM@Z		; StateStackClass::XtoPixel
PUBLIC	?YtoPixel@StateStackClass@@SAMM@Z		; StateStackClass::YtoPixel
PUBLIC	?pvtClipPoly@@YAHKPAH000PAUPtexcoord@@@Z	; pvtClipPoly
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3f800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	__imp__SysFreeString@4:PROC
EXTRN	_fabs:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?DrawPrimPoint@@YAXPAUPrimPointFC@@@Z:PROC	; DrawPrimPoint
EXTRN	?DrawPrimLine@@YAXPAUPrimLineFC@@@Z:PROC	; DrawPrimLine
EXTRN	?DrawPoly@@YAXPAUPolyFC@@@Z:PROC		; DrawPoly
EXTRN	?DrawPolyL@@YAXPAUPolyFCN@@@Z:PROC		; DrawPolyL
EXTRN	?DrawPolyG@@YAXPAUPolyVC@@@Z:PROC		; DrawPolyG
EXTRN	?DrawPolyGL@@YAXPAUPolyVCN@@@Z:PROC		; DrawPolyGL
EXTRN	?DrawPolyT@@YAXPAUPolyTexFC@@@Z:PROC		; DrawPolyT
EXTRN	?DrawPolyTL@@YAXPAUPolyTexFCN@@@Z:PROC		; DrawPolyTL
EXTRN	?DrawPolyTG@@YAXPAUPolyTexVC@@@Z:PROC		; DrawPolyTG
EXTRN	?DrawPolyTGL@@YAXPAUPolyTexVCN@@@Z:PROC		; DrawPolyTGL
EXTRN	?DrawPrimFPoint@@YAXPAUPrimPointFC@@@Z:PROC	; DrawPrimFPoint
EXTRN	?DrawPrimFLine@@YAXPAUPrimLineFC@@@Z:PROC	; DrawPrimFLine
EXTRN	?DrawPolyF@@YAXPAUPolyFC@@@Z:PROC		; DrawPolyF
EXTRN	?DrawPolyFL@@YAXPAUPolyFCN@@@Z:PROC		; DrawPolyFL
EXTRN	?DrawPolyFG@@YAXPAUPolyVC@@@Z:PROC		; DrawPolyFG
EXTRN	?DrawPolyFGL@@YAXPAUPolyVCN@@@Z:PROC		; DrawPolyFGL
EXTRN	?DrawPolyFT@@YAXPAUPolyTexFC@@@Z:PROC		; DrawPolyFT
EXTRN	?DrawPolyFTL@@YAXPAUPolyTexFCN@@@Z:PROC		; DrawPolyFTL
EXTRN	?DrawPolyFTG@@YAXPAUPolyTexVC@@@Z:PROC		; DrawPolyFTG
EXTRN	?DrawPolyFTGL@@YAXPAUPolyTexVCN@@@Z:PROC	; DrawPolyFTGL
EXTRN	?DrawPolyAT@@YAXPAUPolyTexFC@@@Z:PROC		; DrawPolyAT
EXTRN	?DrawPolyATL@@YAXPAUPolyTexFCN@@@Z:PROC		; DrawPolyATL
EXTRN	?DrawPolyATG@@YAXPAUPolyTexVC@@@Z:PROC		; DrawPolyATG
EXTRN	?DrawPolyATGL@@YAXPAUPolyTexVCN@@@Z:PROC	; DrawPolyATGL
EXTRN	?DrawPolyFAT@@YAXPAUPolyTexFC@@@Z:PROC		; DrawPolyFAT
EXTRN	?DrawPolyFATL@@YAXPAUPolyTexFCN@@@Z:PROC	; DrawPolyFATL
EXTRN	?DrawPolyFATG@@YAXPAUPolyTexVC@@@Z:PROC		; DrawPolyFATG
EXTRN	?DrawPolyFATGL@@YAXPAUPolyTexVCN@@@Z:PROC	; DrawPolyFATGL
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ColorPool@ColorBankClass@@2PAUPcolor@@A:DWORD	; ColorBankClass::ColorPool
EXTRN	?nColors@ColorBankClass@@2HA:DWORD		; ColorBankClass::nColors
EXTRN	?XformedPosPool@StateStackClass@@2PAUSpoint@@A:DWORD ; StateStackClass::XformedPosPool
EXTRN	?IntensityPool@StateStackClass@@2PAMA:DWORD	; StateStackClass::IntensityPool
EXTRN	?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A:DWORD ; StateStackClass::ClipInfoPool
EXTRN	?XformedPosPoolNext@StateStackClass@@2PAUSpoint@@A:DWORD ; StateStackClass::XformedPosPoolNext
EXTRN	?IntensityPoolNext@StateStackClass@@2PAMA:DWORD	; StateStackClass::IntensityPoolNext
EXTRN	?scaleX@StateStackClass@@1MA:DWORD		; StateStackClass::scaleX
EXTRN	?scaleY@StateStackClass@@1MA:DWORD		; StateStackClass::scaleY
EXTRN	?shiftX@StateStackClass@@1MA:DWORD		; StateStackClass::shiftX
EXTRN	?shiftY@StateStackClass@@1MA:DWORD		; StateStackClass::shiftY
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
;	COMDAT ?pvtClipPoly@@YAHKPAH000PAUPtexcoord@@@Z
_TEXT	SEGMENT
tv348 = -1652						; size = 4
tv252 = -1648						; size = 4
tv300 = -1644						; size = 4
tv204 = -1640						; size = 4
tv149 = -1636						; size = 4
tv198 = -1632						; size = 4
tv146 = -1628						; size = 4
tv294 = -1624						; size = 4
tv291 = -1620						; size = 4
tv297 = -1616						; size = 4
tv249 = -1612						; size = 4
tv195 = -1608						; size = 4
tv143 = -1604						; size = 4
tv246 = -1600						; size = 4
tv345 = -1596						; size = 4
tv201 = -1592						; size = 4
tv342 = -1588						; size = 4
tv339 = -1584						; size = 4
tv243 = -1580						; size = 4
_temp$ = -1576						; size = 4
_lastIn$ = -1572					; size = 4
_inList$ = -1568					; size = 4
_i$ = -1564						; size = 4
_p$ = -1560						; size = 4
_outList$ = -1556					; size = 4
_v$ = -1552						; size = 4
_nextOut$ = -1548					; size = 4
_extraVertIdx$ = -1544					; size = 20
_vertList1$ = -1524					; size = 760
_vertList2$ = -764					; size = 760
__$ArrayPad$ = -4					; size = 4
_clipTest$ = 8						; size = 4
_nVerts$ = 12						; size = 4
_xyz$ = 16						; size = 4
_rgba$ = 20						; size = 4
_I$ = 24						; size = 4
_uv$ = 28						; size = 4
?pvtClipPoly@@YAHKPAH000PAUPtexcoord@@@Z PROC		; pvtClipPoly, COMDAT

; 341  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1652				; 00000674H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi

; 342  : 	ClipVert		*v, *p, *lastIn,  *nextOut;
; 343  : 	ClipVert		*inList, *outList, *temp;
; 344  : 	ClipVert		vertList1[MAX_VERTS_PER_CLIPPED_POLYGON];
; 345  : 	ClipVert		vertList2[MAX_VERTS_PER_CLIPPED_POLYGON];
; 346  : 	ClipVert		extraVertIdx;
; 347  : 	int				i;
; 348  : 
; 349  : 	ShiAssert( xyz );
; 350  : 	ShiAssert( *nVerts >= 3 );
; 351  : 	ShiAssert( *nVerts <= MAX_VERTS_PER_CLIPPED_POLYGON );
; 352  : 
; 353  : 	// Intialize the vertex buffers
; 354  : 	outList	= vertList1;

	lea	eax, DWORD PTR _vertList1$[ebp]
	mov	DWORD PTR _outList$[ebp], eax

; 355  : 	nextOut	= outList;

	mov	ecx, DWORD PTR _outList$[ebp]
	mov	DWORD PTR _nextOut$[ebp], ecx

; 356  : 	i = 0;

	mov	DWORD PTR _i$[ebp], 0
$LN56@pvtClipPol:

; 357  : 	do {
; 358  : 		nextOut->xyz				= xyz[i];

	mov	edx, DWORD PTR _nextOut$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _xyz$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx], eax

; 359  : 		if (rgba)	nextOut->rgba	= rgba[i];

	cmp	DWORD PTR _rgba$[ebp], 0
	je	SHORT $LN53@pvtClipPol
	mov	ecx, DWORD PTR _nextOut$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _rgba$[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [ecx+4], edx
$LN53@pvtClipPol:

; 360  : 		if (I)		nextOut->I		= I[i];

	cmp	DWORD PTR _I$[ebp], 0
	je	SHORT $LN52@pvtClipPol
	mov	eax, DWORD PTR _nextOut$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _I$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [eax+8], ecx
$LN52@pvtClipPol:

; 361  : 		if (uv)		nextOut->uv		= uv[i];

	cmp	DWORD PTR _uv$[ebp], 0
	je	SHORT $LN51@pvtClipPol
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _uv$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8]
	mov	edx, DWORD PTR [eax+edx*8+4]
	mov	eax, DWORD PTR _nextOut$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], edx
$LN51@pvtClipPol:

; 362  : 		i++;

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx

; 363  : 		nextOut++;

	mov	edx, DWORD PTR _nextOut$[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR _nextOut$[ebp], edx

; 364  : 	} while( i < *nVerts );

	mov	eax, DWORD PTR _nVerts$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jl	$LN56@pvtClipPol

; 365  : 	inList				= vertList2;

	lea	edx, DWORD PTR _vertList2$[ebp]
	mov	DWORD PTR _inList$[ebp], edx

; 366  : 	extraVertIdx.xyz	= TheStateStack.XformedPosPoolNext - TheStateStack.XformedPosPool;

	mov	eax, DWORD PTR ?XformedPosPoolNext@StateStackClass@@2PAUSpoint@@A ; StateStackClass::XformedPosPoolNext
	sub	eax, DWORD PTR ?XformedPosPool@StateStackClass@@2PAUSpoint@@A ; StateStackClass::XformedPosPool
	sar	eax, 4
	mov	DWORD PTR _extraVertIdx$[ebp], eax

; 367  : 	extraVertIdx.rgba	= TheColorBank.nColors;

	mov	ecx, DWORD PTR ?nColors@ColorBankClass@@2HA ; ColorBankClass::nColors
	mov	DWORD PTR _extraVertIdx$[ebp+4], ecx

; 368  : 	extraVertIdx.I		= TheStateStack.IntensityPoolNext - TheStateStack.IntensityPool;

	mov	edx, DWORD PTR ?IntensityPoolNext@StateStackClass@@2PAMA ; StateStackClass::IntensityPoolNext
	sub	edx, DWORD PTR ?IntensityPool@StateStackClass@@2PAMA ; StateStackClass::IntensityPool
	sar	edx, 2
	mov	DWORD PTR _extraVertIdx$[ebp+8], edx

; 369  : 
; 370  : 
; 371  : 	// Clip to the near plane
; 372  : 	if (clipTest & CLIP_NEAR) {

	mov	eax, DWORD PTR _clipTest$[ebp]
	and	eax, 16					; 00000010H
	je	$LN50@pvtClipPol

; 373  : 		temp = inList;

	mov	ecx, DWORD PTR _inList$[ebp]
	mov	DWORD PTR _temp$[ebp], ecx

; 374  : 		inList = outList;

	mov	edx, DWORD PTR _outList$[ebp]
	mov	DWORD PTR _inList$[ebp], edx

; 375  : 		outList = temp;

	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _outList$[ebp], eax

; 376  : 		lastIn = nextOut-1;

	mov	ecx, DWORD PTR _nextOut$[ebp]
	sub	ecx, 20					; 00000014H
	mov	DWORD PTR _lastIn$[ebp], ecx

; 377  : 		nextOut = outList;

	mov	edx, DWORD PTR _outList$[ebp]
	mov	DWORD PTR _nextOut$[ebp], edx

; 378  : 
; 379  : 		for (p=lastIn, v=&inList[0]; v <= lastIn; v++) {

	mov	eax, DWORD PTR _lastIn$[ebp]
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 20					; 00000014H
	imul	ecx, 0
	add	ecx, DWORD PTR _inList$[ebp]
	mov	DWORD PTR _v$[ebp], ecx
	jmp	SHORT $LN49@pvtClipPol
$LN48@pvtClipPol:
	mov	edx, DWORD PTR _v$[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR _v$[ebp], edx
$LN49@pvtClipPol:
	mov	eax, DWORD PTR _v$[ebp]
	cmp	eax, DWORD PTR _lastIn$[ebp]
	ja	$LN47@pvtClipPol

; 380  : 
; 381  : 			// If the edge between this vert and the previous one crosses the line, trim it
; 382  : 			if (CLIP_NEAR & (TheStateStack.ClipInfoPool[p->xyz].clipFlag ^ TheStateStack.ClipInfoPool[v->xyz].clipFlag)) {

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	shl	edx, 4
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 4
	mov	eax, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	esi, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	edx, DWORD PTR [eax+edx]
	xor	edx, DWORD PTR [esi+ecx]
	and	edx, 16					; 00000010H
	je	$LN46@pvtClipPol

; 383  : 				ShiAssert( TheStateStack.IsValidPosIndex(extraVertIdx.xyz) );
; 384  : 				*nextOut = extraVertIdx;

	mov	eax, DWORD PTR _nextOut$[ebp]
	mov	ecx, DWORD PTR _extraVertIdx$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _extraVertIdx$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _extraVertIdx$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _extraVertIdx$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _extraVertIdx$[ebp+16]
	mov	DWORD PTR [eax+16], ecx

; 385  : 				extraVertIdx.xyz++;

	mov	edx, DWORD PTR _extraVertIdx$[ebp]
	add	edx, 1
	mov	DWORD PTR _extraVertIdx$[ebp], edx

; 386  : 				if (rgba)	extraVertIdx.rgba++;

	cmp	DWORD PTR _rgba$[ebp], 0
	je	SHORT $LN45@pvtClipPol
	mov	eax, DWORD PTR _extraVertIdx$[ebp+4]
	add	eax, 1
	mov	DWORD PTR _extraVertIdx$[ebp+4], eax
$LN45@pvtClipPol:

; 387  : 				if (I)		extraVertIdx.I++;

	cmp	DWORD PTR _I$[ebp], 0
	je	SHORT $LN44@pvtClipPol
	mov	ecx, DWORD PTR _extraVertIdx$[ebp+8]
	add	ecx, 1
	mov	DWORD PTR _extraVertIdx$[ebp+8], ecx
$LN44@pvtClipPol:

; 388  : 				IntersectNear( p, v, nextOut, rgba!=NULL, I!=NULL, uv!=NULL );

	cmp	DWORD PTR _uv$[ebp], 0
	je	SHORT $LN59@pvtClipPol
	mov	DWORD PTR tv143[ebp], 1
	jmp	SHORT $LN60@pvtClipPol
$LN59@pvtClipPol:
	mov	DWORD PTR tv143[ebp], 0
$LN60@pvtClipPol:
	cmp	DWORD PTR _I$[ebp], 0
	je	SHORT $LN61@pvtClipPol
	mov	DWORD PTR tv146[ebp], 1
	jmp	SHORT $LN62@pvtClipPol
$LN61@pvtClipPol:
	mov	DWORD PTR tv146[ebp], 0
$LN62@pvtClipPol:
	cmp	DWORD PTR _rgba$[ebp], 0
	je	SHORT $LN63@pvtClipPol
	mov	DWORD PTR tv149[ebp], 1
	jmp	SHORT $LN64@pvtClipPol
$LN63@pvtClipPol:
	mov	DWORD PTR tv149[ebp], 0
$LN64@pvtClipPol:
	mov	edx, DWORD PTR tv143[ebp]
	push	edx
	mov	eax, DWORD PTR tv146[ebp]
	push	eax
	mov	ecx, DWORD PTR tv149[ebp]
	push	ecx
	mov	edx, DWORD PTR _nextOut$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?IntersectNear@@YAXPAUClipVert@@00HHH@Z	; IntersectNear
	add	esp, 24					; 00000018H

; 389  : 				clipTest |= TheStateStack.ClipInfoPool[nextOut->xyz].clipFlag;

	mov	edx, DWORD PTR _nextOut$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 4
	mov	ecx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	edx, DWORD PTR _clipTest$[ebp]
	or	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _clipTest$[ebp], edx

; 390  : 				nextOut++;

	mov	eax, DWORD PTR _nextOut$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _nextOut$[ebp], eax
$LN46@pvtClipPol:

; 391  : 			}
; 392  : 			
; 393  : 			// If this vert isn't clipped, use it
; 394  : 			if (!(TheStateStack.ClipInfoPool[v->xyz].clipFlag & CLIP_NEAR)) {

	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	shl	edx, 4
	mov	eax, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	ecx, DWORD PTR [eax+edx]
	and	ecx, 16					; 00000010H
	jne	SHORT $LN43@pvtClipPol

; 395  : 				*nextOut++ = *v;

	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR _nextOut$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR [edx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _nextOut$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _nextOut$[ebp], eax
$LN43@pvtClipPol:

; 396  : 			}
; 397  : 
; 398  : 			p = v;

	mov	ecx, DWORD PTR _v$[ebp]
	mov	DWORD PTR _p$[ebp], ecx

; 399  : 		}

	jmp	$LN48@pvtClipPol
$LN47@pvtClipPol:

; 400  : 		ShiAssert( nextOut - outList <= MAX_VERTS_PER_CLIPPED_POLYGON );
; 401  : 		if (nextOut - outList <= 2)  return FALSE;

	mov	eax, DWORD PTR _nextOut$[ebp]
	sub	eax, DWORD PTR _outList$[ebp]
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	cmp	eax, 2
	jg	SHORT $LN50@pvtClipPol
	xor	eax, eax
	jmp	$LN57@pvtClipPol
$LN50@pvtClipPol:

; 402  : 
; 403  : 		// NOTE:  We might get to this point and find a polygon is now marked totally clipped
; 404  : 		// since doing the near clip can change the flags and make a vertex appear to have
; 405  : 		// changed sides of the viewer.  We'll ignore this issue since it is quietly handled
; 406  : 		// and would probably cost more to detect than it would save it early termination.
; 407  : 	}
; 408  : 
; 409  : 
; 410  : 	// Clip to the bottom plane
; 411  : 	if (clipTest & CLIP_BOTTOM) {

	mov	edx, DWORD PTR _clipTest$[ebp]
	and	edx, 8
	je	$LN41@pvtClipPol

; 412  : 		temp = inList;

	mov	eax, DWORD PTR _inList$[ebp]
	mov	DWORD PTR _temp$[ebp], eax

; 413  : 		inList = outList;

	mov	ecx, DWORD PTR _outList$[ebp]
	mov	DWORD PTR _inList$[ebp], ecx

; 414  : 		outList = temp;

	mov	edx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _outList$[ebp], edx

; 415  : 		lastIn = nextOut-1;

	mov	eax, DWORD PTR _nextOut$[ebp]
	sub	eax, 20					; 00000014H
	mov	DWORD PTR _lastIn$[ebp], eax

; 416  : 		nextOut = outList;

	mov	ecx, DWORD PTR _outList$[ebp]
	mov	DWORD PTR _nextOut$[ebp], ecx

; 417  : 
; 418  : 		for (p=lastIn, v=&inList[0]; v <= lastIn; v++) {

	mov	edx, DWORD PTR _lastIn$[ebp]
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 20					; 00000014H
	imul	eax, 0
	add	eax, DWORD PTR _inList$[ebp]
	mov	DWORD PTR _v$[ebp], eax
	jmp	SHORT $LN40@pvtClipPol
$LN39@pvtClipPol:
	mov	ecx, DWORD PTR _v$[ebp]
	add	ecx, 20					; 00000014H
	mov	DWORD PTR _v$[ebp], ecx
$LN40@pvtClipPol:
	mov	edx, DWORD PTR _v$[ebp]
	cmp	edx, DWORD PTR _lastIn$[ebp]
	ja	$LN38@pvtClipPol

; 419  : 
; 420  : 			// If the edge between this vert and the previous one crosses the line, trim it
; 421  : 			if (CLIP_BOTTOM & (TheStateStack.ClipInfoPool[p->xyz].clipFlag ^ TheStateStack.ClipInfoPool[v->xyz].clipFlag)) {

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 4
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 4
	mov	edx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	esi, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	and	ecx, 8
	je	$LN37@pvtClipPol

; 422  : 				ShiAssert( TheStateStack.IsValidPosIndex(extraVertIdx.xyz) );
; 423  : 				*nextOut = extraVertIdx;

	mov	edx, DWORD PTR _nextOut$[ebp]
	mov	eax, DWORD PTR _extraVertIdx$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _extraVertIdx$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _extraVertIdx$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _extraVertIdx$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _extraVertIdx$[ebp+16]
	mov	DWORD PTR [edx+16], eax

; 424  : 				extraVertIdx.xyz++;

	mov	ecx, DWORD PTR _extraVertIdx$[ebp]
	add	ecx, 1
	mov	DWORD PTR _extraVertIdx$[ebp], ecx

; 425  : 				if (rgba)	extraVertIdx.rgba++;

	cmp	DWORD PTR _rgba$[ebp], 0
	je	SHORT $LN36@pvtClipPol
	mov	edx, DWORD PTR _extraVertIdx$[ebp+4]
	add	edx, 1
	mov	DWORD PTR _extraVertIdx$[ebp+4], edx
$LN36@pvtClipPol:

; 426  : 				if (I)		extraVertIdx.I++;

	cmp	DWORD PTR _I$[ebp], 0
	je	SHORT $LN35@pvtClipPol
	mov	eax, DWORD PTR _extraVertIdx$[ebp+8]
	add	eax, 1
	mov	DWORD PTR _extraVertIdx$[ebp+8], eax
$LN35@pvtClipPol:

; 427  : 				IntersectBottom( p, v, nextOut++, rgba!=NULL, I!=NULL, uv!=NULL );

	cmp	DWORD PTR _uv$[ebp], 0
	je	SHORT $LN65@pvtClipPol
	mov	DWORD PTR tv195[ebp], 1
	jmp	SHORT $LN66@pvtClipPol
$LN65@pvtClipPol:
	mov	DWORD PTR tv195[ebp], 0
$LN66@pvtClipPol:
	cmp	DWORD PTR _I$[ebp], 0
	je	SHORT $LN67@pvtClipPol
	mov	DWORD PTR tv198[ebp], 1
	jmp	SHORT $LN68@pvtClipPol
$LN67@pvtClipPol:
	mov	DWORD PTR tv198[ebp], 0
$LN68@pvtClipPol:
	cmp	DWORD PTR _rgba$[ebp], 0
	je	SHORT $LN69@pvtClipPol
	mov	DWORD PTR tv201[ebp], 1
	jmp	SHORT $LN70@pvtClipPol
$LN69@pvtClipPol:
	mov	DWORD PTR tv201[ebp], 0
$LN70@pvtClipPol:
	mov	ecx, DWORD PTR _nextOut$[ebp]
	mov	DWORD PTR tv204[ebp], ecx
	mov	edx, DWORD PTR tv195[ebp]
	push	edx
	mov	eax, DWORD PTR tv198[ebp]
	push	eax
	mov	ecx, DWORD PTR tv201[ebp]
	push	ecx
	mov	edx, DWORD PTR tv204[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?IntersectBottom@@YAXPAUClipVert@@00HHH@Z ; IntersectBottom
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _nextOut$[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR _nextOut$[ebp], edx
$LN37@pvtClipPol:

; 428  : 			}
; 429  : 			
; 430  : 			// If this vert isn't clipped, use it
; 431  : 			if (!(TheStateStack.ClipInfoPool[v->xyz].clipFlag & CLIP_BOTTOM)) {

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 4
	mov	edx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	eax, DWORD PTR [edx+ecx]
	and	eax, 8
	jne	SHORT $LN34@pvtClipPol

; 432  : 				*nextOut++ = *v;

	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _nextOut$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+16], ecx
	mov	edx, DWORD PTR _nextOut$[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR _nextOut$[ebp], edx
$LN34@pvtClipPol:

; 433  : 			}
; 434  : 
; 435  : 			p = v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _p$[ebp], eax

; 436  : 		}

	jmp	$LN39@pvtClipPol
$LN38@pvtClipPol:

; 437  : 		ShiAssert( nextOut - outList <= MAX_VERTS_PER_CLIPPED_POLYGON );
; 438  : 		if (nextOut - outList <= 2)  return FALSE;

	mov	eax, DWORD PTR _nextOut$[ebp]
	sub	eax, DWORD PTR _outList$[ebp]
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	cmp	eax, 2
	jg	SHORT $LN41@pvtClipPol
	xor	eax, eax
	jmp	$LN57@pvtClipPol
$LN41@pvtClipPol:

; 439  : 	}
; 440  : 
; 441  : 
; 442  : 	// Clip to the top plane
; 443  : 	if (clipTest & CLIP_TOP) {

	mov	edx, DWORD PTR _clipTest$[ebp]
	and	edx, 4
	je	$LN32@pvtClipPol

; 444  : 		temp = inList;

	mov	eax, DWORD PTR _inList$[ebp]
	mov	DWORD PTR _temp$[ebp], eax

; 445  : 		inList = outList;

	mov	ecx, DWORD PTR _outList$[ebp]
	mov	DWORD PTR _inList$[ebp], ecx

; 446  : 		outList = temp;

	mov	edx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _outList$[ebp], edx

; 447  : 		lastIn = nextOut-1;

	mov	eax, DWORD PTR _nextOut$[ebp]
	sub	eax, 20					; 00000014H
	mov	DWORD PTR _lastIn$[ebp], eax

; 448  : 		nextOut = outList;

	mov	ecx, DWORD PTR _outList$[ebp]
	mov	DWORD PTR _nextOut$[ebp], ecx

; 449  : 
; 450  : 		for (p=lastIn, v=&inList[0]; v <= lastIn; v++) {

	mov	edx, DWORD PTR _lastIn$[ebp]
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 20					; 00000014H
	imul	eax, 0
	add	eax, DWORD PTR _inList$[ebp]
	mov	DWORD PTR _v$[ebp], eax
	jmp	SHORT $LN31@pvtClipPol
$LN30@pvtClipPol:
	mov	ecx, DWORD PTR _v$[ebp]
	add	ecx, 20					; 00000014H
	mov	DWORD PTR _v$[ebp], ecx
$LN31@pvtClipPol:
	mov	edx, DWORD PTR _v$[ebp]
	cmp	edx, DWORD PTR _lastIn$[ebp]
	ja	$LN29@pvtClipPol

; 451  : 
; 452  : 			// If the edge between this vert and the previous one crosses the line, trim it
; 453  : 			if (CLIP_TOP & (TheStateStack.ClipInfoPool[p->xyz].clipFlag ^ TheStateStack.ClipInfoPool[v->xyz].clipFlag)) {

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 4
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 4
	mov	edx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	esi, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	and	ecx, 4
	je	$LN28@pvtClipPol

; 454  : 				ShiAssert( TheStateStack.IsValidPosIndex(extraVertIdx.xyz) );
; 455  : 				*nextOut = extraVertIdx;

	mov	edx, DWORD PTR _nextOut$[ebp]
	mov	eax, DWORD PTR _extraVertIdx$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _extraVertIdx$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _extraVertIdx$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _extraVertIdx$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _extraVertIdx$[ebp+16]
	mov	DWORD PTR [edx+16], eax

; 456  : 				extraVertIdx.xyz++;

	mov	ecx, DWORD PTR _extraVertIdx$[ebp]
	add	ecx, 1
	mov	DWORD PTR _extraVertIdx$[ebp], ecx

; 457  : 				if (rgba)	extraVertIdx.rgba++;

	cmp	DWORD PTR _rgba$[ebp], 0
	je	SHORT $LN27@pvtClipPol
	mov	edx, DWORD PTR _extraVertIdx$[ebp+4]
	add	edx, 1
	mov	DWORD PTR _extraVertIdx$[ebp+4], edx
$LN27@pvtClipPol:

; 458  : 				if (I)		extraVertIdx.I++;

	cmp	DWORD PTR _I$[ebp], 0
	je	SHORT $LN26@pvtClipPol
	mov	eax, DWORD PTR _extraVertIdx$[ebp+8]
	add	eax, 1
	mov	DWORD PTR _extraVertIdx$[ebp+8], eax
$LN26@pvtClipPol:

; 459  : 				IntersectTop( p, v, nextOut++, rgba!=NULL, I!=NULL, uv!=NULL );

	cmp	DWORD PTR _uv$[ebp], 0
	je	SHORT $LN71@pvtClipPol
	mov	DWORD PTR tv243[ebp], 1
	jmp	SHORT $LN72@pvtClipPol
$LN71@pvtClipPol:
	mov	DWORD PTR tv243[ebp], 0
$LN72@pvtClipPol:
	cmp	DWORD PTR _I$[ebp], 0
	je	SHORT $LN73@pvtClipPol
	mov	DWORD PTR tv246[ebp], 1
	jmp	SHORT $LN74@pvtClipPol
$LN73@pvtClipPol:
	mov	DWORD PTR tv246[ebp], 0
$LN74@pvtClipPol:
	cmp	DWORD PTR _rgba$[ebp], 0
	je	SHORT $LN75@pvtClipPol
	mov	DWORD PTR tv249[ebp], 1
	jmp	SHORT $LN76@pvtClipPol
$LN75@pvtClipPol:
	mov	DWORD PTR tv249[ebp], 0
$LN76@pvtClipPol:
	mov	ecx, DWORD PTR _nextOut$[ebp]
	mov	DWORD PTR tv252[ebp], ecx
	mov	edx, DWORD PTR tv243[ebp]
	push	edx
	mov	eax, DWORD PTR tv246[ebp]
	push	eax
	mov	ecx, DWORD PTR tv249[ebp]
	push	ecx
	mov	edx, DWORD PTR tv252[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?IntersectTop@@YAXPAUClipVert@@00HHH@Z	; IntersectTop
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _nextOut$[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR _nextOut$[ebp], edx
$LN28@pvtClipPol:

; 460  : 			}
; 461  : 			
; 462  : 			// If this vert isn't clipped, use it
; 463  : 			if (!(TheStateStack.ClipInfoPool[v->xyz].clipFlag & CLIP_TOP)) {

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 4
	mov	edx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	eax, DWORD PTR [edx+ecx]
	and	eax, 4
	jne	SHORT $LN25@pvtClipPol

; 464  : 				*nextOut++ = *v;

	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _nextOut$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+16], ecx
	mov	edx, DWORD PTR _nextOut$[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR _nextOut$[ebp], edx
$LN25@pvtClipPol:

; 465  : 			}
; 466  : 
; 467  : 			p = v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _p$[ebp], eax

; 468  : 		}

	jmp	$LN30@pvtClipPol
$LN29@pvtClipPol:

; 469  : 		ShiAssert( nextOut - outList <= MAX_VERTS_PER_CLIPPED_POLYGON );
; 470  : 		if (nextOut - outList <= 2)  return FALSE;

	mov	eax, DWORD PTR _nextOut$[ebp]
	sub	eax, DWORD PTR _outList$[ebp]
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	cmp	eax, 2
	jg	SHORT $LN32@pvtClipPol
	xor	eax, eax
	jmp	$LN57@pvtClipPol
$LN32@pvtClipPol:

; 471  : 	}
; 472  : 
; 473  : 
; 474  : 	// Clip to the right plane
; 475  : 	if (clipTest & CLIP_RIGHT) {

	mov	edx, DWORD PTR _clipTest$[ebp]
	and	edx, 2
	je	$LN23@pvtClipPol

; 476  : 		temp = inList;

	mov	eax, DWORD PTR _inList$[ebp]
	mov	DWORD PTR _temp$[ebp], eax

; 477  : 		inList = outList;

	mov	ecx, DWORD PTR _outList$[ebp]
	mov	DWORD PTR _inList$[ebp], ecx

; 478  : 		outList = temp;

	mov	edx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _outList$[ebp], edx

; 479  : 		lastIn = nextOut-1;

	mov	eax, DWORD PTR _nextOut$[ebp]
	sub	eax, 20					; 00000014H
	mov	DWORD PTR _lastIn$[ebp], eax

; 480  : 		nextOut = outList;

	mov	ecx, DWORD PTR _outList$[ebp]
	mov	DWORD PTR _nextOut$[ebp], ecx

; 481  : 
; 482  : 		for (p=lastIn, v=&inList[0]; v <= lastIn; v++) {

	mov	edx, DWORD PTR _lastIn$[ebp]
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 20					; 00000014H
	imul	eax, 0
	add	eax, DWORD PTR _inList$[ebp]
	mov	DWORD PTR _v$[ebp], eax
	jmp	SHORT $LN22@pvtClipPol
$LN21@pvtClipPol:
	mov	ecx, DWORD PTR _v$[ebp]
	add	ecx, 20					; 00000014H
	mov	DWORD PTR _v$[ebp], ecx
$LN22@pvtClipPol:
	mov	edx, DWORD PTR _v$[ebp]
	cmp	edx, DWORD PTR _lastIn$[ebp]
	ja	$LN20@pvtClipPol

; 483  : 
; 484  : 			// If the edge between this vert and the previous one crosses the line, trim it
; 485  : 			if (CLIP_RIGHT & (TheStateStack.ClipInfoPool[p->xyz].clipFlag ^ TheStateStack.ClipInfoPool[v->xyz].clipFlag)) {

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 4
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 4
	mov	edx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	esi, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	and	ecx, 2
	je	$LN19@pvtClipPol

; 486  : 				ShiAssert( TheStateStack.IsValidPosIndex(extraVertIdx.xyz) );
; 487  : 				*nextOut = extraVertIdx;

	mov	edx, DWORD PTR _nextOut$[ebp]
	mov	eax, DWORD PTR _extraVertIdx$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _extraVertIdx$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _extraVertIdx$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _extraVertIdx$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _extraVertIdx$[ebp+16]
	mov	DWORD PTR [edx+16], eax

; 488  : 				extraVertIdx.xyz++;

	mov	ecx, DWORD PTR _extraVertIdx$[ebp]
	add	ecx, 1
	mov	DWORD PTR _extraVertIdx$[ebp], ecx

; 489  : 				if (rgba)	extraVertIdx.rgba++;

	cmp	DWORD PTR _rgba$[ebp], 0
	je	SHORT $LN18@pvtClipPol
	mov	edx, DWORD PTR _extraVertIdx$[ebp+4]
	add	edx, 1
	mov	DWORD PTR _extraVertIdx$[ebp+4], edx
$LN18@pvtClipPol:

; 490  : 				if (I)		extraVertIdx.I++;

	cmp	DWORD PTR _I$[ebp], 0
	je	SHORT $LN17@pvtClipPol
	mov	eax, DWORD PTR _extraVertIdx$[ebp+8]
	add	eax, 1
	mov	DWORD PTR _extraVertIdx$[ebp+8], eax
$LN17@pvtClipPol:

; 491  : 				IntersectRight( p, v, nextOut++, rgba!=NULL, I!=NULL, uv!=NULL );

	cmp	DWORD PTR _uv$[ebp], 0
	je	SHORT $LN77@pvtClipPol
	mov	DWORD PTR tv291[ebp], 1
	jmp	SHORT $LN78@pvtClipPol
$LN77@pvtClipPol:
	mov	DWORD PTR tv291[ebp], 0
$LN78@pvtClipPol:
	cmp	DWORD PTR _I$[ebp], 0
	je	SHORT $LN79@pvtClipPol
	mov	DWORD PTR tv294[ebp], 1
	jmp	SHORT $LN80@pvtClipPol
$LN79@pvtClipPol:
	mov	DWORD PTR tv294[ebp], 0
$LN80@pvtClipPol:
	cmp	DWORD PTR _rgba$[ebp], 0
	je	SHORT $LN81@pvtClipPol
	mov	DWORD PTR tv297[ebp], 1
	jmp	SHORT $LN82@pvtClipPol
$LN81@pvtClipPol:
	mov	DWORD PTR tv297[ebp], 0
$LN82@pvtClipPol:
	mov	ecx, DWORD PTR _nextOut$[ebp]
	mov	DWORD PTR tv300[ebp], ecx
	mov	edx, DWORD PTR tv291[ebp]
	push	edx
	mov	eax, DWORD PTR tv294[ebp]
	push	eax
	mov	ecx, DWORD PTR tv297[ebp]
	push	ecx
	mov	edx, DWORD PTR tv300[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?IntersectRight@@YAXPAUClipVert@@00HHH@Z ; IntersectRight
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _nextOut$[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR _nextOut$[ebp], edx
$LN19@pvtClipPol:

; 492  : 			}
; 493  : 			
; 494  : 			// If this vert isn't clipped, use it
; 495  : 			if (!(TheStateStack.ClipInfoPool[v->xyz].clipFlag & CLIP_RIGHT)) {

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 4
	mov	edx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	eax, DWORD PTR [edx+ecx]
	and	eax, 2
	jne	SHORT $LN16@pvtClipPol

; 496  : 				*nextOut++ = *v;

	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _nextOut$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+16], ecx
	mov	edx, DWORD PTR _nextOut$[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR _nextOut$[ebp], edx
$LN16@pvtClipPol:

; 497  : 			}
; 498  : 
; 499  : 			p = v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _p$[ebp], eax

; 500  : 		}

	jmp	$LN21@pvtClipPol
$LN20@pvtClipPol:

; 501  : 		ShiAssert( nextOut - outList <= MAX_VERTS_PER_CLIPPED_POLYGON );
; 502  : 		if (nextOut - outList <= 2)  return FALSE;

	mov	eax, DWORD PTR _nextOut$[ebp]
	sub	eax, DWORD PTR _outList$[ebp]
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	cmp	eax, 2
	jg	SHORT $LN23@pvtClipPol
	xor	eax, eax
	jmp	$LN57@pvtClipPol
$LN23@pvtClipPol:

; 503  : 	}
; 504  : 
; 505  : 	
; 506  : 	// Clip to the left plane
; 507  : 	if (clipTest & CLIP_LEFT) {

	mov	edx, DWORD PTR _clipTest$[ebp]
	and	edx, 1
	je	$LN14@pvtClipPol

; 508  : 		temp = inList;

	mov	eax, DWORD PTR _inList$[ebp]
	mov	DWORD PTR _temp$[ebp], eax

; 509  : 		inList = outList;

	mov	ecx, DWORD PTR _outList$[ebp]
	mov	DWORD PTR _inList$[ebp], ecx

; 510  : 		outList = temp;

	mov	edx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _outList$[ebp], edx

; 511  : 		lastIn = nextOut-1;

	mov	eax, DWORD PTR _nextOut$[ebp]
	sub	eax, 20					; 00000014H
	mov	DWORD PTR _lastIn$[ebp], eax

; 512  : 		nextOut = outList;

	mov	ecx, DWORD PTR _outList$[ebp]
	mov	DWORD PTR _nextOut$[ebp], ecx

; 513  : 
; 514  : 		for (p=lastIn, v=&inList[0]; v <= lastIn; v++) {

	mov	edx, DWORD PTR _lastIn$[ebp]
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 20					; 00000014H
	imul	eax, 0
	add	eax, DWORD PTR _inList$[ebp]
	mov	DWORD PTR _v$[ebp], eax
	jmp	SHORT $LN13@pvtClipPol
$LN12@pvtClipPol:
	mov	ecx, DWORD PTR _v$[ebp]
	add	ecx, 20					; 00000014H
	mov	DWORD PTR _v$[ebp], ecx
$LN13@pvtClipPol:
	mov	edx, DWORD PTR _v$[ebp]
	cmp	edx, DWORD PTR _lastIn$[ebp]
	ja	$LN11@pvtClipPol

; 515  : 
; 516  : 			// If the edge between this vert and the previous one crosses the line, trim it
; 517  : 			if (CLIP_LEFT & (TheStateStack.ClipInfoPool[p->xyz].clipFlag ^ TheStateStack.ClipInfoPool[v->xyz].clipFlag)) {

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 4
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 4
	mov	edx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	esi, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	and	ecx, 1
	je	$LN10@pvtClipPol

; 518  : 				ShiAssert( TheStateStack.IsValidPosIndex(extraVertIdx.xyz) );
; 519  : 				*nextOut = extraVertIdx;

	mov	edx, DWORD PTR _nextOut$[ebp]
	mov	eax, DWORD PTR _extraVertIdx$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _extraVertIdx$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _extraVertIdx$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _extraVertIdx$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _extraVertIdx$[ebp+16]
	mov	DWORD PTR [edx+16], eax

; 520  : 				extraVertIdx.xyz++;

	mov	ecx, DWORD PTR _extraVertIdx$[ebp]
	add	ecx, 1
	mov	DWORD PTR _extraVertIdx$[ebp], ecx

; 521  : 				if (rgba)	extraVertIdx.rgba++;

	cmp	DWORD PTR _rgba$[ebp], 0
	je	SHORT $LN9@pvtClipPol
	mov	edx, DWORD PTR _extraVertIdx$[ebp+4]
	add	edx, 1
	mov	DWORD PTR _extraVertIdx$[ebp+4], edx
$LN9@pvtClipPol:

; 522  : 				if (I)		extraVertIdx.I++;

	cmp	DWORD PTR _I$[ebp], 0
	je	SHORT $LN8@pvtClipPol
	mov	eax, DWORD PTR _extraVertIdx$[ebp+8]
	add	eax, 1
	mov	DWORD PTR _extraVertIdx$[ebp+8], eax
$LN8@pvtClipPol:

; 523  : 				IntersectLeft( p, v, nextOut++, rgba!=NULL, I!=NULL, uv!=NULL );

	cmp	DWORD PTR _uv$[ebp], 0
	je	SHORT $LN83@pvtClipPol
	mov	DWORD PTR tv339[ebp], 1
	jmp	SHORT $LN84@pvtClipPol
$LN83@pvtClipPol:
	mov	DWORD PTR tv339[ebp], 0
$LN84@pvtClipPol:
	cmp	DWORD PTR _I$[ebp], 0
	je	SHORT $LN85@pvtClipPol
	mov	DWORD PTR tv342[ebp], 1
	jmp	SHORT $LN86@pvtClipPol
$LN85@pvtClipPol:
	mov	DWORD PTR tv342[ebp], 0
$LN86@pvtClipPol:
	cmp	DWORD PTR _rgba$[ebp], 0
	je	SHORT $LN87@pvtClipPol
	mov	DWORD PTR tv345[ebp], 1
	jmp	SHORT $LN88@pvtClipPol
$LN87@pvtClipPol:
	mov	DWORD PTR tv345[ebp], 0
$LN88@pvtClipPol:
	mov	ecx, DWORD PTR _nextOut$[ebp]
	mov	DWORD PTR tv348[ebp], ecx
	mov	edx, DWORD PTR tv339[ebp]
	push	edx
	mov	eax, DWORD PTR tv342[ebp]
	push	eax
	mov	ecx, DWORD PTR tv345[ebp]
	push	ecx
	mov	edx, DWORD PTR tv348[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?IntersectLeft@@YAXPAUClipVert@@00HHH@Z	; IntersectLeft
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _nextOut$[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR _nextOut$[ebp], edx
$LN10@pvtClipPol:

; 524  : 			}
; 525  : 			
; 526  : 			// If this vert isn't clipped, use it
; 527  : 			if (!(TheStateStack.ClipInfoPool[v->xyz].clipFlag & CLIP_LEFT)) {

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 4
	mov	edx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	eax, DWORD PTR [edx+ecx]
	and	eax, 1
	jne	SHORT $LN7@pvtClipPol

; 528  : 				*nextOut++ = *v;

	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _nextOut$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+16], ecx
	mov	edx, DWORD PTR _nextOut$[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR _nextOut$[ebp], edx
$LN7@pvtClipPol:

; 529  : 			}
; 530  : 
; 531  : 			p = v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _p$[ebp], eax

; 532  : 		}

	jmp	$LN12@pvtClipPol
$LN11@pvtClipPol:

; 533  : 		ShiAssert( nextOut - outList <= MAX_VERTS_PER_CLIPPED_POLYGON );
; 534  : 		if (nextOut - outList <= 2)  return FALSE;

	mov	eax, DWORD PTR _nextOut$[ebp]
	sub	eax, DWORD PTR _outList$[ebp]
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	cmp	eax, 2
	jg	SHORT $LN14@pvtClipPol
	xor	eax, eax
	jmp	$LN57@pvtClipPol
$LN14@pvtClipPol:

; 535  : 	}
; 536  : 
; 537  : 
; 538  : 	// Now replace the input data with our generated output data
; 539  : 	// THERE HAD BETTER BE ENOUGH ROOM!
; 540  : 	*nVerts = i = nextOut - outList;

	mov	eax, DWORD PTR _nextOut$[ebp]
	sub	eax, DWORD PTR _outList$[ebp]
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	mov	DWORD PTR _i$[ebp], eax
	mov	edx, DWORD PTR _nVerts$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx], eax
$LN5@pvtClipPol:

; 541  : 	while (i) {

	cmp	DWORD PTR _i$[ebp], 0
	je	$LN4@pvtClipPol

; 542  : 		i--;

	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx

; 543  : 		xyz[i]				= outList->xyz;

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _xyz$[ebp]
	mov	ecx, DWORD PTR _outList$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+edx*4], ecx

; 544  : 		if (rgba)	rgba[i]	= outList->rgba;

	cmp	DWORD PTR _rgba$[ebp], 0
	je	SHORT $LN3@pvtClipPol
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _rgba$[ebp]
	mov	ecx, DWORD PTR _outList$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+edx*4], ecx
$LN3@pvtClipPol:

; 545  : 		if (I)		I[i]	= outList->I;

	cmp	DWORD PTR _I$[ebp], 0
	je	SHORT $LN2@pvtClipPol
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _I$[ebp]
	mov	ecx, DWORD PTR _outList$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+edx*4], ecx
$LN2@pvtClipPol:

; 546  : 		if (uv)		uv[i]	= outList->uv;

	cmp	DWORD PTR _uv$[ebp], 0
	je	SHORT $LN1@pvtClipPol
	mov	edx, DWORD PTR _outList$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _uv$[ebp]
	mov	DWORD PTR [esi+edx*8], eax
	mov	DWORD PTR [esi+edx*8+4], ecx
$LN1@pvtClipPol:

; 547  : 		outList++;

	mov	eax, DWORD PTR _outList$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _outList$[ebp], eax

; 548  : 	}

	jmp	$LN5@pvtClipPol
$LN4@pvtClipPol:

; 549  : 	return TRUE;

	mov	eax, 1
$LN57@pvtClipPol:

; 550  : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?pvtClipPoly@@YAHKPAH000PAUPtexcoord@@@Z ENDP		; pvtClipPoly
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_newLine$ = -76						; size = 16
_end$ = -60						; size = 4
_xyz$ = -56						; size = 8
_xyzIdxPtr$ = -48					; size = 4
_v1$ = -44						; size = 20
_v0$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_line$ = 8						; size = 4
_drawFn$ = 12						; size = 4
?pvtClipPrimLine@@YAXPAUPrimLineFC@@P6AXPAUPrim@@@Z@Z PROC ; pvtClipPrimLine

; 238  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi

; 239  : 	PrimLineFC	newLine;
; 240  : 	ClipVert	v0, v1;
; 241  : 	int			xyz[2];
; 242  : 	int			*xyzIdxPtr, *end;
; 243  : 
; 244  : 	ShiAssert( line->nVerts > 1 );
; 245  : 
; 246  : 	// Set up our temporary primitive
; 247  : 	newLine.type	= LineF;

	mov	DWORD PTR _newLine$[ebp], 1

; 248  : 	newLine.rgba	= line->rgba;

	mov	eax, DWORD PTR _line$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _newLine$[ebp+12], ecx

; 249  : 	newLine.xyz		= xyz;

	lea	edx, DWORD PTR _xyz$[ebp]
	mov	DWORD PTR _newLine$[ebp+8], edx

; 250  : 	newLine.nVerts	= 2;

	mov	DWORD PTR _newLine$[ebp+4], 2

; 251  : 
; 252  : 	xyzIdxPtr = line->xyz;

	mov	eax, DWORD PTR _line$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _xyzIdxPtr$[ebp], ecx

; 253  : 	end = xyzIdxPtr + line->nVerts - 1;

	mov	edx, DWORD PTR _line$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _xyzIdxPtr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4-4]
	mov	DWORD PTR _end$[ebp], edx

; 254  : 
; 255  : 	xyz[0] = TheStateStack.XformedPosPoolNext - TheStateStack.XformedPosPool;

	mov	eax, DWORD PTR ?XformedPosPoolNext@StateStackClass@@2PAUSpoint@@A ; StateStackClass::XformedPosPoolNext
	sub	eax, DWORD PTR ?XformedPosPool@StateStackClass@@2PAUSpoint@@A ; StateStackClass::XformedPosPool
	sar	eax, 4
	mov	ecx, 4
	imul	ecx, 0
	mov	DWORD PTR _xyz$[ebp+ecx], eax

; 256  : 	xyz[1] = xyz[0] + 1;

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _xyz$[ebp+edx]
	add	eax, 1
	mov	ecx, 4
	shl	ecx, 0
	mov	DWORD PTR _xyz$[ebp+ecx], eax

; 257  : 	v0.xyz	= xyz[0];

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _xyz$[ebp+edx]
	mov	DWORD PTR _v0$[ebp], eax

; 258  : 	v1.xyz	= xyz[1];

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _xyz$[ebp+ecx]
	mov	DWORD PTR _v1$[ebp], edx
$LN23@pvtClipPri:

; 259  : 	
; 260  : 	do {
; 261  : 		// Copy the relevant data to avoid clobbering it for any other lines which share it
; 262  : 		TheStateStack.XformedPosPool[v0.xyz]	= TheStateStack.XformedPosPool[xyzIdxPtr[0]];

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _xyzIdxPtr$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	shl	edx, 4
	add	edx, DWORD PTR ?XformedPosPool@StateStackClass@@2PAUSpoint@@A ; StateStackClass::XformedPosPool
	mov	eax, DWORD PTR _v0$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR ?XformedPosPool@StateStackClass@@2PAUSpoint@@A ; StateStackClass::XformedPosPool
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx

; 263  : 		TheStateStack.ClipInfoPool[v0.xyz]		= TheStateStack.ClipInfoPool[xyzIdxPtr[0]];

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _xyzIdxPtr$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	shl	edx, 4
	add	edx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	eax, DWORD PTR _v0$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx

; 264  : 		TheStateStack.XformedPosPool[v1.xyz]	= TheStateStack.XformedPosPool[xyzIdxPtr[1]];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _xyzIdxPtr$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	shl	edx, 4
	add	edx, DWORD PTR ?XformedPosPool@StateStackClass@@2PAUSpoint@@A ; StateStackClass::XformedPosPool
	mov	eax, DWORD PTR _v1$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR ?XformedPosPool@StateStackClass@@2PAUSpoint@@A ; StateStackClass::XformedPosPool
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx

; 265  : 		TheStateStack.ClipInfoPool[v1.xyz]		= TheStateStack.ClipInfoPool[xyzIdxPtr[1]];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _xyzIdxPtr$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	shl	edx, 4
	add	edx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	eax, DWORD PTR _v1$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx

; 266  : 
; 267  : 		// Clip near
; 268  : 		if        (TheStateStack.ClipInfoPool[v0.xyz].clipFlag & CLIP_NEAR) {

	mov	eax, DWORD PTR _v0$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	edx, DWORD PTR [ecx+eax]
	and	edx, 16					; 00000010H
	je	SHORT $LN20@pvtClipPri

; 269  : 			IntersectNear( &v0, &v1, &v0, FALSE, FALSE, FALSE );

	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _v0$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v0$[ebp]
	push	edx
	call	?IntersectNear@@YAXPAUClipVert@@00HHH@Z	; IntersectNear
	add	esp, 24					; 00000018H
	jmp	SHORT $LN19@pvtClipPri
$LN20@pvtClipPri:

; 270  : 		} else if (TheStateStack.ClipInfoPool[v1.xyz].clipFlag & CLIP_NEAR) {

	mov	eax, DWORD PTR _v1$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	edx, DWORD PTR [ecx+eax]
	and	edx, 16					; 00000010H
	je	SHORT $LN19@pvtClipPri

; 271  : 			IntersectNear( &v0, &v1, &v1, FALSE, FALSE, FALSE );

	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _v1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v0$[ebp]
	push	edx
	call	?IntersectNear@@YAXPAUClipVert@@00HHH@Z	; IntersectNear
	add	esp, 24					; 00000018H
$LN19@pvtClipPri:

; 272  : 		}
; 273  : 		if (TheStateStack.ClipInfoPool[v0.xyz].clipFlag & TheStateStack.ClipInfoPool[v1.xyz].clipFlag) {

	mov	eax, DWORD PTR _v0$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _v1$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	esi, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	eax, DWORD PTR [edx+eax]
	and	eax, DWORD PTR [esi+ecx]
	je	SHORT $LN17@pvtClipPri

; 274  : 			continue;

	jmp	$LN22@pvtClipPri
$LN17@pvtClipPri:

; 275  : 		}
; 276  : 
; 277  : 		// Clip bottom
; 278  : 		if        (TheStateStack.ClipInfoPool[v0.xyz].clipFlag & CLIP_BOTTOM) {

	mov	ecx, DWORD PTR _v0$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	eax, DWORD PTR [edx+ecx]
	and	eax, 8
	je	SHORT $LN16@pvtClipPri

; 279  : 			IntersectBottom( &v0, &v1, &v0, FALSE, FALSE, FALSE );

	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR _v0$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v1$[ebp]
	push	edx
	lea	eax, DWORD PTR _v0$[ebp]
	push	eax
	call	?IntersectBottom@@YAXPAUClipVert@@00HHH@Z ; IntersectBottom
	add	esp, 24					; 00000018H
	jmp	SHORT $LN15@pvtClipPri
$LN16@pvtClipPri:

; 280  : 		} else if (TheStateStack.ClipInfoPool[v1.xyz].clipFlag & CLIP_BOTTOM) {

	mov	ecx, DWORD PTR _v1$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	eax, DWORD PTR [edx+ecx]
	and	eax, 8
	je	SHORT $LN15@pvtClipPri

; 281  : 			IntersectBottom( &v0, &v1, &v1, FALSE, FALSE, FALSE );

	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR _v1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v1$[ebp]
	push	edx
	lea	eax, DWORD PTR _v0$[ebp]
	push	eax
	call	?IntersectBottom@@YAXPAUClipVert@@00HHH@Z ; IntersectBottom
	add	esp, 24					; 00000018H
$LN15@pvtClipPri:

; 282  : 		}
; 283  : 		if (TheStateStack.ClipInfoPool[v0.xyz].clipFlag & TheStateStack.ClipInfoPool[v1.xyz].clipFlag) {

	mov	ecx, DWORD PTR _v0$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _v1$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	esi, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	ecx, DWORD PTR [eax+ecx]
	and	ecx, DWORD PTR [esi+edx]
	je	SHORT $LN13@pvtClipPri

; 284  : 			continue;

	jmp	$LN22@pvtClipPri
$LN13@pvtClipPri:

; 285  : 		}
; 286  : 
; 287  : 		// Clip top
; 288  : 		if        (TheStateStack.ClipInfoPool[v0.xyz].clipFlag & CLIP_TOP) {

	mov	edx, DWORD PTR _v0$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	ecx, DWORD PTR [eax+edx]
	and	ecx, 4
	je	SHORT $LN12@pvtClipPri

; 289  : 			IntersectTop( &v0, &v1, &v0, FALSE, FALSE, FALSE );

	push	0
	push	0
	push	0
	lea	edx, DWORD PTR _v0$[ebp]
	push	edx
	lea	eax, DWORD PTR _v1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v0$[ebp]
	push	ecx
	call	?IntersectTop@@YAXPAUClipVert@@00HHH@Z	; IntersectTop
	add	esp, 24					; 00000018H
	jmp	SHORT $LN11@pvtClipPri
$LN12@pvtClipPri:

; 290  : 		} else if (TheStateStack.ClipInfoPool[v1.xyz].clipFlag & CLIP_TOP) {

	mov	edx, DWORD PTR _v1$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	ecx, DWORD PTR [eax+edx]
	and	ecx, 4
	je	SHORT $LN11@pvtClipPri

; 291  : 			IntersectTop( &v0, &v1, &v1, FALSE, FALSE, FALSE );

	push	0
	push	0
	push	0
	lea	edx, DWORD PTR _v1$[ebp]
	push	edx
	lea	eax, DWORD PTR _v1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v0$[ebp]
	push	ecx
	call	?IntersectTop@@YAXPAUClipVert@@00HHH@Z	; IntersectTop
	add	esp, 24					; 00000018H
$LN11@pvtClipPri:

; 292  : 		}
; 293  : 		if (TheStateStack.ClipInfoPool[v0.xyz].clipFlag & TheStateStack.ClipInfoPool[v1.xyz].clipFlag) {

	mov	edx, DWORD PTR _v0$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _v1$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	esi, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	edx, DWORD PTR [ecx+edx]
	and	edx, DWORD PTR [esi+eax]
	je	SHORT $LN9@pvtClipPri

; 294  : 			continue;

	jmp	$LN22@pvtClipPri
$LN9@pvtClipPri:

; 295  : 		}
; 296  : 
; 297  : 		// Clip right
; 298  : 		if        (TheStateStack.ClipInfoPool[v0.xyz].clipFlag & CLIP_RIGHT) {

	mov	eax, DWORD PTR _v0$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	edx, DWORD PTR [ecx+eax]
	and	edx, 2
	je	SHORT $LN8@pvtClipPri

; 299  : 			IntersectRight( &v0, &v1, &v0, FALSE, FALSE, FALSE );

	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _v0$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v0$[ebp]
	push	edx
	call	?IntersectRight@@YAXPAUClipVert@@00HHH@Z ; IntersectRight
	add	esp, 24					; 00000018H
	jmp	SHORT $LN7@pvtClipPri
$LN8@pvtClipPri:

; 300  : 		} else if (TheStateStack.ClipInfoPool[v1.xyz].clipFlag & CLIP_RIGHT) {

	mov	eax, DWORD PTR _v1$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	edx, DWORD PTR [ecx+eax]
	and	edx, 2
	je	SHORT $LN7@pvtClipPri

; 301  : 			IntersectRight( &v0, &v1, &v1, FALSE, FALSE, FALSE );

	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _v1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v0$[ebp]
	push	edx
	call	?IntersectRight@@YAXPAUClipVert@@00HHH@Z ; IntersectRight
	add	esp, 24					; 00000018H
$LN7@pvtClipPri:

; 302  : 		}
; 303  : 		if (TheStateStack.ClipInfoPool[v0.xyz].clipFlag & TheStateStack.ClipInfoPool[v1.xyz].clipFlag) {

	mov	eax, DWORD PTR _v0$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _v1$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	esi, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	eax, DWORD PTR [edx+eax]
	and	eax, DWORD PTR [esi+ecx]
	je	SHORT $LN5@pvtClipPri

; 304  : 			continue;

	jmp	$LN22@pvtClipPri
$LN5@pvtClipPri:

; 305  : 		}
; 306  : 
; 307  : 		// Clip left
; 308  : 		if        (TheStateStack.ClipInfoPool[v0.xyz].clipFlag & CLIP_LEFT) {

	mov	ecx, DWORD PTR _v0$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	eax, DWORD PTR [edx+ecx]
	and	eax, 1
	je	SHORT $LN4@pvtClipPri

; 309  : 			IntersectLeft( &v0, &v1, &v0, FALSE, FALSE, FALSE );

	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR _v0$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v1$[ebp]
	push	edx
	lea	eax, DWORD PTR _v0$[ebp]
	push	eax
	call	?IntersectLeft@@YAXPAUClipVert@@00HHH@Z	; IntersectLeft
	add	esp, 24					; 00000018H
	jmp	SHORT $LN3@pvtClipPri
$LN4@pvtClipPri:

; 310  : 		} else if (TheStateStack.ClipInfoPool[v1.xyz].clipFlag & CLIP_LEFT) {

	mov	ecx, DWORD PTR _v1$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	eax, DWORD PTR [edx+ecx]
	and	eax, 1
	je	SHORT $LN3@pvtClipPri

; 311  : 			IntersectLeft( &v0, &v1, &v1, FALSE, FALSE, FALSE );

	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR _v1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v1$[ebp]
	push	edx
	lea	eax, DWORD PTR _v0$[ebp]
	push	eax
	call	?IntersectLeft@@YAXPAUClipVert@@00HHH@Z	; IntersectLeft
	add	esp, 24					; 00000018H
$LN3@pvtClipPri:

; 312  : 		}
; 313  : 		if (TheStateStack.ClipInfoPool[v0.xyz].clipFlag & TheStateStack.ClipInfoPool[v1.xyz].clipFlag) {

	mov	ecx, DWORD PTR _v0$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _v1$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	esi, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	ecx, DWORD PTR [eax+ecx]
	and	ecx, DWORD PTR [esi+edx]
	je	SHORT $LN1@pvtClipPri

; 314  : 			continue;

	jmp	SHORT $LN22@pvtClipPri
$LN1@pvtClipPri:

; 315  : 		}
; 316  : 
; 317  : 		// Draw the line
; 318  : 		xyz[0] = v0.xyz;

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _v0$[ebp]
	mov	DWORD PTR _xyz$[ebp+edx], eax

; 319  : 		xyz[1] = v1.xyz;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _v1$[ebp]
	mov	DWORD PTR _xyz$[ebp+ecx], edx

; 320  : 		drawFn( &newLine );

	lea	eax, DWORD PTR _newLine$[ebp]
	push	eax
	call	DWORD PTR _drawFn$[ebp]
	add	esp, 4
$LN22@pvtClipPri:

; 321  : 
; 322  : 	} while (++xyzIdxPtr < end);

	mov	ecx, DWORD PTR _xyzIdxPtr$[ebp]
	add	ecx, 4
	mov	DWORD PTR _xyzIdxPtr$[ebp], ecx
	mov	edx, DWORD PTR _xyzIdxPtr$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jb	$LN23@pvtClipPri

; 323  : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?pvtClipPrimLine@@YAXPAUPrimLineFC@@P6AXPAUPrim@@@Z@Z ENDP ; pvtClipPrimLine
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_end$ = -156						; size = 4
_newPoint$ = -152					; size = 16
_xyzIdxPtr$ = -136					; size = 4
_xyz$ = -132						; size = 128
__$ArrayPad$ = -4					; size = 4
_point$ = 8						; size = 4
_drawFn$ = 12						; size = 4
?pvtClipPrimPoint@@YAXPAUPrimPointFC@@P6AXPAUPrim@@@Z@Z PROC ; pvtClipPrimPoint

; 194  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 156				; 0000009cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 195  : 	PrimPointFC	newPoint;
; 196  : 	int			xyz[MAX_VERTS_PER_POLYGON];
; 197  : 	int			*xyzIdxPtr, *end;
; 198  : 
; 199  : 	ShiAssert( point->nVerts > 0 );
; 200  : 
; 201  : 
; 202  : 
; 203  : 	xyzIdxPtr = point->xyz;

	mov	eax, DWORD PTR _point$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _xyzIdxPtr$[ebp], ecx

; 204  : 	end = xyzIdxPtr + point->nVerts;

	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _xyzIdxPtr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _end$[ebp], edx

; 205  : 	newPoint.nVerts = 0;

	mov	DWORD PTR _newPoint$[ebp+4], 0
$LN5@pvtClipPri:

; 206  : 
; 207  : 	do {
; 208  : 		if (TheStateStack.ClipInfoPool[*xyzIdxPtr].clipFlag == 0) {

	mov	eax, DWORD PTR _xyzIdxPtr$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 4
	mov	edx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	cmp	DWORD PTR [edx+ecx], 0
	jne	SHORT $LN2@pvtClipPri

; 209  : 			ShiAssert( newPoint.nVerts < MAX_VERTS_PER_POLYGON );
; 210  : 			xyz[newPoint.nVerts] = *xyzIdxPtr;

	mov	eax, DWORD PTR _newPoint$[ebp+4]
	mov	ecx, DWORD PTR _xyzIdxPtr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _xyz$[ebp+eax*4], edx

; 211  : 			newPoint.nVerts++;

	mov	eax, DWORD PTR _newPoint$[ebp+4]
	add	eax, 1
	mov	DWORD PTR _newPoint$[ebp+4], eax
$LN2@pvtClipPri:

; 212  : 		}
; 213  : 		xyzIdxPtr++;

	mov	ecx, DWORD PTR _xyzIdxPtr$[ebp]
	add	ecx, 4
	mov	DWORD PTR _xyzIdxPtr$[ebp], ecx

; 214  : 	} while (xyzIdxPtr < end);

	mov	edx, DWORD PTR _xyzIdxPtr$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jb	SHORT $LN5@pvtClipPri

; 215  : 
; 216  : 	if (newPoint.nVerts) {

	cmp	DWORD PTR _newPoint$[ebp+4], 0
	je	SHORT $LN6@pvtClipPri

; 217  : 		newPoint.type	= PointF;

	mov	DWORD PTR _newPoint$[ebp], 0

; 218  : 		newPoint.rgba	= point->rgba;

	mov	eax, DWORD PTR _point$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _newPoint$[ebp+12], ecx

; 219  : 		newPoint.xyz	= xyz;

	lea	edx, DWORD PTR _xyz$[ebp]
	mov	DWORD PTR _newPoint$[ebp+8], edx

; 220  : 		drawFn( &newPoint );

	lea	eax, DWORD PTR _newPoint$[ebp]
	push	eax
	call	DWORD PTR _drawFn$[ebp]
	add	esp, 4
$LN6@pvtClipPri:

; 221  : 	}
; 222  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?pvtClipPrimPoint@@YAXPAUPrimPointFC@@P6AXPAUPrim@@@Z@Z ENDP ; pvtClipPrimPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
_v$ = 16						; size = 4
_color$ = 20						; size = 4
_light$ = 24						; size = 4
_tex$ = 28						; size = 4
?IntersectLeft@@YAXPAUClipVert@@00HHH@Z PROC		; IntersectLeft

; 184  : {

	push	ebp
	mov	ebp, esp

; 185  : 	IntersectSide( v1, v2, v, color, light, tex, CLIP_LEFT );

	push	1
	mov	eax, DWORD PTR _tex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _light$[ebp]
	push	ecx
	mov	edx, DWORD PTR _color$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v1$[ebp]
	push	edx
	call	?IntersectSide@@YAXPAUClipVert@@00HHHK@Z ; IntersectSide
	add	esp, 28					; 0000001cH

; 186  : }

	pop	ebp
	ret	0
?IntersectLeft@@YAXPAUClipVert@@00HHH@Z ENDP		; IntersectLeft
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
_v$ = 16						; size = 4
_color$ = 20						; size = 4
_light$ = 24						; size = 4
_tex$ = 28						; size = 4
?IntersectRight@@YAXPAUClipVert@@00HHH@Z PROC		; IntersectRight

; 175  : {

	push	ebp
	mov	ebp, esp

; 176  : 	IntersectSide( v1, v2, v, color, light, tex, CLIP_RIGHT );

	push	2
	mov	eax, DWORD PTR _tex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _light$[ebp]
	push	ecx
	mov	edx, DWORD PTR _color$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v1$[ebp]
	push	edx
	call	?IntersectSide@@YAXPAUClipVert@@00HHHK@Z ; IntersectSide
	add	esp, 28					; 0000001cH

; 177  : }

	pop	ebp
	ret	0
?IntersectRight@@YAXPAUClipVert@@00HHH@Z ENDP		; IntersectRight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
_v$ = 16						; size = 4
_color$ = 20						; size = 4
_light$ = 24						; size = 4
_tex$ = 28						; size = 4
?IntersectTop@@YAXPAUClipVert@@00HHH@Z PROC		; IntersectTop

; 166  : {

	push	ebp
	mov	ebp, esp

; 167  : 	IntersectSide( v1, v2, v, color, light, tex, CLIP_TOP );

	push	4
	mov	eax, DWORD PTR _tex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _light$[ebp]
	push	ecx
	mov	edx, DWORD PTR _color$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v1$[ebp]
	push	edx
	call	?IntersectSide@@YAXPAUClipVert@@00HHHK@Z ; IntersectSide
	add	esp, 28					; 0000001cH

; 168  : }

	pop	ebp
	ret	0
?IntersectTop@@YAXPAUClipVert@@00HHH@Z ENDP		; IntersectTop
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
_v$ = 16						; size = 4
_color$ = 20						; size = 4
_light$ = 24						; size = 4
_tex$ = 28						; size = 4
?IntersectBottom@@YAXPAUClipVert@@00HHH@Z PROC		; IntersectBottom

; 157  : {

	push	ebp
	mov	ebp, esp

; 158  : 	IntersectSide( v1, v2, v, color, light, tex, CLIP_BOTTOM );

	push	8
	mov	eax, DWORD PTR _tex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _light$[ebp]
	push	ecx
	mov	edx, DWORD PTR _color$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v1$[ebp]
	push	edx
	call	?IntersectSide@@YAXPAUClipVert@@00HHHK@Z ; IntersectSide
	add	esp, 28					; 0000001cH

; 159  : }

	pop	ebp
	ret	0
?IntersectBottom@@YAXPAUClipVert@@00HHH@Z ENDP		; IntersectBottom
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_OneOverZ$ = -32					; size = 4
_y$ = -28						; size = 4
_dy$ = -24						; size = 4
_dx$ = -20						; size = 4
_dz$ = -16						; size = 4
_x$ = -12						; size = 4
_z$ = -8						; size = 4
_t$ = -4						; size = 4
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
_v$ = 16						; size = 4
_color$ = 20						; size = 4
_light$ = 24						; size = 4
_tex$ = 28						; size = 4
_flag$ = 32						; size = 4
?IntersectSide@@YAXPAUClipVert@@00HHHK@Z PROC		; IntersectSide

; 96   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	push	edi

; 97   : 	float	x, y, z, t;
; 98   : 	float	dx, dy, dz;	
; 99   : 
; 100  : 	// Compute the parametric location of the intersection of the edge and the clip plane
; 101  : 	dx = TheStateStack.ClipInfoPool[v2->xyz].csX - TheStateStack.ClipInfoPool[v1->xyz].csX;

	mov	eax, DWORD PTR _v2$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 4
	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 4
	mov	edx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	esi, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	movss	xmm0, DWORD PTR [edx+ecx+4]
	subss	xmm0, DWORD PTR [esi+eax+4]
	movss	DWORD PTR _dx$[ebp], xmm0

; 102  : 	dy = TheStateStack.ClipInfoPool[v2->xyz].csY - TheStateStack.ClipInfoPool[v1->xyz].csY;

	mov	eax, DWORD PTR _v2$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 4
	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 4
	mov	edx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	esi, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	movss	xmm0, DWORD PTR [edx+ecx+8]
	subss	xmm0, DWORD PTR [esi+eax+8]
	movss	DWORD PTR _dy$[ebp], xmm0

; 103  : 	dz = TheStateStack.ClipInfoPool[v2->xyz].csZ - TheStateStack.ClipInfoPool[v1->xyz].csZ;

	mov	eax, DWORD PTR _v2$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 4
	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 4
	mov	edx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	esi, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	movss	xmm0, DWORD PTR [edx+ecx+12]
	subss	xmm0, DWORD PTR [esi+eax+12]
	movss	DWORD PTR _dz$[ebp], xmm0

; 104  : 	t = ComputeT(TheStateStack.ClipInfoPool[v1->xyz].csX, 
; 105  : 				 TheStateStack.ClipInfoPool[v1->xyz].csY, 
; 106  : 				 TheStateStack.ClipInfoPool[v1->xyz].csZ, 
; 107  : 				 dx,
; 108  : 				 dy,
; 109  : 				 dz,
; 110  : 				 flag );

	mov	eax, DWORD PTR _flag$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _dz$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _dx$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx]
	shl	edx, 4
	mov	eax, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx+12]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx]
	shl	edx, 4
	mov	eax, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx+8]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx]
	shl	edx, 4
	mov	eax, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx+4]
	movss	DWORD PTR [esp], xmm0
	call	?ComputeT@@YAMMMMMMMK@Z			; ComputeT
	add	esp, 28					; 0000001cH
	fstp	DWORD PTR _t$[ebp]

; 111  : 	ShiAssert( (t >= -0.002f) && (t <= 1.002f) );
; 112  : 	
; 113  : 	// Compute the camera space intersection point
; 114  : 	TheStateStack.ClipInfoPool[v->xyz].csZ = z = TheStateStack.ClipInfoPool[v1->xyz].csZ + t * (dz);

	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx]
	shl	edx, 4
	movss	xmm0, DWORD PTR _t$[ebp]
	mulss	xmm0, DWORD PTR _dz$[ebp]
	mov	eax, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	addss	xmm0, DWORD PTR [eax+edx+12]
	movss	DWORD PTR _z$[ebp], xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	shl	edx, 4
	mov	eax, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax+edx+12], xmm0

; 115  : 	TheStateStack.ClipInfoPool[v->xyz].csX = x = TheStateStack.ClipInfoPool[v1->xyz].csX + t * (dx);	// Note: either dx or dy is used only once, so could

	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx]
	shl	edx, 4
	movss	xmm0, DWORD PTR _t$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	mov	eax, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	addss	xmm0, DWORD PTR [eax+edx+4]
	movss	DWORD PTR _x$[ebp], xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	shl	edx, 4
	mov	eax, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax+edx+4], xmm0

; 116  : 	TheStateStack.ClipInfoPool[v->xyz].csY = y = TheStateStack.ClipInfoPool[v1->xyz].csY + t * (dy);	// be avoided, but this way, the code is more standardized...

	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx]
	shl	edx, 4
	movss	xmm0, DWORD PTR _t$[ebp]
	mulss	xmm0, DWORD PTR _dy$[ebp]
	mov	eax, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	addss	xmm0, DWORD PTR [eax+edx+8]
	movss	DWORD PTR _y$[ebp], xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	shl	edx, 4
	mov	eax, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax+edx+8], xmm0

; 117  : 
; 118  : 	// Now interpolate any other vertex parameters required
; 119  : 	if (color) {

	cmp	DWORD PTR _color$[ebp], 0
	je	$LN5@IntersectS

; 120  : 		TheColorBank.ColorPool[v->rgba].r = TheColorBank.ColorPool[v1->rgba].r +
; 121  : 			t * (TheColorBank.ColorPool[v2->rgba].r - TheColorBank.ColorPool[v1->rgba].r);

	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shl	edx, 4
	mov	eax, DWORD PTR _v2$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 4
	mov	eax, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR [eax+4]
	shl	eax, 4
	mov	esi, DWORD PTR ?ColorPool@ColorBankClass@@2PAUPcolor@@A ; ColorBankClass::ColorPool
	mov	edi, DWORD PTR ?ColorPool@ColorBankClass@@2PAUPcolor@@A ; ColorBankClass::ColorPool
	movss	xmm0, DWORD PTR [esi+ecx]
	subss	xmm0, DWORD PTR [edi+eax]
	mulss	xmm0, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR ?ColorPool@ColorBankClass@@2PAUPcolor@@A ; ColorBankClass::ColorPool
	addss	xmm0, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 4
	mov	ecx, DWORD PTR ?ColorPool@ColorBankClass@@2PAUPcolor@@A ; ColorBankClass::ColorPool
	movss	DWORD PTR [ecx+eax], xmm0

; 122  : 		TheColorBank.ColorPool[v->rgba].g = TheColorBank.ColorPool[v1->rgba].g +
; 123  : 			t * (TheColorBank.ColorPool[v2->rgba].g - TheColorBank.ColorPool[v1->rgba].g);

	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 4
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shl	edx, 4
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	shl	ecx, 4
	mov	esi, DWORD PTR ?ColorPool@ColorBankClass@@2PAUPcolor@@A ; ColorBankClass::ColorPool
	mov	edi, DWORD PTR ?ColorPool@ColorBankClass@@2PAUPcolor@@A ; ColorBankClass::ColorPool
	movss	xmm0, DWORD PTR [esi+edx+4]
	subss	xmm0, DWORD PTR [edi+ecx+4]
	mulss	xmm0, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR ?ColorPool@ColorBankClass@@2PAUPcolor@@A ; ColorBankClass::ColorPool
	addss	xmm0, DWORD PTR [edx+eax+4]
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 4
	mov	edx, DWORD PTR ?ColorPool@ColorBankClass@@2PAUPcolor@@A ; ColorBankClass::ColorPool
	movss	DWORD PTR [edx+ecx+4], xmm0

; 124  : 		TheColorBank.ColorPool[v->rgba].b = TheColorBank.ColorPool[v1->rgba].b +
; 125  : 			t * (TheColorBank.ColorPool[v2->rgba].b - TheColorBank.ColorPool[v1->rgba].b);

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 4
	mov	edx, DWORD PTR _v2$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 4
	mov	edx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [edx+4]
	shl	edx, 4
	mov	esi, DWORD PTR ?ColorPool@ColorBankClass@@2PAUPcolor@@A ; ColorBankClass::ColorPool
	mov	edi, DWORD PTR ?ColorPool@ColorBankClass@@2PAUPcolor@@A ; ColorBankClass::ColorPool
	movss	xmm0, DWORD PTR [esi+eax+8]
	subss	xmm0, DWORD PTR [edi+edx+8]
	mulss	xmm0, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR ?ColorPool@ColorBankClass@@2PAUPcolor@@A ; ColorBankClass::ColorPool
	addss	xmm0, DWORD PTR [eax+ecx+8]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shl	edx, 4
	mov	eax, DWORD PTR ?ColorPool@ColorBankClass@@2PAUPcolor@@A ; ColorBankClass::ColorPool
	movss	DWORD PTR [eax+edx+8], xmm0

; 126  : 		TheColorBank.ColorPool[v->rgba].a = TheColorBank.ColorPool[v1->rgba].a +
; 127  : 			t * (TheColorBank.ColorPool[v2->rgba].a - TheColorBank.ColorPool[v1->rgba].a);

	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shl	edx, 4
	mov	eax, DWORD PTR _v2$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 4
	mov	eax, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR [eax+4]
	shl	eax, 4
	mov	esi, DWORD PTR ?ColorPool@ColorBankClass@@2PAUPcolor@@A ; ColorBankClass::ColorPool
	mov	edi, DWORD PTR ?ColorPool@ColorBankClass@@2PAUPcolor@@A ; ColorBankClass::ColorPool
	movss	xmm0, DWORD PTR [esi+ecx+12]
	subss	xmm0, DWORD PTR [edi+eax+12]
	mulss	xmm0, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR ?ColorPool@ColorBankClass@@2PAUPcolor@@A ; ColorBankClass::ColorPool
	addss	xmm0, DWORD PTR [ecx+edx+12]
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 4
	mov	ecx, DWORD PTR ?ColorPool@ColorBankClass@@2PAUPcolor@@A ; ColorBankClass::ColorPool
	movss	DWORD PTR [ecx+eax+12], xmm0
$LN5@IntersectS:

; 128  : 	}
; 129  : 	if (light) {

	cmp	DWORD PTR _light$[ebp], 0
	je	SHORT $LN4@IntersectS

; 130  : 		TheStateStack.IntensityPool[v->I] = TheStateStack.IntensityPool[v1->I] +
; 131  : 			t * (TheStateStack.IntensityPool[v2->I] - TheStateStack.IntensityPool[v1->I]);

	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	esi, DWORD PTR ?IntensityPool@StateStackClass@@2PAMA ; StateStackClass::IntensityPool
	mov	edi, DWORD PTR ?IntensityPool@StateStackClass@@2PAMA ; StateStackClass::IntensityPool
	movss	xmm0, DWORD PTR [esi+edx*4]
	subss	xmm0, DWORD PTR [edi+ecx*4]
	mulss	xmm0, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR ?IntensityPool@StateStackClass@@2PAMA ; StateStackClass::IntensityPool
	addss	xmm0, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR ?IntensityPool@StateStackClass@@2PAMA ; StateStackClass::IntensityPool
	movss	DWORD PTR [edx+ecx*4], xmm0
$LN4@IntersectS:

; 132  : 	}
; 133  : 	if (tex) {

	cmp	DWORD PTR _tex$[ebp], 0
	je	SHORT $LN3@IntersectS

; 134  : 		v->uv.u = v1->uv.u + t * (v2->uv.u - v1->uv.u);

	mov	eax, DWORD PTR _v2$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	subss	xmm0, DWORD PTR [ecx+12]
	mulss	xmm0, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	addss	xmm0, DWORD PTR [edx+12]
	mov	eax, DWORD PTR _v$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 135  : 		v->uv.v = v1->uv.v + t * (v2->uv.v - v1->uv.v);

	mov	ecx, DWORD PTR _v2$[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	movss	xmm0, DWORD PTR [ecx+16]
	subss	xmm0, DWORD PTR [edx+16]
	mulss	xmm0, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR _v1$[ebp]
	addss	xmm0, DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR [ecx+16], xmm0
$LN3@IntersectS:

; 136  : 	}
; 137  : 
; 138  : 	// Now determine if the point is out to the sides
; 139  : 	if (flag & (CLIP_TOP | CLIP_BOTTOM)) {

	mov	edx, DWORD PTR _flag$[ebp]
	and	edx, 12					; 0000000cH
	je	SHORT $LN2@IntersectS

; 140  : 		TheStateStack.ClipInfoPool[v->xyz].clipFlag = GetHorizontalClipFlags( x, z );

	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?GetHorizontalClipFlags@@YAKMM@Z	; GetHorizontalClipFlags
	add	esp, 8
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	shl	edx, 4
	mov	ecx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	DWORD PTR [ecx+edx], eax

; 141  : 	} else {

	jmp	SHORT $LN1@IntersectS
$LN2@IntersectS:

; 142  : 		TheStateStack.ClipInfoPool[v->xyz].clipFlag = ON_SCREEN;

	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 4
	mov	ecx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	DWORD PTR [ecx+eax], 0
$LN1@IntersectS:

; 143  : 	}
; 144  : 
; 145  : 	// Compute the screen space coordinates of the new point
; 146  : 	register float OneOverZ = 1.0f / z;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR _OneOverZ$[ebp], xmm0

; 147  : 	TheStateStack.XformedPosPool[v->xyz].z = z;

	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 4
	mov	ecx, DWORD PTR ?XformedPosPool@StateStackClass@@2PAUSpoint@@A ; StateStackClass::XformedPosPool
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [ecx+eax+8], xmm0

; 148  : 	TheStateStack.XformedPosPool[v->xyz].x = TheStateStack.XtoPixel( x * OneOverZ );

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _OneOverZ$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?XtoPixel@StateStackClass@@SAMM@Z	; StateStackClass::XtoPixel
	add	esp, 4
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 4
	mov	ecx, DWORD PTR ?XformedPosPool@StateStackClass@@2PAUSpoint@@A ; StateStackClass::XformedPosPool
	fstp	DWORD PTR [ecx+eax]

; 149  : 	TheStateStack.XformedPosPool[v->xyz].y = TheStateStack.YtoPixel( y * OneOverZ );

	movss	xmm0, DWORD PTR _y$[ebp]
	mulss	xmm0, DWORD PTR _OneOverZ$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?YtoPixel@StateStackClass@@SAMM@Z	; StateStackClass::YtoPixel
	add	esp, 4
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 4
	mov	ecx, DWORD PTR ?XformedPosPool@StateStackClass@@2PAUSpoint@@A ; StateStackClass::XformedPosPool
	fstp	DWORD PTR [ecx+eax+4]

; 150  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?IntersectSide@@YAXPAUClipVert@@00HHHK@Z ENDP		; IntersectSide
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
tv145 = -20						; size = 4
tv140 = -16						; size = 4
tv135 = -12						; size = 4
tv130 = -8						; size = 4
tv64 = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_dx$ = 20						; size = 4
_dy$ = 24						; size = 4
_dz$ = 28						; size = 4
_flag$ = 32						; size = 4
?ComputeT@@YAMMMMMMMK@Z PROC				; ComputeT

; 77   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 78   : 	switch (flag) {

	mov	eax, DWORD PTR _flag$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 7
	ja	$LN1@ComputeT
	mov	edx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN10@ComputeT[edx*4]
$LN5@ComputeT:

; 79   : 	  case CLIP_BOTTOM:
; 80   : 		return (y - z) / (dz - dy);

	movss	xmm0, DWORD PTR _y$[ebp]
	subss	xmm0, DWORD PTR _z$[ebp]
	movss	xmm1, DWORD PTR _dz$[ebp]
	subss	xmm1, DWORD PTR _dy$[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR tv130[ebp], xmm0
	fld	DWORD PTR tv130[ebp]
	jmp	SHORT $LN6@ComputeT
$LN4@ComputeT:

; 81   : 	  case CLIP_TOP:
; 82   : 		return (y + z) / (-dz - dy);

	movss	xmm0, DWORD PTR _y$[ebp]
	addss	xmm0, DWORD PTR _z$[ebp]
	movss	xmm1, DWORD PTR _dz$[ebp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	subss	xmm1, DWORD PTR _dy$[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR tv135[ebp], xmm0
	fld	DWORD PTR tv135[ebp]
	jmp	SHORT $LN6@ComputeT
$LN3@ComputeT:

; 83   : 	  case CLIP_RIGHT:
; 84   : 		return (x - z) / (dz - dx);

	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR _z$[ebp]
	movss	xmm1, DWORD PTR _dz$[ebp]
	subss	xmm1, DWORD PTR _dx$[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR tv140[ebp], xmm0
	fld	DWORD PTR tv140[ebp]
	jmp	SHORT $LN6@ComputeT
$LN2@ComputeT:

; 85   : 	  case CLIP_LEFT:
; 86   : 		return (x + z) / (-dz - dx);

	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR _z$[ebp]
	movss	xmm1, DWORD PTR _dz$[ebp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	subss	xmm1, DWORD PTR _dx$[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR tv145[ebp], xmm0
	fld	DWORD PTR tv145[ebp]
	jmp	SHORT $LN6@ComputeT
$LN1@ComputeT:

; 87   : 	  default:
; 88   : 		ShiWarning( "Bad clip type!" );
; 89   : 		return 1.0f;

	fld1
$LN6@ComputeT:

; 90   : 	}
; 91   : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@ComputeT:
	DD	$LN2@ComputeT
	DD	$LN3@ComputeT
	DD	$LN1@ComputeT
	DD	$LN4@ComputeT
	DD	$LN1@ComputeT
	DD	$LN1@ComputeT
	DD	$LN1@ComputeT
	DD	$LN5@ComputeT
?ComputeT@@YAMMMMMMMK@Z ENDP				; ComputeT
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_OneOverZ$ = -20					; size = 4
_y$ = -16						; size = 4
_x$ = -12						; size = 4
_z$ = -8						; size = 4
_t$ = -4						; size = 4
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
_v$ = 16						; size = 4
_color$ = 20						; size = 4
_light$ = 24						; size = 4
_tex$ = 28						; size = 4
?IntersectNear@@YAXPAUClipVert@@00HHH@Z PROC		; IntersectNear

; 26   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	push	edi

; 27   : 	float	x, y, z, t;
; 28   : 
; 29   : 	// Compute the parametric location of the intersection of the edge and the clip plane
; 30   : 	t = (NEAR_CLIP_DISTANCE                      - TheStateStack.ClipInfoPool[v1->xyz].csZ) / 
; 31   : 		(TheStateStack.ClipInfoPool[v2->xyz].csZ - TheStateStack.ClipInfoPool[v1->xyz].csZ);

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 4
	mov	edx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	movss	xmm0, DWORD PTR _NEAR_CLIP_DISTANCE
	subss	xmm0, DWORD PTR [edx+ecx+12]
	mov	eax, DWORD PTR _v2$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 4
	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 4
	mov	edx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	esi, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	movss	xmm1, DWORD PTR [edx+ecx+12]
	subss	xmm1, DWORD PTR [esi+eax+12]
	divss	xmm0, xmm1
	movss	DWORD PTR _t$[ebp], xmm0

; 32   : 	ShiAssert( (t >= -0.001f) && (t <= 1.001f) );
; 33   : 	
; 34   : 	// Compute the camera space intersection point
; 35   : 	TheStateStack.ClipInfoPool[v->xyz].csZ = z = NEAR_CLIP_DISTANCE;

	movss	xmm0, DWORD PTR _NEAR_CLIP_DISTANCE
	movss	DWORD PTR _z$[ebp], xmm0
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 4
	mov	edx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [edx+ecx+12], xmm0

; 36   : 
; 37   : 	TheStateStack.ClipInfoPool[v->xyz].csX = x = TheStateStack.ClipInfoPool[v1->xyz].csX +
; 38   : 		t * (TheStateStack.ClipInfoPool[v2->xyz].csX - TheStateStack.ClipInfoPool[v1->xyz].csX);

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 4
	mov	edx, DWORD PTR _v2$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 4
	mov	edx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [edx]
	shl	edx, 4
	mov	esi, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	edi, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	movss	xmm0, DWORD PTR [esi+eax+4]
	subss	xmm0, DWORD PTR [edi+edx+4]
	mulss	xmm0, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	addss	xmm0, DWORD PTR [eax+ecx+4]
	movss	DWORD PTR _x$[ebp], xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	shl	edx, 4
	mov	eax, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax+edx+4], xmm0

; 39   : 	TheStateStack.ClipInfoPool[v->xyz].csY = y = TheStateStack.ClipInfoPool[v1->xyz].csY +
; 40   : 		t * (TheStateStack.ClipInfoPool[v2->xyz].csY - TheStateStack.ClipInfoPool[v1->xyz].csY);

	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx]
	shl	edx, 4
	mov	eax, DWORD PTR _v2$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 4
	mov	eax, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR [eax]
	shl	eax, 4
	mov	esi, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	edi, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	movss	xmm0, DWORD PTR [esi+ecx+8]
	subss	xmm0, DWORD PTR [edi+eax+8]
	mulss	xmm0, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	addss	xmm0, DWORD PTR [ecx+edx+8]
	movss	DWORD PTR _y$[ebp], xmm0
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 4
	mov	ecx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [ecx+eax+8], xmm0

; 41   : 
; 42   : 	// Now interpolate any other vertex parameters required
; 43   : 	if (color) {

	cmp	DWORD PTR _color$[ebp], 0
	je	$LN3@IntersectN

; 44   : 		TheColorBank.ColorPool[v->rgba].r = TheColorBank.ColorPool[v1->rgba].r +
; 45   : 			t * (TheColorBank.ColorPool[v2->rgba].r - TheColorBank.ColorPool[v1->rgba].r);

	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 4
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shl	edx, 4
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	shl	ecx, 4
	mov	esi, DWORD PTR ?ColorPool@ColorBankClass@@2PAUPcolor@@A ; ColorBankClass::ColorPool
	mov	edi, DWORD PTR ?ColorPool@ColorBankClass@@2PAUPcolor@@A ; ColorBankClass::ColorPool
	movss	xmm0, DWORD PTR [esi+edx]
	subss	xmm0, DWORD PTR [edi+ecx]
	mulss	xmm0, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR ?ColorPool@ColorBankClass@@2PAUPcolor@@A ; ColorBankClass::ColorPool
	addss	xmm0, DWORD PTR [edx+eax]
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 4
	mov	edx, DWORD PTR ?ColorPool@ColorBankClass@@2PAUPcolor@@A ; ColorBankClass::ColorPool
	movss	DWORD PTR [edx+ecx], xmm0

; 46   : 		TheColorBank.ColorPool[v->rgba].g = TheColorBank.ColorPool[v1->rgba].g +
; 47   : 			t * (TheColorBank.ColorPool[v2->rgba].g - TheColorBank.ColorPool[v1->rgba].g);

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 4
	mov	edx, DWORD PTR _v2$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 4
	mov	edx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [edx+4]
	shl	edx, 4
	mov	esi, DWORD PTR ?ColorPool@ColorBankClass@@2PAUPcolor@@A ; ColorBankClass::ColorPool
	mov	edi, DWORD PTR ?ColorPool@ColorBankClass@@2PAUPcolor@@A ; ColorBankClass::ColorPool
	movss	xmm0, DWORD PTR [esi+eax+4]
	subss	xmm0, DWORD PTR [edi+edx+4]
	mulss	xmm0, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR ?ColorPool@ColorBankClass@@2PAUPcolor@@A ; ColorBankClass::ColorPool
	addss	xmm0, DWORD PTR [eax+ecx+4]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shl	edx, 4
	mov	eax, DWORD PTR ?ColorPool@ColorBankClass@@2PAUPcolor@@A ; ColorBankClass::ColorPool
	movss	DWORD PTR [eax+edx+4], xmm0

; 48   : 		TheColorBank.ColorPool[v->rgba].b = TheColorBank.ColorPool[v1->rgba].b +
; 49   : 			t * (TheColorBank.ColorPool[v2->rgba].b - TheColorBank.ColorPool[v1->rgba].b);

	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shl	edx, 4
	mov	eax, DWORD PTR _v2$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 4
	mov	eax, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR [eax+4]
	shl	eax, 4
	mov	esi, DWORD PTR ?ColorPool@ColorBankClass@@2PAUPcolor@@A ; ColorBankClass::ColorPool
	mov	edi, DWORD PTR ?ColorPool@ColorBankClass@@2PAUPcolor@@A ; ColorBankClass::ColorPool
	movss	xmm0, DWORD PTR [esi+ecx+8]
	subss	xmm0, DWORD PTR [edi+eax+8]
	mulss	xmm0, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR ?ColorPool@ColorBankClass@@2PAUPcolor@@A ; ColorBankClass::ColorPool
	addss	xmm0, DWORD PTR [ecx+edx+8]
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 4
	mov	ecx, DWORD PTR ?ColorPool@ColorBankClass@@2PAUPcolor@@A ; ColorBankClass::ColorPool
	movss	DWORD PTR [ecx+eax+8], xmm0

; 50   : 		TheColorBank.ColorPool[v->rgba].a = TheColorBank.ColorPool[v1->rgba].a +
; 51   : 			t * (TheColorBank.ColorPool[v2->rgba].a - TheColorBank.ColorPool[v1->rgba].a);

	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 4
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shl	edx, 4
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	shl	ecx, 4
	mov	esi, DWORD PTR ?ColorPool@ColorBankClass@@2PAUPcolor@@A ; ColorBankClass::ColorPool
	mov	edi, DWORD PTR ?ColorPool@ColorBankClass@@2PAUPcolor@@A ; ColorBankClass::ColorPool
	movss	xmm0, DWORD PTR [esi+edx+12]
	subss	xmm0, DWORD PTR [edi+ecx+12]
	mulss	xmm0, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR ?ColorPool@ColorBankClass@@2PAUPcolor@@A ; ColorBankClass::ColorPool
	addss	xmm0, DWORD PTR [edx+eax+12]
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 4
	mov	edx, DWORD PTR ?ColorPool@ColorBankClass@@2PAUPcolor@@A ; ColorBankClass::ColorPool
	movss	DWORD PTR [edx+ecx+12], xmm0
$LN3@IntersectN:

; 52   : 	}
; 53   : 	if (light) {

	cmp	DWORD PTR _light$[ebp], 0
	je	SHORT $LN2@IntersectN

; 54   : 		TheStateStack.IntensityPool[v->I] = TheStateStack.IntensityPool[v1->I] +
; 55   : 			t * (TheStateStack.IntensityPool[v2->I] - TheStateStack.IntensityPool[v1->I]);

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _v2$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	esi, DWORD PTR ?IntensityPool@StateStackClass@@2PAMA ; StateStackClass::IntensityPool
	mov	edi, DWORD PTR ?IntensityPool@StateStackClass@@2PAMA ; StateStackClass::IntensityPool
	movss	xmm0, DWORD PTR [esi+eax*4]
	subss	xmm0, DWORD PTR [edi+edx*4]
	mulss	xmm0, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR ?IntensityPool@StateStackClass@@2PAMA ; StateStackClass::IntensityPool
	addss	xmm0, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR ?IntensityPool@StateStackClass@@2PAMA ; StateStackClass::IntensityPool
	movss	DWORD PTR [eax+edx*4], xmm0
$LN2@IntersectN:

; 56   : 	}
; 57   : 	if (tex) {

	cmp	DWORD PTR _tex$[ebp], 0
	je	SHORT $LN1@IntersectN

; 58   : 		v->uv.u = v1->uv.u + t * (v2->uv.u - v1->uv.u);

	mov	ecx, DWORD PTR _v2$[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	movss	xmm0, DWORD PTR [ecx+12]
	subss	xmm0, DWORD PTR [edx+12]
	mulss	xmm0, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR _v1$[ebp]
	addss	xmm0, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 59   : 		v->uv.v = v1->uv.v + t * (v2->uv.v - v1->uv.v);

	mov	edx, DWORD PTR _v2$[ebp]
	mov	eax, DWORD PTR _v1$[ebp]
	movss	xmm0, DWORD PTR [edx+16]
	subss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	addss	xmm0, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _v$[ebp]
	movss	DWORD PTR [edx+16], xmm0
$LN1@IntersectN:

; 60   : 	}
; 61   : 
; 62   : 	// Now determine if the point is out to the sides
; 63   : 	TheStateStack.ClipInfoPool[v->xyz].clipFlag  = GetHorizontalClipFlags( x, z );

	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?GetHorizontalClipFlags@@YAKMM@Z	; GetHorizontalClipFlags
	add	esp, 8
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	shl	edx, 4
	mov	ecx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	DWORD PTR [ecx+edx], eax

; 64   : 	TheStateStack.ClipInfoPool[v->xyz].clipFlag |= GetVerticalClipFlags(   y, z );

	mov	edx, DWORD PTR _v$[ebp]
	mov	esi, DWORD PTR [edx]
	shl	esi, 4
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?GetVerticalClipFlags@@YAKMM@Z		; GetVerticalClipFlags
	add	esp, 8
	mov	ecx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	or	eax, DWORD PTR [ecx+esi]
	mov	edx, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx]
	shl	ecx, 4
	mov	edx, DWORD PTR ?ClipInfoPool@StateStackClass@@2PAUPclipInfo@@A ; StateStackClass::ClipInfoPool
	mov	DWORD PTR [edx+ecx], eax

; 65   : 
; 66   : 	// Compute the screen space coordinates of the new point
; 67   : 	register float OneOverZ = 1.0f / z;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR _OneOverZ$[ebp], xmm0

; 68   : 	TheStateStack.XformedPosPool[v->xyz].z = z;

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 4
	mov	edx, DWORD PTR ?XformedPosPool@StateStackClass@@2PAUSpoint@@A ; StateStackClass::XformedPosPool
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [edx+ecx+8], xmm0

; 69   : 	TheStateStack.XformedPosPool[v->xyz].x = TheStateStack.XtoPixel( x * OneOverZ );

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _OneOverZ$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?XtoPixel@StateStackClass@@SAMM@Z	; StateStackClass::XtoPixel
	add	esp, 4
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 4
	mov	edx, DWORD PTR ?XformedPosPool@StateStackClass@@2PAUSpoint@@A ; StateStackClass::XformedPosPool
	fstp	DWORD PTR [edx+ecx]

; 70   : 	TheStateStack.XformedPosPool[v->xyz].y = TheStateStack.YtoPixel( y * OneOverZ );

	movss	xmm0, DWORD PTR _y$[ebp]
	mulss	xmm0, DWORD PTR _OneOverZ$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?YtoPixel@StateStackClass@@SAMM@Z	; StateStackClass::YtoPixel
	add	esp, 4
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 4
	mov	edx, DWORD PTR ?XformedPosPool@StateStackClass@@2PAUSpoint@@A ; StateStackClass::XformedPosPool
	fstp	DWORD PTR [edx+ecx+4]

; 71   : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?IntersectNear@@YAXPAUClipVert@@00HHH@Z ENDP		; IntersectNear
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\clipflags.h
_TEXT	SEGMENT
tv73 = -4						; size = 4
_y$ = 8							; size = 4
_z$ = 12						; size = 4
?GetVerticalClipFlags@@YAKMM@Z PROC			; GetVerticalClipFlags

; 48   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 49   : 	if ( fabs(y) > z ) {

	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv73[ebp]
	movss	xmm0, DWORD PTR tv73[ebp]
	comiss	xmm0, DWORD PTR _z$[ebp]
	jbe	SHORT $LN1@GetVertica

; 50   : 		if ( y > z ) {

	movss	xmm0, DWORD PTR _y$[ebp]
	comiss	xmm0, DWORD PTR _z$[ebp]
	jbe	SHORT $LN2@GetVertica

; 51   : 			return CLIP_BOTTOM;

	mov	eax, 8
	jmp	SHORT $LN4@GetVertica

; 52   : 		} else {

	jmp	SHORT $LN1@GetVertica
$LN2@GetVertica:

; 53   : 			return CLIP_TOP;

	mov	eax, 4
	jmp	SHORT $LN4@GetVertica
$LN1@GetVertica:

; 54   : 		}
; 55   : 	}
; 56   : 	return ON_SCREEN;

	xor	eax, eax
$LN4@GetVertica:

; 57   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetVerticalClipFlags@@YAKMM@Z ENDP			; GetVerticalClipFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\clipflags.h
_TEXT	SEGMENT
tv73 = -4						; size = 4
_x$ = 8							; size = 4
_z$ = 12						; size = 4
?GetHorizontalClipFlags@@YAKMM@Z PROC			; GetHorizontalClipFlags

; 36   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 37   : 	if ( fabs(x) > z ) {

	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv73[ebp]
	movss	xmm0, DWORD PTR tv73[ebp]
	comiss	xmm0, DWORD PTR _z$[ebp]
	jbe	SHORT $LN1@GetHorizon

; 38   : 		if ( x > z ) {

	movss	xmm0, DWORD PTR _x$[ebp]
	comiss	xmm0, DWORD PTR _z$[ebp]
	jbe	SHORT $LN2@GetHorizon

; 39   : 			return CLIP_RIGHT;

	mov	eax, 2
	jmp	SHORT $LN4@GetHorizon

; 40   : 		} else {

	jmp	SHORT $LN1@GetHorizon
$LN2@GetHorizon:

; 41   : 			return CLIP_LEFT;

	mov	eax, 1
	jmp	SHORT $LN4@GetHorizon
$LN1@GetHorizon:

; 42   : 		}
; 43   : 	}
; 44   : 	return ON_SCREEN;

	xor	eax, eax
$LN4@GetHorizon:

; 45   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetHorizontalClipFlags@@YAKMM@Z ENDP			; GetHorizontalClipFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\statestack.h
;	COMDAT ?YtoPixel@StateStackClass@@SAMM@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
_y$ = 8							; size = 4
?YtoPixel@StateStackClass@@SAMM@Z PROC			; StateStackClass::YtoPixel, COMDAT

; 102  :     inline static float YtoPixel(float y) { return (y*scaleY)+shiftY; };

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	mulss	xmm0, DWORD PTR ?scaleY@StateStackClass@@1MA
	addss	xmm0, DWORD PTR ?shiftY@StateStackClass@@1MA
	movss	DWORD PTR tv69[ebp], xmm0
	fld	DWORD PTR tv69[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?YtoPixel@StateStackClass@@SAMM@Z ENDP			; StateStackClass::YtoPixel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\statestack.h
;	COMDAT ?XtoPixel@StateStackClass@@SAMM@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
_x$ = 8							; size = 4
?XtoPixel@StateStackClass@@SAMM@Z PROC			; StateStackClass::XtoPixel, COMDAT

; 101  :     inline static float XtoPixel(float x) { return (x*scaleX)+shiftX; };

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR ?scaleX@StateStackClass@@1MA
	addss	xmm0, DWORD PTR ?shiftX@StateStackClass@@1MA
	movss	DWORD PTR tv69[ebp], xmm0
	fld	DWORD PTR tv69[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?XtoPixel@StateStackClass@@SAMM@Z ENDP			; StateStackClass::XtoPixel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_newPoly$ = -812					; size = 44
_i$ = -768						; size = 4
_uv$ = -764						; size = 304
_I$ = -460						; size = 152
_rgba$ = -308						; size = 152
_xyz$ = -156						; size = 152
__$ArrayPad$ = -4					; size = 4
_poly$ = 8						; size = 4
_clipTest$ = 12						; size = 4
?ClipPolyFATGL@@YAXPAUPolyTexVCN@@K@Z PROC		; ClipPolyFATGL

; 1154 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 812				; 0000032cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1155 : 	PolyTexVCN	newPoly;
; 1156 : 	int			xyz[MAX_VERTS_PER_CLIPPED_POLYGON];
; 1157 : 	int			rgba[MAX_VERTS_PER_CLIPPED_POLYGON];
; 1158 : 	int			I[MAX_VERTS_PER_CLIPPED_POLYGON];
; 1159 : 	Ptexcoord	uv[MAX_VERTS_PER_CLIPPED_POLYGON];
; 1160 : 	int			i;
; 1161 : 
; 1162 : 	// Initialize our temporary polygon
; 1163 : 	newPoly.type		= poly->type;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _newPoly$[ebp], ecx

; 1164 : 	newPoly.nVerts		= poly->nVerts;

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _newPoly$[ebp+4], eax

; 1165 : 	newPoly.texIndex	= poly->texIndex;

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _newPoly$[ebp+36], edx

; 1166 : 	newPoly.xyz			= xyz;

	lea	eax, DWORD PTR _xyz$[ebp]
	mov	DWORD PTR _newPoly$[ebp+8], eax

; 1167 : 	newPoly.rgba		= rgba;

	lea	ecx, DWORD PTR _rgba$[ebp]
	mov	DWORD PTR _newPoly$[ebp+28], ecx

; 1168 : 	newPoly.I			= I;

	lea	edx, DWORD PTR _I$[ebp]
	mov	DWORD PTR _newPoly$[ebp+32], edx

; 1169 : 	newPoly.uv			= uv;

	lea	eax, DWORD PTR _uv$[ebp]
	mov	DWORD PTR _newPoly$[ebp+40], eax

; 1170 : 	for (i=0; i<newPoly.nVerts; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ClipPolyFA
$LN3@ClipPolyFA:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@ClipPolyFA:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _newPoly$[ebp+4]
	jge	$LN2@ClipPolyFA

; 1171 : 		xyz[i]	= poly->xyz[i];

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _xyz$[ebp+edx*4], ecx

; 1172 : 		rgba[i]	= poly->rgba[i];

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _rgba$[ebp+ecx*4], eax

; 1173 : 		I[i]	= poly->I[i];

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _I$[ebp+eax*4], edx

; 1174 : 		uv[i]	= poly->uv[i];

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _uv$[ebp+edx*8], eax
	mov	DWORD PTR _uv$[ebp+edx*8+4], ecx

; 1175 : 	}

	jmp	$LN3@ClipPolyFA
$LN2@ClipPolyFA:

; 1176 : 
; 1177 : 	// Clip the temporary polygon (destructive)
; 1178 : 	if (pvtClipPoly( clipTest, &newPoly.nVerts, newPoly.xyz, newPoly.rgba, newPoly.I, newPoly.uv )) {

	mov	eax, DWORD PTR _newPoly$[ebp+40]
	push	eax
	mov	ecx, DWORD PTR _newPoly$[ebp+32]
	push	ecx
	mov	edx, DWORD PTR _newPoly$[ebp+28]
	push	edx
	mov	eax, DWORD PTR _newPoly$[ebp+8]
	push	eax
	lea	ecx, DWORD PTR _newPoly$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _clipTest$[ebp]
	push	edx
	call	?pvtClipPoly@@YAHKPAH000PAUPtexcoord@@@Z ; pvtClipPoly
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN5@ClipPolyFA

; 1179 : 		DrawPolyFATGL( &newPoly );

	lea	eax, DWORD PTR _newPoly$[ebp]
	push	eax
	call	?DrawPolyFATGL@@YAXPAUPolyTexVCN@@@Z	; DrawPolyFATGL
	add	esp, 4
$LN5@ClipPolyFA:

; 1180 : 	}
; 1181 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ClipPolyFATGL@@YAXPAUPolyTexVCN@@K@Z ENDP		; ClipPolyFATGL
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_newPoly$ = -656					; size = 40
_i$ = -616						; size = 4
_uv$ = -612						; size = 304
_rgba$ = -308						; size = 152
_xyz$ = -156						; size = 152
__$ArrayPad$ = -4					; size = 4
_poly$ = 8						; size = 4
_clipTest$ = 12						; size = 4
?ClipPolyFATG@@YAXPAUPolyTexVC@@K@Z PROC		; ClipPolyFATG

; 1037 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 656				; 00000290H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1038 : 	PolyTexVC	newPoly;
; 1039 : 	int			xyz[MAX_VERTS_PER_CLIPPED_POLYGON];
; 1040 : 	int			rgba[MAX_VERTS_PER_CLIPPED_POLYGON];
; 1041 : 	Ptexcoord	uv[MAX_VERTS_PER_CLIPPED_POLYGON];
; 1042 : 	int			i;
; 1043 : 
; 1044 : 	// Initialize our temporary polygon
; 1045 : 	newPoly.type		= poly->type;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _newPoly$[ebp], ecx

; 1046 : 	newPoly.nVerts		= poly->nVerts;

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _newPoly$[ebp+4], eax

; 1047 : 	newPoly.texIndex	= poly->texIndex;

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _newPoly$[ebp+32], edx

; 1048 : 	newPoly.xyz			= xyz;

	lea	eax, DWORD PTR _xyz$[ebp]
	mov	DWORD PTR _newPoly$[ebp+8], eax

; 1049 : 	newPoly.rgba		= rgba;

	lea	ecx, DWORD PTR _rgba$[ebp]
	mov	DWORD PTR _newPoly$[ebp+28], ecx

; 1050 : 	newPoly.uv			= uv;

	lea	edx, DWORD PTR _uv$[ebp]
	mov	DWORD PTR _newPoly$[ebp+36], edx

; 1051 : 	for (i=0; i<newPoly.nVerts; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ClipPolyFA
$LN3@ClipPolyFA:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@ClipPolyFA:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _newPoly$[ebp+4]
	jge	SHORT $LN2@ClipPolyFA

; 1052 : 		xyz[i]	= poly->xyz[i];

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _xyz$[ebp+ecx*4], eax

; 1053 : 		rgba[i]	= poly->rgba[i];

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _rgba$[ebp+eax*4], edx

; 1054 : 		uv[i]	= poly->uv[i];

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _uv$[ebp+edx*8], eax
	mov	DWORD PTR _uv$[ebp+edx*8+4], ecx

; 1055 : 	}

	jmp	SHORT $LN3@ClipPolyFA
$LN2@ClipPolyFA:

; 1056 : 
; 1057 : 	// Clip the temporary polygon (destructive)
; 1058 : 	if (pvtClipPoly( clipTest, &newPoly.nVerts, newPoly.xyz, newPoly.rgba, NULL, newPoly.uv )) {

	mov	eax, DWORD PTR _newPoly$[ebp+36]
	push	eax
	push	0
	mov	ecx, DWORD PTR _newPoly$[ebp+28]
	push	ecx
	mov	edx, DWORD PTR _newPoly$[ebp+8]
	push	edx
	lea	eax, DWORD PTR _newPoly$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _clipTest$[ebp]
	push	ecx
	call	?pvtClipPoly@@YAHKPAH000PAUPtexcoord@@@Z ; pvtClipPoly
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN5@ClipPolyFA

; 1059 : 		DrawPolyFATG( &newPoly );

	lea	edx, DWORD PTR _newPoly$[ebp]
	push	edx
	call	?DrawPolyFATG@@YAXPAUPolyTexVC@@@Z	; DrawPolyFATG
	add	esp, 4
$LN5@ClipPolyFA:

; 1060 : 	}
; 1061 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ClipPolyFATG@@YAXPAUPolyTexVC@@K@Z ENDP		; ClipPolyFATG
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_newPoly$ = -508					; size = 44
_i$ = -464						; size = 4
_uv$ = -460						; size = 304
_xyz$ = -156						; size = 152
__$ArrayPad$ = -4					; size = 4
_poly$ = 8						; size = 4
_clipTest$ = 12						; size = 4
?ClipPolyFATL@@YAXPAUPolyTexFCN@@K@Z PROC		; ClipPolyFATL

; 930  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 508				; 000001fcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 931  : 	PolyTexFCN	newPoly;
; 932  : 	int			xyz[MAX_VERTS_PER_CLIPPED_POLYGON];
; 933  : 	Ptexcoord	uv[MAX_VERTS_PER_CLIPPED_POLYGON];
; 934  : 	int			i;
; 935  : 
; 936  : 	// Initialize our temporary polygon
; 937  : 	newPoly.type		= poly->type;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _newPoly$[ebp], ecx

; 938  : 	newPoly.nVerts		= poly->nVerts;

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _newPoly$[ebp+4], eax

; 939  : 	newPoly.rgba		= poly->rgba;

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _newPoly$[ebp+28], edx

; 940  : 	newPoly.texIndex	= poly->texIndex;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _newPoly$[ebp+36], ecx

; 941  : 	newPoly.I			= poly->I;

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _newPoly$[ebp+32], eax

; 942  : 	newPoly.xyz			= xyz;

	lea	ecx, DWORD PTR _xyz$[ebp]
	mov	DWORD PTR _newPoly$[ebp+8], ecx

; 943  : 	newPoly.uv			= uv;

	lea	edx, DWORD PTR _uv$[ebp]
	mov	DWORD PTR _newPoly$[ebp+40], edx

; 944  : 	for (i=0; i<newPoly.nVerts; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ClipPolyFA
$LN3@ClipPolyFA:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@ClipPolyFA:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _newPoly$[ebp+4]
	jge	SHORT $LN2@ClipPolyFA

; 945  : 		xyz[i]	= poly->xyz[i];

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _xyz$[ebp+ecx*4], eax

; 946  : 		uv[i]	= poly->uv[i];

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR [edx+eax*8+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _uv$[ebp+eax*8], ecx
	mov	DWORD PTR _uv$[ebp+eax*8+4], edx

; 947  : 	}

	jmp	SHORT $LN3@ClipPolyFA
$LN2@ClipPolyFA:

; 948  : 
; 949  : 	// Clip the temporary polygon (destructive)
; 950  : 	if (pvtClipPoly( clipTest, &newPoly.nVerts, newPoly.xyz, NULL, NULL, newPoly.uv )) {

	mov	ecx, DWORD PTR _newPoly$[ebp+40]
	push	ecx
	push	0
	push	0
	mov	edx, DWORD PTR _newPoly$[ebp+8]
	push	edx
	lea	eax, DWORD PTR _newPoly$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _clipTest$[ebp]
	push	ecx
	call	?pvtClipPoly@@YAHKPAH000PAUPtexcoord@@@Z ; pvtClipPoly
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN5@ClipPolyFA

; 951  : 		DrawPolyFATL( &newPoly );

	lea	edx, DWORD PTR _newPoly$[ebp]
	push	edx
	call	?DrawPolyFATL@@YAXPAUPolyTexFCN@@@Z	; DrawPolyFATL
	add	esp, 4
$LN5@ClipPolyFA:

; 952  : 	}
; 953  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ClipPolyFATL@@YAXPAUPolyTexFCN@@K@Z ENDP		; ClipPolyFATL
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_newPoly$ = -504					; size = 40
_i$ = -464						; size = 4
_uv$ = -460						; size = 304
_xyz$ = -156						; size = 152
__$ArrayPad$ = -4					; size = 4
_poly$ = 8						; size = 4
_clipTest$ = 12						; size = 4
?ClipPolyFAT@@YAXPAUPolyTexFC@@K@Z PROC			; ClipPolyFAT

; 823  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 504				; 000001f8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 824  : 	PolyTexFC	newPoly;
; 825  : 	int			xyz[MAX_VERTS_PER_CLIPPED_POLYGON];
; 826  : 	Ptexcoord	uv[MAX_VERTS_PER_CLIPPED_POLYGON];
; 827  : 	int			i;
; 828  : 
; 829  : 	// Initialize our temporary polygon
; 830  : 	newPoly.type		= poly->type;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _newPoly$[ebp], ecx

; 831  : 	newPoly.nVerts		= poly->nVerts;

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _newPoly$[ebp+4], eax

; 832  : 	newPoly.rgba		= poly->rgba;

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _newPoly$[ebp+28], edx

; 833  : 	newPoly.texIndex	= poly->texIndex;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _newPoly$[ebp+32], ecx

; 834  : 	newPoly.xyz			= xyz;

	lea	edx, DWORD PTR _xyz$[ebp]
	mov	DWORD PTR _newPoly$[ebp+8], edx

; 835  : 	newPoly.uv			= uv;

	lea	eax, DWORD PTR _uv$[ebp]
	mov	DWORD PTR _newPoly$[ebp+36], eax

; 836  : 	for (i=0; i<newPoly.nVerts; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ClipPolyFA
$LN3@ClipPolyFA:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@ClipPolyFA:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _newPoly$[ebp+4]
	jge	SHORT $LN2@ClipPolyFA

; 837  : 		xyz[i]	= poly->xyz[i];

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _xyz$[ebp+edx*4], ecx

; 838  : 		uv[i]	= poly->uv[i];

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR [eax+ecx*8+4]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _uv$[ebp+ecx*8], edx
	mov	DWORD PTR _uv$[ebp+ecx*8+4], eax

; 839  : 	}

	jmp	SHORT $LN3@ClipPolyFA
$LN2@ClipPolyFA:

; 840  : 
; 841  : 	// Clip the temporary polygon (destructive)
; 842  : 	if (pvtClipPoly( clipTest, &newPoly.nVerts, newPoly.xyz, NULL, NULL, newPoly.uv )) {

	mov	edx, DWORD PTR _newPoly$[ebp+36]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _newPoly$[ebp+8]
	push	eax
	lea	ecx, DWORD PTR _newPoly$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _clipTest$[ebp]
	push	edx
	call	?pvtClipPoly@@YAHKPAH000PAUPtexcoord@@@Z ; pvtClipPoly
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN5@ClipPolyFA

; 843  : 		DrawPolyFAT( &newPoly );

	lea	eax, DWORD PTR _newPoly$[ebp]
	push	eax
	call	?DrawPolyFAT@@YAXPAUPolyTexFC@@@Z	; DrawPolyFAT
	add	esp, 4
$LN5@ClipPolyFA:

; 844  : 	}
; 845  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ClipPolyFAT@@YAXPAUPolyTexFC@@K@Z ENDP			; ClipPolyFAT
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_newPoly$ = -812					; size = 44
_i$ = -768						; size = 4
_uv$ = -764						; size = 304
_I$ = -460						; size = 152
_rgba$ = -308						; size = 152
_xyz$ = -156						; size = 152
__$ArrayPad$ = -4					; size = 4
_poly$ = 8						; size = 4
_clipTest$ = 12						; size = 4
?ClipPolyATGL@@YAXPAUPolyTexVCN@@K@Z PROC		; ClipPolyATGL

; 1122 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 812				; 0000032cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1123 : 	PolyTexVCN	newPoly;
; 1124 : 	int			xyz[MAX_VERTS_PER_CLIPPED_POLYGON];
; 1125 : 	int			rgba[MAX_VERTS_PER_CLIPPED_POLYGON];
; 1126 : 	int			I[MAX_VERTS_PER_CLIPPED_POLYGON];
; 1127 : 	Ptexcoord	uv[MAX_VERTS_PER_CLIPPED_POLYGON];
; 1128 : 	int			i;
; 1129 : 
; 1130 : 	// Initialize our temporary polygon
; 1131 : 	newPoly.type		= poly->type;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _newPoly$[ebp], ecx

; 1132 : 	newPoly.nVerts		= poly->nVerts;

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _newPoly$[ebp+4], eax

; 1133 : 	newPoly.texIndex	= poly->texIndex;

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _newPoly$[ebp+36], edx

; 1134 : 	newPoly.xyz			= xyz;

	lea	eax, DWORD PTR _xyz$[ebp]
	mov	DWORD PTR _newPoly$[ebp+8], eax

; 1135 : 	newPoly.rgba		= rgba;

	lea	ecx, DWORD PTR _rgba$[ebp]
	mov	DWORD PTR _newPoly$[ebp+28], ecx

; 1136 : 	newPoly.I			= I;

	lea	edx, DWORD PTR _I$[ebp]
	mov	DWORD PTR _newPoly$[ebp+32], edx

; 1137 : 	newPoly.uv			= uv;

	lea	eax, DWORD PTR _uv$[ebp]
	mov	DWORD PTR _newPoly$[ebp+40], eax

; 1138 : 	for (i=0; i<newPoly.nVerts; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ClipPolyAT
$LN3@ClipPolyAT:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@ClipPolyAT:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _newPoly$[ebp+4]
	jge	$LN2@ClipPolyAT

; 1139 : 		xyz[i]	= poly->xyz[i];

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _xyz$[ebp+edx*4], ecx

; 1140 : 		rgba[i]	= poly->rgba[i];

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _rgba$[ebp+ecx*4], eax

; 1141 : 		I[i]	= poly->I[i];

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _I$[ebp+eax*4], edx

; 1142 : 		uv[i]	= poly->uv[i];

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _uv$[ebp+edx*8], eax
	mov	DWORD PTR _uv$[ebp+edx*8+4], ecx

; 1143 : 	}

	jmp	$LN3@ClipPolyAT
$LN2@ClipPolyAT:

; 1144 : 
; 1145 : 	// Clip the temporary polygon (destructive)
; 1146 : 	if (pvtClipPoly( clipTest, &newPoly.nVerts, newPoly.xyz, newPoly.rgba, newPoly.I, newPoly.uv )) {

	mov	eax, DWORD PTR _newPoly$[ebp+40]
	push	eax
	mov	ecx, DWORD PTR _newPoly$[ebp+32]
	push	ecx
	mov	edx, DWORD PTR _newPoly$[ebp+28]
	push	edx
	mov	eax, DWORD PTR _newPoly$[ebp+8]
	push	eax
	lea	ecx, DWORD PTR _newPoly$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _clipTest$[ebp]
	push	edx
	call	?pvtClipPoly@@YAHKPAH000PAUPtexcoord@@@Z ; pvtClipPoly
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN5@ClipPolyAT

; 1147 : 		DrawPolyATGL( &newPoly );

	lea	eax, DWORD PTR _newPoly$[ebp]
	push	eax
	call	?DrawPolyATGL@@YAXPAUPolyTexVCN@@@Z	; DrawPolyATGL
	add	esp, 4
$LN5@ClipPolyAT:

; 1148 : 	}
; 1149 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ClipPolyATGL@@YAXPAUPolyTexVCN@@K@Z ENDP		; ClipPolyATGL
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_newPoly$ = -656					; size = 40
_i$ = -616						; size = 4
_uv$ = -612						; size = 304
_rgba$ = -308						; size = 152
_xyz$ = -156						; size = 152
__$ArrayPad$ = -4					; size = 4
_poly$ = 8						; size = 4
_clipTest$ = 12						; size = 4
?ClipPolyATG@@YAXPAUPolyTexVC@@K@Z PROC			; ClipPolyATG

; 1008 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 656				; 00000290H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1009 : 	PolyTexVC	newPoly;
; 1010 : 	int			xyz[MAX_VERTS_PER_CLIPPED_POLYGON];
; 1011 : 	int			rgba[MAX_VERTS_PER_CLIPPED_POLYGON];
; 1012 : 	Ptexcoord	uv[MAX_VERTS_PER_CLIPPED_POLYGON];
; 1013 : 	int			i;
; 1014 : 
; 1015 : 	// Initialize our temporary polygon
; 1016 : 	newPoly.type		= poly->type;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _newPoly$[ebp], ecx

; 1017 : 	newPoly.nVerts		= poly->nVerts;

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _newPoly$[ebp+4], eax

; 1018 : 	newPoly.texIndex	= poly->texIndex;

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _newPoly$[ebp+32], edx

; 1019 : 	newPoly.xyz			= xyz;

	lea	eax, DWORD PTR _xyz$[ebp]
	mov	DWORD PTR _newPoly$[ebp+8], eax

; 1020 : 	newPoly.rgba		= rgba;

	lea	ecx, DWORD PTR _rgba$[ebp]
	mov	DWORD PTR _newPoly$[ebp+28], ecx

; 1021 : 	newPoly.uv			= uv;

	lea	edx, DWORD PTR _uv$[ebp]
	mov	DWORD PTR _newPoly$[ebp+36], edx

; 1022 : 	for (i=0; i<newPoly.nVerts; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ClipPolyAT
$LN3@ClipPolyAT:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@ClipPolyAT:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _newPoly$[ebp+4]
	jge	SHORT $LN2@ClipPolyAT

; 1023 : 		xyz[i]	= poly->xyz[i];

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _xyz$[ebp+ecx*4], eax

; 1024 : 		rgba[i]	= poly->rgba[i];

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _rgba$[ebp+eax*4], edx

; 1025 : 		uv[i]	= poly->uv[i];

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _uv$[ebp+edx*8], eax
	mov	DWORD PTR _uv$[ebp+edx*8+4], ecx

; 1026 : 	}

	jmp	SHORT $LN3@ClipPolyAT
$LN2@ClipPolyAT:

; 1027 : 
; 1028 : 	// Clip the temporary polygon (destructive)
; 1029 : 	if (pvtClipPoly( clipTest, &newPoly.nVerts, newPoly.xyz, newPoly.rgba, NULL, newPoly.uv )) {

	mov	eax, DWORD PTR _newPoly$[ebp+36]
	push	eax
	push	0
	mov	ecx, DWORD PTR _newPoly$[ebp+28]
	push	ecx
	mov	edx, DWORD PTR _newPoly$[ebp+8]
	push	edx
	lea	eax, DWORD PTR _newPoly$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _clipTest$[ebp]
	push	ecx
	call	?pvtClipPoly@@YAHKPAH000PAUPtexcoord@@@Z ; pvtClipPoly
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN5@ClipPolyAT

; 1030 : 		DrawPolyATG( &newPoly );

	lea	edx, DWORD PTR _newPoly$[ebp]
	push	edx
	call	?DrawPolyATG@@YAXPAUPolyTexVC@@@Z	; DrawPolyATG
	add	esp, 4
$LN5@ClipPolyAT:

; 1031 : 	}
; 1032 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ClipPolyATG@@YAXPAUPolyTexVC@@K@Z ENDP			; ClipPolyATG
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_newPoly$ = -508					; size = 44
_i$ = -464						; size = 4
_uv$ = -460						; size = 304
_xyz$ = -156						; size = 152
__$ArrayPad$ = -4					; size = 4
_poly$ = 8						; size = 4
_clipTest$ = 12						; size = 4
?ClipPolyATL@@YAXPAUPolyTexFCN@@K@Z PROC		; ClipPolyATL

; 902  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 508				; 000001fcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 903  : 	PolyTexFCN	newPoly;
; 904  : 	int			xyz[MAX_VERTS_PER_CLIPPED_POLYGON];
; 905  : 	Ptexcoord	uv[MAX_VERTS_PER_CLIPPED_POLYGON];
; 906  : 	int			i;
; 907  : 
; 908  : 	// Initialize our temporary polygon
; 909  : 	newPoly.type		= poly->type;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _newPoly$[ebp], ecx

; 910  : 	newPoly.nVerts		= poly->nVerts;

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _newPoly$[ebp+4], eax

; 911  : 	newPoly.rgba		= poly->rgba;

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _newPoly$[ebp+28], edx

; 912  : 	newPoly.texIndex	= poly->texIndex;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _newPoly$[ebp+36], ecx

; 913  : 	newPoly.I			= poly->I;

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _newPoly$[ebp+32], eax

; 914  : 	newPoly.xyz			= xyz;

	lea	ecx, DWORD PTR _xyz$[ebp]
	mov	DWORD PTR _newPoly$[ebp+8], ecx

; 915  : 	newPoly.uv			= uv;

	lea	edx, DWORD PTR _uv$[ebp]
	mov	DWORD PTR _newPoly$[ebp+40], edx

; 916  : 	for (i=0; i<newPoly.nVerts; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ClipPolyAT
$LN3@ClipPolyAT:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@ClipPolyAT:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _newPoly$[ebp+4]
	jge	SHORT $LN2@ClipPolyAT

; 917  : 		xyz[i]	= poly->xyz[i];

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _xyz$[ebp+ecx*4], eax

; 918  : 		uv[i]	= poly->uv[i];

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR [edx+eax*8+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _uv$[ebp+eax*8], ecx
	mov	DWORD PTR _uv$[ebp+eax*8+4], edx

; 919  : 	}

	jmp	SHORT $LN3@ClipPolyAT
$LN2@ClipPolyAT:

; 920  : 
; 921  : 	// Clip the temporary polygon (destructive)
; 922  : 	if (pvtClipPoly( clipTest, &newPoly.nVerts, newPoly.xyz, NULL, NULL, newPoly.uv )) {

	mov	ecx, DWORD PTR _newPoly$[ebp+40]
	push	ecx
	push	0
	push	0
	mov	edx, DWORD PTR _newPoly$[ebp+8]
	push	edx
	lea	eax, DWORD PTR _newPoly$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _clipTest$[ebp]
	push	ecx
	call	?pvtClipPoly@@YAHKPAH000PAUPtexcoord@@@Z ; pvtClipPoly
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN5@ClipPolyAT

; 923  : 		DrawPolyATL( &newPoly );

	lea	edx, DWORD PTR _newPoly$[ebp]
	push	edx
	call	?DrawPolyATL@@YAXPAUPolyTexFCN@@@Z	; DrawPolyATL
	add	esp, 4
$LN5@ClipPolyAT:

; 924  : 	}
; 925  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ClipPolyATL@@YAXPAUPolyTexFCN@@K@Z ENDP		; ClipPolyATL
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_newPoly$ = -504					; size = 40
_i$ = -464						; size = 4
_uv$ = -460						; size = 304
_xyz$ = -156						; size = 152
__$ArrayPad$ = -4					; size = 4
_poly$ = 8						; size = 4
_clipTest$ = 12						; size = 4
?ClipPolyAT@@YAXPAUPolyTexFC@@K@Z PROC			; ClipPolyAT

; 796  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 504				; 000001f8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 797  : 	PolyTexFC	newPoly;
; 798  : 	int			xyz[MAX_VERTS_PER_CLIPPED_POLYGON];
; 799  : 	Ptexcoord	uv[MAX_VERTS_PER_CLIPPED_POLYGON];
; 800  : 	int			i;
; 801  : 
; 802  : 	// Initialize our temporary polygon
; 803  : 	newPoly.type		= poly->type;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _newPoly$[ebp], ecx

; 804  : 	newPoly.nVerts		= poly->nVerts;

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _newPoly$[ebp+4], eax

; 805  : 	newPoly.rgba		= poly->rgba;

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _newPoly$[ebp+28], edx

; 806  : 	newPoly.texIndex	= poly->texIndex;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _newPoly$[ebp+32], ecx

; 807  : 	newPoly.xyz			= xyz;

	lea	edx, DWORD PTR _xyz$[ebp]
	mov	DWORD PTR _newPoly$[ebp+8], edx

; 808  : 	newPoly.uv			= uv;

	lea	eax, DWORD PTR _uv$[ebp]
	mov	DWORD PTR _newPoly$[ebp+36], eax

; 809  : 	for (i=0; i<newPoly.nVerts; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ClipPolyAT
$LN3@ClipPolyAT:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@ClipPolyAT:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _newPoly$[ebp+4]
	jge	SHORT $LN2@ClipPolyAT

; 810  : 		xyz[i]	= poly->xyz[i];

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _xyz$[ebp+edx*4], ecx

; 811  : 		uv[i]	= poly->uv[i];

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR [eax+ecx*8+4]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _uv$[ebp+ecx*8], edx
	mov	DWORD PTR _uv$[ebp+ecx*8+4], eax

; 812  : 	}

	jmp	SHORT $LN3@ClipPolyAT
$LN2@ClipPolyAT:

; 813  : 
; 814  : 	// Clip the temporary polygon (destructive)
; 815  : 	if (pvtClipPoly( clipTest, &newPoly.nVerts, newPoly.xyz, NULL, NULL, newPoly.uv )) {

	mov	edx, DWORD PTR _newPoly$[ebp+36]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _newPoly$[ebp+8]
	push	eax
	lea	ecx, DWORD PTR _newPoly$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _clipTest$[ebp]
	push	edx
	call	?pvtClipPoly@@YAHKPAH000PAUPtexcoord@@@Z ; pvtClipPoly
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN5@ClipPolyAT

; 816  : 		DrawPolyAT( &newPoly );

	lea	eax, DWORD PTR _newPoly$[ebp]
	push	eax
	call	?DrawPolyAT@@YAXPAUPolyTexFC@@@Z	; DrawPolyAT
	add	esp, 4
$LN5@ClipPolyAT:

; 817  : 	}
; 818  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ClipPolyAT@@YAXPAUPolyTexFC@@K@Z ENDP			; ClipPolyAT
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_newPoly$ = -660					; size = 44
_i$ = -616						; size = 4
_uv$ = -612						; size = 304
_I$ = -308						; size = 152
_xyz$ = -156						; size = 152
__$ArrayPad$ = -4					; size = 4
_poly$ = 8						; size = 4
_clipTest$ = 12						; size = 4
?ClipPolyFTGL@@YAXPAUPolyTexVCN@@K@Z PROC		; ClipPolyFTGL

; 1094 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 660				; 00000294H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1095 : 	PolyTexVCN	newPoly;
; 1096 : 	int			xyz[MAX_VERTS_PER_CLIPPED_POLYGON];
; 1097 : 	int			I[MAX_VERTS_PER_CLIPPED_POLYGON];
; 1098 : 	Ptexcoord	uv[MAX_VERTS_PER_CLIPPED_POLYGON];
; 1099 : 	int			i;
; 1100 : 
; 1101 : 	// Initialize our temporary polygon
; 1102 : 	newPoly.type		= poly->type;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _newPoly$[ebp], ecx

; 1103 : 	newPoly.nVerts		= poly->nVerts;

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _newPoly$[ebp+4], eax

; 1104 : 	newPoly.texIndex	= poly->texIndex;

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _newPoly$[ebp+36], edx

; 1105 : 	newPoly.xyz			= xyz;

	lea	eax, DWORD PTR _xyz$[ebp]
	mov	DWORD PTR _newPoly$[ebp+8], eax

; 1106 : 	newPoly.I			= I;

	lea	ecx, DWORD PTR _I$[ebp]
	mov	DWORD PTR _newPoly$[ebp+32], ecx

; 1107 : 	newPoly.uv			= uv;

	lea	edx, DWORD PTR _uv$[ebp]
	mov	DWORD PTR _newPoly$[ebp+40], edx

; 1108 : 	for (i=0; i<newPoly.nVerts; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ClipPolyFT
$LN3@ClipPolyFT:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@ClipPolyFT:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _newPoly$[ebp+4]
	jge	SHORT $LN2@ClipPolyFT

; 1109 : 		xyz[i]	= poly->xyz[i];

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _xyz$[ebp+ecx*4], eax

; 1110 : 		I[i]	= poly->I[i];

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _I$[ebp+eax*4], edx

; 1111 : 		uv[i]	= poly->uv[i];

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _uv$[ebp+edx*8], eax
	mov	DWORD PTR _uv$[ebp+edx*8+4], ecx

; 1112 : 	}

	jmp	SHORT $LN3@ClipPolyFT
$LN2@ClipPolyFT:

; 1113 : 
; 1114 : 	// Clip the temporary polygon (destructive)
; 1115 : 	if (pvtClipPoly( clipTest, &newPoly.nVerts, newPoly.xyz, NULL, newPoly.I, newPoly.uv )) {

	mov	eax, DWORD PTR _newPoly$[ebp+40]
	push	eax
	mov	ecx, DWORD PTR _newPoly$[ebp+32]
	push	ecx
	push	0
	mov	edx, DWORD PTR _newPoly$[ebp+8]
	push	edx
	lea	eax, DWORD PTR _newPoly$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _clipTest$[ebp]
	push	ecx
	call	?pvtClipPoly@@YAHKPAH000PAUPtexcoord@@@Z ; pvtClipPoly
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN5@ClipPolyFT

; 1116 : 		DrawPolyFTGL( &newPoly );

	lea	edx, DWORD PTR _newPoly$[ebp]
	push	edx
	call	?DrawPolyFTGL@@YAXPAUPolyTexVCN@@@Z	; DrawPolyFTGL
	add	esp, 4
$LN5@ClipPolyFT:

; 1117 : 	}
; 1118 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ClipPolyFTGL@@YAXPAUPolyTexVCN@@K@Z ENDP		; ClipPolyFTGL
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_newPoly$ = -504					; size = 40
_i$ = -464						; size = 4
_uv$ = -460						; size = 304
_xyz$ = -156						; size = 152
__$ArrayPad$ = -4					; size = 4
_poly$ = 8						; size = 4
_clipTest$ = 12						; size = 4
?ClipPolyFTG@@YAXPAUPolyTexVC@@K@Z PROC			; ClipPolyFTG

; 983  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 504				; 000001f8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 984  : 	PolyTexVC	newPoly;
; 985  : 	int			xyz[MAX_VERTS_PER_CLIPPED_POLYGON];
; 986  : 	Ptexcoord	uv[MAX_VERTS_PER_CLIPPED_POLYGON];
; 987  : 	int			i;
; 988  : 
; 989  : 	// Initialize our temporary polygon
; 990  : 	newPoly.type		= poly->type;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _newPoly$[ebp], ecx

; 991  : 	newPoly.nVerts		= poly->nVerts;

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _newPoly$[ebp+4], eax

; 992  : 	newPoly.texIndex	= poly->texIndex;

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _newPoly$[ebp+32], edx

; 993  : 	newPoly.xyz			= xyz;

	lea	eax, DWORD PTR _xyz$[ebp]
	mov	DWORD PTR _newPoly$[ebp+8], eax

; 994  : 	newPoly.uv			= uv;

	lea	ecx, DWORD PTR _uv$[ebp]
	mov	DWORD PTR _newPoly$[ebp+36], ecx

; 995  : 	for (i=0; i<newPoly.nVerts; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ClipPolyFT
$LN3@ClipPolyFT:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN4@ClipPolyFT:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _newPoly$[ebp+4]
	jge	SHORT $LN2@ClipPolyFT

; 996  : 		xyz[i]	= poly->xyz[i];

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _xyz$[ebp+eax*4], edx

; 997  : 		uv[i]	= poly->uv[i];

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _uv$[ebp+edx*8], eax
	mov	DWORD PTR _uv$[ebp+edx*8+4], ecx

; 998  : 	}

	jmp	SHORT $LN3@ClipPolyFT
$LN2@ClipPolyFT:

; 999  : 
; 1000 : 	// Clip the temporary polygon (destructive)
; 1001 : 	if (pvtClipPoly( clipTest, &newPoly.nVerts, newPoly.xyz, NULL, NULL, newPoly.uv )) {

	mov	eax, DWORD PTR _newPoly$[ebp+36]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _newPoly$[ebp+8]
	push	ecx
	lea	edx, DWORD PTR _newPoly$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _clipTest$[ebp]
	push	eax
	call	?pvtClipPoly@@YAHKPAH000PAUPtexcoord@@@Z ; pvtClipPoly
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN5@ClipPolyFT

; 1002 : 		DrawPolyFTG( &newPoly );

	lea	ecx, DWORD PTR _newPoly$[ebp]
	push	ecx
	call	?DrawPolyFTG@@YAXPAUPolyTexVC@@@Z	; DrawPolyFTG
	add	esp, 4
$LN5@ClipPolyFT:

; 1003 : 	}
; 1004 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ClipPolyFTG@@YAXPAUPolyTexVC@@K@Z ENDP			; ClipPolyFTG
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_newPoly$ = -508					; size = 44
_i$ = -464						; size = 4
_uv$ = -460						; size = 304
_xyz$ = -156						; size = 152
__$ArrayPad$ = -4					; size = 4
_poly$ = 8						; size = 4
_clipTest$ = 12						; size = 4
?ClipPolyFTL@@YAXPAUPolyTexFCN@@K@Z PROC		; ClipPolyFTL

; 876  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 508				; 000001fcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 877  : 	PolyTexFCN	newPoly;
; 878  : 	int			xyz[MAX_VERTS_PER_CLIPPED_POLYGON];
; 879  : 	Ptexcoord	uv[MAX_VERTS_PER_CLIPPED_POLYGON];
; 880  : 	int			i;
; 881  : 
; 882  : 	// Initialize our temporary polygon
; 883  : 	newPoly.type		= poly->type;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _newPoly$[ebp], ecx

; 884  : 	newPoly.nVerts		= poly->nVerts;

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _newPoly$[ebp+4], eax

; 885  : 	newPoly.texIndex	= poly->texIndex;

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _newPoly$[ebp+36], edx

; 886  : 	newPoly.I			= poly->I;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _newPoly$[ebp+32], ecx

; 887  : 	newPoly.xyz			= xyz;

	lea	edx, DWORD PTR _xyz$[ebp]
	mov	DWORD PTR _newPoly$[ebp+8], edx

; 888  : 	newPoly.uv			= uv;

	lea	eax, DWORD PTR _uv$[ebp]
	mov	DWORD PTR _newPoly$[ebp+40], eax

; 889  : 	for (i=0; i<newPoly.nVerts; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ClipPolyFT
$LN3@ClipPolyFT:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@ClipPolyFT:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _newPoly$[ebp+4]
	jge	SHORT $LN2@ClipPolyFT

; 890  : 		xyz[i]	= poly->xyz[i];

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _xyz$[ebp+edx*4], ecx

; 891  : 		uv[i]	= poly->uv[i];

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR [eax+ecx*8+4]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _uv$[ebp+ecx*8], edx
	mov	DWORD PTR _uv$[ebp+ecx*8+4], eax

; 892  : 	}

	jmp	SHORT $LN3@ClipPolyFT
$LN2@ClipPolyFT:

; 893  : 
; 894  : 	// Clip the temporary polygon (destructive)
; 895  : 	if (pvtClipPoly( clipTest, &newPoly.nVerts, newPoly.xyz, NULL, NULL, newPoly.uv )) {

	mov	edx, DWORD PTR _newPoly$[ebp+40]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _newPoly$[ebp+8]
	push	eax
	lea	ecx, DWORD PTR _newPoly$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _clipTest$[ebp]
	push	edx
	call	?pvtClipPoly@@YAHKPAH000PAUPtexcoord@@@Z ; pvtClipPoly
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN5@ClipPolyFT

; 896  : 		DrawPolyFTL( &newPoly );

	lea	eax, DWORD PTR _newPoly$[ebp]
	push	eax
	call	?DrawPolyFTL@@YAXPAUPolyTexFCN@@@Z	; DrawPolyFTL
	add	esp, 4
$LN5@ClipPolyFT:

; 897  : 	}
; 898  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ClipPolyFTL@@YAXPAUPolyTexFCN@@K@Z ENDP		; ClipPolyFTL
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_newPoly$ = -504					; size = 40
_i$ = -464						; size = 4
_uv$ = -460						; size = 304
_xyz$ = -156						; size = 152
__$ArrayPad$ = -4					; size = 4
_poly$ = 8						; size = 4
_clipTest$ = 12						; size = 4
?ClipPolyFT@@YAXPAUPolyTexFC@@K@Z PROC			; ClipPolyFT

; 771  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 504				; 000001f8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 772  : 	PolyTexFC	newPoly;
; 773  : 	int			xyz[MAX_VERTS_PER_CLIPPED_POLYGON];
; 774  : 	Ptexcoord	uv[MAX_VERTS_PER_CLIPPED_POLYGON];
; 775  : 	int			i;
; 776  : 
; 777  : 	// Initialize our temporary polygon
; 778  : 	newPoly.type		= poly->type;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _newPoly$[ebp], ecx

; 779  : 	newPoly.nVerts		= poly->nVerts;

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _newPoly$[ebp+4], eax

; 780  : 	newPoly.texIndex	= poly->texIndex;

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _newPoly$[ebp+32], edx

; 781  : 	newPoly.xyz			= xyz;

	lea	eax, DWORD PTR _xyz$[ebp]
	mov	DWORD PTR _newPoly$[ebp+8], eax

; 782  : 	newPoly.uv			= uv;

	lea	ecx, DWORD PTR _uv$[ebp]
	mov	DWORD PTR _newPoly$[ebp+36], ecx

; 783  : 	for (i=0; i<newPoly.nVerts; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ClipPolyFT
$LN3@ClipPolyFT:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN4@ClipPolyFT:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _newPoly$[ebp+4]
	jge	SHORT $LN2@ClipPolyFT

; 784  : 		xyz[i]	= poly->xyz[i];

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _xyz$[ebp+eax*4], edx

; 785  : 		uv[i]	= poly->uv[i];

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _uv$[ebp+edx*8], eax
	mov	DWORD PTR _uv$[ebp+edx*8+4], ecx

; 786  : 	}

	jmp	SHORT $LN3@ClipPolyFT
$LN2@ClipPolyFT:

; 787  : 
; 788  : 	// Clip the temporary polygon (destructive)
; 789  : 	if (pvtClipPoly( clipTest, &newPoly.nVerts, newPoly.xyz, NULL, NULL, newPoly.uv )) {

	mov	eax, DWORD PTR _newPoly$[ebp+36]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _newPoly$[ebp+8]
	push	ecx
	lea	edx, DWORD PTR _newPoly$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _clipTest$[ebp]
	push	eax
	call	?pvtClipPoly@@YAHKPAH000PAUPtexcoord@@@Z ; pvtClipPoly
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN5@ClipPolyFT

; 790  : 		DrawPolyFT( &newPoly );

	lea	ecx, DWORD PTR _newPoly$[ebp]
	push	ecx
	call	?DrawPolyFT@@YAXPAUPolyTexFC@@@Z	; DrawPolyFT
	add	esp, 4
$LN5@ClipPolyFT:

; 791  : 	}
; 792  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ClipPolyFT@@YAXPAUPolyTexFC@@K@Z ENDP			; ClipPolyFT
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_newPoly$ = -500					; size = 36
_i$ = -464						; size = 4
_rgba$ = -460						; size = 152
_I$ = -308						; size = 152
_xyz$ = -156						; size = 152
__$ArrayPad$ = -4					; size = 4
_poly$ = 8						; size = 4
_clipTest$ = 12						; size = 4
?ClipPolyFGL@@YAXPAUPolyVCN@@K@Z PROC			; ClipPolyFGL

; 719  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 500				; 000001f4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 720  : 	PolyVCN		newPoly;
; 721  : 	int			xyz[MAX_VERTS_PER_CLIPPED_POLYGON];
; 722  : 	int			rgba[MAX_VERTS_PER_CLIPPED_POLYGON];
; 723  : 	int			I[MAX_VERTS_PER_CLIPPED_POLYGON];
; 724  : 	int			i;
; 725  : 
; 726  : 	// Initialize our temporary polygon
; 727  : 	newPoly.type	= poly->type;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _newPoly$[ebp], ecx

; 728  : 	newPoly.nVerts	= poly->nVerts;

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _newPoly$[ebp+4], eax

; 729  : 	newPoly.xyz		= xyz;

	lea	ecx, DWORD PTR _xyz$[ebp]
	mov	DWORD PTR _newPoly$[ebp+8], ecx

; 730  : 	newPoly.rgba	= rgba;

	lea	edx, DWORD PTR _rgba$[ebp]
	mov	DWORD PTR _newPoly$[ebp+28], edx

; 731  : 	newPoly.I		= I;

	lea	eax, DWORD PTR _I$[ebp]
	mov	DWORD PTR _newPoly$[ebp+32], eax

; 732  : 	for (i=0; i<newPoly.nVerts; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ClipPolyFG
$LN3@ClipPolyFG:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@ClipPolyFG:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _newPoly$[ebp+4]
	jge	SHORT $LN2@ClipPolyFG

; 733  : 		xyz[i]	= poly->xyz[i];

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _xyz$[ebp+edx*4], ecx

; 734  : 		rgba[i]	= poly->rgba[i];

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _rgba$[ebp+ecx*4], eax

; 735  : 		I[i]	= poly->I[i];

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _I$[ebp+eax*4], edx

; 736  : 	}

	jmp	SHORT $LN3@ClipPolyFG
$LN2@ClipPolyFG:

; 737  : 
; 738  : 	// Clip the temporary polygon (destructive)
; 739  : 	if (pvtClipPoly( clipTest, &newPoly.nVerts, newPoly.xyz, newPoly.rgba, newPoly.I, NULL )) {

	push	0
	mov	eax, DWORD PTR _newPoly$[ebp+32]
	push	eax
	mov	ecx, DWORD PTR _newPoly$[ebp+28]
	push	ecx
	mov	edx, DWORD PTR _newPoly$[ebp+8]
	push	edx
	lea	eax, DWORD PTR _newPoly$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _clipTest$[ebp]
	push	ecx
	call	?pvtClipPoly@@YAHKPAH000PAUPtexcoord@@@Z ; pvtClipPoly
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN5@ClipPolyFG

; 740  : 		DrawPolyFGL( &newPoly );

	lea	edx, DWORD PTR _newPoly$[ebp]
	push	edx
	call	?DrawPolyFGL@@YAXPAUPolyVCN@@@Z		; DrawPolyFGL
	add	esp, 4
$LN5@ClipPolyFG:

; 741  : 	}
; 742  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ClipPolyFGL@@YAXPAUPolyVCN@@K@Z ENDP			; ClipPolyFGL
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_newPoly$ = -344					; size = 32
_i$ = -312						; size = 4
_rgba$ = -308						; size = 152
_xyz$ = -156						; size = 152
__$ArrayPad$ = -4					; size = 4
_poly$ = 8						; size = 4
_clipTest$ = 12						; size = 4
?ClipPolyFG@@YAXPAUPolyVC@@K@Z PROC			; ClipPolyFG

; 668  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 344				; 00000158H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 669  : 	PolyVC	newPoly;
; 670  : 	int		xyz[MAX_VERTS_PER_CLIPPED_POLYGON];
; 671  : 	int		rgba[MAX_VERTS_PER_CLIPPED_POLYGON];
; 672  : 	int		i;
; 673  : 
; 674  : 	// Initialize our temporary polygon
; 675  : 	newPoly.type	= poly->type;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _newPoly$[ebp], ecx

; 676  : 	newPoly.nVerts	= poly->nVerts;

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _newPoly$[ebp+4], eax

; 677  : 	newPoly.xyz		= xyz;

	lea	ecx, DWORD PTR _xyz$[ebp]
	mov	DWORD PTR _newPoly$[ebp+8], ecx

; 678  : 	newPoly.rgba	= rgba;

	lea	edx, DWORD PTR _rgba$[ebp]
	mov	DWORD PTR _newPoly$[ebp+28], edx

; 679  : 	for (i=0; i<newPoly.nVerts; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ClipPolyFG
$LN3@ClipPolyFG:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@ClipPolyFG:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _newPoly$[ebp+4]
	jge	SHORT $LN2@ClipPolyFG

; 680  : 		xyz[i]	= poly->xyz[i];

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _xyz$[ebp+ecx*4], eax

; 681  : 		rgba[i]	= poly->rgba[i];

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _rgba$[ebp+eax*4], edx

; 682  : 	}

	jmp	SHORT $LN3@ClipPolyFG
$LN2@ClipPolyFG:

; 683  : 
; 684  : 	// Clip the temporary polygon (destructive)
; 685  : 	if (pvtClipPoly( clipTest, &newPoly.nVerts, newPoly.xyz, newPoly.rgba, NULL, NULL )) {

	push	0
	push	0
	mov	eax, DWORD PTR _newPoly$[ebp+28]
	push	eax
	mov	ecx, DWORD PTR _newPoly$[ebp+8]
	push	ecx
	lea	edx, DWORD PTR _newPoly$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _clipTest$[ebp]
	push	eax
	call	?pvtClipPoly@@YAHKPAH000PAUPtexcoord@@@Z ; pvtClipPoly
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN5@ClipPolyFG

; 686  : 		DrawPolyFG( &newPoly );

	lea	ecx, DWORD PTR _newPoly$[ebp]
	push	ecx
	call	?DrawPolyFG@@YAXPAUPolyVC@@@Z		; DrawPolyFG
	add	esp, 4
$LN5@ClipPolyFG:

; 687  : 	}
; 688  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ClipPolyFG@@YAXPAUPolyVC@@K@Z ENDP			; ClipPolyFG
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_newPoly$ = -196					; size = 36
_i$ = -160						; size = 4
_xyz$ = -156						; size = 152
__$ArrayPad$ = -4					; size = 4
_poly$ = 8						; size = 4
_clipTest$ = 12						; size = 4
?ClipPolyFL@@YAXPAUPolyFCN@@K@Z PROC			; ClipPolyFL

; 621  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 622  : 	PolyFCN	newPoly;
; 623  : 	int		xyz[MAX_VERTS_PER_CLIPPED_POLYGON];
; 624  : 	int		i;
; 625  : 
; 626  : 	// Initialize our temporary polygon
; 627  : 	newPoly.type	= poly->type;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _newPoly$[ebp], ecx

; 628  : 	newPoly.nVerts	= poly->nVerts;

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _newPoly$[ebp+4], eax

; 629  : 	newPoly.rgba	= poly->rgba;

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _newPoly$[ebp+28], edx

; 630  : 	newPoly.I		= poly->I;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _newPoly$[ebp+32], ecx

; 631  : 	newPoly.xyz		= xyz;

	lea	edx, DWORD PTR _xyz$[ebp]
	mov	DWORD PTR _newPoly$[ebp+8], edx

; 632  : 	for (i=0; i<newPoly.nVerts; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ClipPolyFL
$LN3@ClipPolyFL:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@ClipPolyFL:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _newPoly$[ebp+4]
	jge	SHORT $LN2@ClipPolyFL

; 633  : 		xyz[i] = poly->xyz[i];

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _xyz$[ebp+ecx*4], eax

; 634  : 	}

	jmp	SHORT $LN3@ClipPolyFL
$LN2@ClipPolyFL:

; 635  : 
; 636  : 	// Clip the temporary polygon (destructive)
; 637  : 	if (pvtClipPoly( clipTest, &newPoly.nVerts, newPoly.xyz, NULL, NULL, NULL )) {

	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _newPoly$[ebp+8]
	push	ecx
	lea	edx, DWORD PTR _newPoly$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _clipTest$[ebp]
	push	eax
	call	?pvtClipPoly@@YAHKPAH000PAUPtexcoord@@@Z ; pvtClipPoly
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN5@ClipPolyFL

; 638  : 		DrawPolyFL( &newPoly );

	lea	ecx, DWORD PTR _newPoly$[ebp]
	push	ecx
	call	?DrawPolyFL@@YAXPAUPolyFCN@@@Z		; DrawPolyFL
	add	esp, 4
$LN5@ClipPolyFL:

; 639  : 	}
; 640  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ClipPolyFL@@YAXPAUPolyFCN@@K@Z ENDP			; ClipPolyFL
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_newPoly$ = -192					; size = 32
_i$ = -160						; size = 4
_xyz$ = -156						; size = 152
__$ArrayPad$ = -4					; size = 4
_poly$ = 8						; size = 4
_clipTest$ = 12						; size = 4
?ClipPolyF@@YAXPAUPolyFC@@K@Z PROC			; ClipPolyF

; 576  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 577  : 	PolyFC	newPoly;
; 578  : 	int		xyz[MAX_VERTS_PER_CLIPPED_POLYGON];
; 579  : 	int		i;
; 580  : 
; 581  : 	// Initialize our temporary polygon
; 582  : 	newPoly.type	= poly->type;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _newPoly$[ebp], ecx

; 583  : 	newPoly.rgba	= poly->rgba;

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _newPoly$[ebp+28], eax

; 584  : 	newPoly.nVerts	= poly->nVerts;

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _newPoly$[ebp+4], edx

; 585  : 	newPoly.xyz		= xyz;

	lea	eax, DWORD PTR _xyz$[ebp]
	mov	DWORD PTR _newPoly$[ebp+8], eax

; 586  : 	for (i=0; i<newPoly.nVerts; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ClipPolyF
$LN3@ClipPolyF:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@ClipPolyF:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _newPoly$[ebp+4]
	jge	SHORT $LN2@ClipPolyF

; 587  : 		xyz[i] = poly->xyz[i];

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _xyz$[ebp+edx*4], ecx

; 588  : 	}

	jmp	SHORT $LN3@ClipPolyF
$LN2@ClipPolyF:

; 589  : 
; 590  : 	// Clip the temporary polygon (destructive)
; 591  : 	if (pvtClipPoly( clipTest, &newPoly.nVerts, newPoly.xyz, NULL, NULL, NULL )) {

	push	0
	push	0
	push	0
	mov	edx, DWORD PTR _newPoly$[ebp+8]
	push	edx
	lea	eax, DWORD PTR _newPoly$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _clipTest$[ebp]
	push	ecx
	call	?pvtClipPoly@@YAHKPAH000PAUPtexcoord@@@Z ; pvtClipPoly
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN5@ClipPolyF

; 592  : 		DrawPolyF( &newPoly );

	lea	edx, DWORD PTR _newPoly$[ebp]
	push	edx
	call	?DrawPolyF@@YAXPAUPolyFC@@@Z		; DrawPolyF
	add	esp, 4
$LN5@ClipPolyF:

; 593  : 	}
; 594  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ClipPolyF@@YAXPAUPolyFC@@K@Z ENDP			; ClipPolyF
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_line$ = 8						; size = 4
___formal$ = 12						; size = 4
?ClipPrimFLine@@YAXPAUPrimLineFC@@K@Z PROC		; ClipPrimFLine

; 333  : {

	push	ebp
	mov	ebp, esp

; 334  : 	pvtClipPrimLine( line, (DrawPrimFp)DrawPrimFLine );

	push	OFFSET ?DrawPrimFLine@@YAXPAUPrimLineFC@@@Z ; DrawPrimFLine
	mov	eax, DWORD PTR _line$[ebp]
	push	eax
	call	?pvtClipPrimLine@@YAXPAUPrimLineFC@@P6AXPAUPrim@@@Z@Z ; pvtClipPrimLine
	add	esp, 8

; 335  : }

	pop	ebp
	ret	0
?ClipPrimFLine@@YAXPAUPrimLineFC@@K@Z ENDP		; ClipPrimFLine
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_point$ = 8						; size = 4
___formal$ = 12						; size = 4
?ClipPrimFPoint@@YAXPAUPrimPointFC@@K@Z PROC		; ClipPrimFPoint

; 232  : {

	push	ebp
	mov	ebp, esp

; 233  : 	pvtClipPrimPoint( point, (DrawPrimFp)DrawPrimFPoint );

	push	OFFSET ?DrawPrimFPoint@@YAXPAUPrimPointFC@@@Z ; DrawPrimFPoint
	mov	eax, DWORD PTR _point$[ebp]
	push	eax
	call	?pvtClipPrimPoint@@YAXPAUPrimPointFC@@P6AXPAUPrim@@@Z@Z ; pvtClipPrimPoint
	add	esp, 8

; 234  : }

	pop	ebp
	ret	0
?ClipPrimFPoint@@YAXPAUPrimPointFC@@K@Z ENDP		; ClipPrimFPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_newPoly$ = -660					; size = 44
_i$ = -616						; size = 4
_uv$ = -612						; size = 304
_I$ = -308						; size = 152
_xyz$ = -156						; size = 152
__$ArrayPad$ = -4					; size = 4
_poly$ = 8						; size = 4
_clipTest$ = 12						; size = 4
?ClipPolyTGL@@YAXPAUPolyTexVCN@@K@Z PROC		; ClipPolyTGL

; 1066 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 660				; 00000294H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1067 : 	PolyTexVCN	newPoly;
; 1068 : 	int			xyz[MAX_VERTS_PER_CLIPPED_POLYGON];
; 1069 : 	int			I[MAX_VERTS_PER_CLIPPED_POLYGON];
; 1070 : 	Ptexcoord	uv[MAX_VERTS_PER_CLIPPED_POLYGON];
; 1071 : 	int			i;
; 1072 : 
; 1073 : 	// Initialize our temporary polygon
; 1074 : 	newPoly.type		= poly->type;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _newPoly$[ebp], ecx

; 1075 : 	newPoly.nVerts		= poly->nVerts;

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _newPoly$[ebp+4], eax

; 1076 : 	newPoly.texIndex	= poly->texIndex;

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _newPoly$[ebp+36], edx

; 1077 : 	newPoly.xyz			= xyz;

	lea	eax, DWORD PTR _xyz$[ebp]
	mov	DWORD PTR _newPoly$[ebp+8], eax

; 1078 : 	newPoly.I			= I;

	lea	ecx, DWORD PTR _I$[ebp]
	mov	DWORD PTR _newPoly$[ebp+32], ecx

; 1079 : 	newPoly.uv			= uv;

	lea	edx, DWORD PTR _uv$[ebp]
	mov	DWORD PTR _newPoly$[ebp+40], edx

; 1080 : 	for (i=0; i<newPoly.nVerts; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ClipPolyTG
$LN3@ClipPolyTG:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@ClipPolyTG:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _newPoly$[ebp+4]
	jge	SHORT $LN2@ClipPolyTG

; 1081 : 		xyz[i]	= poly->xyz[i];

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _xyz$[ebp+ecx*4], eax

; 1082 : 		I[i]	= poly->I[i];

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _I$[ebp+eax*4], edx

; 1083 : 		uv[i]	= poly->uv[i];

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _uv$[ebp+edx*8], eax
	mov	DWORD PTR _uv$[ebp+edx*8+4], ecx

; 1084 : 	}

	jmp	SHORT $LN3@ClipPolyTG
$LN2@ClipPolyTG:

; 1085 : 
; 1086 : 	// Clip the temporary polygon (destructive)
; 1087 : 	if (pvtClipPoly( clipTest, &newPoly.nVerts, newPoly.xyz, NULL, newPoly.I, newPoly.uv )) {

	mov	eax, DWORD PTR _newPoly$[ebp+40]
	push	eax
	mov	ecx, DWORD PTR _newPoly$[ebp+32]
	push	ecx
	push	0
	mov	edx, DWORD PTR _newPoly$[ebp+8]
	push	edx
	lea	eax, DWORD PTR _newPoly$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _clipTest$[ebp]
	push	ecx
	call	?pvtClipPoly@@YAHKPAH000PAUPtexcoord@@@Z ; pvtClipPoly
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN5@ClipPolyTG

; 1088 : 		DrawPolyTGL( &newPoly );

	lea	edx, DWORD PTR _newPoly$[ebp]
	push	edx
	call	?DrawPolyTGL@@YAXPAUPolyTexVCN@@@Z	; DrawPolyTGL
	add	esp, 4
$LN5@ClipPolyTG:

; 1089 : 	}
; 1090 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ClipPolyTGL@@YAXPAUPolyTexVCN@@K@Z ENDP		; ClipPolyTGL
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_newPoly$ = -504					; size = 40
_i$ = -464						; size = 4
_uv$ = -460						; size = 304
_xyz$ = -156						; size = 152
__$ArrayPad$ = -4					; size = 4
_poly$ = 8						; size = 4
_clipTest$ = 12						; size = 4
?ClipPolyTG@@YAXPAUPolyTexVC@@K@Z PROC			; ClipPolyTG

; 958  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 504				; 000001f8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 959  : 	PolyTexVC	newPoly;
; 960  : 	int			xyz[MAX_VERTS_PER_CLIPPED_POLYGON];
; 961  : 	Ptexcoord	uv[MAX_VERTS_PER_CLIPPED_POLYGON];
; 962  : 	int			i;
; 963  : 
; 964  : 	// Initialize our temporary polygon
; 965  : 	newPoly.type		= poly->type;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _newPoly$[ebp], ecx

; 966  : 	newPoly.nVerts		= poly->nVerts;

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _newPoly$[ebp+4], eax

; 967  : 	newPoly.texIndex	= poly->texIndex;

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _newPoly$[ebp+32], edx

; 968  : 	newPoly.xyz			= xyz;

	lea	eax, DWORD PTR _xyz$[ebp]
	mov	DWORD PTR _newPoly$[ebp+8], eax

; 969  : 	newPoly.uv			= uv;

	lea	ecx, DWORD PTR _uv$[ebp]
	mov	DWORD PTR _newPoly$[ebp+36], ecx

; 970  : 	for (i=0; i<newPoly.nVerts; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ClipPolyTG
$LN3@ClipPolyTG:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN4@ClipPolyTG:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _newPoly$[ebp+4]
	jge	SHORT $LN2@ClipPolyTG

; 971  : 		xyz[i]	= poly->xyz[i];

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _xyz$[ebp+eax*4], edx

; 972  : 		uv[i]	= poly->uv[i];

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _uv$[ebp+edx*8], eax
	mov	DWORD PTR _uv$[ebp+edx*8+4], ecx

; 973  : 	}

	jmp	SHORT $LN3@ClipPolyTG
$LN2@ClipPolyTG:

; 974  : 
; 975  : 	// Clip the temporary polygon (destructive)
; 976  : 	if (pvtClipPoly( clipTest, &newPoly.nVerts, newPoly.xyz, NULL, NULL, newPoly.uv )) {

	mov	eax, DWORD PTR _newPoly$[ebp+36]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _newPoly$[ebp+8]
	push	ecx
	lea	edx, DWORD PTR _newPoly$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _clipTest$[ebp]
	push	eax
	call	?pvtClipPoly@@YAHKPAH000PAUPtexcoord@@@Z ; pvtClipPoly
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN5@ClipPolyTG

; 977  : 		DrawPolyTG( &newPoly );

	lea	ecx, DWORD PTR _newPoly$[ebp]
	push	ecx
	call	?DrawPolyTG@@YAXPAUPolyTexVC@@@Z	; DrawPolyTG
	add	esp, 4
$LN5@ClipPolyTG:

; 978  : 	}
; 979  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ClipPolyTG@@YAXPAUPolyTexVC@@K@Z ENDP			; ClipPolyTG
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_newPoly$ = -508					; size = 44
_i$ = -464						; size = 4
_uv$ = -460						; size = 304
_xyz$ = -156						; size = 152
__$ArrayPad$ = -4					; size = 4
_poly$ = 8						; size = 4
_clipTest$ = 12						; size = 4
?ClipPolyTL@@YAXPAUPolyTexFCN@@K@Z PROC			; ClipPolyTL

; 850  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 508				; 000001fcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 851  : 	PolyTexFCN	newPoly;
; 852  : 	int			xyz[MAX_VERTS_PER_CLIPPED_POLYGON];
; 853  : 	Ptexcoord	uv[MAX_VERTS_PER_CLIPPED_POLYGON];
; 854  : 	int			i;
; 855  : 
; 856  : 	// Initialize our temporary polygon
; 857  : 	newPoly.type		= poly->type;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _newPoly$[ebp], ecx

; 858  : 	newPoly.nVerts		= poly->nVerts;

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _newPoly$[ebp+4], eax

; 859  : 	newPoly.texIndex	= poly->texIndex;

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _newPoly$[ebp+36], edx

; 860  : 	newPoly.I			= poly->I;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _newPoly$[ebp+32], ecx

; 861  : 	newPoly.xyz			= xyz;

	lea	edx, DWORD PTR _xyz$[ebp]
	mov	DWORD PTR _newPoly$[ebp+8], edx

; 862  : 	newPoly.uv			= uv;

	lea	eax, DWORD PTR _uv$[ebp]
	mov	DWORD PTR _newPoly$[ebp+40], eax

; 863  : 	for (i=0; i<newPoly.nVerts; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ClipPolyTL
$LN3@ClipPolyTL:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@ClipPolyTL:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _newPoly$[ebp+4]
	jge	SHORT $LN2@ClipPolyTL

; 864  : 		xyz[i]	= poly->xyz[i];

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _xyz$[ebp+edx*4], ecx

; 865  : 		uv[i]	= poly->uv[i];

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR [eax+ecx*8+4]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _uv$[ebp+ecx*8], edx
	mov	DWORD PTR _uv$[ebp+ecx*8+4], eax

; 866  : 	}

	jmp	SHORT $LN3@ClipPolyTL
$LN2@ClipPolyTL:

; 867  : 
; 868  : 	// Clip the temporary polygon (destructive)
; 869  : 	if (pvtClipPoly( clipTest, &newPoly.nVerts, newPoly.xyz, NULL, NULL, newPoly.uv )) {

	mov	edx, DWORD PTR _newPoly$[ebp+40]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _newPoly$[ebp+8]
	push	eax
	lea	ecx, DWORD PTR _newPoly$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _clipTest$[ebp]
	push	edx
	call	?pvtClipPoly@@YAHKPAH000PAUPtexcoord@@@Z ; pvtClipPoly
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN5@ClipPolyTL

; 870  : 		DrawPolyTL( &newPoly );

	lea	eax, DWORD PTR _newPoly$[ebp]
	push	eax
	call	?DrawPolyTL@@YAXPAUPolyTexFCN@@@Z	; DrawPolyTL
	add	esp, 4
$LN5@ClipPolyTL:

; 871  : 	}
; 872  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ClipPolyTL@@YAXPAUPolyTexFCN@@K@Z ENDP			; ClipPolyTL
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_newPoly$ = -504					; size = 40
_i$ = -464						; size = 4
_uv$ = -460						; size = 304
_xyz$ = -156						; size = 152
__$ArrayPad$ = -4					; size = 4
_poly$ = 8						; size = 4
_clipTest$ = 12						; size = 4
?ClipPolyT@@YAXPAUPolyTexFC@@K@Z PROC			; ClipPolyT

; 746  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 504				; 000001f8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 747  : 	PolyTexFC	newPoly;
; 748  : 	int			xyz[MAX_VERTS_PER_CLIPPED_POLYGON];
; 749  : 	Ptexcoord	uv[MAX_VERTS_PER_CLIPPED_POLYGON];
; 750  : 	int			i;
; 751  : 
; 752  : 	// Initialize our temporary polygon
; 753  : 	newPoly.type		= poly->type;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _newPoly$[ebp], ecx

; 754  : 	newPoly.nVerts		= poly->nVerts;

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _newPoly$[ebp+4], eax

; 755  : 	newPoly.texIndex	= poly->texIndex;

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _newPoly$[ebp+32], edx

; 756  : 	newPoly.xyz			= xyz;

	lea	eax, DWORD PTR _xyz$[ebp]
	mov	DWORD PTR _newPoly$[ebp+8], eax

; 757  : 	newPoly.uv			= uv;

	lea	ecx, DWORD PTR _uv$[ebp]
	mov	DWORD PTR _newPoly$[ebp+36], ecx

; 758  : 	for (i=0; i<newPoly.nVerts; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ClipPolyT
$LN3@ClipPolyT:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN4@ClipPolyT:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _newPoly$[ebp+4]
	jge	SHORT $LN2@ClipPolyT

; 759  : 		xyz[i]	= poly->xyz[i];

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _xyz$[ebp+eax*4], edx

; 760  : 		uv[i]	= poly->uv[i];

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _uv$[ebp+edx*8], eax
	mov	DWORD PTR _uv$[ebp+edx*8+4], ecx

; 761  : 	}

	jmp	SHORT $LN3@ClipPolyT
$LN2@ClipPolyT:

; 762  : 
; 763  : 	// Clip the temporary polygon (destructive)
; 764  : 	if (pvtClipPoly( clipTest, &newPoly.nVerts, newPoly.xyz, NULL, NULL, newPoly.uv )) {

	mov	eax, DWORD PTR _newPoly$[ebp+36]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _newPoly$[ebp+8]
	push	ecx
	lea	edx, DWORD PTR _newPoly$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _clipTest$[ebp]
	push	eax
	call	?pvtClipPoly@@YAHKPAH000PAUPtexcoord@@@Z ; pvtClipPoly
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN5@ClipPolyT

; 765  : 		DrawPolyT( &newPoly );

	lea	ecx, DWORD PTR _newPoly$[ebp]
	push	ecx
	call	?DrawPolyT@@YAXPAUPolyTexFC@@@Z		; DrawPolyT
	add	esp, 4
$LN5@ClipPolyT:

; 766  : 	}
; 767  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ClipPolyT@@YAXPAUPolyTexFC@@K@Z ENDP			; ClipPolyT
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_newPoly$ = -500					; size = 36
_i$ = -464						; size = 4
_rgba$ = -460						; size = 152
_I$ = -308						; size = 152
_xyz$ = -156						; size = 152
__$ArrayPad$ = -4					; size = 4
_poly$ = 8						; size = 4
_clipTest$ = 12						; size = 4
?ClipPolyGL@@YAXPAUPolyVCN@@K@Z PROC			; ClipPolyGL

; 692  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 500				; 000001f4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 693  : 	PolyVCN		newPoly;
; 694  : 	int			xyz[MAX_VERTS_PER_CLIPPED_POLYGON];
; 695  : 	int			rgba[MAX_VERTS_PER_CLIPPED_POLYGON];
; 696  : 	int			I[MAX_VERTS_PER_CLIPPED_POLYGON];
; 697  : 	int			i;
; 698  : 
; 699  : 	// Initialize our temporary polygon
; 700  : 	newPoly.type	= poly->type;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _newPoly$[ebp], ecx

; 701  : 	newPoly.nVerts	= poly->nVerts;

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _newPoly$[ebp+4], eax

; 702  : 	newPoly.xyz		= xyz;

	lea	ecx, DWORD PTR _xyz$[ebp]
	mov	DWORD PTR _newPoly$[ebp+8], ecx

; 703  : 	newPoly.rgba	= rgba;

	lea	edx, DWORD PTR _rgba$[ebp]
	mov	DWORD PTR _newPoly$[ebp+28], edx

; 704  : 	newPoly.I		= I;

	lea	eax, DWORD PTR _I$[ebp]
	mov	DWORD PTR _newPoly$[ebp+32], eax

; 705  : 	for (i=0; i<newPoly.nVerts; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ClipPolyGL
$LN3@ClipPolyGL:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@ClipPolyGL:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _newPoly$[ebp+4]
	jge	SHORT $LN2@ClipPolyGL

; 706  : 		xyz[i]	= poly->xyz[i];

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _xyz$[ebp+edx*4], ecx

; 707  : 		rgba[i]	= poly->rgba[i];

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _rgba$[ebp+ecx*4], eax

; 708  : 		I[i]	= poly->I[i];

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _I$[ebp+eax*4], edx

; 709  : 	}

	jmp	SHORT $LN3@ClipPolyGL
$LN2@ClipPolyGL:

; 710  : 
; 711  : 	// Clip the temporary polygon (destructive)
; 712  : 	if (pvtClipPoly( clipTest, &newPoly.nVerts, newPoly.xyz, newPoly.rgba, newPoly.I, NULL )) {

	push	0
	mov	eax, DWORD PTR _newPoly$[ebp+32]
	push	eax
	mov	ecx, DWORD PTR _newPoly$[ebp+28]
	push	ecx
	mov	edx, DWORD PTR _newPoly$[ebp+8]
	push	edx
	lea	eax, DWORD PTR _newPoly$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _clipTest$[ebp]
	push	ecx
	call	?pvtClipPoly@@YAHKPAH000PAUPtexcoord@@@Z ; pvtClipPoly
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN5@ClipPolyGL

; 713  : 		DrawPolyGL( &newPoly );

	lea	edx, DWORD PTR _newPoly$[ebp]
	push	edx
	call	?DrawPolyGL@@YAXPAUPolyVCN@@@Z		; DrawPolyGL
	add	esp, 4
$LN5@ClipPolyGL:

; 714  : 	}
; 715  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ClipPolyGL@@YAXPAUPolyVCN@@K@Z ENDP			; ClipPolyGL
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_newPoly$ = -344					; size = 32
_i$ = -312						; size = 4
_rgba$ = -308						; size = 152
_xyz$ = -156						; size = 152
__$ArrayPad$ = -4					; size = 4
_poly$ = 8						; size = 4
_clipTest$ = 12						; size = 4
?ClipPolyG@@YAXPAUPolyVC@@K@Z PROC			; ClipPolyG

; 644  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 344				; 00000158H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 645  : 	PolyVC	newPoly;
; 646  : 	int		xyz[MAX_VERTS_PER_CLIPPED_POLYGON];
; 647  : 	int		rgba[MAX_VERTS_PER_CLIPPED_POLYGON];
; 648  : 	int		i;
; 649  : 
; 650  : 	// Initialize our temporary polygon
; 651  : 	newPoly.type	= poly->type;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _newPoly$[ebp], ecx

; 652  : 	newPoly.nVerts	= poly->nVerts;

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _newPoly$[ebp+4], eax

; 653  : 	newPoly.xyz		= xyz;

	lea	ecx, DWORD PTR _xyz$[ebp]
	mov	DWORD PTR _newPoly$[ebp+8], ecx

; 654  : 	newPoly.rgba	= rgba;

	lea	edx, DWORD PTR _rgba$[ebp]
	mov	DWORD PTR _newPoly$[ebp+28], edx

; 655  : 	for (i=0; i<newPoly.nVerts; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ClipPolyG
$LN3@ClipPolyG:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@ClipPolyG:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _newPoly$[ebp+4]
	jge	SHORT $LN2@ClipPolyG

; 656  : 		xyz[i]	= poly->xyz[i];

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _xyz$[ebp+ecx*4], eax

; 657  : 		rgba[i]	= poly->rgba[i];

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _rgba$[ebp+eax*4], edx

; 658  : 	}

	jmp	SHORT $LN3@ClipPolyG
$LN2@ClipPolyG:

; 659  : 
; 660  : 	// Clip the temporary polygon (destructive)
; 661  : 	if (pvtClipPoly( clipTest, &newPoly.nVerts, newPoly.xyz, newPoly.rgba, NULL, NULL )) {

	push	0
	push	0
	mov	eax, DWORD PTR _newPoly$[ebp+28]
	push	eax
	mov	ecx, DWORD PTR _newPoly$[ebp+8]
	push	ecx
	lea	edx, DWORD PTR _newPoly$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _clipTest$[ebp]
	push	eax
	call	?pvtClipPoly@@YAHKPAH000PAUPtexcoord@@@Z ; pvtClipPoly
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN5@ClipPolyG

; 662  : 		DrawPolyG( &newPoly );

	lea	ecx, DWORD PTR _newPoly$[ebp]
	push	ecx
	call	?DrawPolyG@@YAXPAUPolyVC@@@Z		; DrawPolyG
	add	esp, 4
$LN5@ClipPolyG:

; 663  : 	}
; 664  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ClipPolyG@@YAXPAUPolyVC@@K@Z ENDP			; ClipPolyG
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_newPoly$ = -196					; size = 36
_i$ = -160						; size = 4
_xyz$ = -156						; size = 152
__$ArrayPad$ = -4					; size = 4
_poly$ = 8						; size = 4
_clipTest$ = 12						; size = 4
?ClipPolyL@@YAXPAUPolyFCN@@K@Z PROC			; ClipPolyL

; 598  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 599  : 	PolyFCN	newPoly;
; 600  : 	int		xyz[MAX_VERTS_PER_CLIPPED_POLYGON];
; 601  : 	int		i;
; 602  : 
; 603  : 	// Initialize our temporary polygon
; 604  : 	newPoly.type	= poly->type;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _newPoly$[ebp], ecx

; 605  : 	newPoly.nVerts	= poly->nVerts;

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _newPoly$[ebp+4], eax

; 606  : 	newPoly.rgba	= poly->rgba;

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _newPoly$[ebp+28], edx

; 607  : 	newPoly.I		= poly->I;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _newPoly$[ebp+32], ecx

; 608  : 	newPoly.xyz		= xyz;

	lea	edx, DWORD PTR _xyz$[ebp]
	mov	DWORD PTR _newPoly$[ebp+8], edx

; 609  : 	for (i=0; i<newPoly.nVerts; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ClipPolyL
$LN3@ClipPolyL:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@ClipPolyL:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _newPoly$[ebp+4]
	jge	SHORT $LN2@ClipPolyL

; 610  : 		xyz[i] = poly->xyz[i];

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _xyz$[ebp+ecx*4], eax

; 611  : 	}

	jmp	SHORT $LN3@ClipPolyL
$LN2@ClipPolyL:

; 612  : 
; 613  : 	// Clip the temporary polygon (destructive)
; 614  : 	if (pvtClipPoly( clipTest, &newPoly.nVerts, newPoly.xyz, NULL, NULL, NULL )) {

	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _newPoly$[ebp+8]
	push	ecx
	lea	edx, DWORD PTR _newPoly$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _clipTest$[ebp]
	push	eax
	call	?pvtClipPoly@@YAHKPAH000PAUPtexcoord@@@Z ; pvtClipPoly
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN5@ClipPolyL

; 615  : 		DrawPolyL( &newPoly );

	lea	ecx, DWORD PTR _newPoly$[ebp]
	push	ecx
	call	?DrawPolyL@@YAXPAUPolyFCN@@@Z		; DrawPolyL
	add	esp, 4
$LN5@ClipPolyL:

; 616  : 	}
; 617  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ClipPolyL@@YAXPAUPolyFCN@@K@Z ENDP			; ClipPolyL
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_newPoly$ = -192					; size = 32
_i$ = -160						; size = 4
_xyz$ = -156						; size = 152
__$ArrayPad$ = -4					; size = 4
_poly$ = 8						; size = 4
_clipTest$ = 12						; size = 4
?ClipPoly@@YAXPAUPolyFC@@K@Z PROC			; ClipPoly

; 554  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 555  : 	PolyFC	newPoly;
; 556  : 	int		xyz[MAX_VERTS_PER_CLIPPED_POLYGON];
; 557  : 	int		i;
; 558  : 
; 559  : 	// Initialize our temporary polygon
; 560  : 	newPoly.type	= poly->type;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _newPoly$[ebp], ecx

; 561  : 	newPoly.rgba	= poly->rgba;

	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _newPoly$[ebp+28], eax

; 562  : 	newPoly.nVerts	= poly->nVerts;

	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _newPoly$[ebp+4], edx

; 563  : 	newPoly.xyz		= xyz;

	lea	eax, DWORD PTR _xyz$[ebp]
	mov	DWORD PTR _newPoly$[ebp+8], eax

; 564  : 	for (i=0; i<newPoly.nVerts; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ClipPoly
$LN3@ClipPoly:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@ClipPoly:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _newPoly$[ebp+4]
	jge	SHORT $LN2@ClipPoly

; 565  : 		xyz[i] = poly->xyz[i];

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _xyz$[ebp+edx*4], ecx

; 566  : 	}

	jmp	SHORT $LN3@ClipPoly
$LN2@ClipPoly:

; 567  : 
; 568  : 	// Clip the temporary polygon (destructive)
; 569  : 	if (pvtClipPoly( clipTest, &newPoly.nVerts, newPoly.xyz, NULL, NULL, NULL )) {

	push	0
	push	0
	push	0
	mov	edx, DWORD PTR _newPoly$[ebp+8]
	push	edx
	lea	eax, DWORD PTR _newPoly$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _clipTest$[ebp]
	push	ecx
	call	?pvtClipPoly@@YAHKPAH000PAUPtexcoord@@@Z ; pvtClipPoly
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN5@ClipPoly

; 570  : 		DrawPoly( &newPoly );

	lea	edx, DWORD PTR _newPoly$[ebp]
	push	edx
	call	?DrawPoly@@YAXPAUPolyFC@@@Z		; DrawPoly
	add	esp, 4
$LN5@ClipPoly:

; 571  : 	}
; 572  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ClipPoly@@YAXPAUPolyFC@@K@Z ENDP			; ClipPoly
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_line$ = 8						; size = 4
___formal$ = 12						; size = 4
?ClipPrimLine@@YAXPAUPrimLineFC@@K@Z PROC		; ClipPrimLine

; 327  : {

	push	ebp
	mov	ebp, esp

; 328  : 	pvtClipPrimLine( line, (DrawPrimFp)DrawPrimLine );

	push	OFFSET ?DrawPrimLine@@YAXPAUPrimLineFC@@@Z ; DrawPrimLine
	mov	eax, DWORD PTR _line$[ebp]
	push	eax
	call	?pvtClipPrimLine@@YAXPAUPrimLineFC@@P6AXPAUPrim@@@Z@Z ; pvtClipPrimLine
	add	esp, 8

; 329  : }

	pop	ebp
	ret	0
?ClipPrimLine@@YAXPAUPrimLineFC@@K@Z ENDP		; ClipPrimLine
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\bsplib\polylibclip.cpp
_TEXT	SEGMENT
_point$ = 8						; size = 4
___formal$ = 12						; size = 4
?ClipPrimPoint@@YAXPAUPrimPointFC@@K@Z PROC		; ClipPrimPoint

; 226  : {

	push	ebp
	mov	ebp, esp

; 227  : 	pvtClipPrimPoint( point, (DrawPrimFp)DrawPrimPoint );

	push	OFFSET ?DrawPrimPoint@@YAXPAUPrimPointFC@@@Z ; DrawPrimPoint
	mov	eax, DWORD PTR _point$[ebp]
	push	eax
	call	?pvtClipPrimPoint@@YAXPAUPrimPointFC@@P6AXPAUPrim@@@Z@Z ; pvtClipPrimPoint
	add	esp, 8

; 228  : }

	pop	ebp
	ret	0
?ClipPrimPoint@@YAXPAUPrimPointFC@@K@Z ENDP		; ClipPrimPoint
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z PROC	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ENDP	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ PROC	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CComBSTR@ATL@@QAE@XZ			; ATL::CComBSTR::~CComBSTR
	mov	esp, ebp
	pop	ebp
	ret	0
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ ENDP	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\atlmfc\include\atlcomcli.h
;	COMDAT ??1CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CComBSTR@ATL@@QAE@XZ PROC				; ATL::CComBSTR::~CComBSTR, COMDAT
; _this$ = ecx

; 1656 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1657 :     ::SysFreeString(m_str);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__SysFreeString@4

; 1658 : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1CComBSTR@ATL@@QAE@XZ ENDP				; ATL::CComBSTR::~CComBSTR
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Where$[ebp]
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
