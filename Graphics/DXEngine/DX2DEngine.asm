; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\Graphics\DXEngine\DX2DEngine.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?VT@?$CVarTypeInfo@M@ATL@@2GB			; ATL::CVarTypeInfo<float>::VT
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ ; ATL::CVarTypeInfo<float>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAM@ATL@@2GB			; ATL::CVarTypeInfo<float *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ ; ATL::CVarTypeInfo<float *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@N@ATL@@2GB			; ATL::CVarTypeInfo<double>::VT
PUBLIC	?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ ; ATL::CVarTypeInfo<double>::pmField
PUBLIC	__GUID_00000109_0000_0000_c000_000000000046
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?VT@?$CVarTypeInfo@PAN@ATL@@2GB			; ATL::CVarTypeInfo<double *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ ; ATL::CVarTypeInfo<double *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB	; ATL::CVarTypeInfo<tagVARIANT *>::VT
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?VT@?$CVarTypeInfo@PA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t *>::VT
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ ; ATL::CVarTypeInfo<wchar_t *>::pmField
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?_pAtlModule@ATL@@3PAVCAtlModule@1@A		; ATL::_pAtlModule
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ ; ATL::CVarTypeInfo<wchar_t * *>::pmField
PUBLIC	?m_libid@CAtlModule@ATL@@2U_GUID@@A		; ATL::CAtlModule::m_libid
PUBLIC	?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown * *>::pmField
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch *>::pmField
PUBLIC	_IID_IAxWinHostWindow
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch * *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY>::VT
PUBLIC	?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY>::pmField
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY *>::pmField
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?m_bInitFailed@CAtlBaseModule@ATL@@2_NA		; ATL::CAtlBaseModule::m_bInitFailed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	_IID_IAxWinHostWindowLic
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	__GUID_00020400_0000_0000_c000_000000000046
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	_IID_IAxWinAmbientDispatch
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	_LIBID_ATLLib
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?_pModule@ATL@@3PAVCComModule@1@A		; ATL::_pModule
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	__GUID_00000000_0000_0000_c000_000000000046
PUBLIC	___pobjMapEntryFirst
PUBLIC	___pobjMapEntryLast
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@	; `string'
PUBLIC	??_C@_08PICKODJL@FileType?$AA@			; `string'
PUBLIC	??_C@_09JKPGEJCH@Interface?$AA@			; `string'
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	??_C@_08PPIOJEA@Hardware?$AA@			; `string'
PUBLIC	??_C@_04IHBFOLAC@Mime?$AA@			; `string'
PUBLIC	?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA	; ATL::_pPerfRegFunc
PUBLIC	??_C@_03DDIMFGBA@SAM?$AA@			; `string'
PUBLIC	?_pPerfUnRegFunc@ATL@@3P6AJXZA			; ATL::_pPerfUnRegFunc
PUBLIC	??_C@_08LOPHEHKG@SECURITY?$AA@			; `string'
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?_AtlRegisterPerUser@ATL@@3_NA			; ATL::_AtlRegisterPerUser
PUBLIC	??_C@_06FDHFNJBJ@SYSTEM?$AA@			; `string'
PUBLIC	??_C@_08KEKAJNJI@Software?$AA@			; `string'
PUBLIC	??_C@_07KJLOKDKB@TypeLib?$AA@			; `string'
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	__GUID_b196b284_bab4_101a_b69c_00aa00341d07
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	__GUID_0002e012_0000_0000_c000_000000000046
PUBLIC	_IID_IAxWinAmbientDispatchEx
PUBLIC	_IID_IInternalConnection
PUBLIC	??_C@_05GIBEAPNE@CLSID?$AA@			; `string'
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	??_C@_05PDIKPLII@AppID?$AA@			; `string'
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?XMMAcc@@3T__m128@@A				; XMMAcc
PUBLIC	?XMMAcc1@@3T__m128@@A				; XMMAcc1
PUBLIC	?XMMPos@@3TXMMVector@@A				; XMMPos
PUBLIC	?XMMRadius@@3TXMMVector@@A			; XMMRadius
PUBLIC	?XMMStore@@3TXMMVector@@A			; XMMStore
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?chDirSep@ATL@@3DB				; ATL::chDirSep
PUBLIC	?chRightBracket@ATL@@3DB			; ATL::chRightBracket
PUBLIC	?chLeftBracket@ATL@@3DB				; ATL::chLeftBracket
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?chQuote@ATL@@3DB				; ATL::chQuote
PUBLIC	?chEquals@ATL@@3DB				; ATL::chEquals
PUBLIC	?szStringVal@ATL@@3QBDB				; ATL::szStringVal
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	??_C@_01CPLAODJH@S?$AA@				; `string'
PUBLIC	?multiszStringVal@ATL@@3QBDB			; ATL::multiszStringVal
PUBLIC	??_C@_01PLPBNMEI@M?$AA@				; `string'
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?szDwordVal@ATL@@3QBDB				; ATL::szDwordVal
PUBLIC	??_C@_01CKDDGHAB@D?$AA@				; `string'
PUBLIC	?szBinaryVal@ATL@@3QBDB				; ATL::szBinaryVal
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	??_C@_01HMGJMAIH@B?$AA@				; `string'
PUBLIC	?szValToken@ATL@@3QBDB				; ATL::szValToken
PUBLIC	__GUID_00000146_0000_0000_c000_000000000046
PUBLIC	??_C@_03LAIAPFCB@Val?$AA@			; `string'
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?szForceRemove@ATL@@3QBDB			; ATL::szForceRemove
PUBLIC	??_C@_0M@DBGDLGLL@ForceRemove?$AA@		; `string'
PUBLIC	?szNoRemove@ATL@@3QBDB				; ATL::szNoRemove
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	??_C@_08KAAPDIAN@NoRemove?$AA@			; `string'
PUBLIC	?szDelete@ATL@@3QBDB				; ATL::szDelete
PUBLIC	??_C@_06JBKGCNBB@Delete?$AA@			; `string'
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA	; ATL::CComApartment::ATL_CREATE_OBJECT
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?_Min@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Min
PUBLIC	?_Max@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Max
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?_Min@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Min
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?_Max@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Max
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Min@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Min
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?_Max@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Max
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?_Min@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Min
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?_Max@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Max
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?_Min@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Min
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?_Max@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Max
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?_Min@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Min
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?_Max@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Max
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?VT@?$CVarTypeInfo@D@ATL@@2GB			; ATL::CVarTypeInfo<char>::VT
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A ; ATL::_pAtlAutoThreadModule
PUBLIC	?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ ; ATL::CVarTypeInfo<char>::pmField
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?VT@?$CVarTypeInfo@E@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ ; ATL::CVarTypeInfo<unsigned char>::pmField
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	_CLSID_Registrar
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?VT@?$CVarTypeInfo@PAD@ATL@@2GB			; ATL::CVarTypeInfo<char *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ ; ATL::CVarTypeInfo<char *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAE@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ ; ATL::CVarTypeInfo<unsigned char *>::pmField
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	_IID_IRegistrar
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?VT@?$CVarTypeInfo@F@ATL@@2GB			; ATL::CVarTypeInfo<short>::VT
PUBLIC	?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ ; ATL::CVarTypeInfo<short>::pmField
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?VT@?$CVarTypeInfo@PAF@ATL@@2GB			; ATL::CVarTypeInfo<short *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ ; ATL::CVarTypeInfo<short *>::pmField
PUBLIC	?vbb0@CDXEngine@@2TXMMVector@@A			; CDXEngine::vbb0
PUBLIC	?vbb1@CDXEngine@@2TXMMVector@@A			; CDXEngine::vbb1
PUBLIC	?vbb2@CDXEngine@@2TXMMVector@@A			; CDXEngine::vbb2
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?vbb3@CDXEngine@@2TXMMVector@@A			; CDXEngine::vbb3
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?BBvbb0@CDXEngine@@2TXMMVector@@A		; CDXEngine::BBvbb0
PUBLIC	?VT@?$CVarTypeInfo@G@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short>::VT
PUBLIC	?BBvbb1@CDXEngine@@2TXMMVector@@A		; CDXEngine::BBvbb1
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ ; ATL::CVarTypeInfo<unsigned short>::pmField
PUBLIC	__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
PUBLIC	?BBvbb2@CDXEngine@@2TXMMVector@@A		; CDXEngine::BBvbb2
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?BBvbb3@CDXEngine@@2TXMMVector@@A		; CDXEngine::BBvbb3
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?BBCx@CDXEngine@@2PATXMMVector@@A		; CDXEngine::BBCx
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?VT@?$CVarTypeInfo@PAG@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short *>::VT
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ ; ATL::CVarTypeInfo<unsigned short *>::pmField
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?VT@?$CVarTypeInfo@H@ATL@@2GB			; ATL::CVarTypeInfo<int>::VT
PUBLIC	?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ ; ATL::CVarTypeInfo<int>::pmField
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?VT@?$CVarTypeInfo@PAH@ATL@@2GB			; ATL::CVarTypeInfo<int *>::VT
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ ; ATL::CVarTypeInfo<int *>::pmField
PUBLIC	?MAX_VALUE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_VALUE
PUBLIC	?VT@?$CVarTypeInfo@I@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int>::VT
PUBLIC	?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ ; ATL::CVarTypeInfo<unsigned int>::pmField
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?VT@?$CVarTypeInfo@PAI@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ ; ATL::CVarTypeInfo<unsigned int *>::pmField
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?VT@?$CVarTypeInfo@J@ATL@@2GB			; ATL::CVarTypeInfo<long>::VT
PUBLIC	?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ ; ATL::CVarTypeInfo<long>::pmField
PUBLIC	?rgszNeverDelete@CRegParser@ATL@@1QBQBDB	; ATL::CRegParser::rgszNeverDelete
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?cbNeverDelete@CRegParser@ATL@@1HB		; ATL::CRegParser::cbNeverDelete
PUBLIC	?VT@?$CVarTypeInfo@PAJ@ATL@@2GB			; ATL::CVarTypeInfo<long *>::VT
PUBLIC	?MAX_TYPE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_TYPE
PUBLIC	?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ ; ATL::CVarTypeInfo<long *>::pmField
PUBLIC	_IID_IDocHostUIHandlerDispatch
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?VT@?$CVarTypeInfo@K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long>::VT
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ ; ATL::CVarTypeInfo<unsigned long>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAK@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ ; ATL::CVarTypeInfo<unsigned long *>::pmField
PUBLIC	?LayerSelected@CDXEngine@@0KA			; CDXEngine::LayerSelected
PUBLIC	?Total2DVertices@CDXEngine@@0KA			; CDXEngine::Total2DVertices
PUBLIC	?Total2DItems@CDXEngine@@0KA			; CDXEngine::Total2DItems
PUBLIC	?VBSelected@CDXEngine@@0KA			; CDXEngine::VBSelected
PUBLIC	?Radius2D@CDXEngine@@0MA			; CDXEngine::Radius2D
PUBLIC	?VT@?$CVarTypeInfo@_J@ATL@@2GB			; ATL::CVarTypeInfo<__int64>::VT
PUBLIC	?TestDistance@CDXEngine@@0MA			; CDXEngine::TestDistance
PUBLIC	?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ ; ATL::CVarTypeInfo<__int64>::pmField
PUBLIC	?Layers@CDXEngine@@0PAULayerItemType@@A		; CDXEngine::Layers
PUBLIC	?Draws2D@CDXEngine@@0PAUDrawItemType@@A		; CDXEngine::Draws2D
PUBLIC	?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A ; CDXEngine::Dyn2DVertexBuffer
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?DrawIndexes@CDXEngine@@0PAGA			; CDXEngine::DrawIndexes
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?SortBuffer@CDXEngine@@0PAUSortItemType@@A	; CDXEngine::SortBuffer
PUBLIC	?VT@?$CVarTypeInfo@PA_J@ATL@@2GB		; ATL::CVarTypeInfo<__int64 *>::VT
PUBLIC	?SortBuckets@CDXEngine@@0PAY0BAA@KA		; CDXEngine::SortBuckets
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	__GUID_00000000_0000_0000_0000_000000000000
PUBLIC	?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ ; ATL::CVarTypeInfo<__int64 *>::pmField
PUBLIC	?SortTail@CDXEngine@@0PAY0BAA@KA		; CDXEngine::SortTail
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?DrawOrder@CDXEngine@@0PAKA			; CDXEngine::DrawOrder
PUBLIC	?Indexed2D@CDXEngine@@0KA			; CDXEngine::Indexed2D
PUBLIC	?IndexStart@CDXEngine@@0KA			; CDXEngine::IndexStart
PUBLIC	?VT@?$CVarTypeInfo@_K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned __int64>::VT
PUBLIC	?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PA_K@ATL@@2GB		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_BSS	SEGMENT
?_pAtlModule@ATL@@3PAVCAtlModule@1@A DD 01H DUP (?)	; ATL::_pAtlModule
_BSS	ENDS
;	COMDAT ?m_libid@CAtlModule@ATL@@2U_GUID@@A
_BSS	SEGMENT
?m_libid@CAtlModule@ATL@@2U_GUID@@A DB 010H DUP (?)	; ATL::CAtlModule::m_libid
_BSS	ENDS
;	COMDAT ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA
_BSS	SEGMENT
?m_bInitFailed@CAtlBaseModule@ATL@@2_NA DB 01H DUP (?)	; ATL::CAtlBaseModule::m_bInitFailed
_BSS	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_BSS	SEGMENT
?_pModule@ATL@@3PAVCComModule@1@A DD 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA
_BSS	SEGMENT
?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA DD 01H DUP (?) ; ATL::_pPerfRegFunc
_BSS	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZA
_BSS	SEGMENT
?_pPerfUnRegFunc@ATL@@3P6AJXZA DD 01H DUP (?)		; ATL::_pPerfUnRegFunc
_BSS	ENDS
;	COMDAT ?_AtlRegisterPerUser@ATL@@3_NA
_BSS	SEGMENT
?_AtlRegisterPerUser@ATL@@3_NA DB 01H DUP (?)		; ATL::_AtlRegisterPerUser
_BSS	ENDS
_BSS	SEGMENT
?XMMAcc@@3T__m128@@A DB 010H DUP (?)			; XMMAcc
?XMMAcc1@@3T__m128@@A DB 010H DUP (?)			; XMMAcc1
?XMMPos@@3TXMMVector@@A DB 010H DUP (?)			; XMMPos
?XMMRadius@@3TXMMVector@@A DB 010H DUP (?)		; XMMRadius
?XMMStore@@3TXMMVector@@A DB 010H DUP (?)		; XMMStore
_BSS	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_BSS	SEGMENT
?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA DD 01H DUP (?) ; ATL::CComApartment::ATL_CREATE_OBJECT
_BSS	ENDS
;	COMDAT ?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A
_BSS	SEGMENT
?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A DD 01H DUP (?) ; ATL::_pAtlAutoThreadModule
_BSS	ENDS
_BSS	SEGMENT
?vbb0@CDXEngine@@2TXMMVector@@A DB 010H DUP (?)		; CDXEngine::vbb0
?vbb1@CDXEngine@@2TXMMVector@@A DB 010H DUP (?)		; CDXEngine::vbb1
?vbb2@CDXEngine@@2TXMMVector@@A DB 010H DUP (?)		; CDXEngine::vbb2
?vbb3@CDXEngine@@2TXMMVector@@A DB 010H DUP (?)		; CDXEngine::vbb3
?BBvbb0@CDXEngine@@2TXMMVector@@A DB 010H DUP (?)	; CDXEngine::BBvbb0
?BBvbb1@CDXEngine@@2TXMMVector@@A DB 010H DUP (?)	; CDXEngine::BBvbb1
?BBvbb2@CDXEngine@@2TXMMVector@@A DB 010H DUP (?)	; CDXEngine::BBvbb2
?BBvbb3@CDXEngine@@2TXMMVector@@A DB 010H DUP (?)	; CDXEngine::BBvbb3
?BBCx@CDXEngine@@2PATXMMVector@@A DB 030H DUP (?)	; CDXEngine::BBCx
?LayerSelected@CDXEngine@@0KA DD 01H DUP (?)		; CDXEngine::LayerSelected
?Total2DVertices@CDXEngine@@0KA DD 01H DUP (?)		; CDXEngine::Total2DVertices
?Total2DItems@CDXEngine@@0KA DD 01H DUP (?)		; CDXEngine::Total2DItems
?VBSelected@CDXEngine@@0KA DD 01H DUP (?)		; CDXEngine::VBSelected
?Radius2D@CDXEngine@@0MA DD 01H DUP (?)			; CDXEngine::Radius2D
?TestDistance@CDXEngine@@0MA DD 01H DUP (?)		; CDXEngine::TestDistance
?Layers@CDXEngine@@0PAULayerItemType@@A DB 054H DUP (?)	; CDXEngine::Layers
?Draws2D@CDXEngine@@0PAUDrawItemType@@A DB 0240000H DUP (?) ; CDXEngine::Draws2D
?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A DB 010H DUP (?) ; CDXEngine::Dyn2DVertexBuffer
?DrawIndexes@CDXEngine@@0PAGA DW 0820H DUP (?)		; CDXEngine::DrawIndexes
	ALIGN	8

?SortBuffer@CDXEngine@@0PAUSortItemType@@A DQ 010000H DUP (?) ; CDXEngine::SortBuffer
?SortBuckets@CDXEngine@@0PAY0BAA@KA DD 0400H DUP (?)	; CDXEngine::SortBuckets
?SortTail@CDXEngine@@0PAY0BAA@KA DD 0400H DUP (?)	; CDXEngine::SortTail
?DrawOrder@CDXEngine@@0PAKA DD 07H DUP (?)		; CDXEngine::DrawOrder
?Indexed2D@CDXEngine@@0KA DD 01H DUP (?)		; CDXEngine::Indexed2D
?IndexStart@CDXEngine@@0KA DD 01H DUP (?)		; CDXEngine::IndexStart
_BSS	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_K@ATL@@2GB DW 04015H		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_K@ATL@@2GB DW 015H			; ATL::CVarTypeInfo<unsigned __int64>::VT
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64 *>::pmField
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
CONST	SEGMENT
__GUID_00000000_0000_0000_0000_000000000000 DD 00H
	DW	00H
	DW	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_J@ATL@@2GB DW 04014H		; ATL::CVarTypeInfo<__int64 *>::VT
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_J@ATL@@2GB DW 014H			; ATL::CVarTypeInfo<__int64>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAK@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAK@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned long *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long>::pmField
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@K@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned long>::VT
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
_IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ DD 08H ; ATL::CVarTypeInfo<long *>::pmField
CONST	ENDS
;	COMDAT ?MAX_TYPE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_TYPE@CRegParser@ATL@@1HB DD 01000H			; ATL::CRegParser::MAX_TYPE
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAJ@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAJ@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<long *>::VT
CONST	ENDS
;	COMDAT ?cbNeverDelete@CRegParser@ATL@@1HB
CONST	SEGMENT
?cbNeverDelete@CRegParser@ATL@@1HB DD 0cH		; ATL::CRegParser::cbNeverDelete
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?rgszNeverDelete@CRegParser@ATL@@1QBQBDB
CONST	SEGMENT
?rgszNeverDelete@CRegParser@ATL@@1QBQBDB DD FLAT:??_C@_05PDIKPLII@AppID?$AA@ ; ATL::CRegParser::rgszNeverDelete
	DD	FLAT:??_C@_05GIBEAPNE@CLSID?$AA@
	DD	FLAT:??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
	DD	FLAT:??_C@_08PICKODJL@FileType?$AA@
	DD	FLAT:??_C@_09JKPGEJCH@Interface?$AA@
	DD	FLAT:??_C@_08PPIOJEA@Hardware?$AA@
	DD	FLAT:??_C@_04IHBFOLAC@Mime?$AA@
	DD	FLAT:??_C@_03DDIMFGBA@SAM?$AA@
	DD	FLAT:??_C@_08LOPHEHKG@SECURITY?$AA@
	DD	FLAT:??_C@_06FDHFNJBJ@SYSTEM?$AA@
	DD	FLAT:??_C@_08KEKAJNJI@Software?$AA@
	DD	FLAT:??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ DD 08H ; ATL::CVarTypeInfo<long>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@J@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<long>::VT
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAI@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAI@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned int *>::VT
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@I@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@I@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned int>::VT
CONST	ENDS
;	COMDAT ?MAX_VALUE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_VALUE@CRegParser@ATL@@1HB DD 01000H		; ATL::CRegParser::MAX_VALUE
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ DD 08H ; ATL::CVarTypeInfo<int *>::pmField
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAH@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAH@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<int *>::VT
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ DD 08H ; ATL::CVarTypeInfo<int>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@H@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@H@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<int>::VT
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short *>::pmField
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAG@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAG@ATL@@2GB DW 04012H		; ATL::CVarTypeInfo<unsigned short *>::VT
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT __GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
CONST	SEGMENT
__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352 DD 0fc4801a3H
	DW	02ba9H
	DW	011cfH
	DB	0a2H
	DB	029H
	DB	00H
	DB	0aaH
	DB	00H
	DB	03dH
	DB	073H
	DB	052H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short>::pmField
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@G@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@G@ATL@@2GB DW 012H			; ATL::CVarTypeInfo<unsigned short>::VT
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ DD 08H ; ATL::CVarTypeInfo<short *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAF@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAF@ATL@@2GB DW 04002H		; ATL::CVarTypeInfo<short *>::VT
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ DD 08H ; ATL::CVarTypeInfo<short>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@F@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@F@ATL@@2GB DW 02H			; ATL::CVarTypeInfo<short>::VT
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT
_IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAE@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAE@ATL@@2GB DW 04011H		; ATL::CVarTypeInfo<unsigned char *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ DD 08H ; ATL::CVarTypeInfo<char *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAD@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAD@ATL@@2GB DW 04010H		; ATL::CVarTypeInfo<char *>::VT
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
CONST	SEGMENT
_DefOrder DD	04H
	DD	03H
	DD	02H
	DD	01H
	DD	00H
	DD	05H
	DD	0ffffffffH
_L_2	DD	03f317218r			; 0.693147
_NEAR_CLIP DD	03f800000r			; 1
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT
_CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@E@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@E@ATL@@2GB DW 011H			; ATL::CVarTypeInfo<unsigned char>::VT
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ DD 08H ; ATL::CVarTypeInfo<char>::pmField
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@D@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@D@ATL@@2GB DW 010H			; ATL::CVarTypeInfo<char>::VT
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Max@?$AtlLimits@_K@ATL@@2_KB DQ ffffffffffffffffH	; ATL::AtlLimits<unsigned __int64>::_Max
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Min@?$AtlLimits@_K@ATL@@2_KB DQ 0000000000000000H	; ATL::AtlLimits<unsigned __int64>::_Min
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Max@?$AtlLimits@_J@ATL@@2_JB DQ 7fffffffffffffffH	; ATL::AtlLimits<__int64>::_Max
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Min@?$AtlLimits@_J@ATL@@2_JB DQ 8000000000000000H	; ATL::AtlLimits<__int64>::_Min
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Max@?$AtlLimits@K@ATL@@2KB DD 0ffffffffH		; ATL::AtlLimits<unsigned long>::_Max
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Min@?$AtlLimits@K@ATL@@2KB DD 00H			; ATL::AtlLimits<unsigned long>::_Min
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Max@?$AtlLimits@J@ATL@@2JB DD 07fffffffH		; ATL::AtlLimits<long>::_Max
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Min@?$AtlLimits@J@ATL@@2JB DD 080000000H		; ATL::AtlLimits<long>::_Min
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Max@?$AtlLimits@I@ATL@@2IB DD 0ffffffffH		; ATL::AtlLimits<unsigned int>::_Max
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Min@?$AtlLimits@I@ATL@@2IB DD 00H			; ATL::AtlLimits<unsigned int>::_Min
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Max@?$AtlLimits@H@ATL@@2HB DD 07fffffffH		; ATL::AtlLimits<int>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Min@?$AtlLimits@H@ATL@@2HB DD 080000000H		; ATL::AtlLimits<int>::_Min
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ??_C@_06JBKGCNBB@Delete?$AA@
CONST	SEGMENT
??_C@_06JBKGCNBB@Delete?$AA@ DB 'Delete', 00H		; `string'
CONST	ENDS
;	COMDAT ?szDelete@ATL@@3QBDB
CONST	SEGMENT
?szDelete@ATL@@3QBDB DD FLAT:??_C@_06JBKGCNBB@Delete?$AA@ ; ATL::szDelete
CONST	ENDS
;	COMDAT ??_C@_08KAAPDIAN@NoRemove?$AA@
CONST	SEGMENT
??_C@_08KAAPDIAN@NoRemove?$AA@ DB 'NoRemove', 00H	; `string'
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?szNoRemove@ATL@@3QBDB
CONST	SEGMENT
?szNoRemove@ATL@@3QBDB DD FLAT:??_C@_08KAAPDIAN@NoRemove?$AA@ ; ATL::szNoRemove
CONST	ENDS
;	COMDAT ??_C@_0M@DBGDLGLL@ForceRemove?$AA@
CONST	SEGMENT
??_C@_0M@DBGDLGLL@ForceRemove?$AA@ DB 'ForceRemove', 00H ; `string'
CONST	ENDS
;	COMDAT ?szForceRemove@ATL@@3QBDB
CONST	SEGMENT
?szForceRemove@ATL@@3QBDB DD FLAT:??_C@_0M@DBGDLGLL@ForceRemove?$AA@ ; ATL::szForceRemove
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ??_C@_03LAIAPFCB@Val?$AA@
CONST	SEGMENT
??_C@_03LAIAPFCB@Val?$AA@ DB 'Val', 00H			; `string'
CONST	ENDS
;	COMDAT __GUID_00000146_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000146_0000_0000_c000_000000000046 DD 0146H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?szValToken@ATL@@3QBDB
CONST	SEGMENT
?szValToken@ATL@@3QBDB DD FLAT:??_C@_03LAIAPFCB@Val?$AA@ ; ATL::szValToken
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B?$AA@
CONST	SEGMENT
??_C@_01HMGJMAIH@B?$AA@ DB 'B', 00H			; `string'
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?szBinaryVal@ATL@@3QBDB
CONST	SEGMENT
?szBinaryVal@ATL@@3QBDB DD FLAT:??_C@_01HMGJMAIH@B?$AA@	; ATL::szBinaryVal
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D?$AA@
CONST	SEGMENT
??_C@_01CKDDGHAB@D?$AA@ DB 'D', 00H			; `string'
CONST	ENDS
;	COMDAT ?szDwordVal@ATL@@3QBDB
CONST	SEGMENT
?szDwordVal@ATL@@3QBDB DD FLAT:??_C@_01CKDDGHAB@D?$AA@	; ATL::szDwordVal
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ??_C@_01PLPBNMEI@M?$AA@
CONST	SEGMENT
??_C@_01PLPBNMEI@M?$AA@ DB 'M', 00H			; `string'
CONST	ENDS
;	COMDAT ?multiszStringVal@ATL@@3QBDB
CONST	SEGMENT
?multiszStringVal@ATL@@3QBDB DD FLAT:??_C@_01PLPBNMEI@M?$AA@ ; ATL::multiszStringVal
CONST	ENDS
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT
??_C@_01CPLAODJH@S?$AA@ DB 'S', 00H			; `string'
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?szStringVal@ATL@@3QBDB
CONST	SEGMENT
?szStringVal@ATL@@3QBDB DD FLAT:??_C@_01CPLAODJH@S?$AA@	; ATL::szStringVal
CONST	ENDS
;	COMDAT ?chEquals@ATL@@3DB
CONST	SEGMENT
?chEquals@ATL@@3DB DB 03dH				; ATL::chEquals
CONST	ENDS
;	COMDAT ?chQuote@ATL@@3DB
CONST	SEGMENT
?chQuote@ATL@@3DB DB 027H				; ATL::chQuote
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?chLeftBracket@ATL@@3DB
CONST	SEGMENT
?chLeftBracket@ATL@@3DB DB 07bH				; ATL::chLeftBracket
CONST	ENDS
;	COMDAT ?chRightBracket@ATL@@3DB
CONST	SEGMENT
?chRightBracket@ATL@@3DB DB 07dH			; ATL::chRightBracket
CONST	ENDS
;	COMDAT ?chDirSep@ATL@@3DB
CONST	SEGMENT
?chDirSep@ATL@@3DB DB 05cH				; ATL::chDirSep
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ??_C@_05PDIKPLII@AppID?$AA@
CONST	SEGMENT
??_C@_05PDIKPLII@AppID?$AA@ DB 'AppID', 00H		; `string'
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ??_C@_05GIBEAPNE@CLSID?$AA@
CONST	SEGMENT
??_C@_05GIBEAPNE@CLSID?$AA@ DB 'CLSID', 00H		; `string'
CONST	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT
_IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatchEx
CONST	SEGMENT
_IID_IAxWinAmbientDispatchEx DD 0b2d0778bH
	DW	0ac99H
	DW	04c58H
	DB	0a5H
	DB	0c8H
	DB	0e7H
	DB	072H
	DB	04eH
	DB	053H
	DB	016H
	DB	0b5H
CONST	ENDS
;	COMDAT __GUID_0002e012_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_0002e012_0000_0000_c000_000000000046 DD 02e012H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT __GUID_b196b284_bab4_101a_b69c_00aa00341d07
CONST	SEGMENT
__GUID_b196b284_bab4_101a_b69c_00aa00341d07 DD 0b196b284H
	DW	0bab4H
	DW	0101aH
	DB	0b6H
	DB	09cH
	DB	00H
	DB	0aaH
	DB	00H
	DB	034H
	DB	01dH
	DB	07H
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	SEGMENT
??_C@_07KJLOKDKB@TypeLib?$AA@ DB 'TypeLib', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KEKAJNJI@Software?$AA@
CONST	SEGMENT
??_C@_08KEKAJNJI@Software?$AA@ DB 'Software', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDHFNJBJ@SYSTEM?$AA@
CONST	SEGMENT
??_C@_06FDHFNJBJ@SYSTEM?$AA@ DB 'SYSTEM', 00H		; `string'
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ??_C@_08LOPHEHKG@SECURITY?$AA@
CONST	SEGMENT
??_C@_08LOPHEHKG@SECURITY?$AA@ DB 'SECURITY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03DDIMFGBA@SAM?$AA@
CONST	SEGMENT
??_C@_03DDIMFGBA@SAM?$AA@ DB 'SAM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IHBFOLAC@Mime?$AA@
CONST	SEGMENT
??_C@_04IHBFOLAC@Mime?$AA@ DB 'Mime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPIOJEA@Hardware?$AA@
CONST	SEGMENT
??_C@_08PPIOJEA@Hardware?$AA@ DB 'Hardware', 00H	; `string'
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ??_C@_09JKPGEJCH@Interface?$AA@
CONST	SEGMENT
??_C@_09JKPGEJCH@Interface?$AA@ DB 'Interface', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PICKODJL@FileType?$AA@
CONST	SEGMENT
??_C@_08PICKODJL@FileType?$AA@ DB 'FileType', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
CONST	SEGMENT
??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@ DB 'Component Categories', 00H ; `string'
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ___pobjMapEntryLast
ATL$__z	SEGMENT
___pobjMapEntryLast DD 00H
ATL$__z	ENDS
;	COMDAT ___pobjMapEntryFirst
ATL$__a	SEGMENT
___pobjMapEntryFirst DD 00H
ATL$__a	ENDS
;	COMDAT __GUID_00000000_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000000_0000_0000_c000_000000000046 DD 00H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT
_LIBID_ATLLib DD 044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT
_IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT __GUID_00020400_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020400_0000_0000_c000_000000000046 DD 020400H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindowLic
CONST	SEGMENT
_IID_IAxWinHostWindowLic DD 03935bda8H
	DW	04ed9H
	DW	0495cH
	DB	086H
	DB	050H
	DB	0e0H
	DB	01fH
	DB	0c1H
	DB	0e3H
	DB	08aH
	DB	04bH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB DW 04006H	; ATL::CVarTypeInfo<tagCY *>::VT
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB DW 06H		; ATL::CVarTypeInfo<tagCY>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB DW 04009H	; ATL::CVarTypeInfo<IDispatch * *>::VT
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT
_IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB DW 09H	; ATL::CVarTypeInfo<IDispatch *>::VT
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
_DATA	SEGMENT
_cloudPntList DD 0c5bcc000r			; -6040
	DD	0c4070000r			; -540
	DD	0c694ac00r			; -19030
	DD	0c6de1c00r			; -28430
	DD	0c4dfc000r			; -1790
	DD	046dcc800r			; 28260
	DD	047104200r			; 36930
	DD	045732000r			; 3890
	DD	04744ea00r			; 50410
	DD	045336000r			; 2870
	DD	0c4d48000r			; -1700
	DD	04736da00r			; 46810
	DD	0c763ee00r			; -58350
	DD	0c4d48000r			; -1700
	DD	0c64c1000r			; -13060
	DD	046f2bc00r			; 31070
	DD	045480000r			; 3200
	DD	0c7293800r			; -43320
	DD	0c7bdc400r			; -97160
	DD	0c4d48000r			; -1700
	DD	04576e000r			; 3950
	DD	0c792e000r			; -75200
	DD	0c4bb8000r			; -1500
	DD	047957400r			; 76520
	DD	04759ee00r			; 55790
	DD	0c5a1e000r			; -5180
	DD	0c7a24e00r			; -83100
	DD	0c7473800r			; -51000
	DD	0c3a00000r			; -320
	DD	0c7829100r			; -66850
	DD	047733400r			; 62260
	DD	0c3a00000r			; -320
	DD	047708200r			; 61570
	DD	0c7710e00r			; -61710
	DD	0c550c000r			; -3340
	DD	046fb7c00r			; 32190
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	0c5bcc000r			; -6040
	DD	0c7495400r			; -51540
	DD	0c694ac00r			; -19030
	DD	0c6a7a800r			; -21460
	DD	0c74b0200r			; -51970
	DD	0468e8000r			; 18240
	DD	047298800r			; 43400
	DD	0c74bf200r			; -52210
	DD	046bc7000r			; 24120
	DD	0c749f400r			; -51700
	DD	0c74bc000r			; -52160
	DD	046948400r			; 19010
	DD	0c605e800r			; -8570
	DD	0c7488200r			; -51330
	DD	0c74ca600r			; -52390
	DD	04731bc00r			; 45500
	DD	0c7509800r			; -53400
	DD	0c6725800r			; -15510
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	0c7a1ae00r			; -82780
	DD	0c749ea00r			; -51690
	DD	0c7bce300r			; -96710
	DD	0c6126800r			; -9370
	DD	0c7495400r			; -51540
	DD	043cd0000r			; 410
	DD	0c6a7a800r			; -21460
	DD	0c74a8a00r			; -51850
	DD	0473fae00r			; 49070
	DD	0457c8000r			; 4040
	DD	0c74e4a00r			; -52810
	DD	047871e00r			; 69180
	DD	0c6cbc000r			; -26080
	DD	0c74bc000r			; -52160
	DD	046984400r			; 19490
	DD	0452fa000r			; 2810
	DD	0c7488200r			; -51330
	DD	0c7081800r			; -34840
	DD	0c7719a00r			; -61850
	DD	0c749d600r			; -51670
	DD	047b17600r			; 90860
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	047c04e00r			; 98460
	DD	0c74d1400r			; -52500
	DD	0c732a200r			; -45730
	DD	0467b9000r			; 16100
	DD	0c7487800r			; -51320
	DD	0c749a400r			; -51620
	DD	047636c00r			; 58220
	DD	0c74e0400r			; -52740
	DD	0c760b000r			; -57520
	DD	0c6126800r			; -9370
	DD	0c4070000r			; -540
	DD	043cd0000r			; 410
	DD	0c4e60000r			; -1840
	DD	0c6a30c00r			; -20870
	DD	0470a6600r			; 35430
	DD	0c7230c00r			; -41740
	DD	046924000r			; 18720
	DD	04797d600r			; 77740
	DD	0460d9000r			; 9060
	DD	0c616c800r			; -9650
	DD	0c7921300r			; -74790
_lightningPosList DD 041300000r			; 11
	DD	000000000r			; 0
	DD	040e00000r			; 7
	DD	040a00000r			; 5
	DD	041100000r			; 9
	DD	041000000r			; 8
	DD	041000000r			; 8
	DD	041600000r			; 14
	DD	041800000r			; 16
	DD	041a00000r			; 20
	DD	041200000r			; 10
	DD	041c00000r			; 24
	DD	041300000r			; 11
	DD	041d80000r			; 27
	DD	040c00000r			; 6
	DD	041f00000r			; 30
	DD	040e00000r			; 7
	DD	042040000r			; 33
	DD	03f800000r			; 1
	DD	042180000r			; 38
	DD	040a00000r			; 5
	DD	042280000r			; 42
	DD	040a00000r			; 5
	DD	042340000r			; 45
	DD	041400000r			; 12
	DD	042400000r			; 48
	DD	041a00000r			; 20
	DD	042500000r			; 52
	DD	041a00000r			; 20
	DD	042680000r			; 58
	DD	041b80000r			; 23
	DD	042740000r			; 61
	DD	041b00000r			; 22
	DD	0427c0000r			; 63
	DD	041b00000r			; 22
	DD	042840000r			; 66
	DD	041c80000r			; 25
	DD	042880000r			; 68
	DD	041a00000r			; 20
	DD	0428c0000r			; 70
	DD	041c00000r			; 24
	DD	042960000r			; 75
	DD	041c00000r			; 24
	DD	0429a0000r			; 77
	DD	041f80000r			; 31
	DD	042a00000r			; 80
	DD	041f80000r			; 31
	DD	042a60000r			; 83
	DD	042040000r			; 33
	DD	042b00000r			; 88
	DD	041f80000r			; 31
	DD	042b80000r			; 92
	DD	0423c0000r			; 47
	DD	042ce0000r			; 103
	DD	042380000r			; 46
	DD	042d20000r			; 105
	DD	0423c0000r			; 47
	DD	042d60000r			; 107
	DD	042340000r			; 45
	DD	042e00000r			; 112
	DD	042400000r			; 48
	DD	042e40000r			; 114
	DD	042380000r			; 46
	DD	042ea0000r			; 117
	DD	0422c0000r			; 43
	DD	043000000r			; 128
_DATA	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB DW 0400dH	; ATL::CVarTypeInfo<IUnknown * *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB DW 0dH	; ATL::CVarTypeInfo<IUnknown *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB DW 04008H		; ATL::CVarTypeInfo<wchar_t * *>::VT
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t *>::pmField
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_W@ATL@@2GB DW 08H			; ATL::CVarTypeInfo<wchar_t *>::VT
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB DW 0400cH	; ATL::CVarTypeInfo<tagVARIANT *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ DD 08H ; ATL::CVarTypeInfo<double *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAN@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAN@ATL@@2GB DW 04005H		; ATL::CVarTypeInfo<double *>::VT
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT __GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
CONST	SEGMENT
__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713 DD 07fd52380H
	DW	04e07H
	DW	0101bH
	DB	0aeH
	DB	02dH
	DB	08H
	DB	00H
	DB	02bH
	DB	02eH
	DB	0c7H
	DB	013H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT __GUID_00000109_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000109_0000_0000_c000_000000000046 DD 0109H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ DD 08H ; ATL::CVarTypeInfo<double>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@N@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@N@ATL@@2GB DW 05H			; ATL::CVarTypeInfo<double>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ DD 08H ; ATL::CVarTypeInfo<float *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAM@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAM@ATL@@2GB DW 04004H		; ATL::CVarTypeInfo<float *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ DD 08H ; ATL::CVarTypeInfo<float>::pmField
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@M@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@M@ATL@@2GB DW 04H			; ATL::CVarTypeInfo<float>::VT
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	??_GTextureHandle@@QAEPAXI@Z			; TextureHandle::`scalar deleting destructor'
PUBLIC	?F_I32@@YAKM@Z					; F_I32
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z	; D3DXMatrixIdentity
PUBLIC	?TexHandle@Texture@@QAEKXZ			; Texture::TexHandle
PUBLIC	??0CTextureItem@@QAE@XZ				; CTextureItem::CTextureItem
PUBLIC	??0CTextureSurface@@QAE@XZ			; CTextureSurface::CTextureSurface
PUBLIC	??1CTextureSurface@@QAE@XZ			; CTextureSurface::~CTextureSurface
PUBLIC	??_GCTextureSurface@@QAEPAXI@Z			; CTextureSurface::`scalar deleting destructor'
PUBLIC	?DrawBlip@CDXEngine@@QAEXPAVObjectInstance@@PAUD3DXMATRIX@@PBUTpoint@@MMMM_N@Z ; CDXEngine::DrawBlip
PUBLIC	?FlushBlips@CDXEngine@@AAEXXZ			; CDXEngine::FlushBlips
PUBLIC	?DrawBlitNode@CDXEngine@@AAEXXZ			; CDXEngine::DrawBlitNode
PUBLIC	?Draw3DPoint@CDXEngine@@QAEXPAU_D3DVECTOR@@K_N1@Z ; CDXEngine::Draw3DPoint
PUBLIC	?Draw3DLine@CDXEngine@@QAEXPAU_D3DVECTOR@@0KK_N1@Z ; CDXEngine::Draw3DLine
PUBLIC	?GetDetailLevel@CDXEngine@@QAEMPAU_D3DVECTOR@@M@Z ; CDXEngine::GetDetailLevel
PUBLIC	?SetupTexturesOnDevice@CDXEngine@@QAEXXZ	; CDXEngine::SetupTexturesOnDevice
PUBLIC	?LoadTexture@CDXEngine@@QAEXPAD@Z		; CDXEngine::LoadTexture
PUBLIC	?GetTextureHandle@CDXEngine@@QAEKPAD@Z		; CDXEngine::GetTextureHandle
PUBLIC	?DX2D_GetTextureItem@CDXEngine@@QAEPAVCTextureItem@@PAD@Z ; CDXEngine::DX2D_GetTextureItem
PUBLIC	?DX2D_GetTextureCoords@CDXEngine@@QAEXPAVCTextureItem@@PAVCDrawBaseItem@@@Z ; CDXEngine::DX2D_GetTextureCoords
PUBLIC	?CleanUpTexturesOnDevice@CDXEngine@@QAEXXZ	; CDXEngine::CleanUpTexturesOnDevice
PUBLIC	?ReleaseTextures@CDXEngine@@QAEXXZ		; CDXEngine::ReleaseTextures
PUBLIC	?DX2D_GetTextureUV@CDXEngine@@QAEXPAVCTextureItem@@KAAM1@Z ; CDXEngine::DX2D_GetTextureUV
PUBLIC	?FlushDynamicObjects@CDXEngine@@QAEXXZ		; CDXEngine::FlushDynamicObjects
PUBLIC	?ComputeSphereVisibility@CDXEngine@@QAEKPAU_D3DVECTOR@@PAMK@Z ; CDXEngine::ComputeSphereVisibility
PUBLIC	?DX2D_GetVisibility@CDXEngine@@QAE_NPAUD3DXVECTOR3@@MK@Z ; CDXEngine::DX2D_GetVisibility
PUBLIC	?DX2D_GetDistance@CDXEngine@@QAEMPAUD3DXVECTOR3@@MK@Z ; CDXEngine::DX2D_GetDistance
PUBLIC	?DX2D_GetDistance@CDXEngine@@QAEMPAUD3DXVECTOR3@@K@Z ; CDXEngine::DX2D_GetDistance
PUBLIC	?DX2D_GetRelativePosition@CDXEngine@@QAEXPAUD3DXVECTOR3@@@Z ; CDXEngine::DX2D_GetRelativePosition
PUBLIC	?DX2D_Reset@CDXEngine@@QAEXXZ			; CDXEngine::DX2D_Reset
PUBLIC	?DX2D_InitLists@CDXEngine@@QAEXXZ		; CDXEngine::DX2D_InitLists
PUBLIC	?DX2D_AddQuad@CDXEngine@@QAEXKKPAUD3DXVECTOR3@@PAUD3DDYNVERTEX@@MK@Z ; CDXEngine::DX2D_AddQuad
PUBLIC	?DX2D_AddTri@CDXEngine@@QAEXKKPAUD3DXVECTOR3@@PAUD3DDYNVERTEX@@MK@Z ; CDXEngine::DX2D_AddTri
PUBLIC	?DX2D_AddBi@CDXEngine@@QAEXKKPAUD3DXVECTOR3@@PAUD3DDYNVERTEX@@MK@Z ; CDXEngine::DX2D_AddBi
PUBLIC	?DX2D_AddSingle@CDXEngine@@QAEXKKPAUD3DXVECTOR3@@PAUD3DDYNVERTEX@@MK@Z ; CDXEngine::DX2D_AddSingle
PUBLIC	?DX2D_AddPoly@CDXEngine@@QAEXKKPAUD3DXVECTOR3@@PAUD3DDYNVERTEX@@MKK@Z ; CDXEngine::DX2D_AddPoly
PUBLIC	?DX2D_SetDrawOrder@CDXEngine@@QAEXPAK@Z		; CDXEngine::DX2D_SetDrawOrder
PUBLIC	?DX2D_SetupSquareCx@CDXEngine@@QAEXMM@Z		; CDXEngine::DX2D_SetupSquareCx
PUBLIC	?DX2D_TransformBB@CDXEngine@@QAEXPATXMMVector@@0PAUD3DDYNVERTEX@@K@Z ; CDXEngine::DX2D_TransformBB
PUBLIC	?DX2D_TransformBB@CDXEngine@@QAEXPATXMMVector@@PAUD3DDYNVERTEX@@K@Z ; CDXEngine::DX2D_TransformBB
PUBLIC	?DX2D_MakeCameraSpace@CDXEngine@@QAEXPAUD3DXVECTOR3@@0@Z ; CDXEngine::DX2D_MakeCameraSpace
PUBLIC	?DX2D_ForceDistance@CDXEngine@@QAEXM@Z		; CDXEngine::DX2D_ForceDistance
PUBLIC	?DX2D_AddObject@CDXEngine@@QAEXKKPAUSurfaceStackType@@PAUD3DXVECTOR3@@@Z ; CDXEngine::DX2D_AddObject
PUBLIC	?DX2D_SetViewMode@CDXEngine@@QAEXXZ		; CDXEngine::DX2D_SetViewMode
PUBLIC	?DX2D_Flush2DObjects@CDXEngine@@AAEXXZ		; CDXEngine::DX2D_Flush2DObjects
PUBLIC	?DX2D_Init@CDXEngine@@AAEXXZ			; CDXEngine::DX2D_Init
PUBLIC	?DX2D_Release@CDXEngine@@AAEXXZ			; CDXEngine::DX2D_Release
PUBLIC	?DX2D_GenerateIndexes@CDXEngine@@AAEKK@Z	; CDXEngine::DX2D_GenerateIndexes
PUBLIC	?DX2D_SortIndexes@CDXEngine@@AAEKK@Z		; CDXEngine::DX2D_SortIndexes
PUBLIC	?DX2D_AssignLayers@CDXEngine@@AAEXXZ		; CDXEngine::DX2D_AssignLayers
PUBLIC	?CheckBufferSpace@CDXEngine@@AAE_NKK@Z		; CDXEngine::CheckBufferSpace
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_C@_04LFFPHNGG@?4DDS?$AA@			; `string'
PUBLIC	??_C@_0BL@PCCLNBEF@?$CFs?2terrdata?2MiscTex?2?$CFs?4ITM?$AA@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_02NGOCLIKE@?$DN?6?$AA@			; `string'
PUBLIC	??_C@_04BOICIEDE@Unit?$AA@			; `string'
PUBLIC	??_C@_0BM@KPKHLCDF@Corrupted?5Model?5ID?5?3?5?$CFd?5?$CB?$CB?$CB?$AA@ ; `string'
PUBLIC	??_C@_09KIOKOPID@DX?5Engine?$AA@		; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@437f0000
PUBLIC	__real@43800000
PUBLIC	__real@bf800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strcat:PROC
EXTRN	_strcmp:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	_strncpy:PROC
EXTRN	_strtok:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	_fclose:PROC
EXTRN	_fgets:PROC
EXTRN	_fopen:PROC
EXTRN	_printf:PROC
EXTRN	_sprintf:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	??1TextureHandle@@QAE@XZ:PROC			; TextureHandle::~TextureHandle
EXTRN	?ChooseLOD@ObjectParent@@QAEPAVObjectLOD@@MPAHPAM@Z:PROC ; ObjectParent::ChooseLOD
EXTRN	_D3DXVec3TransformCoord@12:PROC
EXTRN	_D3DXMatrixMultiply@12:PROC
EXTRN	_D3DXMatrixTranslation@16:PROC
EXTRN	?GetModelData@CDXVbManager@@QAEXAAUVBItemType@@K@Z:PROC ; CDXVbManager::GetModelData
EXTRN	?AddDrawRequest@CDXVbManager@@QAEXPAVObjectInstance@@KPAUD3DXMATRIX@@_NKM@Z:PROC ; CDXVbManager::AddDrawRequest
EXTRN	?GetDrawItem@CDXVbManager@@QAE_NPAPAVObjectInstance@@PAKPAUD3DXMATRIX@@PA_N1PAM@Z:PROC ; CDXVbManager::GetDrawItem
EXTRN	?OpenSimpleBuffer@CDXVbManager@@QAEXXZ:PROC	; CDXVbManager::OpenSimpleBuffer
EXTRN	??0Texture@@QAE@XZ:PROC				; Texture::Texture
EXTRN	??1Texture@@QAE@XZ:PROC				; Texture::~Texture
EXTRN	?LoadAndCreate@Texture@@QAEHPADK@Z:PROC		; Texture::LoadAndCreate
EXTRN	?FreeAll@Texture@@QAEXXZ:PROC			; Texture::FreeAll
EXTRN	?CreateZeroTexture@CDXEngine@@QAEXXZ:PROC	; CDXEngine::CreateZeroTexture
EXTRN	?SetStencilMode@CDXEngine@@QAEKK@Z:PROC		; CDXEngine::SetStencilMode
EXTRN	?FlushInit@CDXEngine@@AAEXXZ:PROC		; CDXEngine::FlushInit
EXTRN	?DrawSortedAlpha@CDXEngine@@AAEXK_N@Z:PROC	; CDXEngine::DrawSortedAlpha
EXTRN	?ResetFeatures@CDXEngine@@AAEXXZ:PROC		; CDXEngine::ResetFeatures
EXTRN	?SetRenderState@CDXEngine@@AAEXTDXFlagsType@@0_N@Z:PROC ; CDXEngine::SetRenderState
EXTRN	?TokenF@@YAMM@Z:PROC				; TokenF
EXTRN	?CheckHR@@YAXJ@Z:PROC				; CheckHR
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?TheVbManager@@3VCDXVbManager@@A:BYTE		; TheVbManager
EXTRN	?TheMaterial@CDXEngine@@2U_D3DMATERIAL7@@A:BYTE	; CDXEngine::TheMaterial
EXTRN	?m_LODBiasCx@CDXEngine@@0MA:DWORD		; CDXEngine::m_LODBiasCx
EXTRN	?m_TheObjectInstance@CDXEngine@@0PAVObjectInstance@@A:DWORD ; CDXEngine::m_TheObjectInstance
EXTRN	?m_LastObjectInstance@CDXEngine@@0PAVObjectInstance@@A:DWORD ; CDXEngine::m_LastObjectInstance
EXTRN	?m_FogLevel@CDXEngine@@0MA:DWORD		; CDXEngine::m_FogLevel
EXTRN	?m_BlipIntensity@CDXEngine@@0MA:DWORD		; CDXEngine::m_BlipIntensity
EXTRN	?m_LinearFogLevel@CDXEngine@@0MA:DWORD		; CDXEngine::m_LinearFogLevel
EXTRN	?m_VB@CDXEngine@@0UVBItemType@@A:BYTE		; CDXEngine::m_VB
EXTRN	?m_NODE@CDXEngine@@0TNodeScannerType@@A:DWORD	; CDXEngine::m_NODE
EXTRN	?ZeroTex@CDXEngine@@0PAVTextureHandle@@A:DWORD	; CDXEngine::ZeroTex
EXTRN	?AppliedState@CDXEngine@@0UD3DXMATRIX@@A:BYTE	; CDXEngine::AppliedState
EXTRN	?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A:DWORD ; CDXEngine::m_pD3DD
EXTRN	?m_pD3D@CDXEngine@@0PAUIDirect3D7@@A:DWORD	; CDXEngine::m_pD3D
EXTRN	?BBMatrix@CDXEngine@@0UD3DXMATRIX@@A:BYTE	; CDXEngine::BBMatrix
EXTRN	?CameraPos@CDXEngine@@0U_D3DVECTOR@@A:BYTE	; CDXEngine::CameraPos
EXTRN	?m_RenderState@CDXEngine@@0W4DX_StateType@@A:DWORD ; CDXEngine::m_RenderState
EXTRN	?XMMCamera@CDXEngine@@2TXMMVector@@A:BYTE	; CDXEngine::XMMCamera
EXTRN	?FalconDataDirectory@@3PADA:BYTE		; FalconDataDirectory
EXTRN	?realWeather@@3PAVRealWeather@@A:DWORD		; realWeather
EXTRN	?g_bGreyMFD@@3_NA:BYTE				; g_bGreyMFD
EXTRN	?bNVGmode@@3_NA:BYTE				; bNVGmode
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_09KIOKOPID@DX?5Engine?$AA@
CONST	SEGMENT
??_C@_09KIOKOPID@DX?5Engine?$AA@ DB 'DX Engine', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@KPKHLCDF@Corrupted?5Model?5ID?5?3?5?$CFd?5?$CB?$CB?$CB?$AA@
CONST	SEGMENT
??_C@_0BM@KPKHLCDF@Corrupted?5Model?5ID?5?3?5?$CFd?5?$CB?$CB?$CB?$AA@ DB 'C'
	DB	'orrupted Model ID : %d !!!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BOICIEDE@Unit?$AA@
CONST	SEGMENT
??_C@_04BOICIEDE@Unit?$AA@ DB 'Unit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02NGOCLIKE@?$DN?6?$AA@
CONST	SEGMENT
??_C@_02NGOCLIKE@?$DN?6?$AA@ DB '=', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@PCCLNBEF@?$CFs?2terrdata?2MiscTex?2?$CFs?4ITM?$AA@
CONST	SEGMENT
??_C@_0BL@PCCLNBEF@?$CFs?2terrdata?2MiscTex?2?$CFs?4ITM?$AA@ DB '%s\terrd'
	DB	'ata\MiscTex\%s.ITM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LFFPHNGG@?4DDS?$AA@
CONST	SEGMENT
??_C@_04LFFPHNGG@?4DDS?$AA@ DB '.DDS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?LoadTexture@CDXEngine@@QAEXPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadTexture@CDXEngine@@QAEXPAD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadTexture@CDXEngine@@QAEXPAD@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadTexture@CDXEngine@@QAEXPAD@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadTexture@CDXEngine@@QAEXPAD@Z$3
__ehfuncinfo$?LoadTexture@CDXEngine@@QAEXPAD@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?LoadTexture@CDXEngine@@QAEXPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
;	COMDAT ?CheckBufferSpace@CDXEngine@@AAE_NKK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_VbIndex$ = 8						; size = 4
_Size$ = 12						; size = 4
?CheckBufferSpace@CDXEngine@@AAE_NKK@Z PROC		; CDXEngine::CheckBufferSpace, COMDAT
; _this$ = ecx

; 400  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 401  : 	// check for buffer limit
; 402  : 	if(VbIndex + Size >= MAX_2D_VERTICES){

	mov	eax, DWORD PTR _VbIndex$[ebp]
	add	eax, DWORD PTR _Size$[ebp]
	cmp	eax, 65536				; 00010000H
	jb	SHORT $LN2@CheckBuffe

; 403  : 		// Start with a new Buffer from index 0
; 404  : 		VBSelected++;

	mov	ecx, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	add	ecx, 1
	mov	DWORD PTR ?VBSelected@CDXEngine@@0KA, ecx ; CDXEngine::VBSelected

; 405  : 		VbIndex = 0;

	mov	DWORD PTR _VbIndex$[ebp], 0
$LN2@CheckBuffe:

; 406  : 	}
; 407  : 	// if no more buffers, exit here
; 408  : 	if(VBSelected>=MAX_2D_BUFFERS) return false;

	cmp	DWORD PTR ?VBSelected@CDXEngine@@0KA, 1	; CDXEngine::VBSelected
	jb	SHORT $LN1@CheckBuffe
	xor	al, al
	jmp	SHORT $LN3@CheckBuffe
$LN1@CheckBuffe:

; 409  : 	return true;

	mov	al, 1
$LN3@CheckBuffe:

; 410  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CheckBufferSpace@CDXEngine@@AAE_NKK@Z ENDP		; CDXEngine::CheckBufferSpace
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
_this$ = -28						; size = 4
_Next$ = -24						; size = 4
_Stratus1Z$ = -20					; size = 4
_Stratus2Z$ = -16					; size = 4
_Draw$1 = -12						; size = 4
_Layer$ = -8						; size = 4
_Start$ = -4						; size = 4
?DX2D_AssignLayers@CDXEngine@@AAEXXZ PROC		; CDXEngine::DX2D_AssignLayers
; _this$ = ecx

; 1084 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 1085 : 	// get the entry of AUTO Layer
; 1086 : 	DWORD	Start=Layers[LAYER_AUTO].Start, Next;

	mov	eax, 12					; 0000000cH
	imul	eax, 6
	mov	ecx, DWORD PTR ?Layers@CDXEngine@@0PAULayerItemType@@A[eax]
	mov	DWORD PTR _Start$[ebp], ecx

; 1087 : 	// get the Startus Layers
; 1088 : #ifndef	DEBUG_ENGINE	
; 1089 : 	float	Stratus1Z=realWeather->stratusZ, Stratus2Z=realWeather->stratus2Z;

	mov	edx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	movss	xmm0, DWORD PTR [edx+15716]
	movss	DWORD PTR _Stratus1Z$[ebp], xmm0
	mov	eax, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	movss	xmm0, DWORD PTR [eax+15720]
	movss	DWORD PTR _Stratus2Z$[ebp], xmm0
$LN7@DX2D_Assig:

; 1090 : #else
; 1091 : 	float	Stratus1Z=0.0f, Stratus2Z=0.0f;
; 1092 : #endif
; 1093 : 	DWORD	Layer;
; 1094 : 	
; 1095 : 	// For each item in the AUTO list
; 1096 : 	while(Start!=0xFFFFFFFF){

	cmp	DWORD PTR _Start$[ebp], -1
	je	$LN6@DX2D_Assig

; 1097 : 		// Default to GROUND LAYER
; 1098 : 		Layer=LAYER_GROUND;

	mov	DWORD PTR _Layer$[ebp], 0

; 1099 : 		// get the Item and it's Z
; 1100 : 		DrawItemType &Draw=Draws2D[Start];

	mov	ecx, DWORD PTR _Start$[ebp]
	imul	ecx, 36					; 00000024H
	add	ecx, OFFSET ?Draws2D@CDXEngine@@0PAUDrawItemType@@A ; CDXEngine::Draws2D
	mov	DWORD PTR _Draw$1[ebp], ecx

; 1101 : 		if(Draw.Height<=Stratus2Z) Layer=LAYER_ROOF;

	mov	edx, DWORD PTR _Draw$1[ebp]
	movss	xmm0, DWORD PTR _Stratus2Z$[ebp]
	comiss	xmm0, DWORD PTR [edx+32]
	jb	SHORT $LN5@DX2D_Assig
	mov	DWORD PTR _Layer$[ebp], 4
	jmp	SHORT $LN3@DX2D_Assig
$LN5@DX2D_Assig:

; 1102 : 		else if(Draw.Height<=Stratus1Z) Layer=LAYER_MIDDLE;

	mov	eax, DWORD PTR _Draw$1[ebp]
	movss	xmm0, DWORD PTR _Stratus1Z$[ebp]
	comiss	xmm0, DWORD PTR [eax+32]
	jb	SHORT $LN3@DX2D_Assig
	mov	DWORD PTR _Layer$[ebp], 2
$LN3@DX2D_Assig:

; 1103 : 	
; 1104 : 		// ok, assign the item at the end of the layer
; 1105 : 		if(Layers[Layer].Start==-1)	Layers[Layer].Start=Start;

	mov	ecx, DWORD PTR _Layer$[ebp]
	imul	ecx, 12					; 0000000cH
	cmp	DWORD PTR ?Layers@CDXEngine@@0PAULayerItemType@@A[ecx], -1
	jne	SHORT $LN2@DX2D_Assig
	mov	edx, DWORD PTR _Layer$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _Start$[ebp]
	mov	DWORD PTR ?Layers@CDXEngine@@0PAULayerItemType@@A[edx], eax
	jmp	SHORT $LN1@DX2D_Assig
$LN2@DX2D_Assig:

; 1106 : 		else Draws2D[Layers[Layer].End].Next=Start;

	mov	ecx, DWORD PTR _Layer$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR ?Layers@CDXEngine@@0PAULayerItemType@@A[ecx+4]
	imul	edx, 36					; 00000024H
	mov	eax, DWORD PTR _Start$[ebp]
	mov	DWORD PTR ?Draws2D@CDXEngine@@0PAUDrawItemType@@A[edx], eax
$LN1@DX2D_Assig:

; 1107 : 		// assign links
; 1108 : 		Layers[Layer].End=Start;

	mov	ecx, DWORD PTR _Layer$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _Start$[ebp]
	mov	DWORD PTR ?Layers@CDXEngine@@0PAULayerItemType@@A[ecx+4], edx

; 1109 : 		Next=Draws2D[Start].Next;

	mov	eax, DWORD PTR _Start$[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR ?Draws2D@CDXEngine@@0PAUDrawItemType@@A[eax]
	mov	DWORD PTR _Next$[ebp], ecx

; 1110 : 		Draws2D[Start].Next=0xffffffff;

	mov	edx, DWORD PTR _Start$[ebp]
	imul	edx, 36					; 00000024H
	mov	DWORD PTR ?Draws2D@CDXEngine@@0PAUDrawItemType@@A[edx], -1

; 1111 : 		// ok, next item
; 1112 : 		Start=Next;

	mov	eax, DWORD PTR _Next$[ebp]
	mov	DWORD PTR _Start$[ebp], eax

; 1113 : 	}

	jmp	$LN7@DX2D_Assig
$LN6@DX2D_Assig:

; 1114 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DX2D_AssignLayers@CDXEngine@@AAEXXZ ENDP		; CDXEngine::DX2D_AssignLayers
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
_Next$ = -12						; size = 4
_Idx$ = -8						; size = 4
_Row$ = -4						; size = 4
_Start$ = 8						; size = 4
?DX2D_SortIndexes@CDXEngine@@AAEKK@Z PROC		; CDXEngine::DX2D_SortIndexes
; _this$ = ecx

; 1119 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1120 : 	DWORD	Idx, Row, Next;
; 1121 : 
; 1122 : 	// UnInitialize sort Buckets
; 1123 : 	memset(SortBuckets, 0xff, sizeof(SortBuckets));

	push	4096					; 00001000H
	push	255					; 000000ffH
	push	OFFSET ?SortBuckets@CDXEngine@@0PAY0BAA@KA ; CDXEngine::SortBuckets
	call	_memset
	add	esp, 12					; 0000000cH

; 1124 : 	memset(SortTail, 0xff, sizeof(SortTail));

	push	4096					; 00001000H
	push	255					; 000000ffH
	push	OFFSET ?SortTail@CDXEngine@@0PAY0BAA@KA	; CDXEngine::SortTail
	call	_memset
	add	esp, 12					; 0000000cH
$LN30@DX2D_SortI:

; 1125 : 
; 1126 : 	// * SORT LOWER DIGIT DIRECTLY FROM THE DRAW LIST INTO BUCKETS *
; 1127 : 	while(Start!=0xffffffff){

	cmp	DWORD PTR _Start$[ebp], -1
	je	$LN29@DX2D_SortI

; 1128 : 		// Take next item
; 1129 : 		Next=Draws2D[Start].Next;

	mov	eax, DWORD PTR _Start$[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR ?Draws2D@CDXEngine@@0PAUDrawItemType@@A[eax]
	mov	DWORD PTR _Next$[ebp], ecx

; 1130 : 		// No link
; 1131 : 		Draws2D[Start].Next=0xffffffff;

	mov	edx, DWORD PTR _Start$[ebp]
	imul	edx, 36					; 00000024H
	mov	DWORD PTR ?Draws2D@CDXEngine@@0PAUDrawItemType@@A[edx], -1

; 1132 : 		// Get the lower Digit
; 1133 : 		Idx=*(unsigned char*)&Draws2D[Start].Dist256;

	mov	eax, DWORD PTR _Start$[ebp]
	imul	eax, 36					; 00000024H
	movzx	ecx, BYTE PTR ?Draws2D@CDXEngine@@0PAUDrawItemType@@A[eax+4]
	mov	DWORD PTR _Idx$[ebp], ecx

; 1134 : 		// If bucket already assigned, link to old one
; 1135 : 		if(SortBuckets[0][Idx]!=0xffffffff) Draws2D[Start].Next=SortBuckets[0][Idx];

	mov	edx, 1024				; 00000400H
	imul	edx, 0
	mov	eax, DWORD PTR _Idx$[ebp]
	cmp	DWORD PTR ?SortBuckets@CDXEngine@@0PAY0BAA@KA[edx+eax*4], -1
	je	SHORT $LN28@DX2D_SortI
	mov	ecx, 1024				; 00000400H
	imul	ecx, 0
	mov	edx, DWORD PTR _Start$[ebp]
	imul	edx, 36					; 00000024H
	mov	eax, DWORD PTR _Idx$[ebp]
	mov	ecx, DWORD PTR ?SortBuckets@CDXEngine@@0PAY0BAA@KA[ecx+eax*4]
	mov	DWORD PTR ?Draws2D@CDXEngine@@0PAUDrawItemType@@A[edx], ecx
$LN28@DX2D_SortI:

; 1136 : 		// Assign this to the bucked
; 1137 : 		SortBuckets[0][Idx]=Start;

	mov	edx, 1024				; 00000400H
	imul	edx, 0
	mov	eax, DWORD PTR _Idx$[ebp]
	mov	ecx, DWORD PTR _Start$[ebp]
	mov	DWORD PTR ?SortBuckets@CDXEngine@@0PAY0BAA@KA[edx+eax*4], ecx

; 1138 : 		// Next Item
; 1139 : 		Start=Next;

	mov	edx, DWORD PTR _Next$[ebp]
	mov	DWORD PTR _Start$[ebp], edx

; 1140 : 	}

	jmp	$LN30@DX2D_SortI
$LN29@DX2D_SortI:

; 1141 : 
; 1142 : 	// * SORT 2ND DIGIT INTO 2ND BUCKETS ROW *
; 1143 : 	// Start from top
; 1144 : 	Row=0xff;

	mov	DWORD PTR _Row$[ebp], 255		; 000000ffH
$LN27@DX2D_SortI:

; 1145 : 	// Till a valid Bucket pointed
; 1146 : 	while(Row!=0xffffffff){

	cmp	DWORD PTR _Row$[ebp], -1
	je	$LN26@DX2D_SortI

; 1147 : 		// if a valid bucket
; 1148 : 		if(SortBuckets[0][Row]!=0xffffffff){

	mov	eax, 1024				; 00000400H
	imul	eax, 0
	mov	ecx, DWORD PTR _Row$[ebp]
	cmp	DWORD PTR ?SortBuckets@CDXEngine@@0PAY0BAA@KA[eax+ecx*4], -1
	je	$LN25@DX2D_SortI

; 1149 : 			// get the Bucket
; 1150 : 			Start=SortBuckets[0][Row];

	mov	edx, 1024				; 00000400H
	imul	edx, 0
	mov	eax, DWORD PTR _Row$[ebp]
	mov	ecx, DWORD PTR ?SortBuckets@CDXEngine@@0PAY0BAA@KA[edx+eax*4]
	mov	DWORD PTR _Start$[ebp], ecx
$LN24@DX2D_SortI:

; 1151 : 			do{
; 1152 : 				// Take next item
; 1153 : 				Next=Draws2D[Start].Next;

	mov	edx, DWORD PTR _Start$[ebp]
	imul	edx, 36					; 00000024H
	mov	eax, DWORD PTR ?Draws2D@CDXEngine@@0PAUDrawItemType@@A[edx]
	mov	DWORD PTR _Next$[ebp], eax

; 1154 : 				// Break any link
; 1155 : 				Draws2D[Start].Next=0xffffffff;

	mov	ecx, DWORD PTR _Start$[ebp]
	imul	ecx, 36					; 00000024H
	mov	DWORD PTR ?Draws2D@CDXEngine@@0PAUDrawItemType@@A[ecx], -1

; 1156 : 				// Get the Digit
; 1157 : 				Idx=*(((unsigned char*)&Draws2D[Start].Dist256)+1);

	mov	edx, DWORD PTR _Start$[ebp]
	imul	edx, 36					; 00000024H
	movzx	eax, BYTE PTR ?Draws2D@CDXEngine@@0PAUDrawItemType@@A[edx+5]
	mov	DWORD PTR _Idx$[ebp], eax

; 1158 : 				// If bucket not already assigned assign
; 1159 : 				if(SortBuckets[1][Idx]==0xffffffff)	SortBuckets[1][Idx]=Start;

	mov	ecx, 1024				; 00000400H
	shl	ecx, 0
	mov	edx, DWORD PTR _Idx$[ebp]
	cmp	DWORD PTR ?SortBuckets@CDXEngine@@0PAY0BAA@KA[ecx+edx*4], -1
	jne	SHORT $LN21@DX2D_SortI
	mov	eax, 1024				; 00000400H
	shl	eax, 0
	mov	ecx, DWORD PTR _Idx$[ebp]
	mov	edx, DWORD PTR _Start$[ebp]
	mov	DWORD PTR ?SortBuckets@CDXEngine@@0PAY0BAA@KA[eax+ecx*4], edx
	jmp	SHORT $LN20@DX2D_SortI
$LN21@DX2D_SortI:

; 1160 : 				// else tail it
; 1161 : 				else Draws2D[SortTail[1][Idx]].Next=Start;

	mov	eax, 1024				; 00000400H
	shl	eax, 0
	mov	ecx, DWORD PTR _Idx$[ebp]
	mov	edx, DWORD PTR ?SortTail@CDXEngine@@0PAY0BAA@KA[eax+ecx*4]
	imul	edx, 36					; 00000024H
	mov	eax, DWORD PTR _Start$[ebp]
	mov	DWORD PTR ?Draws2D@CDXEngine@@0PAUDrawItemType@@A[edx], eax
$LN20@DX2D_SortI:

; 1162 : 				// This is always however the last item
; 1163 : 				SortTail[1][Idx]=Start;

	mov	ecx, 1024				; 00000400H
	shl	ecx, 0
	mov	edx, DWORD PTR _Idx$[ebp]
	mov	eax, DWORD PTR _Start$[ebp]
	mov	DWORD PTR ?SortTail@CDXEngine@@0PAY0BAA@KA[ecx+edx*4], eax

; 1164 : 				// Next Item
; 1165 : 				Start=Next;

	mov	ecx, DWORD PTR _Next$[ebp]
	mov	DWORD PTR _Start$[ebp], ecx

; 1166 : 			} while(Start!=0xffffffff); // Repeat till end of list

	cmp	DWORD PTR _Start$[ebp], -1
	jne	$LN24@DX2D_SortI
$LN25@DX2D_SortI:

; 1167 : 		}
; 1168 : 		// Next Row
; 1169 : 		Row--;

	mov	edx, DWORD PTR _Row$[ebp]
	sub	edx, 1
	mov	DWORD PTR _Row$[ebp], edx

; 1170 : 	}

	jmp	$LN27@DX2D_SortI
$LN26@DX2D_SortI:

; 1171 : 
; 1172 : 	// * SORT 3RD DIGIT INTO 3RD BUCKETS ROW *
; 1173 : 	// Start from top
; 1174 : 	Row=0xff;

	mov	DWORD PTR _Row$[ebp], 255		; 000000ffH
$LN19@DX2D_SortI:

; 1175 : 	// Till a valid Bucket pointed
; 1176 : 	while(Row!=0xffffffff){

	cmp	DWORD PTR _Row$[ebp], -1
	je	$LN18@DX2D_SortI

; 1177 : 		// if a valid bucket
; 1178 : 		if(SortBuckets[1][Row]!=0xffffffff){

	mov	eax, 1024				; 00000400H
	shl	eax, 0
	mov	ecx, DWORD PTR _Row$[ebp]
	cmp	DWORD PTR ?SortBuckets@CDXEngine@@0PAY0BAA@KA[eax+ecx*4], -1
	je	$LN17@DX2D_SortI

; 1179 : 			// get the Bucket
; 1180 : 			Start=SortBuckets[1][Row];

	mov	edx, 1024				; 00000400H
	shl	edx, 0
	mov	eax, DWORD PTR _Row$[ebp]
	mov	ecx, DWORD PTR ?SortBuckets@CDXEngine@@0PAY0BAA@KA[edx+eax*4]
	mov	DWORD PTR _Start$[ebp], ecx
$LN16@DX2D_SortI:

; 1181 : 			do{
; 1182 : 				// Take next item
; 1183 : 				Next=Draws2D[Start].Next;

	mov	edx, DWORD PTR _Start$[ebp]
	imul	edx, 36					; 00000024H
	mov	eax, DWORD PTR ?Draws2D@CDXEngine@@0PAUDrawItemType@@A[edx]
	mov	DWORD PTR _Next$[ebp], eax

; 1184 : 				// Break any link
; 1185 : 				Draws2D[Start].Next=0xffffffff;

	mov	ecx, DWORD PTR _Start$[ebp]
	imul	ecx, 36					; 00000024H
	mov	DWORD PTR ?Draws2D@CDXEngine@@0PAUDrawItemType@@A[ecx], -1

; 1186 : 				// Get the Digit
; 1187 : 				Idx=*(((unsigned char*)&Draws2D[Start].Dist256)+2);

	mov	edx, DWORD PTR _Start$[ebp]
	imul	edx, 36					; 00000024H
	movzx	eax, BYTE PTR ?Draws2D@CDXEngine@@0PAUDrawItemType@@A[edx+6]
	mov	DWORD PTR _Idx$[ebp], eax

; 1188 : 				// If bucket not already assigned assign
; 1189 : 				if(SortBuckets[2][Idx]==0xffffffff)	SortBuckets[2][Idx]=Start;

	mov	ecx, 1024				; 00000400H
	shl	ecx, 1
	mov	edx, DWORD PTR _Idx$[ebp]
	cmp	DWORD PTR ?SortBuckets@CDXEngine@@0PAY0BAA@KA[ecx+edx*4], -1
	jne	SHORT $LN13@DX2D_SortI
	mov	eax, 1024				; 00000400H
	shl	eax, 1
	mov	ecx, DWORD PTR _Idx$[ebp]
	mov	edx, DWORD PTR _Start$[ebp]
	mov	DWORD PTR ?SortBuckets@CDXEngine@@0PAY0BAA@KA[eax+ecx*4], edx
	jmp	SHORT $LN12@DX2D_SortI
$LN13@DX2D_SortI:

; 1190 : 				// else tail it
; 1191 : 				else Draws2D[SortTail[2][Idx]].Next=Start;

	mov	eax, 1024				; 00000400H
	shl	eax, 1
	mov	ecx, DWORD PTR _Idx$[ebp]
	mov	edx, DWORD PTR ?SortTail@CDXEngine@@0PAY0BAA@KA[eax+ecx*4]
	imul	edx, 36					; 00000024H
	mov	eax, DWORD PTR _Start$[ebp]
	mov	DWORD PTR ?Draws2D@CDXEngine@@0PAUDrawItemType@@A[edx], eax
$LN12@DX2D_SortI:

; 1192 : 				// This is always however the last item
; 1193 : 				SortTail[2][Idx]=Start;

	mov	ecx, 1024				; 00000400H
	shl	ecx, 1
	mov	edx, DWORD PTR _Idx$[ebp]
	mov	eax, DWORD PTR _Start$[ebp]
	mov	DWORD PTR ?SortTail@CDXEngine@@0PAY0BAA@KA[ecx+edx*4], eax

; 1194 : 				// Next Item
; 1195 : 				Start=Next;

	mov	ecx, DWORD PTR _Next$[ebp]
	mov	DWORD PTR _Start$[ebp], ecx

; 1196 : 			} while(Start!=0xffffffff); // Repeat till end of list

	cmp	DWORD PTR _Start$[ebp], -1
	jne	$LN16@DX2D_SortI
$LN17@DX2D_SortI:

; 1197 : 		}
; 1198 : 		// Next Row
; 1199 : 		Row--;

	mov	edx, DWORD PTR _Row$[ebp]
	sub	edx, 1
	mov	DWORD PTR _Row$[ebp], edx

; 1200 : 	}

	jmp	$LN19@DX2D_SortI
$LN18@DX2D_SortI:

; 1201 : 
; 1202 : 	// * SORT 4TH DIGIT INTO 4TH BUCKETS ROW *
; 1203 : 	// Start from top
; 1204 : 	Row=0xff;

	mov	DWORD PTR _Row$[ebp], 255		; 000000ffH
$LN11@DX2D_SortI:

; 1205 : 	// Till a valid Bucket pointed
; 1206 : 	while(Row!=0xffffffff){

	cmp	DWORD PTR _Row$[ebp], -1
	je	$LN10@DX2D_SortI

; 1207 : 		// if a valid bucket
; 1208 : 		if(SortBuckets[2][Row]!=0xffffffff){

	mov	eax, 1024				; 00000400H
	shl	eax, 1
	mov	ecx, DWORD PTR _Row$[ebp]
	cmp	DWORD PTR ?SortBuckets@CDXEngine@@0PAY0BAA@KA[eax+ecx*4], -1
	je	$LN9@DX2D_SortI

; 1209 : 			// get the Bucket
; 1210 : 			Start=SortBuckets[2][Row];

	mov	edx, 1024				; 00000400H
	shl	edx, 1
	mov	eax, DWORD PTR _Row$[ebp]
	mov	ecx, DWORD PTR ?SortBuckets@CDXEngine@@0PAY0BAA@KA[edx+eax*4]
	mov	DWORD PTR _Start$[ebp], ecx
$LN8@DX2D_SortI:

; 1211 : 			do{
; 1212 : 				// Take next item
; 1213 : 				Next=Draws2D[Start].Next;

	mov	edx, DWORD PTR _Start$[ebp]
	imul	edx, 36					; 00000024H
	mov	eax, DWORD PTR ?Draws2D@CDXEngine@@0PAUDrawItemType@@A[edx]
	mov	DWORD PTR _Next$[ebp], eax

; 1214 : 				// Break any link
; 1215 : 				Draws2D[Start].Next=0xffffffff;

	mov	ecx, DWORD PTR _Start$[ebp]
	imul	ecx, 36					; 00000024H
	mov	DWORD PTR ?Draws2D@CDXEngine@@0PAUDrawItemType@@A[ecx], -1

; 1216 : 				// Get the Digit
; 1217 : 				Idx=*(((unsigned char*)&Draws2D[Start].Dist256)+3);

	mov	edx, DWORD PTR _Start$[ebp]
	imul	edx, 36					; 00000024H
	movzx	eax, BYTE PTR ?Draws2D@CDXEngine@@0PAUDrawItemType@@A[edx+7]
	mov	DWORD PTR _Idx$[ebp], eax

; 1218 : 				// If bucket not already assigned assign
; 1219 : 				if(SortBuckets[3][Idx]==0xffffffff)	SortBuckets[3][Idx]=Start;

	mov	ecx, 1024				; 00000400H
	imul	ecx, 3
	mov	edx, DWORD PTR _Idx$[ebp]
	cmp	DWORD PTR ?SortBuckets@CDXEngine@@0PAY0BAA@KA[ecx+edx*4], -1
	jne	SHORT $LN5@DX2D_SortI
	mov	eax, 1024				; 00000400H
	imul	eax, 3
	mov	ecx, DWORD PTR _Idx$[ebp]
	mov	edx, DWORD PTR _Start$[ebp]
	mov	DWORD PTR ?SortBuckets@CDXEngine@@0PAY0BAA@KA[eax+ecx*4], edx
	jmp	SHORT $LN4@DX2D_SortI
$LN5@DX2D_SortI:

; 1220 : 				// else tail it
; 1221 : 				else Draws2D[SortTail[3][Idx]].Next=Start;

	mov	eax, 1024				; 00000400H
	imul	eax, 3
	mov	ecx, DWORD PTR _Idx$[ebp]
	mov	edx, DWORD PTR ?SortTail@CDXEngine@@0PAY0BAA@KA[eax+ecx*4]
	imul	edx, 36					; 00000024H
	mov	eax, DWORD PTR _Start$[ebp]
	mov	DWORD PTR ?Draws2D@CDXEngine@@0PAUDrawItemType@@A[edx], eax
$LN4@DX2D_SortI:

; 1222 : 				// This is always however the last item
; 1223 : 				SortTail[3][Idx]=Start;

	mov	ecx, 1024				; 00000400H
	imul	ecx, 3
	mov	edx, DWORD PTR _Idx$[ebp]
	mov	eax, DWORD PTR _Start$[ebp]
	mov	DWORD PTR ?SortTail@CDXEngine@@0PAY0BAA@KA[ecx+edx*4], eax

; 1224 : 				// Next Item
; 1225 : 				Start=Next;

	mov	ecx, DWORD PTR _Next$[ebp]
	mov	DWORD PTR _Start$[ebp], ecx

; 1226 : 			} while(Start!=0xffffffff); // Repeat till end of list

	cmp	DWORD PTR _Start$[ebp], -1
	jne	$LN8@DX2D_SortI
$LN9@DX2D_SortI:

; 1227 : 		}
; 1228 : 		// Next Row
; 1229 : 		Row--;

	mov	edx, DWORD PTR _Row$[ebp]
	sub	edx, 1
	mov	DWORD PTR _Row$[ebp], edx

; 1230 : 	}

	jmp	$LN11@DX2D_SortI
$LN10@DX2D_SortI:

; 1231 : 
; 1232 : 
; 1233 : 	// ok, now link all buckets
; 1234 : 	// Start from bottom
; 1235 : 	Row=0x00;

	mov	DWORD PTR _Row$[ebp], 0

; 1236 : 	// Unassign any link
; 1237 : 	Next=0xffffffff;

	mov	DWORD PTR _Next$[ebp], -1
$LN3@DX2D_SortI:

; 1238 : 	while(Row<0x100){

	cmp	DWORD PTR _Row$[ebp], 256		; 00000100H
	jae	SHORT $LN2@DX2D_SortI

; 1239 : 		// get an item to link
; 1240 : 		if(SortBuckets[3][Row]!=0xffffffff){

	mov	eax, 1024				; 00000400H
	imul	eax, 3
	mov	ecx, DWORD PTR _Row$[ebp]
	cmp	DWORD PTR ?SortBuckets@CDXEngine@@0PAY0BAA@KA[eax+ecx*4], -1
	je	SHORT $LN1@DX2D_SortI

; 1241 : 			// Link to previous one
; 1242 : 			Draws2D[SortTail[3][Row]].Next=Next;

	mov	edx, 1024				; 00000400H
	imul	edx, 3
	mov	eax, DWORD PTR _Row$[ebp]
	mov	ecx, DWORD PTR ?SortTail@CDXEngine@@0PAY0BAA@KA[edx+eax*4]
	imul	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _Next$[ebp]
	mov	DWORD PTR ?Draws2D@CDXEngine@@0PAUDrawItemType@@A[ecx], edx

; 1243 : 			// and get this as next to be linked
; 1244 : 			Start=Next=SortBuckets[3][Row];

	mov	eax, 1024				; 00000400H
	imul	eax, 3
	mov	ecx, DWORD PTR _Row$[ebp]
	mov	edx, DWORD PTR ?SortBuckets@CDXEngine@@0PAY0BAA@KA[eax+ecx*4]
	mov	DWORD PTR _Next$[ebp], edx
	mov	eax, DWORD PTR _Next$[ebp]
	mov	DWORD PTR _Start$[ebp], eax
$LN1@DX2D_SortI:

; 1245 : 		}
; 1246 : 		Row++;

	mov	ecx, DWORD PTR _Row$[ebp]
	add	ecx, 1
	mov	DWORD PTR _Row$[ebp], ecx

; 1247 : 	}

	jmp	SHORT $LN3@DX2D_SortI
$LN2@DX2D_SortI:

; 1248 : 
; 1249 : 	// Return the Entry point of the List
; 1250 : 	return Start;

	mov	eax, DWORD PTR _Start$[ebp]

; 1251 : 
; 1252 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?DX2D_SortIndexes@CDXEngine@@AAEKK@Z ENDP		; CDXEngine::DX2D_SortIndexes
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
_this$ = -96						; size = 4
_Tex$ = -92						; size = 4
_DotMode$ = -85						; size = 1
_Center$1 = -84						; size = 2
_a$2 = -80						; size = 4
_a$3 = -76						; size = 4
_a$4 = -72						; size = 4
_v$5 = -68						; size = 2
_v$6 = -64						; size = 2
_l$7 = -60						; size = 2
_Count1$8 = -56						; size = 2
_Count2$9 = -52						; size = 2
_LineMode$ = -45					; size = 1
_Draw$10 = -44						; size = 4
_Count$11 = -40						; size = 2
_Count$12 = -36						; size = 2
_Index$ = -32						; size = 4
_VOffsets$ = -28					; size = 24
__$ArrayPad$ = -4					; size = 4
_Start$ = 8						; size = 4
?DX2D_GenerateIndexes@CDXEngine@@AAEKK@Z PROC		; CDXEngine::DX2D_GenerateIndexes
; _this$ = ecx

; 953  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 954  : 	DWORD	Index=0;

	mov	DWORD PTR _Index$[ebp], 0

; 955  : 	// Offset for vertex indexes for both triangles and Quads
; 956  : 	DWORD	VOffsets[]={0, 1, 2, 0, 2, 3};

	mov	DWORD PTR _VOffsets$[ebp], 0
	mov	DWORD PTR _VOffsets$[ebp+4], 1
	mov	DWORD PTR _VOffsets$[ebp+8], 2
	mov	DWORD PTR _VOffsets$[ebp+12], 0
	mov	DWORD PTR _VOffsets$[ebp+16], 2
	mov	DWORD PTR _VOffsets$[ebp+20], 3

; 957  : 	// reset the indexed vertices counter
; 958  : 	Indexed2D=0;	

	mov	DWORD PTR ?Indexed2D@CDXEngine@@0KA, 0	; CDXEngine::Indexed2D

; 959  : 	// The mode flags
; 960  : 	bool	LineMode=false, DotMode=false;

	mov	BYTE PTR _LineMode$[ebp], 0
	mov	BYTE PTR _DotMode$[ebp], 0

; 961  : 
; 962  : #if	MAX_2D_BUFFERS > 1	
; 963  : 	// Setup the starting VB
; 964  : 	DWORD	Vb=(DWORD)Draws2D[Start].Vb;
; 965  : #endif
; 966  : 	DWORD	Tex=Draws2D[Start].TexHandle;

	mov	eax, DWORD PTR _Start$[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR ?Draws2D@CDXEngine@@0PAUDrawItemType@@A[eax+24]
	mov	DWORD PTR _Tex$[ebp], ecx

; 967  : 
; 968  : 	// Setup for lines
; 969  : 	if(Draws2D[Start].Flags & POLY_LINE) LineMode = true;

	mov	edx, DWORD PTR _Start$[ebp]
	imul	edx, 36					; 00000024H
	mov	eax, DWORD PTR ?Draws2D@CDXEngine@@0PAUDrawItemType@@A[edx+28]
	and	eax, 8388608				; 00800000H
	je	SHORT $LN25@DX2D_Gener
	mov	BYTE PTR _LineMode$[ebp], 1
$LN25@DX2D_Gener:

; 970  : 
; 971  : 	// thru all the list
; 972  : 	while(Start!=0xffffffff && Index<MAX_VERTICES_PER_DRAW){

	cmp	DWORD PTR _Start$[ebp], -1
	je	$LN24@DX2D_Gener
	cmp	DWORD PTR _Index$[ebp], 2048		; 00000800H
	jae	$LN24@DX2D_Gener

; 973  : 		DrawItemType &Draw=Draws2D[Start];

	mov	ecx, DWORD PTR _Start$[ebp]
	imul	ecx, 36					; 00000024H
	add	ecx, OFFSET ?Draws2D@CDXEngine@@0PAUDrawItemType@@A ; CDXEngine::Draws2D
	mov	DWORD PTR _Draw$10[ebp], ecx

; 974  : #if	MAX_2D_BUFFERS > 1	
; 975  : 		// check if changed VB, exit if changed
; 976  : 		if(Draw.Vb!=(LPDIRECT3DVERTEXBUFFER7)Vb) return Start;
; 977  : #endif
; 978  : 		// if texture changed exit here
; 979  : 		if(Draw.TexHandle!=Tex) return Start;

	mov	edx, DWORD PTR _Draw$10[ebp]
	mov	eax, DWORD PTR [edx+24]
	cmp	eax, DWORD PTR _Tex$[ebp]
	je	SHORT $LN23@DX2D_Gener
	mov	eax, DWORD PTR _Start$[ebp]
	jmp	$LN27@DX2D_Gener
$LN23@DX2D_Gener:

; 980  : 
; 981  : 		// * SORTED 3D OBJECT *
; 982  : 		if( Draw.Flags & POLY_3DOBJECT ){

	mov	ecx, DWORD PTR _Draw$10[ebp]
	mov	edx, DWORD PTR [ecx+28]
	and	edx, 16777216				; 01000000H
	je	SHORT $LN22@DX2D_Gener

; 983  : 			//if 1st item, return it
; 984  : 			if(!Index) return Draw.Next;

	cmp	DWORD PTR _Index$[ebp], 0
	jne	SHORT $LN21@DX2D_Gener
	mov	eax, DWORD PTR _Draw$10[ebp]
	mov	eax, DWORD PTR [eax]
	jmp	$LN27@DX2D_Gener
	jmp	SHORT $LN22@DX2D_Gener
$LN21@DX2D_Gener:

; 985  : 			else return Start;

	mov	eax, DWORD PTR _Start$[ebp]
	jmp	$LN27@DX2D_Gener
$LN22@DX2D_Gener:

; 986  : 		}
; 987  : 
; 988  : 		// * LINE INDEXED *
; 989  : 		if( Draw.Flags & POLY_LINE ){

	mov	ecx, DWORD PTR _Draw$10[ebp]
	mov	edx, DWORD PTR [ecx+28]
	and	edx, 8388608				; 00800000H
	je	$LN19@DX2D_Gener

; 990  : 			// if it was not a Line mode, close here
; 991  : 			if(!LineMode) return Start;

	movzx	eax, BYTE PTR _LineMode$[ebp]
	test	eax, eax
	jne	SHORT $LN18@DX2D_Gener
	mov	eax, DWORD PTR _Start$[ebp]
	jmp	$LN27@DX2D_Gener
$LN18@DX2D_Gener:

; 992  : 			//  if a line Tape
; 993  : 			if(Draw.Flags & POLY_TAPE) DrawIndexes[Index++]=(unsigned short)Draw.Index,	DrawIndexes[Index++]=(unsigned short)Draw.Index2;

	mov	ecx, DWORD PTR _Draw$10[ebp]
	mov	edx, DWORD PTR [ecx+28]
	and	edx, 4194304				; 00400000H
	je	SHORT $LN17@DX2D_Gener
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _Draw$10[ebp]
	mov	dx, WORD PTR [ecx+12]
	mov	WORD PTR ?DrawIndexes@CDXEngine@@0PAGA[eax*2], dx
	mov	eax, DWORD PTR _Index$[ebp]
	add	eax, 1
	mov	DWORD PTR _Index$[ebp], eax
	mov	ecx, DWORD PTR _Index$[ebp]
	mov	edx, DWORD PTR _Draw$10[ebp]
	mov	ax, WORD PTR [edx+16]
	mov	WORD PTR ?DrawIndexes@CDXEngine@@0PAGA[ecx*2], ax
	mov	ecx, DWORD PTR _Index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _Index$[ebp], ecx
	jmp	SHORT $LN16@DX2D_Gener
$LN17@DX2D_Gener:

; 994  : 			else DrawIndexes[Index++]=(unsigned short)Draw.Index, DrawIndexes[Index++]=(unsigned short)Draw.Index+1;

	mov	edx, DWORD PTR _Index$[ebp]
	mov	eax, DWORD PTR _Draw$10[ebp]
	mov	cx, WORD PTR [eax+12]
	mov	WORD PTR ?DrawIndexes@CDXEngine@@0PAGA[edx*2], cx
	mov	edx, DWORD PTR _Index$[ebp]
	add	edx, 1
	mov	DWORD PTR _Index$[ebp], edx
	mov	eax, DWORD PTR _Draw$10[ebp]
	movzx	ecx, WORD PTR [eax+12]
	add	ecx, 1
	mov	edx, DWORD PTR _Index$[ebp]
	mov	WORD PTR ?DrawIndexes@CDXEngine@@0PAGA[edx*2], cx
	mov	eax, DWORD PTR _Index$[ebp]
	add	eax, 1
	mov	DWORD PTR _Index$[ebp], eax
$LN16@DX2D_Gener:

; 995  : 			// number of indexed vertices
; 996  : 			Indexed2D+=2;

	mov	ecx, DWORD PTR ?Indexed2D@CDXEngine@@0KA ; CDXEngine::Indexed2D
	add	ecx, 2
	mov	DWORD PTR ?Indexed2D@CDXEngine@@0KA, ecx ; CDXEngine::Indexed2D

; 997  : 			// next item
; 998  : 			Start=Draw.Next;

	mov	edx, DWORD PTR _Draw$10[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _Start$[ebp], eax

; 999  : 			// repeat
; 1000 : 			continue;

	jmp	$LN25@DX2D_Gener

; 1001 : 		} else

	jmp	SHORT $LN15@DX2D_Gener
$LN19@DX2D_Gener:

; 1002 : 			// if we are in Line Mode, exit here
; 1003 : 			if(LineMode) return Start;

	movzx	ecx, BYTE PTR _LineMode$[ebp]
	test	ecx, ecx
	je	SHORT $LN15@DX2D_Gener
	mov	eax, DWORD PTR _Start$[ebp]
	jmp	$LN27@DX2D_Gener
$LN15@DX2D_Gener:

; 1004 : 
; 1005 : 		// * FAN INDEXED *
; 1006 : 		if( Draw.Flags & POLY_FAN ){

	mov	edx, DWORD PTR _Draw$10[ebp]
	mov	eax, DWORD PTR [edx+28]
	and	eax, 1048576				; 00100000H
	je	$LN13@DX2D_Gener

; 1007 : 			// Check if indexing overflows the draw limit
; 1008 : 			if((Index+(Draw.NrVertices-2)*3)>MAX_VERTICES_PER_DRAW) return Start;

	mov	ecx, DWORD PTR _Draw$10[ebp]
	mov	edx, DWORD PTR [ecx+20]
	sub	edx, 2
	imul	edx, 3
	add	edx, DWORD PTR _Index$[ebp]
	cmp	edx, 2048				; 00000800H
	jbe	SHORT $LN12@DX2D_Gener
	mov	eax, DWORD PTR _Start$[ebp]
	jmp	$LN27@DX2D_Gener
$LN12@DX2D_Gener:

; 1009 : 
; 1010 : 			unsigned short  Count=(unsigned short)Draw.Index;

	mov	eax, DWORD PTR _Draw$10[ebp]
	mov	cx, WORD PTR [eax+12]
	mov	WORD PTR _Count$11[ebp], cx

; 1011 : 			unsigned short	v, Center=DrawIndexes[Index++]=Count++;

	mov	edx, DWORD PTR _Index$[ebp]
	mov	ax, WORD PTR _Count$11[ebp]
	mov	WORD PTR ?DrawIndexes@CDXEngine@@0PAGA[edx*2], ax
	mov	cx, WORD PTR _Count$11[ebp]
	mov	WORD PTR _Center$1[ebp], cx
	mov	edx, DWORD PTR _Index$[ebp]
	add	edx, 1
	mov	DWORD PTR _Index$[ebp], edx
	mov	ax, WORD PTR _Count$11[ebp]
	add	ax, 1
	mov	WORD PTR _Count$11[ebp], ax

; 1012 : 			DrawIndexes[Index++]=Count++;

	mov	ecx, DWORD PTR _Index$[ebp]
	mov	dx, WORD PTR _Count$11[ebp]
	mov	WORD PTR ?DrawIndexes@CDXEngine@@0PAGA[ecx*2], dx
	mov	eax, DWORD PTR _Index$[ebp]
	add	eax, 1
	mov	DWORD PTR _Index$[ebp], eax
	mov	cx, WORD PTR _Count$11[ebp]
	add	cx, 1
	mov	WORD PTR _Count$11[ebp], cx

; 1013 : 			v=DrawIndexes[Index++]=Count++;

	mov	edx, DWORD PTR _Index$[ebp]
	mov	ax, WORD PTR _Count$11[ebp]
	mov	WORD PTR ?DrawIndexes@CDXEngine@@0PAGA[edx*2], ax
	mov	cx, WORD PTR _Count$11[ebp]
	mov	WORD PTR _v$5[ebp], cx
	mov	edx, DWORD PTR _Index$[ebp]
	add	edx, 1
	mov	DWORD PTR _Index$[ebp], edx
	mov	ax, WORD PTR _Count$11[ebp]
	add	ax, 1
	mov	WORD PTR _Count$11[ebp], ax

; 1014 : 
; 1015 : 			for(DWORD a=0; a<Draw.NrVertices-3; a++){

	mov	DWORD PTR _a$3[ebp], 0
	jmp	SHORT $LN11@DX2D_Gener
$LN10@DX2D_Gener:
	mov	ecx, DWORD PTR _a$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _a$3[ebp], ecx
$LN11@DX2D_Gener:
	mov	edx, DWORD PTR _Draw$10[ebp]
	mov	eax, DWORD PTR [edx+20]
	sub	eax, 3
	cmp	DWORD PTR _a$3[ebp], eax
	jae	SHORT $LN9@DX2D_Gener

; 1016 : 				DrawIndexes[Index++]=Center;

	mov	ecx, DWORD PTR _Index$[ebp]
	mov	dx, WORD PTR _Center$1[ebp]
	mov	WORD PTR ?DrawIndexes@CDXEngine@@0PAGA[ecx*2], dx
	mov	eax, DWORD PTR _Index$[ebp]
	add	eax, 1
	mov	DWORD PTR _Index$[ebp], eax

; 1017 : 				DrawIndexes[Index++]=v;

	mov	ecx, DWORD PTR _Index$[ebp]
	mov	dx, WORD PTR _v$5[ebp]
	mov	WORD PTR ?DrawIndexes@CDXEngine@@0PAGA[ecx*2], dx
	mov	eax, DWORD PTR _Index$[ebp]
	add	eax, 1
	mov	DWORD PTR _Index$[ebp], eax

; 1018 : 				v=DrawIndexes[Index++]=Count++;

	mov	ecx, DWORD PTR _Index$[ebp]
	mov	dx, WORD PTR _Count$11[ebp]
	mov	WORD PTR ?DrawIndexes@CDXEngine@@0PAGA[ecx*2], dx
	mov	ax, WORD PTR _Count$11[ebp]
	mov	WORD PTR _v$5[ebp], ax
	mov	ecx, DWORD PTR _Index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _Index$[ebp], ecx
	mov	dx, WORD PTR _Count$11[ebp]
	add	dx, 1
	mov	WORD PTR _Count$11[ebp], dx

; 1019 : 			}

	jmp	SHORT $LN10@DX2D_Gener
$LN9@DX2D_Gener:

; 1020 : 			// number of indexed vertices
; 1021 : 			Indexed2D+=(Draw.NrVertices-2)*3;

	mov	eax, DWORD PTR _Draw$10[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, 2
	imul	ecx, 3
	add	ecx, DWORD PTR ?Indexed2D@CDXEngine@@0KA ; CDXEngine::Indexed2D
	mov	DWORD PTR ?Indexed2D@CDXEngine@@0KA, ecx ; CDXEngine::Indexed2D

; 1022 : 			// next item
; 1023 : 			Start=Draw.Next;

	mov	edx, DWORD PTR _Draw$10[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _Start$[ebp], eax

; 1024 : 			// repeat
; 1025 : 			continue;

	jmp	$LN25@DX2D_Gener
$LN13@DX2D_Gener:

; 1026 : 		}
; 1027 : 		
; 1028 : 		// * STRIP INDEXED *
; 1029 : 		if( Draw.Flags & POLY_STRIP ){

	mov	ecx, DWORD PTR _Draw$10[ebp]
	mov	edx, DWORD PTR [ecx+28]
	and	edx, 2097152				; 00200000H
	je	$LN8@DX2D_Gener

; 1030 : 			unsigned short  Count=(unsigned short)Draw.Index;

	mov	eax, DWORD PTR _Draw$10[ebp]
	mov	cx, WORD PTR [eax+12]
	mov	WORD PTR _Count$12[ebp], cx

; 1031 : 			DrawIndexes[Index++]=Count++;

	mov	edx, DWORD PTR _Index$[ebp]
	mov	ax, WORD PTR _Count$12[ebp]
	mov	WORD PTR ?DrawIndexes@CDXEngine@@0PAGA[edx*2], ax
	mov	ecx, DWORD PTR _Index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _Index$[ebp], ecx
	mov	dx, WORD PTR _Count$12[ebp]
	add	dx, 1
	mov	WORD PTR _Count$12[ebp], dx

; 1032 : 			unsigned short	v=DrawIndexes[Index++]=Count++;

	mov	eax, DWORD PTR _Index$[ebp]
	mov	cx, WORD PTR _Count$12[ebp]
	mov	WORD PTR ?DrawIndexes@CDXEngine@@0PAGA[eax*2], cx
	mov	dx, WORD PTR _Count$12[ebp]
	mov	WORD PTR _v$6[ebp], dx
	mov	eax, DWORD PTR _Index$[ebp]
	add	eax, 1
	mov	DWORD PTR _Index$[ebp], eax
	mov	cx, WORD PTR _Count$12[ebp]
	add	cx, 1
	mov	WORD PTR _Count$12[ebp], cx

; 1033 : 			unsigned short	l=DrawIndexes[Index++]=Count++;

	mov	edx, DWORD PTR _Index$[ebp]
	mov	ax, WORD PTR _Count$12[ebp]
	mov	WORD PTR ?DrawIndexes@CDXEngine@@0PAGA[edx*2], ax
	mov	cx, WORD PTR _Count$12[ebp]
	mov	WORD PTR _l$7[ebp], cx
	mov	edx, DWORD PTR _Index$[ebp]
	add	edx, 1
	mov	DWORD PTR _Index$[ebp], edx
	mov	ax, WORD PTR _Count$12[ebp]
	add	ax, 1
	mov	WORD PTR _Count$12[ebp], ax

; 1034 : 			for(DWORD a=0; a<Draw.NrVertices-3; a++){

	mov	DWORD PTR _a$2[ebp], 0
	jmp	SHORT $LN7@DX2D_Gener
$LN6@DX2D_Gener:
	mov	ecx, DWORD PTR _a$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _a$2[ebp], ecx
$LN7@DX2D_Gener:
	mov	edx, DWORD PTR _Draw$10[ebp]
	mov	eax, DWORD PTR [edx+20]
	sub	eax, 3
	cmp	DWORD PTR _a$2[ebp], eax
	jae	SHORT $LN5@DX2D_Gener

; 1035 : 				DrawIndexes[Index++]=l;

	mov	ecx, DWORD PTR _Index$[ebp]
	mov	dx, WORD PTR _l$7[ebp]
	mov	WORD PTR ?DrawIndexes@CDXEngine@@0PAGA[ecx*2], dx
	mov	eax, DWORD PTR _Index$[ebp]
	add	eax, 1
	mov	DWORD PTR _Index$[ebp], eax

; 1036 : 				DrawIndexes[Index++]=v;

	mov	ecx, DWORD PTR _Index$[ebp]
	mov	dx, WORD PTR _v$6[ebp]
	mov	WORD PTR ?DrawIndexes@CDXEngine@@0PAGA[ecx*2], dx
	mov	eax, DWORD PTR _Index$[ebp]
	add	eax, 1
	mov	DWORD PTR _Index$[ebp], eax

; 1037 : 				v=l;

	mov	cx, WORD PTR _l$7[ebp]
	mov	WORD PTR _v$6[ebp], cx

; 1038 : 				l=DrawIndexes[Index++]=Count++;

	mov	edx, DWORD PTR _Index$[ebp]
	mov	ax, WORD PTR _Count$12[ebp]
	mov	WORD PTR ?DrawIndexes@CDXEngine@@0PAGA[edx*2], ax
	mov	cx, WORD PTR _Count$12[ebp]
	mov	WORD PTR _l$7[ebp], cx
	mov	edx, DWORD PTR _Index$[ebp]
	add	edx, 1
	mov	DWORD PTR _Index$[ebp], edx
	mov	ax, WORD PTR _Count$12[ebp]
	add	ax, 1
	mov	WORD PTR _Count$12[ebp], ax

; 1039 : 			}

	jmp	SHORT $LN6@DX2D_Gener
$LN5@DX2D_Gener:

; 1040 : 			// number of indexed vertices
; 1041 : 			Indexed2D+=(Draw.NrVertices-2)*3;

	mov	ecx, DWORD PTR _Draw$10[ebp]
	mov	edx, DWORD PTR [ecx+20]
	sub	edx, 2
	imul	edx, 3
	add	edx, DWORD PTR ?Indexed2D@CDXEngine@@0KA ; CDXEngine::Indexed2D
	mov	DWORD PTR ?Indexed2D@CDXEngine@@0KA, edx ; CDXEngine::Indexed2D

; 1042 : 			// next item
; 1043 : 			Start=Draw.Next;

	mov	eax, DWORD PTR _Draw$10[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Start$[ebp], ecx

; 1044 : 			// repeat
; 1045 : 			continue;

	jmp	$LN25@DX2D_Gener
$LN8@DX2D_Gener:

; 1046 : 		}
; 1047 : 
; 1048 : 		// * TAPE INDEXED *
; 1049 : 		if( Draw.Flags & POLY_TAPE ){

	mov	edx, DWORD PTR _Draw$10[ebp]
	mov	eax, DWORD PTR [edx+28]
	and	eax, 4194304				; 00400000H
	je	$LN4@DX2D_Gener

; 1050 : 			unsigned short  Count1=(unsigned short)Draw.Index;

	mov	ecx, DWORD PTR _Draw$10[ebp]
	mov	dx, WORD PTR [ecx+12]
	mov	WORD PTR _Count1$8[ebp], dx

; 1051 : 			unsigned short  Count2=(unsigned short)Draw.Index2;

	mov	eax, DWORD PTR _Draw$10[ebp]
	mov	cx, WORD PTR [eax+16]
	mov	WORD PTR _Count2$9[ebp], cx

; 1052 : 			
; 1053 : 			DrawIndexes[Index++]=Count2;

	mov	edx, DWORD PTR _Index$[ebp]
	mov	ax, WORD PTR _Count2$9[ebp]
	mov	WORD PTR ?DrawIndexes@CDXEngine@@0PAGA[edx*2], ax
	mov	ecx, DWORD PTR _Index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _Index$[ebp], ecx

; 1054 : 			DrawIndexes[Index++]=Count2+1;

	movzx	edx, WORD PTR _Count2$9[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _Index$[ebp]
	mov	WORD PTR ?DrawIndexes@CDXEngine@@0PAGA[eax*2], dx
	mov	ecx, DWORD PTR _Index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _Index$[ebp], ecx

; 1055 : 			DrawIndexes[Index++]=Count1;

	mov	edx, DWORD PTR _Index$[ebp]
	mov	ax, WORD PTR _Count1$8[ebp]
	mov	WORD PTR ?DrawIndexes@CDXEngine@@0PAGA[edx*2], ax
	mov	ecx, DWORD PTR _Index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _Index$[ebp], ecx

; 1056 : 
; 1057 : 			DrawIndexes[Index++]=Count2+1;

	movzx	edx, WORD PTR _Count2$9[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _Index$[ebp]
	mov	WORD PTR ?DrawIndexes@CDXEngine@@0PAGA[eax*2], dx
	mov	ecx, DWORD PTR _Index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _Index$[ebp], ecx

; 1058 : 			DrawIndexes[Index++]=Count1;

	mov	edx, DWORD PTR _Index$[ebp]
	mov	ax, WORD PTR _Count1$8[ebp]
	mov	WORD PTR ?DrawIndexes@CDXEngine@@0PAGA[edx*2], ax
	mov	ecx, DWORD PTR _Index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _Index$[ebp], ecx

; 1059 : 			DrawIndexes[Index++]=Count1+1;

	movzx	edx, WORD PTR _Count1$8[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _Index$[ebp]
	mov	WORD PTR ?DrawIndexes@CDXEngine@@0PAGA[eax*2], dx
	mov	ecx, DWORD PTR _Index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _Index$[ebp], ecx

; 1060 : 
; 1061 : 			// number of indexed vertices
; 1062 : 			Indexed2D+=6;

	mov	edx, DWORD PTR ?Indexed2D@CDXEngine@@0KA ; CDXEngine::Indexed2D
	add	edx, 6
	mov	DWORD PTR ?Indexed2D@CDXEngine@@0KA, edx ; CDXEngine::Indexed2D

; 1063 : 			// next item
; 1064 : 			Start=Draw.Next;

	mov	eax, DWORD PTR _Draw$10[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Start$[ebp], ecx

; 1065 : 			// repeat
; 1066 : 			continue;

	jmp	$LN25@DX2D_Gener
$LN4@DX2D_Gener:

; 1067 : 		}
; 1068 : 
; 1069 : 
; 1070 : 		// * LIST INDEXED *
; 1071 : 		for(DWORD a=0; a<Draw.NrVertices; a++) DrawIndexes[Index++]=(unsigned short)(Draw.Index + VOffsets[a]);

	mov	DWORD PTR _a$4[ebp], 0
	jmp	SHORT $LN3@DX2D_Gener
$LN2@DX2D_Gener:
	mov	edx, DWORD PTR _a$4[ebp]
	add	edx, 1
	mov	DWORD PTR _a$4[ebp], edx
$LN3@DX2D_Gener:
	mov	eax, DWORD PTR _Draw$10[ebp]
	mov	ecx, DWORD PTR _a$4[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN1@DX2D_Gener
	mov	edx, DWORD PTR _Draw$10[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _a$4[ebp]
	add	eax, DWORD PTR _VOffsets$[ebp+ecx*4]
	mov	edx, DWORD PTR _Index$[ebp]
	mov	WORD PTR ?DrawIndexes@CDXEngine@@0PAGA[edx*2], ax
	mov	eax, DWORD PTR _Index$[ebp]
	add	eax, 1
	mov	DWORD PTR _Index$[ebp], eax
	jmp	SHORT $LN2@DX2D_Gener
$LN1@DX2D_Gener:

; 1072 : 		// number of indexed vertices
; 1073 : 		Indexed2D+=Draw.NrVertices;

	mov	ecx, DWORD PTR _Draw$10[ebp]
	mov	edx, DWORD PTR ?Indexed2D@CDXEngine@@0KA ; CDXEngine::Indexed2D
	add	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR ?Indexed2D@CDXEngine@@0KA, edx ; CDXEngine::Indexed2D

; 1074 : 		// next item
; 1075 : 		Start=Draw.Next;

	mov	eax, DWORD PTR _Draw$10[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Start$[ebp], ecx

; 1076 : 		
; 1077 : 	}

	jmp	$LN25@DX2D_Gener
$LN24@DX2D_Gener:

; 1078 : 
; 1079 : 	return Start;

	mov	eax, DWORD PTR _Start$[ebp]
$LN27@DX2D_Gener:

; 1080 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?DX2D_GenerateIndexes@CDXEngine@@AAEKK@Z ENDP		; CDXEngine::DX2D_GenerateIndexes
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$1 = -4						; size = 4
?DX2D_Release@CDXEngine@@AAEXXZ PROC			; CDXEngine::DX2D_Release
; _this$ = ecx

; 1551 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1552 : 	// DO NOT RELEASE DOR NOW, need to find right descturctor for this
; 1553 : 	//ReleaseTextures();
; 1554 : 	for(int i=0; i<MAX_2D_BUFFERS; i++){

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@DX2D_Relea
$LN2@DX2D_Relea:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@DX2D_Relea:
	cmp	DWORD PTR _i$1[ebp], 1
	jge	SHORT $LN4@DX2D_Relea

; 1555 : 		Dyn2DVertexBuffer[i].Vb->Release();

	mov	ecx, DWORD PTR _i$1[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[ecx]
	mov	eax, DWORD PTR _i$1[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 1556 : 	}

	jmp	SHORT $LN2@DX2D_Relea
$LN4@DX2D_Relea:

; 1557 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DX2D_Release@CDXEngine@@AAEXXZ ENDP			; CDXEngine::DX2D_Release
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
_this$ = -28						; size = 4
_i$1 = -24						; size = 4
_VBDesc$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?DX2D_Init@CDXEngine@@AAEXXZ PROC			; CDXEngine::DX2D_Init
; _this$ = ecx

; 1530 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1531 : 	LastPassed=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+52], 0

; 1532 : 
; 1533 : 	// Creates the Vertex Buffer Descriptor
; 1534 : 	D3DVERTEXBUFFERDESC	VBDesc;
; 1535 : 	VBDesc.dwSize=sizeof(D3DVERTEXBUFFERDESC);

	mov	DWORD PTR _VBDesc$[ebp], 16		; 00000010H

; 1536 : 	VBDesc.dwCaps=D3DVBCAPS_WRITEONLY | D3DVBCAPS_DONOTCLIP;

	mov	DWORD PTR _VBDesc$[ebp+4], 65537	; 00010001H

; 1537 : 	VBDesc.dwFVF=D3DFVF_DYNAMIC;

	mov	DWORD PTR _VBDesc$[ebp+8], 450		; 000001c2H

; 1538 : 	VBDesc.dwNumVertices=MAX_2D_VERTICES-1;

	mov	DWORD PTR _VBDesc$[ebp+12], 65535	; 0000ffffH

; 1539 : 
; 1540 : 	for(int i=0; i<MAX_2D_BUFFERS; i++){

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@DX2D_Init
$LN2@DX2D_Init:
	mov	ecx, DWORD PTR _i$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$1[ebp], ecx
$LN3@DX2D_Init:
	cmp	DWORD PTR _i$1[ebp], 1
	jge	SHORT $LN1@DX2D_Init

; 1541 : 		CheckHR(D3D->CreateVertexBuffer(&VBDesc, &Dyn2DVertexBuffer[i].Vb, NULL));

	push	0
	mov	edx, DWORD PTR _i$1[ebp]
	shl	edx, 4
	add	edx, OFFSET ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A ; CDXEngine::Dyn2DVertexBuffer
	push	edx
	lea	eax, DWORD PTR _VBDesc$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?m_pD3D@CDXEngine@@0PAUIDirect3D7@@A ; CDXEngine::m_pD3D
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3D@CDXEngine@@0PAUIDirect3D7@@A ; CDXEngine::m_pD3D
	push	eax
	mov	ecx, DWORD PTR [edx+20]
	call	ecx
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 1542 : 	}

	jmp	SHORT $LN2@DX2D_Init
$LN1@DX2D_Init:

; 1543 : 
; 1544 : 	DX2D_Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DX2D_Reset@CDXEngine@@QAEXXZ		; CDXEngine::DX2D_Reset

; 1545 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DX2D_Init@CDXEngine@@AAEXXZ ENDP			; CDXEngine::DX2D_Init
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
_NextDraw$ = -32					; size = 4
_LastTexHandle$ = -28					; size = 4
_l$ = -24						; size = 4
_Layer$ = -20						; size = 4
_DrawStart$ = -16					; size = 4
_this$ = -12						; size = 4
_Draw$1 = -8						; size = 4
tv128 = -3						; size = 1
_Mode_2D$ = -2						; size = 1
_Mode_3D$ = -1						; size = 1
?DX2D_Flush2DObjects@CDXEngine@@AAEXXZ PROC		; CDXEngine::DX2D_Flush2DObjects
; _this$ = ecx

; 1351 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1352 : 	DWORD	LastTexHandle=-1;

	mov	DWORD PTR _LastTexHandle$[ebp], -1

; 1353 : 
; 1354 : 	// Track of the drawing mode
; 1355 : 	bool	Mode_2D = false, Mode_3D = false;

	mov	BYTE PTR _Mode_2D$[ebp], 0
	mov	BYTE PTR _Mode_3D$[ebp], 0

; 1356 : 
; 1357 : 	// if no 2D objects to Draw, exit here
; 1358 : 	if(!Total2DItems) return;

	cmp	DWORD PTR ?Total2DItems@CDXEngine@@0KA, 0 ; CDXEngine::Total2DItems
	jne	SHORT $LN19@DX2D_Flush
	jmp	$LN20@DX2D_Flush
$LN19@DX2D_Flush:

; 1359 : 
; 1360 : 	// Set the View Mode for the 2D stuff
; 1361 : 	DX2D_SetViewMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DX2D_SetViewMode@CDXEngine@@QAEXXZ	; CDXEngine::DX2D_SetViewMode

; 1362 : 
; 1363 : #ifdef	DEBUG_2D_ENGINE	
; 1364 : 	DWORD Vertices=0;
; 1365 : #endif
; 1366 : 	// The Layer Counter
; 1367 : 	DWORD	Layer;
; 1368 : 	DWORD	l=0, DrawStart, NextDraw;

	mov	DWORD PTR _l$[ebp], 0

; 1369 : 
; 1370 : #ifdef	DEBUG_2D_ENGINE	
; 1371 : 	START_PROFILE("DYN SORT:");
; 1372 : #endif
; 1373 : 	// Assign Layers to AUTO Items
; 1374 : 	DX2D_AssignLayers();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DX2D_AssignLayers@CDXEngine@@AAEXXZ	; CDXEngine::DX2D_AssignLayers
$LN18@DX2D_Flush:

; 1375 : #ifdef	DEBUG_2D_ENGINE	
; 1376 : 	STOP_PROFILE("DYN SORT:");
; 1377 : #endif
; 1378 : 
; 1379 : 	// Ok, draw Layers in Order
; 1380 : 	do{
; 1381 : 		Layer=DrawOrder[l++];

	mov	eax, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR ?DrawOrder@CDXEngine@@0PAKA[eax*4]
	mov	DWORD PTR _Layer$[ebp], ecx
	mov	edx, DWORD PTR _l$[ebp]
	add	edx, 1
	mov	DWORD PTR _l$[ebp], edx

; 1382 : 		// get the Layer Entry point in the list
; 1383 : 		DrawStart=Layers[Layer].Start;

	mov	eax, DWORD PTR _Layer$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR ?Layers@CDXEngine@@0PAULayerItemType@@A[eax]
	mov	DWORD PTR _DrawStart$[ebp], ecx

; 1384 : #ifdef	DEBUG_2D_ENGINE	
; 1385 : 		START_PROFILE("DYN SORT:");
; 1386 : #endif
; 1387 : 		if(Layer == LAYER_NODRAW) continue;

	cmp	DWORD PTR _Layer$[ebp], -1
	jne	SHORT $LN15@DX2D_Flush
	jmp	$LN17@DX2D_Flush
$LN15@DX2D_Flush:

; 1388 : 
; 1389 : 		// check if Layer need to be sorted and eventually sort it
; 1390 : 		if(1 || Layers[Layer].Flags & LAYER_SORT) DrawStart=DX2D_SortIndexes(DrawStart);

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN14@DX2D_Flush
	mov	eax, DWORD PTR _DrawStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DX2D_SortIndexes@CDXEngine@@AAEKK@Z	; CDXEngine::DX2D_SortIndexes
	mov	DWORD PTR _DrawStart$[ebp], eax
$LN14@DX2D_Flush:

; 1391 : #ifdef	DEBUG_2D_ENGINE	
; 1392 : 		STOP_PROFILE("DYN SORT:");
; 1393 : #endif
; 1394 : 		// TOP LAYER makes no Z Checks
; 1395 : 		if(Layer==LAYER_TOP) m_pD3DD->SetRenderState( D3DRENDERSTATE_ZENABLE, FALSE );

	cmp	DWORD PTR _Layer$[ebp], 5
	jne	SHORT $LN12@DX2D_Flush
	push	0
	push	7
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx
$LN12@DX2D_Flush:

; 1396 : 		// ok, flush all the Draws till end of Layer
; 1397 : 		while(DrawStart!=0xffffffff){

	cmp	DWORD PTR _DrawStart$[ebp], -1
	je	$LN11@DX2D_Flush

; 1398 : #ifdef	DRAW_USING_2D_FANS
; 1399 : 			NextDraw=Draws2D[DrawStart].Next;
; 1400 : #else
; 1401 : #ifdef	DEBUG_2D_ENGINE	
; 1402 : 			START_PROFILE("DYN SORT:");
; 1403 : #endif
; 1404 : 			// generate Draw Indexes
; 1405 : 			NextDraw=DX2D_GenerateIndexes(DrawStart);

	mov	edx, DWORD PTR _DrawStart$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DX2D_GenerateIndexes@CDXEngine@@AAEKK@Z ; CDXEngine::DX2D_GenerateIndexes
	mov	DWORD PTR _NextDraw$[ebp], eax

; 1406 : #ifdef	DEBUG_2D_ENGINE	
; 1407 : 			STOP_PROFILE("DYN SORT:");
; 1408 : #endif
; 1409 : #endif
; 1410 : 			// Assign the Draw Item
; 1411 : 			DrawItemType &Draw=Draws2D[DrawStart];

	mov	eax, DWORD PTR _DrawStart$[ebp]
	imul	eax, 36					; 00000024H
	add	eax, OFFSET ?Draws2D@CDXEngine@@0PAUDrawItemType@@A ; CDXEngine::Draws2D
	mov	DWORD PTR _Draw$1[ebp], eax

; 1412 : 
; 1413 : /////////////////// DRAWING A 3D ALPHA OBJECT HERE ////////////////////////////////
; 1414 : 			// Check if a solid 3D object
; 1415 : 			if(Draw.Flags & POLY_3DOBJECT){

	mov	ecx, DWORD PTR _Draw$1[ebp]
	mov	edx, DWORD PTR [ecx+28]
	and	edx, 16777216				; 01000000H
	je	SHORT $LN10@DX2D_Flush

; 1416 : 				// Draw the sorted object setting u the right mode if not already in 3D mode
; 1417 : 				DrawSortedAlpha(Draw.Flags & (0xffffff), !Mode_3D);

	movzx	eax, BYTE PTR _Mode_3D$[ebp]
	test	eax, eax
	jne	SHORT $LN22@DX2D_Flush
	mov	BYTE PTR tv128[ebp], 1
	jmp	SHORT $LN23@DX2D_Flush
$LN22@DX2D_Flush:
	mov	BYTE PTR tv128[ebp], 0
$LN23@DX2D_Flush:
	movzx	ecx, BYTE PTR tv128[ebp]
	push	ecx
	mov	edx, DWORD PTR _Draw$1[ebp]
	mov	eax, DWORD PTR [edx+28]
	and	eax, 16777215				; 00ffffffH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawSortedAlpha@CDXEngine@@AAEXK_N@Z	; CDXEngine::DrawSortedAlpha

; 1418 : 				// Mark that we are in 3D mode
; 1419 : 				Mode_2D = false;

	mov	BYTE PTR _Mode_2D$[ebp], 0

; 1420 : 				Mode_3D = true;

	mov	BYTE PTR _Mode_3D$[ebp], 1

; 1421 : 			} else {

	jmp	$LN9@DX2D_Flush
$LN10@DX2D_Flush:

; 1422 : ////////////////// DRAWING A 2D OBJECT HERE ////////////////////////////////
; 1423 : 
; 1424 : 				// if not already in 2D mode, set the 2D drawing parameters
; 1425 : 				if(!Mode_2D){

	movzx	ecx, BYTE PTR _Mode_2D$[ebp]
	test	ecx, ecx
	jne	SHORT $LN8@DX2D_Flush

; 1426 : 					DX2D_SetViewMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DX2D_SetViewMode@CDXEngine@@QAEXXZ	; CDXEngine::DX2D_SetViewMode

; 1427 : 					LastTexHandle=-1;

	mov	DWORD PTR _LastTexHandle$[ebp], -1
$LN8@DX2D_Flush:

; 1428 : 				}
; 1429 : 
; 1430 : 				// eventually assign texture
; 1431 : 				if(LastTexHandle!=Draw.TexHandle){

	mov	edx, DWORD PTR _Draw$1[ebp]
	mov	eax, DWORD PTR _LastTexHandle$[ebp]
	cmp	eax, DWORD PTR [edx+24]
	je	SHORT $LN7@DX2D_Flush

; 1432 : 					if(Draw.TexHandle) m_pD3DD->SetTexture(0,((TextureHandle *)Draw.TexHandle)->m_pDDS);

	mov	ecx, DWORD PTR _Draw$1[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN6@DX2D_Flush
	mov	edx, DWORD PTR _Draw$1[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	0
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+140]
	call	edx
	jmp	SHORT $LN5@DX2D_Flush
$LN6@DX2D_Flush:

; 1433 : 					else m_pD3DD->SetTexture(0,NULL);

	push	0
	push	0
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+140]
	call	eax
$LN5@DX2D_Flush:

; 1434 : 					LastTexHandle=Draw.TexHandle;

	mov	ecx, DWORD PTR _Draw$1[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _LastTexHandle$[ebp], edx
$LN7@DX2D_Flush:

; 1435 : 				}
; 1436 : 
; 1437 : 				// Chweck if a set of lines
; 1438 : 				if(Draw.Flags & POLY_LINE){

	mov	eax, DWORD PTR _Draw$1[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 8388608				; 00800000H
	je	SHORT $LN4@DX2D_Flush

; 1439 : 					m_pD3DD->DrawIndexedPrimitiveVB(D3DPT_LINELIST, Draw.Vb, 0, MAX_2D_VERTICES,
; 1440 : 												(LPWORD)&DrawIndexes, Indexed2D, 0 );

	push	0
	mov	edx, DWORD PTR ?Indexed2D@CDXEngine@@0KA ; CDXEngine::Indexed2D
	push	edx
	push	OFFSET ?DrawIndexes@CDXEngine@@0PAGA	; CDXEngine::DrawIndexes
	push	65536					; 00010000H
	push	0
	mov	eax, DWORD PTR _Draw$1[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	2
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+128]
	call	edx

; 1441 : 				} else {

	jmp	SHORT $LN3@DX2D_Flush
$LN4@DX2D_Flush:

; 1442 : 					//make the Draw	
; 1443 : 	#ifdef	DRAW_USING_2D_FANS
; 1444 : 					m_pD3DD->DrawPrimitiveVB(D3DPT_TRIANGLEFAN, Draw.Vb, Draw.Index, Draw.NrVertices, 0 );
; 1445 : 	#else
; 1446 : 					m_pD3DD->DrawIndexedPrimitiveVB(D3DPT_TRIANGLELIST, Draw.Vb, 0, MAX_2D_VERTICES,
; 1447 : 												(LPWORD)&DrawIndexes, Indexed2D, 0 );

	push	0
	mov	eax, DWORD PTR ?Indexed2D@CDXEngine@@0KA ; CDXEngine::Indexed2D
	push	eax
	push	OFFSET ?DrawIndexes@CDXEngine@@0PAGA	; CDXEngine::DrawIndexes
	push	65536					; 00010000H
	push	0
	mov	ecx, DWORD PTR _Draw$1[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	4
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+128]
	call	eax
$LN3@DX2D_Flush:

; 1448 : 	#endif
; 1449 : 				}
; 1450 : 				// Mark that we are in 2D mode
; 1451 : 				Mode_3D = false;

	mov	BYTE PTR _Mode_3D$[ebp], 0

; 1452 : 				Mode_2D = true;

	mov	BYTE PTR _Mode_2D$[ebp], 1
$LN9@DX2D_Flush:

; 1453 : 
; 1454 : 			}
; 1455 : ///////////////////////////////////////////////////////////////////////////////////////////////
; 1456 : 
; 1457 : 			// ok, go to next draw
; 1458 : 			DrawStart=NextDraw;

	mov	ecx, DWORD PTR _NextDraw$[ebp]
	mov	DWORD PTR _DrawStart$[ebp], ecx

; 1459 : #ifdef	DEBUG_2D_ENGINE	
; 1460 : 			COUNT_PROFILE("2D DRAWS");
; 1461 : #endif
; 1462 : 		}

	jmp	$LN12@DX2D_Flush
$LN11@DX2D_Flush:

; 1463 : 		if(Layer==LAYER_TOP) m_pD3DD->SetRenderState( D3DRENDERSTATE_ZENABLE, TRUE );

	cmp	DWORD PTR _Layer$[ebp], 5
	jne	SHORT $LN17@DX2D_Flush
	push	1
	push	7
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx
$LN17@DX2D_Flush:

; 1464 : 	} while(Layer != LAYER_TOP && l<=LAYER_TOP);			// END with TOP LAYER in any case

	cmp	DWORD PTR _Layer$[ebp], 5
	je	SHORT $LN16@DX2D_Flush
	cmp	DWORD PTR _l$[ebp], 5
	jbe	$LN18@DX2D_Flush
$LN16@DX2D_Flush:

; 1465 : 
; 1466 : 
; 1467 : 	// buffer is flushed
; 1468 : 	Total2DItems=0;

	mov	DWORD PTR ?Total2DItems@CDXEngine@@0KA, 0 ; CDXEngine::Total2DItems

; 1469 : #ifdef	DEBUG_2D_ENGINE	
; 1470 : 	REPORT_VALUE("2D VERTICES :", Dyn2DVertexBuffer[0].LastIndex);
; 1471 : //	Debug_Vertices2D=0;
; 1472 : #endif
; 1473 : 	DX2D_InitLists();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DX2D_InitLists@CDXEngine@@QAEXXZ	; CDXEngine::DX2D_InitLists
$LN20@DX2D_Flush:

; 1474 : 
; 1475 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DX2D_Flush2DObjects@CDXEngine@@AAEXXZ ENDP		; CDXEngine::DX2D_Flush2DObjects
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
_unit$ = -76						; size = 64
tv168 = -12						; size = 4
_this$ = -8						; size = 4
_Flags$ = -4						; size = 4
?DX2D_SetViewMode@CDXEngine@@QAEXXZ PROC		; CDXEngine::DX2D_SetViewMode
; _this$ = ecx

; 1258 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	DWORD PTR _this$[ebp], ecx

; 1259 : 	DXFlagsType	Flags;
; 1260 : 	// Fog at Max range
; 1261 : 	m_FogLevel=m_LinearFogLevel;

	movss	xmm0, DWORD PTR ?m_LinearFogLevel@CDXEngine@@0MA
	movss	DWORD PTR ?m_FogLevel@CDXEngine@@0MA, xmm0

; 1262 : 
; 1263 : 	D3DXMATRIX unit;

	lea	ecx, DWORD PTR _unit$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 1264 : 	D3DXMatrixIdentity(&unit);

	lea	eax, DWORD PTR _unit$[ebp]
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 1265 : 	m_pD3DD->SetTransform( D3DTRANSFORMSTATE_WORLD, (LPD3DMATRIX)&unit );

	lea	ecx, DWORD PTR _unit$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+44]
	call	edx

; 1266 : 
; 1267 : 	// Reset any previous state flag
; 1268 : 	Flags.w=0xffff;	SetRenderState(Flags, Flags, DISABLE);

	mov	DWORD PTR _Flags$[ebp], 65535		; 0000ffffH
	push	0
	mov	eax, DWORD PTR _Flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Flags$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRenderState@CDXEngine@@AAEXTDXFlagsType@@0_N@Z ; CDXEngine::SetRenderState

; 1269 : 	// adjust the flags for the surface
; 1270 : 	Flags.w=0;	Flags.b.Texture=Flags.b.Alpha=1;

	mov	DWORD PTR _Flags$[ebp], 0
	mov	edx, DWORD PTR _Flags$[ebp]
	or	edx, 1
	mov	DWORD PTR _Flags$[ebp], edx
	mov	eax, DWORD PTR _Flags$[ebp]
	or	eax, 16					; 00000010H
	mov	DWORD PTR _Flags$[ebp], eax

; 1271 : 	// set the engine status
; 1272 : 	SetRenderState(Flags, Flags, ENABLE);

	push	1
	mov	ecx, DWORD PTR _Flags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Flags$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRenderState@CDXEngine@@AAEXTDXFlagsType@@0_N@Z ; CDXEngine::SetRenderState

; 1273 : 	// No Culling
; 1274 : 	m_pD3DD->SetRenderState( D3DRENDERSTATE_CULLMODE, D3DCULL_NONE );

	push	1
	push	22					; 00000016H
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 1275 : 	// set the engine status
; 1276 : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_ZWRITEENABLE,FALSE);

	push	0
	push	14					; 0000000eH
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 1277 : 
; 1278 : 	// Disable any texture stage Alpha and Color
; 1279 : 	m_pD3DD->SetTextureStageState(0,D3DTSS_COLOROP,D3DTOP_DISABLE);

	push	1
	push	1
	push	0
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+148]
	call	edx

; 1280 : 	m_pD3DD->SetTextureStageState(0,D3DTSS_ALPHAOP,D3DTOP_DISABLE);

	push	1
	push	4
	push	0
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+148]
	call	eax

; 1281 : 	m_pD3DD->SetTextureStageState(1,D3DTSS_COLOROP,D3DTOP_DISABLE);

	push	1
	push	1
	push	1
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+148]
	call	ecx

; 1282 : 	m_pD3DD->SetTextureStageState(1,D3DTSS_ALPHAOP,D3DTOP_DISABLE);

	push	1
	push	4
	push	1
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+148]
	call	edx

; 1283 : 	m_pD3DD->SetTextureStageState(2,D3DTSS_COLOROP,D3DTOP_DISABLE);

	push	1
	push	1
	push	2
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+148]
	call	eax

; 1284 : 	m_pD3DD->SetTextureStageState(2,D3DTSS_ALPHAOP,D3DTOP_DISABLE);

	push	1
	push	4
	push	2
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+148]
	call	ecx

; 1285 : 	m_pD3DD->SetTextureStageState(3,D3DTSS_COLOROP,D3DTOP_DISABLE);

	push	1
	push	1
	push	3
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+148]
	call	edx

; 1286 : 	m_pD3DD->SetTextureStageState(3,D3DTSS_ALPHAOP,D3DTOP_DISABLE);

	push	1
	push	4
	push	3
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+148]
	call	eax

; 1287 : 
; 1288 : 
; 1289 : 	switch	(m_RenderState){

	mov	ecx, DWORD PTR ?m_RenderState@CDXEngine@@0W4DX_StateType@@A ; CDXEngine::m_RenderState
	mov	DWORD PTR tv168[ebp], ecx
	cmp	DWORD PTR tv168[ebp], 1
	je	SHORT $LN5@DX2D_SetVi
	cmp	DWORD PTR tv168[ebp], 2
	je	$LN2@DX2D_SetVi
	jmp	$LN1@DX2D_SetVi
$LN5@DX2D_SetVi:

; 1290 : 	
; 1291 : 		case	DX_TV:
; 1292 : 						// FRB - B&W
; 1293 : 						if ((g_bGreyMFD) && (!bNVGmode))

	movzx	edx, BYTE PTR ?g_bGreyMFD@@3_NA		; g_bGreyMFD
	test	edx, edx
	je	SHORT $LN4@DX2D_SetVi
	movzx	eax, BYTE PTR ?bNVGmode@@3_NA		; bNVGmode
	test	eax, eax
	jne	SHORT $LN4@DX2D_SetVi

; 1294 : 							m_pD3DD->SetRenderState( D3DRENDERSTATE_TEXTUREFACTOR, 0x00a0a0a0);

	push	10526880				; 00a0a0a0H
	push	60					; 0000003cH
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 1295 : 						else

	jmp	SHORT $LN3@DX2D_SetVi
$LN4@DX2D_SetVi:

; 1296 : 							m_pD3DD->SetRenderState( D3DRENDERSTATE_TEXTUREFACTOR, 0x0000a000 /*NVG_T_FACTOR*/);

	push	40960					; 0000a000H
	push	60					; 0000003cH
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx
$LN3@DX2D_SetVi:

; 1297 : 
; 1298 : 						m_pD3DD->SetTextureStageState(0,D3DTSS_COLORARG1,D3DTA_TEXTURE);

	push	2
	push	2
	push	0
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+148]
	call	eax

; 1299 : 						m_pD3DD->SetTextureStageState(0,D3DTSS_COLORARG2,D3DTA_DIFFUSE);

	push	0
	push	3
	push	0
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+148]
	call	ecx

; 1300 : 						m_pD3DD->SetTextureStageState(0,D3DTSS_COLOROP,D3DTOP_MODULATE);

	push	4
	push	1
	push	0
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+148]
	call	edx

; 1301 : 
; 1302 : 						m_pD3DD->SetTextureStageState(1,D3DTSS_COLORARG2,D3DTA_TFACTOR);

	push	3
	push	3
	push	1
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+148]
	call	eax

; 1303 : 						m_pD3DD->SetTextureStageState(1,D3DTSS_COLORARG1,D3DTA_CURRENT);

	push	1
	push	2
	push	1
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+148]
	call	ecx

; 1304 : 						m_pD3DD->SetTextureStageState(1,D3DTSS_COLOROP,D3DTOP_MODULATE);

	push	4
	push	1
	push	1
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+148]
	call	edx

; 1305 : 						break;

	jmp	$LN6@DX2D_SetVi
$LN2@DX2D_SetVi:

; 1306 : 
; 1307 : 		case	DX_NVG:
; 1308 : 						m_pD3DD->SetRenderState( D3DRENDERSTATE_TEXTUREFACTOR, 0x0000a000 /*NVG_T_FACTOR*/);

	push	40960					; 0000a000H
	push	60					; 0000003cH
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 1309 : 
; 1310 : 						m_pD3DD->SetTextureStageState(0,D3DTSS_COLORARG1,D3DTA_TEXTURE);

	push	2
	push	2
	push	0
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+148]
	call	ecx

; 1311 : 						m_pD3DD->SetTextureStageState(0,D3DTSS_COLORARG2,D3DTA_DIFFUSE);

	push	0
	push	3
	push	0
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+148]
	call	edx

; 1312 : 						m_pD3DD->SetTextureStageState(0,D3DTSS_COLOROP,D3DTOP_MODULATE);

	push	4
	push	1
	push	0
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+148]
	call	eax

; 1313 : 
; 1314 : 						m_pD3DD->SetTextureStageState(1,D3DTSS_COLORARG2,D3DTA_TFACTOR);

	push	3
	push	3
	push	1
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+148]
	call	ecx

; 1315 : 						m_pD3DD->SetTextureStageState(1,D3DTSS_COLORARG1,D3DTA_CURRENT);

	push	1
	push	2
	push	1
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+148]
	call	edx

; 1316 : 						m_pD3DD->SetTextureStageState(1,D3DTSS_COLOROP,D3DTOP_MODULATE);

	push	4
	push	1
	push	1
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+148]
	call	eax

; 1317 : 						break;

	jmp	SHORT $LN6@DX2D_SetVi
$LN1@DX2D_SetVi:

; 1318 : 
; 1319 : 		case	DX_OTW:
; 1320 : 		default	:
; 1321 : 						m_pD3DD->SetTextureStageState(0,D3DTSS_COLORARG1,D3DTA_TEXTURE);

	push	2
	push	2
	push	0
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+148]
	call	ecx

; 1322 : 						m_pD3DD->SetTextureStageState(0,D3DTSS_COLORARG2,D3DTA_DIFFUSE);

	push	0
	push	3
	push	0
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+148]
	call	edx

; 1323 : 						m_pD3DD->SetTextureStageState(0,D3DTSS_COLOROP,D3DTOP_MODULATE);

	push	4
	push	1
	push	0
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+148]
	call	eax
$LN6@DX2D_SetVi:

; 1324 : 						break;
; 1325 : 
; 1326 : 	}
; 1327 : 
; 1328 : 	// More setting for 2D drawing
; 1329 : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHATESTENABLE,TRUE);

	push	1
	push	15					; 0000000fH
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 1330 : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHAREF,(DWORD)1);

	push	1
	push	24					; 00000018H
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx

; 1331 : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHAFUNC,D3DCMP_GREATEREQUAL);

	push	7
	push	25					; 00000019H
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 1332 : 
; 1333 : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE,TRUE);

	push	1
	push	27					; 0000001bH
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 1334 : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_SRCBLEND,D3DBLEND_SRCALPHA);

	push	5
	push	19					; 00000013H
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx

; 1335 : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_DESTBLEND,D3DBLEND_INVSRCALPHA);

	push	6
	push	20					; 00000014H
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 1336 : 	m_pD3DD->SetTextureStageState(0,D3DTSS_ALPHAARG1,D3DTA_TEXTURE);

	push	2
	push	5
	push	0
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+148]
	call	ecx

; 1337 : 	m_pD3DD->SetTextureStageState(0,D3DTSS_ALPHAARG2,D3DTA_DIFFUSE);

	push	0
	push	6
	push	0
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+148]
	call	edx

; 1338 : 	m_pD3DD->SetTextureStageState(0,D3DTSS_ALPHAOP,D3DTOP_MODULATE);

	push	4
	push	4
	push	0
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+148]
	call	eax

; 1339 : 
; 1340 : 	// No HW Light for 2D objects
; 1341 : 	m_pD3DD->SetRenderState( D3DRENDERSTATE_LIGHTING, FALSE );

	push	0
	push	137					; 00000089H
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 1342 :     m_pD3DD->SetRenderState( D3DRENDERSTATE_DIFFUSEMATERIALSOURCE, D3DMCS_COLOR1 );

	push	1
	push	145					; 00000091H
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx

; 1343 :     m_pD3DD->SetRenderState( D3DRENDERSTATE_EMISSIVEMATERIALSOURCE, D3DMCS_COLOR2 );

	push	2
	push	148					; 00000094H
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 1344 : 
; 1345 : 	m_FogLevel=m_LinearFogLevel;

	movss	xmm0, DWORD PTR ?m_LinearFogLevel@CDXEngine@@0MA
	movss	DWORD PTR ?m_FogLevel@CDXEngine@@0MA, xmm0

; 1346 : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_FOGEND,   *(DWORD *)(&m_FogLevel));

	mov	ecx, DWORD PTR ?m_FogLevel@CDXEngine@@0MA
	push	ecx
	push	37					; 00000025H
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx

; 1347 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DX2D_SetViewMode@CDXEngine@@QAEXXZ ENDP		; CDXEngine::DX2D_SetViewMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
_Distance$ = -16					; size = 4
_Index$1 = -12						; size = 4
_this$ = -8						; size = 4
_Draw$ = -4						; size = 4
_ID$ = 8						; size = 4
_Layer$ = 12						; size = 4
_Stack$ = 16						; size = 4
_Pos$ = 20						; size = 4
?DX2D_AddObject@CDXEngine@@QAEXKKPAUSurfaceStackType@@PAUD3DXVECTOR3@@@Z PROC ; CDXEngine::DX2D_AddObject
; _this$ = ecx

; 900  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 901  : 
; 902  : 	// Get Distance from a previous test if POLY DECLARED VISIBLE, or calcualte if from scratch
; 903  : 	float	Distance= DX2D_GetDistance(Pos, (DWORD)CAMERA_VERTICES);

	push	8
	mov	eax, DWORD PTR _Pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DX2D_GetDistance@CDXEngine@@QAEMPAUD3DXVECTOR3@@K@Z ; CDXEngine::DX2D_GetDistance
	fstp	DWORD PTR _Distance$[ebp]

; 904  : 
; 905  : 	// check if layer initialized, if not, initialize it
; 906  : 	if(Layers[Layer].Start==-1)	Layers[Layer].Start=Total2DItems;

	mov	ecx, DWORD PTR _Layer$[ebp]
	imul	ecx, 12					; 0000000cH
	cmp	DWORD PTR ?Layers@CDXEngine@@0PAULayerItemType@@A[ecx], -1
	jne	SHORT $LN2@DX2D_AddOb
	mov	edx, DWORD PTR _Layer$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	mov	DWORD PTR ?Layers@CDXEngine@@0PAULayerItemType@@A[edx], eax

; 907  : 	// If layer already initialized
; 908  : 	else {

	jmp	SHORT $LN1@DX2D_AddOb
$LN2@DX2D_AddOb:

; 909  : 		// get a pointer to last draw for the layer
; 910  : 		DWORD	Index=Layers[Layer].End;

	mov	ecx, DWORD PTR _Layer$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR ?Layers@CDXEngine@@0PAULayerItemType@@A[ecx+4]
	mov	DWORD PTR _Index$1[ebp], edx

; 911  : 		// Link new Draw Item
; 912  : 		Draws2D[Index].Next=Total2DItems;

	mov	eax, DWORD PTR _Index$1[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	mov	DWORD PTR ?Draws2D@CDXEngine@@0PAUDrawItemType@@A[eax], ecx
$LN1@DX2D_AddOb:

; 913  : 	}
; 914  : 	// This is the last Draw for the Layer
; 915  : 	Layers[Layer].End=Total2DItems;

	mov	edx, DWORD PTR _Layer$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	mov	DWORD PTR ?Layers@CDXEngine@@0PAULayerItemType@@A[edx+4], eax

; 916  : 	
; 917  : 	// get the Draw under setting
; 918  : 	DrawItemType	&Draw=Draws2D[Total2DItems];

	mov	ecx, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	imul	ecx, 36					; 00000024H
	add	ecx, OFFSET ?Draws2D@CDXEngine@@0PAUDrawItemType@@A ; CDXEngine::Draws2D
	mov	DWORD PTR _Draw$[ebp], ecx

; 919  : 	// * setup the items to track & sort the Quad *
; 920  : 	// The Scaled Distance for sorting
; 921  : 	Draw.Dist256=F_I32(Distance*256.0f);

	movss	xmm0, DWORD PTR _Distance$[ebp]
	mulss	xmm0, DWORD PTR __real@43800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?F_I32@@YAKM@Z				; F_I32
	add	esp, 4
	mov	edx, DWORD PTR _Draw$[ebp]
	mov	DWORD PTR [edx+4], eax

; 922  : 	// The Texture Handle
; 923  : 	Draw.TexHandle=NULL;

	mov	eax, DWORD PTR _Draw$[ebp]
	mov	DWORD PTR [eax+24], 0

; 924  : 	// The vertex buffer assigned
; 925  : 	Draw.Vb=(LPDIRECT3DVERTEXBUFFER7)Stack;

	mov	ecx, DWORD PTR _Draw$[ebp]
	mov	edx, DWORD PTR _Stack$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 926  : 	// Index of vertices in the Vertex Buffer
; 927  : 	Draw.Index=0;

	mov	eax, DWORD PTR _Draw$[ebp]
	mov	DWORD PTR [eax+12], 0

; 928  : 	// vertices of the item, vertices for a Tri
; 929  : 	Draw.NrVertices=0;

	mov	ecx, DWORD PTR _Draw$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 930  : 	// Final Item in the list
; 931  : 	Draw.Next=0xffffffff;

	mov	edx, DWORD PTR _Draw$[ebp]
	mov	DWORD PTR [edx], -1

; 932  : 	// Assign Flags from the draw
; 933  : 	Draw.Flags=POLY_3DOBJECT | ID;

	mov	eax, DWORD PTR _ID$[ebp]
	or	eax, 16777216				; 01000000H
	mov	ecx, DWORD PTR _Draw$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 934  : 	// Assign height, Add camera Offset as height is used to evaluate
; 935  : 	// Vertical object position, and assign right layer
; 936  : 	Draw.Height=Pos->z + CameraPos.z;

	mov	edx, DWORD PTR _Pos$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	addss	xmm0, DWORD PTR ?CameraPos@CDXEngine@@0U_D3DVECTOR@@A+8
	mov	eax, DWORD PTR _Draw$[ebp]
	movss	DWORD PTR [eax+32], xmm0

; 937  : 	
; 938  : 	// Update the Sort Buffer
; 939  : 	SortBuffer[Total2DItems].Index=Total2DItems;

	mov	ecx, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	mov	edx, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	mov	DWORD PTR ?SortBuffer@CDXEngine@@0PAUSortItemType@@A[ecx*8], edx

; 940  : 	// new item to be sorted
; 941  : 	Total2DItems++;

	mov	eax, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	add	eax, 1
	mov	DWORD PTR ?Total2DItems@CDXEngine@@0KA, eax ; CDXEngine::Total2DItems

; 942  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?DX2D_AddObject@CDXEngine@@QAEXKKPAUSurfaceStackType@@PAUD3DXVECTOR3@@@Z ENDP ; CDXEngine::DX2D_AddObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Distance$ = 8						; size = 4
?DX2D_ForceDistance@CDXEngine@@QAEXM@Z PROC		; CDXEngine::DX2D_ForceDistance
; _this$ = ecx

; 374  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 375  : 	TestDistance = Distance;

	movss	xmm0, DWORD PTR _Distance$[ebp]
	movss	DWORD PTR ?TestDistance@CDXEngine@@0MA, xmm0

; 376  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?DX2D_ForceDistance@CDXEngine@@QAEXM@Z ENDP		; CDXEngine::DX2D_ForceDistance
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Result$ = 8						; size = 4
_Pos$ = 12						; size = 4
?DX2D_MakeCameraSpace@CDXEngine@@QAEXPAUD3DXVECTOR3@@0@Z PROC ; CDXEngine::DX2D_MakeCameraSpace
; _this$ = ecx

; 391  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 392  : 	Result->x = (float) ( (double) Pos->x - (double) XMMCamera.d3d.x);

	mov	eax, DWORD PTR _Pos$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax]
	cvtss2sd xmm1, DWORD PTR ?XMMCamera@CDXEngine@@2TXMMVector@@A
	subsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	mov	ecx, DWORD PTR _Result$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 393  : 	Result->y = (float) ( (double) Pos->y - (double) XMMCamera.d3d.y);

	mov	edx, DWORD PTR _Pos$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx+4]
	cvtss2sd xmm1, DWORD PTR ?XMMCamera@CDXEngine@@2TXMMVector@@A+4
	subsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _Result$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 394  : 	Result->z = (float) ( (double) Pos->z - (double) XMMCamera.d3d.z);

	mov	ecx, DWORD PTR _Pos$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx+8]
	cvtss2sd xmm1, DWORD PTR ?XMMCamera@CDXEngine@@2TXMMVector@@A+8
	subsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	mov	edx, DWORD PTR _Result$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 395  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?DX2D_MakeCameraSpace@CDXEngine@@QAEXPAUD3DXVECTOR3@@0@Z ENDP ; CDXEngine::DX2D_MakeCameraSpace
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
$T1 = -208						; size = 16
_C0$ = -192						; size = 16
_C2$ = -176						; size = 16
$T2 = -160						; size = 16
$T3 = -144						; size = 16
_C1$ = -128						; size = 16
$T4 = -112						; size = 16
_this$ = -88						; size = 4
tv75 = -84						; size = 4
_XMMStore2$ = -80					; size = 16
_Coord$ = -64						; size = 16
_XMMStore1$ = -48					; size = 16
_XMMStore$ = -32					; size = 16
__$ArrayPad$ = -4					; size = 4
_Pos$ = 8						; size = 4
_Vertex$ = 12						; size = 4
_Nr$ = 16						; size = 4
?DX2D_TransformBB@CDXEngine@@QAEXPATXMMVector@@PAUD3DDYNVERTEX@@K@Z PROC ; CDXEngine::DX2D_TransformBB
; _this$ = ecx

; 1506 : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1507 : 	_MM_ALIGN16	XMMVector	XMMStore, XMMStore1, XMMStore2, Coord;
; 1508 : 	_MM_ALIGN16	__m128		C0=BBCx[0].Xmm, C1=BBCx[1].Xmm, C2=BBCx[2].Xmm;

	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, OFFSET ?BBCx@CDXEngine@@2PATXMMVector@@A ; CDXEngine::BBCx
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR _C0$[ebp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, OFFSET ?BBCx@CDXEngine@@2PATXMMVector@@A ; CDXEngine::BBCx
	movups	xmm0, XMMWORD PTR [ecx]
	movups	XMMWORD PTR _C1$[ebp], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, OFFSET ?BBCx@CDXEngine@@2PATXMMVector@@A ; CDXEngine::BBCx
	movups	xmm0, XMMWORD PTR [edx]
	movups	XMMWORD PTR _C2$[ebp], xmm0
$LN2@DX2D_Trans:

; 1509 : 	while(Nr--){

	mov	eax, DWORD PTR _Nr$[ebx]
	mov	DWORD PTR tv75[ebp], eax
	mov	ecx, DWORD PTR _Nr$[ebx]
	sub	ecx, 1
	mov	DWORD PTR _Nr$[ebx], ecx
	cmp	DWORD PTR tv75[ebp], 0
	je	$LN1@DX2D_Trans

; 1510 : 		// Get the quad coords
; 1511 : 		Coord.Xmm = _mm_loadu_ps((float*)&Vertex->pos);

	mov	edx, DWORD PTR _Vertex$[ebx]
	movups	xmm0, XMMWORD PTR [edx]
	movaps	XMMWORD PTR $T4[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T4[ebp]
	movaps	XMMWORD PTR _Coord$[ebp], xmm0

; 1512 : 		// Execute the BB by 1st Cx
; 1513 : 		XMMStore.Xmm = _mm_mul_ps(C0, Coord.Xmm);

	movaps	xmm0, XMMWORD PTR _C0$[ebp]
	mulps	xmm0, XMMWORD PTR _Coord$[ebp]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _XMMStore$[ebp], xmm0

; 1514 : 		Vertex->pos.x = XMMStore.d3d.x + XMMStore.d3d.y + XMMStore.d3d.z + Pos->d3d.x;

	movss	xmm0, DWORD PTR _XMMStore$[ebp]
	addss	xmm0, DWORD PTR _XMMStore$[ebp+4]
	addss	xmm0, DWORD PTR _XMMStore$[ebp+8]
	mov	eax, DWORD PTR _Pos$[ebx]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _Vertex$[ebx]
	movss	DWORD PTR [ecx], xmm0

; 1515 : 		// Execute the BB by 2nd Cx
; 1516 : 		XMMStore1.Xmm = _mm_mul_ps(C1, Coord.Xmm);

	movaps	xmm0, XMMWORD PTR _C1$[ebp]
	mulps	xmm0, XMMWORD PTR _Coord$[ebp]
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _XMMStore1$[ebp], xmm0

; 1517 : 		Vertex->pos.y = XMMStore1.d3d.x + XMMStore1.d3d.y + XMMStore1.d3d.z + Pos->d3d.y;

	movss	xmm0, DWORD PTR _XMMStore1$[ebp]
	addss	xmm0, DWORD PTR _XMMStore1$[ebp+4]
	addss	xmm0, DWORD PTR _XMMStore1$[ebp+8]
	mov	edx, DWORD PTR _Pos$[ebx]
	addss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _Vertex$[ebx]
	movss	DWORD PTR [eax+4], xmm0

; 1518 : 		// Execute the BB by 3rd Cx
; 1519 : 		XMMStore2.Xmm = _mm_mul_ps(C2, Coord.Xmm);

	movaps	xmm0, XMMWORD PTR _C2$[ebp]
	mulps	xmm0, XMMWORD PTR _Coord$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	movaps	XMMWORD PTR _XMMStore2$[ebp], xmm0

; 1520 : 		Vertex->pos.z = XMMStore2.d3d.x + XMMStore2.d3d.y + XMMStore2.d3d.z + Pos->d3d.z;

	movss	xmm0, DWORD PTR _XMMStore2$[ebp]
	addss	xmm0, DWORD PTR _XMMStore2$[ebp+4]
	addss	xmm0, DWORD PTR _XMMStore2$[ebp+8]
	mov	ecx, DWORD PTR _Pos$[ebx]
	addss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _Vertex$[ebx]
	movss	DWORD PTR [edx+8], xmm0

; 1521 : 		// next quad
; 1522 : 		Vertex++;

	mov	eax, DWORD PTR _Vertex$[ebx]
	add	eax, 28					; 0000001cH
	mov	DWORD PTR _Vertex$[ebx], eax

; 1523 : 	}

	jmp	$LN2@DX2D_Trans
$LN1@DX2D_Trans:

; 1524 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	12					; 0000000cH
?DX2D_TransformBB@CDXEngine@@QAEXPATXMMVector@@PAUD3DDYNVERTEX@@K@Z ENDP ; CDXEngine::DX2D_TransformBB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
$T1 = -144						; size = 16
_C1$ = -128						; size = 16
_C2$ = -112						; size = 16
_C0$ = -96						; size = 16
$T2 = -80						; size = 16
$T3 = -64						; size = 16
_this$ = -40						; size = 4
tv75 = -36						; size = 4
_XMMStore$ = -32					; size = 16
__$ArrayPad$ = -4					; size = 4
_Pos$ = 8						; size = 4
_Coord$ = 12						; size = 4
_Dest$ = 16						; size = 4
_Nr$ = 20						; size = 4
?DX2D_TransformBB@CDXEngine@@QAEXPATXMMVector@@0PAUD3DDYNVERTEX@@K@Z PROC ; CDXEngine::DX2D_TransformBB
; _this$ = ecx

; 1484 : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1485 : 	_MM_ALIGN16	XMMVector	XMMStore;
; 1486 : 	_MM_ALIGN16	__m128		C0=BBCx[0].Xmm, C1=BBCx[1].Xmm, C2=BBCx[2].Xmm;

	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, OFFSET ?BBCx@CDXEngine@@2PATXMMVector@@A ; CDXEngine::BBCx
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR _C0$[ebp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, OFFSET ?BBCx@CDXEngine@@2PATXMMVector@@A ; CDXEngine::BBCx
	movups	xmm0, XMMWORD PTR [ecx]
	movups	XMMWORD PTR _C1$[ebp], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, OFFSET ?BBCx@CDXEngine@@2PATXMMVector@@A ; CDXEngine::BBCx
	movups	xmm0, XMMWORD PTR [edx]
	movups	XMMWORD PTR _C2$[ebp], xmm0
$LN2@DX2D_Trans:

; 1487 : 	while(Nr--){

	mov	eax, DWORD PTR _Nr$[ebx]
	mov	DWORD PTR tv75[ebp], eax
	mov	ecx, DWORD PTR _Nr$[ebx]
	sub	ecx, 1
	mov	DWORD PTR _Nr$[ebx], ecx
	cmp	DWORD PTR tv75[ebp], 0
	je	$LN1@DX2D_Trans

; 1488 : 		// Execute the BB by 1st Cx
; 1489 : 		XMMStore.Xmm = _mm_mul_ps(C0, Coord->Xmm);

	mov	edx, DWORD PTR _Coord$[ebx]
	movaps	xmm0, XMMWORD PTR _C0$[ebp]
	mulps	xmm0, XMMWORD PTR [edx]
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _XMMStore$[ebp], xmm0

; 1490 : 		Dest->pos.x = XMMStore.d3d.x + XMMStore.d3d.y + XMMStore.d3d.z + Pos->d3d.x;

	movss	xmm0, DWORD PTR _XMMStore$[ebp]
	addss	xmm0, DWORD PTR _XMMStore$[ebp+4]
	addss	xmm0, DWORD PTR _XMMStore$[ebp+8]
	mov	eax, DWORD PTR _Pos$[ebx]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _Dest$[ebx]
	movss	DWORD PTR [ecx], xmm0

; 1491 : 		// Execute the BB by 2nd Cx
; 1492 : 		XMMStore.Xmm = _mm_mul_ps(C1, Coord->Xmm);

	mov	edx, DWORD PTR _Coord$[ebx]
	movaps	xmm0, XMMWORD PTR _C1$[ebp]
	mulps	xmm0, XMMWORD PTR [edx]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _XMMStore$[ebp], xmm0

; 1493 : 		Dest->pos.y = XMMStore.d3d.x + XMMStore.d3d.y + XMMStore.d3d.z + Pos->d3d.y;

	movss	xmm0, DWORD PTR _XMMStore$[ebp]
	addss	xmm0, DWORD PTR _XMMStore$[ebp+4]
	addss	xmm0, DWORD PTR _XMMStore$[ebp+8]
	mov	eax, DWORD PTR _Pos$[ebx]
	addss	xmm0, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _Dest$[ebx]
	movss	DWORD PTR [ecx+4], xmm0

; 1494 : 		// Execute the BB by 3rd Cx
; 1495 : 		XMMStore.Xmm = _mm_mul_ps(C2, Coord->Xmm);

	mov	edx, DWORD PTR _Coord$[ebx]
	movaps	xmm0, XMMWORD PTR _C2$[ebp]
	mulps	xmm0, XMMWORD PTR [edx]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	movaps	XMMWORD PTR _XMMStore$[ebp], xmm0

; 1496 : 		Dest->pos.z = XMMStore.d3d.x + XMMStore.d3d.y + XMMStore.d3d.z + Pos->d3d.z;

	movss	xmm0, DWORD PTR _XMMStore$[ebp]
	addss	xmm0, DWORD PTR _XMMStore$[ebp+4]
	addss	xmm0, DWORD PTR _XMMStore$[ebp+8]
	mov	eax, DWORD PTR _Pos$[ebx]
	addss	xmm0, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _Dest$[ebx]
	movss	DWORD PTR [ecx+8], xmm0

; 1497 : 		// Next vertex
; 1498 : 		Coord++;

	mov	edx, DWORD PTR _Coord$[ebx]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _Coord$[ebx], edx

; 1499 : 		Dest++;

	mov	eax, DWORD PTR _Dest$[ebx]
	add	eax, 28					; 0000001cH
	mov	DWORD PTR _Dest$[ebx], eax

; 1500 : 	}

	jmp	$LN2@DX2D_Trans
$LN1@DX2D_Trans:

; 1501 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	16					; 00000010H
?DX2D_TransformBB@CDXEngine@@QAEXPATXMMVector@@0PAUD3DDYNVERTEX@@K@Z ENDP ; CDXEngine::DX2D_TransformBB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_y$ = 8							; size = 4
_z$ = 12						; size = 4
?DX2D_SetupSquareCx@CDXEngine@@QAEXMM@Z PROC		; CDXEngine::DX2D_SetupSquareCx
; _this$ = ecx

; 1681 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1682 : 	// The X is always 0 ( 2D square )
; 1683 : 	vbb0.d3d.x=vbb1.d3d.x=vbb2.d3d.x=vbb3.d3d.x=0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?vbb3@CDXEngine@@2TXMMVector@@A, xmm0
	movss	xmm0, DWORD PTR ?vbb3@CDXEngine@@2TXMMVector@@A
	movss	DWORD PTR ?vbb2@CDXEngine@@2TXMMVector@@A, xmm0
	movss	xmm0, DWORD PTR ?vbb2@CDXEngine@@2TXMMVector@@A
	movss	DWORD PTR ?vbb1@CDXEngine@@2TXMMVector@@A, xmm0
	movss	xmm0, DWORD PTR ?vbb1@CDXEngine@@2TXMMVector@@A
	movss	DWORD PTR ?vbb0@CDXEngine@@2TXMMVector@@A, xmm0

; 1684 : 	vbb0.d3d.y=vbb3.d3d.y=-y; vbb1.d3d.y=vbb2.d3d.y=y;

	movss	xmm0, DWORD PTR _y$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR ?vbb3@CDXEngine@@2TXMMVector@@A+4, xmm0
	movss	xmm0, DWORD PTR ?vbb3@CDXEngine@@2TXMMVector@@A+4
	movss	DWORD PTR ?vbb0@CDXEngine@@2TXMMVector@@A+4, xmm0
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR ?vbb2@CDXEngine@@2TXMMVector@@A+4, xmm0
	movss	xmm0, DWORD PTR ?vbb2@CDXEngine@@2TXMMVector@@A+4
	movss	DWORD PTR ?vbb1@CDXEngine@@2TXMMVector@@A+4, xmm0

; 1685 : 	vbb0.d3d.z=vbb1.d3d.z=-z; vbb2.d3d.z=vbb3.d3d.z=z;

	movss	xmm0, DWORD PTR _z$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR ?vbb1@CDXEngine@@2TXMMVector@@A+8, xmm0
	movss	xmm0, DWORD PTR ?vbb1@CDXEngine@@2TXMMVector@@A+8
	movss	DWORD PTR ?vbb0@CDXEngine@@2TXMMVector@@A+8, xmm0
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR ?vbb3@CDXEngine@@2TXMMVector@@A+8, xmm0
	movss	xmm0, DWORD PTR ?vbb3@CDXEngine@@2TXMMVector@@A+8
	movss	DWORD PTR ?vbb2@CDXEngine@@2TXMMVector@@A+8, xmm0

; 1686 : 
; 1687 : 	// the 4 vertices of the square with BillBoard CXs
; 1688 : 	D3DXVec3TransformCoord((D3DXVECTOR3*)&BBvbb0.d3d, (D3DXVECTOR3*)&vbb0.d3d, &BBMatrix);

	push	OFFSET ?BBMatrix@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::BBMatrix
	push	OFFSET ?vbb0@CDXEngine@@2TXMMVector@@A	; CDXEngine::vbb0
	push	OFFSET ?BBvbb0@CDXEngine@@2TXMMVector@@A ; CDXEngine::BBvbb0
	call	_D3DXVec3TransformCoord@12

; 1689 : 	D3DXVec3TransformCoord((D3DXVECTOR3*)&BBvbb1.d3d, (D3DXVECTOR3*)&vbb1.d3d, &BBMatrix);

	push	OFFSET ?BBMatrix@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::BBMatrix
	push	OFFSET ?vbb1@CDXEngine@@2TXMMVector@@A	; CDXEngine::vbb1
	push	OFFSET ?BBvbb1@CDXEngine@@2TXMMVector@@A ; CDXEngine::BBvbb1
	call	_D3DXVec3TransformCoord@12

; 1690 : 	D3DXVec3TransformCoord((D3DXVECTOR3*)&BBvbb2.d3d, (D3DXVECTOR3*)&vbb2.d3d, &BBMatrix);

	push	OFFSET ?BBMatrix@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::BBMatrix
	push	OFFSET ?vbb2@CDXEngine@@2TXMMVector@@A	; CDXEngine::vbb2
	push	OFFSET ?BBvbb2@CDXEngine@@2TXMMVector@@A ; CDXEngine::BBvbb2
	call	_D3DXVec3TransformCoord@12

; 1691 : 	D3DXVec3TransformCoord((D3DXVECTOR3*)&BBvbb3.d3d, (D3DXVECTOR3*)&vbb3.d3d, &BBMatrix);

	push	OFFSET ?BBMatrix@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::BBMatrix
	push	OFFSET ?vbb3@CDXEngine@@2TXMMVector@@A	; CDXEngine::vbb3
	push	OFFSET ?BBvbb3@CDXEngine@@2TXMMVector@@A ; CDXEngine::BBvbb3
	call	_D3DXVec3TransformCoord@12

; 1692 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?DX2D_SetupSquareCx@CDXEngine@@QAEXMM@Z ENDP		; CDXEngine::DX2D_SetupSquareCx
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Order$ = 8						; size = 4
?DX2D_SetDrawOrder@CDXEngine@@QAEXPAK@Z PROC		; CDXEngine::DX2D_SetDrawOrder
; _this$ = ecx

; 1479 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1480 : 	memcpy(DrawOrder, Order, sizeof(DrawOrder));

	push	28					; 0000001cH
	mov	eax, DWORD PTR _Order$[ebp]
	push	eax
	push	OFFSET ?DrawOrder@CDXEngine@@0PAKA	; CDXEngine::DrawOrder
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1481 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?DX2D_SetDrawOrder@CDXEngine@@QAEXPAK@Z ENDP		; CDXEngine::DX2D_SetDrawOrder
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
$T1 = -112						; size = 16
$T2 = -96						; size = 16
$T3 = -80						; size = 16
_Index$4 = -60						; size = 4
tv81 = -56						; size = 4
_Distance$ = -52					; size = 4
_this$ = -48						; size = 4
_VbIndex$ = -44						; size = 4
_a$5 = -40						; size = 4
_Draw$ = -36						; size = 4
_V$ = -32						; size = 16
__$ArrayPad$ = -4					; size = 4
_Layer$ = 8						; size = 4
_Flags$ = 12						; size = 4
_Pos$ = 16						; size = 4
_Poly$ = 20						; size = 4
_Radius$ = 24						; size = 4
_Vertices$ = 28						; size = 4
_TexHandle$ = 32					; size = 4
?DX2D_AddPoly@CDXEngine@@QAEXKKPAUD3DXVECTOR3@@PAUD3DDYNVERTEX@@MKK@Z PROC ; CDXEngine::DX2D_AddPoly
; _this$ = ecx

; 824  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 825  : 	_MM_ALIGN16	XMMVector	V;
; 826  : 
; 827  : 
; 828  : 	// not going to overflow stuff
; 829  : 	if(Total2DItems>=MAX_2D_ITEMS) return;

	cmp	DWORD PTR ?Total2DItems@CDXEngine@@0KA, 65536 ; CDXEngine::Total2DItems, 00010000H
	jb	SHORT $LN11@DX2D_AddPo
	jmp	$LN12@DX2D_AddPo
$LN11@DX2D_AddPo:

; 830  : 
; 831  : 	// Get the Index for the selected VB
; 832  : 	DWORD	&VbIndex=Dyn2DVertexBuffer[VBSelected].LastIndex;

	mov	eax, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	eax, 4
	add	eax, OFFSET ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A+8
	mov	DWORD PTR _VbIndex$[ebp], eax

; 833  : 	// if no more space, exit
; 834  : 	if(!CheckBufferSpace(VbIndex, Vertices)) return;

	mov	ecx, DWORD PTR _Vertices$[ebx]
	push	ecx
	mov	edx, DWORD PTR _VbIndex$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckBufferSpace@CDXEngine@@AAE_NKK@Z	; CDXEngine::CheckBufferSpace
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN10@DX2D_AddPo
	jmp	$LN12@DX2D_AddPo
$LN10@DX2D_AddPo:

; 835  : 
; 836  : 	// Get Distance from a previous test if POLY DECLARED VISIBLE, or calcualte if from scratch
; 837  : 	float	Distance=( Flags & POLY_VISIBLE )? TestDistance : DX2D_GetDistance(Pos, Radius);

	mov	edx, DWORD PTR _Flags$[ebx]
	and	edx, 4
	je	SHORT $LN14@DX2D_AddPo
	movss	xmm0, DWORD PTR ?TestDistance@CDXEngine@@0MA
	movss	DWORD PTR tv81[ebp], xmm0
	jmp	SHORT $LN15@DX2D_AddPo
$LN14@DX2D_AddPo:
	push	0
	push	ecx
	movss	xmm0, DWORD PTR _Radius$[ebx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _Pos$[ebx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DX2D_GetDistance@CDXEngine@@QAEMPAUD3DXVECTOR3@@MK@Z ; CDXEngine::DX2D_GetDistance
	fstp	DWORD PTR tv81[ebp]
$LN15@DX2D_AddPo:
	movss	xmm0, DWORD PTR tv81[ebp]
	movss	DWORD PTR _Distance$[ebp], xmm0

; 838  : 	if(Distance<0.0f) return;

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _Distance$[ebp]
	jbe	SHORT $LN9@DX2D_AddPo
	jmp	$LN12@DX2D_AddPo
$LN9@DX2D_AddPo:

; 839  : 
; 840  : 	// check if layer initialized, if not, initialize it
; 841  : 	if(Layers[Layer].Start==-1)	Layers[Layer].Start=Total2DItems;

	mov	ecx, DWORD PTR _Layer$[ebx]
	imul	ecx, 12					; 0000000cH
	cmp	DWORD PTR ?Layers@CDXEngine@@0PAULayerItemType@@A[ecx], -1
	jne	SHORT $LN8@DX2D_AddPo
	mov	edx, DWORD PTR _Layer$[ebx]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	mov	DWORD PTR ?Layers@CDXEngine@@0PAULayerItemType@@A[edx], eax

; 842  : 	// If layer already initialized
; 843  : 	else {

	jmp	SHORT $LN7@DX2D_AddPo
$LN8@DX2D_AddPo:

; 844  : 		// get a pointer to last draw for the layer
; 845  : 		DWORD	Index=Layers[Layer].End;

	mov	ecx, DWORD PTR _Layer$[ebx]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR ?Layers@CDXEngine@@0PAULayerItemType@@A[ecx+4]
	mov	DWORD PTR _Index$4[ebp], edx

; 846  : 		// Link new Draw Item
; 847  : 		Draws2D[Index].Next=Total2DItems;

	mov	eax, DWORD PTR _Index$4[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	mov	DWORD PTR ?Draws2D@CDXEngine@@0PAUDrawItemType@@A[eax], ecx
$LN7@DX2D_AddPo:

; 848  : 	}
; 849  : 	// This is the last Draw for the Layer
; 850  : 	Layers[Layer].End=Total2DItems;

	mov	edx, DWORD PTR _Layer$[ebx]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	mov	DWORD PTR ?Layers@CDXEngine@@0PAULayerItemType@@A[edx+4], eax

; 851  : 	
; 852  : 	for(DWORD a=0; a<Vertices; a++){

	mov	DWORD PTR _a$5[ebp], 0
	jmp	SHORT $LN6@DX2D_AddPo
$LN5@DX2D_AddPo:
	mov	ecx, DWORD PTR _a$5[ebp]
	add	ecx, 1
	mov	DWORD PTR _a$5[ebp], ecx
$LN6@DX2D_AddPo:
	mov	edx, DWORD PTR _a$5[ebp]
	cmp	edx, DWORD PTR _Vertices$[ebx]
	jae	$LN4@DX2D_AddPo

; 853  : 		V.Xmm = _mm_loadu_ps((float*)&Poly[a].pos);

	mov	eax, DWORD PTR _a$5[ebp]
	imul	eax, 28					; 0000001cH
	add	eax, DWORD PTR _Poly$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _V$[ebp], xmm0

; 854  : 		// * BILLBOARD VERTICES * - go directly into Vertex Buffer
; 855  : 		if( Flags & POLY_BB)	DX2D_TransformBB(&XMMPos, &V, &Dyn2DVertexBuffer[VBSelected].VbPtr[VbIndex+a], 1);

	mov	ecx, DWORD PTR _Flags$[ebx]
	and	ecx, 1
	je	SHORT $LN3@DX2D_AddPo
	push	1
	mov	edx, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	edx, 4
	mov	eax, DWORD PTR _VbIndex$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _a$5[ebp]
	imul	ecx, 28					; 0000001cH
	add	ecx, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[edx+4]
	push	ecx
	lea	edx, DWORD PTR _V$[ebp]
	push	edx
	push	OFFSET ?XMMPos@@3TXMMVector@@A		; XMMPos
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DX2D_TransformBB@CDXEngine@@QAEXPATXMMVector@@0PAUD3DDYNVERTEX@@K@Z ; CDXEngine::DX2D_TransformBB
	jmp	SHORT $LN2@DX2D_AddPo
$LN3@DX2D_AddPo:

; 856  : 		// if not BillBoarded, add Distance here and put into Vertex Buffer
; 857  : 		else _mm_storeu_ps((float*)&Dyn2DVertexBuffer[VBSelected].VbPtr[VbIndex+a], _mm_add_ps(XMMPos.Xmm, V.Xmm));

	movaps	xmm0, XMMWORD PTR ?XMMPos@@3TXMMVector@@A
	addps	xmm0, XMMWORD PTR _V$[ebp]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	mov	eax, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	eax, 4
	mov	ecx, DWORD PTR _VbIndex$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _a$5[ebp]
	imul	edx, 28					; 0000001cH
	add	edx, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[eax+4]
	movups	XMMWORD PTR [edx], xmm0
$LN2@DX2D_AddPo:

; 858  : 		// copy the Rest of Vertex Data
; 859  : 		_mm_storeu_ps((float*)&Dyn2DVertexBuffer[VBSelected].VbPtr[VbIndex+a].dwColour, _mm_loadu_ps((float*)&Poly[a].dwColour));

	mov	eax, DWORD PTR _a$5[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _Poly$[ebx]
	movups	xmm0, XMMWORD PTR [ecx+eax+12]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	mov	edx, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	edx, 4
	mov	eax, DWORD PTR _VbIndex$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _a$5[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[edx+4]
	movups	XMMWORD PTR [edx+ecx+12], xmm0

; 860  : 
; 861  : 	}

	jmp	$LN5@DX2D_AddPo
$LN4@DX2D_AddPo:

; 862  : 
; 863  : 	// get the Draw under setting
; 864  : 	DrawItemType	&Draw=Draws2D[Total2DItems];

	mov	eax, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	imul	eax, 36					; 00000024H
	add	eax, OFFSET ?Draws2D@CDXEngine@@0PAUDrawItemType@@A ; CDXEngine::Draws2D
	mov	DWORD PTR _Draw$[ebp], eax

; 865  : 	// * setup the items to track & sort the Quad *
; 866  : 	// The Scaled Distance for sorting
; 867  : 	Draw.Dist256=F_I32(Distance*256.0f);

	movss	xmm0, DWORD PTR _Distance$[ebp]
	mulss	xmm0, DWORD PTR __real@43800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?F_I32@@YAKM@Z				; F_I32
	add	esp, 4
	mov	ecx, DWORD PTR _Draw$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 868  : 	// The Texture Handle
; 869  : 	Draw.TexHandle=TexHandle;

	mov	edx, DWORD PTR _Draw$[ebp]
	mov	eax, DWORD PTR _TexHandle$[ebx]
	mov	DWORD PTR [edx+24], eax

; 870  : 	// The vertex buffer assigned
; 871  : 	Draw.Vb=Dyn2DVertexBuffer[VBSelected].Vb;

	mov	ecx, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	ecx, 4
	mov	edx, DWORD PTR _Draw$[ebp]
	mov	eax, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[ecx]
	mov	DWORD PTR [edx+8], eax

; 872  : 	// Index of vertices in the Vertex Buffer
; 873  : 	Draw.Index=VbIndex;

	mov	ecx, DWORD PTR _Draw$[ebp]
	mov	edx, DWORD PTR _VbIndex$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+12], eax

; 874  : 	// vertices of the item, vertices for a Tri
; 875  : 	Draw.NrVertices=Vertices;

	mov	ecx, DWORD PTR _Draw$[ebp]
	mov	edx, DWORD PTR _Vertices$[ebx]
	mov	DWORD PTR [ecx+20], edx

; 876  : 	// Final Item in the list
; 877  : 	Draw.Next=0xffffffff;

	mov	eax, DWORD PTR _Draw$[ebp]
	mov	DWORD PTR [eax], -1

; 878  : 	// Assign Flags from the draw
; 879  : 	Draw.Flags=Flags;

	mov	ecx, DWORD PTR _Draw$[ebp]
	mov	edx, DWORD PTR _Flags$[ebx]
	mov	DWORD PTR [ecx+28], edx

; 880  : 	// Assign height
; 881  : 	Draw.Height=Pos->z;

	mov	eax, DWORD PTR _Draw$[ebp]
	mov	ecx, DWORD PTR _Pos$[ebx]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+32], edx

; 882  : 	// if local coords, update with camera Z
; 883  : 	if(Flags & CAMERA_VERTICES) Draw.Height += CameraPos.z;

	mov	eax, DWORD PTR _Flags$[ebx]
	and	eax, 8
	je	SHORT $LN1@DX2D_AddPo
	mov	ecx, DWORD PTR _Draw$[ebp]
	movss	xmm0, DWORD PTR [ecx+32]
	addss	xmm0, DWORD PTR ?CameraPos@CDXEngine@@0U_D3DVECTOR@@A+8
	mov	edx, DWORD PTR _Draw$[ebp]
	movss	DWORD PTR [edx+32], xmm0
$LN1@DX2D_AddPo:

; 884  : 	
; 885  : 	// Update the Sort Buffer
; 886  : 	SortBuffer[Total2DItems].Index=Total2DItems;

	mov	eax, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	mov	ecx, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	mov	DWORD PTR ?SortBuffer@CDXEngine@@0PAUSortItemType@@A[eax*8], ecx

; 887  : 	// new Quad
; 888  : 	Total2DItems++;

	mov	edx, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	add	edx, 1
	mov	DWORD PTR ?Total2DItems@CDXEngine@@0KA, edx ; CDXEngine::Total2DItems

; 889  : 	// new index in VB, if full get next VBuffer
; 890  : 	VbIndex+=Vertices;

	mov	eax, DWORD PTR _VbIndex$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _Vertices$[ebx]
	mov	edx, DWORD PTR _VbIndex$[ebp]
	mov	DWORD PTR [edx], ecx
$LN12@DX2D_AddPo:

; 891  : #ifdef	DEBUG_2D_ENGINE	
; 892  : 	Debug_Vertices2D += Vertices;
; 893  : #endif
; 894  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	28					; 0000001cH
?DX2D_AddPoly@CDXEngine@@QAEXKKPAUD3DXVECTOR3@@PAUD3DDYNVERTEX@@MKK@Z ENDP ; CDXEngine::DX2D_AddPoly
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
$T1 = -128						; size = 16
$T2 = -112						; size = 16
$T3 = -96						; size = 16
tv172 = -68						; size = 4
tv176 = -64						; size = 4
_Index$4 = -60						; size = 4
_src$ = -56						; size = 4
_ptr$ = -52						; size = 4
_this$ = -48						; size = 4
_Distance$ = -44					; size = 4
_VbIndex$ = -40						; size = 4
_Draw$5 = -36						; size = 4
_V$ = -32						; size = 16
__$ArrayPad$ = -4					; size = 4
_Layer$ = 8						; size = 4
_Flags$ = 12						; size = 4
_Pos$ = 16						; size = 4
_Segment$ = 20						; size = 4
_Radius$ = 24						; size = 4
_TexHandle$ = 28					; size = 4
?DX2D_AddSingle@CDXEngine@@QAEXKKPAUD3DXVECTOR3@@PAUD3DDYNVERTEX@@MK@Z PROC ; CDXEngine::DX2D_AddSingle
; _this$ = ecx

; 729  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 730  : 	_MM_ALIGN16	XMMVector	V;
; 731  : 
; 732  : 	// not going to overflow stuff
; 733  : 	if(Total2DItems>=MAX_2D_ITEMS) return;

	cmp	DWORD PTR ?Total2DItems@CDXEngine@@0KA, 65536 ; CDXEngine::Total2DItems, 00010000H
	jb	SHORT $LN16@DX2D_AddSi
	jmp	$LN17@DX2D_AddSi
$LN16@DX2D_AddSi:

; 734  : 
; 735  : 	// Get the Index for the selected VB
; 736  : 	DWORD	&VbIndex=Dyn2DVertexBuffer[VBSelected].LastIndex;

	mov	eax, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	eax, 4
	add	eax, OFFSET ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A+8
	mov	DWORD PTR _VbIndex$[ebp], eax

; 737  : 	// if no more space, exit
; 738  : 	if(!CheckBufferSpace(VbIndex, 1)) return;

	push	1
	mov	ecx, DWORD PTR _VbIndex$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckBufferSpace@CDXEngine@@AAE_NKK@Z	; CDXEngine::CheckBufferSpace
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN15@DX2D_AddSi
	jmp	$LN17@DX2D_AddSi
$LN15@DX2D_AddSi:

; 739  : 
; 740  : 	// Get Distance from a previous test if POLY DECLARED VISIBLE, or calcualte if from scratch
; 741  : 	float	Distance;
; 742  : 	if( Flags & POLY_VISIBLE) Distance=TestDistance;

	mov	ecx, DWORD PTR _Flags$[ebx]
	and	ecx, 4
	je	SHORT $LN14@DX2D_AddSi
	movss	xmm0, DWORD PTR ?TestDistance@CDXEngine@@0MA
	movss	DWORD PTR _Distance$[ebp], xmm0

; 743  : 	else {

	jmp	SHORT $LN12@DX2D_AddSi
$LN14@DX2D_AddSi:

; 744  : 		Distance=DX2D_GetDistance(Pos, Radius, Flags);

	mov	edx, DWORD PTR _Flags$[ebx]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _Radius$[ebx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _Pos$[ebx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DX2D_GetDistance@CDXEngine@@QAEMPAUD3DXVECTOR3@@MK@Z ; CDXEngine::DX2D_GetDistance
	fstp	DWORD PTR _Distance$[ebp]

; 745  : 		if(Distance<0.0f) return;

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _Distance$[ebp]
	jbe	SHORT $LN12@DX2D_AddSi
	jmp	$LN17@DX2D_AddSi
$LN12@DX2D_AddSi:

; 746  : 	}
; 747  : 	// if Camera vertices, the passed position is the real one
; 748  : 	if(Flags & CAMERA_VERTICES) *(D3DXVECTOR3*)&XMMPos.d3d = *Pos;

	mov	ecx, DWORD PTR _Flags$[ebx]
	and	ecx, 8
	je	SHORT $LN11@DX2D_AddSi
	mov	edx, DWORD PTR _Pos$[ebx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR ?XMMPos@@3TXMMVector@@A, eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR ?XMMPos@@3TXMMVector@@A+4, ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR ?XMMPos@@3TXMMVector@@A+8, edx
$LN11@DX2D_AddSi:

; 749  : 	if(Flags & CALC_DISTANCE) Distance=DX2D_GetDistance(Pos, Flags);

	mov	eax, DWORD PTR _Flags$[ebx]
	and	eax, 16					; 00000010H
	je	SHORT $LN10@DX2D_AddSi
	mov	ecx, DWORD PTR _Flags$[ebx]
	push	ecx
	mov	edx, DWORD PTR _Pos$[ebx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DX2D_GetDistance@CDXEngine@@QAEMPAUD3DXVECTOR3@@K@Z ; CDXEngine::DX2D_GetDistance
	fstp	DWORD PTR _Distance$[ebp]
$LN10@DX2D_AddSi:

; 750  : 	
; 751  : 	// check if layer initialized, if not, initialize it
; 752  : 	if(Layers[Layer].Start==-1)	Layers[Layer].Start=Total2DItems;

	mov	eax, DWORD PTR _Layer$[ebx]
	imul	eax, 12					; 0000000cH
	cmp	DWORD PTR ?Layers@CDXEngine@@0PAULayerItemType@@A[eax], -1
	jne	SHORT $LN9@DX2D_AddSi
	mov	ecx, DWORD PTR _Layer$[ebx]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	mov	DWORD PTR ?Layers@CDXEngine@@0PAULayerItemType@@A[ecx], edx

; 753  : 	// If layer already initialized
; 754  : 	else {

	jmp	SHORT $LN8@DX2D_AddSi
$LN9@DX2D_AddSi:

; 755  : 		// get a pointer to last draw for the layer
; 756  : 		DWORD	Index=Layers[Layer].End;

	mov	eax, DWORD PTR _Layer$[ebx]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR ?Layers@CDXEngine@@0PAULayerItemType@@A[eax+4]
	mov	DWORD PTR _Index$4[ebp], ecx

; 757  : 		// Link new Draw Item
; 758  : 		Draws2D[Index].Next=Total2DItems;

	mov	edx, DWORD PTR _Index$4[ebp]
	imul	edx, 36					; 00000024H
	mov	eax, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	mov	DWORD PTR ?Draws2D@CDXEngine@@0PAUDrawItemType@@A[edx], eax
$LN8@DX2D_AddSi:

; 759  : 	}
; 760  : 	// This is the last Draw for the Layer
; 761  : 	Layers[Layer].End=Total2DItems;

	mov	ecx, DWORD PTR _Layer$[ebx]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	mov	DWORD PTR ?Layers@CDXEngine@@0PAULayerItemType@@A[ecx+4], edx

; 762  : 	
; 763  : 	V.Xmm = _mm_loadu_ps((float*)&Segment->pos);

	mov	eax, DWORD PTR _Segment$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _V$[ebp], xmm0

; 764  : 
; 765  : 	// if passed coords in already camera vertex, just copy
; 766  : 	if( Flags & CAMERA_VERTICES ) {

	mov	ecx, DWORD PTR _Flags$[ebx]
	and	ecx, 8
	je	SHORT $LN7@DX2D_AddSi

; 767  : 		_mm_storeu_ps((float*)&Dyn2DVertexBuffer[VBSelected].VbPtr[VbIndex+0], V.Xmm);

	movaps	xmm0, XMMWORD PTR _V$[ebp]
	mov	edx, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	edx, 4
	mov	eax, DWORD PTR _VbIndex$[ebp]
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 28					; 0000001cH
	add	ecx, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[edx+4]
	movups	XMMWORD PTR [ecx], xmm0

; 768  : 	
; 769  : 	} else {

	jmp	SHORT $LN6@DX2D_AddSi
$LN7@DX2D_AddSi:

; 770  : 		_mm_storeu_ps((float*)&Dyn2DVertexBuffer[VBSelected].VbPtr[VbIndex+0], _mm_add_ps(XMMPos.Xmm, V.Xmm));

	movaps	xmm0, XMMWORD PTR ?XMMPos@@3TXMMVector@@A
	addps	xmm0, XMMWORD PTR _V$[ebp]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	mov	edx, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	edx, 4
	mov	eax, DWORD PTR _VbIndex$[ebp]
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 28					; 0000001cH
	add	ecx, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[edx+4]
	movups	XMMWORD PTR [ecx], xmm0
$LN6@DX2D_AddSi:

; 771  : 	}
; 772  : 
; 773  : 	D3DDYNVERTEX	*ptr=(D3DDYNVERTEX*)&Dyn2DVertexBuffer[VBSelected].VbPtr[VbIndex].dwColour;

	mov	edx, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	edx, 4
	mov	eax, DWORD PTR _VbIndex$[ebp]
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[edx+4]
	lea	eax, DWORD PTR [edx+ecx+12]
	mov	DWORD PTR _ptr$[ebp], eax

; 774  : 	D3DDYNVERTEX	*src=(D3DDYNVERTEX*)&Segment->dwColour;

	mov	ecx, DWORD PTR _Segment$[ebx]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _src$[ebp], ecx

; 775  : 
; 776  : 	// copy the Rest of Vertex Data
; 777  : 	_mm_storeu_ps((float*)ptr++, _mm_loadu_ps((float*)src++));

	mov	edx, DWORD PTR _src$[ebp]
	mov	DWORD PTR tv172[ebp], edx
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 28					; 0000001cH
	mov	DWORD PTR _src$[ebp], eax
	mov	ecx, DWORD PTR tv172[ebp]
	movups	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR tv176[ebp], edx
	mov	eax, DWORD PTR _ptr$[ebp]
	add	eax, 28					; 0000001cH
	mov	DWORD PTR _ptr$[ebp], eax
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	mov	ecx, DWORD PTR tv176[ebp]
	movups	XMMWORD PTR [ecx], xmm0

; 778  : 
; 779  : 	// if this is a tape entry
; 780  : 	if(Flags & TAPE_ENTRY){

	mov	edx, DWORD PTR _Flags$[ebx]
	and	edx, 32					; 00000020H
	je	SHORT $LN5@DX2D_AddSi

; 781  : 		// Just store vertices and update tape pointers
; 782  : 		Dyn2DVertexBuffer[VBSelected].LastTapeIndex = VbIndex;

	mov	eax, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	eax, 4
	mov	ecx, DWORD PTR _VbIndex$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[eax+12], edx

; 783  : 		VbIndex+=1;

	mov	eax, DWORD PTR _VbIndex$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _VbIndex$[ebp]
	mov	DWORD PTR [edx], ecx

; 784  : 	} else {

	jmp	$LN4@DX2D_AddSi
$LN5@DX2D_AddSi:

; 785  : 		// get the Draw under setting
; 786  : 		DrawItemType	&Draw=Draws2D[Total2DItems];

	mov	eax, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	imul	eax, 36					; 00000024H
	add	eax, OFFSET ?Draws2D@CDXEngine@@0PAUDrawItemType@@A ; CDXEngine::Draws2D
	mov	DWORD PTR _Draw$5[ebp], eax

; 787  : 		// * setup the items to track & sort the Quad *
; 788  : 		// The Scaled Distance for sorting
; 789  : 		Draw.Dist256=F_I32(Distance*256.0f);

	movss	xmm0, DWORD PTR _Distance$[ebp]
	mulss	xmm0, DWORD PTR __real@43800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?F_I32@@YAKM@Z				; F_I32
	add	esp, 4
	mov	ecx, DWORD PTR _Draw$5[ebp]
	mov	DWORD PTR [ecx+4], eax

; 790  : 		// The Texture Handle
; 791  : 		Draw.TexHandle=TexHandle;

	mov	edx, DWORD PTR _Draw$5[ebp]
	mov	eax, DWORD PTR _TexHandle$[ebx]
	mov	DWORD PTR [edx+24], eax

; 792  : 		// The vertex buffer assigned
; 793  : 		Draw.Vb=Dyn2DVertexBuffer[VBSelected].Vb;

	mov	ecx, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	ecx, 4
	mov	edx, DWORD PTR _Draw$5[ebp]
	mov	eax, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[ecx]
	mov	DWORD PTR [edx+8], eax

; 794  : 		// Index of vertices in the Vertex Buffer
; 795  : 		Draw.Index=VbIndex, Draw.Index2 = Dyn2DVertexBuffer[VBSelected].LastTapeIndex;

	mov	ecx, DWORD PTR _Draw$5[ebp]
	mov	edx, DWORD PTR _VbIndex$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	ecx, 4
	mov	edx, DWORD PTR _Draw$5[ebp]
	mov	eax, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[ecx+12]
	mov	DWORD PTR [edx+16], eax

; 796  : 		// vertices of the item, vertices for a quad are 6 ( 2 triangles )
; 797  : 		if(Flags & POLY_LINE) Draw.NrVertices=2;

	mov	ecx, DWORD PTR _Flags$[ebx]
	and	ecx, 8388608				; 00800000H
	je	SHORT $LN3@DX2D_AddSi
	mov	edx, DWORD PTR _Draw$5[ebp]
	mov	DWORD PTR [edx+20], 2
	jmp	SHORT $LN2@DX2D_AddSi
$LN3@DX2D_AddSi:

; 798  : 		else Draw.NrVertices=1;

	mov	eax, DWORD PTR _Draw$5[ebp]
	mov	DWORD PTR [eax+20], 1
$LN2@DX2D_AddSi:

; 799  : 		// Final Item in the list
; 800  : 		Draw.Next=0xffffffff;

	mov	ecx, DWORD PTR _Draw$5[ebp]
	mov	DWORD PTR [ecx], -1

; 801  : 		// Assign Flags from the draw
; 802  : 		Draw.Flags=Flags;

	mov	edx, DWORD PTR _Draw$5[ebp]
	mov	eax, DWORD PTR _Flags$[ebx]
	mov	DWORD PTR [edx+28], eax

; 803  : 		// Assign height
; 804  : 		Draw.Height=Pos->z;

	mov	ecx, DWORD PTR _Draw$5[ebp]
	mov	edx, DWORD PTR _Pos$[ebx]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+32], eax

; 805  : 		// if local coords, update with camera Z
; 806  : 		if(Flags & CAMERA_VERTICES) Draw.Height += CameraPos.z;

	mov	ecx, DWORD PTR _Flags$[ebx]
	and	ecx, 8
	je	SHORT $LN1@DX2D_AddSi
	mov	edx, DWORD PTR _Draw$5[ebp]
	movss	xmm0, DWORD PTR [edx+32]
	addss	xmm0, DWORD PTR ?CameraPos@CDXEngine@@0U_D3DVECTOR@@A+8
	mov	eax, DWORD PTR _Draw$5[ebp]
	movss	DWORD PTR [eax+32], xmm0
$LN1@DX2D_AddSi:

; 807  : 		
; 808  : 		// Update the Sort Buffer
; 809  : 		SortBuffer[Total2DItems].Index=Total2DItems;

	mov	ecx, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	mov	edx, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	mov	DWORD PTR ?SortBuffer@CDXEngine@@0PAUSortItemType@@A[ecx*8], edx

; 810  : 		// new Quad
; 811  : 		Total2DItems++;

	mov	eax, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	add	eax, 1
	mov	DWORD PTR ?Total2DItems@CDXEngine@@0KA, eax ; CDXEngine::Total2DItems

; 812  : 		Dyn2DVertexBuffer[VBSelected].LastTapeIndex = VbIndex;

	mov	ecx, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	ecx, 4
	mov	edx, DWORD PTR _VbIndex$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[ecx+12], eax

; 813  : 		// new index in VB, if full get next VBuffer
; 814  : 		VbIndex+=1;

	mov	ecx, DWORD PTR _VbIndex$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _VbIndex$[ebp]
	mov	DWORD PTR [eax], edx
$LN4@DX2D_AddSi:
$LN17@DX2D_AddSi:

; 815  : 	}
; 816  : #ifdef	DEBUG_2D_ENGINE	
; 817  : 	Debug_Vertices2D += 1;
; 818  : #endif
; 819  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	24					; 00000018H
?DX2D_AddSingle@CDXEngine@@QAEXKKPAUD3DXVECTOR3@@PAUD3DDYNVERTEX@@MK@Z ENDP ; CDXEngine::DX2D_AddSingle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
$T1 = -192						; size = 16
$T2 = -176						; size = 16
$T3 = -160						; size = 16
$T4 = -144						; size = 16
$T5 = -128						; size = 16
$T6 = -112						; size = 16
_Index$7 = -92						; size = 4
tv218 = -88						; size = 4
tv230 = -84						; size = 4
tv226 = -80						; size = 4
tv222 = -76						; size = 4
_this$ = -72						; size = 4
_Distance$ = -68					; size = 4
_src$ = -64						; size = 4
_ptr$ = -60						; size = 4
_Draw$8 = -56						; size = 4
_VbIndex$ = -52						; size = 4
_V$ = -48						; size = 32
__$ArrayPad$ = -4					; size = 4
_Layer$ = 8						; size = 4
_Flags$ = 12						; size = 4
_Pos$ = 16						; size = 4
_Segment$ = 20						; size = 4
_Radius$ = 24						; size = 4
_TexHandle$ = 28					; size = 4
?DX2D_AddBi@CDXEngine@@QAEXKKPAUD3DXVECTOR3@@PAUD3DDYNVERTEX@@MK@Z PROC ; CDXEngine::DX2D_AddBi
; _this$ = ecx

; 626  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 627  : 	_MM_ALIGN16	XMMVector	V[2];
; 628  : 
; 629  : 	// not going to overflow stuff
; 630  : 	if(Total2DItems>=MAX_2D_ITEMS) return;

	cmp	DWORD PTR ?Total2DItems@CDXEngine@@0KA, 65536 ; CDXEngine::Total2DItems, 00010000H
	jb	SHORT $LN16@DX2D_AddBi
	jmp	$LN17@DX2D_AddBi
$LN16@DX2D_AddBi:

; 631  : 
; 632  : 	// Get the Index for the selected VB
; 633  : 	DWORD	&VbIndex=Dyn2DVertexBuffer[VBSelected].LastIndex;

	mov	eax, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	eax, 4
	add	eax, OFFSET ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A+8
	mov	DWORD PTR _VbIndex$[ebp], eax

; 634  : 	// if no more space, exit
; 635  : 	if(!CheckBufferSpace(VbIndex, 2)) return;

	push	2
	mov	ecx, DWORD PTR _VbIndex$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckBufferSpace@CDXEngine@@AAE_NKK@Z	; CDXEngine::CheckBufferSpace
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN15@DX2D_AddBi
	jmp	$LN17@DX2D_AddBi
$LN15@DX2D_AddBi:

; 636  : 
; 637  : 	// Get Distance from a previous test if POLY DECLARED VISIBLE, or calcualte if from scratch
; 638  : 	float	Distance;
; 639  : 	if( Flags & POLY_VISIBLE) Distance=TestDistance;

	mov	ecx, DWORD PTR _Flags$[ebx]
	and	ecx, 4
	je	SHORT $LN14@DX2D_AddBi
	movss	xmm0, DWORD PTR ?TestDistance@CDXEngine@@0MA
	movss	DWORD PTR _Distance$[ebp], xmm0

; 640  : 	else {

	jmp	SHORT $LN12@DX2D_AddBi
$LN14@DX2D_AddBi:

; 641  : 		Distance=DX2D_GetDistance(Pos, Radius, Flags);

	mov	edx, DWORD PTR _Flags$[ebx]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _Radius$[ebx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _Pos$[ebx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DX2D_GetDistance@CDXEngine@@QAEMPAUD3DXVECTOR3@@MK@Z ; CDXEngine::DX2D_GetDistance
	fstp	DWORD PTR _Distance$[ebp]

; 642  : 		if(Distance<0.0f) return;

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _Distance$[ebp]
	jbe	SHORT $LN12@DX2D_AddBi
	jmp	$LN17@DX2D_AddBi
$LN12@DX2D_AddBi:

; 643  : 	}
; 644  : 	// if Camera vertices, the passed position is the real one
; 645  : 	if(Flags & CAMERA_VERTICES) *(D3DXVECTOR3*)&XMMPos.d3d = *Pos;

	mov	ecx, DWORD PTR _Flags$[ebx]
	and	ecx, 8
	je	SHORT $LN11@DX2D_AddBi
	mov	edx, DWORD PTR _Pos$[ebx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR ?XMMPos@@3TXMMVector@@A, eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR ?XMMPos@@3TXMMVector@@A+4, ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR ?XMMPos@@3TXMMVector@@A+8, edx
$LN11@DX2D_AddBi:

; 646  : 	if(Flags & CALC_DISTANCE) Distance=DX2D_GetDistance(Pos, Flags);

	mov	eax, DWORD PTR _Flags$[ebx]
	and	eax, 16					; 00000010H
	je	SHORT $LN10@DX2D_AddBi
	mov	ecx, DWORD PTR _Flags$[ebx]
	push	ecx
	mov	edx, DWORD PTR _Pos$[ebx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DX2D_GetDistance@CDXEngine@@QAEMPAUD3DXVECTOR3@@K@Z ; CDXEngine::DX2D_GetDistance
	fstp	DWORD PTR _Distance$[ebp]
$LN10@DX2D_AddBi:

; 647  : 	
; 648  : 	// check if layer initialized, if not, initialize it
; 649  : 	if(Layers[Layer].Start==-1)	Layers[Layer].Start=Total2DItems;

	mov	eax, DWORD PTR _Layer$[ebx]
	imul	eax, 12					; 0000000cH
	cmp	DWORD PTR ?Layers@CDXEngine@@0PAULayerItemType@@A[eax], -1
	jne	SHORT $LN9@DX2D_AddBi
	mov	ecx, DWORD PTR _Layer$[ebx]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	mov	DWORD PTR ?Layers@CDXEngine@@0PAULayerItemType@@A[ecx], edx

; 650  : 	// If layer already initialized
; 651  : 	else {

	jmp	SHORT $LN8@DX2D_AddBi
$LN9@DX2D_AddBi:

; 652  : 		// get a pointer to last draw for the layer
; 653  : 		DWORD	Index=Layers[Layer].End;

	mov	eax, DWORD PTR _Layer$[ebx]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR ?Layers@CDXEngine@@0PAULayerItemType@@A[eax+4]
	mov	DWORD PTR _Index$7[ebp], ecx

; 654  : 		// Link new Draw Item
; 655  : 		Draws2D[Index].Next=Total2DItems;

	mov	edx, DWORD PTR _Index$7[ebp]
	imul	edx, 36					; 00000024H
	mov	eax, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	mov	DWORD PTR ?Draws2D@CDXEngine@@0PAUDrawItemType@@A[edx], eax
$LN8@DX2D_AddBi:

; 656  : 	}
; 657  : 	// This is the last Draw for the Layer
; 658  : 	Layers[Layer].End=Total2DItems;

	mov	ecx, DWORD PTR _Layer$[ebx]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	mov	DWORD PTR ?Layers@CDXEngine@@0PAULayerItemType@@A[ecx+4], edx

; 659  : 	
; 660  : 	V[0].Xmm = _mm_loadu_ps((float*)&Segment[0].pos);

	mov	eax, 28					; 0000001cH
	imul	eax, 0
	add	eax, DWORD PTR _Segment$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR _V$[ebp+ecx], xmm0

; 661  : 	V[1].Xmm = _mm_loadu_ps((float*)&Segment[1].pos);

	mov	edx, 28					; 0000001cH
	shl	edx, 0
	add	edx, DWORD PTR _Segment$[ebx]
	movups	xmm0, XMMWORD PTR [edx]
	movaps	XMMWORD PTR $T6[ebp], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	movups	xmm0, XMMWORD PTR $T6[ebp]
	movups	XMMWORD PTR _V$[ebp+eax], xmm0

; 662  : 
; 663  : 	// if passed coords in already camera vertex, just copy
; 664  : 	if( Flags & CAMERA_VERTICES ) {

	mov	ecx, DWORD PTR _Flags$[ebx]
	and	ecx, 8
	je	SHORT $LN7@DX2D_AddBi

; 665  : 		_mm_storeu_ps((float*)&Dyn2DVertexBuffer[VBSelected].VbPtr[VbIndex+0], V[0].Xmm);

	mov	edx, 16					; 00000010H
	imul	edx, 0
	movups	xmm0, XMMWORD PTR _V$[ebp+edx]
	mov	eax, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	eax, 4
	mov	ecx, DWORD PTR _VbIndex$[ebp]
	mov	edx, DWORD PTR [ecx]
	imul	edx, 28					; 0000001cH
	add	edx, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[eax+4]
	movups	XMMWORD PTR [edx], xmm0

; 666  : 		_mm_storeu_ps((float*)&Dyn2DVertexBuffer[VBSelected].VbPtr[VbIndex+1], V[1].Xmm);

	mov	eax, 16					; 00000010H
	shl	eax, 0
	movups	xmm0, XMMWORD PTR _V$[ebp+eax]
	mov	ecx, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	ecx, 4
	mov	edx, DWORD PTR _VbIndex$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	imul	eax, 28					; 0000001cH
	add	eax, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[ecx+4]
	movups	XMMWORD PTR [eax], xmm0

; 667  : 	
; 668  : 	} else {

	jmp	SHORT $LN6@DX2D_AddBi
$LN7@DX2D_AddBi:

; 669  : 		_mm_storeu_ps((float*)&Dyn2DVertexBuffer[VBSelected].VbPtr[VbIndex+0], _mm_add_ps(XMMPos.Xmm, V[0].Xmm));

	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	movaps	xmm0, XMMWORD PTR ?XMMPos@@3TXMMVector@@A
	addps	xmm0, XMMWORD PTR _V$[ebp+ecx]
	movaps	XMMWORD PTR $T4[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T4[ebp]
	mov	edx, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	edx, 4
	mov	eax, DWORD PTR _VbIndex$[ebp]
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 28					; 0000001cH
	add	ecx, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[edx+4]
	movups	XMMWORD PTR [ecx], xmm0

; 670  : 		_mm_storeu_ps((float*)&Dyn2DVertexBuffer[VBSelected].VbPtr[VbIndex+1], _mm_add_ps(XMMPos.Xmm, V[1].Xmm));

	mov	edx, 16					; 00000010H
	shl	edx, 0
	movaps	xmm0, XMMWORD PTR ?XMMPos@@3TXMMVector@@A
	addps	xmm0, XMMWORD PTR _V$[ebp+edx]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	mov	eax, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	eax, 4
	mov	ecx, DWORD PTR _VbIndex$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	imul	edx, 28					; 0000001cH
	add	edx, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[eax+4]
	movups	XMMWORD PTR [edx], xmm0
$LN6@DX2D_AddBi:

; 671  : 	}
; 672  : 
; 673  : 	D3DDYNVERTEX	*ptr=(D3DDYNVERTEX*)&Dyn2DVertexBuffer[VBSelected].VbPtr[VbIndex].dwColour;

	mov	eax, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	eax, 4
	mov	ecx, DWORD PTR _VbIndex$[ebp]
	mov	edx, DWORD PTR [ecx]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[eax+4]
	lea	ecx, DWORD PTR [eax+edx+12]
	mov	DWORD PTR _ptr$[ebp], ecx

; 674  : 	D3DDYNVERTEX	*src=(D3DDYNVERTEX*)&Segment[0].dwColour;

	mov	edx, 28					; 0000001cH
	imul	edx, 0
	mov	eax, DWORD PTR _Segment$[ebx]
	lea	ecx, DWORD PTR [eax+edx+12]
	mov	DWORD PTR _src$[ebp], ecx

; 675  : 
; 676  : 	// copy the Rest of Vertex Data
; 677  : 	_mm_storeu_ps((float*)ptr++, _mm_loadu_ps((float*)src++));

	mov	edx, DWORD PTR _src$[ebp]
	mov	DWORD PTR tv218[ebp], edx
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 28					; 0000001cH
	mov	DWORD PTR _src$[ebp], eax
	mov	ecx, DWORD PTR tv218[ebp]
	movups	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR $T5[ebp], xmm0
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR tv222[ebp], edx
	mov	eax, DWORD PTR _ptr$[ebp]
	add	eax, 28					; 0000001cH
	mov	DWORD PTR _ptr$[ebp], eax
	movaps	xmm0, XMMWORD PTR $T5[ebp]
	mov	ecx, DWORD PTR tv222[ebp]
	movups	XMMWORD PTR [ecx], xmm0

; 678  : 	_mm_storeu_ps((float*)ptr++, _mm_loadu_ps((float*)src++));

	mov	edx, DWORD PTR _src$[ebp]
	mov	DWORD PTR tv226[ebp], edx
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 28					; 0000001cH
	mov	DWORD PTR _src$[ebp], eax
	mov	ecx, DWORD PTR tv226[ebp]
	movups	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR $T3[ebp], xmm0
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR tv230[ebp], edx
	mov	eax, DWORD PTR _ptr$[ebp]
	add	eax, 28					; 0000001cH
	mov	DWORD PTR _ptr$[ebp], eax
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	mov	ecx, DWORD PTR tv230[ebp]
	movups	XMMWORD PTR [ecx], xmm0

; 679  : 
; 680  : 	// if this is a tape entry
; 681  : 	if(Flags & TAPE_ENTRY){

	mov	edx, DWORD PTR _Flags$[ebx]
	and	edx, 32					; 00000020H
	je	SHORT $LN5@DX2D_AddBi

; 682  : 		// Just store vertices and update tape pointers
; 683  : 		Dyn2DVertexBuffer[VBSelected].LastTapeIndex = VbIndex;

	mov	eax, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	eax, 4
	mov	ecx, DWORD PTR _VbIndex$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[eax+12], edx

; 684  : 		VbIndex+=2;

	mov	eax, DWORD PTR _VbIndex$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _VbIndex$[ebp]
	mov	DWORD PTR [edx], ecx

; 685  : 	} else {

	jmp	$LN4@DX2D_AddBi
$LN5@DX2D_AddBi:

; 686  : 		// get the Draw under setting
; 687  : 		DrawItemType	&Draw=Draws2D[Total2DItems];

	mov	eax, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	imul	eax, 36					; 00000024H
	add	eax, OFFSET ?Draws2D@CDXEngine@@0PAUDrawItemType@@A ; CDXEngine::Draws2D
	mov	DWORD PTR _Draw$8[ebp], eax

; 688  : 		// * setup the items to track & sort the Quad *
; 689  : 		// The Scaled Distance for sorting
; 690  : 		Draw.Dist256=F_I32(Distance*256.0f);

	movss	xmm0, DWORD PTR _Distance$[ebp]
	mulss	xmm0, DWORD PTR __real@43800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?F_I32@@YAKM@Z				; F_I32
	add	esp, 4
	mov	ecx, DWORD PTR _Draw$8[ebp]
	mov	DWORD PTR [ecx+4], eax

; 691  : 		// The Texture Handle
; 692  : 		Draw.TexHandle=TexHandle;

	mov	edx, DWORD PTR _Draw$8[ebp]
	mov	eax, DWORD PTR _TexHandle$[ebx]
	mov	DWORD PTR [edx+24], eax

; 693  : 		// The vertex buffer assigned
; 694  : 		Draw.Vb=Dyn2DVertexBuffer[VBSelected].Vb;

	mov	ecx, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	ecx, 4
	mov	edx, DWORD PTR _Draw$8[ebp]
	mov	eax, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[ecx]
	mov	DWORD PTR [edx+8], eax

; 695  : 		// Index of vertices in the Vertex Buffer
; 696  : 		Draw.Index=VbIndex, Draw.Index2 = Dyn2DVertexBuffer[VBSelected].LastTapeIndex;

	mov	ecx, DWORD PTR _Draw$8[ebp]
	mov	edx, DWORD PTR _VbIndex$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	ecx, 4
	mov	edx, DWORD PTR _Draw$8[ebp]
	mov	eax, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[ecx+12]
	mov	DWORD PTR [edx+16], eax

; 697  : 		// vertices of the item, vertices for a quad are 6 ( 2 triangles )
; 698  : 		if(Flags & POLY_LINE) Draw.NrVertices=2;

	mov	ecx, DWORD PTR _Flags$[ebx]
	and	ecx, 8388608				; 00800000H
	je	SHORT $LN3@DX2D_AddBi
	mov	edx, DWORD PTR _Draw$8[ebp]
	mov	DWORD PTR [edx+20], 2
$LN3@DX2D_AddBi:

; 699  : 		if(Flags & POLY_TAPE) Draw.NrVertices=6;

	mov	eax, DWORD PTR _Flags$[ebx]
	and	eax, 4194304				; 00400000H
	je	SHORT $LN2@DX2D_AddBi
	mov	ecx, DWORD PTR _Draw$8[ebp]
	mov	DWORD PTR [ecx+20], 6
$LN2@DX2D_AddBi:

; 700  : 		// Final Item in the list
; 701  : 		Draw.Next=0xffffffff;

	mov	edx, DWORD PTR _Draw$8[ebp]
	mov	DWORD PTR [edx], -1

; 702  : 		// Assign Flags from the draw
; 703  : 		Draw.Flags=Flags;

	mov	eax, DWORD PTR _Draw$8[ebp]
	mov	ecx, DWORD PTR _Flags$[ebx]
	mov	DWORD PTR [eax+28], ecx

; 704  : 		// Assign height
; 705  : 		Draw.Height=Pos->z;

	mov	edx, DWORD PTR _Draw$8[ebp]
	mov	eax, DWORD PTR _Pos$[ebx]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+32], ecx

; 706  : 		// if local coords, update with camera Z
; 707  : 		if(Flags & CAMERA_VERTICES) Draw.Height += CameraPos.z;

	mov	edx, DWORD PTR _Flags$[ebx]
	and	edx, 8
	je	SHORT $LN1@DX2D_AddBi
	mov	eax, DWORD PTR _Draw$8[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	addss	xmm0, DWORD PTR ?CameraPos@CDXEngine@@0U_D3DVECTOR@@A+8
	mov	ecx, DWORD PTR _Draw$8[ebp]
	movss	DWORD PTR [ecx+32], xmm0
$LN1@DX2D_AddBi:

; 708  : 		
; 709  : 		// Update the Sort Buffer
; 710  : 		SortBuffer[Total2DItems].Index=Total2DItems;

	mov	edx, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	mov	eax, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	mov	DWORD PTR ?SortBuffer@CDXEngine@@0PAUSortItemType@@A[edx*8], eax

; 711  : 		// new Quad
; 712  : 		Total2DItems++;

	mov	ecx, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	add	ecx, 1
	mov	DWORD PTR ?Total2DItems@CDXEngine@@0KA, ecx ; CDXEngine::Total2DItems

; 713  : 		Dyn2DVertexBuffer[VBSelected].LastTapeIndex = VbIndex;

	mov	edx, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	edx, 4
	mov	eax, DWORD PTR _VbIndex$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[edx+12], ecx

; 714  : 		// new index in VB, if full get next VBuffer
; 715  : 		VbIndex+=2;

	mov	edx, DWORD PTR _VbIndex$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 2
	mov	ecx, DWORD PTR _VbIndex$[ebp]
	mov	DWORD PTR [ecx], eax
$LN4@DX2D_AddBi:
$LN17@DX2D_AddBi:

; 716  : 	}
; 717  : #ifdef	DEBUG_2D_ENGINE	
; 718  : 	Debug_Vertices2D += 2;
; 719  : #endif
; 720  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	24					; 00000018H
?DX2D_AddBi@CDXEngine@@QAEXKKPAUD3DXVECTOR3@@PAUD3DDYNVERTEX@@MK@Z ENDP ; CDXEngine::DX2D_AddBi
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
$T1 = -256						; size = 16
$T2 = -240						; size = 16
$T3 = -224						; size = 16
$T4 = -208						; size = 16
$T5 = -192						; size = 16
$T6 = -176						; size = 16
$T7 = -160						; size = 16
$T8 = -144						; size = 16
$T9 = -128						; size = 16
_Index$10 = -104					; size = 4
_Distance$ = -100					; size = 4
tv81 = -96						; size = 4
_this$ = -92						; size = 4
_Draw$ = -88						; size = 4
_VbIndex$ = -84						; size = 4
_V$ = -80						; size = 64
__$ArrayPad$ = -4					; size = 4
_Layer$ = 8						; size = 4
_Flags$ = 12						; size = 4
_Pos$ = 16						; size = 4
_Tri$ = 20						; size = 4
_Radius$ = 24						; size = 4
_TexHandle$ = 28					; size = 4
?DX2D_AddTri@CDXEngine@@QAEXKKPAUD3DXVECTOR3@@PAUD3DDYNVERTEX@@MK@Z PROC ; CDXEngine::DX2D_AddTri
; _this$ = ecx

; 542  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 543  : 	_MM_ALIGN16	XMMVector	V[4];
; 544  : 
; 545  : 	// not going to overflow stuff
; 546  : 	if(Total2DItems>=MAX_2D_ITEMS) return;

	cmp	DWORD PTR ?Total2DItems@CDXEngine@@0KA, 65536 ; CDXEngine::Total2DItems, 00010000H
	jb	SHORT $LN8@DX2D_AddTr
	jmp	$LN9@DX2D_AddTr
$LN8@DX2D_AddTr:

; 547  : 
; 548  : 	// Get the Index for the selected VB
; 549  : 	DWORD	&VbIndex=Dyn2DVertexBuffer[VBSelected].LastIndex;

	mov	eax, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	eax, 4
	add	eax, OFFSET ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A+8
	mov	DWORD PTR _VbIndex$[ebp], eax

; 550  : 	// if no more space, exit
; 551  : 	if(!CheckBufferSpace(VbIndex, 3)) return;

	push	3
	mov	ecx, DWORD PTR _VbIndex$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckBufferSpace@CDXEngine@@AAE_NKK@Z	; CDXEngine::CheckBufferSpace
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN7@DX2D_AddTr
	jmp	$LN9@DX2D_AddTr
$LN7@DX2D_AddTr:

; 552  : 
; 553  : 	// Get Distance from a previous test if POLY DECLARED VISIBLE, or calcualte if from scratch
; 554  : 	float	Distance=( Flags & POLY_VISIBLE )? TestDistance : DX2D_GetDistance(Pos, Radius);

	mov	ecx, DWORD PTR _Flags$[ebx]
	and	ecx, 4
	je	SHORT $LN11@DX2D_AddTr
	movss	xmm0, DWORD PTR ?TestDistance@CDXEngine@@0MA
	movss	DWORD PTR tv81[ebp], xmm0
	jmp	SHORT $LN12@DX2D_AddTr
$LN11@DX2D_AddTr:
	push	0
	push	ecx
	movss	xmm0, DWORD PTR _Radius$[ebx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _Pos$[ebx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DX2D_GetDistance@CDXEngine@@QAEMPAUD3DXVECTOR3@@MK@Z ; CDXEngine::DX2D_GetDistance
	fstp	DWORD PTR tv81[ebp]
$LN12@DX2D_AddTr:
	movss	xmm0, DWORD PTR tv81[ebp]
	movss	DWORD PTR _Distance$[ebp], xmm0

; 555  : 	if(Distance<0.0f) return;

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _Distance$[ebp]
	jbe	SHORT $LN6@DX2D_AddTr
	jmp	$LN9@DX2D_AddTr
$LN6@DX2D_AddTr:

; 556  : 
; 557  : 	// check if layer initialized, if not, initialize it
; 558  : 	if(Layers[Layer].Start==-1)	Layers[Layer].Start=Total2DItems;

	mov	eax, DWORD PTR _Layer$[ebx]
	imul	eax, 12					; 0000000cH
	cmp	DWORD PTR ?Layers@CDXEngine@@0PAULayerItemType@@A[eax], -1
	jne	SHORT $LN5@DX2D_AddTr
	mov	ecx, DWORD PTR _Layer$[ebx]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	mov	DWORD PTR ?Layers@CDXEngine@@0PAULayerItemType@@A[ecx], edx

; 559  : 	// If layer already initialized
; 560  : 	else {

	jmp	SHORT $LN4@DX2D_AddTr
$LN5@DX2D_AddTr:

; 561  : 		// get a pointer to last draw for the layer
; 562  : 		DWORD	Index=Layers[Layer].End;

	mov	eax, DWORD PTR _Layer$[ebx]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR ?Layers@CDXEngine@@0PAULayerItemType@@A[eax+4]
	mov	DWORD PTR _Index$10[ebp], ecx

; 563  : 		// Link new Draw Item
; 564  : 		Draws2D[Index].Next=Total2DItems;

	mov	edx, DWORD PTR _Index$10[ebp]
	imul	edx, 36					; 00000024H
	mov	eax, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	mov	DWORD PTR ?Draws2D@CDXEngine@@0PAUDrawItemType@@A[edx], eax
$LN4@DX2D_AddTr:

; 565  : 	}
; 566  : 	// This is the last Draw for the Layer
; 567  : 	Layers[Layer].End=Total2DItems;

	mov	ecx, DWORD PTR _Layer$[ebx]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	mov	DWORD PTR ?Layers@CDXEngine@@0PAULayerItemType@@A[ecx+4], edx

; 568  : 	
; 569  : 	V[0].Xmm = _mm_loadu_ps((float*)&Tri[0].pos);

	mov	eax, 28					; 0000001cH
	imul	eax, 0
	add	eax, DWORD PTR _Tri$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR _V$[ebp+ecx], xmm0

; 570  : 	V[1].Xmm = _mm_loadu_ps((float*)&Tri[1].pos);

	mov	edx, 28					; 0000001cH
	shl	edx, 0
	add	edx, DWORD PTR _Tri$[ebx]
	movups	xmm0, XMMWORD PTR [edx]
	movaps	XMMWORD PTR $T9[ebp], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	movups	xmm0, XMMWORD PTR $T9[ebp]
	movups	XMMWORD PTR _V$[ebp+eax], xmm0

; 571  : 	V[2].Xmm = _mm_loadu_ps((float*)&Tri[2].pos);

	mov	ecx, 28					; 0000001cH
	shl	ecx, 1
	add	ecx, DWORD PTR _Tri$[ebx]
	movups	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR $T4[ebp], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	movups	xmm0, XMMWORD PTR $T4[ebp]
	movups	XMMWORD PTR _V$[ebp+edx], xmm0

; 572  : 
; 573  : 	// * BILLBOARD VERTICES * - go directly into Vertex Buffer
; 574  : 	if( Flags & POLY_BB)	DX2D_TransformBB(&XMMPos, V, &Dyn2DVertexBuffer[VBSelected].VbPtr[VbIndex], 3);

	mov	eax, DWORD PTR _Flags$[ebx]
	and	eax, 1
	je	SHORT $LN3@DX2D_AddTr
	push	3
	mov	ecx, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	ecx, 4
	mov	edx, DWORD PTR _VbIndex$[ebp]
	mov	eax, DWORD PTR [edx]
	imul	eax, 28					; 0000001cH
	add	eax, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[ecx+4]
	push	eax
	lea	ecx, DWORD PTR _V$[ebp]
	push	ecx
	push	OFFSET ?XMMPos@@3TXMMVector@@A		; XMMPos
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DX2D_TransformBB@CDXEngine@@QAEXPATXMMVector@@0PAUD3DDYNVERTEX@@K@Z ; CDXEngine::DX2D_TransformBB

; 575  : 	// if not BillBoarded, add Distance here and put into Vertex Buffer
; 576  : 	else {

	jmp	$LN2@DX2D_AddTr
$LN3@DX2D_AddTr:

; 577  : 		_mm_storeu_ps((float*)&Dyn2DVertexBuffer[VBSelected].VbPtr[VbIndex+0], _mm_add_ps(XMMPos.Xmm, V[0].Xmm));

	mov	edx, 16					; 00000010H
	imul	edx, 0
	movaps	xmm0, XMMWORD PTR ?XMMPos@@3TXMMVector@@A
	addps	xmm0, XMMWORD PTR _V$[ebp+edx]
	movaps	XMMWORD PTR $T6[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T6[ebp]
	mov	eax, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	eax, 4
	mov	ecx, DWORD PTR _VbIndex$[ebp]
	mov	edx, DWORD PTR [ecx]
	imul	edx, 28					; 0000001cH
	add	edx, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[eax+4]
	movups	XMMWORD PTR [edx], xmm0

; 578  : 		_mm_storeu_ps((float*)&Dyn2DVertexBuffer[VBSelected].VbPtr[VbIndex+1], _mm_add_ps(XMMPos.Xmm, V[1].Xmm));

	mov	eax, 16					; 00000010H
	shl	eax, 0
	movaps	xmm0, XMMWORD PTR ?XMMPos@@3TXMMVector@@A
	addps	xmm0, XMMWORD PTR _V$[ebp+eax]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	mov	ecx, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	ecx, 4
	mov	edx, DWORD PTR _VbIndex$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	imul	eax, 28					; 0000001cH
	add	eax, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[ecx+4]
	movups	XMMWORD PTR [eax], xmm0

; 579  : 		_mm_storeu_ps((float*)&Dyn2DVertexBuffer[VBSelected].VbPtr[VbIndex+2], _mm_add_ps(XMMPos.Xmm, V[2].Xmm));

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	movaps	xmm0, XMMWORD PTR ?XMMPos@@3TXMMVector@@A
	addps	xmm0, XMMWORD PTR _V$[ebp+ecx]
	movaps	XMMWORD PTR $T8[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T8[ebp]
	mov	edx, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	edx, 4
	mov	eax, DWORD PTR _VbIndex$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	imul	ecx, 28					; 0000001cH
	add	ecx, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[edx+4]
	movups	XMMWORD PTR [ecx], xmm0
$LN2@DX2D_AddTr:

; 580  : 	}
; 581  : 
; 582  : 	// copy the Rest of Vertex Data
; 583  : 	_mm_storeu_ps((float*)&Dyn2DVertexBuffer[VBSelected].VbPtr[VbIndex+0].dwColour, _mm_loadu_ps((float*)&Tri[0].dwColour));

	mov	edx, 28					; 0000001cH
	imul	edx, 0
	mov	eax, DWORD PTR _Tri$[ebx]
	movups	xmm0, XMMWORD PTR [eax+edx+12]
	movaps	XMMWORD PTR $T7[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T7[ebp]
	mov	ecx, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	ecx, 4
	mov	edx, DWORD PTR _VbIndex$[ebp]
	mov	eax, DWORD PTR [edx]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[ecx+4]
	movups	XMMWORD PTR [ecx+eax+12], xmm0

; 584  : 	_mm_storeu_ps((float*)&Dyn2DVertexBuffer[VBSelected].VbPtr[VbIndex+1].dwColour, _mm_loadu_ps((float*)&Tri[1].dwColour));

	mov	edx, 28					; 0000001cH
	shl	edx, 0
	mov	eax, DWORD PTR _Tri$[ebx]
	movups	xmm0, XMMWORD PTR [eax+edx+12]
	movaps	XMMWORD PTR $T5[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T5[ebp]
	mov	ecx, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	ecx, 4
	mov	edx, DWORD PTR _VbIndex$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[ecx+4]
	movups	XMMWORD PTR [ecx+eax+12], xmm0

; 585  : 	_mm_storeu_ps((float*)&Dyn2DVertexBuffer[VBSelected].VbPtr[VbIndex+2].dwColour, _mm_loadu_ps((float*)&Tri[2].dwColour));

	mov	edx, 28					; 0000001cH
	shl	edx, 1
	mov	eax, DWORD PTR _Tri$[ebx]
	movups	xmm0, XMMWORD PTR [eax+edx+12]
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	mov	ecx, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	ecx, 4
	mov	edx, DWORD PTR _VbIndex$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 2
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[ecx+4]
	movups	XMMWORD PTR [ecx+eax+12], xmm0

; 586  : 
; 587  : 
; 588  : 	// get the Draw under setting
; 589  : 	DrawItemType	&Draw=Draws2D[Total2DItems];

	mov	edx, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	imul	edx, 36					; 00000024H
	add	edx, OFFSET ?Draws2D@CDXEngine@@0PAUDrawItemType@@A ; CDXEngine::Draws2D
	mov	DWORD PTR _Draw$[ebp], edx

; 590  : 	// * setup the items to track & sort the Quad *
; 591  : 	// The Scaled Distance for sorting
; 592  : 	Draw.Dist256=F_I32(Distance*256.0f);

	movss	xmm0, DWORD PTR _Distance$[ebp]
	mulss	xmm0, DWORD PTR __real@43800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?F_I32@@YAKM@Z				; F_I32
	add	esp, 4
	mov	ecx, DWORD PTR _Draw$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 593  : 	// The Texture Handle
; 594  : 	Draw.TexHandle=TexHandle;

	mov	edx, DWORD PTR _Draw$[ebp]
	mov	eax, DWORD PTR _TexHandle$[ebx]
	mov	DWORD PTR [edx+24], eax

; 595  : 	// The vertex buffer assigned
; 596  : 	Draw.Vb=Dyn2DVertexBuffer[VBSelected].Vb;

	mov	ecx, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	ecx, 4
	mov	edx, DWORD PTR _Draw$[ebp]
	mov	eax, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[ecx]
	mov	DWORD PTR [edx+8], eax

; 597  : 	// Index of vertices in the Vertex Buffer
; 598  : 	Draw.Index=VbIndex;

	mov	ecx, DWORD PTR _Draw$[ebp]
	mov	edx, DWORD PTR _VbIndex$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+12], eax

; 599  : 	// vertices of the item, vertices for a Tri
; 600  : 	Draw.NrVertices=3;

	mov	ecx, DWORD PTR _Draw$[ebp]
	mov	DWORD PTR [ecx+20], 3

; 601  : 	// Final Item in the list
; 602  : 	Draw.Next=0xffffffff;

	mov	edx, DWORD PTR _Draw$[ebp]
	mov	DWORD PTR [edx], -1

; 603  : 	// Assign Flags from the draw
; 604  : 	Draw.Flags=Flags;

	mov	eax, DWORD PTR _Draw$[ebp]
	mov	ecx, DWORD PTR _Flags$[ebx]
	mov	DWORD PTR [eax+28], ecx

; 605  : 	// Assign height
; 606  : 	Draw.Height=Pos->z;

	mov	edx, DWORD PTR _Draw$[ebp]
	mov	eax, DWORD PTR _Pos$[ebx]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+32], ecx

; 607  : 	// if local coords, update with camera Z
; 608  : 	if(Flags & CAMERA_VERTICES) Draw.Height += CameraPos.z;

	mov	edx, DWORD PTR _Flags$[ebx]
	and	edx, 8
	je	SHORT $LN1@DX2D_AddTr
	mov	eax, DWORD PTR _Draw$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	addss	xmm0, DWORD PTR ?CameraPos@CDXEngine@@0U_D3DVECTOR@@A+8
	mov	ecx, DWORD PTR _Draw$[ebp]
	movss	DWORD PTR [ecx+32], xmm0
$LN1@DX2D_AddTr:

; 609  : 	
; 610  : 	// Update the Sort Buffer
; 611  : 	SortBuffer[Total2DItems].Index=Total2DItems;

	mov	edx, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	mov	eax, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	mov	DWORD PTR ?SortBuffer@CDXEngine@@0PAUSortItemType@@A[edx*8], eax

; 612  : 	// new Quad
; 613  : 	Total2DItems++;

	mov	ecx, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	add	ecx, 1
	mov	DWORD PTR ?Total2DItems@CDXEngine@@0KA, ecx ; CDXEngine::Total2DItems

; 614  : 	// new index in VB, if full get next VBuffer
; 615  : 	VbIndex+=3;

	mov	edx, DWORD PTR _VbIndex$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 3
	mov	ecx, DWORD PTR _VbIndex$[ebp]
	mov	DWORD PTR [ecx], eax
$LN9@DX2D_AddTr:

; 616  : 
; 617  : #ifdef	DEBUG_2D_ENGINE	
; 618  : 	Debug_Vertices2D += 3;
; 619  : #endif
; 620  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	24					; 00000018H
?DX2D_AddTri@CDXEngine@@QAEXKKPAUD3DXVECTOR3@@PAUD3DDYNVERTEX@@MK@Z ENDP ; CDXEngine::DX2D_AddTri
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
$T1 = -400						; size = 16
$T2 = -384						; size = 16
$T3 = -368						; size = 16
$T4 = -352						; size = 16
$T5 = -336						; size = 16
$T6 = -320						; size = 16
$T7 = -304						; size = 16
$T8 = -288						; size = 16
$T9 = -272						; size = 16
$T10 = -256						; size = 16
$T11 = -240						; size = 16
$T12 = -224						; size = 16
$T13 = -208						; size = 16
$T14 = -192						; size = 16
$T15 = -176						; size = 16
$T16 = -160						; size = 16
_Index$17 = -140					; size = 4
tv334 = -136						; size = 4
tv350 = -132						; size = 4
tv326 = -128						; size = 4
tv346 = -124						; size = 4
tv330 = -120						; size = 4
tv342 = -116						; size = 4
tv338 = -112						; size = 4
tv322 = -108						; size = 4
_this$ = -104						; size = 4
_Distance$ = -100					; size = 4
_Draw$ = -96						; size = 4
_ptr$ = -92						; size = 4
_src$ = -88						; size = 4
_VbIndex$ = -84						; size = 4
_V$ = -80						; size = 64
__$ArrayPad$ = -4					; size = 4
_Layer$ = 8						; size = 4
_Flags$ = 12						; size = 4
_Pos$ = 16						; size = 4
_Quad$ = 20						; size = 4
_Radius$ = 24						; size = 4
_TexHandle$ = 28					; size = 4
?DX2D_AddQuad@CDXEngine@@QAEXKKPAUD3DXVECTOR3@@PAUD3DDYNVERTEX@@MK@Z PROC ; CDXEngine::DX2D_AddQuad
; _this$ = ecx

; 416  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 400				; 00000190H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 417  : 	_MM_ALIGN16	XMMVector	V[4];
; 418  : 
; 419  : #ifdef	DATE_PROTECTION
; 420  : 	extern	bool	DateOff;
; 421  : 	if(DateOff && PRANDFloat()<0.3f) return;
; 422  : #endif
; 423  : 
; 424  : 	// not going to overflow stuff
; 425  : 	if(Total2DItems>=MAX_2D_ITEMS) return;

	cmp	DWORD PTR ?Total2DItems@CDXEngine@@0KA, 65536 ; CDXEngine::Total2DItems, 00010000H
	jb	SHORT $LN16@DX2D_AddQu
	jmp	$LN17@DX2D_AddQu
$LN16@DX2D_AddQu:

; 426  : 
; 427  : 	// Get the Index for the selected VB
; 428  : 	DWORD	&VbIndex=Dyn2DVertexBuffer[VBSelected].LastIndex;

	mov	eax, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	eax, 4
	add	eax, OFFSET ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A+8
	mov	DWORD PTR _VbIndex$[ebp], eax

; 429  : 	// if no more space, exit
; 430  : 	if(!CheckBufferSpace(VbIndex, 4)) return;

	push	4
	mov	ecx, DWORD PTR _VbIndex$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckBufferSpace@CDXEngine@@AAE_NKK@Z	; CDXEngine::CheckBufferSpace
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN15@DX2D_AddQu
	jmp	$LN17@DX2D_AddQu
$LN15@DX2D_AddQu:

; 431  : 
; 432  : 	// Get Distance from a previous test if POLY DECLARED VISIBLE, or calcualte if from scratch
; 433  : 	float	Distance;
; 434  : 	if( Flags & POLY_VISIBLE) Distance=TestDistance;

	mov	ecx, DWORD PTR _Flags$[ebx]
	and	ecx, 4
	je	SHORT $LN14@DX2D_AddQu
	movss	xmm0, DWORD PTR ?TestDistance@CDXEngine@@0MA
	movss	DWORD PTR _Distance$[ebp], xmm0

; 435  : 	else {

	jmp	SHORT $LN12@DX2D_AddQu
$LN14@DX2D_AddQu:

; 436  : 		Distance=DX2D_GetDistance(Pos, Radius, Flags);

	mov	edx, DWORD PTR _Flags$[ebx]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _Radius$[ebx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _Pos$[ebx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DX2D_GetDistance@CDXEngine@@QAEMPAUD3DXVECTOR3@@MK@Z ; CDXEngine::DX2D_GetDistance
	fstp	DWORD PTR _Distance$[ebp]

; 437  : 		if(Distance<0.0f) return;

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _Distance$[ebp]
	jbe	SHORT $LN12@DX2D_AddQu
	jmp	$LN17@DX2D_AddQu
$LN12@DX2D_AddQu:

; 438  : 	}
; 439  : 	// if Camera vertices, the passed position is the real one
; 440  : 	if(Flags & CAMERA_VERTICES) *(D3DXVECTOR3*)&XMMPos.d3d = *Pos;

	mov	ecx, DWORD PTR _Flags$[ebx]
	and	ecx, 8
	je	SHORT $LN11@DX2D_AddQu
	mov	edx, DWORD PTR _Pos$[ebx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR ?XMMPos@@3TXMMVector@@A, eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR ?XMMPos@@3TXMMVector@@A+4, ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR ?XMMPos@@3TXMMVector@@A+8, edx
$LN11@DX2D_AddQu:

; 441  : 	if(Flags & CALC_DISTANCE) Distance=DX2D_GetDistance(Pos, Flags);

	mov	eax, DWORD PTR _Flags$[ebx]
	and	eax, 16					; 00000010H
	je	SHORT $LN10@DX2D_AddQu
	mov	ecx, DWORD PTR _Flags$[ebx]
	push	ecx
	mov	edx, DWORD PTR _Pos$[ebx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DX2D_GetDistance@CDXEngine@@QAEMPAUD3DXVECTOR3@@K@Z ; CDXEngine::DX2D_GetDistance
	fstp	DWORD PTR _Distance$[ebp]
$LN10@DX2D_AddQu:

; 442  : 
; 443  : 	// check if layer initialized, if not, initialize it
; 444  : 	if(Layers[Layer].Start==-1)	Layers[Layer].Start=Total2DItems;

	mov	eax, DWORD PTR _Layer$[ebx]
	imul	eax, 12					; 0000000cH
	cmp	DWORD PTR ?Layers@CDXEngine@@0PAULayerItemType@@A[eax], -1
	jne	SHORT $LN9@DX2D_AddQu
	mov	ecx, DWORD PTR _Layer$[ebx]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	mov	DWORD PTR ?Layers@CDXEngine@@0PAULayerItemType@@A[ecx], edx

; 445  : 	// If layer already initialized
; 446  : 	else {

	jmp	SHORT $LN8@DX2D_AddQu
$LN9@DX2D_AddQu:

; 447  : 		// get a pointer to last draw for the layer
; 448  : 		DWORD	Index=Layers[Layer].End;

	mov	eax, DWORD PTR _Layer$[ebx]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR ?Layers@CDXEngine@@0PAULayerItemType@@A[eax+4]
	mov	DWORD PTR _Index$17[ebp], ecx

; 449  : 		// Link new Draw Item
; 450  : 		Draws2D[Index].Next=Total2DItems;

	mov	edx, DWORD PTR _Index$17[ebp]
	imul	edx, 36					; 00000024H
	mov	eax, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	mov	DWORD PTR ?Draws2D@CDXEngine@@0PAUDrawItemType@@A[edx], eax
$LN8@DX2D_AddQu:

; 451  : 	}
; 452  : 	// This is the last Draw for the Layer
; 453  : 	Layers[Layer].End=Total2DItems;

	mov	ecx, DWORD PTR _Layer$[ebx]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	mov	DWORD PTR ?Layers@CDXEngine@@0PAULayerItemType@@A[ecx+4], edx

; 454  : 	
; 455  : 	// * VERTEX CREATION REQUIRED ONLY FOR QUAD - IT CAMES FROM RADIUS *
; 456  : 	if(Flags & POLY_CREATE){

	mov	eax, DWORD PTR _Flags$[ebx]
	and	eax, 2
	je	$LN7@DX2D_AddQu

; 457  : 		// Prepare radius CX
; 458  : 		XMMRadius.d3d.x=XMMRadius.d3d.y=XMMRadius.d3d.z=Radius;

	movss	xmm0, DWORD PTR _Radius$[ebx]
	movss	DWORD PTR ?XMMRadius@@3TXMMVector@@A+8, xmm0
	movss	xmm0, DWORD PTR ?XMMRadius@@3TXMMVector@@A+8
	movss	DWORD PTR ?XMMRadius@@3TXMMVector@@A+4, xmm0
	movss	xmm0, DWORD PTR ?XMMRadius@@3TXMMVector@@A+4
	movss	DWORD PTR ?XMMRadius@@3TXMMVector@@A, xmm0

; 459  : 		V[0].Xmm = _mm_mul_ps(XMMRadius.Xmm, vbb0.Xmm);

	movaps	xmm0, XMMWORD PTR ?XMMRadius@@3TXMMVector@@A
	mulps	xmm0, XMMWORD PTR ?vbb0@CDXEngine@@2TXMMVector@@A
	movaps	XMMWORD PTR $T16[ebp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	movups	xmm0, XMMWORD PTR $T16[ebp]
	movups	XMMWORD PTR _V$[ebp+ecx], xmm0

; 460  : 		V[1].Xmm = _mm_mul_ps(XMMRadius.Xmm, vbb1.Xmm);

	movaps	xmm0, XMMWORD PTR ?XMMRadius@@3TXMMVector@@A
	mulps	xmm0, XMMWORD PTR ?vbb1@CDXEngine@@2TXMMVector@@A
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR _V$[ebp+edx], xmm0

; 461  : 		V[2].Xmm = _mm_mul_ps(XMMRadius.Xmm, vbb2.Xmm);

	movaps	xmm0, XMMWORD PTR ?XMMRadius@@3TXMMVector@@A
	mulps	xmm0, XMMWORD PTR ?vbb2@CDXEngine@@2TXMMVector@@A
	movaps	XMMWORD PTR $T14[ebp], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movups	xmm0, XMMWORD PTR $T14[ebp]
	movups	XMMWORD PTR _V$[ebp+eax], xmm0

; 462  : 		V[3].Xmm = _mm_mul_ps(XMMRadius.Xmm, vbb3.Xmm);

	movaps	xmm0, XMMWORD PTR ?XMMRadius@@3TXMMVector@@A
	mulps	xmm0, XMMWORD PTR ?vbb3@CDXEngine@@2TXMMVector@@A
	movaps	XMMWORD PTR $T4[ebp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	movups	xmm0, XMMWORD PTR $T4[ebp]
	movups	XMMWORD PTR _V$[ebp+ecx], xmm0

; 463  : 	} else {

	jmp	$LN6@DX2D_AddQu
$LN7@DX2D_AddQu:

; 464  : 		V[0].Xmm = _mm_loadu_ps((float*)&Quad[0].pos);

	mov	edx, 28					; 0000001cH
	imul	edx, 0
	add	edx, DWORD PTR _Quad$[ebx]
	movups	xmm0, XMMWORD PTR [edx]
	movaps	XMMWORD PTR $T12[ebp], xmm0
	mov	eax, 16					; 00000010H
	imul	eax, 0
	movups	xmm0, XMMWORD PTR $T12[ebp]
	movups	XMMWORD PTR _V$[ebp+eax], xmm0

; 465  : 		V[1].Xmm = _mm_loadu_ps((float*)&Quad[1].pos);

	mov	ecx, 28					; 0000001cH
	shl	ecx, 0
	add	ecx, DWORD PTR _Quad$[ebx]
	movups	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR $T6[ebp], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	movups	xmm0, XMMWORD PTR $T6[ebp]
	movups	XMMWORD PTR _V$[ebp+edx], xmm0

; 466  : 		V[2].Xmm = _mm_loadu_ps((float*)&Quad[2].pos);

	mov	eax, 28					; 0000001cH
	shl	eax, 1
	add	eax, DWORD PTR _Quad$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR $T10[ebp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	movups	xmm0, XMMWORD PTR $T10[ebp]
	movups	XMMWORD PTR _V$[ebp+ecx], xmm0

; 467  : 		V[3].Xmm = _mm_loadu_ps((float*)&Quad[3].pos);

	mov	edx, 28					; 0000001cH
	imul	edx, 3
	add	edx, DWORD PTR _Quad$[ebx]
	movups	xmm0, XMMWORD PTR [edx]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	movups	xmm0, XMMWORD PTR $T2[ebp]
	movups	XMMWORD PTR _V$[ebp+eax], xmm0
$LN6@DX2D_AddQu:

; 468  : 	}
; 469  : 
; 470  : 	// * BILLBOARD VERTICES * - go directly into Vertex Buffer
; 471  : 	if( Flags & POLY_BB)	DX2D_TransformBB(&XMMPos, V, &Dyn2DVertexBuffer[VBSelected].VbPtr[VbIndex], 4);

	mov	ecx, DWORD PTR _Flags$[ebx]
	and	ecx, 1
	je	SHORT $LN5@DX2D_AddQu
	push	4
	mov	edx, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	edx, 4
	mov	eax, DWORD PTR _VbIndex$[ebp]
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 28					; 0000001cH
	add	ecx, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[edx+4]
	push	ecx
	lea	edx, DWORD PTR _V$[ebp]
	push	edx
	push	OFFSET ?XMMPos@@3TXMMVector@@A		; XMMPos
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DX2D_TransformBB@CDXEngine@@QAEXPATXMMVector@@0PAUD3DDYNVERTEX@@K@Z ; CDXEngine::DX2D_TransformBB

; 472  : 	// if not BillBoarded, add Distance here and put into Vertex Buffer
; 473  : 	else {

	jmp	$LN2@DX2D_AddQu
$LN5@DX2D_AddQu:

; 474  : 		// if passed coords in already camera vertex, just copy
; 475  : 		if( Flags & CAMERA_VERTICES ) {

	mov	eax, DWORD PTR _Flags$[ebx]
	and	eax, 8
	je	$LN3@DX2D_AddQu

; 476  : 			_mm_storeu_ps((float*)&Dyn2DVertexBuffer[VBSelected].VbPtr[VbIndex+0], V[0].Xmm);

	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	movups	xmm0, XMMWORD PTR _V$[ebp+ecx]
	mov	edx, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	edx, 4
	mov	eax, DWORD PTR _VbIndex$[ebp]
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 28					; 0000001cH
	add	ecx, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[edx+4]
	movups	XMMWORD PTR [ecx], xmm0

; 477  : 			_mm_storeu_ps((float*)&Dyn2DVertexBuffer[VBSelected].VbPtr[VbIndex+1], V[1].Xmm);

	mov	edx, 16					; 00000010H
	shl	edx, 0
	movups	xmm0, XMMWORD PTR _V$[ebp+edx]
	mov	eax, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	eax, 4
	mov	ecx, DWORD PTR _VbIndex$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	imul	edx, 28					; 0000001cH
	add	edx, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[eax+4]
	movups	XMMWORD PTR [edx], xmm0

; 478  : 			_mm_storeu_ps((float*)&Dyn2DVertexBuffer[VBSelected].VbPtr[VbIndex+2], V[2].Xmm);

	mov	eax, 16					; 00000010H
	shl	eax, 1
	movups	xmm0, XMMWORD PTR _V$[ebp+eax]
	mov	ecx, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	ecx, 4
	mov	edx, DWORD PTR _VbIndex$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 2
	imul	eax, 28					; 0000001cH
	add	eax, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[ecx+4]
	movups	XMMWORD PTR [eax], xmm0

; 479  : 			_mm_storeu_ps((float*)&Dyn2DVertexBuffer[VBSelected].VbPtr[VbIndex+3], V[3].Xmm);

	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	movups	xmm0, XMMWORD PTR _V$[ebp+ecx]
	mov	edx, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	edx, 4
	mov	eax, DWORD PTR _VbIndex$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 3
	imul	ecx, 28					; 0000001cH
	add	ecx, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[edx+4]
	movups	XMMWORD PTR [ecx], xmm0

; 480  : 		
; 481  : 		} else {

	jmp	$LN2@DX2D_AddQu
$LN3@DX2D_AddQu:

; 482  : 			_mm_storeu_ps((float*)&Dyn2DVertexBuffer[VBSelected].VbPtr[VbIndex+0], _mm_add_ps(XMMPos.Xmm, V[0].Xmm));

	mov	edx, 16					; 00000010H
	imul	edx, 0
	movaps	xmm0, XMMWORD PTR ?XMMPos@@3TXMMVector@@A
	addps	xmm0, XMMWORD PTR _V$[ebp+edx]
	movaps	XMMWORD PTR $T8[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T8[ebp]
	mov	eax, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	eax, 4
	mov	ecx, DWORD PTR _VbIndex$[ebp]
	mov	edx, DWORD PTR [ecx]
	imul	edx, 28					; 0000001cH
	add	edx, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[eax+4]
	movups	XMMWORD PTR [edx], xmm0

; 483  : 			_mm_storeu_ps((float*)&Dyn2DVertexBuffer[VBSelected].VbPtr[VbIndex+1], _mm_add_ps(XMMPos.Xmm, V[1].Xmm));

	mov	eax, 16					; 00000010H
	shl	eax, 0
	movaps	xmm0, XMMWORD PTR ?XMMPos@@3TXMMVector@@A
	addps	xmm0, XMMWORD PTR _V$[ebp+eax]
	movaps	XMMWORD PTR $T15[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T15[ebp]
	mov	ecx, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	ecx, 4
	mov	edx, DWORD PTR _VbIndex$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	imul	eax, 28					; 0000001cH
	add	eax, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[ecx+4]
	movups	XMMWORD PTR [eax], xmm0

; 484  : 			_mm_storeu_ps((float*)&Dyn2DVertexBuffer[VBSelected].VbPtr[VbIndex+2], _mm_add_ps(XMMPos.Xmm, V[2].Xmm));

	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	movaps	xmm0, XMMWORD PTR ?XMMPos@@3TXMMVector@@A
	addps	xmm0, XMMWORD PTR _V$[ebp+ecx]
	movaps	XMMWORD PTR $T13[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T13[ebp]
	mov	edx, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	edx, 4
	mov	eax, DWORD PTR _VbIndex$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	imul	ecx, 28					; 0000001cH
	add	ecx, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[edx+4]
	movups	XMMWORD PTR [ecx], xmm0

; 485  : 			_mm_storeu_ps((float*)&Dyn2DVertexBuffer[VBSelected].VbPtr[VbIndex+3], _mm_add_ps(XMMPos.Xmm, V[3].Xmm));

	mov	edx, 16					; 00000010H
	imul	edx, 3
	movaps	xmm0, XMMWORD PTR ?XMMPos@@3TXMMVector@@A
	addps	xmm0, XMMWORD PTR _V$[ebp+edx]
	movaps	XMMWORD PTR $T11[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T11[ebp]
	mov	eax, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	eax, 4
	mov	ecx, DWORD PTR _VbIndex$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 3
	imul	edx, 28					; 0000001cH
	add	edx, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[eax+4]
	movups	XMMWORD PTR [edx], xmm0
$LN2@DX2D_AddQu:

; 486  : 		}
; 487  : 	}
; 488  : 
; 489  : 	D3DDYNVERTEX	*ptr=(D3DDYNVERTEX*)&Dyn2DVertexBuffer[VBSelected].VbPtr[VbIndex].dwColour;

	mov	eax, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	eax, 4
	mov	ecx, DWORD PTR _VbIndex$[ebp]
	mov	edx, DWORD PTR [ecx]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[eax+4]
	lea	ecx, DWORD PTR [eax+edx+12]
	mov	DWORD PTR _ptr$[ebp], ecx

; 490  : 	D3DDYNVERTEX	*src=(D3DDYNVERTEX*)&Quad[0].dwColour;

	mov	edx, 28					; 0000001cH
	imul	edx, 0
	mov	eax, DWORD PTR _Quad$[ebx]
	lea	ecx, DWORD PTR [eax+edx+12]
	mov	DWORD PTR _src$[ebp], ecx

; 491  : 
; 492  : 	// copy the Rest of Vertex Data
; 493  : 	_mm_storeu_ps((float*)ptr++, _mm_loadu_ps((float*)src++));

	mov	edx, DWORD PTR _src$[ebp]
	mov	DWORD PTR tv322[ebp], edx
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 28					; 0000001cH
	mov	DWORD PTR _src$[ebp], eax
	mov	ecx, DWORD PTR tv322[ebp]
	movups	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR $T9[ebp], xmm0
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR tv326[ebp], edx
	mov	eax, DWORD PTR _ptr$[ebp]
	add	eax, 28					; 0000001cH
	mov	DWORD PTR _ptr$[ebp], eax
	movaps	xmm0, XMMWORD PTR $T9[ebp]
	mov	ecx, DWORD PTR tv326[ebp]
	movups	XMMWORD PTR [ecx], xmm0

; 494  : 	_mm_storeu_ps((float*)ptr++, _mm_loadu_ps((float*)src++));

	mov	edx, DWORD PTR _src$[ebp]
	mov	DWORD PTR tv330[ebp], edx
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 28					; 0000001cH
	mov	DWORD PTR _src$[ebp], eax
	mov	ecx, DWORD PTR tv330[ebp]
	movups	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR $T7[ebp], xmm0
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR tv334[ebp], edx
	mov	eax, DWORD PTR _ptr$[ebp]
	add	eax, 28					; 0000001cH
	mov	DWORD PTR _ptr$[ebp], eax
	movaps	xmm0, XMMWORD PTR $T7[ebp]
	mov	ecx, DWORD PTR tv334[ebp]
	movups	XMMWORD PTR [ecx], xmm0

; 495  : 	_mm_storeu_ps((float*)ptr++, _mm_loadu_ps((float*)src++));

	mov	edx, DWORD PTR _src$[ebp]
	mov	DWORD PTR tv338[ebp], edx
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 28					; 0000001cH
	mov	DWORD PTR _src$[ebp], eax
	mov	ecx, DWORD PTR tv338[ebp]
	movups	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR $T5[ebp], xmm0
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR tv342[ebp], edx
	mov	eax, DWORD PTR _ptr$[ebp]
	add	eax, 28					; 0000001cH
	mov	DWORD PTR _ptr$[ebp], eax
	movaps	xmm0, XMMWORD PTR $T5[ebp]
	mov	ecx, DWORD PTR tv342[ebp]
	movups	XMMWORD PTR [ecx], xmm0

; 496  : 	_mm_storeu_ps((float*)ptr++, _mm_loadu_ps((float*)src++));

	mov	edx, DWORD PTR _src$[ebp]
	mov	DWORD PTR tv346[ebp], edx
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 28					; 0000001cH
	mov	DWORD PTR _src$[ebp], eax
	mov	ecx, DWORD PTR tv346[ebp]
	movups	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR $T3[ebp], xmm0
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR tv350[ebp], edx
	mov	eax, DWORD PTR _ptr$[ebp]
	add	eax, 28					; 0000001cH
	mov	DWORD PTR _ptr$[ebp], eax
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	mov	ecx, DWORD PTR tv350[ebp]
	movups	XMMWORD PTR [ecx], xmm0

; 497  : 
; 498  : 
; 499  : 	// get the Draw under setting
; 500  : 	DrawItemType	&Draw=Draws2D[Total2DItems];

	mov	edx, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	imul	edx, 36					; 00000024H
	add	edx, OFFSET ?Draws2D@CDXEngine@@0PAUDrawItemType@@A ; CDXEngine::Draws2D
	mov	DWORD PTR _Draw$[ebp], edx

; 501  : 	// * setup the items to track & sort the Quad *
; 502  : 	// The Scaled Distance for sorting
; 503  : 	Draw.Dist256=F_I32(Distance*256.0f);

	movss	xmm0, DWORD PTR _Distance$[ebp]
	mulss	xmm0, DWORD PTR __real@43800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?F_I32@@YAKM@Z				; F_I32
	add	esp, 4
	mov	ecx, DWORD PTR _Draw$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 504  : 	// The Texture Handle
; 505  : 	Draw.TexHandle=TexHandle;

	mov	edx, DWORD PTR _Draw$[ebp]
	mov	eax, DWORD PTR _TexHandle$[ebx]
	mov	DWORD PTR [edx+24], eax

; 506  : 	// The vertex buffer assigned
; 507  : 	Draw.Vb=Dyn2DVertexBuffer[VBSelected].Vb;

	mov	ecx, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	shl	ecx, 4
	mov	edx, DWORD PTR _Draw$[ebp]
	mov	eax, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[ecx]
	mov	DWORD PTR [edx+8], eax

; 508  : 	// Index of vertices in the Vertex Buffer
; 509  : 	Draw.Index=VbIndex;

	mov	ecx, DWORD PTR _Draw$[ebp]
	mov	edx, DWORD PTR _VbIndex$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+12], eax

; 510  : 	// vertices of the item, vertices for a quad are 6 ( 2 triangles )
; 511  : #ifdef	DRAW_USING_2D_FANS
; 512  : 	Draw.NrVertices=4;
; 513  : #else
; 514  : 	Draw.NrVertices=6;

	mov	ecx, DWORD PTR _Draw$[ebp]
	mov	DWORD PTR [ecx+20], 6

; 515  : #endif
; 516  : 	// Final Item in the list
; 517  : 	Draw.Next=0xffffffff;

	mov	edx, DWORD PTR _Draw$[ebp]
	mov	DWORD PTR [edx], -1

; 518  : 	// Assign Flags from the draw
; 519  : 	Draw.Flags=Flags;

	mov	eax, DWORD PTR _Draw$[ebp]
	mov	ecx, DWORD PTR _Flags$[ebx]
	mov	DWORD PTR [eax+28], ecx

; 520  : 	// Assign height
; 521  : 	Draw.Height=Pos->z;

	mov	edx, DWORD PTR _Draw$[ebp]
	mov	eax, DWORD PTR _Pos$[ebx]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+32], ecx

; 522  : 	// if local coords, update with camera Z
; 523  : 	if(Flags & CAMERA_VERTICES) Draw.Height += CameraPos.z;

	mov	edx, DWORD PTR _Flags$[ebx]
	and	edx, 8
	je	SHORT $LN1@DX2D_AddQu
	mov	eax, DWORD PTR _Draw$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	addss	xmm0, DWORD PTR ?CameraPos@CDXEngine@@0U_D3DVECTOR@@A+8
	mov	ecx, DWORD PTR _Draw$[ebp]
	movss	DWORD PTR [ecx+32], xmm0
$LN1@DX2D_AddQu:

; 524  : 	
; 525  : 	// Update the Sort Buffer
; 526  : 	SortBuffer[Total2DItems].Index=Total2DItems;

	mov	edx, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	mov	eax, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	mov	DWORD PTR ?SortBuffer@CDXEngine@@0PAUSortItemType@@A[edx*8], eax

; 527  : 	// new Quad
; 528  : 	Total2DItems++;

	mov	ecx, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	add	ecx, 1
	mov	DWORD PTR ?Total2DItems@CDXEngine@@0KA, ecx ; CDXEngine::Total2DItems

; 529  : 	// new index in VB, if full get next VBuffer
; 530  : 	VbIndex+=4;

	mov	edx, DWORD PTR _VbIndex$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 4
	mov	ecx, DWORD PTR _VbIndex$[ebp]
	mov	DWORD PTR [ecx], eax
$LN17@DX2D_AddQu:

; 531  : 
; 532  : #ifdef	DEBUG_2D_ENGINE	
; 533  : 	Debug_Vertices2D += 4;
; 534  : #endif
; 535  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	24					; 00000018H
?DX2D_AddQuad@CDXEngine@@QAEXKKPAUD3DXVECTOR3@@PAUD3DDYNVERTEX@@MK@Z ENDP ; CDXEngine::DX2D_AddQuad
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_l$1 = -4						; size = 4
?DX2D_InitLists@CDXEngine@@QAEXXZ PROC			; CDXEngine::DX2D_InitLists
; _this$ = ecx

; 285  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 286  : 	// reset variables
; 287  : 	LayerSelected=Total2DVertices=Total2DItems=VBSelected=0;

	mov	DWORD PTR ?VBSelected@CDXEngine@@0KA, 0	; CDXEngine::VBSelected
	mov	eax, DWORD PTR ?VBSelected@CDXEngine@@0KA ; CDXEngine::VBSelected
	mov	DWORD PTR ?Total2DItems@CDXEngine@@0KA, eax ; CDXEngine::Total2DItems
	mov	ecx, DWORD PTR ?Total2DItems@CDXEngine@@0KA ; CDXEngine::Total2DItems
	mov	DWORD PTR ?Total2DVertices@CDXEngine@@0KA, ecx ; CDXEngine::Total2DVertices
	mov	edx, DWORD PTR ?Total2DVertices@CDXEngine@@0KA ; CDXEngine::Total2DVertices
	mov	DWORD PTR ?LayerSelected@CDXEngine@@0KA, edx ; CDXEngine::LayerSelected

; 288  : 	// Reset layers to UNINITIALIZED
; 289  : 	memset(Layers, 0xff, sizeof(Layers));

	push	84					; 00000054H
	push	255					; 000000ffH
	push	OFFSET ?Layers@CDXEngine@@0PAULayerItemType@@A ; CDXEngine::Layers
	call	_memset
	add	esp, 12					; 0000000cH

; 290  : 	// Layers Flags
; 291  : 	for(int l=0; l<MAX_2D_LAYERS; l++) Layers[l].Flags=0;

	mov	DWORD PTR _l$1[ebp], 0
	jmp	SHORT $LN3@DX2D_InitL
$LN2@DX2D_InitL:
	mov	eax, DWORD PTR _l$1[ebp]
	add	eax, 1
	mov	DWORD PTR _l$1[ebp], eax
$LN3@DX2D_InitL:
	cmp	DWORD PTR _l$1[ebp], 7
	jge	SHORT $LN1@DX2D_InitL
	mov	ecx, DWORD PTR _l$1[ebp]
	imul	ecx, 12					; 0000000cH
	mov	DWORD PTR ?Layers@CDXEngine@@0PAULayerItemType@@A[ecx+8], 0
	jmp	SHORT $LN2@DX2D_InitL
$LN1@DX2D_InitL:

; 292  : 	// Default Draw Order
; 293  : 	memcpy(DrawOrder, DefOrder, sizeof(DrawOrder));

	push	28					; 0000001cH
	push	OFFSET _DefOrder
	push	OFFSET ?DrawOrder@CDXEngine@@0PAKA	; CDXEngine::DrawOrder
	call	_memcpy
	add	esp, 12					; 0000000cH

; 294  : 
; 295  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DX2D_InitLists@CDXEngine@@QAEXXZ ENDP			; CDXEngine::DX2D_InitLists
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$1 = -4						; size = 4
?DX2D_Reset@CDXEngine@@QAEXXZ PROC			; CDXEngine::DX2D_Reset
; _this$ = ecx

; 299  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 300  : 	// Reinitialize Lists
; 301  : 	DX2D_InitLists();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DX2D_InitLists@CDXEngine@@QAEXXZ	; CDXEngine::DX2D_InitLists

; 302  : 	// reset the Draw Order
; 303  : 	memset(DrawOrder, 0xff, sizeof(DrawOrder));

	push	28					; 0000001cH
	push	255					; 000000ffH
	push	OFFSET ?DrawOrder@CDXEngine@@0PAKA	; CDXEngine::DrawOrder
	call	_memset
	add	esp, 12					; 0000000cH

; 304  : 	// and reset all Vertex Buffers to be filled in
; 305  : 	for(int i=0; i<MAX_2D_BUFFERS; i++){

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@DX2D_Reset
$LN2@DX2D_Reset:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@DX2D_Reset:
	cmp	DWORD PTR _i$1[ebp], 1
	jge	SHORT $LN4@DX2D_Reset

; 306  : 		Dyn2DVertexBuffer[i].LastIndex = Dyn2DVertexBuffer[i].LastTapeIndex = 0;

	mov	ecx, DWORD PTR _i$1[ebp]
	shl	ecx, 4
	mov	DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[ecx+12], 0
	mov	edx, DWORD PTR _i$1[ebp]
	shl	edx, 4
	mov	DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[edx+8], 0

; 307  : 		Dyn2DVertexBuffer[i].Vb->Lock(DDLOCK_DISCARDCONTENTS|DDLOCK_NOSYSLOCK|DDLOCK_WAIT|DDLOCK_WRITEONLY, (void**)&Dyn2DVertexBuffer[i].VbPtr, NULL);;

	push	0
	mov	eax, DWORD PTR _i$1[ebp]
	shl	eax, 4
	add	eax, OFFSET ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A+4
	push	eax
	push	10273					; 00002821H
	mov	ecx, DWORD PTR _i$1[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[ecx]
	mov	eax, DWORD PTR _i$1[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 308  : 	}

	jmp	SHORT $LN2@DX2D_Reset
$LN4@DX2D_Reset:

; 309  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DX2D_Reset@CDXEngine@@QAEXXZ ENDP			; CDXEngine::DX2D_Reset
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Pos$ = 8						; size = 4
?DX2D_GetRelativePosition@CDXEngine@@QAEXPAUD3DXVECTOR3@@@Z PROC ; CDXEngine::DX2D_GetRelativePosition
; _this$ = ecx

; 381  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 382  : 	Pos->x=XMMPos.d3d.x;

	mov	eax, DWORD PTR _Pos$[ebp]
	movss	xmm0, DWORD PTR ?XMMPos@@3TXMMVector@@A
	movss	DWORD PTR [eax], xmm0

; 383  : 	Pos->y=XMMPos.d3d.y;

	mov	ecx, DWORD PTR _Pos$[ebp]
	movss	xmm0, DWORD PTR ?XMMPos@@3TXMMVector@@A+4
	movss	DWORD PTR [ecx+4], xmm0

; 384  : 	Pos->z=XMMPos.d3d.z;

	mov	edx, DWORD PTR _Pos$[ebp]
	movss	xmm0, DWORD PTR ?XMMPos@@3TXMMVector@@A+8
	movss	DWORD PTR [edx+8], xmm0

; 385  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?DX2D_GetRelativePosition@CDXEngine@@QAEXPAUD3DXVECTOR3@@@Z ENDP ; CDXEngine::DX2D_GetRelativePosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
$T1 = -64						; size = 16
$T2 = -48						; size = 16
$T3 = -32						; size = 16
_this$ = -4						; size = 4
_Pos$ = 8						; size = 4
_Flags$ = 12						; size = 4
?DX2D_GetDistance@CDXEngine@@QAEMPAUD3DXVECTOR3@@K@Z PROC ; CDXEngine::DX2D_GetDistance
; _this$ = ecx

; 363  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 364  : 	// get the position and make it camera relative
; 365  : 	XMMPos.Xmm =_mm_loadu_ps((float*)Pos);

	mov	eax, DWORD PTR _Pos$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR ?XMMPos@@3TXMMVector@@A, xmm0

; 366  : 	if(!(Flags & CAMERA_VERTICES))XMMPos.Xmm =_mm_sub_ps(XMMPos.Xmm, XMMCamera.Xmm);

	mov	ecx, DWORD PTR _Flags$[ebx]
	and	ecx, 8
	jne	SHORT $LN1@DX2D_GetDi
	movaps	xmm0, XMMWORD PTR ?XMMPos@@3TXMMVector@@A
	subps	xmm0, XMMWORD PTR ?XMMCamera@CDXEngine@@2TXMMVector@@A
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR ?XMMPos@@3TXMMVector@@A, xmm0
$LN1@DX2D_GetDi:

; 367  : 	// setup the DISTANCE FROM CAMERA
; 368  : 	XMMStore.Xmm =_mm_mul_ps(XMMPos.Xmm, XMMPos.Xmm);

	movaps	xmm0, XMMWORD PTR ?XMMPos@@3TXMMVector@@A
	mulps	xmm0, XMMWORD PTR ?XMMPos@@3TXMMVector@@A
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	movaps	XMMWORD PTR ?XMMStore@@3TXMMVector@@A, xmm0

; 369  : 	return TestDistance = sqrtf( XMMStore.d3d.x + XMMStore.d3d.y + XMMStore.d3d.z );

	movss	xmm0, DWORD PTR ?XMMStore@@3TXMMVector@@A
	addss	xmm0, DWORD PTR ?XMMStore@@3TXMMVector@@A+4
	addss	xmm0, DWORD PTR ?XMMStore@@3TXMMVector@@A+8
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR ?TestDistance@CDXEngine@@0MA	; CDXEngine::TestDistance
	fld	DWORD PTR ?TestDistance@CDXEngine@@0MA	; CDXEngine::TestDistance

; 370  : }

	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
?DX2D_GetDistance@CDXEngine@@QAEMPAUD3DXVECTOR3@@K@Z ENDP ; CDXEngine::DX2D_GetDistance
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
$T1 = -64						; size = 16
$T2 = -48						; size = 16
$T3 = -32						; size = 16
_this$ = -8						; size = 4
_ClipResult$ = -4					; size = 4
_Pos$ = 8						; size = 4
_Radius$ = 12						; size = 4
_Flags$ = 16						; size = 4
?DX2D_GetDistance@CDXEngine@@QAEMPAUD3DXVECTOR3@@MK@Z PROC ; CDXEngine::DX2D_GetDistance
; _this$ = ecx

; 346  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 347  : 	DWORD	ClipResult;
; 348  : 	//Store the radius
; 349  : 	Radius2D=Radius;

	movss	xmm0, DWORD PTR _Radius$[ebx]
	movss	DWORD PTR ?Radius2D@CDXEngine@@0MA, xmm0

; 350  : 	// get the position and make it camera relative
; 351  : 	XMMPos.Xmm =_mm_loadu_ps((float*)Pos);

	mov	eax, DWORD PTR _Pos$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR ?XMMPos@@3TXMMVector@@A, xmm0

; 352  : 	if(!(Flags & CAMERA_VERTICES))XMMPos.Xmm =_mm_sub_ps(XMMPos.Xmm, XMMCamera.Xmm);

	mov	ecx, DWORD PTR _Flags$[ebx]
	and	ecx, 8
	jne	SHORT $LN2@DX2D_GetDi
	movaps	xmm0, XMMWORD PTR ?XMMPos@@3TXMMVector@@A
	subps	xmm0, XMMWORD PTR ?XMMCamera@CDXEngine@@2TXMMVector@@A
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR ?XMMPos@@3TXMMVector@@A, xmm0
$LN2@DX2D_GetDi:

; 353  : 	// Check for object visibility, return NULL is not visible
; 354  : 	m_pD3DD->ComputeSphereVisibility((D3DVECTOR*)&XMMPos.d3d, &Radius2D, 1, 0, &ClipResult);

	lea	edx, DWORD PTR _ClipResult$[ebp]
	push	edx
	push	0
	push	1
	push	OFFSET ?Radius2D@CDXEngine@@0MA		; CDXEngine::Radius2D
	push	OFFSET ?XMMPos@@3TXMMVector@@A		; XMMPos
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+132]
	call	eax

; 355  : 	if(ClipResult&D3DSTATUS_DEFAULT) return -1.0f;

	mov	ecx, DWORD PTR _ClipResult$[ebp]
	and	ecx, 33550336				; 01fff000H
	je	SHORT $LN1@DX2D_GetDi
	fld	DWORD PTR __real@bf800000
	jmp	SHORT $LN3@DX2D_GetDi
$LN1@DX2D_GetDi:

; 356  : 	// setup the DISTANCE FROM CAMERA
; 357  : 	XMMStore.Xmm =_mm_mul_ps(XMMPos.Xmm, XMMPos.Xmm);

	movaps	xmm0, XMMWORD PTR ?XMMPos@@3TXMMVector@@A
	mulps	xmm0, XMMWORD PTR ?XMMPos@@3TXMMVector@@A
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	movaps	XMMWORD PTR ?XMMStore@@3TXMMVector@@A, xmm0

; 358  : 	return TestDistance = sqrtf( XMMStore.d3d.x + XMMStore.d3d.y + XMMStore.d3d.z );

	movss	xmm0, DWORD PTR ?XMMStore@@3TXMMVector@@A
	addss	xmm0, DWORD PTR ?XMMStore@@3TXMMVector@@A+4
	addss	xmm0, DWORD PTR ?XMMStore@@3TXMMVector@@A+8
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR ?TestDistance@CDXEngine@@0MA	; CDXEngine::TestDistance
	fld	DWORD PTR ?TestDistance@CDXEngine@@0MA	; CDXEngine::TestDistance
$LN3@DX2D_GetDi:

; 359  : }

	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	12					; 0000000cH
?DX2D_GetDistance@CDXEngine@@QAEMPAUD3DXVECTOR3@@MK@Z ENDP ; CDXEngine::DX2D_GetDistance
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
$T1 = -48						; size = 16
$T2 = -32						; size = 16
_this$ = -8						; size = 4
_ClipResult$ = -4					; size = 4
_Pos$ = 8						; size = 4
_Radius$ = 12						; size = 4
_Flags$ = 16						; size = 4
?DX2D_GetVisibility@CDXEngine@@QAE_NPAUD3DXVECTOR3@@MK@Z PROC ; CDXEngine::DX2D_GetVisibility
; _this$ = ecx

; 317  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx

; 318  : 	DWORD	ClipResult;
; 319  : 	//Store the radius
; 320  : 	Radius2D=Radius;

	movss	xmm0, DWORD PTR _Radius$[ebx]
	movss	DWORD PTR ?Radius2D@CDXEngine@@0MA, xmm0

; 321  : 	// get the position and make it camera relative
; 322  : 	XMMPos.Xmm=_mm_loadu_ps((float*)Pos);

	mov	eax, DWORD PTR _Pos$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR ?XMMPos@@3TXMMVector@@A, xmm0

; 323  : 	if(!(Flags & CAMERA_VERTICES)) XMMPos.Xmm =_mm_sub_ps(XMMPos.Xmm, XMMCamera.Xmm);

	mov	ecx, DWORD PTR _Flags$[ebx]
	and	ecx, 8
	jne	SHORT $LN2@DX2D_GetVi
	movaps	xmm0, XMMWORD PTR ?XMMPos@@3TXMMVector@@A
	subps	xmm0, XMMWORD PTR ?XMMCamera@CDXEngine@@2TXMMVector@@A
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	movaps	XMMWORD PTR ?XMMPos@@3TXMMVector@@A, xmm0
$LN2@DX2D_GetVi:

; 324  : 	// Check for object visibility, return NULL is not visible
; 325  : 	m_pD3DD->ComputeSphereVisibility((D3DVECTOR*)&XMMPos.d3d, &Radius2D, 1, 0, &ClipResult);

	lea	edx, DWORD PTR _ClipResult$[ebp]
	push	edx
	push	0
	push	1
	push	OFFSET ?Radius2D@CDXEngine@@0MA		; CDXEngine::Radius2D
	push	OFFSET ?XMMPos@@3TXMMVector@@A		; XMMPos
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+132]
	call	eax

; 326  : 	if(ClipResult&D3DSTATUS_DEFAULT) return false;

	mov	ecx, DWORD PTR _ClipResult$[ebp]
	and	ecx, 33550336				; 01fff000H
	je	SHORT $LN1@DX2D_GetVi
	xor	al, al
	jmp	SHORT $LN3@DX2D_GetVi
$LN1@DX2D_GetVi:

; 327  : 	return true;

	mov	al, 1
$LN3@DX2D_GetVi:

; 328  : }

	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	12					; 0000000cH
?DX2D_GetVisibility@CDXEngine@@QAE_NPAUD3DXVECTOR3@@MK@Z ENDP ; CDXEngine::DX2D_GetVisibility
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
$T1 = -48						; size = 16
$T2 = -32						; size = 16
_this$ = -8						; size = 4
_ClipResult$ = -4					; size = 4
_lpCenters$ = 8						; size = 4
_lpRadii$ = 12						; size = 4
_dwNumSpheres$ = 16					; size = 4
?ComputeSphereVisibility@CDXEngine@@QAEKPAU_D3DVECTOR@@PAMK@Z PROC ; CDXEngine::ComputeSphereVisibility
; _this$ = ecx

; 333  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx

; 334  : 	DWORD	ClipResult;
; 335  : 	XMMAcc=_mm_loadu_ps((float*)lpCenters);

	mov	eax, DWORD PTR _lpCenters$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR ?XMMAcc@@3T__m128@@A, xmm0	; XMMAcc

; 336  : 	XMMPos.Xmm=_mm_sub_ps(XMMAcc, XMMCamera.Xmm);

	movaps	xmm0, XMMWORD PTR ?XMMAcc@@3T__m128@@A	; XMMAcc
	subps	xmm0, XMMWORD PTR ?XMMCamera@CDXEngine@@2TXMMVector@@A
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	movaps	XMMWORD PTR ?XMMPos@@3TXMMVector@@A, xmm0

; 337  : 	// Check for object visibility, return NULL is not visible
; 338  : 	m_pD3DD->ComputeSphereVisibility((D3DVECTOR*)&XMMPos.d3d, lpRadii, dwNumSpheres, 0, &ClipResult);

	lea	ecx, DWORD PTR _ClipResult$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _dwNumSpheres$[ebx]
	push	edx
	mov	eax, DWORD PTR _lpRadii$[ebx]
	push	eax
	push	OFFSET ?XMMPos@@3TXMMVector@@A		; XMMPos
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+132]
	call	ecx

; 339  : 	
; 340  : 	return ClipResult;

	mov	eax, DWORD PTR _ClipResult$[ebp]

; 341  : 
; 342  : }

	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	12					; 0000000cH
?ComputeSphereVisibility@CDXEngine@@QAEKPAU_D3DVECTOR@@PAMK@Z ENDP ; CDXEngine::ComputeSphereVisibility
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
_StateHandle$ = -16					; size = 4
_i$1 = -12						; size = 4
_this$ = -8						; size = 4
_Flags$ = -4						; size = 4
?FlushDynamicObjects@CDXEngine@@QAEXXZ PROC		; CDXEngine::FlushDynamicObjects
; _this$ = ecx

; 1700 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1701 : 	// First of all save present renderer State
; 1702 : 	DWORD	StateHandle;
; 1703 : 	// Finished Drawing, unlock all Vertex Buffers
; 1704 : 	for(int i=0; i<MAX_2D_BUFFERS; i++)	Dyn2DVertexBuffer[i].Vb->Unlock();

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN6@FlushDynam
$LN5@FlushDynam:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN6@FlushDynam:
	cmp	DWORD PTR _i$1[ebp], 1
	jge	SHORT $LN4@FlushDynam
	mov	ecx, DWORD PTR _i$1[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[ecx]
	mov	eax, DWORD PTR _i$1[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR ?Dyn2DVertexBuffer@CDXEngine@@0PAUDyn2DBufferType@@A[eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+16]
	call	eax
	jmp	SHORT $LN5@FlushDynam
$LN4@FlushDynam:

; 1705 : 
; 1706 : 	CheckHR(m_pD3DD->CreateStateBlock(D3DSBT_ALL, &StateHandle));

	lea	ecx, DWORD PTR _StateHandle$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+168]
	call	edx
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 1707 : 
; 1708 : 
; 1709 : 	DXFlagsType	Flags;
; 1710 : 	m_FogLevel=m_LinearFogLevel;

	movss	xmm0, DWORD PTR ?m_LinearFogLevel@CDXEngine@@0MA
	movss	DWORD PTR ?m_FogLevel@CDXEngine@@0MA, xmm0

; 1711 : 
; 1712 : 	FlushInit();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushInit@CDXEngine@@AAEXXZ		; CDXEngine::FlushInit

; 1713 : 
; 1714 : #ifdef	DEBUG_2D_ENGINE	
; 1715 : 	REPORT_VALUE("2D Vertices", Dyn2DVertexBuffer[0].LastIndex);
; 1716 : #endif
; 1717 : 	SetStencilMode(STENCIL_CHECK);

	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStencilMode@CDXEngine@@QAEKK@Z	; CDXEngine::SetStencilMode

; 1718 : 
; 1719 : 	// unlock the Simple Buffer if used
; 1720 : 	if(TheVbManager.SimpleBuffer.VbPtr) {

	cmp	DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788664, 0
	je	SHORT $LN3@FlushDynam

; 1721 : 		TheVbManager.SimpleBuffer.Vb->Unlock();

	mov	eax, DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788660
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788660
	push	edx
	mov	eax, DWORD PTR [ecx+16]
	call	eax

; 1722 : 		TheVbManager.SimpleBuffer.VbPtr=NULL;

	mov	DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788664, 0
$LN3@FlushDynam:

; 1723 : 	}
; 1724 : 
; 1725 : 	/////////////////////// PROGRAM FOR 'SOLID' POINTS/LINES \\\\\\\\\\\\\\\\\\\\\
; 1726 : 
; 1727 : 	// Reset any previous state flag
; 1728 : 	Flags.w=0xffff;	SetRenderState(Flags, Flags, DISABLE);

	mov	DWORD PTR _Flags$[ebp], 65535		; 0000ffffH
	push	0
	mov	ecx, DWORD PTR _Flags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Flags$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRenderState@CDXEngine@@AAEXTDXFlagsType@@0_N@Z ; CDXEngine::SetRenderState

; 1729 : 	// adjust the flags for the surface
; 1730 : 	Flags.w=0;	Flags.b.Alpha=Flags.b.Point=Flags.b.VColor=1;

	mov	DWORD PTR _Flags$[ebp], 0
	mov	eax, DWORD PTR _Flags$[ebp]
	or	eax, 8
	mov	DWORD PTR _Flags$[ebp], eax
	mov	ecx, DWORD PTR _Flags$[ebp]
	or	ecx, 1024				; 00000400H
	mov	DWORD PTR _Flags$[ebp], ecx
	mov	edx, DWORD PTR _Flags$[ebp]
	or	edx, 1
	mov	DWORD PTR _Flags$[ebp], edx

; 1731 : 	// set the engine status
; 1732 : 	SetRenderState(Flags, Flags, ENABLE);

	push	1
	mov	eax, DWORD PTR _Flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Flags$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRenderState@CDXEngine@@AAEXTDXFlagsType@@0_N@Z ; CDXEngine::SetRenderState

; 1733 : 	// set the engine status
; 1734 : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE,TRUE);

	push	1
	push	27					; 0000001bH
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx

; 1735 : 	// Stup the Fog level fro this object
; 1736 : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_FOGEND,   *(DWORD *)(&m_FogLevel));

	mov	eax, DWORD PTR ?m_FogLevel@CDXEngine@@0MA
	push	eax
	push	37					; 00000025H
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 1737 : 	m_pD3DD->SetRenderState( D3DRENDERSTATE_CULLMODE, D3DCULL_NONE );

	push	1
	push	22					; 00000016H
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx

; 1738 : 	m_pD3DD->SetTextureStageState(0,D3DTSS_COLOROP,D3DTOP_DISABLE);

	push	1
	push	1
	push	0
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+148]
	call	eax

; 1739 : 	m_pD3DD->SetRenderState( D3DRENDERSTATE_LIGHTING, FALSE );

	push	0
	push	137					; 00000089H
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 1740 : 
; 1741 :     m_pD3DD->SetRenderState( D3DRENDERSTATE_DIFFUSEMATERIALSOURCE, D3DMCS_COLOR1 );

	push	1
	push	145					; 00000091H
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx

; 1742 :     m_pD3DD->SetRenderState( D3DRENDERSTATE_EMISSIVEMATERIALSOURCE, D3DMCS_COLOR2 );

	push	2
	push	148					; 00000094H
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 1743 : 
; 1744 : 	////////////////////////////// POINTS FLUSH \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
; 1745 : 	
; 1746 : 	if(TheVbManager.SimpleBuffer.MaxPoints){

	cmp	DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788676, 0
	je	SHORT $LN2@FlushDynam

; 1747 : 		// Make the draw
; 1748 : 		m_pD3DD->DrawPrimitiveVB(D3DPT_POINTLIST, TheVbManager.SimpleBuffer.Vb, POINTS_OFFSET, TheVbManager.SimpleBuffer.Points, 0 );

	push	0
	mov	ecx, DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788668
	push	ecx
	push	0
	mov	edx, DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788660
	push	edx
	push	1
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+124]
	call	eax

; 1749 : 		TheVbManager.SimpleBuffer.Points=TheVbManager.SimpleBuffer.MaxPoints=0;

	mov	DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788676, 0
	mov	ecx, DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788676
	mov	DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788668, ecx
$LN2@FlushDynam:

; 1750 : 	}
; 1751 : 
; 1752 : 
; 1753 : 	////////////////////////////// LINES FLUSH \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
; 1754 : 	
; 1755 : 	if(TheVbManager.SimpleBuffer.MaxLines){

	cmp	DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788680, 0
	je	SHORT $LN1@FlushDynam

; 1756 : 		// Make the draw
; 1757 : 		m_pD3DD->DrawPrimitiveVB(D3DPT_LINELIST, TheVbManager.SimpleBuffer.Vb, LINES_OFFSET, TheVbManager.SimpleBuffer.MaxLines * 2, 0 );

	push	0
	mov	edx, DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788680
	shl	edx, 1
	push	edx
	push	16384					; 00004000H
	mov	eax, DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788660
	push	eax
	push	2
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+124]
	call	ecx

; 1758 : 		TheVbManager.SimpleBuffer.Lines=TheVbManager.SimpleBuffer.MaxLines=0;

	mov	DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788680, 0
	mov	edx, DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788680
	mov	DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788672, edx
$LN1@FlushDynam:

; 1759 : 	}
; 1760 : 
; 1761 : #ifdef	DEBUG_2D_ENGINE	
; 1762 : 	START_PROFILE("DYN FLUSH:");
; 1763 : #endif
; 1764 : 	DX2D_Flush2DObjects();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DX2D_Flush2DObjects@CDXEngine@@AAEXXZ	; CDXEngine::DX2D_Flush2DObjects

; 1765 : #ifdef	DEBUG_2D_ENGINE	
; 1766 : 	STOP_PROFILE("DYN FLUSH:");
; 1767 : #endif	
; 1768 : 	//CheckHR(m_pD3DD->ApplyStateBlock(StateHandle));
; 1769 : 	m_pD3DD->ApplyStateBlock(StateHandle);

	mov	eax, DWORD PTR _StateHandle$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+156]
	call	ecx

; 1770 : 	CheckHR(m_pD3DD->DeleteStateBlock(StateHandle));

	mov	edx, DWORD PTR _StateHandle$[ebp]
	push	edx
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+164]
	call	eax
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 1771 : 
; 1772 : 	// Reset any previous state flag
; 1773 : 	ResetFeatures();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetFeatures@CDXEngine@@AAEXXZ	; CDXEngine::ResetFeatures

; 1774 : 
; 1775 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FlushDynamicObjects@CDXEngine@@QAEXXZ ENDP		; CDXEngine::FlushDynamicObjects
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Ti$ = 8						; size = 4
_Index$ = 12						; size = 4
_u$ = 16						; size = 4
_v$ = 20						; size = 4
?DX2D_GetTextureUV@CDXEngine@@QAEXPAVCTextureItem@@KAAM1@Z PROC ; CDXEngine::DX2D_GetTextureUV
; _this$ = ecx

; 207  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 208  : 	if(!Ti) return;

	cmp	DWORD PTR _Ti$[ebp], 0
	jne	SHORT $LN1@DX2D_GetTe
	jmp	SHORT $LN2@DX2D_GetTe
$LN1@DX2D_GetTe:

; 209  : 	u=Ti->TuTv[Index][0];

	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _Ti$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8+36]
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx], edx

; 210  : 	v=Ti->TuTv[Index][1];

	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _Ti$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8+36]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx], edx
$LN2@DX2D_GetTe:

; 211  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?DX2D_GetTextureUV@CDXEngine@@QAEXPAVCTextureItem@@KAAM1@Z ENDP ; CDXEngine::DX2D_GetTextureUV
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
tv77 = -36						; size = 4
$T1 = -32						; size = 4
_Tsl$ = -28						; size = 4
$T2 = -24						; size = 4
_this$ = -20						; size = 4
$T3 = -16						; size = 4
_Tl$ = -12						; size = 4
_Ti$ = -8						; size = 4
_Ts$ = -4						; size = 4
?ReleaseTextures@CDXEngine@@QAEXXZ PROC			; CDXEngine::ReleaseTextures
; _this$ = ecx

; 239  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 240  : 	CTextureSurface	*Ts=TexturesList, *Tsl;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+6732]
	mov	DWORD PTR _Ts$[ebp], ecx
$LN4@ReleaseTex:

; 241  : 	CTextureItem	*Ti, *Tl;
; 242  : 	
; 243  : 	// Release all Textures
; 244  : 	while(Ts){

	cmp	DWORD PTR _Ts$[ebp], 0
	je	SHORT $LN3@ReleaseTex

; 245  : 		Ti=Ts->ItemList;

	mov	edx, DWORD PTR _Ts$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	DWORD PTR _Ti$[ebp], eax
$LN2@ReleaseTex:

; 246  : 		// Release all items of the texture surface
; 247  : 		while(Tl=Ti){

	mov	ecx, DWORD PTR _Ti$[ebp]
	mov	DWORD PTR _Tl$[ebp], ecx
	cmp	DWORD PTR _Tl$[ebp], 0
	je	SHORT $LN1@ReleaseTex

; 248  : 			Ti=Ti->Next;

	mov	edx, DWORD PTR _Ti$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _Ti$[ebp], eax

; 249  : 			delete Tl;

	mov	ecx, DWORD PTR _Tl$[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 250  : 		}

	jmp	SHORT $LN2@ReleaseTex
$LN1@ReleaseTex:

; 251  : 		Ts->Tex.FreeAll();

	mov	ecx, DWORD PTR _Ts$[ebp]
	add	ecx, 4
	call	?FreeAll@Texture@@QAEXXZ		; Texture::FreeAll

; 252  : 		Tsl=Ts;

	mov	eax, DWORD PTR _Ts$[ebp]
	mov	DWORD PTR _Tsl$[ebp], eax

; 253  : 		Ts=Ts->Next;

	mov	ecx, DWORD PTR _Ts$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _Ts$[ebp], edx

; 254  : 		delete Tsl;

	mov	eax, DWORD PTR _Tsl$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN7@ReleaseTex
	push	1
	mov	ecx, DWORD PTR $T3[ebp]
	call	??_GCTextureSurface@@QAEPAXI@Z
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN8@ReleaseTex
$LN7@ReleaseTex:
	mov	DWORD PTR tv77[ebp], 0
$LN8@ReleaseTex:

; 255  : 	}

	jmp	SHORT $LN4@ReleaseTex
$LN3@ReleaseTex:

; 256  : 	TexturesList=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6732], 0

; 257  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ReleaseTextures@CDXEngine@@QAEXXZ ENDP			; CDXEngine::ReleaseTextures
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
tv76 = -20						; size = 4
$T1 = -16						; size = 4
$T2 = -12						; size = 4
_this$ = -8						; size = 4
_Ts$ = -4						; size = 4
?CleanUpTexturesOnDevice@CDXEngine@@QAEXXZ PROC		; CDXEngine::CleanUpTexturesOnDevice
; _this$ = ecx

; 172  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 173  : 	if (!TexturesList)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+6732], 0
	jne	SHORT $LN4@CleanUpTex

; 174  : 		return;

	jmp	SHORT $LN5@CleanUpTex
$LN4@CleanUpTex:

; 175  : 
; 176  : 	CTextureSurface	*Ts=TexturesList;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+6732]
	mov	DWORD PTR _Ts$[ebp], edx
$LN3@CleanUpTex:

; 177  : 	
; 178  : 	// Release all Textures
; 179  : 	while(Ts){

	cmp	DWORD PTR _Ts$[ebp], 0
	je	SHORT $LN2@CleanUpTex

; 180  : 		Ts->Tex.FreeAll();

	mov	ecx, DWORD PTR _Ts$[ebp]
	add	ecx, 4
	call	?FreeAll@Texture@@QAEXXZ		; Texture::FreeAll

; 181  : 		Ts=Ts->Next;

	mov	eax, DWORD PTR _Ts$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Ts$[ebp], ecx

; 182  : 	}

	jmp	SHORT $LN3@CleanUpTex
$LN2@CleanUpTex:

; 183  : 
; 184  : 	if(ZeroTex){

	cmp	DWORD PTR ?ZeroTex@CDXEngine@@0PAVTextureHandle@@A, 0 ; CDXEngine::ZeroTex
	je	SHORT $LN5@CleanUpTex

; 185  : 		//ZeroTex->m_pDDS->Release();
; 186  : 		delete ZeroTex;

	mov	edx, DWORD PTR ?ZeroTex@CDXEngine@@0PAVTextureHandle@@A ; CDXEngine::ZeroTex
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN7@CleanUpTex
	push	1
	mov	ecx, DWORD PTR $T2[ebp]
	call	??_GTextureHandle@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN8@CleanUpTex
$LN7@CleanUpTex:
	mov	DWORD PTR tv76[ebp], 0
$LN8@CleanUpTex:

; 187  : 		ZeroTex=NULL;

	mov	DWORD PTR ?ZeroTex@CDXEngine@@0PAVTextureHandle@@A, 0 ; CDXEngine::ZeroTex
$LN5@CleanUpTex:

; 188  : 	}
; 189  : 
; 190  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CleanUpTexturesOnDevice@CDXEngine@@QAEXXZ ENDP		; CDXEngine::CleanUpTexturesOnDevice
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_a$1 = -4						; size = 4
_Ti$ = 8						; size = 4
_Item$ = 12						; size = 4
?DX2D_GetTextureCoords@CDXEngine@@QAEXPAVCTextureItem@@PAVCDrawBaseItem@@@Z PROC ; CDXEngine::DX2D_GetTextureCoords
; _this$ = ecx

; 195  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 196  : 	if(!Ti) return;

	cmp	DWORD PTR _Ti$[ebp], 0
	jne	SHORT $LN4@DX2D_GetTe
	jmp	SHORT $LN5@DX2D_GetTe
$LN4@DX2D_GetTe:

; 197  : 	// Assign vertices of the Passed texture
; 198  : 	for(int a=0; a<4; a++) { 

	mov	DWORD PTR _a$1[ebp], 0
	jmp	SHORT $LN3@DX2D_GetTe
$LN2@DX2D_GetTe:
	mov	eax, DWORD PTR _a$1[ebp]
	add	eax, 1
	mov	DWORD PTR _a$1[ebp], eax
$LN3@DX2D_GetTe:
	cmp	DWORD PTR _a$1[ebp], 4
	jge	SHORT $LN1@DX2D_GetTe

; 199  : 		Item->Vtx[a].tu=Ti->TuTv[a][0];

	mov	ecx, DWORD PTR _a$1[ebp]
	mov	edx, DWORD PTR _Ti$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8+36]
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _a$1[ebp]
	imul	edx, 28					; 0000001cH
	mov	esi, DWORD PTR _Item$[ebp]
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR [esi+edx+32], eax

; 200  : 		Item->Vtx[a].tv=Ti->TuTv[a][1];

	mov	ecx, DWORD PTR _a$1[ebp]
	mov	edx, DWORD PTR _Ti$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8+36]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _a$1[ebp]
	imul	edx, 28					; 0000001cH
	mov	esi, DWORD PTR _Item$[ebp]
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR [esi+edx+36], eax

; 201  : 	}

	jmp	SHORT $LN2@DX2D_GetTe
$LN1@DX2D_GetTe:
$LN5@DX2D_GetTe:

; 202  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?DX2D_GetTextureCoords@CDXEngine@@QAEXPAVCTextureItem@@PAVCDrawBaseItem@@@Z ENDP ; CDXEngine::DX2D_GetTextureCoords
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_Ts$ = -8						; size = 4
_Ti$ = -4						; size = 4
_TexName$ = 8						; size = 4
?DX2D_GetTextureItem@CDXEngine@@QAEPAVCTextureItem@@PAD@Z PROC ; CDXEngine::DX2D_GetTextureItem
; _this$ = ecx

; 217  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 218  : 	// look for an item owning such a name
; 219  : 	CTextureSurface *Ts=TexturesList;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+6732]
	mov	DWORD PTR _Ts$[ebp], ecx
$LN5@DX2D_GetTe:

; 220  : 	CTextureItem	*Ti;
; 221  : 	// Look thru the list
; 222  : 	while(Ts){

	cmp	DWORD PTR _Ts$[ebp], 0
	je	SHORT $LN4@DX2D_GetTe

; 223  : 		// look thru loaded texture surfaces
; 224  : 		Ti=Ts->ItemList;

	mov	edx, DWORD PTR _Ts$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	DWORD PTR _Ti$[ebp], eax
$LN3@DX2D_GetTe:

; 225  : 		// for an item owning such name
; 226  : 		while(Ti){

	cmp	DWORD PTR _Ti$[ebp], 0
	je	SHORT $LN2@DX2D_GetTe

; 227  : 			// if found, assign coords and exit
; 228  : 			if(!strcmp(Ti->Name, TexName)) return(Ti);

	mov	ecx, DWORD PTR _TexName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Ti$[ebp]
	add	edx, 4
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@DX2D_GetTe
	mov	eax, DWORD PTR _Ti$[ebp]
	jmp	SHORT $LN6@DX2D_GetTe
$LN1@DX2D_GetTe:

; 229  : 			// else next item
; 230  : 			Ti=Ti->Next;

	mov	eax, DWORD PTR _Ti$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Ti$[ebp], ecx

; 231  : 		}

	jmp	SHORT $LN3@DX2D_GetTe
$LN2@DX2D_GetTe:

; 232  : 		Ts=Ts->Next;

	mov	edx, DWORD PTR _Ts$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _Ts$[ebp], eax

; 233  : 	}

	jmp	SHORT $LN5@DX2D_GetTe
$LN4@DX2D_GetTe:

; 234  : 	return NULL;

	xor	eax, eax
$LN6@DX2D_GetTe:

; 235  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?DX2D_GetTextureItem@CDXEngine@@QAEPAVCTextureItem@@PAD@Z ENDP ; CDXEngine::DX2D_GetTextureItem
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_Ti$ = -8						; size = 4
_Ts$ = -4						; size = 4
_TexName$ = 8						; size = 4
?GetTextureHandle@CDXEngine@@QAEKPAD@Z PROC		; CDXEngine::GetTextureHandle
; _this$ = ecx

; 134  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 135  : 
; 136  : 	// look for an item owning such a name
; 137  : 	CTextureSurface *Ts=TexturesList;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+6732]
	mov	DWORD PTR _Ts$[ebp], ecx
$LN5@GetTexture:

; 138  : 	CTextureItem	*Ti;
; 139  : 	// Look thru the list
; 140  : 	while(Ts){

	cmp	DWORD PTR _Ts$[ebp], 0
	je	SHORT $LN4@GetTexture

; 141  : 		// look thru loaded texture surfaces
; 142  : 		Ti=Ts->ItemList;

	mov	edx, DWORD PTR _Ts$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	DWORD PTR _Ti$[ebp], eax
$LN3@GetTexture:

; 143  : 		// for an item owning such name
; 144  : 		while(Ti){

	cmp	DWORD PTR _Ti$[ebp], 0
	je	SHORT $LN2@GetTexture

; 145  : 			// if found, return the surface handle
; 146  : 			if(!strcmp(Ti->Name, TexName)) return Ts->Tex.TexHandle();

	mov	ecx, DWORD PTR _TexName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Ti$[ebp]
	add	edx, 4
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@GetTexture
	mov	ecx, DWORD PTR _Ts$[ebp]
	add	ecx, 4
	call	?TexHandle@Texture@@QAEKXZ		; Texture::TexHandle
	jmp	SHORT $LN6@GetTexture
$LN1@GetTexture:

; 147  : 			// else next item
; 148  : 			Ti=Ti->Next;

	mov	eax, DWORD PTR _Ti$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Ti$[ebp], ecx

; 149  : 		}

	jmp	SHORT $LN3@GetTexture
$LN2@GetTexture:

; 150  : 		Ts=Ts->Next;

	mov	edx, DWORD PTR _Ts$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _Ts$[ebp], eax

; 151  : 	}

	jmp	SHORT $LN5@GetTexture
$LN4@GetTexture:

; 152  : 
; 153  : 	// if here, no texture item owning such name found
; 154  : 	return NULL;

	xor	eax, eax
$LN6@GetTexture:

; 155  : 
; 156  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetTextureHandle@CDXEngine@@QAEKPAD@Z ENDP		; CDXEngine::GetTextureHandle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
tv418 = -1404						; size = 4
tv430 = -1400						; size = 4
$T2 = -1396						; size = 4
tv424 = -1392						; size = 4
tv436 = -1388						; size = 4
$T3 = -1384						; size = 4
tv74 = -1380						; size = 4
$T4 = -1376						; size = 4
$T5 = -1372						; size = 4
tv133 = -1368						; size = 4
tv85 = -1364						; size = 4
$T6 = -1360						; size = 4
$T7 = -1356						; size = 4
_this$ = -1352						; size = 4
tv238 = -1348						; size = 4
$T8 = -1344						; size = 4
_SizeY$9 = -1340					; size = 4
_SizeX$10 = -1336					; size = 4
$T11 = -1332						; size = 4
_fp$ = -1328						; size = 4
_Name$ = -1324						; size = 4
_PosY$12 = -1320					; size = 4
_PosX$13 = -1316					; size = 4
_Unit$ = -1312						; size = 4
_b$ = -1308						; size = 4
_Ts$ = -1304						; size = 4
_Ti$ = -1300						; size = 4
_Buffer$ = -1296					; size = 1024
_Path$ = -272						; size = 256
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_FileName$ = 8						; size = 4
?LoadTexture@CDXEngine@@QAEXPAD@Z PROC			; CDXEngine::LoadTexture
; _this$ = ecx

; 52   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LoadTexture@CDXEngine@@QAEXPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1392				; 00000570H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 53   : #ifndef	DEBUG_ENGINE	
; 54   : 	char	Path[256];
; 55   : 	char	Buffer[1024];
; 56   : 	FILE	*fp;
; 57   : 	CTextureSurface *Ts=TexturesList;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+6732]
	mov	DWORD PTR _Ts$[ebp], ecx

; 58   : 	CTextureItem	*Ti;
; 59   : 
; 60   : 
; 61   : 	// ok...The surface manager
; 62   : 	if(!Ts) Ts=TexturesList=new CTextureSurface();

	cmp	DWORD PTR _Ts$[ebp], 0
	jne	SHORT $LN18@LoadTextur
	push	64					; 00000040H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN21@LoadTextur
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0CTextureSurface@@QAE@XZ		; CTextureSurface::CTextureSurface
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN22@LoadTextur
$LN21@LoadTextur:
	mov	DWORD PTR tv74[ebp], 0
$LN22@LoadTextur:
	mov	edx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T7[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T7[ebp]
	mov	DWORD PTR [eax+6732], ecx
	mov	edx, DWORD PTR $T7[ebp]
	mov	DWORD PTR _Ts$[ebp], edx

; 63   : 	else {

	jmp	$LN17@LoadTextur
$LN18@LoadTextur:

; 64   : 		// look for last texture manager
; 65   : 		while(Ts->Next) Ts=Ts->Next;

	mov	eax, DWORD PTR _Ts$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN15@LoadTextur
	mov	ecx, DWORD PTR _Ts$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _Ts$[ebp], edx
	jmp	SHORT $LN18@LoadTextur
$LN15@LoadTextur:

; 66   : 		// append the new one
; 67   : 		Ts->Next=new CTextureSurface();

	push	64					; 00000040H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN23@LoadTextur
	mov	ecx, DWORD PTR $T8[ebp]
	call	??0CTextureSurface@@QAE@XZ		; CTextureSurface::CTextureSurface
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN24@LoadTextur
$LN23@LoadTextur:
	mov	DWORD PTR tv85[ebp], 0
$LN24@LoadTextur:
	mov	eax, DWORD PTR tv85[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _Ts$[ebp]
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx], edx

; 68   : 		Ts=Ts->Next;

	mov	eax, DWORD PTR _Ts$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Ts$[ebp], ecx
$LN17@LoadTextur:

; 69   : 	}
; 70   : 
; 71   : 	// ok, setup the file name for the texture
; 72   : 	strncpy(Ts->FileName, FileName, sizeof(Ts->FileName)-5);

	push	27					; 0000001bH
	mov	edx, DWORD PTR _FileName$[ebp]
	push	edx
	mov	eax, DWORD PTR _Ts$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	call	_strncpy
	add	esp, 12					; 0000000cH

; 73   : 	strcat(Ts->FileName,".DDS");

	push	OFFSET ??_C@_04LFFPHNGG@?4DDS?$AA@
	mov	ecx, DWORD PTR _Ts$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	call	_strcat
	add	esp, 8

; 74   : 
; 75   : 	// Default to a 1st Item with texture Name and full surface covering
; 76   : 	Ti=Ts->ItemList=new CTextureItem;

	push	68					; 00000044H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T11[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T11[ebp], 0
	je	SHORT $LN25@LoadTextur
	mov	ecx, DWORD PTR $T11[ebp]
	call	??0CTextureItem@@QAE@XZ			; CTextureItem::CTextureItem
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN26@LoadTextur
$LN25@LoadTextur:
	mov	DWORD PTR tv133[ebp], 0
$LN26@LoadTextur:
	mov	edx, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T6[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _Ts$[ebp]
	mov	ecx, DWORD PTR $T6[ebp]
	mov	DWORD PTR [eax+60], ecx
	mov	edx, DWORD PTR $T6[ebp]
	mov	DWORD PTR _Ti$[ebp], edx

; 77   : 	strncpy(Ti->Name, FileName, sizeof(Ti->Name));

	push	32					; 00000020H
	mov	eax, DWORD PTR _FileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Ti$[ebp]
	add	ecx, 4
	push	ecx
	call	_strncpy
	add	esp, 12					; 0000000cH

; 78   : 	Ti->TuTv[0][0]=0.0f;		Ti->TuTv[0][1]=0.0f;

	mov	edx, 8
	imul	edx, 0
	mov	eax, DWORD PTR _Ti$[ebp]
	lea	ecx, DWORD PTR [eax+edx+36]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 8
	imul	eax, 0
	mov	ecx, DWORD PTR _Ti$[ebp]
	lea	edx, DWORD PTR [ecx+eax+36]
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+eax], xmm0

; 79   : 	Ti->TuTv[1][0]=1.0f;		Ti->TuTv[1][1]=0.0f;

	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR _Ti$[ebp]
	lea	eax, DWORD PTR [edx+ecx+36]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 8
	shl	edx, 0
	mov	eax, DWORD PTR _Ti$[ebp]
	lea	ecx, DWORD PTR [eax+edx+36]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0

; 80   : 	Ti->TuTv[2][0]=1.0f;		Ti->TuTv[2][1]=1.0f;

	mov	eax, 8
	shl	eax, 1
	mov	ecx, DWORD PTR _Ti$[ebp]
	lea	edx, DWORD PTR [ecx+eax+36]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+eax], xmm0
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, DWORD PTR _Ti$[ebp]
	lea	eax, DWORD PTR [edx+ecx+36]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+ecx], xmm0

; 81   : 	Ti->TuTv[3][0]=0.0f;		Ti->TuTv[3][1]=1.0f;

	mov	edx, 8
	imul	edx, 3
	mov	eax, DWORD PTR _Ti$[ebp]
	lea	ecx, DWORD PTR [eax+edx+36]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 8
	imul	eax, 3
	mov	ecx, DWORD PTR _Ti$[ebp]
	lea	edx, DWORD PTR [ecx+eax+36]
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+eax], xmm0

; 82   : 
; 83   : 	// look for the Texture Items name
; 84   : 	sprintf (Path, "%s\\terrdata\\MiscTex\\%s.ITM", FalconDataDirectory, FileName);

	mov	ecx, DWORD PTR _FileName$[ebp]
	push	ecx
	push	OFFSET ?FalconDataDirectory@@3PADA	; FalconDataDirectory
	push	OFFSET ??_C@_0BL@PCCLNBEF@?$CFs?2terrdata?2MiscTex?2?$CFs?4ITM?$AA@
	lea	edx, DWORD PTR _Path$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 85   : 	fp = fopen(Path, "r");

	push	OFFSET ??_C@_01KDCPPGHE@r?$AA@
	lea	eax, DWORD PTR _Path$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 86   : 
; 87   : 	// if not found return
; 88   : 	if(!fp) return;		

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN14@LoadTextur
	jmp	$LN19@LoadTextur
$LN14@LoadTextur:

; 89   : 
; 90   : 	char	*Name;
; 91   : 	int		 b;
; 92   : 	float	Unit=1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _Unit$[ebp], xmm0
$LN34@LoadTextur:

; 93   : 	// ok, now the parsing
; 94   : 	while(1){

	mov	ecx, 1
	test	ecx, ecx
	je	$LN12@LoadTextur

; 95   : 		// if EOF exit here
; 96   : 		if(!fgets(Buffer, sizeof Buffer, fp)) { fclose (fp); return; }

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	push	1024					; 00000400H
	lea	eax, DWORD PTR _Buffer$[ebp]
	push	eax
	call	_fgets
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN11@LoadTextur
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	_fclose
	add	esp, 4
	jmp	$LN19@LoadTextur
$LN11@LoadTextur:

; 97   : 		// Skip if a comment, or a New Line
; 98   : 		if (Buffer[0] == '#' || Buffer[0] == ';' || Buffer[0] == '\n')

	mov	edx, 1
	imul	edx, 0
	movsx	eax, BYTE PTR _Buffer$[ebp+edx]
	cmp	eax, 35					; 00000023H
	je	SHORT $LN9@LoadTextur
	mov	ecx, 1
	imul	ecx, 0
	movsx	edx, BYTE PTR _Buffer$[ebp+ecx]
	cmp	edx, 59					; 0000003bH
	je	SHORT $LN9@LoadTextur
	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _Buffer$[ebp+eax]
	cmp	ecx, 10					; 0000000aH
	jne	SHORT $LN10@LoadTextur
$LN9@LoadTextur:

; 99   : 			continue;

	jmp	$LN34@LoadTextur
$LN10@LoadTextur:

; 100  : 		
; 101  : 		// Skip initial Spaces or TABs
; 102  : 		for(b=0; b<sizeof(Buffer) && (Buffer[b]==' ' || Buffer[b]=='\t'); b++);

	mov	DWORD PTR _b$[ebp], 0
	jmp	SHORT $LN8@LoadTextur
$LN7@LoadTextur:
	mov	edx, DWORD PTR _b$[ebp]
	add	edx, 1
	mov	DWORD PTR _b$[ebp], edx
$LN8@LoadTextur:
	cmp	DWORD PTR _b$[ebp], 1024		; 00000400H
	jae	SHORT $LN6@LoadTextur
	mov	eax, DWORD PTR _b$[ebp]
	movsx	ecx, BYTE PTR _Buffer$[ebp+eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN5@LoadTextur
	mov	edx, DWORD PTR _b$[ebp]
	movsx	eax, BYTE PTR _Buffer$[ebp+edx]
	cmp	eax, 9
	jne	SHORT $LN6@LoadTextur
$LN5@LoadTextur:
	jmp	SHORT $LN7@LoadTextur
$LN6@LoadTextur:

; 103  : 		
; 104  : 		// Ok, get the Item Name
; 105  : 		Name=strtok(&Buffer[b],"=\n");

	push	OFFSET ??_C@_02NGOCLIKE@?$DN?6?$AA@
	mov	ecx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR _Buffer$[ebp+ecx]
	push	edx
	call	_strtok
	add	esp, 8
	mov	DWORD PTR _Name$[ebp], eax

; 106  : 		// Check if Unit Command
; 107  : 		if(!strcmp(Name,"Unit")){

	push	OFFSET ??_C@_04BOICIEDE@Unit?$AA@
	mov	eax, DWORD PTR _Name$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@LoadTextur

; 108  : 			Unit=TokenF(0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	?TokenF@@YAMM@Z				; TokenF
	add	esp, 4
	fstp	DWORD PTR _Unit$[ebp]

; 109  : 			continue;

	jmp	$LN34@LoadTextur
$LN4@LoadTextur:

; 110  : 		}
; 111  : 		if(Name){

	cmp	DWORD PTR _Name$[ebp], 0
	je	$LN3@LoadTextur

; 112  : 			Ti=Ts->ItemList;

	mov	ecx, DWORD PTR _Ts$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR _Ti$[ebp], edx
$LN2@LoadTextur:

; 113  : 			// look for last texture manager
; 114  : 			while(Ti->Next) Ti=Ti->Next;

	mov	eax, DWORD PTR _Ti$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@LoadTextur
	mov	ecx, DWORD PTR _Ti$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _Ti$[ebp], edx
	jmp	SHORT $LN2@LoadTextur
$LN1@LoadTextur:

; 115  : 			// append the new one
; 116  : 			Ti->Next=new CTextureItem();

	push	68					; 00000044H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN27@LoadTextur
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0CTextureItem@@QAE@XZ			; CTextureItem::CTextureItem
	mov	DWORD PTR tv238[ebp], eax
	jmp	SHORT $LN28@LoadTextur
$LN27@LoadTextur:
	mov	DWORD PTR tv238[ebp], 0
$LN28@LoadTextur:
	mov	eax, DWORD PTR tv238[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _Ti$[ebp]
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], edx

; 117  : 			Ti=Ti->Next;

	mov	eax, DWORD PTR _Ti$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Ti$[ebp], ecx
$LN3@LoadTextur:

; 118  : 		}
; 119  : 
; 120  : 		strncpy(Ti->Name, Name, sizeof(Ti->Name));

	push	32					; 00000020H
	mov	edx, DWORD PTR _Name$[ebp]
	push	edx
	mov	eax, DWORD PTR _Ti$[ebp]
	add	eax, 4
	push	eax
	call	_strncpy

; 121  : 		// Get the U/V Coords
; 122  : 		float	PosX=TokenF(0)*Unit, PosY=TokenF(0)*Unit, SizeX=TokenF(0)*Unit, SizeY=TokenF(0)*Unit;

	add	esp, 8
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	?TokenF@@YAMM@Z				; TokenF
	add	esp, 4
	fstp	DWORD PTR tv418[ebp]
	movss	xmm0, DWORD PTR tv418[ebp]
	mulss	xmm0, DWORD PTR _Unit$[ebp]
	movss	DWORD PTR _PosX$13[ebp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	?TokenF@@YAMM@Z				; TokenF
	add	esp, 4
	fstp	DWORD PTR tv424[ebp]
	movss	xmm0, DWORD PTR tv424[ebp]
	mulss	xmm0, DWORD PTR _Unit$[ebp]
	movss	DWORD PTR _PosY$12[ebp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	?TokenF@@YAMM@Z				; TokenF
	add	esp, 4
	fstp	DWORD PTR tv430[ebp]
	movss	xmm0, DWORD PTR tv430[ebp]
	mulss	xmm0, DWORD PTR _Unit$[ebp]
	movss	DWORD PTR _SizeX$10[ebp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	?TokenF@@YAMM@Z				; TokenF
	add	esp, 4
	fstp	DWORD PTR tv436[ebp]
	movss	xmm0, DWORD PTR tv436[ebp]
	mulss	xmm0, DWORD PTR _Unit$[ebp]
	movss	DWORD PTR _SizeY$9[ebp], xmm0

; 123  : 		Ti->TuTv[0][0]=PosX;		Ti->TuTv[0][1]=PosY;

	mov	ecx, 8
	imul	ecx, 0
	mov	edx, DWORD PTR _Ti$[ebp]
	lea	eax, DWORD PTR [edx+ecx+36]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR _PosX$13[ebp]
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 8
	imul	edx, 0
	mov	eax, DWORD PTR _Ti$[ebp]
	lea	ecx, DWORD PTR [eax+edx+36]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _PosY$12[ebp]
	movss	DWORD PTR [ecx+edx], xmm0

; 124  : 		Ti->TuTv[1][0]=PosX+SizeX;	Ti->TuTv[1][1]=PosY;

	movss	xmm0, DWORD PTR _PosX$13[ebp]
	addss	xmm0, DWORD PTR _SizeX$10[ebp]
	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _Ti$[ebp]
	lea	edx, DWORD PTR [ecx+eax+36]
	mov	eax, 4
	imul	eax, 0
	movss	DWORD PTR [edx+eax], xmm0
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR _Ti$[ebp]
	lea	eax, DWORD PTR [edx+ecx+36]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _PosY$12[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 125  : 		Ti->TuTv[2][0]=PosX+SizeX;	Ti->TuTv[2][1]=PosY+SizeY;

	movss	xmm0, DWORD PTR _PosX$13[ebp]
	addss	xmm0, DWORD PTR _SizeX$10[ebp]
	mov	edx, 8
	shl	edx, 1
	mov	eax, DWORD PTR _Ti$[ebp]
	lea	ecx, DWORD PTR [eax+edx+36]
	mov	edx, 4
	imul	edx, 0
	movss	DWORD PTR [ecx+edx], xmm0
	movss	xmm0, DWORD PTR _PosY$12[ebp]
	addss	xmm0, DWORD PTR _SizeY$9[ebp]
	mov	eax, 8
	shl	eax, 1
	mov	ecx, DWORD PTR _Ti$[ebp]
	lea	edx, DWORD PTR [ecx+eax+36]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR [edx+eax], xmm0

; 126  : 		Ti->TuTv[3][0]=PosX;		Ti->TuTv[3][1]=PosY+SizeY;

	mov	ecx, 8
	imul	ecx, 3
	mov	edx, DWORD PTR _Ti$[ebp]
	lea	eax, DWORD PTR [edx+ecx+36]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR _PosX$13[ebp]
	movss	DWORD PTR [eax+ecx], xmm0
	movss	xmm0, DWORD PTR _PosY$12[ebp]
	addss	xmm0, DWORD PTR _SizeY$9[ebp]
	mov	edx, 8
	imul	edx, 3
	mov	eax, DWORD PTR _Ti$[ebp]
	lea	ecx, DWORD PTR [eax+edx+36]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR [ecx+edx], xmm0

; 127  : 	}

	jmp	$LN34@LoadTextur
$LN12@LoadTextur:
$LN19@LoadTextur:

; 128  : #endif
; 129  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?LoadTexture@CDXEngine@@QAEXPAD@Z$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?LoadTexture@CDXEngine@@QAEXPAD@Z$1:
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?LoadTexture@CDXEngine@@QAEXPAD@Z$2:
	mov	eax, DWORD PTR $T11[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?LoadTexture@CDXEngine@@QAEXPAD@Z$3:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?LoadTexture@CDXEngine@@QAEXPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1396]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LoadTexture@CDXEngine@@QAEXPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LoadTexture@CDXEngine@@QAEXPAD@Z ENDP			; CDXEngine::LoadTexture
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_Ts$ = -4						; size = 4
?SetupTexturesOnDevice@CDXEngine@@QAEXXZ PROC		; CDXEngine::SetupTexturesOnDevice
; _this$ = ecx

; 160  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 161  : 	CTextureSurface *Ts=TexturesList;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+6732]
	mov	DWORD PTR _Ts$[ebp], ecx
$LN2@SetupTextu:

; 162  : 	while(Ts){

	cmp	DWORD PTR _Ts$[ebp], 0
	je	SHORT $LN1@SetupTextu

; 163  : 		Ts->Tex.LoadAndCreate(Ts->FileName,MPR_TI_DDS);

	push	256					; 00000100H
	mov	edx, DWORD PTR _Ts$[ebp]
	add	edx, 28					; 0000001cH
	push	edx
	mov	ecx, DWORD PTR _Ts$[ebp]
	add	ecx, 4
	call	?LoadAndCreate@Texture@@QAEHPADK@Z	; Texture::LoadAndCreate

; 164  : 		Ts=Ts->Next;

	mov	eax, DWORD PTR _Ts$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Ts$[ebp], ecx

; 165  : 	}

	jmp	SHORT $LN2@SetupTextu
$LN1@SetupTextu:

; 166  : 
; 167  : 	CreateZeroTexture();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateZeroTexture@CDXEngine@@QAEXXZ	; CDXEngine::CreateZeroTexture

; 168  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SetupTexturesOnDevice@CDXEngine@@QAEXXZ ENDP		; CDXEngine::SetupTexturesOnDevice
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
_this$ = -44						; size = 4
tv76 = -40						; size = 4
tv78 = -36						; size = 4
_CPos$ = -32						; size = 16
__$ArrayPad$ = -4					; size = 4
_WorldPos$ = 8						; size = 4
_MaxRange$ = 12						; size = 4
?GetDetailLevel@CDXEngine@@QAEMPAU_D3DVECTOR@@M@Z PROC	; CDXEngine::GetDetailLevel
; _this$ = ecx

; 1563 : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1564 : 	_MM_ALIGN16 XMMVector	CPos;
; 1565 : 	// make it in camera space
; 1566 : 	_asm{
; 1567 : 			mov		edx,	DWORD PTR WorldPos			// Get th World position

	mov	edx, DWORD PTR _WorldPos$[ebx]

; 1568 : 			movups	xmm0,	XMMWORD PTR [edx]			// into XMM0

	movups	xmm0, XMMWORD PTR [edx]

; 1569 : 			subps	xmm0,	XMMCamera					// subtract it

	subps	xmm0, XMMWORD PTR ?XMMCamera@CDXEngine@@2TXMMVector@@A

; 1570 : 			mulps	xmm0,	xmm0;						// square of all parameters

	mulps	xmm0, xmm0

; 1571 : 			movaps	CPos,	xmm0;						// stores

	movaps	XMMWORD PTR _CPos$[ebp], xmm0

; 1572 : 	}
; 1573 : 
; 1574 : 	return  sqrtf(CPos.d3d.x + CPos.d3d.y + CPos.d3d.z) /MaxRange * m_LODBiasCx;

	movss	xmm0, DWORD PTR _CPos$[ebp]
	addss	xmm0, DWORD PTR _CPos$[ebp+4]
	addss	xmm0, DWORD PTR _CPos$[ebp+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv76[ebp]
	movss	xmm0, DWORD PTR tv76[ebp]
	divss	xmm0, DWORD PTR _MaxRange$[ebx]
	mulss	xmm0, DWORD PTR ?m_LODBiasCx@CDXEngine@@0MA
	movss	DWORD PTR tv78[ebp], xmm0
	fld	DWORD PTR tv78[ebp]

; 1575 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
?GetDetailLevel@CDXEngine@@QAEMPAU_D3DVECTOR@@M@Z ENDP	; CDXEngine::GetDetailLevel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_Index$ = -8						; size = 4
_VPtr$ = -4						; size = 4
_WorldStart$ = 8					; size = 4
_WorldEnd$ = 12						; size = 4
_ColorStart$ = 16					; size = 4
_ColorEnd$ = 20						; size = 4
_Emissive$ = 24						; size = 1
_CameraSpace$ = 28					; size = 1
?Draw3DLine@CDXEngine@@QAEXPAU_D3DVECTOR@@0KK_N1@Z PROC	; CDXEngine::Draw3DLine
; _this$ = ecx

; 1623 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1624 : 
; 1625 : 	// check for Buffer locked
; 1626 : 	if(!TheVbManager.SimpleBuffer.VbPtr) TheVbManager.OpenSimpleBuffer();

	cmp	DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788664, 0
	jne	SHORT $LN7@Draw3DLine
	mov	ecx, OFFSET ?TheVbManager@@3VCDXVbManager@@A ; TheVbManager
	call	?OpenSimpleBuffer@CDXVbManager@@QAEXXZ	; CDXVbManager::OpenSimpleBuffer
$LN7@Draw3DLine:

; 1627 : 
; 1628 : 	// Get the appropriate index list in the buffer
; 1629 : 	DWORD	Index=LINES_OFFSET+TheVbManager.SimpleBuffer.Lines*2;

	mov	eax, DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788672
	lea	ecx, DWORD PTR [eax+eax+16384]
	mov	DWORD PTR _Index$[ebp], ecx

; 1630 : 	D3DSIMPLEVERTEX	*VPtr=&TheVbManager.SimpleBuffer.VbPtr[Index];

	mov	edx, DWORD PTR _Index$[ebp]
	imul	edx, 28					; 0000001cH
	add	edx, DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788664
	mov	DWORD PTR _VPtr$[ebp], edx

; 1631 : 
; 1632 : 	if(!CameraSpace){

	movzx	eax, BYTE PTR _CameraSpace$[ebp]
	test	eax, eax
	jne	SHORT $LN6@Draw3DLine

; 1633 : 		// make it in camera space
; 1634 : 		_asm{
; 1635 : 				mov		edx,	DWORD PTR WorldStart		// Get the World Start position

	mov	edx, DWORD PTR _WorldStart$[ebp]

; 1636 : 				movups	xmm0,	XMMWORD PTR [edx]			// into XMM0

	movups	xmm0, XMMWORD PTR [edx]

; 1637 : 				mov		eax,	DWORD PTR VPtr				// Get the Camera position

	mov	eax, DWORD PTR _VPtr$[ebp]

; 1638 : 				subps	xmm0,	XMMCamera					// subtract it

	subps	xmm0, XMMWORD PTR ?XMMCamera@CDXEngine@@2TXMMVector@@A

; 1639 : 				mov		ecx,	DWORD PTR WorldEnd			// Get the World End position

	mov	ecx, DWORD PTR _WorldEnd$[ebp]

; 1640 : 				movups	XMMWORD PTR [eax],xmm0				// save in the vertex

	movups	XMMWORD PTR [eax], xmm0

; 1641 : 				movups	xmm1,	XMMWORD PTR [ecx]			// into XMM0

	movups	xmm1, XMMWORD PTR [ecx]

; 1642 : 				subps	xmm1,	XMMCamera								// subtract it

	subps	xmm1, XMMWORD PTR ?XMMCamera@CDXEngine@@2TXMMVector@@A

; 1643 : 				movups	XMMWORD PTR [eax+SIZE D3DSIMPLEVERTEX],xmm1		// save in the 2nd vertex

	movups	XMMWORD PTR [eax+28], xmm1

; 1644 : 		}
; 1645 : 	} else {

	jmp	SHORT $LN5@Draw3DLine
$LN6@Draw3DLine:

; 1646 : 		_asm{
; 1647 : 				mov		edx,	DWORD PTR WorldStart		// Get the World Start position

	mov	edx, DWORD PTR _WorldStart$[ebp]

; 1648 : 				movups	xmm0,	XMMWORD PTR [edx]			// into XMM0

	movups	xmm0, XMMWORD PTR [edx]

; 1649 : 				mov		eax,	DWORD PTR VPtr				// Get the Camera position

	mov	eax, DWORD PTR _VPtr$[ebp]

; 1650 : 				mov		ecx,	DWORD PTR WorldEnd			// Get the World End position

	mov	ecx, DWORD PTR _WorldEnd$[ebp]

; 1651 : 				movups	XMMWORD PTR [eax],xmm0				// save in the vertex

	movups	XMMWORD PTR [eax], xmm0

; 1652 : 				movups	xmm1,	XMMWORD PTR [ecx]			// into XMM0

	movups	xmm1, XMMWORD PTR [ecx]

; 1653 : 				movups	XMMWORD PTR [eax+SIZE D3DSIMPLEVERTEX],xmm1		// save in the 2nd vertex

	movups	XMMWORD PTR [eax+28], xmm1
$LN5@Draw3DLine:

; 1654 : 		}
; 1655 : 	}
; 1656 : 	VPtr->dwColour=ColorStart;

	mov	ecx, DWORD PTR _VPtr$[ebp]
	mov	edx, DWORD PTR _ColorStart$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 1657 : 	(VPtr+1)->dwColour=ColorEnd;

	mov	eax, DWORD PTR _VPtr$[ebp]
	mov	ecx, DWORD PTR _ColorEnd$[ebp]
	mov	DWORD PTR [eax+40], ecx

; 1658 : 	if(Emissive) { VPtr->dwSpecular=ColorStart;(VPtr+1)->dwSpecular=ColorEnd; }

	movzx	edx, BYTE PTR _Emissive$[ebp]
	test	edx, edx
	je	SHORT $LN4@Draw3DLine
	mov	eax, DWORD PTR _VPtr$[ebp]
	mov	ecx, DWORD PTR _ColorStart$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _VPtr$[ebp]
	mov	eax, DWORD PTR _ColorEnd$[ebp]
	mov	DWORD PTR [edx+44], eax
	jmp	SHORT $LN3@Draw3DLine
$LN4@Draw3DLine:

; 1659 : 	else { VPtr->dwSpecular=0; (VPtr+1)->dwSpecular=0;}

	mov	ecx, DWORD PTR _VPtr$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _VPtr$[ebp]
	mov	DWORD PTR [edx+44], 0
$LN3@Draw3DLine:

; 1660 : 
; 1661 : 	// update pointers and Counters
; 1662 : 	TheVbManager.SimpleBuffer.Lines++;

	mov	eax, DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788672
	add	eax, 1
	mov	DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788672, eax

; 1663 : 	if(TheVbManager.SimpleBuffer.MaxLines<MAX_LINES) TheVbManager.SimpleBuffer.MaxLines++;

	cmp	DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788680, 16384 ; 00004000H
	jae	SHORT $LN2@Draw3DLine
	mov	ecx, DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788680
	add	ecx, 1
	mov	DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788680, ecx
$LN2@Draw3DLine:

; 1664 : 	if(TheVbManager.SimpleBuffer.Lines>=MAX_LINES) TheVbManager.SimpleBuffer.Lines=0;

	cmp	DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788672, 16384 ; 00004000H
	jb	SHORT $LN8@Draw3DLine
	mov	DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788672, 0
$LN8@Draw3DLine:

; 1665 : }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Draw3DLine@CDXEngine@@QAEXPAU_D3DVECTOR@@0KK_N1@Z ENDP	; CDXEngine::Draw3DLine
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_Index$ = -8						; size = 4
_VPtr$ = -4						; size = 4
_WorldPos$ = 8						; size = 4
_Color$ = 12						; size = 4
_Emissive$ = 16						; size = 1
_CameraSpace$ = 20					; size = 1
?Draw3DPoint@CDXEngine@@QAEXPAU_D3DVECTOR@@K_N1@Z PROC	; CDXEngine::Draw3DPoint
; _this$ = ecx

; 1583 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1584 : 
; 1585 : 	// check for Buffer locked
; 1586 : 	if(!TheVbManager.SimpleBuffer.VbPtr) TheVbManager.OpenSimpleBuffer();

	cmp	DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788664, 0
	jne	SHORT $LN7@Draw3DPoin
	mov	ecx, OFFSET ?TheVbManager@@3VCDXVbManager@@A ; TheVbManager
	call	?OpenSimpleBuffer@CDXVbManager@@QAEXXZ	; CDXVbManager::OpenSimpleBuffer
$LN7@Draw3DPoin:

; 1587 : 
; 1588 : 	// Get the appropriate index list in the buffer
; 1589 : 	DWORD	Index=POINTS_OFFSET+TheVbManager.SimpleBuffer.Points;

	mov	eax, DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788668
	mov	DWORD PTR _Index$[ebp], eax

; 1590 : 	D3DSIMPLEVERTEX	*VPtr=&TheVbManager.SimpleBuffer.VbPtr[Index];

	mov	ecx, DWORD PTR _Index$[ebp]
	imul	ecx, 28					; 0000001cH
	add	ecx, DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788664
	mov	DWORD PTR _VPtr$[ebp], ecx

; 1591 : 
; 1592 : 	if(!CameraSpace){

	movzx	edx, BYTE PTR _CameraSpace$[ebp]
	test	edx, edx
	jne	SHORT $LN6@Draw3DPoin

; 1593 : 		// make it in camera space
; 1594 : 		_asm{
; 1595 : 				mov		edx,	DWORD PTR WorldPos			// Get th World position

	mov	edx, DWORD PTR _WorldPos$[ebp]

; 1596 : 				movups	xmm0,	XMMWORD PTR [edx]			// into XMM0

	movups	xmm0, XMMWORD PTR [edx]

; 1597 : 				mov		eax,	DWORD PTR VPtr				// Get the Camera position

	mov	eax, DWORD PTR _VPtr$[ebp]

; 1598 : 				subps	xmm0,	XMMCamera					// subtract it

	subps	xmm0, XMMWORD PTR ?XMMCamera@CDXEngine@@2TXMMVector@@A

; 1599 : 				movups	XMMWORD PTR [eax],xmm0				// save in the vertex

	movups	XMMWORD PTR [eax], xmm0

; 1600 : 		}
; 1601 : 	} else {

	jmp	SHORT $LN5@Draw3DPoin
$LN6@Draw3DPoin:

; 1602 : 		_asm{
; 1603 : 				mov		edx,	DWORD PTR WorldPos			// Get th World position

	mov	edx, DWORD PTR _WorldPos$[ebp]

; 1604 : 				movups	xmm0,	XMMWORD PTR [edx]			// into XMM0

	movups	xmm0, XMMWORD PTR [edx]

; 1605 : 				mov		eax,	DWORD PTR VPtr				// Get the Camera position

	mov	eax, DWORD PTR _VPtr$[ebp]

; 1606 : 				movups	XMMWORD PTR [eax],xmm0				// save in the vertex

	movups	XMMWORD PTR [eax], xmm0
$LN5@Draw3DPoin:

; 1607 : 		}
; 1608 : 	}
; 1609 : 	VPtr->dwColour=Color;

	mov	eax, DWORD PTR _VPtr$[ebp]
	mov	ecx, DWORD PTR _Color$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 1610 : 	if(Emissive) VPtr->dwSpecular=Color; else VPtr->dwSpecular=0;

	movzx	edx, BYTE PTR _Emissive$[ebp]
	test	edx, edx
	je	SHORT $LN4@Draw3DPoin
	mov	eax, DWORD PTR _VPtr$[ebp]
	mov	ecx, DWORD PTR _Color$[ebp]
	mov	DWORD PTR [eax+16], ecx
	jmp	SHORT $LN3@Draw3DPoin
$LN4@Draw3DPoin:
	mov	edx, DWORD PTR _VPtr$[ebp]
	mov	DWORD PTR [edx+16], 0
$LN3@Draw3DPoin:

; 1611 : 
; 1612 : 	// update pointers and Counters
; 1613 : 	TheVbManager.SimpleBuffer.Points++;

	mov	eax, DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788668
	add	eax, 1
	mov	DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788668, eax

; 1614 : 	if(TheVbManager.SimpleBuffer.MaxPoints<MAX_POINTS) TheVbManager.SimpleBuffer.MaxPoints++;

	cmp	DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788676, 16384 ; 00004000H
	jae	SHORT $LN2@Draw3DPoin
	mov	ecx, DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788676
	add	ecx, 1
	mov	DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788676, ecx
$LN2@Draw3DPoin:

; 1615 : 	if(TheVbManager.SimpleBuffer.Points>=MAX_POINTS) TheVbManager.SimpleBuffer.Points=0;

	cmp	DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788668, 16384 ; 00004000H
	jb	SHORT $LN8@Draw3DPoin
	mov	DWORD PTR ?TheVbManager@@3VCDXVbManager@@A+788668, 0
$LN8@Draw3DPoin:

; 1616 : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Draw3DPoint@CDXEngine@@QAEXPAU_D3DVECTOR@@K_N1@Z ENDP	; CDXEngine::Draw3DPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
;	COMDAT ?DrawBlitNode@CDXEngine@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DrawBlitNode@CDXEngine@@AAEXXZ PROC			; CDXEngine::DrawBlitNode, COMDAT
; _this$ = ecx

; 1959 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1960 : 	///////////////////////// Draw the Primitive /////////////////////////////////
; 1961 : #ifdef	INDEXED_MODE_ENGINE	
; 1962 : 	if(m_NODE.SURFACE->dwPrimType==D3DPT_POINTLIST){

	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	cmp	DWORD PTR [eax+24], 1
	jne	SHORT $LN2@DrawBlitNo

; 1963 : 		m_pD3DD->DrawPrimitiveVB( m_NODE.SURFACE->dwPrimType, m_VB.Vb, (DWORD)*((Int16*)(m_NODE.BYTE+sizeof(DxSurfaceType)))+m_VB.BaseOffset, 
; 1964 : 											 m_NODE.SURFACE->dwVCount, 0 );

	push	0
	mov	ecx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	movsx	ecx, WORD PTR [eax+56]
	add	ecx, DWORD PTR ?m_VB@CDXEngine@@0UVBItemType@@A+16
	push	ecx
	mov	edx, DWORD PTR ?m_VB@CDXEngine@@0UVBItemType@@A
	push	edx
	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+124]
	call	edx

; 1965 : 	} else {

	jmp	SHORT $LN3@DrawBlitNo
$LN2@DrawBlitNo:

; 1966 : 		m_pD3DD->DrawIndexedPrimitiveVB( m_NODE.SURFACE->dwPrimType, m_VB.Vb, m_VB.BaseOffset, m_VB.NVertices,
; 1967 : 										(LPWORD)(m_NODE.BYTE+sizeof(DxSurfaceType)), m_NODE.SURFACE->dwVCount, 0 );

	push	0
	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	add	edx, 56					; 00000038H
	push	edx
	mov	eax, DWORD PTR ?m_VB@CDXEngine@@0UVBItemType@@A+12
	push	eax
	mov	ecx, DWORD PTR ?m_VB@CDXEngine@@0UVBItemType@@A+16
	push	ecx
	mov	edx, DWORD PTR ?m_VB@CDXEngine@@0UVBItemType@@A
	push	edx
	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+128]
	call	edx
$LN3@DrawBlitNo:

; 1968 : 	}
; 1969 : 
; 1970 : 
; 1971 : #else
; 1972 : 	m_pD3DD->DrawPrimitiveVB( m_NODE.SURFACE->dwPrimType, m_VB.Vb, (DWORD)*((Int16*)(m_NODE.BYTE+sizeof(DxSurfaceType)))+m_VB.BaseOffset, 
; 1973 : 										 m_NODE.SURFACE->dwVCount,0);
; 1974 : #endif
; 1975 : 
; 1976 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DrawBlitNode@CDXEngine@@AAEXXZ ENDP			; CDXEngine::DrawBlitNode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
_LightOwner$ = -228					; size = 4
_RadarMaterial$ = -224					; size = 68
_this$ = -156						; size = 4
tv197 = -152						; size = 4
_LodID$ = -148						; size = 4
_Lited$ = -141						; size = 1
_objInst$ = -140					; size = 4
_DofLevel$ = -136					; size = 4
_s$1 = -132						; size = 128
__$ArrayPad$ = -4					; size = 4
?FlushBlips@CDXEngine@@AAEXXZ PROC			; CDXEngine::FlushBlips
; _this$ = ecx

; 1839 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1840 : 
; 1841 : 	ObjectInstance *objInst=NULL;

	mov	DWORD PTR _objInst$[ebp], 0

; 1842 : 	DWORD	LodID;
; 1843 : 	bool	Lited;
; 1844 : 	DWORD	LightOwner;
; 1845 : 	DWORD	DofLevel = 0;

	mov	DWORD PTR _DofLevel$[ebp], 0

; 1846 : 
; 1847 : 	D3DMATERIAL7			RadarMaterial;
; 1848 : 
; 1849 : 
; 1850 : 	// not a previous object instalce
; 1851 : 	m_LastObjectInstance = NULL;

	mov	DWORD PTR ?m_LastObjectInstance@CDXEngine@@0PAVObjectInstance@@A, 0 ; CDXEngine::m_LastObjectInstance

; 1852 : 
; 1853 : 	RadarMaterial.specular.r=RadarMaterial.specular.g=RadarMaterial.specular.b=0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _RadarMaterial$[ebp+40], xmm0
	movss	xmm0, DWORD PTR _RadarMaterial$[ebp+40]
	movss	DWORD PTR _RadarMaterial$[ebp+36], xmm0
	movss	xmm0, DWORD PTR _RadarMaterial$[ebp+36]
	movss	DWORD PTR _RadarMaterial$[ebp+32], xmm0

; 1854 : 	RadarMaterial.emissive.r=RadarMaterial.emissive.b= 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _RadarMaterial$[ebp+56], xmm0
	movss	xmm0, DWORD PTR _RadarMaterial$[ebp+56]
	movss	DWORD PTR _RadarMaterial$[ebp+48], xmm0

; 1855 : 	RadarMaterial.emissive.g=0.5f;

	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _RadarMaterial$[ebp+52], xmm0

; 1856 : 	RadarMaterial.diffuse.r=RadarMaterial.diffuse.b=0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _RadarMaterial$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _RadarMaterial$[ebp+8]
	movss	DWORD PTR _RadarMaterial$[ebp], xmm0

; 1857 : 	RadarMaterial.diffuse.g=0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _RadarMaterial$[ebp+4], xmm0

; 1858 : 	RadarMaterial.ambient.r=RadarMaterial.ambient.g=RadarMaterial.ambient.b=0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _RadarMaterial$[ebp+24], xmm0
	movss	xmm0, DWORD PTR _RadarMaterial$[ebp+24]
	movss	DWORD PTR _RadarMaterial$[ebp+20], xmm0
	movss	xmm0, DWORD PTR _RadarMaterial$[ebp+20]
	movss	DWORD PTR _RadarMaterial$[ebp+16], xmm0

; 1859 : 	RadarMaterial.dvPower = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _RadarMaterial$[ebp+64], xmm0

; 1860 : 
; 1861 : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_SPECULARENABLE, FALSE );

	push	0
	push	29					; 0000001dH
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 1862 : 	m_pD3DD->SetRenderState( D3DRENDERSTATE_DIFFUSEMATERIALSOURCE, D3DMCS_MATERIAL );

	push	0
	push	145					; 00000091H
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 1863 : 	m_pD3DD->SetRenderState( D3DRENDERSTATE_AMBIENTMATERIALSOURCE, D3DMCS_MATERIAL );

	push	0
	push	147					; 00000093H
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx

; 1864 : 	m_pD3DD->SetRenderState( D3DRENDERSTATE_SPECULARMATERIALSOURCE, D3DMCS_MATERIAL );

	push	0
	push	146					; 00000092H
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 1865 : 	m_pD3DD->SetRenderState( D3DRENDERSTATE_EMISSIVEMATERIALSOURCE, D3DMCS_MATERIAL );

	push	0
	push	148					; 00000094H
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 1866 : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_SRCBLEND,D3DBLEND_SRCALPHA);

	push	5
	push	19					; 00000013H
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx

; 1867 : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_DESTBLEND,D3DBLEND_INVSRCALPHA);

	push	6
	push	20					; 00000014H
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 1868 : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE,TRUE);

	push	1
	push	27					; 0000001bH
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx
$LN18@FlushBlips:

; 1869 : 
; 1870 : 
; 1871 : 
; 1872 : 	///////////////////////////// HERE STARTS THE DRAWING ENGINE LOOP //////////////////////////////
; 1873 : 	// The Loop flushes all objects from the VBuffers
; 1874 : 
; 1875 : 	// Till objects to Draw
; 1876 : 	while(TheVbManager.GetDrawItem(&objInst, &LodID, &AppliedState, &Lited, &LightOwner, &m_BlipIntensity)){

	push	OFFSET ?m_BlipIntensity@CDXEngine@@0MA	; CDXEngine::m_BlipIntensity
	lea	edx, DWORD PTR _LightOwner$[ebp]
	push	edx
	lea	eax, DWORD PTR _Lited$[ebp]
	push	eax
	push	OFFSET ?AppliedState@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::AppliedState
	lea	ecx, DWORD PTR _LodID$[ebp]
	push	ecx
	lea	edx, DWORD PTR _objInst$[ebp]
	push	edx
	mov	ecx, OFFSET ?TheVbManager@@3VCDXVbManager@@A ; TheVbManager
	call	?GetDrawItem@CDXVbManager@@QAE_NPAPAVObjectInstance@@PAKPAUD3DXMATRIX@@PA_N1PAM@Z ; CDXVbManager::GetDrawItem
	movzx	eax, al
	test	eax, eax
	je	$LN13@FlushBlips

; 1877 : 		
; 1878 : 		// Consistency Check
; 1879 : 		if(!objInst) continue;

	cmp	DWORD PTR _objInst$[ebp], 0
	jne	SHORT $LN12@FlushBlips
	jmp	SHORT $LN18@FlushBlips
$LN12@FlushBlips:

; 1880 : 		// assign for engine use
; 1881 : 		m_TheObjectInstance=objInst;

	mov	ecx, DWORD PTR _objInst$[ebp]
	mov	DWORD PTR ?m_TheObjectInstance@CDXEngine@@0PAVObjectInstance@@A, ecx ; CDXEngine::m_TheObjectInstance

; 1882 : 
; 1883 : 		// gets the pointer to the Model Vertex Buffer
; 1884 : 		TheVbManager.GetModelData(m_VB, LodID);

	mov	edx, DWORD PTR _LodID$[ebp]
	push	edx
	push	OFFSET ?m_VB@CDXEngine@@0UVBItemType@@A	; CDXEngine::m_VB
	mov	ecx, OFFSET ?TheVbManager@@3VCDXVbManager@@A ; TheVbManager
	call	?GetModelData@CDXVbManager@@QAEXAAUVBItemType@@K@Z ; CDXVbManager::GetModelData

; 1885 : 
; 1886 : 		// Consistency Check
; 1887 : 		if(!m_VB.Valid) continue;

	movzx	eax, BYTE PTR ?m_VB@CDXEngine@@0UVBItemType@@A+40
	test	eax, eax
	jne	SHORT $LN11@FlushBlips
	jmp	SHORT $LN18@FlushBlips
$LN11@FlushBlips:

; 1888 : 		
; 1889 : 		// Ok... transform the object
; 1890 : 		m_pD3DD->SetTransform( D3DTRANSFORMSTATE_WORLD, (LPD3DMATRIX)&AppliedState );

	push	OFFSET ?AppliedState@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::AppliedState
	push	1
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+44]
	call	ecx

; 1891 : 		// Dof Level at 0
; 1892 : 		DofLevel = 0;

	mov	DWORD PTR _DofLevel$[ebp], 0

; 1893 : 
; 1894 : 		RadarMaterial.diffuse.a = m_BlipIntensity/255.0f;

	movss	xmm0, DWORD PTR ?m_BlipIntensity@CDXEngine@@0MA
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _RadarMaterial$[ebp+12], xmm0

; 1895 : 
; 1896 : 		m_pD3DD->SetMaterial(&RadarMaterial);

	lea	edx, DWORD PTR _RadarMaterial$[ebp]
	push	edx
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+64]
	call	eax

; 1897 : 
; 1898 : 
; 1899 : 	//////////////////////// ********* HERE STARTS THE REAL NODES PARSING ***** ///////////////////////////////////
; 1900 : 	//                                                                                                           //
; 1901 : 	//                                                                                                           //
; 1902 : 	//                                                                                                           //
; 1903 : 	//                                                                                                           //
; 1904 : 	//	// Starting address
; 1905 : 		m_NODE.BYTE=(BYTE*)m_VB.Nodes;

	mov	ecx, DWORD PTR ?m_VB@CDXEngine@@0UVBItemType@@A+24
	mov	DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A, ecx ; CDXEngine::m_NODE
$LN10@FlushBlips:

; 1906 : 
; 1907 : 		// Till end of Model
; 1908 : 		while(m_NODE.HEAD->Type!=DX_MODELEND){

	mov	edx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	cmp	DWORD PTR [edx+8], 9
	je	$LN9@FlushBlips

; 1909 : 
; 1910 : 
; 1911 : 
; 1912 : 			// Selects actions for each node
; 1913 : 			switch(m_NODE.HEAD->Type){

	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv197[ebp], ecx
	cmp	DWORD PTR tv197[ebp], 8
	ja	SHORT $LN1@FlushBlips
	mov	edx, DWORD PTR tv197[ebp]
	jmp	DWORD PTR $LN19@FlushBlips[edx*4]
$LN6@FlushBlips:

; 1914 : 
; 1915 : 
; 1916 : 				case	DX_SWITCH:		
; 1917 : 				case	DX_LIGHT:
; 1918 : 				case	DX_TEXTURE:		
; 1919 : 				case	DX_MATERIAL:	
; 1920 : 				case	DX_SLOT:	
; 1921 : 				case	DX_ROOT:		break;

	jmp	SHORT $LN7@FlushBlips
$LN5@FlushBlips:

; 1922 : 
; 1923 : 				case	DX_SURFACE:		// Setup the Texture setup the Texture to be used
; 1924 : 										if(!DofLevel) DrawBlitNode();

	cmp	DWORD PTR _DofLevel$[ebp], 0
	jne	SHORT $LN4@FlushBlips
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawBlitNode@CDXEngine@@AAEXXZ		; CDXEngine::DrawBlitNode
$LN4@FlushBlips:

; 1925 : 										break;

	jmp	SHORT $LN7@FlushBlips
$LN3@FlushBlips:

; 1926 : 
; 1927 : 				case	DX_DOF:			DofLevel++;

	mov	eax, DWORD PTR _DofLevel$[ebp]
	add	eax, 1
	mov	DWORD PTR _DofLevel$[ebp], eax

; 1928 : 										break;

	jmp	SHORT $LN7@FlushBlips
$LN2@FlushBlips:

; 1929 : 
; 1930 : 				case	DX_ENDDOF:		DofLevel--;

	mov	ecx, DWORD PTR _DofLevel$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _DofLevel$[ebp], ecx

; 1931 : 										break;

	jmp	SHORT $LN7@FlushBlips
$LN1@FlushBlips:

; 1932 : 									
; 1933 : 										
; 1934 : 				default			:		char s[128]; 
; 1935 : 										printf(s, "Corrupted Model ID : %d !!!", LodID);

	mov	edx, DWORD PTR _LodID$[ebp]
	push	edx
	push	OFFSET ??_C@_0BM@KPKHLCDF@Corrupted?5Model?5ID?5?3?5?$CFd?5?$CB?$CB?$CB?$AA@
	lea	eax, DWORD PTR _s$1[ebp]
	push	eax
	call	_printf
	add	esp, 12					; 0000000cH

; 1936 : 										MessageBox(NULL, s, "DX Engine", NULL);

	push	0
	push	OFFSET ??_C@_09KIOKOPID@DX?5Engine?$AA@
	lea	ecx, DWORD PTR _s$1[ebp]
	push	ecx
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
$LN7@FlushBlips:

; 1937 : 			}
; 1938 : 
; 1939 : 
; 1940 : 			// Traverse the model
; 1941 : 			m_NODE.BYTE+=m_NODE.HEAD->dwNodeSize;

	mov	edx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	add	eax, DWORD PTR [edx]
	mov	DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A, eax ; CDXEngine::m_NODE

; 1942 : 		}

	jmp	$LN10@FlushBlips
$LN9@FlushBlips:

; 1943 : 	//                                                                                                           //
; 1944 : 	//                                                                                                           //
; 1945 : 	//                                                                                                           //
; 1946 : 	//                                                                                                           //
; 1947 : 	//                                                                                                           //
; 1948 : 	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
; 1949 : 	}

	jmp	$LN18@FlushBlips
$LN13@FlushBlips:

; 1950 : 
; 1951 : 	m_pD3DD->SetRenderState( D3DRENDERSTATE_DIFFUSEMATERIALSOURCE, D3DMCS_COLOR1 );

	push	1
	push	145					; 00000091H
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 1952 : 	m_pD3DD->SetRenderState( D3DRENDERSTATE_EMISSIVEMATERIALSOURCE, D3DMCS_COLOR2 );

	push	2
	push	148					; 00000094H
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx

; 1953 : 	m_pD3DD->SetMaterial(&TheMaterial);

	push	OFFSET ?TheMaterial@CDXEngine@@2U_D3DMATERIAL7@@A ; CDXEngine::TheMaterial
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+64]
	call	eax

; 1954 : 
; 1955 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN19@FlushBlips:
	DD	$LN6@FlushBlips
	DD	$LN5@FlushBlips
	DD	$LN6@FlushBlips
	DD	$LN6@FlushBlips
	DD	$LN3@FlushBlips
	DD	$LN2@FlushBlips
	DD	$LN6@FlushBlips
	DD	$LN6@FlushBlips
	DD	$LN6@FlushBlips
?FlushBlips@CDXEngine@@AAEXXZ ENDP			; CDXEngine::FlushBlips
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.cpp
_TEXT	SEGMENT
_State$ = -172						; size = 64
_Scale$ = -108						; size = 64
_LODused$ = -44						; size = 4
_MaxLODRange$ = -40					; size = 4
_this$ = -36						; size = 4
tv206 = -32						; size = 4
_Model$ = -28						; size = 4
_LODRange$ = -24					; size = 4
_CurrentLOD$ = -20					; size = 4
_p$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_objInst$ = 8						; size = 4
_RotMatrix$ = 12					; size = 4
_Pos$ = 16						; size = 4
_sx$ = 20						; size = 4
_sy$ = 24						; size = 4
_sz$ = 28						; size = 4
_scale$ = 32						; size = 4
_CameraSpace$ = 36					; size = 1
?DrawBlip@CDXEngine@@QAEXPAVObjectInstance@@PAUD3DXMATRIX@@PBUTpoint@@MMMM_N@Z PROC ; CDXEngine::DrawBlip
; _this$ = ecx

; 1787 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 172				; 000000acH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1788 : 	D3DXMATRIX	Scale, State;

	lea	ecx, DWORD PTR _Scale$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	lea	ecx, DWORD PTR _State$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 1789 : 	D3DVECTOR	p;
; 1790 : 	DxDbHeader	*Model;
; 1791 : 
; 1792 : 	// The object position is always calculated relative to the camera position
; 1793 : 	// if coming from out world, if IN CAMERA SPACE, position is already relative to camera,
; 1794 : 	// and even visibility is skipped
; 1795 : 	if(CameraSpace){

	movzx	eax, BYTE PTR _CameraSpace$[ebp]
	test	eax, eax
	je	SHORT $LN3@DrawBlip

; 1796 : 		p.x = Pos->x;

	mov	ecx, DWORD PTR _Pos$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR _p$[ebp], xmm0

; 1797 : 		p.y = Pos->y;

	mov	edx, DWORD PTR _Pos$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR _p$[ebp+4], xmm0

; 1798 : 		p.z = Pos->z;

	mov	eax, DWORD PTR _Pos$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _p$[ebp+8], xmm0

; 1799 : 		State=*RotMatrix;

	mov	ecx, 16					; 00000010H
	mov	esi, DWORD PTR _RotMatrix$[ebp]
	lea	edi, DWORD PTR _State$[ebp]
	rep movsd

; 1800 : 	} else {

	jmp	SHORT $LN2@DrawBlip
$LN3@DrawBlip:

; 1801 : 		p.x = -CameraPos.x + Pos->x;

	movss	xmm0, DWORD PTR ?CameraPos@CDXEngine@@0U_D3DVECTOR@@A
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _Pos$[ebp]
	addss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR _p$[ebp], xmm0

; 1802 : 		p.y = -CameraPos.y + Pos->y;

	movss	xmm0, DWORD PTR ?CameraPos@CDXEngine@@0U_D3DVECTOR@@A+4
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _Pos$[ebp]
	addss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR _p$[ebp+4], xmm0

; 1803 : 		p.z = -CameraPos.z + Pos->z;

	movss	xmm0, DWORD PTR ?CameraPos@CDXEngine@@0U_D3DVECTOR@@A+8
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _Pos$[ebp]
	addss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _p$[ebp+8], xmm0
$LN2@DrawBlip:

; 1804 : 	}
; 1805 : 
; 1806 : 
; 1807 : 	///////////////////////////////// CHECK FOR AVAILABLE LOD ///////////////////////////////////////
; 1808 : 	// get the object distance
; 1809 : 	float	LODRange=sqrtf(p.x*p.x+p.y*p.y+p.z*p.z) * m_LODBiasCx;

	movss	xmm0, DWORD PTR _p$[ebp]
	mulss	xmm0, DWORD PTR _p$[ebp]
	movss	xmm1, DWORD PTR _p$[ebp+4]
	mulss	xmm1, DWORD PTR _p$[ebp+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _p$[ebp+8]
	mulss	xmm1, DWORD PTR _p$[ebp+8]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv206[ebp]
	movss	xmm0, DWORD PTR tv206[ebp]
	mulss	xmm0, DWORD PTR ?m_LODBiasCx@CDXEngine@@0MA
	movss	DWORD PTR _LODRange$[ebp], xmm0

; 1810 : 	// The model pointer
; 1811 : 	ObjectLOD *CurrentLOD=NULL;

	mov	DWORD PTR _CurrentLOD$[ebp], 0

; 1812 : 	// Calculate the LOD based on FOV
; 1813 : 	float	MaxLODRange; int LODused;
; 1814 : 	CurrentLOD = objInst->ParentObject->ChooseLOD(LODRange , &LODused, &MaxLODRange);

	lea	ecx, DWORD PTR _MaxLODRange$[ebp]
	push	ecx
	lea	edx, DWORD PTR _LODused$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _LODRange$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _objInst$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?ChooseLOD@ObjectParent@@QAEPAVObjectLOD@@MPAHPAM@Z ; ObjectParent::ChooseLOD
	mov	DWORD PTR _CurrentLOD$[ebp], eax

; 1815 : 	// if not a lod persent, end here
; 1816 : 	if(!CurrentLOD) return;

	cmp	DWORD PTR _CurrentLOD$[ebp], 0
	jne	SHORT $LN1@DrawBlip
	jmp	$LN4@DrawBlip
$LN1@DrawBlip:

; 1817 : 	// ok assign The Model
; 1818 : 	Model=(DxDbHeader*)CurrentLOD->root;

	mov	ecx, DWORD PTR _CurrentLOD$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _Model$[ebp], edx

; 1819 : 
; 1820 : 		// ************ ADD Other Features ***********
; 1821 : 		D3DXMatrixIdentity(&Scale);

	lea	eax, DWORD PTR _Scale$[ebp]
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 1822 : 		Scale.m00=scale*sx;

	movss	xmm0, DWORD PTR _scale$[ebp]
	mulss	xmm0, DWORD PTR _sx$[ebp]
	movss	DWORD PTR _Scale$[ebp], xmm0

; 1823 : 		Scale.m11=scale*sy;

	movss	xmm0, DWORD PTR _scale$[ebp]
	mulss	xmm0, DWORD PTR _sy$[ebp]
	movss	DWORD PTR _Scale$[ebp+20], xmm0

; 1824 : 		Scale.m22=scale*sz;

	movss	xmm0, DWORD PTR _scale$[ebp]
	mulss	xmm0, DWORD PTR _sz$[ebp]
	movss	DWORD PTR _Scale$[ebp+40], xmm0

; 1825 : 		D3DXMatrixMultiply(&State, RotMatrix, &Scale);

	lea	ecx, DWORD PTR _Scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _RotMatrix$[ebp]
	push	edx
	lea	eax, DWORD PTR _State$[ebp]
	push	eax
	call	_D3DXMatrixMultiply@12

; 1826 : 		// *******************************************
; 1827 : 		
; 1828 : 		// *********** Base transformations **********
; 1829 : 		D3DXMatrixTranslation(&Scale, p.x, p.y, p.z);

	push	ecx
	movss	xmm0, DWORD PTR _p$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _p$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _p$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _Scale$[ebp]
	push	ecx
	call	_D3DXMatrixTranslation@16

; 1830 : 		D3DXMatrixMultiply(&State, &State, &Scale );

	lea	edx, DWORD PTR _Scale$[ebp]
	push	edx
	lea	eax, DWORD PTR _State$[ebp]
	push	eax
	lea	ecx, DWORD PTR _State$[ebp]
	push	ecx
	call	_D3DXMatrixMultiply@12

; 1831 : 		// *******************************************
; 1832 : 	
; 1833 : 	TheVbManager.AddDrawRequest(objInst, Model->Id, &State, false, 0, m_BlipIntensity);

	push	ecx
	movss	xmm0, DWORD PTR ?m_BlipIntensity@CDXEngine@@0MA
	movss	DWORD PTR [esp], xmm0
	push	0
	push	0
	lea	edx, DWORD PTR _State$[ebp]
	push	edx
	mov	eax, DWORD PTR _Model$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _objInst$[ebp]
	push	edx
	mov	ecx, OFFSET ?TheVbManager@@3VCDXVbManager@@A ; TheVbManager
	call	?AddDrawRequest@CDXVbManager@@QAEXPAVObjectInstance@@KPAUD3DXMATRIX@@_NKM@Z ; CDXVbManager::AddDrawRequest
$LN4@DrawBlip:

; 1834 : }

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
?DrawBlip@CDXEngine@@QAEXPAVObjectInstance@@PAUD3DXMATRIX@@PBUTpoint@@MMMM_N@Z ENDP ; CDXEngine::DrawBlip
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GCTextureSurface@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCTextureSurface@@QAEPAXI@Z PROC			; CTextureSurface::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CTextureSurface@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCTextureSurface@@QAEPAXI@Z ENDP			; CTextureSurface::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1CTextureSurface@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CTextureSurface@@QAE@XZ PROC				; CTextureSurface::~CTextureSurface, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1Texture@@QAE@XZ			; Texture::~Texture
	mov	esp, ebp
	pop	ebp
	ret	0
??1CTextureSurface@@QAE@XZ ENDP				; CTextureSurface::~CTextureSurface
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.h
;	COMDAT ??0CTextureSurface@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CTextureSurface@@QAE@XZ PROC				; CTextureSurface::CTextureSurface, COMDAT
; _this$ = ecx

; 38   : 	CTextureSurface(void)	{ Next=NULL; FileName[0]=0; ItemList=NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0Texture@@QAE@XZ			; Texture::Texture
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+28], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CTextureSurface@@QAE@XZ ENDP				; CTextureSurface::CTextureSurface
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dx2dengine.h
;	COMDAT ??0CTextureItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CTextureItem@@QAE@XZ PROC				; CTextureItem::CTextureItem, COMDAT
; _this$ = ecx

; 27   : 	CTextureItem(void)	{ Next=NULL; Name[0]=0; memset(TuTv, 0, sizeof(TuTv)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+4], 0
	push	32					; 00000020H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CTextureItem@@QAE@XZ ENDP				; CTextureItem::CTextureItem
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tex.h
;	COMDAT ?TexHandle@Texture@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?TexHandle@Texture@@QAEKXZ PROC				; Texture::TexHandle, COMDAT
; _this$ = ecx

; 60   : 	DWORD TexHandle() { return (DWORD) texHandle; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?TexHandle@Texture@@QAEKXZ ENDP				; Texture::TexHandle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\dxsdk\include\d3dxmath.inl
;	COMDAT ?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z
_TEXT	SEGMENT
_pOut$ = 8						; size = 4
?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z PROC	; D3DXMatrixIdentity, COMDAT

; 1562 : {

	push	ebp
	mov	ebp, esp

; 1563 : #ifdef D3DX_DEBUG
; 1564 :     if(!pOut)
; 1565 :         return NULL;
; 1566 : #endif
; 1567 : 
; 1568 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] = 
; 1569 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] = 
; 1570 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] = 
; 1571 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	eax, 3
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	add	edx, DWORD PTR _pOut$[ebp]
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+eax], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	imul	ecx, 3
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _pOut$[ebp]
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+eax], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	imul	ecx, 3
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _pOut$[ebp]
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+eax], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	imul	ecx, 3
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	imul	edx, 0
	add	edx, DWORD PTR _pOut$[ebp]
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+eax], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0

; 1572 : 
; 1573 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

	mov	eax, 16					; 00000010H
	imul	eax, 3
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	imul	ecx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _pOut$[ebp]
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+eax], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+ecx], xmm0

; 1574 :     return pOut;

	mov	eax, DWORD PTR _pOut$[ebp]

; 1575 : }

	pop	ebp
	ret	0
?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ENDP	; D3DXMatrixIdentity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\dxsdk\include\d3dxmath.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 199  :     D3DXMATRIX() {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\fastmath.h
;	COMDAT ?F_I32@@YAKM@Z
_TEXT	SEGMENT
_r$ = -4						; size = 4
_x$ = 8							; size = 4
?F_I32@@YAKM@Z PROC					; F_I32, COMDAT

; 7    : {	DWORD	r;

	push	ebp
	mov	ebp, esp
	push	ecx

; 8    : 	_asm{ 
; 9    : 			fld		x

	fld	DWORD PTR _x$[ebp]

; 10   : 			fistp	r

	fistp	DWORD PTR _r$[ebp]

; 11   : 	}
; 12   : 	return r;

	mov	eax, DWORD PTR _r$[ebp]

; 13   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?F_I32@@YAKM@Z ENDP					; F_I32
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GTextureHandle@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GTextureHandle@@QAEPAXI@Z PROC			; TextureHandle::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TextureHandle@@QAE@XZ		; TextureHandle::~TextureHandle
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTextureHandle@@QAEPAXI@Z ENDP			; TextureHandle::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
END
