; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\Graphics\DXEngine\DXEngine.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	__GUID_00020400_0000_0000_c000_000000000046
PUBLIC	?m_TexID@CDXEngine@@0KA				; CDXEngine::m_TexID
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?m_LastTexID@CDXEngine@@0KA			; CDXEngine::m_LastTexID
PUBLIC	?m_LastFlags@CDXEngine@@0TDXFlagsType@@A	; CDXEngine::m_LastFlags
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?m_LastZBias@CDXEngine@@0KA			; CDXEngine::m_LastZBias
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?m_LastSpecular@CDXEngine@@0KA			; CDXEngine::m_LastSpecular
PUBLIC	?m_LODBiasCx@CDXEngine@@0MA			; CDXEngine::m_LODBiasCx
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?m_TheObjectInstance@CDXEngine@@0PAVObjectInstance@@A ; CDXEngine::m_TheObjectInstance
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?m_LastObjectInstance@CDXEngine@@0PAVObjectInstance@@A ; CDXEngine::m_LastObjectInstance
PUBLIC	?m_FogLevel@CDXEngine@@0MA			; CDXEngine::m_FogLevel
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?m_BlipIntensity@CDXEngine@@0MA			; CDXEngine::m_BlipIntensity
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?m_LinearFogLevel@CDXEngine@@0MA		; CDXEngine::m_LinearFogLevel
PUBLIC	?m_LinearFog@CDXEngine@@0_NA			; CDXEngine::m_LinearFog
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?m_FogColor@CDXEngine@@0U_D3DCOLORVALUE@@A	; CDXEngine::m_FogColor
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?m_VB@CDXEngine@@0UVBItemType@@A		; CDXEngine::m_VB
PUBLIC	_IID_IAxWinAmbientDispatch
PUBLIC	?m_NODE@CDXEngine@@0TNodeScannerType@@A		; CDXEngine::m_NODE
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?ZeroTex@CDXEngine@@0PAVTextureHandle@@A	; CDXEngine::ZeroTex
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?m_AlphaTextureStage@CDXEngine@@0KA		; CDXEngine::m_AlphaTextureStage
PUBLIC	?m_StencilMode@CDXEngine@@0W4StencilModeType@@A	; CDXEngine::m_StencilMode
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?m_StencilRef@CDXEngine@@0KA			; CDXEngine::m_StencilRef
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?m_PitMode@CDXEngine@@0_NA			; CDXEngine::m_PitMode
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	_LIBID_ATLLib
PUBLIC	?StateStackLevel@CDXEngine@@0KA			; CDXEngine::StateStackLevel
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A	; CDXEngine::m_pD3DD
PUBLIC	?m_pD3D@CDXEngine@@0PAUIDirect3D7@@A		; CDXEngine::m_pD3D
PUBLIC	?m_pDD@CDXEngine@@0PAUIDirectDraw7@@A		; CDXEngine::m_pDD
PUBLIC	?m_AlphaStack@CDXEngine@@0USurfaceStackType@@A	; CDXEngine::m_AlphaStack
PUBLIC	?m_SolidStack@CDXEngine@@0USurfaceStackType@@A	; CDXEngine::m_SolidStack
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?_pModule@ATL@@3PAVCComModule@1@A		; ATL::_pModule
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?CameraPos@CDXEngine@@0U_D3DVECTOR@@A		; CDXEngine::CameraPos
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?LightDir@CDXEngine@@0U_D3DVECTOR@@A		; CDXEngine::LightDir
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?ViewPort@CDXEngine@@0U_D3DVIEWPORT7@@A		; CDXEngine::ViewPort
PUBLIC	?m_RenderState@CDXEngine@@0W4DX_StateType@@A	; CDXEngine::m_RenderState
PUBLIC	?m_StatesStackLevel@CDXEngine@@0KA		; CDXEngine::m_StatesStackLevel
PUBLIC	?m_StatesStack@CDXEngine@@0PAUDX_StatesStackType@@A ; CDXEngine::m_StatesStack
PUBLIC	__GUID_00000000_0000_0000_c000_000000000046
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	___pobjMapEntryFirst
PUBLIC	___pobjMapEntryLast
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@	; `string'
PUBLIC	??_C@_08PICKODJL@FileType?$AA@			; `string'
PUBLIC	??_C@_09JKPGEJCH@Interface?$AA@			; `string'
PUBLIC	??_C@_08PPIOJEA@Hardware?$AA@			; `string'
PUBLIC	??_C@_04IHBFOLAC@Mime?$AA@			; `string'
PUBLIC	?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA	; ATL::_pPerfRegFunc
PUBLIC	??_C@_03DDIMFGBA@SAM?$AA@			; `string'
PUBLIC	?_pPerfUnRegFunc@ATL@@3P6AJXZA			; ATL::_pPerfUnRegFunc
PUBLIC	??_C@_08LOPHEHKG@SECURITY?$AA@			; `string'
PUBLIC	?_AtlRegisterPerUser@ATL@@3_NA			; ATL::_AtlRegisterPerUser
PUBLIC	??_C@_06FDHFNJBJ@SYSTEM?$AA@			; `string'
PUBLIC	??_C@_08KEKAJNJI@Software?$AA@			; `string'
PUBLIC	??_C@_07KJLOKDKB@TypeLib?$AA@			; `string'
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?XMMCamera@CDXEngine@@2TXMMVector@@A		; CDXEngine::XMMCamera
PUBLIC	__GUID_b196b284_bab4_101a_b69c_00aa00341d07
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	__GUID_0002e012_0000_0000_c000_000000000046
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	_IID_IAxWinAmbientDispatchEx
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	_IID_IInternalConnection
PUBLIC	??_C@_05GIBEAPNE@CLSID?$AA@			; `string'
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	??_C@_05PDIKPLII@AppID?$AA@			; `string'
PUBLIC	?gDebugLodID@@3KA				; gDebugLodID
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?chDirSep@ATL@@3DB				; ATL::chDirSep
PUBLIC	?chRightBracket@ATL@@3DB			; ATL::chRightBracket
PUBLIC	?chLeftBracket@ATL@@3DB				; ATL::chLeftBracket
PUBLIC	?chQuote@ATL@@3DB				; ATL::chQuote
PUBLIC	?chEquals@ATL@@3DB				; ATL::chEquals
PUBLIC	?szStringVal@ATL@@3QBDB				; ATL::szStringVal
PUBLIC	??_C@_01CPLAODJH@S?$AA@				; `string'
PUBLIC	?multiszStringVal@ATL@@3QBDB			; ATL::multiszStringVal
PUBLIC	??_C@_01PLPBNMEI@M?$AA@				; `string'
PUBLIC	?szDwordVal@ATL@@3QBDB				; ATL::szDwordVal
PUBLIC	??_C@_01CKDDGHAB@D?$AA@				; `string'
PUBLIC	?szBinaryVal@ATL@@3QBDB				; ATL::szBinaryVal
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	??_C@_01HMGJMAIH@B?$AA@				; `string'
PUBLIC	?szValToken@ATL@@3QBDB				; ATL::szValToken
PUBLIC	__GUID_00000146_0000_0000_c000_000000000046
PUBLIC	??_C@_03LAIAPFCB@Val?$AA@			; `string'
PUBLIC	?szForceRemove@ATL@@3QBDB			; ATL::szForceRemove
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	??_C@_0M@DBGDLGLL@ForceRemove?$AA@		; `string'
PUBLIC	?szNoRemove@ATL@@3QBDB				; ATL::szNoRemove
PUBLIC	??_C@_08KAAPDIAN@NoRemove?$AA@			; `string'
PUBLIC	?szDelete@ATL@@3QBDB				; ATL::szDelete
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	??_C@_06JBKGCNBB@Delete?$AA@			; `string'
PUBLIC	?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA	; ATL::CComApartment::ATL_CREATE_OBJECT
PUBLIC	?_Min@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Min
PUBLIC	?_Max@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Max
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?_Min@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Min
PUBLIC	?_Max@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Max
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?_Min@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Min
PUBLIC	?_Max@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Max
PUBLIC	?_Min@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Min
PUBLIC	?_Max@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Max
PUBLIC	?_Min@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Min
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?_Max@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Max
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?_Min@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Min
PUBLIC	?_Max@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Max
PUBLIC	?VT@?$CVarTypeInfo@D@ATL@@2GB			; ATL::CVarTypeInfo<char>::VT
PUBLIC	?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A ; ATL::_pAtlAutoThreadModule
PUBLIC	?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ ; ATL::CVarTypeInfo<char>::pmField
PUBLIC	?VT@?$CVarTypeInfo@E@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ ; ATL::CVarTypeInfo<unsigned char>::pmField
PUBLIC	_CLSID_Registrar
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?VT@?$CVarTypeInfo@PAD@ATL@@2GB			; ATL::CVarTypeInfo<char *>::VT
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ ; ATL::CVarTypeInfo<char *>::pmField
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?VT@?$CVarTypeInfo@PAE@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char *>::VT
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ ; ATL::CVarTypeInfo<unsigned char *>::pmField
PUBLIC	_IID_IRegistrar
PUBLIC	?VT@?$CVarTypeInfo@F@ATL@@2GB			; ATL::CVarTypeInfo<short>::VT
PUBLIC	?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ ; ATL::CVarTypeInfo<short>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAF@ATL@@2GB			; ATL::CVarTypeInfo<short *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ ; ATL::CVarTypeInfo<short *>::pmField
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?VT@?$CVarTypeInfo@G@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short>::VT
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ ; ATL::CVarTypeInfo<unsigned short>::pmField
PUBLIC	__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?VT@?$CVarTypeInfo@PAG@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short *>::VT
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ ; ATL::CVarTypeInfo<unsigned short *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@H@ATL@@2GB			; ATL::CVarTypeInfo<int>::VT
PUBLIC	?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ ; ATL::CVarTypeInfo<int>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAH@ATL@@2GB			; ATL::CVarTypeInfo<int *>::VT
PUBLIC	?D3DErroCount@@3KA				; D3DErroCount
PUBLIC	?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ ; ATL::CVarTypeInfo<int *>::pmField
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?MAX_VALUE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_VALUE
PUBLIC	?VT@?$CVarTypeInfo@I@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int>::VT
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ ; ATL::CVarTypeInfo<unsigned int>::pmField
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?VT@?$CVarTypeInfo@PAI@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int *>::VT
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ ; ATL::CVarTypeInfo<unsigned int *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@J@ATL@@2GB			; ATL::CVarTypeInfo<long>::VT
PUBLIC	?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ ; ATL::CVarTypeInfo<long>::pmField
PUBLIC	?rgszNeverDelete@CRegParser@ATL@@1QBQBDB	; ATL::CRegParser::rgszNeverDelete
PUBLIC	?cbNeverDelete@CRegParser@ATL@@1HB		; ATL::CRegParser::cbNeverDelete
PUBLIC	?VT@?$CVarTypeInfo@PAJ@ATL@@2GB			; ATL::CVarTypeInfo<long *>::VT
PUBLIC	?MAX_TYPE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_TYPE
PUBLIC	?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ ; ATL::CVarTypeInfo<long *>::pmField
PUBLIC	_IID_IDocHostUIHandlerDispatch
PUBLIC	?VT@?$CVarTypeInfo@K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long>::VT
PUBLIC	?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ ; ATL::CVarTypeInfo<unsigned long>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAK@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ ; ATL::CVarTypeInfo<unsigned long *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@_J@ATL@@2GB			; ATL::CVarTypeInfo<__int64>::VT
PUBLIC	?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ ; ATL::CVarTypeInfo<__int64>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PA_J@ATL@@2GB		; ATL::CVarTypeInfo<__int64 *>::VT
PUBLIC	__GUID_00000000_0000_0000_0000_000000000000
PUBLIC	?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ ; ATL::CVarTypeInfo<__int64 *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@_K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned __int64>::VT
PUBLIC	?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PA_K@ATL@@2GB		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@M@ATL@@2GB			; ATL::CVarTypeInfo<float>::VT
PUBLIC	?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ ; ATL::CVarTypeInfo<float>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAM@ATL@@2GB			; ATL::CVarTypeInfo<float *>::VT
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ ; ATL::CVarTypeInfo<float *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@N@ATL@@2GB			; ATL::CVarTypeInfo<double>::VT
PUBLIC	?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ ; ATL::CVarTypeInfo<double>::pmField
PUBLIC	__GUID_00000109_0000_0000_c000_000000000046
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?VT@?$CVarTypeInfo@PAN@ATL@@2GB			; ATL::CVarTypeInfo<double *>::VT
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ ; ATL::CVarTypeInfo<double *>::pmField
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB	; ATL::CVarTypeInfo<tagVARIANT *>::VT
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?VT@?$CVarTypeInfo@PA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t *>::VT
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ ; ATL::CVarTypeInfo<wchar_t *>::pmField
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?_pAtlModule@ATL@@3PAVCAtlModule@1@A		; ATL::_pAtlModule
PUBLIC	?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t * *>::VT
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ ; ATL::CVarTypeInfo<wchar_t * *>::pmField
PUBLIC	?m_libid@CAtlModule@ATL@@2U_GUID@@A		; ATL::CAtlModule::m_libid
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown *>::pmField
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown * *>::VT
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown * *>::pmField
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch *>::VT
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch *>::pmField
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?DrawPoints@CDXEngine@@2_NA			; CDXEngine::DrawPoints
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?DrawLines@CDXEngine@@2_NA			; CDXEngine::DrawLines
PUBLIC	_IID_IAxWinHostWindow
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch * *>::VT
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch * *>::pmField
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY>::VT
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY>::pmField
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY *>::VT
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY *>::pmField
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?m_bInitFailed@CAtlBaseModule@ATL@@2_NA		; ATL::CAtlBaseModule::m_bInitFailed
PUBLIC	?TheSun@CDXEngine@@2U_D3DLIGHT7@@A		; CDXEngine::TheSun
PUBLIC	?TheNVG@CDXEngine@@2U_D3DLIGHT7@@A		; CDXEngine::TheNVG
PUBLIC	?TheTV@CDXEngine@@2U_D3DLIGHT7@@A		; CDXEngine::TheTV
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?TheSunColour@CDXEngine@@2U_D3DCOLORVALUE@@A	; CDXEngine::TheSunColour
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	_IID_IAxWinHostWindowLic
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?TheMaterial@CDXEngine@@2U_D3DMATERIAL7@@A	; CDXEngine::TheMaterial
PUBLIC	?m_TexUsed@CDXEngine@@0PAKA			; CDXEngine::m_TexUsed
_BSS	SEGMENT
?m_TexID@CDXEngine@@0KA DD 01H DUP (?)			; CDXEngine::m_TexID
?m_LastTexID@CDXEngine@@0KA DD 01H DUP (?)		; CDXEngine::m_LastTexID
?m_LastFlags@CDXEngine@@0TDXFlagsType@@A DD 01H DUP (?)	; CDXEngine::m_LastFlags
?m_LastZBias@CDXEngine@@0KA DD 01H DUP (?)		; CDXEngine::m_LastZBias
?m_LastSpecular@CDXEngine@@0KA DD 01H DUP (?)		; CDXEngine::m_LastSpecular
?m_LODBiasCx@CDXEngine@@0MA DD 01H DUP (?)		; CDXEngine::m_LODBiasCx
?m_TheObjectInstance@CDXEngine@@0PAVObjectInstance@@A DD 01H DUP (?) ; CDXEngine::m_TheObjectInstance
?m_LastObjectInstance@CDXEngine@@0PAVObjectInstance@@A DD 01H DUP (?) ; CDXEngine::m_LastObjectInstance
?m_FogLevel@CDXEngine@@0MA DD 01H DUP (?)		; CDXEngine::m_FogLevel
?m_BlipIntensity@CDXEngine@@0MA DD 01H DUP (?)		; CDXEngine::m_BlipIntensity
?m_LinearFogLevel@CDXEngine@@0MA DD 01H DUP (?)		; CDXEngine::m_LinearFogLevel
?m_LinearFog@CDXEngine@@0_NA DB 01H DUP (?)		; CDXEngine::m_LinearFog
	ALIGN	4

?m_FogColor@CDXEngine@@0U_D3DCOLORVALUE@@A DB 010H DUP (?) ; CDXEngine::m_FogColor
?m_VB@CDXEngine@@0UVBItemType@@A DB 02cH DUP (?)	; CDXEngine::m_VB
?m_NODE@CDXEngine@@0TNodeScannerType@@A DD 01H DUP (?)	; CDXEngine::m_NODE
?ZeroTex@CDXEngine@@0PAVTextureHandle@@A DD 01H DUP (?)	; CDXEngine::ZeroTex
?m_AlphaTextureStage@CDXEngine@@0KA DD 01H DUP (?)	; CDXEngine::m_AlphaTextureStage
?m_StencilMode@CDXEngine@@0W4StencilModeType@@A DD 01H DUP (?) ; CDXEngine::m_StencilMode
?m_StencilRef@CDXEngine@@0KA DD 01H DUP (?)		; CDXEngine::m_StencilRef
?m_PitMode@CDXEngine@@0_NA DB 01H DUP (?)		; CDXEngine::m_PitMode
	ALIGN	4

?StateStackLevel@CDXEngine@@0KA DD 01H DUP (?)		; CDXEngine::StateStackLevel
?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A DD 01H DUP (?) ; CDXEngine::m_pD3DD
?m_pD3D@CDXEngine@@0PAUIDirect3D7@@A DD 01H DUP (?)	; CDXEngine::m_pD3D
?m_pDD@CDXEngine@@0PAUIDirectDraw7@@A DD 01H DUP (?)	; CDXEngine::m_pDD
?m_AlphaStack@CDXEngine@@0USurfaceStackType@@A DB 0cH DUP (?) ; CDXEngine::m_AlphaStack
?m_SolidStack@CDXEngine@@0USurfaceStackType@@A DB 0cH DUP (?) ; CDXEngine::m_SolidStack
_BSS	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_BSS	SEGMENT
?_pModule@ATL@@3PAVCComModule@1@A DD 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
_BSS	SEGMENT
?CameraPos@CDXEngine@@0U_D3DVECTOR@@A DB 0cH DUP (?)	; CDXEngine::CameraPos
?LightDir@CDXEngine@@0U_D3DVECTOR@@A DB 0cH DUP (?)	; CDXEngine::LightDir
?ViewPort@CDXEngine@@0U_D3DVIEWPORT7@@A DB 018H DUP (?)	; CDXEngine::ViewPort
?m_RenderState@CDXEngine@@0W4DX_StateType@@A DD 01H DUP (?) ; CDXEngine::m_RenderState
?m_StatesStackLevel@CDXEngine@@0KA DD 01H DUP (?)	; CDXEngine::m_StatesStackLevel
?m_StatesStack@CDXEngine@@0PAUDX_StatesStackType@@A DD 080H DUP (?) ; CDXEngine::m_StatesStack
_BSS	ENDS
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA
_BSS	SEGMENT
?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA DD 01H DUP (?) ; ATL::_pPerfRegFunc
_BSS	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZA
_BSS	SEGMENT
?_pPerfUnRegFunc@ATL@@3P6AJXZA DD 01H DUP (?)		; ATL::_pPerfUnRegFunc
_BSS	ENDS
;	COMDAT ?_AtlRegisterPerUser@ATL@@3_NA
_BSS	SEGMENT
?_AtlRegisterPerUser@ATL@@3_NA DB 01H DUP (?)		; ATL::_AtlRegisterPerUser
_BSS	ENDS
_BSS	SEGMENT
?XMMCamera@CDXEngine@@2TXMMVector@@A DB 010H DUP (?)	; CDXEngine::XMMCamera
?gDebugLodID@@3KA DD 01H DUP (?)			; gDebugLodID
_BSS	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_BSS	SEGMENT
?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA DD 01H DUP (?) ; ATL::CComApartment::ATL_CREATE_OBJECT
_BSS	ENDS
;	COMDAT ?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A
_BSS	SEGMENT
?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A DD 01H DUP (?) ; ATL::_pAtlAutoThreadModule
_BSS	ENDS
_BSS	SEGMENT
?D3DErroCount@@3KA DD 01H DUP (?)			; D3DErroCount
_BSS	ENDS
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_BSS	SEGMENT
?_pAtlModule@ATL@@3PAVCAtlModule@1@A DD 01H DUP (?)	; ATL::_pAtlModule
_BSS	ENDS
;	COMDAT ?m_libid@CAtlModule@ATL@@2U_GUID@@A
_BSS	SEGMENT
?m_libid@CAtlModule@ATL@@2U_GUID@@A DB 010H DUP (?)	; ATL::CAtlModule::m_libid
_BSS	ENDS
_BSS	SEGMENT
?DrawPoints@CDXEngine@@2_NA DB 01H DUP (?)		; CDXEngine::DrawPoints
	ALIGN	4

?DrawLines@CDXEngine@@2_NA DB 01H DUP (?)		; CDXEngine::DrawLines
_BSS	ENDS
;	COMDAT ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA
_BSS	SEGMENT
?m_bInitFailed@CAtlBaseModule@ATL@@2_NA DB 01H DUP (?)	; ATL::CAtlBaseModule::m_bInitFailed
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

?TheSun@CDXEngine@@2U_D3DLIGHT7@@A DB 068H DUP (?)	; CDXEngine::TheSun
?TheNVG@CDXEngine@@2U_D3DLIGHT7@@A DB 068H DUP (?)	; CDXEngine::TheNVG
?TheTV@CDXEngine@@2U_D3DLIGHT7@@A DB 068H DUP (?)	; CDXEngine::TheTV
?TheSunColour@CDXEngine@@2U_D3DCOLORVALUE@@A DB 010H DUP (?) ; CDXEngine::TheSunColour
?TheMaterial@CDXEngine@@2U_D3DMATERIAL7@@A DB 044H DUP (?) ; CDXEngine::TheMaterial
?m_TexUsed@CDXEngine@@0PAKA DD 0100H DUP (?)		; CDXEngine::m_TexUsed
_BSS	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindowLic
CONST	SEGMENT
_IID_IAxWinHostWindowLic DD 03935bda8H
	DW	04ed9H
	DW	0495cH
	DB	086H
	DB	050H
	DB	0e0H
	DB	01fH
	DB	0c1H
	DB	0e3H
	DB	08aH
	DB	04bH
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY *>::pmField
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB DW 04006H	; ATL::CVarTypeInfo<tagCY *>::VT
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY>::pmField
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB DW 06H		; ATL::CVarTypeInfo<tagCY>::VT
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch * *>::pmField
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB DW 04009H	; ATL::CVarTypeInfo<IDispatch * *>::VT
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT
_IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch *>::pmField
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB DW 09H	; ATL::CVarTypeInfo<IDispatch *>::VT
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown * *>::pmField
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB DW 0400dH	; ATL::CVarTypeInfo<IUnknown * *>::VT
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB DW 0dH	; ATL::CVarTypeInfo<IUnknown *>::VT
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t * *>::pmField
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB DW 04008H		; ATL::CVarTypeInfo<wchar_t * *>::VT
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t *>::pmField
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_W@ATL@@2GB DW 08H			; ATL::CVarTypeInfo<wchar_t *>::VT
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB DW 0400cH	; ATL::CVarTypeInfo<tagVARIANT *>::VT
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ DD 08H ; ATL::CVarTypeInfo<double *>::pmField
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAN@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAN@ATL@@2GB DW 04005H		; ATL::CVarTypeInfo<double *>::VT
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT __GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
CONST	SEGMENT
__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713 DD 07fd52380H
	DW	04e07H
	DW	0101bH
	DB	0aeH
	DB	02dH
	DB	08H
	DB	00H
	DB	02bH
	DB	02eH
	DB	0c7H
	DB	013H
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT __GUID_00000109_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000109_0000_0000_c000_000000000046 DD 0109H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ DD 08H ; ATL::CVarTypeInfo<double>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@N@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@N@ATL@@2GB DW 05H			; ATL::CVarTypeInfo<double>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ DD 08H ; ATL::CVarTypeInfo<float *>::pmField
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAM@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAM@ATL@@2GB DW 04004H		; ATL::CVarTypeInfo<float *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ DD 08H ; ATL::CVarTypeInfo<float>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@M@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@M@ATL@@2GB DW 04H			; ATL::CVarTypeInfo<float>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_K@ATL@@2GB DW 04015H		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_K@ATL@@2GB DW 015H			; ATL::CVarTypeInfo<unsigned __int64>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64 *>::pmField
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
CONST	SEGMENT
__GUID_00000000_0000_0000_0000_000000000000 DD 00H
	DW	00H
	DW	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_J@ATL@@2GB DW 04014H		; ATL::CVarTypeInfo<__int64 *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_J@ATL@@2GB DW 014H			; ATL::CVarTypeInfo<__int64>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAK@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAK@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned long *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@K@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned long>::VT
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
_IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ DD 08H ; ATL::CVarTypeInfo<long *>::pmField
CONST	ENDS
;	COMDAT ?MAX_TYPE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_TYPE@CRegParser@ATL@@1HB DD 01000H			; ATL::CRegParser::MAX_TYPE
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAJ@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAJ@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<long *>::VT
CONST	ENDS
;	COMDAT ?cbNeverDelete@CRegParser@ATL@@1HB
CONST	SEGMENT
?cbNeverDelete@CRegParser@ATL@@1HB DD 0cH		; ATL::CRegParser::cbNeverDelete
CONST	ENDS
;	COMDAT ?rgszNeverDelete@CRegParser@ATL@@1QBQBDB
CONST	SEGMENT
?rgszNeverDelete@CRegParser@ATL@@1QBQBDB DD FLAT:??_C@_05PDIKPLII@AppID?$AA@ ; ATL::CRegParser::rgszNeverDelete
	DD	FLAT:??_C@_05GIBEAPNE@CLSID?$AA@
	DD	FLAT:??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
	DD	FLAT:??_C@_08PICKODJL@FileType?$AA@
	DD	FLAT:??_C@_09JKPGEJCH@Interface?$AA@
	DD	FLAT:??_C@_08PPIOJEA@Hardware?$AA@
	DD	FLAT:??_C@_04IHBFOLAC@Mime?$AA@
	DD	FLAT:??_C@_03DDIMFGBA@SAM?$AA@
	DD	FLAT:??_C@_08LOPHEHKG@SECURITY?$AA@
	DD	FLAT:??_C@_06FDHFNJBJ@SYSTEM?$AA@
	DD	FLAT:??_C@_08KEKAJNJI@Software?$AA@
	DD	FLAT:??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ DD 08H ; ATL::CVarTypeInfo<long>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@J@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<long>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int *>::pmField
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAI@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAI@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned int *>::VT
CONST	ENDS
_DATA	SEGMENT
_cloudPntList DD 0c5bcc000r			; -6040
	DD	0c4070000r			; -540
	DD	0c694ac00r			; -19030
	DD	0c6de1c00r			; -28430
	DD	0c4dfc000r			; -1790
	DD	046dcc800r			; 28260
	DD	047104200r			; 36930
	DD	045732000r			; 3890
	DD	04744ea00r			; 50410
	DD	045336000r			; 2870
	DD	0c4d48000r			; -1700
	DD	04736da00r			; 46810
	DD	0c763ee00r			; -58350
	DD	0c4d48000r			; -1700
	DD	0c64c1000r			; -13060
	DD	046f2bc00r			; 31070
	DD	045480000r			; 3200
	DD	0c7293800r			; -43320
	DD	0c7bdc400r			; -97160
	DD	0c4d48000r			; -1700
	DD	04576e000r			; 3950
	DD	0c792e000r			; -75200
	DD	0c4bb8000r			; -1500
	DD	047957400r			; 76520
	DD	04759ee00r			; 55790
	DD	0c5a1e000r			; -5180
	DD	0c7a24e00r			; -83100
	DD	0c7473800r			; -51000
	DD	0c3a00000r			; -320
	DD	0c7829100r			; -66850
	DD	047733400r			; 62260
	DD	0c3a00000r			; -320
	DD	047708200r			; 61570
	DD	0c7710e00r			; -61710
	DD	0c550c000r			; -3340
	DD	046fb7c00r			; 32190
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	0c5bcc000r			; -6040
	DD	0c7495400r			; -51540
	DD	0c694ac00r			; -19030
	DD	0c6a7a800r			; -21460
	DD	0c74b0200r			; -51970
	DD	0468e8000r			; 18240
	DD	047298800r			; 43400
	DD	0c74bf200r			; -52210
	DD	046bc7000r			; 24120
	DD	0c749f400r			; -51700
	DD	0c74bc000r			; -52160
	DD	046948400r			; 19010
	DD	0c605e800r			; -8570
	DD	0c7488200r			; -51330
	DD	0c74ca600r			; -52390
	DD	04731bc00r			; 45500
	DD	0c7509800r			; -53400
	DD	0c6725800r			; -15510
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	0c7a1ae00r			; -82780
	DD	0c749ea00r			; -51690
	DD	0c7bce300r			; -96710
	DD	0c6126800r			; -9370
	DD	0c7495400r			; -51540
	DD	043cd0000r			; 410
	DD	0c6a7a800r			; -21460
	DD	0c74a8a00r			; -51850
	DD	0473fae00r			; 49070
	DD	0457c8000r			; 4040
	DD	0c74e4a00r			; -52810
	DD	047871e00r			; 69180
	DD	0c6cbc000r			; -26080
	DD	0c74bc000r			; -52160
	DD	046984400r			; 19490
	DD	0452fa000r			; 2810
	DD	0c7488200r			; -51330
	DD	0c7081800r			; -34840
	DD	0c7719a00r			; -61850
	DD	0c749d600r			; -51670
	DD	047b17600r			; 90860
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	047c04e00r			; 98460
	DD	0c74d1400r			; -52500
	DD	0c732a200r			; -45730
	DD	0467b9000r			; 16100
	DD	0c7487800r			; -51320
	DD	0c749a400r			; -51620
	DD	047636c00r			; 58220
	DD	0c74e0400r			; -52740
	DD	0c760b000r			; -57520
	DD	0c6126800r			; -9370
	DD	0c4070000r			; -540
	DD	043cd0000r			; 410
	DD	0c4e60000r			; -1840
	DD	0c6a30c00r			; -20870
	DD	0470a6600r			; 35430
	DD	0c7230c00r			; -41740
	DD	046924000r			; 18720
	DD	04797d600r			; 77740
	DD	0460d9000r			; 9060
	DD	0c616c800r			; -9650
	DD	0c7921300r			; -74790
_lightningPosList DD 041300000r			; 11
	DD	000000000r			; 0
	DD	040e00000r			; 7
	DD	040a00000r			; 5
	DD	041100000r			; 9
	DD	041000000r			; 8
	DD	041000000r			; 8
	DD	041600000r			; 14
	DD	041800000r			; 16
	DD	041a00000r			; 20
	DD	041200000r			; 10
	DD	041c00000r			; 24
	DD	041300000r			; 11
	DD	041d80000r			; 27
	DD	040c00000r			; 6
	DD	041f00000r			; 30
	DD	040e00000r			; 7
	DD	042040000r			; 33
	DD	03f800000r			; 1
	DD	042180000r			; 38
	DD	040a00000r			; 5
	DD	042280000r			; 42
	DD	040a00000r			; 5
	DD	042340000r			; 45
	DD	041400000r			; 12
	DD	042400000r			; 48
	DD	041a00000r			; 20
	DD	042500000r			; 52
	DD	041a00000r			; 20
	DD	042680000r			; 58
	DD	041b80000r			; 23
	DD	042740000r			; 61
	DD	041b00000r			; 22
	DD	0427c0000r			; 63
	DD	041b00000r			; 22
	DD	042840000r			; 66
	DD	041c80000r			; 25
	DD	042880000r			; 68
	DD	041a00000r			; 20
	DD	0428c0000r			; 70
	DD	041c00000r			; 24
	DD	042960000r			; 75
	DD	041c00000r			; 24
	DD	0429a0000r			; 77
	DD	041f80000r			; 31
	DD	042a00000r			; 80
	DD	041f80000r			; 31
	DD	042a60000r			; 83
	DD	042040000r			; 33
	DD	042b00000r			; 88
	DD	041f80000r			; 31
	DD	042b80000r			; 92
	DD	0423c0000r			; 47
	DD	042ce0000r			; 103
	DD	042380000r			; 46
	DD	042d20000r			; 105
	DD	0423c0000r			; 47
	DD	042d60000r			; 107
	DD	042340000r			; 45
	DD	042e00000r			; 112
	DD	042400000r			; 48
	DD	042e40000r			; 114
	DD	042380000r			; 46
	DD	042ea0000r			; 117
	DD	0422c0000r			; 43
	DD	043000000r			; 128
_DATA	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int>::pmField
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@I@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@I@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned int>::VT
CONST	ENDS
;	COMDAT ?MAX_VALUE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_VALUE@CRegParser@ATL@@1HB DD 01000H		; ATL::CRegParser::MAX_VALUE
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ DD 08H ; ATL::CVarTypeInfo<int *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAH@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAH@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<int *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ DD 08H ; ATL::CVarTypeInfo<int>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@H@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@H@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<int>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short *>::pmField
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAG@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAG@ATL@@2GB DW 04012H		; ATL::CVarTypeInfo<unsigned short *>::VT
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT __GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
CONST	SEGMENT
__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352 DD 0fc4801a3H
	DW	02ba9H
	DW	011cfH
	DB	0a2H
	DB	029H
	DB	00H
	DB	0aaH
	DB	00H
	DB	03dH
	DB	073H
	DB	052H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short>::pmField
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@G@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@G@ATL@@2GB DW 012H			; ATL::CVarTypeInfo<unsigned short>::VT
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ DD 08H ; ATL::CVarTypeInfo<short *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAF@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAF@ATL@@2GB DW 04002H		; ATL::CVarTypeInfo<short *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ DD 08H ; ATL::CVarTypeInfo<short>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@F@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@F@ATL@@2GB DW 02H			; ATL::CVarTypeInfo<short>::VT
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT
_IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char *>::pmField
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAE@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAE@ATL@@2GB DW 04011H		; ATL::CVarTypeInfo<unsigned char *>::VT
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ DD 08H ; ATL::CVarTypeInfo<char *>::pmField
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAD@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAD@ATL@@2GB DW 04010H		; ATL::CVarTypeInfo<char *>::VT
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT
_CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@E@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@E@ATL@@2GB DW 011H			; ATL::CVarTypeInfo<unsigned char>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ DD 08H ; ATL::CVarTypeInfo<char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@D@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@D@ATL@@2GB DW 010H			; ATL::CVarTypeInfo<char>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Max@?$AtlLimits@_K@ATL@@2_KB DQ ffffffffffffffffH	; ATL::AtlLimits<unsigned __int64>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Min@?$AtlLimits@_K@ATL@@2_KB DQ 0000000000000000H	; ATL::AtlLimits<unsigned __int64>::_Min
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Max@?$AtlLimits@_J@ATL@@2_JB DQ 7fffffffffffffffH	; ATL::AtlLimits<__int64>::_Max
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Min@?$AtlLimits@_J@ATL@@2_JB DQ 8000000000000000H	; ATL::AtlLimits<__int64>::_Min
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Max@?$AtlLimits@K@ATL@@2KB DD 0ffffffffH		; ATL::AtlLimits<unsigned long>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Min@?$AtlLimits@K@ATL@@2KB DD 00H			; ATL::AtlLimits<unsigned long>::_Min
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Max@?$AtlLimits@J@ATL@@2JB DD 07fffffffH		; ATL::AtlLimits<long>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Min@?$AtlLimits@J@ATL@@2JB DD 080000000H		; ATL::AtlLimits<long>::_Min
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Max@?$AtlLimits@I@ATL@@2IB DD 0ffffffffH		; ATL::AtlLimits<unsigned int>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Min@?$AtlLimits@I@ATL@@2IB DD 00H			; ATL::AtlLimits<unsigned int>::_Min
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Max@?$AtlLimits@H@ATL@@2HB DD 07fffffffH		; ATL::AtlLimits<int>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Min@?$AtlLimits@H@ATL@@2HB DD 080000000H		; ATL::AtlLimits<int>::_Min
CONST	ENDS
;	COMDAT ??_C@_06JBKGCNBB@Delete?$AA@
CONST	SEGMENT
??_C@_06JBKGCNBB@Delete?$AA@ DB 'Delete', 00H		; `string'
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?szDelete@ATL@@3QBDB
CONST	SEGMENT
?szDelete@ATL@@3QBDB DD FLAT:??_C@_06JBKGCNBB@Delete?$AA@ ; ATL::szDelete
CONST	ENDS
;	COMDAT ??_C@_08KAAPDIAN@NoRemove?$AA@
CONST	SEGMENT
??_C@_08KAAPDIAN@NoRemove?$AA@ DB 'NoRemove', 00H	; `string'
CONST	ENDS
;	COMDAT ?szNoRemove@ATL@@3QBDB
CONST	SEGMENT
?szNoRemove@ATL@@3QBDB DD FLAT:??_C@_08KAAPDIAN@NoRemove?$AA@ ; ATL::szNoRemove
CONST	ENDS
;	COMDAT ??_C@_0M@DBGDLGLL@ForceRemove?$AA@
CONST	SEGMENT
??_C@_0M@DBGDLGLL@ForceRemove?$AA@ DB 'ForceRemove', 00H ; `string'
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?szForceRemove@ATL@@3QBDB
CONST	SEGMENT
?szForceRemove@ATL@@3QBDB DD FLAT:??_C@_0M@DBGDLGLL@ForceRemove?$AA@ ; ATL::szForceRemove
CONST	ENDS
;	COMDAT ??_C@_03LAIAPFCB@Val?$AA@
CONST	SEGMENT
??_C@_03LAIAPFCB@Val?$AA@ DB 'Val', 00H			; `string'
CONST	ENDS
;	COMDAT __GUID_00000146_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000146_0000_0000_c000_000000000046 DD 0146H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?szValToken@ATL@@3QBDB
CONST	SEGMENT
?szValToken@ATL@@3QBDB DD FLAT:??_C@_03LAIAPFCB@Val?$AA@ ; ATL::szValToken
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B?$AA@
CONST	SEGMENT
??_C@_01HMGJMAIH@B?$AA@ DB 'B', 00H			; `string'
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?szBinaryVal@ATL@@3QBDB
CONST	SEGMENT
?szBinaryVal@ATL@@3QBDB DD FLAT:??_C@_01HMGJMAIH@B?$AA@	; ATL::szBinaryVal
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D?$AA@
CONST	SEGMENT
??_C@_01CKDDGHAB@D?$AA@ DB 'D', 00H			; `string'
CONST	ENDS
;	COMDAT ?szDwordVal@ATL@@3QBDB
CONST	SEGMENT
?szDwordVal@ATL@@3QBDB DD FLAT:??_C@_01CKDDGHAB@D?$AA@	; ATL::szDwordVal
CONST	ENDS
;	COMDAT ??_C@_01PLPBNMEI@M?$AA@
CONST	SEGMENT
??_C@_01PLPBNMEI@M?$AA@ DB 'M', 00H			; `string'
CONST	ENDS
;	COMDAT ?multiszStringVal@ATL@@3QBDB
CONST	SEGMENT
?multiszStringVal@ATL@@3QBDB DD FLAT:??_C@_01PLPBNMEI@M?$AA@ ; ATL::multiszStringVal
CONST	ENDS
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT
??_C@_01CPLAODJH@S?$AA@ DB 'S', 00H			; `string'
CONST	ENDS
;	COMDAT ?szStringVal@ATL@@3QBDB
CONST	SEGMENT
?szStringVal@ATL@@3QBDB DD FLAT:??_C@_01CPLAODJH@S?$AA@	; ATL::szStringVal
CONST	ENDS
;	COMDAT ?chEquals@ATL@@3DB
CONST	SEGMENT
?chEquals@ATL@@3DB DB 03dH				; ATL::chEquals
CONST	ENDS
;	COMDAT ?chQuote@ATL@@3DB
CONST	SEGMENT
?chQuote@ATL@@3DB DB 027H				; ATL::chQuote
CONST	ENDS
;	COMDAT ?chLeftBracket@ATL@@3DB
CONST	SEGMENT
?chLeftBracket@ATL@@3DB DB 07bH				; ATL::chLeftBracket
CONST	ENDS
;	COMDAT ?chRightBracket@ATL@@3DB
CONST	SEGMENT
?chRightBracket@ATL@@3DB DB 07dH			; ATL::chRightBracket
CONST	ENDS
;	COMDAT ?chDirSep@ATL@@3DB
CONST	SEGMENT
?chDirSep@ATL@@3DB DB 05cH				; ATL::chDirSep
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ??_C@_05PDIKPLII@AppID?$AA@
CONST	SEGMENT
??_C@_05PDIKPLII@AppID?$AA@ DB 'AppID', 00H		; `string'
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ??_C@_05GIBEAPNE@CLSID?$AA@
CONST	SEGMENT
??_C@_05GIBEAPNE@CLSID?$AA@ DB 'CLSID', 00H		; `string'
CONST	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT
_IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatchEx
CONST	SEGMENT
_IID_IAxWinAmbientDispatchEx DD 0b2d0778bH
	DW	0ac99H
	DW	04c58H
	DB	0a5H
	DB	0c8H
	DB	0e7H
	DB	072H
	DB	04eH
	DB	053H
	DB	016H
	DB	0b5H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT __GUID_0002e012_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_0002e012_0000_0000_c000_000000000046 DD 02e012H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT __GUID_b196b284_bab4_101a_b69c_00aa00341d07
CONST	SEGMENT
__GUID_b196b284_bab4_101a_b69c_00aa00341d07 DD 0b196b284H
	DW	0bab4H
	DW	0101aH
	DB	0b6H
	DB	09cH
	DB	00H
	DB	0aaH
	DB	00H
	DB	034H
	DB	01dH
	DB	07H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	SEGMENT
??_C@_07KJLOKDKB@TypeLib?$AA@ DB 'TypeLib', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KEKAJNJI@Software?$AA@
CONST	SEGMENT
??_C@_08KEKAJNJI@Software?$AA@ DB 'Software', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDHFNJBJ@SYSTEM?$AA@
CONST	SEGMENT
??_C@_06FDHFNJBJ@SYSTEM?$AA@ DB 'SYSTEM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LOPHEHKG@SECURITY?$AA@
CONST	SEGMENT
??_C@_08LOPHEHKG@SECURITY?$AA@ DB 'SECURITY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03DDIMFGBA@SAM?$AA@
CONST	SEGMENT
??_C@_03DDIMFGBA@SAM?$AA@ DB 'SAM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IHBFOLAC@Mime?$AA@
CONST	SEGMENT
??_C@_04IHBFOLAC@Mime?$AA@ DB 'Mime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPIOJEA@Hardware?$AA@
CONST	SEGMENT
??_C@_08PPIOJEA@Hardware?$AA@ DB 'Hardware', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JKPGEJCH@Interface?$AA@
CONST	SEGMENT
??_C@_09JKPGEJCH@Interface?$AA@ DB 'Interface', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PICKODJL@FileType?$AA@
CONST	SEGMENT
??_C@_08PICKODJL@FileType?$AA@ DB 'FileType', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
CONST	SEGMENT
??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@ DB 'Component Categories', 00H ; `string'
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ___pobjMapEntryLast
ATL$__z	SEGMENT
___pobjMapEntryLast DD 00H
ATL$__z	ENDS
;	COMDAT ___pobjMapEntryFirst
ATL$__a	SEGMENT
___pobjMapEntryFirst DD 00H
ATL$__a	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000000_0000_0000_c000_000000000046 DD 00H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT
_LIBID_ATLLib DD 044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
_NEAR_CLIP DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT
_IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT __GUID_00020400_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020400_0000_0000_c000_000000000046 DD 020400H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	??_GTextureHandle@@QAEPAXI@Z			; TextureHandle::`scalar deleting destructor'
PUBLIC	?Radius@ObjectInstance@@QBEMXZ			; ObjectInstance::Radius
PUBLIC	?F_I32@@YAKM@Z					; F_I32
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z			; D3DXVECTOR3::operator-
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	??9D3DXMATRIX@@QBEHABU0@@Z			; D3DXMATRIX::operator!=
PUBLIC	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z	; D3DXMatrixIdentity
PUBLIC	?LinearFogEnd@RealWeather@@QAEMXZ		; RealWeather::LinearFogEnd
PUBLIC	??0CDXEngine@@QAE@XZ				; CDXEngine::CDXEngine
PUBLIC	??1CDXEngine@@QAE@XZ				; CDXEngine::~CDXEngine
PUBLIC	?EnableCull@CDXEngine@@QAEX_N@Z			; CDXEngine::EnableCull
PUBLIC	?MoveDof@CDXEngine@@QAEX_N@Z			; CDXEngine::MoveDof
PUBLIC	?FlushBuffers@CDXEngine@@QAEXXZ			; CDXEngine::FlushBuffers
PUBLIC	?DrawObject@CDXEngine@@QAEXPAVObjectInstance@@PAUD3DXMATRIX@@PBUTpoint@@MMMM_NK@Z ; CDXEngine::DrawObject
PUBLIC	?Setup@CDXEngine@@QAEXPAUIDirect3DDevice7@@PAUIDirect3D7@@PAUIDirectDraw7@@@Z ; CDXEngine::Setup
PUBLIC	?Release@CDXEngine@@QAEXXZ			; CDXEngine::Release
PUBLIC	?SetCamera@CDXEngine@@QAEXPAUD3DXMATRIX@@U_D3DVECTOR@@0@Z ; CDXEngine::SetCamera
PUBLIC	?SetViewport@CDXEngine@@QAEXKKKK@Z		; CDXEngine::SetViewport
PUBLIC	?SetFogLevel@CDXEngine@@QAEXM@Z			; CDXEngine::SetFogLevel
PUBLIC	?CreateZeroTexture@CDXEngine@@QAEXXZ		; CDXEngine::CreateZeroTexture
PUBLIC	?SelectTexture@CDXEngine@@QAEXH@Z		; CDXEngine::SelectTexture
PUBLIC	?SetStencilMode@CDXEngine@@QAEKK@Z		; CDXEngine::SetStencilMode
PUBLIC	?SaveState@CDXEngine@@QAEXXZ			; CDXEngine::SaveState
PUBLIC	?RestoreState@CDXEngine@@QAEXXZ			; CDXEngine::RestoreState
PUBLIC	?LoadTextures@CDXEngine@@QAEXK@Z		; CDXEngine::LoadTextures
PUBLIC	?UnLoadTextures@CDXEngine@@QAEXK@Z		; CDXEngine::UnLoadTextures
PUBLIC	?SetSunLight@CDXEngine@@QAEXMMM@Z		; CDXEngine::SetSunLight
PUBLIC	?PushMatrix@CDXEngine@@AAEXPAUD3DXMATRIX@@@Z	; CDXEngine::PushMatrix
PUBLIC	?PopMatrix@CDXEngine@@AAEXPAUD3DXMATRIX@@@Z	; CDXEngine::PopMatrix
PUBLIC	?FlushInit@CDXEngine@@AAEXXZ			; CDXEngine::FlushInit
PUBLIC	?FlushObjects@CDXEngine@@AAEXXZ			; CDXEngine::FlushObjects
PUBLIC	?DrawNode@CDXEngine@@AAEXPAVObjectInstance@@KK@Z ; CDXEngine::DrawNode
PUBLIC	?PushSurface@CDXEngine@@AAEKPAUSurfaceStackType@@PAUD3DXMATRIX@@@Z ; CDXEngine::PushSurface
PUBLIC	?PopSurface@CDXEngine@@AAE_NPAUSurfaceStackType@@PAUD3DXMATRIX@@@Z ; CDXEngine::PopSurface
PUBLIC	?GetSurface@CDXEngine@@AAE_NKPAUSurfaceStackType@@PAUD3DXMATRIX@@@Z ; CDXEngine::GetSurface
PUBLIC	?PushSurfaceIntoSort@CDXEngine@@AAE_NPAUSurfaceStackType@@PAUD3DXMATRIX@@@Z ; CDXEngine::PushSurfaceIntoSort
PUBLIC	?DrawSortedAlpha@CDXEngine@@AAEXK_N@Z		; CDXEngine::DrawSortedAlpha
PUBLIC	?DrawSurface@CDXEngine@@AAEXXZ			; CDXEngine::DrawSurface
PUBLIC	?ResetFeatures@CDXEngine@@AAEXXZ		; CDXEngine::ResetFeatures
PUBLIC	?DOFManage@CDXEngine@@AAEXXZ			; CDXEngine::DOFManage
PUBLIC	?DrawAlphaSurfaces@CDXEngine@@AAEXXZ		; CDXEngine::DrawAlphaSurfaces
PUBLIC	?DrawSolidSurfaces@CDXEngine@@AAEXXZ		; CDXEngine::DrawSolidSurfaces
PUBLIC	?SWITCHManage@CDXEngine@@AAEXXZ			; CDXEngine::SWITCHManage
PUBLIC	?SetViewMode@CDXEngine@@AAEXXZ			; CDXEngine::SetViewMode
PUBLIC	?Process_DOFRot@CDXEngine@@AAEMMHHMMMM@Z	; CDXEngine::Process_DOFRot
PUBLIC	?DOF@CDXEngine@@AAEXXZ				; CDXEngine::DOF
PUBLIC	?AssignDOFRotation@CDXEngine@@AAEXPAUD3DXMATRIX@@@Z ; CDXEngine::AssignDOFRotation
PUBLIC	?AssignDOFTranslation@CDXEngine@@AAEXPAUD3DXMATRIX@@@Z ; CDXEngine::AssignDOFTranslation
PUBLIC	?SetRenderState@CDXEngine@@AAEXTDXFlagsType@@0_N@Z ; CDXEngine::SetRenderState
PUBLIC	?StoreSetupState@CDXEngine@@AAEXXZ		; CDXEngine::StoreSetupState
PUBLIC	?GenerateFastRandom@@YAJXZ			; GenerateFastRandom
PUBLIC	?PRANDFloatPos@@YAMXZ				; PRANDFloatPos
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	?State@CDXEngine@@0UD3DXMATRIX@@A		; CDXEngine::State
PUBLIC	?DofTransformation@CDXEngine@@0UD3DXMATRIX@@A	; CDXEngine::DofTransformation
PUBLIC	?AppliedState@CDXEngine@@0UD3DXMATRIX@@A	; CDXEngine::AppliedState
PUBLIC	?StateStack@CDXEngine@@0PAUD3DXMATRIX@@A	; CDXEngine::StateStack
PUBLIC	?CameraView@CDXEngine@@0UD3DXMATRIX@@A		; CDXEngine::CameraView
PUBLIC	?BBMatrix@CDXEngine@@0UD3DXMATRIX@@A		; CDXEngine::BBMatrix
PUBLIC	?Projection@CDXEngine@@0UD3DXMATRIX@@A		; CDXEngine::Projection
PUBLIC	?World@CDXEngine@@0UD3DXMATRIX@@A		; CDXEngine::World
PUBLIC	?TheDXEngine@@3VCDXEngine@@A			; TheDXEngine
PUBLIC	?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA	; `GenerateFastRandom'::`2'::LastRandom
PUBLIC	??_C@_0BM@KPKHLCDF@Corrupted?5Model?5ID?5?3?5?$CFd?5?$CB?$CB?$CB?$AA@ ; `string'
PUBLIC	??_C@_09KIOKOPID@DX?5Engine?$AA@		; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3c8efa2d
PUBLIC	__real@3d23d70a
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e99999a
PUBLIC	__real@3f051eb8
PUBLIC	__real@3f19999a
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@40800000
PUBLIC	__real@40a00000
PUBLIC	__real@40d9999a
PUBLIC	__real@43700000
PUBLIC	__real@437f0000
PUBLIC	__real@43800000
PUBLIC	__real@47435000
PUBLIC	__real@477fff00
PUBLIC	__real@47c35000
PUBLIC	__real@48435000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_malloc:PROC
EXTRN	_memcmp:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	_printf:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	??0TextureHandle@@QAE@XZ:PROC			; TextureHandle::TextureHandle
EXTRN	??1TextureHandle@@QAE@XZ:PROC			; TextureHandle::~TextureHandle
EXTRN	?Create@TextureHandle@@QAE_NPADKGGGK@Z:PROC	; TextureHandle::Create
EXTRN	?ReferenceTexSet@ObjectParent@@QAEXKK@Z:PROC	; ObjectParent::ReferenceTexSet
EXTRN	?ChooseLOD@ObjectParent@@QAEPAVObjectLOD@@MPAHPAM@Z:PROC ; ObjectParent::ChooseLOD
EXTRN	_D3DXVec3Normalize@8:PROC
EXTRN	_D3DXMatrixMultiply@12:PROC
EXTRN	_D3DXMatrixTranslation@16:PROC
EXTRN	_D3DXMatrixRotationX@8:PROC
EXTRN	?GetModelData@CDXVbManager@@QAEXAAUVBItemType@@K@Z:PROC ; CDXVbManager::GetModelData
EXTRN	?AddDrawRequest@CDXVbManager@@QAEXPAVObjectInstance@@KPAUD3DXMATRIX@@_NKM@Z:PROC ; CDXVbManager::AddDrawRequest
EXTRN	?ResetDrawList@CDXVbManager@@QAEXXZ:PROC	; CDXVbManager::ResetDrawList
EXTRN	?GetDrawItem@CDXVbManager@@QAE_NPAPAVObjectInstance@@PAKPAUD3DXMATRIX@@PA_N1PAM@Z:PROC ; CDXVbManager::GetDrawItem
EXTRN	?ClearDrawList@CDXVbManager@@QAEXXZ:PROC	; CDXVbManager::ClearDrawList
EXTRN	?Reference@TextureBankClass@@SAXH@Z:PROC	; TextureBankClass::Reference
EXTRN	?Release@TextureBankClass@@SAXH@Z:PROC		; TextureBankClass::Release
EXTRN	?GetHandle@TextureBankClass@@SAKK@Z:PROC	; TextureBankClass::GetHandle
EXTRN	?Setup@CDXLight@@QAEXPAUIDirect3DDevice7@@PAUIDirect3D7@@@Z:PROC ; CDXLight::Setup
EXTRN	?AddDynamicLight@CDXLight@@QAEKKPAUDXLightType@@PAUD3DXMATRIX@@PAU_D3DVECTOR@@M@Z:PROC ; CDXLight::AddDynamicLight
EXTRN	?ResetLightsList@CDXLight@@QAEXXZ:PROC		; CDXLight::ResetLightsList
EXTRN	?UpdateDynamicLights@CDXLight@@QAEXKPAU_D3DVECTOR@@M@Z:PROC ; CDXLight::UpdateDynamicLights
EXTRN	?EnableMappedLights@CDXLight@@QAEXXZ:PROC	; CDXLight::EnableMappedLights
EXTRN	?DrawBlip@CDXEngine@@QAEXPAVObjectInstance@@PAUD3DXMATRIX@@PBUTpoint@@MMMM_N@Z:PROC ; CDXEngine::DrawBlip
EXTRN	?FlushBlips@CDXEngine@@AAEXXZ:PROC		; CDXEngine::FlushBlips
EXTRN	?Draw3DPoint@CDXEngine@@QAEXPAU_D3DVECTOR@@K_N1@Z:PROC ; CDXEngine::Draw3DPoint
EXTRN	?CleanUpTexturesOnDevice@CDXEngine@@QAEXXZ:PROC	; CDXEngine::CleanUpTexturesOnDevice
EXTRN	?ReleaseTextures@CDXEngine@@QAEXXZ:PROC		; CDXEngine::ReleaseTextures
EXTRN	?FlushDynamicObjects@CDXEngine@@QAEXXZ:PROC	; CDXEngine::FlushDynamicObjects
EXTRN	?DX2D_AddObject@CDXEngine@@QAEXKKPAUSurfaceStackType@@PAUD3DXVECTOR3@@@Z:PROC ; CDXEngine::DX2D_AddObject
EXTRN	?DX2D_Init@CDXEngine@@AAEXXZ:PROC		; CDXEngine::DX2D_Init
EXTRN	?DX2D_Release@CDXEngine@@AAEXXZ:PROC		; CDXEngine::DX2D_Release
EXTRN	?GetLightDirection@CTimeOfDay@@QAEXPAUTpoint@@@Z:PROC ; CTimeOfDay::GetLightDirection
EXTRN	?CheckHR@@YAXJ@Z:PROC				; CheckHR
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?TheObjectLODsCount@@3HA:DWORD			; TheObjectLODsCount
EXTRN	?TheObjectListLength@@3HA:DWORD			; TheObjectListLength
EXTRN	?TheVbManager@@3VCDXVbManager@@A:BYTE		; TheVbManager
EXTRN	?cs_VbManager@@3U_RTL_CRITICAL_SECTION@@A:BYTE	; cs_VbManager
EXTRN	?realWeather@@3PAVRealWeather@@A:DWORD		; realWeather
EXTRN	?LightsToOn@CDXLight@@2PA_NA:BYTE		; CDXLight::LightsToOn
EXTRN	?TheLightEngine@@3VCDXLight@@A:BYTE		; TheLightEngine
EXTRN	?BBCx@CDXEngine@@2PATXMMVector@@A:BYTE		; CDXEngine::BBCx
EXTRN	?DXScriptArray@@3PAP6A_NPAU_D3DVECTOR@@PAVObjectInstance@@PAK@ZA:BYTE ; DXScriptArray
EXTRN	?TheTimeOfDay@@3VCTimeOfDay@@A:BYTE		; TheTimeOfDay
EXTRN	?g_bGreyMFD@@3_NA:BYTE				; g_bGreyMFD
EXTRN	?bNVGmode@@3_NA:BYTE				; bNVGmode
EXTRN	?gDebugTextureID@@3KA:DWORD			; gDebugTextureID
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

?State@CDXEngine@@0UD3DXMATRIX@@A DB 040H DUP (?)	; CDXEngine::State
?DofTransformation@CDXEngine@@0UD3DXMATRIX@@A DB 040H DUP (?) ; CDXEngine::DofTransformation
?AppliedState@CDXEngine@@0UD3DXMATRIX@@A DB 040H DUP (?) ; CDXEngine::AppliedState
?StateStack@CDXEngine@@0PAUD3DXMATRIX@@A DB 02000H DUP (?) ; CDXEngine::StateStack
?CameraView@CDXEngine@@0UD3DXMATRIX@@A DB 040H DUP (?)	; CDXEngine::CameraView
?BBMatrix@CDXEngine@@0UD3DXMATRIX@@A DB 040H DUP (?)	; CDXEngine::BBMatrix
?Projection@CDXEngine@@0UD3DXMATRIX@@A DB 040H DUP (?)	; CDXEngine::Projection
?World@CDXEngine@@0UD3DXMATRIX@@A DB 040H DUP (?)	; CDXEngine::World
?TheDXEngine@@3VCDXEngine@@A DB 01a50H DUP (?)		; TheDXEngine
_BSS	ENDS
;	COMDAT ?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA
_BSS	SEGMENT
?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA DD 01H DUP (?) ; `GenerateFastRandom'::`2'::LastRandom
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@48435000
CONST	SEGMENT
__real@48435000 DD 048435000r			; 200000
CONST	ENDS
;	COMDAT __real@47c35000
CONST	SEGMENT
__real@47c35000 DD 047c35000r			; 100000
CONST	ENDS
;	COMDAT __real@477fff00
CONST	SEGMENT
__real@477fff00 DD 0477fff00r			; 65535
CONST	ENDS
;	COMDAT __real@47435000
CONST	SEGMENT
__real@47435000 DD 047435000r			; 50000
CONST	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@43700000
CONST	SEGMENT
__real@43700000 DD 043700000r			; 240
CONST	ENDS
;	COMDAT __real@40d9999a
CONST	SEGMENT
__real@40d9999a DD 040d9999ar			; 6.8
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f051eb8
CONST	SEGMENT
__real@3f051eb8 DD 03f051eb8r			; 0.52
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@3d23d70a
CONST	SEGMENT
__real@3d23d70a DD 03d23d70ar			; 0.04
CONST	ENDS
;	COMDAT __real@3c8efa2d
CONST	SEGMENT
__real@3c8efa2d DD 03c8efa2dr			; 0.0174533
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_09KIOKOPID@DX?5Engine?$AA@
CONST	SEGMENT
??_C@_09KIOKOPID@DX?5Engine?$AA@ DB 'DX Engine', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@KPKHLCDF@Corrupted?5Model?5ID?5?3?5?$CFd?5?$CB?$CB?$CB?$AA@
CONST	SEGMENT
??_C@_0BM@KPKHLCDF@Corrupted?5Model?5ID?5?3?5?$CFd?5?$CB?$CB?$CB?$AA@ DB 'C'
	DB	'orrupted Model ID : %d !!!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?CreateZeroTexture@CDXEngine@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateZeroTexture@CDXEngine@@QAEXXZ$0
__ehfuncinfo$?CreateZeroTexture@CDXEngine@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateZeroTexture@CDXEngine@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_TheDXEngine$initializer$ DD FLAT:??__ETheDXEngine@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?State$initializer$@CDXEngine@@0P6AXXZA DD FLAT:??__E?State@CDXEngine@@0UD3DXMATRIX@@A@@YAXXZ ; CDXEngine::State$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?DofTransformation$initializer$@CDXEngine@@0P6AXXZA DD FLAT:??__E?DofTransformation@CDXEngine@@0UD3DXMATRIX@@A@@YAXXZ ; CDXEngine::DofTransformation$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?AppliedState$initializer$@CDXEngine@@0P6AXXZA DD FLAT:??__E?AppliedState@CDXEngine@@0UD3DXMATRIX@@A@@YAXXZ ; CDXEngine::AppliedState$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?CameraView$initializer$@CDXEngine@@0P6AXXZA DD FLAT:??__E?CameraView@CDXEngine@@0UD3DXMATRIX@@A@@YAXXZ ; CDXEngine::CameraView$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?BBMatrix$initializer$@CDXEngine@@0P6AXXZA DD FLAT:??__E?BBMatrix@CDXEngine@@0UD3DXMATRIX@@A@@YAXXZ ; CDXEngine::BBMatrix$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?Projection$initializer$@CDXEngine@@0P6AXXZA DD FLAT:??__E?Projection@CDXEngine@@0UD3DXMATRIX@@A@@YAXXZ ; CDXEngine::Projection$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?World$initializer$@CDXEngine@@0P6AXXZA DD FLAT:??__E?World@CDXEngine@@0UD3DXMATRIX@@A@@YAXXZ ; CDXEngine::World$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?StateStack$initializer$@CDXEngine@@0P6AXXZA DD FLAT:??__E?StateStack@CDXEngine@@0PAUD3DXMATRIX@@A@@YAXXZ ; CDXEngine::StateStack$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
;	COMDAT ??__E?StateStack@CDXEngine@@0PAUD3DXMATRIX@@A@@YAXXZ
text$yc	SEGMENT
??__E?StateStack@CDXEngine@@0PAUD3DXMATRIX@@A@@YAXXZ PROC ; `dynamic initializer for 'CDXEngine::StateStack'', COMDAT

; 52   : D3DXMATRIX				CDXEngine::StateStack[128];			

	push	ebp
	mov	ebp, esp
	push	OFFSET ??0D3DXMATRIX@@QAE@XZ		; D3DXMATRIX::D3DXMATRIX
	push	128					; 00000080H
	push	64					; 00000040H
	push	OFFSET ?StateStack@CDXEngine@@0PAUD3DXMATRIX@@A ; CDXEngine::StateStack
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	pop	ebp
	ret	0
??__E?StateStack@CDXEngine@@0PAUD3DXMATRIX@@A@@YAXXZ ENDP ; `dynamic initializer for 'CDXEngine::StateStack''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
;	COMDAT ??__E?World@CDXEngine@@0UD3DXMATRIX@@A@@YAXXZ
text$yc	SEGMENT
??__E?World@CDXEngine@@0UD3DXMATRIX@@A@@YAXXZ PROC	; `dynamic initializer for 'CDXEngine::World'', COMDAT

; 44   : D3DXMATRIX				CDXEngine::World;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?World@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::World
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	pop	ebp
	ret	0
??__E?World@CDXEngine@@0UD3DXMATRIX@@A@@YAXXZ ENDP	; `dynamic initializer for 'CDXEngine::World''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
;	COMDAT ??__E?Projection@CDXEngine@@0UD3DXMATRIX@@A@@YAXXZ
text$yc	SEGMENT
??__E?Projection@CDXEngine@@0UD3DXMATRIX@@A@@YAXXZ PROC	; `dynamic initializer for 'CDXEngine::Projection'', COMDAT

; 43   : D3DXMATRIX				CDXEngine::Projection;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?Projection@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::Projection
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	pop	ebp
	ret	0
??__E?Projection@CDXEngine@@0UD3DXMATRIX@@A@@YAXXZ ENDP	; `dynamic initializer for 'CDXEngine::Projection''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
;	COMDAT ??__E?BBMatrix@CDXEngine@@0UD3DXMATRIX@@A@@YAXXZ
text$yc	SEGMENT
??__E?BBMatrix@CDXEngine@@0UD3DXMATRIX@@A@@YAXXZ PROC	; `dynamic initializer for 'CDXEngine::BBMatrix'', COMDAT

; 40   : D3DXMATRIX				CDXEngine::BBMatrix;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?BBMatrix@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::BBMatrix
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	pop	ebp
	ret	0
??__E?BBMatrix@CDXEngine@@0UD3DXMATRIX@@A@@YAXXZ ENDP	; `dynamic initializer for 'CDXEngine::BBMatrix''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
;	COMDAT ??__E?CameraView@CDXEngine@@0UD3DXMATRIX@@A@@YAXXZ
text$yc	SEGMENT
??__E?CameraView@CDXEngine@@0UD3DXMATRIX@@A@@YAXXZ PROC	; `dynamic initializer for 'CDXEngine::CameraView'', COMDAT

; 39   : D3DXMATRIX				CDXEngine::CameraView;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?CameraView@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::CameraView
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	pop	ebp
	ret	0
??__E?CameraView@CDXEngine@@0UD3DXMATRIX@@A@@YAXXZ ENDP	; `dynamic initializer for 'CDXEngine::CameraView''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
;	COMDAT ??__E?AppliedState@CDXEngine@@0UD3DXMATRIX@@A@@YAXXZ
text$yc	SEGMENT
??__E?AppliedState@CDXEngine@@0UD3DXMATRIX@@A@@YAXXZ PROC ; `dynamic initializer for 'CDXEngine::AppliedState'', COMDAT

; 37   : D3DXMATRIX				CDXEngine::State, CDXEngine::DofTransformation, CDXEngine::AppliedState;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?AppliedState@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::AppliedState
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	pop	ebp
	ret	0
??__E?AppliedState@CDXEngine@@0UD3DXMATRIX@@A@@YAXXZ ENDP ; `dynamic initializer for 'CDXEngine::AppliedState''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
;	COMDAT ??__E?DofTransformation@CDXEngine@@0UD3DXMATRIX@@A@@YAXXZ
text$yc	SEGMENT
??__E?DofTransformation@CDXEngine@@0UD3DXMATRIX@@A@@YAXXZ PROC ; `dynamic initializer for 'CDXEngine::DofTransformation'', COMDAT

; 37   : D3DXMATRIX				CDXEngine::State, CDXEngine::DofTransformation, CDXEngine::AppliedState;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?DofTransformation@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::DofTransformation
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	pop	ebp
	ret	0
??__E?DofTransformation@CDXEngine@@0UD3DXMATRIX@@A@@YAXXZ ENDP ; `dynamic initializer for 'CDXEngine::DofTransformation''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
;	COMDAT ??__E?State@CDXEngine@@0UD3DXMATRIX@@A@@YAXXZ
text$yc	SEGMENT
??__E?State@CDXEngine@@0UD3DXMATRIX@@A@@YAXXZ PROC	; `dynamic initializer for 'CDXEngine::State'', COMDAT

; 37   : D3DXMATRIX				CDXEngine::State, CDXEngine::DofTransformation, CDXEngine::AppliedState;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?State@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::State
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	pop	ebp
	ret	0
??__E?State@CDXEngine@@0UD3DXMATRIX@@A@@YAXXZ ENDP	; `dynamic initializer for 'CDXEngine::State''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__FTheDXEngine@@YAXXZ
text$yd	SEGMENT
??__FTheDXEngine@@YAXXZ PROC				; `dynamic atexit destructor for 'TheDXEngine'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?TheDXEngine@@3VCDXEngine@@A ; TheDXEngine
	call	??1CDXEngine@@QAE@XZ			; CDXEngine::~CDXEngine
	pop	ebp
	ret	0
??__FTheDXEngine@@YAXXZ ENDP				; `dynamic atexit destructor for 'TheDXEngine''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
;	COMDAT ??__ETheDXEngine@@YAXXZ
text$yc	SEGMENT
??__ETheDXEngine@@YAXXZ PROC				; `dynamic initializer for 'TheDXEngine'', COMDAT

; 31   : CDXEngine	TheDXEngine;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?TheDXEngine@@3VCDXEngine@@A ; TheDXEngine
	call	??0CDXEngine@@QAE@XZ			; CDXEngine::CDXEngine
	push	OFFSET ??__FTheDXEngine@@YAXXZ		; `dynamic atexit destructor for 'TheDXEngine''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__ETheDXEngine@@YAXXZ ENDP				; `dynamic initializer for 'TheDXEngine''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\fakerand.h
;	COMDAT ?PRANDFloatPos@@YAMXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_x$ = -4						; size = 4
?PRANDFloatPos@@YAMXZ PROC				; PRANDFloatPos, COMDAT

; 150  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 151  : //	return NRANDPOS;
; 152  : 	float	x=	(float)(GenerateFastRandom()&0xffff);

	call	?GenerateFastRandom@@YAJXZ		; GenerateFastRandom
	and	eax, 65535				; 0000ffffH
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _x$[ebp], xmm0

; 153  : 	return( x / 65535.0f);

	movss	xmm0, DWORD PTR _x$[ebp]
	divss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv72[ebp], xmm0
	fld	DWORD PTR tv72[ebp]

; 154  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?PRANDFloatPos@@YAMXZ ENDP				; PRANDFloatPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\fakerand.h
;	COMDAT ?GenerateFastRandom@@YAJXZ
_TEXT	SEGMENT
_FastRandom$ = -4					; size = 4
?GenerateFastRandom@@YAJXZ PROC				; GenerateFastRandom, COMDAT

; 108  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 109  : 	static long LastRandom;
; 110  : 	long	FastRandom;														// The Random Variable
; 111  : 	_asm {	
; 112  : 			push	edx

	push	edx

; 113  : 			push	eax

	push	eax

; 114  : 			RDTSC

	rdtsc

; 115  : 			add	DWORD PTR FastRandom,edx

	add	DWORD PTR _FastRandom$[ebp], edx

; 116  : 			xor	DWORD PTR FastRandom,eax

	xor	DWORD PTR _FastRandom$[ebp], eax

; 117  : 			mov	eax, DWORD PTR LastRandom

	mov	eax, DWORD PTR ?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA ; `GenerateFastRandom'::`2'::LastRandom

; 118  : 			add	DWORD PTR FastRandom,eax

	add	DWORD PTR _FastRandom$[ebp], eax

; 119  : 			add	DWORD PTR LastRandom,edx

	add	DWORD PTR ?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA, edx ; `GenerateFastRandom'::`2'::LastRandom

; 120  : 			pop	eax

	pop	eax

; 121  : 			pop	edx

	pop	edx

; 122  : 	}
; 123  : 	return(FastRandom);

	mov	eax, DWORD PTR _FastRandom$[ebp]

; 124  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GenerateFastRandom@@YAJXZ ENDP				; GenerateFastRandom
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_StateHandle$ = -8					; size = 4
_i$1 = -4						; size = 4
?StoreSetupState@CDXEngine@@AAEXXZ PROC			; CDXEngine::StoreSetupState
; _this$ = ecx

; 127  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 	// First of all save present renderer State
; 129  : 	DWORD	StateHandle;
; 130  : 	CheckHR(m_pD3DD->CreateStateBlock(D3DSBT_ALL, &StateHandle));

	lea	eax, DWORD PTR _StateHandle$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+168]
	call	ecx
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 131  : 
; 132  : 	// Setup all Default engine States
; 133  : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_STIPPLEDALPHA,FALSE);

	push	0
	push	33					; 00000021H
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx

; 134  : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_COLORKEYENABLE,FALSE);

	push	0
	push	41					; 00000029H
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 135  : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_STENCILENABLE,FALSE);

	push	0
	push	52					; 00000034H
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 136  : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_DITHERENABLE,FALSE);

	push	0
	push	26					; 0000001aH
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx

; 137  : 	m_pD3DD->SetRenderState( D3DRENDERSTATE_ZWRITEENABLE, TRUE );

	push	1
	push	14					; 0000000eH
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 138  : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_ZFUNC,D3DCMP_LESSEQUAL); 

	push	4
	push	23					; 00000017H
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 139  : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE,TRUE);

	push	1
	push	4
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx

; 140  : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_LASTPIXEL,TRUE);

	push	1
	push	16					; 00000010H
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 141  : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_SPECULARENABLE, TRUE );

	push	1
	push	29					; 0000001dH
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 142  : 
; 143  : 	// Disable all stages
; 144  : 	for(int i = 0; i < 8; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@StoreSetup
$LN2@StoreSetup:
	mov	edx, DWORD PTR _i$1[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
$LN3@StoreSetup:
	cmp	DWORD PTR _i$1[ebp], 8
	jge	SHORT $LN1@StoreSetup

; 145  : 	{
; 146  : 		m_pD3DD->SetTextureStageState(i,D3DTSS_COLOROP,D3DTOP_DISABLE);

	push	1
	push	1
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+148]
	call	ecx

; 147  : 		m_pD3DD->SetTextureStageState(i,D3DTSS_ALPHAOP,D3DTOP_DISABLE);

	push	1
	push	4
	mov	edx, DWORD PTR _i$1[ebp]
	push	edx
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+148]
	call	eax

; 148  : 	}

	jmp	SHORT $LN2@StoreSetup
$LN1@StoreSetup:

; 149  : 
; 150  : 	m_pD3DD->SetTextureStageState(0,D3DTSS_MAGFILTER,D3DTFG_LINEAR);

	push	2
	push	16					; 00000010H
	push	0
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+148]
	call	ecx

; 151  : 	m_pD3DD->SetTextureStageState(0,D3DTSS_MINFILTER,D3DTFN_LINEAR);

	push	2
	push	17					; 00000011H
	push	0
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+148]
	call	edx

; 152  : 	m_pD3DD->SetTextureStageState(1,D3DTSS_MAGFILTER,D3DTFG_LINEAR);

	push	2
	push	16					; 00000010H
	push	1
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+148]
	call	eax

; 153  : 	m_pD3DD->SetTextureStageState(1,D3DTSS_MINFILTER,D3DTFN_LINEAR);

	push	2
	push	17					; 00000011H
	push	1
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+148]
	call	ecx

; 154  : 	m_pD3DD->SetTextureStageState(2,D3DTSS_MAGFILTER,D3DTFG_LINEAR);

	push	2
	push	16					; 00000010H
	push	2
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+148]
	call	edx

; 155  : 	m_pD3DD->SetTextureStageState(2,D3DTSS_MINFILTER,D3DTFN_LINEAR);

	push	2
	push	17					; 00000011H
	push	2
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+148]
	call	eax

; 156  : 	m_pD3DD->SetTextureStageState(3,D3DTSS_MAGFILTER,D3DTFG_LINEAR);

	push	2
	push	16					; 00000010H
	push	3
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+148]
	call	ecx

; 157  : 	m_pD3DD->SetTextureStageState(3,D3DTSS_MINFILTER,D3DTFN_LINEAR);

	push	2
	push	17					; 00000011H
	push	3
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+148]
	call	edx

; 158  : 
; 159  : 	// Enable Alpha Rendering
; 160  : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_SRCBLEND,D3DBLEND_SRCALPHA);

	push	5
	push	19					; 00000013H
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 161  : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_DESTBLEND,D3DBLEND_INVSRCALPHA);

	push	6
	push	20					; 00000014H
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 162  : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE,TRUE);

	push	1
	push	27					; 0000001bH
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx

; 163  : 
; 164  : 	CheckHR(m_pD3DD->CreateStateBlock(D3DSBT_PIXELSTATE, &DxEngineStateHandle));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	push	2
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+168]
	call	ecx
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 165  : 
; 166  : 	// Restore Previous State Block and delete it from memory
; 167  : 	CheckHR(m_pD3DD->ApplyStateBlock(StateHandle));

	mov	edx, DWORD PTR _StateHandle$[ebp]
	push	edx
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+156]
	call	eax
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 168  : 	CheckHR(m_pD3DD->DeleteStateBlock(StateHandle));

	mov	ecx, DWORD PTR _StateHandle$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+164]
	call	edx
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 169  : 	
; 170  : 
; 171  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?StoreSetupState@CDXEngine@@AAEXXZ ENDP			; CDXEngine::StoreSetupState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Flags$ = 8						; size = 4
_NewFlags$ = 12						; size = 4
_Enable$ = 16						; size = 1
?SetRenderState@CDXEngine@@AAEXTDXFlagsType@@0_N@Z PROC	; CDXEngine::SetRenderState
; _this$ = ecx

; 708  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 709  : 
; 710  : 	// ********************** ENABLE BLOCK *********************
; 711  : 	if(Enable){

	movzx	eax, BYTE PTR _Enable$[ebp]
	test	eax, eax
	je	$LN6@SetRenderS

; 712  : 
; 713  : #ifdef	EDIT_ENGINE	
; 714  : 		if(m_FrameDrawMode){
; 715  : 			Flags.w=0;
; 716  : 			Flags.b.Line=1;
; 717  : 			Flags.b.VColor=1;
; 718  : 			NewFlags.w=0;
; 719  : 			m_pD3DD->SetRenderState( D3DRENDERSTATE_FILLMODE, D3DFILL_WIREFRAME );
; 720  : 		    m_pD3DD->SetRenderState( D3DRENDERSTATE_EMISSIVEMATERIALSOURCE, D3DMCS_MATERIAL );
; 721  : 			TheMaterial.specular.r=TheMaterial.specular.g=TheMaterial.specular.b=1.0f;
; 722  : 			TheMaterial.emissive.r=TheMaterial.emissive.g=TheMaterial.emissive.b=1.0f;
; 723  : 			m_pD3DD->SetRenderState( D3DRENDERSTATE_CULLMODE, (m_bCullEnable)?D3DCULL_CW:D3DCULL_NONE );
; 724  : 		}
; 725  : #endif
; 726  : 
; 727  : 		// **** CHROMA KEYING INITIALIZATION ****
; 728  : 		if(Flags.b.ChromaKey){

	mov	ecx, DWORD PTR _Flags$[ebp]
	shr	ecx, 2
	and	ecx, 1
	je	$LN5@SetRenderS

; 729  : 			m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHATESTENABLE,TRUE);

	push	1
	push	15					; 0000000fH
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx

; 730  : 			m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHAREF,(DWORD)1);

	push	1
	push	24					; 00000018H
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 731  : 			m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHAFUNC,D3DCMP_GREATEREQUAL);

	push	7
	push	25					; 00000019H
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 732  : 			m_pD3DD->SetRenderState(D3DRENDERSTATE_SRCBLEND,D3DBLEND_SRCALPHA);

	push	5
	push	19					; 00000013H
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx

; 733  : 			m_pD3DD->SetRenderState(D3DRENDERSTATE_DESTBLEND,D3DBLEND_INVSRCALPHA);

	push	6
	push	20					; 00000014H
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 734  : 			m_pD3DD->SetTextureStageState(m_AlphaTextureStage,D3DTSS_ALPHAARG1,D3DTA_TEXTURE);

	push	2
	push	5
	mov	ecx, DWORD PTR ?m_AlphaTextureStage@CDXEngine@@0KA ; CDXEngine::m_AlphaTextureStage
	push	ecx
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+148]
	call	edx

; 735  : 			m_pD3DD->SetTextureStageState(m_AlphaTextureStage,D3DTSS_ALPHAOP,D3DTOP_SELECTARG1);

	push	2
	push	4
	mov	eax, DWORD PTR ?m_AlphaTextureStage@CDXEngine@@0KA ; CDXEngine::m_AlphaTextureStage
	push	eax
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+148]
	call	ecx

; 736  : 			m_pD3DD->SetTextureStageState(m_AlphaTextureStage,D3DTSS_MAGFILTER,D3DTFG_POINT);

	push	1
	push	16					; 00000010H
	mov	edx, DWORD PTR ?m_AlphaTextureStage@CDXEngine@@0KA ; CDXEngine::m_AlphaTextureStage
	push	edx
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+148]
	call	eax

; 737  : 			m_pD3DD->SetTextureStageState(m_AlphaTextureStage,D3DTSS_MINFILTER,D3DTFN_POINT);

	push	1
	push	17					; 00000011H
	mov	ecx, DWORD PTR ?m_AlphaTextureStage@CDXEngine@@0KA ; CDXEngine::m_AlphaTextureStage
	push	ecx
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+148]
	call	edx
$LN5@SetRenderS:

; 738  : 		}
; 739  : 		// **************************************
; 740  : 
; 741  : 
; 742  : 
; 743  : 		// *** ALPHA BLENDING SELECTION - FROM VERTEX COLOR SELECTION *
; 744  : 		if(Flags.b.VColor){

	mov	eax, DWORD PTR _Flags$[ebp]
	shr	eax, 3
	and	eax, 1
	je	SHORT $LN6@SetRenderS

; 745  : 			m_pD3DD->SetTextureStageState(m_AlphaTextureStage, D3DTSS_ALPHAARG1, D3DTA_DIFFUSE);

	push	0
	push	5
	mov	ecx, DWORD PTR ?m_AlphaTextureStage@CDXEngine@@0KA ; CDXEngine::m_AlphaTextureStage
	push	ecx
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+148]
	call	edx

; 746  : 			m_pD3DD->SetTextureStageState(m_AlphaTextureStage, D3DTSS_ALPHAARG2, D3DTA_TEXTURE);

	push	2
	push	6
	mov	eax, DWORD PTR ?m_AlphaTextureStage@CDXEngine@@0KA ; CDXEngine::m_AlphaTextureStage
	push	eax
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+148]
	call	ecx

; 747  : 			m_pD3DD->SetTextureStageState(m_AlphaTextureStage, D3DTSS_ALPHAOP, D3DTOP_MODULATE);

	push	4
	push	4
	mov	edx, DWORD PTR ?m_AlphaTextureStage@CDXEngine@@0KA ; CDXEngine::m_AlphaTextureStage
	push	edx
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+148]
	call	eax
$LN6@SetRenderS:

; 748  : 			
; 749  : 		}
; 750  : 
; 751  : 
; 752  : #ifdef	EDIT_ENGINE	
; 753  : 		if(Flags.b.Gouraud)	m_pD3DD->SetRenderState( D3DRENDERSTATE_SHADEMODE, D3DSHADE_GOURAUD );
; 754  : #endif
; 755  : 	}
; 756  : 
; 757  : 	
; 758  : 	// ********************** DISABLE BLOCK *********************
; 759  : 	if(!Enable){

	movzx	ecx, BYTE PTR _Enable$[ebp]
	test	ecx, ecx
	jne	$LN7@SetRenderS

; 760  : 
; 761  : #ifdef	EDIT_ENGINE	
; 762  : 		if(m_FrameDrawMode){
; 763  : 			// Done to reset material
; 764  : 			TheMaterial.specular.r=TheMaterial.specular.g=TheMaterial.specular.b=0.0f;
; 765  : 			TheMaterial.emissive.r=TheMaterial.emissive.g=TheMaterial.emissive.b=0.0f;
; 766  : 			TheMaterial.dvPower=-1.0f;
; 767  : 			m_pD3DD->SetRenderState( D3DRENDERSTATE_CULLMODE, (m_bCullEnable)?D3DCULL_CW:D3DCULL_NONE );
; 768  : 		}
; 769  : #endif
; 770  : 		// **** CHROMA KEYING DISABLES ****
; 771  : 		if(Flags.b.ChromaKey){

	mov	edx, DWORD PTR _Flags$[ebp]
	shr	edx, 2
	and	edx, 1
	je	$LN2@SetRenderS

; 772  : 			m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHATESTENABLE, FALSE);

	push	0
	push	15					; 0000000fH
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 773  : 			m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHAFUNC,D3DCMP_ALWAYS);

	push	8
	push	25					; 00000019H
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 774  : 			m_pD3DD->SetTextureStageState(m_AlphaTextureStage,D3DTSS_ALPHAOP,D3DTOP_SELECTARG1);

	push	2
	push	4
	mov	edx, DWORD PTR ?m_AlphaTextureStage@CDXEngine@@0KA ; CDXEngine::m_AlphaTextureStage
	push	edx
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+148]
	call	eax

; 775  : 			m_pD3DD->SetTextureStageState(m_AlphaTextureStage,D3DTSS_MAGFILTER,D3DTFG_LINEAR);

	push	2
	push	16					; 00000010H
	mov	ecx, DWORD PTR ?m_AlphaTextureStage@CDXEngine@@0KA ; CDXEngine::m_AlphaTextureStage
	push	ecx
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+148]
	call	edx

; 776  : 			m_pD3DD->SetTextureStageState(m_AlphaTextureStage,D3DTSS_MINFILTER,D3DTFN_LINEAR);

	push	2
	push	17					; 00000011H
	mov	eax, DWORD PTR ?m_AlphaTextureStage@CDXEngine@@0KA ; CDXEngine::m_AlphaTextureStage
	push	eax
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+148]
	call	ecx
$LN2@SetRenderS:

; 777  : 		}
; 778  : 		// **************************************
; 779  : 
; 780  : 		// *** ALPHA BLENDING SELECTION - FROM TEXTURE COLOR SELECTION *
; 781  : 		if(Flags.b.VColor){

	mov	edx, DWORD PTR _Flags$[ebp]
	shr	edx, 3
	and	edx, 1
	je	SHORT $LN7@SetRenderS

; 782  : 			m_pD3DD->SetTextureStageState(m_AlphaTextureStage, D3DTSS_ALPHAARG1, D3DTA_DIFFUSE);

	push	0
	push	5
	mov	eax, DWORD PTR ?m_AlphaTextureStage@CDXEngine@@0KA ; CDXEngine::m_AlphaTextureStage
	push	eax
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+148]
	call	ecx

; 783  : 			m_pD3DD->SetTextureStageState(m_AlphaTextureStage, D3DTSS_ALPHAARG2, D3DTA_TEXTURE);

	push	2
	push	6
	mov	edx, DWORD PTR ?m_AlphaTextureStage@CDXEngine@@0KA ; CDXEngine::m_AlphaTextureStage
	push	edx
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+148]
	call	eax

; 784  : 			m_pD3DD->SetTextureStageState(m_AlphaTextureStage, D3DTSS_ALPHAOP, D3DTOP_MODULATE);

	push	4
	push	4
	mov	ecx, DWORD PTR ?m_AlphaTextureStage@CDXEngine@@0KA ; CDXEngine::m_AlphaTextureStage
	push	ecx
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+148]
	call	edx
$LN7@SetRenderS:

; 785  : 
; 786  : 		}
; 787  : 
; 788  : #ifdef	EDIT_ENGINE	
; 789  : 	if(Flags.b.Gouraud)	m_pD3DD->SetRenderState( D3DRENDERSTATE_SHADEMODE, D3DSHADE_FLAT );
; 790  : #endif
; 791  : 	}
; 792  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetRenderState@CDXEngine@@AAEXTDXFlagsType@@0_N@Z ENDP	; CDXEngine::SetRenderState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_this$ = -24						; size = 4
_DofRot$ = -20						; size = 4
_P$1 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_T$ = 8							; size = 4
?AssignDOFTranslation@CDXEngine@@AAEXPAUD3DXMATRIX@@@Z PROC ; CDXEngine::AssignDOFTranslation
; _this$ = ecx

; 1029 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1030 : 	float		DofRot;
; 1031 : 
; 1032 : 	// *** NORMAL ROTATION DOF ***
; 1033 : 	if(m_NODE.DOF->Type==ROTATE) 	D3DXMatrixTranslation(T,	m_NODE.DOF->translation.x + m_TheObjectInstance->DOFValues[m_NODE.DOF->dofNumber].translation,

	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	cmp	DWORD PTR [eax+16], 1
	jne	SHORT $LN4@AssignDOFT

; 1034 : 								m_NODE.DOF->translation.y, m_NODE.DOF->translation.z);

	mov	ecx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	push	ecx
	movss	xmm0, DWORD PTR [ecx+128]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	push	ecx
	movss	xmm0, DWORD PTR [edx+124]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR ?m_TheObjectInstance@CDXEngine@@0PAVObjectInstance@@A ; CDXEngine::m_TheObjectInstance
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	movss	xmm0, DWORD PTR [edx+120]
	addss	xmm0, DWORD PTR [eax+ecx*8+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _T$[ebp]
	push	eax
	call	_D3DXMatrixTranslation@16
$LN4@AssignDOFT:

; 1035 : 
; 1036 : 	// *** EXTENDED ROTATION DOF ***
; 1037 : 	if(m_NODE.DOF->Type==XROTATE)	D3DXMatrixTranslation(T,	m_NODE.DOF->translation.x + m_TheObjectInstance->DOFValues[m_NODE.DOF->dofNumber].translation,

	mov	ecx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	cmp	DWORD PTR [ecx+16], 2
	jne	SHORT $LN3@AssignDOFT

; 1038 : 								m_NODE.DOF->translation.y, m_NODE.DOF->translation.z);

	mov	edx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	push	ecx
	movss	xmm0, DWORD PTR [edx+128]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	push	ecx
	movss	xmm0, DWORD PTR [eax+124]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR ?m_TheObjectInstance@CDXEngine@@0PAVObjectInstance@@A ; CDXEngine::m_TheObjectInstance
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	movss	xmm0, DWORD PTR [eax+120]
	addss	xmm0, DWORD PTR [ecx+edx*8+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _T$[ebp]
	push	ecx
	call	_D3DXMatrixTranslation@16
$LN3@AssignDOFT:

; 1039 : 
; 1040 : 	// *** TRANSLATION DOF - NO ROTATION ***
; 1041 : 	if(m_NODE.DOF->Type==TRANSLATE) {

	mov	edx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	cmp	DWORD PTR [edx+16], 3
	jne	$LN2@AssignDOFT

; 1042 : 		DofRot= Process_DOFRot(m_TheObjectInstance->DOFValues[m_NODE.DOF->dofNumber].rotation, m_NODE.DOF->dofNumber, m_NODE.DOF->flags, 
; 1043 : 								m_NODE.DOF->min, m_NODE.DOF->max, m_NODE.DOF->multiplier, m_NODE.DOF->future);

	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	push	ecx
	movss	xmm0, DWORD PTR [eax+36]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	push	ecx
	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	push	ecx
	movss	xmm0, DWORD PTR [edx+28]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	push	ecx
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR ?m_TheObjectInstance@CDXEngine@@0PAVObjectInstance@@A ; CDXEngine::m_TheObjectInstance
	mov	edx, DWORD PTR [ecx+4]
	push	ecx
	movss	xmm0, DWORD PTR [edx+eax*8]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Process_DOFRot@CDXEngine@@AAEMMHHMMMM@Z ; CDXEngine::Process_DOFRot
	fstp	DWORD PTR _DofRot$[ebp]

; 1044 : 		// Get DOF base translation
; 1045 : 		Ppoint P=m_NODE.DOF->translation;

	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	add	eax, 120				; 00000078H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _P$1[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _P$1[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _P$1[ebp+8], eax

; 1046 : 		// Apply DOF Scaling
; 1047 : 		P.x*=DofRot; P.y*=DofRot; P.z*=DofRot;

	movss	xmm0, DWORD PTR _P$1[ebp]
	mulss	xmm0, DWORD PTR _DofRot$[ebp]
	movss	DWORD PTR _P$1[ebp], xmm0
	movss	xmm0, DWORD PTR _P$1[ebp+4]
	mulss	xmm0, DWORD PTR _DofRot$[ebp]
	movss	DWORD PTR _P$1[ebp+4], xmm0
	movss	xmm0, DWORD PTR _P$1[ebp+8]
	mulss	xmm0, DWORD PTR _DofRot$[ebp]
	movss	DWORD PTR _P$1[ebp+8], xmm0

; 1048 : 		// Andcreate translation Matrix
; 1049 : 		D3DXMatrixTranslation(T, P.x, P.y, P.z);

	push	ecx
	movss	xmm0, DWORD PTR _P$1[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _P$1[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _P$1[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _T$[ebp]
	push	ecx
	call	_D3DXMatrixTranslation@16
$LN2@AssignDOFT:

; 1050 : 	}
; 1051 : 
; 1052 : 	// *** SCALING DOF ***
; 1053 : 	if(m_NODE.DOF->Type==SCALE)	D3DXMatrixTranslation(T, m_NODE.DOF->translation.x, m_NODE.DOF->translation.y, m_NODE.DOF->translation.z);

	mov	edx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	cmp	DWORD PTR [edx+16], 4
	jne	SHORT $LN1@AssignDOFT
	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	push	ecx
	movss	xmm0, DWORD PTR [eax+128]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	push	ecx
	movss	xmm0, DWORD PTR [ecx+124]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	push	ecx
	movss	xmm0, DWORD PTR [edx+120]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _T$[ebp]
	push	eax
	call	_D3DXMatrixTranslation@16
$LN1@AssignDOFT:

; 1054 : 
; 1055 : 
; 1056 : 		
; 1057 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?AssignDOFTranslation@CDXEngine@@AAEXPAUD3DXMATRIX@@@Z ENDP ; CDXEngine::AssignDOFTranslation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_DofRot$ = -4						; size = 4
_R$ = 8							; size = 4
?AssignDOFRotation@CDXEngine@@AAEXPAUD3DXMATRIX@@@Z PROC ; CDXEngine::AssignDOFRotation
; _this$ = ecx

; 980  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 981  : 	float		DofRot;
; 982  : 
; 983  : // ************ NORMAL ROTATION DOF **************
; 984  : 	if(m_NODE.DOF->Type==ROTATE) {

	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	cmp	DWORD PTR [eax+16], 1
	jne	SHORT $LN4@AssignDOFR

; 985  : 		DofRot= m_TheObjectInstance->DOFValues[m_NODE.DOF->dofNumber].rotation;

	mov	ecx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR ?m_TheObjectInstance@CDXEngine@@0PAVObjectInstance@@A ; CDXEngine::m_TheObjectInstance
	mov	ecx, DWORD PTR [eax+4]
	movss	xmm0, DWORD PTR [ecx+edx*8]
	movss	DWORD PTR _DofRot$[ebp], xmm0

; 986  : 		// Apply DOF Rotation on X axis
; 987  : 		D3DXMatrixRotationX(R, DofRot);

	push	ecx
	movss	xmm0, DWORD PTR _DofRot$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _R$[ebp]
	push	edx
	call	_D3DXMatrixRotationX@8

; 988  : 		// Apply DOF transformation
; 989  : 		D3DXMatrixMultiply(R, R, &m_NODE.DOF->rotation);

	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	add	eax, 56					; 00000038H
	push	eax
	mov	ecx, DWORD PTR _R$[ebp]
	push	ecx
	mov	edx, DWORD PTR _R$[ebp]
	push	edx
	call	_D3DXMatrixMultiply@12
$LN4@AssignDOFR:

; 990  : 	}
; 991  : 
; 992  : 
; 993  : 
; 994  : 
; 995  : // ************ EXTENDED ROTATION DOF **************
; 996  : 	if(m_NODE.DOF->Type==XROTATE)	{

	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	cmp	DWORD PTR [eax+16], 2
	jne	$LN3@AssignDOFR

; 997  : 		DofRot= Process_DOFRot(m_TheObjectInstance->DOFValues[m_NODE.DOF->dofNumber].rotation, m_NODE.DOF->dofNumber, m_NODE.DOF->flags, 
; 998  : 								m_NODE.DOF->min, m_NODE.DOF->max, m_NODE.DOF->multiplier, m_NODE.DOF->future);

	mov	ecx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	push	ecx
	movss	xmm0, DWORD PTR [ecx+36]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	push	ecx
	movss	xmm0, DWORD PTR [edx+32]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	push	ecx
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	push	ecx
	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR ?m_TheObjectInstance@CDXEngine@@0PAVObjectInstance@@A ; CDXEngine::m_TheObjectInstance
	mov	eax, DWORD PTR [edx+4]
	push	ecx
	movss	xmm0, DWORD PTR [eax+ecx*8]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Process_DOFRot@CDXEngine@@AAEMMHHMMMM@Z ; CDXEngine::Process_DOFRot
	fstp	DWORD PTR _DofRot$[ebp]

; 999  : 		// Apply DOF Rotation on X axis
; 1000 : 		D3DXMatrixRotationX(R, DofRot);

	push	ecx
	movss	xmm0, DWORD PTR _DofRot$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _R$[ebp]
	push	ecx
	call	_D3DXMatrixRotationX@8

; 1001 : 		// Apply DOF transformation
; 1002 : 		D3DXMatrixMultiply(R, R, &m_NODE.DOF->rotation);

	mov	edx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	add	edx, 56					; 00000038H
	push	edx
	mov	eax, DWORD PTR _R$[ebp]
	push	eax
	mov	ecx, DWORD PTR _R$[ebp]
	push	ecx
	call	_D3DXMatrixMultiply@12
$LN3@AssignDOFR:

; 1003 : 	}
; 1004 : 
; 1005 : 
; 1006 : 
; 1007 : // ************ TRANSLATION DOF - NO ROTATION ******
; 1008 : 	if(m_NODE.DOF->Type==TRANSLATE) D3DXMatrixIdentity(R);

	mov	edx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	cmp	DWORD PTR [edx+16], 3
	jne	SHORT $LN2@AssignDOFR
	mov	eax, DWORD PTR _R$[ebp]
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4
$LN2@AssignDOFR:

; 1009 : 
; 1010 : 
; 1011 : 
; 1012 : // *** SCALING DOF - ROTATION MATRIX USED TO SCALE ***
; 1013 : 	if(m_NODE.DOF->Type==SCALE) {

	mov	ecx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	cmp	DWORD PTR [ecx+16], 4
	jne	$LN1@AssignDOFR

; 1014 : 		DofRot= Process_DOFRot(m_TheObjectInstance->DOFValues[m_NODE.DOF->dofNumber].rotation, m_NODE.DOF->dofNumber, m_NODE.DOF->flags, 
; 1015 : 								m_NODE.DOF->min, m_NODE.DOF->max, m_NODE.DOF->multiplier, m_NODE.DOF->future);

	mov	edx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	push	ecx
	movss	xmm0, DWORD PTR [edx+36]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	push	ecx
	movss	xmm0, DWORD PTR [eax+32]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	push	ecx
	movss	xmm0, DWORD PTR [ecx+28]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	push	ecx
	movss	xmm0, DWORD PTR [edx+24]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR ?m_TheObjectInstance@CDXEngine@@0PAVObjectInstance@@A ; CDXEngine::m_TheObjectInstance
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+edx*8]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Process_DOFRot@CDXEngine@@AAEMMHHMMMM@Z ; CDXEngine::Process_DOFRot
	fstp	DWORD PTR _DofRot$[ebp]

; 1016 : 
; 1017 : 		// Apply Scaling at the destination Matrix
; 1018 : 		ZeroMemory(R, sizeof(D3DXMATRIX));

	push	64					; 00000040H
	push	0
	mov	edx, DWORD PTR _R$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 1019 : 		R->m00=1.0f - (1.0f - m_NODE.DOF->scale.x) * DofRot;

	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR [eax+44]
	mulss	xmm0, DWORD PTR _DofRot$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _R$[ebp]
	movss	DWORD PTR [ecx], xmm1

; 1020 : 		R->m11=1.0f - (1.0f - m_NODE.DOF->scale.y) * DofRot;

	mov	edx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR [edx+48]
	mulss	xmm0, DWORD PTR _DofRot$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _R$[ebp]
	movss	DWORD PTR [eax+20], xmm1

; 1021 : 		R->m22=1.0f - (1.0f - m_NODE.DOF->scale.z) * DofRot;

	mov	ecx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR [ecx+52]
	mulss	xmm0, DWORD PTR _DofRot$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _R$[ebp]
	movss	DWORD PTR [edx+40], xmm1

; 1022 : 		R->m33=1.0f;

	mov	eax, DWORD PTR _R$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+60], xmm0
$LN1@AssignDOFR:

; 1023 : 	}
; 1024 : 
; 1025 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?AssignDOFRotation@CDXEngine@@AAEXPAUD3DXMATRIX@@@Z ENDP ; CDXEngine::AssignDOFRotation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_T$ = -132						; size = 64
_R$ = -68						; size = 64
_this$ = -4						; size = 4
?DOF@CDXEngine@@AAEXXZ PROC				; CDXEngine::DOF
; _this$ = ecx

; 1065 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H
	mov	DWORD PTR _this$[ebp], ecx

; 1066 : 	D3DXMATRIX	R, T;

	lea	ecx, DWORD PTR _R$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	lea	ecx, DWORD PTR _T$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 1067 : 
; 1068 : #ifdef	DEBUG_ENGINE
; 1069 : 	if(m_bDofMove){
; 1070 : 		float	rot=sinf((float)timeGetTime()/1500.0f);
; 1071 : 		m_TheObjectInstance->DOFValues[m_NODE.DOF->dofNumber].rotation=((float)PI/6.0f)*rot;
; 1072 : 	}													
; 1073 : #endif
; 1074 : 
; 1075 : #ifndef	DEBUG_ENGINE	
; 1076 : 	// * CONSISTENCY CHECK !!! *
; 1077 : 	if( m_NODE.DOF->dofNumber >= m_TheObjectInstance->ParentObject->nDOFs ) return;

	mov	eax, DWORD PTR ?m_TheObjectInstance@CDXEngine@@0PAVObjectInstance@@A ; CDXEngine::m_TheObjectInstance
	mov	ecx, DWORD PTR [eax+32]
	movsx	edx, WORD PTR [ecx+54]
	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	cmp	DWORD PTR [eax+20], edx
	jl	SHORT $LN1@DOF
	jmp	SHORT $LN2@DOF
$LN1@DOF:

; 1078 : #endif
; 1079 : 	// **** CALCULATE THE DOF IMPOSED ROTATION ****
; 1080 : 	AssignDOFRotation(&R);

	lea	ecx, DWORD PTR _R$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AssignDOFRotation@CDXEngine@@AAEXPAUD3DXMATRIX@@@Z ; CDXEngine::AssignDOFRotation

; 1081 : 
; 1082 : 	// **** CALCULATE THE DOF IMPOSED TRANSLATION ****
; 1083 : 	AssignDOFTranslation(&T);

	lea	edx, DWORD PTR _T$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AssignDOFTranslation@CDXEngine@@AAEXPAUD3DXMATRIX@@@Z ; CDXEngine::AssignDOFTranslation

; 1084 : 
; 1085 : 	// Mix All and set to Actual Applied State
; 1086 : 	D3DXMatrixMultiply(&R, &R, &T);

	lea	eax, DWORD PTR _T$[ebp]
	push	eax
	lea	ecx, DWORD PTR _R$[ebp]
	push	ecx
	lea	edx, DWORD PTR _R$[ebp]
	push	edx
	call	_D3DXMatrixMultiply@12

; 1087 : 	D3DXMatrixMultiply(&AppliedState, &R, &AppliedState);

	push	OFFSET ?AppliedState@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::AppliedState
	lea	eax, DWORD PTR _R$[ebp]
	push	eax
	push	OFFSET ?AppliedState@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::AppliedState
	call	_D3DXMatrixMultiply@12

; 1088 : 	m_pD3DD->SetTransform( D3DTRANSFORMSTATE_WORLD, (LPD3DMATRIX)&AppliedState);

	push	OFFSET ?AppliedState@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::AppliedState
	push	1
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+44]
	call	ecx
$LN2@DOF:

; 1089 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DOF@CDXEngine@@AAEXXZ ENDP				; CDXEngine::DOF
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv132 = -4						; size = 4
_dofrot$ = 8						; size = 4
_dofNumber$ = 12					; size = 4
_flags$ = 16						; size = 4
_min$ = 20						; size = 4
_max$ = 24						; size = 4
_multiplier$ = 28					; size = 4
_unused$ = 32						; size = 4
?Process_DOFRot@CDXEngine@@AAEMMHHMMMM@Z PROC		; CDXEngine::Process_DOFRot
; _this$ = ecx

; 957  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 958  : 	// Negated DOF
; 959  : 	if(flags & XDOF_NEGATE) dofrot=-dofrot;

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 1
	je	SHORT $LN6@Process_DO
	movss	xmm0, DWORD PTR _dofrot$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _dofrot$[ebp], xmm0
$LN6@Process_DO:

; 960  : 
; 961  : 	// DOF Limits
; 962  : 	if(flags & XDOF_MINMAX) { if(dofrot<min) dofrot=min;  if(dofrot>max) dofrot=max; }

	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 2
	je	SHORT $LN3@Process_DO
	movss	xmm0, DWORD PTR _min$[ebp]
	comiss	xmm0, DWORD PTR _dofrot$[ebp]
	jbe	SHORT $LN4@Process_DO
	movss	xmm0, DWORD PTR _min$[ebp]
	movss	DWORD PTR _dofrot$[ebp], xmm0
$LN4@Process_DO:
	movss	xmm0, DWORD PTR _dofrot$[ebp]
	comiss	xmm0, DWORD PTR _max$[ebp]
	jbe	SHORT $LN3@Process_DO
	movss	xmm0, DWORD PTR _max$[ebp]
	movss	DWORD PTR _dofrot$[ebp], xmm0
$LN3@Process_DO:

; 963  : 
; 964  : 	// Scaled 0-1 DOF
; 965  : 	if(flags & XDOF_SUBRANGE && min!=max) {

	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 4
	je	SHORT $LN1@Process_DO
	movss	xmm0, DWORD PTR _min$[ebp]
	ucomiss	xmm0, DWORD PTR _max$[ebp]
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN1@Process_DO

; 966  : 		dofrot-=min; dofrot/=max-min;

	movss	xmm0, DWORD PTR _dofrot$[ebp]
	subss	xmm0, DWORD PTR _min$[ebp]
	movss	DWORD PTR _dofrot$[ebp], xmm0
	movss	xmm0, DWORD PTR _max$[ebp]
	subss	xmm0, DWORD PTR _min$[ebp]
	movss	xmm1, DWORD PTR _dofrot$[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _dofrot$[ebp], xmm1

; 967  : 		
; 968  : 		// Angular DOF
; 969  : 		if(flags & XDOF_ISDOF) dofrot*=(float)(3.14159/180.0);

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, -2147483648			; 80000000H
	je	SHORT $LN1@Process_DO
	movss	xmm0, DWORD PTR _dofrot$[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa2d
	movss	DWORD PTR _dofrot$[ebp], xmm0
$LN1@Process_DO:

; 970  : 	}
; 971  : 
; 972  : 	// Final Scaling
; 973  : 	return(dofrot*=multiplier);

	movss	xmm0, DWORD PTR _dofrot$[ebp]
	mulss	xmm0, DWORD PTR _multiplier$[ebp]
	movss	DWORD PTR _dofrot$[ebp], xmm0
	movss	xmm0, DWORD PTR _dofrot$[ebp]
	movss	DWORD PTR tv132[ebp], xmm0
	fld	DWORD PTR tv132[ebp]

; 974  : }

	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
?Process_DOFRot@CDXEngine@@AAEMMHHMMMM@Z ENDP		; CDXEngine::Process_DOFRot
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
tv253 = -8						; size = 4
tv64 = -4						; size = 4
?SetViewMode@CDXEngine@@AAEXXZ PROC			; CDXEngine::SetViewMode
; _this$ = ecx

; 617  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 618  : 
; 619  : 	switch (m_RenderState){

	mov	eax, DWORD PTR ?m_RenderState@CDXEngine@@0W4DX_StateType@@A ; CDXEngine::m_RenderState
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	jle	$LN1@SetViewMod
	cmp	DWORD PTR tv64[ebp], 2
	jle	$LN4@SetViewMod
	cmp	DWORD PTR tv64[ebp], 3
	je	SHORT $LN5@SetViewMod
	jmp	$LN1@SetViewMod
$LN5@SetViewMod:

; 620  : 		
; 621  : 		case	DX_DBS:	m_pD3DD->SetRenderState( D3DRENDERSTATE_TEXTUREFACTOR, NVG_T_FACTOR);

	push	3186736					; 0030a030H
	push	60					; 0000003cH
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 622  : 						/*m_pD3DD->SetTextureStageState(0,D3DTSS_COLORARG1,D3DTA_TFACTOR);
; 623  : 						m_pD3DD->SetTextureStageState(0,D3DTSS_COLORARG2,D3DTA_DIFFUSE);
; 624  : 						m_pD3DD->SetTextureStageState(0,D3DTSS_COLOROP,D3DTOP_MODULATE);*/
; 625  : 						m_pD3DD->SetTextureStageState(0,D3DTSS_COLOROP,D3DTOP_DISABLE);

	push	1
	push	1
	push	0
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+148]
	call	edx

; 626  : 						m_pD3DD->SetTextureStageState(1,D3DTSS_COLOROP,D3DTOP_DISABLE);

	push	1
	push	1
	push	1
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+148]
	call	eax

; 627  : 						m_pD3DD->SetTextureStageState(2,D3DTSS_COLOROP,D3DTOP_DISABLE);

	push	1
	push	1
	push	2
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+148]
	call	ecx

; 628  : 						m_pD3DD->SetTextureStageState(3,D3DTSS_COLOROP,D3DTOP_DISABLE);;

	push	1
	push	1
	push	3
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+148]
	call	edx

; 629  : 						m_pD3DD->SetRenderState( D3DRENDERSTATE_SHADEMODE, D3DSHADE_FLAT );

	push	1
	push	9
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 630  : 						m_pD3DD->SetRenderState(D3DRENDERSTATE_FOGENABLE,FALSE);

	push	0
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 631  : 
; 632  : 						// The Texture Stage used for Alpha Calculations
; 633  : 						m_AlphaTextureStage=0;

	mov	DWORD PTR ?m_AlphaTextureStage@CDXEngine@@0KA, 0 ; CDXEngine::m_AlphaTextureStage

; 634  : 						// Select the appropriate Light
; 635  : 						TheNVG.dvDirection = TheTV.dvDirection = TheSun.dvDirection;

	mov	edx, DWORD PTR ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A+64
	mov	DWORD PTR ?TheTV@CDXEngine@@2U_D3DLIGHT7@@A+64, edx
	mov	eax, DWORD PTR ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A+68
	mov	DWORD PTR ?TheTV@CDXEngine@@2U_D3DLIGHT7@@A+68, eax
	mov	ecx, DWORD PTR ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A+72
	mov	DWORD PTR ?TheTV@CDXEngine@@2U_D3DLIGHT7@@A+72, ecx
	mov	edx, DWORD PTR ?TheTV@CDXEngine@@2U_D3DLIGHT7@@A+64
	mov	DWORD PTR ?TheNVG@CDXEngine@@2U_D3DLIGHT7@@A+64, edx
	mov	eax, DWORD PTR ?TheTV@CDXEngine@@2U_D3DLIGHT7@@A+68
	mov	DWORD PTR ?TheNVG@CDXEngine@@2U_D3DLIGHT7@@A+68, eax
	mov	ecx, DWORD PTR ?TheTV@CDXEngine@@2U_D3DLIGHT7@@A+72
	mov	DWORD PTR ?TheNVG@CDXEngine@@2U_D3DLIGHT7@@A+72, ecx

; 636  : 						m_pD3DD->SetLight( 0, &TheNVG );

	push	OFFSET ?TheNVG@CDXEngine@@2U_D3DLIGHT7@@A ; CDXEngine::TheNVG
	push	0
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+72]
	call	edx

; 637  : 						m_pD3DD->LightEnable(0, true);

	push	1
	push	0
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+176]
	call	eax

; 638  : 						break;

	jmp	$LN8@SetViewMod
$LN4@SetViewMod:

; 639  : 
; 640  : 
; 641  : 
; 642  : 		case	DX_NVG:
; 643  : 		case	DX_TV:	
; 644  : 						// FRB - B&W
; 645  : 						if ((m_RenderState == DX_TV) && (!bNVGmode) && (g_bGreyMFD))

	cmp	DWORD PTR ?m_RenderState@CDXEngine@@0W4DX_StateType@@A, 1 ; CDXEngine::m_RenderState
	jne	SHORT $LN3@SetViewMod
	movzx	ecx, BYTE PTR ?bNVGmode@@3_NA		; bNVGmode
	test	ecx, ecx
	jne	SHORT $LN3@SetViewMod
	movzx	edx, BYTE PTR ?g_bGreyMFD@@3_NA		; g_bGreyMFD
	test	edx, edx
	je	SHORT $LN3@SetViewMod

; 646  : 							m_pD3DD->SetRenderState( D3DRENDERSTATE_TEXTUREFACTOR, 0x00a0a0a0);

	push	10526880				; 00a0a0a0H
	push	60					; 0000003cH
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 647  : 						else

	jmp	SHORT $LN2@SetViewMod
$LN3@SetViewMod:

; 648  : 							m_pD3DD->SetRenderState( D3DRENDERSTATE_TEXTUREFACTOR, 0x0000a000 /*NVG_T_FACTOR*/);

	push	40960					; 0000a000H
	push	60					; 0000003cH
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx
$LN2@SetViewMod:

; 649  : 						//m_pD3DD->SetRenderState( D3DRENDERSTATE_TEXTUREFACTOR, NVG_T_FACTOR);
; 650  : 
; 651  : 						m_pD3DD->SetTextureStageState(0,D3DTSS_COLORARG1,D3DTA_DIFFUSE);

	push	0
	push	2
	push	0
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+148]
	call	edx

; 652  : 						m_pD3DD->SetTextureStageState(0,D3DTSS_COLORARG2,D3DTA_DIFFUSE);

	push	0
	push	3
	push	0
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+148]
	call	eax

; 653  : 						m_pD3DD->SetTextureStageState(0,D3DTSS_COLOROP,D3DTOP_ADDSMOOTH);

	push	11					; 0000000bH
	push	1
	push	0
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+148]
	call	ecx

; 654  : 
; 655  : 						m_pD3DD->SetTextureStageState(1,D3DTSS_COLORARG1,D3DTA_TEXTURE);

	push	2
	push	2
	push	1
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+148]
	call	edx

; 656  : 						m_pD3DD->SetTextureStageState(1,D3DTSS_COLORARG2,D3DTA_CURRENT);

	push	1
	push	3
	push	1
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+148]
	call	eax

; 657  : 						m_pD3DD->SetTextureStageState(1,D3DTSS_COLOROP,D3DTOP_ADDSIGNED);

	push	8
	push	1
	push	1
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+148]
	call	ecx

; 658  : 
; 659  : 						m_pD3DD->SetTextureStageState(2,D3DTSS_COLORARG2,D3DTA_DIFFUSE);

	push	0
	push	3
	push	2
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+148]
	call	edx

; 660  : 						m_pD3DD->SetTextureStageState(2,D3DTSS_COLORARG1,D3DTA_CURRENT);

	push	1
	push	2
	push	2
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+148]
	call	eax

; 661  : 						m_pD3DD->SetTextureStageState(2,D3DTSS_COLOROP,D3DTOP_DOTPRODUCT3 );

	push	24					; 00000018H
	push	1
	push	2
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+148]
	call	ecx

; 662  : 
; 663  : 						m_pD3DD->SetTextureStageState(3,D3DTSS_COLORARG2,D3DTA_TFACTOR);

	push	3
	push	3
	push	3
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+148]
	call	edx

; 664  : 						m_pD3DD->SetTextureStageState(3,D3DTSS_COLORARG1,D3DTA_CURRENT);

	push	1
	push	2
	push	3
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+148]
	call	eax

; 665  : 						m_pD3DD->SetTextureStageState(3,D3DTSS_COLOROP,D3DTOP_ADDSIGNED);

	push	8
	push	1
	push	3
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+148]
	call	ecx

; 666  : 
; 667  : 						m_pD3DD->SetRenderState( D3DRENDERSTATE_SHADEMODE, D3DSHADE_GOURAUD );

	push	2
	push	9
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx

; 668  : 						m_pD3DD->SetRenderState(D3DRENDERSTATE_FOGENABLE,TRUE);

	push	1
	push	28					; 0000001cH
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 669  : 
; 670  : 						// The Texture Stage used for Alpha Calculations
; 671  : 						m_AlphaTextureStage=3;

	mov	DWORD PTR ?m_AlphaTextureStage@CDXEngine@@0KA, 3 ; CDXEngine::m_AlphaTextureStage

; 672  : 						// Select the appropriate Light
; 673  : 						m_pD3DD->LightEnable(0, false);

	push	0
	push	0
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+176]
	call	ecx

; 674  : 						TheNVG.dvDirection = TheTV.dvDirection = TheSun.dvDirection;

	mov	edx, DWORD PTR ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A+64
	mov	DWORD PTR ?TheTV@CDXEngine@@2U_D3DLIGHT7@@A+64, edx
	mov	eax, DWORD PTR ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A+68
	mov	DWORD PTR ?TheTV@CDXEngine@@2U_D3DLIGHT7@@A+68, eax
	mov	ecx, DWORD PTR ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A+72
	mov	DWORD PTR ?TheTV@CDXEngine@@2U_D3DLIGHT7@@A+72, ecx
	mov	edx, DWORD PTR ?TheTV@CDXEngine@@2U_D3DLIGHT7@@A+64
	mov	DWORD PTR ?TheNVG@CDXEngine@@2U_D3DLIGHT7@@A+64, edx
	mov	eax, DWORD PTR ?TheTV@CDXEngine@@2U_D3DLIGHT7@@A+68
	mov	DWORD PTR ?TheNVG@CDXEngine@@2U_D3DLIGHT7@@A+68, eax
	mov	ecx, DWORD PTR ?TheTV@CDXEngine@@2U_D3DLIGHT7@@A+72
	mov	DWORD PTR ?TheNVG@CDXEngine@@2U_D3DLIGHT7@@A+72, ecx

; 675  : 						m_pD3DD->SetLight( 0, (m_RenderState == DX_NVG)? &TheNVG : &TheTV );

	cmp	DWORD PTR ?m_RenderState@CDXEngine@@0W4DX_StateType@@A, 2 ; CDXEngine::m_RenderState
	jne	SHORT $LN10@SetViewMod
	mov	DWORD PTR tv253[ebp], OFFSET ?TheNVG@CDXEngine@@2U_D3DLIGHT7@@A ; CDXEngine::TheNVG
	jmp	SHORT $LN11@SetViewMod
$LN10@SetViewMod:
	mov	DWORD PTR tv253[ebp], OFFSET ?TheTV@CDXEngine@@2U_D3DLIGHT7@@A ; CDXEngine::TheTV
$LN11@SetViewMod:
	mov	edx, DWORD PTR tv253[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+72]
	call	eax

; 676  : 						m_pD3DD->LightEnable(0, true);

	push	1
	push	0
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+176]
	call	ecx

; 677  : 						break;

	jmp	$LN8@SetViewMod
$LN1@SetViewMod:

; 678  : 
; 679  : 		case	DX_OTW:
; 680  : 		default	:		m_pD3DD->SetTextureStageState(0,D3DTSS_COLORARG1,D3DTA_TEXTURE);

	push	2
	push	2
	push	0
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+148]
	call	edx

; 681  : 						m_pD3DD->SetTextureStageState(0,D3DTSS_COLORARG2,D3DTA_DIFFUSE);

	push	0
	push	3
	push	0
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+148]
	call	eax

; 682  : 						m_pD3DD->SetTextureStageState(0,D3DTSS_COLOROP,D3DTOP_MODULATE);

	push	4
	push	1
	push	0
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+148]
	call	ecx

; 683  : 						m_pD3DD->SetTextureStageState(1,D3DTSS_COLOROP,D3DTOP_DISABLE);

	push	1
	push	1
	push	1
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+148]
	call	edx

; 684  : 						m_pD3DD->SetTextureStageState(2,D3DTSS_COLOROP,D3DTOP_DISABLE);

	push	1
	push	1
	push	2
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+148]
	call	eax

; 685  : 						m_pD3DD->SetTextureStageState(3,D3DTSS_COLOROP,D3DTOP_DISABLE);;

	push	1
	push	1
	push	3
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+148]
	call	ecx

; 686  : 						m_pD3DD->SetRenderState( D3DRENDERSTATE_SHADEMODE, D3DSHADE_GOURAUD );

	push	2
	push	9
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx

; 687  : #ifdef	EDIT_ENGINE
; 688  : #else 
; 689  : 						m_pD3DD->SetRenderState(D3DRENDERSTATE_FOGENABLE,TRUE);

	push	1
	push	28					; 0000001cH
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 690  : #endif
; 691  : 
; 692  : 						// The Texture Stage used for Alpha Calculations
; 693  : 						m_AlphaTextureStage=0;

	mov	DWORD PTR ?m_AlphaTextureStage@CDXEngine@@0KA, 0 ; CDXEngine::m_AlphaTextureStage

; 694  : 						// Select the appropriate Light
; 695  : 						m_pD3DD->LightEnable(0, false);

	push	0
	push	0
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+176]
	call	ecx

; 696  : 						m_pD3DD->SetLight( 0, &TheSun );

	push	OFFSET ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A ; CDXEngine::TheSun
	push	0
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+72]
	call	edx

; 697  : 						m_pD3DD->LightEnable(0, true);

	push	1
	push	0
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+176]
	call	eax
$LN8@SetViewMod:

; 698  : 						break;
; 699  : 	}
; 700  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SetViewMode@CDXEngine@@AAEXXZ ENDP			; CDXEngine::SetViewMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_LastAddr$ = -16					; size = 4
_this$ = -12						; size = 4
_SWNumber$ = -8						; size = 4
_Value$ = -4						; size = 4
?SWITCHManage@CDXEngine@@AAEXXZ PROC			; CDXEngine::SWITCHManage
; _this$ = ecx

; 1147 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1148 : 
; 1149 : 	//Consistency check
; 1150 : 	if(!m_TheObjectInstance->SwitchValues){

	mov	eax, DWORD PTR ?m_TheObjectInstance@CDXEngine@@0PAVObjectInstance@@A ; CDXEngine::m_TheObjectInstance
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN6@SWITCHMana

; 1151 : 		// If no switches then skip the switch
; 1152 : 		m_NODE.BYTE+=m_NODE.DOF->dwDOFTotalSize;

	mov	ecx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	edx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	add	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A, edx ; CDXEngine::m_NODE

; 1153 : 		//and return
; 1154 : 		return;

	jmp	$LN7@SWITCHMana
$LN6@SWITCHMana:

; 1155 : 	}
; 1156 : 	
; 1157 : 	// Gets the Switch Number and value
; 1158 : 	DWORD	SWNumber=m_NODE.DOF->SwitchNumber;

	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _SWNumber$[ebp], ecx

; 1159 : 	DWORD	Value=m_TheObjectInstance->SwitchValues[SWNumber];

	mov	edx, DWORD PTR ?m_TheObjectInstance@CDXEngine@@0PAVObjectInstance@@A ; CDXEngine::m_TheObjectInstance
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _SWNumber$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _Value$[ebp], edx

; 1160 : 	BYTE	*LastAddr=m_NODE.BYTE;

	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	DWORD PTR _LastAddr$[ebp], eax

; 1161 : 
; 1162 : 	if(m_NODE.DOF->Type==XSWITCH) Value=~Value;

	mov	ecx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	cmp	DWORD PTR [ecx+16], 6
	jne	SHORT $LN4@SWITCHMana
	mov	edx, DWORD PTR _Value$[ebp]
	not	edx
	mov	DWORD PTR _Value$[ebp], edx
$LN4@SWITCHMana:

; 1163 : 	// Traverse the Switch Items
; 1164 : 	while( m_NODE.DOF->SwitchNumber==SWNumber && (m_NODE.DOF->Type==SWITCH || m_NODE.DOF->Type==XSWITCH)){

	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR _SWNumber$[ebp]
	jne	SHORT $LN7@SWITCHMana
	mov	edx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	cmp	DWORD PTR [edx+16], 5
	je	SHORT $LN2@SWITCHMana
	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	cmp	DWORD PTR [eax+16], 6
	jne	SHORT $LN7@SWITCHMana
$LN2@SWITCHMana:

; 1165 : 		// If value found then Exit here pointing the SWITCH, next to it is the SURFACE
; 1166 : 		if(Value&(1<<m_NODE.DOF->SwitchBranch)) { PushMatrix(&AppliedState);	return; }

	mov	ecx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	edx, 1
	mov	ecx, DWORD PTR [ecx+40]
	shl	edx, cl
	and	edx, DWORD PTR _Value$[ebp]
	je	SHORT $LN1@SWITCHMana
	push	OFFSET ?AppliedState@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::AppliedState
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PushMatrix@CDXEngine@@AAEXPAUD3DXMATRIX@@@Z ; CDXEngine::PushMatrix
	jmp	SHORT $LN7@SWITCHMana
$LN1@SWITCHMana:

; 1167 : #ifdef	EDIT_ENGINE
; 1168 : 		m_SkipSwitch=true;
; 1169 : 		m_DofLevel=1;
; 1170 : 		return;
; 1171 : #else
; 1172 : 		m_NODE.BYTE+=m_NODE.DOF->dwDOFTotalSize;

	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	ecx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	add	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A, ecx ; CDXEngine::m_NODE

; 1173 : #endif
; 1174 : 	}

	jmp	SHORT $LN4@SWITCHMana
$LN7@SWITCHMana:

; 1175 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SWITCHManage@CDXEngine@@AAEXXZ ENDP			; CDXEngine::SWITCHManage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_State$ = -76						; size = 64
_this$ = -12						; size = 4
_LastFog$ = -8						; size = 4
_LastObj$ = -4						; size = 4
?DrawSolidSurfaces@CDXEngine@@AAEXXZ PROC		; CDXEngine::DrawSolidSurfaces
; _this$ = ecx

; 1711 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1712 : 	D3DXMATRIX	State;

	lea	ecx, DWORD PTR _State$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 1713 : 	ObjectInstance	*LastObj=NULL;

	mov	DWORD PTR _LastObj$[ebp], 0

; 1714 : 	float	LastFog=0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _LastFog$[ebp], xmm0

; 1715 : 
; 1716 : #ifndef	DEBUG_ENGINE	
; 1717 : 	m_pD3DD->SetRenderState( D3DRENDERSTATE_CULLMODE, D3DCULL_CW );

	push	2
	push	22					; 00000016H
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 1718 : #else
; 1719 : 	m_pD3DD->SetRenderState( D3DRENDERSTATE_CULLMODE, (m_bCullEnable)?D3DCULL_CW:D3DCULL_NONE );
; 1720 : #endif
; 1721 : 	m_pD3DD->SetRenderState( D3DRENDERSTATE_ZWRITEENABLE, TRUE );

	push	1
	push	14					; 0000000eH
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx
$LN5@DrawSolidS:

; 1722 : 
; 1723 : 
; 1724 : 	while(PopSurface(&m_SolidStack, &State)){

	lea	edx, DWORD PTR _State$[ebp]
	push	edx
	push	OFFSET ?m_SolidStack@CDXEngine@@0USurfaceStackType@@A ; CDXEngine::m_SolidStack
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PopSurface@CDXEngine@@AAE_NPAUSurfaceStackType@@PAUD3DXMATRIX@@@Z ; CDXEngine::PopSurface
	movzx	eax, al
	test	eax, eax
	je	$LN4@DrawSolidS

; 1725 : 		if(State!=AppliedState) m_pD3DD->SetTransform( D3DTRANSFORMSTATE_WORLD, (LPD3DMATRIX)&State );

	push	OFFSET ?AppliedState@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::AppliedState
	lea	ecx, DWORD PTR _State$[ebp]
	call	??9D3DXMATRIX@@QBEHABU0@@Z		; D3DXMATRIX::operator!=
	test	eax, eax
	je	SHORT $LN3@DrawSolidS
	lea	ecx, DWORD PTR _State$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+44]
	call	edx
$LN3@DrawSolidS:

; 1726 : 		AppliedState=State;

	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _State$[ebp]
	mov	edi, OFFSET ?AppliedState@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::AppliedState
	rep movsd

; 1727 : #ifndef	DEBUG_ENGINE
; 1728 : #ifdef	LIGHT_ENGINE_DEBUG
; 1729 : START_PROFILE("LIGHTS ON TIME");
; 1730 : #endif
; 1731 : #endif
; 1732 : 		// if Changed object, remap all lights
; 1733 : 		if(LastObj!=m_TheObjectInstance) TheLightEngine.EnableMappedLights();

	mov	eax, DWORD PTR _LastObj$[ebp]
	cmp	eax, DWORD PTR ?m_TheObjectInstance@CDXEngine@@0PAVObjectInstance@@A ; CDXEngine::m_TheObjectInstance
	je	SHORT $LN2@DrawSolidS
	mov	ecx, OFFSET ?TheLightEngine@@3VCDXLight@@A ; TheLightEngine
	call	?EnableMappedLights@CDXLight@@QAEXXZ	; CDXLight::EnableMappedLights
$LN2@DrawSolidS:

; 1734 : 		LastObj=m_TheObjectInstance;

	mov	ecx, DWORD PTR ?m_TheObjectInstance@CDXEngine@@0PAVObjectInstance@@A ; CDXEngine::m_TheObjectInstance
	mov	DWORD PTR _LastObj$[ebp], ecx

; 1735 : #ifndef	DEBUG_ENGINE
; 1736 : #ifdef	LIGHT_ENGINE_DEBUG
; 1737 : STOP_PROFILE("LIGHTS ON TIME");
; 1738 : #endif
; 1739 : #endif
; 1740 : 		// Stup the Fog level for this object
; 1741 : 		if(m_FogLevel!=LastFog) m_pD3DD->SetRenderState(D3DRENDERSTATE_FOGEND,   *(DWORD *)(&m_FogLevel));

	movss	xmm0, DWORD PTR ?m_FogLevel@CDXEngine@@0MA
	ucomiss	xmm0, DWORD PTR _LastFog$[ebp]
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN1@DrawSolidS
	mov	edx, DWORD PTR ?m_FogLevel@CDXEngine@@0MA
	push	edx
	push	37					; 00000025H
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax
$LN1@DrawSolidS:

; 1742 : 		LastFog=m_FogLevel;

	movss	xmm0, DWORD PTR ?m_FogLevel@CDXEngine@@0MA
	movss	DWORD PTR _LastFog$[ebp], xmm0

; 1743 : 		DrawSurface();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawSurface@CDXEngine@@AAEXXZ		; CDXEngine::DrawSurface

; 1744 : 	}

	jmp	$LN5@DrawSolidS
$LN4@DrawSolidS:

; 1745 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawSolidSurfaces@CDXEngine@@AAEXXZ ENDP		; CDXEngine::DrawSolidSurfaces
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_State$ = -76						; size = 64
_this$ = -12						; size = 4
_LastFog$ = -8						; size = 4
_LastObj$ = -4						; size = 4
?DrawAlphaSurfaces@CDXEngine@@AAEXXZ PROC		; CDXEngine::DrawAlphaSurfaces
; _this$ = ecx

; 1644 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1645 : 	D3DXMATRIX	State;

	lea	ecx, DWORD PTR _State$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 1646 : 	ObjectInstance	*LastObj=NULL;

	mov	DWORD PTR _LastObj$[ebp], 0

; 1647 : 	float			LastFog=0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _LastFog$[ebp], xmm0

; 1648 : 
; 1649 : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE,TRUE);

	push	1
	push	27					; 0000001bH
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 1650 : 
; 1651 : 	m_pD3DD->SetRenderState( D3DRENDERSTATE_CULLMODE, D3DCULL_NONE );

	push	1
	push	22					; 00000016H
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 1652 : 	m_pD3DD->SetRenderState( D3DRENDERSTATE_ZWRITEENABLE, FALSE );

	push	0
	push	14					; 0000000eH
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx
$LN5@DrawAlphaS:

; 1653 : 	while(PopSurface(&m_AlphaStack, &State)){

	lea	eax, DWORD PTR _State$[ebp]
	push	eax
	push	OFFSET ?m_AlphaStack@CDXEngine@@0USurfaceStackType@@A ; CDXEngine::m_AlphaStack
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PopSurface@CDXEngine@@AAE_NPAUSurfaceStackType@@PAUD3DXMATRIX@@@Z ; CDXEngine::PopSurface
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@DrawAlphaS

; 1654 : 		if(AppliedState!=State) m_pD3DD->SetTransform( D3DTRANSFORMSTATE_WORLD, (LPD3DMATRIX)&State );

	lea	edx, DWORD PTR _State$[ebp]
	push	edx
	mov	ecx, OFFSET ?AppliedState@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::AppliedState
	call	??9D3DXMATRIX@@QBEHABU0@@Z		; D3DXMATRIX::operator!=
	test	eax, eax
	je	SHORT $LN3@DrawAlphaS
	lea	eax, DWORD PTR _State$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+44]
	call	ecx
$LN3@DrawAlphaS:

; 1655 : 		AppliedState=State;

	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _State$[ebp]
	mov	edi, OFFSET ?AppliedState@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::AppliedState
	rep movsd

; 1656 : #ifndef	DEBUG_ENGINE
; 1657 : #ifdef	LIGHT_ENGINE_DEBUG
; 1658 : START_PROFILE("LIGHTS ON TIME");
; 1659 : #endif
; 1660 : #endif
; 1661 : 		// if Changed object, remap all lights
; 1662 : 		if(LastObj!=m_TheObjectInstance) TheLightEngine.EnableMappedLights();

	mov	edx, DWORD PTR _LastObj$[ebp]
	cmp	edx, DWORD PTR ?m_TheObjectInstance@CDXEngine@@0PAVObjectInstance@@A ; CDXEngine::m_TheObjectInstance
	je	SHORT $LN2@DrawAlphaS
	mov	ecx, OFFSET ?TheLightEngine@@3VCDXLight@@A ; TheLightEngine
	call	?EnableMappedLights@CDXLight@@QAEXXZ	; CDXLight::EnableMappedLights
$LN2@DrawAlphaS:

; 1663 : 		LastObj=m_TheObjectInstance;

	mov	eax, DWORD PTR ?m_TheObjectInstance@CDXEngine@@0PAVObjectInstance@@A ; CDXEngine::m_TheObjectInstance
	mov	DWORD PTR _LastObj$[ebp], eax

; 1664 : 		
; 1665 : #ifndef	DEBUG_ENGINE
; 1666 : #ifdef	LIGHT_ENGINE_DEBUG
; 1667 : STOP_PROFILE("LIGHTS ON TIME");
; 1668 : #endif
; 1669 : #endif
; 1670 : 		// Stup the Fog level for this object
; 1671 : 		if(m_FogLevel!=LastFog) m_pD3DD->SetRenderState(D3DRENDERSTATE_FOGEND,   *(DWORD *)(&m_FogLevel));

	movss	xmm0, DWORD PTR ?m_FogLevel@CDXEngine@@0MA
	ucomiss	xmm0, DWORD PTR _LastFog$[ebp]
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN1@DrawAlphaS
	mov	ecx, DWORD PTR ?m_FogLevel@CDXEngine@@0MA
	push	ecx
	push	37					; 00000025H
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx
$LN1@DrawAlphaS:

; 1672 : 		LastFog=m_FogLevel;

	movss	xmm0, DWORD PTR ?m_FogLevel@CDXEngine@@0MA
	movss	DWORD PTR _LastFog$[ebp], xmm0

; 1673 : 		DrawSurface();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawSurface@CDXEngine@@AAEXXZ		; CDXEngine::DrawSurface

; 1674 : 	}

	jmp	$LN5@DrawAlphaS
$LN4@DrawAlphaS:

; 1675 : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE,FALSE);

	push	0
	push	27					; 0000001bH
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 1676 : 	m_pD3DD->SetRenderState( D3DRENDERSTATE_ZWRITEENABLE, TRUE );

	push	1
	push	14					; 0000000eH
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 1677 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawAlphaSurfaces@CDXEngine@@AAEXXZ ENDP		; CDXEngine::DrawAlphaSurfaces
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
?DOFManage@CDXEngine@@AAEXXZ PROC			; CDXEngine::DOFManage
; _this$ = ecx

; 1104 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 
; 1106 : #ifdef	EDIT_ENGINE
; 1107 : 	m_DofLevel++;
; 1108 : 	if(m_SkipSwitch) return;
; 1109 : #endif
; 1110 : 
; 1111 : 	// Select the DOF Type
; 1112 : 	switch(m_NODE.DOF->Type){

	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv65[ebp], ecx
	mov	edx, DWORD PTR tv65[ebp]
	sub	edx, 1
	mov	DWORD PTR tv65[ebp], edx
	cmp	DWORD PTR tv65[ebp], 5
	ja	SHORT $LN6@DOFManage
	mov	eax, DWORD PTR tv65[ebp]
	jmp	DWORD PTR $LN8@DOFManage[eax*4]

; 1113 : 
; 1114 : 		case	NO_DOF:		break;

	jmp	SHORT $LN6@DOFManage
$LN2@DOFManage:

; 1115 : 
; 1116 : 		// * POSITIONAL DOF MANAGEMENT *
; 1117 : 		case	ROTATE:		
; 1118 : 		case	XROTATE:
; 1119 : 		case	TRANSLATE:
; 1120 : 		case	SCALE:		PushMatrix(&AppliedState);

	push	OFFSET ?AppliedState@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::AppliedState
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PushMatrix@CDXEngine@@AAEXPAUD3DXMATRIX@@@Z ; CDXEngine::PushMatrix

; 1121 : 							#ifdef	DEBUG_ENGINE	
; 1122 : 								//if(NODE.SURFACE->dwFlags.b.Disable) break;
; 1123 : 							#endif
; 1124 : 
; 1125 : 							DOF();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DOF@CDXEngine@@AAEXXZ			; CDXEngine::DOF

; 1126 : 							break;

	jmp	SHORT $LN6@DOFManage
$LN1@DOFManage:

; 1127 : 		
; 1128 : 		case	SWITCH:
; 1129 : 		case	XSWITCH:	SWITCHManage();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SWITCHManage@CDXEngine@@AAEXXZ		; CDXEngine::SWITCHManage
$LN6@DOFManage:

; 1130 : 							break;
; 1131 : 
; 1132 : 	}
; 1133 : 
; 1134 : 
; 1135 : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN8@DOFManage:
	DD	$LN2@DOFManage
	DD	$LN2@DOFManage
	DD	$LN2@DOFManage
	DD	$LN2@DOFManage
	DD	$LN1@DOFManage
	DD	$LN1@DOFManage
?DOFManage@CDXEngine@@AAEXXZ ENDP			; CDXEngine::DOFManage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_Spare$ = -8						; size = 4
_this$ = -4						; size = 4
?ResetFeatures@CDXEngine@@AAEXXZ PROC			; CDXEngine::ResetFeatures
; _this$ = ecx

; 492  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 493  : 	m_LastFlags.w=0xffffffff;

	mov	DWORD PTR ?m_LastFlags@CDXEngine@@0TDXFlagsType@@A, -1 ; CDXEngine::m_LastFlags

; 494  : 	DXFlagsType	Spare;
; 495  : 	Spare.w=0x00;

	mov	DWORD PTR _Spare$[ebp], 0

; 496  : 	SetRenderState(m_LastFlags, Spare, DISABLE);

	push	0
	mov	eax, DWORD PTR _Spare$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?m_LastFlags@CDXEngine@@0TDXFlagsType@@A ; CDXEngine::m_LastFlags
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRenderState@CDXEngine@@AAEXTDXFlagsType@@0_N@Z ; CDXEngine::SetRenderState

; 497  : 	m_LastFlags.w=0;

	mov	DWORD PTR ?m_LastFlags@CDXEngine@@0TDXFlagsType@@A, 0 ; CDXEngine::m_LastFlags

; 498  : 
; 499  : 	SelectTexture(-1);

	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectTexture@CDXEngine@@QAEXH@Z	; CDXEngine::SelectTexture

; 500  : 	m_TexID=-1;

	mov	DWORD PTR ?m_TexID@CDXEngine@@0KA, -1	; CDXEngine::m_TexID

; 501  : 	LastTexID=0xcccccccc;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], -858993460		; ccccccccH

; 502  : 
; 503  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ResetFeatures@CDXEngine@@AAEXXZ ENDP			; CDXEngine::ResetFeatures
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_R$1 = -124						; size = 64
tv335 = -60						; size = 8
tv326 = -52						; size = 8
tv317 = -44						; size = 8
_EnabledFlags$ = -36					; size = 4
_hr$ = -32						; size = 4
tv332 = -28						; size = 4
tv323 = -24						; size = 4
tv314 = -20						; size = 4
_DisabledFlags$ = -16					; size = 4
_ChangedFlags$ = -12					; size = 4
_this$ = -8						; size = 4
_NewFlags$ = -4						; size = 4
?DrawSurface@CDXEngine@@AAEXXZ PROC			; CDXEngine::DrawSurface
; _this$ = ecx

; 806  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 807  : 	#ifdef	DEBUG_ENGINE	
; 808  : 		DXDrawCalls++;
; 809  : 		DXDrawVertices+=m_NODE.SURFACE->dwVCount;
; 810  : 	#endif
; 811  : 
; 812  : 
; 813  : 	DXFlagsType NewFlags;
; 814  : 	NewFlags.w=m_NODE.SURFACE->dwFlags.w;

	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _NewFlags$[ebp], ecx

; 815  : 
; 816  : 	// Switching Emissive surfaces feature, setup the flags for the surface
; 817  : 	m_pD3DD->SetRenderState( D3DRENDERSTATE_EMISSIVEMATERIALSOURCE, D3DMCS_COLOR2 );	

	push	2
	push	148					; 00000094H
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx

; 818  : 	if(m_TheObjectInstance->SwitchValues&&(NewFlags.b.SwEmissive)){

	mov	eax, DWORD PTR ?m_TheObjectInstance@CDXEngine@@0PAVObjectInstance@@A ; CDXEngine::m_TheObjectInstance
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN10@DrawSurfac
	mov	ecx, DWORD PTR _NewFlags$[ebp]
	shr	ecx, 5
	and	ecx, 1
	je	SHORT $LN10@DrawSurfac

; 819  : 		if(!(m_TheObjectInstance->SwitchValues[m_NODE.SURFACE->SwitchNumber]&m_NODE.SURFACE->SwitchMask)) 

	mov	edx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	eax, DWORD PTR [edx+44]
	mov	ecx, DWORD PTR ?m_TheObjectInstance@CDXEngine@@0PAVObjectInstance@@A ; CDXEngine::m_TheObjectInstance
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	edx, DWORD PTR [edx+eax*4]
	and	edx, DWORD PTR [ecx+48]
	jne	SHORT $LN10@DrawSurfac

; 820  : 			m_pD3DD->SetRenderState( D3DRENDERSTATE_EMISSIVEMATERIALSOURCE, D3DMCS_MATERIAL );

	push	0
	push	148					; 00000094H
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax
$LN10@DrawSurfac:

; 821  : 	}
; 822  : 
; 823  : 
; 824  : 	////////////////////// Test if any change in rendering mode /////////////
; 825  : 	//if(NewFlags.StateFlags!=m_LastFlags.StateFlags){
; 826  : 
; 827  : 		#ifdef	DEBUG_ENGINE	
; 828  : 			DXStateChanges++;
; 829  : 		#endif
; 830  : 
; 831  : 		// Selects changed Flags
; 832  : 		DXFlagsType	ChangedFlags, DisabledFlags, EnabledFlags;
; 833  : 		ChangedFlags.w=m_LastFlags.w^NewFlags.w;

	mov	ecx, DWORD PTR ?m_LastFlags@CDXEngine@@0TDXFlagsType@@A ; CDXEngine::m_LastFlags
	xor	ecx, DWORD PTR _NewFlags$[ebp]
	mov	DWORD PTR _ChangedFlags$[ebp], ecx

; 834  : 		DisabledFlags.w=ChangedFlags.w&(~NewFlags.w);

	mov	edx, DWORD PTR _NewFlags$[ebp]
	not	edx
	and	edx, DWORD PTR _ChangedFlags$[ebp]
	mov	DWORD PTR _DisabledFlags$[ebp], edx

; 835  : 		EnabledFlags.w=ChangedFlags.w&NewFlags.w;

	mov	eax, DWORD PTR _ChangedFlags$[ebp]
	and	eax, DWORD PTR _NewFlags$[ebp]
	mov	DWORD PTR _EnabledFlags$[ebp], eax

; 836  : 
; 837  : 
; 838  : 
; 839  : 		// Check for changes in lags affecting RENDERER STATE
; 840  : 		if(DisabledFlags.StateFlags) SetRenderState(DisabledFlags, NewFlags, DISABLE);

	movsx	ecx, BYTE PTR _DisabledFlags$[ebp]
	test	ecx, ecx
	je	SHORT $LN9@DrawSurfac
	push	0
	mov	edx, DWORD PTR _NewFlags$[ebp]
	push	edx
	mov	eax, DWORD PTR _DisabledFlags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRenderState@CDXEngine@@AAEXTDXFlagsType@@0_N@Z ; CDXEngine::SetRenderState
$LN9@DrawSurfac:

; 841  : 		/*if(EnabledFlags.StateFlags)*/ SetRenderState(NewFlags, NewFlags, ENABLE);

	push	1
	mov	ecx, DWORD PTR _NewFlags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _NewFlags$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRenderState@CDXEngine@@AAEXTDXFlagsType@@0_N@Z ; CDXEngine::SetRenderState

; 842  : 
; 843  : 		m_LastFlags.w=NewFlags.w;

	mov	eax, DWORD PTR _NewFlags$[ebp]
	mov	DWORD PTR ?m_LastFlags@CDXEngine@@0TDXFlagsType@@A, eax ; CDXEngine::m_LastFlags

; 844  : 	//}
; 845  : 	
; 846  : 
; 847  : 	/////////////////////// TEXTURE CHANGE Feature //////////////////////////
; 848  : 	if(m_TexID!=LastTexID){

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?m_TexID@CDXEngine@@0KA	; CDXEngine::m_TexID
	cmp	edx, DWORD PTR [ecx+12]
	je	SHORT $LN8@DrawSurfac

; 849  : 		SelectTexture(m_TexID);

	mov	eax, DWORD PTR ?m_TexID@CDXEngine@@0KA	; CDXEngine::m_TexID
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectTexture@CDXEngine@@QAEXH@Z	; CDXEngine::SelectTexture

; 850  : 		#ifdef	DEBUG_ENGINE	
; 851  : 			DXTexSwitches++;
; 852  : 		#endif
; 853  : 		LastTexID=m_TexID;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?m_TexID@CDXEngine@@0KA	; CDXEngine::m_TexID
	mov	DWORD PTR [ecx+12], edx
$LN8@DrawSurfac:

; 854  : 	}
; 855  : 		
; 856  : 
; 857  : 
; 858  : 	
; 859  : 	////////////////////// ZBIAS Checking done every time ////////////////////
; 860  : 	#ifdef	DEBUG_ENGINE	
; 861  : 		if(UseZBias && m_LastZBias!=m_NODE.SURFACE->dwzBias){
; 862  : 			m_LastZBias=m_NODE.SURFACE->dwzBias;
; 863  : 			m_pD3DD->SetRenderState(D3DRENDERSTATE_ZBIAS, m_LastZBias);
; 864  : 		}
; 865  : 	#else
; 866  : 		if(m_LastZBias!=m_NODE.SURFACE->dwzBias){

	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	ecx, DWORD PTR ?m_LastZBias@CDXEngine@@0KA ; CDXEngine::m_LastZBias
	cmp	ecx, DWORD PTR [eax+28]
	je	SHORT $LN7@DrawSurfac

; 867  : 			m_LastZBias=m_NODE.SURFACE->dwzBias;

	mov	edx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR ?m_LastZBias@CDXEngine@@0KA, eax ; CDXEngine::m_LastZBias

; 868  : 			m_pD3DD->SetRenderState(D3DRENDERSTATE_ZBIAS, m_LastZBias);

	mov	ecx, DWORD PTR ?m_LastZBias@CDXEngine@@0KA ; CDXEngine::m_LastZBias
	push	ecx
	push	47					; 0000002fH
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx
$LN7@DrawSurfac:

; 869  : 		}
; 870  : 	#endif
; 871  : 
; 872  : 
; 873  : 	///////////////// Bill Boarded Surfaces Management - START //////////////
; 874  : 	if(NewFlags.b.BillBoard){

	mov	eax, DWORD PTR _NewFlags$[ebp]
	shr	eax, 9
	and	eax, 1
	je	SHORT $LN6@DrawSurfac

; 875  : 		// Apply the BillBoard Transformation
; 876  : 		D3DXMATRIX	R=BBMatrix;

	mov	ecx, 16					; 00000010H
	mov	esi, OFFSET ?BBMatrix@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::BBMatrix
	lea	edi, DWORD PTR _R$1[ebp]
	rep movsd

; 877  : 		R.m30=AppliedState.m30;

	movss	xmm0, DWORD PTR ?AppliedState@CDXEngine@@0UD3DXMATRIX@@A+48
	movss	DWORD PTR _R$1[ebp+48], xmm0

; 878  : 		R.m31=AppliedState.m31;

	movss	xmm0, DWORD PTR ?AppliedState@CDXEngine@@0UD3DXMATRIX@@A+52
	movss	DWORD PTR _R$1[ebp+52], xmm0

; 879  : 		R.m32=AppliedState.m32;

	movss	xmm0, DWORD PTR ?AppliedState@CDXEngine@@0UD3DXMATRIX@@A+56
	movss	DWORD PTR _R$1[ebp+56], xmm0

; 880  : 		R.m33=1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _R$1[ebp+60], xmm0

; 881  : 		m_pD3DD->SetTransform( D3DTRANSFORMSTATE_WORLD, (LPD3DMATRIX)&R);

	lea	ecx, DWORD PTR _R$1[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+44]
	call	edx
$LN6@DrawSurfac:

; 882  : 	}
; 883  : 
; 884  : 
; 885  : 	////////////////////// Surface SPECULARITY  management ///////////////////////////
; 886  : 	if(TheMaterial.power!=m_NODE.SURFACE->SpecularIndex || m_LastSpecular!=m_NODE.SURFACE->DefaultSpecularity){

	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	movss	xmm0, DWORD PTR ?TheMaterial@CDXEngine@@2U_D3DMATERIAL7@@A+64
	ucomiss	xmm0, DWORD PTR [eax+32]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN4@DrawSurfac
	mov	ecx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	edx, DWORD PTR ?m_LastSpecular@CDXEngine@@0KA ; CDXEngine::m_LastSpecular
	cmp	edx, DWORD PTR [ecx+52]
	je	$LN5@DrawSurfac
$LN4@DrawSurfac:

; 887  : 		TheMaterial.power=m_NODE.SURFACE->SpecularIndex;

	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	movss	xmm0, DWORD PTR [eax+32]
	movss	DWORD PTR ?TheMaterial@CDXEngine@@2U_D3DMATERIAL7@@A+64, xmm0

; 888  : 		m_LastSpecular=m_NODE.SURFACE->DefaultSpecularity;

	mov	ecx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR ?m_LastSpecular@CDXEngine@@0KA, edx ; CDXEngine::m_LastSpecular

; 889  : 		TheMaterial.dcvSpecular.r=(float)((m_LastSpecular>>16)&0xff)/255.0f;

	mov	eax, DWORD PTR ?m_LastSpecular@CDXEngine@@0KA ; CDXEngine::m_LastSpecular
	shr	eax, 16					; 00000010H
	and	eax, 255				; 000000ffH
	mov	DWORD PTR tv314[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv314[ebp]
	mov	ecx, DWORD PTR tv314[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv317[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv317[ebp]
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR ?TheMaterial@CDXEngine@@2U_D3DMATERIAL7@@A+32, xmm0

; 890  : 		TheMaterial.dcvSpecular.g=(float)((m_LastSpecular>>8)&0xff)/255.0f;

	mov	edx, DWORD PTR ?m_LastSpecular@CDXEngine@@0KA ; CDXEngine::m_LastSpecular
	shr	edx, 8
	and	edx, 255				; 000000ffH
	mov	DWORD PTR tv323[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv323[ebp]
	mov	eax, DWORD PTR tv323[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv326[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv326[ebp]
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR ?TheMaterial@CDXEngine@@2U_D3DMATERIAL7@@A+36, xmm0

; 891  : 		TheMaterial.dcvSpecular.b=(float)(m_LastSpecular&0xff)/255.0f;

	mov	ecx, DWORD PTR ?m_LastSpecular@CDXEngine@@0KA ; CDXEngine::m_LastSpecular
	and	ecx, 255				; 000000ffH
	mov	DWORD PTR tv332[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv332[ebp]
	mov	edx, DWORD PTR tv332[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv335[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv335[ebp]
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR ?TheMaterial@CDXEngine@@2U_D3DMATERIAL7@@A+40, xmm0

; 892  : 		m_pD3DD->SetMaterial(&TheMaterial);

	push	OFFSET ?TheMaterial@CDXEngine@@2U_D3DMATERIAL7@@A ; CDXEngine::TheMaterial
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+64]
	call	eax
$LN5@DrawSurfac:

; 893  : 	}
; 894  : 	
; 895  : 
; 896  : 
; 897  : #ifdef	EDIT_ENGINE
; 898  : 
; 899  : /////////////////////////////////THIS IS THE EDIT ENGINE CALL \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
; 900  : 
; 901  : 	CheckHR(m_pD3DD->DrawPrimitive( m_NODE.SURFACE->dwPrimType, D3DFVF_MANAGED, m_NODE.BYTE+sizeof(DxSurfaceType), m_NODE.SURFACE->dwVCount,0));
; 902  : 
; 903  : //////////////////////////////////// END EDIT ENGINE CALL \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
; 904  : 
; 905  : #else
; 906  : 
; 907  : //////////////////////////////////THIS IS THE GAME ENGINE CALL \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
; 908  : 
; 909  : 	HRESULT hr;
; 910  : 
; 911  : 	///////////////////////// Draw the Primitive /////////////////////////////////
; 912  : 	#ifdef	INDEXED_MODE_ENGINE	
; 913  : 	if(m_NODE.SURFACE->dwPrimType==D3DPT_POINTLIST){

	mov	ecx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	cmp	DWORD PTR [ecx+24], 1
	jne	SHORT $LN3@DrawSurfac

; 914  : //		SelectTexture(NULL);
; 915  : //		m_LastTexID=-1;
; 916  : 		hr=m_pD3DD->DrawPrimitiveVB( m_NODE.SURFACE->dwPrimType, m_VB.Vb, (DWORD)*((Int16*)(m_NODE.BYTE+sizeof(DxSurfaceType)))+m_VB.BaseOffset, 
; 917  : 											 m_NODE.SURFACE->dwVCount, 0 );

	push	0
	mov	edx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	movsx	edx, WORD PTR [ecx+56]
	add	edx, DWORD PTR ?m_VB@CDXEngine@@0UVBItemType@@A+16
	push	edx
	mov	eax, DWORD PTR ?m_VB@CDXEngine@@0UVBItemType@@A
	push	eax
	mov	ecx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+124]
	call	eax
	mov	DWORD PTR _hr$[ebp], eax

; 918  : 	} else {

	jmp	SHORT $LN2@DrawSurfac
$LN3@DrawSurfac:

; 919  : 		hr=m_pD3DD->DrawIndexedPrimitiveVB( m_NODE.SURFACE->dwPrimType, m_VB.Vb, m_VB.BaseOffset, m_VB.NVertices,
; 920  : 										(LPWORD)(m_NODE.BYTE+sizeof(DxSurfaceType)), m_NODE.SURFACE->dwVCount, 0 );

	push	0
	mov	ecx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	add	eax, 56					; 00000038H
	push	eax
	mov	ecx, DWORD PTR ?m_VB@CDXEngine@@0UVBItemType@@A+12
	push	ecx
	mov	edx, DWORD PTR ?m_VB@CDXEngine@@0UVBItemType@@A+16
	push	edx
	mov	eax, DWORD PTR ?m_VB@CDXEngine@@0UVBItemType@@A
	push	eax
	mov	ecx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+128]
	call	eax
	mov	DWORD PTR _hr$[ebp], eax
$LN2@DrawSurfac:

; 921  : 	}
; 922  : 
; 923  : 
; 924  : 	#else
; 925  : 	CheckHR(m_pD3DD->DrawPrimitiveVB( m_NODE.SURFACE->dwPrimType, m_VB.Vb, (DWORD)*((Int16*)(m_NODE.BYTE+sizeof(DxSurfaceType)))+m_VB.BaseOffset, 
; 926  : 										 m_NODE.SURFACE->dwVCount,0));
; 927  : 	#endif
; 928  : 
; 929  : //////////////////////////////////// END GAME ENGINE CALL \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
; 930  : 
; 931  : #endif
; 932  : 
; 933  : 
; 934  : #ifdef	STAT_DX_ENGINE
; 935  : 	VCounter+=m_NODE.SURFACE->dwVCount;
; 936  : 	COUNT_PROFILE("*** DX Draws ");
; 937  : 	if(hr) COUNT_PROFILE("*** DX ERRORS ");
; 938  : #endif
; 939  : 
; 940  : 
; 941  : 	///////////////// Bill Boarded Surfaces Management - END ////////////////////
; 942  : 	if(NewFlags.b.BillBoard){

	mov	ecx, DWORD PTR _NewFlags$[ebp]
	shr	ecx, 9
	and	ecx, 1
	je	SHORT $LN1@DrawSurfac

; 943  : 		// Get back to original transformation
; 944  : 		m_pD3DD->SetTransform( D3DTRANSFORMSTATE_WORLD, (LPD3DMATRIX)&AppliedState);

	push	OFFSET ?AppliedState@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::AppliedState
	push	1
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+44]
	call	edx
$LN1@DrawSurfac:

; 945  : 	}
; 946  : 
; 947  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawSurface@CDXEngine@@AAEXXZ ENDP			; CDXEngine::DrawSurface
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_State$ = -68						; size = 64
_this$ = -4						; size = 4
_Level$ = 8						; size = 4
_SetupMode$ = 12					; size = 1
?DrawSortedAlpha@CDXEngine@@AAEXK_N@Z PROC		; CDXEngine::DrawSortedAlpha
; _this$ = ecx

; 1684 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1685 : 
; 1686 : 	D3DXMATRIX	State;

	lea	ecx, DWORD PTR _State$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 1687 : 
; 1688 : 	// Initialize data parameters
; 1689 : 	if(SetupMode) FlushInit();

	movzx	eax, BYTE PTR _SetupMode$[ebp]
	test	eax, eax
	je	SHORT $LN2@DrawSorted
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushInit@CDXEngine@@AAEXXZ		; CDXEngine::FlushInit
$LN2@DrawSorted:

; 1690 : 
; 1691 : 	// Setup Alpha features
; 1692 : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE,TRUE);

	push	1
	push	27					; 0000001bH
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 1693 : 	m_pD3DD->SetRenderState( D3DRENDERSTATE_CULLMODE, D3DCULL_NONE );

	push	1
	push	22					; 00000016H
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx

; 1694 : 	m_pD3DD->SetRenderState( D3DRENDERSTATE_ZWRITEENABLE, FALSE );

	push	0
	push	14					; 0000000eH
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 1695 : 
; 1696 : 	// Get the surface data and update transformations / features
; 1697 : 	GetSurface(Level, &m_AlphaStack, &State);

	lea	ecx, DWORD PTR _State$[ebp]
	push	ecx
	push	OFFSET ?m_AlphaStack@CDXEngine@@0USurfaceStackType@@A ; CDXEngine::m_AlphaStack
	mov	edx, DWORD PTR _Level$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSurface@CDXEngine@@AAE_NKPAUSurfaceStackType@@PAUD3DXMATRIX@@@Z ; CDXEngine::GetSurface

; 1698 : 	m_pD3DD->SetTransform( D3DTRANSFORMSTATE_WORLD, (LPD3DMATRIX)&State );

	lea	eax, DWORD PTR _State$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+44]
	call	ecx

; 1699 : 	AppliedState=State;

	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _State$[ebp]
	mov	edi, OFFSET ?AppliedState@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::AppliedState
	rep movsd

; 1700 : 	if(m_LastObjectInstance != m_TheObjectInstance) TheLightEngine.EnableMappedLights(), m_LastObjectInstance = m_TheObjectInstance;

	mov	edx, DWORD PTR ?m_LastObjectInstance@CDXEngine@@0PAVObjectInstance@@A ; CDXEngine::m_LastObjectInstance
	cmp	edx, DWORD PTR ?m_TheObjectInstance@CDXEngine@@0PAVObjectInstance@@A ; CDXEngine::m_TheObjectInstance
	je	SHORT $LN1@DrawSorted
	mov	ecx, OFFSET ?TheLightEngine@@3VCDXLight@@A ; TheLightEngine
	call	?EnableMappedLights@CDXLight@@QAEXXZ	; CDXLight::EnableMappedLights
	mov	eax, DWORD PTR ?m_TheObjectInstance@CDXEngine@@0PAVObjectInstance@@A ; CDXEngine::m_TheObjectInstance
	mov	DWORD PTR ?m_LastObjectInstance@CDXEngine@@0PAVObjectInstance@@A, eax ; CDXEngine::m_LastObjectInstance
$LN1@DrawSorted:

; 1701 : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_FOGEND,   *(DWORD *)(&m_FogLevel));

	mov	ecx, DWORD PTR ?m_FogLevel@CDXEngine@@0MA
	push	ecx
	push	37					; 00000025H
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx

; 1702 : 
; 1703 : 	// Draw the surface
; 1704 : 	DrawSurface();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawSurface@CDXEngine@@AAEXXZ		; CDXEngine::DrawSurface

; 1705 : 
; 1706 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?DrawSortedAlpha@CDXEngine@@AAEXK_N@Z ENDP		; CDXEngine::DrawSortedAlpha
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_Pos$ = -20						; size = 12
_Level$ = -8						; size = 4
_this$ = -4						; size = 4
_Stack$ = 8						; size = 4
_State$ = 12						; size = 4
?PushSurfaceIntoSort@CDXEngine@@AAE_NPAUSurfaceStackType@@PAUD3DXMATRIX@@@Z PROC ; CDXEngine::PushSurfaceIntoSort
; _this$ = ecx

; 533  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 534  : 	DWORD	Level;
; 535  : 
; 536  : 	Level = PushSurface(Stack, State);

	mov	eax, DWORD PTR _State$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Stack$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PushSurface@CDXEngine@@AAEKPAUSurfaceStackType@@PAUD3DXMATRIX@@@Z ; CDXEngine::PushSurface
	mov	DWORD PTR _Level$[ebp], eax

; 537  : 	D3DXVECTOR3 Pos;

	lea	ecx, DWORD PTR _Pos$[ebp]
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3

; 538  : 	Pos.x = State->m30, Pos.y = State->m31, Pos.z = State->m32;

	mov	edx, DWORD PTR _State$[ebp]
	movss	xmm0, DWORD PTR [edx+48]
	movss	DWORD PTR _Pos$[ebp], xmm0
	mov	eax, DWORD PTR _State$[ebp]
	movss	xmm0, DWORD PTR [eax+52]
	movss	DWORD PTR _Pos$[ebp+4], xmm0
	mov	ecx, DWORD PTR _State$[ebp]
	movss	xmm0, DWORD PTR [ecx+56]
	movss	DWORD PTR _Pos$[ebp+8], xmm0

; 539  : 	DX2D_AddObject(Level, LAYER_AUTO, Stack, &Pos);

	lea	edx, DWORD PTR _Pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _Stack$[ebp]
	push	eax
	push	6
	mov	ecx, DWORD PTR _Level$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DX2D_AddObject@CDXEngine@@QAEXKKPAUSurfaceStackType@@PAUD3DXVECTOR3@@@Z ; CDXEngine::DX2D_AddObject

; 540  : 	return true;

	mov	al, 1

; 541  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?PushSurfaceIntoSort@CDXEngine@@AAE_NPAUSurfaceStackType@@PAUD3DXMATRIX@@@Z ENDP ; CDXEngine::PushSurfaceIntoSort
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Level$ = 8						; size = 4
_Stack$ = 12						; size = 4
_State$ = 16						; size = 4
?GetSurface@CDXEngine@@AAE_NKPAUSurfaceStackType@@PAUD3DXMATRIX@@@Z PROC ; CDXEngine::GetSurface
; _this$ = ecx

; 567  : {	

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 568  : 	// if stack not empty the assign variables with stacked data
; 569  : 	if(Level < Stack->StackLevel){

	mov	eax, DWORD PTR _Stack$[ebp]
	mov	ecx, DWORD PTR _Level$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	$LN1@GetSurface

; 570  : 		m_VB=Stack->Stack[Level].Vb;

	mov	edx, DWORD PTR _Level$[ebp]
	imul	edx, 188				; 000000bcH
	mov	eax, DWORD PTR _Stack$[ebp]
	mov	esi, DWORD PTR [eax+8]
	add	esi, edx
	mov	ecx, 11					; 0000000bH
	mov	edi, OFFSET ?m_VB@CDXEngine@@0UVBItemType@@A ; CDXEngine::m_VB
	rep movsd

; 571  : 		*State=Stack->Stack[Level].State;

	mov	ecx, DWORD PTR _Level$[ebp]
	imul	ecx, 188				; 000000bcH
	mov	edx, DWORD PTR _Stack$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	esi, DWORD PTR [eax+ecx+48]
	mov	ecx, 16					; 00000010H
	mov	edi, DWORD PTR _State$[ebp]
	rep movsd

; 572  : 		m_NODE.BYTE=Stack->Stack[Level].Surface;

	mov	ecx, DWORD PTR _Level$[ebp]
	imul	ecx, 188				; 000000bcH
	mov	edx, DWORD PTR _Stack$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+ecx+44]
	mov	DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A, ecx ; CDXEngine::m_NODE

; 573  : 		m_TexID=Stack->Stack[Level].TexID;

	mov	edx, DWORD PTR _Level$[ebp]
	imul	edx, 188				; 000000bcH
	mov	eax, DWORD PTR _Stack$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+edx+112]
	mov	DWORD PTR ?m_TexID@CDXEngine@@0KA, edx	; CDXEngine::m_TexID

; 574  : 		m_TheObjectInstance=Stack->Stack[Level].ObjInst;

	mov	eax, DWORD PTR _Level$[ebp]
	imul	eax, 188				; 000000bcH
	mov	ecx, DWORD PTR _Stack$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax+116]
	mov	DWORD PTR ?m_TheObjectInstance@CDXEngine@@0PAVObjectInstance@@A, eax ; CDXEngine::m_TheObjectInstance

; 575  : 		m_FogLevel=Stack->Stack[Level].FogLevel;

	mov	ecx, DWORD PTR _Level$[ebp]
	imul	ecx, 188				; 000000bcH
	mov	edx, DWORD PTR _Stack$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movss	xmm0, DWORD PTR [eax+ecx+120]
	movss	DWORD PTR ?m_FogLevel@CDXEngine@@0MA, xmm0

; 576  : 		memcpy(TheLightEngine.LightsToOn, Stack->Stack[Level].LightMap, sizeof(TheLightEngine.LightsToOn));

	push	64					; 00000040H
	mov	ecx, DWORD PTR _Level$[ebp]
	imul	ecx, 188				; 000000bcH
	mov	edx, DWORD PTR _Stack$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+124]
	push	ecx
	push	OFFSET ?LightsToOn@CDXLight@@2PA_NA	; CDXLight::LightsToOn
	call	_memcpy
	add	esp, 12					; 0000000cH

; 577  : 		return true;

	mov	al, 1
	jmp	SHORT $LN2@GetSurface
$LN1@GetSurface:

; 578  : 	}
; 579  : 	return false;

	xor	al, al
$LN2@GetSurface:

; 580  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetSurface@CDXEngine@@AAE_NKPAUSurfaceStackType@@PAUD3DXMATRIX@@@Z ENDP ; CDXEngine::GetSurface
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
tv68 = -8						; size = 4
_l$1 = -4						; size = 4
_Stack$ = 8						; size = 4
_State$ = 12						; size = 4
?PopSurface@CDXEngine@@AAE_NPAUSurfaceStackType@@PAUD3DXMATRIX@@@Z PROC ; CDXEngine::PopSurface
; _this$ = ecx

; 547  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 548  : 	// if stack not empty the assign variables with stacked data
; 549  : 	if(Stack->StackLevel){

	mov	eax, DWORD PTR _Stack$[ebp]
	cmp	DWORD PTR [eax], 0
	je	$LN1@PopSurface

; 550  : 		DWORD l=--Stack->StackLevel;

	mov	ecx, DWORD PTR _Stack$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, 1
	mov	DWORD PTR tv68[ebp], edx
	mov	eax, DWORD PTR _Stack$[ebp]
	mov	ecx, DWORD PTR tv68[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR tv68[ebp]
	mov	DWORD PTR _l$1[ebp], edx

; 551  : 		m_VB=Stack->Stack[l].Vb;

	mov	eax, DWORD PTR _l$1[ebp]
	imul	eax, 188				; 000000bcH
	mov	ecx, DWORD PTR _Stack$[ebp]
	mov	esi, DWORD PTR [ecx+8]
	add	esi, eax
	mov	ecx, 11					; 0000000bH
	mov	edi, OFFSET ?m_VB@CDXEngine@@0UVBItemType@@A ; CDXEngine::m_VB
	rep movsd

; 552  : 		*State=Stack->Stack[l].State;

	mov	edx, DWORD PTR _l$1[ebp]
	imul	edx, 188				; 000000bcH
	mov	eax, DWORD PTR _Stack$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	lea	esi, DWORD PTR [ecx+edx+48]
	mov	ecx, 16					; 00000010H
	mov	edi, DWORD PTR _State$[ebp]
	rep movsd

; 553  : 		m_NODE.BYTE=Stack->Stack[l].Surface;

	mov	edx, DWORD PTR _l$1[ebp]
	imul	edx, 188				; 000000bcH
	mov	eax, DWORD PTR _Stack$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+edx+44]
	mov	DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A, edx ; CDXEngine::m_NODE

; 554  : 		m_TexID=Stack->Stack[l].TexID;

	mov	eax, DWORD PTR _l$1[ebp]
	imul	eax, 188				; 000000bcH
	mov	ecx, DWORD PTR _Stack$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax+112]
	mov	DWORD PTR ?m_TexID@CDXEngine@@0KA, eax	; CDXEngine::m_TexID

; 555  : 		m_TheObjectInstance=Stack->Stack[l].ObjInst;

	mov	ecx, DWORD PTR _l$1[ebp]
	imul	ecx, 188				; 000000bcH
	mov	edx, DWORD PTR _Stack$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+ecx+116]
	mov	DWORD PTR ?m_TheObjectInstance@CDXEngine@@0PAVObjectInstance@@A, ecx ; CDXEngine::m_TheObjectInstance

; 556  : 		m_FogLevel=Stack->Stack[l].FogLevel;

	mov	edx, DWORD PTR _l$1[ebp]
	imul	edx, 188				; 000000bcH
	mov	eax, DWORD PTR _Stack$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movss	xmm0, DWORD PTR [ecx+edx+120]
	movss	DWORD PTR ?m_FogLevel@CDXEngine@@0MA, xmm0

; 557  : 		memcpy(TheLightEngine.LightsToOn, Stack->Stack[l].LightMap, sizeof(TheLightEngine.LightsToOn));

	push	64					; 00000040H
	mov	edx, DWORD PTR _l$1[ebp]
	imul	edx, 188				; 000000bcH
	mov	eax, DWORD PTR _Stack$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	lea	edx, DWORD PTR [ecx+edx+124]
	push	edx
	push	OFFSET ?LightsToOn@CDXLight@@2PA_NA	; CDXLight::LightsToOn
	call	_memcpy
	add	esp, 12					; 0000000cH

; 558  : 		return true;

	mov	al, 1
	jmp	SHORT $LN2@PopSurface
$LN1@PopSurface:

; 559  : 	}
; 560  : 	return false;

	xor	al, al
$LN2@PopSurface:

; 561  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?PopSurface@CDXEngine@@AAE_NPAUSurfaceStackType@@PAUD3DXMATRIX@@@Z ENDP ; CDXEngine::PopSurface
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_Level$ = -8						; size = 4
_l$1 = -4						; size = 4
_Stack$ = 8						; size = 4
_State$ = 12						; size = 4
?PushSurface@CDXEngine@@AAEKPAUSurfaceStackType@@PAUD3DXMATRIX@@@Z PROC ; CDXEngine::PushSurface
; _this$ = ecx

; 512  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 513  : 	DWORD	Level = Stack->StackLevel;

	mov	eax, DWORD PTR _Stack$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Level$[ebp], ecx

; 514  : 
; 515  : 	// if enough space Stores the surface Data
; 516  : 	if(Stack->StackLevel<Stack->StackMax){

	mov	edx, DWORD PTR _Stack$[ebp]
	mov	eax, DWORD PTR _Stack$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+4]
	jae	$LN1@PushSurfac

; 517  : 		DWORD l=Stack->StackLevel++;

	mov	edx, DWORD PTR _Stack$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _l$1[ebp], eax
	mov	ecx, DWORD PTR _Stack$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _Stack$[ebp]
	mov	DWORD PTR [eax], edx

; 518  : 		Stack->Stack[l].Vb=m_VB;

	mov	ecx, DWORD PTR _l$1[ebp]
	imul	ecx, 188				; 000000bcH
	mov	edx, DWORD PTR _Stack$[ebp]
	mov	edi, DWORD PTR [edx+8]
	add	edi, ecx
	mov	ecx, 11					; 0000000bH
	mov	esi, OFFSET ?m_VB@CDXEngine@@0UVBItemType@@A ; CDXEngine::m_VB
	rep movsd

; 519  : 		Stack->Stack[l].State=*State;

	mov	eax, DWORD PTR _l$1[ebp]
	imul	eax, 188				; 000000bcH
	mov	ecx, DWORD PTR _Stack$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	lea	edi, DWORD PTR [edx+eax+48]
	mov	ecx, 16					; 00000010H
	mov	esi, DWORD PTR _State$[ebp]
	rep movsd

; 520  : 		Stack->Stack[l].Surface=m_NODE.BYTE;

	mov	eax, DWORD PTR _l$1[ebp]
	imul	eax, 188				; 000000bcH
	mov	ecx, DWORD PTR _Stack$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	DWORD PTR [edx+eax+44], ecx

; 521  : 		Stack->Stack[l].TexID=m_TexID;

	mov	edx, DWORD PTR _l$1[ebp]
	imul	edx, 188				; 000000bcH
	mov	eax, DWORD PTR _Stack$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR ?m_TexID@CDXEngine@@0KA	; CDXEngine::m_TexID
	mov	DWORD PTR [ecx+edx+112], eax

; 522  : 		Stack->Stack[l].ObjInst=m_TheObjectInstance;

	mov	ecx, DWORD PTR _l$1[ebp]
	imul	ecx, 188				; 000000bcH
	mov	edx, DWORD PTR _Stack$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR ?m_TheObjectInstance@CDXEngine@@0PAVObjectInstance@@A ; CDXEngine::m_TheObjectInstance
	mov	DWORD PTR [eax+ecx+116], edx

; 523  : 		Stack->Stack[l].FogLevel=m_FogLevel;

	mov	eax, DWORD PTR _l$1[ebp]
	imul	eax, 188				; 000000bcH
	mov	ecx, DWORD PTR _Stack$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movss	xmm0, DWORD PTR ?m_FogLevel@CDXEngine@@0MA
	movss	DWORD PTR [edx+eax+120], xmm0

; 524  : 		memcpy(Stack->Stack[l].LightMap, TheLightEngine.LightsToOn, sizeof(Stack->Stack[l].LightMap));

	push	64					; 00000040H
	push	OFFSET ?LightsToOn@CDXLight@@2PA_NA	; CDXLight::LightsToOn
	mov	eax, DWORD PTR _l$1[ebp]
	imul	eax, 188				; 000000bcH
	mov	ecx, DWORD PTR _Stack$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	lea	eax, DWORD PTR [edx+eax+124]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@PushSurfac:

; 525  : 	}
; 526  : 
; 527  : 	return Level;

	mov	eax, DWORD PTR _Level$[ebp]

; 528  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?PushSurface@CDXEngine@@AAEKPAUSurfaceStackType@@PAUD3DXMATRIX@@@Z ENDP ; CDXEngine::PushSurface
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
;	COMDAT ?DrawNode@CDXEngine@@AAEXPAVObjectInstance@@KK@Z
_TEXT	SEGMENT
_p$1 = -220						; size = 64
tv65 = -156						; size = 4
_subObject$2 = -152					; size = 4
_this$ = -148						; size = 4
_k$3 = -144						; size = 12
_s$4 = -132						; size = 128
__$ArrayPad$ = -4					; size = 4
_objInst$ = 8						; size = 4
_LightOwner$ = 12					; size = 4
_LodID$ = 16						; size = 4
?DrawNode@CDXEngine@@AAEXPAVObjectInstance@@KK@Z PROC	; CDXEngine::DrawNode, COMDAT
; _this$ = ecx

; 1428 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1429 : 	// Selects actions for each node
; 1430 : 	switch(m_NODE.HEAD->Type){

	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 8
	ja	$LN1@DrawNode
	mov	edx, DWORD PTR tv65[ebp]
	jmp	DWORD PTR $LN17@DrawNode[edx*4]
$LN12@DrawNode:

; 1431 : 
; 1432 : 
; 1433 : 		case	DX_SWITCH:		
; 1434 : 		case	DX_LIGHT:
; 1435 : 		case	DX_TEXTURE:		
; 1436 : 		case	DX_MATERIAL:	
; 1437 : 		case	DX_ROOT:		break;

	jmp	$LN13@DrawNode
$LN11@DrawNode:

; 1438 : 
; 1439 : 		
; 1440 : 	// * SURFACE MANAGEMENT *	
; 1441 : 		case	DX_SURFACE:		// Setup the Texture setup the Texture to be used
; 1442 : #ifdef	EDIT_ENGINE
; 1443 : 								if(m_SkipSwitch) break;
; 1444 : #endif
; 1445 : 								if(m_NODE.SURFACE->dwFlags.b.Texture && m_NODE.SURFACE->TexID[0]!=-1)	m_TexID=m_TexUsed[m_NODE.SURFACE->TexID[0]];

	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	ecx, DWORD PTR [eax+12]
	shr	ecx, 4
	and	ecx, 1
	je	SHORT $LN10@DrawNode
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	cmp	DWORD PTR [eax+edx+36], -1
	je	SHORT $LN10@DrawNode
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	eax, DWORD PTR [edx+ecx+36]
	mov	ecx, DWORD PTR ?m_TexUsed@CDXEngine@@0PAKA[eax*4]
	mov	DWORD PTR ?m_TexID@CDXEngine@@0KA, ecx	; CDXEngine::m_TexID
	jmp	SHORT $LN9@DrawNode
$LN10@DrawNode:

; 1446 : 								else m_TexID=-1;

	mov	DWORD PTR ?m_TexID@CDXEngine@@0KA, -1	; CDXEngine::m_TexID
$LN9@DrawNode:

; 1447 : 
; 1448 : 
; 1449 : 								// Alpha Surfaces are deferred to another Draw
; 1450 : 								if(m_NODE.SURFACE->dwFlags.b.Alpha){

	mov	edx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	eax, DWORD PTR [edx+12]
	and	eax, 1
	je	SHORT $LN8@DrawNode

; 1451 : #ifdef	STAT_DX_ENGINE
; 1452 : 									COUNT_PROFILE("Alpha Surfaces Nr");
; 1453 : #endif
; 1454 : //									PushSurface(&m_AlphaStack, &AppliedState);
; 1455 : 									PushSurfaceIntoSort(&m_AlphaStack, &AppliedState);

	push	OFFSET ?AppliedState@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::AppliedState
	push	OFFSET ?m_AlphaStack@CDXEngine@@0USurfaceStackType@@A ; CDXEngine::m_AlphaStack
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PushSurfaceIntoSort@CDXEngine@@AAE_NPAUSurfaceStackType@@PAUD3DXMATRIX@@@Z ; CDXEngine::PushSurfaceIntoSort

; 1456 : 									break;

	jmp	$LN13@DrawNode
$LN8@DrawNode:

; 1457 : 								}
; 1458 : 								// Solid Surfaces are deferred to another Draw
; 1459 : 								if(m_NODE.SURFACE->dwFlags.b.VColor ){

	mov	ecx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	edx, DWORD PTR [ecx+12]
	shr	edx, 3
	and	edx, 1
	je	SHORT $LN7@DrawNode

; 1460 : #ifdef	STAT_DX_ENGINE
; 1461 : 									COUNT_PROFILE("Solid Surfaces Nr");
; 1462 : #endif
; 1463 : 									PushSurface(&m_SolidStack, &AppliedState);

	push	OFFSET ?AppliedState@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::AppliedState
	push	OFFSET ?m_SolidStack@CDXEngine@@0USurfaceStackType@@A ; CDXEngine::m_SolidStack
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PushSurface@CDXEngine@@AAEKPAUSurfaceStackType@@PAUD3DXMATRIX@@@Z ; CDXEngine::PushSurface

; 1464 : 									break;

	jmp	$LN13@DrawNode
$LN7@DrawNode:

; 1465 : 								}
; 1466 : 								DrawSurface();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawSurface@CDXEngine@@AAEXXZ		; CDXEngine::DrawSurface

; 1467 : 								break;

	jmp	$LN13@DrawNode
$LN6@DrawNode:

; 1468 : 
; 1469 : 		case	DX_DOF:			DOFManage();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DOFManage@CDXEngine@@AAEXXZ		; CDXEngine::DOFManage

; 1470 : 								break;

	jmp	$LN13@DrawNode
$LN5@DrawNode:

; 1471 : 
; 1472 : 		case	DX_ENDDOF:		
; 1473 : #ifdef	EDIT_ENGINE
; 1474 : 								if(m_SkipSwitch){
; 1475 : 									m_DofLevel--;
; 1476 : 									if(!m_DofLevel) m_SkipSwitch=false;
; 1477 : 									break;
; 1478 : 								}
; 1479 : #endif							
; 1480 : 								PopMatrix(&AppliedState);

	push	OFFSET ?AppliedState@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::AppliedState
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PopMatrix@CDXEngine@@AAEXPAUD3DXMATRIX@@@Z ; CDXEngine::PopMatrix

; 1481 : 								m_pD3DD->SetTransform( D3DTRANSFORMSTATE_WORLD, (LPD3DMATRIX)&AppliedState );

	push	OFFSET ?AppliedState@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::AppliedState
	push	1
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+44]
	call	eax

; 1482 : 								break;

	jmp	$LN13@DrawNode
$LN4@DrawNode:

; 1483 : 								
; 1484 : 								// if bad slot exit else get the Slot Children
; 1485 : 		case	DX_SLOT:		
; 1486 : #ifdef	EDIT_ENGINE
; 1487 : 								if(m_SkipSwitch) break;
; 1488 : #endif
; 1489 : 								if(m_NODE.SLOT->SlotNr >= objInst->ParentObject->nSlots) break;

	mov	ecx, DWORD PTR _objInst$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	movzx	eax, BYTE PTR [edx+51]
	mov	ecx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	cmp	DWORD PTR [ecx+12], eax
	jb	SHORT $LN3@DrawNode
	jmp	$LN13@DrawNode
$LN3@DrawNode:

; 1490 : 								{ 
; 1491 : 									ObjectInstance *subObject = objInst->SlotChildren[m_NODE.SLOT->SlotNr];

	mov	edx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _objInst$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _subObject$2[ebp], eax

; 1492 : 									if(!subObject) break;

	cmp	DWORD PTR _subObject$2[ebp], 0
	jne	SHORT $LN2@DrawNode
	jmp	$LN13@DrawNode
$LN2@DrawNode:

; 1493 : 									D3DXMATRIX p;

	lea	ecx, DWORD PTR _p$1[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 1494 : 									D3DXMatrixMultiply(&p, &m_NODE.SLOT->rotation, &AppliedState);

	push	OFFSET ?AppliedState@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::AppliedState
	mov	ecx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	add	ecx, 16					; 00000010H
	push	ecx
	lea	edx, DWORD PTR _p$1[ebp]
	push	edx
	call	_D3DXMatrixMultiply@12

; 1495 : 									Ppoint k;
; 1496 : 									k.x=0; k.y=0; k.z=0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _k$3[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _k$3[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _k$3[ebp+8], xmm0

; 1497 : 									// Draw the object IN CAMERA SPACE! - Child always depend on parent Lights...!!!
; 1498 : 									DrawObject(subObject, &p, &k, 1, 1, 1, 1, true, LightOwner);

	mov	eax, DWORD PTR _LightOwner$[ebp]
	push	eax
	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _k$3[ebp]
	push	ecx
	lea	edx, DWORD PTR _p$1[ebp]
	push	edx
	mov	eax, DWORD PTR _subObject$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawObject@CDXEngine@@QAEXPAVObjectInstance@@PAUD3DXMATRIX@@PBUTpoint@@MMMM_NK@Z ; CDXEngine::DrawObject

; 1499 : 								}
; 1500 : 								break;

	jmp	SHORT $LN13@DrawNode
$LN1@DrawNode:

; 1501 : 		default			:		char s[128]; 
; 1502 : 								printf(s, "Corrupted Model ID : %d !!!", LodID);

	mov	ecx, DWORD PTR _LodID$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BM@KPKHLCDF@Corrupted?5Model?5ID?5?3?5?$CFd?5?$CB?$CB?$CB?$AA@
	lea	edx, DWORD PTR _s$4[ebp]
	push	edx
	call	_printf
	add	esp, 12					; 0000000cH

; 1503 : 								MessageBox(NULL, s, "DX Engine", NULL);

	push	0
	push	OFFSET ??_C@_09KIOKOPID@DX?5Engine?$AA@
	lea	eax, DWORD PTR _s$4[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
$LN13@DrawNode:

; 1504 : 		
; 1505 : 	}
; 1506 : 
; 1507 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN17@DrawNode:
	DD	$LN12@DrawNode
	DD	$LN11@DrawNode
	DD	$LN12@DrawNode
	DD	$LN12@DrawNode
	DD	$LN6@DrawNode
	DD	$LN5@DrawNode
	DD	$LN4@DrawNode
	DD	$LN12@DrawNode
	DD	$LN12@DrawNode
?DrawNode@CDXEngine@@AAEXPAVObjectInstance@@KK@Z ENDP	; CDXEngine::DrawNode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_OldState$1 = -132					; size = 64
_Start$2 = -68						; size = 4
_Start$3 = -64						; size = 4
tv194 = -60						; size = 4
_LightOwner$ = -56					; size = 4
_nTexsPerBank$4 = -52					; size = 4
_texOffset$5 = -48					; size = 4
_LodID$ = -44						; size = 4
_a$6 = -40						; size = 4
_this$ = -36						; size = 4
_Script$7 = -32						; size = 4
_Lited$ = -25						; size = 1
_objInst$ = -24						; size = 4
_WasInPitMode$ = -17					; size = 1
_pos$8 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?FlushObjects@CDXEngine@@AAEXXZ PROC			; CDXEngine::FlushObjects
; _this$ = ecx

; 1512 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1513 : 
; 1514 : 	ObjectInstance *objInst=NULL;

	mov	DWORD PTR _objInst$[ebp], 0

; 1515 : 	DWORD	LodID;
; 1516 : 	bool	Lited, WasInPitMode;
; 1517 : 	DWORD	LightOwner;
; 1518 : 
; 1519 : 	//TheTextureBank.SetDeferredLoad(true);
; 1520 : 
; 1521 : 	// not a previous object instalce
; 1522 : 	m_LastObjectInstance = NULL;

	mov	DWORD PTR ?m_LastObjectInstance@CDXEngine@@0PAVObjectInstance@@A, 0 ; CDXEngine::m_LastObjectInstance

; 1523 : 
; 1524 : 	// COBRA - RED - The it stuff... Pits need to be stenciled, so, all its objects are popped as 1st
; 1525 : 	// from the VB Manager, and then drawn, its solid suraces too are to be drawn just after 
; 1526 : 	// finished Pit mode
; 1527 : 	WasInPitMode=false;

	mov	BYTE PTR _WasInPitMode$[ebp], 0
$LN22@FlushObjec:

; 1528 : 
; 1529 : 	///////////////////////////// HERE STARTS THE DRAWING ENGINE LOOP //////////////////////////////
; 1530 : 	// The Loop flushes all objects from the VBuffers
; 1531 : 
; 1532 : 	// Till objects to Draw
; 1533 : 	while(TheVbManager.GetDrawItem(&objInst, &LodID, &AppliedState, &Lited, &LightOwner, &m_FogLevel)){

	push	OFFSET ?m_FogLevel@CDXEngine@@0MA	; CDXEngine::m_FogLevel
	lea	eax, DWORD PTR _LightOwner$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Lited$[ebp]
	push	ecx
	push	OFFSET ?AppliedState@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::AppliedState
	lea	edx, DWORD PTR _LodID$[ebp]
	push	edx
	lea	eax, DWORD PTR _objInst$[ebp]
	push	eax
	mov	ecx, OFFSET ?TheVbManager@@3VCDXVbManager@@A ; TheVbManager
	call	?GetDrawItem@CDXVbManager@@QAE_NPAPAVObjectInstance@@PAKPAUD3DXMATRIX@@PA_N1PAM@Z ; CDXVbManager::GetDrawItem
	movzx	ecx, al
	test	ecx, ecx
	je	$LN15@FlushObjec

; 1534 : 		
; 1535 : 		// ok, just entered Pit Mode
; 1536 : 		if(m_PitMode && !WasInPitMode){

	movzx	edx, BYTE PTR ?m_PitMode@CDXEngine@@0_NA ; CDXEngine::m_PitMode
	test	edx, edx
	je	SHORT $LN14@FlushObjec
	movzx	eax, BYTE PTR _WasInPitMode$[ebp]
	test	eax, eax
	jne	SHORT $LN14@FlushObjec

; 1537 : 			//START_PROFILE("3D PIT");
; 1538 : 			// enable stenciling in Write Mode
; 1539 : 			SetStencilMode(STENCIL_WRITE);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStencilMode@CDXEngine@@QAEKK@Z	; CDXEngine::SetStencilMode

; 1540 : 			// No Fog into the pit
; 1541 : 			float	Start = 5.0f;

	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR _Start$3[ebp], xmm0

; 1542 : 			m_pD3DD->SetRenderState(D3DRENDERSTATE_FOGSTART, *(DWORD*)&Start);

	mov	ecx, DWORD PTR _Start$3[ebp]
	push	ecx
	push	36					; 00000024H
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx
$LN14@FlushObjec:

; 1543 : 		}
; 1544 : 		// ok, just Exited Pit Mode
; 1545 : 		if(!m_PitMode && WasInPitMode){

	movzx	eax, BYTE PTR ?m_PitMode@CDXEngine@@0_NA ; CDXEngine::m_PitMode
	test	eax, eax
	jne	SHORT $LN13@FlushObjec
	movzx	ecx, BYTE PTR _WasInPitMode$[ebp]
	test	ecx, ecx
	je	SHORT $LN13@FlushObjec

; 1546 : 			// Save transformation State
; 1547 : 			D3DXMATRIX	OldState=AppliedState;

	mov	ecx, 16					; 00000010H
	mov	esi, OFFSET ?AppliedState@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::AppliedState
	lea	edi, DWORD PTR _OldState$1[ebp]
	rep movsd

; 1548 : 			// Immediatly draw Solid surfaces ( coming from Pit )
; 1549 : 			DrawSolidSurfaces();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawSolidSurfaces@CDXEngine@@AAEXXZ	; CDXEngine::DrawSolidSurfaces

; 1550 : 			AppliedState=OldState;

	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _OldState$1[ebp]
	mov	edi, OFFSET ?AppliedState@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::AppliedState
	rep movsd

; 1551 : 			// enable stenciling in Check Mode
; 1552 : 			SetStencilMode(STENCIL_CHECK);

	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStencilMode@CDXEngine@@QAEKK@Z	; CDXEngine::SetStencilMode

; 1553 : 			// Restore Fog
; 1554 : 			float	Start = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _Start$2[ebp], xmm0

; 1555 : 			m_pD3DD->SetRenderState(D3DRENDERSTATE_FOGSTART, *(DWORD*)&Start);

	mov	edx, DWORD PTR _Start$2[ebp]
	push	edx
	push	36					; 00000024H
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax
$LN13@FlushObjec:

; 1556 : 
; 1557 : 		}
; 1558 : 
; 1559 : 		WasInPitMode=m_PitMode;

	mov	cl, BYTE PTR ?m_PitMode@CDXEngine@@0_NA	; CDXEngine::m_PitMode
	mov	BYTE PTR _WasInPitMode$[ebp], cl

; 1560 : 
; 1561 : 		// The Stack For the State Transformations resetted
; 1562 : 		StateStackLevel=0;

	mov	DWORD PTR ?StateStackLevel@CDXEngine@@0KA, 0 ; CDXEngine::StateStackLevel

; 1563 : 
; 1564 : 		// Consistency Check
; 1565 : 		if(!objInst) continue;

	cmp	DWORD PTR _objInst$[ebp], 0
	jne	SHORT $LN12@FlushObjec
	jmp	$LN22@FlushObjec
$LN12@FlushObjec:

; 1566 : 		// assign for engine use
; 1567 : 		m_TheObjectInstance=objInst;

	mov	edx, DWORD PTR _objInst$[ebp]
	mov	DWORD PTR ?m_TheObjectInstance@CDXEngine@@0PAVObjectInstance@@A, edx ; CDXEngine::m_TheObjectInstance

; 1568 : 
; 1569 : 		// gets the pointer to the Model Vertex Buffer
; 1570 : 		TheVbManager.GetModelData(m_VB, LodID);

	mov	eax, DWORD PTR _LodID$[ebp]
	push	eax
	push	OFFSET ?m_VB@CDXEngine@@0UVBItemType@@A	; CDXEngine::m_VB
	mov	ecx, OFFSET ?TheVbManager@@3VCDXVbManager@@A ; TheVbManager
	call	?GetModelData@CDXVbManager@@QAEXAAUVBItemType@@K@Z ; CDXVbManager::GetModelData

; 1571 : 
; 1572 : 		// Consistency Check
; 1573 : 		if(!m_VB.Valid) continue;

	movzx	ecx, BYTE PTR ?m_VB@CDXEngine@@0UVBItemType@@A+40
	test	ecx, ecx
	jne	SHORT $LN11@FlushObjec
	jmp	$LN22@FlushObjec
$LN11@FlushObjec:

; 1574 : 		
; 1575 : #ifdef	STAT_DX_ENGINE
; 1576 : 		COUNT_PROFILE("*** DX Objects");
; 1577 : #endif
; 1578 : 		// Execute the Scripts 0 & 1 if existant
; 1579 : 		DXScriptVariableType *Script=((DxDbHeader*)m_VB.Root)->Scripts;

	mov	edx, DWORD PTR ?m_VB@CDXEngine@@0UVBItemType@@A+36
	add	edx, 32					; 00000020H
	mov	DWORD PTR _Script$7[ebp], edx

; 1580 : 		D3DVECTOR pos;
; 1581 : 		pos.x=AppliedState.m30; pos.y=AppliedState.m31; pos.z=AppliedState.m32;

	movss	xmm0, DWORD PTR ?AppliedState@CDXEngine@@0UD3DXMATRIX@@A+48
	movss	DWORD PTR _pos$8[ebp], xmm0
	movss	xmm0, DWORD PTR ?AppliedState@CDXEngine@@0UD3DXMATRIX@@A+52
	movss	DWORD PTR _pos$8[ebp+4], xmm0
	movss	xmm0, DWORD PTR ?AppliedState@CDXEngine@@0UD3DXMATRIX@@A+56
	movss	DWORD PTR _pos$8[ebp+8], xmm0

; 1582 : 		if(Script[0].Script) if(!DXScriptArray[Script[0].Script](&pos, objInst, Script[0].Arguments)) goto DrawSection;

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, DWORD PTR _Script$7[ebp]
	cmp	DWORD PTR [ecx+eax], 0
	je	SHORT $LN9@FlushObjec
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, DWORD PTR _Script$7[ebp]
	lea	ecx, DWORD PTR [eax+edx+4]
	push	ecx
	mov	edx, DWORD PTR _objInst$[ebp]
	push	edx
	lea	eax, DWORD PTR _pos$8[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, DWORD PTR _Script$7[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR ?DXScriptArray@@3PAP6A_NPAU_D3DVECTOR@@PAVObjectInstance@@PAK@ZA[eax*4]
	call	ecx
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN9@FlushObjec
	jmp	SHORT $LN8@FlushObjec
	jmp	SHORT $DrawSection$23
$LN9@FlushObjec:

; 1583 : 		if(Script[1].Script) (!DXScriptArray[Script[1].Script](&pos, objInst, Script[1].Arguments));

	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, DWORD PTR _Script$7[ebp]
	cmp	DWORD PTR [ecx+eax], 0
	je	SHORT $LN7@FlushObjec
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, DWORD PTR _Script$7[ebp]
	lea	ecx, DWORD PTR [eax+edx+4]
	push	ecx
	mov	edx, DWORD PTR _objInst$[ebp]
	push	edx
	lea	eax, DWORD PTR _pos$8[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _Script$7[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR ?DXScriptArray@@3PAP6A_NPAU_D3DVECTOR@@PAVObjectInstance@@PAK@ZA[eax*4]
	call	ecx
	add	esp, 12					; 0000000cH
$LN7@FlushObjec:
$LN8@FlushObjec:
$DrawSection$23:

; 1584 : DrawSection:
; 1585 : 
; 1586 : #ifndef	DEBUG_ENGINE
; 1587 : #ifdef	LIGHT_ENGINE_DEBUG
; 1588 : 		START_PROFILE("LIGHTS UPDATE TIME");
; 1589 : #endif
; 1590 : #endif
; 1591 : 
; 1592 : 		gDebugLodID=LodID;

	mov	edx, DWORD PTR _LodID$[ebp]
	mov	DWORD PTR ?gDebugLodID@@3KA, edx	; gDebugLodID

; 1593 : 		// Update the lights for the object
; 1594 : 		if(Lited) TheLightEngine.UpdateDynamicLights(LightOwner, &pos, objInst->Radius());

	movzx	eax, BYTE PTR _Lited$[ebp]
	test	eax, eax
	je	SHORT $LN6@FlushObjec
	mov	ecx, DWORD PTR _objInst$[ebp]
	call	?Radius@ObjectInstance@@QBEMXZ		; ObjectInstance::Radius
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _pos$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _LightOwner$[ebp]
	push	edx
	mov	ecx, OFFSET ?TheLightEngine@@3VCDXLight@@A ; TheLightEngine
	call	?UpdateDynamicLights@CDXLight@@QAEXKPAU_D3DVECTOR@@M@Z ; CDXLight::UpdateDynamicLights
$LN6@FlushObjec:

; 1595 : #ifndef	DEBUG_ENGINE
; 1596 : #ifdef	LIGHT_ENGINE_DEBUG
; 1597 : 		STOP_PROFILE("LIGHTS UPDATE TIME");
; 1598 : #endif
; 1599 : #endif
; 1600 : 
; 1601 : 
; 1602 : 		// Ok... transform the object
; 1603 : 		m_pD3DD->SetTransform( D3DTRANSFORMSTATE_WORLD, (LPD3DMATRIX)&AppliedState );

	push	OFFSET ?AppliedState@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::AppliedState
	push	1
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+44]
	call	eax

; 1604 : 		// Stup the Fog level fro this object
; 1605 : 		m_pD3DD->SetRenderState(D3DRENDERSTATE_FOGEND,   *(DWORD *)(&m_FogLevel));

	mov	ecx, DWORD PTR ?m_FogLevel@CDXEngine@@0MA
	push	ecx
	push	37					; 00000025H
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx

; 1606 : 
; 1607 : 
; 1608 : 		// Calculates the Texture Base Index in the Texture Bank
; 1609 : 		int	nTexsPerBank=m_VB.NTex/max(1,objInst->ParentObject->nTextureSets);

	mov	eax, DWORD PTR _objInst$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movsx	edx, WORD PTR [ecx+44]
	cmp	edx, 1
	jge	SHORT $LN19@FlushObjec
	mov	DWORD PTR tv194[ebp], 1
	jmp	SHORT $LN20@FlushObjec
$LN19@FlushObjec:
	mov	eax, DWORD PTR _objInst$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movsx	edx, WORD PTR [ecx+44]
	mov	DWORD PTR tv194[ebp], edx
$LN20@FlushObjec:
	mov	eax, DWORD PTR ?m_VB@CDXEngine@@0UVBItemType@@A+28
	xor	edx, edx
	div	DWORD PTR tv194[ebp]
	mov	DWORD PTR _nTexsPerBank$4[ebp], eax

; 1610 : 		DWORD *texOffset = m_VB.Texs + objInst->TextureSet * nTexsPerBank;

	mov	eax, DWORD PTR _objInst$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	imul	ecx, DWORD PTR _nTexsPerBank$4[ebp]
	mov	edx, DWORD PTR ?m_VB@CDXEngine@@0UVBItemType@@A+32
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _texOffset$5[ebp], eax

; 1611 : 
; 1612 : 		// Register each texture for the Model ( and load it if not available ) and setup local Textures List
; 1613 : 		for(int a=0; a<nTexsPerBank; a++) m_TexUsed[a]=*texOffset++;

	mov	DWORD PTR _a$6[ebp], 0
	jmp	SHORT $LN5@FlushObjec
$LN4@FlushObjec:
	mov	ecx, DWORD PTR _a$6[ebp]
	add	ecx, 1
	mov	DWORD PTR _a$6[ebp], ecx
$LN5@FlushObjec:
	mov	edx, DWORD PTR _a$6[ebp]
	cmp	edx, DWORD PTR _nTexsPerBank$4[ebp]
	jge	SHORT $LN3@FlushObjec
	mov	eax, DWORD PTR _a$6[ebp]
	mov	ecx, DWORD PTR _texOffset$5[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR ?m_TexUsed@CDXEngine@@0PAKA[eax*4], edx
	mov	eax, DWORD PTR _texOffset$5[ebp]
	add	eax, 4
	mov	DWORD PTR _texOffset$5[ebp], eax
	jmp	SHORT $LN4@FlushObjec
$LN3@FlushObjec:

; 1614 : 
; 1615 : 	//////////////////////// ********* HERE STARTS THE REAL NODES PARSING ***** ///////////////////////////////////
; 1616 : 	//                                                                                                           //
; 1617 : 	//                                                                                                           //
; 1618 : 	//                                                                                                           //
; 1619 : 	//                                                                                                           //
; 1620 : 	//	// Starting address
; 1621 : 		m_NODE.BYTE=(BYTE*)m_VB.Nodes;

	mov	ecx, DWORD PTR ?m_VB@CDXEngine@@0UVBItemType@@A+24
	mov	DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A, ecx ; CDXEngine::m_NODE
$LN2@FlushObjec:

; 1622 : 
; 1623 : 		// Till end of Model
; 1624 : 		while(m_NODE.HEAD->Type!=DX_MODELEND){

	mov	edx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	cmp	DWORD PTR [edx+8], 9
	je	SHORT $LN1@FlushObjec

; 1625 : 			// Draw the Node
; 1626 : 			DrawNode(objInst, LightOwner, LodID);

	mov	eax, DWORD PTR _LodID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _LightOwner$[ebp]
	push	ecx
	mov	edx, DWORD PTR _objInst$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawNode@CDXEngine@@AAEXPAVObjectInstance@@KK@Z ; CDXEngine::DrawNode

; 1627 : 			// Traverse the model
; 1628 : 			m_NODE.BYTE+=m_NODE.HEAD->dwNodeSize;

	mov	eax, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	mov	ecx, DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A ; CDXEngine::m_NODE
	add	ecx, DWORD PTR [eax]
	mov	DWORD PTR ?m_NODE@CDXEngine@@0TNodeScannerType@@A, ecx ; CDXEngine::m_NODE

; 1629 : 		}

	jmp	SHORT $LN2@FlushObjec
$LN1@FlushObjec:

; 1630 : 	//                                                                                                           //
; 1631 : 	//                                                                                                           //
; 1632 : 	//                                                                                                           //
; 1633 : 	//                                                                                                           //
; 1634 : 	//                                                                                                           //
; 1635 : 	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
; 1636 : 	}

	jmp	$LN22@FlushObjec
$LN15@FlushObjec:

; 1637 : 
; 1638 : 	//TheTextureBank.SetDeferredLoad(false);
; 1639 : }

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?FlushObjects@CDXEngine@@AAEXXZ ENDP			; CDXEngine::FlushObjects
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_unit$ = -68						; size = 64
_this$ = -4						; size = 4
?FlushInit@CDXEngine@@AAEXXZ PROC			; CDXEngine::FlushInit
; _this$ = ecx

; 1387 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 1388 : 	// if not yet created create the Zero Texture
; 1389 : 	if(!ZeroTex) CreateZeroTexture();

	cmp	DWORD PTR ?ZeroTex@CDXEngine@@0PAVTextureHandle@@A, 0 ; CDXEngine::ZeroTex
	jne	SHORT $LN1@FlushInit
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateZeroTexture@CDXEngine@@QAEXXZ	; CDXEngine::CreateZeroTexture
$LN1@FlushInit:

; 1390 : 
; 1391 : 	// Initialize the Default Material
; 1392 : 	m_pD3DD->SetMaterial(&TheMaterial);

	push	OFFSET ?TheMaterial@CDXEngine@@2U_D3DMATERIAL7@@A ; CDXEngine::TheMaterial
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+64]
	call	eax

; 1393 : 
; 1394 : 	D3DXMATRIX unit;

	lea	ecx, DWORD PTR _unit$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 1395 : 	D3DXMatrixIdentity(&unit);

	lea	ecx, DWORD PTR _unit$[ebp]
	push	ecx
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 1396 : 	m_pD3DD->SetTransform( D3DTRANSFORMSTATE_WORLD, (LPD3DMATRIX)&unit );

	lea	edx, DWORD PTR _unit$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+44]
	call	eax

; 1397 : 
; 1398 : 	// Initial zBias
; 1399 : 	m_pD3DD->SetRenderState( D3DRENDERSTATE_ZBIAS, DEFAULT_ZBIAS );

	push	0
	push	47					; 0000002fH
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 1400 : 	m_LastZBias=DEFAULT_ZBIAS;

	mov	DWORD PTR ?m_LastZBias@CDXEngine@@0KA, 0 ; CDXEngine::m_LastZBias

; 1401 : 	// Draw Mode
; 1402 : 	m_pD3DD->SetRenderState( D3DRENDERSTATE_FILLMODE, D3DFILL_SOLID );

	push	3
	push	8
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx

; 1403 :     // Light On
; 1404 : 	m_pD3DD->SetRenderState( D3DRENDERSTATE_LIGHTING, TRUE );

	push	1
	push	137					; 00000089H
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 1405 : 	// Culling
; 1406 : #ifndef	DEBUG_ENGINE	
; 1407 : 	m_pD3DD->SetRenderState( D3DRENDERSTATE_CULLMODE, D3DCULL_CW );

	push	2
	push	22					; 00000016H
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 1408 : #else
; 1409 : 	m_pD3DD->SetRenderState( D3DRENDERSTATE_CULLMODE, (m_bCullEnable)?D3DCULL_CW:D3DCULL_NONE );
; 1410 : #endif
; 1411 : 	// ZBuffering
; 1412 : 	m_pD3DD->SetRenderState( D3DRENDERSTATE_ZWRITEENABLE, TRUE );

	push	1
	push	14					; 0000000eH
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx

; 1413 : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_ZFUNC,D3DCMP_LESSEQUAL); 

	push	4
	push	23					; 00000017H
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 1414 : 	// **************************************
; 1415 : 
; 1416 : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE,FALSE);

	push	0
	push	27					; 0000001bH
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 1417 : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_SPECULARENABLE, TRUE );

	push	1
	push	29					; 0000001dH
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx

; 1418 : 
; 1419 : 	// Select the appropriate View Mode
; 1420 : 	SetViewMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetViewMode@CDXEngine@@AAEXXZ		; CDXEngine::SetViewMode

; 1421 : 	//Reset Features
; 1422 : 	ResetFeatures();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetFeatures@CDXEngine@@AAEXXZ	; CDXEngine::ResetFeatures

; 1423 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FlushInit@CDXEngine@@AAEXXZ ENDP			; CDXEngine::FlushInit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
;	COMDAT ?PopMatrix@CDXEngine@@AAEXPAUD3DXMATRIX@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
?PopMatrix@CDXEngine@@AAEXPAUD3DXMATRIX@@@Z PROC	; CDXEngine::PopMatrix, COMDAT
; _this$ = ecx

; 609  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 610  : 	if(StateStackLevel)	*p=StateStack[--StateStackLevel];

	cmp	DWORD PTR ?StateStackLevel@CDXEngine@@0KA, 0 ; CDXEngine::StateStackLevel
	je	SHORT $LN2@PopMatrix
	mov	eax, DWORD PTR ?StateStackLevel@CDXEngine@@0KA ; CDXEngine::StateStackLevel
	sub	eax, 1
	mov	DWORD PTR ?StateStackLevel@CDXEngine@@0KA, eax ; CDXEngine::StateStackLevel
	mov	esi, DWORD PTR ?StateStackLevel@CDXEngine@@0KA ; CDXEngine::StateStackLevel
	shl	esi, 6
	add	esi, OFFSET ?StateStack@CDXEngine@@0PAUD3DXMATRIX@@A ; CDXEngine::StateStack
	mov	ecx, 16					; 00000010H
	mov	edi, DWORD PTR _p$[ebp]
	rep movsd
$LN2@PopMatrix:

; 611  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?PopMatrix@CDXEngine@@AAEXPAUD3DXMATRIX@@@Z ENDP	; CDXEngine::PopMatrix
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
;	COMDAT ?PushMatrix@CDXEngine@@AAEXPAUD3DXMATRIX@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
?PushMatrix@CDXEngine@@AAEXPAUD3DXMATRIX@@@Z PROC	; CDXEngine::PushMatrix, COMDAT
; _this$ = ecx

; 602  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 603  : 	StateStack[StateStackLevel]=*p;

	mov	edi, DWORD PTR ?StateStackLevel@CDXEngine@@0KA ; CDXEngine::StateStackLevel
	shl	edi, 6
	add	edi, OFFSET ?StateStack@CDXEngine@@0PAUD3DXMATRIX@@A ; CDXEngine::StateStack
	mov	ecx, 16					; 00000010H
	mov	esi, DWORD PTR _p$[ebp]
	rep movsd

; 604  : 	StateStackLevel++;

	mov	eax, DWORD PTR ?StateStackLevel@CDXEngine@@0KA ; CDXEngine::StateStackLevel
	add	eax, 1
	mov	DWORD PTR ?StateStackLevel@CDXEngine@@0KA, eax ; CDXEngine::StateStackLevel

; 605  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?PushMatrix@CDXEngine@@AAEXPAUD3DXMATRIX@@@Z ENDP	; CDXEngine::PushMatrix
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Ambient$ = 8						; size = 4
_Diffuse$ = 12						; size = 4
_Specular$ = 16						; size = 4
?SetSunLight@CDXEngine@@QAEXMMM@Z PROC			; CDXEngine::SetSunLight
; _this$ = ecx

; 368  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 369  : 	TheSun.dcvAmbient.r=TheSunColour.r*Ambient;

	movss	xmm0, DWORD PTR ?TheSunColour@CDXEngine@@2U_D3DCOLORVALUE@@A
	mulss	xmm0, DWORD PTR _Ambient$[ebp]
	movss	DWORD PTR ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A+36, xmm0

; 370  : 	TheSun.dcvAmbient.g=TheSunColour.g*Ambient;

	movss	xmm0, DWORD PTR ?TheSunColour@CDXEngine@@2U_D3DCOLORVALUE@@A+4
	mulss	xmm0, DWORD PTR _Ambient$[ebp]
	movss	DWORD PTR ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A+40, xmm0

; 371  : 	TheSun.dcvAmbient.b=TheSunColour.b*Ambient;

	movss	xmm0, DWORD PTR ?TheSunColour@CDXEngine@@2U_D3DCOLORVALUE@@A+8
	mulss	xmm0, DWORD PTR _Ambient$[ebp]
	movss	DWORD PTR ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A+44, xmm0

; 372  : 
; 373  : 	TheSun.dcvDiffuse.r=TheSunColour.r*Diffuse;

	movss	xmm0, DWORD PTR ?TheSunColour@CDXEngine@@2U_D3DCOLORVALUE@@A
	mulss	xmm0, DWORD PTR _Diffuse$[ebp]
	movss	DWORD PTR ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A+4, xmm0

; 374  : 	TheSun.dcvDiffuse.g=TheSunColour.g*Diffuse;

	movss	xmm0, DWORD PTR ?TheSunColour@CDXEngine@@2U_D3DCOLORVALUE@@A+4
	mulss	xmm0, DWORD PTR _Diffuse$[ebp]
	movss	DWORD PTR ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A+8, xmm0

; 375  : 	TheSun.dcvDiffuse.b=TheSunColour.b*Diffuse;

	movss	xmm0, DWORD PTR ?TheSunColour@CDXEngine@@2U_D3DCOLORVALUE@@A+8
	mulss	xmm0, DWORD PTR _Diffuse$[ebp]
	movss	DWORD PTR ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A+12, xmm0

; 376  : 
; 377  : 	TheSun.dcvSpecular.r=TheSunColour.r*Specular;

	movss	xmm0, DWORD PTR ?TheSunColour@CDXEngine@@2U_D3DCOLORVALUE@@A
	mulss	xmm0, DWORD PTR _Specular$[ebp]
	movss	DWORD PTR ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A+20, xmm0

; 378  : 	TheSun.dcvSpecular.g=TheSunColour.g*Specular;

	movss	xmm0, DWORD PTR ?TheSunColour@CDXEngine@@2U_D3DCOLORVALUE@@A+4
	mulss	xmm0, DWORD PTR _Specular$[ebp]
	movss	DWORD PTR ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A+24, xmm0

; 379  : 	TheSun.dcvSpecular.b=TheSunColour.b*Specular;

	movss	xmm0, DWORD PTR ?TheSunColour@CDXEngine@@2U_D3DCOLORVALUE@@A+8
	mulss	xmm0, DWORD PTR _Specular$[ebp]
	movss	DWORD PTR ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A+28, xmm0

; 380  : 
; 381  : #ifndef	DEBUG_ENGINE
; 382  : 	TheTimeOfDay.GetLightDirection((Tpoint*)&LightDir);

	push	OFFSET ?LightDir@CDXEngine@@0U_D3DVECTOR@@A ; CDXEngine::LightDir
	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetLightDirection@CTimeOfDay@@QAEXPAUTpoint@@@Z ; CTimeOfDay::GetLightDirection

; 383  : 	LightDir.x = -LightDir.x ;

	movss	xmm0, DWORD PTR ?LightDir@CDXEngine@@0U_D3DVECTOR@@A
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR ?LightDir@CDXEngine@@0U_D3DVECTOR@@A, xmm0

; 384  : 	LightDir.y = -LightDir.y ;

	movss	xmm0, DWORD PTR ?LightDir@CDXEngine@@0U_D3DVECTOR@@A+4
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR ?LightDir@CDXEngine@@0U_D3DVECTOR@@A+4, xmm0

; 385  : 	LightDir.z = -LightDir.z ;

	movss	xmm0, DWORD PTR ?LightDir@CDXEngine@@0U_D3DVECTOR@@A+8
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR ?LightDir@CDXEngine@@0U_D3DVECTOR@@A+8, xmm0

; 386  : #endif
; 387  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetSunLight@CDXEngine@@QAEXMMM@Z ENDP			; CDXEngine::SetSunLight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_VB$ = -60						; size = 44
_this$ = -16						; size = 4
tv72 = -12						; size = 4
_texOffset$ = -8					; size = 4
_a$1 = -4						; size = 4
_ID$ = 8						; size = 4
?UnLoadTextures@CDXEngine@@QAEXK@Z PROC			; CDXEngine::UnLoadTextures
; _this$ = ecx

; 435  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	DWORD PTR _this$[ebp], ecx

; 436  : 
; 437  : 	// Fetch the VB Data of this Model
; 438  : 	VBItemType	VB;
; 439  : 
; 440  : 	TheVbManager.GetModelData(VB, ID);

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	lea	ecx, DWORD PTR _VB$[ebp]
	push	ecx
	mov	ecx, OFFSET ?TheVbManager@@3VCDXVbManager@@A ; TheVbManager
	call	?GetModelData@CDXVbManager@@QAEXAAUVBItemType@@K@Z ; CDXVbManager::GetModelData

; 441  : 
; 442  : 	// Consistency check
; 443  : 	if(!VB.Valid) return;

	movzx	edx, BYTE PTR _VB$[ebp+40]
	test	edx, edx
	jne	SHORT $LN4@UnLoadText
	jmp	SHORT $LN5@UnLoadText
$LN4@UnLoadText:

; 444  : 
; 445  : 	// Get the Textures Offsets
; 446  : 	DWORD *texOffset = VB.Texs;

	mov	eax, DWORD PTR _VB$[ebp+32]
	mov	DWORD PTR _texOffset$[ebp], eax

; 447  : 
; 448  : 
; 449  : 	// DeRegister each texture for the Model 
; 450  : 	for(DWORD a=0; a<VB.NTex; a++) TheTextureBank.Release(*texOffset++);

	mov	DWORD PTR _a$1[ebp], 0
	jmp	SHORT $LN3@UnLoadText
$LN2@UnLoadText:
	mov	ecx, DWORD PTR _a$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _a$1[ebp], ecx
$LN3@UnLoadText:
	mov	edx, DWORD PTR _a$1[ebp]
	cmp	edx, DWORD PTR _VB$[ebp+28]
	jae	SHORT $LN5@UnLoadText
	mov	eax, DWORD PTR _texOffset$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR tv72[ebp]
	push	edx
	call	?Release@TextureBankClass@@SAXH@Z	; TextureBankClass::Release
	add	esp, 4
	mov	eax, DWORD PTR _texOffset$[ebp]
	add	eax, 4
	mov	DWORD PTR _texOffset$[ebp], eax
	jmp	SHORT $LN2@UnLoadText
$LN5@UnLoadText:

; 451  : 
; 452  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?UnLoadTextures@CDXEngine@@QAEXK@Z ENDP			; CDXEngine::UnLoadTextures
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_VB$ = -60						; size = 44
_this$ = -16						; size = 4
tv70 = -12						; size = 4
_a$1 = -8						; size = 4
_texOffset$ = -4					; size = 4
_ID$ = 8						; size = 4
?LoadTextures@CDXEngine@@QAEXK@Z PROC			; CDXEngine::LoadTextures
; _this$ = ecx

; 407  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	DWORD PTR _this$[ebp], ecx

; 408  : 
; 409  : 	// Fetch the VB Data of this Model
; 410  : 	VBItemType	VB;
; 411  : 	TheVbManager.GetModelData(VB, ID);

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	lea	ecx, DWORD PTR _VB$[ebp]
	push	ecx
	mov	ecx, OFFSET ?TheVbManager@@3VCDXVbManager@@A ; TheVbManager
	call	?GetModelData@CDXVbManager@@QAEXAAUVBItemType@@K@Z ; CDXVbManager::GetModelData

; 412  : 
; 413  : 	gDebugLodID=ID;

	mov	edx, DWORD PTR _ID$[ebp]
	mov	DWORD PTR ?gDebugLodID@@3KA, edx	; gDebugLodID

; 414  : 
; 415  : 	// Get the Textures Offsets
; 416  : 	DWORD *texOffset = VB.Texs;

	mov	eax, DWORD PTR _VB$[ebp+32]
	mov	DWORD PTR _texOffset$[ebp], eax

; 417  : 
; 418  : 	// Register each texture for the Model ( and load it if not available ) and setup local Textures List
; 419  : 	for(DWORD a=0; a<VB.NTex; a++){

	mov	DWORD PTR _a$1[ebp], 0
	jmp	SHORT $LN3@LoadTextur
$LN2@LoadTextur:
	mov	ecx, DWORD PTR _a$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _a$1[ebp], ecx
$LN3@LoadTextur:
	mov	edx, DWORD PTR _a$1[ebp]
	cmp	edx, DWORD PTR _VB$[ebp+28]
	jae	SHORT $LN1@LoadTextur

; 420  : #ifndef	DEBUG_ENGINE	
; 421  : 		gDebugTextureID=*texOffset;

	mov	eax, DWORD PTR _texOffset$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR ?gDebugTextureID@@3KA, ecx	; gDebugTextureID

; 422  : #endif
; 423  : 		TheTextureBank.Reference(*texOffset++);

	mov	edx, DWORD PTR _texOffset$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv70[ebp], eax
	mov	ecx, DWORD PTR tv70[ebp]
	push	ecx
	call	?Reference@TextureBankClass@@SAXH@Z	; TextureBankClass::Reference
	add	esp, 4
	mov	edx, DWORD PTR _texOffset$[ebp]
	add	edx, 4
	mov	DWORD PTR _texOffset$[ebp], edx

; 424  : 	}

	jmp	SHORT $LN2@LoadTextur
$LN1@LoadTextur:

; 425  : 
; 426  : 	gDebugLodID=-1;

	mov	DWORD PTR ?gDebugLodID@@3KA, -1		; gDebugLodID

; 427  : #ifndef	DEBUG_ENGINE	
; 428  : 	gDebugTextureID=-1;

	mov	DWORD PTR ?gDebugTextureID@@3KA, -1	; gDebugTextureID

; 429  : #endif
; 430  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?LoadTextures@CDXEngine@@QAEXK@Z ENDP			; CDXEngine::LoadTextures
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RestoreState@CDXEngine@@QAEXXZ PROC			; CDXEngine::RestoreState
; _this$ = ecx

; 592  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 593  : 	if(m_StatesStackLevel){

	cmp	DWORD PTR ?m_StatesStackLevel@CDXEngine@@0KA, 0 ; CDXEngine::m_StatesStackLevel
	je	SHORT $LN2@RestoreSta

; 594  : 		m_RenderState = m_StatesStack[--m_StatesStackLevel].RenderState; 

	mov	eax, DWORD PTR ?m_StatesStackLevel@CDXEngine@@0KA ; CDXEngine::m_StatesStackLevel
	sub	eax, 1
	mov	DWORD PTR ?m_StatesStackLevel@CDXEngine@@0KA, eax ; CDXEngine::m_StatesStackLevel
	mov	ecx, DWORD PTR ?m_StatesStackLevel@CDXEngine@@0KA ; CDXEngine::m_StatesStackLevel
	mov	edx, DWORD PTR ?m_StatesStack@CDXEngine@@0PAUDX_StatesStackType@@A[ecx*4]
	mov	DWORD PTR ?m_RenderState@CDXEngine@@0W4DX_StateType@@A, edx ; CDXEngine::m_RenderState
	jmp	SHORT $LN3@RestoreSta
$LN2@RestoreSta:

; 595  : 	}
; 596  : 	else m_RenderState = DX_OTW;

	mov	DWORD PTR ?m_RenderState@CDXEngine@@0W4DX_StateType@@A, 0 ; CDXEngine::m_RenderState
$LN3@RestoreSta:

; 597  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RestoreState@CDXEngine@@QAEXXZ ENDP			; CDXEngine::RestoreState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SaveState@CDXEngine@@QAEXXZ PROC			; CDXEngine::SaveState
; _this$ = ecx

; 585  : {		

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		m_StatesStack[m_StatesStackLevel].RenderState = m_RenderState;

	mov	eax, DWORD PTR ?m_StatesStackLevel@CDXEngine@@0KA ; CDXEngine::m_StatesStackLevel
	mov	ecx, DWORD PTR ?m_RenderState@CDXEngine@@0W4DX_StateType@@A ; CDXEngine::m_RenderState
	mov	DWORD PTR ?m_StatesStack@CDXEngine@@0PAUDX_StatesStackType@@A[eax*4], ecx

; 587  : 		if(m_StatesStackLevel < DX_MAX_NESTED_STATES) m_StatesStackLevel++; 

	cmp	DWORD PTR ?m_StatesStackLevel@CDXEngine@@0KA, 128 ; CDXEngine::m_StatesStackLevel, 00000080H
	jae	SHORT $LN2@SaveState
	mov	edx, DWORD PTR ?m_StatesStackLevel@CDXEngine@@0KA ; CDXEngine::m_StatesStackLevel
	add	edx, 1
	mov	DWORD PTR ?m_StatesStackLevel@CDXEngine@@0KA, edx ; CDXEngine::m_StatesStackLevel
$LN2@SaveState:

; 588  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SaveState@CDXEngine@@QAEXXZ ENDP			; CDXEngine::SaveState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
_LastMode$ = -12					; size = 4
tv148 = -8						; size = 4
tv64 = -4						; size = 4
_Stencil$ = 8						; size = 4
?SetStencilMode@CDXEngine@@QAEKK@Z PROC			; CDXEngine::SetStencilMode
; _this$ = ecx

; 457  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 458  : 
; 459  : 	DWORD	LastMode=(DWORD)m_StencilMode;

	mov	eax, DWORD PTR ?m_StencilMode@CDXEngine@@0W4StencilModeType@@A ; CDXEngine::m_StencilMode
	mov	DWORD PTR _LastMode$[ebp], eax

; 460  : 	switch(Stencil){

	mov	ecx, DWORD PTR _Stencil$[ebp]
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN4@SetStencil
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN2@SetStencil
	cmp	DWORD PTR tv64[ebp], 3
	je	$LN1@SetStencil
	jmp	$LN5@SetStencil
$LN4@SetStencil:

; 461  : 
; 462  : 		case	STENCIL_OFF:		m_pD3DD->SetRenderState( D3DRENDERSTATE_STENCILFUNC, D3DCMP_ALWAYS);

	push	8
	push	56					; 00000038H
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx

; 463  : 									m_pD3DD->SetRenderState( D3DRENDERSTATE_STENCILPASS, D3DSTENCILOP_KEEP);

	push	1
	push	55					; 00000037H
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 464  : 									m_pD3DD->SetRenderState( D3DRENDERSTATE_STENCILENABLE, FALSE);

	push	0
	push	52					; 00000034H
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 465  : 									break;

	jmp	$LN5@SetStencil

; 466  : 
; 467  : 		case	STENCIL_ON:			break;

	jmp	$LN5@SetStencil
$LN2@SetStencil:

; 468  : 
; 469  : 		case	STENCIL_WRITE:		m_StencilRef++;

	mov	edx, DWORD PTR ?m_StencilRef@CDXEngine@@0KA ; CDXEngine::m_StencilRef
	add	edx, 1
	mov	DWORD PTR ?m_StencilRef@CDXEngine@@0KA, edx ; CDXEngine::m_StencilRef

; 470  : 									m_pD3DD->SetRenderState( D3DRENDERSTATE_STENCILFUNC, D3DCMP_ALWAYS );

	push	8
	push	56					; 00000038H
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 471  : 									m_pD3DD->SetRenderState( D3DRENDERSTATE_STENCILMASK, 0xffffffff);

	push	-1
	push	58					; 0000003aH
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 472  : 									m_pD3DD->SetRenderState( D3DRENDERSTATE_STENCILWRITEMASK, 0xffffffff);

	push	-1
	push	59					; 0000003bH
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx

; 473  : 									m_pD3DD->SetRenderState( D3DRENDERSTATE_STENCILREF, m_StencilRef);

	mov	eax, DWORD PTR ?m_StencilRef@CDXEngine@@0KA ; CDXEngine::m_StencilRef
	push	eax
	push	57					; 00000039H
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 474  : 									m_pD3DD->SetRenderState( D3DRENDERSTATE_STENCILPASS, D3DSTENCILOP_REPLACE);

	push	3
	push	55					; 00000037H
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx

; 475  : 									m_pD3DD->SetRenderState( D3DRENDERSTATE_STENCILENABLE, TRUE);

	push	1
	push	52					; 00000034H
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 476  : 									break;

	jmp	$LN5@SetStencil
$LN1@SetStencil:

; 477  : 									
; 478  : 		case	STENCIL_CHECK:		m_pD3DD->SetRenderState( D3DRENDERSTATE_STENCILFUNC, m_StencilRef?D3DCMP_GREATER:D3DCMP_ALWAYS );

	cmp	DWORD PTR ?m_StencilRef@CDXEngine@@0KA, 0 ; CDXEngine::m_StencilRef
	je	SHORT $LN9@SetStencil
	mov	DWORD PTR tv148[ebp], 5
	jmp	SHORT $LN10@SetStencil
$LN9@SetStencil:
	mov	DWORD PTR tv148[ebp], 8
$LN10@SetStencil:
	mov	ecx, DWORD PTR tv148[ebp]
	push	ecx
	push	56					; 00000038H
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx

; 479  : 									m_pD3DD->SetRenderState( D3DRENDERSTATE_STENCILMASK, 0xffffffff);

	push	-1
	push	58					; 0000003aH
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 480  : 									m_pD3DD->SetRenderState( D3DRENDERSTATE_STENCILWRITEMASK, 0xffffffff);

	push	-1
	push	59					; 0000003bH
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 481  : 									m_pD3DD->SetRenderState( D3DRENDERSTATE_STENCILREF, m_StencilRef);

	mov	edx, DWORD PTR ?m_StencilRef@CDXEngine@@0KA ; CDXEngine::m_StencilRef
	push	edx
	push	57					; 00000039H
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 482  : 									m_pD3DD->SetRenderState( D3DRENDERSTATE_STENCILPASS, D3DSTENCILOP_KEEP);

	push	1
	push	55					; 00000037H
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 483  : 									m_pD3DD->SetRenderState( D3DRENDERSTATE_STENCILENABLE, TRUE);

	push	1
	push	52					; 00000034H
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx
$LN5@SetStencil:

; 484  : 									break;
; 485  : 	}
; 486  : 	return LastMode;

	mov	eax, DWORD PTR _LastMode$[ebp]

; 487  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetStencilMode@CDXEngine@@QAEKK@Z ENDP			; CDXEngine::SetStencilMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_texID$ = 8						; size = 4
?SelectTexture@CDXEngine@@QAEXH@Z PROC			; CDXEngine::SelectTexture
; _this$ = ecx

; 200  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 201  : 	// eventually select other textures for NVG/TV
; 202  : 
; 203  : 	// get the Handle of the Texture from the Texture Bank
; 204  : 	texID=(texID!=-1)?TheTextureBank.GetHandle(texID):(GLint)ZeroTex;

	cmp	DWORD PTR _texID$[ebp], -1
	je	SHORT $LN5@SelectText
	mov	eax, DWORD PTR _texID$[ebp]
	push	eax
	call	?GetHandle@TextureBankClass@@SAKK@Z	; TextureBankClass::GetHandle
	add	esp, 4
	mov	DWORD PTR tv67[ebp], eax
	jmp	SHORT $LN6@SelectText
$LN5@SelectText:
	mov	ecx, DWORD PTR ?ZeroTex@CDXEngine@@0PAVTextureHandle@@A ; CDXEngine::ZeroTex
	mov	DWORD PTR tv67[ebp], ecx
$LN6@SelectText:
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _texID$[ebp], edx

; 205  : 	if(texID) texID = (GLint)((TextureHandle *)texID)->m_pDDS;

	cmp	DWORD PTR _texID$[ebp], 0
	je	SHORT $LN2@SelectText
	mov	eax, DWORD PTR _texID$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _texID$[ebp], ecx
$LN2@SelectText:

; 206  : 
; 207  : 	// only Texture on Stage 0 is needed for normal View
; 208  : 	if(m_RenderState == DX_OTW)	{

	cmp	DWORD PTR ?m_RenderState@CDXEngine@@0W4DX_StateType@@A, 0 ; CDXEngine::m_RenderState
	jne	SHORT $LN1@SelectText

; 209  : 		CheckHR(m_pD3DD->SetTexture(0,(IDirectDrawSurface7 *)texID));

	mov	edx, DWORD PTR _texID$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+140]
	call	eax
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 210  : 		return;

	jmp	SHORT $LN3@SelectText
$LN1@SelectText:

; 211  : 	}
; 212  : 	
; 213  : 	// if here, TV and NVG need othe texture stages setted
; 214  : 	CheckHR(m_pD3DD->SetTexture(1,(IDirectDrawSurface7 *)texID));

	mov	ecx, DWORD PTR _texID$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+140]
	call	edx
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 215  : 	CheckHR(m_pD3DD->SetTexture(3,(IDirectDrawSurface7 *)texID));

	mov	eax, DWORD PTR _texID$[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+140]
	call	ecx
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4
$LN3@SelectText:

; 216  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SelectTexture@CDXEngine@@QAEXH@Z ENDP			; CDXEngine::SelectTexture
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_ddbltfx$ = -164					; size = 100
_this$ = -64						; size = 4
$T2 = -60						; size = 4
$T3 = -56						; size = 4
tv71 = -52						; size = 4
_ddpf$ = -48						; size = 32
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?CreateZeroTexture@CDXEngine@@QAEXXZ PROC		; CDXEngine::CreateZeroTexture
; _this$ = ecx

; 331  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateZeroTexture@CDXEngine@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 152				; 00000098H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 332  : 	// Create the Zero Texture
; 333  : 	ZeroTex=new TextureHandle();

	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@CreateZero
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0TextureHandle@@QAE@XZ		; TextureHandle::TextureHandle
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@CreateZero
$LN3@CreateZero:
	mov	DWORD PTR tv71[ebp], 0
$LN4@CreateZero:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR ?ZeroTex@CDXEngine@@0PAVTextureHandle@@A, ecx ; CDXEngine::ZeroTex

; 334  : 	ZeroTex->Create("",0,32,64,64,TextureHandle::FLAG_MATCHPRIMARY);

	push	32					; 00000020H
	push	64					; 00000040H
	push	64					; 00000040H
	push	32					; 00000020H
	push	0
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR ?ZeroTex@CDXEngine@@0PAVTextureHandle@@A ; CDXEngine::ZeroTex
	call	?Create@TextureHandle@@QAE_NPADKGGGK@Z	; TextureHandle::Create

; 335  : 	
; 336  : 	DDPIXELFORMAT ddpf;
; 337  :     DDBLTFX ddbltfx; 
; 338  : 	ZeroTex->m_pDDS->GetPixelFormat(&ddpf);

	lea	edx, DWORD PTR _ddpf$[ebp]
	push	edx
	mov	eax, DWORD PTR ?ZeroTex@CDXEngine@@0PAVTextureHandle@@A ; CDXEngine::ZeroTex
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?ZeroTex@CDXEngine@@0PAVTextureHandle@@A ; CDXEngine::ZeroTex
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+84]
	call	edx

; 339  :     ddbltfx.dwSize = sizeof(ddbltfx); 

	mov	DWORD PTR _ddbltfx$[ebp], 100		; 00000064H

; 340  :     ddbltfx.dwFillColor = 0xffffffff; // Pure White

	mov	DWORD PTR _ddbltfx$[ebp+80], -1

; 341  :  
; 342  :     ZeroTex->m_pDDS->Blt( 
; 343  :         NULL,        // Destination is entire surface
; 344  :         NULL,        // No source surface
; 345  :         NULL,        // No source rectangle
; 346  :         DDBLT_COLORFILL, &ddbltfx); 

	lea	eax, DWORD PTR _ddbltfx$[ebp]
	push	eax
	push	1024					; 00000400H
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR ?ZeroTex@CDXEngine@@0PAVTextureHandle@@A ; CDXEngine::ZeroTex
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?ZeroTex@CDXEngine@@0PAVTextureHandle@@A ; CDXEngine::ZeroTex
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+20]
	call	eax

; 347  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateZeroTexture@CDXEngine@@QAEXXZ$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateZeroTexture@CDXEngine@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-156]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateZeroTexture@CDXEngine@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateZeroTexture@CDXEngine@@QAEXXZ ENDP		; CDXEngine::CreateZeroTexture
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
_FogLevel$ = 8						; size = 4
?SetFogLevel@CDXEngine@@QAEXM@Z PROC			; CDXEngine::SetFogLevel
; _this$ = ecx

; 173  : void CDXEngine::SetFogLevel(float FogLevel) {  m_FogLevel = m_LinearFog ? 1.0f: FogLevel; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR ?m_LinearFog@CDXEngine@@0_NA ; CDXEngine::m_LinearFog
	test	eax, eax
	je	SHORT $LN3@SetFogLeve
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv66[ebp], xmm0
	jmp	SHORT $LN4@SetFogLeve
$LN3@SetFogLeve:
	movss	xmm0, DWORD PTR _FogLevel$[ebp]
	movss	DWORD PTR tv66[ebp], xmm0
$LN4@SetFogLeve:
	movss	xmm0, DWORD PTR tv66[ebp]
	movss	DWORD PTR ?m_FogLevel@CDXEngine@@0MA, xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFogLevel@CDXEngine@@QAEXM@Z ENDP			; CDXEngine::SetFogLevel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_l$ = 8							; size = 4
_t$ = 12						; size = 4
_r$ = 16						; size = 4
_b$ = 20						; size = 4
?SetViewport@CDXEngine@@QAEXKKKK@Z PROC			; CDXEngine::SetViewport
; _this$ = ecx

; 225  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 226  : 	ViewPort.dwX=l;

	mov	eax, DWORD PTR _l$[ebp]
	mov	DWORD PTR ?ViewPort@CDXEngine@@0U_D3DVIEWPORT7@@A, eax

; 227  : 	ViewPort.dwY=t;

	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR ?ViewPort@CDXEngine@@0U_D3DVIEWPORT7@@A+4, ecx

; 228  : 	ViewPort.dwWidth=r-l;

	mov	edx, DWORD PTR _r$[ebp]
	sub	edx, DWORD PTR _l$[ebp]
	mov	DWORD PTR ?ViewPort@CDXEngine@@0U_D3DVIEWPORT7@@A+8, edx

; 229  : 	ViewPort.dwHeight=b-t;

	mov	eax, DWORD PTR _b$[ebp]
	sub	eax, DWORD PTR _t$[ebp]
	mov	DWORD PTR ?ViewPort@CDXEngine@@0U_D3DVIEWPORT7@@A+12, eax

; 230  : 	ViewPort.dvMinZ=0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?ViewPort@CDXEngine@@0U_D3DVIEWPORT7@@A+16, xmm0

; 231  : 	ViewPort.dvMaxZ=1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?ViewPort@CDXEngine@@0U_D3DVIEWPORT7@@A+20, xmm0

; 232  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetViewport@CDXEngine@@QAEXKKKK@Z ENDP			; CDXEngine::SetViewport
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Settings$ = 8						; size = 4
_Pos$ = 12						; size = 12
_BB$ = 24						; size = 4
?SetCamera@CDXEngine@@QAEXPAUD3DXMATRIX@@U_D3DVECTOR@@0@Z PROC ; CDXEngine::SetCamera
; _this$ = ecx

; 177  : {	

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 178  : 	CameraView=*Settings; 

	mov	ecx, 16					; 00000010H
	mov	esi, DWORD PTR _Settings$[ebp]
	mov	edi, OFFSET ?CameraView@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::CameraView
	rep movsd

; 179  : 	CameraPos=Pos; 

	mov	eax, DWORD PTR _Pos$[ebp]
	mov	DWORD PTR ?CameraPos@CDXEngine@@0U_D3DVECTOR@@A, eax
	mov	ecx, DWORD PTR _Pos$[ebp+4]
	mov	DWORD PTR ?CameraPos@CDXEngine@@0U_D3DVECTOR@@A+4, ecx
	mov	edx, DWORD PTR _Pos$[ebp+8]
	mov	DWORD PTR ?CameraPos@CDXEngine@@0U_D3DVECTOR@@A+8, edx

; 180  : #ifdef	EDIT_ENGINE
; 181  : 	CameraView.m30=CameraPos.x;
; 182  : 	CameraView.m31=CameraPos.y;
; 183  : 	CameraView.m32=CameraPos.z;
; 184  : #endif
; 185  : 	m_pD3DD->SetTransform( D3DTRANSFORMSTATE_VIEW, (LPD3DMATRIX)&CameraView );

	push	OFFSET ?CameraView@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::CameraView
	push	2
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+44]
	call	eax

; 186  : 	
; 187  : 	// The BB Stuff
; 188  : 	BBMatrix=*BB; 

	mov	ecx, 16					; 00000010H
	mov	esi, DWORD PTR _BB$[ebp]
	mov	edi, OFFSET ?BBMatrix@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::BBMatrix
	rep movsd

; 189  : 	BBCx[0].d3d.x=BB->m00, BBCx[0].d3d.y=BB->m10, BBCx[0].d3d.z=BB->m20, BBCx[0].d3d.Flags.Word=0;

	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, DWORD PTR _BB$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR ?BBCx@CDXEngine@@2PATXMMVector@@A[ecx], eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, DWORD PTR _BB$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR ?BBCx@CDXEngine@@2PATXMMVector@@A[ecx+4], eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, DWORD PTR _BB$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR ?BBCx@CDXEngine@@2PATXMMVector@@A[ecx+8], eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	DWORD PTR ?BBCx@CDXEngine@@2PATXMMVector@@A[ecx+12], 0

; 190  : 	BBCx[1].d3d.x=BB->m01, BBCx[1].d3d.y=BB->m11, BBCx[1].d3d.z=BB->m21, BBCx[1].d3d.Flags.Word=0;

	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, DWORD PTR _BB$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR ?BBCx@CDXEngine@@2PATXMMVector@@A[edx], ecx
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, DWORD PTR _BB$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR ?BBCx@CDXEngine@@2PATXMMVector@@A[edx+4], ecx
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, DWORD PTR _BB$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR ?BBCx@CDXEngine@@2PATXMMVector@@A[edx+8], ecx
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	DWORD PTR ?BBCx@CDXEngine@@2PATXMMVector@@A[edx+12], 0

; 191  : 	BBCx[2].d3d.x=BB->m02, BBCx[2].d3d.y=BB->m12, BBCx[2].d3d.z=BB->m22, BBCx[2].d3d.Flags.Word=0;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, DWORD PTR _BB$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR ?BBCx@CDXEngine@@2PATXMMVector@@A[eax], edx
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, DWORD PTR _BB$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR ?BBCx@CDXEngine@@2PATXMMVector@@A[eax+4], edx
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, DWORD PTR _BB$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR ?BBCx@CDXEngine@@2PATXMMVector@@A[eax+8], edx
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	DWORD PTR ?BBCx@CDXEngine@@2PATXMMVector@@A[eax+12], 0

; 192  : 
; 193  : 	// set the XMM Camera
; 194  : 	*((D3DVECTOR*)&XMMCamera.d3d)=Pos;

	mov	ecx, DWORD PTR _Pos$[ebp]
	mov	DWORD PTR ?XMMCamera@CDXEngine@@2TXMMVector@@A, ecx
	mov	edx, DWORD PTR _Pos$[ebp+4]
	mov	DWORD PTR ?XMMCamera@CDXEngine@@2TXMMVector@@A+4, edx
	mov	eax, DWORD PTR _Pos$[ebp+8]
	mov	DWORD PTR ?XMMCamera@CDXEngine@@2TXMMVector@@A+8, eax

; 195  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?SetCamera@CDXEngine@@QAEXPAUD3DXMATRIX@@U_D3DVECTOR@@0@Z ENDP ; CDXEngine::SetCamera
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
tv75 = -16						; size = 4
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?Release@CDXEngine@@QAEXXZ PROC				; CDXEngine::Release
; _this$ = ecx

; 353  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 354  : 	m_pD3DD->DeleteStateBlock(DxEngineStateHandle);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+164]
	call	edx

; 355  : 	// Release the 2D Engine items
; 356  : 	DX2D_Release();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DX2D_Release@CDXEngine@@AAEXXZ		; CDXEngine::DX2D_Release

; 357  : 	// Release the Zero Texture
; 358  : 	if(ZeroTex){

	cmp	DWORD PTR ?ZeroTex@CDXEngine@@0PAVTextureHandle@@A, 0 ; CDXEngine::ZeroTex
	je	SHORT $LN2@Release

; 359  : 		delete ZeroTex;

	mov	eax, DWORD PTR ?ZeroTex@CDXEngine@@0PAVTextureHandle@@A ; CDXEngine::ZeroTex
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN4@Release
	push	1
	mov	ecx, DWORD PTR $T2[ebp]
	call	??_GTextureHandle@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN5@Release
$LN4@Release:
	mov	DWORD PTR tv75[ebp], 0
$LN5@Release:

; 360  : 		ZeroTex=NULL;

	mov	DWORD PTR ?ZeroTex@CDXEngine@@0PAVTextureHandle@@A, 0 ; CDXEngine::ZeroTex
$LN2@Release:

; 361  : 	}
; 362  : 
; 363  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Release@CDXEngine@@QAEXXZ ENDP				; CDXEngine::Release
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pD3DD$ = 8						; size = 4
_pD3D$ = 12						; size = 4
_pDD$ = 16						; size = 4
?Setup@CDXEngine@@QAEXPAUIDirect3DDevice7@@PAUIDirect3D7@@PAUIDirectDraw7@@@Z PROC ; CDXEngine::Setup
; _this$ = ecx

; 237  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 238  : 	m_pD3DD=pD3DD;

	mov	eax, DWORD PTR _pD3DD$[ebp]
	mov	DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A, eax ; CDXEngine::m_pD3DD

; 239  : 	m_pD3D=pD3D;

	mov	ecx, DWORD PTR _pD3D$[ebp]
	mov	DWORD PTR ?m_pD3D@CDXEngine@@0PAUIDirect3D7@@A, ecx ; CDXEngine::m_pD3D

; 240  : 	m_pDD=pDD;

	mov	edx, DWORD PTR _pDD$[ebp]
	mov	DWORD PTR ?m_pDD@CDXEngine@@0PAUIDirectDraw7@@A, edx ; CDXEngine::m_pDD

; 241  : 	m_LastFlags.w=0;

	mov	DWORD PTR ?m_LastFlags@CDXEngine@@0TDXFlagsType@@A, 0 ; CDXEngine::m_LastFlags

; 242  : 	m_TexID=m_LastTexID=-1;

	mov	DWORD PTR ?m_LastTexID@CDXEngine@@0KA, -1 ; CDXEngine::m_LastTexID
	mov	eax, DWORD PTR ?m_LastTexID@CDXEngine@@0KA ; CDXEngine::m_LastTexID
	mov	DWORD PTR ?m_TexID@CDXEngine@@0KA, eax	; CDXEngine::m_TexID

; 243  : 	INIT_S_STACK(m_AlphaStack,MAX_ALPHA_SURFACES);

	mov	DWORD PTR ?m_AlphaStack@CDXEngine@@0USurfaceStackType@@A, 0
	mov	DWORD PTR ?m_AlphaStack@CDXEngine@@0USurfaceStackType@@A+4, 8192 ; 00002000H
	push	1540096					; 00178000H
	call	_malloc
	add	esp, 4
	mov	DWORD PTR ?m_AlphaStack@CDXEngine@@0USurfaceStackType@@A+8, eax

; 244  : 	INIT_S_STACK(m_SolidStack,MAX_SOLID_SURFACES);

	mov	DWORD PTR ?m_SolidStack@CDXEngine@@0USurfaceStackType@@A, 0
	mov	DWORD PTR ?m_SolidStack@CDXEngine@@0USurfaceStackType@@A+4, 32768 ; 00008000H
	push	6160384					; 005e0000H
	call	_malloc
	add	esp, 4
	mov	DWORD PTR ?m_SolidStack@CDXEngine@@0USurfaceStackType@@A+8, eax

; 245  : #ifdef	DEBUG_ENGINE	
; 246  : 	INIT_S_STACK(m_FrameStack,5000);
; 247  : #endif
; 248  : 	m_bCullEnable=true;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+20], 1

; 249  : 	m_bDofMove=false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+21], 0

; 250  : 	m_LastFlags.w=0;

	mov	DWORD PTR ?m_LastFlags@CDXEngine@@0TDXFlagsType@@A, 0 ; CDXEngine::m_LastFlags

; 251  : #ifdef	DEBUG_ENGINE	
; 252  : 	UseZBias=true;
; 253  : #endif
; 254  : 
; 255  : 	// Initializes the 2D Engine
; 256  : 	DX2D_Init();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DX2D_Init@CDXEngine@@AAEXXZ		; CDXEngine::DX2D_Init

; 257  : 
; 258  : 	// Initialize the Light engine
; 259  : 	TheLightEngine.Setup(pD3DD, pD3D);

	mov	eax, DWORD PTR _pD3D$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pD3DD$[ebp]
	push	ecx
	mov	ecx, OFFSET ?TheLightEngine@@3VCDXLight@@A ; TheLightEngine
	call	?Setup@CDXLight@@QAEXPAUIDirect3DDevice7@@PAUIDirect3D7@@@Z ; CDXLight::Setup

; 260  : 	
; 261  : 	ZeroMemory(&TheMaterial,sizeof(TheMaterial));

	push	68					; 00000044H
	push	0
	push	OFFSET ?TheMaterial@CDXEngine@@2U_D3DMATERIAL7@@A ; CDXEngine::TheMaterial
	call	_memset
	add	esp, 12					; 0000000cH

; 262  : 	TheMaterial.ambient.r=TheMaterial.ambient.g=TheMaterial.ambient.b=1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?TheMaterial@CDXEngine@@2U_D3DMATERIAL7@@A+24, xmm0
	movss	xmm0, DWORD PTR ?TheMaterial@CDXEngine@@2U_D3DMATERIAL7@@A+24
	movss	DWORD PTR ?TheMaterial@CDXEngine@@2U_D3DMATERIAL7@@A+20, xmm0
	movss	xmm0, DWORD PTR ?TheMaterial@CDXEngine@@2U_D3DMATERIAL7@@A+20
	movss	DWORD PTR ?TheMaterial@CDXEngine@@2U_D3DMATERIAL7@@A+16, xmm0

; 263  : 	TheMaterial.diffuse.r=TheMaterial.diffuse.g=TheMaterial.diffuse.b=1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?TheMaterial@CDXEngine@@2U_D3DMATERIAL7@@A+8, xmm0
	movss	xmm0, DWORD PTR ?TheMaterial@CDXEngine@@2U_D3DMATERIAL7@@A+8
	movss	DWORD PTR ?TheMaterial@CDXEngine@@2U_D3DMATERIAL7@@A+4, xmm0
	movss	xmm0, DWORD PTR ?TheMaterial@CDXEngine@@2U_D3DMATERIAL7@@A+4
	movss	DWORD PTR ?TheMaterial@CDXEngine@@2U_D3DMATERIAL7@@A, xmm0

; 264  : 	TheMaterial.specular.r=TheMaterial.specular.g=TheMaterial.specular.b=1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?TheMaterial@CDXEngine@@2U_D3DMATERIAL7@@A+40, xmm0
	movss	xmm0, DWORD PTR ?TheMaterial@CDXEngine@@2U_D3DMATERIAL7@@A+40
	movss	DWORD PTR ?TheMaterial@CDXEngine@@2U_D3DMATERIAL7@@A+36, xmm0
	movss	xmm0, DWORD PTR ?TheMaterial@CDXEngine@@2U_D3DMATERIAL7@@A+36
	movss	DWORD PTR ?TheMaterial@CDXEngine@@2U_D3DMATERIAL7@@A+32, xmm0

; 265  : 	TheMaterial.dvPower=6.8f;

	movss	xmm0, DWORD PTR __real@40d9999a
	movss	DWORD PTR ?TheMaterial@CDXEngine@@2U_D3DMATERIAL7@@A+64, xmm0

; 266  : 	
; 267  : /////////// Initializes the Environmental Light Object to DEFAULT VALUES ///////////////////////
; 268  : 	ZeroMemory(&TheSun, sizeof(TheSun));

	push	104					; 00000068H
	push	0
	push	OFFSET ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A ; CDXEngine::TheSun
	call	_memset
	add	esp, 12					; 0000000cH

; 269  :     TheSun.dltType = D3DLIGHT_DIRECTIONAL;

	mov	DWORD PTR ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A, 3

; 270  : 	TheSun.dcvAmbient.r=TheSun.dcvAmbient.g=TheSun.dcvAmbient.b=1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A+44, xmm0
	movss	xmm0, DWORD PTR ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A+44
	movss	DWORD PTR ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A+40, xmm0
	movss	xmm0, DWORD PTR ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A+40
	movss	DWORD PTR ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A+36, xmm0

; 271  : 	TheSun.dcvDiffuse.r=TheSun.dcvDiffuse.g=TheSun.dcvDiffuse.b=1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A+12, xmm0
	movss	xmm0, DWORD PTR ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A+12
	movss	DWORD PTR ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A+8, xmm0
	movss	xmm0, DWORD PTR ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A+8
	movss	DWORD PTR ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A+4, xmm0

; 272  : 	TheSun.dcvSpecular.r=TheSun.dcvSpecular.g=TheSun.dcvSpecular.b=1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A+28, xmm0
	movss	xmm0, DWORD PTR ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A+28
	movss	DWORD PTR ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A+24, xmm0
	movss	xmm0, DWORD PTR ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A+24
	movss	DWORD PTR ?TheSun@CDXEngine@@2U_D3DLIGHT7@@A+20, xmm0

; 273  : 	TheSunColour.r=TheSunColour.g=TheSunColour.b=1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?TheSunColour@CDXEngine@@2U_D3DCOLORVALUE@@A+8, xmm0
	movss	xmm0, DWORD PTR ?TheSunColour@CDXEngine@@2U_D3DCOLORVALUE@@A+8
	movss	DWORD PTR ?TheSunColour@CDXEngine@@2U_D3DCOLORVALUE@@A+4, xmm0
	movss	xmm0, DWORD PTR ?TheSunColour@CDXEngine@@2U_D3DCOLORVALUE@@A+4
	movss	DWORD PTR ?TheSunColour@CDXEngine@@2U_D3DCOLORVALUE@@A, xmm0

; 274  : ////////////////////////////////////////////////////////////////////////////////////////////////
; 275  : 
; 276  : //////////////////////////////// The NVG Mode used Light ///////////////////////////////////////
; 277  : 	ZeroMemory(&TheNVG, sizeof(TheNVG));

	push	104					; 00000068H
	push	0
	push	OFFSET ?TheNVG@CDXEngine@@2U_D3DLIGHT7@@A ; CDXEngine::TheNVG
	call	_memset
	add	esp, 12					; 0000000cH

; 278  :     TheNVG.dltType = D3DLIGHT_DIRECTIONAL;

	mov	DWORD PTR ?TheNVG@CDXEngine@@2U_D3DLIGHT7@@A, 3

; 279  : 	TheNVG.dcvAmbient.r=0.52f;

	movss	xmm0, DWORD PTR __real@3f051eb8
	movss	DWORD PTR ?TheNVG@CDXEngine@@2U_D3DLIGHT7@@A+36, xmm0

; 280  : 	TheNVG.dcvAmbient.g=0.52f;

	movss	xmm0, DWORD PTR __real@3f051eb8
	movss	DWORD PTR ?TheNVG@CDXEngine@@2U_D3DLIGHT7@@A+40, xmm0

; 281  : 	TheNVG.dcvAmbient.b=0.52f;

	movss	xmm0, DWORD PTR __real@3f051eb8
	movss	DWORD PTR ?TheNVG@CDXEngine@@2U_D3DLIGHT7@@A+44, xmm0

; 282  : 
; 283  : 	TheNVG.dcvDiffuse.r=0.04f;

	movss	xmm0, DWORD PTR __real@3d23d70a
	movss	DWORD PTR ?TheNVG@CDXEngine@@2U_D3DLIGHT7@@A+4, xmm0

; 284  : 	TheNVG.dcvDiffuse.g=0.04f;

	movss	xmm0, DWORD PTR __real@3d23d70a
	movss	DWORD PTR ?TheNVG@CDXEngine@@2U_D3DLIGHT7@@A+8, xmm0

; 285  : 	TheNVG.dcvDiffuse.b=0.04f;

	movss	xmm0, DWORD PTR __real@3d23d70a
	movss	DWORD PTR ?TheNVG@CDXEngine@@2U_D3DLIGHT7@@A+12, xmm0

; 286  : 
; 287  : 	TheNVG.dcvSpecular.r=0.05f;

	movss	xmm0, DWORD PTR __real@3d4ccccd
	movss	DWORD PTR ?TheNVG@CDXEngine@@2U_D3DLIGHT7@@A+20, xmm0

; 288  : 	TheNVG.dcvSpecular.g=0.05f;

	movss	xmm0, DWORD PTR __real@3d4ccccd
	movss	DWORD PTR ?TheNVG@CDXEngine@@2U_D3DLIGHT7@@A+24, xmm0

; 289  : 	TheNVG.dcvSpecular.b=0.05f;

	movss	xmm0, DWORD PTR __real@3d4ccccd
	movss	DWORD PTR ?TheNVG@CDXEngine@@2U_D3DLIGHT7@@A+28, xmm0

; 290  : 
; 291  : ////////////////////////////////////////////////////////////////////////////////////////////////
; 292  : 
; 293  : //////////////////////////////// The TV/IR Mode used Light ///////////////////////////////////////
; 294  : 	ZeroMemory(&TheTV, sizeof(TheTV));

	push	104					; 00000068H
	push	0
	push	OFFSET ?TheTV@CDXEngine@@2U_D3DLIGHT7@@A ; CDXEngine::TheTV
	call	_memset
	add	esp, 12					; 0000000cH

; 295  :     TheTV.dltType = D3DLIGHT_DIRECTIONAL;

	mov	DWORD PTR ?TheTV@CDXEngine@@2U_D3DLIGHT7@@A, 3

; 296  : 	TheTV.dcvAmbient.r=0.52f;

	movss	xmm0, DWORD PTR __real@3f051eb8
	movss	DWORD PTR ?TheTV@CDXEngine@@2U_D3DLIGHT7@@A+36, xmm0

; 297  : 	TheTV.dcvAmbient.g=0.52f;

	movss	xmm0, DWORD PTR __real@3f051eb8
	movss	DWORD PTR ?TheTV@CDXEngine@@2U_D3DLIGHT7@@A+40, xmm0

; 298  : 	TheTV.dcvAmbient.b=0.52f;

	movss	xmm0, DWORD PTR __real@3f051eb8
	movss	DWORD PTR ?TheTV@CDXEngine@@2U_D3DLIGHT7@@A+44, xmm0

; 299  : 
; 300  : 	TheTV.dcvDiffuse.r=0.04f;

	movss	xmm0, DWORD PTR __real@3d23d70a
	movss	DWORD PTR ?TheTV@CDXEngine@@2U_D3DLIGHT7@@A+4, xmm0

; 301  : 	TheTV.dcvDiffuse.g=0.04f;

	movss	xmm0, DWORD PTR __real@3d23d70a
	movss	DWORD PTR ?TheTV@CDXEngine@@2U_D3DLIGHT7@@A+8, xmm0

; 302  : 	TheTV.dcvDiffuse.b=0.04f;

	movss	xmm0, DWORD PTR __real@3d23d70a
	movss	DWORD PTR ?TheTV@CDXEngine@@2U_D3DLIGHT7@@A+12, xmm0

; 303  : 
; 304  : 	TheTV.dcvSpecular.r=0.05f;

	movss	xmm0, DWORD PTR __real@3d4ccccd
	movss	DWORD PTR ?TheTV@CDXEngine@@2U_D3DLIGHT7@@A+20, xmm0

; 305  : 	TheTV.dcvSpecular.g=0.05f;

	movss	xmm0, DWORD PTR __real@3d4ccccd
	movss	DWORD PTR ?TheTV@CDXEngine@@2U_D3DLIGHT7@@A+24, xmm0

; 306  : 	TheTV.dcvSpecular.b=0.05f;

	movss	xmm0, DWORD PTR __real@3d4ccccd
	movss	DWORD PTR ?TheTV@CDXEngine@@2U_D3DLIGHT7@@A+28, xmm0

; 307  : 
; 308  : ////////////////////////////////////////////////////////////////////////////////////////////////
; 309  : 
; 310  : 
; 311  : 	// No Light added for now...
; 312  : 	LightsNumber=0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6724], 0

; 313  : 
; 314  : #ifdef	EDIT_ENGINE	
; 315  : 	m_FrameDrawMode=false;
; 316  : 	m_ScriptsOn=false;
; 317  : #endif
; 318  : 
; 319  : 	// Store the SETUP STATE for the renderer
; 320  : 	//Thsi state has to be stored at D3DD creation phase
; 321  : 	StoreSetupState();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?StoreSetupState@CDXEngine@@AAEXXZ	; CDXEngine::StoreSetupState

; 322  : 	m_LinearFog = false;

	mov	BYTE PTR ?m_LinearFog@CDXEngine@@0_NA, 0 ; CDXEngine::m_LinearFog

; 323  : 
; 324  : 
; 325  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Setup@CDXEngine@@QAEXPAUIDirect3DDevice7@@PAUIDirect3D7@@PAUIDirectDraw7@@@Z ENDP ; CDXEngine::Setup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
$T1 = -288						; size = 12
_State$ = -276						; size = 64
_Scale$ = -212						; size = 64
_MaxLODRange$ = -148					; size = 4
tv553 = -144						; size = 8
tv541 = -136						; size = 8
_LODused$ = -128					; size = 4
tv404 = -124						; size = 4
tv527 = -120						; size = 4
_ClipResult$2 = -116					; size = 4
_r$3 = -112						; size = 4
tv331 = -108						; size = 4
tv514 = -104						; size = 4
_FogLevel$4 = -100					; size = 4
_Color$5 = -96						; size = 4
tv419 = -92						; size = 4
tv240 = -88						; size = 4
tv225 = -84						; size = 4
_Op$6 = -80						; size = 12
tv538 = -68						; size = 4
tv291 = -64						; size = 4
tv550 = -60						; size = 4
_LightsNr$7 = -56					; size = 4
_CurrentLOD$ = -52					; size = 4
_Liter$ = -48						; size = 4
_LODRange$ = -44					; size = 4
_Light$8 = -40						; size = 4
_this$ = -36						; size = 4
tv317 = -29						; size = 1
_Model$ = -28						; size = 4
_Visible$ = -21						; size = 1
_Si$9 = -20						; size = 4
_p$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_objInst$ = 8						; size = 4
_RotMatrix$ = 12					; size = 4
_Pos$ = 16						; size = 4
_sx$ = 20						; size = 4
_sy$ = 24						; size = 4
_sz$ = 28						; size = 4
_scale$ = 32						; size = 4
_CameraSpace$ = 36					; size = 1
_LightOwner$ = 40					; size = 4
?DrawObject@CDXEngine@@QAEXPAVObjectInstance@@PAUD3DXMATRIX@@PBUTpoint@@MMMM_NK@Z PROC ; CDXEngine::DrawObject
; _this$ = ecx

; 1186 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1187 : 	D3DXMATRIX	Scale, State;

	lea	ecx, DWORD PTR _Scale$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	lea	ecx, DWORD PTR _State$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 1188 : 	D3DVECTOR	p;
; 1189 : 	bool		Visible=false;

	mov	BYTE PTR _Visible$[ebp], 0

; 1190 : 	DWORD		Liter = 0; // Pu239 Initilize it!

	mov	DWORD PTR _Liter$[ebp], 0

; 1191 : 	DxDbHeader	*Model;
; 1192 : 
; 1193 : #ifdef	DEBUG_LOD_ID
; 1194 : 	// Debug pahse of LODs, clear any label
; 1195 : 	LodLabel[0]=0;
; 1196 : #endif;
; 1197 : 
; 1198 : 	// Consistency Check
; 1199 : 	if(!objInst->ParentObject) 

	mov	eax, DWORD PTR _objInst$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN29@DrawObject

; 1200 : 		return;

	jmp	$LN30@DrawObject
$LN29@DrawObject:

; 1201 : 
; 1202 : #ifndef	DEBUG_ENGINE
; 1203 : 	// Consistency Check
; 1204 : 	if (objInst->id < 0 || objInst->id >= TheObjectListLength || objInst->TextureSet < 0) 

	mov	ecx, DWORD PTR _objInst$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	jl	SHORT $LN27@DrawObject
	mov	edx, DWORD PTR _objInst$[ebp]
	mov	eax, DWORD PTR [edx+20]
	cmp	eax, DWORD PTR ?TheObjectListLength@@3HA ; TheObjectListLength
	jge	SHORT $LN27@DrawObject
	mov	ecx, DWORD PTR _objInst$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	jge	SHORT $LN28@DrawObject
$LN27@DrawObject:

; 1205 : 		return;

	jmp	$LN30@DrawObject
$LN28@DrawObject:

; 1206 : #endif
; 1207 : 
; 1208 : 	// if BLIT RADAR MODE, got to draw and return
; 1209 : 	if(m_RenderState == DX_DBS) { DrawBlip(objInst, RotMatrix, Pos, sx, sy, sz, scale, CameraSpace); return; }

	cmp	DWORD PTR ?m_RenderState@CDXEngine@@0W4DX_StateType@@A, 3 ; CDXEngine::m_RenderState
	jne	SHORT $LN26@DrawObject
	movzx	edx, BYTE PTR _CameraSpace$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _sz$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _sy$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _sx$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _Pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _RotMatrix$[ebp]
	push	ecx
	mov	edx, DWORD PTR _objInst$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawBlip@CDXEngine@@QAEXPAVObjectInstance@@PAUD3DXMATRIX@@PBUTpoint@@MMMM_N@Z ; CDXEngine::DrawBlip
	jmp	$LN30@DrawObject
$LN26@DrawObject:

; 1210 : 
; 1211 : 
; 1212 : 	// The object position is always calculated relative to the camera position
; 1213 : 	// if coming from out world, if IN CAMERA SPACE, position is already relative to camera,
; 1214 : 	// and even visibility is skipped
; 1215 : 	if(CameraSpace){

	movzx	eax, BYTE PTR _CameraSpace$[ebp]
	test	eax, eax
	je	SHORT $LN25@DrawObject

; 1216 : 		p.x = Pos->x;

	mov	ecx, DWORD PTR _Pos$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR _p$[ebp], xmm0

; 1217 : 		p.y = Pos->y;

	mov	edx, DWORD PTR _Pos$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR _p$[ebp+4], xmm0

; 1218 : 		p.z = Pos->z;

	mov	eax, DWORD PTR _Pos$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _p$[ebp+8], xmm0

; 1219 : 		State=*RotMatrix;

	mov	ecx, 16					; 00000010H
	mov	esi, DWORD PTR _RotMatrix$[ebp]
	lea	edi, DWORD PTR _State$[ebp]
	rep movsd

; 1220 : 		Visible=true;

	mov	BYTE PTR _Visible$[ebp], 1

; 1221 : 	} else {

	jmp	SHORT $LN24@DrawObject
$LN25@DrawObject:

; 1222 : 		p.x = -CameraPos.x + Pos->x;

	movss	xmm0, DWORD PTR ?CameraPos@CDXEngine@@0U_D3DVECTOR@@A
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _Pos$[ebp]
	addss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR _p$[ebp], xmm0

; 1223 : 		p.y = -CameraPos.y + Pos->y;

	movss	xmm0, DWORD PTR ?CameraPos@CDXEngine@@0U_D3DVECTOR@@A+4
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _Pos$[ebp]
	addss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR _p$[ebp+4], xmm0

; 1224 : 		p.z = -CameraPos.z + Pos->z;

	movss	xmm0, DWORD PTR ?CameraPos@CDXEngine@@0U_D3DVECTOR@@A+8
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _Pos$[ebp]
	addss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _p$[ebp+8], xmm0
$LN24@DrawObject:

; 1225 : 	}
; 1226 : 
; 1227 : 
; 1228 : 	// NEW TEXTURE MANAGEMENT
; 1229 : 	// if Textures not referenced, refernce them
; 1230 : #ifndef	DEBUG_ENGINE
; 1231 : 	if(!objInst->TexSetReferenced) {

	mov	ecx, DWORD PTR _objInst$[ebp]
	movzx	edx, BYTE PTR [ecx+24]
	test	edx, edx
	jne	SHORT $LN23@DrawObject

; 1232 : 		objInst->ParentObject->ReferenceTexSet(objInst->TextureSet);

	push	0
	mov	eax, DWORD PTR _objInst$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _objInst$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?ReferenceTexSet@ObjectParent@@QAEXKK@Z	; ObjectParent::ReferenceTexSet

; 1233 : 		objInst->TexSetReferenced=true;

	mov	eax, DWORD PTR _objInst$[ebp]
	mov	BYTE PTR [eax+24], 1
$LN23@DrawObject:

; 1234 : 	}
; 1235 : #endif
; 1236 : 	///////////////////////////////// CHECK FOR AVAILABLE LOD ///////////////////////////////////////
; 1237 : 	// get the object distance
; 1238 : 	float	LODRange=sqrtf(p.x*p.x+p.y*p.y+p.z*p.z) * m_LODBiasCx;

	movss	xmm0, DWORD PTR _p$[ebp]
	mulss	xmm0, DWORD PTR _p$[ebp]
	movss	xmm1, DWORD PTR _p$[ebp+4]
	mulss	xmm1, DWORD PTR _p$[ebp+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _p$[ebp+8]
	mulss	xmm1, DWORD PTR _p$[ebp+8]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv404[ebp]
	movss	xmm0, DWORD PTR tv404[ebp]
	mulss	xmm0, DWORD PTR ?m_LODBiasCx@CDXEngine@@0MA
	movss	DWORD PTR _LODRange$[ebp], xmm0

; 1239 : 	// The model pointer
; 1240 : 	ObjectLOD *CurrentLOD=NULL;

	mov	DWORD PTR _CurrentLOD$[ebp], 0

; 1241 : 	// Calculate the LOD based on FOV
; 1242 : 	float	MaxLODRange; int LODused;
; 1243 : 	CurrentLOD = objInst->ParentObject->ChooseLOD(LODRange , &LODused, &MaxLODRange);

	lea	ecx, DWORD PTR _MaxLODRange$[ebp]
	push	ecx
	lea	edx, DWORD PTR _LODused$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _LODRange$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _objInst$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?ChooseLOD@ObjectParent@@QAEPAVObjectLOD@@MPAHPAM@Z ; ObjectParent::ChooseLOD
	mov	DWORD PTR _CurrentLOD$[ebp], eax

; 1244 : 	// if not a lod persent, end here
; 1245 : 	if(!CurrentLOD) return;

	cmp	DWORD PTR _CurrentLOD$[ebp], 0
	jne	SHORT $LN22@DrawObject
	jmp	$LN30@DrawObject
$LN22@DrawObject:

; 1246 : 	// ok assign The Model
; 1247 : 	Model=(DxDbHeader*)CurrentLOD->root;

	mov	ecx, DWORD PTR _CurrentLOD$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _Model$[ebp], edx

; 1248 : 	// FRB - Filter out bad/nonexistant models
; 1249 : 	if ((Model->Id <= 0) || (Model->Id >= (unsigned int)  TheObjectLODsCount))

	mov	eax, DWORD PTR _Model$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jbe	SHORT $LN20@DrawObject
	mov	ecx, DWORD PTR _Model$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR ?TheObjectLODsCount@@3HA	; TheObjectLODsCount
	jb	SHORT $LN21@DrawObject
$LN20@DrawObject:

; 1250 : 		return;

	jmp	$LN30@DrawObject
$LN21@DrawObject:

; 1251 : 
; 1252 : 	///////////////////////////////// HERE CHECK FOR VISIBILITY /////////////////////////////////////
; 1253 : 	// Camera Spacce objects are always visible
; 1254 : 	if(!CameraSpace){

	movzx	eax, BYTE PTR _CameraSpace$[ebp]
	test	eax, eax
	jne	$LN19@DrawObject

; 1255 : #ifndef	DEBUG_ENGINE
; 1256 : 		// Compute the object visibility -  Return if Clipped out
; 1257 : 		D3DVALUE r=(D3DVALUE)(objInst->Radius() * scale);

	mov	ecx, DWORD PTR _objInst$[ebp]
	call	?Radius@ObjectInstance@@QBEMXZ		; ObjectInstance::Radius
	fstp	DWORD PTR tv419[ebp]
	movss	xmm0, DWORD PTR tv419[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR _r$3[ebp], xmm0

; 1258 : 		DWORD	ClipResult;
; 1259 : 		m_pD3DD->ComputeSphereVisibility(&p, &r, 1, 0, &ClipResult);

	lea	ecx, DWORD PTR _ClipResult$2[ebp]
	push	ecx
	push	0
	push	1
	lea	edx, DWORD PTR _r$3[ebp]
	push	edx
	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+132]
	call	ecx

; 1260 : 		// if Visible assert it, if not visible got to check for Lights
; 1261 : 		if(ClipResult&D3DSTATUS_DEFAULT) goto LightCheck;

	mov	edx, DWORD PTR _ClipResult$2[ebp]
	and	edx, 33550336				; 01fff000H
	je	SHORT $LN18@DrawObject
	jmp	$LN17@DrawObject
	jmp	$LightCheck$38
$LN18@DrawObject:

; 1262 : 		Visible=true;

	mov	BYTE PTR _Visible$[ebp], 1

; 1263 : 
; 1264 : 		// ************ ADD Other Features ***********
; 1265 : 		D3DXMatrixIdentity(&Scale);

	lea	eax, DWORD PTR _Scale$[ebp]
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 1266 : 		Scale.m00=scale*sx;

	movss	xmm0, DWORD PTR _scale$[ebp]
	mulss	xmm0, DWORD PTR _sx$[ebp]
	movss	DWORD PTR _Scale$[ebp], xmm0

; 1267 : 		Scale.m11=scale*sy;

	movss	xmm0, DWORD PTR _scale$[ebp]
	mulss	xmm0, DWORD PTR _sy$[ebp]
	movss	DWORD PTR _Scale$[ebp+20], xmm0

; 1268 : 		Scale.m22=scale*sz;

	movss	xmm0, DWORD PTR _scale$[ebp]
	mulss	xmm0, DWORD PTR _sz$[ebp]
	movss	DWORD PTR _Scale$[ebp+40], xmm0

; 1269 : 		D3DXMatrixMultiply(&State, RotMatrix, &Scale);

	lea	ecx, DWORD PTR _Scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _RotMatrix$[ebp]
	push	edx
	lea	eax, DWORD PTR _State$[ebp]
	push	eax
	call	_D3DXMatrixMultiply@12

; 1270 : 		// *******************************************
; 1271 : #else 
; 1272 : 		State=*RotMatrix;
; 1273 : #endif
; 1274 : 		
; 1275 : 		// *********** Base transformations **********
; 1276 : 		D3DXMatrixTranslation(&Scale, p.x, p.y, p.z);

	push	ecx
	movss	xmm0, DWORD PTR _p$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _p$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _p$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _Scale$[ebp]
	push	ecx
	call	_D3DXMatrixTranslation@16

; 1277 : 		D3DXMatrixMultiply(&State, &State, &Scale );

	lea	edx, DWORD PTR _Scale$[ebp]
	push	edx
	lea	eax, DWORD PTR _State$[ebp]
	push	eax
	lea	ecx, DWORD PTR _State$[ebp]
	push	ecx
	call	_D3DXMatrixMultiply@12
$LN19@DrawObject:

; 1278 : 		// *******************************************
; 1279 : 	
; 1280 : 	}
; 1281 : 
; 1282 : 	// check if child enlighted
; 1283 : 	if(LightOwner!=NULL) Liter=LightOwner;

	cmp	DWORD PTR _LightOwner$[ebp], 0
	je	SHORT $LN16@DrawObject
	mov	edx, DWORD PTR _LightOwner$[ebp]
	mov	DWORD PTR _Liter$[ebp], edx
	jmp	SHORT $LN15@DrawObject
$LN16@DrawObject:

; 1284 : 	else { if(!++LightID) LightID++; Liter=LightID; }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+6728]
	add	ecx, 1
	mov	DWORD PTR tv225[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv225[ebp]
	mov	DWORD PTR [edx+6728], eax
	cmp	DWORD PTR tv225[ebp], 0
	jne	SHORT $LN14@DrawObject
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+6728]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6728], edx
$LN14@DrawObject:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+6728]
	mov	DWORD PTR _Liter$[ebp], edx
$LN15@DrawObject:

; 1285 : 
; 1286 : 	// Pass the object to the vertex Buffer
; 1287 : #ifdef	DEBUG_ENGINE
; 1288 : 	VBItemType	VB;
; 1289 : 	TheVbManager.AddDrawRequest(objInst, objInst->id, &State, true, Liter);
; 1290 : 		TheVbManager.GetModelData(VB, objInst->id);
; 1291 : 		if(((DxDbHeader*)VB.Root)->dwLightsNr){
; 1292 : 			DXLightType *Light=(DXLightType*)(VB.Root+((DxDbHeader*)VB.Root)->pLightsPool);
; 1293 : 			DWORD	LightsNr=((DxDbHeader*)VB.Root)->dwLightsNr;
; 1294 : 			while(LightsNr--){
; 1295 : 				if(objInst->SwitchValues[Light->Switch] & Light->SwitchMask) TheLightEngine.AddDynamicLight(Liter, Light, RotMatrix, &p, 100);
; 1296 : 				Light++;
; 1297 : 			}
; 1298 : 		}
; 1299 : 
; 1300 : #else
; 1301 : 
; 1302 : 	////////////////////////// HERE ONLY IF VISIBLE OR TO TEST FOR LIGHTS \\\\\\\\\\\\\\\\\\\\\\\\\\\\\
; 1303 : 
; 1304 : 		//COUNT_PROFILE("DRAWN OBJECTS");
; 1305 : 		// if object is visible and requested to draw ( may be also only add lights ) draw it
; 1306 : 		if(Visible){

	movzx	eax, BYTE PTR _Visible$[ebp]
	test	eax, eax
	je	$LN6@DrawObject

; 1307 : 
; 1308 : #ifdef	DEBUG_LOD_ID			
; 1309 : 			strcpy(LodLabel, TheLODNames[Model->Id]);
; 1310 : #endif
; 1311 : 			// FOG CALCULATION
; 1312 : 			// We r calculating the max range That should be valid for the LINEAR FOR MODE
; 1313 : 			// to have m_FogLevel level at LODRange distance...
; 1314 : 			float	FogLevel=(m_FogLevel<1.0f)?LODRange/((1-m_FogLevel)*m_LODBiasCx) : m_LinearFogLevel;

	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR ?m_FogLevel@CDXEngine@@0MA
	jbe	SHORT $LN32@DrawObject
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR ?m_FogLevel@CDXEngine@@0MA
	mulss	xmm0, DWORD PTR ?m_LODBiasCx@CDXEngine@@0MA
	movss	xmm1, DWORD PTR _LODRange$[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR tv240[ebp], xmm1
	jmp	SHORT $LN33@DrawObject
$LN32@DrawObject:
	movss	xmm0, DWORD PTR ?m_LinearFogLevel@CDXEngine@@0MA
	movss	DWORD PTR tv240[ebp], xmm0
$LN33@DrawObject:
	movss	xmm0, DWORD PTR tv240[ebp]
	movss	DWORD PTR _FogLevel$4[ebp], xmm0

; 1315 : 
; 1316 : 			// if just a DOT the draw it as dynamic item
; 1317 : 			if(Model->dwNVertices==1){

	mov	ecx, DWORD PTR _Model$[ebp]
	cmp	DWORD PTR [ecx+16], 1
	jne	$LN12@DrawObject

; 1318 : 				//Calculate Specularness based on sunlight direction
; 1319 : 				float	Si;
; 1320 : 				D3DXVECTOR3	Op;

	lea	ecx, DWORD PTR _Op$6[ebp]
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3

; 1321 : 				D3DXVec3Normalize(&Op, (D3DXVECTOR3*)&p);

	lea	edx, DWORD PTR _p$[ebp]
	push	edx
	lea	eax, DWORD PTR _Op$6[ebp]
	push	eax
	call	_D3DXVec3Normalize@8

; 1322 : 				// 
; 1323 : 				Op = Op - *(D3DXVECTOR3*)&LightDir;

	push	OFFSET ?LightDir@CDXEngine@@0U_D3DVECTOR@@A ; CDXEngine::LightDir
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	lea	ecx, DWORD PTR _Op$6[ebp]
	call	??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z		; D3DXVECTOR3::operator-
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _Op$6[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _Op$6[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _Op$6[ebp+8], edx

; 1324 : 			/*	Op = Op * Op;*/
; 1325 : 				Si= 2.0f - ( Op.x + Op.y + Op.z );

	movss	xmm0, DWORD PTR _Op$6[ebp]
	addss	xmm0, DWORD PTR _Op$6[ebp+4]
	addss	xmm0, DWORD PTR _Op$6[ebp+8]
	movss	xmm1, DWORD PTR __real@40000000
	subss	xmm1, xmm0
	movss	DWORD PTR _Si$9[ebp], xmm1

; 1326 : 
; 1327 : 				// Ok, this is a HACK I do not like... seems nothing at render level lets u understand what kind of object u r going to render
; 1328 : 				// only clue is fron DXM model header, that has a Class Air/Ground/Feature index...
; 1329 : 				// hoping it is updated...
; 1330 : 
; 1331 : 				// * Any class not air/ground get a normal draw
; 1332 : 				if(Model->VBClass!=VB_CLASS_DOMAIN_GROUND && Model->VBClass!=VB_CLASS_DOMAIN_AIR) Si=0.2f;

	mov	eax, DWORD PTR _Model$[ebp]
	cmp	DWORD PTR [eax+8], 2
	je	SHORT $LN11@DrawObject
	mov	ecx, DWORD PTR _Model$[ebp]
	cmp	DWORD PTR [ecx+8], 4
	je	SHORT $LN11@DrawObject
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _Si$9[ebp], xmm0
$LN11@DrawObject:

; 1333 : 
; 1334 : 				// Ground vehicles, hi Q reflection index
; 1335 : 				if(Model->VBClass==VB_CLASS_DOMAIN_GROUND){

	mov	edx, DWORD PTR _Model$[ebp]
	cmp	DWORD PTR [edx+8], 2
	jne	SHORT $LN9@DrawObject

; 1336 : 					Si *= Si * ( 1 - PRANDFloatPos() * 0.1f);

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv514[ebp]
	movss	xmm0, DWORD PTR tv514[ebp]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _Si$9[ebp]
	mulss	xmm1, DWORD PTR _Si$9[ebp]
	movss	DWORD PTR _Si$9[ebp], xmm1

; 1337 : 					Si *= Si;

	movss	xmm0, DWORD PTR _Si$9[ebp]
	mulss	xmm0, DWORD PTR _Si$9[ebp]
	movss	DWORD PTR _Si$9[ebp], xmm0

; 1338 : 					Si *= Si;

	movss	xmm0, DWORD PTR _Si$9[ebp]
	mulss	xmm0, DWORD PTR _Si$9[ebp]
	movss	DWORD PTR _Si$9[ebp], xmm0

; 1339 : 					Si /= 256.0f;

	movss	xmm0, DWORD PTR _Si$9[ebp]
	divss	xmm0, DWORD PTR __real@43800000
	movss	DWORD PTR _Si$9[ebp], xmm0

; 1340 : 					if(Si<0.2f) Si=0.2f;

	movss	xmm0, DWORD PTR __real@3e4ccccd
	comiss	xmm0, DWORD PTR _Si$9[ebp]
	jbe	SHORT $LN9@DrawObject
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _Si$9[ebp], xmm0
$LN9@DrawObject:

; 1341 : 				}
; 1342 : 				
; 1343 : 				// Air vehicles, lower Q...
; 1344 : 				if(Model->VBClass==VB_CLASS_DOMAIN_AIR){

	mov	eax, DWORD PTR _Model$[ebp]
	cmp	DWORD PTR [eax+8], 4
	jne	SHORT $LN7@DrawObject

; 1345 : 					Si *= Si * ( 1 - PRANDFloatPos() * 0.6f);

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv527[ebp]
	movss	xmm0, DWORD PTR tv527[ebp]
	mulss	xmm0, DWORD PTR __real@3f19999a
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _Si$9[ebp]
	mulss	xmm1, DWORD PTR _Si$9[ebp]
	movss	DWORD PTR _Si$9[ebp], xmm1

; 1346 : 					Si /= 4.0f;

	movss	xmm0, DWORD PTR _Si$9[ebp]
	divss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR _Si$9[ebp], xmm0

; 1347 : 					if(Si<0.3f) Si=0.3f;

	movss	xmm0, DWORD PTR __real@3e99999a
	comiss	xmm0, DWORD PTR _Si$9[ebp]
	jbe	SHORT $LN7@DrawObject
	movss	xmm0, DWORD PTR __real@3e99999a
	movss	DWORD PTR _Si$9[ebp], xmm0
$LN7@DrawObject:

; 1348 : 				}
; 1349 : 
; 1350 : 				// Calculate the color based on Fog level
; 1351 : //				DWORD	Color=(min(255,FloatToInt32(m_FogLevel*255.f)) << 24)+0x102010;
; 1352 : 				DWORD	Color=F_TO_UARGB(min(255.0f,F_I32(m_FogLevel*255.f)), Si * 240.0f, Si * 255.0f, Si * 240.0f);

	movss	xmm0, DWORD PTR ?m_FogLevel@CDXEngine@@0MA
	mulss	xmm0, DWORD PTR __real@437f0000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?F_I32@@YAKM@Z				; F_I32
	add	esp, 4
	mov	DWORD PTR tv538[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv538[ebp]
	mov	ecx, DWORD PTR tv538[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv541[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv541[ebp]
	comiss	xmm0, DWORD PTR __real@437f0000
	jbe	SHORT $LN34@DrawObject
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR tv291[ebp], xmm0
	jmp	SHORT $LN35@DrawObject
$LN34@DrawObject:
	movss	xmm0, DWORD PTR ?m_FogLevel@CDXEngine@@0MA
	mulss	xmm0, DWORD PTR __real@437f0000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?F_I32@@YAKM@Z				; F_I32
	add	esp, 4
	mov	DWORD PTR tv550[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv550[ebp]
	mov	edx, DWORD PTR tv550[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv553[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv553[ebp]
	movss	DWORD PTR tv291[ebp], xmm0
$LN35@DrawObject:
	push	ecx
	movss	xmm0, DWORD PTR tv291[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?F_I32@@YAKM@Z				; F_I32
	add	esp, 4
	mov	esi, eax
	shl	esi, 24					; 00000018H
	movss	xmm0, DWORD PTR _Si$9[ebp]
	mulss	xmm0, DWORD PTR __real@43700000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?F_I32@@YAKM@Z				; F_I32
	add	esp, 4
	mov	edi, eax
	shl	edi, 16					; 00000010H
	movss	xmm0, DWORD PTR _Si$9[ebp]
	mulss	xmm0, DWORD PTR __real@437f0000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?F_I32@@YAKM@Z				; F_I32
	add	esp, 4
	shl	eax, 8
	or	edi, eax
	movss	xmm0, DWORD PTR _Si$9[ebp]
	mulss	xmm0, DWORD PTR __real@43700000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?F_I32@@YAKM@Z				; F_I32
	add	esp, 4
	or	edi, eax
	or	esi, edi
	mov	DWORD PTR _Color$5[ebp], esi

; 1353 : 				Draw3DPoint((D3DVECTOR*)Pos, Color);

	push	0
	push	0
	mov	eax, DWORD PTR _Color$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _Pos$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Draw3DPoint@CDXEngine@@QAEXPAU_D3DVECTOR@@K_N1@Z ; CDXEngine::Draw3DPoint
	jmp	SHORT $LN6@DrawObject
$LN12@DrawObject:

; 1354 : #ifdef	DEBUG_LOD_ID			
; 1355 : 				strcpy(LodLabel, ".");
; 1356 : #endif
; 1357 : 			} else TheVbManager.AddDrawRequest(objInst, Model->Id, &State, (LODRange<=(DYNAMIC_LIGHT_INSIDE_RANGE*2))?true:false, Liter, FogLevel);

	movss	xmm0, DWORD PTR __real@47c35000
	comiss	xmm0, DWORD PTR _LODRange$[ebp]
	jb	SHORT $LN36@DrawObject
	mov	BYTE PTR tv317[ebp], 1
	jmp	SHORT $LN37@DrawObject
$LN36@DrawObject:
	mov	BYTE PTR tv317[ebp], 0
$LN37@DrawObject:
	push	ecx
	movss	xmm0, DWORD PTR _FogLevel$4[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _Liter$[ebp]
	push	edx
	movzx	eax, BYTE PTR tv317[ebp]
	push	eax
	lea	ecx, DWORD PTR _State$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Model$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _objInst$[ebp]
	push	ecx
	mov	ecx, OFFSET ?TheVbManager@@3VCDXVbManager@@A ; TheVbManager
	call	?AddDrawRequest@CDXVbManager@@QAEXPAVObjectInstance@@KPAUD3DXMATRIX@@_NKM@Z ; CDXVbManager::AddDrawRequest
$LN6@DrawObject:
$LN17@DrawObject:
$LightCheck$38:

; 1358 : 		}
; 1359 : 
; 1360 : LightCheck:
; 1361 : #ifdef	LIGHT_ENGINE_DEBUG
; 1362 : 		START_PROFILE("LIGHTS ON TIME");
; 1363 : #endif
; 1364 : 	// if inside Lights visibility range, check for lights --- FRB - Bad dwLightsNr check and SwitchValues
; 1365 : 	//if(LODRange<=DYNAMIC_LIGHT_INSIDE_RANGE && Model->dwLightsNr && (Model->dwLightsNr<11) && (objInst->SwitchValues))
; 1366 : 	if(LODRange<=DYNAMIC_LIGHT_INSIDE_RANGE && Model->dwLightsNr)

	movss	xmm0, DWORD PTR __real@47435000
	comiss	xmm0, DWORD PTR _LODRange$[ebp]
	jb	$LN3@DrawObject
	mov	edx, DWORD PTR _Model$[ebp]
	cmp	DWORD PTR [edx+64], 0
	je	SHORT $LN3@DrawObject

; 1367 : 	{
; 1368 : 		// Get the Lights area in the model
; 1369 : 		DXLightType *Light=(DXLightType*)((char*)Model+Model->pLightsPool);

	mov	eax, DWORD PTR _Model$[ebp]
	mov	ecx, DWORD PTR _Model$[ebp]
	add	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _Light$8[ebp], ecx

; 1370 : 		// The number of lights
; 1371 : 		DWORD	LightsNr=Model->dwLightsNr;

	mov	edx, DWORD PTR _Model$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	DWORD PTR _LightsNr$7[ebp], eax
$LN4@DrawObject:

; 1372 : 		// and add all of them to the dynamic lights list
; 1373 : 		while(LightsNr--)

	mov	ecx, DWORD PTR _LightsNr$7[ebp]
	mov	DWORD PTR tv331[ebp], ecx
	mov	edx, DWORD PTR _LightsNr$7[ebp]
	sub	edx, 1
	mov	DWORD PTR _LightsNr$7[ebp], edx
	cmp	DWORD PTR tv331[ebp], 0
	je	SHORT $LN3@DrawObject

; 1374 : 		{
; 1375 : 			if(Light->Switch==-1 || (objInst->SwitchValues[Light->Switch] & Light->SwitchMask)) TheLightEngine.AddDynamicLight(Liter, Light, RotMatrix, &p, LODRange);

	mov	eax, DWORD PTR _Light$8[ebp]
	cmp	DWORD PTR [eax], -1
	je	SHORT $LN1@DrawObject
	mov	ecx, DWORD PTR _Light$8[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _objInst$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _Light$8[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	and	ecx, DWORD PTR [eax+4]
	je	SHORT $LN2@DrawObject
$LN1@DrawObject:
	push	ecx
	movss	xmm0, DWORD PTR _LODRange$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _RotMatrix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Light$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _Liter$[ebp]
	push	edx
	mov	ecx, OFFSET ?TheLightEngine@@3VCDXLight@@A ; TheLightEngine
	call	?AddDynamicLight@CDXLight@@QAEKKPAUDXLightType@@PAUD3DXMATRIX@@PAU_D3DVECTOR@@M@Z ; CDXLight::AddDynamicLight
$LN2@DrawObject:

; 1376 : 			Light++;

	mov	eax, DWORD PTR _Light$8[ebp]
	add	eax, 120				; 00000078H
	mov	DWORD PTR _Light$8[ebp], eax

; 1377 : 		}

	jmp	SHORT $LN4@DrawObject
$LN3@DrawObject:
$LN30@DrawObject:

; 1378 : 	}
; 1379 : #ifdef	LIGHT_ENGINE_DEBUG
; 1380 : 		STOP_PROFILE("LIGHTS ON TIME");
; 1381 : #endif
; 1382 : #endif
; 1383 : }

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
?DrawObject@CDXEngine@@QAEXPAVObjectInstance@@PAUD3DXMATRIX@@PBUTpoint@@MMMM_NK@Z ENDP ; CDXEngine::DrawObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_StateHandle$ = -12					; size = 4
_FogStart$ = -8						; size = 4
_this$ = -4						; size = 4
?FlushBuffers@CDXEngine@@QAEXXZ PROC			; CDXEngine::FlushBuffers
; _this$ = ecx

; 1830 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1831 : 	float	FogStart=0.0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _FogStart$[ebp], xmm0

; 1832 : 	D3DErroCount=3;

	mov	DWORD PTR ?D3DErroCount@@3KA, 3		; D3DErroCount

; 1833 : 
; 1834 : 
; 1835 : #ifndef	DEBUG_ENGINE
; 1836 : 	//REPORT_VALUE("LODs : ", LODsLoaded);
; 1837 : #endif
; 1838 : 
; 1839 : 	// First of all save present renderer State
; 1840 : 	DWORD	StateHandle;
; 1841 : 	CheckHR(m_pD3DD->CreateStateBlock(D3DSBT_ALL, &StateHandle));

	lea	eax, DWORD PTR _StateHandle$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+168]
	call	ecx
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 1842 : 	
; 1843 : 	// Setup the state for the DX engine
; 1844 : 	CheckHR(m_pD3DD->ApplyStateBlock(DxEngineStateHandle));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+156]
	call	ecx
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 1845 : 
; 1846 : 	CheckHR(m_pD3DD->SetRenderState(D3DRENDERSTATE_ZENABLE,D3DZB_TRUE));

	push	1
	push	7
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 1847 : 
; 1848 : 	// *** Default engine initializations ***
; 1849 : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_COLORVERTEX, TRUE);

	push	1
	push	141					; 0000008dH
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 1850 : 	m_pD3DD->SetRenderState( D3DRENDERSTATE_AMBIENT, 0xff000000);

	push	-16777216				; ff000000H
	push	139					; 0000008bH
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 1851 :     m_pD3DD->SetRenderState( D3DRENDERSTATE_DIFFUSEMATERIALSOURCE, D3DMCS_COLOR1 );

	push	1
	push	145					; 00000091H
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx

; 1852 :     m_pD3DD->SetRenderState( D3DRENDERSTATE_AMBIENTMATERIALSOURCE, D3DMCS_COLOR1 );

	push	1
	push	147					; 00000093H
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 1853 : 	m_pD3DD->SetRenderState( D3DRENDERSTATE_SPECULARMATERIALSOURCE, D3DMCS_MATERIAL );

	push	0
	push	146					; 00000092H
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 1854 :     m_pD3DD->SetRenderState( D3DRENDERSTATE_EMISSIVEMATERIALSOURCE, D3DMCS_COLOR2 );

	push	2
	push	148					; 00000094H
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx

; 1855 :     m_pD3DD->SetRenderState( D3DRENDERSTATE_SHADEMODE, D3DSHADE_GOURAUD );

	push	2
	push	9
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 1856 : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_CLIPPING,FALSE);

	push	0
	push	136					; 00000088H
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 1857 : 
; 1858 : 	// Initialize data parameters
; 1859 : 	FlushInit();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushInit@CDXEngine@@AAEXXZ		; CDXEngine::FlushInit

; 1860 : 
; 1861 : #ifndef	DEBUG_ENGINE
; 1862 : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_RANGEFOGENABLE,TRUE);

	push	1
	push	48					; 00000030H
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx

; 1863 : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_FOGTABLEMODE, D3DFOG_NONE);

	push	0
	push	35					; 00000023H
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 1864 : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_FOGVERTEXMODE, D3DFOG_LINEAR);

	push	3
	push	140					; 0000008cH
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 1865 : 	// New Fog stuff
; 1866 : 	if(m_LinearFog){

	movzx	edx, BYTE PTR ?m_LinearFog@CDXEngine@@0_NA ; CDXEngine::m_LinearFog
	test	edx, edx
	je	SHORT $LN4@FlushBuffe

; 1867 : 		m_LinearFogLevel = realWeather->LinearFogEnd();

	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?LinearFogEnd@RealWeather@@QAEMXZ	; RealWeather::LinearFogEnd
	fstp	DWORD PTR ?m_LinearFogLevel@CDXEngine@@0MA ; CDXEngine::m_LinearFogLevel

; 1868 : 		m_pD3DD->SetRenderState(D3DRENDERSTATE_FOGEND, *(DWORD *)(&m_FogLevel));

	mov	eax, DWORD PTR ?m_FogLevel@CDXEngine@@0MA
	push	eax
	push	37					; 00000025H
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 1869 : 	} else {

	jmp	SHORT $LN3@FlushBuffe
$LN4@FlushBuffe:

; 1870 : 		m_LinearFogLevel = MAX_FOG_RANGE;

	movss	xmm0, DWORD PTR __real@48435000
	movss	DWORD PTR ?m_LinearFogLevel@CDXEngine@@0MA, xmm0
$LN3@FlushBuffe:

; 1871 : 	}
; 1872 : 	FogStart = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _FogStart$[ebp], xmm0

; 1873 : 	m_pD3DD->SetRenderState(D3DRENDERSTATE_FOGSTART, *(DWORD *)(&FogStart));

	mov	edx, DWORD PTR _FogStart$[ebp]
	push	edx
	push	36					; 00000024H
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 1874 : #endif
; 1875 : 
; 1876 : 	// Initalize last specularity
; 1877 : 	m_LastSpecular=0;

	mov	DWORD PTR ?m_LastSpecular@CDXEngine@@0KA, 0 ; CDXEngine::m_LastSpecular

; 1878 : 
; 1879 : 	// Set Up the View port
; 1880 : 	m_pD3DD->SetViewport(&ViewPort);

	push	OFFSET ?ViewPort@CDXEngine@@0U_D3DVIEWPORT7@@A ; CDXEngine::ViewPort
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+52]
	call	ecx

; 1881 : 
; 1882 : 	// Set Up the Field of View Projection
; 1883 : 	m_pD3DD->SetTransform( D3DTRANSFORMSTATE_PROJECTION, (LPD3DMATRIX)&Projection );

	push	OFFSET ?Projection@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::Projection
	push	3
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+44]
	call	edx

; 1884 : 
; 1885 : 	// Set Up the camera View for the drawing
; 1886 : 	m_pD3DD->SetTransform( D3DTRANSFORMSTATE_VIEW, (LPD3DMATRIX)&CameraView );

	push	OFFSET ?CameraView@CDXEngine@@0UD3DXMATRIX@@A ; CDXEngine::CameraView
	push	2
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	edx
	mov	eax, DWORD PTR [ecx+44]
	call	eax

; 1887 : 
; 1888 : 
; 1889 : 	LOCK_VB_MANAGER;

	push	OFFSET ?cs_VbManager@@3U_RTL_CRITICAL_SECTION@@A ; cs_VbManager
	call	DWORD PTR __imp__EnterCriticalSection@4

; 1890 : 
; 1891 : 	// Start resetting Draw Pointers
; 1892 : 	TheVbManager.ResetDrawList();

	mov	ecx, OFFSET ?TheVbManager@@3VCDXVbManager@@A ; TheVbManager
	call	?ResetDrawList@CDXVbManager@@QAEXXZ	; CDXVbManager::ResetDrawList

; 1893 : 	// Flush all cached VB objects
; 1894 : 	if(m_RenderState == DX_DBS) FlushBlips();

	cmp	DWORD PTR ?m_RenderState@CDXEngine@@0W4DX_StateType@@A, 3 ; CDXEngine::m_RenderState
	jne	SHORT $LN2@FlushBuffe
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushBlips@CDXEngine@@AAEXXZ		; CDXEngine::FlushBlips
	jmp	SHORT $LN1@FlushBuffe
$LN2@FlushBuffe:

; 1895 : 	else FlushObjects();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushObjects@CDXEngine@@AAEXXZ		; CDXEngine::FlushObjects
$LN1@FlushBuffe:

; 1896 : 
; 1897 : 	// Draw the Solid Surfaces
; 1898 : 	DrawSolidSurfaces();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawSolidSurfaces@CDXEngine@@AAEXXZ	; CDXEngine::DrawSolidSurfaces

; 1899 : 
; 1900 : 	// Flush Dynamic Buffers & sorted objects
; 1901 : 	FlushDynamicObjects();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushDynamicObjects@CDXEngine@@QAEXXZ	; CDXEngine::FlushDynamicObjects

; 1902 : 
; 1903 : 	//Reset Features
; 1904 : 	ResetFeatures();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetFeatures@CDXEngine@@AAEXXZ	; CDXEngine::ResetFeatures

; 1905 : 
; 1906 : 	// Setup VB draw list for a new round
; 1907 : 	TheVbManager.ClearDrawList();

	mov	ecx, OFFSET ?TheVbManager@@3VCDXVbManager@@A ; TheVbManager
	call	?ClearDrawList@CDXVbManager@@QAEXXZ	; CDXVbManager::ClearDrawList

; 1908 : 	// Clear any light
; 1909 : 	TheLightEngine.ResetLightsList();

	mov	ecx, OFFSET ?TheLightEngine@@3VCDXLight@@A ; TheLightEngine
	call	?ResetLightsList@CDXLight@@QAEXXZ	; CDXLight::ResetLightsList

; 1910 : 	
; 1911 : 	UNLOCK_VB_MANAGER;

	push	OFFSET ?cs_VbManager@@3U_RTL_CRITICAL_SECTION@@A ; cs_VbManager
	call	DWORD PTR __imp__LeaveCriticalSection@4

; 1912 : 
; 1913 : 	// Restore Previous State Block and delete it from memory
; 1914 : 	CheckHR(m_pD3DD->ApplyStateBlock(StateHandle));

	mov	ecx, DWORD PTR _StateHandle$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+156]
	call	edx
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 1915 : 	CheckHR(m_pD3DD->DeleteStateBlock(StateHandle));

	mov	eax, DWORD PTR _StateHandle$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	eax
	mov	ecx, DWORD PTR [edx+164]
	call	ecx
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 1916 : 
; 1917 : 	gDebugLodID=-1;

	mov	DWORD PTR ?gDebugLodID@@3KA, -1		; gDebugLodID

; 1918 : 	m_AlphaStack.StackLevel = 0;

	mov	DWORD PTR ?m_AlphaStack@CDXEngine@@0USurfaceStackType@@A, 0

; 1919 : 
; 1920 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FlushBuffers@CDXEngine@@QAEXXZ ENDP			; CDXEngine::FlushBuffers
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Status$ = 8						; size = 1
?MoveDof@CDXEngine@@QAEX_N@Z PROC			; CDXEngine::MoveDof
; _this$ = ecx

; 398  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 399  : 	m_bDofMove=Status;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _Status$[ebp]
	mov	BYTE PTR [eax+21], cl

; 400  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?MoveDof@CDXEngine@@QAEX_N@Z ENDP			; CDXEngine::MoveDof
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Status$ = 8						; size = 1
?EnableCull@CDXEngine@@QAEX_N@Z PROC			; CDXEngine::EnableCull
; _this$ = ecx

; 393  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 394  : 	m_bCullEnable=Status;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _Status$[ebp]
	mov	BYTE PTR [eax+20], cl

; 395  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?EnableCull@CDXEngine@@QAEX_N@Z ENDP			; CDXEngine::EnableCull
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CDXEngine@@QAE@XZ PROC				; CDXEngine::~CDXEngine
; _this$ = ecx

; 117  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 118  : 	CleanUpTexturesOnDevice();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CleanUpTexturesOnDevice@CDXEngine@@QAEXXZ ; CDXEngine::CleanUpTexturesOnDevice

; 119  : 	ReleaseTextures();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReleaseTextures@CDXEngine@@QAEXXZ	; CDXEngine::ReleaseTextures

; 120  : 	CheckHR(m_pD3DD->DeleteStateBlock(DxEngineStateHandle));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_pD3DD@CDXEngine@@0PAUIDirect3DDevice7@@A ; CDXEngine::m_pD3DD
	push	ecx
	mov	edx, DWORD PTR [eax+164]
	call	edx
	push	eax
	call	?CheckHR@@YAXJ@Z			; CheckHR
	add	esp, 4

; 121  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1CDXEngine@@QAE@XZ ENDP				; CDXEngine::~CDXEngine
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\dxengine\dxengine.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CDXEngine@@QAE@XZ PROC				; CDXEngine::CDXEngine
; _this$ = ecx

; 92   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 93   : 	DxEngineStateHandle=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0

; 94   : 	ZeroTex=NULL;

	mov	DWORD PTR ?ZeroTex@CDXEngine@@0PAVTextureHandle@@A, 0 ; CDXEngine::ZeroTex

; 95   : 	TexturesList=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6732], 0

; 96   : 	m_LinearFog = false;

	mov	BYTE PTR ?m_LinearFog@CDXEngine@@0_NA, 0 ; CDXEngine::m_LinearFog

; 97   : 	m_StatesStackLevel = 0;

	mov	DWORD PTR ?m_StatesStackLevel@CDXEngine@@0KA, 0 ; CDXEngine::m_StatesStackLevel

; 98   : 	m_RenderState = DX_OTW;

	mov	DWORD PTR ?m_RenderState@CDXEngine@@0W4DX_StateType@@A, 0 ; CDXEngine::m_RenderState

; 99   : 
; 100  : #ifdef	DATE_PROTECTION
; 101  : 
; 102  : 	time_t	t;
; 103  : 	struct	tm	*today;
; 104  : 
; 105  : 	t = time(NULL);
; 106  : 	today = localtime(&t);
; 107  : 	if(today->tm_mon > PROTECTION_MONTH || today->tm_year > PROTECTION_YEAR)
; 108  : 		DateOff = true;
; 109  : 	else
; 110  : 		DateOff = false;
; 111  : 
; 112  : 	
; 113  : #endif
; 114  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CDXEngine@@QAE@XZ ENDP				; CDXEngine::CDXEngine
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\realweather.h
;	COMDAT ?LinearFogEnd@RealWeather@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?LinearFogEnd@RealWeather@@QAEMXZ PROC			; RealWeather::LinearFogEnd, COMDAT
; _this$ = ecx

; 144  : 	float	LinearFogEnd(void) { return LinearFogUsed; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+15964]
	mov	esp, ebp
	pop	ebp
	ret	0
?LinearFogEnd@RealWeather@@QAEMXZ ENDP			; RealWeather::LinearFogEnd
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\dxsdk\include\d3dxmath.inl
;	COMDAT ?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z
_TEXT	SEGMENT
_pOut$ = 8						; size = 4
?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z PROC	; D3DXMatrixIdentity, COMDAT

; 1562 : {

	push	ebp
	mov	ebp, esp

; 1563 : #ifdef D3DX_DEBUG
; 1564 :     if(!pOut)
; 1565 :         return NULL;
; 1566 : #endif
; 1567 : 
; 1568 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] = 
; 1569 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] = 
; 1570 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] = 
; 1571 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	eax, 3
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	add	edx, DWORD PTR _pOut$[ebp]
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+eax], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	imul	ecx, 3
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _pOut$[ebp]
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+eax], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	imul	ecx, 3
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _pOut$[ebp]
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+eax], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	imul	ecx, 3
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	imul	edx, 0
	add	edx, DWORD PTR _pOut$[ebp]
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+eax], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0

; 1572 : 
; 1573 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

	mov	eax, 16					; 00000010H
	imul	eax, 3
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	imul	ecx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _pOut$[ebp]
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+eax], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+ecx], xmm0

; 1574 :     return pOut;

	mov	eax, DWORD PTR _pOut$[ebp]

; 1575 : }

	pop	ebp
	ret	0
?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ENDP	; D3DXMatrixIdentity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\dxsdk\include\d3dxmath.inl
;	COMDAT ??9D3DXMATRIX@@QBEHABU0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv69 = -4						; size = 4
_mat$ = 8						; size = 4
??9D3DXMATRIX@@QBEHABU0@@Z PROC				; D3DXMATRIX::operator!=, COMDAT
; _this$ = ecx

; 692  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 693  :     return 0 != memcmp(this, &mat, sizeof(D3DXMATRIX));

	push	64					; 00000040H
	mov	eax, DWORD PTR _mat$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv69[ebp]

; 694  : }

	mov	esp, ebp
	pop	ebp
	ret	4
??9D3DXMATRIX@@QBEHABU0@@Z ENDP				; D3DXMATRIX::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\dxsdk\include\d3dxmath.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 199  :     D3DXMATRIX() {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\dxsdk\include\d3dxmath.inl
;	COMDAT ??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z PROC			; D3DXVECTOR3::operator-, COMDAT
; _this$ = ecx

; 288  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 289  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	subss	xmm0, DWORD PTR [eax+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 290  : }

	mov	esp, ebp
	pop	ebp
	ret	8
??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator-
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\dxsdk\include\d3dxmath.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 179  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 180  :     x = fx;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fx$[ebp]
	movss	DWORD PTR [eax], xmm0

; 181  :     y = fy;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fy$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 182  :     z = fz;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fz$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 183  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\dxsdk\include\d3dxmath.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 106  :     D3DXVECTOR3() {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\fastmath.h
;	COMDAT ?F_I32@@YAKM@Z
_TEXT	SEGMENT
_r$ = -4						; size = 4
_x$ = 8							; size = 4
?F_I32@@YAKM@Z PROC					; F_I32, COMDAT

; 7    : {	DWORD	r;

	push	ebp
	mov	ebp, esp
	push	ecx

; 8    : 	_asm{ 
; 9    : 			fld		x

	fld	DWORD PTR _x$[ebp]

; 10   : 			fistp	r

	fistp	DWORD PTR _r$[ebp]

; 11   : 	}
; 12   : 	return r;

	mov	eax, DWORD PTR _r$[ebp]

; 13   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?F_I32@@YAKM@Z ENDP					; F_I32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\objectinstance.h
;	COMDAT ?Radius@ObjectInstance@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Radius@ObjectInstance@@QBEMXZ PROC			; ObjectInstance::Radius, COMDAT
; _this$ = ecx

; 25   : 	float	Radius(void)	const	{ return ParentObject->radius; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	fld	DWORD PTR [ecx]
	mov	esp, ebp
	pop	ebp
	ret	0
?Radius@ObjectInstance@@QBEMXZ ENDP			; ObjectInstance::Radius
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GTextureHandle@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GTextureHandle@@QAEPAXI@Z PROC			; TextureHandle::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TextureHandle@@QAE@XZ		; TextureHandle::~TextureHandle
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTextureHandle@@QAEPAXI@Z ENDP			; TextureHandle::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
