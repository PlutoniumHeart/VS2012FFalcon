; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\Graphics\Objects\Drawbsp.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?drawLabels@DrawableBSP@@2HA			; DrawableBSP::drawLabels
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
_BSS	SEGMENT
?drawLabels@DrawableBSP@@2HA DD 01H DUP (?)		; DrawableBSP::drawLabels
_BSS	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
_DATA	SEGMENT
_cloudPntList DD 0c5bcc000r			; -6040
	DD	0c4070000r			; -540
	DD	0c694ac00r			; -19030
	DD	0c6de1c00r			; -28430
	DD	0c4dfc000r			; -1790
	DD	046dcc800r			; 28260
	DD	047104200r			; 36930
	DD	045732000r			; 3890
	DD	04744ea00r			; 50410
	DD	045336000r			; 2870
	DD	0c4d48000r			; -1700
	DD	04736da00r			; 46810
	DD	0c763ee00r			; -58350
	DD	0c4d48000r			; -1700
	DD	0c64c1000r			; -13060
	DD	046f2bc00r			; 31070
	DD	045480000r			; 3200
	DD	0c7293800r			; -43320
	DD	0c7bdc400r			; -97160
	DD	0c4d48000r			; -1700
	DD	04576e000r			; 3950
	DD	0c792e000r			; -75200
	DD	0c4bb8000r			; -1500
	DD	047957400r			; 76520
	DD	04759ee00r			; 55790
	DD	0c5a1e000r			; -5180
	DD	0c7a24e00r			; -83100
	DD	0c7473800r			; -51000
	DD	0c3a00000r			; -320
	DD	0c7829100r			; -66850
	DD	047733400r			; 62260
	DD	0c3a00000r			; -320
	DD	047708200r			; 61570
	DD	0c7710e00r			; -61710
	DD	0c550c000r			; -3340
	DD	046fb7c00r			; 32190
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	0c5bcc000r			; -6040
	DD	0c7495400r			; -51540
	DD	0c694ac00r			; -19030
	DD	0c6a7a800r			; -21460
	DD	0c74b0200r			; -51970
	DD	0468e8000r			; 18240
	DD	047298800r			; 43400
	DD	0c74bf200r			; -52210
	DD	046bc7000r			; 24120
	DD	0c749f400r			; -51700
	DD	0c74bc000r			; -52160
	DD	046948400r			; 19010
	DD	0c605e800r			; -8570
	DD	0c7488200r			; -51330
	DD	0c74ca600r			; -52390
	DD	04731bc00r			; 45500
	DD	0c7509800r			; -53400
	DD	0c6725800r			; -15510
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	0c7a1ae00r			; -82780
	DD	0c749ea00r			; -51690
	DD	0c7bce300r			; -96710
	DD	0c6126800r			; -9370
	DD	0c7495400r			; -51540
	DD	043cd0000r			; 410
	DD	0c6a7a800r			; -21460
	DD	0c74a8a00r			; -51850
	DD	0473fae00r			; 49070
	DD	0457c8000r			; 4040
	DD	0c74e4a00r			; -52810
	DD	047871e00r			; 69180
	DD	0c6cbc000r			; -26080
	DD	0c74bc000r			; -52160
	DD	046984400r			; 19490
	DD	0452fa000r			; 2810
	DD	0c7488200r			; -51330
	DD	0c7081800r			; -34840
	DD	0c7719a00r			; -61850
	DD	0c749d600r			; -51670
	DD	047b17600r			; 90860
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	047c04e00r			; 98460
	DD	0c74d1400r			; -52500
	DD	0c732a200r			; -45730
	DD	0467b9000r			; 16100
	DD	0c7487800r			; -51320
	DD	0c749a400r			; -51620
	DD	047636c00r			; 58220
	DD	0c74e0400r			; -52740
	DD	0c760b000r			; -57520
	DD	0c6126800r			; -9370
	DD	0c4070000r			; -540
	DD	043cd0000r			; 410
	DD	0c4e60000r			; -1840
	DD	0c6a30c00r			; -20870
	DD	0470a6600r			; 35430
	DD	0c7230c00r			; -41740
	DD	046924000r			; 18720
	DD	04797d600r			; 77740
	DD	0460d9000r			; 9060
	DD	0c616c800r			; -9650
	DD	0c7921300r			; -74790
_lightningPosList DD 041300000r			; 11
	DD	000000000r			; 0
	DD	040e00000r			; 7
	DD	040a00000r			; 5
	DD	041100000r			; 9
	DD	041000000r			; 8
	DD	041000000r			; 8
	DD	041600000r			; 14
	DD	041800000r			; 16
	DD	041a00000r			; 20
	DD	041200000r			; 10
	DD	041c00000r			; 24
	DD	041300000r			; 11
	DD	041d80000r			; 27
	DD	040c00000r			; 6
	DD	041f00000r			; 30
	DD	040e00000r			; 7
	DD	042040000r			; 33
	DD	03f800000r			; 1
	DD	042180000r			; 38
	DD	040a00000r			; 5
	DD	042280000r			; 42
	DD	040a00000r			; 5
	DD	042340000r			; 45
	DD	041400000r			; 12
	DD	042400000r			; 48
	DD	041a00000r			; 20
	DD	042500000r			; 52
	DD	041a00000r			; 20
	DD	042680000r			; 58
	DD	041b80000r			; 23
	DD	042740000r			; 61
	DD	041b00000r			; 22
	DD	0427c0000r			; 63
	DD	041b00000r			; 22
	DD	042840000r			; 66
	DD	041c80000r			; 25
	DD	042880000r			; 68
	DD	041a00000r			; 20
	DD	0428c0000r			; 70
	DD	041c00000r			; 24
	DD	042960000r			; 75
	DD	041c00000r			; 24
	DD	0429a0000r			; 77
	DD	041f80000r			; 31
	DD	042a00000r			; 80
	DD	041f80000r			; 31
	DD	042a60000r			; 83
	DD	042040000r			; 33
	DD	042b00000r			; 88
	DD	041f80000r			; 31
	DD	042b80000r			; 92
	DD	0423c0000r			; 47
	DD	042ce0000r			; 103
	DD	042380000r			; 46
	DD	042d20000r			; 105
	DD	0423c0000r			; 47
	DD	042d60000r			; 107
	DD	042340000r			; 45
	DD	042e00000r			; 112
	DD	042400000r			; 48
	DD	042e40000r			; 114
	DD	042380000r			; 46
	DD	042ea0000r			; 117
	DD	0422c0000r			; 43
	DD	043000000r			; 128
_DATA	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
_NEAR_CLIP DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?GetTextureLightingColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ; CTimeOfDay::GetTextureLightingColor
PUBLIC	?X@Render3D@@QAEMXZ				; Render3D::X
PUBLIC	?Y@Render3D@@QAEMXZ				; Render3D::Y
PUBLIC	?Z@Render3D@@QAEMXZ				; Render3D::Z
PUBLIC	?GetHazeMode@RenderOTW@@QAEHXZ			; RenderOTW::GetHazeMode
PUBLIC	?GetRangeOnlyFog@RenderOTW@@QAEMM@Z		; RenderOTW::GetRangeOnlyFog
PUBLIC	?GetFogColor@RenderOTW@@QAEPAUTcolor@@XZ	; RenderOTW::GetFogColor
PUBLIC	?Radius@ObjectInstance@@QBEMXZ			; ObjectInstance::Radius
PUBLIC	?BoxLeft@ObjectInstance@@QBEMXZ			; ObjectInstance::BoxLeft
PUBLIC	?BoxRight@ObjectInstance@@QBEMXZ		; ObjectInstance::BoxRight
PUBLIC	?BoxTop@ObjectInstance@@QBEMXZ			; ObjectInstance::BoxTop
PUBLIC	?BoxBottom@ObjectInstance@@QBEMXZ		; ObjectInstance::BoxBottom
PUBLIC	?BoxFront@ObjectInstance@@QBEMXZ		; ObjectInstance::BoxFront
PUBLIC	?BoxBack@ObjectInstance@@QBEMXZ			; ObjectInstance::BoxBack
PUBLIC	?SetSlotChild@ObjectInstance@@QAEXHPAV1@@Z	; ObjectInstance::SetSlotChild
PUBLIC	??0DrawableObject@@QAE@M@Z			; DrawableObject::DrawableObject
PUBLIC	??1DrawableObject@@UAE@XZ			; DrawableObject::~DrawableObject
PUBLIC	?GetRadarSign@DrawableObject@@UAEMXZ		; DrawableObject::GetRadarSign
PUBLIC	?GetClass@DrawableObject@@QBE?AW4DrawClass@1@XZ	; DrawableObject::GetClass
PUBLIC	?SetLabel@DrawableObject@@UAEXPADK@Z		; DrawableObject::SetLabel
PUBLIC	?SetInhibitFlag@DrawableObject@@UAEXH@Z		; DrawableObject::SetInhibitFlag
PUBLIC	?Draw@DrawableObject@@UAEXPAVRender3D@@@Z	; DrawableObject::Draw
PUBLIC	?GetRayHit@DrawableObject@@UAEHPBUTpoint@@0PAU2@M@Z ; DrawableObject::GetRayHit
PUBLIC	?SetParentList@DrawableObject@@MAEXPAVObjectDisplayList@@@Z ; DrawableObject::SetParentList
PUBLIC	??_GDrawableObject@@UAEPAXI@Z			; DrawableObject::`scalar deleting destructor'
PUBLIC	??0DrawableBSP@@QAE@HPBUTpoint@@PBUTrotation@@M@Z ; DrawableBSP::DrawableBSP
PUBLIC	??1DrawableBSP@@UAE@XZ				; DrawableBSP::~DrawableBSP
PUBLIC	?Update@DrawableBSP@@QAEXPBUTpoint@@PBUTrotation@@@Z ; DrawableBSP::Update
PUBLIC	?AttachChild@DrawableBSP@@QAEXPAV1@H@Z		; DrawableBSP::AttachChild
PUBLIC	?DetachChild@DrawableBSP@@QAEXPAV1@H@Z		; DrawableBSP::DetachChild
PUBLIC	?GetChildOffset@DrawableBSP@@QAEXHPAUTpoint@@@Z	; DrawableBSP::GetChildOffset
PUBLIC	?SetupVisibility@DrawableBSP@@QAE_NPAVRenderOTW@@@Z ; DrawableBSP::SetupVisibility
PUBLIC	?SetDOFangle@DrawableBSP@@QAEXHM@Z		; DrawableBSP::SetDOFangle
PUBLIC	?SetDOFoffset@DrawableBSP@@QAEXHM@Z		; DrawableBSP::SetDOFoffset
PUBLIC	?SetDynamicVertex@DrawableBSP@@QAEXHMMM@Z	; DrawableBSP::SetDynamicVertex
PUBLIC	?SetSwitchMask@DrawableBSP@@QAEXHK@Z		; DrawableBSP::SetSwitchMask
PUBLIC	?GetDOFangle@DrawableBSP@@QAEMH@Z		; DrawableBSP::GetDOFangle
PUBLIC	?GetDOFoffset@DrawableBSP@@QAEMH@Z		; DrawableBSP::GetDOFoffset
PUBLIC	?GetDynamicVertex@DrawableBSP@@QAEXHPAM00@Z	; DrawableBSP::GetDynamicVertex
PUBLIC	?GetDynamicCoords@DrawableBSP@@QAEXHPAM00@Z	; DrawableBSP::GetDynamicCoords
PUBLIC	?GetSwitchMask@DrawableBSP@@QAEKH@Z		; DrawableBSP::GetSwitchMask
PUBLIC	?SetLabel@DrawableBSP@@UAEXPADK@Z		; DrawableBSP::SetLabel
PUBLIC	?SetInhibitFlag@DrawableBSP@@UAEXH@Z		; DrawableBSP::SetInhibitFlag
PUBLIC	?GetRayHit@DrawableBSP@@UAEHPBUTpoint@@0PAU2@M@Z ; DrawableBSP::GetRayHit
PUBLIC	?Draw@DrawableBSP@@UAEXPAVRenderOTW@@H@Z	; DrawableBSP::Draw
PUBLIC	?Draw@DrawableBSP@@UAEXPAVRender3D@@@Z		; DrawableBSP::Draw
PUBLIC	?GetBoundingBox@DrawableBSP@@QAEXPAUTpoint@@0@Z	; DrawableBSP::GetBoundingBox
PUBLIC	?GetRadarSign@DrawableBSP@@UAEMXZ		; DrawableBSP::GetRadarSign
PUBLIC	?TimeUpdateCallback@DrawableBSP@@KAXPAX@Z	; DrawableBSP::TimeUpdateCallback
PUBLIC	?SetupTexturesOnDevice@DrawableBSP@@SAXPAVDXContext@@@Z ; DrawableBSP::SetupTexturesOnDevice
PUBLIC	?ReleaseTexturesOnDevice@DrawableBSP@@SAXPAVDXContext@@@Z ; DrawableBSP::ReleaseTexturesOnDevice
PUBLIC	?DrawBoundingBox@DrawableBSP@@IAEXPAVRender3D@@@Z ; DrawableBSP::DrawBoundingBox
PUBLIC	??_GDrawableBSP@@UAEPAXI@Z			; DrawableBSP::`scalar deleting destructor'
PUBLIC	?ShadowsOn@PlayerOptionsClass@@QAEHXZ		; PlayerOptionsClass::ShadowsOn
PUBLIC	?ObjectDynScalingOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::ObjectDynScalingOn
PUBLIC	?FabsF@@YAMM@Z					; FabsF
PUBLIC	?SqrtF@@YAMM@Z					; SqrtF
PUBLIC	?VisibleLimit@RealWeather@@QAEMXZ		; RealWeather::VisibleLimit
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_7DrawableObject@@6B@				; DrawableObject::`vftable'
PUBLIC	??_7DrawableBSP@@6B@				; DrawableBSP::`vftable'
PUBLIC	??_C@_08KEOJDJOA@?$CF4?41f?5nm?$AA@		; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4DrawableObject@@6B@			; DrawableObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDrawableObject@@@8			; DrawableObject `RTTI Type Descriptor'
PUBLIC	??_R3DrawableObject@@8				; DrawableObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DrawableObject@@8				; DrawableObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DrawableObject@@8			; DrawableObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4DrawableBSP@@6B@				; DrawableBSP::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDrawableBSP@@@8				; DrawableBSP `RTTI Type Descriptor'
PUBLIC	??_R3DrawableBSP@@8				; DrawableBSP::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DrawableBSP@@8				; DrawableBSP::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DrawableBSP@@8			; DrawableBSP::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3f000000
PUBLIC	__real@3f266666
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@40800000
PUBLIC	__real@41400000
PUBLIC	__real@43160000
PUBLIC	__real@44960000
PUBLIC	__real@45bde000
PUBLIC	__real@bf800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	_strncpy:PROC
EXTRN	_sprintf:PROC
EXTRN	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z:PROC ; MatrixMult
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?SetLight@ColorBankClass@@SAXMMM@Z:PROC		; ColorBankClass::SetLight
EXTRN	?SetFog@StateStackClass@@SAXMPAUPcolor@@@Z:PROC	; StateStackClass::SetFog
EXTRN	?DrawObject@StateStackClass@@SAXPAVObjectInstance@@PBUTrotation@@PBUTpoint@@M@Z:PROC ; StateStackClass::DrawObject
EXTRN	?RegisterTimeUpdateCB@TimeManager@@QAEXP6AXPAX@Z0@Z:PROC ; TimeManager::RegisterTimeUpdateCB
EXTRN	?ReleaseTimeUpdateCB@TimeManager@@QAEXP6AXPAX@Z0@Z:PROC ; TimeManager::ReleaseTimeUpdateCB
EXTRN	?ScreenTextWidth@VirtualDisplay@@SAHPBD@Z:PROC	; VirtualDisplay::ScreenTextWidth
EXTRN	?TransformPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z:PROC ; Render3D::TransformPoint
EXTRN	?TransformPointToViewSwapped@Render3D@@QAEXPAUTpoint@@0@Z:PROC ; Render3D::TransformPointToViewSwapped
EXTRN	?ZDistanceFromCamera@Render3D@@QAEMPAUTpoint@@@Z:PROC ; Render3D::ZDistanceFromCamera
EXTRN	?Render3DLine@Render3D@@QAEXPAUTpoint@@0@Z:PROC	; Render3D::Render3DLine
EXTRN	?GetValleyFog@RenderOTW@@QAEMMM@Z:PROC		; RenderOTW::GetValleyFog
EXTRN	??0ObjectInstance@@QAE@H@Z:PROC			; ObjectInstance::ObjectInstance
EXTRN	??1ObjectInstance@@QAE@XZ:PROC			; ObjectInstance::~ObjectInstance
EXTRN	?SetDynamicVertex@ObjectInstance@@QAEXHMMM@Z:PROC ; ObjectInstance::SetDynamicVertex
EXTRN	?GetDynamicVertex@ObjectInstance@@QAEXHPAM00@Z:PROC ; ObjectInstance::GetDynamicVertex
EXTRN	?GetDynamicCoords@ObjectInstance@@QAEXHPAM00@Z:PROC ; ObjectInstance::GetDynamicCoords
EXTRN	??_EDrawableObject@@UAEPAXI@Z:PROC		; DrawableObject::`vector deleting destructor'
EXTRN	??_EDrawableBSP@@UAEPAXI@Z:PROC			; DrawableBSP::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?TheTimeManager@@3VTimeManager@@A:BYTE		; TheTimeManager
EXTRN	?TheTimeOfDay@@3VCTimeOfDay@@A:BYTE		; TheTimeOfDay
EXTRN	?PERSPECTIVE_RANGE@RenderOTW@@2MB:DWORD		; RenderOTW::PERSPECTIVE_RANGE
EXTRN	?drawLabels@DrawablePoint@@2HA:DWORD		; DrawablePoint::drawLabels
EXTRN	?PlayerOptions@@3VPlayerOptionsClass@@A:BYTE	; PlayerOptions
EXTRN	?realWeather@@3PAVRealWeather@@A:DWORD		; realWeather
EXTRN	?g_nNearLabelLimit@@3HA:DWORD			; g_nNearLabelLimit
EXTRN	?g_bSmartScaling@@3_NA:BYTE			; g_bSmartScaling
EXTRN	?g_bDrawBoundingBox@@3_NA:BYTE			; g_bDrawBoundingBox
EXTRN	?g_bLabelRadialFix@@3_NA:BYTE			; g_bLabelRadialFix
EXTRN	?g_bLabelShowDistance@@3_NA:BYTE		; g_bLabelShowDistance
EXTRN	?renderACMI@@3HA:DWORD				; renderACMI
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@45bde000
CONST	SEGMENT
__real@45bde000 DD 045bde000r			; 6076
CONST	ENDS
;	COMDAT __real@44960000
CONST	SEGMENT
__real@44960000 DD 044960000r			; 1200
CONST	ENDS
;	COMDAT __real@43160000
CONST	SEGMENT
__real@43160000 DD 043160000r			; 150
CONST	ENDS
;	COMDAT __real@41400000
CONST	SEGMENT
__real@41400000 DD 041400000r			; 12
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f266666
CONST	SEGMENT
__real@3f266666 DD 03f266666r			; 0.65
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@DrawableBSP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DrawableBSP@@8 DD FLAT:??_R0?AVDrawableBSP@@@8 ; DrawableBSP::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DrawableBSP@@8
rdata$r	ENDS
;	COMDAT ??_R2DrawableBSP@@8
rdata$r	SEGMENT
??_R2DrawableBSP@@8 DD FLAT:??_R1A@?0A@EA@DrawableBSP@@8 ; DrawableBSP::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DrawableObject@@8
rdata$r	ENDS
;	COMDAT ??_R3DrawableBSP@@8
rdata$r	SEGMENT
??_R3DrawableBSP@@8 DD 00H				; DrawableBSP::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2DrawableBSP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDrawableBSP@@@8
_DATA	SEGMENT
??_R0?AVDrawableBSP@@@8 DD FLAT:??_7type_info@@6B@	; DrawableBSP `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDrawableBSP@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DrawableBSP@@6B@
rdata$r	SEGMENT
??_R4DrawableBSP@@6B@ DD 00H				; DrawableBSP::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDrawableBSP@@@8
	DD	FLAT:??_R3DrawableBSP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DrawableObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DrawableObject@@8 DD FLAT:??_R0?AVDrawableObject@@@8 ; DrawableObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DrawableObject@@8
rdata$r	ENDS
;	COMDAT ??_R2DrawableObject@@8
rdata$r	SEGMENT
??_R2DrawableObject@@8 DD FLAT:??_R1A@?0A@EA@DrawableObject@@8 ; DrawableObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3DrawableObject@@8
rdata$r	SEGMENT
??_R3DrawableObject@@8 DD 00H				; DrawableObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2DrawableObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDrawableObject@@@8
_DATA	SEGMENT
??_R0?AVDrawableObject@@@8 DD FLAT:??_7type_info@@6B@	; DrawableObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDrawableObject@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DrawableObject@@6B@
rdata$r	SEGMENT
??_R4DrawableObject@@6B@ DD 00H				; DrawableObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDrawableObject@@@8
	DD	FLAT:??_R3DrawableObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_08KEOJDJOA@?$CF4?41f?5nm?$AA@
CONST	SEGMENT
??_C@_08KEOJDJOA@?$CF4?41f?5nm?$AA@ DB '%4.1f nm', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7DrawableBSP@@6B@
CONST	SEGMENT
??_7DrawableBSP@@6B@ DD FLAT:??_R4DrawableBSP@@6B@	; DrawableBSP::`vftable'
	DD	FLAT:??_EDrawableBSP@@UAEPAXI@Z
	DD	FLAT:?GetRadarSign@DrawableBSP@@UAEMXZ
	DD	FLAT:?SetLabel@DrawableBSP@@UAEXPADK@Z
	DD	FLAT:?SetInhibitFlag@DrawableBSP@@UAEXH@Z
	DD	FLAT:?Draw@DrawableBSP@@UAEXPAVRender3D@@@Z
	DD	FLAT:?Draw@DrawableBSP@@UAEXPAVRenderOTW@@H@Z
	DD	FLAT:?GetRayHit@DrawableBSP@@UAEHPBUTpoint@@0PAU2@M@Z
	DD	FLAT:?SetParentList@DrawableObject@@MAEXPAVObjectDisplayList@@@Z
CONST	ENDS
;	COMDAT ??_7DrawableObject@@6B@
CONST	SEGMENT
??_7DrawableObject@@6B@ DD FLAT:??_R4DrawableObject@@6B@ ; DrawableObject::`vftable'
	DD	FLAT:??_EDrawableObject@@UAEPAXI@Z
	DD	FLAT:?GetRadarSign@DrawableObject@@UAEMXZ
	DD	FLAT:?SetLabel@DrawableObject@@UAEXPADK@Z
	DD	FLAT:?SetInhibitFlag@DrawableObject@@UAEXH@Z
	DD	FLAT:?Draw@DrawableObject@@UAEXPAVRender3D@@@Z
	DD	FLAT:__purecall
	DD	FLAT:?GetRayHit@DrawableObject@@UAEHPBUTpoint@@0PAU2@M@Z
	DD	FLAT:?SetParentList@DrawableObject@@MAEXPAVObjectDisplayList@@@Z
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$??1DrawableBSP@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1DrawableBSP@@UAE@XZ$0
__unwindtable$??0DrawableBSP@@QAE@HPBUTpoint@@PBUTrotation@@M@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DrawableBSP@@QAE@HPBUTpoint@@PBUTrotation@@M@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0DrawableBSP@@QAE@HPBUTpoint@@PBUTrotation@@M@Z$1
__ehfuncinfo$??1DrawableBSP@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1DrawableBSP@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0DrawableBSP@@QAE@HPBUTpoint@@PBUTrotation@@M@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0DrawableBSP@@QAE@HPBUTpoint@@PBUTrotation@@M@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\realweather.h
;	COMDAT ?VisibleLimit@RealWeather@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?VisibleLimit@RealWeather@@QAEMXZ PROC			; RealWeather::VisibleLimit, COMDAT
; _this$ = ecx

; 146  : 	float	VisibleLimit(void) { return VisibleHeight; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+15972]
	mov	esp, ebp
	pop	ebp
	ret	0
?VisibleLimit@RealWeather@@QAEMXZ ENDP			; RealWeather::VisibleLimit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\fmath.h
;	COMDAT ?SqrtF@@YAMM@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
?SqrtF@@YAMM@Z PROC					; SqrtF, COMDAT

; 49   : {

	push	ebp
	mov	ebp, esp

; 50   : 	_asm
; 51   : 	{
; 52   : 		fld f;

	fld	DWORD PTR _f$[ebp]

; 53   : 		fsqrt;

	fsqrt

; 54   : 		fstp f;

	fstp	DWORD PTR _f$[ebp]

; 55   : 	}
; 56   : 
; 57   : 	return f;

	fld	DWORD PTR _f$[ebp]

; 58   : }

	pop	ebp
	ret	0
?SqrtF@@YAMM@Z ENDP					; SqrtF
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\fmath.h
;	COMDAT ?FabsF@@YAMM@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
?FabsF@@YAMM@Z PROC					; FabsF, COMDAT

; 37   : {

	push	ebp
	mov	ebp, esp

; 38   : 	_asm
; 39   : 	{
; 40   : 		fld f;

	fld	DWORD PTR _f$[ebp]

; 41   : 		fabs;

	fabs

; 42   : 		fstp f;

	fstp	DWORD PTR _f$[ebp]

; 43   : 	}
; 44   : 
; 45   : 	return f;

	fld	DWORD PTR _f$[ebp]

; 46   : }

	pop	ebp
	ret	0
?FabsF@@YAMM@Z ENDP					; FabsF
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?ObjectDynScalingOn@PlayerOptionsClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?ObjectDynScalingOn@PlayerOptionsClass@@QAEHXZ PROC	; PlayerOptionsClass::ObjectDynScalingOn, COMDAT
; _this$ = ecx

; 129  : 	int ObjectDynScalingOn (void)							{ return (ObjFlags & DISP_OBJ_DYN_SCALING) && TRUE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 4
	je	SHORT $LN3@ObjectDynS
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@ObjectDynS
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@ObjectDynS
$LN3@ObjectDynS:
	mov	DWORD PTR tv68[ebp], 0
$LN4@ObjectDynS:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?ObjectDynScalingOn@PlayerOptionsClass@@QAEHXZ ENDP	; PlayerOptionsClass::ObjectDynScalingOn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?ShadowsOn@PlayerOptionsClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?ShadowsOn@PlayerOptionsClass@@QAEHXZ PROC		; PlayerOptionsClass::ShadowsOn, COMDAT
; _this$ = ecx

; 120  : 	int ShadowsOn(void)										{ return (DispFlags & DISP_SHADOWS) && TRUE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 8
	je	SHORT $LN3@ShadowsOn
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@ShadowsOn
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@ShadowsOn
$LN3@ShadowsOn:
	mov	DWORD PTR tv68[ebp], 0
$LN4@ShadowsOn:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?ShadowsOn@PlayerOptionsClass@@QAEHXZ ENDP		; PlayerOptionsClass::ShadowsOn
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GDrawableBSP@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDrawableBSP@@UAEPAXI@Z PROC				; DrawableBSP::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DrawableBSP@@UAE@XZ			; DrawableBSP::~DrawableBSP
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDrawableBSP@@UAEPAXI@Z ENDP				; DrawableBSP::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\drawbsp.cpp
_TEXT	SEGMENT
_this$ = -104						; size = 4
_M$ = -100						; size = 36
_max$ = -64						; size = 12
_min$ = -52						; size = 12
_p2$ = -40						; size = 12
_p$ = -28						; size = 12
_p1$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_renderer$ = 8						; size = 4
?DrawBoundingBox@DrawableBSP@@IAEXPAVRender3D@@@Z PROC	; DrawableBSP::DrawBoundingBox
; _this$ = ecx

; 736  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 737  : 	Tpoint		max, min;
; 738  : 	Tpoint		p, p1, p2;
; 739  : 	Trotation	M;
; 740  : 
; 741  : 	ShiAssert( id >= 0 );
; 742  : 
; 743  : 	// TEMPORARY:  We're putting the data into the min/max structure in Erick's old
; 744  : 	//	x Right, y Down, z Front ordering to avoid changes in the code below....
; 745  : 	max.x = instance.BoxRight();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?BoxRight@ObjectInstance@@QBEMXZ	; ObjectInstance::BoxRight
	fstp	DWORD PTR _max$[ebp]

; 746  : 	max.y = instance.BoxBottom();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?BoxBottom@ObjectInstance@@QBEMXZ	; ObjectInstance::BoxBottom
	fstp	DWORD PTR _max$[ebp+4]

; 747  : 	max.z = instance.BoxFront();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?BoxFront@ObjectInstance@@QBEMXZ	; ObjectInstance::BoxFront
	fstp	DWORD PTR _max$[ebp+8]

; 748  : 	min.x = instance.BoxLeft();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?BoxLeft@ObjectInstance@@QBEMXZ		; ObjectInstance::BoxLeft
	fstp	DWORD PTR _min$[ebp]

; 749  : 	min.y = instance.BoxTop();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?BoxTop@ObjectInstance@@QBEMXZ		; ObjectInstance::BoxTop
	fstp	DWORD PTR _min$[ebp+4]

; 750  : 	min.z = instance.BoxBack();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?BoxBack@ObjectInstance@@QBEMXZ		; ObjectInstance::BoxBack
	fstp	DWORD PTR _min$[ebp+8]

; 751  : 
; 752  : 	// MatrixTranspose( &orientation, &M );
; 753  : 	M = orientation;

	mov	esi, DWORD PTR _this$[ebp]
	add	esi, 48					; 00000030H
	mov	ecx, 9
	lea	edi, DWORD PTR _M$[ebp]
	rep movsd

; 754  : 
; 755  : 	renderer->SetColor( 0xFF0000FF );

	push	-16776961				; ff0000ffH
	mov	eax, DWORD PTR _renderer$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _renderer$[ebp]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 756  : 
; 757  : 	// We need to transform the box into world space -- right now it is in object space
; 758  : 	p.x = max.z;	p.y = max.x;	p.z = max.y;

	movss	xmm0, DWORD PTR _max$[ebp+8]
	movss	DWORD PTR _p$[ebp], xmm0
	movss	xmm0, DWORD PTR _max$[ebp]
	movss	DWORD PTR _p$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _max$[ebp+4]
	movss	DWORD PTR _p$[ebp+8], xmm0

; 759  : 	MatrixMult( &M, &p, &p1 );

	lea	ecx, DWORD PTR _p1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _p$[ebp]
	push	edx
	lea	eax, DWORD PTR _M$[ebp]
	push	eax
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 760  : 	p1.x += position.x;	p1.y += position.y;	p1.z += position.z;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp]
	addss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR _p1$[ebp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp+4]
	addss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR _p1$[ebp+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp+8]
	addss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _p1$[ebp+8], xmm0

; 761  : 
; 762  : 	p.x = max.z;	p.y = max.x;	p.z = min.y;

	movss	xmm0, DWORD PTR _max$[ebp+8]
	movss	DWORD PTR _p$[ebp], xmm0
	movss	xmm0, DWORD PTR _max$[ebp]
	movss	DWORD PTR _p$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _min$[ebp+4]
	movss	DWORD PTR _p$[ebp+8], xmm0

; 763  : 	MatrixMult( &M, &p, &p2 );

	lea	ecx, DWORD PTR _p2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _p$[ebp]
	push	edx
	lea	eax, DWORD PTR _M$[ebp]
	push	eax
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 764  : 	p2.x += position.x;	p2.y += position.y;	p2.z += position.z;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp]
	addss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR _p2$[ebp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp+4]
	addss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR _p2$[ebp+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp+8]
	addss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _p2$[ebp+8], xmm0

; 765  : 
; 766  : 	renderer->Render3DLine( &p1, &p2 );

	lea	ecx, DWORD PTR _p2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _p1$[ebp]
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?Render3DLine@Render3D@@QAEXPAUTpoint@@0@Z ; Render3D::Render3DLine

; 767  : 
; 768  : 	p.x = min.z;	p.y = max.x;	p.z = max.y;

	movss	xmm0, DWORD PTR _min$[ebp+8]
	movss	DWORD PTR _p$[ebp], xmm0
	movss	xmm0, DWORD PTR _max$[ebp]
	movss	DWORD PTR _p$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _max$[ebp+4]
	movss	DWORD PTR _p$[ebp+8], xmm0

; 769  : 	MatrixMult( &M, &p, &p1 );

	lea	eax, DWORD PTR _p1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _p$[ebp]
	push	ecx
	lea	edx, DWORD PTR _M$[ebp]
	push	edx
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 770  : 	p1.x += position.x;	p1.y += position.y;	p1.z += position.z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp]
	addss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _p1$[ebp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp+4]
	addss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR _p1$[ebp+4], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp+8]
	addss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR _p1$[ebp+8], xmm0

; 771  : 
; 772  : 	p.x = min.z;	p.y = max.x;	p.z = min.y;

	movss	xmm0, DWORD PTR _min$[ebp+8]
	movss	DWORD PTR _p$[ebp], xmm0
	movss	xmm0, DWORD PTR _max$[ebp]
	movss	DWORD PTR _p$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _min$[ebp+4]
	movss	DWORD PTR _p$[ebp+8], xmm0

; 773  : 	MatrixMult( &M, &p, &p2 );

	lea	eax, DWORD PTR _p2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _p$[ebp]
	push	ecx
	lea	edx, DWORD PTR _M$[ebp]
	push	edx
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 774  : 	p2.x += position.x;	p2.y += position.y;	p2.z += position.z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp]
	addss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _p2$[ebp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp+4]
	addss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR _p2$[ebp+4], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp+8]
	addss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR _p2$[ebp+8], xmm0

; 775  : 
; 776  : 	renderer->Render3DLine( &p1, &p2 );

	lea	eax, DWORD PTR _p2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _p1$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?Render3DLine@Render3D@@QAEXPAUTpoint@@0@Z ; Render3D::Render3DLine

; 777  : 
; 778  : 	p.x = max.z;	p.y = min.x;	p.z = max.y;

	movss	xmm0, DWORD PTR _max$[ebp+8]
	movss	DWORD PTR _p$[ebp], xmm0
	movss	xmm0, DWORD PTR _min$[ebp]
	movss	DWORD PTR _p$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _max$[ebp+4]
	movss	DWORD PTR _p$[ebp+8], xmm0

; 779  : 	MatrixMult( &M, &p, &p1 );

	lea	edx, DWORD PTR _p1$[ebp]
	push	edx
	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	lea	ecx, DWORD PTR _M$[ebp]
	push	ecx
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 780  : 	p1.x += position.x;	p1.y += position.y;	p1.z += position.z;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp]
	addss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR _p1$[ebp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp+4]
	addss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _p1$[ebp+4], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp+8]
	addss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR _p1$[ebp+8], xmm0

; 781  : 
; 782  : 	p.x = max.z;	p.y = min.x;	p.z = min.y;

	movss	xmm0, DWORD PTR _max$[ebp+8]
	movss	DWORD PTR _p$[ebp], xmm0
	movss	xmm0, DWORD PTR _min$[ebp]
	movss	DWORD PTR _p$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _min$[ebp+4]
	movss	DWORD PTR _p$[ebp+8], xmm0

; 783  : 	MatrixMult( &M, &p, &p2 );

	lea	edx, DWORD PTR _p2$[ebp]
	push	edx
	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	lea	ecx, DWORD PTR _M$[ebp]
	push	ecx
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 784  : 	p2.x += position.x;	p2.y += position.y;	p2.z += position.z;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp]
	addss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR _p2$[ebp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp+4]
	addss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _p2$[ebp+4], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp+8]
	addss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR _p2$[ebp+8], xmm0

; 785  : 
; 786  : 	renderer->Render3DLine( &p1, &p2 );

	lea	edx, DWORD PTR _p2$[ebp]
	push	edx
	lea	eax, DWORD PTR _p1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?Render3DLine@Render3D@@QAEXPAUTpoint@@0@Z ; Render3D::Render3DLine

; 787  : 
; 788  : 	p.x = min.z;	p.y = min.x;	p.z = max.y;

	movss	xmm0, DWORD PTR _min$[ebp+8]
	movss	DWORD PTR _p$[ebp], xmm0
	movss	xmm0, DWORD PTR _min$[ebp]
	movss	DWORD PTR _p$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _max$[ebp+4]
	movss	DWORD PTR _p$[ebp+8], xmm0

; 789  : 	MatrixMult( &M, &p, &p1 );

	lea	ecx, DWORD PTR _p1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _p$[ebp]
	push	edx
	lea	eax, DWORD PTR _M$[ebp]
	push	eax
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 790  : 	p1.x += position.x;	p1.y += position.y;	p1.z += position.z;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp]
	addss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR _p1$[ebp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp+4]
	addss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR _p1$[ebp+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp+8]
	addss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _p1$[ebp+8], xmm0

; 791  : 
; 792  : 	p.x = min.z;	p.y = min.x;	p.z = min.y;

	movss	xmm0, DWORD PTR _min$[ebp+8]
	movss	DWORD PTR _p$[ebp], xmm0
	movss	xmm0, DWORD PTR _min$[ebp]
	movss	DWORD PTR _p$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _min$[ebp+4]
	movss	DWORD PTR _p$[ebp+8], xmm0

; 793  : 	MatrixMult( &M, &p, &p2 );

	lea	ecx, DWORD PTR _p2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _p$[ebp]
	push	edx
	lea	eax, DWORD PTR _M$[ebp]
	push	eax
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 794  : 	p2.x += position.x;	p2.y += position.y;	p2.z += position.z;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp]
	addss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR _p2$[ebp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp+4]
	addss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR _p2$[ebp+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp+8]
	addss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _p2$[ebp+8], xmm0

; 795  : 
; 796  : 	renderer->Render3DLine( &p1, &p2 );

	lea	ecx, DWORD PTR _p2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _p1$[ebp]
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?Render3DLine@Render3D@@QAEXPAUTpoint@@0@Z ; Render3D::Render3DLine

; 797  : 
; 798  : 	p.x = max.z;	p.y = max.x;	p.z = max.y;

	movss	xmm0, DWORD PTR _max$[ebp+8]
	movss	DWORD PTR _p$[ebp], xmm0
	movss	xmm0, DWORD PTR _max$[ebp]
	movss	DWORD PTR _p$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _max$[ebp+4]
	movss	DWORD PTR _p$[ebp+8], xmm0

; 799  : 	MatrixMult( &M, &p, &p1 );

	lea	eax, DWORD PTR _p1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _p$[ebp]
	push	ecx
	lea	edx, DWORD PTR _M$[ebp]
	push	edx
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 800  : 	p1.x += position.x;	p1.y += position.y;	p1.z += position.z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp]
	addss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _p1$[ebp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp+4]
	addss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR _p1$[ebp+4], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp+8]
	addss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR _p1$[ebp+8], xmm0

; 801  : 
; 802  : 	p.x = max.z;	p.y = min.x;	p.z = max.y;

	movss	xmm0, DWORD PTR _max$[ebp+8]
	movss	DWORD PTR _p$[ebp], xmm0
	movss	xmm0, DWORD PTR _min$[ebp]
	movss	DWORD PTR _p$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _max$[ebp+4]
	movss	DWORD PTR _p$[ebp+8], xmm0

; 803  : 	MatrixMult( &M, &p, &p2 );

	lea	eax, DWORD PTR _p2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _p$[ebp]
	push	ecx
	lea	edx, DWORD PTR _M$[ebp]
	push	edx
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 804  : 	p2.x += position.x;	p2.y += position.y;	p2.z += position.z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp]
	addss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _p2$[ebp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp+4]
	addss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR _p2$[ebp+4], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp+8]
	addss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR _p2$[ebp+8], xmm0

; 805  : 
; 806  : 	renderer->Render3DLine( &p1, &p2 );

	lea	eax, DWORD PTR _p2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _p1$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?Render3DLine@Render3D@@QAEXPAUTpoint@@0@Z ; Render3D::Render3DLine

; 807  : 
; 808  : 	p.x = min.z;	p.y = min.x;	p.z = max.y;

	movss	xmm0, DWORD PTR _min$[ebp+8]
	movss	DWORD PTR _p$[ebp], xmm0
	movss	xmm0, DWORD PTR _min$[ebp]
	movss	DWORD PTR _p$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _max$[ebp+4]
	movss	DWORD PTR _p$[ebp+8], xmm0

; 809  : 	MatrixMult( &M, &p, &p1 );

	lea	edx, DWORD PTR _p1$[ebp]
	push	edx
	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	lea	ecx, DWORD PTR _M$[ebp]
	push	ecx
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 810  : 	p1.x += position.x;	p1.y += position.y;	p1.z += position.z;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp]
	addss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR _p1$[ebp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp+4]
	addss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _p1$[ebp+4], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp+8]
	addss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR _p1$[ebp+8], xmm0

; 811  : 
; 812  : 	p.x = max.z;	p.y = min.x;	p.z = max.y;

	movss	xmm0, DWORD PTR _max$[ebp+8]
	movss	DWORD PTR _p$[ebp], xmm0
	movss	xmm0, DWORD PTR _min$[ebp]
	movss	DWORD PTR _p$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _max$[ebp+4]
	movss	DWORD PTR _p$[ebp+8], xmm0

; 813  : 	MatrixMult( &M, &p, &p2 );

	lea	edx, DWORD PTR _p2$[ebp]
	push	edx
	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	lea	ecx, DWORD PTR _M$[ebp]
	push	ecx
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 814  : 	p2.x += position.x;	p2.y += position.y;	p2.z += position.z;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp]
	addss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR _p2$[ebp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp+4]
	addss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _p2$[ebp+4], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp+8]
	addss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR _p2$[ebp+8], xmm0

; 815  : 
; 816  : 	renderer->Render3DLine( &p1, &p2 );

	lea	edx, DWORD PTR _p2$[ebp]
	push	edx
	lea	eax, DWORD PTR _p1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?Render3DLine@Render3D@@QAEXPAUTpoint@@0@Z ; Render3D::Render3DLine

; 817  : 
; 818  : 	p.x = min.z;	p.y = min.x;	p.z = max.y;

	movss	xmm0, DWORD PTR _min$[ebp+8]
	movss	DWORD PTR _p$[ebp], xmm0
	movss	xmm0, DWORD PTR _min$[ebp]
	movss	DWORD PTR _p$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _max$[ebp+4]
	movss	DWORD PTR _p$[ebp+8], xmm0

; 819  : 	MatrixMult( &M, &p, &p1 );

	lea	ecx, DWORD PTR _p1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _p$[ebp]
	push	edx
	lea	eax, DWORD PTR _M$[ebp]
	push	eax
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 820  : 	p1.x += position.x;	p1.y += position.y;	p1.z += position.z;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp]
	addss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR _p1$[ebp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp+4]
	addss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR _p1$[ebp+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp+8]
	addss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _p1$[ebp+8], xmm0

; 821  : 
; 822  : 	p.x = min.z;	p.y = max.x;	p.z = max.y;

	movss	xmm0, DWORD PTR _min$[ebp+8]
	movss	DWORD PTR _p$[ebp], xmm0
	movss	xmm0, DWORD PTR _max$[ebp]
	movss	DWORD PTR _p$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _max$[ebp+4]
	movss	DWORD PTR _p$[ebp+8], xmm0

; 823  : 	MatrixMult( &M, &p, &p2 );

	lea	ecx, DWORD PTR _p2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _p$[ebp]
	push	edx
	lea	eax, DWORD PTR _M$[ebp]
	push	eax
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 824  : 	p2.x += position.x;	p2.y += position.y;	p2.z += position.z;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp]
	addss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR _p2$[ebp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp+4]
	addss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR _p2$[ebp+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp+8]
	addss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _p2$[ebp+8], xmm0

; 825  : 
; 826  : 	renderer->Render3DLine( &p1, &p2 );

	lea	ecx, DWORD PTR _p2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _p1$[ebp]
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?Render3DLine@Render3D@@QAEXPAUTpoint@@0@Z ; Render3D::Render3DLine

; 827  : 
; 828  : 	p.x = min.z;	p.y = max.x;	p.z = max.y;

	movss	xmm0, DWORD PTR _min$[ebp+8]
	movss	DWORD PTR _p$[ebp], xmm0
	movss	xmm0, DWORD PTR _max$[ebp]
	movss	DWORD PTR _p$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _max$[ebp+4]
	movss	DWORD PTR _p$[ebp+8], xmm0

; 829  : 	MatrixMult( &M, &p, &p1 );

	lea	eax, DWORD PTR _p1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _p$[ebp]
	push	ecx
	lea	edx, DWORD PTR _M$[ebp]
	push	edx
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 830  : 	p1.x += position.x;	p1.y += position.y;	p1.z += position.z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp]
	addss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _p1$[ebp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp+4]
	addss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR _p1$[ebp+4], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp+8]
	addss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR _p1$[ebp+8], xmm0

; 831  : 
; 832  : 	p.x = max.z;	p.y = max.x;	p.z = max.y;

	movss	xmm0, DWORD PTR _max$[ebp+8]
	movss	DWORD PTR _p$[ebp], xmm0
	movss	xmm0, DWORD PTR _max$[ebp]
	movss	DWORD PTR _p$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _max$[ebp+4]
	movss	DWORD PTR _p$[ebp+8], xmm0

; 833  : 	MatrixMult( &M, &p, &p2 );

	lea	eax, DWORD PTR _p2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _p$[ebp]
	push	ecx
	lea	edx, DWORD PTR _M$[ebp]
	push	edx
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 834  : 	p2.x += position.x;	p2.y += position.y;	p2.z += position.z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp]
	addss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _p2$[ebp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp+4]
	addss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR _p2$[ebp+4], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp+8]
	addss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR _p2$[ebp+8], xmm0

; 835  : 
; 836  : 	renderer->Render3DLine( &p1, &p2 );

	lea	eax, DWORD PTR _p2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _p1$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?Render3DLine@Render3D@@QAEXPAUTpoint@@0@Z ; Render3D::Render3DLine

; 837  : 
; 838  : 	p.x = max.z;	p.y = max.x;	p.z = min.y;

	movss	xmm0, DWORD PTR _max$[ebp+8]
	movss	DWORD PTR _p$[ebp], xmm0
	movss	xmm0, DWORD PTR _max$[ebp]
	movss	DWORD PTR _p$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _min$[ebp+4]
	movss	DWORD PTR _p$[ebp+8], xmm0

; 839  : 	MatrixMult( &M, &p, &p1 );

	lea	edx, DWORD PTR _p1$[ebp]
	push	edx
	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	lea	ecx, DWORD PTR _M$[ebp]
	push	ecx
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 840  : 	p1.x += position.x;	p1.y += position.y;	p1.z += position.z;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp]
	addss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR _p1$[ebp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp+4]
	addss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _p1$[ebp+4], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp+8]
	addss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR _p1$[ebp+8], xmm0

; 841  : 
; 842  : 	p.x = max.z;	p.y = min.x;	p.z = min.y;

	movss	xmm0, DWORD PTR _max$[ebp+8]
	movss	DWORD PTR _p$[ebp], xmm0
	movss	xmm0, DWORD PTR _min$[ebp]
	movss	DWORD PTR _p$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _min$[ebp+4]
	movss	DWORD PTR _p$[ebp+8], xmm0

; 843  : 	MatrixMult( &M, &p, &p2 );

	lea	edx, DWORD PTR _p2$[ebp]
	push	edx
	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	lea	ecx, DWORD PTR _M$[ebp]
	push	ecx
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 844  : 	p2.x += position.x;	p2.y += position.y;	p2.z += position.z;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp]
	addss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR _p2$[ebp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp+4]
	addss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _p2$[ebp+4], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp+8]
	addss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR _p2$[ebp+8], xmm0

; 845  : 
; 846  : 	renderer->Render3DLine( &p1, &p2 );

	lea	edx, DWORD PTR _p2$[ebp]
	push	edx
	lea	eax, DWORD PTR _p1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?Render3DLine@Render3D@@QAEXPAUTpoint@@0@Z ; Render3D::Render3DLine

; 847  : 
; 848  : 	p.x = min.z;	p.y = min.x;	p.z = min.y;

	movss	xmm0, DWORD PTR _min$[ebp+8]
	movss	DWORD PTR _p$[ebp], xmm0
	movss	xmm0, DWORD PTR _min$[ebp]
	movss	DWORD PTR _p$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _min$[ebp+4]
	movss	DWORD PTR _p$[ebp+8], xmm0

; 849  : 	MatrixMult( &M, &p, &p1 );

	lea	ecx, DWORD PTR _p1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _p$[ebp]
	push	edx
	lea	eax, DWORD PTR _M$[ebp]
	push	eax
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 850  : 	p1.x += position.x;	p1.y += position.y;	p1.z += position.z;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp]
	addss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR _p1$[ebp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp+4]
	addss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR _p1$[ebp+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp+8]
	addss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _p1$[ebp+8], xmm0

; 851  : 
; 852  : 	p.x = max.z;	p.y = min.x;	p.z = min.y;

	movss	xmm0, DWORD PTR _max$[ebp+8]
	movss	DWORD PTR _p$[ebp], xmm0
	movss	xmm0, DWORD PTR _min$[ebp]
	movss	DWORD PTR _p$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _min$[ebp+4]
	movss	DWORD PTR _p$[ebp+8], xmm0

; 853  : 	MatrixMult( &M, &p, &p2 );

	lea	ecx, DWORD PTR _p2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _p$[ebp]
	push	edx
	lea	eax, DWORD PTR _M$[ebp]
	push	eax
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 854  : 	p2.x += position.x;	p2.y += position.y;	p2.z += position.z;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp]
	addss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR _p2$[ebp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp+4]
	addss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR _p2$[ebp+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp+8]
	addss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _p2$[ebp+8], xmm0

; 855  : 
; 856  : 	renderer->Render3DLine( &p1, &p2 );

	lea	ecx, DWORD PTR _p2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _p1$[ebp]
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?Render3DLine@Render3D@@QAEXPAUTpoint@@0@Z ; Render3D::Render3DLine

; 857  : 
; 858  : 	p.x = min.z;	p.y = min.x;	p.z = min.y;

	movss	xmm0, DWORD PTR _min$[ebp+8]
	movss	DWORD PTR _p$[ebp], xmm0
	movss	xmm0, DWORD PTR _min$[ebp]
	movss	DWORD PTR _p$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _min$[ebp+4]
	movss	DWORD PTR _p$[ebp+8], xmm0

; 859  : 	MatrixMult( &M, &p, &p1 );

	lea	eax, DWORD PTR _p1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _p$[ebp]
	push	ecx
	lea	edx, DWORD PTR _M$[ebp]
	push	edx
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 860  : 	p1.x += position.x;	p1.y += position.y;	p1.z += position.z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp]
	addss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _p1$[ebp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp+4]
	addss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR _p1$[ebp+4], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp+8]
	addss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR _p1$[ebp+8], xmm0

; 861  : 
; 862  : 	p.x = min.z;	p.y = max.x;	p.z = min.y;

	movss	xmm0, DWORD PTR _min$[ebp+8]
	movss	DWORD PTR _p$[ebp], xmm0
	movss	xmm0, DWORD PTR _max$[ebp]
	movss	DWORD PTR _p$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _min$[ebp+4]
	movss	DWORD PTR _p$[ebp+8], xmm0

; 863  : 	MatrixMult( &M, &p, &p2 );

	lea	eax, DWORD PTR _p2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _p$[ebp]
	push	ecx
	lea	edx, DWORD PTR _M$[ebp]
	push	edx
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 864  : 	p2.x += position.x;	p2.y += position.y;	p2.z += position.z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp]
	addss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _p2$[ebp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp+4]
	addss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR _p2$[ebp+4], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp+8]
	addss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR _p2$[ebp+8], xmm0

; 865  : 
; 866  : 	renderer->Render3DLine( &p1, &p2 );

	lea	eax, DWORD PTR _p2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _p1$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?Render3DLine@Render3D@@QAEXPAUTpoint@@0@Z ; Render3D::Render3DLine

; 867  : 
; 868  : 	p.x = min.z;	p.y = max.x;	p.z = min.y;

	movss	xmm0, DWORD PTR _min$[ebp+8]
	movss	DWORD PTR _p$[ebp], xmm0
	movss	xmm0, DWORD PTR _max$[ebp]
	movss	DWORD PTR _p$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _min$[ebp+4]
	movss	DWORD PTR _p$[ebp+8], xmm0

; 869  : 	MatrixMult( &M, &p, &p1 );

	lea	edx, DWORD PTR _p1$[ebp]
	push	edx
	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	lea	ecx, DWORD PTR _M$[ebp]
	push	ecx
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 870  : 	p1.x += position.x;	p1.y += position.y;	p1.z += position.z;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp]
	addss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR _p1$[ebp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp+4]
	addss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _p1$[ebp+4], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p1$[ebp+8]
	addss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR _p1$[ebp+8], xmm0

; 871  : 
; 872  : 	p.x = max.z;	p.y = max.x;	p.z = min.y;

	movss	xmm0, DWORD PTR _max$[ebp+8]
	movss	DWORD PTR _p$[ebp], xmm0
	movss	xmm0, DWORD PTR _max$[ebp]
	movss	DWORD PTR _p$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _min$[ebp+4]
	movss	DWORD PTR _p$[ebp+8], xmm0

; 873  : 	MatrixMult( &M, &p, &p2 );

	lea	edx, DWORD PTR _p2$[ebp]
	push	edx
	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	lea	ecx, DWORD PTR _M$[ebp]
	push	ecx
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 874  : 	p2.x += position.x;	p2.y += position.y;	p2.z += position.z;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp]
	addss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR _p2$[ebp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp+4]
	addss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _p2$[ebp+4], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp+8]
	addss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR _p2$[ebp+8], xmm0

; 875  : 
; 876  : 	renderer->Render3DLine( &p1, &p2 );

	lea	edx, DWORD PTR _p2$[ebp]
	push	edx
	lea	eax, DWORD PTR _p1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?Render3DLine@Render3D@@QAEXPAUTpoint@@0@Z ; Render3D::Render3DLine

; 877  : }

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?DrawBoundingBox@DrawableBSP@@IAEXPAVRender3D@@@Z ENDP	; DrawableBSP::DrawBoundingBox
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\drawbsp.cpp
_TEXT	SEGMENT
_rc$ = 8						; size = 4
?ReleaseTexturesOnDevice@DrawableBSP@@SAXPAVDXContext@@@Z PROC ; DrawableBSP::ReleaseTexturesOnDevice

; 901  : {

	push	ebp
	mov	ebp, esp

; 902  : 	// Stop receiving time updates
; 903  : 	TheTimeManager.ReleaseTimeUpdateCB( TimeUpdateCallback, NULL );

	push	0
	push	OFFSET ?TimeUpdateCallback@DrawableBSP@@KAXPAX@Z ; DrawableBSP::TimeUpdateCallback
	mov	ecx, OFFSET ?TheTimeManager@@3VTimeManager@@A ; TheTimeManager
	call	?ReleaseTimeUpdateCB@TimeManager@@QAEXP6AXPAX@Z0@Z ; TimeManager::ReleaseTimeUpdateCB

; 904  : }

	pop	ebp
	ret	0
?ReleaseTexturesOnDevice@DrawableBSP@@SAXPAVDXContext@@@Z ENDP ; DrawableBSP::ReleaseTexturesOnDevice
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\drawbsp.cpp
_TEXT	SEGMENT
_rc$ = 8						; size = 4
?SetupTexturesOnDevice@DrawableBSP@@SAXPAVDXContext@@@Z PROC ; DrawableBSP::SetupTexturesOnDevice

; 887  : {

	push	ebp
	mov	ebp, esp

; 888  : 	// Initialize the lighting conditions and register for future time of day updates
; 889  : 	TimeUpdateCallback( NULL );

	push	0
	call	?TimeUpdateCallback@DrawableBSP@@KAXPAX@Z ; DrawableBSP::TimeUpdateCallback
	add	esp, 4

; 890  : 	TheTimeManager.RegisterTimeUpdateCB( TimeUpdateCallback, NULL );

	push	0
	push	OFFSET ?TimeUpdateCallback@DrawableBSP@@KAXPAX@Z ; DrawableBSP::TimeUpdateCallback
	mov	ecx, OFFSET ?TheTimeManager@@3VTimeManager@@A ; TheTimeManager
	call	?RegisterTimeUpdateCB@TimeManager@@QAEXP6AXPAX@Z0@Z ; TimeManager::RegisterTimeUpdateCB

; 891  : }

	pop	ebp
	ret	0
?SetupTexturesOnDevice@DrawableBSP@@SAXPAVDXContext@@@Z ENDP ; DrawableBSP::SetupTexturesOnDevice
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\drawbsp.cpp
_TEXT	SEGMENT
_light$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 4
?TimeUpdateCallback@DrawableBSP@@KAXPAX@Z PROC		; DrawableBSP::TimeUpdateCallback

; 915  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 916  : 	Tcolor	light;
; 917  : 
; 918  : 	// Get the light level from the time of day manager
; 919  : 	TheTimeOfDay.GetTextureLightingColor( &light );

	lea	eax, DWORD PTR _light$[ebp]
	push	eax
	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetTextureLightingColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ; CTimeOfDay::GetTextureLightingColor

; 920  : 
; 921  : 	// Update the staticly lit object colors
; 922  : 	TheColorBank.SetLight( light.r, light.g, light.b );

	push	ecx
	movss	xmm0, DWORD PTR _light$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _light$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _light$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SetLight@ColorBankClass@@SAXMMM@Z	; ColorBankClass::SetLight
	add	esp, 12					; 0000000cH

; 923  : 
; 924  : /*JAM 05Jan04
; 925  : 	// Update all the textures which aren't dynamicly lit
; 926  : 	ThePaletteBank.LightReflectionPalette( 2, &light );
; 927  : 	ThePaletteBank.LightBuildingPalette( 3, &light );*/
; 928  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?TimeUpdateCallback@DrawableBSP@@KAXPAX@Z ENDP		; DrawableBSP::TimeUpdateCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawbsp.h
;	COMDAT ?GetRadarSign@DrawableBSP@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRadarSign@DrawableBSP@@UAEMXZ PROC			; DrawableBSP::GetRadarSign, COMDAT
; _this$ = ecx

; 90   : 	float	GetRadarSign(void)		{ return RadarSign; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+168]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRadarSign@DrawableBSP@@UAEMXZ ENDP			; DrawableBSP::GetRadarSign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\drawbsp.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_minB$ = 8						; size = 4
_maxB$ = 12						; size = 4
?GetBoundingBox@DrawableBSP@@QAEXPAUTpoint@@0@Z PROC	; DrawableBSP::GetBoundingBox
; _this$ = ecx

; 934  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 935  : 	minB->x = instance.BoxBack();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?BoxBack@ObjectInstance@@QBEMXZ		; ObjectInstance::BoxBack
	mov	eax, DWORD PTR _minB$[ebp]
	fstp	DWORD PTR [eax]

; 936  : 	minB->y = instance.BoxLeft();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?BoxLeft@ObjectInstance@@QBEMXZ		; ObjectInstance::BoxLeft
	mov	ecx, DWORD PTR _minB$[ebp]
	fstp	DWORD PTR [ecx+4]

; 937  : 	minB->z = instance.BoxTop();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?BoxTop@ObjectInstance@@QBEMXZ		; ObjectInstance::BoxTop
	mov	edx, DWORD PTR _minB$[ebp]
	fstp	DWORD PTR [edx+8]

; 938  : 	maxB->x = instance.BoxFront();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?BoxFront@ObjectInstance@@QBEMXZ	; ObjectInstance::BoxFront
	mov	eax, DWORD PTR _maxB$[ebp]
	fstp	DWORD PTR [eax]

; 939  : 	maxB->y = instance.BoxRight();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?BoxRight@ObjectInstance@@QBEMXZ	; ObjectInstance::BoxRight
	mov	ecx, DWORD PTR _maxB$[ebp]
	fstp	DWORD PTR [ecx+4]

; 940  : 	maxB->z = instance.BoxBottom();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?BoxBottom@ObjectInstance@@QBEMXZ	; ObjectInstance::BoxBottom
	mov	edx, DWORD PTR _maxB$[ebp]
	fstp	DWORD PTR [edx+8]

; 941  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetBoundingBox@DrawableBSP@@QAEXPAUTpoint@@0@Z ENDP	; DrawableBSP::GetBoundingBox
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\drawbsp.cpp
_TEXT	SEGMENT
_x$ = -68						; size = 4
_y$ = -64						; size = 4
_this$ = -60						; size = 4
_labelPoint$ = -56					; size = 52
__$ArrayPad$ = -4					; size = 4
_renderer$ = 8						; size = 4
?Draw@DrawableBSP@@UAEXPAVRender3D@@@Z PROC		; DrawableBSP::Draw
; _this$ = ecx

; 689  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 690  : 	ThreeDVertex	labelPoint;
; 691  : 	float			x, y;
; 692  : 
; 693  : 	ShiAssert( id >= 0 );
; 694  : 
; 695  : 	if (!renderer)

	cmp	DWORD PTR _renderer$[ebp], 0
	jne	SHORT $LN3@Draw

; 696  : 		return;

	jmp	$LN4@Draw
$LN3@Draw:

; 697  : 
; 698  : 	// RED - NOPE - must be similar to any object
; 699  : 	// Make sure no left over fog affects this object...
; 700  : 	//TheStateStack.SetFog(1.f,NULL); //JAM 26Dec03
; 701  : 
; 702  : 	TheStateStack.DrawObject( &instance, &orientation, &position, scale );

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 48					; 00000030H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 84					; 00000054H
	push	eax
	call	?DrawObject@StateStackClass@@SAXPAVObjectInstance@@PBUTrotation@@PBUTpoint@@M@Z ; StateStackClass::DrawObject
	add	esp, 16					; 00000010H

; 703  : 
; 704  : #ifdef	DEBUG_LOD_ID
; 705  : 	// Now compute the starting location for our label text
; 706  : 	if (drawLabels && TheDXEngine.GetLodUsedLabel()[0]) {
; 707  : 		renderer->TransformPoint( &position, &labelPoint );
; 708  : 		if ( labelPoint.clipFlag == ON_SCREEN ) {
; 709  : 			x = labelPoint.x - labelLen;		// Centers text
; 710  : 			y = labelPoint.y - 12;				// Place text above center of object
; 711  : 			renderer->SetFont (2);
; 712  : 			renderer->SetColor( labelColor );
; 713  : 			renderer->ScreenText( x, y, TheDXEngine.GetLodUsedLabel() );
; 714  : 		}
; 715  : 	}
; 716  : #else
; 717  : 	// Now compute the starting location for our label text
; 718  : 	if (drawLabels && labelLen) {

	cmp	DWORD PTR ?drawLabels@DrawableBSP@@2HA, 0 ; DrawableBSP::drawLabels
	je	$LN1@Draw
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+160], 0
	je	$LN1@Draw

; 719  : 		renderer->TransformPoint( &position, &labelPoint );

	lea	edx, DWORD PTR _labelPoint$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformPoint

; 720  : 		if ( labelPoint.clipFlag == ON_SCREEN ) {

	cmp	DWORD PTR _labelPoint$[ebp+36], 0
	jne	SHORT $LN1@Draw

; 721  : 			x = labelPoint.x - labelLen;		// Centers text

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+160]
	movss	xmm1, DWORD PTR _labelPoint$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _x$[ebp], xmm1

; 722  : 			y = labelPoint.y - 12;				// Place text above center of object

	movss	xmm0, DWORD PTR _labelPoint$[ebp+4]
	subss	xmm0, DWORD PTR __real@41400000
	movss	DWORD PTR _y$[ebp], xmm0

; 723  : 			renderer->SetColor( labelColor );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _renderer$[ebp]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 724  : 			renderer->ScreenText( x, y, label );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _renderer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _renderer$[ebp]
	mov	edx, DWORD PTR [eax+100]
	call	edx
$LN1@Draw:
$LN4@Draw:

; 725  : 		}
; 726  : 	}
; 727  : #endif
; 728  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?Draw@DrawableBSP@@UAEXPAVRender3D@@@Z ENDP		; DrawableBSP::Draw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\drawbsp.cpp
_TEXT	SEGMENT
tv688 = -268						; size = 4
_newlabelColor$1 = -264					; size = 4
_b$2 = -260						; size = 4
_x$ = -256						; size = 4
tv676 = -252						; size = 4
_y2$3 = -248						; size = 4
_r$4 = -244						; size = 4
_y$ = -240						; size = 4
_g$5 = -236						; size = 4
_limit$6 = -232						; size = 4
_x2$7 = -228						; size = 4
tv682 = -224						; size = 4
_isShadow$ = -220					; size = 4
_dy$8 = -216						; size = 4
tv245 = -212						; size = 4
tv431 = -208						; size = 4
_dz$9 = -204						; size = 4
tv317 = -200						; size = 4
_dy$10 = -196						; size = 4
_dx$11 = -192						; size = 4
tv354 = -188						; size = 4
_dx$12 = -184						; size = 4
tv445 = -180						; size = 4
tv439 = -176						; size = 4
_dz$13 = -172						; size = 4
_limitcheck$14 = -168					; size = 4
_interp$15 = -164					; size = 4
_range$16 = -160					; size = 4
_blue$17 = -156						; size = 4
_green$18 = -152					; size = 4
_red$19 = -148						; size = 4
_scalefactor$ = -144					; size = 4
_row$20 = -140						; size = 4
_col$21 = -136						; size = 4
_colorsub$22 = -132					; size = 4
_this$ = -128						; size = 4
_labelPoint$ = -124					; size = 52
_pv$23 = -72						; size = 12
_light$24 = -60						; size = 12
_light$25 = -48						; size = 12
_label2$26 = -36					; size = 32
__$ArrayPad$ = -4					; size = 4
_renderer$ = 8						; size = 4
___formal$ = 12						; size = 4
?Draw@DrawableBSP@@UAEXPAVRenderOTW@@H@Z PROC		; DrawableBSP::Draw
; _this$ = ecx

; 513  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 514  : 	ThreeDVertex	labelPoint;
; 515  : 	float			x, y;
; 516  : 
; 517  : 	ShiAssert( id >= 0 );
; 518  : 
; 519  : 	// check for inhibit
; 520  : 	if (inhibitDraw) { SetInhibitFlag(FALSE); return; }

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+124], 0
	je	SHORT $LN32@Draw
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	jmp	$LN33@Draw
$LN32@Draw:

; 521  : 
; 522  : 	if(!SetupVisibility(renderer)) return;

	mov	ecx, DWORD PTR _renderer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetupVisibility@DrawableBSP@@QAE_NPAVRenderOTW@@@Z ; DrawableBSP::SetupVisibility
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN31@Draw
	jmp	$LN33@Draw
$LN31@Draw:

; 523  : 
; 524  : 	// JB 010112
; 525  : 	float scalefactor = 1;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _scalefactor$[ebp], xmm0

; 526  : 	if (g_bSmartScaling || PlayerOptions.ObjectDynScalingOn())

	movzx	eax, BYTE PTR ?g_bSmartScaling@@3_NA	; g_bSmartScaling
	test	eax, eax
	jne	SHORT $LN29@Draw
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?ObjectDynScalingOn@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::ObjectDynScalingOn
	test	eax, eax
	je	$LN24@Draw
$LN29@Draw:

; 527  : 	{
; 528  : 		renderer->TransformPoint( &position, &labelPoint );

	lea	ecx, DWORD PTR _labelPoint$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformPoint

; 529  : 		if (radius <= 150 && (GetClass() == Guys || GetClass() == GroundVehicle || GetClass() == BSP)) 

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@43160000
	comiss	xmm0, DWORD PTR [eax+16]
	jb	SHORT $LN28@Draw
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClass@DrawableObject@@QBE?AW4DrawClass@1@XZ ; DrawableObject::GetClass
	cmp	eax, 3
	je	SHORT $LN27@Draw
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClass@DrawableObject@@QBE?AW4DrawClass@1@XZ ; DrawableObject::GetClass
	cmp	eax, 2
	je	SHORT $LN27@Draw
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClass@DrawableObject@@QBE?AW4DrawClass@1@XZ ; DrawableObject::GetClass
	cmp	eax, 1
	jne	SHORT $LN28@Draw
$LN27@Draw:

; 530  : 			scalefactor = (labelPoint.csZ - 1200) / 6076 + 1; 

	movss	xmm0, DWORD PTR _labelPoint$[ebp+48]
	subss	xmm0, DWORD PTR __real@44960000
	divss	xmm0, DWORD PTR __real@45bde000
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _scalefactor$[ebp], xmm0
$LN28@Draw:

; 531  : 		if (scalefactor < 1) 

	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR _scalefactor$[ebp]
	jbe	SHORT $LN26@Draw

; 532  : 			scalefactor = 1;	

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _scalefactor$[ebp], xmm0
	jmp	SHORT $LN24@Draw
$LN26@Draw:

; 533  : 		else if (scalefactor > 2)	

	movss	xmm0, DWORD PTR _scalefactor$[ebp]
	comiss	xmm0, DWORD PTR __real@40000000
	jbe	SHORT $LN24@Draw

; 534  : 			scalefactor = 2;

	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _scalefactor$[ebp], xmm0
$LN24@Draw:

; 535  : 	}
; 536  : 	// JB 010112
; 537  : 
; 538  : 	// Draw the object
; 539  : 	//JAM 09Dec03
; 540  : 
; 541  : 	BOOL isShadow = FALSE;

	mov	DWORD PTR _isShadow$[ebp], 0

; 542  : 
; 543  : 	if(PlayerOptions.ShadowsOn() && realWeather->weatherCondition == FAIR)

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?ShadowsOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::ShadowsOn
	test	eax, eax
	je	$LN20@Draw
	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	cmp	DWORD PTR [ecx+15688], 2
	jne	$LN20@Draw

; 544  : 	{
; 545  : 		Tpoint pv;
; 546  : 		Tcolor light;
; 547  : 
; 548  : 		TheTimeOfDay.GetTextureLightingColor(&light);

	lea	edx, DWORD PTR _light$24[ebp]
	push	edx
	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetTextureLightingColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ; CTimeOfDay::GetTextureLightingColor

; 549  : 		renderer->TransformPointToViewSwapped(&position,&pv);

	lea	eax, DWORD PTR _pv$23[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformPointToViewSwapped@Render3D@@QAEXPAUTpoint@@0@Z ; Render3D::TransformPointToViewSwapped

; 550  : 
; 551  : 		for(int row = 2; row < realWeather->numCells-2; row++)

	mov	DWORD PTR _row$20[ebp], 2
	jmp	SHORT $LN22@Draw
$LN21@Draw:
	mov	edx, DWORD PTR _row$20[ebp]
	add	edx, 1
	mov	DWORD PTR _row$20[ebp], edx
$LN22@Draw:
	mov	eax, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	mov	ecx, DWORD PTR [eax+15660]
	sub	ecx, 2
	cmp	DWORD PTR _row$20[ebp], ecx
	jge	$LN20@Draw

; 552  : 		{
; 553  : 			for(int col = 2; col < realWeather->numCells-2; col++)

	mov	DWORD PTR _col$21[ebp], 2
	jmp	SHORT $LN19@Draw
$LN18@Draw:
	mov	edx, DWORD PTR _col$21[ebp]
	add	edx, 1
	mov	DWORD PTR _col$21[ebp], edx
$LN19@Draw:
	mov	eax, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	mov	ecx, DWORD PTR [eax+15660]
	sub	ecx, 2
	cmp	DWORD PTR _col$21[ebp], ecx
	jge	$LN17@Draw

; 554  : 			{
; 555  : 				if(realWeather->weatherCellArray[row][col].onScreen)

	mov	edx, DWORD PTR _row$20[ebp]
	imul	edx, 1728				; 000006c0H
	mov	eax, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	lea	ecx, DWORD PTR [eax+edx+108]
	mov	edx, DWORD PTR _col$21[ebp]
	imul	edx, 192				; 000000c0H
	cmp	DWORD PTR [ecx+edx], 0
	je	$LN15@Draw

; 556  : 				{
; 557  : 					float dx = pv.x-realWeather->weatherCellArray[row][col].shadowPos.x;

	mov	eax, DWORD PTR _row$20[ebp]
	imul	eax, 1728				; 000006c0H
	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	lea	edx, DWORD PTR [ecx+eax+108]
	mov	eax, DWORD PTR _col$21[ebp]
	imul	eax, 192				; 000000c0H
	movss	xmm0, DWORD PTR _pv$23[ebp]
	subss	xmm0, DWORD PTR [edx+eax+4]
	movss	DWORD PTR _dx$11[ebp], xmm0

; 558  : 					float dy = pv.y-realWeather->weatherCellArray[row][col].shadowPos.y;

	mov	ecx, DWORD PTR _row$20[ebp]
	imul	ecx, 1728				; 000006c0H
	mov	edx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	lea	eax, DWORD PTR [edx+ecx+108]
	mov	ecx, DWORD PTR _col$21[ebp]
	imul	ecx, 192				; 000000c0H
	movss	xmm0, DWORD PTR _pv$23[ebp+4]
	subss	xmm0, DWORD PTR [eax+ecx+8]
	movss	DWORD PTR _dy$10[ebp], xmm0

; 559  : 					float dz = pv.z-realWeather->weatherCellArray[row][col].shadowPos.z; 

	mov	edx, DWORD PTR _row$20[ebp]
	imul	edx, 1728				; 000006c0H
	mov	eax, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	lea	ecx, DWORD PTR [eax+edx+108]
	mov	edx, DWORD PTR _col$21[ebp]
	imul	edx, 192				; 000000c0H
	movss	xmm0, DWORD PTR _pv$23[ebp+8]
	subss	xmm0, DWORD PTR [ecx+edx+12]
	movss	DWORD PTR _dz$9[ebp], xmm0

; 560  : 					float range = FabsF(SqrtF(dx*dx+dy*dy+dz*dz));

	movss	xmm0, DWORD PTR _dx$11[ebp]
	mulss	xmm0, DWORD PTR _dx$11[ebp]
	movss	xmm1, DWORD PTR _dy$10[ebp]
	mulss	xmm1, DWORD PTR _dy$10[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _dz$9[ebp]
	mulss	xmm1, DWORD PTR _dz$9[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtF@@YAMM@Z				; SqrtF
	fstp	DWORD PTR [esp]
	call	?FabsF@@YAMM@Z				; FabsF
	add	esp, 4
	fstp	DWORD PTR _range$16[ebp]

; 561  : 
; 562  : 					if(range < realWeather->cloudRadius)

	mov	eax, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	movss	xmm0, DWORD PTR [eax+15736]
	comiss	xmm0, DWORD PTR _range$16[ebp]
	jbe	$LN15@Draw

; 563  : 					{
; 564  : 						isShadow = TRUE;

	mov	DWORD PTR _isShadow$[ebp], 1

; 565  : 
; 566  : 						float interp = max(1.f-(realWeather->cloudRadius-range)/realWeather->cloudRadius,.5f);

	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	movss	xmm0, DWORD PTR [ecx+15736]
	subss	xmm0, DWORD PTR _range$16[ebp]
	mov	edx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	divss	xmm0, DWORD PTR [edx+15736]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	comiss	xmm1, DWORD PTR __real@3f000000
	jbe	SHORT $LN35@Draw
	mov	eax, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	movss	xmm0, DWORD PTR [eax+15736]
	subss	xmm0, DWORD PTR _range$16[ebp]
	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	divss	xmm0, DWORD PTR [ecx+15736]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	DWORD PTR tv245[ebp], xmm1
	jmp	SHORT $LN36@Draw
$LN35@Draw:
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv245[ebp], xmm0
$LN36@Draw:
	movss	xmm0, DWORD PTR tv245[ebp]
	movss	DWORD PTR _interp$15[ebp], xmm0

; 567  : 
; 568  : 						float r = interp*light.r;

	movss	xmm0, DWORD PTR _interp$15[ebp]
	mulss	xmm0, DWORD PTR _light$24[ebp]
	movss	DWORD PTR _r$4[ebp], xmm0

; 569  : 						float g = interp*light.g;

	movss	xmm0, DWORD PTR _interp$15[ebp]
	mulss	xmm0, DWORD PTR _light$24[ebp+4]
	movss	DWORD PTR _g$5[ebp], xmm0

; 570  : 						float b = interp*light.b;

	movss	xmm0, DWORD PTR _interp$15[ebp]
	mulss	xmm0, DWORD PTR _light$24[ebp+8]
	movss	DWORD PTR _b$2[ebp], xmm0

; 571  : 
; 572  : 						TheColorBank.SetLight(r,g,b);

	push	ecx
	movss	xmm0, DWORD PTR _b$2[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _g$5[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _r$4[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SetLight@ColorBankClass@@SAXMMM@Z	; ColorBankClass::SetLight
	add	esp, 12					; 0000000cH
$LN15@Draw:

; 573  : 					}
; 574  : 				}
; 575  : 			}

	jmp	$LN18@Draw
$LN17@Draw:

; 576  : 		}

	jmp	$LN21@Draw
$LN20@Draw:

; 577  : 	}
; 578  : 
; 579  : 	if (g_bSmartScaling || PlayerOptions.ObjectDynScalingOn())

	movzx	edx, BYTE PTR ?g_bSmartScaling@@3_NA	; g_bSmartScaling
	test	edx, edx
	jne	SHORT $LN13@Draw
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?ObjectDynScalingOn@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::ObjectDynScalingOn
	test	eax, eax
	je	SHORT $LN14@Draw
$LN13@Draw:

; 580  : 		TheStateStack.DrawObject( &instance, &orientation, &position, scale * scalefactor); // JB 010112 added scalefactor

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR _scalefactor$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 48					; 00000030H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 84					; 00000054H
	push	eax
	call	?DrawObject@StateStackClass@@SAXPAVObjectInstance@@PBUTrotation@@PBUTpoint@@M@Z ; StateStackClass::DrawObject
	add	esp, 16					; 00000010H

; 581  : 	else

	jmp	SHORT $LN12@Draw
$LN14@Draw:

; 582  : 		TheStateStack.DrawObject( &instance, &orientation, &position, scale);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+20]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	push	ecx
	call	?DrawObject@StateStackClass@@SAXPAVObjectInstance@@PBUTrotation@@PBUTpoint@@M@Z ; StateStackClass::DrawObject
	add	esp, 16					; 00000010H
$LN12@Draw:

; 583  : 
; 584  : 	if(isShadow)

	cmp	DWORD PTR _isShadow$[ebp], 0
	je	SHORT $LN11@Draw

; 585  : 	{
; 586  : 		Tcolor light;
; 587  : 
; 588  : 		TheTimeOfDay.GetTextureLightingColor(&light);

	lea	edx, DWORD PTR _light$25[ebp]
	push	edx
	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetTextureLightingColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ; CTimeOfDay::GetTextureLightingColor

; 589  : 		TheColorBank.SetLight(light.r,light.g,light.b);

	push	ecx
	movss	xmm0, DWORD PTR _light$25[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _light$25[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _light$25[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SetLight@ColorBankClass@@SAXMMM@Z	; ColorBankClass::SetLight
	add	esp, 12					; 0000000cH
$LN11@Draw:

; 590  : 	}
; 591  : 
; 592  : 
; 593  : #ifdef	DEBUG_LOD_ID
; 594  : 	// Now compute the starting location for our label text
; 595  : 	if (drawLabels && TheDXEngine.GetLodUsedLabel()[0]) {
; 596  : 		renderer->TransformPoint( &position, &labelPoint );
; 597  : 		if ( labelPoint.clipFlag == ON_SCREEN ) {
; 598  : 			x = labelPoint.x - labelLen;		// Centers text
; 599  : 			y = labelPoint.y - 12;				// Place text above center of object
; 600  : 			renderer->SetColor( labelColor );
; 601  : 			renderer->SetFont (2);
; 602  : 			renderer->ScreenText( x, y, TheDXEngine.GetLodUsedLabel() );
; 603  : 		}
; 604  : 	}
; 605  : #else
; 606  : 	// Now compute the starting location for our label text
; 607  : 	if (drawLabels && labelLen) {

	cmp	DWORD PTR ?drawLabels@DrawableBSP@@2HA, 0 ; DrawableBSP::drawLabels
	je	$LN2@Draw
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+160], 0
	je	$LN2@Draw

; 608  : 		if (!g_bSmartScaling && !PlayerOptions.ObjectDynScalingOn())

	movzx	ecx, BYTE PTR ?g_bSmartScaling@@3_NA	; g_bSmartScaling
	test	ecx, ecx
	jne	SHORT $LN9@Draw
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?ObjectDynScalingOn@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::ObjectDynScalingOn
	test	eax, eax
	jne	SHORT $LN9@Draw

; 609  : 			renderer->TransformPoint( &position, &labelPoint ); // JB 010112

	lea	edx, DWORD PTR _labelPoint$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformPoint
$LN9@Draw:

; 610  : 		
; 611  : // JB 000807	Add near label limit and labels that get brighter as they get closer
; 612  : //		if ( labelPoint.clipFlag == ON_SCREEN )//-
; 613  : //		{//-
; 614  : //			x = labelPoint.x - renderer->ScreenTextWidth(label) / 2;		// Centers text//-
; 615  : //			y = labelPoint.y - 12;				// Place text above center of object//-
; 616  : //			renderer->SetColor( labelColor );//-
; 617  : //			renderer->ScreenText( x, y, label );//-
; 618  : //		} //-
; 619  : 
; 620  : 		// RV - RED - If ACMI force Label Limit to 150 nMiles
; 621  : 		long limit = (renderACMI?150:g_nNearLabelLimit) * 6076 + 8,limitcheck;

	cmp	DWORD PTR ?renderACMI@@3HA, 0		; renderACMI
	je	SHORT $LN37@Draw
	mov	DWORD PTR tv317[ebp], 150		; 00000096H
	jmp	SHORT $LN38@Draw
$LN37@Draw:
	mov	ecx, DWORD PTR ?g_nNearLabelLimit@@3HA	; g_nNearLabelLimit
	mov	DWORD PTR tv317[ebp], ecx
$LN38@Draw:
	mov	edx, DWORD PTR tv317[ebp]
	imul	edx, 6076				; 000017bcH
	add	edx, 8
	mov	DWORD PTR _limit$6[ebp], edx

; 622  : 		if (!DrawablePoint::drawLabels)

	cmp	DWORD PTR ?drawLabels@DrawablePoint@@2HA, 0 ; DrawablePoint::drawLabels
	jne	SHORT $LN8@Draw

; 623  : 			limitcheck = (renderACMI?150:g_nNearLabelLimit) * 6076 + 8;

	cmp	DWORD PTR ?renderACMI@@3HA, 0		; renderACMI
	je	SHORT $LN39@Draw
	mov	DWORD PTR tv354[ebp], 150		; 00000096H
	jmp	SHORT $LN40@Draw
$LN39@Draw:
	mov	eax, DWORD PTR ?g_nNearLabelLimit@@3HA	; g_nNearLabelLimit
	mov	DWORD PTR tv354[ebp], eax
$LN40@Draw:
	mov	ecx, DWORD PTR tv354[ebp]
	imul	ecx, 6076				; 000017bcH
	add	ecx, 8
	mov	DWORD PTR _limitcheck$14[ebp], ecx
	jmp	SHORT $LN7@Draw
$LN8@Draw:

; 624  : 		else limitcheck = 300 * 6076+8; // 

	mov	DWORD PTR _limitcheck$14[ebp], 1822808	; 001bd058H
$LN7@Draw:

; 625  : 
; 626  : //dpc LabelRadialDistanceFix
; 627  : //First check if Z distance is below "limitcheck" and only if it is then do additional
; 628  : //radial distance check (messes up .csZ value - but it shouldn't matter
; 629  : // since labelPoint is local and .csZ is not used afterwards)
; 630  : // Besides no need to calculate radial distance is Z distance is already greater
; 631  : 		if (g_bLabelRadialFix)

	movzx	edx, BYTE PTR ?g_bLabelRadialFix@@3_NA	; g_bLabelRadialFix
	test	edx, edx
	je	$LN5@Draw

; 632  : 			if (labelPoint.clipFlag == ON_SCREEN &&
; 633  : 				labelPoint.csZ < limitcheck)			//Same condition as below!!!

	cmp	DWORD PTR _labelPoint$[ebp+36], 0
	jne	$LN5@Draw
	cvtsi2ss xmm0, DWORD PTR _limitcheck$14[ebp]
	comiss	xmm0, DWORD PTR _labelPoint$[ebp+48]
	jbe	$LN5@Draw

; 634  : 			{
; 635  : 				float dx = position.x - renderer->X();

	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?X@Render3D@@QAEMXZ			; Render3D::X
	fstp	DWORD PTR tv676[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR tv676[ebp]
	movss	DWORD PTR _dx$12[ebp], xmm0

; 636  : 				float dy = position.y - renderer->Y();

	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?Y@Render3D@@QAEMXZ			; Render3D::Y
	fstp	DWORD PTR tv682[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	subss	xmm0, DWORD PTR tv682[ebp]
	movss	DWORD PTR _dy$8[ebp], xmm0

; 637  : 				float dz = position.z - renderer->Z();

	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?Z@Render3D@@QAEMXZ			; Render3D::Z
	fstp	DWORD PTR tv688[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+12]
	subss	xmm0, DWORD PTR tv688[ebp]
	movss	DWORD PTR _dz$13[ebp], xmm0

; 638  : 				labelPoint.csZ = (float)sqrt(dx*dx + dy*dy + dz*dz);

	movss	xmm0, DWORD PTR _dx$12[ebp]
	mulss	xmm0, DWORD PTR _dx$12[ebp]
	movss	xmm1, DWORD PTR _dy$8[ebp]
	mulss	xmm1, DWORD PTR _dy$8[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _dz$13[ebp]
	mulss	xmm1, DWORD PTR _dz$13[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _labelPoint$[ebp+48]
$LN5@Draw:

; 639  : 			}
; 640  : //end LabelRadialDistanceFix
; 641  : 
; 642  : 		if (labelPoint.clipFlag == ON_SCREEN &&
; 643  : 			labelPoint.csZ < limitcheck)

	cmp	DWORD PTR _labelPoint$[ebp+36], 0
	jne	$LN2@Draw
	cvtsi2ss xmm0, DWORD PTR _limitcheck$14[ebp]
	comiss	xmm0, DWORD PTR _labelPoint$[ebp+48]
	jbe	$LN2@Draw

; 644  : 		{
; 645  : 			int colorsub = int((labelPoint.csZ / (limit >> 3))) << 5;

	mov	eax, DWORD PTR _limit$6[ebp]
	sar	eax, 3
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR _labelPoint$[ebp+48]
	divss	xmm1, xmm0
	cvttss2si ecx, xmm1
	shl	ecx, 5
	mov	DWORD PTR _colorsub$22[ebp], ecx

; 646  : 			if (colorsub > 180)	// let's not reduce brightness too much, keep a glimpse of the original color

	cmp	DWORD PTR _colorsub$22[ebp], 180	; 000000b4H
	jle	SHORT $LN3@Draw

; 647  : 				colorsub = 180;

	mov	DWORD PTR _colorsub$22[ebp], 180	; 000000b4H
$LN3@Draw:

; 648  : 			int red = (labelColor & 0x000000ff);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR _red$19[ebp], eax

; 649  : 			red -= min(red, colorsub);

	mov	ecx, DWORD PTR _red$19[ebp]
	cmp	ecx, DWORD PTR _colorsub$22[ebp]
	jge	SHORT $LN41@Draw
	mov	edx, DWORD PTR _red$19[ebp]
	mov	DWORD PTR tv431[ebp], edx
	jmp	SHORT $LN42@Draw
$LN41@Draw:
	mov	eax, DWORD PTR _colorsub$22[ebp]
	mov	DWORD PTR tv431[ebp], eax
$LN42@Draw:
	mov	ecx, DWORD PTR _red$19[ebp]
	sub	ecx, DWORD PTR tv431[ebp]
	mov	DWORD PTR _red$19[ebp], ecx

; 650  : 			int green = (labelColor & 0x0000ff00) >> 8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	and	eax, 65280				; 0000ff00H
	shr	eax, 8
	mov	DWORD PTR _green$18[ebp], eax

; 651  : 			green -= min(green, colorsub+30);		// green would be too light -> +30

	mov	ecx, DWORD PTR _colorsub$22[ebp]
	add	ecx, 30					; 0000001eH
	cmp	DWORD PTR _green$18[ebp], ecx
	jge	SHORT $LN43@Draw
	mov	edx, DWORD PTR _green$18[ebp]
	mov	DWORD PTR tv439[ebp], edx
	jmp	SHORT $LN44@Draw
$LN43@Draw:
	mov	eax, DWORD PTR _colorsub$22[ebp]
	add	eax, 30					; 0000001eH
	mov	DWORD PTR tv439[ebp], eax
$LN44@Draw:
	mov	ecx, DWORD PTR _green$18[ebp]
	sub	ecx, DWORD PTR tv439[ebp]
	mov	DWORD PTR _green$18[ebp], ecx

; 652  : 			int blue = (labelColor & 0x00ff0000) >> 16;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	and	eax, 16711680				; 00ff0000H
	shr	eax, 16					; 00000010H
	mov	DWORD PTR _blue$17[ebp], eax

; 653  : 			blue -= min(blue, colorsub);

	mov	ecx, DWORD PTR _blue$17[ebp]
	cmp	ecx, DWORD PTR _colorsub$22[ebp]
	jge	SHORT $LN45@Draw
	mov	edx, DWORD PTR _blue$17[ebp]
	mov	DWORD PTR tv445[ebp], edx
	jmp	SHORT $LN46@Draw
$LN45@Draw:
	mov	eax, DWORD PTR _colorsub$22[ebp]
	mov	DWORD PTR tv445[ebp], eax
$LN46@Draw:
	mov	ecx, DWORD PTR _blue$17[ebp]
	sub	ecx, DWORD PTR tv445[ebp]
	mov	DWORD PTR _blue$17[ebp], ecx

; 654  : 
; 655  : 			long newlabelColor = blue << 16 | green << 8 | red;

	mov	edx, DWORD PTR _blue$17[ebp]
	shl	edx, 16					; 00000010H
	mov	eax, DWORD PTR _green$18[ebp]
	shl	eax, 8
	or	edx, eax
	or	edx, DWORD PTR _red$19[ebp]
	mov	DWORD PTR _newlabelColor$1[ebp], edx

; 656  : 
; 657  : 			x = labelPoint.x - renderer->ScreenTextWidth(label) / 2;		// Centers text

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	push	ecx
	call	?ScreenTextWidth@VirtualDisplay@@SAHPBD@Z ; VirtualDisplay::ScreenTextWidth
	add	esp, 4
	cdq
	sub	eax, edx
	sar	eax, 1
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR _labelPoint$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _x$[ebp], xmm1

; 658  : 			y = labelPoint.y - 12;				// Place text above center of object

	movss	xmm0, DWORD PTR _labelPoint$[ebp+4]
	subss	xmm0, DWORD PTR __real@41400000
	movss	DWORD PTR _y$[ebp], xmm0

; 659  : 			renderer->SetColor( newlabelColor );

	mov	edx, DWORD PTR _newlabelColor$1[ebp]
	push	edx
	mov	eax, DWORD PTR _renderer$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _renderer$[ebp]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 660  : 			renderer->ScreenText( x, y, label );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _renderer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _renderer$[ebp]
	mov	edx, DWORD PTR [eax+100]
	call	edx

; 661  : //dpc LabelRadialDistanceFix
; 662  : 			if (g_bLabelShowDistance)

	movzx	eax, BYTE PTR ?g_bLabelShowDistance@@3_NA ; g_bLabelShowDistance
	test	eax, eax
	je	$LN2@Draw

; 663  : 			{
; 664  : 				char label2[32];
; 665  : 				sprintf(label2, "%4.1f nm", labelPoint.csZ / 6076); // convert from ft to nm

	movss	xmm0, DWORD PTR _labelPoint$[ebp+48]
	divss	xmm0, DWORD PTR __real@45bde000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_08KEOJDJOA@?$CF4?41f?5nm?$AA@
	lea	ecx, DWORD PTR _label2$26[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 666  : 				float x2 = labelPoint.x - renderer->ScreenTextWidth(label2) / 2;	// Centers text

	lea	edx, DWORD PTR _label2$26[ebp]
	push	edx
	call	?ScreenTextWidth@VirtualDisplay@@SAHPBD@Z ; VirtualDisplay::ScreenTextWidth
	add	esp, 4
	cdq
	sub	eax, edx
	sar	eax, 1
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR _labelPoint$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _x2$7[ebp], xmm1

; 667  : 				float y2 = labelPoint.y + 4; // Distance below center object

	movss	xmm0, DWORD PTR _labelPoint$[ebp+4]
	addss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR _y2$3[ebp], xmm0

; 668  : 				renderer->ScreenText( x2, y2, label2);

	push	0
	lea	eax, DWORD PTR _label2$26[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _y2$3[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x2$7[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _renderer$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _renderer$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
$LN2@Draw:

; 669  : 			}
; 670  : //end LabelRadialDistanceFix
; 671  : 		}
; 672  : // JB 000807
; 673  : 	}
; 674  : #endif
; 675  : 
; 676  : if (g_bDrawBoundingBox) DrawBoundingBox( renderer );

	movzx	ecx, BYTE PTR ?g_bDrawBoundingBox@@3_NA	; g_bDrawBoundingBox
	test	ecx, ecx
	je	SHORT $LN1@Draw
	mov	edx, DWORD PTR _renderer$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawBoundingBox@DrawableBSP@@IAEXPAVRender3D@@@Z ; DrawableBSP::DrawBoundingBox
$LN1@Draw:
$LN33@Draw:

; 677  : #ifdef _DEBUG
; 678  : 	// TESTING CODE TO SHOW BOUNDING BOXES
; 679  : 	// DrawBoundingBox( renderer );
; 680  : #endif
; 681  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
?Draw@DrawableBSP@@UAEXPAVRenderOTW@@H@Z ENDP		; DrawableBSP::Draw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\drawbsp.cpp
_TEXT	SEGMENT
tv604 = -156						; size = 4
tv618 = -152						; size = 4
tv597 = -148						; size = 4
tv611 = -144						; size = 4
tv625 = -140						; size = 4
tv590 = -136						; size = 4
_inside$ = -132						; size = 4
_vecp$ = -128						; size = 4
_whichPlane$ = -124					; size = 4
_minBp$ = -120						; size = 4
_maxBp$ = -116						; size = 4
_t$ = -112						; size = 4
_collp$ = -108						; size = 4
_orgp$ = -104						; size = 4
_tMax$ = -100						; size = 4
_i$ = -96						; size = 4
_this$ = -92						; size = 4
_origin$ = -88						; size = 12
_vec$ = -76						; size = 12
_pos$ = -64						; size = 12
_candidatePlane$ = -52					; size = 12
_quadrant$ = -40					; size = 12
_maxB$ = -28						; size = 12
_minB$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_from$ = 8						; size = 4
_vector$ = 12						; size = 4
_collide$ = 16						; size = 4
_boxScale$ = 20						; size = 4
?GetRayHit@DrawableBSP@@UAEHPBUTpoint@@0PAU2@M@Z PROC	; DrawableBSP::GetRayHit
; _this$ = ecx

; 329  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 156				; 0000009cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 330  : 	Tpoint		origin={0.0F}, vec={0.0F};

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _origin$[ebp], xmm0
	xor	eax, eax
	mov	DWORD PTR _origin$[ebp+4], eax
	mov	DWORD PTR _origin$[ebp+8], eax
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _vec$[ebp], xmm0
	xor	ecx, ecx
	mov	DWORD PTR _vec$[ebp+4], ecx
	mov	DWORD PTR _vec$[ebp+8], ecx

; 331  : 	Tpoint		pos={0.0F};

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _pos$[ebp], xmm0
	xor	edx, edx
	mov	DWORD PTR _pos$[ebp+4], edx
	mov	DWORD PTR _pos$[ebp+8], edx

; 332  : 	int			i=0;

	mov	DWORD PTR _i$[ebp], 0

; 333  : 	float 		*minBp=NULL, *maxBp=NULL, *orgp=NULL, *vecp=NULL, *collp=NULL;

	mov	DWORD PTR _minBp$[ebp], 0
	mov	DWORD PTR _maxBp$[ebp], 0
	mov	DWORD PTR _orgp$[ebp], 0
	mov	DWORD PTR _vecp$[ebp], 0
	mov	DWORD PTR _collp$[ebp], 0

; 334  : 	enum		{LEFT,RIGHT,MIDDLE}		quadrant[3]={LEFT};

	mov	DWORD PTR _quadrant$[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _quadrant$[ebp+4], eax
	mov	DWORD PTR _quadrant$[ebp+8], eax

; 335  : 	float		t=0.0F, tMax=0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _t$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _tMax$[ebp], xmm0

; 336  : 	float		minB[3]={0.0F}, maxB[3]={0.0F};

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _minB$[ebp], xmm0
	xor	ecx, ecx
	mov	DWORD PTR _minB$[ebp+4], ecx
	mov	DWORD PTR _minB$[ebp+8], ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _maxB$[ebp], xmm0
	xor	edx, edx
	mov	DWORD PTR _maxB$[ebp+4], edx
	mov	DWORD PTR _maxB$[ebp+8], edx

; 337  : 	float		candidatePlane[3]={0.0F};

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _candidatePlane$[ebp], xmm0
	xor	eax, eax
	mov	DWORD PTR _candidatePlane$[ebp+4], eax
	mov	DWORD PTR _candidatePlane$[ebp+8], eax

; 338  : 	int			whichPlane=0;

	mov	DWORD PTR _whichPlane$[ebp], 0

; 339  : 	BOOL		inside = TRUE;

	mov	DWORD PTR _inside$[ebp], 1

; 340  : 
; 341  : 	// First we transform the origin and vector into object space (since that's easier than rotating the box)
; 342  : 	pos.x = from->x - position.x;

	mov	ecx, DWORD PTR _from$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR _pos$[ebp], xmm0

; 343  : 	pos.y = from->y - position.y;

	mov	eax, DWORD PTR _from$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR _pos$[ebp+4], xmm0

; 344  : 	pos.z = from->z - position.z;

	mov	edx, DWORD PTR _from$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	subss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _pos$[ebp+8], xmm0

; 345  : 	origin.x =  pos.x * orientation.M11 +     pos.y * orientation.M21 +     pos.z * orientation.M31;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _pos$[ebp]
	mulss	xmm0, DWORD PTR [ecx+48]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR _pos$[ebp+4]
	mulss	xmm1, DWORD PTR [edx+60]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR _pos$[ebp+8]
	mulss	xmm1, DWORD PTR [eax+72]
	addss	xmm0, xmm1
	movss	DWORD PTR _origin$[ebp], xmm0

; 346  : 	origin.y =  pos.x * orientation.M12 +     pos.y * orientation.M22 +     pos.z * orientation.M32;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _pos$[ebp]
	mulss	xmm0, DWORD PTR [ecx+52]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR _pos$[ebp+4]
	mulss	xmm1, DWORD PTR [edx+64]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR _pos$[ebp+8]
	mulss	xmm1, DWORD PTR [eax+76]
	addss	xmm0, xmm1
	movss	DWORD PTR _origin$[ebp+4], xmm0

; 347  : 	origin.z =  pos.x * orientation.M13 +     pos.y * orientation.M23 +     pos.z * orientation.M33;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _pos$[ebp]
	mulss	xmm0, DWORD PTR [ecx+56]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR _pos$[ebp+4]
	mulss	xmm1, DWORD PTR [edx+68]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR _pos$[ebp+8]
	mulss	xmm1, DWORD PTR [eax+80]
	addss	xmm0, xmm1
	movss	DWORD PTR _origin$[ebp+8], xmm0

; 348  : 	vec.x = vector->x * orientation.M11 + vector->y * orientation.M21 + vector->z * orientation.M31;

	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR [edx+48]
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	mulss	xmm1, DWORD PTR [ecx+60]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _vector$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+8]
	mulss	xmm1, DWORD PTR [eax+72]
	addss	xmm0, xmm1
	movss	DWORD PTR _vec$[ebp], xmm0

; 349  : 	vec.y = vector->x * orientation.M12 + vector->y * orientation.M22 + vector->z * orientation.M32;

	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR [edx+52]
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	mulss	xmm1, DWORD PTR [ecx+64]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _vector$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+8]
	mulss	xmm1, DWORD PTR [eax+76]
	addss	xmm0, xmm1
	movss	DWORD PTR _vec$[ebp+4], xmm0

; 350  : 	vec.z = vector->x * orientation.M13 + vector->y * orientation.M23 + vector->z * orientation.M33;

	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR [edx+56]
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	mulss	xmm1, DWORD PTR [ecx+68]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _vector$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+8]
	mulss	xmm1, DWORD PTR [eax+80]
	addss	xmm0, xmm1
	movss	DWORD PTR _vec$[ebp+8], xmm0

; 351  : 
; 352  : 	// Account for object scaling
; 353  : 	boxScale *= scale;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _boxScale$[ebp]
	mulss	xmm0, DWORD PTR [ecx+20]
	movss	DWORD PTR _boxScale$[ebp], xmm0

; 354  : 
; 355  : 	if ( boxScale == 1.0f )

	movss	xmm0, DWORD PTR _boxScale$[ebp]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jp	$LN25@GetRayHit

; 356  : 	{
; 357  : 		minB[0] = instance.BoxBack();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?BoxBack@ObjectInstance@@QBEMXZ		; ObjectInstance::BoxBack
	mov	edx, 4
	imul	edx, 0
	fstp	DWORD PTR _minB$[ebp+edx]

; 358  : 		minB[1] = instance.BoxLeft();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?BoxLeft@ObjectInstance@@QBEMXZ		; ObjectInstance::BoxLeft
	mov	eax, 4
	shl	eax, 0
	fstp	DWORD PTR _minB$[ebp+eax]

; 359  : 		minB[2] = instance.BoxTop();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?BoxTop@ObjectInstance@@QBEMXZ		; ObjectInstance::BoxTop
	mov	ecx, 4
	shl	ecx, 1
	fstp	DWORD PTR _minB$[ebp+ecx]

; 360  : 		maxB[0] = instance.BoxFront();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?BoxFront@ObjectInstance@@QBEMXZ	; ObjectInstance::BoxFront
	mov	edx, 4
	imul	edx, 0
	fstp	DWORD PTR _maxB$[ebp+edx]

; 361  : 		maxB[1] = instance.BoxRight();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?BoxRight@ObjectInstance@@QBEMXZ	; ObjectInstance::BoxRight
	mov	eax, 4
	shl	eax, 0
	fstp	DWORD PTR _maxB$[ebp+eax]

; 362  : 		maxB[2] = instance.BoxBottom();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?BoxBottom@ObjectInstance@@QBEMXZ	; ObjectInstance::BoxBottom
	mov	ecx, 4
	shl	ecx, 1
	fstp	DWORD PTR _maxB$[ebp+ecx]

; 363  : 	}
; 364  : 	else

	jmp	$LN24@GetRayHit
$LN25@GetRayHit:

; 365  : 	{
; 366  : 		minB[0] = boxScale * instance.BoxBack();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?BoxBack@ObjectInstance@@QBEMXZ		; ObjectInstance::BoxBack
	fstp	DWORD PTR tv590[ebp]
	movss	xmm0, DWORD PTR tv590[ebp]
	mulss	xmm0, DWORD PTR _boxScale$[ebp]
	mov	edx, 4
	imul	edx, 0
	movss	DWORD PTR _minB$[ebp+edx], xmm0

; 367  : 		minB[1] = boxScale * instance.BoxLeft();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?BoxLeft@ObjectInstance@@QBEMXZ		; ObjectInstance::BoxLeft
	fstp	DWORD PTR tv597[ebp]
	movss	xmm0, DWORD PTR tv597[ebp]
	mulss	xmm0, DWORD PTR _boxScale$[ebp]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _minB$[ebp+eax], xmm0

; 368  : 		minB[2] = boxScale * instance.BoxTop();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?BoxTop@ObjectInstance@@QBEMXZ		; ObjectInstance::BoxTop
	fstp	DWORD PTR tv604[ebp]
	movss	xmm0, DWORD PTR tv604[ebp]
	mulss	xmm0, DWORD PTR _boxScale$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR _minB$[ebp+ecx], xmm0

; 369  : 		maxB[0] = boxScale * instance.BoxFront();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?BoxFront@ObjectInstance@@QBEMXZ	; ObjectInstance::BoxFront
	fstp	DWORD PTR tv611[ebp]
	movss	xmm0, DWORD PTR tv611[ebp]
	mulss	xmm0, DWORD PTR _boxScale$[ebp]
	mov	edx, 4
	imul	edx, 0
	movss	DWORD PTR _maxB$[ebp+edx], xmm0

; 370  : 		maxB[1] = boxScale * instance.BoxRight();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?BoxRight@ObjectInstance@@QBEMXZ	; ObjectInstance::BoxRight
	fstp	DWORD PTR tv618[ebp]
	movss	xmm0, DWORD PTR tv618[ebp]
	mulss	xmm0, DWORD PTR _boxScale$[ebp]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _maxB$[ebp+eax], xmm0

; 371  : 		maxB[2] = boxScale * instance.BoxBottom();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?BoxBottom@ObjectInstance@@QBEMXZ	; ObjectInstance::BoxBottom
	fstp	DWORD PTR tv625[ebp]
	movss	xmm0, DWORD PTR tv625[ebp]
	mulss	xmm0, DWORD PTR _boxScale$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR _maxB$[ebp+ecx], xmm0
$LN24@GetRayHit:

; 372  : 	}
; 373  : 
; 374  : 	// find candiate planes
; 375  : 	orgp =  (float *)&origin;

	lea	edx, DWORD PTR _origin$[ebp]
	mov	DWORD PTR _orgp$[ebp], edx

; 376  : 	minBp = (float *)&minB;

	lea	eax, DWORD PTR _minB$[ebp]
	mov	DWORD PTR _minBp$[ebp], eax

; 377  : 	maxBp = (float *)&maxB;

	lea	ecx, DWORD PTR _maxB$[ebp]
	mov	DWORD PTR _maxBp$[ebp], ecx

; 378  : 	for ( i = 0; i < 3; i++, orgp++, minBp++, maxBp++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN23@GetRayHit
$LN22@GetRayHit:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	mov	eax, DWORD PTR _orgp$[ebp]
	add	eax, 4
	mov	DWORD PTR _orgp$[ebp], eax
	mov	ecx, DWORD PTR _minBp$[ebp]
	add	ecx, 4
	mov	DWORD PTR _minBp$[ebp], ecx
	mov	edx, DWORD PTR _maxBp$[ebp]
	add	edx, 4
	mov	DWORD PTR _maxBp$[ebp], edx
$LN23@GetRayHit:
	cmp	DWORD PTR _i$[ebp], 3
	jge	SHORT $LN21@GetRayHit

; 379  : 	{
; 380  : 		if ( *orgp < *minBp )

	mov	eax, DWORD PTR _minBp$[ebp]
	mov	ecx, DWORD PTR _orgp$[ebp]
	movss	xmm0, DWORD PTR [eax]
	comiss	xmm0, DWORD PTR [ecx]
	jbe	SHORT $LN20@GetRayHit

; 381  : 		{
; 382  : 			quadrant[i] = LEFT;

	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _quadrant$[ebp+edx*4], 0

; 383  : 			candidatePlane[i] = *minBp;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _minBp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _candidatePlane$[ebp+eax*4], edx

; 384  : 			inside = FALSE;

	mov	DWORD PTR _inside$[ebp], 0
	jmp	SHORT $LN17@GetRayHit
$LN20@GetRayHit:

; 385  : 		}
; 386  : 		else if ( *orgp > *maxBp )

	mov	eax, DWORD PTR _orgp$[ebp]
	mov	ecx, DWORD PTR _maxBp$[ebp]
	movss	xmm0, DWORD PTR [eax]
	comiss	xmm0, DWORD PTR [ecx]
	jbe	SHORT $LN18@GetRayHit

; 387  : 		{
; 388  : 			quadrant[i] = RIGHT;

	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _quadrant$[ebp+edx*4], 1

; 389  : 			candidatePlane[i] = *maxBp;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _maxBp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _candidatePlane$[ebp+eax*4], edx

; 390  : 			inside = FALSE;

	mov	DWORD PTR _inside$[ebp], 0

; 391  : 		}
; 392  : 		else

	jmp	SHORT $LN17@GetRayHit
$LN18@GetRayHit:

; 393  : 		{
; 394  : 			quadrant[i] = MIDDLE;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _quadrant$[ebp+eax*4], 2
$LN17@GetRayHit:

; 395  : 		}
; 396  : 	}

	jmp	$LN22@GetRayHit
$LN21@GetRayHit:

; 397  : 
; 398  : 	// origin is in box
; 399  : 	if ( inside ) {

	cmp	DWORD PTR _inside$[ebp], 0
	je	SHORT $LN16@GetRayHit

; 400  : 		*collide = *from;

	mov	ecx, DWORD PTR _from$[ebp]
	mov	edx, DWORD PTR _collide$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx

; 401  : 		return TRUE;

	mov	eax, 1
	jmp	$LN26@GetRayHit
$LN16@GetRayHit:

; 402  : 	}
; 403  : 
; 404  : 	// calculate T distances to candidate planes and accumulate the largest
; 405  : 	if ( quadrant[0] != MIDDLE && vec.x != 0.0f ) {

	mov	edx, 4
	imul	edx, 0
	cmp	DWORD PTR _quadrant$[ebp+edx], 2
	je	SHORT $LN15@GetRayHit
	movss	xmm0, DWORD PTR _vec$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN15@GetRayHit

; 406  : 		tMax = (candidatePlane[0] - origin.x) / vec.x;

	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR _candidatePlane$[ebp+eax]
	subss	xmm0, DWORD PTR _origin$[ebp]
	divss	xmm0, DWORD PTR _vec$[ebp]
	movss	DWORD PTR _tMax$[ebp], xmm0

; 407  : 		whichPlane = 0;

	mov	DWORD PTR _whichPlane$[ebp], 0

; 408  : 	} else {

	jmp	SHORT $LN14@GetRayHit
$LN15@GetRayHit:

; 409  : 		tMax = -1.0f;

	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _tMax$[ebp], xmm0
$LN14@GetRayHit:

; 410  : 	}
; 411  : 	if ( quadrant[1] != MIDDLE && vec.y != 0.0f ) {

	mov	ecx, 4
	shl	ecx, 0
	cmp	DWORD PTR _quadrant$[ebp+ecx], 2
	je	SHORT $LN12@GetRayHit
	movss	xmm0, DWORD PTR _vec$[ebp+4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN12@GetRayHit

; 412  : 		t = (candidatePlane[1] - origin.y) / vec.y;

	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _candidatePlane$[ebp+edx]
	subss	xmm0, DWORD PTR _origin$[ebp+4]
	divss	xmm0, DWORD PTR _vec$[ebp+4]
	movss	DWORD PTR _t$[ebp], xmm0

; 413  : 		if (t > tMax) {

	movss	xmm0, DWORD PTR _t$[ebp]
	comiss	xmm0, DWORD PTR _tMax$[ebp]
	jbe	SHORT $LN12@GetRayHit

; 414  : 			tMax = t;

	movss	xmm0, DWORD PTR _t$[ebp]
	movss	DWORD PTR _tMax$[ebp], xmm0

; 415  : 			whichPlane = 1;

	mov	DWORD PTR _whichPlane$[ebp], 1
$LN12@GetRayHit:

; 416  : 		}
; 417  : 	}
; 418  : 	if ( quadrant[2] != MIDDLE && vec.z != 0.0f ) {

	mov	eax, 4
	shl	eax, 1
	cmp	DWORD PTR _quadrant$[ebp+eax], 2
	je	SHORT $LN10@GetRayHit
	movss	xmm0, DWORD PTR _vec$[ebp+8]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN10@GetRayHit

; 419  : 		t = (candidatePlane[2] - origin.z) / vec.z;

	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _candidatePlane$[ebp+ecx]
	subss	xmm0, DWORD PTR _origin$[ebp+8]
	divss	xmm0, DWORD PTR _vec$[ebp+8]
	movss	DWORD PTR _t$[ebp], xmm0

; 420  : 		if (t > tMax) {

	movss	xmm0, DWORD PTR _t$[ebp]
	comiss	xmm0, DWORD PTR _tMax$[ebp]
	jbe	SHORT $LN10@GetRayHit

; 421  : 			tMax = t;

	movss	xmm0, DWORD PTR _t$[ebp]
	movss	DWORD PTR _tMax$[ebp], xmm0

; 422  : 			whichPlane = 2;

	mov	DWORD PTR _whichPlane$[ebp], 2
$LN10@GetRayHit:

; 423  : 		}
; 424  : 	}
; 425  : 
; 426  : 	// Check final candidate is within the segment of interest
; 427  : 	if ( tMax < 0.0f || tMax > 1.0f ) {

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _tMax$[ebp]
	ja	SHORT $LN8@GetRayHit
	movss	xmm0, DWORD PTR _tMax$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN9@GetRayHit
$LN8@GetRayHit:

; 428  : 		return FALSE;

	xor	eax, eax
	jmp	$LN26@GetRayHit
$LN9@GetRayHit:

; 429  : 	}
; 430  : 
; 431  : 	// Check final candidate is within the bounds of the side of the box
; 432  : 	orgp	= (float *)&origin;

	lea	edx, DWORD PTR _origin$[ebp]
	mov	DWORD PTR _orgp$[ebp], edx

; 433  : 	vecp	= (float *)&vec;

	lea	eax, DWORD PTR _vec$[ebp]
	mov	DWORD PTR _vecp$[ebp], eax

; 434  : 	collp	= (float *)&pos;

	lea	ecx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _collp$[ebp], ecx

; 435  : 	for ( i = 0; i < 3; i++, vecp++, orgp++, collp++ ) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@GetRayHit
$LN6@GetRayHit:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	mov	eax, DWORD PTR _vecp$[ebp]
	add	eax, 4
	mov	DWORD PTR _vecp$[ebp], eax
	mov	ecx, DWORD PTR _orgp$[ebp]
	add	ecx, 4
	mov	DWORD PTR _orgp$[ebp], ecx
	mov	edx, DWORD PTR _collp$[ebp]
	add	edx, 4
	mov	DWORD PTR _collp$[ebp], edx
$LN7@GetRayHit:
	cmp	DWORD PTR _i$[ebp], 3
	jge	SHORT $LN5@GetRayHit

; 436  : 		if ( whichPlane != i ) {

	mov	eax, DWORD PTR _whichPlane$[ebp]
	cmp	eax, DWORD PTR _i$[ebp]
	je	SHORT $LN4@GetRayHit

; 437  : 			*collp = *orgp + tMax * (*vecp);

	mov	ecx, DWORD PTR _vecp$[ebp]
	movss	xmm0, DWORD PTR _tMax$[ebp]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _orgp$[ebp]
	addss	xmm0, DWORD PTR [edx]
	mov	eax, DWORD PTR _collp$[ebp]
	movss	DWORD PTR [eax], xmm0

; 438  : 			if ( *collp < minB[i] ||  *collp > maxB[i] ) {

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _collp$[ebp]
	movss	xmm0, DWORD PTR _minB$[ebp+ecx*4]
	comiss	xmm0, DWORD PTR [edx]
	ja	SHORT $LN2@GetRayHit
	mov	eax, DWORD PTR _collp$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR [eax]
	comiss	xmm0, DWORD PTR _maxB$[ebp+ecx*4]
	jbe	SHORT $LN3@GetRayHit
$LN2@GetRayHit:

; 439  : 				// outside box
; 440  : 				return FALSE;

	xor	eax, eax
	jmp	$LN26@GetRayHit
$LN3@GetRayHit:

; 441  : 			}
; 442  : 		} else {

	jmp	SHORT $LN1@GetRayHit
$LN4@GetRayHit:

; 443  : 			*collp = candidatePlane[i];

	mov	edx, DWORD PTR _collp$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _candidatePlane$[ebp+eax*4]
	mov	DWORD PTR [edx], ecx
$LN1@GetRayHit:

; 444  : 		}
; 445  : 	}

	jmp	$LN6@GetRayHit
$LN5@GetRayHit:

; 446  : 
; 447  : 	// We must transform the collision point from object space back into world space
; 448  : 	collide->x = pos.x * orientation.M11 + pos.y * orientation.M12 + pos.z * orientation.M13 + position.x;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _pos$[ebp]
	mulss	xmm0, DWORD PTR [edx+48]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR _pos$[ebp+4]
	mulss	xmm1, DWORD PTR [eax+52]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR _pos$[ebp+8]
	mulss	xmm1, DWORD PTR [ecx+56]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _collide$[ebp]
	movss	DWORD PTR [eax], xmm0

; 449  : 	collide->y = pos.x * orientation.M21 + pos.y * orientation.M22 + pos.z * orientation.M23 + position.y;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _pos$[ebp]
	mulss	xmm0, DWORD PTR [ecx+60]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR _pos$[ebp+4]
	mulss	xmm1, DWORD PTR [edx+64]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR _pos$[ebp+8]
	mulss	xmm1, DWORD PTR [eax+68]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _collide$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 450  : 	collide->z = pos.x * orientation.M31 + pos.y * orientation.M32 + pos.z * orientation.M33 + position.z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _pos$[ebp]
	mulss	xmm0, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR _pos$[ebp+4]
	mulss	xmm1, DWORD PTR [ecx+76]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR _pos$[ebp+8]
	mulss	xmm1, DWORD PTR [edx+80]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _collide$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 451  : 
; 452  : 
; 453  : 	return TRUE;

	mov	eax, 1
$LN26@GetRayHit:

; 454  : };

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?GetRayHit@DrawableBSP@@UAEHPBUTpoint@@0PAU2@M@Z ENDP	; DrawableBSP::GetRayHit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawbsp.h
;	COMDAT ?SetInhibitFlag@DrawableBSP@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_state$ = 8						; size = 4
?SetInhibitFlag@DrawableBSP@@UAEXH@Z PROC		; DrawableBSP::SetInhibitFlag, COMDAT
; _this$ = ecx

; 65   : 	virtual void SetInhibitFlag( BOOL state )				{ inhibitDraw = state; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+124], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetInhibitFlag@DrawableBSP@@UAEXH@Z ENDP		; DrawableBSP::SetInhibitFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\drawbsp.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_labelString$ = 8					; size = 4
_color$ = 12						; size = 4
?SetLabel@DrawableBSP@@UAEXPADK@Z PROC			; DrawableBSP::SetLabel
; _this$ = ecx

; 312  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 313  : 	ShiAssert( strlen( labelString ) < sizeof( label ) );
; 314  : 
; 315  : 	strncpy( label, labelString, 31 );

	push	31					; 0000001fH
	mov	eax, DWORD PTR _labelString$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	push	ecx
	call	_strncpy
	add	esp, 12					; 0000000cH

; 316  : 	label[31] = 0;

	mov	edx, 1
	imul	edx, 31					; 0000001fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+edx+128], 0

; 317  : 	labelColor = color;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _color$[ebp]
	mov	DWORD PTR [ecx+164], edx

; 318  : 	labelLen = VirtualDisplay::ScreenTextWidth( labelString ) >> 1;

	mov	eax, DWORD PTR _labelString$[ebp]
	push	eax
	call	?ScreenTextWidth@VirtualDisplay@@SAHPBD@Z ; VirtualDisplay::ScreenTextWidth
	add	esp, 4
	sar	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+160], eax

; 319  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetLabel@DrawableBSP@@UAEXPADK@Z ENDP			; DrawableBSP::SetLabel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\drawbsp.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_switchNumber$ = 8					; size = 4
?GetSwitchMask@DrawableBSP@@QAEKH@Z PROC		; DrawableBSP::GetSwitchMask
; _this$ = ecx

; 294  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 295  : 	ShiAssert( id >= 0 );
; 296  : 
; 297  : 	// THIS IS A HACK TO TOLERATE OBJECTS WHICH DON'T YET HAVE DOFS
; 298  : 	// THIS SHOULD BE REMOVED IN THE LATE BETA AND SHIPPING VERSIONS
; 299  : 	if ( switchNumber >= instance.ParentObject->nSwitches )  return 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	movsx	edx, WORD PTR [ecx+52]
	cmp	DWORD PTR _switchNumber$[ebp], edx
	jl	SHORT $LN3@GetSwitchM
	xor	eax, eax
	jmp	SHORT $LN4@GetSwitchM
$LN3@GetSwitchM:

; 300  : 	
; 301  : 	ShiAssert( switchNumber < instance.ParentObject->nSwitches );
; 302  : 	if (switchNumber < instance.ParentObject->nSwitches )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	movsx	edx, WORD PTR [ecx+52]
	cmp	DWORD PTR _switchNumber$[ebp], edx
	jge	SHORT $LN2@GetSwitchM

; 303  : 	    return instance.SwitchValues[switchNumber];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _switchNumber$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	jmp	SHORT $LN4@GetSwitchM
	jmp	SHORT $LN4@GetSwitchM
$LN2@GetSwitchM:

; 304  : 	else return 0;

	xor	eax, eax
$LN4@GetSwitchM:

; 305  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetSwitchMask@DrawableBSP@@QAEKH@Z ENDP		; DrawableBSP::GetSwitchMask
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\drawbsp.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vertID$ = 8						; size = 4
_dx$ = 12						; size = 4
_dy$ = 16						; size = 4
_dz$ = 20						; size = 4
?GetDynamicCoords@DrawableBSP@@QAEXHPAM00@Z PROC	; DrawableBSP::GetDynamicCoords
; _this$ = ecx

; 268  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 269  : 	if (vertID >= instance.ParentObject->nDynamicCoords ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	movsx	edx, WORD PTR [ecx+46]
	cmp	DWORD PTR _vertID$[ebp], edx
	jl	SHORT $LN1@GetDynamic

; 270  : 		*dx = *dy = *dz = 0.0f; return;

	mov	eax, DWORD PTR _dz$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0
	mov	ecx, DWORD PTR _dy$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx], xmm0
	mov	edx, DWORD PTR _dx$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx], xmm0
	jmp	SHORT $LN2@GetDynamic
$LN1@GetDynamic:

; 271  : 	}
; 272  : 
; 273  : 	ShiAssert( vertID < instance.ParentObject->nDynamicCoords );
; 274  : 	instance.GetDynamicCoords( vertID, dx, dy, dz );

	mov	eax, DWORD PTR _dz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dx$[ebp]
	push	edx
	mov	eax, DWORD PTR _vertID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?GetDynamicCoords@ObjectInstance@@QAEXHPAM00@Z ; ObjectInstance::GetDynamicCoords
$LN2@GetDynamic:

; 275  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?GetDynamicCoords@DrawableBSP@@QAEXHPAM00@Z ENDP	; DrawableBSP::GetDynamicCoords
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\drawbsp.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vertID$ = 8						; size = 4
_dx$ = 12						; size = 4
_dy$ = 16						; size = 4
_dz$ = 20						; size = 4
?GetDynamicVertex@DrawableBSP@@QAEXHPAM00@Z PROC	; DrawableBSP::GetDynamicVertex
; _this$ = ecx

; 255  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 256  : 	// THIS IS A HACK TO TOLERATE OBJECTS WHICH DON'T YET HAVE DYANAMIC VERTS
; 257  : 	// THIS SHOULD BE REMOVED IN THE LATE BETA AND SHIPPING VERSIONS
; 258  : 	if (vertID >= instance.ParentObject->nDynamicCoords ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	movsx	edx, WORD PTR [ecx+46]
	cmp	DWORD PTR _vertID$[ebp], edx
	jl	SHORT $LN1@GetDynamic

; 259  : 		*dx = *dy = *dz = 0.0f; return;

	mov	eax, DWORD PTR _dz$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0
	mov	ecx, DWORD PTR _dy$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx], xmm0
	mov	edx, DWORD PTR _dx$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx], xmm0
	jmp	SHORT $LN2@GetDynamic
$LN1@GetDynamic:

; 260  : 	}
; 261  : 
; 262  : 	ShiAssert( vertID < instance.ParentObject->nDynamicCoords );
; 263  : 	instance.GetDynamicVertex( vertID, dx, dy, dz );

	mov	eax, DWORD PTR _dz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dx$[ebp]
	push	edx
	mov	eax, DWORD PTR _vertID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?GetDynamicVertex@ObjectInstance@@QAEXHPAM00@Z ; ObjectInstance::GetDynamicVertex
$LN2@GetDynamic:

; 264  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?GetDynamicVertex@DrawableBSP@@QAEXHPAM00@Z ENDP	; DrawableBSP::GetDynamicVertex
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\drawbsp.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_DOF$ = 8						; size = 4
?GetDOFoffset@DrawableBSP@@QAEMH@Z PROC			; DrawableBSP::GetDOFoffset
; _this$ = ecx

; 230  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 231  : 	ShiAssert( id >= 0 );
; 232  : 
; 233  : 	// THIS IS A HACK TO TOLERATE OBJECTS WHICH DON'T YET HAVE DOFS
; 234  : 	// THIS SHOULD BE REMOVED IN THE LATE BETA AND SHIPPING VERSIONS
; 235  : 	if ( DOF >= instance.ParentObject->nDOFs )  return 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	movsx	edx, WORD PTR [ecx+54]
	cmp	DWORD PTR _DOF$[ebp], edx
	jl	SHORT $LN1@GetDOFoffs
	fldz
	jmp	SHORT $LN2@GetDOFoffs
$LN1@GetDOFoffs:

; 236  : 	
; 237  : 	ShiAssert( DOF < instance.ParentObject->nDOFs );
; 238  : 	return instance.DOFValues[DOF].translation;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	edx, DWORD PTR _DOF$[ebp]
	fld	DWORD PTR [ecx+edx*8+4]
$LN2@GetDOFoffs:

; 239  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetDOFoffset@DrawableBSP@@QAEMH@Z ENDP			; DrawableBSP::GetDOFoffset
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\drawbsp.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_DOF$ = 8						; size = 4
?GetDOFangle@DrawableBSP@@QAEMH@Z PROC			; DrawableBSP::GetDOFangle
; _this$ = ecx

; 202  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 203  : 	ShiAssert( id >= 0 );
; 204  : 
; 205  : 	// THIS IS A HACK TO TOLERATE OBJECTS WHICH DON'T YET HAVE DOFS
; 206  : 	// THIS SHOULD BE REMOVED IN THE LATE BETA AND SHIPPING VERSIONS
; 207  : 	if ( DOF >= instance.ParentObject->nDOFs )  return 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	movsx	edx, WORD PTR [ecx+54]
	cmp	DWORD PTR _DOF$[ebp], edx
	jl	SHORT $LN1@GetDOFangl
	fldz
	jmp	SHORT $LN2@GetDOFangl
$LN1@GetDOFangl:

; 208  : 
; 209  : 	ShiAssert( DOF < instance.ParentObject->nDOFs );
; 210  : 	return instance.DOFValues[DOF].rotation;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	edx, DWORD PTR _DOF$[ebp]
	fld	DWORD PTR [ecx+edx*8]
$LN2@GetDOFangl:

; 211  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetDOFangle@DrawableBSP@@QAEMH@Z ENDP			; DrawableBSP::GetDOFangle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\drawbsp.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_switchNumber$ = 8					; size = 4
_mask$ = 12						; size = 4
?SetSwitchMask@DrawableBSP@@QAEXHK@Z PROC		; DrawableBSP::SetSwitchMask
; _this$ = ecx

; 282  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 283  : 	ShiAssert( id >= 0 );
; 284  : 
; 285  : 	// THIS IS A HACK TO TOLERATE OBJECTS WHICH DON'T YET HAVE DOFS
; 286  : 	// THIS SHOULD BE REMOVED IN THE LATE BETA AND SHIPPING VERSIONS
; 287  : 	if ( switchNumber >= instance.ParentObject->nSwitches )  return;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	movsx	edx, WORD PTR [ecx+52]
	cmp	DWORD PTR _switchNumber$[ebp], edx
	jl	SHORT $LN2@SetSwitchM
	jmp	SHORT $LN3@SetSwitchM
$LN2@SetSwitchM:

; 288  : 	
; 289  : 	ShiAssert( switchNumber < instance.ParentObject->nSwitches );
; 290  : 	if (switchNumber < instance.ParentObject->nSwitches )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	movsx	edx, WORD PTR [ecx+52]
	cmp	DWORD PTR _switchNumber$[ebp], edx
	jge	SHORT $LN3@SetSwitchM

; 291  : 	    instance.SwitchValues[switchNumber] = mask;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _switchNumber$[ebp]
	mov	eax, DWORD PTR _mask$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
$LN3@SetSwitchM:

; 292  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetSwitchMask@DrawableBSP@@QAEXHK@Z ENDP		; DrawableBSP::SetSwitchMask
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\drawbsp.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vertID$ = 8						; size = 4
_dx$ = 12						; size = 4
_dy$ = 16						; size = 4
_dz$ = 20						; size = 4
?SetDynamicVertex@DrawableBSP@@QAEXHMMM@Z PROC		; DrawableBSP::SetDynamicVertex
; _this$ = ecx

; 246  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 247  : 	// THIS IS A HACK TO TOLERATE OBJECTS WHICH DON'T YET HAVE DYANAMIC VERTS
; 248  : 	// THIS SHOULD BE REMOVED IN THE LATE BETA AND SHIPPING VERSIONS
; 249  : 	if (vertID >= instance.ParentObject->nDynamicCoords )  return;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	movsx	edx, WORD PTR [ecx+46]
	cmp	DWORD PTR _vertID$[ebp], edx
	jl	SHORT $LN1@SetDynamic
	jmp	SHORT $LN2@SetDynamic
$LN1@SetDynamic:

; 250  : 
; 251  : 	ShiAssert( vertID < instance.ParentObject->nDynamicCoords );
; 252  : 	instance.SetDynamicVertex( vertID, dx, dy, dz );

	push	ecx
	movss	xmm0, DWORD PTR _dz$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _dx$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _vertID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?SetDynamicVertex@ObjectInstance@@QAEXHMMM@Z ; ObjectInstance::SetDynamicVertex
$LN2@SetDynamic:

; 253  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetDynamicVertex@DrawableBSP@@QAEXHMMM@Z ENDP		; DrawableBSP::SetDynamicVertex
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\drawbsp.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_DOF$ = 8						; size = 4
_offset$ = 12						; size = 4
?SetDOFoffset@DrawableBSP@@QAEXHM@Z PROC		; DrawableBSP::SetDOFoffset
; _this$ = ecx

; 218  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 219  : 	ShiAssert( id >= 0 );
; 220  : 
; 221  : 	// THIS IS A HACK TO TOLERATE OBJECTS WHICH DON'T YET HAVE DOFS
; 222  : 	// THIS SHOULD BE REMOVED IN THE LATE BETA AND SHIPPING VERSIONS
; 223  : 	if ( DOF >= instance.ParentObject->nDOFs )  return;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	movsx	edx, WORD PTR [ecx+54]
	cmp	DWORD PTR _DOF$[ebp], edx
	jl	SHORT $LN2@SetDOFoffs
	jmp	SHORT $LN3@SetDOFoffs
$LN2@SetDOFoffs:

; 224  : 	
; 225  : 	ShiAssert( DOF < instance.ParentObject->nDOFs );
; 226  : 	if (DOF < instance.ParentObject->nDOFs)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	movsx	edx, WORD PTR [ecx+54]
	cmp	DWORD PTR _DOF$[ebp], edx
	jge	SHORT $LN1@SetDOFoffs

; 227  : 	    instance.DOFValues[DOF].translation = offset;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	edx, DWORD PTR _DOF$[ebp]
	movss	xmm0, DWORD PTR _offset$[ebp]
	movss	DWORD PTR [ecx+edx*8+4], xmm0
$LN1@SetDOFoffs:
$LN3@SetDOFoffs:

; 228  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetDOFoffset@DrawableBSP@@QAEXHM@Z ENDP		; DrawableBSP::SetDOFoffset
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\drawbsp.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_DOF$ = 8						; size = 4
_radians$ = 12						; size = 4
?SetDOFangle@DrawableBSP@@QAEXHM@Z PROC			; DrawableBSP::SetDOFangle
; _this$ = ecx

; 191  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 192  : 	ShiAssert( id >= 0 );
; 193  : 
; 194  : 	// THIS IS A HACK TO TOLERATE OBJECTS WHICH DON'T YET HAVE DOFS
; 195  : 	// THIS SHOULD BE REMOVED IN THE LATE BETA AND SHIPPING VERSIONS
; 196  : 	if ( DOF >= instance.ParentObject->nDOFs )  return;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	movsx	edx, WORD PTR [ecx+54]
	cmp	DWORD PTR _DOF$[ebp], edx
	jl	SHORT $LN1@SetDOFangl
	jmp	SHORT $LN2@SetDOFangl
$LN1@SetDOFangl:

; 197  : 
; 198  : 	ShiAssert( DOF < instance.ParentObject->nDOFs );
; 199  : 	instance.DOFValues[DOF].rotation = radians;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	edx, DWORD PTR _DOF$[ebp]
	movss	xmm0, DWORD PTR _radians$[ebp]
	movss	DWORD PTR [ecx+edx*8], xmm0
$LN2@SetDOFangl:

; 200  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetDOFangle@DrawableBSP@@QAEXHM@Z ENDP			; DrawableBSP::SetDOFangle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\drawbsp.cpp
_TEXT	SEGMENT
tv236 = -28						; size = 4
tv200 = -24						; size = 4
tv176 = -20						; size = 4
_fog$ = -16						; size = 4
_this$ = -12						; size = 4
_z$ = -8						; size = 4
_alpha$ = -4						; size = 4
_renderer$ = 8						; size = 4
?SetupVisibility@DrawableBSP@@QAE_NPAVRenderOTW@@@Z PROC ; DrawableBSP::SetupVisibility
; _this$ = ecx

; 463  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 464  : 	float			alpha, fog, z;
; 465  : 
; 466  : 	// RED - Linear Fog - checvk if under visibility limit
; 467  : 	if(position.z > realWeather->VisibleLimit()) return false;

	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?VisibleLimit@RealWeather@@QAEMXZ	; RealWeather::VisibleLimit
	fstp	DWORD PTR tv200[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	comiss	xmm0, DWORD PTR tv200[ebp]
	jbe	SHORT $LN14@SetupVisib
	xor	al, al
	jmp	$LN15@SetupVisib
$LN14@SetupVisib:

; 468  : 
; 469  : 
; 470  : 	//////////////////////////////////// FOG / HAZE ///////////////////////////////////////////////////
; 471  : 
; 472  : 	z = renderer->ZDistanceFromCamera(&position);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?ZDistanceFromCamera@Render3D@@QAEMPAUTpoint@@@Z ; Render3D::ZDistanceFromCamera
	fstp	DWORD PTR _z$[ebp]

; 473  : 
; 474  : 	// RED - Linear Fog, if inside the layer, modulate with Hze, we can not use linear fog there
; 475  : 	if(realWeather->weatherCondition > FAIR && position.z > ( realWeather->HiOvercast )){

	mov	edx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	cmp	DWORD PTR [edx+15688], 2
	jle	SHORT $LN13@SetupVisib
	mov	eax, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+12]
	comiss	xmm0, DWORD PTR [eax+15752]
	jbe	SHORT $LN13@SetupVisib

; 476  : 		alpha = 1.0f - ( -realWeather->HiOvercast + position.z ) / ( realWeather->stratusDepth / 2.0f );

	mov	edx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	movss	xmm0, DWORD PTR [edx+15752]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	movss	xmm1, DWORD PTR [ecx+15744]
	divss	xmm1, DWORD PTR __real@40000000
	divss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	DWORD PTR _alpha$[ebp], xmm1

; 477  : 		alpha *= alpha * alpha;

	movss	xmm0, DWORD PTR _alpha$[ebp]
	mulss	xmm0, DWORD PTR _alpha$[ebp]
	mulss	xmm0, DWORD PTR _alpha$[ebp]
	movss	DWORD PTR _alpha$[ebp], xmm0

; 478  : 	} else {

	jmp	$LN1@SetupVisib
$LN13@SetupVisib:

; 479  : 		if(z > renderer->haze_start+renderer->haze_depth) alpha = 0.f;

	mov	edx, DWORD PTR _renderer$[ebp]
	mov	eax, DWORD PTR _renderer$[ebp]
	movss	xmm0, DWORD PTR [edx+263080]
	addss	xmm0, DWORD PTR [eax+263084]
	movss	xmm1, DWORD PTR _z$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN11@SetupVisib
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _alpha$[ebp], xmm0
	jmp	$LN1@SetupVisib
$LN11@SetupVisib:

; 480  : 		else if(z < renderer->PERSPECTIVE_RANGE) alpha = 1.f;

	movss	xmm0, DWORD PTR ?PERSPECTIVE_RANGE@RenderOTW@@2MB
	comiss	xmm0, DWORD PTR _z$[ebp]
	jbe	SHORT $LN9@SetupVisib
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _alpha$[ebp], xmm0

; 481  : 		else{

	jmp	$LN1@SetupVisib
$LN9@SetupVisib:

; 482  : 			if(renderer->GetHazeMode()){

	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?GetHazeMode@RenderOTW@@QAEHXZ		; RenderOTW::GetHazeMode
	test	eax, eax
	je	$LN7@SetupVisib

; 483  : 				fog = min(renderer->GetValleyFog(z,position.z),.65f);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?GetValleyFog@RenderOTW@@QAEMMM@Z	; RenderOTW::GetValleyFog
	fstp	DWORD PTR tv236[ebp]
	movss	xmm0, DWORD PTR __real@3f266666
	comiss	xmm0, DWORD PTR tv236[ebp]
	jbe	SHORT $LN17@SetupVisib
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?GetValleyFog@RenderOTW@@QAEMMM@Z	; RenderOTW::GetValleyFog
	fstp	DWORD PTR tv176[ebp]
	jmp	SHORT $LN18@SetupVisib
$LN17@SetupVisib:
	movss	xmm0, DWORD PTR __real@3f266666
	movss	DWORD PTR tv176[ebp], xmm0
$LN18@SetupVisib:
	movss	xmm0, DWORD PTR tv176[ebp]
	movss	DWORD PTR _fog$[ebp], xmm0

; 484  : 				if(z < renderer->haze_start) alpha = 1.f-fog;

	mov	eax, DWORD PTR _renderer$[ebp]
	movss	xmm0, DWORD PTR [eax+263080]
	comiss	xmm0, DWORD PTR _z$[ebp]
	jbe	SHORT $LN6@SetupVisib
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _fog$[ebp]
	movss	DWORD PTR _alpha$[ebp], xmm0

; 485  : 				else { 

	jmp	SHORT $LN5@SetupVisib
$LN6@SetupVisib:

; 486  : 					alpha = renderer->GetRangeOnlyFog(z);

	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?GetRangeOnlyFog@RenderOTW@@QAEMM@Z	; RenderOTW::GetRangeOnlyFog
	fstp	DWORD PTR _alpha$[ebp]

; 487  : 					if(alpha < fog)	alpha = fog;

	movss	xmm0, DWORD PTR _fog$[ebp]
	comiss	xmm0, DWORD PTR _alpha$[ebp]
	jbe	SHORT $LN4@SetupVisib
	movss	xmm0, DWORD PTR _fog$[ebp]
	movss	DWORD PTR _alpha$[ebp], xmm0
$LN4@SetupVisib:

; 488  : 					alpha = 1.f-alpha;

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _alpha$[ebp]
	movss	DWORD PTR _alpha$[ebp], xmm0
$LN5@SetupVisib:

; 489  : 				}
; 490  : 			} else {

	jmp	SHORT $LN1@SetupVisib
$LN7@SetupVisib:

; 491  : 				if(z < renderer->haze_start) alpha = 1.f;

	mov	ecx, DWORD PTR _renderer$[ebp]
	movss	xmm0, DWORD PTR [ecx+263080]
	comiss	xmm0, DWORD PTR _z$[ebp]
	jbe	SHORT $LN2@SetupVisib
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _alpha$[ebp], xmm0

; 492  : 				else {

	jmp	SHORT $LN1@SetupVisib
$LN2@SetupVisib:

; 493  : 					alpha = renderer->GetRangeOnlyFog(z);

	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?GetRangeOnlyFog@RenderOTW@@QAEMM@Z	; RenderOTW::GetRangeOnlyFog
	fstp	DWORD PTR _alpha$[ebp]

; 494  : 					alpha = 1.f-alpha;

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _alpha$[ebp]
	movss	DWORD PTR _alpha$[ebp], xmm0
$LN1@SetupVisib:

; 495  : 				}
; 496  : 			}
; 497  : 		}
; 498  : 	}
; 499  : 	// Set the Fog stuff...
; 500  : 	TheStateStack.SetFog(alpha,(Pcolor*)renderer->GetFogColor());

	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?GetFogColor@RenderOTW@@QAEPAUTcolor@@XZ ; RenderOTW::GetFogColor
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _alpha$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SetFog@StateStackClass@@SAXMPAUPcolor@@@Z ; StateStackClass::SetFog
	add	esp, 8

; 501  : 	
; 502  : 
; 503  : 	// OBJECT TO DRAW
; 504  : 	return true;

	mov	al, 1
$LN15@SetupVisib:

; 505  : 
; 506  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetupVisibility@DrawableBSP@@QAE_NPAVRenderOTW@@@Z ENDP ; DrawableBSP::SetupVisibility
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\drawbsp.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_slotNumber$ = 8					; size = 4
_offset$ = 12						; size = 4
?GetChildOffset@DrawableBSP@@QAEXHPAUTpoint@@@Z PROC	; DrawableBSP::GetChildOffset
; _this$ = ecx

; 171  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 172  : 	ShiAssert( id >= 0 );
; 173  : 	ShiAssert( slotNumber >= 0 );
; 174  : 	ShiAssert( slotNumber < instance.ParentObject->nSlots );
; 175  : 
; 176  : 	// THIS IS A HACK TO TOLERATE OBJECTS WHICH DON'T YET HAVE SLOTS
; 177  : 	// THIS SHOULD BE REMOVED IN THE LATE BETA AND SHIPPING VERSIONS
; 178  : 	if (slotNumber >= instance.ParentObject->nSlots )  return;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	movzx	edx, BYTE PTR [ecx+51]
	cmp	DWORD PTR _slotNumber$[ebp], edx
	jl	SHORT $LN1@GetChildOf
	jmp	SHORT $LN2@GetChildOf
$LN1@GetChildOf:

; 179  : 
; 180  : 	*offset = instance.ParentObject->pSlotAndDynamicPositions[slotNumber];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	edx, DWORD PTR _slotNumber$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR [ecx+40]
	add	eax, edx
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 181  : 	offset->x *= scale;

	mov	ecx, DWORD PTR _offset$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR [edx+20]
	mov	eax, DWORD PTR _offset$[ebp]
	movss	DWORD PTR [eax], xmm0

; 182  : 	offset->y *= scale;

	mov	ecx, DWORD PTR _offset$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR [edx+20]
	mov	eax, DWORD PTR _offset$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 183  : 	offset->z *= scale;

	mov	ecx, DWORD PTR _offset$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm0, DWORD PTR [edx+20]
	mov	eax, DWORD PTR _offset$[ebp]
	movss	DWORD PTR [eax+8], xmm0
$LN2@GetChildOf:

; 184  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetChildOffset@DrawableBSP@@QAEXHPAUTpoint@@@Z ENDP	; DrawableBSP::GetChildOffset
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\drawbsp.cpp
_TEXT	SEGMENT
_this$ = -32						; size = 4
_pos$ = -28						; size = 12
_offset$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_child$ = 8						; size = 4
_slotNumber$ = 12					; size = 4
?DetachChild@DrawableBSP@@QAEXPAV1@H@Z PROC		; DrawableBSP::DetachChild
; _this$ = ecx

; 126  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 127  : 	ShiAssert( id >= 0 );
; 128  : 	ShiAssert( child );
; 129  : 	ShiAssert( slotNumber >= 0 );
; 130  : 	ShiAssert( slotNumber < instance.ParentObject->nSlots );
; 131  : 	ShiAssert( (instance.SlotChildren) && (instance.SlotChildren[slotNumber] == &child->instance) );
; 132  : 
; 133  : 	Tpoint	offset;
; 134  : 	Tpoint	pos;
; 135  : 
; 136  : 	// THIS IS A HACK TO TOLERATE OBJECTS WHICH DON'T YET HAVE SLOTS
; 137  : 	// THIS SHOULD BE REMOVED IN THE LATE BETA AND SHIPPING VERSIONS
; 138  : 	if (slotNumber >= instance.ParentObject->nSlots){ return; }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	movzx	edx, BYTE PTR [ecx+51]
	cmp	DWORD PTR _slotNumber$[ebp], edx
	jl	SHORT $LN3@DetachChil
	jmp	$LN4@DetachChil
$LN3@DetachChil:

; 139  : 
; 140  : 	if ((!instance.SlotChildren) || (instance.SlotChildren[slotNumber] != &child->instance)){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+92], 0
	je	SHORT $LN1@DetachChil
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	mov	eax, DWORD PTR _child$[ebp]
	add	eax, 84					; 00000054H
	mov	ecx, DWORD PTR _slotNumber$[ebp]
	cmp	DWORD PTR [edx+ecx*4], eax
	je	SHORT $LN2@DetachChil
$LN1@DetachChil:

; 141  : 		//(*(int*)0) = 0;
; 142  : 		return;

	jmp	$LN4@DetachChil
$LN2@DetachChil:

; 143  : 	}
; 144  : 
; 145  : 	// Get the childs offset from the parent in object space
; 146  : 	GetChildOffset( slotNumber, &offset );

	lea	edx, DWORD PTR _offset$[ebp]
	push	edx
	mov	eax, DWORD PTR _slotNumber$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetChildOffset@DrawableBSP@@QAEXHPAUTpoint@@@Z ; DrawableBSP::GetChildOffset

; 147  : 
; 148  : 	// Rotate the offset into world space and add the parents position
; 149  : 	pos.x = orientation.M11*offset.x + orientation.M12*offset.y + orientation.M13*offset.z + position.x;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+48]
	mulss	xmm0, DWORD PTR _offset$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+52]
	mulss	xmm1, DWORD PTR _offset$[ebp+4]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+56]
	mulss	xmm1, DWORD PTR _offset$[ebp+8]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR _pos$[ebp], xmm0

; 150  : 	pos.y = orientation.M21*offset.x + orientation.M22*offset.y + orientation.M23*offset.z + position.y;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+60]
	mulss	xmm0, DWORD PTR _offset$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+64]
	mulss	xmm1, DWORD PTR _offset$[ebp+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+68]
	mulss	xmm1, DWORD PTR _offset$[ebp+8]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR _pos$[ebp+4], xmm0

; 151  : 	pos.z = orientation.M31*offset.x + orientation.M32*offset.y + orientation.M33*offset.z + position.z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+72]
	mulss	xmm0, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+76]
	mulss	xmm1, DWORD PTR _offset$[ebp+4]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+80]
	mulss	xmm1, DWORD PTR _offset$[ebp+8]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _pos$[ebp+8], xmm0

; 152  : 
; 153  : 	// Update the child's location
; 154  : 	child->position = pos;

	mov	ecx, DWORD PTR _child$[ebp]
	add	ecx, 4
	mov	edx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _pos$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _pos$[ebp+8]
	mov	DWORD PTR [ecx+8], edx

; 155  : 	
; 156  : 	// Give the child the same orientation as the parent
; 157  : 	// (We used to set scale as well, but that cause a few problems, so we'll leave
; 158  : 	//  that up to the application...)
; 159  : 	child->orientation = orientation;

	mov	esi, DWORD PTR _this$[ebp]
	add	esi, 48					; 00000030H
	mov	edi, DWORD PTR _child$[ebp]
	add	edi, 48					; 00000030H
	mov	ecx, 9
	rep movsd

; 160  : 
; 161  : 	// Stop drawing the child object as an attachment
; 162  : 	instance.SetSlotChild( slotNumber, NULL );

	push	0
	mov	eax, DWORD PTR _slotNumber$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?SetSlotChild@ObjectInstance@@QAEXHPAV1@@Z ; ObjectInstance::SetSlotChild
$LN4@DetachChil:

; 163  : }

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
?DetachChild@DrawableBSP@@QAEXPAV1@H@Z ENDP		; DrawableBSP::DetachChild
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\drawbsp.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_child$ = 8						; size = 4
_slotNumber$ = 12					; size = 4
?AttachChild@DrawableBSP@@QAEXPAV1@H@Z PROC		; DrawableBSP::AttachChild
; _this$ = ecx

; 103  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 104  : 	ShiAssert( id >= 0 );
; 105  : 	ShiAssert( child );
; 106  : 	ShiAssert( slotNumber >= 0 );
; 107  : 	ShiAssert( slotNumber < instance.ParentObject->nSlots );
; 108  : 	ShiAssert( (instance.SlotChildren) && (instance.SlotChildren[slotNumber] == NULL) );
; 109  : 
; 110  : 	// THIS IS A HACK TO TOLERATE OBJECTS WHICH DON'T YET HAVE SLOTS
; 111  : 	// THIS SHOULD BE REMOVED IN THE LATE BETA AND SHIPPING VERSIONS
; 112  : 	if (!instance.SlotChildren) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jne	SHORT $LN3@AttachChil
	jmp	SHORT $LN4@AttachChil
$LN3@AttachChil:

; 113  : 	if (slotNumber >= instance.ParentObject->nSlots ) return;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	movzx	eax, BYTE PTR [edx+51]
	cmp	DWORD PTR _slotNumber$[ebp], eax
	jl	SHORT $LN2@AttachChil
	jmp	SHORT $LN4@AttachChil
$LN2@AttachChil:

; 114  : 	if (!child) return;

	cmp	DWORD PTR _child$[ebp], 0
	jne	SHORT $LN1@AttachChil
	jmp	SHORT $LN4@AttachChil
$LN1@AttachChil:

; 115  : 
; 116  : 	instance.SetSlotChild( slotNumber, &child->instance );

	mov	ecx, DWORD PTR _child$[ebp]
	add	ecx, 84					; 00000054H
	push	ecx
	mov	edx, DWORD PTR _slotNumber$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?SetSlotChild@ObjectInstance@@QAEXHPAV1@@Z ; ObjectInstance::SetSlotChild
$LN4@AttachChil:

; 117  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?AttachChild@DrawableBSP@@QAEXPAV1@H@Z ENDP		; DrawableBSP::AttachChild
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\drawbsp.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
_rot$ = 12						; size = 4
?Update@DrawableBSP@@QAEXPBUTpoint@@PBUTrotation@@@Z PROC ; DrawableBSP::Update
; _this$ = ecx

; 85   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 86   : 	ShiAssert( id >= 0 );
; 87   : 	
; 88   : 	ShiAssert(!_isnan(position.x));
; 89   : 	// Update the location of this object
; 90   : 	position.x = pos->x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 91   : 	position.y = pos->y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx

; 92   : 	if ( GetClass() != GroundVehicle )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClass@DrawableObject@@QBE?AW4DrawClass@1@XZ ; DrawableObject::GetClass
	cmp	eax, 2
	je	SHORT $LN1@Update

; 93   : 		position.z = pos->z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+12], edx
$LN1@Update:

; 94   : 	
; 95   : 	orientation = *rot;

	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 48					; 00000030H
	mov	ecx, 9
	mov	esi, DWORD PTR _rot$[ebp]
	rep movsd

; 96   : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?Update@DrawableBSP@@QAEXPBUTpoint@@PBUTrotation@@@Z ENDP ; DrawableBSP::Update
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\drawbsp.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1DrawableBSP@@UAE@XZ PROC				; DrawableBSP::~DrawableBSP
; _this$ = ecx

; 68   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1DrawableBSP@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DrawableBSP@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 69   : 	ShiAssert( id >= 0 );
; 70   : 
; 71   : 	// HACK!!!
; 72   : 	// This check should go as soon as Drawable2D stops inheriting from 
; 73   : 	// this class.
; 74   : //	if (id < 0)  return;
; 75   : 
; 76   : 	// Mark this id as having been released
; 77   : 	id = -id;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	neg	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+120], edx

; 78   : }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??1ObjectInstance@@QAE@XZ		; ObjectInstance::~ObjectInstance
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DrawableObject@@UAE@XZ		; DrawableObject::~DrawableObject
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1DrawableBSP@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1DrawableObject@@UAE@XZ		; DrawableObject::~DrawableObject
__ehhandler$??1DrawableBSP@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1DrawableBSP@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1DrawableBSP@@UAE@XZ ENDP				; DrawableBSP::~DrawableBSP
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\drawbsp.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ID$ = 8						; size = 4
_pos$ = 12						; size = 4
_rot$ = 16						; size = 4
_s$ = 20						; size = 4
??0DrawableBSP@@QAE@HPBUTpoint@@PBUTrotation@@M@Z PROC	; DrawableBSP::DrawableBSP
; _this$ = ecx

; 44   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DrawableBSP@@QAE@HPBUTpoint@@PBUTrotation@@M@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	movss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DrawableObject@@QAE@M@Z		; DrawableObject::DrawableObject
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DrawableBSP@@6B@
	mov	ecx, DWORD PTR _ID$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??0ObjectInstance@@QAE@H@Z		; ObjectInstance::ObjectInstance
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 45   : 	// Initialize our member variables
; 46   : 	id = ID;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _ID$[ebp]
	mov	DWORD PTR [edx+120], eax

; 47   : 	label[0]=0;

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+128], 0

; 48   : 	labelLen = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+160], 0

; 49   : 	drawClassID = BSP;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 1

; 50   : 	inhibitDraw = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+124], 0

; 51   : 	
; 52   : 	// Record our position
; 53   : 	position = *pos;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx

; 54   : 
; 55   : 	// Ask the object library what size this object is
; 56   : 	radius = instance.Radius();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?Radius@ObjectInstance@@QBEMXZ		; ObjectInstance::Radius
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+16]

; 57   : 
; 58   : 	// Store our rotation matrix
; 59   : 	orientation = *rot;

	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 48					; 00000030H
	mov	ecx, 9
	mov	esi, DWORD PTR _rot$[ebp]
	rep movsd

; 60   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0DrawableBSP@@QAE@HPBUTpoint@@PBUTrotation@@M@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1DrawableObject@@UAE@XZ		; DrawableObject::~DrawableObject
__unwindfunclet$??0DrawableBSP@@QAE@HPBUTpoint@@PBUTrotation@@M@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	jmp	??1ObjectInstance@@QAE@XZ		; ObjectInstance::~ObjectInstance
__ehhandler$??0DrawableBSP@@QAE@HPBUTpoint@@PBUTrotation@@M@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DrawableBSP@@QAE@HPBUTpoint@@PBUTrotation@@M@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DrawableBSP@@QAE@HPBUTpoint@@PBUTrotation@@M@Z ENDP	; DrawableBSP::DrawableBSP
; Function compile flags: /Odtp
;	COMDAT ??_GDrawableObject@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDrawableObject@@UAEPAXI@Z PROC			; DrawableObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DrawableObject@@UAE@XZ		; DrawableObject::~DrawableObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDrawableObject@@UAEPAXI@Z ENDP			; DrawableObject::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawobj.h
;	COMDAT ?SetParentList@DrawableObject@@MAEXPAVObjectDisplayList@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_list$ = 8						; size = 4
?SetParentList@DrawableObject@@MAEXPAVObjectDisplayList@@@Z PROC ; DrawableObject::SetParentList, COMDAT
; _this$ = ecx

; 70   : 	virtual	void SetParentList( ObjectDisplayList *list )	{ parentList = list; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _list$[ebp]
	mov	DWORD PTR [eax+28], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetParentList@DrawableObject@@MAEXPAVObjectDisplayList@@@Z ENDP ; DrawableObject::SetParentList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawobj.h
;	COMDAT ?GetRayHit@DrawableObject@@UAEHPBUTpoint@@0PAU2@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?GetRayHit@DrawableObject@@UAEHPBUTpoint@@0PAU2@M@Z PROC ; DrawableObject::GetRayHit, COMDAT
; _this$ = ecx

; 49   : 	virtual BOOL GetRayHit( const Tpoint*, const Tpoint*, Tpoint*, float = 1.0f ) { return FALSE; } ;

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?GetRayHit@DrawableObject@@UAEHPBUTpoint@@0PAU2@M@Z ENDP ; DrawableObject::GetRayHit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawobj.h
;	COMDAT ?Draw@DrawableObject@@UAEXPAVRender3D@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?Draw@DrawableObject@@UAEXPAVRender3D@@@Z PROC		; DrawableObject::Draw, COMDAT
; _this$ = ecx

; 45   : 	virtual void Draw( class Render3D* ) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?Draw@DrawableObject@@UAEXPAVRender3D@@@Z ENDP		; DrawableObject::Draw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawobj.h
;	COMDAT ?SetInhibitFlag@DrawableObject@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetInhibitFlag@DrawableObject@@UAEXH@Z PROC		; DrawableObject::SetInhibitFlag, COMDAT
; _this$ = ecx

; 42   : 	virtual void SetInhibitFlag( BOOL )				{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetInhibitFlag@DrawableObject@@UAEXH@Z ENDP		; DrawableObject::SetInhibitFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawobj.h
;	COMDAT ?SetLabel@DrawableObject@@UAEXPADK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?SetLabel@DrawableObject@@UAEXPADK@Z PROC		; DrawableObject::SetLabel, COMDAT
; _this$ = ecx

; 40   : 	virtual void SetLabel( char*, DWORD )	{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetLabel@DrawableObject@@UAEXPADK@Z ENDP		; DrawableObject::SetLabel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawobj.h
;	COMDAT ?GetClass@DrawableObject@@QBE?AW4DrawClass@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetClass@DrawableObject@@QBE?AW4DrawClass@1@XZ PROC	; DrawableObject::GetClass, COMDAT
; _this$ = ecx

; 26   : 	DrawClass GetClass() const { return drawClassID; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetClass@DrawableObject@@QBE?AW4DrawClass@1@XZ ENDP	; DrawableObject::GetClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawobj.h
;	COMDAT ?GetRadarSign@DrawableObject@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRadarSign@DrawableObject@@UAEMXZ PROC		; DrawableObject::GetRadarSign, COMDAT
; _this$ = ecx

; 22   : 	virtual	float	GetRadarSign(void)		{ return 0.0f; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fldz
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRadarSign@DrawableObject@@UAEMXZ ENDP		; DrawableObject::GetRadarSign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawobj.h
;	COMDAT ??1DrawableObject@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1DrawableObject@@UAE@XZ PROC				; DrawableObject::~DrawableObject, COMDAT
; _this$ = ecx

; 19   : 	virtual ~DrawableObject()	{ ShiAssert( parentList == NULL ) };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DrawableObject@@6B@
	mov	esp, ebp
	pop	ebp
	ret	0
??1DrawableObject@@UAE@XZ ENDP				; DrawableObject::~DrawableObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawobj.h
;	COMDAT ??0DrawableObject@@QAE@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??0DrawableObject@@QAE@M@Z PROC				; DrawableObject::DrawableObject, COMDAT
; _this$ = ecx

; 17   : 	DrawableObject( float s )	{ drawClassID = Default, scale = s, parentList = NULL, prev = next = NULL; test = 0.0;  };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DrawableObject@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR [edx+20], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+40], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0DrawableObject@@QAE@M@Z ENDP				; DrawableObject::DrawableObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\objectinstance.h
;	COMDAT ?SetSlotChild@ObjectInstance@@QAEXHPAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
_o$ = 12						; size = 4
?SetSlotChild@ObjectInstance@@QAEXHPAV1@@Z PROC		; ObjectInstance::SetSlotChild, COMDAT
; _this$ = ecx

; 37   : 	void	SetSlotChild( int id, ObjectInstance *o )	{ ShiAssert(id<ParentObject->nSlots); if(id<ParentObject->nSlots)SlotChildren[id] = o; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movzx	edx, BYTE PTR [ecx+51]
	cmp	DWORD PTR _id$[ebp], edx
	jge	SHORT $LN2@SetSlotChi
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _id$[ebp]
	mov	eax, DWORD PTR _o$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
$LN2@SetSlotChi:
	mov	esp, ebp
	pop	ebp
	ret	8
?SetSlotChild@ObjectInstance@@QAEXHPAV1@@Z ENDP		; ObjectInstance::SetSlotChild
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\objectinstance.h
;	COMDAT ?BoxBack@ObjectInstance@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BoxBack@ObjectInstance@@QBEMXZ PROC			; ObjectInstance::BoxBack, COMDAT
; _this$ = ecx

; 31   : 	float	BoxBack(void)	const	{ return ParentObject->minX; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	fld	DWORD PTR [ecx+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?BoxBack@ObjectInstance@@QBEMXZ ENDP			; ObjectInstance::BoxBack
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\objectinstance.h
;	COMDAT ?BoxFront@ObjectInstance@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BoxFront@ObjectInstance@@QBEMXZ PROC			; ObjectInstance::BoxFront, COMDAT
; _this$ = ecx

; 30   : 	float	BoxFront(void)	const	{ return ParentObject->maxX; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	fld	DWORD PTR [ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?BoxFront@ObjectInstance@@QBEMXZ ENDP			; ObjectInstance::BoxFront
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\objectinstance.h
;	COMDAT ?BoxBottom@ObjectInstance@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BoxBottom@ObjectInstance@@QBEMXZ PROC			; ObjectInstance::BoxBottom, COMDAT
; _this$ = ecx

; 29   : 	float	BoxBottom(void)	const	{ return ParentObject->maxZ; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	fld	DWORD PTR [ecx+24]
	mov	esp, ebp
	pop	ebp
	ret	0
?BoxBottom@ObjectInstance@@QBEMXZ ENDP			; ObjectInstance::BoxBottom
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\objectinstance.h
;	COMDAT ?BoxTop@ObjectInstance@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BoxTop@ObjectInstance@@QBEMXZ PROC			; ObjectInstance::BoxTop, COMDAT
; _this$ = ecx

; 28   : 	float	BoxTop(void)	const	{ return ParentObject->minZ; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	fld	DWORD PTR [ecx+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?BoxTop@ObjectInstance@@QBEMXZ ENDP			; ObjectInstance::BoxTop
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\objectinstance.h
;	COMDAT ?BoxRight@ObjectInstance@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BoxRight@ObjectInstance@@QBEMXZ PROC			; ObjectInstance::BoxRight, COMDAT
; _this$ = ecx

; 27   : 	float	BoxRight(void)	const	{ return ParentObject->maxY; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	fld	DWORD PTR [ecx+16]
	mov	esp, ebp
	pop	ebp
	ret	0
?BoxRight@ObjectInstance@@QBEMXZ ENDP			; ObjectInstance::BoxRight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\objectinstance.h
;	COMDAT ?BoxLeft@ObjectInstance@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BoxLeft@ObjectInstance@@QBEMXZ PROC			; ObjectInstance::BoxLeft, COMDAT
; _this$ = ecx

; 26   : 	float	BoxLeft(void)	const	{ return ParentObject->minY; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	fld	DWORD PTR [ecx+12]
	mov	esp, ebp
	pop	ebp
	ret	0
?BoxLeft@ObjectInstance@@QBEMXZ ENDP			; ObjectInstance::BoxLeft
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\objectinstance.h
;	COMDAT ?Radius@ObjectInstance@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Radius@ObjectInstance@@QBEMXZ PROC			; ObjectInstance::Radius, COMDAT
; _this$ = ecx

; 25   : 	float	Radius(void)	const	{ return ParentObject->radius; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	fld	DWORD PTR [ecx]
	mov	esp, ebp
	pop	ebp
	ret	0
?Radius@ObjectInstance@@QBEMXZ ENDP			; ObjectInstance::Radius
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\renderow.h
;	COMDAT ?GetFogColor@RenderOTW@@QAEPAUTcolor@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFogColor@RenderOTW@@QAEPAUTcolor@@XZ PROC		; RenderOTW::GetFogColor, COMDAT
; _this$ = ecx

; 147  : 	Tcolor* GetFogColor( void )					{ return &haze_ground_color; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 263144				; 000403e8H
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFogColor@RenderOTW@@QAEPAUTcolor@@XZ ENDP		; RenderOTW::GetFogColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\renderow.h
;	COMDAT ?GetRangeOnlyFog@RenderOTW@@QAEMM@Z
_TEXT	SEGMENT
tv77 = -8						; size = 4
_this$ = -4						; size = 4
_range$ = 8						; size = 4
?GetRangeOnlyFog@RenderOTW@@QAEMM@Z PROC		; RenderOTW::GetRangeOnlyFog, COMDAT
; _this$ = ecx

; 144  : 	float GetRangeOnlyFog(float range)			{ return min((range-haze_start)/haze_depth,1.f); };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _range$[ebp]
	subss	xmm0, DWORD PTR [eax+263080]
	mov	ecx, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [ecx+263084]
	movss	xmm1, DWORD PTR __real@3f800000
	comiss	xmm1, xmm0
	jbe	SHORT $LN3@GetRangeOn
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _range$[ebp]
	subss	xmm0, DWORD PTR [edx+263080]
	mov	eax, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [eax+263084]
	movss	DWORD PTR tv77[ebp], xmm0
	jmp	SHORT $LN4@GetRangeOn
$LN3@GetRangeOn:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv77[ebp], xmm0
$LN4@GetRangeOn:
	fld	DWORD PTR tv77[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetRangeOnlyFog@RenderOTW@@QAEMM@Z ENDP		; RenderOTW::GetRangeOnlyFog
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\renderow.h
;	COMDAT ?GetHazeMode@RenderOTW@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHazeMode@RenderOTW@@QAEHXZ PROC			; RenderOTW::GetHazeMode, COMDAT
; _this$ = ecx

; 123  : 	BOOL GetHazeMode( void )					{ return hazed; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+263096]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetHazeMode@RenderOTW@@QAEHXZ ENDP			; RenderOTW::GetHazeMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render3d.h
;	COMDAT ?Z@Render3D@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Z@Render3D@@QAEMXZ PROC				; Render3D::Z, COMDAT
; _this$ = ecx

; 80   : 	float	Z( void )	{ return cameraPos.z; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+262932]
	mov	esp, ebp
	pop	ebp
	ret	0
?Z@Render3D@@QAEMXZ ENDP				; Render3D::Z
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render3d.h
;	COMDAT ?Y@Render3D@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Y@Render3D@@QAEMXZ PROC				; Render3D::Y, COMDAT
; _this$ = ecx

; 79   : 	float	Y( void )	{ return cameraPos.y; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+262928]
	mov	esp, ebp
	pop	ebp
	ret	0
?Y@Render3D@@QAEMXZ ENDP				; Render3D::Y
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render3d.h
;	COMDAT ?X@Render3D@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X@Render3D@@QAEMXZ PROC				; Render3D::X, COMDAT
; _this$ = ecx

; 78   : 	float	X( void )	{ return cameraPos.x; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+262924]
	mov	esp, ebp
	pop	ebp
	ret	0
?X@Render3D@@QAEMXZ ENDP				; Render3D::X
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tod.h
;	COMDAT ?GetTextureLightingColor@CTimeOfDay@@QAEXPAUTcolor@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rgb$ = 8						; size = 4
?GetTextureLightingColor@CTimeOfDay@@QAEXPAUTcolor@@@Z PROC ; CTimeOfDay::GetTextureLightingColor, COMDAT
; _this$ = ecx

; 94   : 	void GetTextureLightingColor(Tcolor *rgb)	{ *rgb = TextureLighting; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 196				; 000000c4H
	mov	ecx, DWORD PTR _rgb$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?GetTextureLightingColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ENDP ; CTimeOfDay::GetTextureLightingColor
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
END
