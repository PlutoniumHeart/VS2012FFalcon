; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\Graphics\Objects\draw2d.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?gTexUV@@3PAUUV@@A				; gTexUV
PUBLIC	?glowCrossVerts@@3PAUTpoint@@A			; glowCrossVerts
PUBLIC	?numGlowCrossVerts@@3HA				; numGlowCrossVerts
PUBLIC	?glowCircleVerts@@3PAUTpoint@@A			; glowCircleVerts
PUBLIC	?numGlowCircleVerts@@3HA			; numGlowCircleVerts
PUBLIC	?glowSquareVerts@@3PAUTpoint@@A			; glowSquareVerts
PUBLIC	?numGlowSquareVerts@@3HA			; numGlowSquareVerts
PUBLIC	?glowStarVerts@@3PAUTpoint@@A			; glowStarVerts
PUBLIC	?numGlowStarVerts@@3HA				; numGlowStarVerts
PUBLIC	?coneDim@@3UTpoint@@A				; coneDim
PUBLIC	?lensFlareVerts@@3PAUTpoint@@A			; lensFlareVerts
PUBLIC	?lensAlphas@@3PAMA				; lensAlphas
PUBLIC	?lensRadius@@3PAMA				; lensRadius
PUBLIC	?lensDist@@3PAMA				; lensDist
PUBLIC	?lensRGB@@3PAUTcolor@@A				; lensRGB
PUBLIC	?lensCenterRGB@@3PAUTcolor@@A			; lensCenterRGB
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?DRAW2D_MAXTYPES@@3HB				; DRAW2D_MAXTYPES
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?sGreenMode@@3HA				; sGreenMode
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?gFireScatterPoints@@3PAY0M@UTpoint@@A		; gFireScatterPoints
PUBLIC	?gSmokeScatterPoints@@3PAY00UTpoint@@A		; gSmokeScatterPoints
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?gExplodeScatterPoints@@3PAY09UTpoint@@A	; gExplodeScatterPoints
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
_BSS	SEGMENT
?glowCircleVerts@@3PAUTpoint@@A DB 0f0H DUP (?)		; glowCircleVerts
?glowSquareVerts@@3PAUTpoint@@A DB 030H DUP (?)		; glowSquareVerts
?glowStarVerts@@3PAUTpoint@@A DB 0f0H DUP (?)		; glowStarVerts
?lensFlareVerts@@3PAUTpoint@@A DB 0c0H DUP (?)		; lensFlareVerts
?sGreenMode@@3HA DD 01H DUP (?)				; sGreenMode
?gFireScatterPoints@@3PAY0M@UTpoint@@A DB 0480H DUP (?)	; gFireScatterPoints
?gSmokeScatterPoints@@3PAY00UTpoint@@A DB 0cH DUP (?)	; gSmokeScatterPoints
?gExplodeScatterPoints@@3PAY09UTpoint@@A DB 078H DUP (?) ; gExplodeScatterPoints
_BSS	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
CONST	SEGMENT
?DRAW2D_MAXTYPES@@3HB DD 040H				; DRAW2D_MAXTYPES
_L_2	DD	03f317218r			; 0.693147
_NEAR_CLIP DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
_DATA	SEGMENT
?gTexUV@@3PAUUV@@A DD 03b03126fr		; 0.002	; gTexUV
	DD	03b03126fr			; 0.002
	DD	03e810625r			; 0.252
	DD	03b03126fr			; 0.002
	DD	03f008312r			; 0.502
	DD	03b03126fr			; 0.002
	DD	03f408312r			; 0.752
	DD	03b03126fr			; 0.002
	DD	03b03126fr			; 0.002
	DD	03e810625r			; 0.252
	DD	03e810625r			; 0.252
	DD	03e810625r			; 0.252
	DD	03f008312r			; 0.502
	DD	03e810625r			; 0.252
	DD	03f408312r			; 0.752
	DD	03e810625r			; 0.252
	DD	03b03126fr			; 0.002
	DD	03f008312r			; 0.502
	DD	03e810625r			; 0.252
	DD	03f008312r			; 0.502
	DD	03f008312r			; 0.502
	DD	03f008312r			; 0.502
	DD	03f408312r			; 0.752
	DD	03f008312r			; 0.502
	DD	03b03126fr			; 0.002
	DD	03f408312r			; 0.752
	DD	03e810625r			; 0.252
	DD	03f408312r			; 0.752
	DD	03f008312r			; 0.502
	DD	03f408312r			; 0.752
	DD	03f408312r			; 0.752
	DD	03f408312r			; 0.752
_lightLevel DD	03f800000r			; 1
?numGlowCrossVerts@@3HA DD 0cH				; numGlowCrossVerts
?glowCrossVerts@@3PAUTpoint@@A DD 000000000r	; 0	; glowCrossVerts
	DD	000000000r			; 0
	DD	0c1600000r			; -14
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	0c0000000r			; -2
	DD	000000000r			; 0
	DD	040000000r			; 2
	DD	0bf800000r			; -1
	DD	000000000r			; 0
	DD	041600000r			; 14
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	040000000r			; 2
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	040000000r			; 2
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	041600000r			; 14
	DD	000000000r			; 0
	DD	0bf800000r			; -1
	DD	040000000r			; 2
	DD	000000000r			; 0
	DD	0c0000000r			; -2
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	0c1600000r			; -14
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0c0000000r			; -2
	DD	0bf800000r			; -1
	DD	000000000r			; 0
	DD	0bf800000r			; -1
	DD	0c0000000r			; -2
?numGlowCircleVerts@@3HA DD 014H			; numGlowCircleVerts
?numGlowSquareVerts@@3HA DD 04H				; numGlowSquareVerts
?numGlowStarVerts@@3HA DD 014H				; numGlowStarVerts
?coneDim@@3UTpoint@@A DD 040900000r		; 4.5	; coneDim
	DD	040000000r			; 2
	DD	040000000r			; 2
?lensAlphas@@3PAMA DD 03e8f5c29r		; 0.28	; lensAlphas
	DD	03ebd70a4r			; 0.37
	DD	03e4ccccdr			; 0.2
	DD	03e75c28fr			; 0.24
	DD	03e8f5c29r			; 0.28
	DD	03e99999ar			; 0.3
	DD	03e851eb8r			; 0.26
	DD	03eb33333r			; 0.35
	DD	03e800000r			; 0.25
	DD	03e6147aer			; 0.22
?lensRadius@@3PAMA DD 0400147aer		; 2.02	; lensRadius
	DD	04043d70ar			; 3.06
	DD	03f866666r			; 1.05
	DD	03ee66666r			; 0.45
	DD	03f400000r			; 0.75
	DD	03fb0a3d7r			; 1.38
	DD	03f5eb852r			; 0.87
	DD	040c0f5c3r			; 6.03
	DD	040e2e148r			; 7.09
	DD	0412c7ae1r			; 10.78
?lensDist@@3PAMA DD 0c1400000r			; -12	; lensDist
	DD	0c2000000r			; -32
	DD	0c28c0000r			; -70
	DD	0c2f20000r			; -121
	DD	0c3350000r			; -181
	DD	0428c0000r			; 70
	DD	042fa0000r			; 125
	DD	041200000r			; 10
	DD	043250000r			; 165
	DD	042d20000r			; 105
?lensRGB@@3PAUTcolor@@A DD 03f800000r		; 1	; lensRGB
	DD	03f800000r			; 1
	DD	03f19999ar			; 0.6
	DD	03f800000r			; 1
	DD	03f4ccccdr			; 0.8
	DD	03f800000r			; 1
	DD	03f666666r			; 0.9
	DD	03f800000r			; 1
	DD	03f4ccccdr			; 0.8
	DD	03f800000r			; 1
	DD	03f4ccccdr			; 0.8
	DD	03f4ccccdr			; 0.8
	DD	03f800000r			; 1
	DD	03f666666r			; 0.9
	DD	03f800000r			; 1
	DD	03f4ccccdr			; 0.8
	DD	03f733333r			; 0.95
	DD	03f19999ar			; 0.6
	DD	03f800000r			; 1
	DD	03ecccccdr			; 0.4
	DD	03f4ccccdr			; 0.8
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f000000r			; 0.5
	DD	03f800000r			; 1
	DD	03e4ccccdr			; 0.2
	DD	03f800000r			; 1
	DD	03f333333r			; 0.7
	DD	03f333333r			; 0.7
	DD	03f800000r			; 1
?lensCenterRGB@@3PAUTcolor@@A DD 03e99999ar	; 0.3	; lensCenterRGB
	DD	03e99999ar			; 0.3
	DD	03f800000r			; 1
	DD	03f19999ar			; 0.6
	DD	03e4ccccdr			; 0.2
	DD	03e99999ar			; 0.3
	DD	03e4ccccdr			; 0.2
	DD	03e4ccccdr			; 0.2
	DD	03f800000r			; 1
	DD	03f333333r			; 0.7
	DD	03e99999ar			; 0.3
	DD	03f800000r			; 1
	DD	03e4ccccdr			; 0.2
	DD	03e4ccccdr			; 0.2
	DD	03f4ccccdr			; 0.8
	DD	03f800000r			; 1
	DD	03ecccccdr			; 0.4
	DD	03f666666r			; 0.9
	DD	03f333333r			; 0.7
	DD	03f333333r			; 0.7
	DD	03f800000r			; 1
	DD	03e99999ar			; 0.3
	DD	03f800000r			; 1
	DD	03f666666r			; 0.9
	DD	03ecccccdr			; 0.4
	DD	03f666666r			; 0.9
	DD	03f800000r			; 1
	DD	03dcccccdr			; 0.1
	DD	03f800000r			; 1
	DD	03f19999ar			; 0.6
_cloudPntList DD 0c5bcc000r			; -6040
	DD	0c4070000r			; -540
	DD	0c694ac00r			; -19030
	DD	0c6de1c00r			; -28430
	DD	0c4dfc000r			; -1790
	DD	046dcc800r			; 28260
	DD	047104200r			; 36930
	DD	045732000r			; 3890
	DD	04744ea00r			; 50410
	DD	045336000r			; 2870
	DD	0c4d48000r			; -1700
	DD	04736da00r			; 46810
	DD	0c763ee00r			; -58350
	DD	0c4d48000r			; -1700
	DD	0c64c1000r			; -13060
	DD	046f2bc00r			; 31070
	DD	045480000r			; 3200
	DD	0c7293800r			; -43320
	DD	0c7bdc400r			; -97160
	DD	0c4d48000r			; -1700
	DD	04576e000r			; 3950
	DD	0c792e000r			; -75200
	DD	0c4bb8000r			; -1500
	DD	047957400r			; 76520
	DD	04759ee00r			; 55790
	DD	0c5a1e000r			; -5180
	DD	0c7a24e00r			; -83100
	DD	0c7473800r			; -51000
	DD	0c3a00000r			; -320
	DD	0c7829100r			; -66850
	DD	047733400r			; 62260
	DD	0c3a00000r			; -320
	DD	047708200r			; 61570
	DD	0c7710e00r			; -61710
	DD	0c550c000r			; -3340
	DD	046fb7c00r			; 32190
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	0c5bcc000r			; -6040
	DD	0c7495400r			; -51540
	DD	0c694ac00r			; -19030
	DD	0c6a7a800r			; -21460
	DD	0c74b0200r			; -51970
	DD	0468e8000r			; 18240
	DD	047298800r			; 43400
	DD	0c74bf200r			; -52210
	DD	046bc7000r			; 24120
	DD	0c749f400r			; -51700
	DD	0c74bc000r			; -52160
	DD	046948400r			; 19010
	DD	0c605e800r			; -8570
	DD	0c7488200r			; -51330
	DD	0c74ca600r			; -52390
	DD	04731bc00r			; 45500
	DD	0c7509800r			; -53400
	DD	0c6725800r			; -15510
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	0c7a1ae00r			; -82780
	DD	0c749ea00r			; -51690
	DD	0c7bce300r			; -96710
	DD	0c6126800r			; -9370
	DD	0c7495400r			; -51540
	DD	043cd0000r			; 410
	DD	0c6a7a800r			; -21460
	DD	0c74a8a00r			; -51850
	DD	0473fae00r			; 49070
	DD	0457c8000r			; 4040
	DD	0c74e4a00r			; -52810
	DD	047871e00r			; 69180
	DD	0c6cbc000r			; -26080
	DD	0c74bc000r			; -52160
	DD	046984400r			; 19490
	DD	0452fa000r			; 2810
	DD	0c7488200r			; -51330
	DD	0c7081800r			; -34840
	DD	0c7719a00r			; -61850
	DD	0c749d600r			; -51670
	DD	047b17600r			; 90860
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	047c04e00r			; 98460
	DD	0c74d1400r			; -52500
	DD	0c732a200r			; -45730
	DD	0467b9000r			; 16100
	DD	0c7487800r			; -51320
	DD	0c749a400r			; -51620
	DD	047636c00r			; 58220
	DD	0c74e0400r			; -52740
	DD	0c760b000r			; -57520
	DD	0c6126800r			; -9370
	DD	0c4070000r			; -540
	DD	043cd0000r			; 410
	DD	0c4e60000r			; -1840
	DD	0c6a30c00r			; -20870
	DD	0470a6600r			; 35430
	DD	0c7230c00r			; -41740
	DD	046924000r			; 18720
	DD	04797d600r			; 77740
	DD	0460d9000r			; 9060
	DD	0c616c800r			; -9650
	DD	0c7921300r			; -74790
_lightningPosList DD 041300000r			; 11
	DD	000000000r			; 0
	DD	040e00000r			; 7
	DD	040a00000r			; 5
	DD	041100000r			; 9
	DD	041000000r			; 8
	DD	041000000r			; 8
	DD	041600000r			; 14
	DD	041800000r			; 16
	DD	041a00000r			; 20
	DD	041200000r			; 10
	DD	041c00000r			; 24
	DD	041300000r			; 11
	DD	041d80000r			; 27
	DD	040c00000r			; 6
	DD	041f00000r			; 30
	DD	040e00000r			; 7
	DD	042040000r			; 33
	DD	03f800000r			; 1
	DD	042180000r			; 38
	DD	040a00000r			; 5
	DD	042280000r			; 42
	DD	040a00000r			; 5
	DD	042340000r			; 45
	DD	041400000r			; 12
	DD	042400000r			; 48
	DD	041a00000r			; 20
	DD	042500000r			; 52
	DD	041a00000r			; 20
	DD	042680000r			; 58
	DD	041b80000r			; 23
	DD	042740000r			; 61
	DD	041b00000r			; 22
	DD	0427c0000r			; 63
	DD	041b00000r			; 22
	DD	042840000r			; 66
	DD	041c80000r			; 25
	DD	042880000r			; 68
	DD	041a00000r			; 20
	DD	0428c0000r			; 70
	DD	041c00000r			; 24
	DD	042960000r			; 75
	DD	041c00000r			; 24
	DD	0429a0000r			; 77
	DD	041f80000r			; 31
	DD	042a00000r			; 80
	DD	041f80000r			; 31
	DD	042a60000r			; 83
	DD	042040000r			; 33
	DD	042b00000r			; 88
	DD	041f80000r			; 31
	DD	042b80000r			; 92
	DD	0423c0000r			; 47
	DD	042ce0000r			; 103
	DD	042380000r			; 46
	DD	042d20000r			; 105
	DD	0423c0000r			; 47
	DD	042d60000r			; 107
	DD	042340000r			; 45
	DD	042e00000r			; 112
	DD	042400000r			; 48
	DD	042e40000r			; 114
	DD	042380000r			; 46
	DD	042ea0000r			; 117
	DD	0422c0000r			; 43
	DD	043000000r			; 128
_sLOD	DD	03f800000r			; 1
_sMaxScreenRes DD 03f800000r			; 1
_DATA	ENDS
PUBLIC	_fabsf
PUBLIC	_cosf
PUBLIC	_sinf
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?GetClockTime@TimeManager@@QAEKXZ		; TimeManager::GetClockTime
PUBLIC	?GetTextureLightingColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ; CTimeOfDay::GetTextureLightingColor
PUBLIC	?GetLightLevel@CTimeOfDay@@QAEMXZ		; CTimeOfDay::GetLightLevel
PUBLIC	?ThereIsASun@CTimeOfDay@@QAEHXZ			; CTimeOfDay::ThereIsASun
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?SetPalette@Texture@@QAEXPAVPalette@@@Z		; Texture::SetPalette
PUBLIC	?GetPalette@Texture@@QAEPAVPalette@@XZ		; Texture::GetPalette
PUBLIC	?TexHandle@Texture@@QAEKXZ			; Texture::TexHandle
PUBLIC	?GetTopPixel@VirtualDisplay@@QAEMXZ		; VirtualDisplay::GetTopPixel
PUBLIC	?GetBottomPixel@VirtualDisplay@@QAEMXZ		; VirtualDisplay::GetBottomPixel
PUBLIC	?GetLeftPixel@VirtualDisplay@@QAEMXZ		; VirtualDisplay::GetLeftPixel
PUBLIC	?GetRightPixel@VirtualDisplay@@QAEMXZ		; VirtualDisplay::GetRightPixel
PUBLIC	?GetFOV@Render3D@@QAEMXZ			; Render3D::GetFOV
PUBLIC	?X@Render3D@@QAEMXZ				; Render3D::X
PUBLIC	?Y@Render3D@@QAEMXZ				; Render3D::Y
PUBLIC	?Z@Render3D@@QAEMXZ				; Render3D::Z
PUBLIC	?GetAt@Render3D@@QAEXPAUTpoint@@@Z		; Render3D::GetAt
PUBLIC	?GetLeft@Render3D@@QAEXPAUTpoint@@@Z		; Render3D::GetLeft
PUBLIC	?GetUp@Render3D@@QAEXPAUTpoint@@@Z		; Render3D::GetUp
PUBLIC	?GetFilteringMode@RenderOTW@@QAEHXZ		; RenderOTW::GetFilteringMode
PUBLIC	??0DrawableObject@@QAE@M@Z			; DrawableObject::DrawableObject
PUBLIC	??1DrawableObject@@UAE@XZ			; DrawableObject::~DrawableObject
PUBLIC	?GetRadarSign@DrawableObject@@UAEMXZ		; DrawableObject::GetRadarSign
PUBLIC	?SetLabel@DrawableObject@@UAEXPADK@Z		; DrawableObject::SetLabel
PUBLIC	?SetInhibitFlag@DrawableObject@@UAEXH@Z		; DrawableObject::SetInhibitFlag
PUBLIC	?Draw@DrawableObject@@UAEXPAVRender3D@@@Z	; DrawableObject::Draw
PUBLIC	?GetRayHit@DrawableObject@@UAEHPBUTpoint@@0PAU2@M@Z ; DrawableObject::GetRayHit
PUBLIC	?SetParentList@DrawableObject@@MAEXPAVObjectDisplayList@@@Z ; DrawableObject::SetParentList
PUBLIC	??_GDrawableObject@@UAEPAXI@Z			; DrawableObject::`scalar deleting destructor'
PUBLIC	?GenerateFastRandom@@YAJXZ			; GenerateFastRandom
PUBLIC	?PRANDFloat@@YAMXZ				; PRANDFloat
PUBLIC	??0Drawable2D@@QAE@HMPAUTpoint@@@Z		; Drawable2D::Drawable2D
PUBLIC	??0Drawable2D@@QAE@HMPAUTpoint@@PAUTrotation@@@Z ; Drawable2D::Drawable2D
PUBLIC	??0Drawable2D@@QAE@HMPAUTpoint@@H00@Z		; Drawable2D::Drawable2D
PUBLIC	??1Drawable2D@@UAE@XZ				; Drawable2D::~Drawable2D
PUBLIC	?Draw@Drawable2D@@UAEXPAVRenderOTW@@H@Z		; Drawable2D::Draw
PUBLIC	?Update@Drawable2D@@UAEXPBUTpoint@@PBUTrotation@@@Z ; Drawable2D::Update
PUBLIC	?SetPosition@Drawable2D@@QAEXPAUTpoint@@@Z	; Drawable2D::SetPosition
PUBLIC	?SetStartTime@Drawable2D@@QAEXKK@Z		; Drawable2D::SetStartTime
PUBLIC	?GetAlphaTimeToLive@Drawable2D@@QAEMXZ		; Drawable2D::GetAlphaTimeToLive
PUBLIC	?SetLOD@Drawable2D@@SAXM@Z			; Drawable2D::SetLOD
PUBLIC	?SetGreenMode@Drawable2D@@SAXH@Z		; Drawable2D::SetGreenMode
PUBLIC	?DrawGlowSphere@Drawable2D@@SAXPAVRenderOTW@@PAUTpoint@@MM@Z ; Drawable2D::DrawGlowSphere
PUBLIC	?DrawGlowSphere@Drawable2D@@IAEXPAVRenderOTW@@H@Z ; Drawable2D::DrawGlowSphere
PUBLIC	?DrawGouraudTri@Drawable2D@@IAEXPAVRenderOTW@@H@Z ; Drawable2D::DrawGouraudTri
PUBLIC	?DrawTexturedCone@Drawable2D@@IAEXPAVRenderOTW@@H@Z ; Drawable2D::DrawTexturedCone
PUBLIC	?GetAnimFrame@Drawable2D@@IAEHHK@Z		; Drawable2D::GetAnimFrame
PUBLIC	?ScatterPlot@Drawable2D@@IAEXPAVRenderOTW@@@Z	; Drawable2D::ScatterPlot
PUBLIC	?APLScatterPlot@Drawable2D@@IAEXPAVRenderOTW@@@Z ; Drawable2D::APLScatterPlot
PUBLIC	?TimeUpdateCallback@Drawable2D@@KAXPAX@Z	; Drawable2D::TimeUpdateCallback
PUBLIC	?SetupTexturesOnDevice@Drawable2D@@SAXPAVDXContext@@@Z ; Drawable2D::SetupTexturesOnDevice
PUBLIC	?ReleaseTexturesOnDevice@Drawable2D@@SAXPAVDXContext@@@Z ; Drawable2D::ReleaseTexturesOnDevice
PUBLIC	??_GDrawable2D@@UAEPAXI@Z			; Drawable2D::`scalar deleting destructor'
PUBLIC	?Draw2DLensFlare@@YAXPAVRenderOTW@@@Z		; Draw2DLensFlare
PUBLIC	?Draw2DSunGlowEffect@@YAXPAVRenderOTW@@PAUTpoint@@MM@Z ; Draw2DSunGlowEffect
PUBLIC	?F_I32@@YAKM@Z					; F_I32
PUBLIC	?InsideOvercast@RealWeather@@QAE_NXZ		; RealWeather::InsideOvercast
PUBLIC	?UnderOvercast@RealWeather@@QAE_NXZ		; RealWeather::UnderOvercast
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_7DrawableObject@@6B@				; DrawableObject::`vftable'
PUBLIC	?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA	; `GenerateFastRandom'::`2'::LastRandom
PUBLIC	??_7Drawable2D@@6B@				; Drawable2D::`vftable'
PUBLIC	?gGlobTextures@@3PAVTexture@@A			; gGlobTextures
PUBLIC	?gAplTextures@@3PAVTexture@@A			; gAplTextures
PUBLIC	?gAplTexturesGreen@@3PAVTexture@@A		; gAplTexturesGreen
PUBLIC	?gTypeTable@@3PAU_TYPES2D@@A			; gTypeTable
PUBLIC	??_C@_0O@NBIDGJOC@bom00?$CF02d?4gif?$AA@	; `string'
PUBLIC	??_C@_09FLKLCKMH@sfx01?4APL?$AA@		; `string'
PUBLIC	??_C@_0M@GBKBOKB@sfx?$CF02d?4APL?$AA@		; `string'
PUBLIC	??_C@_0L@HIALBIMO@sfxg01?4GIF?$AA@		; `string'
PUBLIC	??_C@_0N@HGIAOOL@sfxg?$CF02d?4GIF?$AA@		; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4DrawableObject@@6B@			; DrawableObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDrawableObject@@@8			; DrawableObject `RTTI Type Descriptor'
PUBLIC	??_R3DrawableObject@@8				; DrawableObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DrawableObject@@8				; DrawableObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DrawableObject@@8			; DrawableObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Drawable2D@@6B@				; Drawable2D::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDrawable2D@@@8				; Drawable2D `RTTI Type Descriptor'
PUBLIC	??_R3Drawable2D@@8				; Drawable2D::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Drawable2D@@8				; Drawable2D::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Drawable2D@@8			; Drawable2D::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3727c5ac
PUBLIC	__real@377ba882
PUBLIC	__real@3827c5ac
PUBLIC	__real@3851b717
PUBLIC	__real@387ba882
PUBLIC	__real@3892ccf7
PUBLIC	__real@38d1b717
PUBLIC	__real@3951b717
PUBLIC	__real@399d4952
PUBLIC	__real@39ebedfa
PUBLIC	__real@3a03126f
PUBLIC	__real@3a378034
PUBLIC	__real@3a6bedfa
PUBLIC	__real@3a83126f
PUBLIC	__real@3ac49ba6
PUBLIC	__real@3ca3d70a
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3dcccccd
PUBLIC	__real@3dfbe76d
PUBLIC	__real@3e19999a
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e7be76d
PUBLIC	__real@3e800000
PUBLIC	__real@3e99999a
PUBLIC	__real@3ecccccd
PUBLIC	__real@3ee66666
PUBLIC	__real@3f000000
PUBLIC	__real@3f0ccccd
PUBLIC	__real@3f19999a
PUBLIC	__real@3f1a36e2eb1c432d
PUBLIC	__real@3f266666
PUBLIC	__real@3f333333
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f666666
PUBLIC	__real@3f800000
PUBLIC	__real@3f860a91
PUBLIC	__real@3f99999a
PUBLIC	__real@3fc00000
PUBLIC	__real@3fe66666
PUBLIC	__real@40000000
PUBLIC	__real@40400000
PUBLIC	__real@40c90fdb
PUBLIC	__real@41000000
PUBLIC	__real@41200000
PUBLIC	__real@41400000
PUBLIC	__real@41700000
PUBLIC	__real@41800000
PUBLIC	__real@41a00000
PUBLIC	__real@41f00000
PUBLIC	__real@42200000
PUBLIC	__real@42480000
PUBLIC	__real@42700000
PUBLIC	__real@42a00000
PUBLIC	__real@42b40000
PUBLIC	__real@42c80000
PUBLIC	__real@42f00000
PUBLIC	__real@42ff0000
PUBLIC	__real@437fe666
PUBLIC	__real@43960000
PUBLIC	__real@43c80000
PUBLIC	__real@43f00000
PUBLIC	__real@43fa0000
PUBLIC	__real@447a0000
PUBLIC	__real@459c4000
PUBLIC	__real@461c4000
PUBLIC	__real@466a6000
PUBLIC	__real@46ea6000
PUBLIC	__real@46fffe00
PUBLIC	__real@477fff00
PUBLIC	__real@bf333333
PUBLIC	__real@bf800000
PUBLIC	__real@c1a00000
PUBLIC	__real@c32a0000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_cos:PROC
EXTRN	_fabs:PROC
EXTRN	_sin:PROC
EXTRN	_rand:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	_sprintf:PROC
EXTRN	?RegisterTimeUpdateCB@TimeManager@@QAEXP6AXPAX@Z0@Z:PROC ; TimeManager::RegisterTimeUpdateCB
EXTRN	?ReleaseTimeUpdateCB@TimeManager@@QAEXP6AXPAX@Z0@Z:PROC ; TimeManager::ReleaseTimeUpdateCB
EXTRN	?GetLightDirection@CTimeOfDay@@QAEXPAUTpoint@@@Z:PROC ; CTimeOfDay::GetLightDirection
EXTRN	?CalculateSunMoonPos@CTimeOfDay@@QAEXPAUTpoint@@H@Z:PROC ; CTimeOfDay::CalculateSunMoonPos
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?SetState@ContextMPR@@QAEXGK@Z:PROC		; ContextMPR::SetState
EXTRN	?SelectTexture1@ContextMPR@@QAEXH@Z:PROC	; ContextMPR::SelectTexture1
EXTRN	?RestoreState@ContextMPR@@QAEXH@Z:PROC		; ContextMPR::RestoreState
EXTRN	?UpdateMPR@Palette@@QAEXPAK@Z:PROC		; Palette::UpdateMPR
EXTRN	?LightTexturePalette@Palette@@QAEXPAUTcolor@@@Z:PROC ; Palette::LightTexturePalette
EXTRN	?LightTexturePaletteRange@Palette@@QAEXPAUTcolor@@HH@Z:PROC ; Palette::LightTexturePaletteRange
EXTRN	??0Texture@@QAE@XZ:PROC				; Texture::Texture
EXTRN	??1Texture@@QAE@XZ:PROC				; Texture::~Texture
EXTRN	?LoadAndCreate@Texture@@QAEHPADK@Z:PROC		; Texture::LoadAndCreate
EXTRN	?FreeAll@Texture@@QAEXXZ:PROC			; Texture::FreeAll
EXTRN	?SetClipFlags@Render2D@@QAEXPAUTwoDVertex@@@Z:PROC ; Render2D::SetClipFlags
EXTRN	?ClipAndDraw2DFan@Render2D@@QAEXPAPAUTwoDVertex@@I_N@Z:PROC ; Render2D::ClipAndDraw2DFan
EXTRN	?TransformPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z:PROC ; Render3D::TransformPoint
EXTRN	?TransformPointToView@Render3D@@QAEXPAUTpoint@@0@Z:PROC ; Render3D::TransformPointToView
EXTRN	?TransformBillboardPoint@Render3D@@QAEXPAUTpoint@@0PAUThreeDVertex@@@Z:PROC ; Render3D::TransformBillboardPoint
EXTRN	?TransformTreePoint@Render3D@@QAEXPAUTpoint@@0PAUThreeDVertex@@@Z:PROC ; Render3D::TransformTreePoint
EXTRN	?TransformCameraCentricPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z:PROC ; Render3D::TransformCameraCentricPoint
EXTRN	?DrawSquare@Render3D@@QAEXPAUThreeDVertex@@000H_N1@Z:PROC ; Render3D::DrawSquare
EXTRN	?DrawTriangle@Render3D@@QAEXPAUThreeDVertex@@00H_N1@Z:PROC ; Render3D::DrawTriangle
EXTRN	??_EDrawableObject@@UAEPAXI@Z:PROC		; DrawableObject::`vector deleting destructor'
EXTRN	??_EDrawable2D@@UAEPAXI@Z:PROC			; Drawable2D::`vector deleting destructor'
EXTRN	?DX2D_AddQuad@CDXEngine@@QAEXKKPAUD3DXVECTOR3@@PAUD3DDYNVERTEX@@MK@Z:PROC ; CDXEngine::DX2D_AddQuad
EXTRN	?DX2D_AddPoly@CDXEngine@@QAEXKKPAUD3DXVECTOR3@@PAUD3DDYNVERTEX@@MKK@Z:PROC ; CDXEngine::DX2D_AddPoly
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?TheTimeManager@@3VTimeManager@@A:BYTE		; TheTimeManager
EXTRN	?TheTimeOfDay@@3VCTimeOfDay@@A:BYTE		; TheTimeOfDay
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?TheDXEngine@@3VCDXEngine@@A:BYTE		; TheDXEngine
EXTRN	?realWeather@@3PAVRealWeather@@A:DWORD		; realWeather
EXTRN	?g_nGfxFix@@3HA:DWORD				; g_nGfxFix
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA
_BSS	SEGMENT
?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA DD 01H DUP (?) ; `GenerateFastRandom'::`2'::LastRandom
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

_gLight	DB	0cH DUP (?)
?gGlobTextures@@3PAVTexture@@A DB 0300H DUP (?)		; gGlobTextures
?gAplTextures@@3PAVTexture@@A DB 0108H DUP (?)		; gAplTextures
?gAplTexturesGreen@@3PAVTexture@@A DB 0108H DUP (?)	; gAplTexturesGreen
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@c32a0000
CONST	SEGMENT
__real@c32a0000 DD 0c32a0000r			; -170
CONST	ENDS
;	COMDAT __real@c1a00000
CONST	SEGMENT
__real@c1a00000 DD 0c1a00000r			; -20
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf333333
CONST	SEGMENT
__real@bf333333 DD 0bf333333r			; -0.7
CONST	ENDS
;	COMDAT __real@477fff00
CONST	SEGMENT
__real@477fff00 DD 0477fff00r			; 65535
CONST	ENDS
;	COMDAT __real@46fffe00
CONST	SEGMENT
__real@46fffe00 DD 046fffe00r			; 32767
CONST	ENDS
;	COMDAT __real@46ea6000
CONST	SEGMENT
__real@46ea6000 DD 046ea6000r			; 30000
CONST	ENDS
;	COMDAT __real@466a6000
CONST	SEGMENT
__real@466a6000 DD 0466a6000r			; 15000
CONST	ENDS
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
CONST	ENDS
;	COMDAT __real@459c4000
CONST	SEGMENT
__real@459c4000 DD 0459c4000r			; 5000
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@43fa0000
CONST	SEGMENT
__real@43fa0000 DD 043fa0000r			; 500
CONST	ENDS
;	COMDAT __real@43f00000
CONST	SEGMENT
__real@43f00000 DD 043f00000r			; 480
CONST	ENDS
;	COMDAT __real@43c80000
CONST	SEGMENT
__real@43c80000 DD 043c80000r			; 400
CONST	ENDS
;	COMDAT __real@43960000
CONST	SEGMENT
__real@43960000 DD 043960000r			; 300
CONST	ENDS
;	COMDAT __real@437fe666
CONST	SEGMENT
__real@437fe666 DD 0437fe666r			; 255.9
CONST	ENDS
;	COMDAT __real@42ff0000
CONST	SEGMENT
__real@42ff0000 DD 042ff0000r			; 127.5
CONST	ENDS
;	COMDAT __real@42f00000
CONST	SEGMENT
__real@42f00000 DD 042f00000r			; 120
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42b40000
CONST	SEGMENT
__real@42b40000 DD 042b40000r			; 90
CONST	ENDS
;	COMDAT __real@42a00000
CONST	SEGMENT
__real@42a00000 DD 042a00000r			; 80
CONST	ENDS
;	COMDAT __real@42700000
CONST	SEGMENT
__real@42700000 DD 042700000r			; 60
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@42200000
CONST	SEGMENT
__real@42200000 DD 042200000r			; 40
CONST	ENDS
;	COMDAT __real@41f00000
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@41800000
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
CONST	ENDS
;	COMDAT __real@41700000
CONST	SEGMENT
__real@41700000 DD 041700000r			; 15
CONST	ENDS
;	COMDAT __real@41400000
CONST	SEGMENT
__real@41400000 DD 041400000r			; 12
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3fe66666
CONST	SEGMENT
__real@3fe66666 DD 03fe66666r			; 1.8
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3f99999a
CONST	SEGMENT
__real@3f99999a DD 03f99999ar			; 1.2
CONST	ENDS
;	COMDAT __real@3f860a91
CONST	SEGMENT
__real@3f860a91 DD 03f860a91r			; 1.0472
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f266666
CONST	SEGMENT
__real@3f266666 DD 03f266666r			; 0.65
CONST	ENDS
;	COMDAT __real@3f1a36e2eb1c432d
CONST	SEGMENT
__real@3f1a36e2eb1c432d DQ 03f1a36e2eb1c432dr	; 0.0001
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f0ccccd
CONST	SEGMENT
__real@3f0ccccd DD 03f0ccccdr			; 0.55
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ee66666
CONST	SEGMENT
__real@3ee66666 DD 03ee66666r			; 0.45
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e7be76d
CONST	SEGMENT
__real@3e7be76d DD 03e7be76dr			; 0.246
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e19999a
CONST	SEGMENT
__real@3e19999a DD 03e19999ar			; 0.15
CONST	ENDS
;	COMDAT __real@3dfbe76d
CONST	SEGMENT
__real@3dfbe76d DD 03dfbe76dr			; 0.123
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@3ca3d70a
CONST	SEGMENT
__real@3ca3d70a DD 03ca3d70ar			; 0.02
CONST	ENDS
;	COMDAT __real@3ac49ba6
CONST	SEGMENT
__real@3ac49ba6 DD 03ac49ba6r			; 0.0015
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@3a6bedfa
CONST	SEGMENT
__real@3a6bedfa DD 03a6bedfar			; 0.0009
CONST	ENDS
;	COMDAT __real@3a378034
CONST	SEGMENT
__real@3a378034 DD 03a378034r			; 0.0007
CONST	ENDS
;	COMDAT __real@3a03126f
CONST	SEGMENT
__real@3a03126f DD 03a03126fr			; 0.0005
CONST	ENDS
;	COMDAT __real@39ebedfa
CONST	SEGMENT
__real@39ebedfa DD 039ebedfar			; 0.00045
CONST	ENDS
;	COMDAT __real@399d4952
CONST	SEGMENT
__real@399d4952 DD 0399d4952r			; 0.0003
CONST	ENDS
;	COMDAT __real@3951b717
CONST	SEGMENT
__real@3951b717 DD 03951b717r			; 0.0002
CONST	ENDS
;	COMDAT __real@38d1b717
CONST	SEGMENT
__real@38d1b717 DD 038d1b717r			; 0.0001
CONST	ENDS
;	COMDAT __real@3892ccf7
CONST	SEGMENT
__real@3892ccf7 DD 03892ccf7r			; 7e-005
CONST	ENDS
;	COMDAT __real@387ba882
CONST	SEGMENT
__real@387ba882 DD 0387ba882r			; 6e-005
CONST	ENDS
;	COMDAT __real@3851b717
CONST	SEGMENT
__real@3851b717 DD 03851b717r			; 5e-005
CONST	ENDS
;	COMDAT __real@3827c5ac
CONST	SEGMENT
__real@3827c5ac DD 03827c5acr			; 4e-005
CONST	ENDS
;	COMDAT __real@377ba882
CONST	SEGMENT
__real@377ba882 DD 0377ba882r			; 1.5e-005
CONST	ENDS
;	COMDAT __real@3727c5ac
CONST	SEGMENT
__real@3727c5ac DD 03727c5acr			; 1e-005
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@Drawable2D@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Drawable2D@@8 DD FLAT:??_R0?AVDrawable2D@@@8 ; Drawable2D::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Drawable2D@@8
rdata$r	ENDS
;	COMDAT ??_R2Drawable2D@@8
rdata$r	SEGMENT
??_R2Drawable2D@@8 DD FLAT:??_R1A@?0A@EA@Drawable2D@@8	; Drawable2D::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DrawableObject@@8
rdata$r	ENDS
;	COMDAT ??_R3Drawable2D@@8
rdata$r	SEGMENT
??_R3Drawable2D@@8 DD 00H				; Drawable2D::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Drawable2D@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDrawable2D@@@8
_DATA	SEGMENT
??_R0?AVDrawable2D@@@8 DD FLAT:??_7type_info@@6B@	; Drawable2D `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDrawable2D@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Drawable2D@@6B@
rdata$r	SEGMENT
??_R4Drawable2D@@6B@ DD 00H				; Drawable2D::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDrawable2D@@@8
	DD	FLAT:??_R3Drawable2D@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DrawableObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DrawableObject@@8 DD FLAT:??_R0?AVDrawableObject@@@8 ; DrawableObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DrawableObject@@8
rdata$r	ENDS
;	COMDAT ??_R2DrawableObject@@8
rdata$r	SEGMENT
??_R2DrawableObject@@8 DD FLAT:??_R1A@?0A@EA@DrawableObject@@8 ; DrawableObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3DrawableObject@@8
rdata$r	SEGMENT
??_R3DrawableObject@@8 DD 00H				; DrawableObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2DrawableObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDrawableObject@@@8
_DATA	SEGMENT
??_R0?AVDrawableObject@@@8 DD FLAT:??_7type_info@@6B@	; DrawableObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDrawableObject@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DrawableObject@@6B@
rdata$r	SEGMENT
??_R4DrawableObject@@6B@ DD 00H				; DrawableObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDrawableObject@@@8
	DD	FLAT:??_R3DrawableObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HGIAOOL@sfxg?$CF02d?4GIF?$AA@
CONST	SEGMENT
??_C@_0N@HGIAOOL@sfxg?$CF02d?4GIF?$AA@ DB 'sfxg%02d.GIF', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HIALBIMO@sfxg01?4GIF?$AA@
CONST	SEGMENT
??_C@_0L@HIALBIMO@sfxg01?4GIF?$AA@ DB 'sfxg01.GIF', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GBKBOKB@sfx?$CF02d?4APL?$AA@
CONST	SEGMENT
??_C@_0M@GBKBOKB@sfx?$CF02d?4APL?$AA@ DB 'sfx%02d.APL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09FLKLCKMH@sfx01?4APL?$AA@
CONST	SEGMENT
??_C@_09FLKLCKMH@sfx01?4APL?$AA@ DB 'sfx01.APL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NBIDGJOC@bom00?$CF02d?4gif?$AA@
CONST	SEGMENT
??_C@_0O@NBIDGJOC@bom00?$CF02d?4gif?$AA@ DB 'bom00%02d.gif', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
?gTypeTable@@3PAU_TYPES2D@@A DD 0200021H		; gTypeTable
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	01H
	DD	00H
	DD	010H
	DD	041a00000r			; 20
	DD	00H
	DD	00H
	DD	0461c4000r			; 10000
	DD	0201001H
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	00H
	DD	00H
	DD	0cH
	DD	000000000r			; 0
	DD	00H
	DD	00H
	DD	0461c4000r			; 10000
	DD	0800024H
	DD	03f666666r			; 0.9
	DD	03851b717r			; 5e-005
	DD	0aH
	DD	0cH
	DD	01H
	DD	041f00000r			; 30
	DD	00H
	DD	00H
	DD	043960000r			; 300
	DD	04H
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	04H
	DD	0eH
	DD	01H
	DD	000000000r			; 0
	DD	00H
	DD	00H
	DD	0461c4000r			; 10000
	DD	051001H
	DD	03f4ccccdr			; 0.8
	DD	000000000r			; 0
	DD	01H
	DD	00H
	DD	010H
	DD	000000000r			; 0
	DD	00H
	DD	01H
	DD	0461c4000r			; 10000
	DD	022H
	DD	03f800000r			; 1
	DD	03a51b717r			; 0.0008
	DD	03H
	DD	0fH
	DD	01H
	DD	043f00000r			; 480
	DD	00H
	DD	00H
	DD	0461c4000r			; 10000
	DD	0201001H
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	06H
	DD	00H
	DD	010H
	DD	000000000r			; 0
	DD	00H
	DD	00H
	DD	0461c4000r			; 10000
	DD	051001H
	DD	03f4ccccdr			; 0.8
	DD	000000000r			; 0
	DD	06H
	DD	00H
	DD	010H
	DD	000000000r			; 0
	DD	00H
	DD	01H
	DD	0461c4000r			; 10000
	DD	0201001H
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	04H
	DD	00H
	DD	0eH
	DD	000000000r			; 0
	DD	00H
	DD	00H
	DD	0461c4000r			; 10000
	DD	051001H
	DD	03f4ccccdr			; 0.8
	DD	000000000r			; 0
	DD	04H
	DD	00H
	DD	0eH
	DD	000000000r			; 0
	DD	00H
	DD	01H
	DD	0461c4000r			; 10000
	DD	0102H
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03H
	DD	0dH
	DD	01H
	DD	000000000r			; 0
	DD	00H
	DD	00H
	DD	0461c4000r			; 10000
	DD	0800024H
	DD	03f4ccccdr			; 0.8
	DD	03851b717r			; 5e-005
	DD	08H
	DD	0dH
	DD	01H
	DD	041a00000r			; 20
	DD	00H
	DD	01H
	DD	043960000r			; 300
	DD	024H
	DD	03f4ccccdr			; 0.8
	DD	038d1b717r			; 0.0001
	DD	06H
	DD	08H
	DD	08H
	DD	041a00000r			; 20
	DD	00H
	DD	00H
	DD	043960000r			; 300
	DD	0800024H
	DD	03f800000r			; 1
	DD	03951b717r			; 0.0002
	DD	0aH
	DD	0cH
	DD	01H
	DD	041a00000r			; 20
	DD	00H
	DD	01H
	DD	043c80000r			; 400
	DD	01004a0H
	DD	03f800000r			; 1
	DD	03a1d4952r			; 0.0006
	DD	00H
	DD	00H
	DD	00H
	DD	000000000r			; 0
	DD	FLAT:?glowSquareVerts@@3PAUTpoint@@A
	ORG $+1968
_DATA	ENDS
;	COMDAT ??_7Drawable2D@@6B@
CONST	SEGMENT
??_7Drawable2D@@6B@ DD FLAT:??_R4Drawable2D@@6B@	; Drawable2D::`vftable'
	DD	FLAT:??_EDrawable2D@@UAEPAXI@Z
	DD	FLAT:?GetRadarSign@DrawableObject@@UAEMXZ
	DD	FLAT:?SetLabel@DrawableObject@@UAEXPADK@Z
	DD	FLAT:?SetInhibitFlag@DrawableObject@@UAEXH@Z
	DD	FLAT:?Draw@DrawableObject@@UAEXPAVRender3D@@@Z
	DD	FLAT:?Draw@Drawable2D@@UAEXPAVRenderOTW@@H@Z
	DD	FLAT:?GetRayHit@DrawableObject@@UAEHPBUTpoint@@0PAU2@M@Z
	DD	FLAT:?SetParentList@DrawableObject@@MAEXPAVObjectDisplayList@@@Z
	DD	FLAT:?Update@Drawable2D@@UAEXPBUTpoint@@PBUTrotation@@@Z
CONST	ENDS
;	COMDAT ??_7DrawableObject@@6B@
CONST	SEGMENT
??_7DrawableObject@@6B@ DD FLAT:??_R4DrawableObject@@6B@ ; DrawableObject::`vftable'
	DD	FLAT:??_EDrawableObject@@UAEPAXI@Z
	DD	FLAT:?GetRadarSign@DrawableObject@@UAEMXZ
	DD	FLAT:?SetLabel@DrawableObject@@UAEXPADK@Z
	DD	FLAT:?SetInhibitFlag@DrawableObject@@UAEXH@Z
	DD	FLAT:?Draw@DrawableObject@@UAEXPAVRender3D@@@Z
	DD	FLAT:__purecall
	DD	FLAT:?GetRayHit@DrawableObject@@UAEHPBUTpoint@@0PAU2@M@Z
	DD	FLAT:?SetParentList@DrawableObject@@MAEXPAVObjectDisplayList@@@Z
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_gGlobTextures$initializer$ DD FLAT:??__EgGlobTextures@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_gAplTextures$initializer$ DD FLAT:??__EgAplTextures@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_gAplTexturesGreen$initializer$ DD FLAT:??__EgAplTexturesGreen@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_gTypeTable$initializer$ DD FLAT:??__EgTypeTable@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\draw2d.cpp
;	COMDAT ??__EgTypeTable@@YAXXZ
text$yc	SEGMENT
??__EgTypeTable@@YAXXZ PROC				; `dynamic initializer for 'gTypeTable'', COMDAT

; 406  : 		numGlowSquareVerts,					// numGlowVerts

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ?numGlowSquareVerts@@3HA	; numGlowSquareVerts
	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+592, eax

; 407  : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+596, xmm0

; 408  : 	},
; 409  : 	// missile Glowing Object
; 410  : 	{
; 411  : 		GLOW_SPHERE | GLOW_RAND_POINTS,		// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+600, 3072 ; 00000c00H

; 412  : 		0.9f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+604, xmm0

; 413  : 		0.0f,								// fadeRate

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+608, xmm0

; 414  : 		NULL,								// texture id sequence

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+612, 0

; 415  : 		0, 									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+616, 0

; 416  : 		0, 									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+620, 0

; 417  : 		0.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+624, xmm0

; 418  : 		glowStarVerts,						// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+628, OFFSET ?glowStarVerts@@3PAUTpoint@@A ; glowStarVerts

; 419  : 		numGlowStarVerts,					// numGlowVerts

	mov	ecx, DWORD PTR ?numGlowStarVerts@@3HA	; numGlowStarVerts
	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+632, ecx

; 420  : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+636, xmm0

; 421  : 	},
; 422  : 	// Glowing explosion Object Sphere
; 423  : 	{
; 424  : 		GLOW_SPHERE | ALPHA_BRIGHTEN | ALPHA_DAYLIGHT,						// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+640, 1049728 ; 00100480H

; 425  : 		0.6f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+644, xmm0

; 426  : 		0.0f,								// fadeRate

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+648, xmm0

; 427  : 		NULL,								// texture id sequence

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+652, 0

; 428  : 		0, 									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+656, 0

; 429  : 		0, 									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+660, 0

; 430  : 		0.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+664, xmm0

; 431  : 		glowCircleVerts,						// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+668, OFFSET ?glowCircleVerts@@3PAUTpoint@@A ; glowCircleVerts

; 432  : 		numGlowCircleVerts,					// numGlowVerts

	mov	edx, DWORD PTR ?numGlowCircleVerts@@3HA	; numGlowCircleVerts
	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+672, edx

; 433  : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+676, xmm0

; 434  : 	},
; 435  : 	// Glowing explosion Object Cross
; 436  : 	{
; 437  : 		GLOW_SPHERE ,						// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+680, 1024 ; 00000400H

; 438  : 		1.0f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+684, xmm0

; 439  : 		.0009f,								// fadeRate

	movss	xmm0, DWORD PTR __real@3a6bedfa
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+688, xmm0

; 440  : 		0,									// texture id sequence

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+692, 0

; 441  : 		0, 									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+696, 0

; 442  : 		0, 									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+700, 0

; 443  : 		50.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+704, xmm0

; 444  : 		glowCrossVerts,						// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+708, OFFSET ?glowCrossVerts@@3PAUTpoint@@A ; glowCrossVerts

; 445  : 		numGlowCrossVerts,					// numGlowVerts

	mov	eax, DWORD PTR ?numGlowCrossVerts@@3HA	; numGlowCrossVerts
	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+712, eax

; 446  : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+716, xmm0

; 447  : 	},
; 448  : 	// Crater 1
; 449  : 	{
; 450  : 		ANIM_HOLD_LAST,						// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+720, 2

; 451  : 		1.0f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+724, xmm0

; 452  : 		0.0f,								// fadeRate

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+728, xmm0

; 453  : 		3,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+732, 3

; 454  : 		14,									// start Textures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+736, 14 ; 0000000eH

; 455  : 		1,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+740, 1

; 456  : 		0.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+744, xmm0

; 457  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+748, 0

; 458  : 		0,									// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+752, 0

; 459  : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+756, xmm0

; 460  : 	},
; 461  : 	// Crater 2
; 462  : 	{
; 463  : 		ANIM_HOLD_LAST,						// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+760, 2

; 464  : 		1.0f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+764, xmm0

; 465  : 		0.0f,								// fadeRate

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+768, xmm0

; 466  : 		3,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+772, 3

; 467  : 		14,									// start Textures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+776, 14 ; 0000000eH

; 468  : 		1,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+780, 1

; 469  : 		0.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+784, xmm0

; 470  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+788, 0

; 471  : 		0,									// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+792, 0

; 472  : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+796, xmm0

; 473  : 	},
; 474  : 	// Crater 3
; 475  : 	{
; 476  : 		ANIM_HOLD_LAST,						// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+800, 2

; 477  : 		1.0f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+804, xmm0

; 478  : 		0.0f,								// fadeRate

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+808, xmm0

; 479  : 		3,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+812, 3

; 480  : 		14,									// start Textures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+816, 14 ; 0000000eH

; 481  : 		1,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+820, 1

; 482  : 		0.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+824, xmm0

; 483  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+828, 0

; 484  : 		0,									// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+832, 0

; 485  : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+836, xmm0

; 486  : 	},
; 487  : 	// FIRE
; 488  : 	{
; 489  : 		RAND_START_FRAME | ANIM_LOOP | SEQ_SCATTER_ANIM | FIRE_SCATTER_PLOT | ALPHA_PER_TEXEL,			// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+840, 42082308 ; 02822004H

; 490  : 		0.9f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+844, xmm0

; 491  : 		0.0f,								// fadeRate

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+848, xmm0

; 492  : 		0,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+852, 0

; 493  : 		0,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+856, 0

; 494  : 		6,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+860, 6

; 495  : 		0.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+864, xmm0

; 496  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+868, 0

; 497  : 		NUM_FIRE_SCATTER_FRAMES,			// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+872, 8

; 498  : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+876, xmm0

; 499  : 	},
; 500  : 	// GROUND STRIKE
; 501  : 	{
; 502  : 		USES_TREE_MATRIX,					// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+880, 512 ; 00000200H

; 503  : 		0.8f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+884, xmm0

; 504  : 		0.0f,								// fadeRate

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+888, xmm0

; 505  : 		5,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+892, 5

; 506  : 		0,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+896, 0

; 507  : 		16,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+900, 16 ; 00000010H

; 508  : 		0.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+904, xmm0

; 509  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+908, 0

; 510  : 		0,									// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+912, 0

; 511  : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+916, xmm0

; 512  : 	},
; 513  : 	// Water STRIKE
; 514  : 	{
; 515  : 		USES_TREE_MATRIX,					// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+920, 512 ; 00000200H

; 516  : 		0.8f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+924, xmm0

; 517  : 		0.0f,								// fadeRate

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+928, xmm0

; 518  : 		2,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+932, 2

; 519  : 		0,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+936, 0

; 520  : 		16,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+940, 16 ; 00000010H

; 521  : 		0.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+944, xmm0

; 522  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+948, 0

; 523  : 		0,									// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+952, 0

; 524  : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+956, xmm0

; 525  : 	},
; 526  : 	// Hit Explosion
; 527  : 	{
; 528  : 		ANIM_HALF_RATE | ANIM_STOP | EXPLODE_SCATTER_PLOT | ANIM_NO_CLAMP,							// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+960, 331777 ; 00051001H

; 529  : 		0.8f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+964, xmm0

; 530  : 		0.0f,								// fadeRate

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+968, xmm0

; 531  : 		0,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+972, 0

; 532  : 		0,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+976, 0

; 533  : 		12,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+980, 12 ; 0000000cH

; 534  : 		0.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+984, xmm0

; 535  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+988, 0

; 536  : 		NUM_EXPLODE_SCATTER_FRAMES,			// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+992, 1

; 537  : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+996, xmm0

; 538  : 	},
; 539  : 	// Sparks
; 540  : 	/*
; 541  : 	{
; 542  : 		ANIM_STOP | USES_BB_MATRIX | ANIM_HALF_RATE,							// flags
; 543  : 		1.0f,								// initAlpha
; 544  : 		0.0f,								// fadeRate
; 545  : 		0,
; 546  : 		12,									// startTexture
; 547  : 		4,									// numTextures
; 548  : 		0.0f,								// expandRate
; 549  : 		NULL,								// glowVerts
; 550  : 		0,									// numGlowVerts
; 551  : 		10000.0f,							// maxExpand
; 552  : 	},
; 553  : 	*/
; 554  : 	// SPARKS explosion Object Star
; 555  : 	{
; 556  : 		FADE_START | ALPHA_DAYLIGHT | ALPHA_BRIGHTEN | GLOW_SPHERE | GLOW_RAND_POINTS,		// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1000, 1051808 ; 00100ca0H

; 557  : 		1.0f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1004, xmm0

; 558  : 		.0015f,								// fadeRate

	movss	xmm0, DWORD PTR __real@3ac49ba6
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1008, xmm0

; 559  : 		NULL,								// texture id sequence

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1012, 0

; 560  : 		0, 									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1016, 0

; 561  : 		0, 									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1020, 0

; 562  : 		0.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1024, xmm0

; 563  : 		glowCircleVerts,						// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1028, OFFSET ?glowCircleVerts@@3PAUTpoint@@A ; glowCircleVerts

; 564  : 		numGlowCircleVerts,					// numGlowVerts

	mov	ecx, DWORD PTR ?numGlowCircleVerts@@3HA	; numGlowCircleVerts
	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1032, ecx

; 565  : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1036, xmm0

; 566  : 	},
; 567  : 	// Artillery Explosion
; 568  : 	{
; 569  : 		USES_TREE_MATRIX | ANIM_STOP,					// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1040, 513 ; 00000201H

; 570  : 		0.8f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1044, xmm0

; 571  : 		0.0f,								// fadeRate

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1048, xmm0

; 572  : 		3,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1052, 3

; 573  : 		0,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1056, 0

; 574  : 		10,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1060, 10 ; 0000000aH

; 575  : 		0.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1064, xmm0

; 576  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1068, 0

; 577  : 		0,									// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1072, 0

; 578  : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1076, xmm0

; 579  : 	},
; 580  : 	// shock ring
; 581  : 	{
; 582  : 		USES_TREE_MATRIX | FADE_START | ANIM_HOLD_LAST,	// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1080, 546 ; 00000222H

; 583  : 		0.5f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1084, xmm0

; 584  : 		0.0007f,							// fadeRate

	movss	xmm0, DWORD PTR __real@3a378034
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1088, xmm0

; 585  : 		4,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1092, 4

; 586  : 		15,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1096, 15 ; 0000000fH

; 587  : 		1,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1100, 1

; 588  : 		480.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@43f00000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1104, xmm0

; 589  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1108, 0

; 590  : 		0,									// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1112, 0

; 591  : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1116, xmm0

; 592  : 	},
; 593  : 	// long hanging smoke
; 594  : 	{
; 595  : 		ANIM_HALF_RATE | ANIM_LOOP | FADE_START | DO_FIVE_POINTS,		// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1120, 2101284 ; 00201024H

; 596  : 		1.0f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1124, xmm0

; 597  : 		.00001f,								// fadeRate

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1128, xmm0

; 598  : 		6,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1132, 6

; 599  : 		0,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1136, 0

; 600  : 		8,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1140, 8

; 601  : 		10.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1144, xmm0

; 602  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1148, 0

; 603  : 		0,									// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1152, 0

; 604  : 		500.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@43fa0000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1156, xmm0

; 605  : 	},
; 606  : 	// Shaped FIRE DEBRIS
; 607  : 	{
; 608  : 		ANIM_LOOP | TEXTURED_CONE | FADE_START,					// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1160, 32804 ; 00008024H

; 609  : 		1.0f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1164, xmm0

; 610  : 		0.0001f,								// fadeRate

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1168, xmm0

; 611  : 		6,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1172, 6

; 612  : 		8,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1176, 8

; 613  : 		8,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1180, 8

; 614  : 		0.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1184, xmm0

; 615  : 		&coneDim,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1188, OFFSET ?coneDim@@3UTpoint@@A ; coneDim

; 616  : 		1,									// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1192, 1

; 617  : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1196, xmm0

; 618  : 	},
; 619  : 
; 620  : 	// Water CLOUD
; 621  : 	{
; 622  : 		ANIM_LOOP | FADE_START | ALPHA_PER_TEXEL,		// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1200, 8388644 ; 00800024H

; 623  : 		0.6f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1204, xmm0

; 624  : 		.0001f,								// fadeRate

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1208, xmm0

; 625  : 		7,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1212, 7

; 626  : 		14,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1216, 14 ; 0000000eH

; 627  : 		1,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1220, 1

; 628  : 		20.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@41a00000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1224, xmm0

; 629  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1228, 0

; 630  : 		NUM_SMOKE_SCATTER_FRAMES,			// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1232, 1

; 631  : 		100.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1236, xmm0

; 632  : 	},
; 633  : 	// DARK DEBRIS
; 634  : 	{
; 635  : 		GOURAUD_TRI | GLOW_RAND_POINTS,		 // flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1240, 526336 ; 00080800H

; 636  : 		1.0f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1244, xmm0

; 637  : 		0.0f,								// fadeRate

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1248, xmm0

; 638  : 		NULL,								// texture id sequence

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1252, 0

; 639  : 		0,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1256, 0

; 640  : 		0,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1260, 0

; 641  : 		0.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1264, xmm0

; 642  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1268, 0

; 643  : 		0,									// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1272, 0

; 644  : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1276, xmm0

; 645  : 	},
; 646  : 	// FIRE DEBRIS
; 647  : 	{
; 648  : 		GOURAUD_TRI | GLOW_RAND_POINTS,		 // flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1280, 526336 ; 00080800H

; 649  : 		1.0f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1284, xmm0

; 650  : 		0.0f,								// fadeRate

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1288, xmm0

; 651  : 		NULL,								// texture id sequence

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1292, 0

; 652  : 		0,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1296, 0

; 653  : 		0,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1300, 0

; 654  : 		0.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1304, xmm0

; 655  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1308, 0

; 656  : 		0,									// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1312, 0

; 657  : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1316, xmm0

; 658  : 	},
; 659  : 	// LIGHT DEBRIS
; 660  : 	{
; 661  : 		GOURAUD_TRI | GLOW_RAND_POINTS,		 // flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1320, 526336 ; 00080800H

; 662  : 		1.0f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1324, xmm0

; 663  : 		0.0f,								// fadeRate

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1328, xmm0

; 664  : 		NULL,								// texture id sequence

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1332, 0

; 665  : 		0,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1336, 0

; 666  : 		0,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1340, 0

; 667  : 		0.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1344, xmm0

; 668  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1348, 0

; 669  : 		0,									// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1352, 0

; 670  : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1356, xmm0

; 671  : 	},
; 672  : 	// Glowing explosion Object Sphere
; 673  : 	{
; 674  : 		GLOW_SPHERE | ALPHA_BRIGHTEN | ALPHA_DAYLIGHT,						// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1360, 1049728 ; 00100480H

; 675  : 		0.8f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1364, xmm0

; 676  : 		0.0009f,								// fadeRate

	movss	xmm0, DWORD PTR __real@3a6bedfa
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1368, xmm0

; 677  : 		NULL,								// texture id sequence

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1372, 0

; 678  : 		0, 									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1376, 0

; 679  : 		0, 									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1380, 0

; 680  : 		10.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1384, xmm0

; 681  : 		glowCircleVerts,						// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1388, OFFSET ?glowCircleVerts@@3PAUTpoint@@A ; glowCircleVerts

; 682  : 		numGlowCircleVerts,					// numGlowVerts

	mov	edx, DWORD PTR ?numGlowCircleVerts@@3HA	; numGlowCircleVerts
	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1392, edx

; 683  : 		100.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1396, xmm0

; 684  : 	},
; 685  : 	// shock ring -- small
; 686  : 	{
; 687  : 		USES_TREE_MATRIX | FADE_START | ANIM_HOLD_LAST,	// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1400, 546 ; 00000222H

; 688  : 		0.6f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1404, xmm0

; 689  : 		0.0007f,							// fadeRate

	movss	xmm0, DWORD PTR __real@3a378034
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1408, xmm0

; 690  : 		4,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1412, 4

; 691  : 		15,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1416, 15 ; 0000000fH

; 692  : 		1,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1420, 1

; 693  : 		100.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1424, xmm0

; 694  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1428, 0

; 695  : 		0,									// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1432, 0

; 696  : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1436, xmm0

; 697  : 	},
; 698  : 	// fast fading cloud
; 699  : 	{
; 700  : 		ANIM_HALF_RATE | ANIM_LOOP | FADE_START | DO_FIVE_POINTS,		// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1440, 2101284 ; 00201024H

; 701  : 		1.0f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1444, xmm0

; 702  : 		.0005f,								// fadeRate

	movss	xmm0, DWORD PTR __real@3a03126f
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1448, xmm0

; 703  : 		6,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1452, 6

; 704  : 		0,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1456, 0

; 705  : 		8,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1460, 8

; 706  : 		60.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@42700000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1464, xmm0

; 707  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1468, 0

; 708  : 		0,									// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1472, 0

; 709  : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1476, xmm0

; 710  : 	},
; 711  : 	// long hanging smoke 2
; 712  : 	{
; 713  : 		ANIM_LOOP | FADE_START | ALPHA_PER_TEXEL,		// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1480, 8388644 ; 00800024H

; 714  : 		0.5f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1484, xmm0

; 715  : 		.000015f,								// fadeRate

	movss	xmm0, DWORD PTR __real@377ba882
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1488, xmm0

; 716  : 		6,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1492, 6

; 717  : 		12,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1496, 12 ; 0000000cH

; 718  : 		1,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1500, 1

; 719  : 		15.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@41700000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1504, xmm0

; 720  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1508, 0

; 721  : 		NUM_EXPLODE_SCATTER_FRAMES,			// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1512, 1

; 722  : 		500.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@43fa0000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1516, xmm0

; 723  : 	},
; 724  : 	// FLAME
; 725  : 	{
; 726  : 		ANIM_LOOP | DO_FIVE_POINTS,			// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1520, 2097156 ; 00200004H

; 727  : 		0.7f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f333333
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1524, xmm0

; 728  : 		0.0f,								// fadeRate

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1528, xmm0

; 729  : 		4,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1532, 4

; 730  : 		0,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1536, 0

; 731  : 		8,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1540, 8

; 732  : 		0.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1544, xmm0

; 733  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1548, 0

; 734  : 		0,									// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1552, 0

; 735  : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1556, xmm0

; 736  : 	},
; 737  : 	// FIRE EXPANDING
; 738  : 	{
; 739  : 		FADE_START | RAND_START_FRAME | ANIM_LOOP | SEQ_SCATTER_ANIM | FIRE_SCATTER_PLOT | ALPHA_PER_TEXEL,			// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1560, 42082340 ; 02822024H

; 740  : 		0.6f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1564, xmm0

; 741  : 		.00045f,								// fadeRate

	movss	xmm0, DWORD PTR __real@39ebedfa
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1568, xmm0

; 742  : 		0,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1572, 0

; 743  : 		0,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1576, 0

; 744  : 		6,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1580, 6

; 745  : 		30.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1584, xmm0

; 746  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1588, 0

; 747  : 		NUM_FIRE_SCATTER_FRAMES,			// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1592, 8

; 748  : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1596, xmm0

; 749  : 	},
; 750  : 	// Dustcloud
; 751  : 	{
; 752  : 		ANIM_LOOP | FADE_START | ALPHA_PER_TEXEL,		// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1600, 8388644 ; 00800024H

; 753  : 		0.4f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1604, xmm0

; 754  : 		.00004f,							// fadeRate

	movss	xmm0, DWORD PTR __real@3827c5ac
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1608, xmm0

; 755  : 		8,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1612, 8

; 756  : 		13,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1616, 13 ; 0000000dH

; 757  : 		1,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1620, 1

; 758  : 		30.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1624, xmm0

; 759  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1628, 0

; 760  : 		1,									// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1632, 1

; 761  : 		50.0f,								// maxExpand

	movss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1636, xmm0

; 762  : 	},
; 763  : 	// fire hot
; 764  : 	{
; 765  : 		ANIM_LOOP | SEQ_SCATTER_ANIM | FIRE_SCATTER_PLOT | ALPHA_PER_TEXEL,			// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1640, 8527876 ; 00822004H

; 766  : 		0.7f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f333333
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1644, xmm0

; 767  : 		.0009f,								// fadeRate

	movss	xmm0, DWORD PTR __real@3a6bedfa
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1648, xmm0

; 768  : 		0,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1652, 0

; 769  : 		0,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1656, 0

; 770  : 		2,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1660, 2

; 771  : 		10.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1664, xmm0

; 772  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1668, 0

; 773  : 		NUM_FIRE_SCATTER_FRAMES,			// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1672, 8

; 774  : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1676, xmm0

; 775  : 	},
; 776  : 	// fire med
; 777  : 	{
; 778  : 		ANIM_LOOP | SEQ_SCATTER_ANIM | FIRE_SCATTER_PLOT | ALPHA_PER_TEXEL,			// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1680, 8527876 ; 00822004H

; 779  : 		0.6f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1684, xmm0

; 780  : 		.0009f,								// fadeRate

	movss	xmm0, DWORD PTR __real@3a6bedfa
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1688, xmm0

; 781  : 		2,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1692, 2

; 782  : 		0,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1696, 0

; 783  : 		2,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1700, 2

; 784  : 		20.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@41a00000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1704, xmm0

; 785  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1708, 0

; 786  : 		NUM_FIRE_SCATTER_FRAMES,			// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1712, 8

; 787  : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1716, xmm0

; 788  : 	},
; 789  : 	// fire cool
; 790  : 	{
; 791  : 		ANIM_LOOP | SEQ_SCATTER_ANIM | FIRE_SCATTER_PLOT | ALPHA_PER_TEXEL,			// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1720, 8527876 ; 00822004H

; 792  : 		0.4f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1724, xmm0

; 793  : 		.0009f,								// fadeRate

	movss	xmm0, DWORD PTR __real@3a6bedfa
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1728, xmm0

; 794  : 		4,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1732, 4

; 795  : 		0,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1736, 0

; 796  : 		2,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1740, 2

; 797  : 		30.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1744, xmm0

; 798  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1748, 0

; 799  : 		NUM_FIRE_SCATTER_FRAMES,			// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1752, 8

; 800  : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1756, xmm0

; 801  : 	},
; 802  : 	// fire 1
; 803  : 	{
; 804  : 		FADE_LAST | ANIM_LOOP | SEQ_SCATTER_ANIM | SMOKE_SCATTER_PLOT | ALPHA_PER_TEXEL,			// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1760, 8536084 ; 00824014H

; 805  : 		1.0f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1764, xmm0

; 806  : 		0.0001f,								// fadeRate

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1768, xmm0

; 807  : 		0,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1772, 0

; 808  : 		0,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1776, 0

; 809  : 		2,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1780, 2

; 810  : 		50.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1784, xmm0

; 811  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1788, 0

; 812  : 		1,			// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1792, 1

; 813  : 		120.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@42f00000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1796, xmm0

; 814  : 	},
; 815  : 	// fire 2
; 816  : 	{
; 817  : 		FADE_START | ANIM_LOOP | SEQ_SCATTER_ANIM | FIRE_SCATTER_PLOT | ALPHA_PER_TEXEL,			// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1800, 8527908 ; 00822024H

; 818  : 		0.6f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1804, xmm0

; 819  : 		0.0001f,								// fadeRate

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1808, xmm0

; 820  : 		0,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1812, 0

; 821  : 		0,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1816, 0

; 822  : 		2,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1820, 2

; 823  : 		20.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@41a00000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1824, xmm0

; 824  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1828, 0

; 825  : 		NUM_FIRE_SCATTER_FRAMES,			// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1832, 8

; 826  : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1836, xmm0

; 827  : 	},
; 828  : 	// fire 3
; 829  : 	{
; 830  : 		FADE_START | ANIM_LOOP | SEQ_SCATTER_ANIM | FIRE_SCATTER_PLOT | ALPHA_PER_TEXEL,			// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1840, 8527908 ; 00822024H

; 831  : 		0.4f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1844, xmm0

; 832  : 		0.0001f,								// fadeRate

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1848, xmm0

; 833  : 		2,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1852, 2

; 834  : 		0,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1856, 0

; 835  : 		2,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1860, 2

; 836  : 		10.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1864, xmm0

; 837  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1868, 0

; 838  : 		NUM_FIRE_SCATTER_FRAMES,			// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1872, 8

; 839  : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1876, xmm0

; 840  : 	},
; 841  : 	// fire 4
; 842  : 	{
; 843  : 		FADE_START | ANIM_LOOP | SEQ_SCATTER_ANIM | SMOKE_SCATTER_PLOT | ALPHA_PER_TEXEL,			// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1880, 8536100 ; 00824024H

; 844  : 		0.9f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1884, xmm0

; 845  : 		0.00007f,								// fadeRate

	movss	xmm0, DWORD PTR __real@3892ccf7
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1888, xmm0

; 846  : 		0,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1892, 0

; 847  : 		0,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1896, 0

; 848  : 		2,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1900, 2

; 849  : 		30.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1904, xmm0

; 850  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1908, 0

; 851  : 		1,									// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1912, 1

; 852  : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1916, xmm0

; 853  : 	},
; 854  : 	// fire 5
; 855  : 	{
; 856  : 		FADE_START | ANIM_LOOP | SEQ_SCATTER_ANIM | FIRE_SCATTER_PLOT | ALPHA_PER_TEXEL,			// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1920, 8527908 ; 00822024H

; 857  : 		0.9f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1924, xmm0

; 858  : 		0.00007f,								// fadeRate

	movss	xmm0, DWORD PTR __real@3892ccf7
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1928, xmm0

; 859  : 		0,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1932, 0

; 860  : 		0,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1936, 0

; 861  : 		2,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1940, 2

; 862  : 		30.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1944, xmm0

; 863  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1948, 0

; 864  : 		1,			// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1952, 1

; 865  : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1956, xmm0

; 866  : 	},
; 867  : 	// fire 6
; 868  : 	{
; 869  : 		FADE_START | ANIM_LOOP | SEQ_SCATTER_ANIM | FIRE_SCATTER_PLOT | ALPHA_PER_TEXEL,			// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1960, 8527908 ; 00822024H

; 870  : 		0.8f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1964, xmm0

; 871  : 		0.0001f,								// fadeRate

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1968, xmm0

; 872  : 		0,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1972, 0

; 873  : 		0,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1976, 0

; 874  : 		2,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1980, 2

; 875  : 		3.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1984, xmm0

; 876  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1988, 0

; 877  : 		NUM_FIRE_SCATTER_FRAMES,			// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1992, 8

; 878  : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+1996, xmm0

; 879  : 	},
; 880  : 	// Fire Smoke
; 881  : 	{
; 882  : 		ANIM_LOOP | FADE_START | ALPHA_PER_TEXEL,				// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2000, 8388644 ; 00800024H

; 883  : 		0.9f, // COBRA - RED - a Little More visible: was 0.8f,	// initAlpha

	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2004, xmm0

; 884  : 		.00005f,												// fadeRate

	movss	xmm0, DWORD PTR __real@3851b717
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2008, xmm0

; 885  : 		6,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2012, 6

; 886  : 		12,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2016, 12 ; 0000000cH

; 887  : 		1,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2020, 1

; 888  : 		30.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2024, xmm0

; 889  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2028, 0

; 890  : 		NUM_SMOKE_SCATTER_FRAMES,			// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2032, 1

; 891  : 		300.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@43960000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2036, xmm0

; 892  : 	},
; 893  : 	// Trail Smoke
; 894  : 	{
; 895  : 		ANIM_LOOP | FADE_START | ALPHA_PER_TEXEL,		// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2040, 8388644 ; 00800024H

; 896  : 		1.0f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2044, xmm0

; 897  : 		.0002f,								// fadeRate

	movss	xmm0, DWORD PTR __real@3951b717
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2048, xmm0

; 898  : 		10,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2052, 10 ; 0000000aH

; 899  : 		12,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2056, 12 ; 0000000cH

; 900  : 		1,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2060, 1

; 901  : 		30.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2064, xmm0

; 902  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2068, 0

; 903  : 		NUM_SMOKE_SCATTER_FRAMES,			// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2072, 1

; 904  : 		40.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@42200000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2076, xmm0

; 905  : 	},
; 906  : 	// Trail Dust
; 907  : 	{
; 908  : 		ANIM_LOOP | FADE_START | ALPHA_PER_TEXEL,					// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2080, 8388644 ; 00800024H

; 909  : 		0.5f, // COBRA - RED - a Little Less visible: was 0.8f,		// initAlpha

	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2084, xmm0

; 910  : 		.0002f,														// fadeRate

	movss	xmm0, DWORD PTR __real@3951b717
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2088, xmm0

; 911  : 		8,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2092, 8

; 912  : 		13,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2096, 13 ; 0000000dH

; 913  : 		1,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2100, 1

; 914  : 		30.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2104, xmm0

; 915  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2108, 0

; 916  : 		NUM_SMOKE_SCATTER_FRAMES,			// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2112, 1

; 917  : 		50.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2116, xmm0

; 918  : 	},
; 919  : 	// fire 7
; 920  : 	{
; 921  : 		ANIM_LOOP | SEQ_SCATTER_ANIM | FIRE_SCATTER_PLOT | ALPHA_PER_TEXEL,			// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2120, 8527876 ; 00822004H

; 922  : 		0.15f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3e19999a
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2124, xmm0

; 923  : 		0.0001f,								// fadeRate

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2128, xmm0

; 924  : 		6,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2132, 6

; 925  : 		0,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2136, 0

; 926  : 		1,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2140, 1

; 927  : 		40.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@42200000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2144, xmm0

; 928  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2148, 0

; 929  : 		NUM_FIRE_SCATTER_FRAMES,			// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2152, 8

; 930  : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2156, xmm0

; 931  : 	},
; 932  : 	// Blue Cloud
; 933  : 	{
; 934  : 		ANIM_LOOP | FADE_START | ALPHA_PER_TEXEL,		// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2160, 8388644 ; 00800024H

; 935  : 		0.6f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2164, xmm0

; 936  : 		.0003f,								// fadeRate

	movss	xmm0, DWORD PTR __real@399d4952
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2168, xmm0

; 937  : 		9,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2172, 9

; 938  : 		0,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2176, 0

; 939  : 		1,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2180, 1

; 940  : 		10.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2184, xmm0

; 941  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2188, 0

; 942  : 		NUM_SMOKE_SCATTER_FRAMES,			// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2192, 1

; 943  : 		100.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2196, xmm0

; 944  : 	},
; 945  : 	// STEAM CLOUD
; 946  : 	{
; 947  : 		ANIM_LOOP | FADE_START | ALPHA_PER_TEXEL,		// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2200, 8388644 ; 00800024H

; 948  : 		0.8f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2204, xmm0

; 949  : 		.00005f,								// fadeRate

	movss	xmm0, DWORD PTR __real@3851b717
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2208, xmm0

; 950  : 		7,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2212, 7

; 951  : 		14,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2216, 14 ; 0000000eH

; 952  : 		1,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2220, 1

; 953  : 		40.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@42200000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2224, xmm0

; 954  : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2228, 0

; 955  : 		NUM_SMOKE_SCATTER_FRAMES,			// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2232, 1

; 956  : 		400.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@43c80000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2236, xmm0

; 957  : 	},
; 958  : 	// Ground Flash
; 959  : 	{
; 960  : 		GROUND_GLOW | GLOW_RAND_POINTS | GLOW_SPHERE | ALPHA_BRIGHTEN | ALPHA_DAYLIGHT,						// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2240, 68160640 ; 04100c80H

; 961  : 		0.4f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2244, xmm0

; 962  : 		0.0005f,								// fadeRate

	movss	xmm0, DWORD PTR __real@3a03126f
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2248, xmm0

; 963  : 		NULL,								// texture id sequence

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2252, 0

; 964  : 		0, 									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2256, 0

; 965  : 		0, 									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2260, 0

; 966  : 		-170.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@c32a0000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2264, xmm0

; 967  : 		glowCircleVerts,						// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2268, OFFSET ?glowCircleVerts@@3PAUTpoint@@A ; glowCircleVerts

; 968  : 		numGlowCircleVerts,					// numGlowVerts

	mov	eax, DWORD PTR ?numGlowCircleVerts@@3HA	; numGlowCircleVerts
	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2272, eax

; 969  : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2276, xmm0

; 970  : 	},
; 971  : 	// Ground Glow
; 972  : 	{
; 973  : 		GROUND_GLOW | GLOW_RAND_POINTS | GLOW_SPHERE | ALPHA_BRIGHTEN | ALPHA_DAYLIGHT,						// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2280, 68160640 ; 04100c80H

; 974  : 		0.2f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2284, xmm0

; 975  : 		0.0f,								// fadeRate

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2288, xmm0

; 976  : 		NULL,								// texture id sequence

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2292, 0

; 977  : 		0, 									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2296, 0

; 978  : 		0, 									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2300, 0

; 979  : 		0.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2304, xmm0

; 980  : 		glowCircleVerts,						// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2308, OFFSET ?glowCircleVerts@@3PAUTpoint@@A ; glowCircleVerts

; 981  : 		numGlowCircleVerts,					// numGlowVerts

	mov	ecx, DWORD PTR ?numGlowCircleVerts@@3HA	; numGlowCircleVerts
	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2312, ecx

; 982  : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2316, xmm0

; 983  : 	},
; 984  : 	// Missile Ground Glow
; 985  : 	{
; 986  : 		GROUND_GLOW | GLOW_RAND_POINTS | GLOW_SPHERE | ALPHA_BRIGHTEN | ALPHA_DAYLIGHT,						// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2320, 68160640 ; 04100c80H

; 987  : 		0.2f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2324, xmm0

; 988  : 		0.0f,								// fadeRate

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2328, xmm0

; 989  : 		NULL,								// texture id sequence

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2332, 0

; 990  : 		0, 									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2336, 0

; 991  : 		0, 									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2340, 0

; 992  : 		0.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2344, xmm0

; 993  : 		glowCircleVerts,						// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2348, OFFSET ?glowCircleVerts@@3PAUTpoint@@A ; glowCircleVerts

; 994  : 		numGlowCircleVerts,					// numGlowVerts

	mov	edx, DWORD PTR ?numGlowCircleVerts@@3HA	; numGlowCircleVerts
	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2352, edx

; 995  : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2356, xmm0

; 996  : 	},
; 997  : 	// Big Smoke 1
; 998  : 	{
; 999  : 		ANIM_LOOP | FADE_START | ALPHA_PER_TEXEL,		// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2360, 8388644 ; 00800024H

; 1000 : 		1.0f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2364, xmm0

; 1001 : 		.00005f,								// fadeRate

	movss	xmm0, DWORD PTR __real@3851b717
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2368, xmm0

; 1002 : 		10,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2372, 10 ; 0000000aH

; 1003 : 		12,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2376, 12 ; 0000000cH

; 1004 : 		1,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2380, 1

; 1005 : 		20.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@41a00000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2384, xmm0

; 1006 : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2388, 0

; 1007 : 		0,			// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2392, 0

; 1008 : 		30000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@46ea6000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2396, xmm0

; 1009 : 	},
; 1010 : 	// Big Smoke 2
; 1011 : 	{
; 1012 : 		ANIM_LOOP | FADE_START | ALPHA_PER_TEXEL,		// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2400, 8388644 ; 00800024H

; 1013 : 		1.0f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2404, xmm0

; 1014 : 		.00005f,								// fadeRate

	movss	xmm0, DWORD PTR __real@3851b717
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2408, xmm0

; 1015 : 		6,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2412, 6

; 1016 : 		12,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2416, 12 ; 0000000cH

; 1017 : 		1,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2420, 1

; 1018 : 		20.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@41a00000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2424, xmm0

; 1019 : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2428, 0

; 1020 : 		NUM_SMOKE_SCATTER_FRAMES,			// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2432, 1

; 1021 : 		30000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@46ea6000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2436, xmm0

; 1022 : 	},
; 1023 : 	// Big Dust 1
; 1024 : 	{
; 1025 : 		ANIM_LOOP | FADE_START | ALPHA_PER_TEXEL,		// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2440, 8388644 ; 00800024H

; 1026 : 		1.0f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2444, xmm0

; 1027 : 		.00006f,							// fadeRate

	movss	xmm0, DWORD PTR __real@387ba882
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2448, xmm0

; 1028 : 		8,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2452, 8

; 1029 : 		13,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2456, 13 ; 0000000dH

; 1030 : 		1,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2460, 1

; 1031 : 		20.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@41a00000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2464, xmm0

; 1032 : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2468, 0

; 1033 : 		NUM_SMOKE_SCATTER_FRAMES,			// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2472, 1

; 1034 : 		30000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@46ea6000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2476, xmm0

; 1035 : 	},
; 1036 : 	// Incendiary Explosion 
; 1037 : 	{
; 1038 : 		FADE_START | ANIM_LOOP | ANIM_HALF_RATE | EXPLODE_SCATTER_PLOT | ANIM_NO_CLAMP,							// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2480, 331812 ; 00051024H

; 1039 : 		1.0f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2484, xmm0

; 1040 : 		0.0001f,								// fadeRate

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2488, xmm0

; 1041 : 		1,

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2492, 1

; 1042 : 		0,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2496, 0

; 1043 : 		16,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2500, 16 ; 00000010H

; 1044 : 		80.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@42a00000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2504, xmm0

; 1045 : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2508, 0

; 1046 : 		NUM_EXPLODE_SCATTER_FRAMES,									// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2512, 1

; 1047 : 		10000.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2516, xmm0

; 1048 : 	},
; 1049 : 		// Water Wake
; 1050 : 	{
; 1051 : 		ANIM_LOOP | FADE_START | ALPHA_PER_TEXEL,		// flags

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2520, 8388644 ; 00800024H

; 1052 : 		0.6f,								// initAlpha

	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2524, xmm0

; 1053 : 		0.00001f,								// fadeRate

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2528, xmm0

; 1054 : 		7,									// texid

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2532, 7

; 1055 : 		14,									// startTexture

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2536, 14 ; 0000000eH

; 1056 : 		1,									// numTextures

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2540, 1

; 1057 : 		10.0f,								// expandRate

	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2544, xmm0

; 1058 : 		NULL,								// glowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2548, 0

; 1059 : 		NUM_SMOKE_SCATTER_FRAMES,			// numGlowVerts

	mov	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2552, 1

; 1060 : 		100.0f,							// maxExpand

	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR ?gTypeTable@@3PAU_TYPES2D@@A+2556, xmm0

; 1061 : 	},
; 1062 : 
; 1063 : };

	pop	ebp
	ret	0
??__EgTypeTable@@YAXXZ ENDP				; `dynamic initializer for 'gTypeTable''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__FgAplTexturesGreen@@YAXXZ
text$yd	SEGMENT
??__FgAplTexturesGreen@@YAXXZ PROC			; `dynamic atexit destructor for 'gAplTexturesGreen'', COMDAT
	push	ebp
	mov	ebp, esp
	push	OFFSET ??1Texture@@QAE@XZ		; Texture::~Texture
	push	11					; 0000000bH
	push	24					; 00000018H
	push	OFFSET ?gAplTexturesGreen@@3PAVTexture@@A ; gAplTexturesGreen
	call	??_M@YGXPAXIHP6EX0@Z@Z
	pop	ebp
	ret	0
??__FgAplTexturesGreen@@YAXXZ ENDP			; `dynamic atexit destructor for 'gAplTexturesGreen''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\draw2d.cpp
;	COMDAT ??__EgAplTexturesGreen@@YAXXZ
text$yc	SEGMENT
??__EgAplTexturesGreen@@YAXXZ PROC			; `dynamic initializer for 'gAplTexturesGreen'', COMDAT

; 50   : Texture		gAplTexturesGreen[NUM_APL_TEXTURES];

	push	ebp
	mov	ebp, esp
	push	OFFSET ??1Texture@@QAE@XZ		; Texture::~Texture
	push	OFFSET ??0Texture@@QAE@XZ		; Texture::Texture
	push	11					; 0000000bH
	push	24					; 00000018H
	push	OFFSET ?gAplTexturesGreen@@3PAVTexture@@A ; gAplTexturesGreen
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	push	OFFSET ??__FgAplTexturesGreen@@YAXXZ	; `dynamic atexit destructor for 'gAplTexturesGreen''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__EgAplTexturesGreen@@YAXXZ ENDP			; `dynamic initializer for 'gAplTexturesGreen''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__FgAplTextures@@YAXXZ
text$yd	SEGMENT
??__FgAplTextures@@YAXXZ PROC				; `dynamic atexit destructor for 'gAplTextures'', COMDAT
	push	ebp
	mov	ebp, esp
	push	OFFSET ??1Texture@@QAE@XZ		; Texture::~Texture
	push	11					; 0000000bH
	push	24					; 00000018H
	push	OFFSET ?gAplTextures@@3PAVTexture@@A	; gAplTextures
	call	??_M@YGXPAXIHP6EX0@Z@Z
	pop	ebp
	ret	0
??__FgAplTextures@@YAXXZ ENDP				; `dynamic atexit destructor for 'gAplTextures''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\draw2d.cpp
;	COMDAT ??__EgAplTextures@@YAXXZ
text$yc	SEGMENT
??__EgAplTextures@@YAXXZ PROC				; `dynamic initializer for 'gAplTextures'', COMDAT

; 49   : Texture		gAplTextures[NUM_APL_TEXTURES];

	push	ebp
	mov	ebp, esp
	push	OFFSET ??1Texture@@QAE@XZ		; Texture::~Texture
	push	OFFSET ??0Texture@@QAE@XZ		; Texture::Texture
	push	11					; 0000000bH
	push	24					; 00000018H
	push	OFFSET ?gAplTextures@@3PAVTexture@@A	; gAplTextures
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	push	OFFSET ??__FgAplTextures@@YAXXZ		; `dynamic atexit destructor for 'gAplTextures''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__EgAplTextures@@YAXXZ ENDP				; `dynamic initializer for 'gAplTextures''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__FgGlobTextures@@YAXXZ
text$yd	SEGMENT
??__FgGlobTextures@@YAXXZ PROC				; `dynamic atexit destructor for 'gGlobTextures'', COMDAT
	push	ebp
	mov	ebp, esp
	push	OFFSET ??1Texture@@QAE@XZ		; Texture::~Texture
	push	32					; 00000020H
	push	24					; 00000018H
	push	OFFSET ?gGlobTextures@@3PAVTexture@@A	; gGlobTextures
	call	??_M@YGXPAXIHP6EX0@Z@Z
	pop	ebp
	ret	0
??__FgGlobTextures@@YAXXZ ENDP				; `dynamic atexit destructor for 'gGlobTextures''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\draw2d.cpp
;	COMDAT ??__EgGlobTextures@@YAXXZ
text$yc	SEGMENT
??__EgGlobTextures@@YAXXZ PROC				; `dynamic initializer for 'gGlobTextures'', COMDAT

; 45   : Texture gGlobTextures[NUM_TEX_SHEETS];

	push	ebp
	mov	ebp, esp
	push	OFFSET ??1Texture@@QAE@XZ		; Texture::~Texture
	push	OFFSET ??0Texture@@QAE@XZ		; Texture::Texture
	push	32					; 00000020H
	push	24					; 00000018H
	push	OFFSET ?gGlobTextures@@3PAVTexture@@A	; gGlobTextures
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	push	OFFSET ??__FgGlobTextures@@YAXXZ	; `dynamic atexit destructor for 'gGlobTextures''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__EgGlobTextures@@YAXXZ ENDP				; `dynamic initializer for 'gGlobTextures''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\realweather.h
;	COMDAT ?UnderOvercast@RealWeather@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?UnderOvercast@RealWeather@@QAE_NXZ PROC		; RealWeather::UnderOvercast, COMDAT
; _this$ = ecx

; 150  : 	bool	UnderOvercast() { return UnderOVCST; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+15996]
	mov	esp, ebp
	pop	ebp
	ret	0
?UnderOvercast@RealWeather@@QAE_NXZ ENDP		; RealWeather::UnderOvercast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\realweather.h
;	COMDAT ?InsideOvercast@RealWeather@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InsideOvercast@RealWeather@@QAE_NXZ PROC		; RealWeather::InsideOvercast, COMDAT
; _this$ = ecx

; 149  : 	bool	InsideOvercast() { return InsideOVCST; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+15998]
	mov	esp, ebp
	pop	ebp
	ret	0
?InsideOvercast@RealWeather@@QAE_NXZ ENDP		; RealWeather::InsideOvercast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\fastmath.h
;	COMDAT ?F_I32@@YAKM@Z
_TEXT	SEGMENT
_r$ = -4						; size = 4
_x$ = 8							; size = 4
?F_I32@@YAKM@Z PROC					; F_I32, COMDAT

; 7    : {	DWORD	r;

	push	ebp
	mov	ebp, esp
	push	ecx

; 8    : 	_asm{ 
; 9    : 			fld		x

	fld	DWORD PTR _x$[ebp]

; 10   : 			fistp	r

	fistp	DWORD PTR _r$[ebp]

; 11   : 	}
; 12   : 	return r;

	mov	eax, DWORD PTR _r$[ebp]

; 13   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?F_I32@@YAKM@Z ENDP					; F_I32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\draw2d.cpp
_TEXT	SEGMENT
tv691 = -364						; size = 4
tv623 = -360						; size = 4
_iradius$ = -356					; size = 4
_i$ = -352						; size = 4
_radius$ = -348						; size = 4
_gif$ = -341						; size = 1
_vLasti$ = -340						; size = 52
_vLast$ = -288						; size = 52
_v3$ = -236						; size = 52
_v2$ = -184						; size = 52
_v1$ = -132						; size = 52
_v0$ = -80						; size = 52
_os$ = -28						; size = 12
_center$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_renderer$ = 8						; size = 4
_cntr$ = 12						; size = 4
_dist$ = 16						; size = 4
_alpha$ = 20						; size = 4
?Draw2DSunGlowEffect@@YAXPAVRenderOTW@@PAUTpoint@@MM@Z PROC ; Draw2DSunGlowEffect

; 2840 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 364				; 0000016cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi

; 2841 : 	Tpoint				center, os;
; 2842 : 	ThreeDVertex		v0, v1, v2, v3, vLast, vLasti;
; 2843 : 	int					i;
; 2844 : 	float				radius, iradius;
; 2845 : 	bool gif = false;

	mov	BYTE PTR _gif$[ebp], 0

; 2846 : 	
; 2847 : //	if ( !renderer->GetAlphaMode() )
; 2848 : //		return;
; 2849 : 
; 2850 : 	if ( alpha < 0.0001 )

	cvtss2sd xmm0, DWORD PTR _alpha$[ebp]
	movsd	xmm1, QWORD PTR __real@3f1a36e2eb1c432d
	comisd	xmm1, xmm0
	jbe	SHORT $LN10@Draw2DSunG

; 2851 : 		return;

	jmp	$LN11@Draw2DSunG
$LN10@Draw2DSunG:

; 2852 : 
; 2853 : 	center = *cntr;

	mov	eax, DWORD PTR _cntr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _center$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _center$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _center$[ebp+8], eax

; 2854 : 
; 2855 : 
; 2856 : 	center.x *= dist * 0.30f;

	movss	xmm0, DWORD PTR _dist$[ebp]
	mulss	xmm0, DWORD PTR __real@3e99999a
	mulss	xmm0, DWORD PTR _center$[ebp]
	movss	DWORD PTR _center$[ebp], xmm0

; 2857 : 	center.y *= dist * 0.30f;

	movss	xmm0, DWORD PTR _dist$[ebp]
	mulss	xmm0, DWORD PTR __real@3e99999a
	mulss	xmm0, DWORD PTR _center$[ebp+4]
	movss	DWORD PTR _center$[ebp+4], xmm0

; 2858 : 	center.z *= dist * 0.30f;

	movss	xmm0, DWORD PTR _dist$[ebp]
	mulss	xmm0, DWORD PTR __real@3e99999a
	mulss	xmm0, DWORD PTR _center$[ebp+8]
	movss	DWORD PTR _center$[ebp+8], xmm0

; 2859 : 
; 2860 : 	v0.r = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v0$[ebp+8], xmm0

; 2861 : 	v0.g = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v0$[ebp+12], xmm0

; 2862 : 	v0.b = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v0$[ebp+16], xmm0

; 2863 : 	v1.r = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v1$[ebp+8], xmm0

; 2864 : 	v1.g = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v1$[ebp+12], xmm0

; 2865 : 	v1.b = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v1$[ebp+16], xmm0

; 2866 : 	v2.r = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v2$[ebp+8], xmm0

; 2867 : 	v2.g = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v2$[ebp+12], xmm0

; 2868 : 	v2.b = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v2$[ebp+16], xmm0

; 2869 : 
; 2870 : 	/*
; 2871 : 	v1.r = 0.4f + NRANDPOS * 0.6f;
; 2872 : 	v1.g = 1.0f;
; 2873 : 	v1.b = 0.4f + NRANDPOS * 0.6f;
; 2874 : 
; 2875 : 	v2.r = 0.4f + NRANDPOS * 0.6f;
; 2876 : 	v2.g = 1.0f;
; 2877 : 	v2.b = 0.4f + NRANDPOS * 0.6f;
; 2878 : 	*/
; 2879 : 
; 2880 : 	v0.q = v1.q = v2.q = vLast.q = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _vLast$[ebp+32], xmm0
	movss	xmm0, DWORD PTR _vLast$[ebp+32]
	movss	DWORD PTR _v2$[ebp+32], xmm0
	movss	xmm0, DWORD PTR _v2$[ebp+32]
	movss	DWORD PTR _v1$[ebp+32], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+32]
	movss	DWORD PTR _v0$[ebp+32], xmm0

; 2881 : 
; 2882 : 	// Set up our drawing mode
; 2883 : 	renderer->context.RestoreState(STATE_ALPHA_GOURAUD);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _renderer$[ebp]
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 2884 : 	renderer->context.SetState(MPR_STA_ALPHA_OP_FUNCTION,MPR_TO_MODULATE); //JAM 18Oct03

	push	4
	push	5
	mov	ecx, DWORD PTR _renderer$[ebp]
	add	ecx, 100				; 00000064H
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 2885 : 
; 2886 : 	// set alphas for this circle
; 2887 : 	v0.a = v1.a = v2.a = vLast.a = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _vLast$[ebp+20], xmm0
	movss	xmm0, DWORD PTR _vLast$[ebp+20]
	movss	DWORD PTR _v2$[ebp+20], xmm0
	movss	xmm0, DWORD PTR _v2$[ebp+20]
	movss	DWORD PTR _v1$[ebp+20], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+20]
	movss	DWORD PTR _v0$[ebp+20], xmm0

; 2888 : 
; 2889 : 	// clear center?
; 2890 : 	v0.a = alpha;

	movss	xmm0, DWORD PTR _alpha$[ebp]
	movss	DWORD PTR _v0$[ebp+20], xmm0

; 2891 : 
; 2892 : 	// set radius for this circle
; 2893 : 	radius = 1.8f;

	movss	xmm0, DWORD PTR __real@3fe66666
	movss	DWORD PTR _radius$[ebp], xmm0

; 2894 : 	if ( renderer->GetFOV() < 60.0f * DTR )

	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?GetFOV@Render3D@@QAEMXZ		; Render3D::GetFOV
	fstp	DWORD PTR tv623[ebp]
	movss	xmm0, DWORD PTR __real@3f860a91
	comiss	xmm0, DWORD PTR tv623[ebp]
	jbe	SHORT $LN9@Draw2DSunG

; 2895 : 		radius *= 0.3f;

	movss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR __real@3e99999a
	movss	DWORD PTR _radius$[ebp], xmm0
$LN9@Draw2DSunG:

; 2896 : 
; 2897 : 	// do center point
; 2898 : 	renderer->TransformCameraCentricPoint( &center, &v0 );

	lea	ecx, DWORD PTR _v0$[ebp]
	push	ecx
	lea	edx, DWORD PTR _center$[ebp]
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformCameraCentricPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformCameraCentricPoint

; 2899 : 	center.y = v0.csX;

	movss	xmm0, DWORD PTR _v0$[ebp+40]
	movss	DWORD PTR _center$[ebp+4], xmm0

; 2900 : 	center.z = v0.csY;

	movss	xmm0, DWORD PTR _v0$[ebp+44]
	movss	DWORD PTR _center$[ebp+8], xmm0

; 2901 : 	center.x = v0.csZ;

	movss	xmm0, DWORD PTR _v0$[ebp+48]
	movss	DWORD PTR _center$[ebp], xmm0

; 2902 : 
; 2903 : 	// 1 SHIMMERY CIRCLE
; 2904 : 
; 2905 : 	// v1.r = 0.4f + NRANDPOS * 0.6f;
; 2906 : 	// v1.g = 1.0f;
; 2907 : 	// v1.b = 0.4f + NRANDPOS * 0.6f;
; 2908 : 
; 2909 : 	// do 1st point
; 2910 : 	os.x = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _os$[ebp], xmm0

; 2911 : 
; 2912 : 	os.y = lensFlareVerts[0].y * radius;

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	movss	xmm0, DWORD PTR ?lensFlareVerts@@3PAUTpoint@@A[eax+4]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _os$[ebp+4], xmm0

; 2913 : 	os.z = lensFlareVerts[0].z * radius;

	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	movss	xmm0, DWORD PTR ?lensFlareVerts@@3PAUTpoint@@A[ecx+8]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _os$[ebp+8], xmm0

; 2914 : 
; 2915 : 	renderer->TransformBillboardPoint( &os, &center, &v1 );

	lea	edx, DWORD PTR _v1$[ebp]
	push	edx
	lea	eax, DWORD PTR _center$[ebp]
	push	eax
	lea	ecx, DWORD PTR _os$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformBillboardPoint@Render3D@@QAEXPAUTpoint@@0PAUThreeDVertex@@@Z ; Render3D::TransformBillboardPoint

; 2916 : 
; 2917 : 	// save it for last tri in strip
; 2918 : 	vLast = v1;

	mov	ecx, 13					; 0000000dH
	lea	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR _vLast$[ebp]
	rep movsd

; 2919 : 
; 2920 : 	if (g_nGfxFix & 0x04) // sun, sun glow and moon fix

	mov	edx, DWORD PTR ?g_nGfxFix@@3HA		; g_nGfxFix
	and	edx, 4
	je	SHORT $LN8@Draw2DSunG

; 2921 : 		gif = true;

	mov	BYTE PTR _gif$[ebp], 1
$LN8@Draw2DSunG:

; 2922 : 
; 2923 : 	for ( i = 1; i < numLensFlareVerts; i++ )

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN7@Draw2DSunG
$LN6@Draw2DSunG:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@Draw2DSunG:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	$LN5@Draw2DSunG

; 2924 : 	{
; 2925 : 		os.y = lensFlareVerts[i].y * radius;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?lensFlareVerts@@3PAUTpoint@@A[ecx+4]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _os$[ebp+4], xmm0

; 2926 : 		os.z = lensFlareVerts[i].z * radius;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?lensFlareVerts@@3PAUTpoint@@A[edx+8]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _os$[ebp+8], xmm0

; 2927 : 	
; 2928 : 		// v2.r = 0.4f + NRANDPOS * 0.6f;
; 2929 : 		// v2.g = 1.0f;
; 2930 : 		// v2.b = 0.4f + NRANDPOS * 0.6f;
; 2931 : 
; 2932 : 		renderer->TransformBillboardPoint( &os, &center, &v2 );

	lea	eax, DWORD PTR _v2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _center$[ebp]
	push	ecx
	lea	edx, DWORD PTR _os$[ebp]
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformBillboardPoint@Render3D@@QAEXPAUTpoint@@0PAUThreeDVertex@@@Z ; Render3D::TransformBillboardPoint

; 2933 : 
; 2934 : 		renderer->DrawTriangle( &v0, &v1, &v2, CULL_ALLOW_ALL, gif );

	push	0
	movzx	eax, BYTE PTR _gif$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v1$[ebp]
	push	edx
	lea	eax, DWORD PTR _v0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?DrawTriangle@Render3D@@QAEXPAUThreeDVertex@@00H_N1@Z ; Render3D::DrawTriangle

; 2935 : 
; 2936 : 		// move v2 to v1 for next time thru loop
; 2937 : 		v1 = v2;

	mov	ecx, 13					; 0000000dH
	lea	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR _v1$[ebp]
	rep movsd

; 2938 : 	}

	jmp	$LN6@Draw2DSunG
$LN5@Draw2DSunG:

; 2939 : 
; 2940 : 
; 2941 : 
; 2942 : 
; 2943 : 	// kick out last triangle
; 2944 : 	renderer->DrawTriangle( &v0, &v1, &vLast, CULL_ALLOW_ALL, gif );

	push	0
	movzx	ecx, BYTE PTR _gif$[ebp]
	push	ecx
	push	0
	lea	edx, DWORD PTR _vLast$[ebp]
	push	edx
	lea	eax, DWORD PTR _v1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v0$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?DrawTriangle@Render3D@@QAEXPAUThreeDVertex@@00H_N1@Z ; Render3D::DrawTriangle

; 2945 : 
; 2946 : #if 0
; 2947 : 
; 2948 : 	// 2 SHIMMERY STAR
; 2949 : 
; 2950 : 	// do 1st point
; 2951 : 	float randRadius;
; 2952 : 	randRadius = radius + PRANDFloat() * radius * 1.7f;
; 2953 : 	os.y = lensFlareVerts[0].y * randRadius;
; 2954 : 	os.z = lensFlareVerts[0].z * randRadius;
; 2955 : 
; 2956 : 	renderer->TransformBillboardPoint( &os, &center, &v1 );
; 2957 : 
; 2958 : 	v1.r = 1.0f;
; 2959 : 	v1.g = 1.0f;
; 2960 : 	v1.b = 1.0f;
; 2961 : 
; 2962 : 	// save it for last tri in strip
; 2963 : 	vLast = v1;
; 2964 : 	v0.a *= 0.8f;
; 2965 : 
; 2966 : 	for ( i = 1; i < numLensFlareVerts; i++ )
; 2967 : 	{
; 2968 : 		if ( i & 1 )
; 2969 : 		{
; 2970 : 			os.y = lensFlareVerts[i].y * radius * 0.1f;
; 2971 : 			os.z = lensFlareVerts[i].z * radius * 0.1f;
; 2972 : 		}
; 2973 : 		else
; 2974 : 		{
; 2975 : 			randRadius = radius + PRANDFloat() * radius * 1.7f;
; 2976 : 			os.y = lensFlareVerts[i].y * randRadius;
; 2977 : 			os.z = lensFlareVerts[i].z * randRadius;
; 2978 : 		}
; 2979 : 	
; 2980 : 		renderer->TransformBillboardPoint( &os, &center, &v2 );
; 2981 : 
; 2982 : 		renderer->DrawTriangle( &v0, &v1, &v2, CULL_ALLOW_ALL );
; 2983 : 
; 2984 : 		// move v2 to v1 for next time thru loop
; 2985 : 		v1 = v2;
; 2986 : 	}
; 2987 : 	// kick out last triangle
; 2988 : 	renderer->DrawTriangle( &v0, &v1, &vLast, CULL_ALLOW_ALL );
; 2989 : 
; 2990 : #endif
; 2991 : 
; 2992 : 
; 2993 : 	// 3 RING AROUND SUN
; 2994 : 
; 2995 : 	v1.r = 0.9f;

	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR _v1$[ebp+8], xmm0

; 2996 : 	v1.g = 0.6f;

	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR _v1$[ebp+12], xmm0

; 2997 : 	v1.b = 0.6f;

	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR _v1$[ebp+16], xmm0

; 2998 : 
; 2999 : 	v2.r = 0.9f;

	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR _v2$[ebp+8], xmm0

; 3000 : 	v2.g = 0.6f;

	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR _v2$[ebp+12], xmm0

; 3001 : 	v2.b = 0.6f;

	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR _v2$[ebp+16], xmm0

; 3002 : 
; 3003 : 	v0.r = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v0$[ebp+8], xmm0

; 3004 : 	v0.g = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v0$[ebp+12], xmm0

; 3005 : 	v0.b = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v0$[ebp+16], xmm0

; 3006 : 
; 3007 : 	v3.r = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v3$[ebp+8], xmm0

; 3008 : 	v3.g = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v3$[ebp+12], xmm0

; 3009 : 	v3.b = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v3$[ebp+16], xmm0

; 3010 : 
; 3011 : 
; 3012 : 	v0.q = v1.q = v2.q = v3.q = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v3$[ebp+32], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+32]
	movss	DWORD PTR _v2$[ebp+32], xmm0
	movss	xmm0, DWORD PTR _v2$[ebp+32]
	movss	DWORD PTR _v1$[ebp+32], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+32]
	movss	DWORD PTR _v0$[ebp+32], xmm0

; 3013 : 
; 3014 : 	// Set up our drawing mode
; 3015 : 	renderer->context.RestoreState(STATE_ALPHA_GOURAUD);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _renderer$[ebp]
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 3016 : 	renderer->context.SetState(MPR_STA_ALPHA_OP_FUNCTION,MPR_TO_MODULATE); //JAM 18Oct03

	push	4
	push	5
	mov	ecx, DWORD PTR _renderer$[ebp]
	add	ecx, 100				; 00000064H
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 3017 : 
; 3018 : 	// set alphas for this circle
; 3019 : 	v0.a = v3.a = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v3$[ebp+20], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+20]
	movss	DWORD PTR _v0$[ebp+20], xmm0

; 3020 : 
; 3021 : 	// clear center?
; 3022 : 	v1.a = v2.a = alpha * 0.55f;

	movss	xmm0, DWORD PTR _alpha$[ebp]
	mulss	xmm0, DWORD PTR __real@3f0ccccd
	movss	DWORD PTR _v2$[ebp+20], xmm0
	movss	xmm0, DWORD PTR _v2$[ebp+20]
	movss	DWORD PTR _v1$[ebp+20], xmm0

; 3023 : 
; 3024 : 	// set radius for this circle
; 3025 : 	radius = 0.5f;

	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _radius$[ebp], xmm0

; 3026 : 	iradius = 0.3f;

	movss	xmm0, DWORD PTR __real@3e99999a
	movss	DWORD PTR _iradius$[ebp], xmm0

; 3027 : 	if ( renderer->GetFOV() < 60.0f * DTR )

	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?GetFOV@Render3D@@QAEMXZ		; Render3D::GetFOV
	fstp	DWORD PTR tv691[ebp]
	movss	xmm0, DWORD PTR __real@3f860a91
	comiss	xmm0, DWORD PTR tv691[ebp]
	jbe	SHORT $LN4@Draw2DSunG

; 3028 : 	{
; 3029 : 		radius *= 0.3f;

	movss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR __real@3e99999a
	movss	DWORD PTR _radius$[ebp], xmm0

; 3030 : 		iradius *= 0.3f;

	movss	xmm0, DWORD PTR _iradius$[ebp]
	mulss	xmm0, DWORD PTR __real@3e99999a
	movss	DWORD PTR _iradius$[ebp], xmm0
$LN4@Draw2DSunG:

; 3031 : 	}
; 3032 : 
; 3033 : 	// do 1st 2 points
; 3034 : 	os.y = lensFlareVerts[0].y * radius;

	mov	edx, 12					; 0000000cH
	imul	edx, 0
	movss	xmm0, DWORD PTR ?lensFlareVerts@@3PAUTpoint@@A[edx+4]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _os$[ebp+4], xmm0

; 3035 : 	os.z = lensFlareVerts[0].z * radius;

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	movss	xmm0, DWORD PTR ?lensFlareVerts@@3PAUTpoint@@A[eax+8]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _os$[ebp+8], xmm0

; 3036 : 
; 3037 : 	renderer->TransformBillboardPoint( &os, &center, &v1 );

	lea	ecx, DWORD PTR _v1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _center$[ebp]
	push	edx
	lea	eax, DWORD PTR _os$[ebp]
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformBillboardPoint@Render3D@@QAEXPAUTpoint@@0PAUThreeDVertex@@@Z ; Render3D::TransformBillboardPoint

; 3038 : 
; 3039 : 	os.y = lensFlareVerts[0].y * iradius;

	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	movss	xmm0, DWORD PTR ?lensFlareVerts@@3PAUTpoint@@A[ecx+4]
	mulss	xmm0, DWORD PTR _iradius$[ebp]
	movss	DWORD PTR _os$[ebp+4], xmm0

; 3040 : 	os.z = lensFlareVerts[0].z * iradius;

	mov	edx, 12					; 0000000cH
	imul	edx, 0
	movss	xmm0, DWORD PTR ?lensFlareVerts@@3PAUTpoint@@A[edx+8]
	mulss	xmm0, DWORD PTR _iradius$[ebp]
	movss	DWORD PTR _os$[ebp+8], xmm0

; 3041 : 
; 3042 : 	renderer->TransformBillboardPoint( &os, &center, &v0 );

	lea	eax, DWORD PTR _v0$[ebp]
	push	eax
	lea	ecx, DWORD PTR _center$[ebp]
	push	ecx
	lea	edx, DWORD PTR _os$[ebp]
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformBillboardPoint@Render3D@@QAEXPAUTpoint@@0PAUThreeDVertex@@@Z ; Render3D::TransformBillboardPoint

; 3043 : 
; 3044 : 
; 3045 : 	// save it for last tri in strip
; 3046 : 	vLast = v1;

	mov	ecx, 13					; 0000000dH
	lea	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR _vLast$[ebp]
	rep movsd

; 3047 : 	vLasti = v0;

	mov	ecx, 13					; 0000000dH
	lea	esi, DWORD PTR _v0$[ebp]
	lea	edi, DWORD PTR _vLasti$[ebp]
	rep movsd

; 3048 : 
; 3049 : 	for ( i = 1; i < numLensFlareVerts; i++ )

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN3@Draw2DSunG
$LN2@Draw2DSunG:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@Draw2DSunG:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	$LN1@Draw2DSunG

; 3050 : 	{
; 3051 : 		os.y = lensFlareVerts[i].y * radius;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?lensFlareVerts@@3PAUTpoint@@A[ecx+4]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _os$[ebp+4], xmm0

; 3052 : 		os.z = lensFlareVerts[i].z * radius;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?lensFlareVerts@@3PAUTpoint@@A[edx+8]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _os$[ebp+8], xmm0

; 3053 : 	
; 3054 : 		renderer->TransformBillboardPoint( &os, &center, &v2 );

	lea	eax, DWORD PTR _v2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _center$[ebp]
	push	ecx
	lea	edx, DWORD PTR _os$[ebp]
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformBillboardPoint@Render3D@@QAEXPAUTpoint@@0PAUThreeDVertex@@@Z ; Render3D::TransformBillboardPoint

; 3055 : 
; 3056 : 		os.y = lensFlareVerts[i].y * iradius;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?lensFlareVerts@@3PAUTpoint@@A[eax+4]
	mulss	xmm0, DWORD PTR _iradius$[ebp]
	movss	DWORD PTR _os$[ebp+4], xmm0

; 3057 : 		os.z = lensFlareVerts[i].z * iradius;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?lensFlareVerts@@3PAUTpoint@@A[ecx+8]
	mulss	xmm0, DWORD PTR _iradius$[ebp]
	movss	DWORD PTR _os$[ebp+8], xmm0

; 3058 : 	
; 3059 : 		renderer->TransformBillboardPoint( &os, &center, &v3 );

	lea	edx, DWORD PTR _v3$[ebp]
	push	edx
	lea	eax, DWORD PTR _center$[ebp]
	push	eax
	lea	ecx, DWORD PTR _os$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformBillboardPoint@Render3D@@QAEXPAUTpoint@@0PAUThreeDVertex@@@Z ; Render3D::TransformBillboardPoint

; 3060 : 
; 3061 : 		renderer->DrawTriangle( &v0, &v1, &v2, CULL_ALLOW_ALL, gif );

	push	0
	movzx	edx, BYTE PTR _gif$[ebp]
	push	edx
	push	0
	lea	eax, DWORD PTR _v2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v0$[ebp]
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?DrawTriangle@Render3D@@QAEXPAUThreeDVertex@@00H_N1@Z ; Render3D::DrawTriangle

; 3062 : 		renderer->DrawTriangle( &v0, &v2, &v3, CULL_ALLOW_ALL, gif );

	push	0
	movzx	eax, BYTE PTR _gif$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _v3$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v2$[ebp]
	push	edx
	lea	eax, DWORD PTR _v0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?DrawTriangle@Render3D@@QAEXPAUThreeDVertex@@00H_N1@Z ; Render3D::DrawTriangle

; 3063 : 
; 3064 : 		// save current points to past points
; 3065 : 		v1 = v2;

	mov	ecx, 13					; 0000000dH
	lea	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR _v1$[ebp]
	rep movsd

; 3066 : 		v0 = v3;

	mov	ecx, 13					; 0000000dH
	lea	esi, DWORD PTR _v3$[ebp]
	lea	edi, DWORD PTR _v0$[ebp]
	rep movsd

; 3067 : 	}

	jmp	$LN2@Draw2DSunG
$LN1@Draw2DSunG:

; 3068 : 
; 3069 : 	// kick out last 2 triangle
; 3070 : 	renderer->DrawTriangle( &v0, &v1, &vLast, CULL_ALLOW_ALL, gif );

	push	0
	movzx	ecx, BYTE PTR _gif$[ebp]
	push	ecx
	push	0
	lea	edx, DWORD PTR _vLast$[ebp]
	push	edx
	lea	eax, DWORD PTR _v1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v0$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?DrawTriangle@Render3D@@QAEXPAUThreeDVertex@@00H_N1@Z ; Render3D::DrawTriangle

; 3071 : 	renderer->DrawTriangle( &v0, &vLast, &vLasti, CULL_ALLOW_ALL, gif );

	push	0
	movzx	edx, BYTE PTR _gif$[ebp]
	push	edx
	push	0
	lea	eax, DWORD PTR _vLasti$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vLast$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v0$[ebp]
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?DrawTriangle@Render3D@@QAEXPAUThreeDVertex@@00H_N1@Z ; Render3D::DrawTriangle
$LN11@Draw2DSunG:

; 3072 : }

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?Draw2DSunGlowEffect@@YAXPAVRenderOTW@@PAUTpoint@@MM@Z ENDP ; Draw2DSunGlowEffect
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\draw2d.cpp
_TEXT	SEGMENT
_ColorIn$1 = -684					; size = 4
tv597 = -680						; size = 4
tv686 = -676						; size = 4
tv609 = -672						; size = 4
tv603 = -668						; size = 4
_dotp$ = -664						; size = 4
tv308 = -660						; size = 4
tv275 = -656						; size = 4
_Alpha$2 = -652						; size = 4
_ColorOut$3 = -648					; size = 4
_alphaPct$ = -644					; size = 4
_gif$ = -637						; size = 1
_j$ = -636						; size = 4
_radius$ = -632						; size = 4
_i$ = -628						; size = 4
_vLast$ = -624						; size = 28
_vLasti$ = -596						; size = 28
_center$ = -568						; size = 12
_position$ = -556					; size = 12
_atPosition$ = -544					; size = 12
_av$ = -532						; size = 12
_lv$ = -520						; size = 12
_v$ = -508						; size = 504
__$ArrayPad$ = -4					; size = 4
_renderer$ = 8						; size = 4
?Draw2DLensFlare@@YAXPAVRenderOTW@@@Z PROC		; Draw2DLensFlare

; 2690 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 684				; 000002acH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi

; 2691 : 	Tpoint				position, center, lv, av;
; 2692 : 	int					i,j;
; 2693 : 	float				dotp;
; 2694 : 	float				radius;
; 2695 : 	float				alphaPct;
; 2696 : 	Tpoint				atPosition;
; 2697 : 	bool gif = false;

	mov	BYTE PTR _gif$[ebp], 0

; 2698 : 
; 2699 : 
; 2700 : 	// If we're below the overcast layer, do not draw the lens flare.
; 2701 : 	if( realWeather->InsideOvercast() || realWeather->UnderOvercast()) return;

	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?InsideOvercast@RealWeather@@QAE_NXZ	; RealWeather::InsideOvercast
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN19@Draw2DLens
	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?UnderOvercast@RealWeather@@QAE_NXZ	; RealWeather::UnderOvercast
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN20@Draw2DLens
$LN19@Draw2DLens:
	jmp	$LN21@Draw2DLens
$LN20@Draw2DLens:

; 2702 : 
; 2703 : 	// is there a sun, if not return
; 2704 : 	if( !TheTimeOfDay.ThereIsASun() ) return;

	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?ThereIsASun@CTimeOfDay@@QAEHXZ		; CTimeOfDay::ThereIsASun
	test	eax, eax
	jne	SHORT $LN18@Draw2DLens
	jmp	$LN21@Draw2DLens
$LN18@Draw2DLens:

; 2705 : 
; 2706 : 	// get the Look At vector and lighting vector
; 2707 : 	renderer->GetAt( &av );

	lea	edx, DWORD PTR _av$[ebp]
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?GetAt@Render3D@@QAEXPAUTpoint@@@Z	; Render3D::GetAt

; 2708 : 	TheTimeOfDay.GetLightDirection( &lv );

	lea	eax, DWORD PTR _lv$[ebp]
	push	eax
	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetLightDirection@CTimeOfDay@@QAEXPAUTpoint@@@Z ; CTimeOfDay::GetLightDirection

; 2709 : 
; 2710 : 	// dot product between light and look at vector.  Both should be
; 2711 : 	// unit vectors and as the dotp approaches -1.0f, we should be
; 2712 : 	// approaching looking directly into the sun
; 2713 : 	dotp = av.x * -lv.x + av.y * -lv.y + av.z * -lv.z;

	movss	xmm0, DWORD PTR _lv$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _av$[ebp]
	movss	xmm1, DWORD PTR _lv$[ebp+4]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm1, DWORD PTR _av$[ebp+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _lv$[ebp+8]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm1, DWORD PTR _av$[ebp+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _dotp$[ebp], xmm0

; 2714 : 
; 2715 : 	if ( dotp > -0.70f )

	movss	xmm0, DWORD PTR _dotp$[ebp]
	comiss	xmm0, DWORD PTR __real@bf333333
	jbe	SHORT $LN17@Draw2DLens

; 2716 : 		return;

	jmp	$LN21@Draw2DLens
$LN17@Draw2DLens:

; 2717 : 
; 2718 : 	alphaPct = (-dotp-0.70f)/0.30f;

	movss	xmm0, DWORD PTR _dotp$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	subss	xmm0, DWORD PTR __real@3f333333
	divss	xmm0, DWORD PTR __real@3e99999a
	movss	DWORD PTR _alphaPct$[ebp], xmm0

; 2719 : 
; 2720 : 	// Get the center point of the body on a unit sphere in world space
; 2721 : 	TheTimeOfDay.CalculateSunMoonPos( &center, FALSE );

	push	0
	lea	ecx, DWORD PTR _center$[ebp]
	push	ecx
	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?CalculateSunMoonPos@CTimeOfDay@@QAEXPAUTpoint@@H@Z ; CTimeOfDay::CalculateSunMoonPos

; 2722 : 	radius = 40.0f + (alphaPct) * (20.0f - 40.0f);

	movss	xmm0, DWORD PTR _alphaPct$[ebp]
	mulss	xmm0, DWORD PTR __real@c1a00000
	addss	xmm0, DWORD PTR __real@42200000
	movss	DWORD PTR _radius$[ebp], xmm0

; 2723 : 
; 2724 : 	//JAM 04Oct03
; 2725 : 	if(0)

	xor	edx, edx
	je	SHORT $LN16@Draw2DLens

; 2726 : 		Draw2DSunGlowEffect(renderer,&center,radius,alphaPct*0.7f);

	movss	xmm0, DWORD PTR _alphaPct$[ebp]
	mulss	xmm0, DWORD PTR __real@3f333333
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _center$[ebp]
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	push	ecx
	call	?Draw2DSunGlowEffect@@YAXPAVRenderOTW@@PAUTpoint@@MM@Z ; Draw2DSunGlowEffect
	add	esp, 16					; 00000010H
$LN16@Draw2DLens:

; 2727 : 
; 2728 : 	if (g_nGfxFix & 0x04)

	mov	edx, DWORD PTR ?g_nGfxFix@@3HA		; g_nGfxFix
	and	edx, 4
	je	SHORT $LN15@Draw2DLens

; 2729 : 		gif = true;

	mov	BYTE PTR _gif$[ebp], 1
$LN15@Draw2DLens:

; 2730 : 
; 2731 : 	// now calculate where we want to start the first circle (world space)
; 2732 : 	// we'll head out from the viewpoint a ways along the lookat vector,
; 2733 : 	// and then from that point head along the light vector a ways
; 2734 : 	atPosition.x = renderer->X() + av.x * 90.0f - lv.x * 40.0f;

	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?X@Render3D@@QAEMXZ			; Render3D::X
	fstp	DWORD PTR tv597[ebp]
	movss	xmm0, DWORD PTR tv597[ebp]
	movss	xmm1, DWORD PTR _av$[ebp]
	mulss	xmm1, DWORD PTR __real@42b40000
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _lv$[ebp]
	mulss	xmm1, DWORD PTR __real@42200000
	subss	xmm0, xmm1
	movss	DWORD PTR _atPosition$[ebp], xmm0

; 2735 : 	atPosition.y = renderer->Y() + av.y * 90.0f - lv.y * 40.0f;

	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?Y@Render3D@@QAEMXZ			; Render3D::Y
	fstp	DWORD PTR tv603[ebp]
	movss	xmm0, DWORD PTR tv603[ebp]
	movss	xmm1, DWORD PTR _av$[ebp+4]
	mulss	xmm1, DWORD PTR __real@42b40000
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _lv$[ebp+4]
	mulss	xmm1, DWORD PTR __real@42200000
	subss	xmm0, xmm1
	movss	DWORD PTR _atPosition$[ebp+4], xmm0

; 2736 : 	atPosition.z = renderer->Z() + av.z * 90.0f - lv.z * 40.0f;

	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?Z@Render3D@@QAEMXZ			; Render3D::Z
	fstp	DWORD PTR tv609[ebp]
	movss	xmm0, DWORD PTR tv609[ebp]
	movss	xmm1, DWORD PTR _av$[ebp+8]
	mulss	xmm1, DWORD PTR __real@42b40000
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _lv$[ebp+8]
	mulss	xmm1, DWORD PTR __real@42200000
	subss	xmm0, xmm1
	movss	DWORD PTR _atPosition$[ebp+8], xmm0

; 2737 : 
; 2738 : 	
; 2739 : 	D3DDYNVERTEX	v[numLensFlareVerts+2], vLast, vLasti;
; 2740 : 
; 2741 : 	v[0].dwSpecular=v[1].dwSpecular=v[2].dwSpecular=v[3].dwSpecular=0x00000000;

	mov	eax, 28					; 0000001cH
	imul	eax, 3
	mov	DWORD PTR _v$[ebp+eax+16], 0
	mov	ecx, 28					; 0000001cH
	shl	ecx, 1
	mov	DWORD PTR _v$[ebp+ecx+16], 0
	mov	edx, 28					; 0000001cH
	shl	edx, 0
	mov	DWORD PTR _v$[ebp+edx+16], 0
	mov	eax, 28					; 0000001cH
	imul	eax, 0
	mov	DWORD PTR _v$[ebp+eax+16], 0

; 2742 : 	for ( j = 0; j < NUM_FLARE_CIRCLES; j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN14@Draw2DLens
$LN13@Draw2DLens:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN14@Draw2DLens:
	cmp	DWORD PTR _j$[ebp], 10			; 0000000aH
	jge	$LN12@Draw2DLens

; 2743 : 	{
; 2744 : 		// now move the center point of the next circle
; 2745 : 		position.x = atPosition.x + lv.x * lensDist[j] * ( 1.2f - alphaPct );

	mov	edx, DWORD PTR _j$[ebp]
	movss	xmm0, DWORD PTR _lv$[ebp]
	mulss	xmm0, DWORD PTR ?lensDist@@3PAMA[edx*4]
	movss	xmm1, DWORD PTR __real@3f99999a
	subss	xmm1, DWORD PTR _alphaPct$[ebp]
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR _atPosition$[ebp]
	movss	DWORD PTR _position$[ebp], xmm0

; 2746 : 		position.y = atPosition.y + lv.y * lensDist[j] * ( 1.2f - alphaPct );

	mov	eax, DWORD PTR _j$[ebp]
	movss	xmm0, DWORD PTR _lv$[ebp+4]
	mulss	xmm0, DWORD PTR ?lensDist@@3PAMA[eax*4]
	movss	xmm1, DWORD PTR __real@3f99999a
	subss	xmm1, DWORD PTR _alphaPct$[ebp]
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR _atPosition$[ebp+4]
	movss	DWORD PTR _position$[ebp+4], xmm0

; 2747 : 		position.z = atPosition.z + lv.z * lensDist[j] * ( 1.2f - alphaPct );

	mov	ecx, DWORD PTR _j$[ebp]
	movss	xmm0, DWORD PTR _lv$[ebp+8]
	mulss	xmm0, DWORD PTR ?lensDist@@3PAMA[ecx*4]
	movss	xmm1, DWORD PTR __real@3f99999a
	subss	xmm1, DWORD PTR _alphaPct$[ebp]
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR _atPosition$[ebp+8]
	movss	DWORD PTR _position$[ebp+8], xmm0

; 2748 : 
; 2749 : 		float	Alpha=lensAlphas[j]*alphaPct*lightLevel * 0.80f;

	mov	edx, DWORD PTR _j$[ebp]
	movss	xmm0, DWORD PTR ?lensAlphas@@3PAMA[edx*4]
	mulss	xmm0, DWORD PTR _alphaPct$[ebp]
	mulss	xmm0, DWORD PTR _lightLevel
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR _Alpha$2[ebp], xmm0

; 2750 : 		DWORD	ColorOut, ColorIn;
; 2751 : 		ColorOut=v[2].dwColour=v[1].dwColour=F_TO_ARGB(Alpha, lensRGB[j].r, lensRGB[j].g, lensRGB[j].b);

	movss	xmm0, DWORD PTR _Alpha$2[ebp]
	mulss	xmm0, DWORD PTR __real@437fe666
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?F_I32@@YAKM@Z				; F_I32
	add	esp, 4
	mov	esi, eax
	shl	esi, 24					; 00000018H
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?lensRGB@@3PAUTcolor@@A[eax]
	mulss	xmm0, DWORD PTR __real@437fe666
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?F_I32@@YAKM@Z				; F_I32
	add	esp, 4
	mov	edi, eax
	shl	edi, 16					; 00000010H
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?lensRGB@@3PAUTcolor@@A[ecx+4]
	mulss	xmm0, DWORD PTR __real@437fe666
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?F_I32@@YAKM@Z				; F_I32
	add	esp, 4
	shl	eax, 8
	or	edi, eax
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?lensRGB@@3PAUTcolor@@A[edx+8]
	mulss	xmm0, DWORD PTR __real@437fe666
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?F_I32@@YAKM@Z				; F_I32
	add	esp, 4
	or	edi, eax
	or	esi, edi
	mov	DWORD PTR tv275[ebp], esi
	mov	eax, 28					; 0000001cH
	shl	eax, 0
	mov	ecx, DWORD PTR tv275[ebp]
	mov	DWORD PTR _v$[ebp+eax+12], ecx
	mov	edx, 28					; 0000001cH
	shl	edx, 1
	mov	eax, DWORD PTR tv275[ebp]
	mov	DWORD PTR _v$[ebp+edx+12], eax
	mov	ecx, DWORD PTR tv275[ebp]
	mov	DWORD PTR _ColorOut$3[ebp], ecx

; 2752 : 		ColorIn=v[0].dwColour=v[3].dwColour=F_TO_ARGB(Alpha, lensCenterRGB[j].r, lensCenterRGB[j].g, lensCenterRGB[j].b);

	movss	xmm0, DWORD PTR _Alpha$2[ebp]
	mulss	xmm0, DWORD PTR __real@437fe666
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?F_I32@@YAKM@Z				; F_I32
	add	esp, 4
	mov	esi, eax
	shl	esi, 24					; 00000018H
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?lensCenterRGB@@3PAUTcolor@@A[edx]
	mulss	xmm0, DWORD PTR __real@437fe666
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?F_I32@@YAKM@Z				; F_I32
	add	esp, 4
	mov	edi, eax
	shl	edi, 16					; 00000010H
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?lensCenterRGB@@3PAUTcolor@@A[eax+4]
	mulss	xmm0, DWORD PTR __real@437fe666
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?F_I32@@YAKM@Z				; F_I32
	add	esp, 4
	shl	eax, 8
	or	edi, eax
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?lensCenterRGB@@3PAUTcolor@@A[ecx+8]
	mulss	xmm0, DWORD PTR __real@437fe666
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?F_I32@@YAKM@Z				; F_I32
	add	esp, 4
	or	edi, eax
	or	esi, edi
	mov	DWORD PTR tv308[ebp], esi
	mov	edx, 28					; 0000001cH
	imul	edx, 3
	mov	eax, DWORD PTR tv308[ebp]
	mov	DWORD PTR _v$[ebp+edx+12], eax
	mov	ecx, 28					; 0000001cH
	imul	ecx, 0
	mov	edx, DWORD PTR tv308[ebp]
	mov	DWORD PTR _v$[ebp+ecx+12], edx
	mov	eax, DWORD PTR tv308[ebp]
	mov	DWORD PTR _ColorIn$1[ebp], eax

; 2753 : 
; 2754 : 		if(Alpha<0.001f) continue;

	movss	xmm0, DWORD PTR __real@3a83126f
	comiss	xmm0, DWORD PTR _Alpha$2[ebp]
	jbe	SHORT $LN11@Draw2DLens
	jmp	$LN13@Draw2DLens
$LN11@Draw2DLens:

; 2755 : 
; 2756 : 		v[0].dwColour&=0x00ffffff;

	mov	ecx, 28					; 0000001cH
	imul	ecx, 0
	mov	edx, DWORD PTR _v$[ebp+ecx+12]
	and	edx, 16777215				; 00ffffffH
	mov	eax, 28					; 0000001cH
	imul	eax, 0
	mov	DWORD PTR _v$[ebp+eax+12], edx

; 2757 : 
; 2758 : 		radius = lensRadius[j];

	mov	ecx, DWORD PTR _j$[ebp]
	movss	xmm0, DWORD PTR ?lensRadius@@3PAMA[ecx*4]
	movss	DWORD PTR _radius$[ebp], xmm0

; 2759 : 		if ( renderer->GetFOV() < 60.0f * DTR )

	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?GetFOV@Render3D@@QAEMXZ		; Render3D::GetFOV
	fstp	DWORD PTR tv686[ebp]
	movss	xmm0, DWORD PTR __real@3f860a91
	comiss	xmm0, DWORD PTR tv686[ebp]
	jbe	SHORT $LN10@Draw2DLens

; 2760 : 			radius *= 0.3f;

	movss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR __real@3e99999a
	movss	DWORD PTR _radius$[ebp], xmm0
$LN10@Draw2DLens:

; 2761 : 
; 2762 : 		v[1].pos.x = lensFlareVerts[0].x * radius;

	mov	edx, 12					; 0000000cH
	imul	edx, 0
	movss	xmm0, DWORD PTR ?lensFlareVerts@@3PAUTpoint@@A[edx]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mov	eax, 28					; 0000001cH
	shl	eax, 0
	movss	DWORD PTR _v$[ebp+eax], xmm0

; 2763 : 		v[1].pos.y = lensFlareVerts[0].y * radius;

	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	movss	xmm0, DWORD PTR ?lensFlareVerts@@3PAUTpoint@@A[ecx+4]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mov	edx, 28					; 0000001cH
	shl	edx, 0
	movss	DWORD PTR _v$[ebp+edx+4], xmm0

; 2764 : 		v[1].pos.z = lensFlareVerts[0].z * radius;

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	movss	xmm0, DWORD PTR ?lensFlareVerts@@3PAUTpoint@@A[eax+8]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mov	ecx, 28					; 0000001cH
	shl	ecx, 0
	movss	DWORD PTR _v$[ebp+ecx+8], xmm0

; 2765 : 
; 2766 : 
; 2767 : 
; 2768 : 		if ( j == 2 || j == 8 || j == 9 )

	cmp	DWORD PTR _j$[ebp], 2
	je	SHORT $LN8@Draw2DLens
	cmp	DWORD PTR _j$[ebp], 8
	je	SHORT $LN8@Draw2DLens
	cmp	DWORD PTR _j$[ebp], 9
	jne	$LN9@Draw2DLens
$LN8@Draw2DLens:

; 2769 : 		{
; 2770 : 			v[0].pos.x = lensFlareVerts[0].x * radius * 0.8f;

	mov	edx, 12					; 0000000cH
	imul	edx, 0
	movss	xmm0, DWORD PTR ?lensFlareVerts@@3PAUTpoint@@A[edx]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	mov	eax, 28					; 0000001cH
	imul	eax, 0
	movss	DWORD PTR _v$[ebp+eax], xmm0

; 2771 : 			v[0].pos.y = lensFlareVerts[0].y * radius * 0.8f;

	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	movss	xmm0, DWORD PTR ?lensFlareVerts@@3PAUTpoint@@A[ecx+4]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	mov	edx, 28					; 0000001cH
	imul	edx, 0
	movss	DWORD PTR _v$[ebp+edx+4], xmm0

; 2772 : 			v[0].pos.z = lensFlareVerts[0].z * radius * 0.8f;

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	movss	xmm0, DWORD PTR ?lensFlareVerts@@3PAUTpoint@@A[eax+8]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	mov	ecx, 28					; 0000001cH
	imul	ecx, 0
	movss	DWORD PTR _v$[ebp+ecx+8], xmm0

; 2773 : 
; 2774 : 			vLast = v[1];

	mov	edx, 28					; 0000001cH
	shl	edx, 0
	lea	esi, DWORD PTR _v$[ebp+edx]
	mov	ecx, 7
	lea	edi, DWORD PTR _vLast$[ebp]
	rep movsd

; 2775 : 			vLasti = v[0];

	mov	eax, 28					; 0000001cH
	imul	eax, 0
	lea	esi, DWORD PTR _v$[ebp+eax]
	mov	ecx, 7
	lea	edi, DWORD PTR _vLasti$[ebp]
	rep movsd

; 2776 : 
; 2777 : 			for ( i = 1; i < numLensFlareVerts; i++ )

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN7@Draw2DLens
$LN6@Draw2DLens:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN7@Draw2DLens:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	$LN5@Draw2DLens

; 2778 : 			{
; 2779 : 				v[2].pos.x = lensFlareVerts[i].x * radius;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?lensFlareVerts@@3PAUTpoint@@A[edx]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mov	eax, 28					; 0000001cH
	shl	eax, 1
	movss	DWORD PTR _v$[ebp+eax], xmm0

; 2780 : 				v[2].pos.y = lensFlareVerts[i].y * radius;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?lensFlareVerts@@3PAUTpoint@@A[ecx+4]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mov	edx, 28					; 0000001cH
	shl	edx, 1
	movss	DWORD PTR _v$[ebp+edx+4], xmm0

; 2781 : 				v[2].pos.z = lensFlareVerts[i].z * radius;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?lensFlareVerts@@3PAUTpoint@@A[eax+8]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mov	ecx, 28					; 0000001cH
	shl	ecx, 1
	movss	DWORD PTR _v$[ebp+ecx+8], xmm0

; 2782 : 
; 2783 : 				v[3].pos.x = lensFlareVerts[i].x * radius * 0.8f;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?lensFlareVerts@@3PAUTpoint@@A[edx]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	mov	eax, 28					; 0000001cH
	imul	eax, 3
	movss	DWORD PTR _v$[ebp+eax], xmm0

; 2784 : 				v[3].pos.y = lensFlareVerts[i].y * radius * 0.8f;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?lensFlareVerts@@3PAUTpoint@@A[ecx+4]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	mov	edx, 28					; 0000001cH
	imul	edx, 3
	movss	DWORD PTR _v$[ebp+edx+4], xmm0

; 2785 : 				v[3].pos.z = lensFlareVerts[i].z * radius * 0.8f;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?lensFlareVerts@@3PAUTpoint@@A[eax+8]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	mov	ecx, 28					; 0000001cH
	imul	ecx, 3
	movss	DWORD PTR _v$[ebp+ecx+8], xmm0

; 2786 : 		
; 2787 : 				TheDXEngine.DX2D_AddQuad(LAYER_TOP, POLY_BB, (D3DXVECTOR3*)&position, v, radius, NULL);

	push	0
	push	ecx
	movss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _v$[ebp]
	push	edx
	lea	eax, DWORD PTR _position$[ebp]
	push	eax
	push	1
	push	5
	mov	ecx, OFFSET ?TheDXEngine@@3VCDXEngine@@A ; TheDXEngine
	call	?DX2D_AddQuad@CDXEngine@@QAEXKKPAUD3DXVECTOR3@@PAUD3DDYNVERTEX@@MK@Z ; CDXEngine::DX2D_AddQuad

; 2788 : 		
; 2789 : 				// move v2 to v1 for next time thru loop
; 2790 : 				v[1] = v[2];

	mov	ecx, 28					; 0000001cH
	shl	ecx, 1
	lea	esi, DWORD PTR _v$[ebp+ecx]
	mov	edx, 28					; 0000001cH
	shl	edx, 0
	lea	edi, DWORD PTR _v$[ebp+edx]
	mov	ecx, 7
	rep movsd

; 2791 : 				v[0] = v[3];

	mov	eax, 28					; 0000001cH
	imul	eax, 3
	lea	esi, DWORD PTR _v$[ebp+eax]
	mov	ecx, 28					; 0000001cH
	imul	ecx, 0
	lea	edi, DWORD PTR _v$[ebp+ecx]
	mov	ecx, 7
	rep movsd

; 2792 : 			}

	jmp	$LN6@Draw2DLens
$LN5@Draw2DLens:

; 2793 : 			v[2]=vLast; v[3]=vLasti;

	mov	edx, 28					; 0000001cH
	shl	edx, 1
	lea	edi, DWORD PTR _v$[ebp+edx]
	mov	ecx, 7
	lea	esi, DWORD PTR _vLast$[ebp]
	rep movsd
	mov	eax, 28					; 0000001cH
	imul	eax, 3
	lea	edi, DWORD PTR _v$[ebp+eax]
	mov	ecx, 7
	lea	esi, DWORD PTR _vLasti$[ebp]
	rep movsd

; 2794 : 			TheDXEngine.DX2D_AddQuad(LAYER_TOP, POLY_BB, (D3DXVECTOR3*)&position, v, radius, NULL);

	push	0
	push	ecx
	movss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _v$[ebp]
	push	ecx
	lea	edx, DWORD PTR _position$[ebp]
	push	edx
	push	1
	push	5
	mov	ecx, OFFSET ?TheDXEngine@@3VCDXEngine@@A ; TheDXEngine
	call	?DX2D_AddQuad@CDXEngine@@QAEXKKPAUD3DXVECTOR3@@PAUD3DDYNVERTEX@@MK@Z ; CDXEngine::DX2D_AddQuad

; 2795 : 
; 2796 : 		}
; 2797 : 		else

	jmp	$LN4@Draw2DLens
$LN9@Draw2DLens:

; 2798 : 		{
; 2799 : 			// Setup the Center
; 2800 : 			v[0].pos.x = 0;

	mov	eax, 28					; 0000001cH
	imul	eax, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v$[ebp+eax], xmm0

; 2801 : 			v[0].pos.y = 0;

	mov	ecx, 28					; 0000001cH
	imul	ecx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v$[ebp+ecx+4], xmm0

; 2802 : 			v[0].pos.z = 0;

	mov	edx, 28					; 0000001cH
	imul	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v$[ebp+edx+8], xmm0

; 2803 : 			v[0].dwSpecular=0x00000000;

	mov	eax, 28					; 0000001cH
	imul	eax, 0
	mov	DWORD PTR _v$[ebp+eax+16], 0

; 2804 : 			v[0].dwColour=ColorOut & 0x00ffffff;

	mov	ecx, DWORD PTR _ColorOut$3[ebp]
	and	ecx, 16777215				; 00ffffffH
	mov	edx, 28					; 0000001cH
	imul	edx, 0
	mov	DWORD PTR _v$[ebp+edx+12], ecx

; 2805 : 
; 2806 : 			// Now the circle vertices
; 2807 : 			for ( i = 0; i < numLensFlareVerts; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@Draw2DLens
$LN2@Draw2DLens:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@Draw2DLens:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	$LN1@Draw2DLens

; 2808 : 			{
; 2809 : 				v[i+1].pos.x = lensFlareVerts[i].x * radius;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?lensFlareVerts@@3PAUTpoint@@A[ecx]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	imul	edx, 28					; 0000001cH
	movss	DWORD PTR _v$[ebp+edx], xmm0

; 2810 : 				v[i+1].pos.y = lensFlareVerts[i].y * radius;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?lensFlareVerts@@3PAUTpoint@@A[eax+4]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	imul	ecx, 28					; 0000001cH
	movss	DWORD PTR _v$[ebp+ecx+4], xmm0

; 2811 : 				v[i+1].pos.z = lensFlareVerts[i].z * radius;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?lensFlareVerts@@3PAUTpoint@@A[edx+8]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	imul	eax, 28					; 0000001cH
	movss	DWORD PTR _v$[ebp+eax+8], xmm0

; 2812 : 				v[i+1].dwSpecular=0x00000000;

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	imul	ecx, 28					; 0000001cH
	mov	DWORD PTR _v$[ebp+ecx+16], 0

; 2813 : 				v[i+1].dwColour=ColorOut;

	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _ColorOut$3[ebp]
	mov	DWORD PTR _v$[ebp+edx+12], eax

; 2814 : 
; 2815 : 			}

	jmp	$LN2@Draw2DLens
$LN1@Draw2DLens:

; 2816 : 
; 2817 : 			// Close the Circle
; 2818 : 			v[i+1].pos.x = lensFlareVerts[0].x * radius;

	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	movss	xmm0, DWORD PTR ?lensFlareVerts@@3PAUTpoint@@A[ecx]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	imul	edx, 28					; 0000001cH
	movss	DWORD PTR _v$[ebp+edx], xmm0

; 2819 : 			v[i+1].pos.y = lensFlareVerts[0].y * radius;

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	movss	xmm0, DWORD PTR ?lensFlareVerts@@3PAUTpoint@@A[eax+4]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	imul	ecx, 28					; 0000001cH
	movss	DWORD PTR _v$[ebp+ecx+4], xmm0

; 2820 : 			v[i+1].pos.z = lensFlareVerts[0].z * radius;

	mov	edx, 12					; 0000000cH
	imul	edx, 0
	movss	xmm0, DWORD PTR ?lensFlareVerts@@3PAUTpoint@@A[edx+8]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	imul	eax, 28					; 0000001cH
	movss	DWORD PTR _v$[ebp+eax+8], xmm0

; 2821 : 			v[i+1].dwSpecular=0x00000000;

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	imul	ecx, 28					; 0000001cH
	mov	DWORD PTR _v$[ebp+ecx+16], 0

; 2822 : 			v[i+1].dwColour=ColorOut;

	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _ColorOut$3[ebp]
	mov	DWORD PTR _v$[ebp+edx+12], eax

; 2823 : 
; 2824 : 			// And draw the FAN
; 2825 : 			TheDXEngine.DX2D_AddPoly(LAYER_TOP, POLY_BB | POLY_FAN, (D3DXVECTOR3*)&position, v, radius, numLensFlareVerts + 2, NULL);

	push	0
	push	18					; 00000012H
	push	ecx
	movss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _v$[ebp]
	push	ecx
	lea	edx, DWORD PTR _position$[ebp]
	push	edx
	push	1048577					; 00100001H
	push	5
	mov	ecx, OFFSET ?TheDXEngine@@3VCDXEngine@@A ; TheDXEngine
	call	?DX2D_AddPoly@CDXEngine@@QAEXKKPAUD3DXVECTOR3@@PAUD3DDYNVERTEX@@MKK@Z ; CDXEngine::DX2D_AddPoly
$LN4@Draw2DLens:

; 2826 : 		}
; 2827 : 
; 2828 : 
; 2829 : 	} // end for number of circles

	jmp	$LN13@Draw2DLens
$LN12@Draw2DLens:
$LN21@Draw2DLens:

; 2830 : }

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?Draw2DLensFlare@@YAXPAVRenderOTW@@@Z ENDP		; Draw2DLensFlare
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GDrawable2D@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDrawable2D@@UAEPAXI@Z PROC				; Drawable2D::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Drawable2D@@UAE@XZ			; Drawable2D::~Drawable2D
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDrawable2D@@UAEPAXI@Z ENDP				; Drawable2D::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\draw2d.cpp
_TEXT	SEGMENT
_i$ = -4						; size = 4
_rc$ = 8						; size = 4
?ReleaseTexturesOnDevice@Drawable2D@@SAXPAVDXContext@@@Z PROC ; Drawable2D::ReleaseTexturesOnDevice

; 2158 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 2159 : 	int i;
; 2160 : 
; 2161 : 	// Stop receiving time updates
; 2162 : 	TheTimeManager.ReleaseTimeUpdateCB( TimeUpdateCallback, NULL );

	push	0
	push	OFFSET ?TimeUpdateCallback@Drawable2D@@KAXPAX@Z ; Drawable2D::TimeUpdateCallback
	mov	ecx, OFFSET ?TheTimeManager@@3VTimeManager@@A ; TheTimeManager
	call	?ReleaseTimeUpdateCB@TimeManager@@QAEXP6AXPAX@Z0@Z ; TimeManager::ReleaseTimeUpdateCB

; 2163 : 
; 2164 : 
; 2165 : 	// release sheets
; 2166 : 	for ( i = 0; i < NUM_TEX_SHEETS; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@ReleaseTex
$LN8@ReleaseTex:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@ReleaseTex:
	cmp	DWORD PTR _i$[ebp], 32			; 00000020H
	jge	SHORT $LN7@ReleaseTex

; 2167 : 	{
; 2168 : 		if ( i >= 0 && i < NUM_TEXTURES_USED || i >= 15 && i < 15 + NUM_TEXTURES_USED )

	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN4@ReleaseTex
	cmp	DWORD PTR _i$[ebp], 7
	jl	SHORT $LN5@ReleaseTex
$LN4@ReleaseTex:
	cmp	DWORD PTR _i$[ebp], 15			; 0000000fH
	jl	SHORT $LN6@ReleaseTex
	cmp	DWORD PTR _i$[ebp], 22			; 00000016H
	jge	SHORT $LN6@ReleaseTex
$LN5@ReleaseTex:

; 2169 : 		{
; 2170 : 			gGlobTextures[i].FreeAll();

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	add	ecx, OFFSET ?gGlobTextures@@3PAVTexture@@A ; gGlobTextures
	call	?FreeAll@Texture@@QAEXXZ		; Texture::FreeAll
$LN6@ReleaseTex:

; 2171 : 		}
; 2172 : 	}

	jmp	SHORT $LN8@ReleaseTex
$LN7@ReleaseTex:

; 2173 : 
; 2174 : 	// release apl textures
; 2175 : 	for ( i = 0; i < NUM_APL_TEXTURES; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@ReleaseTex
$LN2@ReleaseTex:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@ReleaseTex:
	cmp	DWORD PTR _i$[ebp], 11			; 0000000bH
	jge	SHORT $LN10@ReleaseTex

; 2176 : 	{
; 2177 : 		gAplTextures[i].FreeAll();

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	add	ecx, OFFSET ?gAplTextures@@3PAVTexture@@A ; gAplTextures
	call	?FreeAll@Texture@@QAEXXZ		; Texture::FreeAll

; 2178 : 		gAplTexturesGreen[i].FreeAll();

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	add	ecx, OFFSET ?gAplTexturesGreen@@3PAVTexture@@A ; gAplTexturesGreen
	call	?FreeAll@Texture@@QAEXXZ		; Texture::FreeAll

; 2179 : 	}

	jmp	SHORT $LN2@ReleaseTex
$LN10@ReleaseTex:

; 2180 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ReleaseTexturesOnDevice@Drawable2D@@SAXPAVDXContext@@@Z ENDP ; Drawable2D::ReleaseTexturesOnDevice
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\draw2d.cpp
_TEXT	SEGMENT
tv1025 = -172						; size = 4
tv1134 = -168						; size = 4
tv1140 = -164						; size = 4
tv1006 = -160						; size = 4
tv1113 = -156						; size = 4
tv1138 = -152						; size = 4
tv1142 = -148						; size = 4
tv1076 = -144						; size = 4
tv1136 = -140						; size = 4
tv1043 = -136						; size = 4
tv1106 = -132						; size = 4
tv1132 = -128						; size = 4
_g$ = -124						; size = 4
_b$ = -120						; size = 4
_r$ = -116						; size = 4
tv180 = -112						; size = 4
_radius$ = -108						; size = 4
_radstep$ = -104					; size = 4
_aplPalI$1 = -100					; size = 4
_aplPal0$ = -96						; size = 4
_globPal$2 = -92					; size = 4
_intalp$ = -88						; size = 4
_rad$ = -84						; size = 4
_alp$ = -80						; size = 4
_j$ = -76						; size = 4
_i$ = -72						; size = 4
_texfile$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_rc$ = 8						; size = 4
?SetupTexturesOnDevice@Drawable2D@@SAXPAVDXContext@@@Z PROC ; Drawable2D::SetupTexturesOnDevice

; 1814 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 172				; 000000acH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi

; 1815 : 	int i, j;
; 1816 : 	char texfile[64];
; 1817 : 	float alp;
; 1818 : 	int intalp;
; 1819 : 	int r,g,b;
; 1820 : 
; 1821 : 	sLOD = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _sLOD, xmm0

; 1822 : 	sGreenMode = 0;

	mov	DWORD PTR ?sGreenMode@@3HA, 0		; sGreenMode

; 1823 : 
; 1824 : 	for ( i = 0; i < NUM_TEX_SHEETS; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN81@SetupTextu
$LN80@SetupTextu:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN81@SetupTextu:
	cmp	DWORD PTR _i$[ebp], 32			; 00000020H
	jge	$LN79@SetupTextu

; 1825 : 	{
; 1826 : 		if ( i >= 0 && i < NUM_TEXTURES_USED || i >= 15 && i < 15 + NUM_TEXTURES_USED )

	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN76@SetupTextu
	cmp	DWORD PTR _i$[ebp], 7
	jl	SHORT $LN77@SetupTextu
$LN76@SetupTextu:
	cmp	DWORD PTR _i$[ebp], 15			; 0000000fH
	jl	$LN65@SetupTextu
	cmp	DWORD PTR _i$[ebp], 22			; 00000016H
	jge	$LN65@SetupTextu
$LN77@SetupTextu:

; 1827 : 		{
; 1828 : 			sprintf( texfile, "bom00%02d.gif", i+1 );

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	push	ecx
	push	OFFSET ??_C@_0O@NBIDGJOC@bom00?$CF02d?4gif?$AA@
	lea	edx, DWORD PTR _texfile$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 1829 : 
; 1830 : 			// it looks like the way we share a palette is to set the texture
; 1831 : 			// palette prior to LoadAndCreate
; 1832 : 			if ( i > 0 && i < NUM_TEXTURES_USED )

	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN75@SetupTextu
	cmp	DWORD PTR _i$[ebp], 7
	jge	SHORT $LN75@SetupTextu

; 1833 : 			{
; 1834 : 				gGlobTextures[i].SetPalette(gGlobTextures[0].GetPalette());

	mov	ecx, 24					; 00000018H
	imul	ecx, 0
	add	ecx, OFFSET ?gGlobTextures@@3PAVTexture@@A ; gGlobTextures
	call	?GetPalette@Texture@@QAEPAVPalette@@XZ	; Texture::GetPalette
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	add	ecx, OFFSET ?gGlobTextures@@3PAVTexture@@A ; gGlobTextures
	call	?SetPalette@Texture@@QAEXPAVPalette@@@Z	; Texture::SetPalette
	jmp	SHORT $LN73@SetupTextu
$LN75@SetupTextu:

; 1835 : 			}
; 1836 : 			else if ( i > 15 && i < 15 + NUM_TEXTURES_USED )

	cmp	DWORD PTR _i$[ebp], 15			; 0000000fH
	jle	SHORT $LN73@SetupTextu
	cmp	DWORD PTR _i$[ebp], 22			; 00000016H
	jge	SHORT $LN73@SetupTextu

; 1837 : 			{
; 1838 : 				gGlobTextures[i].SetPalette(gGlobTextures[15].GetPalette());

	mov	ecx, 24					; 00000018H
	imul	ecx, 15					; 0000000fH
	add	ecx, OFFSET ?gGlobTextures@@3PAVTexture@@A ; gGlobTextures
	call	?GetPalette@Texture@@QAEPAVPalette@@XZ	; Texture::GetPalette
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	add	ecx, OFFSET ?gGlobTextures@@3PAVTexture@@A ; gGlobTextures
	call	?SetPalette@Texture@@QAEXPAVPalette@@@Z	; Texture::SetPalette
$LN73@SetupTextu:

; 1839 : 			}
; 1840 : 
; 1841 : 			if ( i == 0 )

	cmp	DWORD PTR _i$[ebp], 0
	jne	$LN72@SetupTextu

; 1842 : 			{
; 1843 : 				gGlobTextures[0].LoadAndCreate( texfile, MPR_TI_CHROMAKEY | MPR_TI_PALETTE | MPR_TI_ALPHA );

	push	224					; 000000e0H
	lea	eax, DWORD PTR _texfile$[ebp]
	push	eax
	mov	ecx, 24					; 00000018H
	imul	ecx, 0
	add	ecx, OFFSET ?gGlobTextures@@3PAVTexture@@A ; gGlobTextures
	call	?LoadAndCreate@Texture@@QAEHPADK@Z	; Texture::LoadAndCreate

; 1844 : 				Palette *globPal = gGlobTextures[0].GetPalette();

	mov	ecx, 24					; 00000018H
	imul	ecx, 0
	add	ecx, OFFSET ?gGlobTextures@@3PAVTexture@@A ; gGlobTextures
	call	?GetPalette@Texture@@QAEPAVPalette@@XZ	; Texture::GetPalette
	mov	DWORD PTR _globPal$2[ebp], eax

; 1845 : 				for ( j = 0; j < 256; j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN71@SetupTextu
$LN70@SetupTextu:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN71@SetupTextu:
	cmp	DWORD PTR _j$[ebp], 256			; 00000100H
	jge	$LN69@SetupTextu

; 1846 : 				{
; 1847 : 					intalp = (globPal->paletteData[j] >> 24);

	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _globPal$2[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	shr	ecx, 24					; 00000018H
	mov	DWORD PTR _intalp$[ebp], ecx

; 1848 : 					globPal->paletteData[j] &= 0x00ffffff;

	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _globPal$2[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _globPal$2[ebp]
	mov	DWORD PTR [eax+edx*4], ecx

; 1849 : 					if ( j == 0 )

	cmp	DWORD PTR _j$[ebp], 0
	jne	SHORT $LN68@SetupTextu

; 1850 : 						continue;

	jmp	SHORT $LN70@SetupTextu
$LN68@SetupTextu:

; 1851 : 					alp = 255.0f * 0.5f +  255.0f * 0.5f * NRANDPOS;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@42ff0000
	addss	xmm0, DWORD PTR __real@42ff0000
	movss	DWORD PTR _alp$[ebp], xmm0

; 1852 : 					intalp = FloatToInt32( alp );

	push	ecx
	movss	xmm0, DWORD PTR _alp$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _intalp$[ebp], eax

; 1853 : 
; 1854 : 					r = (globPal->paletteData[j] & 0x000000ff);

	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _globPal$2[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR _r$[ebp], eax

; 1855 : 					g = (globPal->paletteData[j] & 0x0000ff00) >> 8;

	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _globPal$2[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	and	eax, 65280				; 0000ff00H
	shr	eax, 8
	mov	DWORD PTR _g$[ebp], eax

; 1856 : 					b = (globPal->paletteData[j] & 0x00ff0000) >> 16;

	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _globPal$2[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	and	eax, 16711680				; 00ff0000H
	shr	eax, 16					; 00000010H
	mov	DWORD PTR _b$[ebp], eax

; 1857 : 
; 1858 : 					intalp = max( ( r + b + g )/3, 120 );

	mov	eax, DWORD PTR _r$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _g$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	cmp	eax, 120				; 00000078H
	jle	SHORT $LN84@SetupTextu
	mov	eax, DWORD PTR _r$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _g$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR tv180[ebp], eax
	jmp	SHORT $LN85@SetupTextu
$LN84@SetupTextu:
	mov	DWORD PTR tv180[ebp], 120		; 00000078H
$LN85@SetupTextu:
	mov	edx, DWORD PTR tv180[ebp]
	mov	DWORD PTR _intalp$[ebp], edx

; 1859 : 					globPal->paletteData[j] |= ( intalp << 24 );

	mov	eax, DWORD PTR _intalp$[ebp]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _globPal$2[ebp]
	or	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _globPal$2[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 1860 : 				}

	jmp	$LN70@SetupTextu
$LN69@SetupTextu:

; 1861 : 				globPal->UpdateMPR( globPal->paletteData );

	mov	eax, DWORD PTR _globPal$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _globPal$2[ebp]
	call	?UpdateMPR@Palette@@QAEXPAK@Z		; Palette::UpdateMPR
	jmp	SHORT $LN65@SetupTextu
$LN72@SetupTextu:

; 1862 : 			}
; 1863 : 			else if ( i < NUM_TEXTURES_USED )

	cmp	DWORD PTR _i$[ebp], 7
	jge	SHORT $LN66@SetupTextu

; 1864 : 			{
; 1865 : 				gGlobTextures[i].LoadAndCreate( texfile, MPR_TI_CHROMAKEY | MPR_TI_PALETTE | MPR_TI_ALPHA );

	push	224					; 000000e0H
	lea	ecx, DWORD PTR _texfile$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	add	ecx, OFFSET ?gGlobTextures@@3PAVTexture@@A ; gGlobTextures
	call	?LoadAndCreate@Texture@@QAEHPADK@Z	; Texture::LoadAndCreate

; 1866 : 			}
; 1867 : 			else

	jmp	SHORT $LN65@SetupTextu
$LN66@SetupTextu:

; 1868 : 			{
; 1869 : 				gGlobTextures[i].LoadAndCreate( texfile, MPR_TI_CHROMAKEY | MPR_TI_PALETTE );

	push	160					; 000000a0H
	lea	edx, DWORD PTR _texfile$[ebp]
	push	edx
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	add	ecx, OFFSET ?gGlobTextures@@3PAVTexture@@A ; gGlobTextures
	call	?LoadAndCreate@Texture@@QAEHPADK@Z	; Texture::LoadAndCreate
$LN65@SetupTextu:

; 1870 : 			}
; 1871 : 		}
; 1872 : 	}

	jmp	$LN80@SetupTextu
$LN79@SetupTextu:

; 1873 : 
; 1874 : 	// setup the scatter plotting
; 1875 : 	for ( i = 0; i < NUM_FIRE_SCATTER_FRAMES; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN64@SetupTextu
$LN63@SetupTextu:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN64@SetupTextu:
	cmp	DWORD PTR _i$[ebp], 8
	jge	$LN62@SetupTextu

; 1876 : 	{
; 1877 : 		for ( j = 0; j < NUM_FIRE_SCATTER_POINTS; j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN61@SetupTextu
$LN60@SetupTextu:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN61@SetupTextu:
	cmp	DWORD PTR _j$[ebp], 12			; 0000000cH
	jge	$LN59@SetupTextu

; 1878 : 		{
; 1879 : 			if ( i == 0 )

	cmp	DWORD PTR _i$[ebp], 0
	jne	$LN58@SetupTextu

; 1880 : 			{
; 1881 : 				gFireScatterPoints[i][j].x = (float)((float)rand()/(float)RAND_MAX);

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 144				; 00000090H
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	movss	DWORD PTR ?gFireScatterPoints@@3PAY0M@UTpoint@@A[edx+eax], xmm0

; 1882 : 				if ( rand() & 1 )

	call	_rand
	and	eax, 1
	je	SHORT $LN57@SetupTextu

; 1883 : 					gFireScatterPoints[i][j].x = -gFireScatterPoints[i][j].x;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 144				; 00000090H
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gFireScatterPoints@@3PAY0M@UTpoint@@A[ecx+edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 144				; 00000090H
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	DWORD PTR ?gFireScatterPoints@@3PAY0M@UTpoint@@A[eax+ecx], xmm0
$LN57@SetupTextu:

; 1884 : 				gFireScatterPoints[i][j].y = (float)((float)rand()/(float)RAND_MAX);

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 144				; 00000090H
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	movss	DWORD PTR ?gFireScatterPoints@@3PAY0M@UTpoint@@A[edx+eax+4], xmm0

; 1885 : 				if ( rand() & 1 )

	call	_rand
	and	eax, 1
	je	SHORT $LN56@SetupTextu

; 1886 : 					gFireScatterPoints[i][j].y = -gFireScatterPoints[i][j].y;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 144				; 00000090H
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gFireScatterPoints@@3PAY0M@UTpoint@@A[ecx+edx+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 144				; 00000090H
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	DWORD PTR ?gFireScatterPoints@@3PAY0M@UTpoint@@A[eax+ecx+4], xmm0
$LN56@SetupTextu:

; 1887 : 				gFireScatterPoints[i][j].z = 0.3f + (float)((float)rand()/(float)RAND_MAX) * 0.7f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@3f333333
	addss	xmm0, DWORD PTR __real@3e99999a
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 144				; 00000090H
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	movss	DWORD PTR ?gFireScatterPoints@@3PAY0M@UTpoint@@A[edx+eax+8], xmm0

; 1888 : 										
; 1889 : 				continue;

	jmp	$LN60@SetupTextu
$LN58@SetupTextu:

; 1890 : 			}
; 1891 : 			gFireScatterPoints[i][j].x = gFireScatterPoints[i-1][j].x;

	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	imul	ecx, 144				; 00000090H
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 144				; 00000090H
	mov	esi, DWORD PTR _j$[ebp]
	imul	esi, 12					; 0000000cH
	mov	ecx, DWORD PTR ?gFireScatterPoints@@3PAY0M@UTpoint@@A[ecx+edx]
	mov	DWORD PTR ?gFireScatterPoints@@3PAY0M@UTpoint@@A[eax+esi], ecx

; 1892 : 			gFireScatterPoints[i][j].y = gFireScatterPoints[i-1][j].y - 0.2f;

	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	imul	edx, 144				; 00000090H
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gFireScatterPoints@@3PAY0M@UTpoint@@A[edx+eax+4]
	subss	xmm0, DWORD PTR __real@3e4ccccd
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 144				; 00000090H
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 12					; 0000000cH
	movss	DWORD PTR ?gFireScatterPoints@@3PAY0M@UTpoint@@A[ecx+edx+4], xmm0

; 1893 : 			gFireScatterPoints[i][j].z = gFireScatterPoints[i-1][j].z + 0.1f;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	imul	eax, 144				; 00000090H
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gFireScatterPoints@@3PAY0M@UTpoint@@A[eax+ecx+8]
	addss	xmm0, DWORD PTR __real@3dcccccd
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 144				; 00000090H
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	movss	DWORD PTR ?gFireScatterPoints@@3PAY0M@UTpoint@@A[edx+eax+8], xmm0

; 1894 : 			if ( gFireScatterPoints[i][j].y < -1.0f )

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 144				; 00000090H
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 12					; 0000000cH
	movss	xmm0, DWORD PTR __real@bf800000
	comiss	xmm0, DWORD PTR ?gFireScatterPoints@@3PAY0M@UTpoint@@A[ecx+edx+4]
	jbe	SHORT $LN55@SetupTextu

; 1895 : 			{
; 1896 : 				gFireScatterPoints[i][j].y += 2.0f;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 144				; 00000090H
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gFireScatterPoints@@3PAY0M@UTpoint@@A[eax+ecx+4]
	addss	xmm0, DWORD PTR __real@40000000
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 144				; 00000090H
	movss	DWORD PTR ?gFireScatterPoints@@3PAY0M@UTpoint@@A[eax+edx+4], xmm0

; 1897 : 				gFireScatterPoints[i][j].z = 0.3f + (float)((float)rand()/(float)RAND_MAX) * 0.7f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@3f333333
	addss	xmm0, DWORD PTR __real@3e99999a
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 144				; 00000090H
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 12					; 0000000cH
	movss	DWORD PTR ?gFireScatterPoints@@3PAY0M@UTpoint@@A[ecx+edx+8], xmm0
$LN55@SetupTextu:

; 1898 : 			}
; 1899 : 		}

	jmp	$LN60@SetupTextu
$LN59@SetupTextu:

; 1900 : 	}

	jmp	$LN63@SetupTextu
$LN62@SetupTextu:

; 1901 : 
; 1902 : 	/*
; 1903 : 	// setup the scatter plotting
; 1904 : 	for ( i = 0; i < NUM_SMOKE_SCATTER_FRAMES; i++ )
; 1905 : 	{
; 1906 : 		for ( j = 0; j < NUM_SMOKE_SCATTER_POINTS; j++ )
; 1907 : 		{
; 1908 : 			if ( i == 0 )
; 1909 : 			{
; 1910 : 				gSmokeScatterPoints[i][j].x = (float)((float)rand()/(float)RAND_MAX);
; 1911 : 				if ( rand() & 1 )
; 1912 : 					gSmokeScatterPoints[i][j].x = -gSmokeScatterPoints[i][j].x;
; 1913 : 				gSmokeScatterPoints[i][j].y = (float)((float)rand()/(float)RAND_MAX);
; 1914 : 				if ( rand() & 1 )
; 1915 : 					gSmokeScatterPoints[i][j].y = -gSmokeScatterPoints[i][j].y;
; 1916 : 				gSmokeScatterPoints[i][j].z = (float)((float)rand()/(float)RAND_MAX) * 0.3f + 0.3f;
; 1917 : 				continue;
; 1918 : 			}
; 1919 : 
; 1920 : 			gSmokeScatterPoints[i][j].x = gSmokeScatterPoints[i-1][j].x;
; 1921 : 			gSmokeScatterPoints[i][j].y = gSmokeScatterPoints[i-1][j].y;
; 1922 : 			gSmokeScatterPoints[i][j].z = gSmokeScatterPoints[i-1][j].z + 0.10f;
; 1923 : 		}
; 1924 : 	}
; 1925 : 	for ( i = 0; i < NUM_FIRE_SCATTER_FRAMES; i++ )
; 1926 : 	{
; 1927 : 		for ( j = 0; j < NUM_FIRE_SCATTER_POINTS; j++ )
; 1928 : 		{
; 1929 : 			if ( i == 0 )
; 1930 : 			{
; 1931 : 				if ( j & 1 )
; 1932 : 				{
; 1933 : 					gFireScatterPoints[i][j].x = (float)((float)rand()/(float)RAND_MAX);
; 1934 : 					if ( rand() & 1 )
; 1935 : 						gFireScatterPoints[i][j].x = -gFireScatterPoints[i][j].x;
; 1936 : 					gFireScatterPoints[i][j].y = (float)((float)rand()/(float)RAND_MAX);
; 1937 : 					if ( rand() & 1 )
; 1938 : 						gFireScatterPoints[i][j].y = -gFireScatterPoints[i][j].y;
; 1939 : 					gFireScatterPoints[i][j].z = 0.9f + (float)((float)rand()/(float)RAND_MAX) * 0.3f;
; 1940 : 				}
; 1941 : 				else
; 1942 : 				{
; 1943 : 					gFireScatterPoints[i][j].x = (float)((float)rand()/(float)RAND_MAX);
; 1944 : 					if ( rand() & 1 )
; 1945 : 						gFireScatterPoints[i][j].x = -gFireScatterPoints[i][j].x;
; 1946 : 					gFireScatterPoints[i][j].y = (float)((float)rand()/(float)RAND_MAX);
; 1947 : 					if ( rand() & 1 )
; 1948 : 						gFireScatterPoints[i][j].y = -gFireScatterPoints[i][j].y;
; 1949 : 					gFireScatterPoints[i][j].z = 0.3f + (float)((float)rand()/(float)RAND_MAX) * 0.3f;
; 1950 : 				}
; 1951 : 										
; 1952 : 				continue;
; 1953 : 			}
; 1954 : 
; 1955 : 			if ( j & 1 )
; 1956 : 			{
; 1957 : 				gFireScatterPoints[i][j].x = gFireScatterPoints[i-1][j].x;
; 1958 : 				gFireScatterPoints[i][j].y = gFireScatterPoints[i-1][j].y + 0.2f;
; 1959 : 				gFireScatterPoints[i][j].z = gFireScatterPoints[i-1][j].z * 0.8f;
; 1960 : 				if ( gFireScatterPoints[i][j].y > 1.0f )
; 1961 : 				{
; 1962 : 					gFireScatterPoints[i][j].y -= 2.0f;
; 1963 : 					gFireScatterPoints[i][j].z = 0.9f + (float)((float)rand()/(float)RAND_MAX) * 0.3f;
; 1964 : 				}
; 1965 : 			}
; 1966 : 			else
; 1967 : 			{
; 1968 : 				gFireScatterPoints[i][j].x = gFireScatterPoints[i-1][j].x;
; 1969 : 				gFireScatterPoints[i][j].y = gFireScatterPoints[i-1][j].y - 0.2f;
; 1970 : 				gFireScatterPoints[i][j].z = gFireScatterPoints[i-1][j].z * 1.2f;
; 1971 : 				if ( gFireScatterPoints[i][j].y < -1.0f )
; 1972 : 				{
; 1973 : 					gFireScatterPoints[i][j].y += 2.0f;
; 1974 : 					gFireScatterPoints[i][j].z = 0.3f + (float)((float)rand()/(float)RAND_MAX) * 0.3f;
; 1975 : 				}
; 1976 : 			}
; 1977 : 		}
; 1978 : 	}
; 1979 : 	*/
; 1980 : 
; 1981 : 	// setup the scatter plotting
; 1982 : 	for ( i = 0; i < NUM_SMOKE_SCATTER_FRAMES; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN54@SetupTextu
$LN53@SetupTextu:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN54@SetupTextu:
	cmp	DWORD PTR _i$[ebp], 1
	jge	$LN52@SetupTextu

; 1983 : 	{
; 1984 : 		for ( j = 0; j < NUM_SMOKE_SCATTER_POINTS; j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN51@SetupTextu
$LN50@SetupTextu:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN51@SetupTextu:
	cmp	DWORD PTR _j$[ebp], 1
	jge	$LN49@SetupTextu

; 1985 : 		{
; 1986 : 			if ( i == 0 )

	cmp	DWORD PTR _i$[ebp], 0
	jne	$LN48@SetupTextu

; 1987 : 			{
; 1988 : 				if ( j == 0 )

	cmp	DWORD PTR _j$[ebp], 0
	jne	SHORT $LN47@SetupTextu

; 1989 : 				{
; 1990 : 					gSmokeScatterPoints[i][j].x = 0.0f;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gSmokeScatterPoints@@3PAY00UTpoint@@A[edx+eax], xmm0

; 1991 : 					gSmokeScatterPoints[i][j].y = 0.0f;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 12					; 0000000cH
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gSmokeScatterPoints@@3PAY00UTpoint@@A[ecx+edx+4], xmm0

; 1992 : 					gSmokeScatterPoints[i][j].z = 1.0f;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?gSmokeScatterPoints@@3PAY00UTpoint@@A[eax+ecx+8], xmm0

; 1993 : 				}
; 1994 : 				else

	jmp	$LN46@SetupTextu
$LN47@SetupTextu:

; 1995 : 				{
; 1996 : 					gSmokeScatterPoints[i][j].x = (float)((float)rand()/(float)RAND_MAX) * 0.3f + 0.7f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@3e99999a
	addss	xmm0, DWORD PTR __real@3f333333
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	movss	DWORD PTR ?gSmokeScatterPoints@@3PAY00UTpoint@@A[edx+eax], xmm0

; 1997 : 					if ( rand() & 1 )

	call	_rand
	and	eax, 1
	je	SHORT $LN45@SetupTextu

; 1998 : 						gSmokeScatterPoints[i][j].x = -gSmokeScatterPoints[i][j].x;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gSmokeScatterPoints@@3PAY00UTpoint@@A[ecx+edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	DWORD PTR ?gSmokeScatterPoints@@3PAY00UTpoint@@A[eax+ecx], xmm0
$LN45@SetupTextu:

; 1999 : 					gSmokeScatterPoints[i][j].y = (float)((float)rand()/(float)RAND_MAX) * 0.3f + 0.7f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@3e99999a
	addss	xmm0, DWORD PTR __real@3f333333
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	movss	DWORD PTR ?gSmokeScatterPoints@@3PAY00UTpoint@@A[edx+eax+4], xmm0

; 2000 : 					if ( rand() & 1 )

	call	_rand
	and	eax, 1
	je	SHORT $LN44@SetupTextu

; 2001 : 						gSmokeScatterPoints[i][j].y = -gSmokeScatterPoints[i][j].y;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gSmokeScatterPoints@@3PAY00UTpoint@@A[ecx+edx+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	DWORD PTR ?gSmokeScatterPoints@@3PAY00UTpoint@@A[eax+ecx+4], xmm0
$LN44@SetupTextu:

; 2002 : 					gSmokeScatterPoints[i][j].z = (float)((float)rand()/(float)RAND_MAX) * 0.3f + 0.3f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@3e99999a
	addss	xmm0, DWORD PTR __real@3e99999a
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	movss	DWORD PTR ?gSmokeScatterPoints@@3PAY00UTpoint@@A[edx+eax+8], xmm0
$LN46@SetupTextu:

; 2003 : 				}
; 2004 : 				continue;

	jmp	$LN50@SetupTextu
$LN48@SetupTextu:

; 2005 : 			}
; 2006 : 
; 2007 : 			if ( j == 0 )

	cmp	DWORD PTR _j$[ebp], 0
	jne	$LN43@SetupTextu

; 2008 : 			{
; 2009 : 				gSmokeScatterPoints[i][j].x = gSmokeScatterPoints[i-1][j].x;

	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	esi, DWORD PTR _j$[ebp]
	imul	esi, 12					; 0000000cH
	mov	ecx, DWORD PTR ?gSmokeScatterPoints@@3PAY00UTpoint@@A[ecx+edx]
	mov	DWORD PTR ?gSmokeScatterPoints@@3PAY00UTpoint@@A[eax+esi], ecx

; 2010 : 				gSmokeScatterPoints[i][j].y = gSmokeScatterPoints[i-1][j].y;

	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	esi, DWORD PTR _j$[ebp]
	imul	esi, 12					; 0000000cH
	mov	edx, DWORD PTR ?gSmokeScatterPoints@@3PAY00UTpoint@@A[edx+eax+4]
	mov	DWORD PTR ?gSmokeScatterPoints@@3PAY00UTpoint@@A[ecx+esi+4], edx

; 2011 : 				gSmokeScatterPoints[i][j].z = gSmokeScatterPoints[i-1][j].z;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	esi, DWORD PTR _j$[ebp]
	imul	esi, 12					; 0000000cH
	mov	eax, DWORD PTR ?gSmokeScatterPoints@@3PAY00UTpoint@@A[eax+ecx+8]
	mov	DWORD PTR ?gSmokeScatterPoints@@3PAY00UTpoint@@A[edx+esi+8], eax

; 2012 : 			}
; 2013 : 			else

	jmp	$LN42@SetupTextu
$LN43@SetupTextu:

; 2014 : 			{
; 2015 : 				gSmokeScatterPoints[i][j].x = gSmokeScatterPoints[i-1][j].x;

	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	esi, DWORD PTR _j$[ebp]
	imul	esi, 12					; 0000000cH
	mov	ecx, DWORD PTR ?gSmokeScatterPoints@@3PAY00UTpoint@@A[ecx+edx]
	mov	DWORD PTR ?gSmokeScatterPoints@@3PAY00UTpoint@@A[eax+esi], ecx

; 2016 : 				gSmokeScatterPoints[i][j].y = gSmokeScatterPoints[i-1][j].y;

	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	esi, DWORD PTR _j$[ebp]
	imul	esi, 12					; 0000000cH
	mov	edx, DWORD PTR ?gSmokeScatterPoints@@3PAY00UTpoint@@A[edx+eax+4]
	mov	DWORD PTR ?gSmokeScatterPoints@@3PAY00UTpoint@@A[ecx+esi+4], edx

; 2017 : 				gSmokeScatterPoints[i][j].z = gSmokeScatterPoints[i-1][j].z + 0.10f;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gSmokeScatterPoints@@3PAY00UTpoint@@A[eax+ecx+8]
	addss	xmm0, DWORD PTR __real@3dcccccd
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	movss	DWORD PTR ?gSmokeScatterPoints@@3PAY00UTpoint@@A[edx+eax+8], xmm0
$LN42@SetupTextu:

; 2018 : 			}
; 2019 : 			if ( gSmokeScatterPoints[i][j].z > 1.5f )

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gSmokeScatterPoints@@3PAY00UTpoint@@A[ecx+edx+8]
	comiss	xmm0, DWORD PTR __real@3fc00000
	jbe	SHORT $LN41@SetupTextu

; 2020 : 				gSmokeScatterPoints[i][j].z = (float)((float)rand()/(float)RAND_MAX) * 0.3f + 0.3f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@3e99999a
	addss	xmm0, DWORD PTR __real@3e99999a
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	DWORD PTR ?gSmokeScatterPoints@@3PAY00UTpoint@@A[eax+ecx+8], xmm0
$LN41@SetupTextu:

; 2021 : 		}

	jmp	$LN50@SetupTextu
$LN49@SetupTextu:

; 2022 : 	}

	jmp	$LN53@SetupTextu
$LN52@SetupTextu:

; 2023 : 
; 2024 : 	// setup the scatter plotting
; 2025 : 	for ( i = 0; i < NUM_EXPLODE_SCATTER_FRAMES; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN40@SetupTextu
$LN39@SetupTextu:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN40@SetupTextu:
	cmp	DWORD PTR _i$[ebp], 1
	jge	$LN38@SetupTextu

; 2026 : 	{
; 2027 : 		for ( j = 0; j < NUM_EXPLODE_SCATTER_POINTS; j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN37@SetupTextu
$LN36@SetupTextu:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN37@SetupTextu:
	cmp	DWORD PTR _j$[ebp], 10			; 0000000aH
	jge	$LN35@SetupTextu

; 2028 : 		{
; 2029 : 			if ( j == 0 )

	cmp	DWORD PTR _j$[ebp], 0
	jne	SHORT $LN34@SetupTextu

; 2030 : 			{
; 2031 : 				gExplodeScatterPoints[i][j].x = 0.0f;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 120				; 00000078H
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 12					; 0000000cH
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gExplodeScatterPoints@@3PAY09UTpoint@@A[ecx+edx], xmm0

; 2032 : 				gExplodeScatterPoints[i][j].y = 0.0f;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 120				; 00000078H
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?gExplodeScatterPoints@@3PAY09UTpoint@@A[eax+ecx+4], xmm0

; 2033 : 				gExplodeScatterPoints[i][j].z = 0.80f;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 120				; 00000078H
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR ?gExplodeScatterPoints@@3PAY09UTpoint@@A[edx+eax+8], xmm0

; 2034 : 				continue;

	jmp	SHORT $LN36@SetupTextu
$LN34@SetupTextu:

; 2035 : 			}
; 2036 : 			gExplodeScatterPoints[i][j].x = (float)((float)rand()/(float)RAND_MAX);

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 120				; 00000078H
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 12					; 0000000cH
	movss	DWORD PTR ?gExplodeScatterPoints@@3PAY09UTpoint@@A[ecx+edx], xmm0

; 2037 : 			if ( rand() & 1 )

	call	_rand
	and	eax, 1
	je	SHORT $LN33@SetupTextu

; 2038 : 				gExplodeScatterPoints[i][j].x = -gExplodeScatterPoints[i][j].x;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 120				; 00000078H
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gExplodeScatterPoints@@3PAY09UTpoint@@A[eax+ecx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 120				; 00000078H
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	movss	DWORD PTR ?gExplodeScatterPoints@@3PAY09UTpoint@@A[edx+eax], xmm0
$LN33@SetupTextu:

; 2039 : 			gExplodeScatterPoints[i][j].y = (float)((float)rand()/(float)RAND_MAX);

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 120				; 00000078H
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 12					; 0000000cH
	movss	DWORD PTR ?gExplodeScatterPoints@@3PAY09UTpoint@@A[ecx+edx+4], xmm0

; 2040 : 			if ( rand() & 1 )

	call	_rand
	and	eax, 1
	je	SHORT $LN32@SetupTextu

; 2041 : 				gExplodeScatterPoints[i][j].y = -gExplodeScatterPoints[i][j].y;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 120				; 00000078H
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gExplodeScatterPoints@@3PAY09UTpoint@@A[eax+ecx+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 120				; 00000078H
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	movss	DWORD PTR ?gExplodeScatterPoints@@3PAY09UTpoint@@A[edx+eax+4], xmm0
$LN32@SetupTextu:

; 2042 : 			gExplodeScatterPoints[i][j].z = (float)((float)rand()/(float)RAND_MAX) * 0.3f + 0.3f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@3e99999a
	addss	xmm0, DWORD PTR __real@3e99999a
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 120				; 00000078H
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 12					; 0000000cH
	movss	DWORD PTR ?gExplodeScatterPoints@@3PAY09UTpoint@@A[ecx+edx+8], xmm0

; 2043 : 
; 2044 : 		}

	jmp	$LN36@SetupTextu
$LN35@SetupTextu:

; 2045 : 	}

	jmp	$LN39@SetupTextu
$LN38@SetupTextu:

; 2046 : 
; 2047 : 
; 2048 : 
; 2049 : 	// set up the "glowing ball" verts
; 2050 : 	float rad, radstep, radius;
; 2051 : 	rad = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _rad$[ebp], xmm0

; 2052 : 	radstep = 2.0f * PI / (float)numGlowCircleVerts;

	cvtsi2ss xmm0, DWORD PTR ?numGlowCircleVerts@@3HA ; numGlowCircleVerts
	movss	xmm1, DWORD PTR __real@40c90fdb
	divss	xmm1, xmm0
	movss	DWORD PTR _radstep$[ebp], xmm1

; 2053 : 	for ( i = 0; i < numGlowCircleVerts; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN31@SetupTextu
$LN30@SetupTextu:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN31@SetupTextu:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR ?numGlowCircleVerts@@3HA	; numGlowCircleVerts
	jge	SHORT $LN29@SetupTextu

; 2054 : 	{
; 2055 : 		glowCircleVerts[i].x = 0.0f;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?glowCircleVerts@@3PAUTpoint@@A[edx], xmm0

; 2056 : 		glowCircleVerts[i].y = (float)sin(rad);

	push	ecx
	movss	xmm0, DWORD PTR _rad$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	fstp	DWORD PTR ?glowCircleVerts@@3PAUTpoint@@A[eax+4]

; 2057 : 		glowCircleVerts[i].z = -(float)cos(rad);

	push	ecx
	movss	xmm0, DWORD PTR _rad$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR tv1006[ebp]
	movss	xmm0, DWORD PTR tv1006[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	DWORD PTR ?glowCircleVerts@@3PAUTpoint@@A[ecx+8], xmm0

; 2058 : 		rad += radstep;

	movss	xmm0, DWORD PTR _rad$[ebp]
	addss	xmm0, DWORD PTR _radstep$[ebp]
	movss	DWORD PTR _rad$[ebp], xmm0

; 2059 : 	}

	jmp	$LN30@SetupTextu
$LN29@SetupTextu:

; 2060 : 
; 2061 : 	// set up the "glowing square" verts
; 2062 : 	rad = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _rad$[ebp], xmm0

; 2063 : 	radstep = 2.0f * PI / (float)numGlowSquareVerts;

	cvtsi2ss xmm0, DWORD PTR ?numGlowSquareVerts@@3HA ; numGlowSquareVerts
	movss	xmm1, DWORD PTR __real@40c90fdb
	divss	xmm1, xmm0
	movss	DWORD PTR _radstep$[ebp], xmm1

; 2064 : 	for ( i = 0; i < numGlowSquareVerts; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN28@SetupTextu
$LN27@SetupTextu:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN28@SetupTextu:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?numGlowSquareVerts@@3HA	; numGlowSquareVerts
	jge	SHORT $LN26@SetupTextu

; 2065 : 	{
; 2066 : 		glowSquareVerts[i].x = 0.0f;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?glowSquareVerts@@3PAUTpoint@@A[ecx], xmm0

; 2067 : 		glowSquareVerts[i].y = (float)sin(rad);

	push	ecx
	movss	xmm0, DWORD PTR _rad$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	fstp	DWORD PTR ?glowSquareVerts@@3PAUTpoint@@A[edx+4]

; 2068 : 		glowSquareVerts[i].z = -(float)cos(rad);

	push	ecx
	movss	xmm0, DWORD PTR _rad$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR tv1025[ebp]
	movss	xmm0, DWORD PTR tv1025[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	movss	DWORD PTR ?glowSquareVerts@@3PAUTpoint@@A[eax+8], xmm0

; 2069 : 		rad += radstep;

	movss	xmm0, DWORD PTR _rad$[ebp]
	addss	xmm0, DWORD PTR _radstep$[ebp]
	movss	DWORD PTR _rad$[ebp], xmm0

; 2070 : 	}

	jmp	$LN27@SetupTextu
$LN26@SetupTextu:

; 2071 : 
; 2072 : 	rad = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _rad$[ebp], xmm0

; 2073 : 	radstep = 2.0f * PI / (float)numLensFlareVerts;

	movss	xmm0, DWORD PTR __real@40c90fdb
	divss	xmm0, DWORD PTR __real@41800000
	movss	DWORD PTR _radstep$[ebp], xmm0

; 2074 : 	for ( i = 0; i < numLensFlareVerts; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN25@SetupTextu
$LN24@SetupTextu:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN25@SetupTextu:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	SHORT $LN23@SetupTextu

; 2075 : 	{
; 2076 : 		lensFlareVerts[i].x = 0.0f;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?lensFlareVerts@@3PAUTpoint@@A[edx], xmm0

; 2077 : 		lensFlareVerts[i].y = (float)sin(rad);

	push	ecx
	movss	xmm0, DWORD PTR _rad$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	fstp	DWORD PTR ?lensFlareVerts@@3PAUTpoint@@A[eax+4]

; 2078 : 		lensFlareVerts[i].z = -(float)cos(rad);

	push	ecx
	movss	xmm0, DWORD PTR _rad$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR tv1043[ebp]
	movss	xmm0, DWORD PTR tv1043[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	DWORD PTR ?lensFlareVerts@@3PAUTpoint@@A[ecx+8], xmm0

; 2079 : 		rad += radstep;

	movss	xmm0, DWORD PTR _rad$[ebp]
	addss	xmm0, DWORD PTR _radstep$[ebp]
	movss	DWORD PTR _rad$[ebp], xmm0

; 2080 : 	}

	jmp	$LN24@SetupTextu
$LN23@SetupTextu:

; 2081 : 
; 2082 : 	// create star by scaling every other circle vert
; 2083 : 	for ( i = 0; i < numGlowCircleVerts; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN22@SetupTextu
$LN21@SetupTextu:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN22@SetupTextu:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?numGlowCircleVerts@@3HA	; numGlowCircleVerts
	jge	$LN20@SetupTextu

; 2084 : 	{
; 2085 : 		if ( i & 1 )

	mov	ecx, DWORD PTR _i$[ebp]
	and	ecx, 1
	je	SHORT $LN19@SetupTextu

; 2086 : 			radius = 0.3f;

	movss	xmm0, DWORD PTR __real@3e99999a
	movss	DWORD PTR _radius$[ebp], xmm0

; 2087 : 		else

	jmp	SHORT $LN18@SetupTextu
$LN19@SetupTextu:

; 2088 : 			radius = 3.0f;

	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR _radius$[ebp], xmm0
$LN18@SetupTextu:

; 2089 : 		glowStarVerts[i].x = 0.0f;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?glowStarVerts@@3PAUTpoint@@A[edx], xmm0

; 2090 : 		glowStarVerts[i].y = glowCircleVerts[i].y * radius;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?glowCircleVerts@@3PAUTpoint@@A[eax+4]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	DWORD PTR ?glowStarVerts@@3PAUTpoint@@A[ecx+4], xmm0

; 2091 : 		glowStarVerts[i].z = glowCircleVerts[i].z * radius;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?glowCircleVerts@@3PAUTpoint@@A[edx+8]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	movss	DWORD PTR ?glowStarVerts@@3PAUTpoint@@A[eax+8], xmm0

; 2092 : 	}

	jmp	$LN21@SetupTextu
$LN20@SetupTextu:

; 2093 : 
; 2094 : 
; 2095 : 	// Load our normal textures
; 2096 : 	gAplTextures[0].LoadAndCreate( "sfx01.APL", MPR_TI_CHROMAKEY | MPR_TI_PALETTE );

	push	160					; 000000a0H
	push	OFFSET ??_C@_09FLKLCKMH@sfx01?4APL?$AA@
	mov	ecx, 24					; 00000018H
	imul	ecx, 0
	add	ecx, OFFSET ?gAplTextures@@3PAVTexture@@A ; gAplTextures
	call	?LoadAndCreate@Texture@@QAEHPADK@Z	; Texture::LoadAndCreate

; 2097 : 	Palette *aplPal0 = gAplTextures[0].GetPalette();

	mov	ecx, 24					; 00000018H
	imul	ecx, 0
	add	ecx, OFFSET ?gAplTextures@@3PAVTexture@@A ; gAplTextures
	call	?GetPalette@Texture@@QAEPAVPalette@@XZ	; Texture::GetPalette
	mov	DWORD PTR _aplPal0$[ebp], eax

; 2098 : 	for ( j = 0; j < 256; j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN17@SetupTextu
$LN16@SetupTextu:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN17@SetupTextu:
	cmp	DWORD PTR _j$[ebp], 256			; 00000100H
	jge	$LN15@SetupTextu

; 2099 : 	{
; 2100 : 		intalp = (aplPal0->paletteData[j] >> 24);

	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _aplPal0$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	shr	ecx, 24					; 00000018H
	mov	DWORD PTR _intalp$[ebp], ecx

; 2101 : 		aplPal0->paletteData[j] &= 0x00ffffff;

	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _aplPal0$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _aplPal0$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx

; 2102 : 		if ( j == 0 ){

	cmp	DWORD PTR _j$[ebp], 0
	jne	SHORT $LN14@SetupTextu

; 2103 : 			continue;

	jmp	SHORT $LN16@SetupTextu
$LN14@SetupTextu:

; 2104 : 		}
; 2105 : 		alp = (float)intalp;

	cvtsi2ss xmm0, DWORD PTR _intalp$[ebp]
	movss	DWORD PTR _alp$[ebp], xmm0

; 2106 : 		alp = alp * 0.5f + alp * 0.5f * PRANDFloat();

	movss	xmm0, DWORD PTR _alp$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR _alp$[ebp]
	mulss	xmm1, DWORD PTR __real@3f000000
	movss	DWORD PTR tv1132[ebp], xmm0
	movss	DWORD PTR tv1134[ebp], xmm1
	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv1076[ebp]
	movss	xmm0, DWORD PTR tv1134[ebp]
	mulss	xmm0, DWORD PTR tv1076[ebp]
	movss	xmm1, DWORD PTR tv1132[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _alp$[ebp], xmm1

; 2107 : 		intalp = FloatToInt32( alp );

	push	ecx
	movss	xmm0, DWORD PTR _alp$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _intalp$[ebp], eax

; 2108 : 		aplPal0->paletteData[j] |= ( intalp << 24 );

	mov	ecx, DWORD PTR _intalp$[ebp]
	shl	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _aplPal0$[ebp]
	or	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _aplPal0$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx

; 2109 : 	}

	jmp	$LN16@SetupTextu
$LN15@SetupTextu:

; 2110 : 	aplPal0->UpdateMPR( aplPal0->paletteData );

	mov	ecx, DWORD PTR _aplPal0$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _aplPal0$[ebp]
	call	?UpdateMPR@Palette@@QAEXPAK@Z		; Palette::UpdateMPR

; 2111 : 
; 2112 : 	for (i=1; i<NUM_APL_TEXTURES; i++)

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN13@SetupTextu
$LN12@SetupTextu:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN13@SetupTextu:
	cmp	DWORD PTR _i$[ebp], 11			; 0000000bH
	jge	$LN11@SetupTextu

; 2113 : 	{
; 2114 : 		sprintf( texfile, "sfx%02d.APL", i+1 );

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_0M@GBKBOKB@sfx?$CF02d?4APL?$AA@
	lea	ecx, DWORD PTR _texfile$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 2115 : 
; 2116 : 		// temp comment
; 2117 : 		// gAplTextures[i].palette = gAplTextures[0].palette;
; 2118 : 		gAplTextures[i].LoadAndCreate( texfile, MPR_TI_CHROMAKEY | MPR_TI_PALETTE );

	push	160					; 000000a0H
	lea	edx, DWORD PTR _texfile$[ebp]
	push	edx
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	add	ecx, OFFSET ?gAplTextures@@3PAVTexture@@A ; gAplTextures
	call	?LoadAndCreate@Texture@@QAEHPADK@Z	; Texture::LoadAndCreate

; 2119 : 		Palette *aplPalI = gAplTextures[i].GetPalette();

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	add	ecx, OFFSET ?gAplTextures@@3PAVTexture@@A ; gAplTextures
	call	?GetPalette@Texture@@QAEPAVPalette@@XZ	; Texture::GetPalette
	mov	DWORD PTR _aplPalI$1[ebp], eax

; 2120 : 		for ( j = 0; j < 256; j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN10@SetupTextu
$LN9@SetupTextu:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN10@SetupTextu:
	cmp	DWORD PTR _j$[ebp], 256			; 00000100H
	jge	$LN8@SetupTextu

; 2121 : 		{
; 2122 : 			intalp = (aplPalI->paletteData[j] >> 24);

	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _aplPalI$1[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	shr	eax, 24					; 00000018H
	mov	DWORD PTR _intalp$[ebp], eax

; 2123 : 			aplPalI->paletteData[j] &= 0x00ffffff;

	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _aplPalI$1[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	and	eax, 16777215				; 00ffffffH
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _aplPalI$1[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 2124 : 			if ( j == 0 )

	cmp	DWORD PTR _j$[ebp], 0
	jne	SHORT $LN7@SetupTextu

; 2125 : 				continue;

	jmp	SHORT $LN9@SetupTextu
$LN7@SetupTextu:

; 2126 : 			alp = (float)intalp;

	cvtsi2ss xmm0, DWORD PTR _intalp$[ebp]
	movss	DWORD PTR _alp$[ebp], xmm0

; 2127 : 			if ( i < 6 )

	cmp	DWORD PTR _i$[ebp], 6
	jge	SHORT $LN6@SetupTextu

; 2128 : 			{
; 2129 : 				alp = alp * 0.6f + alp * 0.4f * PRANDFloat();

	movss	xmm0, DWORD PTR _alp$[ebp]
	mulss	xmm0, DWORD PTR __real@3f19999a
	movss	xmm1, DWORD PTR _alp$[ebp]
	mulss	xmm1, DWORD PTR __real@3ecccccd
	movss	DWORD PTR tv1136[ebp], xmm0
	movss	DWORD PTR tv1138[ebp], xmm1
	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv1106[ebp]
	movss	xmm0, DWORD PTR tv1138[ebp]
	mulss	xmm0, DWORD PTR tv1106[ebp]
	movss	xmm1, DWORD PTR tv1136[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _alp$[ebp], xmm1
	jmp	SHORT $LN4@SetupTextu
$LN6@SetupTextu:

; 2130 : 			}
; 2131 : 			else if ( alp > 50.0f )

	movss	xmm0, DWORD PTR _alp$[ebp]
	comiss	xmm0, DWORD PTR __real@42480000
	jbe	SHORT $LN4@SetupTextu

; 2132 : 				alp = alp * 0.8f + alp * 0.2f * PRANDFloat();

	movss	xmm0, DWORD PTR _alp$[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	movss	xmm1, DWORD PTR _alp$[ebp]
	mulss	xmm1, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR tv1140[ebp], xmm0
	movss	DWORD PTR tv1142[ebp], xmm1
	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv1113[ebp]
	movss	xmm0, DWORD PTR tv1142[ebp]
	mulss	xmm0, DWORD PTR tv1113[ebp]
	movss	xmm1, DWORD PTR tv1140[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _alp$[ebp], xmm1
$LN4@SetupTextu:

; 2133 : 			intalp = FloatToInt32( alp );

	push	ecx
	movss	xmm0, DWORD PTR _alp$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _intalp$[ebp], eax

; 2134 : 			aplPalI->paletteData[j] |= ( intalp << 24 );

	mov	eax, DWORD PTR _intalp$[ebp]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _aplPalI$1[ebp]
	or	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _aplPalI$1[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 2135 : 		}

	jmp	$LN9@SetupTextu
$LN8@SetupTextu:

; 2136 : 		aplPalI->UpdateMPR( aplPalI->paletteData );

	mov	eax, DWORD PTR _aplPalI$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _aplPalI$1[ebp]
	call	?UpdateMPR@Palette@@QAEXPAK@Z		; Palette::UpdateMPR

; 2137 : 
; 2138 : 	}

	jmp	$LN12@SetupTextu
$LN11@SetupTextu:

; 2139 : 
; 2140 : 	// Load our green textures
; 2141 : 	gAplTexturesGreen[0].LoadAndCreate( "sfxg01.GIF", MPR_TI_CHROMAKEY | MPR_TI_PALETTE );

	push	160					; 000000a0H
	push	OFFSET ??_C@_0L@HIALBIMO@sfxg01?4GIF?$AA@
	mov	ecx, 24					; 00000018H
	imul	ecx, 0
	add	ecx, OFFSET ?gAplTexturesGreen@@3PAVTexture@@A ; gAplTexturesGreen
	call	?LoadAndCreate@Texture@@QAEHPADK@Z	; Texture::LoadAndCreate

; 2142 : 
; 2143 : 	for (i=1; i<NUM_APL_TEXTURES; i++)

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN3@SetupTextu
$LN2@SetupTextu:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@SetupTextu:
	cmp	DWORD PTR _i$[ebp], 11			; 0000000bH
	jge	SHORT $LN1@SetupTextu

; 2144 : 	{
; 2145 : 		sprintf( texfile, "sfxg%02d.GIF", i+1 );

	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	push	edx
	push	OFFSET ??_C@_0N@HGIAOOL@sfxg?$CF02d?4GIF?$AA@
	lea	eax, DWORD PTR _texfile$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 2146 : 		gAplTexturesGreen[i].SetPalette(gAplTexturesGreen[0].GetPalette());

	mov	ecx, 24					; 00000018H
	imul	ecx, 0
	add	ecx, OFFSET ?gAplTexturesGreen@@3PAVTexture@@A ; gAplTexturesGreen
	call	?GetPalette@Texture@@QAEPAVPalette@@XZ	; Texture::GetPalette
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	add	ecx, OFFSET ?gAplTexturesGreen@@3PAVTexture@@A ; gAplTexturesGreen
	call	?SetPalette@Texture@@QAEXPAVPalette@@@Z	; Texture::SetPalette

; 2147 : 		gAplTexturesGreen[i].LoadAndCreate( texfile, MPR_TI_CHROMAKEY | MPR_TI_PALETTE );

	push	160					; 000000a0H
	lea	ecx, DWORD PTR _texfile$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	add	ecx, OFFSET ?gAplTexturesGreen@@3PAVTexture@@A ; gAplTexturesGreen
	call	?LoadAndCreate@Texture@@QAEHPADK@Z	; Texture::LoadAndCreate

; 2148 : 	}

	jmp	SHORT $LN2@SetupTextu
$LN1@SetupTextu:

; 2149 : 
; 2150 : 	// Initialize the lighting conditions and register for future time of day updates
; 2151 : 	TimeUpdateCallback( NULL );

	push	0
	call	?TimeUpdateCallback@Drawable2D@@KAXPAX@Z ; Drawable2D::TimeUpdateCallback
	add	esp, 4

; 2152 : 	TheTimeManager.RegisterTimeUpdateCB( TimeUpdateCallback, NULL );

	push	0
	push	OFFSET ?TimeUpdateCallback@Drawable2D@@KAXPAX@Z ; Drawable2D::TimeUpdateCallback
	mov	ecx, OFFSET ?TheTimeManager@@3VTimeManager@@A ; TheTimeManager
	call	?RegisterTimeUpdateCB@TimeManager@@QAEXP6AXPAX@Z0@Z ; TimeManager::RegisterTimeUpdateCB

; 2153 : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?SetupTexturesOnDevice@Drawable2D@@SAXPAVDXContext@@@Z ENDP ; Drawable2D::SetupTexturesOnDevice
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\draw2d.cpp
_TEXT	SEGMENT
_light$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 4
?TimeUpdateCallback@Drawable2D@@KAXPAX@Z PROC		; Drawable2D::TimeUpdateCallback

; 2185 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2186 : 	Tcolor light;
; 2187 : 
; 2188 : 	// Get the light level from the time of day manager
; 2189 : 	lightLevel = TheTimeOfDay.GetLightLevel();

	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetLightLevel@CTimeOfDay@@QAEMXZ	; CTimeOfDay::GetLightLevel
	fstp	DWORD PTR _lightLevel

; 2190 : 
; 2191 : 	TheTimeOfDay.GetTextureLightingColor( &gLight );

	push	OFFSET _gLight
	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetTextureLightingColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ; CTimeOfDay::GetTextureLightingColor

; 2192 : 
; 2193 : 	// Get the light level from the time of day manager
; 2194 : 	TheTimeOfDay.GetTextureLightingColor( &light );

	lea	eax, DWORD PTR _light$[ebp]
	push	eax
	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetTextureLightingColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ; CTimeOfDay::GetTextureLightingColor

; 2195 : 
; 2196 : 	// right now we're assuming all APL have the same palette
; 2197 : 	gAplTextures[6].GetPalette()->LightTexturePalette( &light );

	lea	ecx, DWORD PTR _light$[ebp]
	push	ecx
	mov	ecx, 24					; 00000018H
	imul	ecx, 6
	add	ecx, OFFSET ?gAplTextures@@3PAVTexture@@A ; gAplTextures
	call	?GetPalette@Texture@@QAEPAVPalette@@XZ	; Texture::GetPalette
	mov	ecx, eax
	call	?LightTexturePalette@Palette@@QAEXPAUTcolor@@@Z ; Palette::LightTexturePalette

; 2198 : 	gAplTextures[7].GetPalette()->LightTexturePalette( &light );

	lea	edx, DWORD PTR _light$[ebp]
	push	edx
	mov	ecx, 24					; 00000018H
	imul	ecx, 7
	add	ecx, OFFSET ?gAplTextures@@3PAVTexture@@A ; gAplTextures
	call	?GetPalette@Texture@@QAEPAVPalette@@XZ	; Texture::GetPalette
	mov	ecx, eax
	call	?LightTexturePalette@Palette@@QAEXPAUTcolor@@@Z ; Palette::LightTexturePalette

; 2199 : 	gAplTextures[8].GetPalette()->LightTexturePalette( &light );

	lea	eax, DWORD PTR _light$[ebp]
	push	eax
	mov	ecx, 24					; 00000018H
	shl	ecx, 3
	add	ecx, OFFSET ?gAplTextures@@3PAVTexture@@A ; gAplTextures
	call	?GetPalette@Texture@@QAEPAVPalette@@XZ	; Texture::GetPalette
	mov	ecx, eax
	call	?LightTexturePalette@Palette@@QAEXPAUTcolor@@@Z ; Palette::LightTexturePalette

; 2200 : 	gAplTextures[9].GetPalette()->LightTexturePalette( &light );

	lea	ecx, DWORD PTR _light$[ebp]
	push	ecx
	mov	ecx, 24					; 00000018H
	imul	ecx, 9
	add	ecx, OFFSET ?gAplTextures@@3PAVTexture@@A ; gAplTextures
	call	?GetPalette@Texture@@QAEPAVPalette@@XZ	; Texture::GetPalette
	mov	ecx, eax
	call	?LightTexturePalette@Palette@@QAEXPAUTcolor@@@Z ; Palette::LightTexturePalette

; 2201 : 	gAplTextures[10].GetPalette()->LightTexturePalette( &light );

	lea	edx, DWORD PTR _light$[ebp]
	push	edx
	mov	ecx, 24					; 00000018H
	imul	ecx, 10					; 0000000aH
	add	ecx, OFFSET ?gAplTextures@@3PAVTexture@@A ; gAplTextures
	call	?GetPalette@Texture@@QAEPAVPalette@@XZ	; Texture::GetPalette
	mov	ecx, eax
	call	?LightTexturePalette@Palette@@QAEXPAUTcolor@@@Z ; Palette::LightTexturePalette

; 2202 : 	gAplTexturesGreen[0].GetPalette()->LightTexturePalette( &light );

	lea	eax, DWORD PTR _light$[ebp]
	push	eax
	mov	ecx, 24					; 00000018H
	imul	ecx, 0
	add	ecx, OFFSET ?gAplTexturesGreen@@3PAVTexture@@A ; gAplTexturesGreen
	call	?GetPalette@Texture@@QAEPAVPalette@@XZ	; Texture::GetPalette
	mov	ecx, eax
	call	?LightTexturePalette@Palette@@QAEXPAUTcolor@@@Z ; Palette::LightTexturePalette

; 2203 : 
; 2204 : 	// now light the palette used for all our textures
; 2205 : 	// TODO: the range is incorrect at the moment -- until the artists
; 2206 : 	// redo the palette
; 2207 : 	gGlobTextures[0].GetPalette()->LightTexturePaletteRange( &light, 151, 255 );

	push	255					; 000000ffH
	push	151					; 00000097H
	lea	ecx, DWORD PTR _light$[ebp]
	push	ecx
	mov	ecx, 24					; 00000018H
	imul	ecx, 0
	add	ecx, OFFSET ?gGlobTextures@@3PAVTexture@@A ; gGlobTextures
	call	?GetPalette@Texture@@QAEPAVPalette@@XZ	; Texture::GetPalette
	mov	ecx, eax
	call	?LightTexturePaletteRange@Palette@@QAEXPAUTcolor@@HH@Z ; Palette::LightTexturePaletteRange

; 2208 : 
; 2209 : 
; 2210 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?TimeUpdateCallback@Drawable2D@@KAXPAX@Z ENDP		; Drawable2D::TimeUpdateCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\draw2d.cpp
_TEXT	SEGMENT
_yRes$ = -460						; size = 4
_xRes$ = -456						; size = 4
tv1684 = -452						; size = 4
tv1682 = -448						; size = 4
_vertArray$ = -444					; size = 24
tv321 = -420						; size = 4
tv373 = -416						; size = 4
_top$ = -412						; size = 4
tv387 = -408						; size = 4
_left$ = -404						; size = 4
_bottom$ = -400						; size = 4
tv397 = -396						; size = 4
_right$ = -392						; size = 4
_doFivePoints$ = -388					; size = 4
_numToPlot$ = -384					; size = 4
_elementRbase$ = -380					; size = 4
_texseq$ = -376						; size = 4
_elementR$ = -372					; size = 4
_screenR$ = -368					; size = 4
_scaleZ$ = -364						; size = 4
_i$ = -360						; size = 4
_this$ = -356						; size = 4
_vm$ = -352						; size = 52
_ws$ = -300						; size = 12
_leftv$ = -288						; size = 12
_spos$ = -276						; size = 52
_v2$ = -224						; size = 52
_v0$ = -172						; size = 52
_v3$ = -120						; size = 52
_v1$ = -68						; size = 52
_dl$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_renderer$ = 8						; size = 4
?APLScatterPlot@Drawable2D@@IAEXPAVRenderOTW@@@Z PROC	; Drawable2D::APLScatterPlot
; _this$ = ecx

; 3217 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 460				; 000001ccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 3218 : 	Tpoint				ws;
; 3219 : 	ThreeDVertex		v0, v1, v2, v3, spos;
; 3220 : 	ThreeDVertex		vm;
; 3221 : 	TwoDVertex			*vertArray[6];
; 3222 : 	Tpoint				leftv;
; 3223 : 	Tpoint				dl;
; 3224 : 	float				screenR, elementR, elementRbase;
; 3225 : 	float 				xRes;
; 3226 : 	float 				yRes;
; 3227 : 	float				top, bottom, left, right;
; 3228 : 	int					i;
; 3229 : 	float				scaleZ;
; 3230 : 	int					numToPlot;
; 3231 : 	BOOL				doFivePoints;
; 3232 : 	int					texseq;
; 3233 : 
; 3234 : 	// make our radius larger -- this way building fires will sort
; 3235 : 	// better on buildings
; 3236 : 	radius = realRadius * 3.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+252]
	mulss	xmm0, DWORD PTR __real@40400000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+16], xmm0

; 3237 : 
; 3238 : 	// figure out our max pixel locations
; 3239 : 	top = renderer->GetTopPixel();

	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?GetTopPixel@VirtualDisplay@@QAEMXZ	; VirtualDisplay::GetTopPixel
	fstp	DWORD PTR _top$[ebp]

; 3240 : 	bottom = renderer->GetBottomPixel();

	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?GetBottomPixel@VirtualDisplay@@QAEMXZ	; VirtualDisplay::GetBottomPixel
	fstp	DWORD PTR _bottom$[ebp]

; 3241 : 	left = renderer->GetLeftPixel();

	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?GetLeftPixel@VirtualDisplay@@QAEMXZ	; VirtualDisplay::GetLeftPixel
	fstp	DWORD PTR _left$[ebp]

; 3242 : 	right = renderer->GetRightPixel();

	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?GetRightPixel@VirtualDisplay@@QAEMXZ	; VirtualDisplay::GetRightPixel
	fstp	DWORD PTR _right$[ebp]

; 3243 : 	xRes = right - left;

	movss	xmm0, DWORD PTR _right$[ebp]
	subss	xmm0, DWORD PTR _left$[ebp]
	movss	DWORD PTR _xRes$[ebp], xmm0

; 3244 : 	yRes = bottom - top;

	movss	xmm0, DWORD PTR _bottom$[ebp]
	subss	xmm0, DWORD PTR _top$[ebp]
	movss	DWORD PTR _yRes$[ebp], xmm0

; 3245 : 
; 3246 : 	// get the left vector for the camera
; 3247 : 	renderer->GetLeft( &leftv );

	lea	edx, DWORD PTR _leftv$[ebp]
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?GetLeft@Render3D@@QAEXPAUTpoint@@@Z	; Render3D::GetLeft

; 3248 : 
; 3249 : 	// find screen radius we'll be scattering into
; 3250 : 	dl.x = -leftv.x * scale2d * realRadius;

	movss	xmm0, DWORD PTR _leftv$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+248]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+252]
	movss	DWORD PTR _dl$[ebp], xmm0

; 3251 : 	dl.y = -leftv.y * scale2d * realRadius;

	movss	xmm0, DWORD PTR _leftv$[ebp+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+248]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+252]
	movss	DWORD PTR _dl$[ebp+4], xmm0

; 3252 : 	dl.z = -leftv.z * scale2d * realRadius;

	movss	xmm0, DWORD PTR _leftv$[ebp+8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+248]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+252]
	movss	DWORD PTR _dl$[ebp+8], xmm0

; 3253 : 	ws.x = position.x + dl.x ;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR _dl$[ebp]
	movss	DWORD PTR _ws$[ebp], xmm0

; 3254 : 	ws.y = position.y + dl.y ;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	addss	xmm0, DWORD PTR _dl$[ebp+4]
	movss	DWORD PTR _ws$[ebp+4], xmm0

; 3255 : 	ws.z = position.z + dl.z ;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+12]
	addss	xmm0, DWORD PTR _dl$[ebp+8]
	movss	DWORD PTR _ws$[ebp+8], xmm0

; 3256 : 	renderer->TransformPoint( &position,  &spos );

	lea	eax, DWORD PTR _spos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformPoint

; 3257 : 	if ( spos.csZ < 1.0f )

	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR _spos$[ebp+48]
	jbe	SHORT $LN50@APLScatter

; 3258 : 		return;

	jmp	$LN51@APLScatter
$LN50@APLScatter:

; 3259 : 
; 3260 : 	// hack to make long hanging smoke look better
; 3261 : 	if ( type == DRAW2D_LONG_HANGING_SMOKE2 || type == DRAW2D_FIRE1 )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 37			; 00000025H
	je	SHORT $LN48@APLScatter
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 44			; 0000002cH
	jne	SHORT $LN49@APLScatter
$LN48@APLScatter:

; 3262 : 	{
; 3263 : 		scaleZ = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _scaleZ$[ebp], xmm0

; 3264 : 	}
; 3265 : 	else

	jmp	SHORT $LN47@APLScatter
$LN49@APLScatter:

; 3266 : 	{
; 3267 : 		scaleZ = (SCATTER_ZMAX - spos.csZ)/SCATTER_ZMAX;

	movss	xmm0, DWORD PTR __real@466a6000
	mulss	xmm0, DWORD PTR _sLOD
	addss	xmm0, DWORD PTR __real@459c4000
	subss	xmm0, DWORD PTR _spos$[ebp+48]
	movss	xmm1, DWORD PTR __real@466a6000
	mulss	xmm1, DWORD PTR _sLOD
	addss	xmm1, DWORD PTR __real@459c4000
	divss	xmm0, xmm1
	movss	DWORD PTR _scaleZ$[ebp], xmm0

; 3268 : 		if ( scaleZ < 0.0f ) scaleZ = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _scaleZ$[ebp]
	jbe	SHORT $LN46@APLScatter
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _scaleZ$[ebp], xmm0
$LN46@APLScatter:

; 3269 : 		scaleZ *= scaleZ;

	movss	xmm0, DWORD PTR _scaleZ$[ebp]
	mulss	xmm0, DWORD PTR _scaleZ$[ebp]
	movss	DWORD PTR _scaleZ$[ebp], xmm0
$LN47@APLScatter:

; 3270 : 	}
; 3271 : 
; 3272 : 	renderer->TransformPoint( &ws,  &v0 );

	lea	ecx, DWORD PTR _v0$[ebp]
	push	ecx
	lea	edx, DWORD PTR _ws$[ebp]
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformPoint

; 3273 : 	screenR = (float)fabs( v0.x - spos.x );

	movss	xmm0, DWORD PTR _v0$[ebp]
	subss	xmm0, DWORD PTR _spos$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _screenR$[ebp]

; 3274 : 	/*
; 3275 : 	if (screenR > sMaxScreenRes * xRes * 0.5f )
; 3276 : 	{
; 3277 : 		screenR = xRes * sMaxScreenRes * 0.5f;
; 3278 : 	}
; 3279 : 	*/
; 3280 : 	elementRbase = screenR * 0.4f + ( 1.0f - scaleZ ) * 0.6f;

	movss	xmm0, DWORD PTR _screenR$[ebp]
	mulss	xmm0, DWORD PTR __real@3ecccccd
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _scaleZ$[ebp]
	mulss	xmm1, DWORD PTR __real@3f19999a
	addss	xmm0, xmm1
	movss	DWORD PTR _elementRbase$[ebp], xmm0

; 3281 : 	screenR *= 0.4f - ( 1.0f - scaleZ ) * 0.3f;

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _scaleZ$[ebp]
	mulss	xmm0, DWORD PTR __real@3e99999a
	movss	xmm1, DWORD PTR __real@3ecccccd
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _screenR$[ebp]
	movss	DWORD PTR _screenR$[ebp], xmm1

; 3282 : 
; 3283 : 	// setup the 4 verts, the only thing we'll be modifiying in the
; 3284 : 	// scatter loop is the x,y screen coords
; 3285 : 	v0.csZ = spos.csZ;

	movss	xmm0, DWORD PTR _spos$[ebp+48]
	movss	DWORD PTR _v0$[ebp+48], xmm0

; 3286 : 	v0.clipFlag = 0;

	mov	DWORD PTR _v0$[ebp+36], 0

; 3287 : 	v0.q = v0.csZ * 0.001f;

	movss	xmm0, DWORD PTR _v0$[ebp+48]
	mulss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR _v0$[ebp+32], xmm0

; 3288 : 	v1.csZ = spos.csZ;

	movss	xmm0, DWORD PTR _spos$[ebp+48]
	movss	DWORD PTR _v1$[ebp+48], xmm0

; 3289 : 	v1.clipFlag = 0;

	mov	DWORD PTR _v1$[ebp+36], 0

; 3290 : 	v1.q = v0.q;

	movss	xmm0, DWORD PTR _v0$[ebp+32]
	movss	DWORD PTR _v1$[ebp+32], xmm0

; 3291 : 	v2.csZ = spos.csZ;

	movss	xmm0, DWORD PTR _spos$[ebp+48]
	movss	DWORD PTR _v2$[ebp+48], xmm0

; 3292 : 	v2.clipFlag = 0;

	mov	DWORD PTR _v2$[ebp+36], 0

; 3293 : 	v2.q = v0.q;

	movss	xmm0, DWORD PTR _v0$[ebp+32]
	movss	DWORD PTR _v2$[ebp+32], xmm0

; 3294 : 	v3.csZ = spos.csZ;

	movss	xmm0, DWORD PTR _spos$[ebp+48]
	movss	DWORD PTR _v3$[ebp+48], xmm0

; 3295 : 	v3.clipFlag = 0;

	mov	DWORD PTR _v3$[ebp+36], 0

; 3296 : 	v3.q = v0.q;

	movss	xmm0, DWORD PTR _v0$[ebp+32]
	movss	DWORD PTR _v3$[ebp+32], xmm0

; 3297 : 
; 3298 : 	// a nicer effect: put a point in the center of a square, make it
; 3299 : 	// a dark alpha and have the edges fade to 0.  LOD this effect.
; 3300 : 	// doFivePoints = !(typeData.flags & NO_FIVE_POINTS ) && ( scaleZ * sLOD > 0.4f || type == DRAW2D_LONG_HANGING_SMOKE2 );
; 3301 : 	doFivePoints = !(typeData.flags & NO_FIVE_POINTS );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	and	ecx, 16777216				; 01000000H
	jne	SHORT $LN53@APLScatter
	mov	DWORD PTR tv321[ebp], 1
	jmp	SHORT $LN54@APLScatter
$LN53@APLScatter:
	mov	DWORD PTR tv321[ebp], 0
$LN54@APLScatter:
	mov	edx, DWORD PTR tv321[ebp]
	mov	DWORD PTR _doFivePoints$[ebp], edx

; 3302 : 
; 3303 : 	// setup rendering context
; 3304 : 	if(sGreenMode) //JAM - FIXME

	cmp	DWORD PTR ?sGreenMode@@3HA, 0		; sGreenMode
	je	SHORT $LN45@APLScatter

; 3305 : 			renderer->context.RestoreState(STATE_ALPHA_TEXTURE);

	push	26					; 0000001aH
	mov	ecx, DWORD PTR _renderer$[ebp]
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 3306 : 	else

	jmp	SHORT $LN43@APLScatter
$LN45@APLScatter:

; 3307 : 	{
; 3308 : //		if(renderer->GetAlphaMode()) //JAM - FIXME
; 3309 : 			renderer->context.RestoreState(STATE_ALPHA_TEXTURE_GOURAUD);

	push	32					; 00000020H
	mov	ecx, DWORD PTR _renderer$[ebp]
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 3310 : /*		else
; 3311 : 		{
; 3312 : 			renderer->context.RestoreState(STATE_ALPHA_TEXTURE);
; 3313 : 			doFivePoints = FALSE;
; 3314 : 		}
; 3315 : */
; 3316 : 		if (renderer->GetFilteringMode())

	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?GetFilteringMode@RenderOTW@@QAEHXZ	; RenderOTW::GetFilteringMode
	test	eax, eax
	je	SHORT $LN43@APLScatter

; 3317 : 		{
; 3318 : 			renderer->context.SetState(MPR_STA_TEX_FILTER, MPR_TX_BILINEAR);

	push	1
	push	8
	mov	ecx, DWORD PTR _renderer$[ebp]
	add	ecx, 100				; 00000064H
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
$LN43@APLScatter:

; 3319 : //			renderer->context.InvalidateState();
; 3320 : 		}
; 3321 : 	}
; 3322 : 
; 3323 : 	renderer->context.SetState(MPR_STA_ALPHA_OP_FUNCTION,MPR_TO_MODULATE); //JAM 18Oct03

	push	4
	push	5
	mov	ecx, DWORD PTR _renderer$[ebp]
	add	ecx, 100				; 00000064H
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 3324 : 
; 3325 : 	if ( type == DRAW2D_LONG_HANGING_SMOKE2 || type == DRAW2D_FIRE1 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 37			; 00000025H
	je	SHORT $LN41@APLScatter
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 44			; 0000002cH
	jne	SHORT $LN42@APLScatter
$LN41@APLScatter:

; 3326 : 		// numToPlot = (NUM_EXPLODE_SCATTER_POINTS);
; 3327 : 		numToPlot = 1;

	mov	DWORD PTR _numToPlot$[ebp], 1
	jmp	$LN36@APLScatter
$LN42@APLScatter:

; 3328 : 	else if ( typeData.flags & FIRE_SCATTER_PLOT )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	and	eax, 8192				; 00002000H
	je	SHORT $LN39@APLScatter

; 3329 : 		numToPlot = max( 1, (int)(NUM_FIRE_SCATTER_POINTS * scaleZ * sLOD));

	movss	xmm0, DWORD PTR __real@41400000
	mulss	xmm0, DWORD PTR _scaleZ$[ebp]
	mulss	xmm0, DWORD PTR _sLOD
	cvttss2si ecx, xmm0
	cmp	ecx, 1
	jge	SHORT $LN55@APLScatter
	mov	DWORD PTR tv373[ebp], 1
	jmp	SHORT $LN56@APLScatter
$LN55@APLScatter:
	movss	xmm0, DWORD PTR __real@41400000
	mulss	xmm0, DWORD PTR _scaleZ$[ebp]
	mulss	xmm0, DWORD PTR _sLOD
	cvttss2si edx, xmm0
	mov	DWORD PTR tv373[ebp], edx
$LN56@APLScatter:
	mov	eax, DWORD PTR tv373[ebp]
	mov	DWORD PTR _numToPlot$[ebp], eax
	jmp	$LN36@APLScatter
$LN39@APLScatter:

; 3330 : 	else if ( typeData.flags & SMOKE_SCATTER_PLOT )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	and	edx, 16384				; 00004000H
	je	SHORT $LN37@APLScatter

; 3331 : 		numToPlot = max( 1, (int)(NUM_SMOKE_SCATTER_POINTS * scaleZ * sLOD));

	movss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR _scaleZ$[ebp]
	mulss	xmm0, DWORD PTR _sLOD
	cvttss2si eax, xmm0
	cmp	eax, 1
	jge	SHORT $LN57@APLScatter
	mov	DWORD PTR tv387[ebp], 1
	jmp	SHORT $LN58@APLScatter
$LN57@APLScatter:
	movss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR _scaleZ$[ebp]
	mulss	xmm0, DWORD PTR _sLOD
	cvttss2si ecx, xmm0
	mov	DWORD PTR tv387[ebp], ecx
$LN58@APLScatter:
	mov	edx, DWORD PTR tv387[ebp]
	mov	DWORD PTR _numToPlot$[ebp], edx

; 3332 : 	else

	jmp	SHORT $LN36@APLScatter
$LN37@APLScatter:

; 3333 : 		numToPlot = max( 1, (int)(NUM_EXPLODE_SCATTER_POINTS * scaleZ * sLOD));

	movss	xmm0, DWORD PTR __real@41200000
	mulss	xmm0, DWORD PTR _scaleZ$[ebp]
	mulss	xmm0, DWORD PTR _sLOD
	cvttss2si eax, xmm0
	cmp	eax, 1
	jge	SHORT $LN59@APLScatter
	mov	DWORD PTR tv397[ebp], 1
	jmp	SHORT $LN60@APLScatter
$LN59@APLScatter:
	movss	xmm0, DWORD PTR __real@41200000
	mulss	xmm0, DWORD PTR _scaleZ$[ebp]
	mulss	xmm0, DWORD PTR _sLOD
	cvttss2si ecx, xmm0
	mov	DWORD PTR tv397[ebp], ecx
$LN60@APLScatter:
	mov	edx, DWORD PTR tv397[ebp]
	mov	DWORD PTR _numToPlot$[ebp], edx
$LN36@APLScatter:

; 3334 : 
; 3335 : 	// color and alpha
; 3336 : 	if ( doFivePoints )

	cmp	DWORD PTR _doFivePoints$[ebp], 0
	je	$LN35@APLScatter

; 3337 : 	{
; 3338 : 		vm.a = alpha;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+52]
	movss	DWORD PTR _vm$[ebp+20], xmm0

; 3339 : 		vm.r = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _vm$[ebp+8], xmm0

; 3340 : 		vm.g = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _vm$[ebp+12], xmm0

; 3341 : 		vm.b = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _vm$[ebp+16], xmm0

; 3342 : 		vm.csZ = spos.csZ;

	movss	xmm0, DWORD PTR _spos$[ebp+48]
	movss	DWORD PTR _vm$[ebp+48], xmm0

; 3343 : 		vm.clipFlag = 0;

	mov	DWORD PTR _vm$[ebp+36], 0

; 3344 : 		vm.q = v0.q;

	movss	xmm0, DWORD PTR _v0$[ebp+32]
	movss	DWORD PTR _vm$[ebp+32], xmm0

; 3345 : 		v0.a = v1.a = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1$[ebp+20], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+20]
	movss	DWORD PTR _v0$[ebp+20], xmm0

; 3346 : 		v2.a = v3.a = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v3$[ebp+20], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+20]
	movss	DWORD PTR _v2$[ebp+20], xmm0

; 3347 : 		v0.g = v2.g = v3.g = v1.g = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1$[ebp+12], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+12]
	movss	DWORD PTR _v3$[ebp+12], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+12]
	movss	DWORD PTR _v2$[ebp+12], xmm0
	movss	xmm0, DWORD PTR _v2$[ebp+12]
	movss	DWORD PTR _v0$[ebp+12], xmm0

; 3348 : 		// randomly tweak the edge RGB's to give a glowy kind of effect
; 3349 : 		if ( typeData.flags & NO_RANDOM_BLEND )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	and	edx, 4194304				; 00400000H
	je	SHORT $LN34@APLScatter

; 3350 : 		{
; 3351 : 			v0.r = v2.r = v3.r = v1.r = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+8]
	movss	DWORD PTR _v3$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+8]
	movss	DWORD PTR _v2$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _v2$[ebp+8]
	movss	DWORD PTR _v0$[ebp+8], xmm0

; 3352 : 			v0.b = v2.b = v3.b = v1.b = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+16]
	movss	DWORD PTR _v3$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+16]
	movss	DWORD PTR _v2$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _v2$[ebp+16]
	movss	DWORD PTR _v0$[ebp+16], xmm0

; 3353 : 		}
; 3354 : 		else

	jmp	$LN33@APLScatter
$LN34@APLScatter:

; 3355 : 		{
; 3356 : 			v0.r = v2.r = v3.r = v1.r = 0.1f + NRANDPOS * 0.8f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _v1$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+8]
	movss	DWORD PTR _v3$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+8]
	movss	DWORD PTR _v2$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _v2$[ebp+8]
	movss	DWORD PTR _v0$[ebp+8], xmm0

; 3357 : 			v0.b = v2.b = v3.b = v1.b = 0.1f + NRANDPOS * 0.8f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _v1$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+16]
	movss	DWORD PTR _v3$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+16]
	movss	DWORD PTR _v2$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _v2$[ebp+16]
	movss	DWORD PTR _v0$[ebp+16], xmm0
$LN33@APLScatter:

; 3358 : 		}
; 3359 : 	}
; 3360 : 	/*
; 3361 : 	else if ( typeData.flags & EXPLODE_SCATTER_PLOT )
; 3362 : 	{
; 3363 : 		v0.r = v1.r = 1.0f;
; 3364 : 		v0.g = v1.g = 1.0f;
; 3365 : 		v0.b = v1.b = 1.0f;
; 3366 : 		v0.a = v1.a = alpha * (1.0f - scaleZ);
; 3367 : 		v2.r = v3.r = 1.0f;
; 3368 : 		v2.g = v3.g = 1.0f;
; 3369 : 		v2.b = v3.b = 1.0f;
; 3370 : 		v2.a = v3.a = alpha;
; 3371 : 	}
; 3372 : 	*/
; 3373 : 	else

	jmp	$LN32@APLScatter
$LN35@APLScatter:

; 3374 : 	{
; 3375 : 		v0.r = v1.r = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v1$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+8]
	movss	DWORD PTR _v0$[ebp+8], xmm0

; 3376 : 		v0.g = v1.g = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v1$[ebp+12], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+12]
	movss	DWORD PTR _v0$[ebp+12], xmm0

; 3377 : 		v0.b = v1.b = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v1$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+16]
	movss	DWORD PTR _v0$[ebp+16], xmm0

; 3378 : 		// v0.a = v1.a = alpha * (1.0f - scaleZ);
; 3379 : 		v0.a = v1.a = alpha;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+52]
	movss	DWORD PTR _v1$[ebp+20], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+20]
	movss	DWORD PTR _v0$[ebp+20], xmm0

; 3380 : 		v2.r = v3.r = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v3$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+8]
	movss	DWORD PTR _v2$[ebp+8], xmm0

; 3381 : 		v2.g = v3.g = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v3$[ebp+12], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+12]
	movss	DWORD PTR _v2$[ebp+12], xmm0

; 3382 : 		v2.b = v3.b = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v3$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+16]
	movss	DWORD PTR _v2$[ebp+16], xmm0

; 3383 : 		v2.a = v3.a = alpha;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+52]
	movss	DWORD PTR _v3$[ebp+20], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+20]
	movss	DWORD PTR _v2$[ebp+20], xmm0
$LN32@APLScatter:

; 3384 : 	}
; 3385 : 
; 3386 : 
; 3387 : 	// now run the scatter loop
; 3388 : 	for ( i = 0; i < numToPlot; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN31@APLScatter
$LN30@APLScatter:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN31@APLScatter:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _numToPlot$[ebp]
	jge	$LN29@APLScatter

; 3389 : 	{
; 3390 : 
; 3391 : 		// center of this element
; 3392 : 		if ( typeData.flags & FIRE_SCATTER_PLOT )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	and	edx, 8192				; 00002000H
	je	$LN28@APLScatter

; 3393 : 		{
; 3394 : 			dl.x = gFireScatterPoints[ curSFrame ][ i ].x * screenR + spos.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	imul	ecx, 144				; 00000090H
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gFireScatterPoints@@3PAY0M@UTpoint@@A[ecx+edx]
	mulss	xmm0, DWORD PTR _screenR$[ebp]
	addss	xmm0, DWORD PTR _spos$[ebp]
	movss	DWORD PTR _dl$[ebp], xmm0

; 3395 : 			if (gFireScatterPoints[ curSFrame ][ i ].y > 0.0f )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	imul	ecx, 144				; 00000090H
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gFireScatterPoints@@3PAY0M@UTpoint@@A[ecx+edx+4]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN27@APLScatter

; 3396 : 				dl.y = gFireScatterPoints[ curSFrame ][ i ].y * screenR + spos.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	imul	ecx, 144				; 00000090H
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gFireScatterPoints@@3PAY0M@UTpoint@@A[ecx+edx+4]
	mulss	xmm0, DWORD PTR _screenR$[ebp]
	addss	xmm0, DWORD PTR _spos$[ebp+4]
	movss	DWORD PTR _dl$[ebp+4], xmm0

; 3397 : 			else

	jmp	SHORT $LN26@APLScatter
$LN27@APLScatter:

; 3398 : 				dl.y = gFireScatterPoints[ curSFrame ][ i ].y * screenR * 1.5f + spos.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	imul	ecx, 144				; 00000090H
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gFireScatterPoints@@3PAY0M@UTpoint@@A[ecx+edx+4]
	mulss	xmm0, DWORD PTR _screenR$[ebp]
	mulss	xmm0, DWORD PTR __real@3fc00000
	addss	xmm0, DWORD PTR _spos$[ebp+4]
	movss	DWORD PTR _dl$[ebp+4], xmm0
$LN26@APLScatter:

; 3399 : 			elementR = gFireScatterPoints[ curSFrame ][ i ].z * elementRbase +
; 3400 : 						elementRbase * 0.25f;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	imul	ecx, 144				; 00000090H
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gFireScatterPoints@@3PAY0M@UTpoint@@A[ecx+edx+8]
	mulss	xmm0, DWORD PTR _elementRbase$[ebp]
	movss	xmm1, DWORD PTR _elementRbase$[ebp]
	mulss	xmm1, DWORD PTR __real@3e800000
	addss	xmm0, xmm1
	movss	DWORD PTR _elementR$[ebp], xmm0
	jmp	$LN21@APLScatter
$LN28@APLScatter:

; 3401 : 		}
; 3402 : 		else if ( typeData.flags & EXPLODE_SCATTER_PLOT )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	and	ecx, 65536				; 00010000H
	je	$LN24@APLScatter

; 3403 : 		{
; 3404 : 			dl.x = gExplodeScatterPoints[ curSFrame ][ i ].x * screenR + spos.x;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	imul	eax, 120				; 00000078H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gExplodeScatterPoints@@3PAY09UTpoint@@A[eax+ecx]
	mulss	xmm0, DWORD PTR _screenR$[ebp]
	addss	xmm0, DWORD PTR _spos$[ebp]
	movss	DWORD PTR _dl$[ebp], xmm0

; 3405 : 			if (gExplodeScatterPoints[ curSFrame ][ i ].y > 0.0f )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	imul	eax, 120				; 00000078H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gExplodeScatterPoints@@3PAY09UTpoint@@A[eax+ecx+4]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN23@APLScatter

; 3406 : 				dl.y = gExplodeScatterPoints[ curSFrame ][ i ].y * screenR + spos.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	imul	eax, 120				; 00000078H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gExplodeScatterPoints@@3PAY09UTpoint@@A[eax+ecx+4]
	mulss	xmm0, DWORD PTR _screenR$[ebp]
	addss	xmm0, DWORD PTR _spos$[ebp+4]
	movss	DWORD PTR _dl$[ebp+4], xmm0

; 3407 : 			else

	jmp	SHORT $LN22@APLScatter
$LN23@APLScatter:

; 3408 : 				dl.y = gExplodeScatterPoints[ curSFrame ][ i ].y * screenR * 1.5f + spos.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	imul	eax, 120				; 00000078H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gExplodeScatterPoints@@3PAY09UTpoint@@A[eax+ecx+4]
	mulss	xmm0, DWORD PTR _screenR$[ebp]
	mulss	xmm0, DWORD PTR __real@3fc00000
	addss	xmm0, DWORD PTR _spos$[ebp+4]
	movss	DWORD PTR _dl$[ebp+4], xmm0
$LN22@APLScatter:

; 3409 : 			elementR = gExplodeScatterPoints[ curSFrame ][ i ].z * elementRbase +
; 3410 : 						elementRbase * 0.25f;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	imul	eax, 120				; 00000078H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gExplodeScatterPoints@@3PAY09UTpoint@@A[eax+ecx+8]
	mulss	xmm0, DWORD PTR _elementRbase$[ebp]
	movss	xmm1, DWORD PTR _elementRbase$[ebp]
	mulss	xmm1, DWORD PTR __real@3e800000
	addss	xmm0, xmm1
	movss	DWORD PTR _elementR$[ebp], xmm0

; 3411 : 		}
; 3412 : 		else

	jmp	$LN21@APLScatter
$LN24@APLScatter:

; 3413 : 		{
; 3414 : 			dl.x = gSmokeScatterPoints[ curSFrame ][ i ].x * screenR + spos.x;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gSmokeScatterPoints@@3PAY00UTpoint@@A[eax+ecx]
	mulss	xmm0, DWORD PTR _screenR$[ebp]
	addss	xmm0, DWORD PTR _spos$[ebp]
	movss	DWORD PTR _dl$[ebp], xmm0

; 3415 : 			if (gSmokeScatterPoints[ curSFrame ][ i ].y > 0.0f )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gSmokeScatterPoints@@3PAY00UTpoint@@A[eax+ecx+4]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN20@APLScatter

; 3416 : 				dl.y = gSmokeScatterPoints[ curSFrame ][ i ].y * screenR + spos.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gSmokeScatterPoints@@3PAY00UTpoint@@A[eax+ecx+4]
	mulss	xmm0, DWORD PTR _screenR$[ebp]
	addss	xmm0, DWORD PTR _spos$[ebp+4]
	movss	DWORD PTR _dl$[ebp+4], xmm0

; 3417 : 			else

	jmp	SHORT $LN19@APLScatter
$LN20@APLScatter:

; 3418 : 				dl.y = gSmokeScatterPoints[ curSFrame ][ i ].y * screenR * 1.5f + spos.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gSmokeScatterPoints@@3PAY00UTpoint@@A[eax+ecx+4]
	mulss	xmm0, DWORD PTR _screenR$[ebp]
	mulss	xmm0, DWORD PTR __real@3fc00000
	addss	xmm0, DWORD PTR _spos$[ebp+4]
	movss	DWORD PTR _dl$[ebp+4], xmm0
$LN19@APLScatter:

; 3419 : 			elementR = gSmokeScatterPoints[ curSFrame ][ i ].z * elementRbase +
; 3420 : 						elementRbase * 0.25f;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gSmokeScatterPoints@@3PAY00UTpoint@@A[eax+ecx+8]
	mulss	xmm0, DWORD PTR _elementRbase$[ebp]
	movss	xmm1, DWORD PTR _elementRbase$[ebp]
	mulss	xmm1, DWORD PTR __real@3e800000
	addss	xmm0, xmm1
	movss	DWORD PTR _elementR$[ebp], xmm0
$LN21@APLScatter:

; 3421 : 		}
; 3422 : 
; 3423 : 		// we do our own clipping checks -- for now, any point not within
; 3424 : 		// screen bounds, we toss the entire element
; 3425 : 		
; 3426 : 		//if ( dl.x < left || dl.y < top || dl.x > right || dl.y > bottom )
; 3427 : 		//	continue;
; 3428 : 
; 3429 : 		v0.x = dl.x - elementR;

	movss	xmm0, DWORD PTR _dl$[ebp]
	subss	xmm0, DWORD PTR _elementR$[ebp]
	movss	DWORD PTR _v0$[ebp], xmm0

; 3430 : 		v0.y = dl.y - elementR;

	movss	xmm0, DWORD PTR _dl$[ebp+4]
	subss	xmm0, DWORD PTR _elementR$[ebp]
	movss	DWORD PTR _v0$[ebp+4], xmm0

; 3431 : 		//if ( v0.x < left || v0.y < top || v0.x > right || v0.y > bottom )
; 3432 : 		//	continue;
; 3433 : 
; 3434 : 		v1.x = dl.x + elementR;

	movss	xmm0, DWORD PTR _dl$[ebp]
	addss	xmm0, DWORD PTR _elementR$[ebp]
	movss	DWORD PTR _v1$[ebp], xmm0

; 3435 : 		v1.y = dl.y - elementR;

	movss	xmm0, DWORD PTR _dl$[ebp+4]
	subss	xmm0, DWORD PTR _elementR$[ebp]
	movss	DWORD PTR _v1$[ebp+4], xmm0

; 3436 : 		//if ( v1.x < left || v1.y < top || v1.x > right || v1.y > bottom )
; 3437 : 		//	continue;
; 3438 : 
; 3439 : 		v2.x = dl.x + elementR;

	movss	xmm0, DWORD PTR _dl$[ebp]
	addss	xmm0, DWORD PTR _elementR$[ebp]
	movss	DWORD PTR _v2$[ebp], xmm0

; 3440 : 		v2.y = dl.y + elementR;

	movss	xmm0, DWORD PTR _dl$[ebp+4]
	addss	xmm0, DWORD PTR _elementR$[ebp]
	movss	DWORD PTR _v2$[ebp+4], xmm0

; 3441 : 		//if ( v2.x < left || v2.y < top || v2.x > right || v2.y > bottom )
; 3442 : 		//	continue;
; 3443 : 
; 3444 : 		v3.x = dl.x - elementR;

	movss	xmm0, DWORD PTR _dl$[ebp]
	subss	xmm0, DWORD PTR _elementR$[ebp]
	movss	DWORD PTR _v3$[ebp], xmm0

; 3445 : 		v3.y = dl.y + elementR;

	movss	xmm0, DWORD PTR _dl$[ebp+4]
	addss	xmm0, DWORD PTR _elementR$[ebp]
	movss	DWORD PTR _v3$[ebp+4], xmm0

; 3446 : 		//if ( v3.x < left || v3.y < top || v3.x > right || v3.y > bottom )
; 3447 : 		//	continue;
; 3448 : 
; 3449 : 		if ( v2.x < left || v2.y < top || v0.x > right || v0.y > bottom )

	movss	xmm0, DWORD PTR _left$[ebp]
	comiss	xmm0, DWORD PTR _v2$[ebp]
	ja	SHORT $LN17@APLScatter
	movss	xmm0, DWORD PTR _top$[ebp]
	comiss	xmm0, DWORD PTR _v2$[ebp+4]
	ja	SHORT $LN17@APLScatter
	movss	xmm0, DWORD PTR _v0$[ebp]
	comiss	xmm0, DWORD PTR _right$[ebp]
	ja	SHORT $LN17@APLScatter
	movss	xmm0, DWORD PTR _v0$[ebp+4]
	comiss	xmm0, DWORD PTR _bottom$[ebp]
	jbe	SHORT $LN18@APLScatter
$LN17@APLScatter:

; 3450 : 			continue;

	jmp	$LN30@APLScatter
$LN18@APLScatter:

; 3451 : 		
; 3452 : 		renderer->SetClipFlags( &v0 );

	lea	edx, DWORD PTR _v0$[ebp]
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?SetClipFlags@Render2D@@QAEXPAUTwoDVertex@@@Z ; Render2D::SetClipFlags

; 3453 : 		renderer->SetClipFlags( &v1 );

	lea	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?SetClipFlags@Render2D@@QAEXPAUTwoDVertex@@@Z ; Render2D::SetClipFlags

; 3454 : 		renderer->SetClipFlags( &v2 );

	lea	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?SetClipFlags@Render2D@@QAEXPAUTwoDVertex@@@Z ; Render2D::SetClipFlags

; 3455 : 		renderer->SetClipFlags( &v3 );

	lea	edx, DWORD PTR _v3$[ebp]
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?SetClipFlags@Render2D@@QAEXPAUTwoDVertex@@@Z ; Render2D::SetClipFlags

; 3456 : 
; 3457 : 
; 3458 : 
; 3459 : 		// get and set texture
; 3460 : 		if ( typeData.flags & SEQ_SCATTER_ANIM )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	and	ecx, 131072				; 00020000H
	je	$LN16@APLScatter

; 3461 : 		{
; 3462 : 			// hack for fireball
; 3463 : 			if ( type >= DRAW2D_FIRE1 && type <= DRAW2D_FIRE6 )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 44			; 0000002cH
	jl	SHORT $LN15@APLScatter
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 49			; 00000031H
	jg	SHORT $LN15@APLScatter

; 3464 : 			{
; 3465 : 				if ( curBFrame >= 6 )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+76], 6
	jl	SHORT $LN14@APLScatter

; 3466 : 				{
; 3467 : 					texseq = curBFrame;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	DWORD PTR _texseq$[ebp], eax

; 3468 : 					numToPlot = 1;

	mov	DWORD PTR _numToPlot$[ebp], 1

; 3469 : 				}
; 3470 : 				else

	jmp	SHORT $LN13@APLScatter
$LN14@APLScatter:

; 3471 : 					texseq = curBFrame + typeData.texId + (curFrame+i) % typeData.numTextures;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+76]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+108]
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+64]
	add	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	cdq
	idiv	DWORD PTR [esi+116]
	add	ecx, edx
	mov	DWORD PTR _texseq$[ebp], ecx
$LN13@APLScatter:

; 3472 : 			}
; 3473 : 			else

	jmp	SHORT $LN12@APLScatter
$LN15@APLScatter:

; 3474 : 				texseq = typeData.texId + (curFrame+i) % typeData.numTextures;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+64]
	add	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cdq
	idiv	DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+108]
	mov	DWORD PTR _texseq$[ebp], edx
$LN12@APLScatter:

; 3475 : 		}
; 3476 : 		else

	jmp	SHORT $LN11@APLScatter
$LN16@APLScatter:

; 3477 : 		{
; 3478 : 			texseq = typeData.texId + curFrame;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+64]
	mov	DWORD PTR _texseq$[ebp], edx
$LN11@APLScatter:

; 3479 : 		}
; 3480 : 
; 3481 : 		// hack, only randomize alpha if fire texture
; 3482 : 		if ( doFivePoints && texseq >= 0 && texseq <= 5 )

	cmp	DWORD PTR _doFivePoints$[ebp], 0
	je	$LN9@APLScatter
	cmp	DWORD PTR _texseq$[ebp], 0
	jl	$LN9@APLScatter
	cmp	DWORD PTR _texseq$[ebp], 5
	jg	SHORT $LN9@APLScatter

; 3483 : 		{
; 3484 : 			vm.a = alpha * 0.1f + alpha * 0.9f * NRANDPOS;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+52]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+52]
	mulss	xmm1, DWORD PTR __real@3f666666
	movss	DWORD PTR tv1682[ebp], xmm0
	movss	DWORD PTR tv1684[ebp], xmm1
	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	movss	xmm1, DWORD PTR tv1684[ebp]
	mulss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv1682[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _vm$[ebp+20], xmm0

; 3485 : 			if ( vm.a < 0.02f )

	movss	xmm0, DWORD PTR __real@3ca3d70a
	comiss	xmm0, DWORD PTR _vm$[ebp+20]
	jbe	SHORT $LN9@APLScatter

; 3486 : 				continue;

	jmp	$LN30@APLScatter
$LN9@APLScatter:

; 3487 : 		}
; 3488 : 
; 3489 : 
; 3490 : 		v1.u =0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1$[ebp+24], xmm0

; 3491 : 		v1.v =0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1$[ebp+28], xmm0

; 3492 : 		v0.u = v1.u + 1.0f;

	movss	xmm0, DWORD PTR _v1$[ebp+24]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v0$[ebp+24], xmm0

; 3493 : 		v0.v = v1.v;

	movss	xmm0, DWORD PTR _v1$[ebp+28]
	movss	DWORD PTR _v0$[ebp+28], xmm0

; 3494 : 		v3.u = v1.u + 1.0f;

	movss	xmm0, DWORD PTR _v1$[ebp+24]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v3$[ebp+24], xmm0

; 3495 : 		v3.v = v1.v + 1.0f;

	movss	xmm0, DWORD PTR _v1$[ebp+28]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v3$[ebp+28], xmm0

; 3496 : 		v2.u = v1.u;

	movss	xmm0, DWORD PTR _v1$[ebp+24]
	movss	DWORD PTR _v2$[ebp+24], xmm0

; 3497 : 		v2.v = v1.v + 1.0f;

	movss	xmm0, DWORD PTR _v1$[ebp+28]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v2$[ebp+28], xmm0

; 3498 : 		vm.u = v1.u + 0.5f;

	movss	xmm0, DWORD PTR _v1$[ebp+24]
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _vm$[ebp+24], xmm0

; 3499 : 		vm.v = v1.v + 0.5f;

	movss	xmm0, DWORD PTR _v1$[ebp+28]
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _vm$[ebp+28], xmm0

; 3500 : 
; 3501 : 		if ( sGreenMode == 0)

	cmp	DWORD PTR ?sGreenMode@@3HA, 0		; sGreenMode
	jne	SHORT $LN8@APLScatter

; 3502 : 			curTex = &gAplTextures[ texseq ];

	mov	eax, DWORD PTR _texseq$[ebp]
	imul	eax, 24					; 00000018H
	add	eax, OFFSET ?gAplTextures@@3PAVTexture@@A ; gAplTextures
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+144], eax

; 3503 : 		else

	jmp	SHORT $LN7@APLScatter
$LN8@APLScatter:

; 3504 : 			curTex = &gAplTexturesGreen[ texseq ];

	mov	edx, DWORD PTR _texseq$[ebp]
	imul	edx, 24					; 00000018H
	add	edx, OFFSET ?gAplTexturesGreen@@3PAVTexture@@A ; gAplTexturesGreen
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+144], edx
$LN7@APLScatter:

; 3505 : 		renderer->context.SelectTexture1( curTex->TexHandle() );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+144]
	call	?TexHandle@Texture@@QAEKXZ		; Texture::TexHandle
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	add	ecx, 100				; 00000064H
	call	?SelectTexture1@ContextMPR@@QAEXH@Z	; ContextMPR::SelectTexture1

; 3506 : 
; 3507 : 		// do a middle point....
; 3508 : 		if ( doFivePoints )

	cmp	DWORD PTR _doFivePoints$[ebp], 0
	je	$LN6@APLScatter

; 3509 : 		{
; 3510 : 			vm.x = dl.x;

	movss	xmm0, DWORD PTR _dl$[ebp]
	movss	DWORD PTR _vm$[ebp], xmm0

; 3511 : 			vm.y = dl.y;

	movss	xmm0, DWORD PTR _dl$[ebp+4]
	movss	DWORD PTR _vm$[ebp+4], xmm0

; 3512 : 			renderer->SetClipFlags( &vm );

	lea	edx, DWORD PTR _vm$[ebp]
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?SetClipFlags@Render2D@@QAEXPAUTwoDVertex@@@Z ; Render2D::SetClipFlags

; 3513 : 			vertArray[0] = &vm;

	mov	eax, 4
	imul	eax, 0
	lea	ecx, DWORD PTR _vm$[ebp]
	mov	DWORD PTR _vertArray$[ebp+eax], ecx

; 3514 : 			vertArray[1] = &v0;

	mov	edx, 4
	shl	edx, 0
	lea	eax, DWORD PTR _v0$[ebp]
	mov	DWORD PTR _vertArray$[ebp+edx], eax

; 3515 : 			vertArray[2] = &v1;

	mov	ecx, 4
	shl	ecx, 1
	lea	edx, DWORD PTR _v1$[ebp]
	mov	DWORD PTR _vertArray$[ebp+ecx], edx

; 3516 : 			vertArray[3] = &v2;

	mov	eax, 4
	imul	eax, 3
	lea	ecx, DWORD PTR _v2$[ebp]
	mov	DWORD PTR _vertArray$[ebp+eax], ecx

; 3517 : 			vertArray[4] = &v3;

	mov	edx, 4
	shl	edx, 2
	lea	eax, DWORD PTR _v3$[ebp]
	mov	DWORD PTR _vertArray$[ebp+edx], eax

; 3518 : 			vertArray[5] = &v0;

	mov	ecx, 4
	imul	ecx, 5
	lea	edx, DWORD PTR _v0$[ebp]
	mov	DWORD PTR _vertArray$[ebp+ecx], edx

; 3519 : 			if (g_nGfxFix & 0x01)

	mov	eax, DWORD PTR ?g_nGfxFix@@3HA		; g_nGfxFix
	and	eax, 1
	je	SHORT $LN5@APLScatter

; 3520 : 				renderer->ClipAndDraw2DFan( vertArray, 6, true); // true = gifPicture -> fix for clipping explosion graphics

	push	1
	push	6
	lea	ecx, DWORD PTR _vertArray$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?ClipAndDraw2DFan@Render2D@@QAEXPAPAUTwoDVertex@@I_N@Z ; Render2D::ClipAndDraw2DFan

; 3521 : 			else

	jmp	SHORT $LN4@APLScatter
$LN5@APLScatter:

; 3522 : 				renderer->ClipAndDraw2DFan( vertArray, 6); 

	push	0
	push	6
	lea	edx, DWORD PTR _vertArray$[ebp]
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?ClipAndDraw2DFan@Render2D@@QAEXPAPAUTwoDVertex@@I_N@Z ; Render2D::ClipAndDraw2DFan
$LN4@APLScatter:

; 3523 : 
; 3524 : 			/*
; 3525 : 			renderer->DrawTriangle( &v0, &v1, &vm, CULL_ALLOW_ALL );
; 3526 : 			renderer->DrawTriangle( &v1, &v2, &vm, CULL_ALLOW_ALL );
; 3527 : 			renderer->DrawTriangle( &v2, &v3, &vm, CULL_ALLOW_ALL );
; 3528 : 			renderer->DrawTriangle( &v3, &v0, &vm, CULL_ALLOW_ALL );
; 3529 : 			*/
; 3530 : 		}
; 3531 : 		else

	jmp	$LN1@APLScatter
$LN6@APLScatter:

; 3532 : 		{
; 3533 : 			vertArray[0] = &v0;

	mov	eax, 4
	imul	eax, 0
	lea	ecx, DWORD PTR _v0$[ebp]
	mov	DWORD PTR _vertArray$[ebp+eax], ecx

; 3534 : 			vertArray[1] = &v1;

	mov	edx, 4
	shl	edx, 0
	lea	eax, DWORD PTR _v1$[ebp]
	mov	DWORD PTR _vertArray$[ebp+edx], eax

; 3535 : 			vertArray[2] = &v2;

	mov	ecx, 4
	shl	ecx, 1
	lea	edx, DWORD PTR _v2$[ebp]
	mov	DWORD PTR _vertArray$[ebp+ecx], edx

; 3536 : 			vertArray[3] = &v3;

	mov	eax, 4
	imul	eax, 3
	lea	ecx, DWORD PTR _v3$[ebp]
	mov	DWORD PTR _vertArray$[ebp+eax], ecx

; 3537 : 			if (g_nGfxFix & 0x01)

	mov	edx, DWORD PTR ?g_nGfxFix@@3HA		; g_nGfxFix
	and	edx, 1
	je	SHORT $LN2@APLScatter

; 3538 : 				renderer->ClipAndDraw2DFan( vertArray, 4, true );

	push	1
	push	4
	lea	eax, DWORD PTR _vertArray$[ebp]
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?ClipAndDraw2DFan@Render2D@@QAEXPAPAUTwoDVertex@@I_N@Z ; Render2D::ClipAndDraw2DFan

; 3539 : 			else

	jmp	SHORT $LN1@APLScatter
$LN2@APLScatter:

; 3540 : 				renderer->ClipAndDraw2DFan( vertArray, 4);

	push	0
	push	4
	lea	ecx, DWORD PTR _vertArray$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?ClipAndDraw2DFan@Render2D@@QAEXPAPAUTwoDVertex@@I_N@Z ; Render2D::ClipAndDraw2DFan
$LN1@APLScatter:

; 3541 : 			// renderer->DrawSquare( &v0, &v1, &v2, &v3, CULL_ALLOW_ALL );
; 3542 : 		}
; 3543 : 
; 3544 : 	}

	jmp	$LN30@APLScatter
$LN29@APLScatter:
$LN51@APLScatter:

; 3545 : 
; 3546 : };

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?APLScatterPlot@Drawable2D@@IAEXPAVRenderOTW@@@Z ENDP	; Drawable2D::APLScatterPlot
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\draw2d.cpp
_TEXT	SEGMENT
_xRes$ = -436						; size = 4
_yRes$ = -432						; size = 4
tv395 = -428						; size = 4
tv405 = -424						; size = 4
tv381 = -420						; size = 4
_texseq$1 = -416					; size = 4
tv319 = -412						; size = 4
_doFivePoints$ = -408					; size = 4
_numToPlot$ = -404					; size = 4
_left$ = -400						; size = 4
_bottom$ = -396						; size = 4
_right$ = -392						; size = 4
_top$ = -388						; size = 4
_elementRbase$ = -384					; size = 4
_texseq$2 = -380					; size = 4
_elementR$ = -376					; size = 4
_screenR$ = -372					; size = 4
_scaleZ$ = -368						; size = 4
_i$ = -364						; size = 4
_gif$3 = -357						; size = 1
_this$ = -356						; size = 4
_vm$ = -352						; size = 52
_ws$ = -300						; size = 12
_leftv$ = -288						; size = 12
_spos$ = -276						; size = 52
_v2$ = -224						; size = 52
_v0$ = -172						; size = 52
_v3$ = -120						; size = 52
_v1$ = -68						; size = 52
_dl$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_renderer$ = 8						; size = 4
?ScatterPlot@Drawable2D@@IAEXPAVRenderOTW@@@Z PROC	; Drawable2D::ScatterPlot
; _this$ = ecx

; 3551 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 436				; 000001b4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 3552 : 	Tpoint				ws;
; 3553 : 	ThreeDVertex		v0, v1, v2, v3, spos;
; 3554 : 	ThreeDVertex		vm;
; 3555 : 	Tpoint				leftv;
; 3556 : 	Tpoint				dl;
; 3557 : 	float				screenR, elementR, elementRbase;
; 3558 : 	// float 				xRes = renderer->GetImageBuffer()->targetXres();
; 3559 : 	// float 				yRes = renderer->GetImageBuffer()->targetYres();
; 3560 : 	float 				xRes;
; 3561 : 	float 				yRes;
; 3562 : 	float				top, bottom, left, right;
; 3563 : 	int					i;
; 3564 : 	float				scaleZ;
; 3565 : 	int					numToPlot;
; 3566 : 	BOOL				doFivePoints;
; 3567 : 
; 3568 : 	// better on buildings
; 3569 : 	radius = realRadius * 3.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+252]
	mulss	xmm0, DWORD PTR __real@40400000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+16], xmm0

; 3570 : 
; 3571 : 	// figure out our max pixel locations
; 3572 : 	top = renderer->GetTopPixel();

	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?GetTopPixel@VirtualDisplay@@QAEMXZ	; VirtualDisplay::GetTopPixel
	fstp	DWORD PTR _top$[ebp]

; 3573 : 	bottom = renderer->GetBottomPixel();

	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?GetBottomPixel@VirtualDisplay@@QAEMXZ	; VirtualDisplay::GetBottomPixel
	fstp	DWORD PTR _bottom$[ebp]

; 3574 : 	left = renderer->GetLeftPixel();

	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?GetLeftPixel@VirtualDisplay@@QAEMXZ	; VirtualDisplay::GetLeftPixel
	fstp	DWORD PTR _left$[ebp]

; 3575 : 	right = renderer->GetRightPixel();

	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?GetRightPixel@VirtualDisplay@@QAEMXZ	; VirtualDisplay::GetRightPixel
	fstp	DWORD PTR _right$[ebp]

; 3576 : 	xRes = right - left;

	movss	xmm0, DWORD PTR _right$[ebp]
	subss	xmm0, DWORD PTR _left$[ebp]
	movss	DWORD PTR _xRes$[ebp], xmm0

; 3577 : 	yRes = bottom - top;

	movss	xmm0, DWORD PTR _bottom$[ebp]
	subss	xmm0, DWORD PTR _top$[ebp]
	movss	DWORD PTR _yRes$[ebp], xmm0

; 3578 : 
; 3579 : 	// get the left vector for the camera
; 3580 : 	renderer->GetLeft( &leftv );

	lea	edx, DWORD PTR _leftv$[ebp]
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?GetLeft@Render3D@@QAEXPAUTpoint@@@Z	; Render3D::GetLeft

; 3581 : 
; 3582 : 	// find screen radius we'll be scattering into
; 3583 : 	dl.x = -leftv.x * scale2d * realRadius;

	movss	xmm0, DWORD PTR _leftv$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+248]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+252]
	movss	DWORD PTR _dl$[ebp], xmm0

; 3584 : 	dl.y = -leftv.y * scale2d * realRadius;

	movss	xmm0, DWORD PTR _leftv$[ebp+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+248]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+252]
	movss	DWORD PTR _dl$[ebp+4], xmm0

; 3585 : 	dl.z = -leftv.z * scale2d * realRadius;

	movss	xmm0, DWORD PTR _leftv$[ebp+8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+248]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+252]
	movss	DWORD PTR _dl$[ebp+8], xmm0

; 3586 : 	ws.x = position.x + dl.x ;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR _dl$[ebp]
	movss	DWORD PTR _ws$[ebp], xmm0

; 3587 : 	ws.y = position.y + dl.y ;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	addss	xmm0, DWORD PTR _dl$[ebp+4]
	movss	DWORD PTR _ws$[ebp+4], xmm0

; 3588 : 	ws.z = position.z + dl.z ;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+12]
	addss	xmm0, DWORD PTR _dl$[ebp+8]
	movss	DWORD PTR _ws$[ebp+8], xmm0

; 3589 : 	renderer->TransformPoint( &position,  &spos );

	lea	eax, DWORD PTR _spos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformPoint

; 3590 : 	if ( spos.csZ < 1.0f )

	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR _spos$[ebp+48]
	jbe	SHORT $LN57@ScatterPlo

; 3591 : 		return;

	jmp	$LN58@ScatterPlo
$LN57@ScatterPlo:

; 3592 : 
; 3593 : 	// hack to make long hanging smoke look better
; 3594 : 	if ( type == DRAW2D_LONG_HANGING_SMOKE2 )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 37			; 00000025H
	jne	SHORT $LN56@ScatterPlo

; 3595 : 	{
; 3596 : 		scaleZ = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _scaleZ$[ebp], xmm0

; 3597 : 	}
; 3598 : 	else

	jmp	SHORT $LN55@ScatterPlo
$LN56@ScatterPlo:

; 3599 : 	{
; 3600 : 		scaleZ = (SCATTER_ZMAX - spos.csZ)/SCATTER_ZMAX;

	movss	xmm0, DWORD PTR __real@466a6000
	mulss	xmm0, DWORD PTR _sLOD
	addss	xmm0, DWORD PTR __real@459c4000
	subss	xmm0, DWORD PTR _spos$[ebp+48]
	movss	xmm1, DWORD PTR __real@466a6000
	mulss	xmm1, DWORD PTR _sLOD
	addss	xmm1, DWORD PTR __real@459c4000
	divss	xmm0, xmm1
	movss	DWORD PTR _scaleZ$[ebp], xmm0

; 3601 : 		if ( scaleZ < 0.0f ) scaleZ = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _scaleZ$[ebp]
	jbe	SHORT $LN54@ScatterPlo
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _scaleZ$[ebp], xmm0
$LN54@ScatterPlo:

; 3602 : 		scaleZ *= scaleZ;

	movss	xmm0, DWORD PTR _scaleZ$[ebp]
	mulss	xmm0, DWORD PTR _scaleZ$[ebp]
	movss	DWORD PTR _scaleZ$[ebp], xmm0
$LN55@ScatterPlo:

; 3603 : 	}
; 3604 : 
; 3605 : 	renderer->TransformPoint( &ws,  &v0 );

	lea	eax, DWORD PTR _v0$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ws$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformPoint

; 3606 : 	screenR = (float)fabs( v0.x - spos.x );

	movss	xmm0, DWORD PTR _v0$[ebp]
	subss	xmm0, DWORD PTR _spos$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _screenR$[ebp]

; 3607 : 	/*
; 3608 : 	if (screenR > sMaxScreenRes * xRes * 0.5f )
; 3609 : 	{
; 3610 : 		screenR = xRes * sMaxScreenRes * 0.5f;
; 3611 : 	}
; 3612 : 	*/
; 3613 : 	elementRbase = screenR * 0.4f + ( 1.0f - scaleZ ) * 0.6f;

	movss	xmm0, DWORD PTR _screenR$[ebp]
	mulss	xmm0, DWORD PTR __real@3ecccccd
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _scaleZ$[ebp]
	mulss	xmm1, DWORD PTR __real@3f19999a
	addss	xmm0, xmm1
	movss	DWORD PTR _elementRbase$[ebp], xmm0

; 3614 : 	screenR *= 0.4f - ( 1.0f - scaleZ ) * 0.3f;

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _scaleZ$[ebp]
	mulss	xmm0, DWORD PTR __real@3e99999a
	movss	xmm1, DWORD PTR __real@3ecccccd
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _screenR$[ebp]
	movss	DWORD PTR _screenR$[ebp], xmm1

; 3615 : 
; 3616 : 	// setup the 4 verts, the only thing we'll be modifiying in the
; 3617 : 	// scatter loop is the x,y screen coords
; 3618 : 	v0.csZ = spos.csZ;

	movss	xmm0, DWORD PTR _spos$[ebp+48]
	movss	DWORD PTR _v0$[ebp+48], xmm0

; 3619 : 	v0.clipFlag = 0;

	mov	DWORD PTR _v0$[ebp+36], 0

; 3620 : 	v0.q = v0.csZ * 0.001f;

	movss	xmm0, DWORD PTR _v0$[ebp+48]
	mulss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR _v0$[ebp+32], xmm0

; 3621 : 	v1.csZ = spos.csZ;

	movss	xmm0, DWORD PTR _spos$[ebp+48]
	movss	DWORD PTR _v1$[ebp+48], xmm0

; 3622 : 	v1.clipFlag = 0;

	mov	DWORD PTR _v1$[ebp+36], 0

; 3623 : 	v1.q = v0.q;

	movss	xmm0, DWORD PTR _v0$[ebp+32]
	movss	DWORD PTR _v1$[ebp+32], xmm0

; 3624 : 	v2.csZ = spos.csZ;

	movss	xmm0, DWORD PTR _spos$[ebp+48]
	movss	DWORD PTR _v2$[ebp+48], xmm0

; 3625 : 	v2.clipFlag = 0;

	mov	DWORD PTR _v2$[ebp+36], 0

; 3626 : 	v2.q = v0.q;

	movss	xmm0, DWORD PTR _v0$[ebp+32]
	movss	DWORD PTR _v2$[ebp+32], xmm0

; 3627 : 	v3.csZ = spos.csZ;

	movss	xmm0, DWORD PTR _spos$[ebp+48]
	movss	DWORD PTR _v3$[ebp+48], xmm0

; 3628 : 	v3.clipFlag = 0;

	mov	DWORD PTR _v3$[ebp+36], 0

; 3629 : 	v3.q = v0.q;

	movss	xmm0, DWORD PTR _v0$[ebp+32]
	movss	DWORD PTR _v3$[ebp+32], xmm0

; 3630 : 
; 3631 : 	// a nicer effect: put a point in the center of a square, make it
; 3632 : 	// a dark alpha and have the edges fade to 0.  LOD this effect.
; 3633 : 	doFivePoints = ( scaleZ * sLOD > 0.4f || type == DRAW2D_LONG_HANGING_SMOKE2 );

	movss	xmm0, DWORD PTR _scaleZ$[ebp]
	mulss	xmm0, DWORD PTR _sLOD
	comiss	xmm0, DWORD PTR __real@3ecccccd
	ja	SHORT $LN60@ScatterPlo
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 37			; 00000025H
	je	SHORT $LN60@ScatterPlo
	mov	DWORD PTR tv319[ebp], 0
	jmp	SHORT $LN61@ScatterPlo
$LN60@ScatterPlo:
	mov	DWORD PTR tv319[ebp], 1
$LN61@ScatterPlo:
	mov	eax, DWORD PTR tv319[ebp]
	mov	DWORD PTR _doFivePoints$[ebp], eax

; 3634 : 
; 3635 : 	// setup rendering context
; 3636 : //	if( renderer->GetAlphaMode() )
; 3637 : //	{
; 3638 : 		if(!sGreenMode) //JAM - FIXME

	cmp	DWORD PTR ?sGreenMode@@3HA, 0		; sGreenMode
	jne	SHORT $LN53@ScatterPlo

; 3639 : 			renderer->context.RestoreState(STATE_ALPHA_TEXTURE_GOURAUD);

	push	32					; 00000020H
	mov	ecx, DWORD PTR _renderer$[ebp]
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 3640 : 		else

	jmp	SHORT $LN52@ScatterPlo
$LN53@ScatterPlo:

; 3641 : 			renderer->context.RestoreState(STATE_ALPHA_TEXTURE_GOURAUD);

	push	32					; 00000020H
	mov	ecx, DWORD PTR _renderer$[ebp]
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState
$LN52@ScatterPlo:

; 3642 : /*	}
; 3643 : 	else
; 3644 : 	{
; 3645 : 		renderer->context.RestoreState(STATE_ALPHA_TEXTURE);
; 3646 : 		doFivePoints = FALSE;
; 3647 : 	}
; 3648 : */
; 3649 : 	if( !sGreenMode )

	cmp	DWORD PTR ?sGreenMode@@3HA, 0		; sGreenMode
	jne	SHORT $LN50@ScatterPlo

; 3650 : 	{
; 3651 : 		if( renderer->GetFilteringMode() )

	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?GetFilteringMode@RenderOTW@@QAEHXZ	; RenderOTW::GetFilteringMode
	test	eax, eax
	je	SHORT $LN50@ScatterPlo

; 3652 : 		{
; 3653 : 			renderer->context.SetState( MPR_STA_TEX_FILTER, MPR_TX_BILINEAR );

	push	1
	push	8
	mov	ecx, DWORD PTR _renderer$[ebp]
	add	ecx, 100				; 00000064H
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
$LN50@ScatterPlo:

; 3654 : //			renderer->context.InvalidateState();
; 3655 : 		}
; 3656 : 	}
; 3657 : 
; 3658 : 	renderer->context.SetState(MPR_STA_ALPHA_OP_FUNCTION,MPR_TO_MODULATE); //JAM 18Oct03

	push	4
	push	5
	mov	ecx, DWORD PTR _renderer$[ebp]
	add	ecx, 100				; 00000064H
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 3659 : 	renderer->context.SelectTexture1( curTex->TexHandle() );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+144]
	call	?TexHandle@Texture@@QAEKXZ		; Texture::TexHandle
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	add	ecx, 100				; 00000064H
	call	?SelectTexture1@ContextMPR@@QAEXH@Z	; ContextMPR::SelectTexture1

; 3660 : 
; 3661 : 	if ( type == DRAW2D_LONG_HANGING_SMOKE2 && doFivePoints )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 37			; 00000025H
	jne	SHORT $LN49@ScatterPlo
	cmp	DWORD PTR _doFivePoints$[ebp], 0
	je	SHORT $LN49@ScatterPlo

; 3662 : 		numToPlot = (NUM_EXPLODE_SCATTER_POINTS);

	mov	DWORD PTR _numToPlot$[ebp], 10		; 0000000aH
	jmp	$LN44@ScatterPlo
$LN49@ScatterPlo:

; 3663 : 	else if ( typeData.flags & FIRE_SCATTER_PLOT )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	and	ecx, 8192				; 00002000H
	je	SHORT $LN47@ScatterPlo

; 3664 : 		numToPlot = max( 1, (int)(NUM_FIRE_SCATTER_POINTS * scaleZ * sLOD));

	movss	xmm0, DWORD PTR __real@41400000
	mulss	xmm0, DWORD PTR _scaleZ$[ebp]
	mulss	xmm0, DWORD PTR _sLOD
	cvttss2si edx, xmm0
	cmp	edx, 1
	jge	SHORT $LN62@ScatterPlo
	mov	DWORD PTR tv381[ebp], 1
	jmp	SHORT $LN63@ScatterPlo
$LN62@ScatterPlo:
	movss	xmm0, DWORD PTR __real@41400000
	mulss	xmm0, DWORD PTR _scaleZ$[ebp]
	mulss	xmm0, DWORD PTR _sLOD
	cvttss2si eax, xmm0
	mov	DWORD PTR tv381[ebp], eax
$LN63@ScatterPlo:
	mov	ecx, DWORD PTR tv381[ebp]
	mov	DWORD PTR _numToPlot$[ebp], ecx
	jmp	$LN44@ScatterPlo
$LN47@ScatterPlo:

; 3665 : 	else if ( typeData.flags & SMOKE_SCATTER_PLOT )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	and	eax, 16384				; 00004000H
	je	SHORT $LN45@ScatterPlo

; 3666 : 		numToPlot = max( 1, (int)(NUM_SMOKE_SCATTER_POINTS * scaleZ * sLOD));

	movss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR _scaleZ$[ebp]
	mulss	xmm0, DWORD PTR _sLOD
	cvttss2si ecx, xmm0
	cmp	ecx, 1
	jge	SHORT $LN64@ScatterPlo
	mov	DWORD PTR tv395[ebp], 1
	jmp	SHORT $LN65@ScatterPlo
$LN64@ScatterPlo:
	movss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR _scaleZ$[ebp]
	mulss	xmm0, DWORD PTR _sLOD
	cvttss2si edx, xmm0
	mov	DWORD PTR tv395[ebp], edx
$LN65@ScatterPlo:
	mov	eax, DWORD PTR tv395[ebp]
	mov	DWORD PTR _numToPlot$[ebp], eax

; 3667 : 	else

	jmp	SHORT $LN44@ScatterPlo
$LN45@ScatterPlo:

; 3668 : 		numToPlot = max( 1, (int)(NUM_EXPLODE_SCATTER_POINTS * scaleZ * sLOD));

	movss	xmm0, DWORD PTR __real@41200000
	mulss	xmm0, DWORD PTR _scaleZ$[ebp]
	mulss	xmm0, DWORD PTR _sLOD
	cvttss2si ecx, xmm0
	cmp	ecx, 1
	jge	SHORT $LN66@ScatterPlo
	mov	DWORD PTR tv405[ebp], 1
	jmp	SHORT $LN67@ScatterPlo
$LN66@ScatterPlo:
	movss	xmm0, DWORD PTR __real@41200000
	mulss	xmm0, DWORD PTR _scaleZ$[ebp]
	mulss	xmm0, DWORD PTR _sLOD
	cvttss2si edx, xmm0
	mov	DWORD PTR tv405[ebp], edx
$LN67@ScatterPlo:
	mov	eax, DWORD PTR tv405[ebp]
	mov	DWORD PTR _numToPlot$[ebp], eax
$LN44@ScatterPlo:

; 3669 : 
; 3670 : 	// color and alpha
; 3671 : 	if ( doFivePoints )

	cmp	DWORD PTR _doFivePoints$[ebp], 0
	je	$LN43@ScatterPlo

; 3672 : 	{
; 3673 : 		vm.a = alpha;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+52]
	movss	DWORD PTR _vm$[ebp+20], xmm0

; 3674 : 		vm.r = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _vm$[ebp+8], xmm0

; 3675 : 		vm.g = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _vm$[ebp+12], xmm0

; 3676 : 		vm.b = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _vm$[ebp+16], xmm0

; 3677 : 		vm.csZ = spos.csZ;

	movss	xmm0, DWORD PTR _spos$[ebp+48]
	movss	DWORD PTR _vm$[ebp+48], xmm0

; 3678 : 		vm.clipFlag = 0;

	mov	DWORD PTR _vm$[ebp+36], 0

; 3679 : 		vm.q = v0.q;

	movss	xmm0, DWORD PTR _v0$[ebp+32]
	movss	DWORD PTR _vm$[ebp+32], xmm0

; 3680 : 		v0.a = v1.a = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1$[ebp+20], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+20]
	movss	DWORD PTR _v0$[ebp+20], xmm0

; 3681 : 		v2.a = v3.a = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v3$[ebp+20], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+20]
	movss	DWORD PTR _v2$[ebp+20], xmm0

; 3682 : 		v0.g = v2.g = v3.g = v1.g = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1$[ebp+12], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+12]
	movss	DWORD PTR _v3$[ebp+12], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+12]
	movss	DWORD PTR _v2$[ebp+12], xmm0
	movss	xmm0, DWORD PTR _v2$[ebp+12]
	movss	DWORD PTR _v0$[ebp+12], xmm0

; 3683 : 		// randomly tweak the edge RGB's to give a glowy kind of effect
; 3684 : 		if ( typeData.flags & NO_RANDOM_BLEND )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	and	eax, 4194304				; 00400000H
	je	SHORT $LN42@ScatterPlo

; 3685 : 		{
; 3686 : 			v0.r = v2.r = v3.r = v1.r = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+8]
	movss	DWORD PTR _v3$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+8]
	movss	DWORD PTR _v2$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _v2$[ebp+8]
	movss	DWORD PTR _v0$[ebp+8], xmm0

; 3687 : 			v0.b = v2.b = v3.b = v1.b = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+16]
	movss	DWORD PTR _v3$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+16]
	movss	DWORD PTR _v2$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _v2$[ebp+16]
	movss	DWORD PTR _v0$[ebp+16], xmm0

; 3688 : 		}
; 3689 : 		else

	jmp	$LN41@ScatterPlo
$LN42@ScatterPlo:

; 3690 : 		{
; 3691 : 			v0.r = v2.r = v3.r = v1.r = 0.1f + NRANDPOS * 0.8f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _v1$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+8]
	movss	DWORD PTR _v3$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+8]
	movss	DWORD PTR _v2$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _v2$[ebp+8]
	movss	DWORD PTR _v0$[ebp+8], xmm0

; 3692 : 			v0.b = v2.b = v3.b = v1.b = 0.1f + NRANDPOS * 0.8f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _v1$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+16]
	movss	DWORD PTR _v3$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+16]
	movss	DWORD PTR _v2$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _v2$[ebp+16]
	movss	DWORD PTR _v0$[ebp+16], xmm0
$LN41@ScatterPlo:

; 3693 : 		}

	jmp	$LN38@ScatterPlo
$LN43@ScatterPlo:

; 3694 : 	}
; 3695 : 	else if ( typeData.flags & EXPLODE_SCATTER_PLOT )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	and	edx, 65536				; 00010000H
	je	$LN39@ScatterPlo

; 3696 : 	{
; 3697 : 		v0.r = v1.r = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v1$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+8]
	movss	DWORD PTR _v0$[ebp+8], xmm0

; 3698 : 		v0.g = v1.g = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v1$[ebp+12], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+12]
	movss	DWORD PTR _v0$[ebp+12], xmm0

; 3699 : 		v0.b = v1.b = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v1$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+16]
	movss	DWORD PTR _v0$[ebp+16], xmm0

; 3700 : 		v0.a = v1.a = alpha * (1.0f - scaleZ);

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _scaleZ$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+52]
	movss	DWORD PTR _v1$[ebp+20], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+20]
	movss	DWORD PTR _v0$[ebp+20], xmm0

; 3701 : 		v2.r = v3.r = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v3$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+8]
	movss	DWORD PTR _v2$[ebp+8], xmm0

; 3702 : 		v2.g = v3.g = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v3$[ebp+12], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+12]
	movss	DWORD PTR _v2$[ebp+12], xmm0

; 3703 : 		v2.b = v3.b = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v3$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+16]
	movss	DWORD PTR _v2$[ebp+16], xmm0

; 3704 : 		v2.a = v3.a = alpha;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+52]
	movss	DWORD PTR _v3$[ebp+20], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+20]
	movss	DWORD PTR _v2$[ebp+20], xmm0

; 3705 : 	}
; 3706 : 	else

	jmp	$LN38@ScatterPlo
$LN39@ScatterPlo:

; 3707 : 	{
; 3708 : 		v0.r = v1.r = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+8]
	movss	DWORD PTR _v0$[ebp+8], xmm0

; 3709 : 		v0.g = v1.g = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1$[ebp+12], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+12]
	movss	DWORD PTR _v0$[ebp+12], xmm0

; 3710 : 		v0.b = v1.b = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+16]
	movss	DWORD PTR _v0$[ebp+16], xmm0

; 3711 : 		v0.a = v1.a = alpha * (1.0f - scaleZ);

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _scaleZ$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+52]
	movss	DWORD PTR _v1$[ebp+20], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+20]
	movss	DWORD PTR _v0$[ebp+20], xmm0

; 3712 : 		v2.r = v3.r = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v3$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+8]
	movss	DWORD PTR _v2$[ebp+8], xmm0

; 3713 : 		v2.g = v3.g = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v3$[ebp+12], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+12]
	movss	DWORD PTR _v2$[ebp+12], xmm0

; 3714 : 		v2.b = v3.b = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v3$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+16]
	movss	DWORD PTR _v2$[ebp+16], xmm0

; 3715 : 		v2.a = v3.a = alpha;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+52]
	movss	DWORD PTR _v3$[ebp+20], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+20]
	movss	DWORD PTR _v2$[ebp+20], xmm0
$LN38@ScatterPlo:

; 3716 : 	}
; 3717 : 
; 3718 : 
; 3719 : 	// now run the scatter loop
; 3720 : 	for ( i = 0; i < numToPlot; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN37@ScatterPlo
$LN36@ScatterPlo:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN37@ScatterPlo:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _numToPlot$[ebp]
	jge	$LN35@ScatterPlo

; 3721 : 	{
; 3722 : 		// center of this element
; 3723 : 		if ( typeData.flags & FIRE_SCATTER_PLOT )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	and	ecx, 8192				; 00002000H
	je	$LN34@ScatterPlo

; 3724 : 		{
; 3725 : 			dl.x = gFireScatterPoints[ curSFrame ][ i ].x * screenR + spos.x;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	imul	eax, 144				; 00000090H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gFireScatterPoints@@3PAY0M@UTpoint@@A[eax+ecx]
	mulss	xmm0, DWORD PTR _screenR$[ebp]
	addss	xmm0, DWORD PTR _spos$[ebp]
	movss	DWORD PTR _dl$[ebp], xmm0

; 3726 : 			if (gFireScatterPoints[ curSFrame ][ i ].y > 0.0f )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	imul	eax, 144				; 00000090H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gFireScatterPoints@@3PAY0M@UTpoint@@A[eax+ecx+4]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN33@ScatterPlo

; 3727 : 				dl.y = gFireScatterPoints[ curSFrame ][ i ].y * screenR + spos.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	imul	eax, 144				; 00000090H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gFireScatterPoints@@3PAY0M@UTpoint@@A[eax+ecx+4]
	mulss	xmm0, DWORD PTR _screenR$[ebp]
	addss	xmm0, DWORD PTR _spos$[ebp+4]
	movss	DWORD PTR _dl$[ebp+4], xmm0

; 3728 : 			else

	jmp	SHORT $LN32@ScatterPlo
$LN33@ScatterPlo:

; 3729 : 				dl.y = gFireScatterPoints[ curSFrame ][ i ].y * screenR * 1.5f + spos.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	imul	eax, 144				; 00000090H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gFireScatterPoints@@3PAY0M@UTpoint@@A[eax+ecx+4]
	mulss	xmm0, DWORD PTR _screenR$[ebp]
	mulss	xmm0, DWORD PTR __real@3fc00000
	addss	xmm0, DWORD PTR _spos$[ebp+4]
	movss	DWORD PTR _dl$[ebp+4], xmm0
$LN32@ScatterPlo:

; 3730 : 			elementR = gFireScatterPoints[ curSFrame ][ i ].z * elementRbase +
; 3731 : 						elementRbase * 0.25f;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	imul	eax, 144				; 00000090H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gFireScatterPoints@@3PAY0M@UTpoint@@A[eax+ecx+8]
	mulss	xmm0, DWORD PTR _elementRbase$[ebp]
	movss	xmm1, DWORD PTR _elementRbase$[ebp]
	mulss	xmm1, DWORD PTR __real@3e800000
	addss	xmm0, xmm1
	movss	DWORD PTR _elementR$[ebp], xmm0
	jmp	$LN24@ScatterPlo
$LN34@ScatterPlo:

; 3732 : 		}
; 3733 : 		else if ( typeData.flags & EXPLODE_SCATTER_PLOT )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	and	eax, 65536				; 00010000H
	je	$LN30@ScatterPlo

; 3734 : 		{
; 3735 : 			dl.x = gExplodeScatterPoints[ curSFrame ][ i ].x * screenR + spos.x;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	imul	edx, 120				; 00000078H
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gExplodeScatterPoints@@3PAY09UTpoint@@A[edx+eax]
	mulss	xmm0, DWORD PTR _screenR$[ebp]
	addss	xmm0, DWORD PTR _spos$[ebp]
	movss	DWORD PTR _dl$[ebp], xmm0

; 3736 : 			if (gExplodeScatterPoints[ curSFrame ][ i ].y > 0.0f )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	imul	edx, 120				; 00000078H
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gExplodeScatterPoints@@3PAY09UTpoint@@A[edx+eax+4]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN29@ScatterPlo

; 3737 : 				dl.y = gExplodeScatterPoints[ curSFrame ][ i ].y * screenR + spos.y;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	imul	edx, 120				; 00000078H
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gExplodeScatterPoints@@3PAY09UTpoint@@A[edx+eax+4]
	mulss	xmm0, DWORD PTR _screenR$[ebp]
	addss	xmm0, DWORD PTR _spos$[ebp+4]
	movss	DWORD PTR _dl$[ebp+4], xmm0

; 3738 : 			else

	jmp	SHORT $LN28@ScatterPlo
$LN29@ScatterPlo:

; 3739 : 				dl.y = gExplodeScatterPoints[ curSFrame ][ i ].y * screenR * 1.5f + spos.y;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	imul	edx, 120				; 00000078H
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gExplodeScatterPoints@@3PAY09UTpoint@@A[edx+eax+4]
	mulss	xmm0, DWORD PTR _screenR$[ebp]
	mulss	xmm0, DWORD PTR __real@3fc00000
	addss	xmm0, DWORD PTR _spos$[ebp+4]
	movss	DWORD PTR _dl$[ebp+4], xmm0
$LN28@ScatterPlo:

; 3740 : 			elementR = gExplodeScatterPoints[ curSFrame ][ i ].z * elementRbase +
; 3741 : 						elementRbase * 0.25f;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	imul	edx, 120				; 00000078H
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gExplodeScatterPoints@@3PAY09UTpoint@@A[edx+eax+8]
	mulss	xmm0, DWORD PTR _elementRbase$[ebp]
	movss	xmm1, DWORD PTR _elementRbase$[ebp]
	mulss	xmm1, DWORD PTR __real@3e800000
	addss	xmm0, xmm1
	movss	DWORD PTR _elementR$[ebp], xmm0

; 3742 : 			if ( !doFivePoints )

	cmp	DWORD PTR _doFivePoints$[ebp], 0
	jne	SHORT $LN25@ScatterPlo

; 3743 : 			{
; 3744 : 				if ( i == 0 )

	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN26@ScatterPlo

; 3745 : 				{
; 3746 : 					v0.a = v1.a = alpha;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+52]
	movss	DWORD PTR _v1$[ebp+20], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+20]
	movss	DWORD PTR _v0$[ebp+20], xmm0

; 3747 : 					v2.a = v3.a = alpha;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+52]
	movss	DWORD PTR _v3$[ebp+20], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+20]
	movss	DWORD PTR _v2$[ebp+20], xmm0

; 3748 : 				}
; 3749 : 				else

	jmp	SHORT $LN25@ScatterPlo
$LN26@ScatterPlo:

; 3750 : 				{
; 3751 : 					v0.a = v1.a = 0.45f;

	movss	xmm0, DWORD PTR __real@3ee66666
	movss	DWORD PTR _v1$[ebp+20], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+20]
	movss	DWORD PTR _v0$[ebp+20], xmm0

; 3752 : 					v2.a = v3.a = 0.45f;

	movss	xmm0, DWORD PTR __real@3ee66666
	movss	DWORD PTR _v3$[ebp+20], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+20]
	movss	DWORD PTR _v2$[ebp+20], xmm0
$LN25@ScatterPlo:

; 3753 : 				}
; 3754 : 			}
; 3755 : 		}
; 3756 : 		else

	jmp	$LN24@ScatterPlo
$LN30@ScatterPlo:

; 3757 : 		{
; 3758 : 			dl.x = gSmokeScatterPoints[ curSFrame ][ i ].x * screenR + spos.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gSmokeScatterPoints@@3PAY00UTpoint@@A[ecx+edx]
	mulss	xmm0, DWORD PTR _screenR$[ebp]
	addss	xmm0, DWORD PTR _spos$[ebp]
	movss	DWORD PTR _dl$[ebp], xmm0

; 3759 : 			if (gSmokeScatterPoints[ curSFrame ][ i ].y > 0.0f )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gSmokeScatterPoints@@3PAY00UTpoint@@A[ecx+edx+4]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN23@ScatterPlo

; 3760 : 				dl.y = gSmokeScatterPoints[ curSFrame ][ i ].y * screenR + spos.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gSmokeScatterPoints@@3PAY00UTpoint@@A[ecx+edx+4]
	mulss	xmm0, DWORD PTR _screenR$[ebp]
	addss	xmm0, DWORD PTR _spos$[ebp+4]
	movss	DWORD PTR _dl$[ebp+4], xmm0

; 3761 : 			else

	jmp	SHORT $LN22@ScatterPlo
$LN23@ScatterPlo:

; 3762 : 				dl.y = gSmokeScatterPoints[ curSFrame ][ i ].y * screenR * 1.5f + spos.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gSmokeScatterPoints@@3PAY00UTpoint@@A[ecx+edx+4]
	mulss	xmm0, DWORD PTR _screenR$[ebp]
	mulss	xmm0, DWORD PTR __real@3fc00000
	addss	xmm0, DWORD PTR _spos$[ebp+4]
	movss	DWORD PTR _dl$[ebp+4], xmm0
$LN22@ScatterPlo:

; 3763 : 			elementR = gSmokeScatterPoints[ curSFrame ][ i ].z * elementRbase +
; 3764 : 						elementRbase * 0.25f;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	movss	xmm0, DWORD PTR ?gSmokeScatterPoints@@3PAY00UTpoint@@A[ecx+edx+8]
	mulss	xmm0, DWORD PTR _elementRbase$[ebp]
	movss	xmm1, DWORD PTR _elementRbase$[ebp]
	mulss	xmm1, DWORD PTR __real@3e800000
	addss	xmm0, xmm1
	movss	DWORD PTR _elementR$[ebp], xmm0
$LN24@ScatterPlo:

; 3765 : 		}
; 3766 : 
; 3767 : 		// we do our own clipping checks -- for now, any point not within
; 3768 : 		// screen bounds, we toss the entire element
; 3769 : 		if ( dl.x < left || dl.y < top || dl.x > right || dl.y > bottom )

	movss	xmm0, DWORD PTR _left$[ebp]
	comiss	xmm0, DWORD PTR _dl$[ebp]
	ja	SHORT $LN20@ScatterPlo
	movss	xmm0, DWORD PTR _top$[ebp]
	comiss	xmm0, DWORD PTR _dl$[ebp+4]
	ja	SHORT $LN20@ScatterPlo
	movss	xmm0, DWORD PTR _dl$[ebp]
	comiss	xmm0, DWORD PTR _right$[ebp]
	ja	SHORT $LN20@ScatterPlo
	movss	xmm0, DWORD PTR _dl$[ebp+4]
	comiss	xmm0, DWORD PTR _bottom$[ebp]
	jbe	SHORT $LN21@ScatterPlo
$LN20@ScatterPlo:

; 3770 : 			continue;

	jmp	$LN36@ScatterPlo
$LN21@ScatterPlo:

; 3771 : 
; 3772 : 		v0.x = dl.x - elementR;

	movss	xmm0, DWORD PTR _dl$[ebp]
	subss	xmm0, DWORD PTR _elementR$[ebp]
	movss	DWORD PTR _v0$[ebp], xmm0

; 3773 : 		v0.y = dl.y - elementR;

	movss	xmm0, DWORD PTR _dl$[ebp+4]
	subss	xmm0, DWORD PTR _elementR$[ebp]
	movss	DWORD PTR _v0$[ebp+4], xmm0

; 3774 : 		if ( v0.x < left || v0.y < top || v0.x > right || v0.y > bottom )

	movss	xmm0, DWORD PTR _left$[ebp]
	comiss	xmm0, DWORD PTR _v0$[ebp]
	ja	SHORT $LN18@ScatterPlo
	movss	xmm0, DWORD PTR _top$[ebp]
	comiss	xmm0, DWORD PTR _v0$[ebp+4]
	ja	SHORT $LN18@ScatterPlo
	movss	xmm0, DWORD PTR _v0$[ebp]
	comiss	xmm0, DWORD PTR _right$[ebp]
	ja	SHORT $LN18@ScatterPlo
	movss	xmm0, DWORD PTR _v0$[ebp+4]
	comiss	xmm0, DWORD PTR _bottom$[ebp]
	jbe	SHORT $LN19@ScatterPlo
$LN18@ScatterPlo:

; 3775 : 			continue;

	jmp	$LN36@ScatterPlo
$LN19@ScatterPlo:

; 3776 : 
; 3777 : 		v1.x = dl.x + elementR;

	movss	xmm0, DWORD PTR _dl$[ebp]
	addss	xmm0, DWORD PTR _elementR$[ebp]
	movss	DWORD PTR _v1$[ebp], xmm0

; 3778 : 		v1.y = dl.y - elementR;

	movss	xmm0, DWORD PTR _dl$[ebp+4]
	subss	xmm0, DWORD PTR _elementR$[ebp]
	movss	DWORD PTR _v1$[ebp+4], xmm0

; 3779 : 		if ( v1.x < left || v1.y < top || v1.x > right || v1.y > bottom )

	movss	xmm0, DWORD PTR _left$[ebp]
	comiss	xmm0, DWORD PTR _v1$[ebp]
	ja	SHORT $LN16@ScatterPlo
	movss	xmm0, DWORD PTR _top$[ebp]
	comiss	xmm0, DWORD PTR _v1$[ebp+4]
	ja	SHORT $LN16@ScatterPlo
	movss	xmm0, DWORD PTR _v1$[ebp]
	comiss	xmm0, DWORD PTR _right$[ebp]
	ja	SHORT $LN16@ScatterPlo
	movss	xmm0, DWORD PTR _v1$[ebp+4]
	comiss	xmm0, DWORD PTR _bottom$[ebp]
	jbe	SHORT $LN17@ScatterPlo
$LN16@ScatterPlo:

; 3780 : 			continue;

	jmp	$LN36@ScatterPlo
$LN17@ScatterPlo:

; 3781 : 
; 3782 : 		v2.x = dl.x + elementR;

	movss	xmm0, DWORD PTR _dl$[ebp]
	addss	xmm0, DWORD PTR _elementR$[ebp]
	movss	DWORD PTR _v2$[ebp], xmm0

; 3783 : 		v2.y = dl.y + elementR;

	movss	xmm0, DWORD PTR _dl$[ebp+4]
	addss	xmm0, DWORD PTR _elementR$[ebp]
	movss	DWORD PTR _v2$[ebp+4], xmm0

; 3784 : 		if ( v2.x < left || v2.y < top || v2.x > right || v2.y > bottom )

	movss	xmm0, DWORD PTR _left$[ebp]
	comiss	xmm0, DWORD PTR _v2$[ebp]
	ja	SHORT $LN14@ScatterPlo
	movss	xmm0, DWORD PTR _top$[ebp]
	comiss	xmm0, DWORD PTR _v2$[ebp+4]
	ja	SHORT $LN14@ScatterPlo
	movss	xmm0, DWORD PTR _v2$[ebp]
	comiss	xmm0, DWORD PTR _right$[ebp]
	ja	SHORT $LN14@ScatterPlo
	movss	xmm0, DWORD PTR _v2$[ebp+4]
	comiss	xmm0, DWORD PTR _bottom$[ebp]
	jbe	SHORT $LN15@ScatterPlo
$LN14@ScatterPlo:

; 3785 : 			continue;

	jmp	$LN36@ScatterPlo
$LN15@ScatterPlo:

; 3786 : 
; 3787 : 		v3.x = dl.x - elementR;

	movss	xmm0, DWORD PTR _dl$[ebp]
	subss	xmm0, DWORD PTR _elementR$[ebp]
	movss	DWORD PTR _v3$[ebp], xmm0

; 3788 : 		v3.y = dl.y + elementR;

	movss	xmm0, DWORD PTR _dl$[ebp+4]
	addss	xmm0, DWORD PTR _elementR$[ebp]
	movss	DWORD PTR _v3$[ebp+4], xmm0

; 3789 : 		if ( v3.x < left || v3.y < top || v3.x > right || v3.y > bottom )

	movss	xmm0, DWORD PTR _left$[ebp]
	comiss	xmm0, DWORD PTR _v3$[ebp]
	ja	SHORT $LN12@ScatterPlo
	movss	xmm0, DWORD PTR _top$[ebp]
	comiss	xmm0, DWORD PTR _v3$[ebp+4]
	ja	SHORT $LN12@ScatterPlo
	movss	xmm0, DWORD PTR _v3$[ebp]
	comiss	xmm0, DWORD PTR _right$[ebp]
	ja	SHORT $LN12@ScatterPlo
	movss	xmm0, DWORD PTR _v3$[ebp+4]
	comiss	xmm0, DWORD PTR _bottom$[ebp]
	jbe	SHORT $LN13@ScatterPlo
$LN12@ScatterPlo:

; 3790 : 			continue;

	jmp	$LN36@ScatterPlo
$LN13@ScatterPlo:

; 3791 : 
; 3792 : 		if ( typeData.flags & ANIM_NO_CLAMP )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN11@ScatterPlo

; 3793 : 		{
; 3794 : 			// ANIM_NO_CLAMP uses a type of sequence animation: the frames
; 3795 : 			// are sequenced and staggered such that the 1st point begins
; 3796 : 			// the animation followed by point 2, etc....  Usefull for
; 3797 : 			// rippling type explosions
; 3798 : 			int texseq = curFrame - i;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	sub	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _texseq$2[ebp], eax

; 3799 : 
; 3800 : 			if ( texseq < 0 || texseq >= typeData.numTextures )

	js	SHORT $LN9@ScatterPlo
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _texseq$2[ebp]
	cmp	edx, DWORD PTR [ecx+116]
	jl	SHORT $LN10@ScatterPlo
$LN9@ScatterPlo:

; 3801 : 				continue;

	jmp	$LN36@ScatterPlo
$LN10@ScatterPlo:

; 3802 : 
; 3803 : 			texseq += typeData.startTexture;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _texseq$2[ebp]
	add	ecx, DWORD PTR [eax+112]
	mov	DWORD PTR _texseq$2[ebp], ecx

; 3804 : 			v1.u = gTexUV[ texseq ].u;

	mov	edx, DWORD PTR _texseq$2[ebp]
	movss	xmm0, DWORD PTR ?gTexUV@@3PAUUV@@A[edx*8]
	movss	DWORD PTR _v1$[ebp+24], xmm0

; 3805 : 			v1.v = gTexUV[ texseq ].v;

	mov	eax, DWORD PTR _texseq$2[ebp]
	movss	xmm0, DWORD PTR ?gTexUV@@3PAUUV@@A[eax*8+4]
	movss	DWORD PTR _v1$[ebp+28], xmm0
	jmp	$LN6@ScatterPlo
$LN11@ScatterPlo:

; 3806 : 		}
; 3807 : 		else if ( typeData.flags & SEQ_SCATTER_ANIM )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	and	edx, 131072				; 00020000H
	je	SHORT $LN7@ScatterPlo

; 3808 : 		{
; 3809 : 			int texseq = typeData.startTexture + (curFrame+i) % typeData.numTextures;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+64]
	add	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cdq
	idiv	DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+112]
	mov	DWORD PTR _texseq$1[ebp], edx

; 3810 : 
; 3811 : 			v1.u = gTexUV[ texseq ].u;

	mov	ecx, DWORD PTR _texseq$1[ebp]
	movss	xmm0, DWORD PTR ?gTexUV@@3PAUUV@@A[ecx*8]
	movss	DWORD PTR _v1$[ebp+24], xmm0

; 3812 : 			v1.v = gTexUV[ texseq ].v;

	mov	edx, DWORD PTR _texseq$1[ebp]
	movss	xmm0, DWORD PTR ?gTexUV@@3PAUUV@@A[edx*8+4]
	movss	DWORD PTR _v1$[ebp+28], xmm0

; 3813 : 		}
; 3814 : 		else

	jmp	SHORT $LN6@ScatterPlo
$LN7@ScatterPlo:

; 3815 : 		{
; 3816 : 			v1.u = gTexUV[ typeData.startTexture + curFrame].u;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+64]
	movss	xmm0, DWORD PTR ?gTexUV@@3PAUUV@@A[ecx*8]
	movss	DWORD PTR _v1$[ebp+24], xmm0

; 3817 : 			v1.v = gTexUV[ typeData.startTexture + curFrame].v;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+64]
	movss	xmm0, DWORD PTR ?gTexUV@@3PAUUV@@A[ecx*8+4]
	movss	DWORD PTR _v1$[ebp+28], xmm0
$LN6@ScatterPlo:

; 3818 : 		}
; 3819 : 
; 3820 : 		v0.u = v1.u + TEX_UV_DIM;

	movss	xmm0, DWORD PTR _v1$[ebp+24]
	addss	xmm0, DWORD PTR __real@3e7be76d
	movss	DWORD PTR _v0$[ebp+24], xmm0

; 3821 : 		v0.v = v1.v;

	movss	xmm0, DWORD PTR _v1$[ebp+28]
	movss	DWORD PTR _v0$[ebp+28], xmm0

; 3822 : 		v3.u = v1.u + TEX_UV_DIM;

	movss	xmm0, DWORD PTR _v1$[ebp+24]
	addss	xmm0, DWORD PTR __real@3e7be76d
	movss	DWORD PTR _v3$[ebp+24], xmm0

; 3823 : 		v3.v = v1.v + TEX_UV_DIM;

	movss	xmm0, DWORD PTR _v1$[ebp+28]
	addss	xmm0, DWORD PTR __real@3e7be76d
	movss	DWORD PTR _v3$[ebp+28], xmm0

; 3824 : 		v2.u = v1.u;

	movss	xmm0, DWORD PTR _v1$[ebp+24]
	movss	DWORD PTR _v2$[ebp+24], xmm0

; 3825 : 		v2.v = v1.v + TEX_UV_DIM;

	movss	xmm0, DWORD PTR _v1$[ebp+28]
	addss	xmm0, DWORD PTR __real@3e7be76d
	movss	DWORD PTR _v2$[ebp+28], xmm0

; 3826 : 
; 3827 : 		// do a middle point....
; 3828 : 		if ( doFivePoints )

	cmp	DWORD PTR _doFivePoints$[ebp], 0
	je	$LN5@ScatterPlo

; 3829 : 		{
; 3830 : 			vm.x = dl.x;

	movss	xmm0, DWORD PTR _dl$[ebp]
	movss	DWORD PTR _vm$[ebp], xmm0

; 3831 : 			vm.y = dl.y;

	movss	xmm0, DWORD PTR _dl$[ebp+4]
	movss	DWORD PTR _vm$[ebp+4], xmm0

; 3832 : 			vm.u = v1.u + TEX_UV_DIM * 0.5f;

	movss	xmm0, DWORD PTR _v1$[ebp+24]
	addss	xmm0, DWORD PTR __real@3dfbe76d
	movss	DWORD PTR _vm$[ebp+24], xmm0

; 3833 : 			vm.v = v1.v + TEX_UV_DIM * 0.5f;

	movss	xmm0, DWORD PTR _v1$[ebp+28]
	addss	xmm0, DWORD PTR __real@3dfbe76d
	movss	DWORD PTR _vm$[ebp+28], xmm0

; 3834 : 			bool gif = false;

	mov	BYTE PTR _gif$3[ebp], 0

; 3835 : 			if (g_nGfxFix & 0x02)

	mov	eax, DWORD PTR ?g_nGfxFix@@3HA		; g_nGfxFix
	and	eax, 2
	je	SHORT $LN4@ScatterPlo

; 3836 : 				gif = true;

	mov	BYTE PTR _gif$3[ebp], 1
$LN4@ScatterPlo:

; 3837 : 				
; 3838 : 			renderer->DrawTriangle( &v0, &v1, &vm, CULL_ALLOW_ALL, gif );

	push	0
	movzx	ecx, BYTE PTR _gif$3[ebp]
	push	ecx
	push	0
	lea	edx, DWORD PTR _vm$[ebp]
	push	edx
	lea	eax, DWORD PTR _v1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v0$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?DrawTriangle@Render3D@@QAEXPAUThreeDVertex@@00H_N1@Z ; Render3D::DrawTriangle

; 3839 : 			renderer->DrawTriangle( &v1, &v2, &vm, CULL_ALLOW_ALL, gif );

	push	0
	movzx	edx, BYTE PTR _gif$3[ebp]
	push	edx
	push	0
	lea	eax, DWORD PTR _vm$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v1$[ebp]
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?DrawTriangle@Render3D@@QAEXPAUThreeDVertex@@00H_N1@Z ; Render3D::DrawTriangle

; 3840 : 			renderer->DrawTriangle( &v2, &v3, &vm, CULL_ALLOW_ALL, gif );

	push	0
	movzx	eax, BYTE PTR _gif$3[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _vm$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v3$[ebp]
	push	edx
	lea	eax, DWORD PTR _v2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?DrawTriangle@Render3D@@QAEXPAUThreeDVertex@@00H_N1@Z ; Render3D::DrawTriangle

; 3841 : 			renderer->DrawTriangle( &v3, &v0, &vm, CULL_ALLOW_ALL, gif );

	push	0
	movzx	ecx, BYTE PTR _gif$3[ebp]
	push	ecx
	push	0
	lea	edx, DWORD PTR _vm$[ebp]
	push	edx
	lea	eax, DWORD PTR _v0$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v3$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?DrawTriangle@Render3D@@QAEXPAUThreeDVertex@@00H_N1@Z ; Render3D::DrawTriangle

; 3842 : 		}
; 3843 : 		else

	jmp	SHORT $LN1@ScatterPlo
$LN5@ScatterPlo:

; 3844 : 		{
; 3845 : 			if (g_nGfxFix & 0x02)

	mov	edx, DWORD PTR ?g_nGfxFix@@3HA		; g_nGfxFix
	and	edx, 2
	je	SHORT $LN2@ScatterPlo

; 3846 : 				renderer->DrawSquare( &v0, &v1, &v2, &v3, CULL_ALLOW_ALL, true);

	push	0
	push	1
	push	0
	lea	eax, DWORD PTR _v3$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v1$[ebp]
	push	edx
	lea	eax, DWORD PTR _v0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?DrawSquare@Render3D@@QAEXPAUThreeDVertex@@000H_N1@Z ; Render3D::DrawSquare

; 3847 : 			else 

	jmp	SHORT $LN1@ScatterPlo
$LN2@ScatterPlo:

; 3848 : 				renderer->DrawSquare( &v0, &v1, &v2, &v3, CULL_ALLOW_ALL );

	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR _v3$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v2$[ebp]
	push	edx
	lea	eax, DWORD PTR _v1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v0$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?DrawSquare@Render3D@@QAEXPAUThreeDVertex@@000H_N1@Z ; Render3D::DrawSquare
$LN1@ScatterPlo:

; 3849 : 		}
; 3850 : 
; 3851 : 	}

	jmp	$LN36@ScatterPlo
$LN35@ScatterPlo:
$LN58@ScatterPlo:

; 3852 : 
; 3853 : };

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?ScatterPlot@Drawable2D@@IAEXPAVRenderOTW@@@Z ENDP	; Drawable2D::ScatterPlot
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\draw2d.cpp
_TEXT	SEGMENT
_num$ = -24						; size = 4
_rem$ = -20						; size = 4
tv94 = -16						; size = 4
_ms$ = -12						; size = 4
_newFrame$ = -8						; size = 4
_this$ = -4						; size = 4
_dT$ = 8						; size = 4
_start$ = 12						; size = 4
?GetAnimFrame@Drawable2D@@IAEHHK@Z PROC			; Drawable2D::GetAnimFrame
; _this$ = ecx

; 3083 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 3084 : 	int ms;
; 3085 : 	int num;
; 3086 : 	int rem;
; 3087 : 	int newFrame;
; 3088 : 
; 3089 : 	if ( dT <= 0 )

	cmp	DWORD PTR _dT$[ebp], 0
	jg	SHORT $LN36@GetAnimFra

; 3090 : 		return 0;

	xor	eax, eax
	jmp	$LN37@GetAnimFra
$LN36@GetAnimFra:

; 3091 : 
; 3092 : 	if ( typeData.flags & ANIM_HALF_RATE )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	and	ecx, 4096				; 00001000H
	je	SHORT $LN35@GetAnimFra

; 3093 : 	{
; 3094 : 		ms = 104;

	mov	DWORD PTR _ms$[ebp], 104		; 00000068H

; 3095 : 	}
; 3096 : 	else

	jmp	SHORT $LN34@GetAnimFra
$LN35@GetAnimFra:

; 3097 : 	{
; 3098 : 		ms = 62;

	mov	DWORD PTR _ms$[ebp], 62			; 0000003eH
$LN34@GetAnimFra:

; 3099 : 	}
; 3100 : 	if ( typeData.flags & (FIRE_SCATTER_PLOT | SMOKE_SCATTER_PLOT | EXPLODE_SCATTER_PLOT) )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	and	eax, 90112				; 00016000H
	je	$LN33@GetAnimFra

; 3101 : 	{
; 3102 : 		// ms = 124;
; 3103 : 		curSFrame = dT/164 + startSFrame;

	mov	eax, DWORD PTR _dT$[ebp]
	cdq
	mov	ecx, 164				; 000000a4H
	idiv	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+92]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+68], eax

; 3104 : 		if ( curSFrame >= typeData.numGlowVerts )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+68]
	cmp	ecx, DWORD PTR [eax+128]
	jl	SHORT $LN32@GetAnimFra

; 3105 : 		{
; 3106 : 			startSFrame = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+92], 0

; 3107 : 			curSFrame = curSFrame % typeData.numGlowVerts;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+68]
	cdq
	idiv	DWORD PTR [ecx+128]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], edx
$LN32@GetAnimFra:

; 3108 : 		}
; 3109 : 
; 3110 : 		// hack for fireball
; 3111 : 		if ( type >= DRAW2D_FIRE1 && type <= DRAW2D_FIRE6 )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 44			; 0000002cH
	jl	$LN33@GetAnimFra
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 49			; 00000031H
	jg	$LN33@GetAnimFra

; 3112 : 		{
; 3113 : 			if ( curBFrame >= 6 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+76], 6
	jl	SHORT $LN30@GetAnimFra

; 3114 : 			{
; 3115 : 				return 0;

	xor	eax, eax
	jmp	$LN37@GetAnimFra

; 3116 : 			}
; 3117 : 			else

	jmp	$LN33@GetAnimFra
$LN30@GetAnimFra:

; 3118 : 			{
; 3119 : 				switch (type )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR tv94[ebp], edx
	cmp	DWORD PTR tv94[ebp], 47			; 0000002fH
	je	SHORT $LN26@GetAnimFra
	cmp	DWORD PTR tv94[ebp], 48			; 00000030H
	je	SHORT $LN25@GetAnimFra
	jmp	SHORT $LN24@GetAnimFra
$LN26@GetAnimFra:

; 3120 : 				{
; 3121 : 					case DRAW2D_FIRE4:
; 3122 : 						curBFrame = dT/100;

	mov	eax, DWORD PTR _dT$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+76], eax

; 3123 : 						break;

	jmp	SHORT $LN27@GetAnimFra
$LN25@GetAnimFra:

; 3124 : 					case DRAW2D_FIRE5:
; 3125 : 						curBFrame = dT/50;

	mov	eax, DWORD PTR _dT$[ebp]
	cdq
	mov	ecx, 50					; 00000032H
	idiv	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+76], eax

; 3126 : 						break;

	jmp	SHORT $LN27@GetAnimFra
$LN24@GetAnimFra:

; 3127 : 					default:
; 3128 : 						curBFrame = dT/400;

	mov	eax, DWORD PTR _dT$[ebp]
	cdq
	mov	ecx, 400				; 00000190H
	idiv	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+76], eax
$LN27@GetAnimFra:

; 3129 : 						break;
; 3130 : 				}
; 3131 : 				if ( curBFrame >= 6 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+76], 6
	jl	$LN33@GetAnimFra

; 3132 : 				{
; 3133 : 					if ( typeData.flags & FADE_LAST )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	and	edx, 16					; 00000010H
	je	SHORT $LN22@GetAnimFra

; 3134 : 					{
; 3135 : 						alphaStartTime = start + dT;

	mov	eax, DWORD PTR _start$[ebp]
	add	eax, DWORD PTR _dT$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+84], eax

; 3136 : 						startFade = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+136], 1
$LN22@GetAnimFra:

; 3137 : 					}
; 3138 : 
; 3139 : 					if ( type == DRAW2D_FIRE3 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 46			; 0000002eH
	jne	SHORT $LN21@GetAnimFra

; 3140 : 						curBFrame = 7;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+76], 7
	jmp	SHORT $LN20@GetAnimFra
$LN21@GetAnimFra:

; 3141 : 					else if ( type == DRAW2D_FIRE5 )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 48			; 00000030H
	jne	SHORT $LN19@GetAnimFra

; 3142 : 					{
; 3143 : 						if ( rand() & 1 )

	call	_rand
	and	eax, 1
	je	SHORT $LN18@GetAnimFra

; 3144 : 							curBFrame = 8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+76], 8

; 3145 : 						else

	jmp	SHORT $LN17@GetAnimFra
$LN18@GetAnimFra:

; 3146 : 							curBFrame = 6;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+76], 6
$LN17@GetAnimFra:
	jmp	SHORT $LN20@GetAnimFra
$LN19@GetAnimFra:

; 3147 : 					}
; 3148 : 					else if ( type == DRAW2D_FIRE4 || type == DRAW2D_FIRE1 )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 47			; 0000002fH
	je	SHORT $LN14@GetAnimFra
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 44			; 0000002cH
	jne	SHORT $LN15@GetAnimFra
$LN14@GetAnimFra:

; 3149 : 					{
; 3150 : 						if ( rand() & 1 )

	call	_rand
	and	eax, 1
	je	SHORT $LN13@GetAnimFra

; 3151 : 							curBFrame = 10;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+76], 10			; 0000000aH

; 3152 : 						else

	jmp	SHORT $LN12@GetAnimFra
$LN13@GetAnimFra:

; 3153 : 							curBFrame = 6;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+76], 6
$LN12@GetAnimFra:

; 3154 : 					}
; 3155 : 					else

	jmp	SHORT $LN20@GetAnimFra
$LN15@GetAnimFra:

; 3156 : 						curBFrame = 6;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+76], 6
$LN20@GetAnimFra:

; 3157 : 
; 3158 : 					return 0;

	xor	eax, eax
	jmp	$LN37@GetAnimFra
$LN33@GetAnimFra:

; 3159 : 				}
; 3160 : 			}
; 3161 : 		}
; 3162 : 
; 3163 : 	}
; 3164 : 
; 3165 : 	newFrame = dT/ms;

	mov	eax, DWORD PTR _dT$[ebp]
	cdq
	idiv	DWORD PTR _ms$[ebp]
	mov	DWORD PTR _newFrame$[ebp], eax

; 3166 : 	if ( newFrame >= typeData.numTextures )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newFrame$[ebp]
	cmp	edx, DWORD PTR [ecx+116]
	jl	$LN10@GetAnimFra

; 3167 : 	{
; 3168 : 		if ( typeData.flags & ANIM_LOOP_PING )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	and	ecx, 8
	je	SHORT $LN9@GetAnimFra

; 3169 : 		{
; 3170 : 			num = newFrame / typeData.numTextures;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newFrame$[ebp]
	cdq
	idiv	DWORD PTR [ecx+116]
	mov	DWORD PTR _num$[ebp], eax

; 3171 : 			rem = newFrame % typeData.numTextures;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newFrame$[ebp]
	cdq
	idiv	DWORD PTR [ecx+116]
	mov	DWORD PTR _rem$[ebp], edx

; 3172 : 			// if num is odd, we're going backwards
; 3173 : 			if ( num & 1 )

	mov	edx, DWORD PTR _num$[ebp]
	and	edx, 1
	je	SHORT $LN8@GetAnimFra

; 3174 : 			{
; 3175 : 				newFrame = typeData.numTextures - 1 - rem;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	sub	ecx, 1
	sub	ecx, DWORD PTR _rem$[ebp]
	mov	DWORD PTR _newFrame$[ebp], ecx

; 3176 : 			}
; 3177 : 			else

	jmp	SHORT $LN7@GetAnimFra
$LN8@GetAnimFra:

; 3178 : 			{
; 3179 : 				newFrame = rem;

	mov	edx, DWORD PTR _rem$[ebp]
	mov	DWORD PTR _newFrame$[ebp], edx
$LN7@GetAnimFra:

; 3180 : 			}

	jmp	SHORT $LN10@GetAnimFra
$LN9@GetAnimFra:

; 3181 : 		}
; 3182 : 		else if ( typeData.flags & ANIM_LOOP )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	and	ecx, 4
	je	SHORT $LN5@GetAnimFra

; 3183 : 		{
; 3184 : 			newFrame = newFrame % typeData.numTextures;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newFrame$[ebp]
	cdq
	idiv	DWORD PTR [ecx+116]
	mov	DWORD PTR _newFrame$[ebp], edx
	jmp	SHORT $LN10@GetAnimFra
$LN5@GetAnimFra:

; 3185 : 		}
; 3186 : 		else if ( typeData.flags & ANIM_NO_CLAMP )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	and	eax, 262144				; 00040000H
	je	SHORT $LN3@GetAnimFra

; 3187 : 		{
; 3188 : 			// do nothing
; 3189 : 		}
; 3190 : 		else // non looping

	jmp	SHORT $LN10@GetAnimFra
$LN3@GetAnimFra:

; 3191 : 		{
; 3192 : 			newFrame = typeData.numTextures;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	DWORD PTR _newFrame$[ebp], edx

; 3193 : 			if ( typeData.flags & FADE_LAST )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	and	ecx, 16					; 00000010H
	je	SHORT $LN10@GetAnimFra

; 3194 : 			{
; 3195 : 				alphaStartTime = start + typeData.numTextures * ms;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	imul	eax, DWORD PTR _ms$[ebp]
	add	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+84], eax

; 3196 : 				startFade = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+136], 1
$LN10@GetAnimFra:

; 3197 : 			}
; 3198 : 		}
; 3199 : 	}
; 3200 : 
; 3201 : 	return newFrame;

	mov	eax, DWORD PTR _newFrame$[ebp]
$LN37@GetAnimFra:

; 3202 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetAnimFrame@Drawable2D@@IAEHHK@Z ENDP			; Drawable2D::GetAnimFrame
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\draw2d.cpp
_TEXT	SEGMENT
tv742 = -328						; size = 4
tv668 = -324						; size = 4
tv737 = -320						; size = 4
_dz$ = -316						; size = 4
_dx$ = -312						; size = 4
_dy$ = -308						; size = 4
_mag$ = -304						; size = 4
_normalizer$ = -300					; size = 4
_uvStart$ = -296					; size = 8
_widthX$ = -288						; size = 4
_widthZ$ = -284						; size = 4
_widthY$ = -280						; size = 4
_this$ = -276						; size = 4
_v2$ = -272						; size = 52
_v0$ = -220						; size = 52
_v3$ = -168						; size = 52
_v1$ = -116						; size = 52
_UP$ = -64						; size = 12
_right$ = -52						; size = 12
_left$ = -40						; size = 12
_DOV$ = -28						; size = 12
_end$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_renderer$ = 8						; size = 4
___formal$ = 12						; size = 4
?DrawTexturedCone@Drawable2D@@IAEXPAVRenderOTW@@H@Z PROC ; Drawable2D::DrawTexturedCone
; _this$ = ecx

; 3866 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 3867 : 	Tpoint	left, right;
; 3868 : 	Tpoint	DOV, UP;
; 3869 : 	float	dx, dy, dz;
; 3870 : 	float	widthX, widthY, widthZ;
; 3871 : 	float	mag, normalizer;
; 3872 : 	Tpoint  end;
; 3873 : 	ThreeDVertex		v0, v1, v2, v3;
; 3874 : 	UV					uvStart;
; 3875 : 
; 3876 : 	// setup rendering context
; 3877 : //	if(renderer->GetAlphaMode()) //JAM - FIXME
; 3878 : 		renderer->context.RestoreState(STATE_ALPHA_TEXTURE_GOURAUD_PERSPECTIVE);

	push	33					; 00000021H
	mov	ecx, DWORD PTR _renderer$[ebp]
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 3879 : //	else
; 3880 : //		renderer->context.RestoreState(STATE_ALPHA_TEXTURE_PERSPECTIVE);
; 3881 : 
; 3882 : 	renderer->context.SetState(MPR_STA_ALPHA_OP_FUNCTION,MPR_TO_MODULATE); //JAM 18Oct03

	push	4
	push	5
	mov	ecx, DWORD PTR _renderer$[ebp]
	add	ecx, 100				; 00000064H
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 3883 : 	renderer->context.SelectTexture1( curTex->TexHandle() );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	call	?TexHandle@Texture@@QAEKXZ		; Texture::TexHandle
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	add	ecx, 100				; 00000064H
	call	?SelectTexture1@ContextMPR@@QAEXH@Z	; ContextMPR::SelectTexture1

; 3884 : 
; 3885 : 	// get the end point
; 3886 : 	end.x = orientation.M11 * typeData.glowVerts->x * realRadius * scale2d + position.x;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+260]
	mulss	xmm0, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+252]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+248]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _end$[ebp], xmm0

; 3887 : 	end.y = orientation.M12 * typeData.glowVerts->x * realRadius * scale2d + position.y;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+264]
	mulss	xmm0, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+252]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+248]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _end$[ebp+4], xmm0

; 3888 : 	end.z = orientation.M13 * typeData.glowVerts->x * realRadius * scale2d + position.z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+268]
	mulss	xmm0, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+252]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+248]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _end$[ebp+8], xmm0

; 3889 : 	
; 3890 : 	// Get the vector from the eye to the trail segment in world space
; 3891 : 	DOV.x = end.x - renderer->X();

	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?X@Render3D@@QAEMXZ			; Render3D::X
	fstp	DWORD PTR tv668[ebp]
	movss	xmm0, DWORD PTR _end$[ebp]
	subss	xmm0, DWORD PTR tv668[ebp]
	movss	DWORD PTR _DOV$[ebp], xmm0

; 3892 : 	DOV.y = end.y - renderer->Y();

	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?Y@Render3D@@QAEMXZ			; Render3D::Y
	fstp	DWORD PTR tv737[ebp]
	movss	xmm0, DWORD PTR _end$[ebp+4]
	subss	xmm0, DWORD PTR tv737[ebp]
	movss	DWORD PTR _DOV$[ebp+4], xmm0

; 3893 : 	DOV.z = end.z - renderer->Z();

	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?Z@Render3D@@QAEMXZ			; Render3D::Z
	fstp	DWORD PTR tv742[ebp]
	movss	xmm0, DWORD PTR _end$[ebp+8]
	subss	xmm0, DWORD PTR tv742[ebp]
	movss	DWORD PTR _DOV$[ebp+8], xmm0

; 3894 : 
; 3895 : 	// Compute the direction of this segment in world space
; 3896 : 	dx = end.x - position.x;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _end$[ebp]
	subss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR _dx$[ebp], xmm0

; 3897 : 	dy = end.y - position.y;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _end$[ebp+4]
	subss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR _dy$[ebp], xmm0

; 3898 : 	dz = end.z - position.z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _end$[ebp+8]
	subss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _dz$[ebp], xmm0

; 3899 : 	
; 3900 : 	// Compute the cross product of the two vectors
; 3901 : 	widthX = DOV.y * dz - DOV.z * dy;

	movss	xmm0, DWORD PTR _DOV$[ebp+4]
	mulss	xmm0, DWORD PTR _dz$[ebp]
	movss	xmm1, DWORD PTR _DOV$[ebp+8]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _widthX$[ebp], xmm0

; 3902 : 	widthY = DOV.z * dx - DOV.x * dz;

	movss	xmm0, DWORD PTR _DOV$[ebp+8]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _DOV$[ebp]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _widthY$[ebp], xmm0

; 3903 : 	widthZ = DOV.x * dy - DOV.y * dx;

	movss	xmm0, DWORD PTR _DOV$[ebp]
	mulss	xmm0, DWORD PTR _dy$[ebp]
	movss	xmm1, DWORD PTR _DOV$[ebp+4]
	mulss	xmm1, DWORD PTR _dx$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _widthZ$[ebp], xmm0

; 3904 : 
; 3905 : 	// Compute the magnitude of the cross product result
; 3906 : 	mag = (float)sqrt( widthX*widthX + widthY*widthY + widthZ*widthZ );

	movss	xmm0, DWORD PTR _widthX$[ebp]
	mulss	xmm0, DWORD PTR _widthX$[ebp]
	movss	xmm1, DWORD PTR _widthY$[ebp]
	mulss	xmm1, DWORD PTR _widthY$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _widthZ$[ebp]
	mulss	xmm1, DWORD PTR _widthZ$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _mag$[ebp]

; 3907 : 
; 3908 : 	// If the cross product was degenerate (parallel vectors), use the "up" vector
; 3909 : 	if (mag < 0.001f) {

	movss	xmm0, DWORD PTR __real@3a83126f
	comiss	xmm0, DWORD PTR _mag$[ebp]
	jbe	SHORT $LN1@DrawTextur

; 3910 : 	 	renderer->GetUp( &UP );

	lea	ecx, DWORD PTR _UP$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?GetUp@Render3D@@QAEXPAUTpoint@@@Z	; Render3D::GetUp

; 3911 : 		widthX = UP.x;

	movss	xmm0, DWORD PTR _UP$[ebp]
	movss	DWORD PTR _widthX$[ebp], xmm0

; 3912 : 		widthY = UP.y;

	movss	xmm0, DWORD PTR _UP$[ebp+4]
	movss	DWORD PTR _widthY$[ebp], xmm0

; 3913 : 		widthZ = UP.z;

	movss	xmm0, DWORD PTR _UP$[ebp+8]
	movss	DWORD PTR _widthZ$[ebp], xmm0

; 3914 : 		mag = (float)sqrt( widthX*widthX + widthY*widthY + widthZ*widthZ );

	movss	xmm0, DWORD PTR _widthX$[ebp]
	mulss	xmm0, DWORD PTR _widthX$[ebp]
	movss	xmm1, DWORD PTR _widthY$[ebp]
	mulss	xmm1, DWORD PTR _widthY$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _widthZ$[ebp]
	mulss	xmm1, DWORD PTR _widthZ$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _mag$[ebp]
$LN1@DrawTextur:

; 3915 : 	}
; 3916 : 
; 3917 : 	// Normalize the width vector, then scale it to 1/2 of the total width of the segment
; 3918 : 	normalizer = scale2d * realRadius / mag;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+248]
	mulss	xmm0, DWORD PTR [eax+252]
	divss	xmm0, DWORD PTR _mag$[ebp]
	movss	DWORD PTR _normalizer$[ebp], xmm0

; 3919 : 	widthX *= normalizer ;

	movss	xmm0, DWORD PTR _widthX$[ebp]
	mulss	xmm0, DWORD PTR _normalizer$[ebp]
	movss	DWORD PTR _widthX$[ebp], xmm0

; 3920 : 	widthY *= normalizer ;

	movss	xmm0, DWORD PTR _widthY$[ebp]
	mulss	xmm0, DWORD PTR _normalizer$[ebp]
	movss	DWORD PTR _widthY$[ebp], xmm0

; 3921 : 	widthZ *= normalizer ;

	movss	xmm0, DWORD PTR _widthZ$[ebp]
	mulss	xmm0, DWORD PTR _normalizer$[ebp]
	movss	DWORD PTR _widthZ$[ebp], xmm0

; 3922 : 
; 3923 : 
; 3924 : 	// Compute the world space location of the two corners at the end of this segment
; 3925 : 	left.x  = end.x - widthX * typeData.glowVerts->z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	movss	xmm0, DWORD PTR _widthX$[ebp]
	mulss	xmm0, DWORD PTR [edx+8]
	movss	xmm1, DWORD PTR _end$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _left$[ebp], xmm1

; 3926 : 	left.y  = end.y - widthY * typeData.glowVerts->z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	movss	xmm0, DWORD PTR _widthY$[ebp]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR _end$[ebp+4]
	subss	xmm1, xmm0
	movss	DWORD PTR _left$[ebp+4], xmm1

; 3927 : 	left.z  = end.z - widthZ * typeData.glowVerts->z;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	movss	xmm0, DWORD PTR _widthZ$[ebp]
	mulss	xmm0, DWORD PTR [eax+8]
	movss	xmm1, DWORD PTR _end$[ebp+8]
	subss	xmm1, xmm0
	movss	DWORD PTR _left$[ebp+8], xmm1

; 3928 : 	right.x = end.x + widthX * typeData.glowVerts->z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	movss	xmm0, DWORD PTR _widthX$[ebp]
	mulss	xmm0, DWORD PTR [edx+8]
	addss	xmm0, DWORD PTR _end$[ebp]
	movss	DWORD PTR _right$[ebp], xmm0

; 3929 : 	right.y = end.y + widthY * typeData.glowVerts->z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	movss	xmm0, DWORD PTR _widthY$[ebp]
	mulss	xmm0, DWORD PTR [ecx+8]
	addss	xmm0, DWORD PTR _end$[ebp+4]
	movss	DWORD PTR _right$[ebp+4], xmm0

; 3930 : 	right.z = end.z + widthZ * typeData.glowVerts->z;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	movss	xmm0, DWORD PTR _widthZ$[ebp]
	mulss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR _end$[ebp+8]
	movss	DWORD PTR _right$[ebp+8], xmm0

; 3931 : 
; 3932 : 	// Transform the two new corners
; 3933 : 	renderer->TransformPoint( &left,  &v0  );

	lea	ecx, DWORD PTR _v0$[ebp]
	push	ecx
	lea	edx, DWORD PTR _left$[ebp]
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformPoint

; 3934 : 	renderer->TransformPoint( &right, &v1 );

	lea	eax, DWORD PTR _v1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformPoint

; 3935 : 
; 3936 : 	left.x  = position.x - widthX * typeData.glowVerts->y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	movss	xmm0, DWORD PTR _widthX$[ebp]
	mulss	xmm0, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+4]
	subss	xmm1, xmm0
	movss	DWORD PTR _left$[ebp], xmm1

; 3937 : 	left.y  = position.y - widthY * typeData.glowVerts->y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	movss	xmm0, DWORD PTR _widthY$[ebp]
	mulss	xmm0, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	subss	xmm1, xmm0
	movss	DWORD PTR _left$[ebp+4], xmm1

; 3938 : 	left.z  = position.z - widthZ * typeData.glowVerts->y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	movss	xmm0, DWORD PTR _widthZ$[ebp]
	mulss	xmm0, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _left$[ebp+8], xmm1

; 3939 : 	right.x = position.x + widthX * typeData.glowVerts->y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	movss	xmm0, DWORD PTR _widthX$[ebp]
	mulss	xmm0, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR _right$[ebp], xmm0

; 3940 : 	right.y = position.y + widthY * typeData.glowVerts->y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	movss	xmm0, DWORD PTR _widthY$[ebp]
	mulss	xmm0, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR _right$[ebp+4], xmm0

; 3941 : 	right.z = position.z + widthZ * typeData.glowVerts->y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	movss	xmm0, DWORD PTR _widthZ$[ebp]
	mulss	xmm0, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR _right$[ebp+8], xmm0

; 3942 : 
; 3943 : 	// Transform the two new corners
; 3944 : 	renderer->TransformPoint( &left,  &v3  );

	lea	edx, DWORD PTR _v3$[ebp]
	push	edx
	lea	eax, DWORD PTR _left$[ebp]
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformPoint

; 3945 : 	renderer->TransformPoint( &right, &v2 );

	lea	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _right$[ebp]
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformPoint

; 3946 : 
; 3947 : 	// set up
; 3948 : 	v0.r = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v0$[ebp+8], xmm0

; 3949 : 	v0.g = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v0$[ebp+12], xmm0

; 3950 : 	v0.b = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v0$[ebp+16], xmm0

; 3951 : 	v0.a = alpha;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+52]
	movss	DWORD PTR _v0$[ebp+20], xmm0

; 3952 : 	v1.r = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v1$[ebp+8], xmm0

; 3953 : 	v1.g = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v1$[ebp+12], xmm0

; 3954 : 	v1.b = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v1$[ebp+16], xmm0

; 3955 : 	v1.a = alpha;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+52]
	movss	DWORD PTR _v1$[ebp+20], xmm0

; 3956 : 	v2.r = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v2$[ebp+8], xmm0

; 3957 : 	v2.g = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v2$[ebp+12], xmm0

; 3958 : 	v2.b = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v2$[ebp+16], xmm0

; 3959 : 	v2.a = alpha;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+52]
	movss	DWORD PTR _v2$[ebp+20], xmm0

; 3960 : 	v3.r = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v3$[ebp+8], xmm0

; 3961 : 	v3.g = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v3$[ebp+12], xmm0

; 3962 : 	v3.b = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v3$[ebp+16], xmm0

; 3963 : 	v3.a = alpha;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+52]
	movss	DWORD PTR _v3$[ebp+20], xmm0

; 3964 : 
; 3965 : 	uvStart.u = gTexUV[ typeData.startTexture + curFrame ].u;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+64]
	movss	xmm0, DWORD PTR ?gTexUV@@3PAUUV@@A[edx*8]
	movss	DWORD PTR _uvStart$[ebp], xmm0

; 3966 : 	uvStart.v = gTexUV[ typeData.startTexture + curFrame ].v;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+64]
	movss	xmm0, DWORD PTR ?gTexUV@@3PAUUV@@A[edx*8+4]
	movss	DWORD PTR _uvStart$[ebp+4], xmm0

; 3967 : 
; 3968 : 	v3.u = uvStart.u;

	movss	xmm0, DWORD PTR _uvStart$[ebp]
	movss	DWORD PTR _v3$[ebp+24], xmm0

; 3969 : 	v3.v = uvStart.v;

	movss	xmm0, DWORD PTR _uvStart$[ebp+4]
	movss	DWORD PTR _v3$[ebp+28], xmm0

; 3970 : 	v0.u = uvStart.u + TEX_UV_DIM;

	movss	xmm0, DWORD PTR _uvStart$[ebp]
	addss	xmm0, DWORD PTR __real@3e7be76d
	movss	DWORD PTR _v0$[ebp+24], xmm0

; 3971 : 	v0.v = uvStart.v;

	movss	xmm0, DWORD PTR _uvStart$[ebp+4]
	movss	DWORD PTR _v0$[ebp+28], xmm0

; 3972 : 	v1.u = uvStart.u + TEX_UV_DIM;

	movss	xmm0, DWORD PTR _uvStart$[ebp]
	addss	xmm0, DWORD PTR __real@3e7be76d
	movss	DWORD PTR _v1$[ebp+24], xmm0

; 3973 : 	v1.v = uvStart.v + TEX_UV_DIM;

	movss	xmm0, DWORD PTR _uvStart$[ebp+4]
	addss	xmm0, DWORD PTR __real@3e7be76d
	movss	DWORD PTR _v1$[ebp+28], xmm0

; 3974 : 	v2.u = uvStart.u;

	movss	xmm0, DWORD PTR _uvStart$[ebp]
	movss	DWORD PTR _v2$[ebp+24], xmm0

; 3975 : 	v2.v = uvStart.v + TEX_UV_DIM;

	movss	xmm0, DWORD PTR _uvStart$[ebp+4]
	addss	xmm0, DWORD PTR __real@3e7be76d
	movss	DWORD PTR _v2$[ebp+28], xmm0

; 3976 : 
; 3977 : 	v0.q = v0.csZ * 0.001f;

	movss	xmm0, DWORD PTR _v0$[ebp+48]
	mulss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR _v0$[ebp+32], xmm0

; 3978 : 	v1.q = v1.csZ * 0.001f;

	movss	xmm0, DWORD PTR _v1$[ebp+48]
	mulss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR _v1$[ebp+32], xmm0

; 3979 : 	v2.q = v2.csZ * 0.001f;

	movss	xmm0, DWORD PTR _v2$[ebp+48]
	mulss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR _v2$[ebp+32], xmm0

; 3980 : 	v3.q = v3.csZ * 0.001f;

	movss	xmm0, DWORD PTR _v3$[ebp+48]
	mulss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR _v3$[ebp+32], xmm0

; 3981 : 
; 3982 : 	renderer->DrawSquare( &v0, &v1, &v2, &v3, CULL_ALLOW_ALL );

	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR _v3$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v2$[ebp]
	push	edx
	lea	eax, DWORD PTR _v1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v0$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?DrawSquare@Render3D@@QAEXPAUThreeDVertex@@000H_N1@Z ; Render3D::DrawSquare

; 3983 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
?DrawTexturedCone@Drawable2D@@IAEXPAVRenderOTW@@H@Z ENDP ; Drawable2D::DrawTexturedCone
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\draw2d.cpp
_TEXT	SEGMENT
tv700 = -336						; size = 8
tv684 = -328						; size = 8
tv775 = -320						; size = 4
tv842 = -316						; size = 4
tv767 = -312						; size = 4
tv872 = -308						; size = 4
tv753 = -304						; size = 4
tv816 = -300						; size = 4
tv743 = -296						; size = 4
tv857 = -292						; size = 4
tv733 = -288						; size = 4
tv824 = -284						; size = 4
tv723 = -280						; size = 4
tv783 = -276						; size = 4
tv800 = -272						; size = 4
tv791 = -268						; size = 4
tv887 = -264						; size = 4
tv808 = -260						; size = 4
tv681 = -256						; size = 4
tv697 = -252						; size = 4
_now$ = -248						; size = 4
_randradius$ = -244					; size = 4
_this$ = -240						; size = 4
_v0$ = -236						; size = 52
_v3$ = -184						; size = 52
_v2$ = -132						; size = 52
_v1$ = -80						; size = 52
_center$ = -28						; size = 12
_os$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_renderer$ = 8						; size = 4
___formal$ = 12						; size = 4
?DrawGouraudTri@Drawable2D@@IAEXPAVRenderOTW@@H@Z PROC	; Drawable2D::DrawGouraudTri
; _this$ = ecx

; 2505 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 2506 : 	Tpoint				center, os;
; 2507 : 	ThreeDVertex		v0, v1, v2, v3;
; 2508 : 	DWORD				now;
; 2509 : 	float randradius;
; 2510 : 
; 2511 : 	if ( alpha <= 0.05f )

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3d4ccccd
	comiss	xmm0, DWORD PTR [eax+52]
	jb	SHORT $LN12@DrawGourau

; 2512 : 		return;

	jmp	$LN13@DrawGourau
$LN12@DrawGourau:

; 2513 : 
; 2514 : 	// Get the curent time
; 2515 : 	now = TheTimeManager.GetClockTime();

	mov	ecx, OFFSET ?TheTimeManager@@3VTimeManager@@A ; TheTimeManager
	call	?GetClockTime@TimeManager@@QAEKXZ	; TimeManager::GetClockTime
	mov	DWORD PTR _now$[ebp], eax

; 2516 : 
; 2517 : 	if ( startFade == FALSE )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+136], 0
	jne	SHORT $LN11@DrawGourau

; 2518 : 	{
; 2519 : 		startFade = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+136], 1

; 2520 : 		expandStartTime = now;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _now$[ebp]
	mov	DWORD PTR [eax+88], ecx

; 2521 : 		alphaStartTime = now;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _now$[ebp]
	mov	DWORD PTR [edx+84], eax
$LN11@DrawGourau:

; 2522 : 	}
; 2523 : 
; 2524 : 	// do fade... 10 seconds until nothing...
; 2525 : 	alpha = initAlpha  - ((float)( now - alphaStartTime )) * typeData.fadeRate;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _now$[ebp]
	sub	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR tv681[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv681[ebp]
	mov	eax, DWORD PTR tv681[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv684[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv684[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+104]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+56]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+52], xmm1

; 2526 : 	if ( alpha <= 0.05f )

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3d4ccccd
	comiss	xmm0, DWORD PTR [ecx+52]
	jb	SHORT $LN10@DrawGourau

; 2527 : 		return;

	jmp	$LN13@DrawGourau
$LN10@DrawGourau:

; 2528 : 
; 2529 : 	// do expansion
; 2530 : 	realRadius = initRadius + ((float)( now - expandStartTime )) * typeData.expandRate * 0.001f;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _now$[ebp]
	sub	eax, DWORD PTR [edx+88]
	mov	DWORD PTR tv697[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv697[ebp]
	mov	ecx, DWORD PTR tv697[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv700[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv700[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+120]
	mulss	xmm0, DWORD PTR __real@3a83126f
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+60]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+252], xmm0

; 2531 : 	if ( realRadius > typeData.maxExpand )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+252]
	comiss	xmm0, DWORD PTR [eax+132]
	jbe	SHORT $LN9@DrawGourau

; 2532 : 		realRadius = typeData.maxExpand;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	mov	DWORD PTR [ecx+252], eax
$LN9@DrawGourau:

; 2533 : 	radius = realRadius * 8.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+252]
	mulss	xmm0, DWORD PTR __real@41000000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+16], xmm0

; 2534 : 	if ( realRadius <= 0.0f )

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [eax+252]
	jb	SHORT $LN8@DrawGourau

; 2535 : 		return;

	jmp	$LN13@DrawGourau
$LN8@DrawGourau:

; 2536 : 
; 2537 : 	// set up the verts rgb and alpha's
; 2538 : 
; 2539 : 	if ( type == DRAW2D_DARK_DEBRIS )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 31			; 0000001fH
	jne	$LN7@DrawGourau

; 2540 : 	{
; 2541 : 		randradius =  0.3f + PRANDFloat() * 0.3f;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv723[ebp]
	movss	xmm0, DWORD PTR tv723[ebp]
	mulss	xmm0, DWORD PTR __real@3e99999a
	addss	xmm0, DWORD PTR __real@3e99999a
	movss	DWORD PTR _randradius$[ebp], xmm0

; 2542 : 		v0.r = randradius * lightLevel;

	movss	xmm0, DWORD PTR _randradius$[ebp]
	mulss	xmm0, DWORD PTR _lightLevel
	movss	DWORD PTR _v0$[ebp+8], xmm0

; 2543 : 		v0.g = randradius * lightLevel;

	movss	xmm0, DWORD PTR _randradius$[ebp]
	mulss	xmm0, DWORD PTR _lightLevel
	movss	DWORD PTR _v0$[ebp+12], xmm0

; 2544 : 		v0.b = randradius * lightLevel;

	movss	xmm0, DWORD PTR _randradius$[ebp]
	mulss	xmm0, DWORD PTR _lightLevel
	movss	DWORD PTR _v0$[ebp+16], xmm0

; 2545 : 		v0.a = alpha;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+52]
	movss	DWORD PTR _v0$[ebp+20], xmm0

; 2546 : 	
; 2547 : 		randradius =  0.2f + PRANDFloat() * 0.2f;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv733[ebp]
	movss	xmm0, DWORD PTR tv733[ebp]
	mulss	xmm0, DWORD PTR __real@3e4ccccd
	addss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _randradius$[ebp], xmm0

; 2548 : 		v1.r = randradius * lightLevel;

	movss	xmm0, DWORD PTR _randradius$[ebp]
	mulss	xmm0, DWORD PTR _lightLevel
	movss	DWORD PTR _v1$[ebp+8], xmm0

; 2549 : 		v1.g = randradius * lightLevel;

	movss	xmm0, DWORD PTR _randradius$[ebp]
	mulss	xmm0, DWORD PTR _lightLevel
	movss	DWORD PTR _v1$[ebp+12], xmm0

; 2550 : 		v1.b = randradius * lightLevel;

	movss	xmm0, DWORD PTR _randradius$[ebp]
	mulss	xmm0, DWORD PTR _lightLevel
	movss	DWORD PTR _v1$[ebp+16], xmm0

; 2551 : 		v1.a = alpha;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+52]
	movss	DWORD PTR _v1$[ebp+20], xmm0

; 2552 : 	
; 2553 : 		randradius =  0.3f + PRANDFloat() * 0.2f;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv743[ebp]
	movss	xmm0, DWORD PTR tv743[ebp]
	mulss	xmm0, DWORD PTR __real@3e4ccccd
	addss	xmm0, DWORD PTR __real@3e99999a
	movss	DWORD PTR _randradius$[ebp], xmm0

; 2554 : 		v2.r = randradius * lightLevel;

	movss	xmm0, DWORD PTR _randradius$[ebp]
	mulss	xmm0, DWORD PTR _lightLevel
	movss	DWORD PTR _v2$[ebp+8], xmm0

; 2555 : 		v2.g = randradius * lightLevel;

	movss	xmm0, DWORD PTR _randradius$[ebp]
	mulss	xmm0, DWORD PTR _lightLevel
	movss	DWORD PTR _v2$[ebp+12], xmm0

; 2556 : 		v2.b = randradius * lightLevel;

	movss	xmm0, DWORD PTR _randradius$[ebp]
	mulss	xmm0, DWORD PTR _lightLevel
	movss	DWORD PTR _v2$[ebp+16], xmm0

; 2557 : 		v2.a = alpha;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+52]
	movss	DWORD PTR _v2$[ebp+20], xmm0

; 2558 : 
; 2559 : 		randradius =  0.2f + PRANDFloat() * 0.2f;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv753[ebp]
	movss	xmm0, DWORD PTR tv753[ebp]
	mulss	xmm0, DWORD PTR __real@3e4ccccd
	addss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _randradius$[ebp], xmm0

; 2560 : 		v3.r = randradius * lightLevel;

	movss	xmm0, DWORD PTR _randradius$[ebp]
	mulss	xmm0, DWORD PTR _lightLevel
	movss	DWORD PTR _v3$[ebp+8], xmm0

; 2561 : 		v3.g = randradius * lightLevel;

	movss	xmm0, DWORD PTR _randradius$[ebp]
	mulss	xmm0, DWORD PTR _lightLevel
	movss	DWORD PTR _v3$[ebp+12], xmm0

; 2562 : 		v3.b = randradius * lightLevel;

	movss	xmm0, DWORD PTR _randradius$[ebp]
	mulss	xmm0, DWORD PTR _lightLevel
	movss	DWORD PTR _v3$[ebp+16], xmm0

; 2563 : 		v3.a = alpha;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+52]
	movss	DWORD PTR _v3$[ebp+20], xmm0
	jmp	$LN2@DrawGourau
$LN7@DrawGourau:

; 2564 : 	}
; 2565 : 	else if ( type == DRAW2D_FIRE_DEBRIS )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 32			; 00000020H
	jne	$LN5@DrawGourau

; 2566 : 	{
; 2567 : 		/*
; 2568 : 		v0.r = 0.9f;
; 2569 : 		v0.g = 0.2f;
; 2570 : 		v0.b = 0.2f;
; 2571 : 		v0.a = alpha;
; 2572 : 	
; 2573 : 		v1.r = 0.9f;
; 2574 : 		v1.g = 0.9f;
; 2575 : 		v1.b = 0.2f;
; 2576 : 		v1.a = alpha;
; 2577 : 	
; 2578 : 		v2.r = 0.9f;
; 2579 : 		v2.g = 0.2f;
; 2580 : 		v2.b = 0.2f;
; 2581 : 		v2.a = alpha;
; 2582 : 		*/
; 2583 : 		v0.r = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v0$[ebp+8], xmm0

; 2584 : 		v0.g = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v0$[ebp+12], xmm0

; 2585 : 		v0.b = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v0$[ebp+16], xmm0

; 2586 : 		v0.a = 0.2f + PRANDFloat() * 0.2f;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv767[ebp]
	movss	xmm0, DWORD PTR tv767[ebp]
	mulss	xmm0, DWORD PTR __real@3e4ccccd
	addss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _v0$[ebp+20], xmm0

; 2587 : 	
; 2588 : 		v1.r = 0.1f * lightLevel;

	movss	xmm0, DWORD PTR __real@3dcccccd
	mulss	xmm0, DWORD PTR _lightLevel
	movss	DWORD PTR _v1$[ebp+8], xmm0

; 2589 : 		v1.g = 0.1f * lightLevel;

	movss	xmm0, DWORD PTR __real@3dcccccd
	mulss	xmm0, DWORD PTR _lightLevel
	movss	DWORD PTR _v1$[ebp+12], xmm0

; 2590 : 		v1.b = 0.1f * lightLevel;

	movss	xmm0, DWORD PTR __real@3dcccccd
	mulss	xmm0, DWORD PTR _lightLevel
	movss	DWORD PTR _v1$[ebp+16], xmm0

; 2591 : 		v1.a = 0.2f + PRANDFloat() * 0.2f;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv775[ebp]
	movss	xmm0, DWORD PTR tv775[ebp]
	mulss	xmm0, DWORD PTR __real@3e4ccccd
	addss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _v1$[ebp+20], xmm0

; 2592 : 	
; 2593 : 		v2.r = 0.2f * lightLevel;

	movss	xmm0, DWORD PTR __real@3e4ccccd
	mulss	xmm0, DWORD PTR _lightLevel
	movss	DWORD PTR _v2$[ebp+8], xmm0

; 2594 : 		v2.g = 0.2f * lightLevel;

	movss	xmm0, DWORD PTR __real@3e4ccccd
	mulss	xmm0, DWORD PTR _lightLevel
	movss	DWORD PTR _v2$[ebp+12], xmm0

; 2595 : 		v2.b = 0.2f * lightLevel;

	movss	xmm0, DWORD PTR __real@3e4ccccd
	mulss	xmm0, DWORD PTR _lightLevel
	movss	DWORD PTR _v2$[ebp+16], xmm0

; 2596 : 		v2.a = 0.2f + PRANDFloat() * 0.2f;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv783[ebp]
	movss	xmm0, DWORD PTR tv783[ebp]
	mulss	xmm0, DWORD PTR __real@3e4ccccd
	addss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _v2$[ebp+20], xmm0

; 2597 : 
; 2598 : 		v3.r = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v3$[ebp+8], xmm0

; 2599 : 		v3.g = 0.1f * lightLevel;

	movss	xmm0, DWORD PTR __real@3dcccccd
	mulss	xmm0, DWORD PTR _lightLevel
	movss	DWORD PTR _v3$[ebp+12], xmm0

; 2600 : 		v3.b = 0.2f * lightLevel;

	movss	xmm0, DWORD PTR __real@3e4ccccd
	mulss	xmm0, DWORD PTR _lightLevel
	movss	DWORD PTR _v3$[ebp+16], xmm0

; 2601 : 		v3.a = 0.2f + PRANDFloat() * 0.2f;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv791[ebp]
	movss	xmm0, DWORD PTR tv791[ebp]
	mulss	xmm0, DWORD PTR __real@3e4ccccd
	addss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _v3$[ebp+20], xmm0
	jmp	$LN2@DrawGourau
$LN5@DrawGourau:

; 2602 : 	}
; 2603 : 	else if ( type == DRAW2D_LIGHT_DEBRIS )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 33			; 00000021H
	jne	$LN3@DrawGourau

; 2604 : 	{
; 2605 : 		v0.r = 1.0f * lightLevel;

	movss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR _lightLevel
	movss	DWORD PTR _v0$[ebp+8], xmm0

; 2606 : 		v0.g = 1.0f * lightLevel;

	movss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR _lightLevel
	movss	DWORD PTR _v0$[ebp+12], xmm0

; 2607 : 		v0.b = 1.0f * lightLevel;

	movss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR _lightLevel
	movss	DWORD PTR _v0$[ebp+16], xmm0

; 2608 : 		v0.a = 0.2f + PRANDFloat() * 0.2f;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv800[ebp]
	movss	xmm0, DWORD PTR tv800[ebp]
	mulss	xmm0, DWORD PTR __real@3e4ccccd
	addss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _v0$[ebp+20], xmm0

; 2609 : 	
; 2610 : 		v1.r = 0.9f * lightLevel;

	movss	xmm0, DWORD PTR __real@3f666666
	mulss	xmm0, DWORD PTR _lightLevel
	movss	DWORD PTR _v1$[ebp+8], xmm0

; 2611 : 		v1.g = 0.9f * lightLevel;

	movss	xmm0, DWORD PTR __real@3f666666
	mulss	xmm0, DWORD PTR _lightLevel
	movss	DWORD PTR _v1$[ebp+12], xmm0

; 2612 : 		v1.b = 0.9f * lightLevel;

	movss	xmm0, DWORD PTR __real@3f666666
	mulss	xmm0, DWORD PTR _lightLevel
	movss	DWORD PTR _v1$[ebp+16], xmm0

; 2613 : 		v1.a = 0.2f + PRANDFloat() * 0.2f;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv808[ebp]
	movss	xmm0, DWORD PTR tv808[ebp]
	mulss	xmm0, DWORD PTR __real@3e4ccccd
	addss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _v1$[ebp+20], xmm0

; 2614 : 	
; 2615 : 		v2.r = 0.8f * lightLevel;

	movss	xmm0, DWORD PTR __real@3f4ccccd
	mulss	xmm0, DWORD PTR _lightLevel
	movss	DWORD PTR _v2$[ebp+8], xmm0

; 2616 : 		v2.g = 0.8f * lightLevel;

	movss	xmm0, DWORD PTR __real@3f4ccccd
	mulss	xmm0, DWORD PTR _lightLevel
	movss	DWORD PTR _v2$[ebp+12], xmm0

; 2617 : 		v2.b = 0.8f * lightLevel;

	movss	xmm0, DWORD PTR __real@3f4ccccd
	mulss	xmm0, DWORD PTR _lightLevel
	movss	DWORD PTR _v2$[ebp+16], xmm0

; 2618 : 		v2.a = 0.2f + PRANDFloat() * 0.2f;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv816[ebp]
	movss	xmm0, DWORD PTR tv816[ebp]
	mulss	xmm0, DWORD PTR __real@3e4ccccd
	addss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _v2$[ebp+20], xmm0

; 2619 : 
; 2620 : 		v3.r = 0.9f * lightLevel;

	movss	xmm0, DWORD PTR __real@3f666666
	mulss	xmm0, DWORD PTR _lightLevel
	movss	DWORD PTR _v3$[ebp+8], xmm0

; 2621 : 		v3.g = 0.9f * lightLevel;

	movss	xmm0, DWORD PTR __real@3f666666
	mulss	xmm0, DWORD PTR _lightLevel
	movss	DWORD PTR _v3$[ebp+12], xmm0

; 2622 : 		v3.b = 0.9f * lightLevel;

	movss	xmm0, DWORD PTR __real@3f666666
	mulss	xmm0, DWORD PTR _lightLevel
	movss	DWORD PTR _v3$[ebp+16], xmm0

; 2623 : 		v3.a = 0.2f + PRANDFloat() * 0.2f;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv824[ebp]
	movss	xmm0, DWORD PTR tv824[ebp]
	mulss	xmm0, DWORD PTR __real@3e4ccccd
	addss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _v3$[ebp+20], xmm0

; 2624 : 	}
; 2625 : 	else

	jmp	SHORT $LN2@DrawGourau
$LN3@DrawGourau:

; 2626 : 	{
; 2627 : 		return;

	jmp	$LN13@DrawGourau
$LN2@DrawGourau:

; 2628 : 	}
; 2629 : 
; 2630 : 	if ( sGreenMode )

	cmp	DWORD PTR ?sGreenMode@@3HA, 0		; sGreenMode
	je	SHORT $LN1@DrawGourau

; 2631 : 	{
; 2632 : 		v0.r = v1.r = v2.r = v3.r = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v3$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+8]
	movss	DWORD PTR _v2$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _v2$[ebp+8]
	movss	DWORD PTR _v1$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+8]
	movss	DWORD PTR _v0$[ebp+8], xmm0

; 2633 : 		v0.b = v1.b = v2.b = v3.b = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v3$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+16]
	movss	DWORD PTR _v2$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _v2$[ebp+16]
	movss	DWORD PTR _v1$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+16]
	movss	DWORD PTR _v0$[ebp+16], xmm0
$LN1@DrawGourau:

; 2634 : 	}
; 2635 : 
; 2636 : 	// Set up our drawing mode
; 2637 : 	renderer->context.RestoreState(STATE_ALPHA_GOURAUD);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _renderer$[ebp]
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 2638 : 	renderer->context.SetState(MPR_STA_ALPHA_OP_FUNCTION,MPR_TO_MODULATE); //JAM 18Oct03

	push	4
	push	5
	mov	ecx, DWORD PTR _renderer$[ebp]
	add	ecx, 100				; 00000064H
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 2639 : 
; 2640 : 	// transform the center point
; 2641 : 	renderer->TransformPointToView( &position,  &center );

	lea	edx, DWORD PTR _center$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformPointToView@Render3D@@QAEXPAUTpoint@@0@Z ; Render3D::TransformPointToView

; 2642 : 
; 2643 : 	os.x = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _os$[ebp], xmm0

; 2644 : 
; 2645 : 	// do 1st point
; 2646 : 	randradius = (realRadius + realRadius * PRANDFloat()) * 0.5f;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv842[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv842[ebp]
	mulss	xmm0, DWORD PTR [ecx+252]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+252]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _randradius$[ebp], xmm0

; 2647 : 
; 2648 : 	os.z = scale2d * randradius;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+248]
	mulss	xmm0, DWORD PTR _randradius$[ebp]
	movss	DWORD PTR _os$[ebp+8], xmm0

; 2649 : 	os.y = scale2d * randradius;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+248]
	mulss	xmm0, DWORD PTR _randradius$[ebp]
	movss	DWORD PTR _os$[ebp+4], xmm0

; 2650 : 	renderer->TransformBillboardPoint( &os,  &center, &v0 );

	lea	edx, DWORD PTR _v0$[ebp]
	push	edx
	lea	eax, DWORD PTR _center$[ebp]
	push	eax
	lea	ecx, DWORD PTR _os$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformBillboardPoint@Render3D@@QAEXPAUTpoint@@0PAUThreeDVertex@@@Z ; Render3D::TransformBillboardPoint

; 2651 : 
; 2652 : 	// do 2nd point
; 2653 : 
; 2654 : 	randradius = (realRadius + realRadius * PRANDFloat()) * 0.5f;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv857[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv857[ebp]
	mulss	xmm0, DWORD PTR [edx+252]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+252]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _randradius$[ebp], xmm0

; 2655 : 
; 2656 : 	os.z = -scale2d * randradius;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+248]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _randradius$[ebp]
	movss	DWORD PTR _os$[ebp+8], xmm0

; 2657 : 	os.y = scale2d * randradius;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+248]
	mulss	xmm0, DWORD PTR _randradius$[ebp]
	movss	DWORD PTR _os$[ebp+4], xmm0

; 2658 : 	renderer->TransformBillboardPoint( &os,  &center, &v1 );

	lea	eax, DWORD PTR _v1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _center$[ebp]
	push	ecx
	lea	edx, DWORD PTR _os$[ebp]
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformBillboardPoint@Render3D@@QAEXPAUTpoint@@0PAUThreeDVertex@@@Z ; Render3D::TransformBillboardPoint

; 2659 : 
; 2660 : 	// do 3nd point
; 2661 : 	randradius = (realRadius + realRadius * PRANDFloat()) * 0.5f;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv872[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv872[ebp]
	mulss	xmm0, DWORD PTR [eax+252]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+252]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _randradius$[ebp], xmm0

; 2662 : 
; 2663 : 	os.z = -scale2d * randradius;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+248]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _randradius$[ebp]
	movss	DWORD PTR _os$[ebp+8], xmm0

; 2664 : 	os.y = -scale2d * randradius;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+248]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _randradius$[ebp]
	movss	DWORD PTR _os$[ebp+4], xmm0

; 2665 : 	renderer->TransformBillboardPoint( &os,  &center, &v2 );

	lea	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _center$[ebp]
	push	edx
	lea	eax, DWORD PTR _os$[ebp]
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformBillboardPoint@Render3D@@QAEXPAUTpoint@@0PAUThreeDVertex@@@Z ; Render3D::TransformBillboardPoint

; 2666 : 
; 2667 : 	// do 4th point
; 2668 : 	randradius = (realRadius + realRadius * PRANDFloat()) * 0.5f;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv887[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv887[ebp]
	mulss	xmm0, DWORD PTR [ecx+252]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+252]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _randradius$[ebp], xmm0

; 2669 : 
; 2670 : 	os.z = scale2d * randradius;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+248]
	mulss	xmm0, DWORD PTR _randradius$[ebp]
	movss	DWORD PTR _os$[ebp+8], xmm0

; 2671 : 	os.y = -scale2d * randradius;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+248]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _randradius$[ebp]
	movss	DWORD PTR _os$[ebp+4], xmm0

; 2672 : 	renderer->TransformBillboardPoint( &os,  &center, &v3 );

	lea	edx, DWORD PTR _v3$[ebp]
	push	edx
	lea	eax, DWORD PTR _center$[ebp]
	push	eax
	lea	ecx, DWORD PTR _os$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformBillboardPoint@Render3D@@QAEXPAUTpoint@@0PAUThreeDVertex@@@Z ; Render3D::TransformBillboardPoint

; 2673 : 
; 2674 : 
; 2675 : 	// kick out triangle
; 2676 : 	renderer->DrawSquare( &v0, &v1, &v2, &v3, CULL_ALLOW_ALL );

	push	0
	push	0
	push	0
	lea	edx, DWORD PTR _v3$[ebp]
	push	edx
	lea	eax, DWORD PTR _v2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v0$[ebp]
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?DrawSquare@Render3D@@QAEXPAUThreeDVertex@@000H_N1@Z ; Render3D::DrawSquare
$LN13@DrawGourau:

; 2677 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
?DrawGouraudTri@Drawable2D@@IAEXPAVRenderOTW@@H@Z ENDP	; Drawable2D::DrawGouraudTri
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\draw2d.cpp
_TEXT	SEGMENT
tv1120 = -332						; size = 8
tv1147 = -324						; size = 8
tv1167 = -316						; size = 8
tv1409 = -308						; size = 4
tv1458 = -304						; size = 4
tv1270 = -300						; size = 4
tv1361 = -296						; size = 4
tv1338 = -292						; size = 4
tv1292 = -288						; size = 4
tv1164 = -284						; size = 4
_randradius$1 = -280					; size = 4
tv1117 = -276						; size = 4
_randradius$2 = -272					; size = 4
tv1144 = -268						; size = 4
_randradius$3 = -264					; size = 4
_randradius$4 = -260					; size = 4
_randradius$5 = -256					; size = 4
_randradius$6 = -252					; size = 4
_now$ = -248						; size = 4
_i$ = -244						; size = 4
_this$ = -240						; size = 4
_vLast$ = -236						; size = 52
_center$ = -184						; size = 12
_v0$ = -172						; size = 52
_v2$ = -120						; size = 52
_v1$ = -68						; size = 52
_os$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_renderer$ = 8						; size = 4
___formal$ = 12						; size = 4
?DrawGlowSphere@Drawable2D@@IAEXPAVRenderOTW@@H@Z PROC	; Drawable2D::DrawGlowSphere
; _this$ = ecx

; 2218 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2219 : 	Tpoint				center, os;
; 2220 : 	ThreeDVertex		v0, v1, v2, vLast;
; 2221 : 	int					i;
; 2222 : 	DWORD				now;
; 2223 : 
; 2224 : 	if ( alpha <= 0.05f )

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3d4ccccd
	comiss	xmm0, DWORD PTR [eax+52]
	jb	SHORT $LN42@DrawGlowSp

; 2225 : 		return;

	jmp	$LN43@DrawGlowSp
$LN42@DrawGlowSp:

; 2226 : 
; 2227 : 	// Get the curent time
; 2228 : 	now = TheTimeManager.GetClockTime();

	mov	ecx, OFFSET ?TheTimeManager@@3VTimeManager@@A ; TheTimeManager
	call	?GetClockTime@TimeManager@@QAEKXZ	; TimeManager::GetClockTime
	mov	DWORD PTR _now$[ebp], eax

; 2229 : 
; 2230 : 	if ( startFade == FALSE )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+136], 0
	jne	SHORT $LN41@DrawGlowSp

; 2231 : 	{
; 2232 : 		startFade = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+136], 1

; 2233 : 		expandStartTime = now;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _now$[ebp]
	mov	DWORD PTR [eax+88], ecx

; 2234 : 		alphaStartTime = now;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _now$[ebp]
	mov	DWORD PTR [edx+84], eax
$LN41@DrawGlowSp:

; 2235 : 	}
; 2236 : 
; 2237 : 	// do expansion
; 2238 : 	realRadius = initRadius + ((float)( now - expandStartTime )) * typeData.expandRate * 0.001f;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _now$[ebp]
	sub	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR tv1117[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv1117[ebp]
	mov	eax, DWORD PTR tv1117[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv1120[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv1120[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+120]
	mulss	xmm0, DWORD PTR __real@3a83126f
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+60]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+252], xmm0

; 2239 : 	if ( realRadius > typeData.maxExpand )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+252]
	comiss	xmm0, DWORD PTR [edx+132]
	jbe	SHORT $LN40@DrawGlowSp

; 2240 : 		realRadius = typeData.maxExpand;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	mov	DWORD PTR [eax+252], edx
$LN40@DrawGlowSp:

; 2241 : 	radius = realRadius * 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+252]
	mulss	xmm0, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+16], xmm0

; 2242 : 	if ( realRadius <= 0.0f )

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [edx+252]
	jb	SHORT $LN39@DrawGlowSp

; 2243 : 		return;

	jmp	$LN43@DrawGlowSp
$LN39@DrawGlowSp:

; 2244 : 
; 2245 : 	if ( typeData.flags & ALPHA_DAYLIGHT )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	and	ecx, 1048576				; 00100000H
	je	$LN38@DrawGlowSp

; 2246 : 	{
; 2247 : 	
; 2248 : 		alpha = initAlpha - ((float)( now - alphaStartTime )) * typeData.fadeRate;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _now$[ebp]
	sub	eax, DWORD PTR [edx+84]
	mov	DWORD PTR tv1144[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv1144[ebp]
	mov	ecx, DWORD PTR tv1144[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv1147[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv1147[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+104]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+56]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+52], xmm1

; 2249 : 		if ( alpha <= 0.05f )

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3d4ccccd
	comiss	xmm0, DWORD PTR [edx+52]
	jb	SHORT $LN37@DrawGlowSp

; 2250 : 			return;

	jmp	$LN43@DrawGlowSp
$LN37@DrawGlowSp:

; 2251 : 	
; 2252 : 	}
; 2253 : 	else

	jmp	$LN35@DrawGlowSp
$LN38@DrawGlowSp:

; 2254 : 	{
; 2255 : //		if ( !renderer->GetAlphaMode() )
; 2256 : //			return;
; 2257 : 
; 2258 : 		alpha = initAlpha * ( 1.0f - lightLevel * 0.5f ) - ((float)( now - alphaStartTime )) * typeData.fadeRate;

	movss	xmm0, DWORD PTR _lightLevel
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+56]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _now$[ebp]
	sub	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR tv1164[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv1164[ebp]
	mov	eax, DWORD PTR tv1164[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv1167[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv1167[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+104]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+52], xmm1

; 2259 : 		if ( alpha <= 0.05f )

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3d4ccccd
	comiss	xmm0, DWORD PTR [eax+52]
	jb	SHORT $LN35@DrawGlowSp

; 2260 : 			return;

	jmp	$LN43@DrawGlowSp
$LN35@DrawGlowSp:

; 2261 : 	}
; 2262 : 
; 2263 : 	// set up the verts rgb and alpha's
; 2264 : 
; 2265 : 	if ( sGreenMode )

	cmp	DWORD PTR ?sGreenMode@@3HA, 0		; sGreenMode
	je	$LN34@DrawGlowSp

; 2266 : 	{
; 2267 : 		v0.r = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v0$[ebp+8], xmm0

; 2268 : 		v0.g = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v0$[ebp+12], xmm0

; 2269 : 		v0.b = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v0$[ebp+16], xmm0

; 2270 : 		v0.a = alpha;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+52]
	movss	DWORD PTR _v0$[ebp+20], xmm0

; 2271 : 	
; 2272 : 		v1.r = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1$[ebp+8], xmm0

; 2273 : 		v1.g = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v1$[ebp+12], xmm0

; 2274 : 		v1.b = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1$[ebp+16], xmm0

; 2275 : 		v1.a = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1$[ebp+20], xmm0

; 2276 : 	
; 2277 : 		v2.r = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v2$[ebp+8], xmm0

; 2278 : 		v2.g = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v2$[ebp+12], xmm0

; 2279 : 		v2.b = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v2$[ebp+16], xmm0

; 2280 : 		v2.a = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v2$[ebp+20], xmm0

; 2281 : 	}
; 2282 : 	else

	jmp	$LN21@DrawGlowSp
$LN34@DrawGlowSp:

; 2283 : 	{
; 2284 : 		v0.a = alpha;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+52]
	movss	DWORD PTR _v0$[ebp+20], xmm0

; 2285 : 		if ( type == DRAW2D_SPARKS || type == DRAW2D_EXPLSTAR_GLOW )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 25			; 00000019H
	je	SHORT $LN31@DrawGlowSp
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 14			; 0000000eH
	jne	SHORT $LN32@DrawGlowSp
$LN31@DrawGlowSp:

; 2286 : 		{
; 2287 : 			v0.r = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v0$[ebp+8], xmm0

; 2288 : 			v0.g = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v0$[ebp+12], xmm0

; 2289 : 			v0.b = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v0$[ebp+16], xmm0

; 2290 : 			v0.a -= alpha * NRANDPOS * 0.9f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+52]
	mulss	xmm0, DWORD PTR __real@3f666666
	movss	xmm1, DWORD PTR _v0$[ebp+20]
	subss	xmm1, xmm0
	movss	DWORD PTR _v0$[ebp+20], xmm1
	jmp	$LN28@DrawGlowSp
$LN32@DrawGlowSp:

; 2291 : 
; 2292 : 		}
; 2293 : 		else if ( (typeData.flags & GROUND_GLOW ) && type != DRAW2D_MISSILE_GROUND_GLOW )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	and	ecx, 67108864				; 04000000H
	je	SHORT $LN29@DrawGlowSp
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 58			; 0000003aH
	je	SHORT $LN29@DrawGlowSp

; 2294 : 		{
; 2295 : 			v0.r = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v0$[ebp+8], xmm0

; 2296 : 			v0.g = 0.3f + NRANDPOS * 0.5f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR __real@3e99999a
	movss	DWORD PTR _v0$[ebp+12], xmm0

; 2297 : 			v0.b = 0.1f + NRANDPOS * 0.5f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _v0$[ebp+16], xmm0

; 2298 : 		}
; 2299 : 		else

	jmp	SHORT $LN28@DrawGlowSp
$LN29@DrawGlowSp:

; 2300 : 		{
; 2301 : 			v0.r = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v0$[ebp+8], xmm0

; 2302 : 			v0.g = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v0$[ebp+12], xmm0

; 2303 : 			v0.b = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v0$[ebp+16], xmm0
$LN28@DrawGlowSp:

; 2304 : 		}
; 2305 : 	
; 2306 : 
; 2307 : 		if ( type == DRAW2D_SPARKS || type == DRAW2D_EXPLSTAR_GLOW )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 25			; 00000019H
	je	SHORT $LN26@DrawGlowSp
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 14			; 0000000eH
	jne	$LN27@DrawGlowSp
$LN26@DrawGlowSp:

; 2308 : 		{
; 2309 : 			v1.r = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v1$[ebp+8], xmm0

; 2310 : 			v1.g = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v1$[ebp+12], xmm0

; 2311 : 			v1.b = 0.2f + NRANDPOS * 0.2f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@3e4ccccd
	addss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _v1$[ebp+16], xmm0

; 2312 : 			v1.a = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1$[ebp+20], xmm0

; 2313 : 	
; 2314 : 			v2.r = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v2$[ebp+8], xmm0

; 2315 : 			v2.g = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v2$[ebp+12], xmm0

; 2316 : 			v2.b = 0.2f + NRANDPOS * 0.2f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@3e4ccccd
	addss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _v2$[ebp+16], xmm0

; 2317 : 			v2.a = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v2$[ebp+20], xmm0
	jmp	$LN21@DrawGlowSp
$LN27@DrawGlowSp:

; 2318 : 		}
; 2319 : 		else if ( typeData.flags & GROUND_GLOW )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	and	eax, 67108864				; 04000000H
	je	$LN24@DrawGlowSp

; 2320 : 		{
; 2321 : 			v1.r = 0.1f + NRANDPOS * 0.8f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _v1$[ebp+8], xmm0

; 2322 : 			v1.b = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1$[ebp+16], xmm0

; 2323 : 			v1.g = 0.1f + NRANDPOS * 0.8f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _v1$[ebp+12], xmm0

; 2324 : 			v1.a = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1$[ebp+20], xmm0

; 2325 : 	
; 2326 : 			v2.r = 0.1f + NRANDPOS * 0.8f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _v2$[ebp+8], xmm0

; 2327 : 			v2.b = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v2$[ebp+16], xmm0

; 2328 : 			v2.g = 0.1f + NRANDPOS * 0.8f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _v2$[ebp+12], xmm0

; 2329 : 			v2.a = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v2$[ebp+20], xmm0
	jmp	$LN21@DrawGlowSp
$LN24@DrawGlowSp:

; 2330 : 		}
; 2331 : 		else if ( typeData.flags & ALPHA_BRIGHTEN )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	and	edx, 128				; 00000080H
	je	$LN22@DrawGlowSp

; 2332 : 		{
; 2333 : 			v1.r = 0.1f + NRANDPOS * 0.8f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _v1$[ebp+8], xmm0

; 2334 : 			v1.g = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1$[ebp+12], xmm0

; 2335 : 			v1.b = 0.1f + NRANDPOS * 0.8f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _v1$[ebp+16], xmm0

; 2336 : 			v1.a = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1$[ebp+20], xmm0

; 2337 : 	
; 2338 : 			v2.r = 0.1f + NRANDPOS * 0.8f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _v2$[ebp+8], xmm0

; 2339 : 			v2.g = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v2$[ebp+12], xmm0

; 2340 : 			v2.b = 0.1f + NRANDPOS * 0.8f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _v2$[ebp+16], xmm0

; 2341 : 			v2.a = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v2$[ebp+20], xmm0

; 2342 : 		}
; 2343 : 		else

	jmp	SHORT $LN21@DrawGlowSp
$LN22@DrawGlowSp:

; 2344 : 		{
; 2345 : 			v1.r = 0.9f;

	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR _v1$[ebp+8], xmm0

; 2346 : 			v1.g = 0.9f;

	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR _v1$[ebp+12], xmm0

; 2347 : 			v1.b = 0.4f;

	movss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR _v1$[ebp+16], xmm0

; 2348 : 			v1.a = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1$[ebp+20], xmm0

; 2349 : 	
; 2350 : 			v2.r = 0.9f;

	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR _v2$[ebp+8], xmm0

; 2351 : 			v2.g = 0.9f;

	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR _v2$[ebp+12], xmm0

; 2352 : 			v2.b = 0.4f;

	movss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR _v2$[ebp+16], xmm0

; 2353 : 			v2.a = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v2$[ebp+20], xmm0
$LN21@DrawGlowSp:

; 2354 : 		}
; 2355 : 
; 2356 : 	}
; 2357 : 
; 2358 : 	// Set up our drawing mode
; 2359 : 	renderer->context.RestoreState(STATE_ALPHA_GOURAUD);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _renderer$[ebp]
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 2360 : 	renderer->context.SetState(MPR_STA_ALPHA_OP_FUNCTION,MPR_TO_MODULATE); //JAM 18Oct03

	push	4
	push	5
	mov	ecx, DWORD PTR _renderer$[ebp]
	add	ecx, 100				; 00000064H
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 2361 : 
; 2362 : 	if ( !(typeData.flags & GROUND_GLOW) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	and	ecx, 67108864				; 04000000H
	jne	$LN20@DrawGlowSp

; 2363 : 	{
; 2364 : 		// transform the center point
; 2365 : 		renderer->TransformPointToView( &position,  &center );

	lea	edx, DWORD PTR _center$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformPointToView@Render3D@@QAEXPAUTpoint@@0@Z ; Render3D::TransformPointToView

; 2366 : 		renderer->TransformPoint( &position,  &v0 );

	lea	ecx, DWORD PTR _v0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformPoint

; 2367 : 	
; 2368 : 		// do 1st point
; 2369 : 		if ( type == DRAW2D_SPARKS )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 25			; 00000019H
	jne	$LN19@DrawGlowSp

; 2370 : 		{
; 2371 : 			float randradius;
; 2372 : 	
; 2373 : 			randradius = realRadius + realRadius * PRANDFloat() * 0.8f;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv1270[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv1270[ebp]
	mulss	xmm0, DWORD PTR [ecx+252]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+252]
	movss	DWORD PTR _randradius$3[ebp], xmm0

; 2374 : 	
; 2375 : 			os.x = typeData.glowVerts[0].x * scale2d * randradius;

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR [ecx+248]
	mulss	xmm0, DWORD PTR _randradius$3[ebp]
	movss	DWORD PTR _os$[ebp], xmm0

; 2376 : 			os.y = typeData.glowVerts[0].y * scale2d * randradius;

	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx+4]
	mulss	xmm0, DWORD PTR [eax+248]
	mulss	xmm0, DWORD PTR _randradius$3[ebp]
	movss	DWORD PTR _os$[ebp+4], xmm0

; 2377 : 			os.z = typeData.glowVerts[0].z * scale2d * randradius;

	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx+8]
	mulss	xmm0, DWORD PTR [edx+248]
	mulss	xmm0, DWORD PTR _randradius$3[ebp]
	movss	DWORD PTR _os$[ebp+8], xmm0
	jmp	$LN16@DrawGlowSp
$LN19@DrawGlowSp:

; 2378 : 		}
; 2379 : 		else if ( typeData.flags & GLOW_RAND_POINTS )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	and	ecx, 2048				; 00000800H
	je	$LN17@DrawGlowSp

; 2380 : 		{
; 2381 : 			float randradius;
; 2382 : 	
; 2383 : 			randradius = realRadius + realRadius * PRANDFloat();

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv1292[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv1292[ebp]
	mulss	xmm0, DWORD PTR [edx+252]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+252]
	movss	DWORD PTR _randradius$4[ebp], xmm0

; 2384 : 	
; 2385 : 			os.x = typeData.glowVerts[0].x * scale2d * randradius;

	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR [edx+248]
	mulss	xmm0, DWORD PTR _randradius$4[ebp]
	movss	DWORD PTR _os$[ebp], xmm0

; 2386 : 			os.y = typeData.glowVerts[0].y * scale2d * randradius;

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax+4]
	mulss	xmm0, DWORD PTR [ecx+248]
	mulss	xmm0, DWORD PTR _randradius$4[ebp]
	movss	DWORD PTR _os$[ebp+4], xmm0

; 2387 : 			os.z = typeData.glowVerts[0].z * scale2d * randradius;

	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx+8]
	mulss	xmm0, DWORD PTR [eax+248]
	mulss	xmm0, DWORD PTR _randradius$4[ebp]
	movss	DWORD PTR _os$[ebp+8], xmm0

; 2388 : 		}
; 2389 : 		else

	jmp	$LN16@DrawGlowSp
$LN17@DrawGlowSp:

; 2390 : 		{
; 2391 : 			os.x = typeData.glowVerts[0].x * scale2d * realRadius;

	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR [edx+248]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+252]
	movss	DWORD PTR _os$[ebp], xmm0

; 2392 : 			os.y = typeData.glowVerts[0].y * scale2d * realRadius;

	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx+4]
	mulss	xmm0, DWORD PTR [edx+248]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+252]
	movss	DWORD PTR _os$[ebp+4], xmm0

; 2393 : 			os.z = typeData.glowVerts[0].z * scale2d * realRadius;

	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx+8]
	mulss	xmm0, DWORD PTR [edx+248]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+252]
	movss	DWORD PTR _os$[ebp+8], xmm0
$LN16@DrawGlowSp:

; 2394 : 		}
; 2395 : 		renderer->TransformBillboardPoint( &os,  &center, &v1 );

	lea	ecx, DWORD PTR _v1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _center$[ebp]
	push	edx
	lea	eax, DWORD PTR _os$[ebp]
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformBillboardPoint@Render3D@@QAEXPAUTpoint@@0PAUThreeDVertex@@@Z ; Render3D::TransformBillboardPoint

; 2396 : 	
; 2397 : 		// save it for last tri in strip
; 2398 : 		vLast = v1;

	mov	ecx, 13					; 0000000dH
	lea	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR _vLast$[ebp]
	rep movsd

; 2399 : 	
; 2400 : 		for ( i = 1; i < typeData.numGlowVerts; i++ )

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN15@DrawGlowSp
$LN14@DrawGlowSp:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN15@DrawGlowSp:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+128]
	jge	$LN13@DrawGlowSp

; 2401 : 		{
; 2402 : 			// get 3rd point of triangle
; 2403 : 			if ( !(i & 1) && (type == DRAW2D_SPARKS) )

	mov	ecx, DWORD PTR _i$[ebp]
	and	ecx, 1
	jne	$LN12@DrawGlowSp
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 25			; 00000019H
	jne	$LN12@DrawGlowSp

; 2404 : 			{
; 2405 : 				float randradius;
; 2406 : 	
; 2407 : 				randradius = realRadius + realRadius * PRANDFloat() * 0.8f;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv1338[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv1338[ebp]
	mulss	xmm0, DWORD PTR [eax+252]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+252]
	movss	DWORD PTR _randradius$5[ebp], xmm0

; 2408 : 		
; 2409 : 				os.x = typeData.glowVerts[i].x * scale2d * randradius;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR [eax+248]
	mulss	xmm0, DWORD PTR _randradius$5[ebp]
	movss	DWORD PTR _os$[ebp], xmm0

; 2410 : 				os.y = typeData.glowVerts[i].y * scale2d * randradius;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx+4]
	mulss	xmm0, DWORD PTR [edx+248]
	mulss	xmm0, DWORD PTR _randradius$5[ebp]
	movss	DWORD PTR _os$[ebp+4], xmm0

; 2411 : 				os.z = typeData.glowVerts[i].z * scale2d * randradius;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax+8]
	mulss	xmm0, DWORD PTR [ecx+248]
	mulss	xmm0, DWORD PTR _randradius$5[ebp]
	movss	DWORD PTR _os$[ebp+8], xmm0
	jmp	$LN9@DrawGlowSp
$LN12@DrawGlowSp:

; 2412 : 			}
; 2413 : 			else if ( !(i & 1) && (typeData.flags & GLOW_RAND_POINTS) )

	mov	edx, DWORD PTR _i$[ebp]
	and	edx, 1
	jne	$LN10@DrawGlowSp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	and	ecx, 2048				; 00000800H
	je	$LN10@DrawGlowSp

; 2414 : 			{
; 2415 : 				float randradius;
; 2416 : 	
; 2417 : 				randradius = realRadius + realRadius * PRANDFloat();

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv1361[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv1361[ebp]
	mulss	xmm0, DWORD PTR [edx+252]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+252]
	movss	DWORD PTR _randradius$6[ebp], xmm0

; 2418 : 		
; 2419 : 				os.x = typeData.glowVerts[i].x * scale2d * randradius;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR [edx+248]
	mulss	xmm0, DWORD PTR _randradius$6[ebp]
	movss	DWORD PTR _os$[ebp], xmm0

; 2420 : 				os.y = typeData.glowVerts[i].y * scale2d * randradius;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax+4]
	mulss	xmm0, DWORD PTR [ecx+248]
	mulss	xmm0, DWORD PTR _randradius$6[ebp]
	movss	DWORD PTR _os$[ebp+4], xmm0

; 2421 : 				os.z = typeData.glowVerts[i].z * scale2d * randradius;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx+8]
	mulss	xmm0, DWORD PTR [eax+248]
	mulss	xmm0, DWORD PTR _randradius$6[ebp]
	movss	DWORD PTR _os$[ebp+8], xmm0

; 2422 : 			}
; 2423 : 			else

	jmp	$LN9@DrawGlowSp
$LN10@DrawGlowSp:

; 2424 : 			{
; 2425 : 				os.x = typeData.glowVerts[i].x * scale2d * realRadius;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR [edx+248]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+252]
	movss	DWORD PTR _os$[ebp], xmm0

; 2426 : 				os.y = typeData.glowVerts[i].y * scale2d * realRadius;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx+4]
	mulss	xmm0, DWORD PTR [edx+248]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+252]
	movss	DWORD PTR _os$[ebp+4], xmm0

; 2427 : 				os.z = typeData.glowVerts[i].z * scale2d * realRadius;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx+8]
	mulss	xmm0, DWORD PTR [edx+248]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+252]
	movss	DWORD PTR _os$[ebp+8], xmm0
$LN9@DrawGlowSp:

; 2428 : 			}
; 2429 : 			renderer->TransformBillboardPoint( &os,  &center, &v2 );

	lea	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _center$[ebp]
	push	edx
	lea	eax, DWORD PTR _os$[ebp]
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformBillboardPoint@Render3D@@QAEXPAUTpoint@@0PAUThreeDVertex@@@Z ; Render3D::TransformBillboardPoint

; 2430 : 	
; 2431 : 			renderer->DrawTriangle( &v0, &v1, &v2, CULL_ALLOW_ALL );

	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v1$[ebp]
	push	edx
	lea	eax, DWORD PTR _v0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?DrawTriangle@Render3D@@QAEXPAUThreeDVertex@@00H_N1@Z ; Render3D::DrawTriangle

; 2432 : 	
; 2433 : 			// move v2 to v1 for next time thru loop
; 2434 : 			v1 = v2;

	mov	ecx, 13					; 0000000dH
	lea	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR _v1$[ebp]
	rep movsd

; 2435 : 		}

	jmp	$LN14@DrawGlowSp
$LN13@DrawGlowSp:

; 2436 : 	}
; 2437 : 	// ground flash
; 2438 : 	// oriented flat to the ground plane
; 2439 : 	else

	jmp	$LN3@DrawGlowSp
$LN20@DrawGlowSp:

; 2440 : 	{
; 2441 : 		// transform the center point
; 2442 : 		renderer->TransformPoint( &position,  &v0 );

	lea	ecx, DWORD PTR _v0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformPoint

; 2443 : 	
; 2444 : 		// do 1st point
; 2445 : 		if ( typeData.flags & GLOW_RAND_POINTS )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	and	ecx, 2048				; 00000800H
	je	$LN7@DrawGlowSp

; 2446 : 		{
; 2447 : 			float randradius;
; 2448 : 	
; 2449 : 			randradius = realRadius + realRadius * PRANDFloat() * 0.3f;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv1409[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv1409[ebp]
	mulss	xmm0, DWORD PTR [edx+252]
	mulss	xmm0, DWORD PTR __real@3e99999a
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+252]
	movss	DWORD PTR _randradius$1[ebp], xmm0

; 2450 : 	
; 2451 : 			os.x = position.x + typeData.glowVerts[0].z * scale2d * randradius;

	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx+8]
	mulss	xmm0, DWORD PTR [edx+248]
	mulss	xmm0, DWORD PTR _randradius$1[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _os$[ebp], xmm0

; 2452 : 			os.y = position.y + typeData.glowVerts[0].y * scale2d * randradius;

	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx+4]
	mulss	xmm0, DWORD PTR [edx+248]
	mulss	xmm0, DWORD PTR _randradius$1[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _os$[ebp+4], xmm0

; 2453 : 			os.z = position.z;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR _os$[ebp+8], xmm0

; 2454 : 		}
; 2455 : 		else

	jmp	$LN6@DrawGlowSp
$LN7@DrawGlowSp:

; 2456 : 		{
; 2457 : 			os.x = position.x + typeData.glowVerts[0].z * scale2d * realRadius;

	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx+8]
	mulss	xmm0, DWORD PTR [eax+248]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+252]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR _os$[ebp], xmm0

; 2458 : 			os.y = position.y + typeData.glowVerts[0].y * scale2d * realRadius;

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax+4]
	mulss	xmm0, DWORD PTR [ecx+248]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+252]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _os$[ebp+4], xmm0

; 2459 : 			os.z = position.z;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR _os$[ebp+8], xmm0
$LN6@DrawGlowSp:

; 2460 : 		}
; 2461 : 		renderer->TransformPoint( &os, &v1 );

	lea	edx, DWORD PTR _v1$[ebp]
	push	edx
	lea	eax, DWORD PTR _os$[ebp]
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformPoint

; 2462 : 	
; 2463 : 		// save it for last tri in strip
; 2464 : 		vLast = v1;

	mov	ecx, 13					; 0000000dH
	lea	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR _vLast$[ebp]
	rep movsd

; 2465 : 	
; 2466 : 		for ( i = 1; i < typeData.numGlowVerts; i++ )

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN5@DrawGlowSp
$LN4@DrawGlowSp:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN5@DrawGlowSp:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+128]
	jge	$LN3@DrawGlowSp

; 2467 : 		{
; 2468 : 			// get 3rd point of triangle
; 2469 : 			if ( !(i & 1) && (typeData.flags & GLOW_RAND_POINTS) )

	mov	ecx, DWORD PTR _i$[ebp]
	and	ecx, 1
	jne	$LN2@DrawGlowSp
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	and	eax, 2048				; 00000800H
	je	$LN2@DrawGlowSp

; 2470 : 			{
; 2471 : 				float randradius;
; 2472 : 	
; 2473 : 				randradius = realRadius + realRadius * PRANDFloat() * 0.3f;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv1458[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv1458[ebp]
	mulss	xmm0, DWORD PTR [ecx+252]
	mulss	xmm0, DWORD PTR __real@3e99999a
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+252]
	movss	DWORD PTR _randradius$2[ebp], xmm0

; 2474 : 		
; 2475 : 				os.x = position.x + typeData.glowVerts[i].z * scale2d * randradius;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax+8]
	mulss	xmm0, DWORD PTR [ecx+248]
	mulss	xmm0, DWORD PTR _randradius$2[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR _os$[ebp], xmm0

; 2476 : 				os.y = position.y + typeData.glowVerts[i].y * scale2d * randradius;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax+4]
	mulss	xmm0, DWORD PTR [ecx+248]
	mulss	xmm0, DWORD PTR _randradius$2[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR _os$[ebp+4], xmm0

; 2477 : 				os.z = position.z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _os$[ebp+8], xmm0

; 2478 : 			}
; 2479 : 			else

	jmp	$LN1@DrawGlowSp
$LN2@DrawGlowSp:

; 2480 : 			{
; 2481 : 				os.x = position.x + typeData.glowVerts[i].z * scale2d * realRadius;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx+8]
	mulss	xmm0, DWORD PTR [edx+248]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+252]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR _os$[ebp], xmm0

; 2482 : 				os.y = position.y + typeData.glowVerts[i].y * scale2d * realRadius;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx+4]
	mulss	xmm0, DWORD PTR [eax+248]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+252]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR _os$[ebp+4], xmm0

; 2483 : 				os.z = position.z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _os$[ebp+8], xmm0
$LN1@DrawGlowSp:

; 2484 : 			}
; 2485 : 			renderer->TransformPoint( &os, &v2 );

	lea	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _os$[ebp]
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformPoint

; 2486 : 	
; 2487 : 			renderer->DrawTriangle( &v0, &v1, &v2, CULL_ALLOW_ALL );

	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _v2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v0$[ebp]
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?DrawTriangle@Render3D@@QAEXPAUThreeDVertex@@00H_N1@Z ; Render3D::DrawTriangle

; 2488 : 	
; 2489 : 			// move v2 to v1 for next time thru loop
; 2490 : 			v1 = v2;

	mov	ecx, 13					; 0000000dH
	lea	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR _v1$[ebp]
	rep movsd

; 2491 : 		}

	jmp	$LN4@DrawGlowSp
$LN3@DrawGlowSp:

; 2492 : 	}
; 2493 : 
; 2494 : 	// kick out last triangle
; 2495 : 	renderer->DrawTriangle( &v0, &v1, &vLast, CULL_ALLOW_ALL );

	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _vLast$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v0$[ebp]
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?DrawTriangle@Render3D@@QAEXPAUThreeDVertex@@00H_N1@Z ; Render3D::DrawTriangle
$LN43@DrawGlowSp:

; 2496 : }

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
?DrawGlowSphere@Drawable2D@@IAEXPAVRenderOTW@@H@Z ENDP	; Drawable2D::DrawGlowSphere
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\draw2d.cpp
_TEXT	SEGMENT
_i$ = -244						; size = 4
_typeData$ = -240					; size = 4
_vLast$ = -236						; size = 52
_v0$ = -184						; size = 52
_v2$ = -132						; size = 52
_v1$ = -80						; size = 52
_center$ = -28						; size = 12
_os$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_renderer$ = 8						; size = 4
_pos$ = 12						; size = 4
_radius$ = 16						; size = 4
_alpha$ = 20						; size = 4
?DrawGlowSphere@Drawable2D@@SAXPAVRenderOTW@@PAUTpoint@@MM@Z PROC ; Drawable2D::DrawGlowSphere

; 4017 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi

; 4018 : 	Tpoint				center, os;
; 4019 : 	ThreeDVertex		v0, v1, v2, vLast;
; 4020 : 	int					i;
; 4021 : 	TYPES2D 			*typeData;		// data for anim type
; 4022 : 
; 4023 : 	// get the type data info
; 4024 : 	typeData = &gTypeTable[ DRAW2D_EXPLCIRC_GLOW ];

	mov	eax, 40					; 00000028H
	shl	eax, 4
	add	eax, OFFSET ?gTypeTable@@3PAU_TYPES2D@@A ; gTypeTable
	mov	DWORD PTR _typeData$[ebp], eax

; 4025 : 
; 4026 : 
; 4027 : 	// set up the verts rgb and alpha's
; 4028 : 
; 4029 : 	if ( sGreenMode )

	cmp	DWORD PTR ?sGreenMode@@3HA, 0		; sGreenMode
	je	$LN5@DrawGlowSp

; 4030 : 	{
; 4031 : 		v0.r = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v0$[ebp+8], xmm0

; 4032 : 		v0.g = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v0$[ebp+12], xmm0

; 4033 : 		v0.b = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v0$[ebp+16], xmm0

; 4034 : 		v0.a = alpha;

	movss	xmm0, DWORD PTR _alpha$[ebp]
	movss	DWORD PTR _v0$[ebp+20], xmm0

; 4035 : 	
; 4036 : 		v1.r = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1$[ebp+8], xmm0

; 4037 : 		v1.g = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v1$[ebp+12], xmm0

; 4038 : 		v1.b = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1$[ebp+16], xmm0

; 4039 : 		v1.a = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1$[ebp+20], xmm0

; 4040 : 	
; 4041 : 		v2.r = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v2$[ebp+8], xmm0

; 4042 : 		v2.g = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v2$[ebp+12], xmm0

; 4043 : 		v2.b = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v2$[ebp+16], xmm0

; 4044 : 		v2.a = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v2$[ebp+20], xmm0

; 4045 : 	}
; 4046 : 	else

	jmp	$LN4@DrawGlowSp
$LN5@DrawGlowSp:

; 4047 : 	{
; 4048 : 		v0.r = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v0$[ebp+8], xmm0

; 4049 : 		v0.g = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v0$[ebp+12], xmm0

; 4050 : 		v0.b = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v0$[ebp+16], xmm0

; 4051 : 		v0.a = alpha;

	movss	xmm0, DWORD PTR _alpha$[ebp]
	movss	DWORD PTR _v0$[ebp+20], xmm0

; 4052 : 	
; 4053 : 
; 4054 : 		v1.r = 0.1f + NRANDPOS * 0.8f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _v1$[ebp+8], xmm0

; 4055 : 		v1.g = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1$[ebp+12], xmm0

; 4056 : 		v1.b = 0.1f + NRANDPOS * 0.8f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _v1$[ebp+16], xmm0

; 4057 : 		v1.a = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1$[ebp+20], xmm0

; 4058 : 
; 4059 : 		v2.r = 0.1f + NRANDPOS * 0.8f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _v2$[ebp+8], xmm0

; 4060 : 		v2.g = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v2$[ebp+12], xmm0

; 4061 : 		v2.b = 0.1f + NRANDPOS * 0.8f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _v2$[ebp+16], xmm0

; 4062 : 		v2.a = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v2$[ebp+20], xmm0
$LN4@DrawGlowSp:

; 4063 : 
; 4064 : 	}
; 4065 : 
; 4066 : 
; 4067 : 	// Set up our drawing mode
; 4068 : 	renderer->context.RestoreState(STATE_ALPHA_GOURAUD);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _renderer$[ebp]
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 4069 : 	renderer->context.SetState(MPR_STA_ALPHA_OP_FUNCTION,MPR_TO_MODULATE); //JAM 18Oct03

	push	4
	push	5
	mov	ecx, DWORD PTR _renderer$[ebp]
	add	ecx, 100				; 00000064H
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 4070 : 
; 4071 : 	// transform the center point
; 4072 : 	renderer->TransformPointToView( pos,  &center );

	lea	ecx, DWORD PTR _center$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformPointToView@Render3D@@QAEXPAUTpoint@@0@Z ; Render3D::TransformPointToView

; 4073 : 	renderer->TransformPoint( pos,  &v0 );

	lea	eax, DWORD PTR _v0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformPoint

; 4074 : 
; 4075 : 	// do 1st point
; 4076 : 	os.x = typeData->glowVerts[0].x * radius;

	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, DWORD PTR _typeData$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _os$[ebp], xmm0

; 4077 : 	os.y = typeData->glowVerts[0].y * radius;

	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, DWORD PTR _typeData$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	movss	xmm0, DWORD PTR [ecx+edx+4]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _os$[ebp+4], xmm0

; 4078 : 	os.z = typeData->glowVerts[0].z * radius;

	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, DWORD PTR _typeData$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	movss	xmm0, DWORD PTR [ecx+edx+8]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _os$[ebp+8], xmm0

; 4079 : 	renderer->TransformBillboardPoint( &os,  &center, &v1 );

	lea	edx, DWORD PTR _v1$[ebp]
	push	edx
	lea	eax, DWORD PTR _center$[ebp]
	push	eax
	lea	ecx, DWORD PTR _os$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformBillboardPoint@Render3D@@QAEXPAUTpoint@@0PAUThreeDVertex@@@Z ; Render3D::TransformBillboardPoint

; 4080 : 
; 4081 : 	// save it for last tri in strip
; 4082 : 	vLast = v1;

	mov	ecx, 13					; 0000000dH
	lea	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR _vLast$[ebp]
	rep movsd

; 4083 : 
; 4084 : 	for ( i = 1; i < typeData->numGlowVerts; i++ )

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN3@DrawGlowSp
$LN2@DrawGlowSp:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@DrawGlowSp:
	mov	eax, DWORD PTR _typeData$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jge	$LN1@DrawGlowSp

; 4085 : 	{
; 4086 : 		// get 3rd point of triangle
; 4087 : 		os.x = typeData->glowVerts[i].x * radius;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _typeData$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _os$[ebp], xmm0

; 4088 : 		os.y = typeData->glowVerts[i].y * radius;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _typeData$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	movss	xmm0, DWORD PTR [ecx+edx+4]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _os$[ebp+4], xmm0

; 4089 : 		os.z = typeData->glowVerts[i].z * radius;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _typeData$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	movss	xmm0, DWORD PTR [ecx+edx+8]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _os$[ebp+8], xmm0

; 4090 : 		renderer->TransformBillboardPoint( &os,  &center, &v2 );

	lea	edx, DWORD PTR _v2$[ebp]
	push	edx
	lea	eax, DWORD PTR _center$[ebp]
	push	eax
	lea	ecx, DWORD PTR _os$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformBillboardPoint@Render3D@@QAEXPAUTpoint@@0PAUThreeDVertex@@@Z ; Render3D::TransformBillboardPoint

; 4091 : 
; 4092 : 		renderer->DrawTriangle( &v0, &v1, &v2, CULL_ALLOW_ALL );

	push	0
	push	0
	push	0
	lea	edx, DWORD PTR _v2$[ebp]
	push	edx
	lea	eax, DWORD PTR _v1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v0$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?DrawTriangle@Render3D@@QAEXPAUThreeDVertex@@00H_N1@Z ; Render3D::DrawTriangle

; 4093 : 
; 4094 : 		// move v2 to v1 for next time thru loop
; 4095 : 		v1 = v2;

	mov	ecx, 13					; 0000000dH
	lea	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR _v1$[ebp]
	rep movsd

; 4096 : 	}

	jmp	$LN2@DrawGlowSp
$LN1@DrawGlowSp:

; 4097 : 
; 4098 : 	// kick out last triangle
; 4099 : 	renderer->DrawTriangle( &v0, &v1, &vLast, CULL_ALLOW_ALL );

	push	0
	push	0
	push	0
	lea	edx, DWORD PTR _vLast$[ebp]
	push	edx
	lea	eax, DWORD PTR _v1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v0$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?DrawTriangle@Render3D@@QAEXPAUThreeDVertex@@00H_N1@Z ; Render3D::DrawTriangle

; 4100 : }

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawGlowSphere@Drawable2D@@SAXPAVRenderOTW@@PAUTpoint@@MM@Z ENDP ; Drawable2D::DrawGlowSphere
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\draw2d.cpp
_TEXT	SEGMENT
_mode$ = 8						; size = 4
?SetGreenMode@Drawable2D@@SAXH@Z PROC			; Drawable2D::SetGreenMode

; 4000 : {

	push	ebp
	mov	ebp, esp

; 4001 : 	// if mode is non zero, set greenmode to 1st green texture offset
; 4002 : 	if ( mode )

	cmp	DWORD PTR _mode$[ebp], 0
	je	SHORT $LN2@SetGreenMo

; 4003 : 		sGreenMode = 15;

	mov	DWORD PTR ?sGreenMode@@3HA, 15		; sGreenMode, 0000000fH

; 4004 : 	else

	jmp	SHORT $LN3@SetGreenMo
$LN2@SetGreenMo:

; 4005 : 		sGreenMode = 0;

	mov	DWORD PTR ?sGreenMode@@3HA, 0		; sGreenMode
$LN3@SetGreenMo:

; 4006 : }

	pop	ebp
	ret	0
?SetGreenMode@Drawable2D@@SAXH@Z ENDP			; Drawable2D::SetGreenMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\draw2d.cpp
_TEXT	SEGMENT
_LOD$ = 8						; size = 4
?SetLOD@Drawable2D@@SAXM@Z PROC				; Drawable2D::SetLOD

; 3990 : {

	push	ebp
	mov	ebp, esp

; 3991 : 	sLOD = LOD;

	movss	xmm0, DWORD PTR _LOD$[ebp]
	movss	DWORD PTR _sLOD, xmm0

; 3992 : 	sMaxScreenRes = 0.1f + sLOD * 0.9f;

	movss	xmm0, DWORD PTR _sLOD
	mulss	xmm0, DWORD PTR __real@3f666666
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _sMaxScreenRes, xmm0

; 3993 : }

	pop	ebp
	ret	0
?SetLOD@Drawable2D@@SAXM@Z ENDP				; Drawable2D::SetLOD
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\draw2d.cpp
_TEXT	SEGMENT
_rate$ = -8						; size = 4
_this$ = -4						; size = 4
?GetAlphaTimeToLive@Drawable2D@@QAEMXZ PROC		; Drawable2D::GetAlphaTimeToLive
; _this$ = ecx

; 1278 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1279 : 	float rate;
; 1280 : 
; 1281 : 	// no fading
; 1282 : 	if ( typeData.fadeRate == 0.0f )

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+104]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@GetAlphaTi

; 1283 : 		return 0.0f;

	fldz
	jmp	SHORT $LN3@GetAlphaTi
$LN2@GetAlphaTi:

; 1284 : 
; 1285 : 	typeData.fadeRate*=(1.0f+(float)((rand()&0x07)-4)/10.0f);

	call	_rand
	and	eax, 7
	sub	eax, 4
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@41200000
	addss	xmm0, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+104]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+104], xmm0

; 1286 : 
; 1287 : 	rate = initAlpha/( 1000.0f * typeData.fadeRate );

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@447a0000
	mulss	xmm0, DWORD PTR [eax+104]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+56]
	divss	xmm1, xmm0
	movss	DWORD PTR _rate$[ebp], xmm1

; 1288 : 
; 1289 : 	if ( type == DRAW2D_FIRE1 )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 44			; 0000002cH
	jne	SHORT $LN1@GetAlphaTi

; 1290 : 		rate += 3.0f;

	movss	xmm0, DWORD PTR _rate$[ebp]
	addss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR _rate$[ebp], xmm0
$LN1@GetAlphaTi:

; 1291 : 
; 1292 : 	return rate;

	fld	DWORD PTR _rate$[ebp]
$LN3@GetAlphaTi:

; 1293 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetAlphaTimeToLive@Drawable2D@@QAEMXZ ENDP		; Drawable2D::GetAlphaTimeToLive
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\draw2d.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_now$ = 12						; size = 4
?SetStartTime@Drawable2D@@QAEXKK@Z PROC			; Drawable2D::SetStartTime
; _this$ = ecx

; 3208 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3209 : 	explicitStartTime = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+140], 1

; 3210 : 	startTime = start;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _start$[ebp]
	mov	DWORD PTR [ecx+80], edx

; 3211 : 	firstFrame = GetAnimFrame( (int)(now - start), startTime );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	mov	edx, DWORD PTR _now$[ebp]
	sub	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAnimFrame@Drawable2D@@IAEHHK@Z	; Drawable2D::GetAnimFrame
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 3212 : };

	mov	esp, ebp
	pop	ebp
	ret	8
?SetStartTime@Drawable2D@@QAEXKK@Z ENDP			; Drawable2D::SetStartTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\draw2d.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
?SetPosition@Drawable2D@@QAEXPAUTpoint@@@Z PROC		; Drawable2D::SetPosition
; _this$ = ecx

; 1265 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1266 : 	// Update the location of this object
; 1267 : 	position = *p;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx

; 1268 : 
; 1269 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetPosition@Drawable2D@@QAEXPAUTpoint@@@Z ENDP		; Drawable2D::SetPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\draw2d.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
_rot$ = 12						; size = 4
?Update@Drawable2D@@UAEXPBUTpoint@@PBUTrotation@@@Z PROC ; Drawable2D::Update
; _this$ = ecx

; 1302 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1303 : 
; 1304 : 	// Update the location of this object
; 1305 : 	position = *pos;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx

; 1306 : 	orientation = *rot;

	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 260				; 00000104H
	mov	ecx, 9
	mov	esi, DWORD PTR _rot$[ebp]
	rep movsd

; 1307 : 
; 1308 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?Update@Drawable2D@@UAEXPBUTpoint@@PBUTrotation@@@Z ENDP ; Drawable2D::Update
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\draw2d.cpp
_TEXT	SEGMENT
_doFivePoints$ = -372					; size = 4
tv237 = -368						; size = 4
_scaleZ$1 = -364					; size = 4
_now$ = -360						; size = 4
_dT$ = -356						; size = 4
_this$ = -352						; size = 4
_spos$ = -348						; size = 52
_v0$ = -296						; size = 52
_v2$ = -244						; size = 52
_v3$ = -192						; size = 52
_viewLoc$2 = -140					; size = 12
_upv$ = -128						; size = 12
_leftv$ = -116						; size = 12
_v1$ = -104						; size = 52
_du$ = -52						; size = 12
_dl$ = -40						; size = 12
_ws$ = -28						; size = 12
_os$3 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_renderer$ = 8						; size = 4
_LOD$ = 12						; size = 4
?Draw@Drawable2D@@UAEXPAVRenderOTW@@H@Z PROC		; Drawable2D::Draw
; _this$ = ecx

; 1319 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 372				; 00000174H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1320 : 	Tpoint				ws={0.0F};

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _ws$[ebp], xmm0
	xor	eax, eax
	mov	DWORD PTR _ws$[ebp+4], eax
	mov	DWORD PTR _ws$[ebp+8], eax

; 1321 : 	ThreeDVertex		v0, v1, v2, v3, spos;
; 1322 : 	Tpoint				upv={0.0F}, leftv={0.0F};

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _upv$[ebp], xmm0
	xor	ecx, ecx
	mov	DWORD PTR _upv$[ebp+4], ecx
	mov	DWORD PTR _upv$[ebp+8], ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _leftv$[ebp], xmm0
	xor	edx, edx
	mov	DWORD PTR _leftv$[ebp+4], edx
	mov	DWORD PTR _leftv$[ebp+8], edx

; 1323 : 	Tpoint				dl={0.0F}, du={0.0F};

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dl$[ebp], xmm0
	xor	eax, eax
	mov	DWORD PTR _dl$[ebp+4], eax
	mov	DWORD PTR _dl$[ebp+8], eax
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _du$[ebp], xmm0
	xor	ecx, ecx
	mov	DWORD PTR _du$[ebp+4], ecx
	mov	DWORD PTR _du$[ebp+8], ecx

; 1324 : 	DWORD				now=0;

	mov	DWORD PTR _now$[ebp], 0

; 1325 : 	int					dT=0;

	mov	DWORD PTR _dT$[ebp], 0

; 1326 : 	BOOL				doFivePoints = FALSE;

	mov	DWORD PTR _doFivePoints$[ebp], 0

; 1327 : 
; 1328 : 
; 1329 : 	// force green mode (debugging)
; 1330 : 	// sGreenMode = 15;
; 1331 : 
; 1332 : 
; 1333 : 	// special case of object
; 1334 : 	if ( typeData.flags & GLOW_SPHERE )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	and	eax, 1024				; 00000400H
	je	SHORT $LN67@Draw

; 1335 : 	{
; 1336 : 		DrawGlowSphere( renderer, LOD );

	mov	ecx, DWORD PTR _LOD$[ebp]
	push	ecx
	mov	edx, DWORD PTR _renderer$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawGlowSphere@Drawable2D@@IAEXPAVRenderOTW@@H@Z ; Drawable2D::DrawGlowSphere

; 1337 : 		return;

	jmp	$LN68@Draw
$LN67@Draw:

; 1338 : 	}
; 1339 : 
; 1340 : 	// special case of object
; 1341 : 	if ( typeData.flags & GOURAUD_TRI )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	and	ecx, 524288				; 00080000H
	je	SHORT $LN66@Draw

; 1342 : 	{
; 1343 : 		DrawGouraudTri( renderer, LOD );

	mov	edx, DWORD PTR _LOD$[ebp]
	push	edx
	mov	eax, DWORD PTR _renderer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawGouraudTri@Drawable2D@@IAEXPAVRenderOTW@@H@Z ; Drawable2D::DrawGouraudTri

; 1344 : 		return;

	jmp	$LN68@Draw
$LN66@Draw:

; 1345 : 	}
; 1346 : 
; 1347 : 	spos.x = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _spos$[ebp], xmm0

; 1348 : 	spos.y = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _spos$[ebp+4], xmm0

; 1349 : 	spos.r = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _spos$[ebp+8], xmm0

; 1350 : 	spos.g = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _spos$[ebp+12], xmm0

; 1351 : 	spos.b = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _spos$[ebp+16], xmm0

; 1352 : 	spos.a = 0.0F;	

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _spos$[ebp+20], xmm0

; 1353 : 	spos.u = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _spos$[ebp+24], xmm0

; 1354 : 	spos.v = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _spos$[ebp+28], xmm0

; 1355 : 	spos.q = 0.0F; 

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _spos$[ebp+32], xmm0

; 1356 : 	spos.clipFlag = 0;

	mov	DWORD PTR _spos$[ebp+36], 0

; 1357 : 	spos.csX = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _spos$[ebp+40], xmm0

; 1358 : 	spos.csY = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _spos$[ebp+44], xmm0

; 1359 : 	spos.csZ = 0.0F;	

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _spos$[ebp+48], xmm0

; 1360 : 	v0.csZ = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v0$[ebp+48], xmm0

; 1361 : 	v1.csZ = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1$[ebp+48], xmm0

; 1362 : 	v2.csZ = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v2$[ebp+48], xmm0

; 1363 : 	v3.csZ = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v3$[ebp+48], xmm0

; 1364 : 
; 1365 : 	// see if we should do 5 points for billboard
; 1366 : 	if ( typeData.flags & DO_FIVE_POINTS )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	and	edx, 2097152				; 00200000H
	je	$LN65@Draw

; 1367 : 	{
; 1368 : 		float scaleZ;
; 1369 : 
; 1370 : 		renderer->TransformPoint( &position,  &spos );

	lea	eax, DWORD PTR _spos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformPoint

; 1371 : 		if ( spos.csZ < 1.0f )

	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR _spos$[ebp+48]
	jbe	SHORT $LN64@Draw

; 1372 : 			return;

	jmp	$LN68@Draw
$LN64@Draw:

; 1373 : 		scaleZ = (SCATTER_ZMAX - spos.csZ)/SCATTER_ZMAX;

	movss	xmm0, DWORD PTR __real@466a6000
	mulss	xmm0, DWORD PTR _sLOD
	addss	xmm0, DWORD PTR __real@459c4000
	subss	xmm0, DWORD PTR _spos$[ebp+48]
	movss	xmm1, DWORD PTR __real@466a6000
	mulss	xmm1, DWORD PTR _sLOD
	addss	xmm1, DWORD PTR __real@459c4000
	divss	xmm0, xmm1
	movss	DWORD PTR _scaleZ$1[ebp], xmm0

; 1374 : 		if ( scaleZ < 0.0f ) scaleZ = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _scaleZ$1[ebp]
	jbe	SHORT $LN63@Draw
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _scaleZ$1[ebp], xmm0
$LN63@Draw:

; 1375 : 		scaleZ *= scaleZ;

	movss	xmm0, DWORD PTR _scaleZ$1[ebp]
	mulss	xmm0, DWORD PTR _scaleZ$1[ebp]
	movss	DWORD PTR _scaleZ$1[ebp], xmm0

; 1376 : 		doFivePoints = ( scaleZ * sLOD > 0.5f );

	movss	xmm0, DWORD PTR _scaleZ$1[ebp]
	mulss	xmm0, DWORD PTR _sLOD
	comiss	xmm0, DWORD PTR __real@3f000000
	jbe	SHORT $LN70@Draw
	mov	DWORD PTR tv237[ebp], 1
	jmp	SHORT $LN71@Draw
$LN70@Draw:
	mov	DWORD PTR tv237[ebp], 0
$LN71@Draw:
	mov	edx, DWORD PTR tv237[ebp]
	mov	DWORD PTR _doFivePoints$[ebp], edx
$LN65@Draw:

; 1377 : 	}
; 1378 : 
; 1379 : 
; 1380 : 	// Get the curent time
; 1381 : 	now = TheTimeManager.GetClockTime();

	mov	ecx, OFFSET ?TheTimeManager@@3VTimeManager@@A ; TheTimeManager
	call	?GetClockTime@TimeManager@@QAEKXZ	; TimeManager::GetClockTime
	mov	DWORD PTR _now$[ebp], eax

; 1382 : 	if ( explicitStartTime == FALSE )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+140], 0
	jne	SHORT $LN62@Draw

; 1383 : 	{
; 1384 : 		startTime = now;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _now$[ebp]
	mov	DWORD PTR [ecx+80], edx

; 1385 : 		firstFrame = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], 0
$LN62@Draw:

; 1386 : 	}
; 1387 : 
; 1388 : 
; 1389 : 	/*
; 1390 : 	** what's our new frame going to be?
; 1391 : 	*/
; 1392 : 	dT = now - startTime;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _now$[ebp]
	sub	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR _dT$[ebp], edx

; 1393 : 	// time going backwards, and prior to start time return.....
; 1394 : 	if ( dT < 0 )

	jns	SHORT $LN61@Draw

; 1395 : 		return;

	jmp	$LN68@Draw
$LN61@Draw:

; 1396 : 
; 1397 : 	//  get the texture....
; 1398 : 	if ( typeData.flags & ALPHA_PER_TEXEL )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	and	ecx, 8388608				; 00800000H
	je	$LN60@Draw

; 1399 : 	{
; 1400 : 		if ( curFrame < 0 )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+64], 0
	jge	$LN59@Draw

; 1401 : 		{
; 1402 : 			// ok to start
; 1403 : 			if ( explicitStartTime == TRUE )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+140], 1
	jne	SHORT $LN58@Draw

; 1404 : 				expandStartTime = startTime;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	mov	DWORD PTR [ecx+88], eax

; 1405 : 			else

	jmp	SHORT $LN57@Draw
$LN58@Draw:

; 1406 : 				expandStartTime = now;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _now$[ebp]
	mov	DWORD PTR [ecx+88], edx
$LN57@Draw:

; 1407 : 
; 1408 : 			if ( typeData.flags & FADE_START )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	and	ecx, 32					; 00000020H
	je	SHORT $LN56@Draw

; 1409 : 			{
; 1410 : 				if ( explicitStartTime == TRUE )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+140], 1
	jne	SHORT $LN55@Draw

; 1411 : 					alphaStartTime = startTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+84], edx

; 1412 : 				else

	jmp	SHORT $LN54@Draw
$LN55@Draw:

; 1413 : 					alphaStartTime = now;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _now$[ebp]
	mov	DWORD PTR [eax+84], ecx
$LN54@Draw:

; 1414 : 				startFade = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+136], 1
$LN56@Draw:

; 1415 : 			}
; 1416 : 
; 1417 : 			// now we can say start time is true if not already
; 1418 : 			explicitStartTime = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+140], 1
$LN59@Draw:

; 1419 : 		}
; 1420 : 		curFrame = GetAnimFrame( dT, startTime );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	push	edx
	mov	eax, DWORD PTR _dT$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAnimFrame@Drawable2D@@IAEHHK@Z	; Drawable2D::GetAnimFrame
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+64], eax

; 1421 : 
; 1422 : 		if ( sGreenMode )

	cmp	DWORD PTR ?sGreenMode@@3HA, 0		; sGreenMode
	je	SHORT $LN53@Draw

; 1423 : 			curTex = &gAplTexturesGreen[ typeData.texId + curFrame];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+64]
	imul	eax, 24					; 00000018H
	add	eax, OFFSET ?gAplTexturesGreen@@3PAVTexture@@A ; gAplTexturesGreen
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+144], eax

; 1424 : 		else

	jmp	SHORT $LN52@Draw
$LN53@Draw:

; 1425 : 			curTex = &gAplTextures[ typeData.texId + curFrame];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+64]
	imul	ecx, 24					; 00000018H
	add	ecx, OFFSET ?gAplTextures@@3PAVTexture@@A ; gAplTextures
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+144], ecx
$LN52@Draw:

; 1426 : 	}
; 1427 : 	else

	jmp	$LN37@Draw
$LN60@Draw:

; 1428 : 	{
; 1429 : 		curTex = &gGlobTextures[ typeData.texId + sGreenMode ];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	add	edx, DWORD PTR ?sGreenMode@@3HA		; sGreenMode
	imul	edx, 24					; 00000018H
	add	edx, OFFSET ?gGlobTextures@@3PAVTexture@@A ; gGlobTextures
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+144], edx

; 1430 : 	
; 1431 : 		// have we started yet?
; 1432 : 		if ( curFrame < 0 )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+64], 0
	jge	$LN50@Draw

; 1433 : 		{
; 1434 : 			if ( firstFrame == typeData.numTextures )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+72]
	cmp	ecx, DWORD PTR [eax+116]
	jne	SHORT $LN48@Draw

; 1435 : 			{
; 1436 : 				firstFrame = GetAnimFrame( dT, startTime );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	push	eax
	mov	ecx, DWORD PTR _dT$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAnimFrame@Drawable2D@@IAEHHK@Z	; Drawable2D::GetAnimFrame
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+72], eax

; 1437 : 				if ( firstFrame == typeData.numTextures )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+72]
	cmp	edx, DWORD PTR [ecx+116]
	jne	SHORT $LN48@Draw

; 1438 : 					return;

	jmp	$LN68@Draw
$LN48@Draw:

; 1439 : 			}
; 1440 : 	
; 1441 : 			// ok to start
; 1442 : 			if ( explicitStartTime == TRUE )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+140], 1
	jne	SHORT $LN47@Draw

; 1443 : 				expandStartTime = startTime;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	mov	DWORD PTR [ecx+88], eax

; 1444 : 			else

	jmp	SHORT $LN46@Draw
$LN47@Draw:

; 1445 : 				expandStartTime = now;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _now$[ebp]
	mov	DWORD PTR [ecx+88], edx
$LN46@Draw:

; 1446 : 
; 1447 : 			curFrame = firstFrame;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+64], edx

; 1448 : 
; 1449 : 			if ( typeData.flags & FADE_START )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	and	ecx, 32					; 00000020H
	je	SHORT $LN45@Draw

; 1450 : 			{
; 1451 : 				if ( explicitStartTime == TRUE )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+140], 1
	jne	SHORT $LN44@Draw

; 1452 : 					alphaStartTime = startTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+84], edx

; 1453 : 				else

	jmp	SHORT $LN43@Draw
$LN44@Draw:

; 1454 : 					alphaStartTime = now;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _now$[ebp]
	mov	DWORD PTR [eax+84], ecx
$LN43@Draw:

; 1455 : 				startFade = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+136], 1
$LN45@Draw:

; 1456 : 			}
; 1457 : 
; 1458 : 			// now we can say start time is true if not already
; 1459 : 			explicitStartTime = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+140], 1

; 1460 : 		}
; 1461 : 		else

	jmp	SHORT $LN42@Draw
$LN50@Draw:

; 1462 : 		{
; 1463 : 			curFrame = GetAnimFrame( dT, startTime );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	push	edx
	mov	eax, DWORD PTR _dT$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAnimFrame@Drawable2D@@IAEHHK@Z	; Drawable2D::GetAnimFrame
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+64], eax
$LN42@Draw:

; 1464 : 		}
; 1465 : 
; 1466 : 
; 1467 : 		// reached the end? and should we hold it?
; 1468 : 		if (  curFrame == typeData.numTextures )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+64]
	cmp	ecx, DWORD PTR [eax+116]
	jne	SHORT $LN37@Draw

; 1469 : 		{
; 1470 : 			if ( typeData.flags & ANIM_HOLD_LAST )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	and	eax, 2
	je	SHORT $LN40@Draw

; 1471 : 			{
; 1472 : 				curFrame--;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], edx
	jmp	SHORT $LN37@Draw
$LN40@Draw:

; 1473 : 			}
; 1474 : 			else if ( typeData.flags & ANIM_NO_CLAMP )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	and	edx, 262144				; 00040000H
	je	SHORT $LN38@Draw

; 1475 : 			{
; 1476 : 				// do nothing
; 1477 : 			}
; 1478 : 			else

	jmp	SHORT $LN37@Draw
$LN38@Draw:

; 1479 : 			{
; 1480 : 				return;

	jmp	$LN68@Draw
$LN37@Draw:

; 1481 : 			}
; 1482 : 		}
; 1483 : 	}
; 1484 : 
; 1485 : 
; 1486 : 	if ( startFade == TRUE )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+136], 1
	jne	$LN34@Draw

; 1487 : 	{
; 1488 : 		// do fade... 10 seconds until nothing...
; 1489 : 		dT = now - alphaStartTime;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _now$[ebp]
	sub	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR _dT$[ebp], edx

; 1490 : 		alpha = initAlpha - ((float)( dT )) * typeData.fadeRate;

	cvtsi2ss xmm0, DWORD PTR _dT$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+104]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+56]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+52], xmm1

; 1491 : 		if ( alpha <= 0.05f )

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3d4ccccd
	comiss	xmm0, DWORD PTR [eax+52]
	jb	SHORT $LN35@Draw

; 1492 : 			return;

	jmp	$LN68@Draw
$LN35@Draw:

; 1493 : 		if ( alpha > initAlpha )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+52]
	comiss	xmm0, DWORD PTR [edx+56]
	jbe	SHORT $LN34@Draw

; 1494 : 			alpha = initAlpha;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+52], edx
$LN34@Draw:

; 1495 : 	}
; 1496 : 
; 1497 : 	// do expansion
; 1498 : 	dT = now - expandStartTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _now$[ebp]
	sub	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR _dT$[ebp], ecx

; 1499 : 	realRadius = initRadius + ((float)( dT )) * typeData.expandRate * 0.001f;

	cvtsi2ss xmm0, DWORD PTR _dT$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+120]
	mulss	xmm0, DWORD PTR __real@3a83126f
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+60]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+252], xmm0

; 1500 : 	if ( realRadius > typeData.maxExpand )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+252]
	comiss	xmm0, DWORD PTR [eax+132]
	jbe	SHORT $LN33@Draw

; 1501 : 		realRadius = typeData.maxExpand;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	mov	DWORD PTR [ecx+252], eax
$LN33@Draw:

; 1502 : 	radius = realRadius;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+252]
	mov	DWORD PTR [ecx+16], eax

; 1503 : 	if ( realRadius <= 0.0f )

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [ecx+252]
	jb	SHORT $LN32@Draw

; 1504 : 		return;

	jmp	$LN68@Draw
$LN32@Draw:

; 1505 : 
; 1506 : 
; 1507 : 	// sanity check since time can now go backwards!
; 1508 : 	if ( !(typeData.flags & ANIM_NO_CLAMP ) )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	and	eax, 262144				; 00040000H
	jne	SHORT $LN28@Draw

; 1509 : 	{
; 1510 : 		if ( curFrame >= typeData.numTextures )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+64]
	cmp	eax, DWORD PTR [edx+116]
	jl	SHORT $LN30@Draw

; 1511 : 		{
; 1512 : 			curFrame = typeData.numTextures - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], edx
	jmp	SHORT $LN28@Draw
$LN30@Draw:

; 1513 : 		}
; 1514 : 		else if ( curFrame < 0 )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+64], 0
	jge	SHORT $LN28@Draw

; 1515 : 		{
; 1516 : 			curFrame = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+64], 0
$LN28@Draw:

; 1517 : 		}
; 1518 : 	}
; 1519 : 
; 1520 : 	if ( typeData.flags & (FIRE_SCATTER_PLOT | SMOKE_SCATTER_PLOT | EXPLODE_SCATTER_PLOT) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	and	ecx, 90112				; 00016000H
	je	SHORT $LN27@Draw

; 1521 : 	{
; 1522 : 		if ( typeData.flags & ALPHA_PER_TEXEL )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	and	eax, 8388608				; 00800000H
	je	SHORT $LN26@Draw

; 1523 : 			APLScatterPlot( renderer );

	mov	ecx, DWORD PTR _renderer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?APLScatterPlot@Drawable2D@@IAEXPAVRenderOTW@@@Z ; Drawable2D::APLScatterPlot

; 1524 : 		else

	jmp	SHORT $LN25@Draw
$LN26@Draw:

; 1525 : 			ScatterPlot( renderer );

	mov	edx, DWORD PTR _renderer$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScatterPlot@Drawable2D@@IAEXPAVRenderOTW@@@Z ; Drawable2D::ScatterPlot
$LN25@Draw:

; 1526 : 		return;

	jmp	$LN68@Draw
$LN27@Draw:

; 1527 : 	}
; 1528 : 
; 1529 : 	if ( typeData.flags & (TEXTURED_CONE) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN24@Draw

; 1530 : 	{
; 1531 : 		DrawTexturedCone( renderer, LOD );

	mov	edx, DWORD PTR _LOD$[ebp]
	push	edx
	mov	eax, DWORD PTR _renderer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawTexturedCone@Drawable2D@@IAEXPAVRenderOTW@@H@Z ; Drawable2D::DrawTexturedCone

; 1532 : 		return;

	jmp	$LN68@Draw
$LN24@Draw:

; 1533 : 	}
; 1534 : 
; 1535 : 
; 1536 : 
; 1537 : 	// if we don't have object space verts then the word verts
; 1538 : 	// are determined by using position and camera/orientation matrix
; 1539 : 	// vectors
; 1540 : 	if ( numObjVerts == 0 )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+244], 0
	jne	$LN23@Draw

; 1541 : 	{
; 1542 : 		// square billboard always facing camera and aligneed with camera
; 1543 : 		if ( hasOrientation == FALSE )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+256], 0
	jne	SHORT $LN22@Draw

; 1544 : 		{
; 1545 : 			// get the left and up vectors for the camera
; 1546 : 			renderer->GetLeft( &leftv );

	lea	eax, DWORD PTR _leftv$[ebp]
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?GetLeft@Render3D@@QAEXPAUTpoint@@@Z	; Render3D::GetLeft

; 1547 : 			renderer->GetUp( &upv );

	lea	ecx, DWORD PTR _upv$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?GetUp@Render3D@@QAEXPAUTpoint@@@Z	; Render3D::GetUp

; 1548 : 		}
; 1549 : 		else // polygon square oriented in world

	jmp	$LN21@Draw
$LN22@Draw:

; 1550 : 		{
; 1551 : 			// use orientation matrix to get vectors
; 1552 : 			// use x and y row vectors
; 1553 : 			leftv.x = -orientation.M11;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+260]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _leftv$[ebp], xmm0

; 1554 : 			leftv.y = -orientation.M12;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+264]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _leftv$[ebp+4], xmm0

; 1555 : 			leftv.z = -orientation.M13;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+268]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _leftv$[ebp+8], xmm0

; 1556 : 			upv.x = orientation.M21;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+272]
	movss	DWORD PTR _upv$[ebp], xmm0

; 1557 : 			upv.y = orientation.M22;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+276]
	movss	DWORD PTR _upv$[ebp+4], xmm0

; 1558 : 			upv.z = orientation.M23;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+280]
	movss	DWORD PTR _upv$[ebp+8], xmm0
$LN21@Draw:

; 1559 : 		}
; 1560 : 	
; 1561 : 		// based on position and the camera vectors, get the 4 corners of
; 1562 : 		// the square.
; 1563 : 		// NOTE:  Could just use billboard matrix to do this...
; 1564 : 		dl.x = leftv.x * scale2d * realRadius;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _leftv$[ebp]
	mulss	xmm0, DWORD PTR [edx+248]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+252]
	movss	DWORD PTR _dl$[ebp], xmm0

; 1565 : 		dl.y = leftv.y * scale2d * realRadius;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _leftv$[ebp+4]
	mulss	xmm0, DWORD PTR [ecx+248]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+252]
	movss	DWORD PTR _dl$[ebp+4], xmm0

; 1566 : 		dl.z = leftv.z * scale2d * realRadius;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _leftv$[ebp+8]
	mulss	xmm0, DWORD PTR [eax+248]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+252]
	movss	DWORD PTR _dl$[ebp+8], xmm0

; 1567 : 		du.x = upv.x * scale2d * realRadius;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _upv$[ebp]
	mulss	xmm0, DWORD PTR [edx+248]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+252]
	movss	DWORD PTR _du$[ebp], xmm0

; 1568 : 		du.y = upv.y * scale2d * realRadius;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _upv$[ebp+4]
	mulss	xmm0, DWORD PTR [ecx+248]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+252]
	movss	DWORD PTR _du$[ebp+4], xmm0

; 1569 : 		du.z = upv.z * scale2d * realRadius;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _upv$[ebp+8]
	mulss	xmm0, DWORD PTR [eax+248]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+252]
	movss	DWORD PTR _du$[ebp+8], xmm0

; 1570 : 	
; 1571 : 		ws.x = position.x + dl.x - du.x;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	addss	xmm0, DWORD PTR _dl$[ebp]
	subss	xmm0, DWORD PTR _du$[ebp]
	movss	DWORD PTR _ws$[ebp], xmm0

; 1572 : 		ws.y = position.y + dl.y - du.y;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR _dl$[ebp+4]
	subss	xmm0, DWORD PTR _du$[ebp+4]
	movss	DWORD PTR _ws$[ebp+4], xmm0

; 1573 : 		ws.z = position.z + dl.z - du.z;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+12]
	addss	xmm0, DWORD PTR _dl$[ebp+8]
	subss	xmm0, DWORD PTR _du$[ebp+8]
	movss	DWORD PTR _ws$[ebp+8], xmm0

; 1574 : 		renderer->TransformPoint( &ws,  &v0 );

	lea	edx, DWORD PTR _v0$[ebp]
	push	edx
	lea	eax, DWORD PTR _ws$[ebp]
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformPoint

; 1575 : 
; 1576 : 		// immediately cull any non-oriented billboards
; 1577 : 		// that are behind near clip
; 1578 : 		if ( hasOrientation == FALSE && v0.csZ < 1.0f )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+256], 0
	jne	SHORT $LN20@Draw
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR _v0$[ebp+48]
	jbe	SHORT $LN20@Draw

; 1579 : 			return;

	jmp	$LN68@Draw
$LN20@Draw:

; 1580 : 	
; 1581 : 		ws.x = position.x + dl.x + du.x;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	addss	xmm0, DWORD PTR _dl$[ebp]
	addss	xmm0, DWORD PTR _du$[ebp]
	movss	DWORD PTR _ws$[ebp], xmm0

; 1582 : 		ws.y = position.y + dl.y + du.y;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR _dl$[ebp+4]
	addss	xmm0, DWORD PTR _du$[ebp+4]
	movss	DWORD PTR _ws$[ebp+4], xmm0

; 1583 : 		ws.z = position.z + dl.z + du.z;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+12]
	addss	xmm0, DWORD PTR _dl$[ebp+8]
	addss	xmm0, DWORD PTR _du$[ebp+8]
	movss	DWORD PTR _ws$[ebp+8], xmm0

; 1584 : 		renderer->TransformPoint( &ws,  &v1 );

	lea	edx, DWORD PTR _v1$[ebp]
	push	edx
	lea	eax, DWORD PTR _ws$[ebp]
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformPoint

; 1585 : 
; 1586 : 		ws.x = position.x - dl.x + du.x;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, DWORD PTR _dl$[ebp]
	addss	xmm0, DWORD PTR _du$[ebp]
	movss	DWORD PTR _ws$[ebp], xmm0

; 1587 : 		ws.y = position.y - dl.y + du.y;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	subss	xmm0, DWORD PTR _dl$[ebp+4]
	addss	xmm0, DWORD PTR _du$[ebp+4]
	movss	DWORD PTR _ws$[ebp+4], xmm0

; 1588 : 		ws.z = position.z - dl.z + du.z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	subss	xmm0, DWORD PTR _dl$[ebp+8]
	addss	xmm0, DWORD PTR _du$[ebp+8]
	movss	DWORD PTR _ws$[ebp+8], xmm0

; 1589 : 		renderer->TransformPoint( &ws,  &v2 );

	lea	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _ws$[ebp]
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformPoint

; 1590 : 	
; 1591 : 		ws.x = position.x - dl.x - du.x;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR _dl$[ebp]
	subss	xmm0, DWORD PTR _du$[ebp]
	movss	DWORD PTR _ws$[ebp], xmm0

; 1592 : 		ws.y = position.y - dl.y - du.y;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	subss	xmm0, DWORD PTR _dl$[ebp+4]
	subss	xmm0, DWORD PTR _du$[ebp+4]
	movss	DWORD PTR _ws$[ebp+4], xmm0

; 1593 : 		ws.z = position.z - dl.z - du.z;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+12]
	subss	xmm0, DWORD PTR _dl$[ebp+8]
	subss	xmm0, DWORD PTR _du$[ebp+8]
	movss	DWORD PTR _ws$[ebp+8], xmm0

; 1594 : 		renderer->TransformPoint( &ws,  &v3 );

	lea	eax, DWORD PTR _v3$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ws$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformPoint@Render3D@@QAEXPAUTpoint@@PAUThreeDVertex@@@Z ; Render3D::TransformPoint

; 1595 : 
; 1596 : 
; 1597 : 		if ( typeData.flags & ALPHA_PER_TEXEL )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	and	eax, 8388608				; 00800000H
	je	SHORT $LN19@Draw

; 1598 : 		{
; 1599 : 			v1.u = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1$[ebp+24], xmm0

; 1600 : 			v1.v = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1$[ebp+28], xmm0

; 1601 : 	
; 1602 : 			v2.u = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v2$[ebp+24], xmm0

; 1603 : 			v2.v = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v2$[ebp+28], xmm0

; 1604 : 	
; 1605 : 			v3.u = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v3$[ebp+24], xmm0

; 1606 : 			v3.v = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v3$[ebp+28], xmm0

; 1607 : 	
; 1608 : 			v0.u = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v0$[ebp+24], xmm0

; 1609 : 			v0.v = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v0$[ebp+28], xmm0

; 1610 : 		}
; 1611 : 		else

	jmp	$LN18@Draw
$LN19@Draw:

; 1612 : 		{
; 1613 : 			v1.u = gTexUV[ typeData.startTexture + curFrame ].u;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+64]
	movss	xmm0, DWORD PTR ?gTexUV@@3PAUUV@@A[edx*8]
	movss	DWORD PTR _v1$[ebp+24], xmm0

; 1614 : 			v1.v = gTexUV[ typeData.startTexture + curFrame ].v;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+64]
	movss	xmm0, DWORD PTR ?gTexUV@@3PAUUV@@A[edx*8+4]
	movss	DWORD PTR _v1$[ebp+28], xmm0

; 1615 : 	
; 1616 : 			v2.u = v1.u + TEX_UV_DIM;

	movss	xmm0, DWORD PTR _v1$[ebp+24]
	addss	xmm0, DWORD PTR __real@3e7be76d
	movss	DWORD PTR _v2$[ebp+24], xmm0

; 1617 : 			v2.v = v1.v;

	movss	xmm0, DWORD PTR _v1$[ebp+28]
	movss	DWORD PTR _v2$[ebp+28], xmm0

; 1618 : 	
; 1619 : 			v3.u = v1.u + TEX_UV_DIM;

	movss	xmm0, DWORD PTR _v1$[ebp+24]
	addss	xmm0, DWORD PTR __real@3e7be76d
	movss	DWORD PTR _v3$[ebp+24], xmm0

; 1620 : 			v3.v = v1.v + TEX_UV_DIM;

	movss	xmm0, DWORD PTR _v1$[ebp+28]
	addss	xmm0, DWORD PTR __real@3e7be76d
	movss	DWORD PTR _v3$[ebp+28], xmm0

; 1621 : 	
; 1622 : 			v0.u = v1.u;

	movss	xmm0, DWORD PTR _v1$[ebp+24]
	movss	DWORD PTR _v0$[ebp+24], xmm0

; 1623 : 			v0.v = v1.v + TEX_UV_DIM;

	movss	xmm0, DWORD PTR _v1$[ebp+28]
	addss	xmm0, DWORD PTR __real@3e7be76d
	movss	DWORD PTR _v0$[ebp+28], xmm0
$LN18@Draw:

; 1624 : 		}
; 1625 : 		// u,v texture coords
; 1626 : 		v0.q = v0.csZ * 0.001f;

	movss	xmm0, DWORD PTR _v0$[ebp+48]
	mulss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR _v0$[ebp+32], xmm0

; 1627 : 		v1.q = v1.csZ * 0.001f;

	movss	xmm0, DWORD PTR _v1$[ebp+48]
	mulss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR _v1$[ebp+32], xmm0

; 1628 : 		v2.q = v2.csZ * 0.001f;

	movss	xmm0, DWORD PTR _v2$[ebp+48]
	mulss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR _v2$[ebp+32], xmm0

; 1629 : 		v3.q = v3.csZ * 0.001f;

	movss	xmm0, DWORD PTR _v3$[ebp+48]
	mulss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR _v3$[ebp+32], xmm0

; 1630 : 	}
; 1631 : 	else

	jmp	$LN17@Draw
$LN23@Draw:

; 1632 : 	{
; 1633 : 		Tpoint viewLoc;
; 1634 : 		Tpoint os;
; 1635 : 		// object space verts were specified.  
; 1636 : 
; 1637 : 		// at the moment 4 verts are required -- although at some point
; 1638 : 		// we may wish to generalize this to 3 or more....
; 1639 : 
; 1640 : 
; 1641 : 		// otay.  now we xform depending on the matrix flag specified
; 1642 : 		if ( typeData.flags & USES_BB_MATRIX )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	and	edx, 256				; 00000100H
	je	$LN16@Draw

; 1643 : 		{
; 1644 : 			// get the position of this object in view space
; 1645 : 			renderer->TransformPointToView( &position,  &viewLoc );

	lea	eax, DWORD PTR _viewLoc$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformPointToView@Render3D@@QAEXPAUTpoint@@0@Z ; Render3D::TransformPointToView

; 1646 : 			os.x = oVerts[0].x * scale2d * realRadius;

	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx+148]
	mulss	xmm0, DWORD PTR [ecx+248]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+252]
	movss	DWORD PTR _os$3[ebp], xmm0

; 1647 : 			os.y = oVerts[0].y * scale2d * realRadius;

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+152]
	mulss	xmm0, DWORD PTR [edx+248]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+252]
	movss	DWORD PTR _os$3[ebp+4], xmm0

; 1648 : 			os.z = oVerts[0].z * scale2d * realRadius;

	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+156]
	mulss	xmm0, DWORD PTR [eax+248]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+252]
	movss	DWORD PTR _os$3[ebp+8], xmm0

; 1649 : 			renderer->TransformBillboardPoint( &os,  &viewLoc, &v0 );

	lea	edx, DWORD PTR _v0$[ebp]
	push	edx
	lea	eax, DWORD PTR _viewLoc$2[ebp]
	push	eax
	lea	ecx, DWORD PTR _os$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformBillboardPoint@Render3D@@QAEXPAUTpoint@@0PAUThreeDVertex@@@Z ; Render3D::TransformBillboardPoint

; 1650 : 			os.x = oVerts[1].x * scale2d * realRadius;

	mov	edx, 12					; 0000000cH
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx+148]
	mulss	xmm0, DWORD PTR [ecx+248]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+252]
	movss	DWORD PTR _os$3[ebp], xmm0

; 1651 : 			os.y = oVerts[1].y * scale2d * realRadius;

	mov	eax, 12					; 0000000cH
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+152]
	mulss	xmm0, DWORD PTR [edx+248]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+252]
	movss	DWORD PTR _os$3[ebp+4], xmm0

; 1652 : 			os.z = oVerts[1].z * scale2d * realRadius;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+156]
	mulss	xmm0, DWORD PTR [eax+248]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+252]
	movss	DWORD PTR _os$3[ebp+8], xmm0

; 1653 : 			renderer->TransformBillboardPoint( &os,  &viewLoc, &v1 );

	lea	edx, DWORD PTR _v1$[ebp]
	push	edx
	lea	eax, DWORD PTR _viewLoc$2[ebp]
	push	eax
	lea	ecx, DWORD PTR _os$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformBillboardPoint@Render3D@@QAEXPAUTpoint@@0PAUThreeDVertex@@@Z ; Render3D::TransformBillboardPoint

; 1654 : 			os.x = oVerts[2].x * scale2d * realRadius;

	mov	edx, 12					; 0000000cH
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx+148]
	mulss	xmm0, DWORD PTR [ecx+248]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+252]
	movss	DWORD PTR _os$3[ebp], xmm0

; 1655 : 			os.y = oVerts[2].y * scale2d * realRadius;

	mov	eax, 12					; 0000000cH
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+152]
	mulss	xmm0, DWORD PTR [edx+248]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+252]
	movss	DWORD PTR _os$3[ebp+4], xmm0

; 1656 : 			os.z = oVerts[2].z * scale2d * realRadius;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+156]
	mulss	xmm0, DWORD PTR [eax+248]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+252]
	movss	DWORD PTR _os$3[ebp+8], xmm0

; 1657 : 			renderer->TransformBillboardPoint( &os,  &viewLoc, &v2 );

	lea	edx, DWORD PTR _v2$[ebp]
	push	edx
	lea	eax, DWORD PTR _viewLoc$2[ebp]
	push	eax
	lea	ecx, DWORD PTR _os$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformBillboardPoint@Render3D@@QAEXPAUTpoint@@0PAUThreeDVertex@@@Z ; Render3D::TransformBillboardPoint

; 1658 : 			os.x = oVerts[3].x * scale2d * realRadius;

	mov	edx, 12					; 0000000cH
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx+148]
	mulss	xmm0, DWORD PTR [ecx+248]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+252]
	movss	DWORD PTR _os$3[ebp], xmm0

; 1659 : 			os.y = oVerts[3].y * scale2d * realRadius;

	mov	eax, 12					; 0000000cH
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+152]
	mulss	xmm0, DWORD PTR [edx+248]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+252]
	movss	DWORD PTR _os$3[ebp+4], xmm0

; 1660 : 			os.z = oVerts[3].z * scale2d * realRadius;

	mov	ecx, 12					; 0000000cH
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+156]
	mulss	xmm0, DWORD PTR [eax+248]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+252]
	movss	DWORD PTR _os$3[ebp+8], xmm0

; 1661 : 			renderer->TransformBillboardPoint( &os,  &viewLoc, &v3 );

	lea	edx, DWORD PTR _v3$[ebp]
	push	edx
	lea	eax, DWORD PTR _viewLoc$2[ebp]
	push	eax
	lea	ecx, DWORD PTR _os$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformBillboardPoint@Render3D@@QAEXPAUTpoint@@0PAUThreeDVertex@@@Z ; Render3D::TransformBillboardPoint
	jmp	$LN14@Draw
$LN16@Draw:

; 1662 : 		}
; 1663 : 		else if ( typeData.flags & USES_TREE_MATRIX )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	and	eax, 512				; 00000200H
	je	$LN14@Draw

; 1664 : 		{
; 1665 : 			// get the position of this object in view space
; 1666 : 			renderer->TransformPointToView( &position,  &viewLoc );

	lea	ecx, DWORD PTR _viewLoc$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformPointToView@Render3D@@QAEXPAUTpoint@@0@Z ; Render3D::TransformPointToView

; 1667 : 
; 1668 : 			os.x = oVerts[0].x * scale2d * realRadius;

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+148]
	mulss	xmm0, DWORD PTR [edx+248]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+252]
	movss	DWORD PTR _os$3[ebp], xmm0

; 1669 : 			os.y = oVerts[0].y * scale2d * realRadius;

	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+152]
	mulss	xmm0, DWORD PTR [eax+248]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+252]
	movss	DWORD PTR _os$3[ebp+4], xmm0

; 1670 : 			os.z = oVerts[0].z * scale2d * realRadius;

	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx+156]
	mulss	xmm0, DWORD PTR [ecx+248]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+252]
	movss	DWORD PTR _os$3[ebp+8], xmm0

; 1671 : 			renderer->TransformTreePoint( &os,  &viewLoc, &v0 );

	lea	eax, DWORD PTR _v0$[ebp]
	push	eax
	lea	ecx, DWORD PTR _viewLoc$2[ebp]
	push	ecx
	lea	edx, DWORD PTR _os$3[ebp]
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformTreePoint@Render3D@@QAEXPAUTpoint@@0PAUThreeDVertex@@@Z ; Render3D::TransformTreePoint

; 1672 : 			os.x = oVerts[1].x * scale2d * realRadius;

	mov	eax, 12					; 0000000cH
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+148]
	mulss	xmm0, DWORD PTR [edx+248]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+252]
	movss	DWORD PTR _os$3[ebp], xmm0

; 1673 : 			os.y = oVerts[1].y * scale2d * realRadius;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+152]
	mulss	xmm0, DWORD PTR [eax+248]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+252]
	movss	DWORD PTR _os$3[ebp+4], xmm0

; 1674 : 			os.z = oVerts[1].z * scale2d * realRadius;

	mov	edx, 12					; 0000000cH
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx+156]
	mulss	xmm0, DWORD PTR [ecx+248]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+252]
	movss	DWORD PTR _os$3[ebp+8], xmm0

; 1675 : 			renderer->TransformTreePoint( &os,  &viewLoc, &v1 );

	lea	eax, DWORD PTR _v1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _viewLoc$2[ebp]
	push	ecx
	lea	edx, DWORD PTR _os$3[ebp]
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformTreePoint@Render3D@@QAEXPAUTpoint@@0PAUThreeDVertex@@@Z ; Render3D::TransformTreePoint

; 1676 : 			os.x = oVerts[2].x * scale2d * realRadius;

	mov	eax, 12					; 0000000cH
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+148]
	mulss	xmm0, DWORD PTR [edx+248]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+252]
	movss	DWORD PTR _os$3[ebp], xmm0

; 1677 : 			os.y = oVerts[2].y * scale2d * realRadius;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+152]
	mulss	xmm0, DWORD PTR [eax+248]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+252]
	movss	DWORD PTR _os$3[ebp+4], xmm0

; 1678 : 			os.z = oVerts[2].z * scale2d * realRadius;

	mov	edx, 12					; 0000000cH
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx+156]
	mulss	xmm0, DWORD PTR [ecx+248]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+252]
	movss	DWORD PTR _os$3[ebp+8], xmm0

; 1679 : 			renderer->TransformTreePoint( &os,  &viewLoc, &v2 );

	lea	eax, DWORD PTR _v2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _viewLoc$2[ebp]
	push	ecx
	lea	edx, DWORD PTR _os$3[ebp]
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformTreePoint@Render3D@@QAEXPAUTpoint@@0PAUThreeDVertex@@@Z ; Render3D::TransformTreePoint

; 1680 : 			os.x = oVerts[3].x * scale2d * realRadius;

	mov	eax, 12					; 0000000cH
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+148]
	mulss	xmm0, DWORD PTR [edx+248]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+252]
	movss	DWORD PTR _os$3[ebp], xmm0

; 1681 : 			os.y = oVerts[3].y * scale2d * realRadius;

	mov	ecx, 12					; 0000000cH
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+152]
	mulss	xmm0, DWORD PTR [eax+248]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+252]
	movss	DWORD PTR _os$3[ebp+4], xmm0

; 1682 : 			os.z = oVerts[3].z * scale2d * realRadius;

	mov	edx, 12					; 0000000cH
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx+156]
	mulss	xmm0, DWORD PTR [ecx+248]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+252]
	movss	DWORD PTR _os$3[ebp+8], xmm0

; 1683 : 			renderer->TransformTreePoint( &os,  &viewLoc, &v3 );

	lea	eax, DWORD PTR _v3$[ebp]
	push	eax
	lea	ecx, DWORD PTR _viewLoc$2[ebp]
	push	ecx
	lea	edx, DWORD PTR _os$3[ebp]
	push	edx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?TransformTreePoint@Render3D@@QAEXPAUTpoint@@0PAUThreeDVertex@@@Z ; Render3D::TransformTreePoint
$LN14@Draw:

; 1684 : 
; 1685 : 		}
; 1686 : 		else  
; 1687 : 		{
; 1688 : 			// at the moment must be either BB or TREE Matrix
; 1689 : 			ShiWarning( "Bad Type" );
; 1690 : 		}
; 1691 : 
; 1692 : 		// u,v texture coords
; 1693 : 		v0.u = uvCoords[0].x * TEX_UV_DIM;	v0.v = uvCoords[0].y * TEX_UV_DIM;

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+196]
	mulss	xmm0, DWORD PTR __real@3e7be76d
	movss	DWORD PTR _v0$[ebp+24], xmm0
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx+200]
	mulss	xmm0, DWORD PTR __real@3e7be76d
	movss	DWORD PTR _v0$[ebp+28], xmm0

; 1694 : 		v1.u = uvCoords[1].x * TEX_UV_DIM;	v1.v = uvCoords[1].y * TEX_UV_DIM;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+196]
	mulss	xmm0, DWORD PTR __real@3e7be76d
	movss	DWORD PTR _v1$[ebp+24], xmm0
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+200]
	mulss	xmm0, DWORD PTR __real@3e7be76d
	movss	DWORD PTR _v1$[ebp+28], xmm0

; 1695 : 		v2.u = uvCoords[2].x * TEX_UV_DIM;	v2.v = uvCoords[2].y * TEX_UV_DIM;

	mov	edx, 12					; 0000000cH
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx+196]
	mulss	xmm0, DWORD PTR __real@3e7be76d
	movss	DWORD PTR _v2$[ebp+24], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+200]
	mulss	xmm0, DWORD PTR __real@3e7be76d
	movss	DWORD PTR _v2$[ebp+28], xmm0

; 1696 : 		v3.u = uvCoords[3].x * TEX_UV_DIM;	v3.v = uvCoords[3].y * TEX_UV_DIM;

	mov	eax, 12					; 0000000cH
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+196]
	mulss	xmm0, DWORD PTR __real@3e7be76d
	movss	DWORD PTR _v3$[ebp+24], xmm0
	mov	edx, 12					; 0000000cH
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx+200]
	mulss	xmm0, DWORD PTR __real@3e7be76d
	movss	DWORD PTR _v3$[ebp+28], xmm0

; 1697 : 
; 1698 : 		v0.u += gTexUV[ typeData.startTexture + curFrame ].u;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+64]
	movss	xmm0, DWORD PTR _v0$[ebp+24]
	addss	xmm0, DWORD PTR ?gTexUV@@3PAUUV@@A[edx*8]
	movss	DWORD PTR _v0$[ebp+24], xmm0

; 1699 : 		v0.v += gTexUV[ typeData.startTexture + curFrame ].v;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+64]
	movss	xmm0, DWORD PTR _v0$[ebp+28]
	addss	xmm0, DWORD PTR ?gTexUV@@3PAUUV@@A[edx*8+4]
	movss	DWORD PTR _v0$[ebp+28], xmm0

; 1700 : 		v1.u += gTexUV[ typeData.startTexture + curFrame ].u;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+64]
	movss	xmm0, DWORD PTR _v1$[ebp+24]
	addss	xmm0, DWORD PTR ?gTexUV@@3PAUUV@@A[edx*8]
	movss	DWORD PTR _v1$[ebp+24], xmm0

; 1701 : 		v1.v += gTexUV[ typeData.startTexture + curFrame ].v;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+64]
	movss	xmm0, DWORD PTR _v1$[ebp+28]
	addss	xmm0, DWORD PTR ?gTexUV@@3PAUUV@@A[edx*8+4]
	movss	DWORD PTR _v1$[ebp+28], xmm0

; 1702 : 		v2.u += gTexUV[ typeData.startTexture + curFrame ].u;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+64]
	movss	xmm0, DWORD PTR _v2$[ebp+24]
	addss	xmm0, DWORD PTR ?gTexUV@@3PAUUV@@A[edx*8]
	movss	DWORD PTR _v2$[ebp+24], xmm0

; 1703 : 		v2.v += gTexUV[ typeData.startTexture + curFrame ].v;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+64]
	movss	xmm0, DWORD PTR _v2$[ebp+28]
	addss	xmm0, DWORD PTR ?gTexUV@@3PAUUV@@A[edx*8+4]
	movss	DWORD PTR _v2$[ebp+28], xmm0

; 1704 : 		v3.u += gTexUV[ typeData.startTexture + curFrame ].u;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+64]
	movss	xmm0, DWORD PTR _v3$[ebp+24]
	addss	xmm0, DWORD PTR ?gTexUV@@3PAUUV@@A[edx*8]
	movss	DWORD PTR _v3$[ebp+24], xmm0

; 1705 : 		v3.v += gTexUV[ typeData.startTexture + curFrame ].v;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+64]
	movss	xmm0, DWORD PTR _v3$[ebp+28]
	addss	xmm0, DWORD PTR ?gTexUV@@3PAUUV@@A[edx*8+4]
	movss	DWORD PTR _v3$[ebp+28], xmm0

; 1706 : 
; 1707 : 		// u,v texture coords
; 1708 : 		v0.q = v0.csZ * 0.001f;

	movss	xmm0, DWORD PTR _v0$[ebp+48]
	mulss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR _v0$[ebp+32], xmm0

; 1709 : 		v1.q = v1.csZ * 0.001f;

	movss	xmm0, DWORD PTR _v1$[ebp+48]
	mulss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR _v1$[ebp+32], xmm0

; 1710 : 		v2.q = v2.csZ * 0.001f;

	movss	xmm0, DWORD PTR _v2$[ebp+48]
	mulss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR _v2$[ebp+32], xmm0

; 1711 : 		v3.q = v3.csZ * 0.001f;

	movss	xmm0, DWORD PTR _v3$[ebp+48]
	mulss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR _v3$[ebp+32], xmm0
$LN17@Draw:

; 1712 : 	}
; 1713 : 
; 1714 : //	if( renderer->GetAlphaMode() )
; 1715 : //	{
; 1716 : 		if( !sGreenMode ) //JAM - FIXME

	cmp	DWORD PTR ?sGreenMode@@3HA, 0		; sGreenMode
	jne	SHORT $LN12@Draw

; 1717 : 		{
; 1718 : 			if(typeData.flags & USES_TREE_MATRIX)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	and	edx, 512				; 00000200H
	je	SHORT $LN11@Draw

; 1719 : 				renderer->context.RestoreState(STATE_ALPHA_TEXTURE_GOURAUD_PERSPECTIVE);

	push	33					; 00000021H
	mov	ecx, DWORD PTR _renderer$[ebp]
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 1720 : 			else

	jmp	SHORT $LN10@Draw
$LN11@Draw:

; 1721 : 				renderer->context.RestoreState(STATE_ALPHA_TEXTURE_GOURAUD);

	push	32					; 00000020H
	mov	ecx, DWORD PTR _renderer$[ebp]
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState
$LN10@Draw:

; 1722 : 		}
; 1723 : 		else

	jmp	SHORT $LN7@Draw
$LN12@Draw:

; 1724 : 		{
; 1725 : 			if(typeData.flags & USES_TREE_MATRIX)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	and	ecx, 512				; 00000200H
	je	SHORT $LN8@Draw

; 1726 : 				renderer->context.RestoreState(STATE_ALPHA_TEXTURE_GOURAUD_PERSPECTIVE);

	push	33					; 00000021H
	mov	ecx, DWORD PTR _renderer$[ebp]
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 1727 : 			else

	jmp	SHORT $LN7@Draw
$LN8@Draw:

; 1728 : 				renderer->context.RestoreState(STATE_ALPHA_TEXTURE_GOURAUD);

	push	32					; 00000020H
	mov	ecx, DWORD PTR _renderer$[ebp]
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState
$LN7@Draw:

; 1729 : 		}
; 1730 : /*	}
; 1731 : 	else
; 1732 : 	{
; 1733 : 		doFivePoints = FALSE;
; 1734 : 
; 1735 : 		if(typeData.flags & USES_TREE_MATRIX)
; 1736 : 			renderer->context.RestoreState(STATE_ALPHA_TEXTURE_PERSPECTIVE);
; 1737 : 		else
; 1738 : 			renderer->context.RestoreState(STATE_ALPHA_TEXTURE);
; 1739 : 	}
; 1740 : */
; 1741 : 	if( !sGreenMode ) //JAM - FIXME

	cmp	DWORD PTR ?sGreenMode@@3HA, 0		; sGreenMode
	jne	SHORT $LN5@Draw

; 1742 : 	{
; 1743 : 		if( renderer->GetFilteringMode() )

	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?GetFilteringMode@RenderOTW@@QAEHXZ	; RenderOTW::GetFilteringMode
	test	eax, eax
	je	SHORT $LN5@Draw

; 1744 : 		{
; 1745 : 			renderer->context.SetState(MPR_STA_TEX_FILTER,MPR_TX_BILINEAR);

	push	1
	push	8
	mov	ecx, DWORD PTR _renderer$[ebp]
	add	ecx, 100				; 00000064H
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
$LN5@Draw:

; 1746 : //			renderer->context.InvalidateState();
; 1747 : 		}
; 1748 : 	}
; 1749 : 
; 1750 : 	renderer->context.SetState(MPR_STA_ALPHA_OP_FUNCTION,MPR_TO_MODULATE);

	push	4
	push	5
	mov	ecx, DWORD PTR _renderer$[ebp]
	add	ecx, 100				; 00000064H
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState

; 1751 : 	renderer->context.SelectTexture1(curTex->TexHandle());

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+144]
	call	?TexHandle@Texture@@QAEKXZ		; Texture::TexHandle
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	add	ecx, 100				; 00000064H
	call	?SelectTexture1@ContextMPR@@QAEXH@Z	; ContextMPR::SelectTexture1

; 1752 : 
; 1753 : 
; 1754 : 	// color and alpha
; 1755 : 	if ( doFivePoints )

	cmp	DWORD PTR _doFivePoints$[ebp], 0
	je	$LN4@Draw

; 1756 : 	{
; 1757 : 		spos.a = alpha;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+52]
	movss	DWORD PTR _spos$[ebp+20], xmm0

; 1758 : 		spos.r = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _spos$[ebp+8], xmm0

; 1759 : 		spos.g = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _spos$[ebp+12], xmm0

; 1760 : 		spos.b = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _spos$[ebp+16], xmm0

; 1761 : 		spos.u = v1.u + TEX_UV_DIM * 0.5f;

	movss	xmm0, DWORD PTR _v1$[ebp+24]
	addss	xmm0, DWORD PTR __real@3dfbe76d
	movss	DWORD PTR _spos$[ebp+24], xmm0

; 1762 : 		spos.v = v1.v + TEX_UV_DIM * 0.5f;

	movss	xmm0, DWORD PTR _v1$[ebp+28]
	addss	xmm0, DWORD PTR __real@3dfbe76d
	movss	DWORD PTR _spos$[ebp+28], xmm0

; 1763 : 		spos.q = spos.csZ * 0.001f;

	movss	xmm0, DWORD PTR _spos$[ebp+48]
	mulss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR _spos$[ebp+32], xmm0

; 1764 : 		v0.a = v1.a = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1$[ebp+20], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+20]
	movss	DWORD PTR _v0$[ebp+20], xmm0

; 1765 : 		v2.a = v3.a = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v3$[ebp+20], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+20]
	movss	DWORD PTR _v2$[ebp+20], xmm0

; 1766 : 		// randomly tweak the edge RGB's to give a glowy kind of effect
; 1767 : 		v0.r = v2.r = v3.r = v1.r = 0.1f + NRANDPOS * 0.8f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _v1$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+8]
	movss	DWORD PTR _v3$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+8]
	movss	DWORD PTR _v2$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _v2$[ebp+8]
	movss	DWORD PTR _v0$[ebp+8], xmm0

; 1768 : 		v0.g = v2.g = v3.g = v1.g = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1$[ebp+12], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+12]
	movss	DWORD PTR _v3$[ebp+12], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+12]
	movss	DWORD PTR _v2$[ebp+12], xmm0
	movss	xmm0, DWORD PTR _v2$[ebp+12]
	movss	DWORD PTR _v0$[ebp+12], xmm0

; 1769 : 		v0.b = v2.b = v3.b = v1.b = 0.1f + NRANDPOS * 0.8f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _v1$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+16]
	movss	DWORD PTR _v3$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+16]
	movss	DWORD PTR _v2$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _v2$[ebp+16]
	movss	DWORD PTR _v0$[ebp+16], xmm0

; 1770 : 
; 1771 : 		// Draw the 4 tris
; 1772 : 		renderer->DrawTriangle( &spos, &v0, &v1,  CULL_ALLOW_ALL );

	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR _v1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v0$[ebp]
	push	edx
	lea	eax, DWORD PTR _spos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?DrawTriangle@Render3D@@QAEXPAUThreeDVertex@@00H_N1@Z ; Render3D::DrawTriangle

; 1773 : 		renderer->DrawTriangle( &spos, &v1, &v2,  CULL_ALLOW_ALL );

	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v1$[ebp]
	push	edx
	lea	eax, DWORD PTR _spos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?DrawTriangle@Render3D@@QAEXPAUThreeDVertex@@00H_N1@Z ; Render3D::DrawTriangle

; 1774 : 		renderer->DrawTriangle( &spos, &v2, &v3,  CULL_ALLOW_ALL );

	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR _v3$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v2$[ebp]
	push	edx
	lea	eax, DWORD PTR _spos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?DrawTriangle@Render3D@@QAEXPAUThreeDVertex@@00H_N1@Z ; Render3D::DrawTriangle

; 1775 : 		renderer->DrawTriangle( &spos, &v3, &v0,  CULL_ALLOW_ALL );

	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR _v0$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v3$[ebp]
	push	edx
	lea	eax, DWORD PTR _spos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?DrawTriangle@Render3D@@QAEXPAUThreeDVertex@@00H_N1@Z ; Render3D::DrawTriangle

; 1776 : 	}
; 1777 : 	else

	jmp	$LN3@Draw
$LN4@Draw:

; 1778 : 	{
; 1779 : 		// color and alpha
; 1780 : 
; 1781 : 		// if this type uses 5 points and its scaled to not at the moment,
; 1782 : 		// adjust alpha so that it appears more alpha'd
; 1783 : 		if ( typeData.flags & DO_FIVE_POINTS )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	and	edx, 2097152				; 00200000H
	je	SHORT $LN2@Draw

; 1784 : 		{
; 1785 : 			v0.a = v1.a = alpha * 0.65f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+52]
	mulss	xmm0, DWORD PTR __real@3f266666
	movss	DWORD PTR _v1$[ebp+20], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+20]
	movss	DWORD PTR _v0$[ebp+20], xmm0

; 1786 : 			v2.a = v3.a = alpha * 0.65f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+52]
	mulss	xmm0, DWORD PTR __real@3f266666
	movss	DWORD PTR _v3$[ebp+20], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+20]
	movss	DWORD PTR _v2$[ebp+20], xmm0

; 1787 : 		}
; 1788 : 		else

	jmp	SHORT $LN1@Draw
$LN2@Draw:

; 1789 : 		{
; 1790 : 			v0.a = v1.a = alpha;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+52]
	movss	DWORD PTR _v1$[ebp+20], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+20]
	movss	DWORD PTR _v0$[ebp+20], xmm0

; 1791 : 			v2.a = v3.a = alpha;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+52]
	movss	DWORD PTR _v3$[ebp+20], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+20]
	movss	DWORD PTR _v2$[ebp+20], xmm0
$LN1@Draw:

; 1792 : 		}
; 1793 : 		v0.r = v1.r = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v1$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+8]
	movss	DWORD PTR _v0$[ebp+8], xmm0

; 1794 : 		v0.g = v1.g = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v1$[ebp+12], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+12]
	movss	DWORD PTR _v0$[ebp+12], xmm0

; 1795 : 		v0.b = v1.b = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v1$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _v1$[ebp+16]
	movss	DWORD PTR _v0$[ebp+16], xmm0

; 1796 : 		v2.r = v3.r = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v3$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+8]
	movss	DWORD PTR _v2$[ebp+8], xmm0

; 1797 : 		v2.g = v3.g = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v3$[ebp+12], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+12]
	movss	DWORD PTR _v2$[ebp+12], xmm0

; 1798 : 		v2.b = v3.b = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _v3$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _v3$[ebp+16]
	movss	DWORD PTR _v2$[ebp+16], xmm0

; 1799 : 
; 1800 : 		// Draw the polygon
; 1801 : 		renderer->DrawSquare( &v0, &v1, &v2, &v3, CULL_ALLOW_ALL );

	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR _v3$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v2$[ebp]
	push	edx
	lea	eax, DWORD PTR _v1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v0$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?DrawSquare@Render3D@@QAEXPAUThreeDVertex@@000H_N1@Z ; Render3D::DrawSquare
$LN3@Draw:
$LN68@Draw:

; 1802 : 	}
; 1803 : 
; 1804 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
?Draw@Drawable2D@@UAEXPAVRenderOTW@@H@Z ENDP		; Drawable2D::Draw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\draw2d.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Drawable2D@@UAE@XZ PROC				; Drawable2D::~Drawable2D
; _this$ = ecx

; 1250 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Drawable2D@@6B@

; 1251 : 	#ifndef PRELOAD_TEX
; 1252 : 	// if ( typeData.glTexId )
; 1253 : 	// 	glDeleteTexture( *typeData.glTexId, 0 );
; 1254 : 	#endif
; 1255 : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DrawableObject@@UAE@XZ		; DrawableObject::~DrawableObject
	mov	esp, ebp
	pop	ebp
	ret	0
??1Drawable2D@@UAE@XZ ENDP				; Drawable2D::~Drawable2D
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\draw2d.cpp
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_type2d$ = 8						; size = 4
_scale$ = 12						; size = 4
_p$ = 16						; size = 4
_nVerts$ = 20						; size = 4
_verts$ = 24						; size = 4
_uvs$ = 28						; size = 4
??0Drawable2D@@QAE@HMPAUTpoint@@H00@Z PROC		; Drawable2D::Drawable2D
; _this$ = ecx

; 1184 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DrawableObject@@QAE@M@Z		; DrawableObject::DrawableObject
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Drawable2D@@6B@

; 1185 : 	int i;
; 1186 : 
; 1187 : 	// save type
; 1188 : 	type = type2d;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _type2d$[ebp]
	mov	DWORD PTR [ecx+48], edx

; 1189 : 
; 1190 : 	// sanity check
; 1191 : 	ShiAssert( type2d < DRAW2D_MAXTYPES && type2d >= 0 );
; 1192 : 
; 1193 : 	// at the moment we only allow 4 verts
; 1194 : 	ShiAssert( nVerts == 4 );
; 1195 : 
; 1196 : 	// get typeData ptr
; 1197 : 	typeData = gTypeTable[ type2d ];

	mov	esi, DWORD PTR _type2d$[ebp]
	imul	esi, 40					; 00000028H
	add	esi, OFFSET ?gTypeTable@@3PAU_TYPES2D@@A ; gTypeTable
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 96					; 00000060H
	mov	ecx, 10					; 0000000aH
	rep movsd

; 1198 : 
; 1199 : 	// init curframe
; 1200 : 	curFrame = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], -1

; 1201 : 	curSFrame = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+68], 0

; 1202 : 	curBFrame = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+76], 0

; 1203 : 	if ( typeData.flags & RAND_START_FRAME )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	and	ecx, 33554432				; 02000000H
	je	SHORT $LN5@Drawable2D

; 1204 : 		startSFrame = rand() % typeData.numGlowVerts;

	call	_rand
	mov	ecx, DWORD PTR _this$[ebp]
	cdq
	idiv	DWORD PTR [ecx+128]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+92], edx

; 1205 : 	else

	jmp	SHORT $LN4@Drawable2D
$LN5@Drawable2D:

; 1206 : 		startSFrame = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+92], 0
$LN4@Drawable2D:

; 1207 : 
; 1208 : 	// set position -- world coords
; 1209 : 	position = *p;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax

; 1210 : 
; 1211 : 	// no transparency to start
; 1212 : 	initAlpha = alpha = typeData.initAlpha;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	DWORD PTR [ecx+52], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR [ecx+56], eax

; 1213 : 
; 1214 : 	// scale is equivalent to radius
; 1215 : 	realRadius = initRadius = radius = scale;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [ecx+16], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [edx+60], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [eax+252], xmm0

; 1216 : 
; 1217 : 	// init misc...
; 1218 : 	startFade = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+136], 0

; 1219 : 	numObjVerts = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+244], 0

; 1220 : 	hasOrientation = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+256], 0

; 1221 : 	numObjVerts = nVerts;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _nVerts$[ebp]
	mov	DWORD PTR [ecx+244], edx

; 1222 : 	startTime = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+80], 0

; 1223 : 	explicitStartTime = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+140], 0

; 1224 : 	scale2d = 1.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+248], xmm0

; 1225 : 
; 1226 : 	// setup the verts
; 1227 : 	for ( i = 0; i < numObjVerts; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@Drawable2D
$LN2@Drawable2D:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@Drawable2D:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+244]
	jge	SHORT $LN1@Drawable2D

; 1228 : 	{
; 1229 : 		oVerts[i] = verts[i];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR _verts$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [edx+ecx+148]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 1230 : 		uvCoords[i] = uvs[i];

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR _uvs$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [eax+edx+196]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx

; 1231 : 	}

	jmp	SHORT $LN2@Drawable2D
$LN1@Drawable2D:

; 1232 : 
; 1233 : 	// now update the ref count to the textures and load them
; 1234 : 	// if not already done
; 1235 : 	#ifndef PRELOAD_TEX
; 1236 : 	// if ( typeData.glTexId )
; 1237 : 	// 	glInsertTexture( *typeData.glTexId, 1 );
; 1238 : 	#endif
; 1239 : 
; 1240 : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
??0Drawable2D@@QAE@HMPAUTpoint@@H00@Z ENDP		; Drawable2D::Drawable2D
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\draw2d.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_type2d$ = 8						; size = 4
_scale$ = 12						; size = 4
_p$ = 16						; size = 4
_rot$ = 20						; size = 4
??0Drawable2D@@QAE@HMPAUTpoint@@PAUTrotation@@@Z PROC	; Drawable2D::Drawable2D
; _this$ = ecx

; 1126 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DrawableObject@@QAE@M@Z		; DrawableObject::DrawableObject
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Drawable2D@@6B@

; 1127 : 	// save type
; 1128 : 	type = type2d;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _type2d$[ebp]
	mov	DWORD PTR [ecx+48], edx

; 1129 : 
; 1130 : 	// sanity check
; 1131 : 	ShiAssert( type2d < DRAW2D_MAXTYPES && type2d >= 0 );
; 1132 : 
; 1133 : 	// get typeData ptr
; 1134 : 	typeData = gTypeTable[ type2d ];

	mov	esi, DWORD PTR _type2d$[ebp]
	imul	esi, 40					; 00000028H
	add	esi, OFFSET ?gTypeTable@@3PAU_TYPES2D@@A ; gTypeTable
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 96					; 00000060H
	mov	ecx, 10					; 0000000aH
	rep movsd

; 1135 : 
; 1136 : 
; 1137 : 	// init curframe
; 1138 : 	curFrame = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], -1

; 1139 : 	curSFrame = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+68], 0

; 1140 : 	curBFrame = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+76], 0

; 1141 : 	if ( typeData.flags & RAND_START_FRAME )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	and	ecx, 33554432				; 02000000H
	je	SHORT $LN2@Drawable2D

; 1142 : 		startSFrame = rand() % typeData.numGlowVerts;

	call	_rand
	mov	ecx, DWORD PTR _this$[ebp]
	cdq
	idiv	DWORD PTR [ecx+128]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+92], edx

; 1143 : 	else

	jmp	SHORT $LN1@Drawable2D
$LN2@Drawable2D:

; 1144 : 		startSFrame = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+92], 0
$LN1@Drawable2D:

; 1145 : 
; 1146 : 	// set position -- world coords
; 1147 : 	position = *p;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax

; 1148 : 
; 1149 : 	// no transparency to start
; 1150 : 	initAlpha = alpha = typeData.initAlpha;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	DWORD PTR [ecx+52], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR [ecx+56], eax

; 1151 : 
; 1152 : 	// scale is equivalent to radius
; 1153 : 	realRadius = initRadius = radius = scale;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [ecx+16], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [edx+60], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [eax+252], xmm0

; 1154 : 
; 1155 : 	// init misc...
; 1156 : 	startFade = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+136], 0

; 1157 : 	numObjVerts = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+244], 0

; 1158 : 	startTime = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+80], 0

; 1159 : 	explicitStartTime = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+140], 0

; 1160 : 	scale2d = 1.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+248], xmm0

; 1161 : 
; 1162 : 	// now update the ref count to the textures and load them
; 1163 : 	// if not already done
; 1164 : 	#ifndef PRELOAD_TEX
; 1165 : 	// if ( typeData.glTexId )
; 1166 : 	// 	glInsertTexture( *typeData.glTexId, 1 );
; 1167 : 	#endif
; 1168 : 
; 1169 : 	orientation = *rot;

	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 260				; 00000104H
	mov	ecx, 9
	mov	esi, DWORD PTR _rot$[ebp]
	rep movsd

; 1170 : 	hasOrientation = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+256], 1

; 1171 : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0Drawable2D@@QAE@HMPAUTpoint@@PAUTrotation@@@Z ENDP	; Drawable2D::Drawable2D
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\objects\draw2d.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_type2d$ = 8						; size = 4
_scale$ = 12						; size = 4
_p$ = 16						; size = 4
??0Drawable2D@@QAE@HMPAUTpoint@@@Z PROC			; Drawable2D::Drawable2D
; _this$ = ecx

; 1074 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DrawableObject@@QAE@M@Z		; DrawableObject::DrawableObject
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Drawable2D@@6B@

; 1075 : 	// sanity check
; 1076 : 	ShiAssert( type2d < DRAW2D_MAXTYPES && type2d >= 0 );
; 1077 : 
; 1078 : 	// save type
; 1079 : 	type = type2d;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _type2d$[ebp]
	mov	DWORD PTR [ecx+48], edx

; 1080 : 
; 1081 : 	// get typeData ptr
; 1082 : 	typeData = gTypeTable[ type2d ];

	mov	esi, DWORD PTR _type2d$[ebp]
	imul	esi, 40					; 00000028H
	add	esi, OFFSET ?gTypeTable@@3PAU_TYPES2D@@A ; gTypeTable
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 96					; 00000060H
	mov	ecx, 10					; 0000000aH
	rep movsd

; 1083 : 
; 1084 : 	// init curframe
; 1085 : 	curFrame = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], -1

; 1086 : 	curSFrame = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+68], 0

; 1087 : 	curBFrame = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+76], 0

; 1088 : 	if ( typeData.flags & RAND_START_FRAME )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	and	ecx, 33554432				; 02000000H
	je	SHORT $LN2@Drawable2D

; 1089 : 		startSFrame = rand() % typeData.numGlowVerts;

	call	_rand
	mov	ecx, DWORD PTR _this$[ebp]
	cdq
	idiv	DWORD PTR [ecx+128]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+92], edx

; 1090 : 	else

	jmp	SHORT $LN1@Drawable2D
$LN2@Drawable2D:

; 1091 : 		startSFrame = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+92], 0
$LN1@Drawable2D:

; 1092 : 
; 1093 : 	// set position -- world coords
; 1094 : 	position = *p;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax

; 1095 : 
; 1096 : 	// no transparency to start
; 1097 : 	initAlpha = alpha = typeData.initAlpha;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	DWORD PTR [ecx+52], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR [ecx+56], eax

; 1098 : 
; 1099 : 	// scale is equivalent to radius
; 1100 : 	realRadius = initRadius = radius = scale;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [ecx+16], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [edx+60], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [eax+252], xmm0

; 1101 : 
; 1102 : 	// init misc...
; 1103 : 	startFade = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+136], 0

; 1104 : 	hasOrientation = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+256], 0

; 1105 : 	numObjVerts = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+244], 0

; 1106 : 	startTime = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+80], 0

; 1107 : 	explicitStartTime = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+140], 0

; 1108 : 
; 1109 : 	scale2d = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+248], xmm0

; 1110 : 
; 1111 : 	// now update the ref count to the textures and load them
; 1112 : 	// if not already done
; 1113 : 	#ifndef PRELOAD_TEX
; 1114 : 	// if ( typeData.glTexId )
; 1115 : 	// 	glInsertTexture( *typeData.glTexId, 1 );
; 1116 : 	#endif
; 1117 : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Drawable2D@@QAE@HMPAUTpoint@@@Z ENDP			; Drawable2D::Drawable2D
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\fakerand.h
;	COMDAT ?PRANDFloat@@YAMXZ
_TEXT	SEGMENT
tv75 = -8						; size = 4
_x$ = -4						; size = 4
?PRANDFloat@@YAMXZ PROC					; PRANDFloat, COMDAT

; 143  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 144  : //	return NRAND;
; 145  : 	float	x=	(float)(GenerateFastRandom()&0xffff);

	call	?GenerateFastRandom@@YAJXZ		; GenerateFastRandom
	and	eax, 65535				; 0000ffffH
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _x$[ebp], xmm0

; 146  : 	return( 1 - 2 * x / 65535.0f);

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _x$[ebp]
	divss	xmm0, DWORD PTR __real@477fff00
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	DWORD PTR tv75[ebp], xmm1
	fld	DWORD PTR tv75[ebp]

; 147  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?PRANDFloat@@YAMXZ ENDP					; PRANDFloat
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\fakerand.h
;	COMDAT ?GenerateFastRandom@@YAJXZ
_TEXT	SEGMENT
_FastRandom$ = -4					; size = 4
?GenerateFastRandom@@YAJXZ PROC				; GenerateFastRandom, COMDAT

; 108  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 109  : 	static long LastRandom;
; 110  : 	long	FastRandom;														// The Random Variable
; 111  : 	_asm {	
; 112  : 			push	edx

	push	edx

; 113  : 			push	eax

	push	eax

; 114  : 			RDTSC

	rdtsc

; 115  : 			add	DWORD PTR FastRandom,edx

	add	DWORD PTR _FastRandom$[ebp], edx

; 116  : 			xor	DWORD PTR FastRandom,eax

	xor	DWORD PTR _FastRandom$[ebp], eax

; 117  : 			mov	eax, DWORD PTR LastRandom

	mov	eax, DWORD PTR ?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA ; `GenerateFastRandom'::`2'::LastRandom

; 118  : 			add	DWORD PTR FastRandom,eax

	add	DWORD PTR _FastRandom$[ebp], eax

; 119  : 			add	DWORD PTR LastRandom,edx

	add	DWORD PTR ?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA, edx ; `GenerateFastRandom'::`2'::LastRandom

; 120  : 			pop	eax

	pop	eax

; 121  : 			pop	edx

	pop	edx

; 122  : 	}
; 123  : 	return(FastRandom);

	mov	eax, DWORD PTR _FastRandom$[ebp]

; 124  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GenerateFastRandom@@YAJXZ ENDP				; GenerateFastRandom
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GDrawableObject@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDrawableObject@@UAEPAXI@Z PROC			; DrawableObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DrawableObject@@UAE@XZ		; DrawableObject::~DrawableObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDrawableObject@@UAEPAXI@Z ENDP			; DrawableObject::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawobj.h
;	COMDAT ?SetParentList@DrawableObject@@MAEXPAVObjectDisplayList@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_list$ = 8						; size = 4
?SetParentList@DrawableObject@@MAEXPAVObjectDisplayList@@@Z PROC ; DrawableObject::SetParentList, COMDAT
; _this$ = ecx

; 70   : 	virtual	void SetParentList( ObjectDisplayList *list )	{ parentList = list; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _list$[ebp]
	mov	DWORD PTR [eax+28], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetParentList@DrawableObject@@MAEXPAVObjectDisplayList@@@Z ENDP ; DrawableObject::SetParentList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawobj.h
;	COMDAT ?GetRayHit@DrawableObject@@UAEHPBUTpoint@@0PAU2@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?GetRayHit@DrawableObject@@UAEHPBUTpoint@@0PAU2@M@Z PROC ; DrawableObject::GetRayHit, COMDAT
; _this$ = ecx

; 49   : 	virtual BOOL GetRayHit( const Tpoint*, const Tpoint*, Tpoint*, float = 1.0f ) { return FALSE; } ;

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?GetRayHit@DrawableObject@@UAEHPBUTpoint@@0PAU2@M@Z ENDP ; DrawableObject::GetRayHit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawobj.h
;	COMDAT ?Draw@DrawableObject@@UAEXPAVRender3D@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?Draw@DrawableObject@@UAEXPAVRender3D@@@Z PROC		; DrawableObject::Draw, COMDAT
; _this$ = ecx

; 45   : 	virtual void Draw( class Render3D* ) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?Draw@DrawableObject@@UAEXPAVRender3D@@@Z ENDP		; DrawableObject::Draw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawobj.h
;	COMDAT ?SetInhibitFlag@DrawableObject@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetInhibitFlag@DrawableObject@@UAEXH@Z PROC		; DrawableObject::SetInhibitFlag, COMDAT
; _this$ = ecx

; 42   : 	virtual void SetInhibitFlag( BOOL )				{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetInhibitFlag@DrawableObject@@UAEXH@Z ENDP		; DrawableObject::SetInhibitFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawobj.h
;	COMDAT ?SetLabel@DrawableObject@@UAEXPADK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?SetLabel@DrawableObject@@UAEXPADK@Z PROC		; DrawableObject::SetLabel, COMDAT
; _this$ = ecx

; 40   : 	virtual void SetLabel( char*, DWORD )	{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetLabel@DrawableObject@@UAEXPADK@Z ENDP		; DrawableObject::SetLabel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawobj.h
;	COMDAT ?GetRadarSign@DrawableObject@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRadarSign@DrawableObject@@UAEMXZ PROC		; DrawableObject::GetRadarSign, COMDAT
; _this$ = ecx

; 22   : 	virtual	float	GetRadarSign(void)		{ return 0.0f; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fldz
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRadarSign@DrawableObject@@UAEMXZ ENDP		; DrawableObject::GetRadarSign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawobj.h
;	COMDAT ??1DrawableObject@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1DrawableObject@@UAE@XZ PROC				; DrawableObject::~DrawableObject, COMDAT
; _this$ = ecx

; 19   : 	virtual ~DrawableObject()	{ ShiAssert( parentList == NULL ) };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DrawableObject@@6B@
	mov	esp, ebp
	pop	ebp
	ret	0
??1DrawableObject@@UAE@XZ ENDP				; DrawableObject::~DrawableObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawobj.h
;	COMDAT ??0DrawableObject@@QAE@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??0DrawableObject@@QAE@M@Z PROC				; DrawableObject::DrawableObject, COMDAT
; _this$ = ecx

; 17   : 	DrawableObject( float s )	{ drawClassID = Default, scale = s, parentList = NULL, prev = next = NULL; test = 0.0;  };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DrawableObject@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR [edx+20], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+40], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0DrawableObject@@QAE@M@Z ENDP				; DrawableObject::DrawableObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\renderow.h
;	COMDAT ?GetFilteringMode@RenderOTW@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFilteringMode@RenderOTW@@QAEHXZ PROC		; RenderOTW::GetFilteringMode, COMDAT
; _this$ = ecx

; 141  : 	BOOL GetFilteringMode( void )				{ return filtering; }; 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+263104]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFilteringMode@RenderOTW@@QAEHXZ ENDP		; RenderOTW::GetFilteringMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render3d.h
;	COMDAT ?GetUp@Render3D@@QAEXPAUTpoint@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
?GetUp@Render3D@@QAEXPAUTpoint@@@Z PROC			; Render3D::GetUp, COMDAT
; _this$ = ecx

; 88   : 	void	GetUp( Tpoint *v )		{ v->x = cameraRot.M31, v->y = cameraRot.M32, v->z = cameraRot.M33; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262960]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262964]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262968]
	mov	DWORD PTR [eax+8], edx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetUp@Render3D@@QAEXPAUTpoint@@@Z ENDP			; Render3D::GetUp
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render3d.h
;	COMDAT ?GetLeft@Render3D@@QAEXPAUTpoint@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
?GetLeft@Render3D@@QAEXPAUTpoint@@@Z PROC		; Render3D::GetLeft, COMDAT
; _this$ = ecx

; 87   : 	void	GetLeft( Tpoint *v )	{ v->x = cameraRot.M21, v->y = cameraRot.M22, v->z = cameraRot.M23; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262948]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262952]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262956]
	mov	DWORD PTR [eax+8], edx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetLeft@Render3D@@QAEXPAUTpoint@@@Z ENDP		; Render3D::GetLeft
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render3d.h
;	COMDAT ?GetAt@Render3D@@QAEXPAUTpoint@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
?GetAt@Render3D@@QAEXPAUTpoint@@@Z PROC			; Render3D::GetAt, COMDAT
; _this$ = ecx

; 86   : 	void	GetAt( Tpoint *v )		{ v->x = cameraRot.M11, v->y = cameraRot.M12, v->z = cameraRot.M13; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262936]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262940]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262944]
	mov	DWORD PTR [eax+8], edx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAt@Render3D@@QAEXPAUTpoint@@@Z ENDP			; Render3D::GetAt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render3d.h
;	COMDAT ?Z@Render3D@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Z@Render3D@@QAEMXZ PROC				; Render3D::Z, COMDAT
; _this$ = ecx

; 80   : 	float	Z( void )	{ return cameraPos.z; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+262932]
	mov	esp, ebp
	pop	ebp
	ret	0
?Z@Render3D@@QAEMXZ ENDP				; Render3D::Z
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render3d.h
;	COMDAT ?Y@Render3D@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Y@Render3D@@QAEMXZ PROC				; Render3D::Y, COMDAT
; _this$ = ecx

; 79   : 	float	Y( void )	{ return cameraPos.y; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+262928]
	mov	esp, ebp
	pop	ebp
	ret	0
?Y@Render3D@@QAEMXZ ENDP				; Render3D::Y
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render3d.h
;	COMDAT ?X@Render3D@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X@Render3D@@QAEMXZ PROC				; Render3D::X, COMDAT
; _this$ = ecx

; 78   : 	float	X( void )	{ return cameraPos.x; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+262924]
	mov	esp, ebp
	pop	ebp
	ret	0
?X@Render3D@@QAEMXZ ENDP				; Render3D::X
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render3d.h
;	COMDAT ?GetFOV@Render3D@@QAEMXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?GetFOV@Render3D@@QAEMXZ PROC				; Render3D::GetFOV, COMDAT
; _this$ = ecx

; 61   : 	float GetFOV( void )			{ return horizontal_half_angle * 2.0f; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+262892]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv69[ebp], xmm0
	fld	DWORD PTR tv69[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFOV@Render3D@@QAEMXZ ENDP				; Render3D::GetFOV
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?GetRightPixel@VirtualDisplay@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRightPixel@VirtualDisplay@@QAEMXZ PROC		; VirtualDisplay::GetRightPixel, COMDAT
; _this$ = ecx

; 156  : 	float GetRightPixel( void )		{ return rightPixel; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+64]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRightPixel@VirtualDisplay@@QAEMXZ ENDP		; VirtualDisplay::GetRightPixel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?GetLeftPixel@VirtualDisplay@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetLeftPixel@VirtualDisplay@@QAEMXZ PROC		; VirtualDisplay::GetLeftPixel, COMDAT
; _this$ = ecx

; 155  : 	float GetLeftPixel( void )		{ return leftPixel; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+60]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLeftPixel@VirtualDisplay@@QAEMXZ ENDP		; VirtualDisplay::GetLeftPixel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?GetBottomPixel@VirtualDisplay@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetBottomPixel@VirtualDisplay@@QAEMXZ PROC		; VirtualDisplay::GetBottomPixel, COMDAT
; _this$ = ecx

; 154  : 	float GetBottomPixel( void )	{ return bottomPixel; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetBottomPixel@VirtualDisplay@@QAEMXZ ENDP		; VirtualDisplay::GetBottomPixel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?GetTopPixel@VirtualDisplay@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTopPixel@VirtualDisplay@@QAEMXZ PROC		; VirtualDisplay::GetTopPixel, COMDAT
; _this$ = ecx

; 153  : 	float GetTopPixel( void )		{ return topPixel; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+52]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTopPixel@VirtualDisplay@@QAEMXZ ENDP		; VirtualDisplay::GetTopPixel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tex.h
;	COMDAT ?TexHandle@Texture@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?TexHandle@Texture@@QAEKXZ PROC				; Texture::TexHandle, COMDAT
; _this$ = ecx

; 60   : 	DWORD TexHandle() { return (DWORD) texHandle; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?TexHandle@Texture@@QAEKXZ ENDP				; Texture::TexHandle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tex.h
;	COMDAT ?GetPalette@Texture@@QAEPAVPalette@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPalette@Texture@@QAEPAVPalette@@XZ PROC		; Texture::GetPalette, COMDAT
; _this$ = ecx

; 33   : 	Palette *GetPalette(){ return this->palette; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPalette@Texture@@QAEPAVPalette@@XZ ENDP		; Texture::GetPalette
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tex.h
;	COMDAT ?SetPalette@Texture@@QAEXPAVPalette@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
?SetPalette@Texture@@QAEXPAVPalette@@@Z PROC		; Texture::SetPalette, COMDAT
; _this$ = ecx

; 32   : 	void SetPalette(Palette *p){this->palette = p;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetPalette@Texture@@QAEXPAVPalette@@@Z ENDP		; Texture::SetPalette
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tod.h
;	COMDAT ?ThereIsASun@CTimeOfDay@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
?ThereIsASun@CTimeOfDay@@QAEHXZ PROC			; CTimeOfDay::ThereIsASun, COMDAT
; _this$ = ecx

; 111  : 	int ThereIsASun()							{ return (ISunPitch > 0); };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+328], 0
	jle	SHORT $LN3@ThereIsASu
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@ThereIsASu
$LN3@ThereIsASu:
	mov	DWORD PTR tv66[ebp], 0
$LN4@ThereIsASu:
	mov	eax, DWORD PTR tv66[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?ThereIsASun@CTimeOfDay@@QAEHXZ ENDP			; CTimeOfDay::ThereIsASun
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tod.h
;	COMDAT ?GetLightLevel@CTimeOfDay@@QAEMXZ
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
?GetLightLevel@CTimeOfDay@@QAEMXZ PROC			; CTimeOfDay::GetLightLevel, COMDAT
; _this$ = ecx

; 108  : 	float GetLightLevel()						{ return Ambient + Diffuse; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+220]
	addss	xmm0, DWORD PTR [ecx+224]
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLightLevel@CTimeOfDay@@QAEMXZ ENDP			; CTimeOfDay::GetLightLevel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tod.h
;	COMDAT ?GetTextureLightingColor@CTimeOfDay@@QAEXPAUTcolor@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rgb$ = 8						; size = 4
?GetTextureLightingColor@CTimeOfDay@@QAEXPAUTcolor@@@Z PROC ; CTimeOfDay::GetTextureLightingColor, COMDAT
; _this$ = ecx

; 94   : 	void GetTextureLightingColor(Tcolor *rgb)	{ *rgb = TextureLighting; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 196				; 000000c4H
	mov	ecx, DWORD PTR _rgb$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?GetTextureLightingColor@CTimeOfDay@@QAEXPAUTcolor@@@Z ENDP ; CTimeOfDay::GetTextureLightingColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\timemgr.h
;	COMDAT ?GetClockTime@TimeManager@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetClockTime@TimeManager@@QAEKXZ PROC			; TimeManager::GetClockTime, COMDAT
; _this$ = ecx

; 48   : 	DWORD	GetClockTime( void )		{ return currentTime; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetClockTime@TimeManager@@QAEKXZ ENDP			; TimeManager::GetClockTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 537  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 511  :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 430  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
END
