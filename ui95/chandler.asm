; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\ui95\chandler.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ ; ATL::CVarTypeInfo<unsigned long *>::pmField
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?VT@?$CVarTypeInfo@_J@ATL@@2GB			; ATL::CVarTypeInfo<__int64>::VT
PUBLIC	?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ ; ATL::CVarTypeInfo<__int64>::pmField
PUBLIC	___pobjMapEntryFirst
PUBLIC	___pobjMapEntryLast
PUBLIC	?VT@?$CVarTypeInfo@PA_J@ATL@@2GB		; ATL::CVarTypeInfo<__int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ ; ATL::CVarTypeInfo<__int64 *>::pmField
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?VT@?$CVarTypeInfo@_K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned __int64>::VT
PUBLIC	??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@	; `string'
PUBLIC	?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64>::pmField
PUBLIC	??_C@_08PICKODJL@FileType?$AA@			; `string'
PUBLIC	??_C@_09JKPGEJCH@Interface?$AA@			; `string'
PUBLIC	??_C@_08PPIOJEA@Hardware?$AA@			; `string'
PUBLIC	?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA	; ATL::_pPerfRegFunc
PUBLIC	??_C@_04IHBFOLAC@Mime?$AA@			; `string'
PUBLIC	?_pPerfUnRegFunc@ATL@@3P6AJXZA			; ATL::_pPerfUnRegFunc
PUBLIC	??_C@_03DDIMFGBA@SAM?$AA@			; `string'
PUBLIC	?_AtlRegisterPerUser@ATL@@3_NA			; ATL::_AtlRegisterPerUser
PUBLIC	??_C@_08LOPHEHKG@SECURITY?$AA@			; `string'
PUBLIC	??_C@_06FDHFNJBJ@SYSTEM?$AA@			; `string'
PUBLIC	??_C@_08KEKAJNJI@Software?$AA@			; `string'
PUBLIC	??_C@_07KJLOKDKB@TypeLib?$AA@			; `string'
PUBLIC	?VT@?$CVarTypeInfo@PA_K@ATL@@2GB		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
PUBLIC	__GUID_00000000_0000_0000_c000_000000000046
PUBLIC	?VT@?$CVarTypeInfo@M@ATL@@2GB			; ATL::CVarTypeInfo<float>::VT
PUBLIC	?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ ; ATL::CVarTypeInfo<float>::pmField
PUBLIC	__GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
PUBLIC	?VT@?$CVarTypeInfo@PAM@ATL@@2GB			; ATL::CVarTypeInfo<float *>::VT
PUBLIC	__GUID_00020400_0000_0000_c000_000000000046
PUBLIC	?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ ; ATL::CVarTypeInfo<float *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@N@ATL@@2GB			; ATL::CVarTypeInfo<double>::VT
PUBLIC	?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ ; ATL::CVarTypeInfo<double>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAN@ATL@@2GB			; ATL::CVarTypeInfo<double *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ ; ATL::CVarTypeInfo<double *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB	; ATL::CVarTypeInfo<tagVARIANT *>::VT
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	__GUID_0002e012_0000_0000_c000_000000000046
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?VT@?$CVarTypeInfo@PA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ ; ATL::CVarTypeInfo<wchar_t *>::pmField
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t * *>::VT
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ ; ATL::CVarTypeInfo<wchar_t * *>::pmField
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown *>::VT
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown *>::pmField
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown * *>::pmField
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	__GUID_0000010c_0000_0000_c000_000000000046
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch *>::VT
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch *>::pmField
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	??_C@_05GIBEAPNE@CLSID?$AA@			; `string'
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	_IID_IAxWinHostWindow
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch * *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY>::VT
PUBLIC	?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY>::pmField
PUBLIC	??_C@_05PDIKPLII@AppID?$AA@			; `string'
PUBLIC	?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY *>::VT
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY *>::pmField
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?chDirSep@ATL@@3DB				; ATL::chDirSep
PUBLIC	?chRightBracket@ATL@@3DB			; ATL::chRightBracket
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?chLeftBracket@ATL@@3DB				; ATL::chLeftBracket
PUBLIC	?chQuote@ATL@@3DB				; ATL::chQuote
PUBLIC	?chEquals@ATL@@3DB				; ATL::chEquals
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?szStringVal@ATL@@3QBDB				; ATL::szStringVal
PUBLIC	??_C@_01CPLAODJH@S?$AA@				; `string'
PUBLIC	?multiszStringVal@ATL@@3QBDB			; ATL::multiszStringVal
PUBLIC	_IID_IAxWinHostWindowLic
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	??_C@_01PLPBNMEI@M?$AA@				; `string'
PUBLIC	?szDwordVal@ATL@@3QBDB				; ATL::szDwordVal
PUBLIC	??_C@_01CKDDGHAB@D?$AA@				; `string'
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?szBinaryVal@ATL@@3QBDB				; ATL::szBinaryVal
PUBLIC	??_C@_01HMGJMAIH@B?$AA@				; `string'
PUBLIC	?szValToken@ATL@@3QBDB				; ATL::szValToken
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	??_C@_03LAIAPFCB@Val?$AA@			; `string'
PUBLIC	?szForceRemove@ATL@@3QBDB			; ATL::szForceRemove
PUBLIC	??_C@_0M@DBGDLGLL@ForceRemove?$AA@		; `string'
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?szNoRemove@ATL@@3QBDB				; ATL::szNoRemove
PUBLIC	??_C@_08KAAPDIAN@NoRemove?$AA@			; `string'
PUBLIC	?szDelete@ATL@@3QBDB				; ATL::szDelete
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	??_C@_06JBKGCNBB@Delete?$AA@			; `string'
PUBLIC	?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA	; ATL::CComApartment::ATL_CREATE_OBJECT
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	_IID_IAxWinAmbientDispatch
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?gUI_TakeScreenShot@@3JA			; gUI_TakeScreenShot
PUBLIC	?gScreenShotEnabled@@3JA			; gScreenShotEnabled
PUBLIC	?gScreenShotBuffer@@3PAGA			; gScreenShotBuffer
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A ; ATL::_pAtlAutoThreadModule
PUBLIC	?m_rcMouseImage@@3UtagRECT@@A			; m_rcMouseImage
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?m_bInitFailed@CAtlBaseModule@ATL@@2_NA		; ATL::CAtlBaseModule::m_bInitFailed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	__GUID_00000000_0000_0000_0000_000000000000
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?MAX_VALUE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_VALUE
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?rgszNeverDelete@CRegParser@ATL@@1QBQBDB	; ATL::CRegParser::rgszNeverDelete
PUBLIC	?cbNeverDelete@CRegParser@ATL@@1HB		; ATL::CRegParser::cbNeverDelete
PUBLIC	?MAX_TYPE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_TYPE
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?_LOAD_ART_RESOURCES_@@3JA			; _LOAD_ART_RESOURCES_
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	_IID_IAxWinAmbientDispatchEx
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	_IID_IInternalConnection
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	__GUID_1cf2b120_547d_101b_8e65_08002b2bd119
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?_pAtlModule@ATL@@3PAVCAtlModule@1@A		; ATL::_pAtlModule
PUBLIC	?m_libid@CAtlModule@ATL@@2U_GUID@@A		; ATL::CAtlModule::m_libid
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	__GUID_00000146_0000_0000_c000_000000000046
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?VT@?$CVarTypeInfo@D@ATL@@2GB			; ATL::CVarTypeInfo<char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ ; ATL::CVarTypeInfo<char>::pmField
PUBLIC	?VT@?$CVarTypeInfo@E@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ ; ATL::CVarTypeInfo<unsigned char>::pmField
PUBLIC	_CLSID_Registrar
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?_Min@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Min
PUBLIC	?VT@?$CVarTypeInfo@PAD@ATL@@2GB			; ATL::CVarTypeInfo<char *>::VT
PUBLIC	?_Max@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Max
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ ; ATL::CVarTypeInfo<char *>::pmField
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?_Min@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Min
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?_Max@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Max
PUBLIC	?VT@?$CVarTypeInfo@PAE@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char *>::VT
PUBLIC	__GUID_00000109_0000_0000_c000_000000000046
PUBLIC	?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ ; ATL::CVarTypeInfo<unsigned char *>::pmField
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?_Min@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Min
PUBLIC	__GUID_b196b284_bab4_101a_b69c_00aa00341d07
PUBLIC	?_Max@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Max
PUBLIC	?VT@?$CVarTypeInfo@F@ATL@@2GB			; ATL::CVarTypeInfo<short>::VT
PUBLIC	_IID_IRegistrar
PUBLIC	?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ ; ATL::CVarTypeInfo<short>::pmField
PUBLIC	?_Min@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Min
PUBLIC	?_Max@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Max
PUBLIC	?VT@?$CVarTypeInfo@PAF@ATL@@2GB			; ATL::CVarTypeInfo<short *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ ; ATL::CVarTypeInfo<short *>::pmField
PUBLIC	?_Min@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Min
PUBLIC	__GUID_00000001_0000_0000_c000_000000000046
PUBLIC	?_Max@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Max
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?VT@?$CVarTypeInfo@G@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short>::VT
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ ; ATL::CVarTypeInfo<unsigned short>::pmField
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	__GUID_00020401_0000_0000_c000_000000000046
PUBLIC	?_Min@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Min
PUBLIC	_LIBID_ATLLib
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?_Max@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Max
PUBLIC	__GUID_00020412_0000_0000_c000_000000000046
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?VT@?$CVarTypeInfo@PAG@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short *>::VT
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ ; ATL::CVarTypeInfo<unsigned short *>::pmField
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?VT@?$CVarTypeInfo@H@ATL@@2GB			; ATL::CVarTypeInfo<int>::VT
PUBLIC	?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ ; ATL::CVarTypeInfo<int>::pmField
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?VT@?$CVarTypeInfo@PAH@ATL@@2GB			; ATL::CVarTypeInfo<int *>::VT
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ ; ATL::CVarTypeInfo<int *>::pmField
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?VT@?$CVarTypeInfo@I@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int>::VT
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ ; ATL::CVarTypeInfo<unsigned int>::pmField
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?VT@?$CVarTypeInfo@PAI@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ ; ATL::CVarTypeInfo<unsigned int *>::pmField
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?VT@?$CVarTypeInfo@J@ATL@@2GB			; ATL::CVarTypeInfo<long>::VT
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ ; ATL::CVarTypeInfo<long>::pmField
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?_pModule@ATL@@3PAVCComModule@1@A		; ATL::_pModule
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?VT@?$CVarTypeInfo@PAJ@ATL@@2GB			; ATL::CVarTypeInfo<long *>::VT
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ ; ATL::CVarTypeInfo<long *>::pmField
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	_IID_IDocHostUIHandlerDispatch
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?VT@?$CVarTypeInfo@K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long>::VT
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ ; ATL::CVarTypeInfo<unsigned long>::pmField
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?VT@?$CVarTypeInfo@PAK@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long *>::VT
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA
_BSS	SEGMENT
?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA DD 01H DUP (?) ; ATL::_pPerfRegFunc
_BSS	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZA
_BSS	SEGMENT
?_pPerfUnRegFunc@ATL@@3P6AJXZA DD 01H DUP (?)		; ATL::_pPerfUnRegFunc
_BSS	ENDS
;	COMDAT ?_AtlRegisterPerUser@ATL@@3_NA
_BSS	SEGMENT
?_AtlRegisterPerUser@ATL@@3_NA DB 01H DUP (?)		; ATL::_AtlRegisterPerUser
_BSS	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_BSS	SEGMENT
?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA DD 01H DUP (?) ; ATL::CComApartment::ATL_CREATE_OBJECT
_BSS	ENDS
_BSS	SEGMENT
?gUI_TakeScreenShot@@3JA DD 01H DUP (?)			; gUI_TakeScreenShot
?gScreenShotBuffer@@3PAGA DD 01H DUP (?)		; gScreenShotBuffer
_BSS	ENDS
;	COMDAT ?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A
_BSS	SEGMENT
?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A DD 01H DUP (?) ; ATL::_pAtlAutoThreadModule
_BSS	ENDS
_BSS	SEGMENT
?m_rcMouseImage@@3UtagRECT@@A DB 010H DUP (?)		; m_rcMouseImage
_BSS	ENDS
;	COMDAT ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA
_BSS	SEGMENT
?m_bInitFailed@CAtlBaseModule@ATL@@2_NA DB 01H DUP (?)	; ATL::CAtlBaseModule::m_bInitFailed
_BSS	ENDS
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_BSS	SEGMENT
?_pAtlModule@ATL@@3PAVCAtlModule@1@A DD 01H DUP (?)	; ATL::_pAtlModule
_BSS	ENDS
;	COMDAT ?m_libid@CAtlModule@ATL@@2U_GUID@@A
_BSS	SEGMENT
?m_libid@CAtlModule@ATL@@2U_GUID@@A DB 010H DUP (?)	; ATL::CAtlModule::m_libid
_BSS	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_BSS	SEGMENT
?_pModule@ATL@@3PAVCComModule@1@A DD 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAK@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAK@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned long *>::VT
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long>::pmField
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@K@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned long>::VT
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
_IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ DD 08H ; ATL::CVarTypeInfo<long *>::pmField
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAJ@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAJ@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<long *>::VT
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ DD 08H ; ATL::CVarTypeInfo<long>::pmField
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@J@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<long>::VT
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAI@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAI@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned int *>::VT
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int>::pmField
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@I@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@I@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned int>::VT
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ DD 08H ; ATL::CVarTypeInfo<int *>::pmField
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAH@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAH@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<int *>::VT
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ DD 08H ; ATL::CVarTypeInfo<int>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@H@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@H@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<int>::VT
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short *>::pmField
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAG@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAG@ATL@@2GB DW 04012H		; ATL::CVarTypeInfo<unsigned short *>::VT
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT __GUID_00020412_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020412_0000_0000_c000_000000000046 DD 020412H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Max@?$AtlLimits@_K@ATL@@2_KB DQ ffffffffffffffffH	; ATL::AtlLimits<unsigned __int64>::_Max
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT
_LIBID_ATLLib DD 044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Min@?$AtlLimits@_K@ATL@@2_KB DQ 0000000000000000H	; ATL::AtlLimits<unsigned __int64>::_Min
CONST	ENDS
;	COMDAT __GUID_00020401_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020401_0000_0000_c000_000000000046 DD 020401H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short>::pmField
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@G@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@G@ATL@@2GB DW 012H			; ATL::CVarTypeInfo<unsigned short>::VT
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Max@?$AtlLimits@_J@ATL@@2_JB DQ 7fffffffffffffffH	; ATL::AtlLimits<__int64>::_Max
CONST	ENDS
;	COMDAT __GUID_00000001_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000001_0000_0000_c000_000000000046 DD 01H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Min@?$AtlLimits@_J@ATL@@2_JB DQ 8000000000000000H	; ATL::AtlLimits<__int64>::_Min
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ DD 08H ; ATL::CVarTypeInfo<short *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAF@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAF@ATL@@2GB DW 04002H		; ATL::CVarTypeInfo<short *>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Max@?$AtlLimits@K@ATL@@2KB DD 0ffffffffH		; ATL::AtlLimits<unsigned long>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Min@?$AtlLimits@K@ATL@@2KB DD 00H			; ATL::AtlLimits<unsigned long>::_Min
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ DD 08H ; ATL::CVarTypeInfo<short>::pmField
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT
_IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@F@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@F@ATL@@2GB DW 02H			; ATL::CVarTypeInfo<short>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Max@?$AtlLimits@J@ATL@@2JB DD 07fffffffH		; ATL::AtlLimits<long>::_Max
CONST	ENDS
;	COMDAT __GUID_b196b284_bab4_101a_b69c_00aa00341d07
CONST	SEGMENT
__GUID_b196b284_bab4_101a_b69c_00aa00341d07 DD 0b196b284H
	DW	0bab4H
	DW	0101aH
	DB	0b6H
	DB	09cH
	DB	00H
	DB	0aaH
	DB	00H
	DB	034H
	DB	01dH
	DB	07H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Min@?$AtlLimits@J@ATL@@2JB DD 080000000H		; ATL::AtlLimits<long>::_Min
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT __GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
CONST	SEGMENT
__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713 DD 07fd52380H
	DW	04e07H
	DW	0101bH
	DB	0aeH
	DB	02dH
	DB	08H
	DB	00H
	DB	02bH
	DB	02eH
	DB	0c7H
	DB	013H
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char *>::pmField
CONST	ENDS
;	COMDAT __GUID_00000109_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000109_0000_0000_c000_000000000046 DD 0109H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAE@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAE@ATL@@2GB DW 04011H		; ATL::CVarTypeInfo<unsigned char *>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Max@?$AtlLimits@I@ATL@@2IB DD 0ffffffffH		; ATL::AtlLimits<unsigned int>::_Max
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Min@?$AtlLimits@I@ATL@@2IB DD 00H			; ATL::AtlLimits<unsigned int>::_Min
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ DD 08H ; ATL::CVarTypeInfo<char *>::pmField
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Max@?$AtlLimits@H@ATL@@2HB DD 07fffffffH		; ATL::AtlLimits<int>::_Max
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAD@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAD@ATL@@2GB DW 04010H		; ATL::CVarTypeInfo<char *>::VT
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Min@?$AtlLimits@H@ATL@@2HB DD 080000000H		; ATL::AtlLimits<int>::_Min
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT
_CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@E@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@E@ATL@@2GB DW 011H			; ATL::CVarTypeInfo<unsigned char>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ DD 08H ; ATL::CVarTypeInfo<char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@D@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@D@ATL@@2GB DW 010H			; ATL::CVarTypeInfo<char>::VT
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT __GUID_00000146_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000146_0000_0000_c000_000000000046 DD 0146H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT __GUID_1cf2b120_547d_101b_8e65_08002b2bd119
CONST	SEGMENT
__GUID_1cf2b120_547d_101b_8e65_08002b2bd119 DD 01cf2b120H
	DW	0547dH
	DW	0101bH
	DB	08eH
	DB	065H
	DB	08H
	DB	00H
	DB	02bH
	DB	02bH
	DB	0d1H
	DB	019H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT
_IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatchEx
CONST	SEGMENT
_IID_IAxWinAmbientDispatchEx DD 0b2d0778bH
	DW	0ac99H
	DW	04c58H
	DB	0a5H
	DB	0c8H
	DB	0e7H
	DB	072H
	DB	04eH
	DB	053H
	DB	016H
	DB	0b5H
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT __GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
CONST	SEGMENT
__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352 DD 0fc4801a3H
	DW	02ba9H
	DW	011cfH
	DB	0a2H
	DB	029H
	DB	00H
	DB	0aaH
	DB	00H
	DB	03dH
	DB	073H
	DB	052H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?MAX_TYPE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_TYPE@CRegParser@ATL@@1HB DD 01000H			; ATL::CRegParser::MAX_TYPE
CONST	ENDS
;	COMDAT ?cbNeverDelete@CRegParser@ATL@@1HB
CONST	SEGMENT
?cbNeverDelete@CRegParser@ATL@@1HB DD 0cH		; ATL::CRegParser::cbNeverDelete
CONST	ENDS
;	COMDAT ?rgszNeverDelete@CRegParser@ATL@@1QBQBDB
CONST	SEGMENT
?rgszNeverDelete@CRegParser@ATL@@1QBQBDB DD FLAT:??_C@_05PDIKPLII@AppID?$AA@ ; ATL::CRegParser::rgszNeverDelete
	DD	FLAT:??_C@_05GIBEAPNE@CLSID?$AA@
	DD	FLAT:??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
	DD	FLAT:??_C@_08PICKODJL@FileType?$AA@
	DD	FLAT:??_C@_09JKPGEJCH@Interface?$AA@
	DD	FLAT:??_C@_08PPIOJEA@Hardware?$AA@
	DD	FLAT:??_C@_04IHBFOLAC@Mime?$AA@
	DD	FLAT:??_C@_03DDIMFGBA@SAM?$AA@
	DD	FLAT:??_C@_08LOPHEHKG@SECURITY?$AA@
	DD	FLAT:??_C@_06FDHFNJBJ@SYSTEM?$AA@
	DD	FLAT:??_C@_08KEKAJNJI@Software?$AA@
	DD	FLAT:??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?MAX_VALUE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_VALUE@CRegParser@ATL@@1HB DD 01000H		; ATL::CRegParser::MAX_VALUE
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
CONST	SEGMENT
__GUID_00000000_0000_0000_0000_000000000000 DD 00H
	DW	00H
	DW	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
_DATA	SEGMENT
?gScreenShotEnabled@@3JA DD 01H				; gScreenShotEnabled
?_LOAD_ART_RESOURCES_@@3JA DD 01H			; _LOAD_ART_RESOURCES_
_DATA	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT
_IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ??_C@_06JBKGCNBB@Delete?$AA@
CONST	SEGMENT
??_C@_06JBKGCNBB@Delete?$AA@ DB 'Delete', 00H		; `string'
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?szDelete@ATL@@3QBDB
CONST	SEGMENT
?szDelete@ATL@@3QBDB DD FLAT:??_C@_06JBKGCNBB@Delete?$AA@ ; ATL::szDelete
CONST	ENDS
;	COMDAT ??_C@_08KAAPDIAN@NoRemove?$AA@
CONST	SEGMENT
??_C@_08KAAPDIAN@NoRemove?$AA@ DB 'NoRemove', 00H	; `string'
CONST	ENDS
;	COMDAT ?szNoRemove@ATL@@3QBDB
CONST	SEGMENT
?szNoRemove@ATL@@3QBDB DD FLAT:??_C@_08KAAPDIAN@NoRemove?$AA@ ; ATL::szNoRemove
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ??_C@_0M@DBGDLGLL@ForceRemove?$AA@
CONST	SEGMENT
??_C@_0M@DBGDLGLL@ForceRemove?$AA@ DB 'ForceRemove', 00H ; `string'
CONST	ENDS
;	COMDAT ?szForceRemove@ATL@@3QBDB
CONST	SEGMENT
?szForceRemove@ATL@@3QBDB DD FLAT:??_C@_0M@DBGDLGLL@ForceRemove?$AA@ ; ATL::szForceRemove
CONST	ENDS
;	COMDAT ??_C@_03LAIAPFCB@Val?$AA@
CONST	SEGMENT
??_C@_03LAIAPFCB@Val?$AA@ DB 'Val', 00H			; `string'
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?szValToken@ATL@@3QBDB
CONST	SEGMENT
?szValToken@ATL@@3QBDB DD FLAT:??_C@_03LAIAPFCB@Val?$AA@ ; ATL::szValToken
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B?$AA@
CONST	SEGMENT
??_C@_01HMGJMAIH@B?$AA@ DB 'B', 00H			; `string'
CONST	ENDS
;	COMDAT ?szBinaryVal@ATL@@3QBDB
CONST	SEGMENT
?szBinaryVal@ATL@@3QBDB DD FLAT:??_C@_01HMGJMAIH@B?$AA@	; ATL::szBinaryVal
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D?$AA@
CONST	SEGMENT
??_C@_01CKDDGHAB@D?$AA@ DB 'D', 00H			; `string'
CONST	ENDS
;	COMDAT ?szDwordVal@ATL@@3QBDB
CONST	SEGMENT
?szDwordVal@ATL@@3QBDB DD FLAT:??_C@_01CKDDGHAB@D?$AA@	; ATL::szDwordVal
CONST	ENDS
;	COMDAT ??_C@_01PLPBNMEI@M?$AA@
CONST	SEGMENT
??_C@_01PLPBNMEI@M?$AA@ DB 'M', 00H			; `string'
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindowLic
CONST	SEGMENT
_IID_IAxWinHostWindowLic DD 03935bda8H
	DW	04ed9H
	DW	0495cH
	DB	086H
	DB	050H
	DB	0e0H
	DB	01fH
	DB	0c1H
	DB	0e3H
	DB	08aH
	DB	04bH
CONST	ENDS
;	COMDAT ?multiszStringVal@ATL@@3QBDB
CONST	SEGMENT
?multiszStringVal@ATL@@3QBDB DD FLAT:??_C@_01PLPBNMEI@M?$AA@ ; ATL::multiszStringVal
CONST	ENDS
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT
??_C@_01CPLAODJH@S?$AA@ DB 'S', 00H			; `string'
CONST	ENDS
;	COMDAT ?szStringVal@ATL@@3QBDB
CONST	SEGMENT
?szStringVal@ATL@@3QBDB DD FLAT:??_C@_01CPLAODJH@S?$AA@	; ATL::szStringVal
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?chEquals@ATL@@3DB
CONST	SEGMENT
?chEquals@ATL@@3DB DB 03dH				; ATL::chEquals
CONST	ENDS
;	COMDAT ?chQuote@ATL@@3DB
CONST	SEGMENT
?chQuote@ATL@@3DB DB 027H				; ATL::chQuote
CONST	ENDS
;	COMDAT ?chLeftBracket@ATL@@3DB
CONST	SEGMENT
?chLeftBracket@ATL@@3DB DB 07bH				; ATL::chLeftBracket
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?chRightBracket@ATL@@3DB
CONST	SEGMENT
?chRightBracket@ATL@@3DB DB 07dH			; ATL::chRightBracket
CONST	ENDS
;	COMDAT ?chDirSep@ATL@@3DB
CONST	SEGMENT
?chDirSep@ATL@@3DB DB 05cH				; ATL::chDirSep
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY *>::pmField
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB DW 04006H	; ATL::CVarTypeInfo<tagCY *>::VT
CONST	ENDS
;	COMDAT ??_C@_05PDIKPLII@AppID?$AA@
CONST	SEGMENT
??_C@_05PDIKPLII@AppID?$AA@ DB 'AppID', 00H		; `string'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB DW 06H		; ATL::CVarTypeInfo<tagCY>::VT
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB DW 04009H	; ATL::CVarTypeInfo<IDispatch * *>::VT
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT
_IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ??_C@_05GIBEAPNE@CLSID?$AA@
CONST	SEGMENT
??_C@_05GIBEAPNE@CLSID?$AA@ DB 'CLSID', 00H		; `string'
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch *>::pmField
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB DW 09H	; ATL::CVarTypeInfo<IDispatch *>::VT
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT __GUID_0000010c_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_0000010c_0000_0000_c000_000000000046 DD 010cH
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB DW 0400dH	; ATL::CVarTypeInfo<IUnknown * *>::VT
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown *>::pmField
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB DW 0dH	; ATL::CVarTypeInfo<IUnknown *>::VT
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t * *>::pmField
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB DW 04008H		; ATL::CVarTypeInfo<wchar_t * *>::VT
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_W@ATL@@2GB DW 08H			; ATL::CVarTypeInfo<wchar_t *>::VT
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT __GUID_0002e012_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_0002e012_0000_0000_c000_000000000046 DD 02e012H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB DW 0400cH	; ATL::CVarTypeInfo<tagVARIANT *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ DD 08H ; ATL::CVarTypeInfo<double *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAN@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAN@ATL@@2GB DW 04005H		; ATL::CVarTypeInfo<double *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ DD 08H ; ATL::CVarTypeInfo<double>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@N@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@N@ATL@@2GB DW 05H			; ATL::CVarTypeInfo<double>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ DD 08H ; ATL::CVarTypeInfo<float *>::pmField
CONST	ENDS
;	COMDAT __GUID_00020400_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020400_0000_0000_c000_000000000046 DD 020400H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAM@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAM@ATL@@2GB DW 04004H		; ATL::CVarTypeInfo<float *>::VT
CONST	ENDS
;	COMDAT __GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
CONST	SEGMENT
__GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851 DD 0a6bc3ac0H
	DW	0dbaaH
	DW	011ceH
	DB	09dH
	DB	0e3H
	DB	00H
	DB	0aaH
	DB	00H
	DB	04bH
	DB	0b8H
	DB	051H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ DD 08H ; ATL::CVarTypeInfo<float>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@M@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@M@ATL@@2GB DW 04H			; ATL::CVarTypeInfo<float>::VT
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000000_0000_0000_c000_000000000046 DD 00H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_K@ATL@@2GB DW 04015H		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
CONST	ENDS
;	COMDAT ??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	SEGMENT
??_C@_07KJLOKDKB@TypeLib?$AA@ DB 'TypeLib', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KEKAJNJI@Software?$AA@
CONST	SEGMENT
??_C@_08KEKAJNJI@Software?$AA@ DB 'Software', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDHFNJBJ@SYSTEM?$AA@
CONST	SEGMENT
??_C@_06FDHFNJBJ@SYSTEM?$AA@ DB 'SYSTEM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LOPHEHKG@SECURITY?$AA@
CONST	SEGMENT
??_C@_08LOPHEHKG@SECURITY?$AA@ DB 'SECURITY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03DDIMFGBA@SAM?$AA@
CONST	SEGMENT
??_C@_03DDIMFGBA@SAM?$AA@ DB 'SAM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IHBFOLAC@Mime?$AA@
CONST	SEGMENT
??_C@_04IHBFOLAC@Mime?$AA@ DB 'Mime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPIOJEA@Hardware?$AA@
CONST	SEGMENT
??_C@_08PPIOJEA@Hardware?$AA@ DB 'Hardware', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JKPGEJCH@Interface?$AA@
CONST	SEGMENT
??_C@_09JKPGEJCH@Interface?$AA@ DB 'Interface', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PICKODJL@FileType?$AA@
CONST	SEGMENT
??_C@_08PICKODJL@FileType?$AA@ DB 'FileType', 00H	; `string'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64>::pmField
CONST	ENDS
;	COMDAT ??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
CONST	SEGMENT
??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@ DB 'Component Categories', 00H ; `string'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_K@ATL@@2GB DW 015H			; ATL::CVarTypeInfo<unsigned __int64>::VT
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_J@ATL@@2GB DW 04014H		; ATL::CVarTypeInfo<__int64 *>::VT
CONST	ENDS
;	COMDAT ___pobjMapEntryLast
ATL$__z	SEGMENT
___pobjMapEntryLast DD 00H
ATL$__z	ENDS
;	COMDAT ___pobjMapEntryFirst
ATL$__a	SEGMENT
___pobjMapEntryFirst DD 00H
ATL$__a	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_J@ATL@@2GB DW 014H			; ATL::CVarTypeInfo<__int64>::VT
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long *>::pmField
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??1CComBSTR@ATL@@QAE@XZ				; ATL::CComBSTR::~CComBSTR
PUBLIC	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
PUBLIC	??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?frontSurface@ImageBuffer@@QAEPAUIDirectDrawSurface7@@XZ ; ImageBuffer::frontSurface
PUBLIC	?targetXres@ImageBuffer@@QAEHXZ			; ImageBuffer::targetXres
PUBLIC	?targetYres@ImageBuffer@@QAEHXZ			; ImageBuffer::targetYres
PUBLIC	?targetStride@ImageBuffer@@QAEHXZ		; ImageBuffer::targetStride
PUBLIC	?PixelSize@ImageBuffer@@QAEHXZ			; ImageBuffer::PixelSize
PUBLIC	?IsHardware@DisplayDevice@@QAEHXZ		; DisplayDevice::IsHardware
PUBLIC	?GetDefaultRC@DisplayDevice@@QAEPAVDXContext@@XZ ; DisplayDevice::GetDefaultRC
PUBLIC	?GetFlags@C_Base@@QAEJXZ			; C_Base::GetFlags
PUBLIC	?GetClient@C_Base@@QAEFXZ			; C_Base::GetClient
PUBLIC	?GetX@C_Base@@QAEJXZ				; C_Base::GetX
PUBLIC	?GetY@C_Base@@QAEJXZ				; C_Base::GetY
PUBLIC	?GetCallingControl@C_PopupMgr@@QAEPAVC_Base@@XZ	; C_PopupMgr::GetCallingControl
PUBLIC	??1C_Window@@QAE@XZ				; C_Window::~C_Window
PUBLIC	?SetCritical@C_Window@@QAEXPAUF4CSECTIONHANDLE@@@Z ; C_Window::SetCritical
PUBLIC	?GetDepth@C_Window@@QAEFXZ			; C_Window::GetDepth
PUBLIC	?GetDragH@C_Window@@QAEFXZ			; C_Window::GetDragH
PUBLIC	?GetCursorID@C_Window@@QAEJXZ			; C_Window::GetCursorID
PUBLIC	?GetFlags@C_Window@@QAEJXZ			; C_Window::GetFlags
PUBLIC	?SetHandler@C_Window@@QAEXPAVC_Handler@@@Z	; C_Window::SetHandler
PUBLIC	?GetOwner@C_Window@@QAEPAVC_Base@@XZ		; C_Window::GetOwner
PUBLIC	?GetID@C_Window@@QAEJXZ				; C_Window::GetID
PUBLIC	?SetSection@C_Window@@QAEXJ@Z			; C_Window::SetSection
PUBLIC	?GetX@C_Window@@QAEFXZ				; C_Window::GetX
PUBLIC	?GetY@C_Window@@QAEFXZ				; C_Window::GetY
PUBLIC	?GetW@C_Window@@QAEFXZ				; C_Window::GetW
PUBLIC	?GetH@C_Window@@QAEFXZ				; C_Window::GetH
PUBLIC	?GetType@C_Window@@QAEFXZ			; C_Window::GetType
PUBLIC	?GetSection@C_Window@@QAEJXZ			; C_Window::GetSection
PUBLIC	?GetGroup@C_Window@@QAEJXZ			; C_Window::GetGroup
PUBLIC	?IsMenu@C_Window@@QAEJXZ			; C_Window::IsMenu
PUBLIC	?GetSurface@C_Window@@QAEPAVImageBuffer@@XZ	; C_Window::GetSurface
PUBLIC	??_GC_Window@@QAEPAXI@Z				; C_Window::`scalar deleting destructor'
PUBLIC	?PostTimerMessage@C_Handler@@AAEXXZ		; C_Handler::PostTimerMessage
PUBLIC	?DoControlLoop@C_Handler@@AAEXXZ		; C_Handler::DoControlLoop
PUBLIC	?TimerLoop@C_Handler@@CGIPAX@Z			; C_Handler::TimerLoop
PUBLIC	?OutputLoop@C_Handler@@CGIPAX@Z			; C_Handler::OutputLoop
PUBLIC	?ControlLoop@C_Handler@@CGIPAX@Z		; C_Handler::ControlLoop
PUBLIC	?DoOutputLoop@C_Handler@@AAEXXZ			; C_Handler::DoOutputLoop
PUBLIC	?OldInputMessage@C_Handler@@AAEHXZ		; C_Handler::OldInputMessage
PUBLIC	?HelpOff@C_Handler@@AAEXXZ			; C_Handler::HelpOff
PUBLIC	?CheckHelpText@C_Handler@@AAEXPAVSCREEN@@@Z	; C_Handler::CheckHelpText
PUBLIC	?Fill@C_Handler@@AAEXPAVSCREEN@@KJJJJ@Z		; C_Handler::Fill
PUBLIC	?Fill@C_Handler@@AAEXPAVSCREEN@@KPAUUI95_RECT@@@Z ; C_Handler::Fill
PUBLIC	??0C_Handler@@QAE@XZ				; C_Handler::C_Handler
PUBLIC	??1C_Handler@@QAE@XZ				; C_Handler::~C_Handler
PUBLIC	?EnterCritical@C_Handler@@QAEXXZ		; C_Handler::EnterCritical
PUBLIC	?LeaveCritical@C_Handler@@QAEXXZ		; C_Handler::LeaveCritical
PUBLIC	?Setup@C_Handler@@QAEXPAUHWND__@@PAVImageBuffer@@1@Z ; C_Handler::Setup
PUBLIC	?AddWindow@C_Handler@@QAEHPAVC_Window@@J@Z	; C_Handler::AddWindow
PUBLIC	?StartOutputThread@C_Handler@@QAEXXZ		; C_Handler::StartOutputThread
PUBLIC	?EndOutputThread@C_Handler@@QAEXXZ		; C_Handler::EndOutputThread
PUBLIC	?SuspendOutput@C_Handler@@QAEXXZ		; C_Handler::SuspendOutput
PUBLIC	?ResumeOutput@C_Handler@@QAEXXZ			; C_Handler::ResumeOutput
PUBLIC	?StartControlThread@C_Handler@@QAEXJ@Z		; C_Handler::StartControlThread
PUBLIC	?EndControlThread@C_Handler@@QAEXXZ		; C_Handler::EndControlThread
PUBLIC	?SuspendControl@C_Handler@@QAEXXZ		; C_Handler::SuspendControl
PUBLIC	?ResumeControl@C_Handler@@QAEXXZ		; C_Handler::ResumeControl
PUBLIC	?StartTimerThread@C_Handler@@QAEXJ@Z		; C_Handler::StartTimerThread
PUBLIC	?EndTimerThread@C_Handler@@QAEXXZ		; C_Handler::EndTimerThread
PUBLIC	?SuspendTimer@C_Handler@@QAEXXZ			; C_Handler::SuspendTimer
PUBLIC	?ResumeTimer@C_Handler@@QAEXXZ			; C_Handler::ResumeTimer
PUBLIC	?AddUserCallback@C_Handler@@QAEHP6AXXZ@Z	; C_Handler::AddUserCallback
PUBLIC	?RemoveUserCallback@C_Handler@@QAEHP6AXXZ@Z	; C_Handler::RemoveUserCallback
PUBLIC	?ProcessUserCallbacks@C_Handler@@QAEXXZ		; C_Handler::ProcessUserCallbacks
PUBLIC	?ShowWindow@C_Handler@@QAEHPAVC_Window@@@Z	; C_Handler::ShowWindow
PUBLIC	?HideWindow@C_Handler@@QAEHPAVC_Window@@@Z	; C_Handler::HideWindow
PUBLIC	?RemoveWindow@C_Handler@@QAEHPAVC_Window@@@Z	; C_Handler::RemoveWindow
PUBLIC	?SetBehindWindow@C_Handler@@QAEXPAVC_Window@@@Z	; C_Handler::SetBehindWindow
PUBLIC	?Cleanup@C_Handler@@QAEXXZ			; C_Handler::Cleanup
PUBLIC	?ReleaseControl@C_Handler@@QAEXPAVC_Base@@@Z	; C_Handler::ReleaseControl
PUBLIC	?DisableSection@C_Handler@@QAEXJ@Z		; C_Handler::DisableSection
PUBLIC	?EnableGroup@C_Handler@@QAEXJ@Z			; C_Handler::EnableGroup
PUBLIC	?DisableGroup@C_Handler@@QAEXJ@Z		; C_Handler::DisableGroup
PUBLIC	?EnableWindowGroup@C_Handler@@QAEXJ@Z		; C_Handler::EnableWindowGroup
PUBLIC	?DisableWindowGroup@C_Handler@@QAEXJ@Z		; C_Handler::DisableWindowGroup
PUBLIC	?CheckHotKeys@C_Handler@@QAEHEEEJ@Z		; C_Handler::CheckHotKeys
PUBLIC	?GetW@C_Handler@@QAEJXZ				; C_Handler::GetW
PUBLIC	?GetH@C_Handler@@QAEJXZ				; C_Handler::GetH
PUBLIC	?WindowToFront@C_Handler@@QAEXPAVC_Window@@@Z	; C_Handler::WindowToFront
PUBLIC	?EventHandler@C_Handler@@QAEJPAUHWND__@@IIJ@Z	; C_Handler::EventHandler
PUBLIC	?SetUpdateRect@C_Handler@@QAEXPAUUI95_RECT@@@Z	; C_Handler::SetUpdateRect
PUBLIC	?ClearHiddenRects@C_Handler@@QAEXPAVWHLIST@@@Z	; C_Handler::ClearHiddenRects
PUBLIC	?CheckDrawThrough@C_Handler@@QAEXXZ		; C_Handler::CheckDrawThrough
PUBLIC	?ClearAllHiddenRects@C_Handler@@QAEXXZ		; C_Handler::ClearAllHiddenRects
PUBLIC	?ClipRect@C_Handler@@QAEHPAUUI95_RECT@@00@Z	; C_Handler::ClipRect
PUBLIC	?RefreshAll@C_Handler@@QAEXPAUUI95_RECT@@@Z	; C_Handler::RefreshAll
PUBLIC	?Update@C_Handler@@QAEXXZ			; C_Handler::Update
PUBLIC	?CopyToPrimary@C_Handler@@QAEXXZ		; C_Handler::CopyToPrimary
PUBLIC	?UpdateTimerControls@C_Handler@@QAEXXZ		; C_Handler::UpdateTimerControls
PUBLIC	?CheckTranslucentWindows@C_Handler@@QAEXXZ	; C_Handler::CheckTranslucentWindows
PUBLIC	?PostUpdate@C_Handler@@QAEXXZ			; C_Handler::PostUpdate
PUBLIC	?SendUpdate@C_Handler@@QAEXXZ			; C_Handler::SendUpdate
PUBLIC	?GetWindowFlags@C_Handler@@QAEJJ@Z		; C_Handler::GetWindowFlags
PUBLIC	?GetWindow@C_Handler@@QAEPAVC_Window@@FF@Z	; C_Handler::GetWindow
PUBLIC	?FindWindowA@C_Handler@@QAEPAVC_Window@@J@Z	; C_Handler::FindWindowA
PUBLIC	?_GetFirstWindow@C_Handler@@QAEPAVC_Window@@XZ	; C_Handler::_GetFirstWindow
PUBLIC	?_GetNextWindow@C_Handler@@QAEPAVC_Window@@PAV2@@Z ; C_Handler::_GetNextWindow
PUBLIC	?BlitWindowNow@C_Handler@@QAEXPAVC_Window@@@Z	; C_Handler::BlitWindowNow
PUBLIC	?Lock@C_Handler@@QAEPAXXZ			; C_Handler::Lock
PUBLIC	?Unlock@C_Handler@@QAEXXZ			; C_Handler::Unlock
PUBLIC	?RemovingControl@C_Handler@@QAEXPAVC_Base@@@Z	; C_Handler::RemovingControl
PUBLIC	?DropControl@C_Handler@@QAEXXZ			; C_Handler::DropControl
PUBLIC	?StartDrag@C_Handler@@QAEXXZ			; C_Handler::StartDrag
PUBLIC	?GetDragX@C_Handler@@QAEJG@Z			; C_Handler::GetDragX
PUBLIC	?GetDragY@C_Handler@@QAEJG@Z			; C_Handler::GetDragY
PUBLIC	?Dragging@C_Handler@@QAEHXZ			; C_Handler::Dragging
PUBLIC	?GrabItem@C_Handler@@QAEHGGPAVC_Window@@J@Z	; C_Handler::GrabItem
PUBLIC	?DragItem@C_Handler@@QAEHGGPAVC_Window@@@Z	; C_Handler::DragItem
PUBLIC	?DropItem@C_Handler@@QAEHGGPAVC_Window@@@Z	; C_Handler::DropItem
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_C@_0CC@JFLFHALF@Can?8t?5create?5back?5surface?5for?5UI@ ; `string'
PUBLIC	??_C@_0M@HPPDMJIA@UI_Critical?$AA@		; `string'
PUBLIC	??_C@_0BF@JCOLHHNI@Awaken?5Output?5Thread?$AA@	; `string'
PUBLIC	??_C@_0BG@IFALFLLC@Awaken?5Control?5Thread?$AA@	; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__SetEvent@4:PROC
EXTRN	__imp__WaitForSingleObject@8:PROC
EXTRN	__imp__CreateEventA@16:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	__imp__SuspendThread@4:PROC
EXTRN	__imp__ResumeThread@4:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	__imp__GetMessageTime@0:PROC
EXTRN	__imp__PostMessageA@16:PROC
EXTRN	__imp__GetDoubleClickTime@0:PROC
EXTRN	__imp__GetKeyState@4:PROC
EXTRN	__imp__GetAsyncKeyState@4:PROC
EXTRN	__imp__GetSystemMetrics@4:PROC
EXTRN	__imp__GetUpdateRect@12:PROC
EXTRN	__imp__InvalidateRect@12:PROC
EXTRN	__imp__ValidateRect@8:PROC
EXTRN	__imp__GetClientRect@8:PROC
EXTRN	__imp__SetCursor@4:PROC
EXTRN	__imp__ClientToScreen@8:PROC
EXTRN	__imp__ScreenToClient@8:PROC
EXTRN	__imp__SetRect@20:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__imp__SysFreeString@4:PROC
EXTRN	__beginthreadex:PROC
EXTRN	__endthreadex:PROC
EXTRN	__controlfp:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?TestCooperativeLevel@DXContext@@QAEKXZ:PROC	; DXContext::TestCooperativeLevel
EXTRN	??0ImageBuffer@@QAE@XZ:PROC			; ImageBuffer::ImageBuffer
EXTRN	?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z:PROC ; ImageBuffer::Setup
EXTRN	?Cleanup@ImageBuffer@@QAEXXZ:PROC		; ImageBuffer::Cleanup
EXTRN	?UpdateFrontWindowRect@ImageBuffer@@QAEXPAUtagRECT@@@Z:PROC ; ImageBuffer::UpdateFrontWindowRect
EXTRN	?RestoreAll@ImageBuffer@@QAEXXZ:PROC		; ImageBuffer::RestoreAll
EXTRN	?Lock@ImageBuffer@@QAEPAX_N0@Z:PROC		; ImageBuffer::Lock
EXTRN	?Unlock@ImageBuffer@@QAEXXZ:PROC		; ImageBuffer::Unlock
EXTRN	?Compose@ImageBuffer@@QAEXPAV1@PAUtagRECT@@1@Z:PROC ; ImageBuffer::Compose
EXTRN	_F4CreateCriticalSection:PROC
EXTRN	_F4DestroyCriticalSection:PROC
EXTRN	_F4EnterCriticalSection:PROC
EXTRN	_F4LeaveCriticalSection:PROC
EXTRN	?UI95_RGB24Bit@@YAGK@Z:PROC			; UI95_RGB24Bit
EXTRN	?F4IsBadReadPtr@@YA_NPBXI@Z:PROC		; F4IsBadReadPtr
EXTRN	?Width@C_Fontmgr@@QAEJPAD@Z:PROC		; C_Fontmgr::Width
EXTRN	?Height@C_Fontmgr@@QAEJXZ:PROC			; C_Fontmgr::Height
EXTRN	?Draw@C_Fontmgr@@QAEXPAVSCREEN@@PADGJJ@Z:PROC	; C_Fontmgr::Draw
EXTRN	?Find@C_Font@@QAEPAVC_Fontmgr@@J@Z:PROC		; C_Font::Find
EXTRN	?GetString@C_String@@QAEPADJ@Z:PROC		; C_String::GetString
EXTRN	?OpenWindowMenu@C_PopupMgr@@QAEHPAVC_Window@@JJ@Z:PROC ; C_PopupMgr::OpenWindowMenu
EXTRN	?OpenMenu@C_PopupMgr@@QAEHJJJPAVC_Base@@@Z:PROC	; C_PopupMgr::OpenMenu
EXTRN	?AMenuOpened@C_PopupMgr@@QAEHXZ:PROC		; C_PopupMgr::AMenuOpened
EXTRN	?CloseMenu@C_PopupMgr@@QAEXXZ:PROC		; C_PopupMgr::CloseMenu
EXTRN	?DeactivateControl@C_Window@@QAEXXZ:PROC	; C_Window::DeactivateControl
EXTRN	?Activate@C_Window@@QAEXXZ:PROC			; C_Window::Activate
EXTRN	?Deactivate@C_Window@@QAEXXZ:PROC		; C_Window::Deactivate
EXTRN	?CheckKeyboard@C_Window@@QAEHEEEJ@Z:PROC	; C_Window::CheckKeyboard
EXTRN	?CheckHotKeys@C_Window@@QAEHEEEJ@Z:PROC		; C_Window::CheckHotKeys
EXTRN	?SetControl@C_Window@@QAEXJ@Z:PROC		; C_Window::SetControl
EXTRN	?Cleanup@C_Window@@QAEXXZ:PROC			; C_Window::Cleanup
EXTRN	?SetUpdateRect@C_Window@@QAEXJJJJJJ@Z:PROC	; C_Window::SetUpdateRect
EXTRN	?ClearUpdateRect@C_Window@@QAEXJJJJ@Z:PROC	; C_Window::ClearUpdateRect
EXTRN	?EnableGroup@C_Window@@QAEXJ@Z:PROC		; C_Window::EnableGroup
EXTRN	?DisableGroup@C_Window@@QAEXJ@Z:PROC		; C_Window::DisableGroup
EXTRN	?RefreshWindow@C_Window@@QAEXXZ:PROC		; C_Window::RefreshWindow
EXTRN	?DrawWindow@C_Window@@QAEXPAVSCREEN@@@Z:PROC	; C_Window::DrawWindow
EXTRN	?UpdateTimerControls@C_Window@@QAEHXZ:PROC	; C_Window::UpdateTimerControls
EXTRN	?DrawTimerControls@C_Window@@QAEXXZ:PROC	; C_Window::DrawTimerControls
EXTRN	?GetControl@C_Window@@QAEPAVC_Base@@PAJJJ@Z:PROC ; C_Window::GetControl
EXTRN	?MouseOver@C_Window@@QAEPAVC_Base@@JJPAV2@@Z:PROC ; C_Window::MouseOver
EXTRN	?Drag@C_Window@@QAEHPAUGRABBER@@GGPAV1@@Z:PROC	; C_Window::Drag
EXTRN	?Drop@C_Window@@QAEHPAUGRABBER@@GGPAV1@@Z:PROC	; C_Window::Drop
EXTRN	?ConstraintsCorrection@C_Window@@QAEXJJ@Z:PROC	; C_Window::ConstraintsCorrection
EXTRN	_MonoPrint:PROC
EXTRN	?RestoreAll@TextureBankClass@@SAXXZ:PROC	; TextureBankClass::RestoreAll
EXTRN	?RestoreAll@TextureDB@@QAEXXZ:PROC		; TextureDB::RestoreAll
EXTRN	?RestoreAll@FarTexDB@@QAEXXZ:PROC		; FarTexDB::RestoreAll
EXTRN	?SaveScreenShot@@YAXXZ:PROC			; SaveScreenShot
EXTRN	?Transmit@@YAXH@Z:PROC				; Transmit
EXTRN	?RGB8toRGB565@@YAGK@Z:PROC			; RGB8toRGB565
EXTRN	?RGB565toRGB8@@YAKG@Z:PROC			; RGB565toRGB8
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?FalconDisplay@@3VFalconDisplayConfiguration@@A:BYTE ; FalconDisplay
EXTRN	?gFontList@@3PAVC_Font@@A:DWORD			; gFontList
EXTRN	?gStringMgr@@3PAVC_String@@A:DWORD		; gStringMgr
EXTRN	?gPopupMgr@@3PAVC_PopupMgr@@A:DWORD		; gPopupMgr
EXTRN	?gCursors@@3PAPAUHICON__@@A:BYTE		; gCursors
EXTRN	?Key_Chart@@3PAUASCII_TABLE@@A:BYTE		; Key_Chart
EXTRN	?TheTerrTextures@@3VTextureDB@@A:BYTE		; TheTerrTextures
EXTRN	?TheFarTextures@@3VFarTexDB@@A:BYTE		; TheFarTextures
EXTRN	?g_bCheckBltStatusBeforeFlip@@3_NA:BYTE		; g_bCheckBltStatusBeforeFlip
EXTRN	?g_bHiResUI@@3_NA:BYTE				; g_bHiResUI
EXTRN	?gameCompressionRatio@@3HA:DWORD		; gameCompressionRatio
EXTRN	?g_nMaxUIRefresh@@3HA:DWORD			; g_nMaxUIRefresh
EXTRN	?gMainHandler@@3PAVC_Handler@@A:DWORD		; gMainHandler
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

_m_pMouseImage DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ?InTimer@?1??EventHandler@C_Handler@@QAEJPAUHWND__@@IIJ@Z@4HA
_BSS	SEGMENT
?InTimer@?1??EventHandler@C_Handler@@QAEJPAUHWND__@@IIJ@Z@4HA DD 01H DUP (?) ; `C_Handler::EventHandler'::`2'::InTimer
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IFALFLLC@Awaken?5Control?5Thread?$AA@
CONST	SEGMENT
??_C@_0BG@IFALFLLC@Awaken?5Control?5Thread?$AA@ DB 'Awaken Control Thread'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JCOLHHNI@Awaken?5Output?5Thread?$AA@
CONST	SEGMENT
??_C@_0BF@JCOLHHNI@Awaken?5Output?5Thread?$AA@ DB 'Awaken Output Thread', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HPPDMJIA@UI_Critical?$AA@
CONST	SEGMENT
??_C@_0M@HPPDMJIA@UI_Critical?$AA@ DB 'UI_Critical', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@JFLFHALF@Can?8t?5create?5back?5surface?5for?5UI@
CONST	SEGMENT
??_C@_0CC@JFLFHALF@Can?8t?5create?5back?5surface?5for?5UI@ DB 'Can''t cre'
	DB	'ate back surface for UI', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?Setup@C_Handler@@QAEXPAUHWND__@@PAVImageBuffer@@1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Setup@C_Handler@@QAEXPAUHWND__@@PAVImageBuffer@@1@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Setup@C_Handler@@QAEXPAUHWND__@@PAVImageBuffer@@1@Z$1
__ehfuncinfo$?Setup@C_Handler@@QAEXPAUHWND__@@PAVImageBuffer@@1@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Setup@C_Handler@@QAEXPAUHWND__@@PAVImageBuffer@@1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_relY$ = -16						; size = 4
_relX$ = -12						; size = 4
_retval$ = -8						; size = 4
_this$ = -4						; size = 4
_MouseX$ = 8						; size = 2
_MouseY$ = 12						; size = 2
_overme$ = 16						; size = 4
?DropItem@C_Handler@@QAEHGGPAVC_Window@@@Z PROC		; C_Handler::DropItem
; _this$ = ecx

; 1829 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1830 : 	long relX,relY; //!
; 1831 : 	BOOL retval=FALSE;

	mov	DWORD PTR _retval$[ebp], 0

; 1832 : 
; 1833 : 	relX = MouseX-overme->GetX();

	movzx	esi, WORD PTR _MouseX$[ebp]
	mov	ecx, DWORD PTR _overme$[ebp]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	cwde
	sub	esi, eax
	mov	DWORD PTR _relX$[ebp], esi

; 1834 : 	relY = MouseY-overme->GetY();

	movzx	esi, WORD PTR _MouseY$[ebp]
	mov	ecx, DWORD PTR _overme$[ebp]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	ecx, ax
	sub	esi, ecx
	mov	DWORD PTR _relY$[ebp], esi

; 1835 : 
; 1836 : 	if(Drag_.Control_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+232], 0
	je	SHORT $LN3@DropItem

; 1837 : 	{
; 1838 : 		retval=Drag_.Control_->Drop(&Drag_,MouseX,MouseY,overme);

	mov	eax, DWORD PTR _overme$[ebp]
	push	eax
	movzx	ecx, WORD PTR _MouseY$[ebp]
	push	ecx
	movzx	edx, WORD PTR _MouseX$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 204				; 000000ccH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+232]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+232]
	mov	eax, DWORD PTR [edx+228]
	call	eax
	mov	DWORD PTR _retval$[ebp], eax
	jmp	SHORT $LN2@DropItem
$LN3@DropItem:

; 1839 : 		//ShowCursor(TRUE);
; 1840 : 	}
; 1841 : 	else if(Drag_.Window_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+228], 0
	je	SHORT $LN2@DropItem

; 1842 : 	{
; 1843 : 		retval=Drag_.Window_->Drop(&Drag_,MouseX,MouseY,overme);

	mov	edx, DWORD PTR _overme$[ebp]
	push	edx
	movzx	eax, WORD PTR _MouseY$[ebp]
	push	eax
	movzx	ecx, WORD PTR _MouseX$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 204				; 000000ccH
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	call	?Drop@C_Window@@QAEHPAUGRABBER@@GGPAV1@@Z ; C_Window::Drop
	mov	DWORD PTR _retval$[ebp], eax
$LN2@DropItem:

; 1844 : 		//ShowCursor(TRUE);
; 1845 : 	}
; 1846 : 	Drag_.Control_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+232], 0

; 1847 : 	Drag_.Window_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+228], 0

; 1848 : 	Drag_.GrabType_=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+224], 0

; 1849 : 	return(retval);

	mov	eax, DWORD PTR _retval$[ebp]

; 1850 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?DropItem@C_Handler@@QAEHGGPAVC_Window@@@Z ENDP		; C_Handler::DropItem
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_MouseX$ = 8						; size = 2
_MouseY$ = 12						; size = 2
_overme$ = 16						; size = 4
?DragItem@C_Handler@@QAEHGGPAVC_Window@@@Z PROC		; C_Handler::DragItem
; _this$ = ecx

; 1817 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1818 : 	if(Drag_.GrabType_ != C_TYPE_LMOUSEDOWN)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+224], 51			; 00000033H
	je	SHORT $LN4@DragItem

; 1819 : 		return(FALSE);

	xor	eax, eax
	jmp	SHORT $LN5@DragItem
$LN4@DragItem:

; 1820 : 
; 1821 : 	if(Drag_.Control_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+232], 0
	je	SHORT $LN3@DragItem

; 1822 : 		return(Drag_.Control_->Drag(&Drag_,MouseX,MouseY,overme));

	mov	edx, DWORD PTR _overme$[ebp]
	push	edx
	movzx	eax, WORD PTR _MouseY$[ebp]
	push	eax
	movzx	ecx, WORD PTR _MouseX$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 204				; 000000ccH
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+232]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+232]
	mov	edx, DWORD PTR [eax+224]
	call	edx
	jmp	SHORT $LN5@DragItem
	jmp	SHORT $LN2@DragItem
$LN3@DragItem:

; 1823 : 	else if(Drag_.Window_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+228], 0
	je	SHORT $LN2@DragItem

; 1824 : 		return(Drag_.Window_->Drag(&Drag_,MouseX,MouseY,overme));

	mov	ecx, DWORD PTR _overme$[ebp]
	push	ecx
	movzx	edx, WORD PTR _MouseY$[ebp]
	push	edx
	movzx	eax, WORD PTR _MouseX$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+228]
	call	?Drag@C_Window@@QAEHPAUGRABBER@@GGPAV1@@Z ; C_Window::Drag
	jmp	SHORT $LN5@DragItem
$LN2@DragItem:

; 1825 : 	return(FALSE);

	xor	eax, eax
$LN5@DragItem:

; 1826 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?DragItem@C_Handler@@QAEHGGPAVC_Window@@@Z ENDP		; C_Handler::DragItem
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_MouseX$ = 8						; size = 2
_MouseY$ = 12						; size = 2
_overme$ = 16						; size = 4
_GrabType$ = 20						; size = 4
?GrabItem@C_Handler@@QAEHGGPAVC_Window@@J@Z PROC	; C_Handler::GrabItem
; _this$ = ecx

; 1752 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1753 : 	Grab_.Control_	= overme->GetControl(&Grab_.ID_,MouseX-overme->GetX(),MouseY-overme->GetY());

	movzx	esi, WORD PTR _MouseY$[ebp]
	mov	ecx, DWORD PTR _overme$[ebp]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	cwde
	sub	esi, eax
	push	esi
	movzx	esi, WORD PTR _MouseX$[ebp]
	mov	ecx, DWORD PTR _overme$[ebp]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	ecx, ax
	sub	esi, ecx
	push	esi
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 172				; 000000acH
	push	edx
	mov	ecx, DWORD PTR _overme$[ebp]
	call	?GetControl@C_Window@@QAEPAVC_Base@@PAJJJ@Z ; C_Window::GetControl
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+200], eax

; 1754 : 	Grab_.StartX_	= MouseX;

	movzx	edx, WORD PTR _MouseX$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+176], edx

; 1755 : 	Grab_.StartY_	= MouseY;

	movzx	ecx, WORD PTR _MouseY$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+180], ecx

; 1756 : 	Grab_.GrabType_	= GrabType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _GrabType$[ebp]
	mov	DWORD PTR [eax+192], ecx

; 1757 : 
; 1758 : 	if(Grab_.Control_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+200], 0
	je	SHORT $LN5@GrabItem

; 1759 : 	{
; 1760 : 		Grab_.Window_=overme;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _overme$[ebp]
	mov	DWORD PTR [eax+196], ecx

; 1761 : 		Grab_.Control_->GetItemXY(Grab_.ID_,&Grab_.ItemX_,&Grab_.ItemY_);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 188				; 000000bcH
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 184				; 000000b8H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+172]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+200]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+200]
	mov	edx, DWORD PTR [eax+220]
	call	edx

; 1762 : 	}
; 1763 : 	else

	jmp	$LN4@GrabItem
$LN5@GrabItem:

; 1764 : 	{
; 1765 : 		if(overme->GetFlags() & C_BIT_DRAGABLE)

	mov	ecx, DWORD PTR _overme$[ebp]
	call	?GetFlags@C_Window@@QAEJXZ		; C_Window::GetFlags
	and	eax, 4096				; 00001000H
	je	$LN3@GrabItem

; 1766 : 		{
; 1767 : 			if(MouseX < overme->GetX() || MouseY < overme->GetY() || MouseX > (overme->GetX()+overme->GetW()) || MouseY > (overme->GetY()+overme->GetDragH()))

	movzx	esi, WORD PTR _MouseX$[ebp]
	mov	ecx, DWORD PTR _overme$[ebp]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	cwde
	cmp	esi, eax
	jl	SHORT $LN1@GrabItem
	movzx	esi, WORD PTR _MouseY$[ebp]
	mov	ecx, DWORD PTR _overme$[ebp]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	ecx, ax
	cmp	esi, ecx
	jl	SHORT $LN1@GrabItem
	movzx	esi, WORD PTR _MouseX$[ebp]
	mov	ecx, DWORD PTR _overme$[ebp]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	edi, ax
	mov	ecx, DWORD PTR _overme$[ebp]
	call	?GetW@C_Window@@QAEFXZ			; C_Window::GetW
	movsx	edx, ax
	add	edi, edx
	cmp	esi, edi
	jg	SHORT $LN1@GrabItem
	movzx	esi, WORD PTR _MouseY$[ebp]
	mov	ecx, DWORD PTR _overme$[ebp]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	edi, ax
	mov	ecx, DWORD PTR _overme$[ebp]
	call	?GetDragH@C_Window@@QAEFXZ		; C_Window::GetDragH
	cwde
	add	edi, eax
	cmp	esi, edi
	jle	SHORT $LN2@GrabItem
$LN1@GrabItem:

; 1768 : 			{
; 1769 : 				Grab_.Window_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+196], 0

; 1770 : 				return(FALSE);

	xor	eax, eax
	jmp	SHORT $LN6@GrabItem
$LN2@GrabItem:

; 1771 : 			}
; 1772 : 			Grab_.Window_=overme;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _overme$[ebp]
	mov	DWORD PTR [edx+196], eax

; 1773 : 			Grab_.ItemX_=overme->GetX();

	mov	ecx, DWORD PTR _overme$[ebp]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	ecx, ax
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+184], ecx

; 1774 : 			Grab_.ItemY_=overme->GetY();

	mov	ecx, DWORD PTR _overme$[ebp]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	cwde
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+188], eax
$LN3@GrabItem:

; 1775 : 		}
; 1776 : 		return(FALSE);

	xor	eax, eax
	jmp	SHORT $LN6@GrabItem
$LN4@GrabItem:

; 1777 : 	}
; 1778 : 	return(TRUE);

	mov	eax, 1
$LN6@GrabItem:

; 1779 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?GrabItem@C_Handler@@QAEHGGPAVC_Window@@J@Z ENDP	; C_Handler::GrabItem
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.h
;	COMDAT ?Dragging@C_Handler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Dragging@C_Handler@@QAEHXZ PROC			; C_Handler::Dragging, COMDAT
; _this$ = ecx

; 256  : 		BOOL Dragging(void) { if(Drag_.Control_ != NULL || Drag_.Window_ != NULL) return(TRUE); return(FALSE);}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+232], 0
	jne	SHORT $LN1@Dragging
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+228], 0
	je	SHORT $LN2@Dragging
$LN1@Dragging:
	mov	eax, 1
	jmp	SHORT $LN3@Dragging
$LN2@Dragging:
	xor	eax, eax
$LN3@Dragging:
	mov	esp, ebp
	pop	ebp
	ret	0
?Dragging@C_Handler@@QAEHXZ ENDP			; C_Handler::Dragging
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_retval$ = -8						; size = 4
_this$ = -4						; size = 4
_MouseY$ = 8						; size = 2
?GetDragY@C_Handler@@QAEJG@Z PROC			; C_Handler::GetDragY
; _this$ = ecx

; 1743 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1744 : 	long retval = Drag_.ItemY_ + MouseY - Drag_.StartY_;

	movzx	eax, WORD PTR _MouseY$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+220]
	add	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	sub	edx, DWORD PTR [eax+212]
	mov	DWORD PTR _retval$[ebp], edx

; 1745 : 	
; 1746 : 	return(retval);

	mov	eax, DWORD PTR _retval$[ebp]

; 1747 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetDragY@C_Handler@@QAEJG@Z ENDP			; C_Handler::GetDragY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_retval$ = -8						; size = 4
_this$ = -4						; size = 4
_MouseX$ = 8						; size = 2
?GetDragX@C_Handler@@QAEJG@Z PROC			; C_Handler::GetDragX
; _this$ = ecx

; 1736 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1737 : 	long retval = Drag_.ItemX_ + MouseX - Drag_.StartX_;

	movzx	eax, WORD PTR _MouseX$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+216]
	add	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	sub	edx, DWORD PTR [eax+208]
	mov	DWORD PTR _retval$[ebp], edx

; 1738 : 	
; 1739 : 	return(retval);

	mov	eax, DWORD PTR _retval$[ebp]

; 1740 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetDragX@C_Handler@@QAEJG@Z ENDP			; C_Handler::GetDragX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?StartDrag@C_Handler@@QAEXXZ PROC			; C_Handler::StartDrag
; _this$ = ecx

; 1794 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1795 : 	if(Grab_.GrabType_ != C_TYPE_LMOUSEDOWN)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+192], 51			; 00000033H
	je	SHORT $LN6@StartDrag

; 1796 : 		return;

	jmp	$LN7@StartDrag
$LN6@StartDrag:

; 1797 : 
; 1798 : 	if(Grab_.Control_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+200], 0
	je	SHORT $LN5@StartDrag

; 1799 : 	{
; 1800 : 		if(Grab_.Control_->Dragable(Grab_.ID_))

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+172]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+200]
	mov	eax, DWORD PTR [edx+216]
	call	eax
	test	eax, eax
	je	SHORT $LN4@StartDrag

; 1801 : 		{
; 1802 : 			Drag_=Grab_;

	mov	esi, DWORD PTR _this$[ebp]
	add	esi, 172				; 000000acH
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 204				; 000000ccH
	mov	ecx, 8
	rep movsd
$LN4@StartDrag:

; 1803 : 			//ShowCursor(FALSE);
; 1804 : 		}
; 1805 : 	}

	jmp	SHORT $LN7@StartDrag
$LN5@StartDrag:

; 1806 : 	else if(Grab_.Window_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+196], 0
	je	SHORT $LN7@StartDrag

; 1807 : 	{
; 1808 : 		if(Grab_.Window_->GetFlags() & C_BIT_DRAGABLE)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+196]
	call	?GetFlags@C_Window@@QAEJXZ		; C_Window::GetFlags
	and	eax, 4096				; 00001000H
	je	SHORT $LN7@StartDrag

; 1809 : 		{
; 1810 : 			Drag_=Grab_;

	mov	esi, DWORD PTR _this$[ebp]
	add	esi, 172				; 000000acH
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 204				; 000000ccH
	mov	ecx, 8
	rep movsd
$LN7@StartDrag:

; 1811 : 			//ShowCursor(FALSE);
; 1812 : 		}
; 1813 : 	}
; 1814 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?StartDrag@C_Handler@@QAEXXZ ENDP			; C_Handler::StartDrag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DropControl@C_Handler@@QAEXXZ PROC			; C_Handler::DropControl
; _this$ = ecx

; 1900 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1901 : 	Grab_.Control_=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+200], 0

; 1902 : 	Grab_.Window_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+196], 0

; 1903 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DropControl@C_Handler@@QAEXXZ ENDP			; C_Handler::DropControl
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_control$ = 8						; size = 4
?RemovingControl@C_Handler@@QAEXPAVC_Base@@@Z PROC	; C_Handler::RemovingControl
; _this$ = ecx

; 1906 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1907 : 	// Warn chandler that a control it might be referncing is being deleted
; 1908 : 	if(MouseControl_ == control)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	cmp	ecx, DWORD PTR _control$[ebp]
	jne	SHORT $LN6@RemovingCo

; 1909 : 	{
; 1910 : 		MouseControl_->Refresh();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+260]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+260]
	mov	eax, DWORD PTR [edx+160]
	call	eax

; 1911 : 		MouseControl_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], 0
$LN6@RemovingCo:

; 1912 : 	}
; 1913 : 	if(OverControl_ == control)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	cmp	eax, DWORD PTR _control$[ebp]
	jne	SHORT $LN5@RemovingCo

; 1914 : 		OverControl_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+128], 0
$LN5@RemovingCo:

; 1915 : 	if(Grab_.Control_ == control)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+200]
	cmp	eax, DWORD PTR _control$[ebp]
	jne	SHORT $LN4@RemovingCo

; 1916 : 	{
; 1917 : 		Grab_.Control_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+200], 0

; 1918 : 		Grab_.Window_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+196], 0
$LN4@RemovingCo:

; 1919 : 	}
; 1920 : 	if(Drag_.Control_ == control)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+232]
	cmp	ecx, DWORD PTR _control$[ebp]
	jne	SHORT $LN3@RemovingCo

; 1921 : 	{
; 1922 : 		Drag_.Control_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+232], 0

; 1923 : 		Drag_.Window_=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+228], 0
$LN3@RemovingCo:

; 1924 : 	}
; 1925 : 	if(gPopupMgr->AMenuOpened())

	mov	ecx, DWORD PTR ?gPopupMgr@@3PAVC_PopupMgr@@A ; gPopupMgr
	call	?AMenuOpened@C_PopupMgr@@QAEHXZ		; C_PopupMgr::AMenuOpened
	test	eax, eax
	je	SHORT $LN7@RemovingCo

; 1926 : 	{
; 1927 : 		if(gPopupMgr->GetCallingControl() && gPopupMgr->GetCallingControl() ==  control)

	mov	ecx, DWORD PTR ?gPopupMgr@@3PAVC_PopupMgr@@A ; gPopupMgr
	call	?GetCallingControl@C_PopupMgr@@QAEPAVC_Base@@XZ ; C_PopupMgr::GetCallingControl
	test	eax, eax
	je	SHORT $LN7@RemovingCo
	mov	ecx, DWORD PTR ?gPopupMgr@@3PAVC_PopupMgr@@A ; gPopupMgr
	call	?GetCallingControl@C_PopupMgr@@QAEPAVC_Base@@XZ ; C_PopupMgr::GetCallingControl
	cmp	eax, DWORD PTR _control$[ebp]
	jne	SHORT $LN7@RemovingCo

; 1928 : 			gPopupMgr->CloseMenu();

	mov	ecx, DWORD PTR ?gPopupMgr@@3PAVC_PopupMgr@@A ; gPopupMgr
	call	?CloseMenu@C_PopupMgr@@QAEXXZ		; C_PopupMgr::CloseMenu
$LN7@RemovingCo:

; 1929 : 	}
; 1930 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?RemovingControl@C_Handler@@QAEXPAVC_Base@@@Z ENDP	; C_Handler::RemovingControl
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Unlock@C_Handler@@QAEXXZ PROC				; C_Handler::Unlock
; _this$ = ecx

; 347  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 348  : 	if(Front_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN2@Unlock

; 349  : 	{
; 350  : 		Front_->Unlock();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	call	?Unlock@ImageBuffer@@QAEXXZ		; ImageBuffer::Unlock

; 351  : 		surface_.mem=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 352  : 		surface_.width=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+24], ax

; 353  : 		surface_.height=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+26], dx

; 354  : 		//XX
; 355  : 		surface_.bpp=0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+28], 0
$LN2@Unlock:

; 356  : 	}
; 357  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Unlock@C_Handler@@QAEXXZ ENDP				; C_Handler::Unlock
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Lock@C_Handler@@QAEPAXXZ PROC				; C_Handler::Lock
; _this$ = ecx

; 329  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 330  : 	if(Front_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN1@Lock

; 331  : 	{
; 332  : 		surface_.mem	= (WORD *)Front_->Lock();

	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	call	?Lock@ImageBuffer@@QAEPAX_N0@Z		; ImageBuffer::Lock
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], eax

; 333  : 
; 334  : //		surface_.width	= (short)Front_->targetXres();	//!
; 335  : 		surface_.width	= (short)Front_->targetStride() / Front_->PixelSize();	// OW

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	?targetStride@ImageBuffer@@QAEHXZ	; ImageBuffer::targetStride
	movsx	esi, ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	call	?PixelSize@ImageBuffer@@QAEHXZ		; ImageBuffer::PixelSize
	mov	ecx, eax
	mov	eax, esi
	cdq
	idiv	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+24], ax

; 336  : 
; 337  : 		surface_.height	= (short)Front_->targetYres();	//!

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	?targetYres@ImageBuffer@@QAEHXZ		; ImageBuffer::targetYres
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+26], ax

; 338  : 		//XX
; 339  : 		surface_.bpp = Front_->PixelSize() << 3;//bytes->bits

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	call	?PixelSize@ImageBuffer@@QAEHXZ		; ImageBuffer::PixelSize
	shl	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+28], al

; 340  : 		surface_.owner = Front_;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+32], ecx
$LN1@Lock:

; 341  : 	}
; 342  : 
; 343  : 	return(surface_.mem);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]

; 344  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?Lock@C_Handler@@QAEPAXXZ ENDP				; C_Handler::Lock
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -40						; size = 4
_src$ = -36						; size = 16
_dest$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_win$ = 8						; size = 4
?BlitWindowNow@C_Handler@@QAEXPAVC_Window@@@Z PROC	; C_Handler::BlitWindowNow
; _this$ = ecx

; 1853 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1854 : 	RECT src,dest;
; 1855 : 
; 1856 : 	if(win == NULL)

	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN1@BlitWindow

; 1857 : 		return;

	jmp	$LN2@BlitWindow
$LN1@BlitWindow:

; 1858 : 
; 1859 : 	src.left=0;

	mov	DWORD PTR _src$[ebp], 0

; 1860 : 	src.top=0;

	mov	DWORD PTR _src$[ebp+4], 0

; 1861 : 	src.right=win->GetW();

	mov	ecx, DWORD PTR _win$[ebp]
	call	?GetW@C_Window@@QAEFXZ			; C_Window::GetW
	cwde
	mov	DWORD PTR _src$[ebp+8], eax

; 1862 : 	src.bottom=win->GetH();

	mov	ecx, DWORD PTR _win$[ebp]
	call	?GetH@C_Window@@QAEFXZ			; C_Window::GetH
	movsx	ecx, ax
	mov	DWORD PTR _src$[ebp+12], ecx

; 1863 : 
; 1864 : 	dest=src;

	mov	edx, DWORD PTR _src$[ebp]
	mov	DWORD PTR _dest$[ebp], edx
	mov	eax, DWORD PTR _src$[ebp+4]
	mov	DWORD PTR _dest$[ebp+4], eax
	mov	ecx, DWORD PTR _src$[ebp+8]
	mov	DWORD PTR _dest$[ebp+8], ecx
	mov	edx, DWORD PTR _src$[ebp+12]
	mov	DWORD PTR _dest$[ebp+12], edx

; 1865 : 	dest.left+=win->GetX();

	mov	ecx, DWORD PTR _win$[ebp]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	cwde
	add	eax, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _dest$[ebp], eax

; 1866 : 	dest.right+=win->GetX();

	mov	ecx, DWORD PTR _win$[ebp]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	ecx, ax
	add	ecx, DWORD PTR _dest$[ebp+8]
	mov	DWORD PTR _dest$[ebp+8], ecx

; 1867 : 	dest.top+=win->GetY();

	mov	ecx, DWORD PTR _win$[ebp]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	edx, ax
	add	edx, DWORD PTR _dest$[ebp+4]
	mov	DWORD PTR _dest$[ebp+4], edx

; 1868 : 	dest.bottom+=win->GetY();

	mov	ecx, DWORD PTR _win$[ebp]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	cwde
	add	eax, DWORD PTR _dest$[ebp+12]
	mov	DWORD PTR _dest$[ebp+12], eax

; 1869 : // ImageBuf should handle this...
; 1870 : //	dest.left+=PrimaryRect_.left;
; 1871 : //	dest.right+=PrimaryRect_.left;
; 1872 : //	dest.top+=PrimaryRect_.top;
; 1873 : //	dest.bottom+=PrimaryRect_.top;
; 1874 : 
; 1875 : 	Primary_->Compose( win->GetSurface(), &src, &dest ); 

	lea	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR _src$[ebp]
	push	edx
	mov	ecx, DWORD PTR _win$[ebp]
	call	?GetSurface@C_Window@@QAEPAVImageBuffer@@XZ ; C_Window::GetSurface
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?Compose@ImageBuffer@@QAEXPAV1@PAUtagRECT@@1@Z ; ImageBuffer::Compose
$LN2@BlitWindow:

; 1876 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?BlitWindowNow@C_Handler@@QAEXPAVC_Window@@@Z ENDP	; C_Handler::BlitWindowNow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_win$ = 8						; size = 4
?_GetNextWindow@C_Handler@@QAEPAVC_Window@@PAV2@@Z PROC	; C_Handler::_GetNextWindow
; _this$ = ecx

; 512  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 513  : 	WHLIST *cur;
; 514  : 
; 515  : 	EnterCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EnterCritical@C_Handler@@QAEXXZ	; C_Handler::EnterCritical

; 516  : 	cur=Root_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
$LN4@GetNextWin:

; 517  : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN3@GetNextWin

; 518  : 	{
; 519  : 		if(cur->win == win)

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _win$[ebp]
	jne	SHORT $LN2@GetNextWin

; 520  : 		{
; 521  : 			LeaveCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCritical@C_Handler@@QAEXXZ	; C_Handler::LeaveCritical

; 522  : 			if(cur->Next == NULL)

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN1@GetNextWin

; 523  : 				return(NULL);

	xor	eax, eax
	jmp	SHORT $LN5@GetNextWin
$LN1@GetNextWin:

; 524  : 			return(cur->Next->win);

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN5@GetNextWin
$LN2@GetNextWin:

; 525  : 		}
; 526  : 		cur=cur->Next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _cur$[ebp], edx

; 527  : 	}

	jmp	SHORT $LN4@GetNextWin
$LN3@GetNextWin:

; 528  : 	LeaveCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCritical@C_Handler@@QAEXXZ	; C_Handler::LeaveCritical

; 529  : 	return(NULL);

	xor	eax, eax
$LN5@GetNextWin:

; 530  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?_GetNextWindow@C_Handler@@QAEPAVC_Window@@PAV2@@Z ENDP	; C_Handler::_GetNextWindow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_GetFirstWindow@C_Handler@@QAEPAVC_Window@@XZ PROC	; C_Handler::_GetFirstWindow
; _this$ = ecx

; 503  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 504  : 	EnterCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EnterCritical@C_Handler@@QAEXXZ	; C_Handler::EnterCritical

; 505  : 	LeaveCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCritical@C_Handler@@QAEXXZ	; C_Handler::LeaveCritical

; 506  : 	if(Root_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@GetFirstWi

; 507  : 		return(Root_->win);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	jmp	SHORT $LN2@GetFirstWi
$LN1@GetFirstWi:

; 508  : 	return(NULL);

	xor	eax, eax
$LN2@GetFirstWi:

; 509  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?_GetFirstWindow@C_Handler@@QAEPAVC_Window@@XZ ENDP	; C_Handler::_GetFirstWindow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_ID$ = 8						; size = 4
?FindWindowA@C_Handler@@QAEPAVC_Window@@J@Z PROC	; C_Handler::FindWindowA
; _this$ = ecx

; 472  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 473  : 	if (F4IsBadReadPtr(this, sizeof(C_Handler))) // JB 010317 CTD

	push	3480					; 00000d98H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@FindWindow

; 474  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN5@FindWindow
$LN4@FindWindow:

; 475  : 
; 476  : 	WHLIST *cur;
; 477  : 
; 478  : 	cur=Root_;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _cur$[ebp], eax
$LN3@FindWindow:

; 479  : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN2@FindWindow

; 480  : 	{
; 481  : 		if(cur->win->GetID() == ID)

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetID@C_Window@@QAEJXZ			; C_Window::GetID
	cmp	eax, DWORD PTR _ID$[ebp]
	jne	SHORT $LN1@FindWindow

; 482  : 			return(cur->win);

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx]
	jmp	SHORT $LN5@FindWindow
$LN1@FindWindow:

; 483  : 		cur=cur->Next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _cur$[ebp], ecx

; 484  : 	}

	jmp	SHORT $LN3@FindWindow
$LN2@FindWindow:

; 485  : 	return(NULL);

	xor	eax, eax
$LN5@FindWindow:

; 486  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?FindWindowA@C_Handler@@QAEPAVC_Window@@J@Z ENDP	; C_Handler::FindWindowA
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_overme$ = -8						; size = 4
_cur$ = -4						; size = 4
_x$ = 8							; size = 2
_y$ = 12						; size = 2
?GetWindow@C_Handler@@QAEPAVC_Window@@FF@Z PROC		; C_Handler::GetWindow
; _this$ = ecx

; 1385 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1386 : 	WHLIST *cur;
; 1387 : 	C_Window *overme;
; 1388 : 
; 1389 : 	overme=NULL;

	mov	DWORD PTR _overme$[ebp], 0

; 1390 : 
; 1391 : 	cur=Root_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
$LN5@GetWindow:

; 1392 : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN4@GetWindow

; 1393 : 	{
; 1394 : 		if(cur->Flags & C_BIT_ENABLED)

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, 2048				; 00000800H
	je	$LN3@GetWindow

; 1395 : 		{
; 1396 : 			if(x >= cur->win->GetX() && y >= cur->win->GetY() &&
; 1397 : 			   x <= (cur->win->GetX()+cur->win->GetW()) &&
; 1398 : 			   y <= (cur->win->GetY()+cur->win->GetH()))

	movsx	esi, WORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	edx, ax
	cmp	esi, edx
	jl	SHORT $LN2@GetWindow
	movsx	esi, WORD PTR _y$[ebp]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	ecx, ax
	cmp	esi, ecx
	jl	SHORT $LN2@GetWindow
	movsx	esi, WORD PTR _x$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	edi, ax
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetW@C_Window@@QAEFXZ			; C_Window::GetW
	movsx	ecx, ax
	add	edi, ecx
	cmp	esi, edi
	jg	SHORT $LN2@GetWindow
	movsx	esi, WORD PTR _y$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	edi, ax
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetH@C_Window@@QAEFXZ			; C_Window::GetH
	movsx	ecx, ax
	add	edi, ecx
	cmp	esi, edi
	jg	SHORT $LN2@GetWindow

; 1399 : 			   overme=cur->win;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _overme$[ebp], eax
$LN2@GetWindow:

; 1400 : 
; 1401 : 			if(cur->win->GetType() == C_TYPE_EXCLUSIVE)

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetType@C_Window@@QAEFXZ		; C_Window::GetType
	movsx	edx, ax
	cmp	edx, 60					; 0000003cH
	jne	SHORT $LN3@GetWindow

; 1402 : 				overme=cur->win;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _overme$[ebp], ecx
$LN3@GetWindow:

; 1403 : 		}
; 1404 : 		cur=cur->Next;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _cur$[ebp], eax

; 1405 : 	}

	jmp	$LN5@GetWindow
$LN4@GetWindow:

; 1406 : 	return(overme);

	mov	eax, DWORD PTR _overme$[ebp]

; 1407 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?GetWindow@C_Handler@@QAEPAVC_Window@@FF@Z ENDP		; C_Handler::GetWindow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_ID$ = 8						; size = 4
?GetWindowFlags@C_Handler@@QAEJJ@Z PROC			; C_Handler::GetWindowFlags
; _this$ = ecx

; 489  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 490  : 	WHLIST *cur;
; 491  : 
; 492  : 	cur=Root_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
$LN3@GetWindowF:

; 493  : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN2@GetWindowF

; 494  : 	{
; 495  : 		if(cur->win->GetID() == ID)

	mov	edx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetID@C_Window@@QAEJXZ			; C_Window::GetID
	cmp	eax, DWORD PTR _ID$[ebp]
	jne	SHORT $LN1@GetWindowF

; 496  : 			return(cur->Flags);

	mov	eax, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [eax+4]
	jmp	SHORT $LN4@GetWindowF
$LN1@GetWindowF:

; 497  : 		cur=cur->Next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _cur$[ebp], edx

; 498  : 	}

	jmp	SHORT $LN3@GetWindowF
$LN2@GetWindowF:

; 499  : 	return(0);

	xor	eax, eax
$LN4@GetWindowF:

; 500  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetWindowFlags@C_Handler@@QAEJJ@Z ENDP			; C_Handler::GetWindowFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SendUpdate@C_Handler@@QAEXXZ PROC			; C_Handler::SendUpdate
; _this$ = ecx

; 1885 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1886 : //	UpdateFlag |= C_DRAW_UPDATE;
; 1887 : //	SendMessage(AppWindow_,C_WM_UPDATE,0,0);
; 1888 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SendUpdate@C_Handler@@QAEXXZ ENDP			; C_Handler::SendUpdate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?PostUpdate@C_Handler@@QAEXXZ PROC			; C_Handler::PostUpdate
; _this$ = ecx

; 1879 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1880 : //	UpdateFlag |= C_DRAW_UPDATE;
; 1881 : //	PostMessage(AppWindow_,C_WM_UPDATE,0,0);
; 1882 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?PostUpdate@C_Handler@@QAEXXZ ENDP			; C_Handler::PostUpdate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -36						; size = 4
_cur$ = -32						; size = 4
_i$ = -28						; size = 2
_infront$ = -24						; size = 4
_src$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?CheckTranslucentWindows@C_Handler@@QAEXXZ PROC		; C_Handler::CheckTranslucentWindows
; _this$ = ecx

; 722  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 723  : 	WHLIST *cur,*infront;
; 724  : 	UI95_RECT src;
; 725  : 	short i;
; 726  : 
; 727  : 	EnterCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EnterCritical@C_Handler@@QAEXXZ	; C_Handler::EnterCritical

; 728  : 	cur=Root_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
$LN10@CheckTrans:

; 729  : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN9@CheckTrans

; 730  : 	{
; 731  : 		infront=cur->Next;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _infront$[ebp], eax

; 732  : 		if(cur->Flags & C_BIT_ENABLED)

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 2048				; 00000800H
	je	$LN8@CheckTrans
$LN7@CheckTrans:

; 733  : 			while(infront)

	cmp	DWORD PTR _infront$[ebp], 0
	je	$LN8@CheckTrans

; 734  : 			{
; 735  : 				if((infront->win->GetFlags() & C_BIT_TRANSLUCENT)
; 736  : 					&& (infront->win->update_ & (C_DRAW_COPYWINDOW|C_DRAW_REFRESH|C_DRAW_REFRESHALL))
; 737  : 					&& (infront->Flags & C_BIT_ENABLED))

	mov	eax, DWORD PTR _infront$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetFlags@C_Window@@QAEJXZ		; C_Window::GetFlags
	and	eax, 536870912				; 20000000H
	je	$LN5@CheckTrans
	mov	ecx, DWORD PTR _infront$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+104]
	and	eax, 268435459				; 10000003H
	je	$LN5@CheckTrans
	mov	ecx, DWORD PTR _infront$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 2048				; 00000800H
	je	$LN5@CheckTrans

; 738  : 				{
; 739  : 					for(i=0;i<infront->win->rectcount_;i++)

	xor	eax, eax
	mov	WORD PTR _i$[ebp], ax
	jmp	SHORT $LN4@CheckTrans
$LN3@CheckTrans:
	mov	cx, WORD PTR _i$[ebp]
	add	cx, 1
	mov	WORD PTR _i$[ebp], cx
$LN4@CheckTrans:
	movsx	edx, WORD PTR _i$[ebp]
	mov	eax, DWORD PTR _infront$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	eax, WORD PTR [ecx+1016]
	cmp	edx, eax
	jge	$LN5@CheckTrans

; 740  : 					{
; 741  : 						if(infront->win->rectflag_[i])

	mov	ecx, DWORD PTR _infront$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	eax, WORD PTR _i$[ebp]
	movsx	ecx, WORD PTR [edx+eax*2+616]
	test	ecx, ecx
	je	$LN1@CheckTrans

; 742  : 						{
; 743  : 							src=infront->win->rectlist_[i];

	mov	edx, DWORD PTR _infront$[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	ecx, WORD PTR _i$[ebp]
	shl	ecx, 4
	lea	edx, DWORD PTR [eax+ecx+1020]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _src$[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _src$[ebp+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src$[ebp+8], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _src$[ebp+12], ecx

; 744  : 
; 745  : 							src.left  +=infront->win->GetX()-cur->win->GetX();

	mov	edx, DWORD PTR _infront$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	esi, ax
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	ecx, ax
	sub	esi, ecx
	add	esi, DWORD PTR _src$[ebp]
	mov	DWORD PTR _src$[ebp], esi

; 746  : 							src.top   +=infront->win->GetY()-cur->win->GetY();

	mov	edx, DWORD PTR _infront$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	esi, ax
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	ecx, ax
	sub	esi, ecx
	add	esi, DWORD PTR _src$[ebp+4]
	mov	DWORD PTR _src$[ebp+4], esi

; 747  : 							src.right +=infront->win->GetX()-cur->win->GetX();

	mov	edx, DWORD PTR _infront$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	esi, ax
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	ecx, ax
	sub	esi, ecx
	add	esi, DWORD PTR _src$[ebp+8]
	mov	DWORD PTR _src$[ebp+8], esi

; 748  : 							src.bottom+=infront->win->GetY()-cur->win->GetY();

	mov	edx, DWORD PTR _infront$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	esi, ax
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	ecx, ax
	sub	esi, ecx
	add	esi, DWORD PTR _src$[ebp+12]
	mov	DWORD PTR _src$[ebp+12], esi

; 749  : 
; 750  : 							cur->win->SetUpdateRect(src.left,src.top,src.right,src.bottom,C_BIT_ABSOLUTE,0);

	push	0
	push	262144					; 00040000H
	mov	edx, DWORD PTR _src$[ebp+12]
	push	edx
	mov	eax, DWORD PTR _src$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _src$[ebp]
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?SetUpdateRect@C_Window@@QAEXJJJJJJ@Z	; C_Window::SetUpdateRect
$LN1@CheckTrans:

; 751  : 						}
; 752  : 					}

	jmp	$LN3@CheckTrans
$LN5@CheckTrans:

; 753  : 				}
; 754  : 				infront=infront->Next;

	mov	ecx, DWORD PTR _infront$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _infront$[ebp], edx

; 755  : 			}

	jmp	$LN7@CheckTrans
$LN8@CheckTrans:

; 756  : 		cur=cur->Next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _cur$[ebp], ecx

; 757  : 	}

	jmp	$LN10@CheckTrans
$LN9@CheckTrans:

; 758  : 	LeaveCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCritical@C_Handler@@QAEXXZ	; C_Handler::LeaveCritical

; 759  : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?CheckTranslucentWindows@C_Handler@@QAEXXZ ENDP		; C_Handler::CheckTranslucentWindows
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
?UpdateTimerControls@C_Handler@@QAEXXZ PROC		; C_Handler::UpdateTimerControls
; _this$ = ecx

; 1213 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1214 : 	WHLIST *cur;
; 1215 : 
; 1216 : 	cur=Root_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
$LN5@UpdateTime:

; 1217 : 
; 1218 : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN4@UpdateTime

; 1219 : 	{
; 1220 : 		if(cur->Flags & C_BIT_ENABLED)

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, 2048				; 00000800H
	je	SHORT $LN3@UpdateTime

; 1221 : 		{
; 1222 : 			if(cur->win->UpdateTimerControls())

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?UpdateTimerControls@C_Window@@QAEHXZ	; C_Window::UpdateTimerControls
	test	eax, eax
	je	SHORT $LN3@UpdateTime

; 1223 : 				cur->win->DrawTimerControls();

	mov	edx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?DrawTimerControls@C_Window@@QAEXXZ	; C_Window::DrawTimerControls
$LN3@UpdateTime:

; 1224 : 		}
; 1225 : 		cur=cur->Next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _cur$[ebp], ecx

; 1226 : 	}

	jmp	SHORT $LN5@UpdateTime
$LN4@UpdateTime:

; 1227 : 	if(UpdateFlag & (C_DRAW_REFRESH|C_DRAW_REFRESHALL))

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+3472]
	and	eax, 3
	je	SHORT $LN6@UpdateTime

; 1228 : 		SetEvent(WakeOutput_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	push	edx
	call	DWORD PTR __imp__SetEvent@4
$LN6@UpdateTime:

; 1229 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateTimerControls@C_Handler@@QAEXXZ ENDP		; C_Handler::UpdateTimerControls
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_hres$1 = -52						; size = 4
tv73 = -48						; size = 4
_this$ = -44						; size = 4
_i$ = -40						; size = 2
_dest$ = -36						; size = 16
_src$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?CopyToPrimary@C_Handler@@QAEXXZ PROC			; C_Handler::CopyToPrimary
; _this$ = ecx

; 1112 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1113 : 	short i;
; 1114 : 	RECT src,dest;
; 1115 : 
; 1116 : 	if(!DrawFlags)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+3476], 0
	jne	SHORT $LN9@CopyToPrim

; 1117 : 		return;

	jmp	$LN10@CopyToPrim
$LN9@CopyToPrim:

; 1118 : 
; 1119 : // OW now handled by running in software mode on V1 and V2
; 1120 : #if 0
; 1121 : 	if(Primary_ == Front_)
; 1122 : 	{
; 1123 : 		if(FalconDisplay.displayFullScreen && rectcount_ <= 1)
; 1124 : 		{
; 1125 : 			Primary_->SwapBuffers(true);	// dont flip, it would interfere with our clipping / update mechanics
; 1126 : 			rectcount_=0;
; 1127 : 			UpdateFlag=0;
; 1128 : 			return;
; 1129 : 		}
; 1130 : 	}
; 1131 : #endif
; 1132 : 
; 1133 : 	// Make sure the drivers isnt buffering any data
; 1134 : 	if(g_bCheckBltStatusBeforeFlip)

	movzx	ecx, BYTE PTR ?g_bCheckBltStatusBeforeFlip@@3_NA ; g_bCheckBltStatusBeforeFlip
	test	ecx, ecx
	je	SHORT $LN8@CopyToPrim
$LN7@CopyToPrim:

; 1135 : 	{
; 1136 : 		while(true)

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN8@CopyToPrim

; 1137 : 		{
; 1138 : 			HRESULT hres = Primary_->frontSurface()->GetBltStatus(DDGBS_ISBLTDONE);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?frontSurface@ImageBuffer@@QAEPAUIDirectDrawSurface7@@XZ ; ImageBuffer::frontSurface
	mov	DWORD PTR tv73[ebp], eax
	push	2
	mov	ecx, DWORD PTR tv73[ebp]
	push	ecx
	mov	edx, DWORD PTR tv73[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+52]
	call	ecx
	mov	DWORD PTR _hres$1[ebp], eax

; 1139 : 			if(hres != DDERR_WASSTILLDRAWING)

	cmp	DWORD PTR _hres$1[ebp], -2005532132	; 8876021cH
	je	SHORT $LN5@CopyToPrim

; 1140 : 			{
; 1141 : 					break;

	jmp	SHORT $LN8@CopyToPrim
$LN5@CopyToPrim:

; 1142 : 			}
; 1143 : 
; 1144 : 			// Let all the other threads have some CPU.
; 1145 : 			Sleep(0);

	push	0
	call	DWORD PTR __imp__Sleep@4

; 1146 : 		}

	jmp	SHORT $LN7@CopyToPrim
$LN8@CopyToPrim:

; 1147 : 	}
; 1148 : 
; 1149 : 	for(i=0;i<rectcount_;i++)

	xor	edx, edx
	mov	WORD PTR _i$[ebp], dx
	jmp	SHORT $LN4@CopyToPrim
$LN3@CopyToPrim:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
$LN4@CopyToPrim:
	movsx	ecx, WORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+3464]
	cmp	ecx, eax
	jge	$LN2@CopyToPrim

; 1150 : 	{
; 1151 : 		src.left=rectlist_[i].left;

	movsx	ecx, WORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+264]
	mov	DWORD PTR _src$[ebp], eax

; 1152 : 		src.top=rectlist_[i].top;

	movsx	ecx, WORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+268]
	mov	DWORD PTR _src$[ebp+4], eax

; 1153 : 		src.right=rectlist_[i].right;

	movsx	ecx, WORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+272]
	mov	DWORD PTR _src$[ebp+8], eax

; 1154 : 		src.bottom=rectlist_[i].bottom;

	movsx	ecx, WORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+276]
	mov	DWORD PTR _src$[ebp+12], eax

; 1155 : 
; 1156 : 		dest=src;

	mov	ecx, DWORD PTR _src$[ebp]
	mov	DWORD PTR _dest$[ebp], ecx
	mov	edx, DWORD PTR _src$[ebp+4]
	mov	DWORD PTR _dest$[ebp+4], edx
	mov	eax, DWORD PTR _src$[ebp+8]
	mov	DWORD PTR _dest$[ebp+8], eax
	mov	ecx, DWORD PTR _src$[ebp+12]
	mov	DWORD PTR _dest$[ebp+12], ecx

; 1157 : // ImageBuf should handle this...
; 1158 : //		dest.left+=PrimaryRect_.left;
; 1159 : //		dest.right+=PrimaryRect_.left;
; 1160 : //		dest.top+=PrimaryRect_.top;
; 1161 : //		dest.bottom+=PrimaryRect_.top;
; 1162 : 
; 1163 : //			ShowCursor(FALSE);
; 1164 : 			if(src.left < src.right && src.top < src.bottom)

	mov	edx, DWORD PTR _src$[ebp]
	cmp	edx, DWORD PTR _src$[ebp+8]
	jge	SHORT $LN1@CopyToPrim
	mov	eax, DWORD PTR _src$[ebp+4]
	cmp	eax, DWORD PTR _src$[ebp+12]
	jge	SHORT $LN1@CopyToPrim

; 1165 : 				Primary_->Compose( Front_, &src, &dest ); 

	lea	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR _src$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	call	?Compose@ImageBuffer@@QAEXPAV1@PAUtagRECT@@1@Z ; ImageBuffer::Compose
$LN1@CopyToPrim:

; 1166 : //			ShowCursor(TRUE);
; 1167 : //			MonoPrint("CopyToPrimary(%1d,%1d,%1d,%1d)\n",dest.left,dest.top,dest.right,dest.bottom);
; 1168 : 	}

	jmp	$LN3@CopyToPrim
$LN2@CopyToPrim:

; 1169 : 
; 1170 : 	rectcount_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+3464], ax

; 1171 : 
; 1172 : 	UpdateFlag=0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3472], 0
$LN10@CopyToPrim:

; 1173 : //	MonoPrint("HDNLR->CopyToPrimary() Done\n");
; 1174 : 
; 1175 : // OW now handled by running in software mode on V1 and V2
; 1176 : #if 0
; 1177 : 	if(m_pMouseImage)
; 1178 : 	{
; 1179 : 		POINT pt;
; 1180 : 		GetCursorPos(&pt);
; 1181 : 		ScreenToClient(AppWindow_, &pt);
; 1182 : 
; 1183 : 		// center
; 1184 : 		pt.x -= m_pMouseImage->targetXres() / 2;
; 1185 : 		pt.y -= m_pMouseImage->targetYres() / 2;
; 1186 : 
; 1187 : 		// clip
; 1188 : 		if(pt.x < 0) pt.x = 0;
; 1189 : 		else if(pt.x > Primary_->targetXres() - m_pMouseImage->targetXres()) pt.x = Primary_->targetXres() - m_pMouseImage->targetXres();
; 1190 : 		if(pt.y < 0) pt.y = 0;
; 1191 : 		else if(pt.y > Primary_->targetYres() - m_pMouseImage->targetYres()) pt.y = Primary_->targetYres() - m_pMouseImage->targetYres();
; 1192 : 
; 1193 : 		m_rcMouseImage.left = pt.x;
; 1194 : 		m_rcMouseImage.top = pt.y;
; 1195 : 		m_rcMouseImage.right = m_rcMouseImage.left + m_pMouseImage->targetXres();
; 1196 : 		m_rcMouseImage.bottom = m_rcMouseImage.top + m_pMouseImage->targetYres();
; 1197 : 
; 1198 : 		RECT rcSrc = { 0, 0, m_pMouseImage->targetXres(), m_pMouseImage->targetYres() };
; 1199 : 		Primary_->ComposeTransparent(m_pMouseImage, &rcSrc, &m_rcMouseImage);
; 1200 : 
; 1201 : 		// refresh next time
; 1202 : 		UI95_RECT upme;
; 1203 : 		upme.left=m_rcMouseImage.left;
; 1204 : 		upme.top=m_rcMouseImage.top;
; 1205 : 		upme.right=m_rcMouseImage.right;
; 1206 : 		upme.bottom=m_rcMouseImage.bottom;
; 1207 : 		SetUpdateRect(&upme);
; 1208 : 	}
; 1209 : #endif
; 1210 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?CopyToPrimary@C_Handler@@QAEXXZ ENDP			; C_Handler::CopyToPrimary
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_xsize$1 = -60						; size = 4
_i$2 = -56						; size = 4
_infront$ = -52						; size = 4
_i$ = -48						; size = 2
_this$ = -44						; size = 4
_cur$ = -40						; size = 4
_src$ = -36						; size = 16
_dst$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?Update@C_Handler@@QAEXXZ PROC				; C_Handler::Update
; _this$ = ecx

; 1022 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1023 : 	WHLIST *cur;
; 1024 : //#if 0
; 1025 : 	WHLIST *infront;
; 1026 : //#endif
; 1027 : 	UI95_RECT src,dst;
; 1028 : 	short i;
; 1029 : 
; 1030 : 	if(!(UpdateFlag & C_DRAW_REFRESH) || !DrawFlags)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3472]
	and	ecx, 1
	je	SHORT $LN22@Update
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+3476], 0
	jne	SHORT $LN23@Update
$LN22@Update:

; 1031 : 		return;

	jmp	$LN24@Update
$LN23@Update:

; 1032 : 
; 1033 : 	Lock();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Lock@C_Handler@@QAEPAXXZ		; C_Handler::Lock

; 1034 : 	if(!surface_.mem)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN21@Update

; 1035 : 		return;

	jmp	$LN24@Update
$LN21@Update:

; 1036 : 
; 1037 : //	CheckDrawThrough();
; 1038 : 	CheckTranslucentWindows();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckTranslucentWindows@C_Handler@@QAEXXZ ; C_Handler::CheckTranslucentWindows

; 1039 : //	ClearAllHiddenRects();
; 1040 : 
; 1041 : 	cur=Root_;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _cur$[ebp], edx
$LN20@Update:

; 1042 : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN19@Update

; 1043 : 	{
; 1044 : 		if((cur->Flags & C_BIT_ENABLED) && (cur->win->update_ & C_DRAW_REFRESH))

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 2048				; 00000800H
	je	$LN18@Update
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+104]
	and	ecx, 1
	je	$LN18@Update

; 1045 : 		{
; 1046 : 			if(cur->win->update_ & C_DRAW_REFRESH)

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+104]
	and	ecx, 1
	je	SHORT $LN17@Update

; 1047 : 			{
; 1048 : //#if 0
; 1049 : 				ClearHiddenRects(cur);

	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearHiddenRects@C_Handler@@QAEXPAVWHLIST@@@Z ; C_Handler::ClearHiddenRects

; 1050 : //#endif
; 1051 : 				cur->win->DrawWindow(&surface_);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?DrawWindow@C_Window@@QAEXPAVSCREEN@@@Z	; C_Window::DrawWindow
$LN17@Update:

; 1052 : 			}
; 1053 : 			if(cur->win->update_ & C_DRAW_COPYWINDOW)

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+104]
	and	ecx, 268435456				; 10000000H
	je	$LN16@Update

; 1054 : 			{
; 1055 : 				for(i=0;i<cur->win->rectcount_;i++)

	xor	edx, edx
	mov	WORD PTR _i$[ebp], dx
	jmp	SHORT $LN15@Update
$LN14@Update:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
$LN15@Update:
	movsx	ecx, WORD PTR _i$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	edx, WORD PTR [eax+1016]
	cmp	ecx, edx
	jge	$LN16@Update

; 1056 : 				{
; 1057 : 					if(cur->win->rectflag_[i])

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, WORD PTR _i$[ebp]
	movsx	eax, WORD PTR [ecx+edx*2+616]
	test	eax, eax
	je	$LN12@Update

; 1058 : 					{
; 1059 : 						src=cur->win->rectlist_[i];

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	eax, WORD PTR _i$[ebp]
	shl	eax, 4
	lea	ecx, DWORD PTR [edx+eax+1020]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _src$[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _src$[ebp+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src$[ebp+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _src$[ebp+12], eax

; 1060 : 
; 1061 : 						dst=src;

	mov	ecx, DWORD PTR _src$[ebp]
	mov	DWORD PTR _dst$[ebp], ecx
	mov	edx, DWORD PTR _src$[ebp+4]
	mov	DWORD PTR _dst$[ebp+4], edx
	mov	eax, DWORD PTR _src$[ebp+8]
	mov	DWORD PTR _dst$[ebp+8], eax
	mov	ecx, DWORD PTR _src$[ebp+12]
	mov	DWORD PTR _dst$[ebp+12], ecx

; 1062 : 						dst.left+=cur->win->GetX();

	mov	edx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	cwde
	add	eax, DWORD PTR _dst$[ebp]
	mov	DWORD PTR _dst$[ebp], eax

; 1063 : 						dst.top+=cur->win->GetY();

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	edx, ax
	add	edx, DWORD PTR _dst$[ebp+4]
	mov	DWORD PTR _dst$[ebp+4], edx

; 1064 : 						dst.right+=cur->win->GetX();

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	ecx, ax
	add	ecx, DWORD PTR _dst$[ebp+8]
	mov	DWORD PTR _dst$[ebp+8], ecx

; 1065 : 						dst.bottom+=cur->win->GetY();

	mov	edx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	cwde
	add	eax, DWORD PTR _dst$[ebp+12]
	mov	DWORD PTR _dst$[ebp+12], eax

; 1066 : 
; 1067 : 						SetUpdateRect(&dst);

	lea	ecx, DWORD PTR _dst$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetUpdateRect@C_Handler@@QAEXPAUUI95_RECT@@@Z ; C_Handler::SetUpdateRect

; 1068 : //#if 0
; 1069 : 						infront=cur->Next;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _infront$[ebp], eax
$LN11@Update:

; 1070 : 						while(infront)

	cmp	DWORD PTR _infront$[ebp], 0
	je	$LN12@Update

; 1071 : 						{
; 1072 : 							if(infront->Flags & C_BIT_ENABLED && (infront->win->GetFlags() & C_BIT_TRANSLUCENT))

	mov	ecx, DWORD PTR _infront$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 2048				; 00000800H
	je	SHORT $LN9@Update
	mov	eax, DWORD PTR _infront$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetFlags@C_Window@@QAEJXZ		; C_Window::GetFlags
	and	eax, 536870912				; 20000000H
	je	SHORT $LN9@Update

; 1073 : 								infront->win->SetUpdateRect(dst.left-infront->win->GetX(),dst.top-infront->win->GetY(),dst.right-infront->win->GetX(),dst.bottom-infront->win->GetY(),C_BIT_ABSOLUTE,0);

	push	0
	push	262144					; 00040000H
	mov	ecx, DWORD PTR _infront$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	edx, ax
	mov	eax, DWORD PTR _dst$[ebp+12]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _infront$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	edx, ax
	mov	eax, DWORD PTR _dst$[ebp+8]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _infront$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	edx, ax
	mov	eax, DWORD PTR _dst$[ebp+4]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _infront$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	edx, ax
	mov	eax, DWORD PTR _dst$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _infront$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?SetUpdateRect@C_Window@@QAEXJJJJJJ@Z	; C_Window::SetUpdateRect
$LN9@Update:

; 1074 : 							infront=infront->Next;

	mov	edx, DWORD PTR _infront$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _infront$[ebp], eax

; 1075 : 						}

	jmp	$LN11@Update
$LN12@Update:

; 1076 : //#endif
; 1077 : 					}
; 1078 : 				}

	jmp	$LN14@Update
$LN16@Update:

; 1079 : 			}
; 1080 : 			cur->win->rectcount_=0;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	WORD PTR [edx+1016], ax

; 1081 : 			cur->win->update_ = 0;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+104], 0
$LN18@Update:

; 1082 : 		}
; 1083 : 		cur=cur->Next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _cur$[ebp], ecx

; 1084 : 	}

	jmp	$LN20@Update
$LN19@Update:

; 1085 : 
; 1086 : 	if(OverLast_.Time_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+136], 0
	je	SHORT $LN8@Update

; 1087 : 		CheckHelpText(&surface_);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckHelpText@C_Handler@@AAEXPAVSCREEN@@@Z ; C_Handler::CheckHelpText
$LN8@Update:

; 1088 : 
; 1089 : 	if(gScreenShotEnabled && gUI_TakeScreenShot == 1)

	cmp	DWORD PTR ?gScreenShotEnabled@@3JA, 0	; gScreenShotEnabled
	je	$LN7@Update
	cmp	DWORD PTR ?gUI_TakeScreenShot@@3JA, 1	; gUI_TakeScreenShot
	jne	$LN7@Update

; 1090 : 	{
; 1091 : 		// Copy Front_ surface to a secondary buffer
; 1092 : 		int xsize = 800;

	mov	DWORD PTR _xsize$1[ebp], 800		; 00000320H

; 1093 : 		if (g_bHiResUI)

	movzx	ecx, BYTE PTR ?g_bHiResUI@@3_NA		; g_bHiResUI
	test	ecx, ecx
	je	SHORT $LN6@Update

; 1094 : 			xsize = 1024;

	mov	DWORD PTR _xsize$1[ebp], 1024		; 00000400H
$LN6@Update:

; 1095 : 		//memcpy(gScreenShotBuffer,surface_.mem,surface_.width * surface_.height * sizeof(WORD));
; 1096 : // MN somehow this D3D stuff for surface_.width creates a width of 1024 for an 800x600 UI...
; 1097 : 
; 1098 : 		if(surface_.bpp == 32 )//XX

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+28]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN5@Update

; 1099 : 		{
; 1100 : 			for( int i = 0; i < xsize * surface_.height; i++ )			

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@Update
$LN3@Update:
	mov	ecx, DWORD PTR _i$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$2[ebp], ecx
$LN4@Update:
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+26]
	imul	eax, DWORD PTR _xsize$1[ebp]
	cmp	DWORD PTR _i$2[ebp], eax
	jge	SHORT $LN2@Update

; 1101 : 				gScreenShotBuffer[i] = RGB8toRGB565( ((DWORD*)surface_.mem)[ i ] );		

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	?RGB8toRGB565@@YAGK@Z			; RGB8toRGB565
	add	esp, 4
	mov	edx, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR ?gScreenShotBuffer@@3PAGA ; gScreenShotBuffer
	mov	WORD PTR [ecx+edx*2], ax
	jmp	SHORT $LN3@Update
$LN2@Update:

; 1102 : 		}
; 1103 : 		else

	jmp	SHORT $LN1@Update
$LN5@Update:

; 1104 : 		memcpy(gScreenShotBuffer,surface_.mem,xsize * surface_.height * sizeof(WORD));

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+26]
	imul	eax, DWORD PTR _xsize$1[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR ?gScreenShotBuffer@@3PAGA ; gScreenShotBuffer
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@Update:

; 1105 : 
; 1106 : 		gUI_TakeScreenShot=2;

	mov	DWORD PTR ?gUI_TakeScreenShot@@3JA, 2	; gUI_TakeScreenShot
$LN7@Update:

; 1107 : 	}
; 1108 : 	Unlock();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Unlock@C_Handler@@QAEXXZ		; C_Handler::Unlock
$LN24@Update:

; 1109 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?Update@C_Handler@@QAEXXZ ENDP				; C_Handler::Update
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -28						; size = 4
_cur$ = -24						; size = 4
_rect$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_updaterect$ = 8					; size = 4
?RefreshAll@C_Handler@@QAEXPAUUI95_RECT@@@Z PROC	; C_Handler::RefreshAll
; _this$ = ecx

; 840  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 841  : 	WHLIST *cur;
; 842  : 	UI95_RECT rect;
; 843  : 
; 844  : 	cur=Root_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
$LN6@RefreshAll:

; 845  : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN7@RefreshAll

; 846  : 	{
; 847  : 		if(cur->Flags & C_BIT_ENABLED)

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, 2048				; 00000800H
	je	$LN4@RefreshAll

; 848  : 		{
; 849  : 			rect=*updaterect;

	mov	ecx, DWORD PTR _updaterect$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _rect$[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _rect$[ebp+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _rect$[ebp+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _rect$[ebp+12], eax

; 850  : 			rect.left -= cur->win->GetX();

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	edx, ax
	mov	eax, DWORD PTR _rect$[ebp]
	sub	eax, edx
	mov	DWORD PTR _rect$[ebp], eax

; 851  : 			rect.right-= cur->win->GetX();

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	edx, ax
	mov	eax, DWORD PTR _rect$[ebp+8]
	sub	eax, edx
	mov	DWORD PTR _rect$[ebp+8], eax

; 852  : 			rect.top -= cur->win->GetY();

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	edx, ax
	mov	eax, DWORD PTR _rect$[ebp+4]
	sub	eax, edx
	mov	DWORD PTR _rect$[ebp+4], eax

; 853  : 			rect.bottom -= cur->win->GetY();

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	edx, ax
	mov	eax, DWORD PTR _rect$[ebp+12]
	sub	eax, edx
	mov	DWORD PTR _rect$[ebp+12], eax

; 854  : 
; 855  : 			if(rect.left < 0) rect.left=0;

	cmp	DWORD PTR _rect$[ebp], 0
	jge	SHORT $LN3@RefreshAll
	mov	DWORD PTR _rect$[ebp], 0
$LN3@RefreshAll:

; 856  : 			if(rect.top < 0) rect.top=0;

	cmp	DWORD PTR _rect$[ebp+4], 0
	jge	SHORT $LN2@RefreshAll
	mov	DWORD PTR _rect$[ebp+4], 0
$LN2@RefreshAll:

; 857  : 
; 858  : 			if(rect.right > 0 && rect.bottom > 0)

	cmp	DWORD PTR _rect$[ebp+8], 0
	jle	SHORT $LN4@RefreshAll
	cmp	DWORD PTR _rect$[ebp+12], 0
	jle	SHORT $LN4@RefreshAll

; 859  : 				cur->win->SetUpdateRect(rect.left,rect.top,rect.right,rect.bottom,C_BIT_ABSOLUTE,0);

	push	0
	push	262144					; 00040000H
	mov	ecx, DWORD PTR _rect$[ebp+12]
	push	ecx
	mov	edx, DWORD PTR _rect$[ebp+8]
	push	edx
	mov	eax, DWORD PTR _rect$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _rect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?SetUpdateRect@C_Window@@QAEXJJJJJJ@Z	; C_Window::SetUpdateRect
$LN4@RefreshAll:

; 860  : 		}
; 861  : 		cur=cur->Next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _cur$[ebp], ecx

; 862  : 	}

	jmp	$LN6@RefreshAll
$LN7@RefreshAll:

; 863  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?RefreshAll@C_Handler@@QAEXPAUUI95_RECT@@@Z ENDP	; C_Handler::RefreshAll
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_offset$ = -4						; size = 4
_src$ = 8						; size = 4
_dst$ = 12						; size = 4
_ClientArea$ = 16					; size = 4
?ClipRect@C_Handler@@QAEHPAUUI95_RECT@@00@Z PROC	; C_Handler::ClipRect
; _this$ = ecx

; 771  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 772  : 	long offset;
; 773  : 
; 774  : 	if(dst->left < ClientArea->left)

	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR _ClientArea$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN5@ClipRect

; 775  : 	{
; 776  : 		offset=ClientArea->left - dst->left;

	mov	eax, DWORD PTR _ClientArea$[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR _offset$[ebp], edx

; 777  : 		src->left+=offset;

	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _offset$[ebp]
	mov	edx, DWORD PTR _src$[ebp]
	mov	DWORD PTR [edx], ecx

; 778  : 		dst->left+=offset;

	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _offset$[ebp]
	mov	edx, DWORD PTR _dst$[ebp]
	mov	DWORD PTR [edx], ecx
$LN5@ClipRect:

; 779  : 	}
; 780  : 	if(dst->top < ClientArea->top)

	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR _ClientArea$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jge	SHORT $LN4@ClipRect

; 781  : 	{
; 782  : 		offset=ClientArea->top - dst->top;

	mov	eax, DWORD PTR _ClientArea$[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _offset$[ebp], edx

; 783  : 		src->top+=offset;

	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _offset$[ebp]
	mov	edx, DWORD PTR _src$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 784  : 		dst->top+=offset;

	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _offset$[ebp]
	mov	edx, DWORD PTR _dst$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN4@ClipRect:

; 785  : 	}
; 786  : 	if(dst->right > ClientArea->right)

	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR _ClientArea$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	jle	SHORT $LN3@ClipRect

; 787  : 	{
; 788  : 		offset= dst->right - ClientArea->right;

	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR _ClientArea$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _offset$[ebp], edx

; 789  : 		src->right-=offset;

	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _offset$[ebp]
	mov	edx, DWORD PTR _src$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 790  : 		dst->right-=offset;

	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _offset$[ebp]
	mov	edx, DWORD PTR _dst$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN3@ClipRect:

; 791  : 	}
; 792  : 	if(dst->bottom > ClientArea->bottom)

	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR _ClientArea$[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx+12]
	jle	SHORT $LN2@ClipRect

; 793  : 	{
; 794  : 		offset= dst->bottom - ClientArea->bottom;

	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR _ClientArea$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _offset$[ebp], edx

; 795  : 		src->bottom-=offset;					  

	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _offset$[ebp]
	mov	edx, DWORD PTR _src$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 796  : 		dst->bottom-=offset;

	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _offset$[ebp]
	mov	edx, DWORD PTR _dst$[ebp]
	mov	DWORD PTR [edx+12], ecx
$LN2@ClipRect:

; 797  : 	}
; 798  : 	if(dst->left < dst->right && dst->top < dst->bottom)

	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+8]
	jge	SHORT $LN1@ClipRect
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+12]
	jge	SHORT $LN1@ClipRect

; 799  : 		return(TRUE); // Draw it

	mov	eax, 1
	jmp	SHORT $LN6@ClipRect
$LN1@ClipRect:

; 800  : 
; 801  : 	return(FALSE);

	xor	eax, eax
$LN6@ClipRect:

; 802  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?ClipRect@C_Handler@@QAEHPAUUI95_RECT@@00@Z ENDP	; C_Handler::ClipRect
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_me$ = -8						; size = 4
_cur$ = -4						; size = 4
?ClearAllHiddenRects@C_Handler@@QAEXXZ PROC		; C_Handler::ClearAllHiddenRects
; _this$ = ecx

; 887  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 888  : 	WHLIST *me,*cur;
; 889  : 
; 890  : 	me=Root_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _me$[ebp], ecx
$LN6@ClearAllHi:

; 891  : 	while(me)

	cmp	DWORD PTR _me$[ebp], 0
	je	$LN7@ClearAllHi

; 892  : 	{
; 893  : 		if(me->Flags & C_BIT_ENABLED)

	mov	edx, DWORD PTR _me$[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, 2048				; 00000800H
	je	$LN4@ClearAllHi

; 894  : 		{
; 895  : 			cur=me->Next;

	mov	ecx, DWORD PTR _me$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _cur$[ebp], edx
$LN3@ClearAllHi:

; 896  : 			while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN4@ClearAllHi

; 897  : 			{
; 898  : 				if((cur->Flags & C_BIT_ENABLED) && !(cur->win->GetFlags() & C_BIT_TRANSLUCENT))

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 2048				; 00000800H
	je	$LN1@ClearAllHi
	mov	edx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetFlags@C_Window@@QAEJXZ		; C_Window::GetFlags
	and	eax, 536870912				; 20000000H
	jne	$LN1@ClearAllHi

; 899  : 				{
; 900  : 					me->win->ClearUpdateRect(cur->win->GetX() - me->win->GetX(),
; 901  : 											 cur->win->GetY() - me->win->GetY(),
; 902  : 											 cur->win->GetX()+cur->win->GetW() - me->win->GetX(),
; 903  : 											 cur->win->GetY()+cur->win->GetH() - me->win->GetY());

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	esi, ax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetH@C_Window@@QAEFXZ			; C_Window::GetH
	movsx	edx, ax
	add	esi, edx
	mov	eax, DWORD PTR _me$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	ecx, ax
	sub	esi, ecx
	push	esi
	mov	edx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	esi, ax
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetW@C_Window@@QAEFXZ			; C_Window::GetW
	movsx	ecx, ax
	add	esi, ecx
	mov	edx, DWORD PTR _me$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	cwde
	sub	esi, eax
	push	esi
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	esi, ax
	mov	edx, DWORD PTR _me$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	cwde
	sub	esi, eax
	push	esi
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	esi, ax
	mov	edx, DWORD PTR _me$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	cwde
	sub	esi, eax
	push	esi
	mov	ecx, DWORD PTR _me$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?ClearUpdateRect@C_Window@@QAEXJJJJ@Z	; C_Window::ClearUpdateRect
$LN1@ClearAllHi:

; 904  : 				}
; 905  : 				cur=cur->Next;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _cur$[ebp], eax

; 906  : 			}

	jmp	$LN3@ClearAllHi
$LN4@ClearAllHi:

; 907  : 		}
; 908  : 		me=me->Next;

	mov	ecx, DWORD PTR _me$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _me$[ebp], edx

; 909  : 	}

	jmp	$LN6@ClearAllHi
$LN7@ClearAllHi:

; 910  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearAllHiddenRects@C_Handler@@QAEXXZ ENDP		; C_Handler::ClearAllHiddenRects
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -36						; size = 4
_cur$ = -32						; size = 4
_i$ = -28						; size = 2
_me$ = -24						; size = 4
_src$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?CheckDrawThrough@C_Handler@@QAEXXZ PROC		; C_Handler::CheckDrawThrough
; _this$ = ecx

; 985  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 986  : 	WHLIST *me,*cur;
; 987  : 	UI95_RECT src;
; 988  : 	short i;
; 989  : 
; 990  : 	me=Root_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _me$[ebp], ecx
$LN10@CheckDrawT:

; 991  : 	while(me)

	cmp	DWORD PTR _me$[ebp], 0
	je	$LN11@CheckDrawT

; 992  : 	{
; 993  : 		if((me->Flags & C_BIT_ENABLED) && (me->win->update_ & C_DRAW_REFRESH))

	mov	edx, DWORD PTR _me$[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, 2048				; 00000800H
	je	$LN8@CheckDrawT
	mov	ecx, DWORD PTR _me$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+104]
	and	eax, 1
	je	$LN8@CheckDrawT

; 994  : 		{
; 995  : 			cur=me->Next;

	mov	ecx, DWORD PTR _me$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _cur$[ebp], edx
$LN7@CheckDrawT:

; 996  : 			while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN8@CheckDrawT

; 997  : 			{
; 998  : 				if((cur->Flags & C_BIT_ENABLED) && (cur->win->GetFlags() & C_BIT_TRANSLUCENT))

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 2048				; 00000800H
	je	$LN5@CheckDrawT
	mov	edx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetFlags@C_Window@@QAEJXZ		; C_Window::GetFlags
	and	eax, 536870912				; 20000000H
	je	$LN5@CheckDrawT

; 999  : 				{
; 1000 : 					for(i=0;i<me->win->rectcount_;i++)

	xor	eax, eax
	mov	WORD PTR _i$[ebp], ax
	jmp	SHORT $LN4@CheckDrawT
$LN3@CheckDrawT:
	mov	cx, WORD PTR _i$[ebp]
	add	cx, 1
	mov	WORD PTR _i$[ebp], cx
$LN4@CheckDrawT:
	movsx	edx, WORD PTR _i$[ebp]
	mov	eax, DWORD PTR _me$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	eax, WORD PTR [ecx+1016]
	cmp	edx, eax
	jge	$LN5@CheckDrawT

; 1001 : 					{
; 1002 : 						if(me->win->rectflag_[i])

	mov	ecx, DWORD PTR _me$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	eax, WORD PTR _i$[ebp]
	movsx	ecx, WORD PTR [edx+eax*2+616]
	test	ecx, ecx
	je	$LN1@CheckDrawT

; 1003 : 						{
; 1004 : 							src=me->win->rectlist_[i];

	mov	edx, DWORD PTR _me$[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	ecx, WORD PTR _i$[ebp]
	shl	ecx, 4
	lea	edx, DWORD PTR [eax+ecx+1020]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _src$[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _src$[ebp+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src$[ebp+8], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _src$[ebp+12], ecx

; 1005 : 							src.left+=(me->win->GetX()-cur->win->GetX());

	mov	edx, DWORD PTR _me$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	esi, ax
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	ecx, ax
	sub	esi, ecx
	add	esi, DWORD PTR _src$[ebp]
	mov	DWORD PTR _src$[ebp], esi

; 1006 : 							src.right+=(me->win->GetX()-cur->win->GetX());

	mov	edx, DWORD PTR _me$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	esi, ax
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	ecx, ax
	sub	esi, ecx
	add	esi, DWORD PTR _src$[ebp+8]
	mov	DWORD PTR _src$[ebp+8], esi

; 1007 : 							src.top+=(me->win->GetY()-cur->win->GetY());

	mov	edx, DWORD PTR _me$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	esi, ax
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	ecx, ax
	sub	esi, ecx
	add	esi, DWORD PTR _src$[ebp+4]
	mov	DWORD PTR _src$[ebp+4], esi

; 1008 : 							src.bottom+=(me->win->GetY()-cur->win->GetY());

	mov	edx, DWORD PTR _me$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	esi, ax
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	ecx, ax
	sub	esi, ecx
	add	esi, DWORD PTR _src$[ebp+12]
	mov	DWORD PTR _src$[ebp+12], esi

; 1009 : 
; 1010 : 							cur->win->SetUpdateRect(src.left,src.top,src.right,src.bottom,C_BIT_ABSOLUTE,0);

	push	0
	push	262144					; 00040000H
	mov	edx, DWORD PTR _src$[ebp+12]
	push	edx
	mov	eax, DWORD PTR _src$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _src$[ebp]
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?SetUpdateRect@C_Window@@QAEXJJJJJJ@Z	; C_Window::SetUpdateRect
$LN1@CheckDrawT:

; 1011 : 						}
; 1012 : 					}

	jmp	$LN3@CheckDrawT
$LN5@CheckDrawT:

; 1013 : 				}
; 1014 : 				cur=cur->Next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _cur$[ebp], edx

; 1015 : 			}

	jmp	$LN7@CheckDrawT
$LN8@CheckDrawT:

; 1016 : 		}
; 1017 : 		me=me->Next;

	mov	eax, DWORD PTR _me$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _me$[ebp], ecx

; 1018 : 	}

	jmp	$LN10@CheckDrawT
$LN11@CheckDrawT:

; 1019 : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?CheckDrawThrough@C_Handler@@QAEXXZ ENDP		; C_Handler::CheckDrawThrough
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_me$ = 8						; size = 4
?ClearHiddenRects@C_Handler@@QAEXPAVWHLIST@@@Z PROC	; C_Handler::ClearHiddenRects
; _this$ = ecx

; 866  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 867  : 	WHLIST *cur;
; 868  : 
; 869  : 	if(me)

	cmp	DWORD PTR _me$[ebp], 0
	je	$LN5@ClearHidde

; 870  : 	{
; 871  : 		cur=me->Next;

	mov	eax, DWORD PTR _me$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _cur$[ebp], ecx
$LN3@ClearHidde:

; 872  : 		while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN5@ClearHidde

; 873  : 		{
; 874  : 			if((cur->Flags & C_BIT_ENABLED) && !(cur->win->GetFlags() & C_BIT_TRANSLUCENT))

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, 2048				; 00000800H
	je	$LN1@ClearHidde
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetFlags@C_Window@@QAEJXZ		; C_Window::GetFlags
	and	eax, 536870912				; 20000000H
	jne	$LN1@ClearHidde

; 875  : 			{
; 876  : 				me->win->ClearUpdateRect(cur->win->GetX() - me->win->GetX(),
; 877  : 										 cur->win->GetY() - me->win->GetY(),
; 878  : 										 cur->win->GetX()+cur->win->GetW() - me->win->GetX(),
; 879  : 										 cur->win->GetY()+cur->win->GetH() - me->win->GetY());

	mov	edx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	esi, ax
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetH@C_Window@@QAEFXZ			; C_Window::GetH
	movsx	ecx, ax
	add	esi, ecx
	mov	edx, DWORD PTR _me$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	cwde
	sub	esi, eax
	push	esi
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	esi, ax
	mov	edx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetW@C_Window@@QAEFXZ			; C_Window::GetW
	cwde
	add	esi, eax
	mov	ecx, DWORD PTR _me$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	edx, ax
	sub	esi, edx
	push	esi
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	esi, ax
	mov	ecx, DWORD PTR _me$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	edx, ax
	sub	esi, edx
	push	esi
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	esi, ax
	mov	ecx, DWORD PTR _me$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	edx, ax
	sub	esi, edx
	push	esi
	mov	eax, DWORD PTR _me$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?ClearUpdateRect@C_Window@@QAEXJJJJ@Z	; C_Window::ClearUpdateRect
$LN1@ClearHidde:

; 880  : 			}
; 881  : 			cur=cur->Next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _cur$[ebp], edx

; 882  : 		}

	jmp	$LN3@ClearHidde
$LN5@ClearHidde:

; 883  : 	}
; 884  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearHiddenRects@C_Handler@@QAEXPAVWHLIST@@@Z ENDP	; C_Handler::ClearHiddenRects
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = -4						; size = 2
_upd$ = 8						; size = 4
?SetUpdateRect@C_Handler@@QAEXPAUUI95_RECT@@@Z PROC	; C_Handler::SetUpdateRect
; _this$ = ecx

; 805  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 806  : 	short i;
; 807  : 
; 808  : 	if(rectcount_ < 1)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+3464]
	cmp	ecx, 1
	jge	SHORT $LN8@SetUpdateR

; 809  : 	{
; 810  : 		rectlist_[rectcount_]=*upd;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+3464]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+264]
	mov	eax, DWORD PTR _upd$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax

; 811  : 		rectcount_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+3464]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+3464], dx

; 812  : 		UpdateFlag |= C_DRAW_COPYWINDOW;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+3472]
	or	edx, 268435456				; 10000000H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3472], edx
	jmp	$LN9@SetUpdateR
$LN8@SetUpdateR:

; 813  : 	}
; 814  : 	else if(rectcount_ < HND_MAX_RECTS)

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+3464]
	cmp	edx, 200				; 000000c8H
	jge	$LN6@SetUpdateR

; 815  : 	{
; 816  : 		for(i=0;i<rectcount_;i++)

	xor	eax, eax
	mov	WORD PTR _i$[ebp], ax
	jmp	SHORT $LN5@SetUpdateR
$LN4@SetUpdateR:
	mov	cx, WORD PTR _i$[ebp]
	add	cx, 1
	mov	WORD PTR _i$[ebp], cx
$LN5@SetUpdateR:
	movsx	edx, WORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+3464]
	cmp	edx, ecx
	jge	SHORT $LN3@SetUpdateR

; 817  : 		{
; 818  : 			if(rectlist_[i].left <= upd->left && rectlist_[i].top <= upd->top && rectlist_[i].right > upd->right && rectlist_[i].bottom >= upd->bottom)

	movsx	edx, WORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _upd$[ebp]
	mov	edx, DWORD PTR [eax+edx+264]
	cmp	edx, DWORD PTR [ecx]
	jg	SHORT $LN2@SetUpdateR
	movsx	eax, WORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _upd$[ebp]
	mov	eax, DWORD PTR [ecx+eax+268]
	cmp	eax, DWORD PTR [edx+4]
	jg	SHORT $LN2@SetUpdateR
	movsx	ecx, WORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _upd$[ebp]
	mov	ecx, DWORD PTR [edx+ecx+272]
	cmp	ecx, DWORD PTR [eax+8]
	jle	SHORT $LN2@SetUpdateR
	movsx	edx, WORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _upd$[ebp]
	mov	edx, DWORD PTR [eax+edx+276]
	cmp	edx, DWORD PTR [ecx+12]
	jl	SHORT $LN2@SetUpdateR

; 819  : 				return;

	jmp	$LN9@SetUpdateR
$LN2@SetUpdateR:

; 820  : 		}

	jmp	$LN4@SetUpdateR
$LN3@SetUpdateR:

; 821  : 		rectlist_[rectcount_].left=upd->left;

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+3464]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _upd$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx+264], eax

; 822  : 		rectlist_[rectcount_].top=upd->top;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+3464]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _upd$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+edx+268], ecx

; 823  : 		rectlist_[rectcount_].right=upd->right;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+3464]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _upd$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+eax+272], edx

; 824  : 		rectlist_[rectcount_].bottom=upd->bottom;

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+3464]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _upd$[ebp]
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+ecx+276], eax

; 825  : 		rectcount_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+3464]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+3464], dx

; 826  : 		UpdateFlag |= C_DRAW_COPYWINDOW;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+3472]
	or	edx, 268435456				; 10000000H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3472], edx

; 827  : 	}
; 828  : 	else

	jmp	$LN9@SetUpdateR
$LN6@SetUpdateR:

; 829  : 	{
; 830  : 		rectcount_=1;

	mov	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+3464], cx

; 831  : 		rectlist_[0].left=0;

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+264], 0

; 832  : 		rectlist_[0].top=0;

	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+268], 0

; 833  : 		rectlist_[0].right=GetW();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetW@C_Handler@@QAEJXZ			; C_Handler::GetW
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+272], eax

; 834  : 		rectlist_[0].bottom=GetH();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetH@C_Handler@@QAEJXZ			; C_Handler::GetH
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+276], eax

; 835  : 		UpdateFlag |= C_DRAW_COPYWINDOW;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3472]
	or	ecx, 268435456				; 10000000H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3472], ecx
$LN9@SetUpdateR:

; 836  : 	}
; 837  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetUpdateRect@C_Handler@@QAEXPAUUI95_RECT@@@Z ENDP	; C_Handler::SetUpdateRect
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_p$1 = -116						; size = 8
tv144 = -108						; size = 4
tv1142 = -104						; size = 4
tv1158 = -100						; size = 4
tv473 = -96						; size = 4
_Repeat$ = -92						; size = 4
_MouseZ$2 = -88						; size = 2
_DblClk$ = -84						; size = 4
_Ascii$ = -77						; size = 1
_OldMouseControl_$ = -76				; size = 4
tv65 = -72						; size = 4
_MessageType$ = -68					; size = 4
_retval$ = -64						; size = 4
_ret$ = -60						; size = 4
_ShiftStates$ = -54					; size = 1
_Key$ = -53						; size = 1
_overme$ = -52						; size = 4
_MouseY$ = -48						; size = 2
_MouseX$ = -44						; size = 2
_this$ = -40						; size = 4
_upme$3 = -36						; size = 16
_dest$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_hwnd$ = 8						; size = 4
_message$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?EventHandler@C_Handler@@QAEJPAUHWND__@@IIJ@Z PROC	; C_Handler::EventHandler
; _this$ = ecx

; 1933 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1934 : 	C_Window *overme;
; 1935 : 	C_Base   *OldMouseControl_;
; 1936 : 	WORD MouseX, MouseY;
; 1937 : 	RECT dest;
; 1938 : 	long retval=1;

	mov	DWORD PTR _retval$[ebp], 1

; 1939 : 	BOOL ret=TRUE;

	mov	DWORD PTR _ret$[ebp], 1

; 1940 : 	unsigned char Key;
; 1941 : 	unsigned char Ascii;
; 1942 : 	unsigned char ShiftStates;
; 1943 : 	long Repeat;
; 1944 : 	long MessageType,DblClk;
; 1945 : 	static int InTimer=0;
; 1946 : 
; 1947 : 	HandlingMessage=message;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _message$[ebp]
	mov	DWORD PTR [eax+3468], ecx

; 1948 : 
; 1949 : 	switch(message)

	mov	edx, DWORD PTR _message$[ebp]
	mov	DWORD PTR tv65[ebp], edx
	cmp	DWORD PTR tv65[ebp], 512		; 00000200H
	ja	SHORT $LN178@EventHandl
	cmp	DWORD PTR tv65[ebp], 512		; 00000200H
	je	$LN112@EventHandl
	cmp	DWORD PTR tv65[ebp], 256		; 00000100H
	ja	SHORT $LN179@EventHandl
	cmp	DWORD PTR tv65[ebp], 256		; 00000100H
	je	$LN29@EventHandl
	cmp	DWORD PTR tv65[ebp], 3
	je	$LN7@EventHandl
	cmp	DWORD PTR tv65[ebp], 15			; 0000000fH
	je	$LN3@EventHandl
	jmp	$LN168@EventHandl
$LN179@EventHandl:
	cmp	DWORD PTR tv65[ebp], 257		; 00000101H
	je	$LN33@EventHandl
	cmp	DWORD PTR tv65[ebp], 260		; 00000104H
	je	$LN29@EventHandl
	cmp	DWORD PTR tv65[ebp], 261		; 00000105H
	je	$LN33@EventHandl
	jmp	$LN168@EventHandl
$LN178@EventHandl:
	cmp	DWORD PTR tv65[ebp], 522		; 0000020aH
	ja	SHORT $LN180@EventHandl
	cmp	DWORD PTR tv65[ebp], 522		; 0000020aH
	je	SHORT $LN167@EventHandl
	mov	eax, DWORD PTR tv65[ebp]
	sub	eax, 513				; 00000201H
	mov	DWORD PTR tv65[ebp], eax
	cmp	DWORD PTR tv65[ebp], 4
	ja	$LN168@EventHandl
	mov	ecx, DWORD PTR tv65[ebp]
	jmp	DWORD PTR $LN181@EventHandl[ecx*4]
$LN180@EventHandl:
	cmp	DWORD PTR tv65[ebp], 6025		; 00001789H
	je	$LN8@EventHandl
	cmp	DWORD PTR tv65[ebp], 6027		; 0000178bH
	je	$LN41@EventHandl
	jmp	$LN168@EventHandl
$LN167@EventHandl:

; 1950 : 	{
; 1951 : 		// sfr: added mouse wheel
; 1952 : 		case WM_MOUSEWHEEL:
; 1953 : 		{	
; 1954 : 			WORD MouseZ;
; 1955 : 			HelpOff();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HelpOff@C_Handler@@AAEXXZ		; C_Handler::HelpOff

; 1956 : 			if(OldInputMessage()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?OldInputMessage@C_Handler@@AAEHXZ	; C_Handler::OldInputMessage
	test	eax, eax
	je	SHORT $LN166@EventHandl

; 1957 : 				retval=0;

	mov	DWORD PTR _retval$[ebp], 0

; 1958 : 				break;

	jmp	$LN168@EventHandl
$LN166@EventHandl:

; 1959 : 			}
; 1960 : 			MessageType=C_TYPE_MOUSEWHEEL;

	mov	DWORD PTR _MessageType$[ebp], 59	; 0000003bH

; 1961 : 
; 1962 : 			// we have to correct mouse position, since this is relative to screen
; 1963 : 			// lparam is cursor x/y (low hi)
; 1964 : 			POINT p;
; 1965 : 			p.x = LOWORD(lParam);

	mov	edx, DWORD PTR _lParam$[ebp]
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	mov	DWORD PTR _p$1[ebp], eax

; 1966 : 			p.y = HIWORD(lParam);

	mov	ecx, DWORD PTR _lParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	mov	DWORD PTR _p$1[ebp+4], edx

; 1967 : 			ScreenToClient(hwnd, &p);

	lea	eax, DWORD PTR _p$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__ScreenToClient@8

; 1968 : 			MouseX = (WORD)p.x;

	mov	dx, WORD PTR _p$1[ebp]
	mov	WORD PTR _MouseX$[ebp], dx

; 1969 : 			MouseY = (WORD)p.y;

	mov	ax, WORD PTR _p$1[ebp+4]
	mov	WORD PTR _MouseY$[ebp], ax

; 1970 : 			overme=GetWindow(MouseX,MouseY);

	movzx	ecx, WORD PTR _MouseY$[ebp]
	push	ecx
	movzx	edx, WORD PTR _MouseX$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWindow@C_Handler@@QAEPAVC_Window@@FF@Z ; C_Handler::GetWindow
	mov	DWORD PTR _overme$[ebp], eax

; 1971 : 			if (overme == NULL){

	cmp	DWORD PTR _overme$[ebp], 0
	jne	SHORT $LN165@EventHandl

; 1972 : 				break; 

	jmp	$LN168@EventHandl
$LN165@EventHandl:

; 1973 : 			}
; 1974 : 
; 1975 : 			// so we are rolling wheel inside an active window
; 1976 : 
; 1977 : 			// grab component we are over
; 1978 : 			if (!GrabItem(MouseX, MouseY, overme, MessageType)){

	mov	eax, DWORD PTR _MessageType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _overme$[ebp]
	push	ecx
	movzx	edx, WORD PTR _MouseY$[ebp]
	push	edx
	movzx	eax, WORD PTR _MouseX$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GrabItem@C_Handler@@QAEHGGPAVC_Window@@J@Z ; C_Handler::GrabItem
	test	eax, eax
	jne	SHORT $LN164@EventHandl

; 1979 : 				break;

	jmp	$LN168@EventHandl
$LN164@EventHandl:

; 1980 : 			}
; 1981 : 
; 1982 : 			// wparam is distance rolled/ key modifiers (low hi)
; 1983 : 			// here we found a component. process event
; 1984 : 			// check hi bit of MouseZ, since word is unsigned
; 1985 : 			MouseZ = 1 << ((sizeof(WORD)*8) -1);

	mov	ecx, 32768				; 00008000H
	mov	WORD PTR _MouseZ$2[ebp], cx

; 1986 : 			MouseZ &= HIWORD(wParam);

	mov	edx, DWORD PTR _wParam$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	movzx	ecx, WORD PTR _MouseZ$2[ebp]
	and	ecx, eax
	mov	WORD PTR _MouseZ$2[ebp], cx

; 1987 : 			// here we invert, since positive in mouse wheel
; 1988 : 			// is forward, and forward is up in screen coordinates (neg values)
; 1989 : 			Grab_.Control_->Wheel(MouseZ ? 1 : -1, MouseX, MouseY);

	movzx	edx, WORD PTR _MouseZ$2[ebp]
	test	edx, edx
	je	SHORT $LN172@EventHandl
	mov	DWORD PTR tv144[ebp], 1
	jmp	SHORT $LN173@EventHandl
$LN172@EventHandl:
	mov	DWORD PTR tv144[ebp], -1
$LN173@EventHandl:
	movzx	eax, WORD PTR _MouseY$[ebp]
	push	eax
	movzx	ecx, WORD PTR _MouseX$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv144[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+200]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+200]
	mov	edx, DWORD PTR [eax+232]
	call	edx

; 1990 : 			ret = TRUE;

	mov	DWORD PTR _ret$[ebp], 1

; 1991 : 		}
; 1992 : 		break;

	jmp	$LN168@EventHandl
$LN163@EventHandl:

; 1993 : 		case WM_LBUTTONDOWN:
; 1994 : 			HelpOff();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HelpOff@C_Handler@@AAEXXZ		; C_Handler::HelpOff

; 1995 : 			if(OldInputMessage())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?OldInputMessage@C_Handler@@AAEHXZ	; C_Handler::OldInputMessage
	test	eax, eax
	je	SHORT $LN162@EventHandl

; 1996 : 			{
; 1997 : 				retval=0;

	mov	DWORD PTR _retval$[ebp], 0

; 1998 : 				break;

	jmp	$LN168@EventHandl
$LN162@EventHandl:

; 1999 : 			}
; 2000 : 			MessageType=C_TYPE_LMOUSEDOWN;

	mov	DWORD PTR _MessageType$[ebp], 51	; 00000033H

; 2001 : 
; 2002 : 			MouseDown_=C_TYPE_LMOUSEDOWN;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+240], 51			; 00000033H

; 2003 : 			MouseDownTime_=GetCurrentTime();

	call	DWORD PTR __imp__GetTickCount@0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+244], eax

; 2004 : 			MouseX = LOWORD(lParam);

	mov	edx, DWORD PTR _lParam$[ebp]
	and	edx, 65535				; 0000ffffH
	mov	WORD PTR _MouseX$[ebp], dx

; 2005 : 			MouseY = HIWORD(lParam);

	mov	eax, DWORD PTR _lParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	mov	WORD PTR _MouseY$[ebp], ax

; 2006 : 			overme=GetWindow(MouseX,MouseY);

	movzx	ecx, WORD PTR _MouseY$[ebp]
	push	ecx
	movzx	edx, WORD PTR _MouseX$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWindow@C_Handler@@QAEPAVC_Window@@FF@Z ; C_Handler::GetWindow
	mov	DWORD PTR _overme$[ebp], eax

; 2007 : 			if(overme == NULL){

	cmp	DWORD PTR _overme$[ebp], 0
	jne	SHORT $LN161@EventHandl

; 2008 : 				retval=0;

	mov	DWORD PTR _retval$[ebp], 0

; 2009 : 				break; 

	jmp	$LN168@EventHandl
$LN161@EventHandl:

; 2010 : 			}
; 2011 : 
; 2012 : 			if(CurWindow_ && CurWindow_ != overme)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+236], 0
	je	SHORT $LN160@EventHandl
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+236]
	cmp	edx, DWORD PTR _overme$[ebp]
	je	SHORT $LN160@EventHandl

; 2013 : 			{
; 2014 : 				CurWindow_->Deactivate();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+236]
	call	?Deactivate@C_Window@@QAEXXZ		; C_Window::Deactivate

; 2015 : 				overme->Activate();

	mov	ecx, DWORD PTR _overme$[ebp]
	call	?Activate@C_Window@@QAEXXZ		; C_Window::Activate
$LN160@EventHandl:

; 2016 : 			}
; 2017 : 
; 2018 : 			CurWindow_=overme;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _overme$[ebp]
	mov	DWORD PTR [ecx+236], edx

; 2019 : 
; 2020 : 			if(gPopupMgr->AMenuOpened() && !overme->IsMenu())

	mov	ecx, DWORD PTR ?gPopupMgr@@3PAVC_PopupMgr@@A ; gPopupMgr
	call	?AMenuOpened@C_PopupMgr@@QAEHXZ		; C_PopupMgr::AMenuOpened
	test	eax, eax
	je	SHORT $LN159@EventHandl
	mov	ecx, DWORD PTR _overme$[ebp]
	call	?IsMenu@C_Window@@QAEJXZ		; C_Window::IsMenu
	test	eax, eax
	jne	SHORT $LN159@EventHandl

; 2021 : 				gPopupMgr->CloseMenu();

	mov	ecx, DWORD PTR ?gPopupMgr@@3PAVC_PopupMgr@@A ; gPopupMgr
	call	?CloseMenu@C_PopupMgr@@QAEXXZ		; C_PopupMgr::CloseMenu
$LN159@EventHandl:

; 2022 : 
; 2023 : 			if(Dragging()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Dragging@C_Handler@@QAEHXZ		; C_Handler::Dragging
	test	eax, eax
	je	SHORT $LN158@EventHandl

; 2024 : 				DropItem(MouseX,MouseY,overme);

	mov	eax, DWORD PTR _overme$[ebp]
	push	eax
	movzx	ecx, WORD PTR _MouseY$[ebp]
	push	ecx
	movzx	edx, WORD PTR _MouseX$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DropItem@C_Handler@@QAEHGGPAVC_Window@@@Z ; C_Handler::DropItem
$LN158@EventHandl:

; 2025 : 			}
; 2026 : 
; 2027 : 			if(GrabItem(MouseX,MouseY,overme,MessageType))

	mov	eax, DWORD PTR _MessageType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _overme$[ebp]
	push	ecx
	movzx	edx, WORD PTR _MouseY$[ebp]
	push	edx
	movzx	eax, WORD PTR _MouseX$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GrabItem@C_Handler@@QAEHGGPAVC_Window@@J@Z ; C_Handler::GrabItem
	test	eax, eax
	je	$LN157@EventHandl

; 2028 : 			{
; 2029 : 				if(MouseCallback_){

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+104], 0
	je	SHORT $LN156@EventHandl

; 2030 : 					ret=(*MouseCallback_)(Grab_.Control_,MouseX,MouseY,overme,(short)MessageType);//!

	movzx	edx, WORD PTR _MessageType$[ebp]
	push	edx
	mov	eax, DWORD PTR _overme$[ebp]
	push	eax
	movzx	ecx, WORD PTR _MouseY$[ebp]
	push	ecx
	movzx	edx, WORD PTR _MouseX$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+200]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+104]
	call	eax
	add	esp, 20					; 00000014H
	mov	DWORD PTR _ret$[ebp], eax

; 2031 : 				}
; 2032 : 				else{

	jmp	SHORT $LN155@EventHandl
$LN156@EventHandl:

; 2033 : 					ret=TRUE;

	mov	DWORD PTR _ret$[ebp], 1
$LN155@EventHandl:

; 2034 : 				}
; 2035 : 
; 2036 : 				if(ret){

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN154@EventHandl

; 2037 : 					overme->SetControl(Grab_.ID_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+172]
	push	edx
	mov	ecx, DWORD PTR _overme$[ebp]
	call	?SetControl@C_Window@@QAEXJ@Z		; C_Window::SetControl

; 2038 : 					WindowToFront(overme);

	mov	eax, DWORD PTR _overme$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WindowToFront@C_Handler@@QAEXPAVC_Window@@@Z ; C_Handler::WindowToFront

; 2039 : 					Grab_.Control_->Process(Grab_.ID_,(short)MessageType);//!

	movzx	ecx, WORD PTR _MessageType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+172]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+200]
	mov	eax, DWORD PTR [edx+200]
	call	eax
$LN154@EventHandl:

; 2040 : 				}
; 2041 : 			}
; 2042 : 			else {

	jmp	SHORT $LN153@EventHandl
$LN157@EventHandl:

; 2043 : 				overme->DeactivateControl();

	mov	ecx, DWORD PTR _overme$[ebp]
	call	?DeactivateControl@C_Window@@QAEXXZ	; C_Window::DeactivateControl

; 2044 : 				if(MouseCallback_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+104], 0
	je	SHORT $LN152@EventHandl

; 2045 : 					ret=(*MouseCallback_)(NULL,MouseX,MouseY,overme,(short)MessageType);//!

	movzx	edx, WORD PTR _MessageType$[ebp]
	push	edx
	mov	eax, DWORD PTR _overme$[ebp]
	push	eax
	movzx	ecx, WORD PTR _MouseY$[ebp]
	push	ecx
	movzx	edx, WORD PTR _MouseX$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	call	ecx
	add	esp, 20					; 00000014H
	mov	DWORD PTR _ret$[ebp], eax
$LN152@EventHandl:

; 2046 : 				if(ret)

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN153@EventHandl

; 2047 : 					WindowToFront(overme);

	mov	edx, DWORD PTR _overme$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WindowToFront@C_Handler@@QAEXPAVC_Window@@@Z ; C_Handler::WindowToFront
$LN153@EventHandl:

; 2048 : 			}
; 2049 : 			retval=0;

	mov	DWORD PTR _retval$[ebp], 0

; 2050 : 			break;

	jmp	$LN168@EventHandl
$LN150@EventHandl:

; 2051 : 		case WM_LBUTTONUP:
; 2052 : 			if(OldInputMessage())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?OldInputMessage@C_Handler@@AAEHXZ	; C_Handler::OldInputMessage
	test	eax, eax
	je	SHORT $LN149@EventHandl

; 2053 : 			{
; 2054 : 				retval=0;

	mov	DWORD PTR _retval$[ebp], 0

; 2055 : 				break;

	jmp	$LN168@EventHandl
$LN149@EventHandl:

; 2056 : 			}
; 2057 : 			MouseDown_=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+240], 0

; 2058 : 			MouseX = LOWORD(lParam);

	mov	ecx, DWORD PTR _lParam$[ebp]
	and	ecx, 65535				; 0000ffffH
	mov	WORD PTR _MouseX$[ebp], cx

; 2059 : 			MouseY = HIWORD(lParam);

	mov	edx, DWORD PTR _lParam$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	mov	WORD PTR _MouseY$[ebp], dx

; 2060 : 			overme=GetWindow(MouseX,MouseY);

	movzx	eax, WORD PTR _MouseY$[ebp]
	push	eax
	movzx	ecx, WORD PTR _MouseX$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWindow@C_Handler@@QAEPAVC_Window@@FF@Z ; C_Handler::GetWindow
	mov	DWORD PTR _overme$[ebp], eax

; 2061 : 			if(overme == NULL)

	cmp	DWORD PTR _overme$[ebp], 0
	jne	SHORT $LN148@EventHandl

; 2062 : 			{
; 2063 : 				retval=0;

	mov	DWORD PTR _retval$[ebp], 0

; 2064 : 				break;

	jmp	$LN168@EventHandl
$LN148@EventHandl:

; 2065 : 			}
; 2066 : 
; 2067 : 			if(LastUp_ == C_TYPE_LMOUSEUP && (GetMessageTime() - LastUpTime_) < DoubleClickTime_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+248], 52			; 00000034H
	jne	SHORT $LN147@EventHandl
	call	DWORD PTR __imp__GetMessageTime@0
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+252]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [edx+256]
	jge	SHORT $LN147@EventHandl

; 2068 : 				DblClk=C_TYPE_LMOUSEDBLCLK;

	mov	DWORD PTR _DblClk$[ebp], 53		; 00000035H

; 2069 : 			else

	jmp	SHORT $LN146@EventHandl
$LN147@EventHandl:

; 2070 : 				DblClk=0;

	mov	DWORD PTR _DblClk$[ebp], 0
$LN146@EventHandl:

; 2071 : 			MessageType=C_TYPE_LMOUSEUP;

	mov	DWORD PTR _MessageType$[ebp], 52	; 00000034H

; 2072 : 			LastUp_=MessageType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _MessageType$[ebp]
	mov	DWORD PTR [eax+248], ecx

; 2073 : 			LastUpTime_=GetMessageTime();

	call	DWORD PTR __imp__GetMessageTime@0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+252], eax

; 2074 : 			if(Dragging()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Dragging@C_Handler@@QAEHXZ		; C_Handler::Dragging
	test	eax, eax
	je	SHORT $LN145@EventHandl

; 2075 : 				DropItem(MouseX,MouseY,overme);

	mov	eax, DWORD PTR _overme$[ebp]
	push	eax
	movzx	ecx, WORD PTR _MouseY$[ebp]
	push	ecx
	movzx	edx, WORD PTR _MouseX$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DropItem@C_Handler@@QAEHGGPAVC_Window@@@Z ; C_Handler::DropItem

; 2076 : 				MessageType=C_TYPE_LDROP;

	mov	DWORD PTR _MessageType$[ebp], 73	; 00000049H
$LN145@EventHandl:

; 2077 : 			}
; 2078 : 
; 2079 : 			if(Grab_.Control_){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+200], 0
	je	$LN144@EventHandl

; 2080 : 				if(this != gMainHandler){

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR ?gMainHandler@@3PAVC_Handler@@A ; gMainHandler
	je	SHORT $LN143@EventHandl

; 2081 : 					ret=TRUE;

	mov	DWORD PTR _ret$[ebp], 1
$LN143@EventHandl:

; 2082 : 				}
; 2083 : 
; 2084 : 				if(MouseCallback_ && Grab_.Control_){

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+104], 0
	je	SHORT $LN142@EventHandl
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+200], 0
	je	SHORT $LN142@EventHandl

; 2085 : 					ret=(*MouseCallback_)(Grab_.Control_,MouseX,MouseY,overme,(short)MessageType);	//!

	movzx	ecx, WORD PTR _MessageType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _overme$[ebp]
	push	edx
	movzx	eax, WORD PTR _MouseY$[ebp]
	push	eax
	movzx	ecx, WORD PTR _MouseX$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+200]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	call	edx
	add	esp, 20					; 00000014H
	mov	DWORD PTR _ret$[ebp], eax

; 2086 : 				}
; 2087 : 				else {

	jmp	SHORT $LN141@EventHandl
$LN142@EventHandl:

; 2088 : 					ret=TRUE;

	mov	DWORD PTR _ret$[ebp], 1
$LN141@EventHandl:

; 2089 : 				}
; 2090 : 
; 2091 : 				if (this != gMainHandler){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR ?gMainHandler@@3PAVC_Handler@@A ; gMainHandler
	je	SHORT $LN140@EventHandl

; 2092 : 					ret=TRUE;

	mov	DWORD PTR _ret$[ebp], 1
$LN140@EventHandl:

; 2093 : 				}
; 2094 : 
; 2095 : 				if(ret && Grab_.Control_){

	cmp	DWORD PTR _ret$[ebp], 0
	je	$LN139@EventHandl
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+200], 0
	je	$LN139@EventHandl

; 2096 : 					if(Grab_.Control_->GetFlags() & C_BIT_ABSOLUTE){

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+200]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 262144				; 00040000H
	je	SHORT $LN138@EventHandl

; 2097 : 						Grab_.Control_->SetRelXY(
; 2098 : 							MouseX-Grab_.Window_->GetX()-Grab_.Control_->GetX(),
; 2099 : 							MouseY-Grab_.Window_->GetY()-Grab_.Control_->GetY()
; 2100 : 						);

	movzx	esi, WORD PTR _MouseY$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	ecx, ax
	sub	esi, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+200]
	call	?GetY@C_Base@@QAEJXZ			; C_Base::GetY
	sub	esi, eax
	push	esi
	movzx	esi, WORD PTR _MouseX$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	ecx, ax
	sub	esi, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+200]
	call	?GetX@C_Base@@QAEJXZ			; C_Base::GetX
	sub	esi, eax
	push	esi
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+200]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+200]
	mov	edx, DWORD PTR [eax+52]
	call	edx

; 2101 : 					}
; 2102 : 					else {

	jmp	$LN137@EventHandl
$LN138@EventHandl:

; 2103 : 						Grab_.Control_->SetRelXY(
; 2104 : 							MouseX-Grab_.Window_->GetX() - 
; 2105 : 							Grab_.Window_->ClientArea_[Grab_.Control_->GetClient()].left -
; 2106 : 							Grab_.Control_->GetX(),
; 2107 : 							MouseY-Grab_.Window_->GetY() -
; 2108 : 							Grab_.Window_->ClientArea_[Grab_.Control_->GetClient()].top -
; 2109 : 							Grab_.Control_->GetY()
; 2110 : 						);

	movzx	esi, WORD PTR _MouseY$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	ecx, ax
	sub	esi, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR [edx+196]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+200]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	ecx, ax
	shl	ecx, 4
	sub	esi, DWORD PTR [edi+ecx+172]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+200]
	call	?GetY@C_Base@@QAEJXZ			; C_Base::GetY
	sub	esi, eax
	push	esi
	movzx	esi, WORD PTR _MouseX$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	ecx, ax
	sub	esi, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR [edx+196]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+200]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	ecx, ax
	shl	ecx, 4
	sub	esi, DWORD PTR [edi+ecx+168]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+200]
	call	?GetX@C_Base@@QAEJXZ			; C_Base::GetX
	sub	esi, eax
	push	esi
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+200]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+200]
	mov	edx, DWORD PTR [eax+52]
	call	edx
$LN137@EventHandl:

; 2111 : 					}
; 2112 : 
; 2113 : 					Grab_.Control_->Process(Grab_.ID_, (short)MessageType);	//!

	movzx	eax, WORD PTR _MessageType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+172]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+200]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+200]
	mov	edx, DWORD PTR [eax+200]
	call	edx

; 2114 : 
; 2115 : 					if(DblClk && Grab_.Control_){

	cmp	DWORD PTR _DblClk$[ebp], 0
	je	SHORT $LN139@EventHandl
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+200], 0
	je	SHORT $LN139@EventHandl

; 2116 : 						Grab_.Control_->Process(Grab_.ID_,(short)DblClk);	//!

	movzx	ecx, WORD PTR _DblClk$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+172]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+200]
	mov	eax, DWORD PTR [edx+200]
	call	eax
$LN139@EventHandl:

; 2117 : 					}
; 2118 : 				}
; 2119 : 
; 2120 : 				if(this != gMainHandler){

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR ?gMainHandler@@3PAVC_Handler@@A ; gMainHandler
	je	SHORT $LN135@EventHandl

; 2121 : 					ret=TRUE;

	mov	DWORD PTR _ret$[ebp], 1
$LN135@EventHandl:

; 2122 : 				}
; 2123 : 
; 2124 : 				Grab_.Control_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+200], 0

; 2125 : 				Grab_.Window_=NULL;				

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+196], 0

; 2126 : 			}
; 2127 : 			else {

	jmp	$LN134@EventHandl
$LN144@EventHandl:

; 2128 : 				overme->DeactivateControl();						 

	mov	ecx, DWORD PTR _overme$[ebp]
	call	?DeactivateControl@C_Window@@QAEXXZ	; C_Window::DeactivateControl

; 2129 : 				if(MouseCallback_){

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+104], 0
	je	SHORT $LN133@EventHandl

; 2130 : 					ret=(*MouseCallback_)(NULL,MouseX,MouseY,overme, (short)MessageType);	//!

	movzx	edx, WORD PTR _MessageType$[ebp]
	push	edx
	mov	eax, DWORD PTR _overme$[ebp]
	push	eax
	movzx	ecx, WORD PTR _MouseY$[ebp]
	push	ecx
	movzx	edx, WORD PTR _MouseX$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	call	ecx
	add	esp, 20					; 00000014H
	mov	DWORD PTR _ret$[ebp], eax
$LN133@EventHandl:

; 2131 : 				}
; 2132 : 				if(ret){

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN132@EventHandl

; 2133 : 					WindowToFront(overme);

	mov	edx, DWORD PTR _overme$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WindowToFront@C_Handler@@QAEXPAVC_Window@@@Z ; C_Handler::WindowToFront
$LN132@EventHandl:

; 2134 : 				}
; 2135 : 
; 2136 : 				if(MouseX < overme->GetX() || MouseY < overme->GetY() || MouseX > (overme->GetX()+overme->GetW()) || MouseY > (overme->GetY()+overme->GetH()))

	movzx	esi, WORD PTR _MouseX$[ebp]
	mov	ecx, DWORD PTR _overme$[ebp]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	cwde
	cmp	esi, eax
	jl	SHORT $LN130@EventHandl
	movzx	esi, WORD PTR _MouseY$[ebp]
	mov	ecx, DWORD PTR _overme$[ebp]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	ecx, ax
	cmp	esi, ecx
	jl	SHORT $LN130@EventHandl
	movzx	esi, WORD PTR _MouseX$[ebp]
	mov	ecx, DWORD PTR _overme$[ebp]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	edi, ax
	mov	ecx, DWORD PTR _overme$[ebp]
	call	?GetW@C_Window@@QAEFXZ			; C_Window::GetW
	movsx	edx, ax
	add	edi, edx
	cmp	esi, edi
	jg	SHORT $LN130@EventHandl
	movzx	esi, WORD PTR _MouseY$[ebp]
	mov	ecx, DWORD PTR _overme$[ebp]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	edi, ax
	mov	ecx, DWORD PTR _overme$[ebp]
	call	?GetH@C_Window@@QAEFXZ			; C_Window::GetH
	cwde
	add	edi, eax
	cmp	esi, edi
	jle	SHORT $LN131@EventHandl
$LN130@EventHandl:

; 2137 : 				{
; 2138 : 					if(overme->GetOwner()){

	mov	ecx, DWORD PTR _overme$[ebp]
	call	?GetOwner@C_Window@@QAEPAVC_Base@@XZ	; C_Window::GetOwner
	test	eax, eax
	je	SHORT $LN131@EventHandl

; 2139 : 						if(overme->GetOwner()->CloseWindow()){

	mov	ecx, DWORD PTR _overme$[ebp]
	call	?GetOwner@C_Window@@QAEPAVC_Base@@XZ	; C_Window::GetOwner
	mov	DWORD PTR tv473[ebp], eax
	mov	ecx, DWORD PTR tv473[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv473[ebp]
	mov	eax, DWORD PTR [edx+204]
	call	eax
	test	eax, eax
	je	SHORT $LN131@EventHandl

; 2140 : 							overme=NULL;

	mov	DWORD PTR _overme$[ebp], 0
$LN131@EventHandl:

; 2141 : 						}
; 2142 : 					}
; 2143 : 				}
; 2144 : 				Grab_.Window_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+196], 0
$LN134@EventHandl:

; 2145 : 			}
; 2146 : 			overme=GetWindow(MouseX,MouseY);

	movzx	edx, WORD PTR _MouseY$[ebp]
	push	edx
	movzx	eax, WORD PTR _MouseX$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWindow@C_Handler@@QAEPAVC_Window@@FF@Z ; C_Handler::GetWindow
	mov	DWORD PTR _overme$[ebp], eax

; 2147 : 			if(overme){

	cmp	DWORD PTR _overme$[ebp], 0
	je	$LN127@EventHandl

; 2148 : 				OverControl_=overme->MouseOver(MouseX-overme->GetX(),MouseY-overme->GetY(),OverControl_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	push	edx
	movzx	esi, WORD PTR _MouseY$[ebp]
	mov	ecx, DWORD PTR _overme$[ebp]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	cwde
	sub	esi, eax
	push	esi
	movzx	esi, WORD PTR _MouseX$[ebp]
	mov	ecx, DWORD PTR _overme$[ebp]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	ecx, ax
	sub	esi, ecx
	push	esi
	mov	ecx, DWORD PTR _overme$[ebp]
	call	?MouseOver@C_Window@@QAEPAVC_Base@@JJPAV2@@Z ; C_Window::MouseOver
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+128], eax

; 2149 : 				if(OverLast_.Control_ != OverControl_){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+132]
	cmp	edx, DWORD PTR [ecx+128]
	je	$LN127@EventHandl

; 2150 : 					HelpOff();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HelpOff@C_Handler@@AAEXXZ		; C_Handler::HelpOff

; 2151 : 					OverLast_.Control_=OverControl_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	DWORD PTR [eax+132], edx

; 2152 : 					if(OverControl_){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+128], 0
	je	SHORT $LN127@EventHandl

; 2153 : 						OverLast_.Time_=GetCurrentTime();

	call	DWORD PTR __imp__GetTickCount@0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+136], eax

; 2154 : 						OverLast_.Tip_=gStringMgr->GetString(OverControl_->GetHelpText());

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+128]
	mov	eax, DWORD PTR [edx+128]
	call	eax
	push	eax
	mov	ecx, DWORD PTR ?gStringMgr@@3PAVC_String@@A ; gStringMgr
	call	?GetString@C_String@@QAEPADJ@Z		; C_String::GetString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+140], eax

; 2155 : 						OverLast_.MouseX_=MouseX;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR _MouseX$[ebp]
	mov	WORD PTR [edx+144], ax

; 2156 : 						OverLast_.MouseY_=MouseY;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR _MouseY$[ebp]
	mov	WORD PTR [ecx+146], dx
$LN127@EventHandl:

; 2157 : 					}
; 2158 : 				}
; 2159 : 			}
; 2160 : 			retval=0;

	mov	DWORD PTR _retval$[ebp], 0

; 2161 : 			break;

	jmp	$LN168@EventHandl

; 2162 : 		case WM_LBUTTONDBLCLK:
; 2163 : 			break;

	jmp	$LN168@EventHandl

; 2164 : 			HelpOff();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HelpOff@C_Handler@@AAEXXZ		; C_Handler::HelpOff

; 2165 : 			if(OldInputMessage()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?OldInputMessage@C_Handler@@AAEHXZ	; C_Handler::OldInputMessage
	test	eax, eax
	je	SHORT $LN123@EventHandl

; 2166 : 				retval=0;

	mov	DWORD PTR _retval$[ebp], 0

; 2167 : 				break;

	jmp	$LN168@EventHandl
$LN123@EventHandl:

; 2168 : 			}
; 2169 : 			MouseX = LOWORD(lParam);

	mov	eax, DWORD PTR _lParam$[ebp]
	and	eax, 65535				; 0000ffffH
	mov	WORD PTR _MouseX$[ebp], ax

; 2170 : 			MouseY = HIWORD(lParam);

	mov	ecx, DWORD PTR _lParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	mov	WORD PTR _MouseY$[ebp], cx

; 2171 : 			overme=GetWindow(MouseX,MouseY);

	movzx	edx, WORD PTR _MouseY$[ebp]
	push	edx
	movzx	eax, WORD PTR _MouseX$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWindow@C_Handler@@QAEPAVC_Window@@FF@Z ; C_Handler::GetWindow
	mov	DWORD PTR _overme$[ebp], eax

; 2172 : 			if(overme == NULL)

	cmp	DWORD PTR _overme$[ebp], 0
	jne	SHORT $LN122@EventHandl

; 2173 : 			{
; 2174 : 				retval=0;

	mov	DWORD PTR _retval$[ebp], 0

; 2175 : 				break;

	jmp	$LN168@EventHandl
$LN122@EventHandl:

; 2176 : 			}
; 2177 : 
; 2178 : 			CurWindow_=overme;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _overme$[ebp]
	mov	DWORD PTR [ecx+236], edx

; 2179 : 
; 2180 : 			if(Dragging())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Dragging@C_Handler@@QAEHXZ		; C_Handler::Dragging
	test	eax, eax
	je	SHORT $LN121@EventHandl

; 2181 : 				DropItem(MouseX,MouseY,overme);

	mov	eax, DWORD PTR _overme$[ebp]
	push	eax
	movzx	ecx, WORD PTR _MouseY$[ebp]
	push	ecx
	movzx	edx, WORD PTR _MouseX$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DropItem@C_Handler@@QAEHGGPAVC_Window@@@Z ; C_Handler::DropItem
$LN121@EventHandl:

; 2182 : 
; 2183 : 			if(GrabItem(MouseX,MouseY,overme,C_TYPE_LMOUSEDBLCLK))

	push	53					; 00000035H
	mov	eax, DWORD PTR _overme$[ebp]
	push	eax
	movzx	ecx, WORD PTR _MouseY$[ebp]
	push	ecx
	movzx	edx, WORD PTR _MouseX$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GrabItem@C_Handler@@QAEHGGPAVC_Window@@J@Z ; C_Handler::GrabItem
	test	eax, eax
	je	$LN120@EventHandl

; 2184 : 			{
; 2185 : 				if(MouseCallback_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+104], 0
	je	SHORT $LN119@EventHandl

; 2186 : 					ret=(*MouseCallback_)(Grab_.Control_,MouseX,MouseY,overme,C_TYPE_LMOUSEDBLCLK);

	push	53					; 00000035H
	mov	ecx, DWORD PTR _overme$[ebp]
	push	ecx
	movzx	edx, WORD PTR _MouseY$[ebp]
	push	edx
	movzx	eax, WORD PTR _MouseX$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+200]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	call	ecx
	add	esp, 20					; 00000014H
	mov	DWORD PTR _ret$[ebp], eax

; 2187 : 				else

	jmp	SHORT $LN118@EventHandl
$LN119@EventHandl:

; 2188 : 					ret=TRUE;

	mov	DWORD PTR _ret$[ebp], 1
$LN118@EventHandl:

; 2189 : 				if(ret)

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN117@EventHandl

; 2190 : 				{
; 2191 : 					overme->SetControl(Grab_.ID_);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+172]
	push	eax
	mov	ecx, DWORD PTR _overme$[ebp]
	call	?SetControl@C_Window@@QAEXJ@Z		; C_Window::SetControl

; 2192 : 					WindowToFront(overme);

	mov	ecx, DWORD PTR _overme$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WindowToFront@C_Handler@@QAEXPAVC_Window@@@Z ; C_Handler::WindowToFront

; 2193 : 					Grab_.Control_->Process(Grab_.ID_,C_TYPE_LMOUSEDBLCLK);

	push	53					; 00000035H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+172]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+200]
	mov	eax, DWORD PTR [edx+200]
	call	eax
$LN117@EventHandl:

; 2194 : 				}
; 2195 : 			}
; 2196 : 			else

	jmp	SHORT $LN116@EventHandl
$LN120@EventHandl:

; 2197 : 			{
; 2198 : 				if(MouseCallback_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+104], 0
	je	SHORT $LN115@EventHandl

; 2199 : 					ret=(*MouseCallback_)(NULL,MouseX,MouseY,overme,C_TYPE_LMOUSEDBLCLK);

	push	53					; 00000035H
	mov	edx, DWORD PTR _overme$[ebp]
	push	edx
	movzx	eax, WORD PTR _MouseY$[ebp]
	push	eax
	movzx	ecx, WORD PTR _MouseX$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+104]
	call	eax
	add	esp, 20					; 00000014H
	mov	DWORD PTR _ret$[ebp], eax

; 2200 : 				else

	jmp	SHORT $LN114@EventHandl
$LN115@EventHandl:

; 2201 : 					ret=TRUE;

	mov	DWORD PTR _ret$[ebp], 1
$LN114@EventHandl:

; 2202 : 				if(ret)

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN113@EventHandl

; 2203 : 					WindowToFront(overme);

	mov	ecx, DWORD PTR _overme$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WindowToFront@C_Handler@@QAEXPAVC_Window@@@Z ; C_Handler::WindowToFront
$LN113@EventHandl:

; 2204 : 				Grab_.Window_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+196], 0
$LN116@EventHandl:

; 2205 : 			}
; 2206 : 			retval=0;

	mov	DWORD PTR _retval$[ebp], 0

; 2207 : 			break;

	jmp	$LN168@EventHandl
$LN112@EventHandl:

; 2208 : 		case WM_MOUSEMOVE:
; 2209 : 			HelpOff();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HelpOff@C_Handler@@AAEXXZ		; C_Handler::HelpOff

; 2210 : 			if(OldInputMessage())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?OldInputMessage@C_Handler@@AAEHXZ	; C_Handler::OldInputMessage
	test	eax, eax
	je	SHORT $LN111@EventHandl

; 2211 : 			{
; 2212 : 				retval=0;

	mov	DWORD PTR _retval$[ebp], 0

; 2213 : 				break;

	jmp	$LN168@EventHandl
$LN111@EventHandl:

; 2214 : 			}
; 2215 : 			MessageType=C_TYPE_MOUSEMOVE;

	mov	DWORD PTR _MessageType$[ebp], 61	; 0000003dH

; 2216 : 			LastUp_=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+248], 0

; 2217 : 			LastUpTime_=0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+252], 0

; 2218 : 			OldMouseControl_=MouseControl_;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+260]
	mov	DWORD PTR _OldMouseControl_$[ebp], eax

; 2219 : 			MouseX = LOWORD(lParam);

	mov	ecx, DWORD PTR _lParam$[ebp]
	and	ecx, 65535				; 0000ffffH
	mov	WORD PTR _MouseX$[ebp], cx

; 2220 : 			MouseY = HIWORD(lParam);

	mov	edx, DWORD PTR _lParam$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	mov	WORD PTR _MouseY$[ebp], dx

; 2221 : 			overme=GetWindow(MouseX,MouseY);

	movzx	eax, WORD PTR _MouseY$[ebp]
	push	eax
	movzx	ecx, WORD PTR _MouseX$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWindow@C_Handler@@QAEPAVC_Window@@FF@Z ; C_Handler::GetWindow
	mov	DWORD PTR _overme$[ebp], eax

; 2222 : 			if(overme == NULL)

	cmp	DWORD PTR _overme$[ebp], 0
	jne	SHORT $LN110@EventHandl

; 2223 : 			{
; 2224 : 				if(OldMouseControl_ && OldMouseControl_->GetFlags() & C_BIT_MOUSEOVER)

	cmp	DWORD PTR _OldMouseControl_$[ebp], 0
	je	SHORT $LN109@EventHandl
	mov	ecx, DWORD PTR _OldMouseControl_$[ebp]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 268435456				; 10000000H
	je	SHORT $LN109@EventHandl

; 2225 : 				{
; 2226 : 					OldMouseControl_->SetMouseOver(0);

	push	0
	mov	edx, DWORD PTR _OldMouseControl_$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _OldMouseControl_$[ebp]
	mov	edx, DWORD PTR [eax+88]
	call	edx

; 2227 : 					OldMouseControl_->Refresh();

	mov	eax, DWORD PTR _OldMouseControl_$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _OldMouseControl_$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN109@EventHandl:

; 2228 : 				}
; 2229 : 				retval=0;

	mov	DWORD PTR _retval$[ebp], 0

; 2230 : 				break; 

	jmp	$LN168@EventHandl
$LN110@EventHandl:

; 2231 : 			}
; 2232 : 
; 2233 : 			if(!Dragging() && (Grab_.Control_ || Grab_.Window_) && Grab_.GrabType_ == C_TYPE_LMOUSEDOWN)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Dragging@C_Handler@@QAEHXZ		; C_Handler::Dragging
	test	eax, eax
	jne	SHORT $LN108@EventHandl
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+200], 0
	jne	SHORT $LN107@EventHandl
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+196], 0
	je	SHORT $LN108@EventHandl
$LN107@EventHandl:
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+192], 51			; 00000033H
	jne	SHORT $LN108@EventHandl

; 2234 : 				StartDrag();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?StartDrag@C_Handler@@QAEXXZ		; C_Handler::StartDrag
$LN108@EventHandl:

; 2235 : 
; 2236 : 			if(Dragging())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Dragging@C_Handler@@QAEHXZ		; C_Handler::Dragging
	test	eax, eax
	je	$LN106@EventHandl

; 2237 : 			{
; 2238 : 				if(DragItem(MouseX,MouseY,overme) && Drag_.Control_)

	mov	ecx, DWORD PTR _overme$[ebp]
	push	ecx
	movzx	edx, WORD PTR _MouseY$[ebp]
	push	edx
	movzx	eax, WORD PTR _MouseX$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DragItem@C_Handler@@QAEHGGPAVC_Window@@@Z ; C_Handler::DragItem
	test	eax, eax
	je	SHORT $LN105@EventHandl
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+232], 0
	je	SHORT $LN105@EventHandl

; 2239 : 					Drag_.Window_->RefreshWindow();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+228]
	call	?RefreshWindow@C_Window@@QAEXXZ		; C_Window::RefreshWindow
$LN105@EventHandl:

; 2240 : 				OverControl_=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+128], 0

; 2241 : 				if(Drag_.Control_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+232], 0
	je	$LN104@EventHandl

; 2242 : 				{
; 2243 : 					if(Drag_.Control_->GetDragCursorID())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+232]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+232]
	mov	eax, DWORD PTR [edx+144]
	call	eax
	test	eax, eax
	je	SHORT $LN103@EventHandl

; 2244 : 						SetCursor(gCursors[Drag_.Control_->GetDragCursorID()]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+232]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+232]
	mov	eax, DWORD PTR [edx+144]
	call	eax
	mov	ecx, DWORD PTR ?gCursors@@3PAPAUHICON__@@A[eax*4]
	push	ecx
	call	DWORD PTR __imp__SetCursor@4
	jmp	SHORT $LN102@EventHandl
$LN103@EventHandl:

; 2245 : 					else if(Drag_.Control_->GetCursorID())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+232]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+232]
	mov	eax, DWORD PTR [edx+140]
	call	eax
	test	eax, eax
	je	SHORT $LN101@EventHandl

; 2246 : 						SetCursor(gCursors[Drag_.Control_->GetCursorID()]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+232]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+232]
	mov	eax, DWORD PTR [edx+140]
	call	eax
	mov	ecx, DWORD PTR ?gCursors@@3PAPAUHICON__@@A[eax*4]
	push	ecx
	call	DWORD PTR __imp__SetCursor@4

; 2247 : 					else

	jmp	SHORT $LN102@EventHandl
$LN101@EventHandl:

; 2248 : 						SetCursor(gCursors[overme->GetCursorID()]);

	mov	ecx, DWORD PTR _overme$[ebp]
	call	?GetCursorID@C_Window@@QAEJXZ		; C_Window::GetCursorID
	mov	edx, DWORD PTR ?gCursors@@3PAPAUHICON__@@A[eax*4]
	push	edx
	call	DWORD PTR __imp__SetCursor@4
$LN102@EventHandl:

; 2249 : 				}
; 2250 : 				else

	jmp	SHORT $LN99@EventHandl
$LN104@EventHandl:

; 2251 : 					SetCursor(gCursors[overme->GetCursorID()]);

	mov	ecx, DWORD PTR _overme$[ebp]
	call	?GetCursorID@C_Window@@QAEJXZ		; C_Window::GetCursorID
	mov	eax, DWORD PTR ?gCursors@@3PAPAUHICON__@@A[eax*4]
	push	eax
	call	DWORD PTR __imp__SetCursor@4
$LN99@EventHandl:
	jmp	$LN98@EventHandl
$LN106@EventHandl:

; 2252 : 			}
; 2253 : 			else if(MouseDown_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+240], 0
	je	$LN97@EventHandl

; 2254 : 			{
; 2255 : 				if(Grab_.Control_ && Grab_.Window_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+200], 0
	je	$LN96@EventHandl
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+196], 0
	je	$LN96@EventHandl

; 2256 : 				{
; 2257 : 					if(Grab_.Control_->GetFlags() & C_BIT_ABSOLUTE)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+200]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 262144				; 00040000H
	je	SHORT $LN95@EventHandl

; 2258 : 						Grab_.Control_->SetRelXY(MouseX-Grab_.Window_->GetX()-Grab_.Control_->GetX(),MouseY-Grab_.Window_->GetY()-Grab_.Control_->GetY());

	movzx	esi, WORD PTR _MouseY$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+196]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	cwde
	sub	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+200]
	call	?GetY@C_Base@@QAEJXZ			; C_Base::GetY
	sub	esi, eax
	push	esi
	movzx	esi, WORD PTR _MouseX$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+196]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	cwde
	sub	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+200]
	call	?GetX@C_Base@@QAEJXZ			; C_Base::GetX
	sub	esi, eax
	push	esi
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+200]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [edx+52]
	call	eax

; 2259 : 					else

	jmp	$LN96@EventHandl
$LN95@EventHandl:

; 2260 : 						Grab_.Control_->SetRelXY(MouseX-Grab_.Window_->GetX()
; 2261 : 													   -Grab_.Window_->ClientArea_[Grab_.Control_->GetClient()].left
; 2262 : 													   -Grab_.Control_->GetX(),
; 2263 : 												 MouseY-Grab_.Window_->GetY()
; 2264 : 													   -Grab_.Window_->ClientArea_[Grab_.Control_->GetClient()].top
; 2265 : 												       -Grab_.Control_->GetY());

	movzx	esi, WORD PTR _MouseY$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+196]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	edx, ax
	sub	esi, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR [eax+196]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+200]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	edx, ax
	shl	edx, 4
	sub	esi, DWORD PTR [edi+edx+172]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+200]
	call	?GetY@C_Base@@QAEJXZ			; C_Base::GetY
	sub	esi, eax
	push	esi
	movzx	esi, WORD PTR _MouseX$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+196]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	edx, ax
	sub	esi, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR [eax+196]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+200]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	edx, ax
	shl	edx, 4
	sub	esi, DWORD PTR [edi+edx+168]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+200]
	call	?GetX@C_Base@@QAEJXZ			; C_Base::GetX
	sub	esi, eax
	push	esi
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+200]
	mov	eax, DWORD PTR [edx+52]
	call	eax
$LN96@EventHandl:

; 2266 : 				}
; 2267 : 				OverControl_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+128], 0

; 2268 : 			}
; 2269 : 			else

	jmp	$LN98@EventHandl
$LN97@EventHandl:

; 2270 : 			{
; 2271 : 				MouseControl_=overme->MouseOver(MouseX-overme->GetX(),MouseY-overme->GetY(),OldMouseControl_);

	mov	edx, DWORD PTR _OldMouseControl_$[ebp]
	push	edx
	movzx	esi, WORD PTR _MouseY$[ebp]
	mov	ecx, DWORD PTR _overme$[ebp]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	cwde
	sub	esi, eax
	push	esi
	movzx	esi, WORD PTR _MouseX$[ebp]
	mov	ecx, DWORD PTR _overme$[ebp]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	ecx, ax
	sub	esi, ecx
	push	esi
	mov	ecx, DWORD PTR _overme$[ebp]
	call	?MouseOver@C_Window@@QAEPAVC_Base@@JJPAV2@@Z ; C_Window::MouseOver
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+260], eax

; 2272 : 				if(OldMouseControl_ && MouseControl_ != OldMouseControl_ && OldMouseControl_->GetFlags() & C_BIT_MOUSEOVER)

	cmp	DWORD PTR _OldMouseControl_$[ebp], 0
	je	SHORT $LN92@EventHandl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	cmp	ecx, DWORD PTR _OldMouseControl_$[ebp]
	je	SHORT $LN92@EventHandl
	mov	ecx, DWORD PTR _OldMouseControl_$[ebp]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 268435456				; 10000000H
	je	SHORT $LN92@EventHandl

; 2273 : 				{
; 2274 : 					OldMouseControl_->SetMouseOver(0);

	push	0
	mov	edx, DWORD PTR _OldMouseControl_$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _OldMouseControl_$[ebp]
	mov	edx, DWORD PTR [eax+88]
	call	edx

; 2275 : 					OldMouseControl_->Refresh();

	mov	eax, DWORD PTR _OldMouseControl_$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _OldMouseControl_$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN92@EventHandl:

; 2276 : 				}
; 2277 : 				if(MouseControl_ && MouseControl_ != OldMouseControl_ && MouseControl_->GetFlags() & C_BIT_MOUSEOVER)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+260], 0
	je	SHORT $LN91@EventHandl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+260]
	cmp	eax, DWORD PTR _OldMouseControl_$[ebp]
	je	SHORT $LN91@EventHandl
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+260]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 268435456				; 10000000H
	je	SHORT $LN91@EventHandl

; 2278 : 				{
; 2279 : 					MouseControl_->SetMouseOver(1);

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+260]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+260]
	mov	eax, DWORD PTR [edx+88]
	call	eax

; 2280 : 					MouseControl_->Refresh();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+260]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+260]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN91@EventHandl:

; 2281 : 				}
; 2282 : 				OverControl_=MouseControl_;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+260]
	mov	DWORD PTR [ecx+128], eax

; 2283 : 				if(OverControl_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+128], 0
	je	SHORT $LN90@EventHandl

; 2284 : 				{
; 2285 : 					if(OverControl_->GetCursorID())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+128]
	mov	eax, DWORD PTR [edx+140]
	call	eax
	test	eax, eax
	je	SHORT $LN89@EventHandl

; 2286 : 						SetCursor(gCursors[OverControl_->GetCursorID()]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+128]
	mov	eax, DWORD PTR [edx+140]
	call	eax
	mov	ecx, DWORD PTR ?gCursors@@3PAPAUHICON__@@A[eax*4]
	push	ecx
	call	DWORD PTR __imp__SetCursor@4

; 2287 : 					else

	jmp	SHORT $LN88@EventHandl
$LN89@EventHandl:

; 2288 : 						SetCursor(gCursors[overme->GetCursorID()]);

	mov	ecx, DWORD PTR _overme$[ebp]
	call	?GetCursorID@C_Window@@QAEJXZ		; C_Window::GetCursorID
	mov	edx, DWORD PTR ?gCursors@@3PAPAUHICON__@@A[eax*4]
	push	edx
	call	DWORD PTR __imp__SetCursor@4
$LN88@EventHandl:

; 2289 : 				}
; 2290 : 				else

	jmp	SHORT $LN98@EventHandl
$LN90@EventHandl:

; 2291 : 				{
; 2292 : 					SetCursor(gCursors[overme->GetCursorID()]);

	mov	ecx, DWORD PTR _overme$[ebp]
	call	?GetCursorID@C_Window@@QAEJXZ		; C_Window::GetCursorID
	mov	eax, DWORD PTR ?gCursors@@3PAPAUHICON__@@A[eax*4]
	push	eax
	call	DWORD PTR __imp__SetCursor@4
$LN98@EventHandl:

; 2293 : 				}
; 2294 : 			}
; 2295 : 			if(OverLast_.Control_ != OverControl_)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+132]
	cmp	eax, DWORD PTR [edx+128]
	je	$LN86@EventHandl

; 2296 : 			{
; 2297 : 				HelpOff();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HelpOff@C_Handler@@AAEXXZ		; C_Handler::HelpOff

; 2298 : 				OverLast_.Control_=OverControl_;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	DWORD PTR [ecx+132], eax

; 2299 : 				if(OverControl_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+128], 0
	je	SHORT $LN86@EventHandl

; 2300 : 				{
; 2301 : 					OverLast_.Time_=GetCurrentTime();

	call	DWORD PTR __imp__GetTickCount@0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+136], eax

; 2302 : 					OverLast_.Tip_=gStringMgr->GetString(OverControl_->GetHelpText());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+128]
	mov	edx, DWORD PTR [eax+128]
	call	edx
	push	eax
	mov	ecx, DWORD PTR ?gStringMgr@@3PAVC_String@@A ; gStringMgr
	call	?GetString@C_String@@QAEPADJ@Z		; C_String::GetString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+140], eax

; 2303 : 					OverLast_.MouseX_=MouseX;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR _MouseX$[ebp]
	mov	WORD PTR [edx+144], ax

; 2304 : 					OverLast_.MouseY_=MouseY;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR _MouseY$[ebp]
	mov	WORD PTR [ecx+146], dx
$LN86@EventHandl:

; 2305 : 				}
; 2306 : 			}
; 2307 : 
; 2308 : 			if(MouseCallback_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+104], 0
	je	SHORT $LN84@EventHandl

; 2309 : 				(*MouseCallback_)(NULL,MouseX,MouseY,overme,(short)MessageType);	//!

	movzx	ecx, WORD PTR _MessageType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _overme$[ebp]
	push	edx
	movzx	eax, WORD PTR _MouseY$[ebp]
	push	eax
	movzx	ecx, WORD PTR _MouseX$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+104]
	call	eax
	add	esp, 20					; 00000014H
$LN84@EventHandl:

; 2310 : 
; 2311 : 			retval=0;

	mov	DWORD PTR _retval$[ebp], 0

; 2312 : 			break;

	jmp	$LN168@EventHandl
$LN83@EventHandl:

; 2313 : 		case WM_RBUTTONDOWN:
; 2314 : 			HelpOff();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HelpOff@C_Handler@@AAEXXZ		; C_Handler::HelpOff

; 2315 : 			if(OldInputMessage())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?OldInputMessage@C_Handler@@AAEHXZ	; C_Handler::OldInputMessage
	test	eax, eax
	je	SHORT $LN82@EventHandl

; 2316 : 			{
; 2317 : 				retval=0;

	mov	DWORD PTR _retval$[ebp], 0

; 2318 : 				break;

	jmp	$LN168@EventHandl
$LN82@EventHandl:

; 2319 : 			}
; 2320 : 			MessageType=C_TYPE_RMOUSEDOWN;

	mov	DWORD PTR _MessageType$[ebp], 54	; 00000036H

; 2321 : 
; 2322 : 			MouseX = LOWORD(lParam);

	mov	ecx, DWORD PTR _lParam$[ebp]
	and	ecx, 65535				; 0000ffffH
	mov	WORD PTR _MouseX$[ebp], cx

; 2323 : 			MouseY = HIWORD(lParam);

	mov	edx, DWORD PTR _lParam$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	mov	WORD PTR _MouseY$[ebp], dx

; 2324 : 			overme=GetWindow(MouseX,MouseY);

	movzx	eax, WORD PTR _MouseY$[ebp]
	push	eax
	movzx	ecx, WORD PTR _MouseX$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWindow@C_Handler@@QAEPAVC_Window@@FF@Z ; C_Handler::GetWindow
	mov	DWORD PTR _overme$[ebp], eax

; 2325 : 			if(overme == NULL)

	cmp	DWORD PTR _overme$[ebp], 0
	jne	SHORT $LN81@EventHandl

; 2326 : 			{
; 2327 : 				retval=0;

	mov	DWORD PTR _retval$[ebp], 0

; 2328 : 				break; 

	jmp	$LN168@EventHandl
$LN81@EventHandl:

; 2329 : 			}
; 2330 : 
; 2331 : 			if(CurWindow_ && CurWindow_ != overme)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+236], 0
	je	SHORT $LN80@EventHandl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+236]
	cmp	ecx, DWORD PTR _overme$[ebp]
	je	SHORT $LN80@EventHandl

; 2332 : 			{
; 2333 : 				CurWindow_->Deactivate();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+236]
	call	?Deactivate@C_Window@@QAEXXZ		; C_Window::Deactivate

; 2334 : 				overme->Activate();

	mov	ecx, DWORD PTR _overme$[ebp]
	call	?Activate@C_Window@@QAEXXZ		; C_Window::Activate
$LN80@EventHandl:

; 2335 : 			}
; 2336 : 
; 2337 : 			CurWindow_=overme;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _overme$[ebp]
	mov	DWORD PTR [eax+236], ecx

; 2338 : 
; 2339 : 			if(Dragging())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Dragging@C_Handler@@QAEHXZ		; C_Handler::Dragging
	test	eax, eax
	je	SHORT $LN79@EventHandl

; 2340 : 				DropItem(MouseX,MouseY,overme);

	mov	edx, DWORD PTR _overme$[ebp]
	push	edx
	movzx	eax, WORD PTR _MouseY$[ebp]
	push	eax
	movzx	ecx, WORD PTR _MouseX$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DropItem@C_Handler@@QAEHGGPAVC_Window@@@Z ; C_Handler::DropItem
$LN79@EventHandl:

; 2341 : 
; 2342 : 			if(GrabItem(MouseX,MouseY,overme,MessageType))

	mov	edx, DWORD PTR _MessageType$[ebp]
	push	edx
	mov	eax, DWORD PTR _overme$[ebp]
	push	eax
	movzx	ecx, WORD PTR _MouseY$[ebp]
	push	ecx
	movzx	edx, WORD PTR _MouseX$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GrabItem@C_Handler@@QAEHGGPAVC_Window@@J@Z ; C_Handler::GrabItem
	test	eax, eax
	je	$LN78@EventHandl

; 2343 : 			{
; 2344 : 				if(MouseCallback_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+104], 0
	je	SHORT $LN77@EventHandl

; 2345 : 					ret=(*MouseCallback_)(Grab_.Control_,MouseX,MouseY,overme,(short)MessageType); //!

	movzx	ecx, WORD PTR _MessageType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _overme$[ebp]
	push	edx
	movzx	eax, WORD PTR _MouseY$[ebp]
	push	eax
	movzx	ecx, WORD PTR _MouseX$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+200]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	call	edx
	add	esp, 20					; 00000014H
	mov	DWORD PTR _ret$[ebp], eax

; 2346 : 				else

	jmp	SHORT $LN76@EventHandl
$LN77@EventHandl:

; 2347 : 					ret=TRUE;

	mov	DWORD PTR _ret$[ebp], 1
$LN76@EventHandl:

; 2348 : 				if(ret)

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN75@EventHandl

; 2349 : 				{
; 2350 : 					overme->SetControl(Grab_.ID_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	push	ecx
	mov	ecx, DWORD PTR _overme$[ebp]
	call	?SetControl@C_Window@@QAEXJ@Z		; C_Window::SetControl

; 2351 : 					WindowToFront(overme);

	mov	edx, DWORD PTR _overme$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WindowToFront@C_Handler@@QAEXPAVC_Window@@@Z ; C_Handler::WindowToFront

; 2352 : 					Grab_.Control_->Process(Grab_.ID_,(short)MessageType);	//!

	movzx	eax, WORD PTR _MessageType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+172]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+200]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+200]
	mov	edx, DWORD PTR [eax+200]
	call	edx
$LN75@EventHandl:

; 2353 : 				}
; 2354 : 			}
; 2355 : 			else

	jmp	SHORT $LN74@EventHandl
$LN78@EventHandl:

; 2356 : 			{
; 2357 : 				overme->DeactivateControl();

	mov	ecx, DWORD PTR _overme$[ebp]
	call	?DeactivateControl@C_Window@@QAEXXZ	; C_Window::DeactivateControl

; 2358 : 				if(MouseCallback_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+104], 0
	je	SHORT $LN73@EventHandl

; 2359 : 					ret=(*MouseCallback_)(NULL,MouseX,MouseY,overme,(short)MessageType);//!

	movzx	ecx, WORD PTR _MessageType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _overme$[ebp]
	push	edx
	movzx	eax, WORD PTR _MouseY$[ebp]
	push	eax
	movzx	ecx, WORD PTR _MouseX$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+104]
	call	eax
	add	esp, 20					; 00000014H
	mov	DWORD PTR _ret$[ebp], eax

; 2360 : 				else

	jmp	SHORT $LN72@EventHandl
$LN73@EventHandl:

; 2361 : 					ret=TRUE;

	mov	DWORD PTR _ret$[ebp], 1
$LN72@EventHandl:

; 2362 : //				if(ret)
; 2363 : //					WindowToFront(overme);
; 2364 : 				Grab_.Window_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+196], 0
$LN74@EventHandl:

; 2365 : 			}
; 2366 : 			retval=0;

	mov	DWORD PTR _retval$[ebp], 0

; 2367 : 			break;

	jmp	$LN168@EventHandl
$LN71@EventHandl:

; 2368 : 		case WM_RBUTTONUP:
; 2369 : 			if(OldInputMessage())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?OldInputMessage@C_Handler@@AAEHXZ	; C_Handler::OldInputMessage
	test	eax, eax
	je	SHORT $LN70@EventHandl

; 2370 : 			{
; 2371 : 				retval=0;

	mov	DWORD PTR _retval$[ebp], 0

; 2372 : 				break;

	jmp	$LN168@EventHandl
$LN70@EventHandl:

; 2373 : 			}
; 2374 : 			if(LastUp_ == C_TYPE_RMOUSEUP && (GetMessageTime() - LastUpTime_) < DoubleClickTime_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+248], 55			; 00000037H
	jne	SHORT $LN69@EventHandl
	call	DWORD PTR __imp__GetMessageTime@0
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+252]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [edx+256]
	jge	SHORT $LN69@EventHandl

; 2375 : 				DblClk=C_TYPE_RMOUSEDBLCLK;

	mov	DWORD PTR _DblClk$[ebp], 56		; 00000038H

; 2376 : 			else

	jmp	SHORT $LN68@EventHandl
$LN69@EventHandl:

; 2377 : 				DblClk=0;

	mov	DWORD PTR _DblClk$[ebp], 0
$LN68@EventHandl:

; 2378 : 			MessageType=C_TYPE_RMOUSEUP;

	mov	DWORD PTR _MessageType$[ebp], 55	; 00000037H

; 2379 : 			LastUp_=MessageType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _MessageType$[ebp]
	mov	DWORD PTR [eax+248], ecx

; 2380 : 			LastUpTime_=GetMessageTime();

	call	DWORD PTR __imp__GetMessageTime@0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+252], eax

; 2381 : 
; 2382 : 			MouseDown_=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+240], 0

; 2383 : 			MouseX = LOWORD(lParam);

	mov	ecx, DWORD PTR _lParam$[ebp]
	and	ecx, 65535				; 0000ffffH
	mov	WORD PTR _MouseX$[ebp], cx

; 2384 : 			MouseY = HIWORD(lParam);

	mov	edx, DWORD PTR _lParam$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	mov	WORD PTR _MouseY$[ebp], dx

; 2385 : 			overme=GetWindow(MouseX,MouseY);

	movzx	eax, WORD PTR _MouseY$[ebp]
	push	eax
	movzx	ecx, WORD PTR _MouseX$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWindow@C_Handler@@QAEPAVC_Window@@FF@Z ; C_Handler::GetWindow
	mov	DWORD PTR _overme$[ebp], eax

; 2386 : 			if(overme == NULL)

	cmp	DWORD PTR _overme$[ebp], 0
	jne	SHORT $LN67@EventHandl

; 2387 : 			{
; 2388 : 				retval=0;

	mov	DWORD PTR _retval$[ebp], 0

; 2389 : 				break; 

	jmp	$LN168@EventHandl
$LN67@EventHandl:

; 2390 : 			}
; 2391 : 
; 2392 : 			if(Dragging())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Dragging@C_Handler@@QAEHXZ		; C_Handler::Dragging
	test	eax, eax
	je	SHORT $LN66@EventHandl

; 2393 : 			{
; 2394 : 				DropItem(MouseX,MouseY,overme);

	mov	edx, DWORD PTR _overme$[ebp]
	push	edx
	movzx	eax, WORD PTR _MouseY$[ebp]
	push	eax
	movzx	ecx, WORD PTR _MouseX$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DropItem@C_Handler@@QAEHGGPAVC_Window@@@Z ; C_Handler::DropItem
	jmp	$LN65@EventHandl
$LN66@EventHandl:

; 2395 : 			}
; 2396 : 			else if(Grab_.Control_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+200], 0
	je	$LN64@EventHandl

; 2397 : 			{
; 2398 : 				if(MouseCallback_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+104], 0
	je	SHORT $LN63@EventHandl

; 2399 : 					ret=(*MouseCallback_)(Grab_.Control_,MouseX,MouseY,overme,(short)MessageType);//!

	movzx	ecx, WORD PTR _MessageType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _overme$[ebp]
	push	edx
	movzx	eax, WORD PTR _MouseY$[ebp]
	push	eax
	movzx	ecx, WORD PTR _MouseX$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+200]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	call	edx
	add	esp, 20					; 00000014H
	mov	DWORD PTR _ret$[ebp], eax

; 2400 : 				else

	jmp	SHORT $LN62@EventHandl
$LN63@EventHandl:

; 2401 : 					ret=TRUE;

	mov	DWORD PTR _ret$[ebp], 1
$LN62@EventHandl:

; 2402 : 				if(ret && overme->IsMenu())

	cmp	DWORD PTR _ret$[ebp], 0
	je	$LN61@EventHandl
	mov	ecx, DWORD PTR _overme$[ebp]
	call	?IsMenu@C_Window@@QAEJXZ		; C_Window::IsMenu
	test	eax, eax
	je	SHORT $LN61@EventHandl

; 2403 : 				{
; 2404 : 					Grab_.Control_->Process(Grab_.ID_,(short)MessageType);	//!

	movzx	eax, WORD PTR _MessageType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+172]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+200]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+200]
	mov	edx, DWORD PTR [eax+200]
	call	edx

; 2405 : 					if(DblClk && Grab_.Control_)

	cmp	DWORD PTR _DblClk$[ebp], 0
	je	SHORT $LN60@EventHandl
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+200], 0
	je	SHORT $LN60@EventHandl

; 2406 : 						Grab_.Control_->Process(Grab_.ID_,(short)DblClk);	//!

	movzx	ecx, WORD PTR _DblClk$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+172]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+200]
	mov	eax, DWORD PTR [edx+200]
	call	eax
$LN60@EventHandl:

; 2407 : 
; 2408 : 					Grab_.Control_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+200], 0
	jmp	$LN59@EventHandl
$LN61@EventHandl:

; 2409 : 				}
; 2410 : 				else if(UI_ABS(MouseX - Grab_.StartX_) < 3 && UI_ABS(MouseY - Grab_.StartY_) < 3)

	movzx	edx, WORD PTR _MouseX$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	sub	edx, DWORD PTR [eax+176]
	jns	SHORT $LN174@EventHandl
	movzx	ecx, WORD PTR _MouseX$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	sub	ecx, DWORD PTR [edx+176]
	neg	ecx
	mov	DWORD PTR tv1142[ebp], ecx
	jmp	SHORT $LN175@EventHandl
$LN174@EventHandl:
	movzx	eax, WORD PTR _MouseX$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+176]
	mov	DWORD PTR tv1142[ebp], eax
$LN175@EventHandl:
	cmp	DWORD PTR tv1142[ebp], 3
	jge	SHORT $LN59@EventHandl
	movzx	edx, WORD PTR _MouseY$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	sub	edx, DWORD PTR [eax+180]
	jns	SHORT $LN176@EventHandl
	movzx	ecx, WORD PTR _MouseY$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	sub	ecx, DWORD PTR [edx+180]
	neg	ecx
	mov	DWORD PTR tv1158[ebp], ecx
	jmp	SHORT $LN177@EventHandl
$LN176@EventHandl:
	movzx	eax, WORD PTR _MouseY$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+180]
	mov	DWORD PTR tv1158[ebp], eax
$LN177@EventHandl:
	cmp	DWORD PTR tv1158[ebp], 3
	jge	SHORT $LN59@EventHandl

; 2411 : 					gPopupMgr->OpenMenu(Grab_.Control_->GetMenu(),MouseX,MouseY,Grab_.Control_);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+200]
	push	eax
	movzx	ecx, WORD PTR _MouseY$[ebp]
	push	ecx
	movzx	edx, WORD PTR _MouseX$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+200]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+200]
	mov	edx, DWORD PTR [eax+120]
	call	edx
	push	eax
	mov	ecx, DWORD PTR ?gPopupMgr@@3PAVC_PopupMgr@@A ; gPopupMgr
	call	?OpenMenu@C_PopupMgr@@QAEHJJJPAVC_Base@@@Z ; C_PopupMgr::OpenMenu
$LN59@EventHandl:

; 2412 : 			}
; 2413 : 			else

	jmp	SHORT $LN65@EventHandl
$LN64@EventHandl:

; 2414 : 			{
; 2415 : 				overme->DeactivateControl();

	mov	ecx, DWORD PTR _overme$[ebp]
	call	?DeactivateControl@C_Window@@QAEXXZ	; C_Window::DeactivateControl

; 2416 : 				if(MouseCallback_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+104], 0
	je	SHORT $LN56@EventHandl

; 2417 : 					ret=(*MouseCallback_)(NULL,MouseX,MouseY,overme,(short)MessageType); //!

	movzx	ecx, WORD PTR _MessageType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _overme$[ebp]
	push	edx
	movzx	eax, WORD PTR _MouseY$[ebp]
	push	eax
	movzx	ecx, WORD PTR _MouseX$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+104]
	call	eax
	add	esp, 20					; 00000014H
	mov	DWORD PTR _ret$[ebp], eax
$LN56@EventHandl:

; 2418 : 
; 2419 : 				gPopupMgr->OpenWindowMenu(overme,MouseX,MouseY);

	movzx	ecx, WORD PTR _MouseY$[ebp]
	push	ecx
	movzx	edx, WORD PTR _MouseX$[ebp]
	push	edx
	mov	eax, DWORD PTR _overme$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gPopupMgr@@3PAVC_PopupMgr@@A ; gPopupMgr
	call	?OpenWindowMenu@C_PopupMgr@@QAEHPAVC_Window@@JJ@Z ; C_PopupMgr::OpenWindowMenu
$LN65@EventHandl:

; 2420 : 			}
; 2421 : 			overme=GetWindow(MouseX,MouseY);

	movzx	ecx, WORD PTR _MouseY$[ebp]
	push	ecx
	movzx	edx, WORD PTR _MouseX$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWindow@C_Handler@@QAEPAVC_Window@@FF@Z ; C_Handler::GetWindow
	mov	DWORD PTR _overme$[ebp], eax

; 2422 : 			if(overme)

	cmp	DWORD PTR _overme$[ebp], 0
	je	$LN55@EventHandl

; 2423 : 			{
; 2424 : 				OverControl_=overme->MouseOver(MouseX-overme->GetX(),MouseY-overme->GetY(),OverControl_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	push	ecx
	movzx	esi, WORD PTR _MouseY$[ebp]
	mov	ecx, DWORD PTR _overme$[ebp]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	edx, ax
	sub	esi, edx
	push	esi
	movzx	esi, WORD PTR _MouseX$[ebp]
	mov	ecx, DWORD PTR _overme$[ebp]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	cwde
	sub	esi, eax
	push	esi
	mov	ecx, DWORD PTR _overme$[ebp]
	call	?MouseOver@C_Window@@QAEPAVC_Base@@JJPAV2@@Z ; C_Window::MouseOver
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+128], eax

; 2425 : 				if(OverLast_.Control_ != OverControl_)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+132]
	cmp	ecx, DWORD PTR [eax+128]
	je	$LN55@EventHandl

; 2426 : 				{
; 2427 : 					HelpOff();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HelpOff@C_Handler@@AAEXXZ		; C_Handler::HelpOff

; 2428 : 					OverLast_.Control_=OverControl_;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	DWORD PTR [edx+132], ecx

; 2429 : 					if(OverControl_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+128], 0
	je	SHORT $LN55@EventHandl

; 2430 : 					{
; 2431 : 						OverLast_.Time_=GetCurrentTime();

	call	DWORD PTR __imp__GetTickCount@0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+136], eax

; 2432 : 						OverLast_.Tip_=gStringMgr->GetString(OverControl_->GetHelpText());

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+128]
	mov	eax, DWORD PTR [edx+128]
	call	eax
	push	eax
	mov	ecx, DWORD PTR ?gStringMgr@@3PAVC_String@@A ; gStringMgr
	call	?GetString@C_String@@QAEPADJ@Z		; C_String::GetString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+140], eax

; 2433 : 						OverLast_.MouseX_=MouseX;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR _MouseX$[ebp]
	mov	WORD PTR [edx+144], ax

; 2434 : 						OverLast_.MouseY_=MouseY;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR _MouseY$[ebp]
	mov	WORD PTR [ecx+146], dx
$LN55@EventHandl:

; 2435 : 					}
; 2436 : 				}
; 2437 : 			}
; 2438 : 			retval=0;

	mov	DWORD PTR _retval$[ebp], 0

; 2439 : 			break;

	jmp	$LN168@EventHandl

; 2440 : 		case WM_RBUTTONDBLCLK:
; 2441 : 			break;

	jmp	$LN168@EventHandl

; 2442 : 			HelpOff();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HelpOff@C_Handler@@AAEXXZ		; C_Handler::HelpOff

; 2443 : 			if(OldInputMessage())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?OldInputMessage@C_Handler@@AAEHXZ	; C_Handler::OldInputMessage
	test	eax, eax
	je	SHORT $LN51@EventHandl

; 2444 : 			{
; 2445 : 				retval=0;

	mov	DWORD PTR _retval$[ebp], 0

; 2446 : 				break;

	jmp	$LN168@EventHandl
$LN51@EventHandl:

; 2447 : 			}
; 2448 : 			MouseX = LOWORD(lParam);

	mov	eax, DWORD PTR _lParam$[ebp]
	and	eax, 65535				; 0000ffffH
	mov	WORD PTR _MouseX$[ebp], ax

; 2449 : 			MouseY = HIWORD(lParam);

	mov	ecx, DWORD PTR _lParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	mov	WORD PTR _MouseY$[ebp], cx

; 2450 : 			overme=GetWindow(MouseX,MouseY);

	movzx	edx, WORD PTR _MouseY$[ebp]
	push	edx
	movzx	eax, WORD PTR _MouseX$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWindow@C_Handler@@QAEPAVC_Window@@FF@Z ; C_Handler::GetWindow
	mov	DWORD PTR _overme$[ebp], eax

; 2451 : 			if(overme == NULL)

	cmp	DWORD PTR _overme$[ebp], 0
	jne	SHORT $LN50@EventHandl

; 2452 : 			{
; 2453 : 				retval=0;

	mov	DWORD PTR _retval$[ebp], 0

; 2454 : 				break; 

	jmp	$LN168@EventHandl
$LN50@EventHandl:

; 2455 : 			}
; 2456 : 
; 2457 : 			CurWindow_=overme;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _overme$[ebp]
	mov	DWORD PTR [ecx+236], edx

; 2458 : 
; 2459 : 			if(Dragging())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Dragging@C_Handler@@QAEHXZ		; C_Handler::Dragging
	test	eax, eax
	je	SHORT $LN49@EventHandl

; 2460 : 				DropItem(MouseX,MouseY,overme);

	mov	eax, DWORD PTR _overme$[ebp]
	push	eax
	movzx	ecx, WORD PTR _MouseY$[ebp]
	push	ecx
	movzx	edx, WORD PTR _MouseX$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DropItem@C_Handler@@QAEHGGPAVC_Window@@@Z ; C_Handler::DropItem
$LN49@EventHandl:

; 2461 : 
; 2462 : 			if(GrabItem(MouseX,MouseY,overme,C_TYPE_RMOUSEDBLCLK))

	push	56					; 00000038H
	mov	eax, DWORD PTR _overme$[ebp]
	push	eax
	movzx	ecx, WORD PTR _MouseY$[ebp]
	push	ecx
	movzx	edx, WORD PTR _MouseX$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GrabItem@C_Handler@@QAEHGGPAVC_Window@@J@Z ; C_Handler::GrabItem
	test	eax, eax
	je	$LN48@EventHandl

; 2463 : 			{
; 2464 : 				if(MouseCallback_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+104], 0
	je	SHORT $LN47@EventHandl

; 2465 : 					ret=(*MouseCallback_)(Grab_.Control_,MouseX,MouseY,overme,C_TYPE_RMOUSEDBLCLK);

	push	56					; 00000038H
	mov	ecx, DWORD PTR _overme$[ebp]
	push	ecx
	movzx	edx, WORD PTR _MouseY$[ebp]
	push	edx
	movzx	eax, WORD PTR _MouseX$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+200]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	call	ecx
	add	esp, 20					; 00000014H
	mov	DWORD PTR _ret$[ebp], eax

; 2466 : 				else

	jmp	SHORT $LN46@EventHandl
$LN47@EventHandl:

; 2467 : 					ret=TRUE;

	mov	DWORD PTR _ret$[ebp], 1
$LN46@EventHandl:

; 2468 : 				if(ret)

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN45@EventHandl

; 2469 : 				{
; 2470 : 					overme->SetControl(Grab_.ID_);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+172]
	push	eax
	mov	ecx, DWORD PTR _overme$[ebp]
	call	?SetControl@C_Window@@QAEXJ@Z		; C_Window::SetControl

; 2471 : 					WindowToFront(overme);

	mov	ecx, DWORD PTR _overme$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WindowToFront@C_Handler@@QAEXPAVC_Window@@@Z ; C_Handler::WindowToFront

; 2472 : 					Grab_.Control_->Process(Grab_.ID_,C_TYPE_RMOUSEDBLCLK);

	push	56					; 00000038H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+172]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+200]
	mov	eax, DWORD PTR [edx+200]
	call	eax
$LN45@EventHandl:

; 2473 : 				}
; 2474 : 			}
; 2475 : 			else

	jmp	SHORT $LN44@EventHandl
$LN48@EventHandl:

; 2476 : 			{
; 2477 : 				if(MouseCallback_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+104], 0
	je	SHORT $LN43@EventHandl

; 2478 : 					ret=(*MouseCallback_)(NULL,MouseX,MouseY,overme,C_TYPE_RMOUSEDBLCLK);

	push	56					; 00000038H
	mov	edx, DWORD PTR _overme$[ebp]
	push	edx
	movzx	eax, WORD PTR _MouseY$[ebp]
	push	eax
	movzx	ecx, WORD PTR _MouseX$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+104]
	call	eax
	add	esp, 20					; 00000014H
	mov	DWORD PTR _ret$[ebp], eax
$LN43@EventHandl:

; 2479 : 				if(ret)

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN42@EventHandl

; 2480 : 					WindowToFront(overme);

	mov	ecx, DWORD PTR _overme$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WindowToFront@C_Handler@@QAEXPAVC_Window@@@Z ; C_Handler::WindowToFront
$LN42@EventHandl:

; 2481 : 				Grab_.Window_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+196], 0
$LN44@EventHandl:

; 2482 : 			}
; 2483 : 			retval=0;

	mov	DWORD PTR _retval$[ebp], 0

; 2484 : 			break;

	jmp	$LN168@EventHandl
$LN41@EventHandl:

; 2485 : 		case C_WM_TIMER:
; 2486 : 			if(MouseDown_ && (GetCurrentTime() - MouseDownTime_) > 250)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+240], 0
	je	$LN40@EventHandl
	call	DWORD PTR __imp__GetTickCount@0
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+244]
	cmp	eax, 250				; 000000faH
	jbe	$LN40@EventHandl

; 2487 : 			{
; 2488 : 
; 2489 : 				if(Grab_.Control_ && !InTimer)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+200], 0
	je	$LN40@EventHandl
	cmp	DWORD PTR ?InTimer@?1??EventHandler@C_Handler@@QAEJPAUHWND__@@IIJ@Z@4HA, 0
	jne	$LN40@EventHandl

; 2490 : 				{
; 2491 : 					if(GetAsyncKeyState(VK_LBUTTON))

	push	1
	call	DWORD PTR __imp__GetAsyncKeyState@4
	cwde
	test	eax, eax
	je	SHORT $LN38@EventHandl

; 2492 : 					{
; 2493 : 						InTimer=1;

	mov	DWORD PTR ?InTimer@?1??EventHandler@C_Handler@@QAEJPAUHWND__@@IIJ@Z@4HA, 1

; 2494 : 						Grab_.Control_->Process(Grab_.ID_,C_TYPE_REPEAT);

	push	70					; 00000046H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+172]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+200]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+200]
	mov	edx, DWORD PTR [eax+200]
	call	edx

; 2495 : 						InTimer=0;

	mov	DWORD PTR ?InTimer@?1??EventHandler@C_Handler@@QAEJPAUHWND__@@IIJ@Z@4HA, 0

; 2496 : 					}
; 2497 : 					else

	jmp	$LN40@EventHandl
$LN38@EventHandl:

; 2498 : 					{
; 2499 : 						InTimer=1;

	mov	DWORD PTR ?InTimer@?1??EventHandler@C_Handler@@QAEJPAUHWND__@@IIJ@Z@4HA, 1

; 2500 : 						MouseDown_=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+240], 0

; 2501 : 						if(Drag_.Window_ != NULL && Drag_.Control_ != NULL)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+228], 0
	je	$LN36@EventHandl
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+232], 0
	je	$LN36@EventHandl

; 2502 : 						{
; 2503 : 							DropItem((WORD)(Drag_.Window_->GetX() + Drag_.Control_->GetX()),	//!
; 2504 : 									 (WORD)(Drag_.Window_->GetY() +Drag_.Control_->GetY()),		//!
; 2505 : 									 Drag_.Window_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+228]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	esi, ax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+232]
	call	?GetY@C_Base@@QAEJXZ			; C_Base::GetY
	add	esi, eax
	push	esi
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+228]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	esi, ax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+232]
	call	?GetX@C_Base@@QAEJXZ			; C_Base::GetX
	add	esi, eax
	push	esi
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DropItem@C_Handler@@QAEHGGPAVC_Window@@@Z ; C_Handler::DropItem

; 2506 : 							Grab_.Control_->Process(Grab_.ID_,C_TYPE_LDROP);

	push	73					; 00000049H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+200]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [edx+200]
	call	eax

; 2507 : 						}
; 2508 : 						else

	jmp	SHORT $LN35@EventHandl
$LN36@EventHandl:

; 2509 : 						{
; 2510 : 							Grab_.Control_->Process(Grab_.ID_,C_TYPE_LMOUSEUP);

	push	52					; 00000034H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+172]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+200]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+200]
	mov	edx, DWORD PTR [eax+200]
	call	edx
$LN35@EventHandl:

; 2511 : 						}
; 2512 : 						Grab_.Control_=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+200], 0

; 2513 : 						InTimer=0;

	mov	DWORD PTR ?InTimer@?1??EventHandler@C_Handler@@QAEJPAUHWND__@@IIJ@Z@4HA, 0
$LN40@EventHandl:

; 2514 : 					}
; 2515 : 				}
; 2516 : 			}
; 2517 : 			if(gScreenShotEnabled && gUI_TakeScreenShot == 2)

	cmp	DWORD PTR ?gScreenShotEnabled@@3JA, 0	; gScreenShotEnabled
	je	SHORT $LN34@EventHandl
	cmp	DWORD PTR ?gUI_TakeScreenShot@@3JA, 2	; gUI_TakeScreenShot
	jne	SHORT $LN34@EventHandl

; 2518 : 			{
; 2519 : 				SaveScreenShot();

	call	?SaveScreenShot@@YAXXZ			; SaveScreenShot

; 2520 : 				gUI_TakeScreenShot=0;

	mov	DWORD PTR ?gUI_TakeScreenShot@@3JA, 0	; gUI_TakeScreenShot
$LN34@EventHandl:

; 2521 : 			}
; 2522 : 			break;

	jmp	$LN168@EventHandl
$LN33@EventHandl:

; 2523 : 
; 2524 : 		case WM_SYSKEYUP:
; 2525 : 		case WM_KEYUP:
; 2526 : 			Transmit(0);// voice stuff me123

	push	0
	call	?Transmit@@YAXH@Z			; Transmit
	add	esp, 4

; 2527 : 			if(wParam == VK_SNAPSHOT) // fall through to KEYDOWN also

	cmp	DWORD PTR _wParam$[ebp], 44		; 0000002cH
	jne	SHORT $LN32@EventHandl

; 2528 : 			{
; 2529 : 				if(gScreenShotEnabled)

	cmp	DWORD PTR ?gScreenShotEnabled@@3JA, 0	; gScreenShotEnabled
	je	SHORT $LN31@EventHandl

; 2530 : 					gUI_TakeScreenShot=1; // Set to take screen shot after screen is refreshed (2=Save to file)...

	mov	DWORD PTR ?gUI_TakeScreenShot@@3JA, 1	; gUI_TakeScreenShot
$LN31@EventHandl:

; 2531 : 				lParam=(lParam & 0xff00ffff) | DIK_SYSRQ;

	mov	ecx, DWORD PTR _lParam$[ebp]
	and	ecx, -16711681				; ff00ffffH
	or	ecx, 183				; 000000b7H
	mov	DWORD PTR _lParam$[ebp], ecx

; 2532 : 			}
; 2533 : 			else

	jmp	SHORT $LN29@EventHandl
$LN32@EventHandl:

; 2534 : 				
; 2535 : 				break;

	jmp	$LN168@EventHandl
$LN29@EventHandl:

; 2536 : 		case WM_SYSKEYDOWN:
; 2537 : 		case WM_KEYDOWN:
; 2538 : 			ShiftStates=0;

	mov	BYTE PTR _ShiftStates$[ebp], 0

; 2539 : 			if(OldInputMessage())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?OldInputMessage@C_Handler@@AAEHXZ	; C_Handler::OldInputMessage
	test	eax, eax
	je	SHORT $LN28@EventHandl

; 2540 : 			{
; 2541 : 				retval=0;

	mov	DWORD PTR _retval$[ebp], 0

; 2542 : 				break;

	jmp	$LN168@EventHandl
$LN28@EventHandl:

; 2543 : 			}
; 2544 : 			Repeat=lParam & 0xffff;

	mov	edx, DWORD PTR _lParam$[ebp]
	and	edx, 65535				; 0000ffffH
	mov	DWORD PTR _Repeat$[ebp], edx

; 2545 : 
; 2546 : 			Key=(uchar)(((lParam >> 16) & 0xff) | ((lParam >> 17) & 0x80));	//!

	mov	eax, DWORD PTR _lParam$[ebp]
	sar	eax, 16					; 00000010H
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _lParam$[ebp]
	sar	ecx, 17					; 00000011H
	and	ecx, 128				; 00000080H
	or	eax, ecx
	mov	BYTE PTR _Key$[ebp], al

; 2547 : 
; 2548 : 			if(GetKeyState(VK_SHIFT) & 0x80)

	push	16					; 00000010H
	call	DWORD PTR __imp__GetKeyState@4
	movsx	edx, ax
	and	edx, 128				; 00000080H
	je	SHORT $LN27@EventHandl

; 2549 : 				ShiftStates |= _SHIFT_DOWN_;

	movzx	eax, BYTE PTR _ShiftStates$[ebp]
	or	eax, 1
	mov	BYTE PTR _ShiftStates$[ebp], al
$LN27@EventHandl:

; 2550 : 			if(GetKeyState(VK_MENU) & 0x80)

	push	18					; 00000012H
	call	DWORD PTR __imp__GetKeyState@4
	movsx	ecx, ax
	and	ecx, 128				; 00000080H
	je	SHORT $LN26@EventHandl

; 2551 : 				ShiftStates |= _ALT_DOWN_;

	movzx	edx, BYTE PTR _ShiftStates$[ebp]
	or	edx, 4
	mov	BYTE PTR _ShiftStates$[ebp], dl
$LN26@EventHandl:

; 2552 : 			if(GetKeyState(VK_CONTROL) & 0x80)

	push	17					; 00000011H
	call	DWORD PTR __imp__GetKeyState@4
	cwde
	and	eax, 128				; 00000080H
	je	SHORT $LN25@EventHandl

; 2553 : 				ShiftStates |= _CTRL_DOWN_;

	movzx	ecx, BYTE PTR _ShiftStates$[ebp]
	or	ecx, 2
	mov	BYTE PTR _ShiftStates$[ebp], cl
$LN25@EventHandl:

; 2554 : 
; 2555 : 			if(GetKeyState(VK_CAPITAL) & 0x01)

	push	20					; 00000014H
	call	DWORD PTR __imp__GetKeyState@4
	movsx	edx, ax
	and	edx, 1
	je	SHORT $LN24@EventHandl

; 2556 : 				if((Key >= DIK_Q && Key <= DIK_P) || (Key >= DIK_A && Key <= DIK_L) || (Key >= DIK_Z && Key <= DIK_M))

	movzx	eax, BYTE PTR _Key$[ebp]
	cmp	eax, 16					; 00000010H
	jl	SHORT $LN21@EventHandl
	movzx	ecx, BYTE PTR _Key$[ebp]
	cmp	ecx, 25					; 00000019H
	jle	SHORT $LN22@EventHandl
$LN21@EventHandl:
	movzx	edx, BYTE PTR _Key$[ebp]
	cmp	edx, 30					; 0000001eH
	jl	SHORT $LN20@EventHandl
	movzx	eax, BYTE PTR _Key$[ebp]
	cmp	eax, 38					; 00000026H
	jle	SHORT $LN22@EventHandl
$LN20@EventHandl:
	movzx	ecx, BYTE PTR _Key$[ebp]
	cmp	ecx, 44					; 0000002cH
	jl	SHORT $LN24@EventHandl
	movzx	edx, BYTE PTR _Key$[ebp]
	cmp	edx, 50					; 00000032H
	jg	SHORT $LN24@EventHandl
$LN22@EventHandl:

; 2557 : 					ShiftStates ^= _SHIFT_DOWN_;

	movzx	eax, BYTE PTR _ShiftStates$[ebp]
	xor	eax, 1
	mov	BYTE PTR _ShiftStates$[ebp], al
$LN24@EventHandl:

; 2558 : 
; 2559 : 			if(GetKeyState(VK_NUMLOCK) & 0x01)

	push	144					; 00000090H
	call	DWORD PTR __imp__GetKeyState@4
	movsx	ecx, ax
	and	ecx, 1
	je	SHORT $LN19@EventHandl

; 2560 : 				if((Key >= DIK_NUMPAD7 && Key <= DIK_NUMPAD9) || (Key >= DIK_NUMPAD4 && Key <= DIK_NUMPAD6) || (Key >= DIK_NUMPAD1 && Key <= DIK_DECIMAL))

	movzx	edx, BYTE PTR _Key$[ebp]
	cmp	edx, 71					; 00000047H
	jl	SHORT $LN16@EventHandl
	movzx	eax, BYTE PTR _Key$[ebp]
	cmp	eax, 73					; 00000049H
	jle	SHORT $LN17@EventHandl
$LN16@EventHandl:
	movzx	ecx, BYTE PTR _Key$[ebp]
	cmp	ecx, 75					; 0000004bH
	jl	SHORT $LN15@EventHandl
	movzx	edx, BYTE PTR _Key$[ebp]
	cmp	edx, 77					; 0000004dH
	jle	SHORT $LN17@EventHandl
$LN15@EventHandl:
	movzx	eax, BYTE PTR _Key$[ebp]
	cmp	eax, 79					; 0000004fH
	jl	SHORT $LN19@EventHandl
	movzx	ecx, BYTE PTR _Key$[ebp]
	cmp	ecx, 83					; 00000053H
	jg	SHORT $LN19@EventHandl
$LN17@EventHandl:

; 2561 : 					ShiftStates |= _SHIFT_DOWN_;

	movzx	edx, BYTE PTR _ShiftStates$[ebp]
	or	edx, 1
	mov	BYTE PTR _ShiftStates$[ebp], dl
$LN19@EventHandl:

; 2562 : 
; 2563 : 			Ascii=AsciiChar(Key,ShiftStates);

	movzx	eax, BYTE PTR _Key$[ebp]
	and	eax, 255				; 000000ffH
	shl	eax, 4
	movzx	ecx, BYTE PTR _ShiftStates$[ebp]
	and	ecx, 7
	mov	dl, BYTE PTR ?Key_Chart@@3PAUASCII_TABLE@@A[eax+ecx]
	mov	BYTE PTR _Ascii$[ebp], dl

; 2564 : 
; 2565 : 			// Handle Hot Keys & Keyboard input
; 2566 : 			if(CurWindow_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+236], 0
	je	SHORT $LN14@EventHandl

; 2567 : 			{
; 2568 : 				if(!CurWindow_->CheckKeyboard(Key,Ascii,ShiftStates,Repeat))

	mov	ecx, DWORD PTR _Repeat$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _ShiftStates$[ebp]
	push	edx
	movzx	eax, BYTE PTR _Ascii$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _Key$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+236]
	call	?CheckKeyboard@C_Window@@QAEHEEEJ@Z	; C_Window::CheckKeyboard
	test	eax, eax
	jne	SHORT $LN13@EventHandl

; 2569 : 					CheckHotKeys(Key,Ascii,ShiftStates,Repeat);

	mov	eax, DWORD PTR _Repeat$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _ShiftStates$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _Ascii$[ebp]
	push	edx
	movzx	eax, BYTE PTR _Key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckHotKeys@C_Handler@@QAEHEEEJ@Z	; C_Handler::CheckHotKeys
$LN13@EventHandl:

; 2570 : 			}
; 2571 : 			else

	jmp	SHORT $LN12@EventHandl
$LN14@EventHandl:

; 2572 : 				CheckHotKeys(Key,Ascii,ShiftStates,Repeat);

	mov	ecx, DWORD PTR _Repeat$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _ShiftStates$[ebp]
	push	edx
	movzx	eax, BYTE PTR _Ascii$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _Key$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckHotKeys@C_Handler@@QAEHEEEJ@Z	; C_Handler::CheckHotKeys
$LN12@EventHandl:

; 2573 : 			retval=0;

	mov	DWORD PTR _retval$[ebp], 0

; 2574 : 			////// me123 voice stuff added
; 2575 : 			if (Key == DIK_F1)

	movzx	edx, BYTE PTR _Key$[ebp]
	cmp	edx, 59					; 0000003bH
	jne	SHORT $LN11@EventHandl

; 2576 : 				Transmit(1);

	push	1
	call	?Transmit@@YAXH@Z			; Transmit
	add	esp, 4
	jmp	SHORT $LN10@EventHandl
$LN11@EventHandl:

; 2577 : 			else if (Key == DIK_F2)

	movzx	eax, BYTE PTR _Key$[ebp]
	cmp	eax, 60					; 0000003cH
	jne	SHORT $LN10@EventHandl

; 2578 : 				Transmit(2);

	push	2
	call	?Transmit@@YAXH@Z			; Transmit
	add	esp, 4
$LN10@EventHandl:

; 2579 : 			/////////////////
; 2580 : 			break;

	jmp	$LN168@EventHandl
$LN8@EventHandl:

; 2581 : 
; 2582 : /*		case WM_CHAR: // NOLONGER USED
; 2583 : 			retval=0;
; 2584 : 			if(OldInputMessage())
; 2585 : 				break;
; 2586 : 			// Handle Hot Keys & Keyboard input
; 2587 : 			if(CurWindow_ == NULL)
; 2588 : 				break;
; 2589 : 
; 2590 : 			if(!CurWindow_->CheckKeyboard(message,wParam,lParam))
; 2591 : 				CheckHotKeys(message,wParam,lParam);
; 2592 : 			retval=0;
; 2593 : 			break;
; 2594 : */
; 2595 : 		case C_WM_UPDATE:
; 2596 : 			//if(UpdateFlag & C_DRAW_REFRESH)
; 2597 : 			//	SetEvent(WakeOutput_);
; 2598 : 			retval=0;

	mov	DWORD PTR _retval$[ebp], 0

; 2599 : 			break;

	jmp	$LN168@EventHandl
$LN7@EventHandl:

; 2600 : 		case WM_MOVE:
; 2601 : 			// get the client rectangle
; 2602 : 			if (FalconDisplay.displayFullScreen)

	cmp	DWORD PTR ?FalconDisplay@@3VFalconDisplayConfiguration@@A+504, 0
	je	SHORT $LN6@EventHandl

; 2603 : 			{
; 2604 : 				SetRect(&dest, 0, 0, GetSystemMetrics(SM_CXSCREEN), GetSystemMetrics(SM_CYSCREEN));

	push	1
	call	DWORD PTR __imp__GetSystemMetrics@4
	push	eax
	push	0
	call	DWORD PTR __imp__GetSystemMetrics@4
	push	eax
	push	0
	push	0
	lea	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__SetRect@20

; 2605 : 			}
; 2606 : 			else

	jmp	SHORT $LN5@EventHandl
$LN6@EventHandl:

; 2607 : 			{
; 2608 : 				GetClientRect(hwnd, &dest);

	lea	edx, DWORD PTR _dest$[ebp]
	push	edx
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetClientRect@8

; 2609 : 				ClientToScreen(hwnd, (LPPOINT)&dest);

	lea	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__ClientToScreen@8

; 2610 : 				ClientToScreen(hwnd, (LPPOINT)&dest+1);

	lea	eax, DWORD PTR _dest$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__ClientToScreen@8

; 2611 : 				if (Primary_ && Primary_->frontSurface()) 

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN4@EventHandl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?frontSurface@ImageBuffer@@QAEPAUIDirectDrawSurface7@@XZ ; ImageBuffer::frontSurface
	test	eax, eax
	je	SHORT $LN4@EventHandl

; 2612 : 				{
; 2613 : 					Primary_->UpdateFrontWindowRect(&dest);

	lea	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	call	?UpdateFrontWindowRect@ImageBuffer@@QAEXPAUtagRECT@@@Z ; ImageBuffer::UpdateFrontWindowRect
$LN4@EventHandl:

; 2614 : #if 0 // Don't know how to get rc
; 2615 : 					if (rc)
; 2616 : 						MPRSwapBuffers(rc,fronthandle);
; 2617 : #endif
; 2618 : 				}
; 2619 : 				InvalidateRect(hwnd,&dest,FALSE);

	push	0
	lea	eax, DWORD PTR _dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__InvalidateRect@12
$LN5@EventHandl:

; 2620 : 			}
; 2621 : 			break;

	jmp	$LN168@EventHandl
$LN3@EventHandl:

; 2622 : 		case WM_PAINT:
; 2623 : 			if(GetUpdateRect(hwnd,&dest,FALSE))

	push	0
	lea	edx, DWORD PTR _dest$[ebp]
	push	edx
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetUpdateRect@12
	test	eax, eax
	je	SHORT $LN2@EventHandl

; 2624 : 			{
; 2625 : 				ValidateRect(hwnd,NULL);

	push	0
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__ValidateRect@8

; 2626 : 				if(Primary_ != Front_)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	cmp	ecx, DWORD PTR [eax+16]
	je	SHORT $LN2@EventHandl

; 2627 : 				{
; 2628 : 					UI95_RECT upme;
; 2629 : 
; 2630 : 					upme.left=FrontRect_.left;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _upme$3[ebp], eax

; 2631 : 					upme.top=FrontRect_.top;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _upme$3[ebp+4], edx

; 2632 : 					upme.right=FrontRect_.right;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _upme$3[ebp+8], ecx

; 2633 : 					upme.bottom=FrontRect_.bottom;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR _upme$3[ebp+12], eax

; 2634 : 
; 2635 : 					EnterCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EnterCritical@C_Handler@@QAEXXZ	; C_Handler::EnterCritical

; 2636 : 					rectcount_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+3464], cx

; 2637 : 					RefreshAll(&upme);

	lea	eax, DWORD PTR _upme$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RefreshAll@C_Handler@@QAEXPAUUI95_RECT@@@Z ; C_Handler::RefreshAll

; 2638 : 					LeaveCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCritical@C_Handler@@QAEXXZ	; C_Handler::LeaveCritical
$LN2@EventHandl:

; 2639 : 					//if(UpdateFlag & C_DRAW_REFRESH)
; 2640 : 					//	SetEvent(WakeOutput_);
; 2641 : 				}
; 2642 : 			}
; 2643 : 			retval=0;

	mov	DWORD PTR _retval$[ebp], 0
$LN168@EventHandl:

; 2644 : 			break;
; 2645 : 	}
; 2646 : 	HandlingMessage=0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3468], 0

; 2647 : 	return(retval);

	mov	eax, DWORD PTR _retval$[ebp]

; 2648 : }

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	2
$LN181@EventHandl:
	DD	$LN163@EventHandl
	DD	$LN150@EventHandl
	DD	$LN168@EventHandl
	DD	$LN83@EventHandl
	DD	$LN71@EventHandl
?EventHandler@C_Handler@@QAEJPAUHWND__@@IIJ@Z ENDP	; C_Handler::EventHandler
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_cur$ = -12						; size = 4
_this$ = -8						; size = 4
_found$ = -4						; size = 4
_thewin$ = 8						; size = 4
?WindowToFront@C_Handler@@QAEXPAVC_Window@@@Z PROC	; C_Handler::WindowToFront
; _this$ = ecx

; 597  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 598  : 	WHLIST *cur,*found;
; 599  : 
; 600  : 	if(Root_ == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN17@WindowToFr

; 601  : 		return;

	jmp	$LN18@WindowToFr
$LN17@WindowToFr:

; 602  : 
; 603  : 	if(Root_->Next == NULL)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN16@WindowToFr

; 604  : 		return;

	jmp	$LN18@WindowToFr
$LN16@WindowToFr:

; 605  : 
; 606  : 	CurWindow_=thewin;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _thewin$[ebp]
	mov	DWORD PTR [eax+236], ecx

; 607  : 
; 608  : 	if(Root_->win == thewin)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _thewin$[ebp]
	jne	$LN15@WindowToFr

; 609  : 	{
; 610  : 		if(Root_->Flags & C_BIT_CANTMOVE || !(Root_->Flags & C_BIT_ENABLED))

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 2097152				; 00200000H
	jne	SHORT $LN13@WindowToFr
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 2048				; 00000800H
	jne	SHORT $LN14@WindowToFr
$LN13@WindowToFr:

; 611  : 			return;

	jmp	$LN18@WindowToFr
$LN14@WindowToFr:

; 612  : 
; 613  : 		found=Root_;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _found$[ebp], eax

; 614  : 		Root_=Root_->Next;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax], ecx

; 615  : 		Root_->Prev=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax+16], 0

; 616  : 		cur=Root_;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _cur$[ebp], edx
$LN12@WindowToFr:

; 617  : 		while(cur->Next)

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN11@WindowToFr

; 618  : 			cur=cur->Next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _cur$[ebp], edx
	jmp	SHORT $LN12@WindowToFr
$LN11@WindowToFr:

; 619  : 
; 620  : 		EnterCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EnterCritical@C_Handler@@QAEXXZ	; C_Handler::EnterCritical

; 621  : 		cur->Next=found;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR _found$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 622  : 		found->Next=NULL;

	mov	edx, DWORD PTR _found$[ebp]
	mov	DWORD PTR [edx+12], 0

; 623  : 		found->Prev=cur;

	mov	eax, DWORD PTR _found$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 624  : 		LeaveCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCritical@C_Handler@@QAEXXZ	; C_Handler::LeaveCritical

; 625  : 	}
; 626  : 	else

	jmp	$LN10@WindowToFr
$LN15@WindowToFr:

; 627  : 	{
; 628  : 		cur=Root_;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _cur$[ebp], eax

; 629  : 		found=NULL;

	mov	DWORD PTR _found$[ebp], 0
$LN9@WindowToFr:

; 630  : 		while(cur->Next)

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	$LN8@WindowToFr

; 631  : 		{
; 632  : 			if(cur->Next->win == thewin && found == NULL)

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _thewin$[ebp]
	jne	SHORT $LN7@WindowToFr
	cmp	DWORD PTR _found$[ebp], 0
	jne	SHORT $LN7@WindowToFr

; 633  : 			{
; 634  : 				if(cur->Next->Flags & C_BIT_CANTMOVE || !(cur->Next->Flags & C_BIT_ENABLED))

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 2097152				; 00200000H
	jne	SHORT $LN5@WindowToFr
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 2048				; 00000800H
	jne	SHORT $LN6@WindowToFr
$LN5@WindowToFr:

; 635  : 					return;

	jmp	$LN18@WindowToFr
$LN6@WindowToFr:

; 636  : 
; 637  : 				found=cur->Next;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _found$[ebp], eax

; 638  : 				if(found->Next)

	mov	ecx, DWORD PTR _found$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN4@WindowToFr

; 639  : 				{
; 640  : 					found->Next->Prev=found->Prev;

	mov	edx, DWORD PTR _found$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _found$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx

; 641  : 					if(found->Prev)

	mov	eax, DWORD PTR _found$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN3@WindowToFr

; 642  : 						found->Prev->Next=found->Next;

	mov	ecx, DWORD PTR _found$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _found$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
$LN3@WindowToFr:

; 643  : 				}
; 644  : 				else

	jmp	SHORT $LN7@WindowToFr
$LN4@WindowToFr:

; 645  : 					found=NULL;

	mov	DWORD PTR _found$[ebp], 0
$LN7@WindowToFr:

; 646  : 			}
; 647  : 			cur=cur->Next;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _cur$[ebp], eax

; 648  : 		}

	jmp	$LN9@WindowToFr
$LN8@WindowToFr:

; 649  : 		if(found == NULL)

	cmp	DWORD PTR _found$[ebp], 0
	jne	SHORT $LN1@WindowToFr

; 650  : 			return;

	jmp	SHORT $LN18@WindowToFr
$LN1@WindowToFr:

; 651  : 		EnterCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EnterCritical@C_Handler@@QAEXXZ	; C_Handler::EnterCritical

; 652  : 		cur->Next=found;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR _found$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 653  : 		found->Prev=cur;

	mov	eax, DWORD PTR _found$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 654  : 		found->Next=NULL;

	mov	edx, DWORD PTR _found$[ebp]
	mov	DWORD PTR [edx+12], 0

; 655  : 		LeaveCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCritical@C_Handler@@QAEXXZ	; C_Handler::LeaveCritical
$LN10@WindowToFr:

; 656  : 	}
; 657  : 	thewin->SetUpdateRect(0,0,thewin->GetW(),thewin->GetH(),C_BIT_ABSOLUTE,0);

	push	0
	push	262144					; 00040000H
	mov	ecx, DWORD PTR _thewin$[ebp]
	call	?GetH@C_Window@@QAEFXZ			; C_Window::GetH
	cwde
	push	eax
	mov	ecx, DWORD PTR _thewin$[ebp]
	call	?GetW@C_Window@@QAEFXZ			; C_Window::GetW
	movsx	ecx, ax
	push	ecx
	push	0
	push	0
	mov	ecx, DWORD PTR _thewin$[ebp]
	call	?SetUpdateRect@C_Window@@QAEXJJJJJJ@Z	; C_Window::SetUpdateRect
$LN18@WindowToFr:

; 658  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?WindowToFront@C_Handler@@QAEXPAVC_Window@@@Z ENDP	; C_Handler::WindowToFront
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.h
;	COMDAT ?GetH@C_Handler@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetH@C_Handler@@QAEJXZ PROC				; C_Handler::GetH, COMDAT
; _this$ = ecx

; 214  : 		long  GetH() { return(FrontRect_.bottom-FrontRect_.top);}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+48]
	sub	eax, DWORD PTR [ecx+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetH@C_Handler@@QAEJXZ ENDP				; C_Handler::GetH
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.h
;	COMDAT ?GetW@C_Handler@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetW@C_Handler@@QAEJXZ PROC				; C_Handler::GetW, COMDAT
; _this$ = ecx

; 213  : 		long  GetW() { return(FrontRect_.right-FrontRect_.left);}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+44]
	sub	eax, DWORD PTR [ecx+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetW@C_Handler@@QAEJXZ ENDP				; C_Handler::GetW
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_DKScanCode$ = 8					; size = 1
_Ascii$ = 12						; size = 1
_ShiftStates$ = 16					; size = 1
_RepeatCount$ = 20					; size = 4
?CheckHotKeys@C_Handler@@QAEHEEEJ@Z PROC		; C_Handler::CheckHotKeys
; _this$ = ecx

; 1712 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1713 : 	WHLIST *cur;
; 1714 : 
; 1715 : 	cur=Root_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx

; 1716 : 	if(cur == NULL)

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN8@CheckHotKe

; 1717 : 		return(FALSE);

	xor	eax, eax
	jmp	SHORT $LN10@CheckHotKe
$LN8@CheckHotKe:

; 1718 : 
; 1719 : 	while(cur->Next)

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN6@CheckHotKe

; 1720 : 		cur=cur->Next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _cur$[ebp], ecx
	jmp	SHORT $LN8@CheckHotKe
$LN6@CheckHotKe:

; 1721 : 
; 1722 : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN5@CheckHotKe

; 1723 : 	{
; 1724 : 		if(cur->Flags & C_BIT_ENABLED)

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, 2048				; 00000800H
	je	SHORT $LN4@CheckHotKe

; 1725 : 			if(cur->win->CheckHotKeys(DKScanCode,Ascii,ShiftStates,RepeatCount))

	mov	ecx, DWORD PTR _RepeatCount$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _ShiftStates$[ebp]
	push	edx
	movzx	eax, BYTE PTR _Ascii$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _DKScanCode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?CheckHotKeys@C_Window@@QAEHEEEJ@Z	; C_Window::CheckHotKeys
	test	eax, eax
	je	SHORT $LN4@CheckHotKe

; 1726 : 				return(TRUE);

	mov	eax, 1
	jmp	SHORT $LN10@CheckHotKe
$LN4@CheckHotKe:

; 1727 : 		if(cur->win->GetType() == C_TYPE_EXCLUSIVE)

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetType@C_Window@@QAEFXZ		; C_Window::GetType
	movsx	ecx, ax
	cmp	ecx, 60					; 0000003cH
	jne	SHORT $LN2@CheckHotKe

; 1728 : 			cur=NULL;

	mov	DWORD PTR _cur$[ebp], 0

; 1729 : 		else

	jmp	SHORT $LN1@CheckHotKe
$LN2@CheckHotKe:

; 1730 : 			cur=cur->Prev;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _cur$[ebp], eax
$LN1@CheckHotKe:

; 1731 : 	}

	jmp	SHORT $LN6@CheckHotKe
$LN5@CheckHotKe:

; 1732 : 	return(FALSE);

	xor	eax, eax
$LN10@CheckHotKe:

; 1733 : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?CheckHotKeys@C_Handler@@QAEHEEEJ@Z ENDP		; C_Handler::CheckHotKeys
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_ID$ = 8						; size = 4
?DisableWindowGroup@C_Handler@@QAEXJ@Z PROC		; C_Handler::DisableWindowGroup
; _this$ = ecx

; 1281 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1282 : 	WHLIST *cur;
; 1283 : 
; 1284 : 	EnterCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EnterCritical@C_Handler@@QAEXXZ	; C_Handler::EnterCritical

; 1285 : 	cur=Root_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
$LN3@DisableWin:

; 1286 : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN2@DisableWin

; 1287 : 	{
; 1288 : 		if(cur->win->GetGroup() == ID && (cur->Flags & C_BIT_ENABLED))

	mov	edx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetGroup@C_Window@@QAEJXZ		; C_Window::GetGroup
	cmp	eax, DWORD PTR _ID$[ebp]
	jne	SHORT $LN1@DisableWin
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 2048				; 00000800H
	je	SHORT $LN1@DisableWin

; 1289 : 			HideWindow(cur->win);

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HideWindow@C_Handler@@QAEHPAVC_Window@@@Z ; C_Handler::HideWindow
$LN1@DisableWin:

; 1290 : 		cur=cur->Next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _cur$[ebp], edx

; 1291 : 	}

	jmp	SHORT $LN3@DisableWin
$LN2@DisableWin:

; 1292 : 	LeaveCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCritical@C_Handler@@QAEXXZ	; C_Handler::LeaveCritical

; 1293 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?DisableWindowGroup@C_Handler@@QAEXJ@Z ENDP		; C_Handler::DisableWindowGroup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_next$ = -12						; size = 4
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_ID$ = 8						; size = 4
?EnableWindowGroup@C_Handler@@QAEXJ@Z PROC		; C_Handler::EnableWindowGroup
; _this$ = ecx

; 1256 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1257 : 	WHLIST *cur,*next;
; 1258 : 
; 1259 : 	EnterCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EnterCritical@C_Handler@@QAEXXZ	; C_Handler::EnterCritical

; 1260 : 	cur=Root_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
$LN4@EnableWind:

; 1261 : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN3@EnableWind

; 1262 : 	{
; 1263 : 		if(cur->win->GetGroup() == ID && !(cur->Flags & C_BIT_ENABLED))

	mov	edx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetGroup@C_Window@@QAEJXZ		; C_Window::GetGroup
	cmp	eax, DWORD PTR _ID$[ebp]
	jne	SHORT $LN2@EnableWind
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 2048				; 00000800H
	jne	SHORT $LN2@EnableWind

; 1264 : 		{
; 1265 : 			ShowWindow(cur->win);

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ShowWindow@C_Handler@@QAEHPAVC_Window@@@Z ; C_Handler::ShowWindow

; 1266 : 			if(!(cur->win->GetFlags() & C_BIT_CANTMOVE))

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetFlags@C_Window@@QAEJXZ		; C_Window::GetFlags
	and	eax, 2097152				; 00200000H
	jne	SHORT $LN2@EnableWind

; 1267 : 			{
; 1268 : 				next=cur->Next;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _next$[ebp], eax

; 1269 : 				WindowToFront(cur->win);

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WindowToFront@C_Handler@@QAEXPAVC_Window@@@Z ; C_Handler::WindowToFront

; 1270 : 				cur->win->SetUpdateRect(0,0,cur->win->GetW(),cur->win->GetH(),C_BIT_ABSOLUTE,0);

	push	0
	push	262144					; 00040000H
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetH@C_Window@@QAEFXZ			; C_Window::GetH
	movsx	ecx, ax
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetW@C_Window@@QAEFXZ			; C_Window::GetW
	cwde
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?SetUpdateRect@C_Window@@QAEXJJJJJJ@Z	; C_Window::SetUpdateRect

; 1271 : 				cur=next;

	mov	edx, DWORD PTR _next$[ebp]
	mov	DWORD PTR _cur$[ebp], edx

; 1272 : 				continue;

	jmp	$LN4@EnableWind
$LN2@EnableWind:

; 1273 : 			}
; 1274 : 		}
; 1275 : 		cur=cur->Next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _cur$[ebp], ecx

; 1276 : 	}

	jmp	$LN4@EnableWind
$LN3@EnableWind:

; 1277 : 	LeaveCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCritical@C_Handler@@QAEXXZ	; C_Handler::LeaveCritical

; 1278 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?EnableWindowGroup@C_Handler@@QAEXJ@Z ENDP		; C_Handler::EnableWindowGroup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_ID$ = 8						; size = 4
?DisableGroup@C_Handler@@QAEXJ@Z PROC			; C_Handler::DisableGroup
; _this$ = ecx

; 1244 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1245 : 	WHLIST *cur;
; 1246 : 
; 1247 : 	cur=Root_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
$LN2@DisableGro:

; 1248 : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN3@DisableGro

; 1249 : 	{
; 1250 : 		cur->win->DisableGroup(ID);

	mov	edx, DWORD PTR _ID$[ebp]
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?DisableGroup@C_Window@@QAEXJ@Z		; C_Window::DisableGroup

; 1251 : 		cur=cur->Next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _cur$[ebp], edx

; 1252 : 	}

	jmp	SHORT $LN2@DisableGro
$LN3@DisableGro:

; 1253 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?DisableGroup@C_Handler@@QAEXJ@Z ENDP			; C_Handler::DisableGroup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_ID$ = 8						; size = 4
?EnableGroup@C_Handler@@QAEXJ@Z PROC			; C_Handler::EnableGroup
; _this$ = ecx

; 1232 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1233 : 	WHLIST *cur;
; 1234 : 
; 1235 : 	cur=Root_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
$LN2@EnableGrou:

; 1236 : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN3@EnableGrou

; 1237 : 	{
; 1238 : 		cur->win->EnableGroup(ID);

	mov	edx, DWORD PTR _ID$[ebp]
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?EnableGroup@C_Window@@QAEXJ@Z		; C_Window::EnableGroup

; 1239 : 		cur=cur->Next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _cur$[ebp], edx

; 1240 : 	}

	jmp	SHORT $LN2@EnableGrou
$LN3@EnableGrou:

; 1241 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?EnableGroup@C_Handler@@QAEXJ@Z ENDP			; C_Handler::EnableGroup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_ID$ = 8						; size = 4
?DisableSection@C_Handler@@QAEXJ@Z PROC			; C_Handler::DisableSection
; _this$ = ecx

; 1296 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1297 : 	WHLIST *cur;
; 1298 : 
; 1299 : 	EnterCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EnterCritical@C_Handler@@QAEXXZ	; C_Handler::EnterCritical

; 1300 : 	cur=Root_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
$LN3@DisableSec:

; 1301 : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN2@DisableSec

; 1302 : 	{
; 1303 : 		if(cur->win->GetSection() == ID && (cur->Flags & C_BIT_ENABLED))

	mov	edx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetSection@C_Window@@QAEJXZ		; C_Window::GetSection
	cmp	eax, DWORD PTR _ID$[ebp]
	jne	SHORT $LN1@DisableSec
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 2048				; 00000800H
	je	SHORT $LN1@DisableSec

; 1304 : 			HideWindow(cur->win);

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HideWindow@C_Handler@@QAEHPAVC_Window@@@Z ; C_Handler::HideWindow
$LN1@DisableSec:

; 1305 : 		cur=cur->Next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _cur$[ebp], edx

; 1306 : 	}

	jmp	SHORT $LN3@DisableSec
$LN2@DisableSec:

; 1307 : 	LeaveCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCritical@C_Handler@@QAEXXZ	; C_Handler::LeaveCritical

; 1308 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?DisableSection@C_Handler@@QAEXJ@Z ENDP			; C_Handler::DisableSection
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_control$ = 8						; size = 4
?ReleaseControl@C_Handler@@QAEXPAVC_Base@@@Z PROC	; C_Handler::ReleaseControl
; _this$ = ecx

; 1782 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1783 : 	if(OverControl_ == control)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	cmp	ecx, DWORD PTR _control$[ebp]
	jne	SHORT $LN4@ReleaseCon

; 1784 : 		OverControl_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+128], 0
$LN4@ReleaseCon:

; 1785 : 	if(OverLast_.Control_ == control)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	cmp	ecx, DWORD PTR _control$[ebp]
	jne	SHORT $LN3@ReleaseCon

; 1786 : 		HelpOff();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HelpOff@C_Handler@@AAEXXZ		; C_Handler::HelpOff
$LN3@ReleaseCon:

; 1787 : 	if(Grab_.Control_ == control)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+200]
	cmp	eax, DWORD PTR _control$[ebp]
	jne	SHORT $LN2@ReleaseCon

; 1788 : 		Grab_.Control_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+200], 0
$LN2@ReleaseCon:

; 1789 : 	if(Drag_.Control_ == control)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+232]
	cmp	eax, DWORD PTR _control$[ebp]
	jne	SHORT $LN5@ReleaseCon

; 1790 : 		Drag_.Control_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+232], 0
$LN5@ReleaseCon:

; 1791 : }		

	mov	esp, ebp
	pop	ebp
	ret	4
?ReleaseControl@C_Handler@@QAEXPAVC_Base@@@Z ENDP	; C_Handler::ReleaseControl
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
tv152 = -64						; size = 4
$T1 = -60						; size = 4
tv141 = -56						; size = 4
$T2 = -52						; size = 4
$T3 = -48						; size = 4
_last$ = -44						; size = 4
$T4 = -40						; size = 4
tv87 = -36						; size = 4
$T5 = -32						; size = 4
$T6 = -28						; size = 4
$T7 = -24						; size = 4
$T8 = -20						; size = 4
_cbs$ = -16						; size = 4
_prev$ = -12						; size = 4
_cur$ = -8						; size = 4
_this$ = -4						; size = 4
?Cleanup@C_Handler@@QAEXXZ PROC				; C_Handler::Cleanup
; _this$ = ecx

; 264  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 265  : 	WHLIST *cur,*prev;
; 266  : 	CBLIST *cbs,*last;
; 267  : 
; 268  : 	// Make ALL winders invisible so they won't draw
; 269  : 	cur=Root_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
$LN9@Cleanup:

; 270  : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN8@Cleanup

; 271  : 	{
; 272  : 		cur->Flags &= ~C_BIT_ENABLED;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, -2049				; fffff7ffH
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 273  : 		cur=cur->Next;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _cur$[ebp], eax

; 274  : 	}

	jmp	SHORT $LN9@Cleanup
$LN8@Cleanup:

; 275  : 
; 276  : 	// Kill the threads
; 277  : 	EndControlThread();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EndControlThread@C_Handler@@QAEXXZ	; C_Handler::EndControlThread

; 278  : 	EndOutputThread();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EndOutputThread@C_Handler@@QAEXXZ	; C_Handler::EndOutputThread

; 279  : 	EndTimerThread();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EndTimerThread@C_Handler@@QAEXXZ	; C_Handler::EndTimerThread

; 280  : 
; 281  : 	EnterCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EnterCritical@C_Handler@@QAEXXZ	; C_Handler::EnterCritical

; 282  : 
; 283  : 	cur=Root_;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _cur$[ebp], edx
$LN7@Cleanup:

; 284  : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN6@Cleanup

; 285  : 	{
; 286  : 		prev=cur;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _prev$[ebp], eax

; 287  : 		cur=cur->Next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _cur$[ebp], edx

; 288  : 		if(prev->Flags & C_BIT_REMOVE)

	mov	eax, DWORD PTR _prev$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 67108864				; 04000000H
	je	SHORT $LN5@Cleanup

; 289  : 		{
; 290  : 			prev->win->Cleanup();

	mov	edx, DWORD PTR _prev$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?Cleanup@C_Window@@QAEXXZ		; C_Window::Cleanup

; 291  : 			delete prev->win;

	mov	eax, DWORD PTR _prev$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T5[ebp], ecx
	mov	edx, DWORD PTR $T5[ebp]
	mov	DWORD PTR $T6[ebp], edx
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN12@Cleanup
	push	1
	mov	ecx, DWORD PTR $T6[ebp]
	call	??_GC_Window@@QAEPAXI@Z
	mov	DWORD PTR tv87[ebp], eax
	jmp	SHORT $LN5@Cleanup
$LN12@Cleanup:
	mov	DWORD PTR tv87[ebp], 0
$LN5@Cleanup:

; 292  : 		}
; 293  : 		delete prev;

	mov	eax, DWORD PTR _prev$[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 294  : 	}

	jmp	SHORT $LN7@Cleanup
$LN6@Cleanup:

; 295  : 	Root_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0

; 296  : 
; 297  : 	cbs=UserRoot_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cbs$[ebp], ecx
$LN4@Cleanup:

; 298  : 	while(cbs)

	cmp	DWORD PTR _cbs$[ebp], 0
	je	SHORT $LN3@Cleanup

; 299  : 	{
; 300  : 		last=cbs;

	mov	edx, DWORD PTR _cbs$[ebp]
	mov	DWORD PTR _last$[ebp], edx

; 301  : 		cbs=cbs->Next;

	mov	eax, DWORD PTR _cbs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cbs$[ebp], ecx

; 302  : 		delete last;

	mov	edx, DWORD PTR _last$[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 303  : 	}

	jmp	SHORT $LN4@Cleanup
$LN3@Cleanup:

; 304  : 	UserRoot_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 305  : 
; 306  : 	if(Front_ && Front_ != Primary_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN2@Cleanup
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+16]
	cmp	edx, DWORD PTR [ecx+12]
	je	SHORT $LN2@Cleanup

; 307  : 	{
; 308  : 		Front_->Cleanup();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	?Cleanup@ImageBuffer@@QAEXXZ		; ImageBuffer::Cleanup

; 309  : 		delete Front_;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T8[ebp], eax
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN14@Cleanup
	push	1
	mov	ecx, DWORD PTR $T8[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T8[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv141[ebp], eax
	jmp	SHORT $LN2@Cleanup
$LN14@Cleanup:
	mov	DWORD PTR tv141[ebp], 0
$LN2@Cleanup:

; 310  : 	}
; 311  : 
; 312  : 	Primary_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 313  : 	Front_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0

; 314  : 
; 315  : 	if(m_pMouseImage)

	cmp	DWORD PTR _m_pMouseImage, 0
	je	SHORT $LN1@Cleanup

; 316  : 	{
; 317  : 		m_pMouseImage->Cleanup();

	mov	ecx, DWORD PTR _m_pMouseImage
	call	?Cleanup@ImageBuffer@@QAEXXZ		; ImageBuffer::Cleanup

; 318  : 		delete m_pMouseImage;

	mov	eax, DWORD PTR _m_pMouseImage
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T7[ebp], ecx
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN16@Cleanup
	push	1
	mov	edx, DWORD PTR $T7[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T7[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv152[ebp], eax
	jmp	SHORT $LN17@Cleanup
$LN16@Cleanup:
	mov	DWORD PTR tv152[ebp], 0
$LN17@Cleanup:

; 319  : 		m_pMouseImage = NULL;

	mov	DWORD PTR _m_pMouseImage, 0
$LN1@Cleanup:

; 320  : 	}
; 321  : 
; 322  : 	LeaveCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCritical@C_Handler@@QAEXXZ	; C_Handler::LeaveCritical

; 323  : 
; 324  : 	F4DestroyCriticalSection(UI_Critical);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	push	ecx
	call	_F4DestroyCriticalSection
	add	esp, 4

; 325  : 	UI_Critical = NULL; // JB 010108

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+100], 0

; 326  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Cleanup@C_Handler@@QAEXXZ ENDP				; C_Handler::Cleanup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_w$ = -24						; size = 4
_h$ = -20						; size = 4
_this$ = -16						; size = 4
_x$ = -12						; size = 4
_y$ = -8						; size = 4
_cur$ = -4						; size = 4
_thewin$ = 8						; size = 4
?SetBehindWindow@C_Handler@@QAEXPAVC_Window@@@Z PROC	; C_Handler::SetBehindWindow
; _this$ = ecx

; 1410 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1411 : 	long x,y,w,h;
; 1412 : 	WHLIST *cur;
; 1413 : 
; 1414 : 	if(thewin == NULL)

	cmp	DWORD PTR _thewin$[ebp], 0
	jne	SHORT $LN6@SetBehindW

; 1415 : 		return;

	jmp	$LN7@SetBehindW
$LN6@SetBehindW:

; 1416 : 
; 1417 : 	x = thewin->GetX();

	mov	ecx, DWORD PTR _thewin$[ebp]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	cwde
	mov	DWORD PTR _x$[ebp], eax

; 1418 : 	y = thewin->GetY();

	mov	ecx, DWORD PTR _thewin$[ebp]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	ecx, ax
	mov	DWORD PTR _y$[ebp], ecx

; 1419 : 	w = x + thewin->GetW();

	mov	ecx, DWORD PTR _thewin$[ebp]
	call	?GetW@C_Window@@QAEFXZ			; C_Window::GetW
	movsx	edx, ax
	add	edx, DWORD PTR _x$[ebp]
	mov	DWORD PTR _w$[ebp], edx

; 1420 : 	h = y + thewin->GetH();

	mov	ecx, DWORD PTR _thewin$[ebp]
	call	?GetH@C_Window@@QAEFXZ			; C_Window::GetH
	cwde
	add	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _h$[ebp], eax

; 1421 : 
; 1422 : 	cur=Root_;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _cur$[ebp], edx
$LN5@SetBehindW:

; 1423 : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN7@SetBehindW

; 1424 : 	{
; 1425 : 		if(cur->win != thewin)

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _thewin$[ebp]
	je	SHORT $LN3@SetBehindW

; 1426 : 		{
; 1427 : 			if(cur->Flags & C_BIT_ENABLED)

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, 2048				; 00000800H
	je	SHORT $LN2@SetBehindW

; 1428 : 				cur->win->SetUpdateRect(x-cur->win->GetX(),y-cur->win->GetY(),w-cur->win->GetX(),h-cur->win->GetY(),C_BIT_ABSOLUTE,0);

	push	0
	push	262144					; 00040000H
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	edx, ax
	mov	eax, DWORD PTR _h$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	edx, ax
	mov	eax, DWORD PTR _w$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	edx, ax
	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	edx, ax
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?SetUpdateRect@C_Window@@QAEXJJJJJJ@Z	; C_Window::SetUpdateRect
$LN2@SetBehindW:

; 1429 : 			cur=cur->Next;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _cur$[ebp], eax

; 1430 : 		}
; 1431 : 		else

	jmp	SHORT $LN1@SetBehindW
$LN3@SetBehindW:

; 1432 : 			cur=NULL;

	mov	DWORD PTR _cur$[ebp], 0
$LN1@SetBehindW:

; 1433 : 	}

	jmp	$LN5@SetBehindW
$LN7@SetBehindW:

; 1434 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetBehindWindow@C_Handler@@QAEXPAVC_Window@@@Z ENDP	; C_Handler::SetBehindWindow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
$T1 = -16						; size = 4
$T2 = -12						; size = 4
_cur$ = -8						; size = 4
_this$ = -4						; size = 4
_thewin$ = 8						; size = 4
?RemoveWindow@C_Handler@@QAEHPAVC_Window@@@Z PROC	; C_Handler::RemoveWindow
; _this$ = ecx

; 533  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 534  : 	WHLIST *cur;
; 535  : 
; 536  : 
; 537  : 	EnterCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EnterCritical@C_Handler@@QAEXXZ	; C_Handler::EnterCritical

; 538  : 	SetBehindWindow(thewin);

	mov	eax, DWORD PTR _thewin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetBehindWindow@C_Handler@@QAEXPAVC_Window@@@Z ; C_Handler::SetBehindWindow

; 539  : 	thewin->SetCritical(NULL);

	push	0
	mov	ecx, DWORD PTR _thewin$[ebp]
	call	?SetCritical@C_Window@@QAEXPAUF4CSECTIONHANDLE@@@Z ; C_Window::SetCritical

; 540  : 
; 541  : 	if(Grab_.Window_ == thewin)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+196]
	cmp	edx, DWORD PTR _thewin$[ebp]
	jne	SHORT $LN15@RemoveWind

; 542  : 	{
; 543  : 		Grab_.Window_=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+196], 0

; 544  : 		Grab_.Control_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+200], 0
$LN15@RemoveWind:

; 545  : 	}
; 546  : 
; 547  : 	if(Drag_.Window_ == thewin)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+228]
	cmp	eax, DWORD PTR _thewin$[ebp]
	jne	SHORT $LN14@RemoveWind

; 548  : 	{
; 549  : 		Drag_.Window_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+228], 0

; 550  : 		Drag_.Control_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+232], 0
$LN14@RemoveWind:

; 551  : 	}
; 552  : 
; 553  : 	if(thewin == Root_->win)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _thewin$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN13@RemoveWind

; 554  : 	{
; 555  : 		cur=Root_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx

; 556  : 		Root_=Root_->Next;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx], edx

; 557  : 		Root_->Prev=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+16], 0

; 558  : 		delete cur;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 559  : 	}
; 560  : 	else

	jmp	SHORT $LN12@RemoveWind
$LN13@RemoveWind:

; 561  : 	{
; 562  : 		cur=Root_->Next;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _cur$[ebp], eax
$LN11@RemoveWind:

; 563  : 		while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN12@RemoveWind

; 564  : 		{
; 565  : 			if(cur->win == thewin)

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _thewin$[ebp]
	jne	SHORT $LN9@RemoveWind

; 566  : 			{
; 567  : 				if(cur->Prev)

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN8@RemoveWind

; 568  : 					cur->Prev->Next=cur->Next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
$LN8@RemoveWind:

; 569  : 				if(cur->Next)

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN7@RemoveWind

; 570  : 					cur->Next->Prev=cur->Prev;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
$LN7@RemoveWind:

; 571  : 				delete cur;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 572  : 				cur=NULL;

	mov	DWORD PTR _cur$[ebp], 0

; 573  : 			}
; 574  : 			else

	jmp	SHORT $LN6@RemoveWind
$LN9@RemoveWind:

; 575  : 				cur=cur->Next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _cur$[ebp], ecx
$LN6@RemoveWind:

; 576  : 		}

	jmp	SHORT $LN11@RemoveWind
$LN12@RemoveWind:

; 577  : 	}
; 578  : 	if(thewin == CurWindow_)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _thewin$[ebp]
	cmp	eax, DWORD PTR [edx+236]
	jne	SHORT $LN5@RemoveWind

; 579  : 	{
; 580  : 		if(Root_ == NULL)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN4@RemoveWind

; 581  : 			CurWindow_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+236], 0

; 582  : 		else

	jmp	SHORT $LN5@RemoveWind
$LN4@RemoveWind:

; 583  : 		{
; 584  : 			cur=Root_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
$LN2@RemoveWind:

; 585  : 			while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN5@RemoveWind

; 586  : 			{
; 587  : 				CurWindow_=cur->win;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+236], ecx

; 588  : 				cur=cur->Next;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _cur$[ebp], eax

; 589  : 			}

	jmp	SHORT $LN2@RemoveWind
$LN5@RemoveWind:

; 590  : 		}
; 591  : 	}
; 592  : 	LeaveCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCritical@C_Handler@@QAEXXZ	; C_Handler::LeaveCritical

; 593  : 	return(TRUE);

	mov	eax, 1

; 594  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?RemoveWindow@C_Handler@@QAEHPAVC_Window@@@Z ENDP	; C_Handler::RemoveWindow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_thewin$ = 8						; size = 4
?HideWindow@C_Handler@@QAEHPAVC_Window@@@Z PROC		; C_Handler::HideWindow
; _this$ = ecx

; 450  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 451  : 	WHLIST *cur;
; 452  : 
; 453  : 
; 454  : 	cur=Root_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
$LN4@HideWindow:

; 455  : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN3@HideWindow

; 456  : 	{
; 457  : 		if(cur->win == thewin && (cur->Flags & C_BIT_ENABLED))

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _thewin$[ebp]
	jne	SHORT $LN2@HideWindow
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 2048				; 00000800H
	je	SHORT $LN2@HideWindow

; 458  : 		{
; 459  : 			cur->Flags &= ~C_BIT_ENABLED;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, -2049				; fffff7ffH
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 460  : 			SetBehindWindow(cur->win);

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetBehindWindow@C_Handler@@QAEXPAVC_Window@@@Z ; C_Handler::SetBehindWindow

; 461  : 			cur->win->SetCritical(NULL);

	push	0
	mov	edx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?SetCritical@C_Window@@QAEXPAUF4CSECTIONHANDLE@@@Z ; C_Window::SetCritical

; 462  : 			if(CurWindow_ == thewin)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+236]
	cmp	ecx, DWORD PTR _thewin$[ebp]
	jne	SHORT $LN1@HideWindow

; 463  : 				CurWindow_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+236], 0
$LN1@HideWindow:

; 464  : 			return(TRUE);

	mov	eax, 1
	jmp	SHORT $LN5@HideWindow
$LN2@HideWindow:

; 465  : 		}
; 466  : 		cur=cur->Next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _cur$[ebp], ecx

; 467  : 	}

	jmp	SHORT $LN4@HideWindow
$LN3@HideWindow:

; 468  : 	return(FALSE);

	xor	eax, eax
$LN5@HideWindow:

; 469  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?HideWindow@C_Handler@@QAEHPAVC_Window@@@Z ENDP		; C_Handler::HideWindow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_thewin$ = 8						; size = 4
?ShowWindow@C_Handler@@QAEHPAVC_Window@@@Z PROC		; C_Handler::ShowWindow
; _this$ = ecx

; 429  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 430  : 	WHLIST *cur;
; 431  : 
; 432  : 	cur=Root_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
$LN3@ShowWindow:

; 433  : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN2@ShowWindow

; 434  : 	{
; 435  : 		if(cur->win == thewin && !(cur->Flags & C_BIT_ENABLED))

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _thewin$[ebp]
	jne	SHORT $LN1@ShowWindow
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 2048				; 00000800H
	jne	SHORT $LN1@ShowWindow

; 436  : 		{
; 437  : 			cur->win->SetCritical(UI_Critical);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?SetCritical@C_Window@@QAEXPAUF4CSECTIONHANDLE@@@Z ; C_Window::SetCritical

; 438  : 			cur->Flags |= C_BIT_ENABLED;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	or	ecx, 2048				; 00000800H
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 439  : 			cur->win->update_ = C_DRAW_REFRESHALL;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+104], 2

; 440  : 			cur->win->RefreshWindow();

	mov	edx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?RefreshWindow@C_Window@@QAEXXZ		; C_Window::RefreshWindow

; 441  : 			cur->win->SetSection(CurrentSection_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?SetSection@C_Window@@QAEXJ@Z		; C_Window::SetSection

; 442  : 			return(TRUE);

	mov	eax, 1
	jmp	SHORT $LN4@ShowWindow
$LN1@ShowWindow:

; 443  : 		}
; 444  : 		cur=cur->Next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _cur$[ebp], ecx

; 445  : 	}

	jmp	SHORT $LN3@ShowWindow
$LN2@ShowWindow:

; 446  : 	return(FALSE);

	xor	eax, eax
$LN4@ShowWindow:

; 447  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ShowWindow@C_Handler@@QAEHPAVC_Window@@@Z ENDP		; C_Handler::ShowWindow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_me$ = -12						; size = 4
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
?ProcessUserCallbacks@C_Handler@@QAEXXZ PROC		; C_Handler::ProcessUserCallbacks
; _this$ = ecx

; 1549 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1550 : 	CBLIST *cur,*me;
; 1551 : 
; 1552 : 	EnterCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EnterCritical@C_Handler@@QAEXXZ	; C_Handler::EnterCritical

; 1553 : 	cur=UserRoot_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$[ebp], ecx
$LN3@ProcessUse:

; 1554 : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN2@ProcessUse

; 1555 : 	{
; 1556 : 		me=cur;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _me$[ebp], edx

; 1557 : 		cur=cur->Next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$[ebp], ecx

; 1558 : 		if(me->Callback)

	mov	edx, DWORD PTR _me$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN1@ProcessUse

; 1559 : 			(*me->Callback)();

	mov	eax, DWORD PTR _me$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	ecx
$LN1@ProcessUse:

; 1560 : 	}

	jmp	SHORT $LN3@ProcessUse
$LN2@ProcessUse:

; 1561 : 	LeaveCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCritical@C_Handler@@QAEXXZ	; C_Handler::LeaveCritical

; 1562 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ProcessUserCallbacks@C_Handler@@QAEXXZ ENDP		; C_Handler::ProcessUserCallbacks
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
$T1 = -24						; size = 4
$T2 = -20						; size = 4
_retval$ = -16						; size = 4
_last$ = -12						; size = 4
_cur$ = -8						; size = 4
_this$ = -4						; size = 4
_cb$ = 8						; size = 4
?RemoveUserCallback@C_Handler@@QAEHP6AXXZ@Z PROC	; C_Handler::RemoveUserCallback
; _this$ = ecx

; 1346 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1347 : 	CBLIST *cur,*last;
; 1348 : 	BOOL retval=FALSE;

	mov	DWORD PTR _retval$[ebp], 0

; 1349 : 
; 1350 : 	if(cb == NULL || UserRoot_ == NULL) return(FALSE);

	cmp	DWORD PTR _cb$[ebp], 0
	je	SHORT $LN7@RemoveUser
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN8@RemoveUser
$LN7@RemoveUser:
	xor	eax, eax
	jmp	$LN9@RemoveUser
$LN8@RemoveUser:

; 1351 : 
; 1352 : 	EnterCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EnterCritical@C_Handler@@QAEXXZ	; C_Handler::EnterCritical

; 1353 : 	if(UserRoot_->Callback == cb)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _cb$[ebp]
	jne	SHORT $LN6@RemoveUser

; 1354 : 	{
; 1355 : 		SuspendTimer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SuspendTimer@C_Handler@@QAEXXZ		; C_Handler::SuspendTimer

; 1356 : 		last=UserRoot_;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _last$[ebp], edx

; 1357 : 		UserRoot_=UserRoot_->Next;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax

; 1358 : 		delete last;

	mov	ecx, DWORD PTR _last$[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1359 : 		ResumeTimer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResumeTimer@C_Handler@@QAEXXZ		; C_Handler::ResumeTimer

; 1360 : 		retval=TRUE;

	mov	DWORD PTR _retval$[ebp], 1

; 1361 : 	}
; 1362 : 	else

	jmp	$LN5@RemoveUser
$LN6@RemoveUser:

; 1363 : 	{
; 1364 : 		cur=UserRoot_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$[ebp], ecx

; 1365 : 		last=UserRoot_;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _last$[ebp], eax
$LN4@RemoveUser:

; 1366 : 		while((cur) && (cur->Next) && (!retval))

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN5@RemoveUser
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN5@RemoveUser
	cmp	DWORD PTR _retval$[ebp], 0
	jne	SHORT $LN5@RemoveUser

; 1367 : 		{
; 1368 : 			if(cur->Next->Callback == cb)

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _cb$[ebp]
	jne	SHORT $LN2@RemoveUser

; 1369 : 			{
; 1370 : 				SuspendTimer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SuspendTimer@C_Handler@@QAEXXZ		; C_Handler::SuspendTimer

; 1371 : 				last=cur->Next;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _last$[ebp], eax

; 1372 : 				cur->Next=cur->Next->Next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx

; 1373 : 				delete last;

	mov	edx, DWORD PTR _last$[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1374 : 				ResumeTimer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResumeTimer@C_Handler@@QAEXXZ		; C_Handler::ResumeTimer

; 1375 : 				retval=TRUE;

	mov	DWORD PTR _retval$[ebp], 1

; 1376 : 			}
; 1377 : 			else

	jmp	SHORT $LN1@RemoveUser
$LN2@RemoveUser:

; 1378 : 				cur=cur->Next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _cur$[ebp], edx
$LN1@RemoveUser:

; 1379 : 		}

	jmp	SHORT $LN4@RemoveUser
$LN5@RemoveUser:

; 1380 : 	}
; 1381 : 	LeaveCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCritical@C_Handler@@QAEXXZ	; C_Handler::LeaveCritical

; 1382 : 	return(retval);

	mov	eax, DWORD PTR _retval$[ebp]
$LN9@RemoveUser:

; 1383 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?RemoveUserCallback@C_Handler@@QAEHP6AXXZ@Z ENDP	; C_Handler::RemoveUserCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
$T1 = -16						; size = 4
_newcb$ = -12						; size = 4
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_cb$ = 8						; size = 4
?AddUserCallback@C_Handler@@QAEHP6AXXZ@Z PROC		; C_Handler::AddUserCallback
; _this$ = ecx

; 1311 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1312 : 	CBLIST *cur,*newcb;
; 1313 : 
; 1314 : 	if(cb == NULL) return(FALSE);

	cmp	DWORD PTR _cb$[ebp], 0
	jne	SHORT $LN8@AddUserCal
	xor	eax, eax
	jmp	$LN9@AddUserCal
$LN8@AddUserCal:

; 1315 : 
; 1316 : 	cur=UserRoot_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$[ebp], ecx
$LN7@AddUserCal:

; 1317 : 
; 1318 : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN6@AddUserCal

; 1319 : 	{
; 1320 : 		if(cur->Callback == cb)

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _cb$[ebp]
	jne	SHORT $LN5@AddUserCal

; 1321 : 			return(FALSE);

	xor	eax, eax
	jmp	SHORT $LN9@AddUserCal
$LN5@AddUserCal:

; 1322 : 		cur=cur->Next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _cur$[ebp], edx

; 1323 : 	}

	jmp	SHORT $LN7@AddUserCal
$LN6@AddUserCal:

; 1324 : 
; 1325 : 	newcb=new CBLIST;

	push	8
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR _newcb$[ebp], eax

; 1326 : 	newcb->Callback=cb;

	mov	ecx, DWORD PTR _newcb$[ebp]
	mov	edx, DWORD PTR _cb$[ebp]
	mov	DWORD PTR [ecx], edx

; 1327 : 	newcb->Next=NULL;

	mov	eax, DWORD PTR _newcb$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1328 : 
; 1329 : 	EnterCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EnterCritical@C_Handler@@QAEXXZ	; C_Handler::EnterCritical

; 1330 : 	if(UserRoot_ == NULL)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN4@AddUserCal

; 1331 : 	{
; 1332 : 		UserRoot_=newcb;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newcb$[ebp]
	mov	DWORD PTR [edx+4], eax

; 1333 : 	}
; 1334 : 	else

	jmp	SHORT $LN3@AddUserCal
$LN4@AddUserCal:

; 1335 : 	{
; 1336 : 		cur=UserRoot_;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _cur$[ebp], edx
$LN2@AddUserCal:

; 1337 : 		while(cur->Next)

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@AddUserCal

; 1338 : 			cur=cur->Next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _cur$[ebp], edx
	jmp	SHORT $LN2@AddUserCal
$LN1@AddUserCal:

; 1339 : 		cur->Next=newcb;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR _newcb$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN3@AddUserCal:

; 1340 : 	}
; 1341 : 	LeaveCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCritical@C_Handler@@QAEXXZ	; C_Handler::LeaveCritical

; 1342 : 	return(TRUE);

	mov	eax, 1
$LN9@AddUserCal:

; 1343 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?AddUserCallback@C_Handler@@QAEHP6AXXZ@Z ENDP		; C_Handler::AddUserCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ResumeTimer@C_Handler@@QAEXXZ PROC			; C_Handler::ResumeTimer
; _this$ = ecx

; 1706 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1707 : 	if(TimerThread_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	je	SHORT $LN2@ResumeTime

; 1708 : 		ResumeThread (TimerThread_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	push	edx
	call	DWORD PTR __imp__ResumeThread@4
$LN2@ResumeTime:

; 1709 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ResumeTimer@C_Handler@@QAEXXZ ENDP			; C_Handler::ResumeTimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SuspendTimer@C_Handler@@QAEXXZ PROC			; C_Handler::SuspendTimer
; _this$ = ecx

; 1700 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1701 : 	if(TimerThread_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	je	SHORT $LN2@SuspendTim

; 1702 : 		SuspendThread (TimerThread_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	push	edx
	call	DWORD PTR __imp__SuspendThread@4
$LN2@SuspendTim:

; 1703 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SuspendTimer@C_Handler@@QAEXXZ ENDP			; C_Handler::SuspendTimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EndTimerThread@C_Handler@@QAEXXZ PROC			; C_Handler::EndTimerThread
; _this$ = ecx

; 1684 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1685 : 	if(TimerThread_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	je	SHORT $LN4@EndTimerTh

; 1686 : 	{
; 1687 : 		TimerLoop_=0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+52], 0
$LN2@EndTimerTh:

; 1688 : 
; 1689 :       // Wait for thread to end
; 1690 :       while (TimerLoop_ == 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+52], 0
	jne	SHORT $LN1@EndTimerTh

; 1691 :          Sleep(1);

	push	1
	call	DWORD PTR __imp__Sleep@4
	jmp	SHORT $LN2@EndTimerTh
$LN1@EndTimerTh:

; 1692 : 
; 1693 : 		CloseHandle(TimerThread_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	call	DWORD PTR __imp__CloseHandle@4

; 1694 : 		TimerThread_=0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+80], 0
$LN4@EndTimerTh:

; 1695 : 	}
; 1696 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?EndTimerThread@C_Handler@@QAEXXZ ENDP			; C_Handler::EndTimerThread
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_interval$ = 8						; size = 4
?StartTimerThread@C_Handler@@QAEXJ@Z PROC		; C_Handler::StartTimerThread
; _this$ = ecx

; 1672 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1673 : 	if(TimerThread_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	je	SHORT $LN1@StartTimer

; 1674 : 		return;

	jmp	SHORT $LN2@StartTimer
$LN1@StartTimer:

; 1675 : 
; 1676 : 	TimerLoop_=1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+52], 1

; 1677 : 	TimerSleep_=interval;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _interval$[ebp]
	mov	DWORD PTR [edx+108], eax

; 1678 : 	TimerThread_ = (HANDLE)_beginthreadex( NULL, 0, TimerLoop, this, 0, &TimerID_ );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	push	OFFSET ?TimerLoop@C_Handler@@CGIPAX@Z	; C_Handler::TimerLoop
	push	0
	push	0
	call	__beginthreadex
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+80], eax
$LN2@StartTimer:

; 1679 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?StartTimerThread@C_Handler@@QAEXJ@Z ENDP		; C_Handler::StartTimerThread
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ResumeControl@C_Handler@@QAEXXZ PROC			; C_Handler::ResumeControl
; _this$ = ecx

; 1664 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1665 : 	EnterCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EnterCritical@C_Handler@@QAEXXZ	; C_Handler::EnterCritical

; 1666 : 	if(TimerThread_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	je	SHORT $LN1@ResumeCont

; 1667 : 		ResumeThread (ControlThread_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	call	DWORD PTR __imp__ResumeThread@4
$LN1@ResumeCont:

; 1668 : 	LeaveCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCritical@C_Handler@@QAEXXZ	; C_Handler::LeaveCritical

; 1669 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ResumeControl@C_Handler@@QAEXXZ ENDP			; C_Handler::ResumeControl
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SuspendControl@C_Handler@@QAEXXZ PROC			; C_Handler::SuspendControl
; _this$ = ecx

; 1656 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1657 : 	EnterCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EnterCritical@C_Handler@@QAEXXZ	; C_Handler::EnterCritical

; 1658 : 	if(TimerThread_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	je	SHORT $LN1@SuspendCon

; 1659 : 		SuspendThread (ControlThread_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	call	DWORD PTR __imp__SuspendThread@4
$LN1@SuspendCon:

; 1660 : 	LeaveCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCritical@C_Handler@@QAEXXZ	; C_Handler::LeaveCritical

; 1661 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SuspendControl@C_Handler@@QAEXXZ ENDP			; C_Handler::SuspendControl
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EndControlThread@C_Handler@@QAEXXZ PROC		; C_Handler::EndControlThread
; _this$ = ecx

; 1634 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1635 : 	if(ControlThread_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+88], 0
	je	SHORT $LN4@EndControl

; 1636 : 	{
; 1637 : 		ControlLoop_=0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], 0

; 1638 :       SetEvent (WakeControl_);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	push	eax
	call	DWORD PTR __imp__SetEvent@4
$LN3@EndControl:

; 1639 : 
; 1640 :       // Wait for thread to end
; 1641 :       while (ControlLoop_ == 0)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+56], 0
	jne	SHORT $LN2@EndControl

; 1642 :          Sleep(1);

	push	1
	call	DWORD PTR __imp__Sleep@4
	jmp	SHORT $LN3@EndControl
$LN2@EndControl:

; 1643 : 
; 1644 : 		CloseHandle(ControlThread_);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+88]
	push	eax
	call	DWORD PTR __imp__CloseHandle@4

; 1645 : 		ControlThread_=0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+88], 0
$LN4@EndControl:

; 1646 : 	}
; 1647 : 	if(WakeControl_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+96], 0
	je	SHORT $LN5@EndControl

; 1648 : 	{
; 1649 : 		CloseHandle(WakeControl_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	call	DWORD PTR __imp__CloseHandle@4

; 1650 : 		WakeControl_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+96], 0
$LN5@EndControl:

; 1651 : 	}
; 1652 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?EndControlThread@C_Handler@@QAEXXZ ENDP		; C_Handler::EndControlThread
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_sleeptime$ = 8						; size = 4
?StartControlThread@C_Handler@@QAEXJ@Z PROC		; C_Handler::StartControlThread
; _this$ = ecx

; 1618 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1619 : 	if(ControlThread_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+88], 0
	je	SHORT $LN2@StartContr

; 1620 : 		return;

	jmp	SHORT $LN3@StartContr
$LN2@StartContr:

; 1621 : 
; 1622 : 	WakeControl_= CreateEvent( NULL, FALSE, FALSE, "Awaken Control Thread" );

	push	OFFSET ??_C@_0BG@IFALFLLC@Awaken?5Control?5Thread?$AA@
	push	0
	push	0
	push	0
	call	DWORD PTR __imp__CreateEventA@16
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+96], eax

; 1623 : 	if(!WakeControl_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+96], 0
	jne	SHORT $LN1@StartContr

; 1624 : 	{
; 1625 : 		return;

	jmp	SHORT $LN3@StartContr
$LN1@StartContr:

; 1626 : 	}
; 1627 : 	ControlLoop_=1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], 1

; 1628 : 	ControlSleep_=sleeptime;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _sleeptime$[ebp]
	mov	DWORD PTR [ecx+112], edx

; 1629 : 	ControlThread_ = (HANDLE)_beginthreadex( NULL, 0, ControlLoop, this, 0, &ControlID_ );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 76					; 0000004cH
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	push	OFFSET ?ControlLoop@C_Handler@@CGIPAX@Z	; C_Handler::ControlLoop
	push	0
	push	0
	call	__beginthreadex
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+88], eax
$LN3@StartContr:

; 1630 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?StartControlThread@C_Handler@@QAEXJ@Z ENDP		; C_Handler::StartControlThread
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ResumeOutput@C_Handler@@QAEXXZ PROC			; C_Handler::ResumeOutput
; _this$ = ecx

; 1609 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1610 : 	EnterCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EnterCritical@C_Handler@@QAEXXZ	; C_Handler::EnterCritical

; 1611 : 	if(TimerThread_){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	je	SHORT $LN1@ResumeOutp

; 1612 : 		ResumeThread (OutputThread_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	call	DWORD PTR __imp__ResumeThread@4
$LN1@ResumeOutp:

; 1613 : 	}
; 1614 : 	LeaveCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCritical@C_Handler@@QAEXXZ	; C_Handler::LeaveCritical

; 1615 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ResumeOutput@C_Handler@@QAEXXZ ENDP			; C_Handler::ResumeOutput
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SuspendOutput@C_Handler@@QAEXXZ PROC			; C_Handler::SuspendOutput
; _this$ = ecx

; 1600 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1601 : 	EnterCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EnterCritical@C_Handler@@QAEXXZ	; C_Handler::EnterCritical

; 1602 : 	if(TimerThread_){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	je	SHORT $LN1@SuspendOut

; 1603 : 		SuspendThread(OutputThread_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	call	DWORD PTR __imp__SuspendThread@4
$LN1@SuspendOut:

; 1604 : 	}
; 1605 : 	LeaveCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCritical@C_Handler@@QAEXXZ	; C_Handler::LeaveCritical

; 1606 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SuspendOutput@C_Handler@@QAEXXZ ENDP			; C_Handler::SuspendOutput
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EndOutputThread@C_Handler@@QAEXXZ PROC			; C_Handler::EndOutputThread
; _this$ = ecx

; 1579 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1580 : 	if (OutputThread_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+84], 0
	je	SHORT $LN4@EndOutputT

; 1581 : 	{
; 1582 : 		OutputLoop_=0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], 0

; 1583 : 		SetEvent (WakeOutput_);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+92]
	push	eax
	call	DWORD PTR __imp__SetEvent@4
$LN3@EndOutputT:

; 1584 : 		// Wait for thread to end
; 1585 : 		while (OutputLoop_ == 0){

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+60], 0
	jne	SHORT $LN2@EndOutputT

; 1586 : 			Sleep(1);

	push	1
	call	DWORD PTR __imp__Sleep@4

; 1587 : 		}

	jmp	SHORT $LN3@EndOutputT
$LN2@EndOutputT:

; 1588 : 
; 1589 : 		CloseHandle(OutputThread_);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	push	eax
	call	DWORD PTR __imp__CloseHandle@4

; 1590 : 		OutputThread_=0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+84], 0
$LN4@EndOutputT:

; 1591 : 	}
; 1592 : 	if (WakeOutput_){

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+92], 0
	je	SHORT $LN5@EndOutputT

; 1593 : 		CloseHandle(WakeOutput_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	push	ecx
	call	DWORD PTR __imp__CloseHandle@4

; 1594 : 		WakeOutput_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+92], 0
$LN5@EndOutputT:

; 1595 : 	}
; 1596 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?EndOutputThread@C_Handler@@QAEXXZ ENDP			; C_Handler::EndOutputThread
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?StartOutputThread@C_Handler@@QAEXXZ PROC		; C_Handler::StartOutputThread
; _this$ = ecx

; 1565 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1566 : 	if(OutputThread_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+84], 0
	je	SHORT $LN2@StartOutpu

; 1567 : 		return;

	jmp	SHORT $LN3@StartOutpu
$LN2@StartOutpu:

; 1568 : 
; 1569 : 	WakeOutput_= CreateEvent( NULL, FALSE, FALSE, "Awaken Output Thread" );

	push	OFFSET ??_C@_0BF@JCOLHHNI@Awaken?5Output?5Thread?$AA@
	push	0
	push	0
	push	0
	call	DWORD PTR __imp__CreateEventA@16
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+92], eax

; 1570 : 	if(!WakeOutput_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+92], 0
	jne	SHORT $LN1@StartOutpu

; 1571 : 		return;

	jmp	SHORT $LN3@StartOutpu
$LN1@StartOutpu:

; 1572 : 
; 1573 : 	OutputLoop_=1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], 1

; 1574 : 	OutputThread_ = (HANDLE)_beginthreadex( NULL, 0, OutputLoop, this, 0, &OutputID_ );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	push	OFFSET ?OutputLoop@C_Handler@@CGIPAX@Z	; C_Handler::OutputLoop
	push	0
	push	0
	call	__beginthreadex
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+84], eax
$LN3@StartOutpu:

; 1575 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?StartOutputThread@C_Handler@@QAEXXZ ENDP		; C_Handler::StartOutputThread
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
$T1 = -16						; size = 4
_this$ = -12						; size = 4
_cur$ = -8						; size = 4
_newwin$ = -4						; size = 4
_thewin$ = 8						; size = 4
_Flags$ = 12						; size = 4
?AddWindow@C_Handler@@QAEHPAVC_Window@@J@Z PROC		; C_Handler::AddWindow
; _this$ = ecx

; 360  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 361  : 	WHLIST *newwin,*cur;
; 362  : 
; 363  : 	cur=Root_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
$LN19@AddWindow:

; 364  : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN18@AddWindow

; 365  : 	{
; 366  : 		if(cur->win == thewin)

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _thewin$[ebp]
	jne	SHORT $LN17@AddWindow

; 367  : 			return(FALSE);

	xor	eax, eax
	jmp	$LN20@AddWindow
$LN17@AddWindow:

; 368  : 		cur=cur->Next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _cur$[ebp], edx

; 369  : 	}

	jmp	SHORT $LN19@AddWindow
$LN18@AddWindow:

; 370  : 
; 371  : 	newwin=new WHLIST;

	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR _newwin$[ebp], eax

; 372  : 	if(newwin == NULL)

	cmp	DWORD PTR _newwin$[ebp], 0
	jne	SHORT $LN16@AddWindow

; 373  : 		return(FALSE);

	xor	eax, eax
	jmp	$LN20@AddWindow
$LN16@AddWindow:

; 374  : 
; 375  : 	newwin->win=thewin;

	mov	ecx, DWORD PTR _newwin$[ebp]
	mov	edx, DWORD PTR _thewin$[ebp]
	mov	DWORD PTR [ecx], edx

; 376  : 	newwin->Flags=Flags;

	mov	eax, DWORD PTR _newwin$[ebp]
	mov	ecx, DWORD PTR _Flags$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 377  : 	newwin->Next=NULL;

	mov	edx, DWORD PTR _newwin$[ebp]
	mov	DWORD PTR [edx+12], 0

; 378  : 	newwin->Prev=NULL;

	mov	eax, DWORD PTR _newwin$[ebp]
	mov	DWORD PTR [eax+16], 0

; 379  : 
; 380  : 	EnterCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EnterCritical@C_Handler@@QAEXXZ	; C_Handler::EnterCritical

; 381  : 
; 382  : 	if(Root_ == NULL)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN15@AddWindow

; 383  : 	{
; 384  : 		Root_=newwin;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newwin$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	$LN14@AddWindow
$LN15@AddWindow:

; 385  : 	}
; 386  : 	else if(thewin->GetDepth() < Root_->win->GetDepth() && thewin->GetDepth() || (thewin->GetFlags() & C_BIT_CANTMOVE && !(Root_->win->GetFlags() & C_BIT_CANTMOVE)))

	mov	ecx, DWORD PTR _thewin$[ebp]
	call	?GetDepth@C_Window@@QAEFXZ		; C_Window::GetDepth
	movsx	esi, ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx]
	call	?GetDepth@C_Window@@QAEFXZ		; C_Window::GetDepth
	cwde
	cmp	esi, eax
	jge	SHORT $LN11@AddWindow
	mov	ecx, DWORD PTR _thewin$[ebp]
	call	?GetDepth@C_Window@@QAEFXZ		; C_Window::GetDepth
	movsx	ecx, ax
	test	ecx, ecx
	jne	SHORT $LN12@AddWindow
$LN11@AddWindow:
	mov	ecx, DWORD PTR _thewin$[ebp]
	call	?GetFlags@C_Window@@QAEJXZ		; C_Window::GetFlags
	and	eax, 2097152				; 00200000H
	je	SHORT $LN13@AddWindow
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	call	?GetFlags@C_Window@@QAEJXZ		; C_Window::GetFlags
	and	eax, 2097152				; 00200000H
	jne	SHORT $LN13@AddWindow
$LN12@AddWindow:

; 387  : 	{
; 388  : 		newwin->Next=Root_;

	mov	ecx, DWORD PTR _newwin$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+12], eax

; 389  : 		Root_->Prev=newwin;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _newwin$[ebp]
	mov	DWORD PTR [edx+16], eax

; 390  : 		Root_=newwin;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newwin$[ebp]
	mov	DWORD PTR [ecx], edx

; 391  : 	}
; 392  : 	else

	jmp	$LN14@AddWindow
$LN13@AddWindow:

; 393  : 	{
; 394  : 		cur=Root_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
$LN9@AddWindow:

; 395  : 		while(cur && newwin)

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN14@AddWindow
	cmp	DWORD PTR _newwin$[ebp], 0
	je	$LN14@AddWindow

; 396  : 		{
; 397  : 			if(thewin->GetDepth() < cur->win->GetDepth() && thewin->GetDepth() || (thewin->GetFlags() & C_BIT_CANTMOVE && !(cur->win->GetFlags() & C_BIT_CANTMOVE)))

	mov	ecx, DWORD PTR _thewin$[ebp]
	call	?GetDepth@C_Window@@QAEFXZ		; C_Window::GetDepth
	movsx	esi, ax
	mov	edx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetDepth@C_Window@@QAEFXZ		; C_Window::GetDepth
	cwde
	cmp	esi, eax
	jge	SHORT $LN5@AddWindow
	mov	ecx, DWORD PTR _thewin$[ebp]
	call	?GetDepth@C_Window@@QAEFXZ		; C_Window::GetDepth
	movsx	ecx, ax
	test	ecx, ecx
	jne	SHORT $LN6@AddWindow
$LN5@AddWindow:
	mov	ecx, DWORD PTR _thewin$[ebp]
	call	?GetFlags@C_Window@@QAEJXZ		; C_Window::GetFlags
	and	eax, 2097152				; 00200000H
	je	SHORT $LN7@AddWindow
	mov	edx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetFlags@C_Window@@QAEJXZ		; C_Window::GetFlags
	and	eax, 2097152				; 00200000H
	jne	SHORT $LN7@AddWindow
$LN6@AddWindow:

; 398  : 			{
; 399  : 				newwin->Next=cur;

	mov	eax, DWORD PTR _newwin$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 400  : 				newwin->Prev=cur->Prev;

	mov	edx, DWORD PTR _newwin$[ebp]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], ecx

; 401  : 				newwin->Prev->Next=newwin;

	mov	edx, DWORD PTR _newwin$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _newwin$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 402  : 				newwin->Next->Prev=newwin;

	mov	edx, DWORD PTR _newwin$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _newwin$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 403  : 				newwin=NULL;

	mov	DWORD PTR _newwin$[ebp], 0
	jmp	SHORT $LN4@AddWindow
$LN7@AddWindow:

; 404  : 			}
; 405  : 			else if(cur->Next == NULL)

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN3@AddWindow

; 406  : 			{
; 407  : 				cur->Next=newwin;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR _newwin$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 408  : 				newwin->Prev=cur;

	mov	edx, DWORD PTR _newwin$[ebp]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx+16], eax

; 409  : 				newwin=NULL;

	mov	DWORD PTR _newwin$[ebp], 0

; 410  : 			}
; 411  : 			else

	jmp	SHORT $LN4@AddWindow
$LN3@AddWindow:

; 412  : 				cur=cur->Next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _cur$[ebp], edx
$LN4@AddWindow:

; 413  : 		}

	jmp	$LN9@AddWindow
$LN14@AddWindow:

; 414  : 	}
; 415  : 	thewin->SetHandler(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _thewin$[ebp]
	call	?SetHandler@C_Window@@QAEXPAVC_Handler@@@Z ; C_Window::SetHandler

; 416  : 	thewin->update_ |= C_DRAW_REFRESHALL;

	mov	ecx, DWORD PTR _thewin$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	or	edx, 2
	mov	eax, DWORD PTR _thewin$[ebp]
	mov	DWORD PTR [eax+104], edx

; 417  : 	thewin->RefreshWindow();

	mov	ecx, DWORD PTR _thewin$[ebp]
	call	?RefreshWindow@C_Window@@QAEXXZ		; C_Window::RefreshWindow

; 418  : 	if(thewin->GetFlags() & C_BIT_ENABLED)

	mov	ecx, DWORD PTR _thewin$[ebp]
	call	?GetFlags@C_Window@@QAEJXZ		; C_Window::GetFlags
	and	eax, 2048				; 00000800H
	je	SHORT $LN1@AddWindow

; 419  : 		CurWindow_=thewin;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _thewin$[ebp]
	mov	DWORD PTR [ecx+236], edx
$LN1@AddWindow:

; 420  : 
; 421  : 	// sfr: before adding window, correct its constraints to screen
; 422  : 	thewin->ConstraintsCorrection(GetW(), GetH());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetH@C_Handler@@QAEJXZ			; C_Handler::GetH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetW@C_Handler@@QAEJXZ			; C_Handler::GetW
	push	eax
	mov	ecx, DWORD PTR _thewin$[ebp]
	call	?ConstraintsCorrection@C_Window@@QAEXJJ@Z ; C_Window::ConstraintsCorrection

; 423  : 
; 424  : 	LeaveCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCritical@C_Handler@@QAEXXZ	; C_Handler::LeaveCritical

; 425  : 	return(TRUE);

	mov	eax, 1
$LN20@AddWindow:

; 426  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?AddWindow@C_Handler@@QAEHPAVC_Window@@J@Z ENDP		; C_Handler::AddWindow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_bResult$2 = -76					; size = 4
$T3 = -72						; size = 4
$T4 = -68						; size = 4
$T5 = -64						; size = 4
tv77 = -60						; size = 4
_bResult$6 = -56					; size = 4
tv144 = -52						; size = 4
$T7 = -48						; size = 4
_dispXres$ = -44					; size = 4
_dispYres$ = -40					; size = 4
_this$ = -36						; size = 4
_dest$8 = -32						; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_hwnd$ = 8						; size = 4
___formal$ = 12						; size = 4
_Primary$ = 16						; size = 4
?Setup@C_Handler@@QAEXPAUHWND__@@PAVImageBuffer@@1@Z PROC ; C_Handler::Setup
; _this$ = ecx

; 115  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Setup@C_Handler@@QAEXPAUHWND__@@PAVImageBuffer@@1@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 64					; 00000040H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 116  : 	Primary_=Primary;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Primary$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 117  : //	PrimaryRect_=PrimaryRect;
; 118  : 	AppWindow_=hwnd;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _hwnd$[ebp]
	mov	DWORD PTR [edx+8], eax

; 119  : 
; 120  : 	int dispXres = 800, dispYres = 600;

	mov	DWORD PTR _dispXres$[ebp], 800		; 00000320H
	mov	DWORD PTR _dispYres$[ebp], 600		; 00000258H

; 121  : 
; 122  : 	if (g_bHiResUI)

	movzx	ecx, BYTE PTR ?g_bHiResUI@@3_NA		; g_bHiResUI
	test	ecx, ecx
	je	SHORT $LN10@Setup

; 123  : 	{
; 124  : 		dispXres = 1024;

	mov	DWORD PTR _dispXres$[ebp], 1024		; 00000400H

; 125  : 		dispYres = 768;

	mov	DWORD PTR _dispYres$[ebp], 768		; 00000300H
$LN10@Setup:

; 126  : 	}
; 127  : 
; 128  : // OW V2
; 129  : #if 1
; 130  : 	if(FalconDisplay.displayFullScreen)

	cmp	DWORD PTR ?FalconDisplay@@3VFalconDisplayConfiguration@@A+504, 0
	je	$LN9@Setup

; 131  : 	{
; 132  : // OW 11-08-2000
; 133  : #if 0
; 134  : 		Front_=Primary_;
; 135  : #else
; 136  : 		Front_=new ImageBuffer;

	push	348					; 0000015cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN13@Setup
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0ImageBuffer@@QAE@XZ			; ImageBuffer::ImageBuffer
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN14@Setup
$LN13@Setup:
	mov	DWORD PTR tv77[ebp], 0
$LN14@Setup:
	mov	edx, DWORD PTR tv77[ebp]
	mov	DWORD PTR $T4[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR [eax+16], ecx

; 137  : 		
; 138  : 
; 139  : 		BOOL bResult;
; 140  : 		if(FalconDisplay.theDisplayDevice.IsHardware())

	mov	ecx, OFFSET ?FalconDisplay@@3VFalconDisplayConfiguration@@A+132
	call	?IsHardware@DisplayDevice@@QAEHXZ	; DisplayDevice::IsHardware
	test	eax, eax
	je	SHORT $LN8@Setup

; 141  : 			bResult = Front_->Setup(&FalconDisplay.theDisplayDevice,dispXres,dispYres,VideoMem,None,FALSE);

	push	0
	push	0
	push	0
	push	0
	push	4
	push	1
	mov	edx, DWORD PTR _dispYres$[ebp]
	push	edx
	mov	eax, DWORD PTR _dispXres$[ebp]
	push	eax
	push	OFFSET ?FalconDisplay@@3VFalconDisplayConfiguration@@A+132
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	call	?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z ; ImageBuffer::Setup
	mov	DWORD PTR _bResult$2[ebp], eax

; 142  : 		else	

	jmp	SHORT $LN7@Setup
$LN8@Setup:

; 143  : 			bResult  = Front_->Setup(&FalconDisplay.theDisplayDevice,dispXres,dispYres,SystemMem,None,FALSE);

	push	0
	push	0
	push	0
	push	0
	push	4
	push	0
	mov	edx, DWORD PTR _dispYres$[ebp]
	push	edx
	mov	eax, DWORD PTR _dispXres$[ebp]
	push	eax
	push	OFFSET ?FalconDisplay@@3VFalconDisplayConfiguration@@A+132
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	call	?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z ; ImageBuffer::Setup
	mov	DWORD PTR _bResult$2[ebp], eax
$LN7@Setup:

; 144  : #endif
; 145  : 
; 146  : // OW now handled by running in software mode on V1 and V2
; 147  : #if 0
; 148  : 		// OW FIXME: hack export a function from device or somewhere
; 149  : 		DXContext *pCtx = FalconDisplay.theDisplayDevice.GetDefaultRC();
; 150  : 		if(!(pCtx->m_pcapsDD->dwCaps2 & DDCAPS2_CANRENDERWINDOWED))
; 151  : 		{
; 152  : 			int nWidth = 16;
; 153  : 			int nHeight = 16;
; 154  : 
; 155  : 			m_rcMouseImage.left = 0;
; 156  : 			m_rcMouseImage.top = 0;
; 157  : 			m_rcMouseImage.bottom = nWidth;
; 158  : 			m_rcMouseImage.right = nHeight;
; 159  : 
; 160  : 			// prolly voodoo 1 or 2
; 161  : 			m_pMouseImage = new ImageBuffer;
; 162  : 			if(m_pMouseImage->Setup(&FalconDisplay.theDisplayDevice, nWidth, nHeight, SystemMem, None, AppWindow_, FALSE, FALSE))
; 163  : 			{
; 164  : 				WORD *pSurface = (WORD *) m_pMouseImage->Lock();
; 165  : 				int nStride	= m_pMouseImage->targetStride() / m_pMouseImage->PixelSize();
; 166  : 				int nHeight	= m_pMouseImage->targetYres();
; 167  : 
; 168  : 				ShiAssert(pSurface);
; 169  : 
; 170  : 				if(pSurface)
; 171  : 				{
; 172  : 					static WORD cursorImage[16][16] =
; 173  : 					{
; 174  : 						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
; 175  : 						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xffff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
; 176  : 						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xffff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
; 177  : 						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xffff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
; 178  : 						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xffff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
; 179  : 						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xffff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
; 180  : 						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xffff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
; 181  : 						0x00, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x00, 
; 182  : 						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xffff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
; 183  : 						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xffff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
; 184  : 						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xffff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
; 185  : 						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xffff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
; 186  : 						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xffff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
; 187  : 						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xffff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
; 188  : 						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
; 189  : 						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
; 190  : 					};
; 191  : 
; 192  : 					memcpy(pSurface, cursorImage, 256 * 2);
; 193  : 					m_pMouseImage->Unlock();
; 194  : 
; 195  : 					m_pMouseImage->SetChromaKey(0);
; 196  : 				}
; 197  : 			}
; 198  : 		}
; 199  : #endif
; 200  : 	}
; 201  : 	//windowed
; 202  : 	else

	jmp	$LN6@Setup
$LN9@Setup:

; 203  : 	{
; 204  : 		Front_=new ImageBuffer;

	push	348					; 0000015cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN15@Setup
	mov	ecx, DWORD PTR $T7[ebp]
	call	??0ImageBuffer@@QAE@XZ			; ImageBuffer::ImageBuffer
	mov	DWORD PTR tv144[ebp], eax
	jmp	SHORT $LN16@Setup
$LN15@Setup:
	mov	DWORD PTR tv144[ebp], 0
$LN16@Setup:
	mov	edx, DWORD PTR tv144[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [eax+16], ecx

; 205  : 
; 206  : 		BOOL bResult;
; 207  : 		if(FalconDisplay.theDisplayDevice.IsHardware())

	mov	ecx, OFFSET ?FalconDisplay@@3VFalconDisplayConfiguration@@A+132
	call	?IsHardware@DisplayDevice@@QAEHXZ	; DisplayDevice::IsHardware
	test	eax, eax
	je	SHORT $LN5@Setup

; 208  : 			bResult = Front_->Setup(&FalconDisplay.theDisplayDevice,dispXres,dispYres,VideoMem,None,FALSE);

	push	0
	push	0
	push	0
	push	0
	push	4
	push	1
	mov	edx, DWORD PTR _dispYres$[ebp]
	push	edx
	mov	eax, DWORD PTR _dispXres$[ebp]
	push	eax
	push	OFFSET ?FalconDisplay@@3VFalconDisplayConfiguration@@A+132
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	call	?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z ; ImageBuffer::Setup
	mov	DWORD PTR _bResult$6[ebp], eax

; 209  : 		else	

	jmp	SHORT $LN4@Setup
$LN5@Setup:

; 210  : 			bResult  = Front_->Setup(&FalconDisplay.theDisplayDevice,dispXres,dispYres,SystemMem,None,FALSE);

	push	0
	push	0
	push	0
	push	0
	push	4
	push	0
	mov	edx, DWORD PTR _dispYres$[ebp]
	push	edx
	mov	eax, DWORD PTR _dispXres$[ebp]
	push	eax
	push	OFFSET ?FalconDisplay@@3VFalconDisplayConfiguration@@A+132
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	call	?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z ; ImageBuffer::Setup
	mov	DWORD PTR _bResult$6[ebp], eax
$LN4@Setup:

; 211  : 
; 212  : 		if(!bResult)

	cmp	DWORD PTR _bResult$6[ebp], 0
	jne	SHORT $LN6@Setup

; 213  : 		{
; 214  : 			MonoPrint("Can't create back surface for UI\n");

	push	OFFSET ??_C@_0CC@JFLFHALF@Can?8t?5create?5back?5surface?5for?5UI@
	call	_MonoPrint
	add	esp, 4

; 215  : 			Front_=Primary_;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx
$LN6@Setup:

; 216  : 		}
; 217  : 	}
; 218  : #else
; 219  : 	Front_=new ImageBuffer;
; 220  : 
; 221  : 	BOOL bResult;
; 222  : 	if(FalconDisplay.theDisplayDevice.IsHardware())
; 223  : 		bResult = Front_->Setup(&FalconDisplay.theDisplayDevice,800,600,VideoMem,None,FALSE);
; 224  : 	else	
; 225  : 		bResult  = Front_->Setup(&FalconDisplay.theDisplayDevice,800,600,SystemMem,None,FALSE);
; 226  : 
; 227  : 	if(!bResult)
; 228  : 	{
; 229  : 		MonoPrint("Can't create back surface for UI\n");
; 230  : 		Front_=Primary_;
; 231  : 	}
; 232  : #endif
; 233  : 
; 234  : 	// OW - WM_MOVE does not get sent to the app in response to SetWindowPos
; 235  : 	if(!FalconDisplay.displayFullScreen)

	cmp	DWORD PTR ?FalconDisplay@@3VFalconDisplayConfiguration@@A+504, 0
	jne	SHORT $LN2@Setup

; 236  : 	{
; 237  : 		RECT dest;
; 238  : 		GetClientRect(hwnd, &dest);

	lea	edx, DWORD PTR _dest$8[ebp]
	push	edx
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetClientRect@8

; 239  : 		ClientToScreen(hwnd, (LPPOINT)&dest);

	lea	ecx, DWORD PTR _dest$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__ClientToScreen@8

; 240  : 		ClientToScreen(hwnd, (LPPOINT)&dest+1);

	lea	eax, DWORD PTR _dest$8[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__ClientToScreen@8

; 241  : 		if (Primary_ && Primary_->frontSurface()) 

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN1@Setup
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?frontSurface@ImageBuffer@@QAEPAUIDirectDrawSurface7@@XZ ; ImageBuffer::frontSurface
	test	eax, eax
	je	SHORT $LN1@Setup

; 242  : 		{
; 243  : 			Primary_->UpdateFrontWindowRect(&dest);

	lea	ecx, DWORD PTR _dest$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	call	?UpdateFrontWindowRect@ImageBuffer@@QAEXPAUtagRECT@@@Z ; ImageBuffer::UpdateFrontWindowRect
$LN1@Setup:

; 244  : 		}
; 245  : 		InvalidateRect(hwnd,&dest,FALSE);

	push	0
	lea	eax, DWORD PTR _dest$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__InvalidateRect@12
$LN2@Setup:

; 246  : 	}
; 247  : 
; 248  : 	// This will be correct UNLESS the work surface is a FLIPPING backbuffer of the primary
; 249  : 	// AND the application is running in a window.  Not likly...
; 250  : 	// By the way, this means this rect could really go away entirely...
; 251  : 	FrontRect_.top		= 0;;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+40], 0

; 252  : 	FrontRect_.left		= 0;;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 0

; 253  : 	FrontRect_.bottom	= Front_->targetYres();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	call	?targetYres@ImageBuffer@@QAEHXZ		; ImageBuffer::targetYres
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+48], eax

; 254  : 	FrontRect_.right	= Front_->targetXres();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	?targetXres@ImageBuffer@@QAEHXZ		; ImageBuffer::targetXres
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+44], eax

; 255  : 
; 256  : 	Root_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0

; 257  : 	rectcount_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+3464], ax

; 258  : 	UI_Critical = F4CreateCriticalSection("UI_Critical");

	push	OFFSET ??_C@_0M@HPPDMJIA@UI_Critical?$AA@
	call	_F4CreateCriticalSection
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+100], eax

; 259  : 	StartOutputThread();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?StartOutputThread@C_Handler@@QAEXXZ	; C_Handler::StartOutputThread

; 260  : 	StartControlThread(80);

	push	80					; 00000050H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StartControlThread@C_Handler@@QAEXJ@Z	; C_Handler::StartControlThread

; 261  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Setup@C_Handler@@QAEXPAUHWND__@@PAVImageBuffer@@1@Z$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Setup@C_Handler@@QAEXPAUHWND__@@PAVImageBuffer@@1@Z$1:
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Setup@C_Handler@@QAEXPAUHWND__@@PAVImageBuffer@@1@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Setup@C_Handler@@QAEXPAUHWND__@@PAVImageBuffer@@1@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Setup@C_Handler@@QAEXPAUHWND__@@PAVImageBuffer@@1@Z ENDP ; C_Handler::Setup
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?LeaveCritical@C_Handler@@QAEXXZ PROC			; C_Handler::LeaveCritical
; _this$ = ecx

; 107  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 108  : 	F4LeaveCriticalSection(UI_Critical);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	push	ecx
	call	_F4LeaveCriticalSection
	add	esp, 4

; 109  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?LeaveCritical@C_Handler@@QAEXXZ ENDP			; C_Handler::LeaveCritical
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EnterCritical@C_Handler@@QAEXXZ PROC			; C_Handler::EnterCritical
; _this$ = ecx

; 102  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 103  : 	F4EnterCriticalSection(UI_Critical);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	push	ecx
	call	_F4EnterCriticalSection
	add	esp, 4

; 104  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?EnterCritical@C_Handler@@QAEXXZ ENDP			; C_Handler::EnterCritical
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1C_Handler@@QAE@XZ PROC				; C_Handler::~C_Handler
; _this$ = ecx

; 96   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 97   : 	if(Root_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@C_Handler

; 98   : 		Cleanup();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Cleanup@C_Handler@@QAEXXZ		; C_Handler::Cleanup
$LN2@C_Handler:

; 99   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1C_Handler@@QAE@XZ ENDP				; C_Handler::~C_Handler
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0C_Handler@@QAE@XZ PROC				; C_Handler::C_Handler
; _this$ = ecx

; 44   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 	UI_Critical=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+100], 0

; 46   : 	MouseCallback_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+104], 0

; 47   : 	Root_=NULL; // Root pointer to windows in handler

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0

; 48   : 	AppWindow_=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 49   : 	Primary_=NULL; // primary surface pointer

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 50   : 	Front_=NULL; // Surface to blit to

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0

; 51   : 	FrontRect_.left=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 0

; 52   : 	FrontRect_.top=0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], 0

; 53   : 	FrontRect_.right=0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+44], 0

; 54   : 	FrontRect_.bottom=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0

; 55   : //	PrimaryRect_.left=0;
; 56   : //	PrimaryRect_.top=0;
; 57   : //	PrimaryRect_.right=0;
; 58   : //	PrimaryRect_.bottom=0;
; 59   : 	surface_.mem=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 60   : 	surface_.width=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+24], dx

; 61   : 	surface_.height=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+26], cx

; 62   : 	MouseDown_=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+240], 0

; 63   : 	MouseDownTime_=0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+244], 0

; 64   : 	LastUp_=0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+248], 0

; 65   : 	LastUpTime_=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+252], 0

; 66   : 	DoubleClickTime_=GetDoubleClickTime();

	call	DWORD PTR __imp__GetDoubleClickTime@0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+256], eax

; 67   : 	TimerLoop_=0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+52], 0

; 68   : 	ControlLoop_=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], 0

; 69   : 	OutputLoop_=0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], 0

; 70   : 	OutputWait_=80;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+64], 80			; 00000050H

; 71   : 	TimerSleep_=1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+108], 1

; 72   : 	ControlSleep_=1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+112], 1

; 73   : 	TimerThread_=0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+80], 0

; 74   : 	ControlThread_=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+88], 0

; 75   : 	OutputThread_=0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+84], 0

; 76   : 	WakeOutput_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+92], 0

; 77   : 	WakeControl_=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+96], 0

; 78   : 	memset(&Grab_,0,sizeof(GRABBER));

	push	32					; 00000020H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 172				; 000000acH
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 79   : 	memset(&Drag_,0,sizeof(GRABBER));

	push	32					; 00000020H
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 204				; 000000ccH
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 80   : 	OverControl_=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+128], 0

; 81   : 	OverLast_.Control_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+132], 0

; 82   : 	OverLast_.Tip_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+140], 0

; 83   : 	OverLast_.Time_=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+136], 0

; 84   : 	OverLast_.HelpFont_=17;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+152], 17			; 00000011H

; 85   : 	OverLast_.HelpOn_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+148], dx

; 86   : 	MouseControl_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], 0

; 87   : 	CurWindow_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+236], 0

; 88   : 	UpdateFlag=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3472], 0

; 89   : 	HandlingMessage=0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3468], 0

; 90   : 	UserRoot_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0

; 91   : 	KeyboardMode_=FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+116], 0

; 92   : 	DrawFlags=0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3476], 0

; 93   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0C_Handler@@QAE@XZ ENDP				; C_Handler::C_Handler
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -44						; size = 4
_dest$1 = -40						; size = 4
_len$2 = -36						; size = 4
_dest$3 = -32						; size = 4
_len$4 = -28						; size = 4
_color$5 = -24						; size = 4
_start$6 = -20						; size = 4
_i$7 = -16						; size = 4
_start$8 = -12						; size = 4
_i$9 = -8						; size = 4
_color$10 = -4						; size = 2
_surface$ = 8						; size = 4
_Color$ = 12						; size = 4
_dst$ = 16						; size = 4
?Fill@C_Handler@@AAEXPAVSCREEN@@KPAUUI95_RECT@@@Z PROC	; C_Handler::Fill
; _this$ = ecx

; 926  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 927  : 	if( surface->bpp == 32 )//XX

	mov	eax, DWORD PTR _surface$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 32					; 00000020H
	jne	$LN6@Fill

; 928  : 	{
; 929  : 		long start,i,len;
; 930  : 		DWORD color;
; 931  : 		DWORD *dest;
; 932  : 
; 933  : 		dest = (DWORD*) surface->mem;

	mov	edx, DWORD PTR _surface$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _dest$3[ebp], eax

; 934  : 		color = RGB565toRGB8( UI95_RGB24Bit(Color) );

	mov	ecx, DWORD PTR _Color$[ebp]
	push	ecx
	call	?UI95_RGB24Bit@@YAGK@Z			; UI95_RGB24Bit
	add	esp, 4
	movzx	edx, ax
	push	edx
	call	?RGB565toRGB8@@YAKG@Z			; RGB565toRGB8
	add	esp, 4
	mov	DWORD PTR _color$5[ebp], eax

; 935  : 		i=dst->top;

	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _i$9[ebp], ecx

; 936  : 		len=dst->right-dst->left;

	mov	edx, DWORD PTR _dst$[ebp]
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax]
	mov	DWORD PTR _len$4[ebp], ecx

; 937  : 
; 938  : 		start = (dst->top * surface->width + dst->left) * sizeof(DWORD);

	mov	edx, DWORD PTR _surface$[ebp]
	movsx	eax, WORD PTR [edx+4]
	mov	ecx, DWORD PTR _dst$[ebp]
	imul	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _dst$[ebp]
	add	eax, DWORD PTR [edx]
	shl	eax, 2
	mov	DWORD PTR _start$8[ebp], eax
$LN5@Fill:

; 939  : 		while(i < dst->bottom)

	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR _i$9[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN4@Fill

; 940  : 		{
; 941  : 			__asm
; 942  : 			{
; 943  : 				mov eax, color

	mov	eax, DWORD PTR _color$5[ebp]

; 944  : 				mov ecx,len

	mov	ecx, DWORD PTR _len$4[ebp]

; 945  : 				mov edi,dest

	mov	edi, DWORD PTR _dest$3[ebp]

; 946  : 				add edi,start

	add	edi, DWORD PTR _start$8[ebp]

; 947  : 				rep stosd

	rep	 stosd

; 948  : 			};
; 949  : 
; 950  : 			i++;

	mov	edx, DWORD PTR _i$9[ebp]
	add	edx, 1
	mov	DWORD PTR _i$9[ebp], edx

; 951  : 			start += surface->width * sizeof(DWORD);

	mov	eax, DWORD PTR _surface$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _start$8[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _start$8[ebp], eax

; 952  : 		}

	jmp	SHORT $LN5@Fill
$LN4@Fill:

; 953  : 
; 954  : 	}
; 955  : 	else

	jmp	SHORT $LN7@Fill
$LN6@Fill:

; 956  : 	{
; 957  : 	long start,i,len;
; 958  : 	WORD color;
; 959  : 	WORD *dest;
; 960  : 		
; 961  : 	dest=surface->mem;

	mov	ecx, DWORD PTR _surface$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _dest$1[ebp], edx

; 962  : 	color=UI95_RGB24Bit(Color);

	mov	eax, DWORD PTR _Color$[ebp]
	push	eax
	call	?UI95_RGB24Bit@@YAGK@Z			; UI95_RGB24Bit
	add	esp, 4
	mov	WORD PTR _color$10[ebp], ax

; 963  : 	i=dst->top;

	mov	ecx, DWORD PTR _dst$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _i$7[ebp], edx

; 964  : 	len=dst->right-dst->left;

	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR _len$2[ebp], edx

; 965  : 
; 966  : 	start=(dst->top * surface->width + dst->left) * sizeof(WORD);

	mov	eax, DWORD PTR _surface$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _dst$[ebp]
	imul	ecx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _dst$[ebp]
	add	ecx, DWORD PTR [eax]
	shl	ecx, 1
	mov	DWORD PTR _start$6[ebp], ecx
$LN2@Fill:

; 967  : 	while(i < dst->bottom)

	mov	ecx, DWORD PTR _dst$[ebp]
	mov	edx, DWORD PTR _i$7[ebp]
	cmp	edx, DWORD PTR [ecx+12]
	jge	SHORT $LN7@Fill

; 968  : 	{
; 969  : 		__asm
; 970  : 		{
; 971  : 			mov AX, color

	mov	ax, WORD PTR _color$10[ebp]

; 972  : 			mov ECX,len

	mov	ecx, DWORD PTR _len$2[ebp]

; 973  : 			mov EDI,dest

	mov	edi, DWORD PTR _dest$1[ebp]

; 974  : 			add EDI,start

	add	edi, DWORD PTR _start$6[ebp]

; 975  : 			rep stosw

	rep	 stosw

; 976  : 		};
; 977  : 
; 978  : 		i++;

	mov	eax, DWORD PTR _i$7[ebp]
	add	eax, 1
	mov	DWORD PTR _i$7[ebp], eax

; 979  : 		start+=surface->width * sizeof(WORD);

	mov	ecx, DWORD PTR _surface$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	mov	eax, DWORD PTR _start$6[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _start$6[ebp], ecx

; 980  : 	}

	jmp	SHORT $LN2@Fill
$LN7@Fill:

; 981  : }
; 982  : }

	pop	edi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Fill@C_Handler@@AAEXPAVSCREEN@@KPAUUI95_RECT@@@Z ENDP	; C_Handler::Fill
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -24						; size = 4
_dst$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_surface$ = 8						; size = 4
_Color$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
_x2$ = 24						; size = 4
_y2$ = 28						; size = 4
?Fill@C_Handler@@AAEXPAVSCREEN@@KJJJJ@Z PROC		; C_Handler::Fill
; _this$ = ecx

; 914  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 915  : 	UI95_RECT dst;
; 916  : 
; 917  : 	dst.left=x1;

	mov	eax, DWORD PTR _x1$[ebp]
	mov	DWORD PTR _dst$[ebp], eax

; 918  : 	dst.top=y1;

	mov	ecx, DWORD PTR _y1$[ebp]
	mov	DWORD PTR _dst$[ebp+4], ecx

; 919  : 	dst.right=x2;

	mov	edx, DWORD PTR _x2$[ebp]
	mov	DWORD PTR _dst$[ebp+8], edx

; 920  : 	dst.bottom=y2;

	mov	eax, DWORD PTR _y2$[ebp]
	mov	DWORD PTR _dst$[ebp+12], eax

; 921  : 
; 922  : 	Fill(surface,Color,&dst);

	lea	ecx, DWORD PTR _dst$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Color$[ebp]
	push	edx
	mov	eax, DWORD PTR _surface$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Fill@C_Handler@@AAEXPAVSCREEN@@KPAUUI95_RECT@@@Z ; C_Handler::Fill

; 923  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Fill@C_Handler@@AAEXPAVSCREEN@@KJJJJ@Z ENDP		; C_Handler::Fill
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_font$ = -8						; size = 4
_this$ = -4						; size = 4
_surface$ = 8						; size = 4
?CheckHelpText@C_Handler@@AAEXPAVSCREEN@@@Z PROC	; C_Handler::CheckHelpText
; _this$ = ecx

; 675  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 676  : 	C_Fontmgr *font;
; 677  : 
; 678  : 	if(OverLast_.Control_ && OverLast_.Tip_ && GetCurrentTime() > (DWORD)(OverLast_.Time_ + 1000))

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+132], 0
	je	$LN8@CheckHelpT
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+140], 0
	je	$LN8@CheckHelpT
	call	DWORD PTR __imp__GetTickCount@0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+136]
	add	ecx, 1000				; 000003e8H
	cmp	eax, ecx
	jbe	$LN8@CheckHelpT

; 679  : 	{
; 680  : 		font=gFontList->Find(OverLast_.HelpFont_);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+152]
	push	eax
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?Find@C_Font@@QAEPAVC_Fontmgr@@J@Z	; C_Font::Find
	mov	DWORD PTR _font$[ebp], eax

; 681  : 		if(!OverLast_.HelpOn_ && font)

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+148]
	test	edx, edx
	jne	$LN6@CheckHelpT
	cmp	DWORD PTR _font$[ebp], 0
	je	$LN6@CheckHelpT

; 682  : 		{
; 683  : 			OverLast_.HelpOn_=1;

	mov	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+148], ax

; 684  : 
; 685  : 			OverLast_.Area_.left=OverLast_.MouseX_ - font->Width(OverLast_.Tip_)/2;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	esi, WORD PTR [edx+144]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	mov	ecx, DWORD PTR _font$[ebp]
	call	?Width@C_Fontmgr@@QAEJPAD@Z		; C_Fontmgr::Width
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	esi, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+156], esi

; 686  : 			OverLast_.Area_.top =OverLast_.MouseY_ - font->Height() - 4;

	mov	eax, DWORD PTR _this$[ebp]
	movsx	esi, WORD PTR [eax+146]
	mov	ecx, DWORD PTR _font$[ebp]
	call	?Height@C_Fontmgr@@QAEJXZ		; C_Fontmgr::Height
	sub	esi, eax
	sub	esi, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+160], esi

; 687  : 			if(OverLast_.Area_.left < 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+156], 0
	jge	SHORT $LN5@CheckHelpT

; 688  : 				OverLast_.Area_.left=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+156], 0
$LN5@CheckHelpT:

; 689  : 			if(OverLast_.Area_.top < 0)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+160], 0
	jge	SHORT $LN4@CheckHelpT

; 690  : 				OverLast_.Area_.top=0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+160], 0
$LN4@CheckHelpT:

; 691  : 			OverLast_.Area_.right=OverLast_.Area_.left + font->Width(OverLast_.Tip_)+4;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	mov	ecx, DWORD PTR _font$[ebp]
	call	?Width@C_Fontmgr@@QAEJPAD@Z		; C_Fontmgr::Width
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+156]
	lea	edx, DWORD PTR [ecx+eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+164], edx

; 692  : 			OverLast_.Area_.bottom=OverLast_.Area_.top + font->Height()+4;

	mov	ecx, DWORD PTR _font$[ebp]
	call	?Height@C_Fontmgr@@QAEJXZ		; C_Fontmgr::Height
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+160]
	lea	eax, DWORD PTR [edx+eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+168], eax

; 693  : 
; 694  : 			if(OverLast_.Area_.right > GetW())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetW@C_Handler@@QAEJXZ			; C_Handler::GetW
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+164], eax
	jle	SHORT $LN3@CheckHelpT

; 695  : 			{
; 696  : 				OverLast_.Area_.left-=OverLast_.Area_.right-GetW();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetW@C_Handler@@QAEJXZ			; C_Handler::GetW
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+164]
	sub	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	sub	ecx, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+156], ecx

; 697  : 				OverLast_.Area_.right=GetW();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetW@C_Handler@@QAEJXZ			; C_Handler::GetW
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+164], eax
$LN3@CheckHelpT:

; 698  : 			}
; 699  : 			if(OverLast_.Area_.bottom > GetH())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetH@C_Handler@@QAEJXZ			; C_Handler::GetH
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+168], eax
	jle	SHORT $LN6@CheckHelpT

; 700  : 			{
; 701  : 				OverLast_.Area_.top-=OverLast_.Area_.bottom-GetH();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetH@C_Handler@@QAEJXZ			; C_Handler::GetH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+168]
	sub	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	sub	ecx, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+160], ecx

; 702  : 				OverLast_.Area_.bottom=GetH();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetH@C_Handler@@QAEJXZ			; C_Handler::GetH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+168], eax
$LN6@CheckHelpT:

; 703  : 			}
; 704  : 		}
; 705  : 
; 706  : 		if(font)

	cmp	DWORD PTR _font$[ebp], 0
	je	$LN8@CheckHelpT

; 707  : 		{
; 708  : 			Fill(surface,0xffffff,&OverLast_.Area_);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 156				; 0000009cH
	push	edx
	push	16777215				; 00ffffffH
	mov	eax, DWORD PTR _surface$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Fill@C_Handler@@AAEXPAVSCREEN@@KPAUUI95_RECT@@@Z ; C_Handler::Fill

; 709  : 			Fill(surface,0,OverLast_.Area_.left,OverLast_.Area_.top,OverLast_.Area_.right,OverLast_.Area_.top+1);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+160]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+160]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	push	edx
	push	0
	mov	eax, DWORD PTR _surface$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Fill@C_Handler@@AAEXPAVSCREEN@@KJJJJ@Z	; C_Handler::Fill

; 710  : 			Fill(surface,0,OverLast_.Area_.left,OverLast_.Area_.bottom-1,OverLast_.Area_.right,OverLast_.Area_.bottom);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+168]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+168]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	push	edx
	push	0
	mov	eax, DWORD PTR _surface$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Fill@C_Handler@@AAEXPAVSCREEN@@KJJJJ@Z	; C_Handler::Fill

; 711  : 			Fill(surface,0,OverLast_.Area_.left,OverLast_.Area_.top,OverLast_.Area_.left+1,OverLast_.Area_.bottom);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+168]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+160]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	push	edx
	push	0
	mov	eax, DWORD PTR _surface$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Fill@C_Handler@@AAEXPAVSCREEN@@KJJJJ@Z	; C_Handler::Fill

; 712  : 			Fill(surface,0,OverLast_.Area_.right-1,OverLast_.Area_.top,OverLast_.Area_.right,OverLast_.Area_.bottom);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+168]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+160]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+164]
	sub	edx, 1
	push	edx
	push	0
	mov	eax, DWORD PTR _surface$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Fill@C_Handler@@AAEXPAVSCREEN@@KJJJJ@Z	; C_Handler::Fill

; 713  : 
; 714  : 			font->Draw(surface,OverLast_.Tip_,0,OverLast_.Area_.left+2,OverLast_.Area_.top+2);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+160]
	add	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	add	ecx, 2
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	push	eax
	mov	ecx, DWORD PTR _surface$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _font$[ebp]
	call	?Draw@C_Fontmgr@@QAEXPAVSCREEN@@PADGJJ@Z ; C_Fontmgr::Draw

; 715  : 
; 716  : 			SetUpdateRect(&OverLast_.Area_);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 156				; 0000009cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetUpdateRect@C_Handler@@QAEXPAUUI95_RECT@@@Z ; C_Handler::SetUpdateRect
$LN8@CheckHelpT:

; 717  : 		}
; 718  : 	}
; 719  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?CheckHelpText@C_Handler@@AAEXPAVSCREEN@@@Z ENDP	; C_Handler::CheckHelpText
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HelpOff@C_Handler@@AAEXXZ PROC				; C_Handler::HelpOff
; _this$ = ecx

; 661  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 662  : 	if(OverLast_.HelpOn_)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+148]
	test	ecx, ecx
	je	SHORT $LN1@HelpOff

; 663  : 	{
; 664  : 		RefreshAll(&OverLast_.Area_); // Tell windows to refresh this area

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 156				; 0000009cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RefreshAll@C_Handler@@QAEXPAUUI95_RECT@@@Z ; C_Handler::RefreshAll
$LN1@HelpOff:

; 665  : 	}
; 666  : 	OverLast_.HelpOn_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+148], ax

; 667  : 	OverLast_.Control_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+132], 0

; 668  : 	OverLast_.Time_=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+136], 0

; 669  : 	OverLast_.Tip_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+140], 0

; 670  : 	OverLast_.MouseX_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+144], dx

; 671  : 	OverLast_.MouseY_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+146], cx

; 672  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?HelpOff@C_Handler@@AAEXXZ ENDP				; C_Handler::HelpOff
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OldInputMessage@C_Handler@@AAEHXZ PROC			; C_Handler::OldInputMessage
; _this$ = ecx

; 1892 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1893 : 	if(GetMessageTime() < EnabledTime_)

	call	DWORD PTR __imp__GetMessageTime@0
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+120]
	jge	SHORT $LN1@OldInputMe

; 1894 : 		return(TRUE);

	mov	eax, 1
	jmp	SHORT $LN2@OldInputMe
$LN1@OldInputMe:

; 1895 : 
; 1896 : 	return(FALSE);

	xor	eax, eax
$LN2@OldInputMe:

; 1897 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?OldInputMessage@C_Handler@@AAEHXZ ENDP			; C_Handler::OldInputMessage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_pCtx$1 = -32						; size = 4
_hr$2 = -28						; size = 4
_this$ = -24						; size = 4
_upme$3 = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?DoOutputLoop@C_Handler@@AAEXXZ PROC			; C_Handler::DoOutputLoop
; _this$ = ecx

; 1506 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
$LN7@DoOutputLo:

; 1507 : 	while(OutputLoop_ > 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+60], 0
	jle	$LN6@DoOutputLo

; 1508 : 	{
; 1509 : 		WaitForSingleObject( WakeOutput_, 40/*OutputWait_*/ );

	push	40					; 00000028H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	push	edx
	call	DWORD PTR __imp__WaitForSingleObject@8

; 1510 : 
; 1511 : 		if(OutputLoop_ > 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+60], 0
	jle	$LN5@DoOutputLo

; 1512 : 		{
; 1513 : 			// OW
; 1514 : 			DXContext *pCtx = FalconDisplay.theDisplayDevice.GetDefaultRC();

	mov	ecx, OFFSET ?FalconDisplay@@3VFalconDisplayConfiguration@@A+132
	call	?GetDefaultRC@DisplayDevice@@QAEPAVDXContext@@XZ ; DisplayDevice::GetDefaultRC
	mov	DWORD PTR _pCtx$1[ebp], eax

; 1515 : 			HRESULT hr = pCtx->TestCooperativeLevel();

	mov	ecx, DWORD PTR _pCtx$1[ebp]
	call	?TestCooperativeLevel@DXContext@@QAEKXZ	; DXContext::TestCooperativeLevel
	mov	DWORD PTR _hr$2[ebp], eax

; 1516 : 
; 1517 : 			if(FAILED(hr))

	cmp	DWORD PTR _hr$2[ebp], 0
	jge	SHORT $LN4@DoOutputLo

; 1518 : 				continue;

	jmp	SHORT $LN7@DoOutputLo
$LN4@DoOutputLo:

; 1519 : 
; 1520 : 			if(hr == S_FALSE)

	cmp	DWORD PTR _hr$2[ebp], 1
	jne	SHORT $LN3@DoOutputLo

; 1521 : 			{
; 1522 : 				Primary_->RestoreAll();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	?RestoreAll@ImageBuffer@@QAEXXZ		; ImageBuffer::RestoreAll

; 1523 : 				TheTextureBank.RestoreAll();

	call	?RestoreAll@TextureBankClass@@SAXXZ	; TextureBankClass::RestoreAll

; 1524 : 				TheTerrTextures.RestoreAll();

	mov	ecx, OFFSET ?TheTerrTextures@@3VTextureDB@@A ; TheTerrTextures
	call	?RestoreAll@TextureDB@@QAEXXZ		; TextureDB::RestoreAll

; 1525 : 				TheFarTextures.RestoreAll();

	mov	ecx, OFFSET ?TheFarTextures@@3VFarTexDB@@A ; TheFarTextures
	call	?RestoreAll@FarTexDB@@QAEXXZ		; FarTexDB::RestoreAll

; 1526 : 
; 1527 : 				// Surfaces have been restored
; 1528 : 				UI95_RECT upme;
; 1529 : 				upme.left=FrontRect_.left;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _upme$3[ebp], eax

; 1530 : 				upme.top=FrontRect_.top;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _upme$3[ebp+4], edx

; 1531 : 				upme.right=FrontRect_.right;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _upme$3[ebp+8], ecx

; 1532 : 				upme.bottom=FrontRect_.bottom;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR _upme$3[ebp+12], eax

; 1533 : 				rectcount_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+3464], cx

; 1534 : 				RefreshAll(&upme);

	lea	eax, DWORD PTR _upme$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RefreshAll@C_Handler@@QAEXPAUUI95_RECT@@@Z ; C_Handler::RefreshAll
$LN3@DoOutputLo:

; 1535 : 			}
; 1536 : 
; 1537 : 			EnterCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EnterCritical@C_Handler@@QAEXXZ	; C_Handler::EnterCritical

; 1538 : 			if(UpdateFlag & C_DRAW_REFRESH)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+3472]
	and	edx, 1
	je	SHORT $LN2@DoOutputLo

; 1539 : 				Update();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Update@C_Handler@@QAEXXZ		; C_Handler::Update
$LN2@DoOutputLo:

; 1540 : 			if(UpdateFlag & C_DRAW_COPYWINDOW)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3472]
	and	ecx, 268435456				; 10000000H
	je	SHORT $LN1@DoOutputLo

; 1541 : 				CopyToPrimary();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CopyToPrimary@C_Handler@@QAEXXZ	; C_Handler::CopyToPrimary
$LN1@DoOutputLo:

; 1542 : 			LeaveCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCritical@C_Handler@@QAEXXZ	; C_Handler::LeaveCritical
$LN5@DoOutputLo:

; 1543 : 		}
; 1544 : 	}

	jmp	$LN7@DoOutputLo
$LN6@DoOutputLo:

; 1545 : 	OutputLoop_=-1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+60], -1

; 1546 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DoOutputLoop@C_Handler@@AAEXXZ ENDP			; C_Handler::DoOutputLoop
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_myself$ = 8						; size = 4
?ControlLoop@C_Handler@@CGIPAX@Z PROC			; C_Handler::ControlLoop

; 1464 : {

	push	ebp
	mov	ebp, esp

; 1465 : #ifdef _MSC_VER
; 1466 : 	// Set the FPU to Truncate
; 1467 : 	_controlfp(_RC_CHOP,MCW_RC);

	push	768					; 00000300H
	push	768					; 00000300H
	call	__controlfp
	add	esp, 8

; 1468 : 
; 1469 : 	// Set the FPU to 24bit precision
; 1470 : 	_controlfp(_PC_24,MCW_PC);

	push	196608					; 00030000H
	push	131072					; 00020000H
	call	__controlfp
	add	esp, 8

; 1471 : #endif
; 1472 :    ((C_Handler *)myself)->DoControlLoop();

	mov	ecx, DWORD PTR _myself$[ebp]
	call	?DoControlLoop@C_Handler@@AAEXXZ	; C_Handler::DoControlLoop

; 1473 :    _endthreadex(0);

	push	0
	call	__endthreadex
	add	esp, 4

; 1474 :    return (0);

	xor	eax, eax

; 1475 : }

	pop	ebp
	ret	4
?ControlLoop@C_Handler@@CGIPAX@Z ENDP			; C_Handler::ControlLoop
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_myself$ = 8						; size = 4
?OutputLoop@C_Handler@@CGIPAX@Z PROC			; C_Handler::OutputLoop

; 1492 : {

	push	ebp
	mov	ebp, esp

; 1493 : #ifdef _MSC_VER
; 1494 : 	// Set the FPU to Truncate
; 1495 : 	_controlfp(_RC_CHOP,MCW_RC);

	push	768					; 00000300H
	push	768					; 00000300H
	call	__controlfp
	add	esp, 8

; 1496 : 
; 1497 : 	// Set the FPU to 24bit precision
; 1498 : 	_controlfp(_PC_24,MCW_PC);

	push	196608					; 00030000H
	push	131072					; 00020000H
	call	__controlfp
	add	esp, 8

; 1499 : #endif
; 1500 :    ((C_Handler *)myself)->DoOutputLoop();	

	mov	ecx, DWORD PTR _myself$[ebp]
	call	?DoOutputLoop@C_Handler@@AAEXXZ		; C_Handler::DoOutputLoop

; 1501 :    _endthreadex(0);

	push	0
	call	__endthreadex
	add	esp, 4

; 1502 :    return (0);

	xor	eax, eax

; 1503 : }

	pop	ebp
	ret	4
?OutputLoop@C_Handler@@CGIPAX@Z ENDP			; C_Handler::OutputLoop
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_myself$ = 8						; size = 4
?TimerLoop@C_Handler@@CGIPAX@Z PROC			; C_Handler::TimerLoop

; 1478 : {

	push	ebp
	mov	ebp, esp

; 1479 : #ifdef _MSC_VER
; 1480 : 	// Set the FPU to Truncate
; 1481 : 	_controlfp(_RC_CHOP,MCW_RC);

	push	768					; 00000300H
	push	768					; 00000300H
	call	__controlfp
	add	esp, 8

; 1482 : 
; 1483 : 	// Set the FPU to 24bit precision
; 1484 : 	_controlfp(_PC_24,MCW_PC);

	push	196608					; 00030000H
	push	131072					; 00020000H
	call	__controlfp
	add	esp, 8

; 1485 : #endif
; 1486 :    ((C_Handler *)myself)->PostTimerMessage();

	mov	ecx, DWORD PTR _myself$[ebp]
	call	?PostTimerMessage@C_Handler@@AAEXXZ	; C_Handler::PostTimerMessage

; 1487 :    _endthreadex(0);

	push	0
	call	__endthreadex
	add	esp, 4

; 1488 :    return (0);

	xor	eax, eax

; 1489 : }

	pop	ebp
	ret	4
?TimerLoop@C_Handler@@CGIPAX@Z ENDP			; C_Handler::TimerLoop
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DoControlLoop@C_Handler@@AAEXXZ PROC			; C_Handler::DoControlLoop
; _this$ = ecx

; 1448 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN3@DoControlL:

; 1449 : 	while(ControlLoop_ > 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+56], 0
	jle	SHORT $LN2@DoControlL

; 1450 : 	{
; 1451 : 		WaitForSingleObject( WakeControl_, ControlSleep_ );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	call	DWORD PTR __imp__WaitForSingleObject@8

; 1452 : 		if(ControlLoop_ > 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+56], 0
	jle	SHORT $LN1@DoControlL

; 1453 : 		{
; 1454 : 			PostMessage(AppWindow_,C_WM_TIMER,0,0);

	push	0
	push	0
	push	6027					; 0000178bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR __imp__PostMessageA@16

; 1455 : 			EnterCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EnterCritical@C_Handler@@QAEXXZ	; C_Handler::EnterCritical

; 1456 : 			UpdateTimerControls();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateTimerControls@C_Handler@@QAEXXZ	; C_Handler::UpdateTimerControls

; 1457 : 			LeaveCritical();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCritical@C_Handler@@QAEXXZ	; C_Handler::LeaveCritical
$LN1@DoControlL:

; 1458 : 		}
; 1459 : 	}

	jmp	SHORT $LN3@DoControlL
$LN2@DoControlL:

; 1460 : 	ControlLoop_=-1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+56], -1

; 1461 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DoControlLoop@C_Handler@@AAEXXZ ENDP			; C_Handler::DoControlLoop
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.cpp
_TEXT	SEGMENT
tv78 = -16						; size = 4
tv77 = -12						; size = 4
tv74 = -8						; size = 4
_this$ = -4						; size = 4
?PostTimerMessage@C_Handler@@AAEXXZ PROC		; C_Handler::PostTimerMessage
; _this$ = ecx

; 1437 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
$LN2@PostTimerM:

; 1438 : 	while(TimerLoop_ > 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+52], 0
	jle	SHORT $LN1@PostTimerM

; 1439 : 	{
; 1440 : 		PostMessage(AppWindow_,FM_TIMER_UPDATE,0,0);

	push	0
	push	0
	push	1054					; 0000041eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR __imp__PostMessageA@16

; 1441 : 		// JB 020217 Speed up UI refresh when using a higher time acceleration
; 1442 : 		Sleep(TimerSleep_ / min(max(gameCompressionRatio, 1), g_nMaxUIRefresh)); // 2002-02-23 MODIFIED BY S.G. Added the min(... g_nMaxUIRefresh) to prevent the UI to refresh too much and end up running out of resources because it can't keep up

	cmp	DWORD PTR ?gameCompressionRatio@@3HA, 1	; gameCompressionRatio
	jle	SHORT $LN5@PostTimerM
	mov	eax, DWORD PTR ?gameCompressionRatio@@3HA ; gameCompressionRatio
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN6@PostTimerM
$LN5@PostTimerM:
	mov	DWORD PTR tv74[ebp], 1
$LN6@PostTimerM:
	mov	ecx, DWORD PTR tv74[ebp]
	cmp	ecx, DWORD PTR ?g_nMaxUIRefresh@@3HA	; g_nMaxUIRefresh
	jge	SHORT $LN9@PostTimerM
	cmp	DWORD PTR ?gameCompressionRatio@@3HA, 1	; gameCompressionRatio
	jle	SHORT $LN7@PostTimerM
	mov	edx, DWORD PTR ?gameCompressionRatio@@3HA ; gameCompressionRatio
	mov	DWORD PTR tv77[ebp], edx
	jmp	SHORT $LN8@PostTimerM
$LN7@PostTimerM:
	mov	DWORD PTR tv77[ebp], 1
$LN8@PostTimerM:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN10@PostTimerM
$LN9@PostTimerM:
	mov	ecx, DWORD PTR ?g_nMaxUIRefresh@@3HA	; g_nMaxUIRefresh
	mov	DWORD PTR tv78[ebp], ecx
$LN10@PostTimerM:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+108]
	cdq
	idiv	DWORD PTR tv78[ebp]
	push	eax
	call	DWORD PTR __imp__Sleep@4

; 1443 : 	}

	jmp	$LN2@PostTimerM
$LN1@PostTimerM:

; 1444 : 	TimerLoop_=-1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+52], -1

; 1445 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?PostTimerMessage@C_Handler@@AAEXXZ ENDP		; C_Handler::PostTimerMessage
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GC_Window@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GC_Window@@QAEPAXI@Z PROC				; C_Window::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1C_Window@@QAE@XZ			; C_Window::~C_Window
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GC_Window@@QAEPAXI@Z ENDP				; C_Window::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cwindow.h
;	COMDAT ?GetSurface@C_Window@@QAEPAVImageBuffer@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSurface@C_Window@@QAEPAVImageBuffer@@XZ PROC	; C_Window::GetSurface, COMDAT
; _this$ = ecx

; 373  : 		ImageBuffer *GetSurface() { return(imgBuf_);}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4292]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSurface@C_Window@@QAEPAVImageBuffer@@XZ ENDP	; C_Window::GetSurface
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cwindow.h
;	COMDAT ?IsMenu@C_Window@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMenu@C_Window@@QAEJXZ PROC				; C_Window::IsMenu, COMDAT
; _this$ = ecx

; 329  : 		long IsMenu() { return(MenuFlags_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsMenu@C_Window@@QAEJXZ ENDP				; C_Window::IsMenu
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cwindow.h
;	COMDAT ?GetGroup@C_Window@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGroup@C_Window@@QAEJXZ PROC				; C_Window::GetGroup, COMDAT
; _this$ = ecx

; 317  : 		long GetGroup(void) { return(Group_);}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGroup@C_Window@@QAEJXZ ENDP				; C_Window::GetGroup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cwindow.h
;	COMDAT ?GetSection@C_Window@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSection@C_Window@@QAEJXZ PROC			; C_Window::GetSection, COMDAT
; _this$ = ecx

; 316  : 		long GetSection(void) { return(Section_);}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSection@C_Window@@QAEJXZ ENDP			; C_Window::GetSection
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cwindow.h
;	COMDAT ?GetType@C_Window@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetType@C_Window@@QAEFXZ PROC				; C_Window::GetType, COMDAT
; _this$ = ecx

; 314  : 		short GetType() { return(Type_);}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+424]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetType@C_Window@@QAEFXZ ENDP				; C_Window::GetType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cwindow.h
;	COMDAT ?GetH@C_Window@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetH@C_Window@@QAEFXZ PROC				; C_Window::GetH, COMDAT
; _this$ = ecx

; 313  : 		short GetH() { return(h_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+434]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetH@C_Window@@QAEFXZ ENDP				; C_Window::GetH
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cwindow.h
;	COMDAT ?GetW@C_Window@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetW@C_Window@@QAEFXZ PROC				; C_Window::GetW, COMDAT
; _this$ = ecx

; 312  : 		short GetW() { return(w_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+432]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetW@C_Window@@QAEFXZ ENDP				; C_Window::GetW
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cwindow.h
;	COMDAT ?GetY@C_Window@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetY@C_Window@@QAEFXZ PROC				; C_Window::GetY, COMDAT
; _this$ = ecx

; 311  : 		short GetY() { return(y_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+430]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetY@C_Window@@QAEFXZ ENDP				; C_Window::GetY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cwindow.h
;	COMDAT ?GetX@C_Window@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetX@C_Window@@QAEFXZ PROC				; C_Window::GetX, COMDAT
; _this$ = ecx

; 310  : 		short GetX() { return(x_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+428]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetX@C_Window@@QAEFXZ ENDP				; C_Window::GetX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cwindow.h
;	COMDAT ?SetSection@C_Window@@QAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_sctn$ = 8						; size = 4
?SetSection@C_Window@@QAEXJ@Z PROC			; C_Window::SetSection, COMDAT
; _this$ = ecx

; 307  : 		void SetSection(long sctn) { Section_=sctn; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _sctn$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSection@C_Window@@QAEXJ@Z ENDP			; C_Window::SetSection
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cwindow.h
;	COMDAT ?GetID@C_Window@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetID@C_Window@@QAEJXZ PROC				; C_Window::GetID, COMDAT
; _this$ = ecx

; 302  : 		long GetID() { return(ID_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetID@C_Window@@QAEJXZ ENDP				; C_Window::GetID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cwindow.h
;	COMDAT ?GetOwner@C_Window@@QAEPAVC_Base@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOwner@C_Window@@QAEPAVC_Base@@XZ PROC		; C_Window::GetOwner, COMDAT
; _this$ = ecx

; 287  : 		C_Base *GetOwner() { return(Owner_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4296]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetOwner@C_Window@@QAEPAVC_Base@@XZ ENDP		; C_Window::GetOwner
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cwindow.h
;	COMDAT ?SetHandler@C_Window@@QAEXPAVC_Handler@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_handler$ = 8						; size = 4
?SetHandler@C_Window@@QAEXPAVC_Handler@@@Z PROC		; C_Window::SetHandler, COMDAT
; _this$ = ecx

; 283  : 		void SetHandler(C_Handler *handler) {Handler_=handler;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _handler$[ebp]
	mov	DWORD PTR [eax+4328], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetHandler@C_Window@@QAEXPAVC_Handler@@@Z ENDP		; C_Window::SetHandler
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cwindow.h
;	COMDAT ?GetFlags@C_Window@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFlags@C_Window@@QAEJXZ PROC				; C_Window::GetFlags, COMDAT
; _this$ = ecx

; 264  : 		long GetFlags() { return(Flags_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFlags@C_Window@@QAEJXZ ENDP				; C_Window::GetFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cwindow.h
;	COMDAT ?GetCursorID@C_Window@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCursorID@C_Window@@QAEJXZ PROC			; C_Window::GetCursorID, COMDAT
; _this$ = ecx

; 263  : 		long GetCursorID() { return(CursorID_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+32]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCursorID@C_Window@@QAEJXZ ENDP			; C_Window::GetCursorID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cwindow.h
;	COMDAT ?GetDragH@C_Window@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDragH@C_Window@@QAEFXZ PROC				; C_Window::GetDragH, COMDAT
; _this$ = ecx

; 248  : 		short GetDragH() { return(DragH_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+452]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDragH@C_Window@@QAEFXZ ENDP				; C_Window::GetDragH
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cwindow.h
;	COMDAT ?GetDepth@C_Window@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDepth@C_Window@@QAEFXZ PROC				; C_Window::GetDepth, COMDAT
; _this$ = ecx

; 247  : 		short GetDepth() { return(Depth_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+426]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDepth@C_Window@@QAEFXZ ENDP				; C_Window::GetDepth
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cwindow.h
;	COMDAT ?SetCritical@C_Window@@QAEXPAUF4CSECTIONHANDLE@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_section$ = 8						; size = 4
?SetCritical@C_Window@@QAEXPAUF4CSECTIONHANDLE@@@Z PROC	; C_Window::SetCritical, COMDAT
; _this$ = ecx

; 232  : 		void SetCritical(F4CSECTIONHANDLE* section) { Critical=section; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _section$[ebp]
	mov	DWORD PTR [eax+4320], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCritical@C_Window@@QAEXPAUF4CSECTIONHANDLE@@@Z ENDP	; C_Window::SetCritical
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cwindow.h
;	COMDAT ??1C_Window@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1C_Window@@QAE@XZ PROC				; C_Window::~C_Window, COMDAT
; _this$ = ecx

; 227  : 		~C_Window()			{ ; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1C_Window@@QAE@XZ ENDP				; C_Window::~C_Window
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cpopmgr.h
;	COMDAT ?GetCallingControl@C_PopupMgr@@QAEPAVC_Base@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCallingControl@C_PopupMgr@@QAEPAVC_Base@@XZ PROC	; C_PopupMgr::GetCallingControl, COMDAT
; _this$ = ecx

; 58   : 		C_Base *GetCallingControl() { return(Control_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCallingControl@C_PopupMgr@@QAEPAVC_Base@@XZ ENDP	; C_PopupMgr::GetCallingControl
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetY@C_Base@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetY@C_Base@@QAEJXZ PROC				; C_Base::GetY, COMDAT
; _this$ = ecx

; 142  : 		long GetY()					{ return(y_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+28]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetY@C_Base@@QAEJXZ ENDP				; C_Base::GetY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetX@C_Base@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetX@C_Base@@QAEJXZ PROC				; C_Base::GetX, COMDAT
; _this$ = ecx

; 141  : 		long GetX()					{ return(x_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetX@C_Base@@QAEJXZ ENDP				; C_Base::GetX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetClient@C_Base@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetClient@C_Base@@QAEFXZ PROC				; C_Base::GetClient, COMDAT
; _this$ = ecx

; 140  : 		short GetClient()			{ return(Client_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetClient@C_Base@@QAEFXZ ENDP				; C_Base::GetClient
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetFlags@C_Base@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFlags@C_Base@@QAEJXZ PROC				; C_Base::GetFlags, COMDAT
; _this$ = ecx

; 139  : 		long  GetFlags()			{ return(Flags_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFlags@C_Base@@QAEJXZ ENDP				; C_Base::GetFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\device.h
;	COMDAT ?GetDefaultRC@DisplayDevice@@QAEPAVDXContext@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDefaultRC@DisplayDevice@@QAEPAVDXContext@@XZ PROC	; DisplayDevice::GetDefaultRC, COMDAT
; _this$ = ecx

; 29   : 	DXContext *GetDefaultRC( void )			{ return m_DXCtx; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDefaultRC@DisplayDevice@@QAEPAVDXContext@@XZ ENDP	; DisplayDevice::GetDefaultRC
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\device.h
;	COMDAT ?IsHardware@DisplayDevice@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?IsHardware@DisplayDevice@@QAEHXZ PROC			; DisplayDevice::IsHardware, COMDAT
; _this$ = ecx

; 24   : 	BOOL			IsHardware( void )				{ ShiAssert(IsReady());  return m_DXCtx->m_eDeviceCategory > DXContext::D3DDeviceCategory_Software; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+60], 1
	jle	SHORT $LN3@IsHardware
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsHardware
$LN3@IsHardware:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsHardware:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsHardware@DisplayDevice@@QAEHXZ ENDP			; DisplayDevice::IsHardware
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\imagebuf.h
;	COMDAT ?PixelSize@ImageBuffer@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?PixelSize@ImageBuffer@@QAEHXZ PROC			; ImageBuffer::PixelSize, COMDAT
; _this$ = ecx

; 56   : 	int	PixelSize() { return m_ddsdFront.ddpfPixelFormat.dwRGBBitCount >>3; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+100]
	shr	eax, 3
	mov	esp, ebp
	pop	ebp
	ret	0
?PixelSize@ImageBuffer@@QAEHXZ ENDP			; ImageBuffer::PixelSize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\imagebuf.h
;	COMDAT ?targetStride@ImageBuffer@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?targetStride@ImageBuffer@@QAEHXZ PROC			; ImageBuffer::targetStride, COMDAT
; _this$ = ecx

; 47   : 	int	targetStride(){ return m_ddsdBack.lPitch; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+184]
	mov	esp, ebp
	pop	ebp
	ret	0
?targetStride@ImageBuffer@@QAEHXZ ENDP			; ImageBuffer::targetStride
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\imagebuf.h
;	COMDAT ?targetYres@ImageBuffer@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?targetYres@ImageBuffer@@QAEHXZ PROC			; ImageBuffer::targetYres, COMDAT
; _this$ = ecx

; 46   : 	int	targetYres()	{ return height; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+296]
	mov	esp, ebp
	pop	ebp
	ret	0
?targetYres@ImageBuffer@@QAEHXZ ENDP			; ImageBuffer::targetYres
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\imagebuf.h
;	COMDAT ?targetXres@ImageBuffer@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?targetXres@ImageBuffer@@QAEHXZ PROC			; ImageBuffer::targetXres, COMDAT
; _this$ = ecx

; 45   : 	int targetXres()	{ return width; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+292]
	mov	esp, ebp
	pop	ebp
	ret	0
?targetXres@ImageBuffer@@QAEHXZ ENDP			; ImageBuffer::targetXres
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\imagebuf.h
;	COMDAT ?frontSurface@ImageBuffer@@QAEPAUIDirectDrawSurface7@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?frontSurface@ImageBuffer@@QAEPAUIDirectDrawSurface7@@XZ PROC ; ImageBuffer::frontSurface, COMDAT
; _this$ = ecx

; 43   : 	IDirectDrawSurface7 *frontSurface()	{ return m_pDDSFront; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	mov	esp, ebp
	pop	ebp
	ret	0
?frontSurface@ImageBuffer@@QAEPAUIDirectDrawSurface7@@XZ ENDP ; ImageBuffer::frontSurface
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z PROC	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ENDP	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ PROC	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CComBSTR@ATL@@QAE@XZ			; ATL::CComBSTR::~CComBSTR
	mov	esp, ebp
	pop	ebp
	ret	0
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ ENDP	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\atlmfc\include\atlcomcli.h
;	COMDAT ??1CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CComBSTR@ATL@@QAE@XZ PROC				; ATL::CComBSTR::~CComBSTR, COMDAT
; _this$ = ecx

; 1656 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1657 :     ::SysFreeString(m_str);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__SysFreeString@4

; 1658 : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1CComBSTR@ATL@@QAE@XZ ENDP				; ATL::CComBSTR::~CComBSTR
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Where$[ebp]
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
