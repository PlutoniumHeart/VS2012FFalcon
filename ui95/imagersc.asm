; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\ui95\imagersc.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ ; ATL::CVarTypeInfo<unsigned long *>::pmField
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?VT@?$CVarTypeInfo@_J@ATL@@2GB			; ATL::CVarTypeInfo<__int64>::VT
PUBLIC	?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ ; ATL::CVarTypeInfo<__int64>::pmField
PUBLIC	___pobjMapEntryFirst
PUBLIC	___pobjMapEntryLast
PUBLIC	?VT@?$CVarTypeInfo@PA_J@ATL@@2GB		; ATL::CVarTypeInfo<__int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ ; ATL::CVarTypeInfo<__int64 *>::pmField
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?VT@?$CVarTypeInfo@_K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned __int64>::VT
PUBLIC	??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@	; `string'
PUBLIC	?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64>::pmField
PUBLIC	??_C@_08PICKODJL@FileType?$AA@			; `string'
PUBLIC	??_C@_09JKPGEJCH@Interface?$AA@			; `string'
PUBLIC	??_C@_08PPIOJEA@Hardware?$AA@			; `string'
PUBLIC	?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA	; ATL::_pPerfRegFunc
PUBLIC	??_C@_04IHBFOLAC@Mime?$AA@			; `string'
PUBLIC	?_pPerfUnRegFunc@ATL@@3P6AJXZA			; ATL::_pPerfUnRegFunc
PUBLIC	??_C@_03DDIMFGBA@SAM?$AA@			; `string'
PUBLIC	?_AtlRegisterPerUser@ATL@@3_NA			; ATL::_AtlRegisterPerUser
PUBLIC	??_C@_08LOPHEHKG@SECURITY?$AA@			; `string'
PUBLIC	??_C@_06FDHFNJBJ@SYSTEM?$AA@			; `string'
PUBLIC	??_C@_08KEKAJNJI@Software?$AA@			; `string'
PUBLIC	??_C@_07KJLOKDKB@TypeLib?$AA@			; `string'
PUBLIC	?VT@?$CVarTypeInfo@PA_K@ATL@@2GB		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
PUBLIC	__GUID_00000000_0000_0000_c000_000000000046
PUBLIC	?VT@?$CVarTypeInfo@M@ATL@@2GB			; ATL::CVarTypeInfo<float>::VT
PUBLIC	?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ ; ATL::CVarTypeInfo<float>::pmField
PUBLIC	__GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
PUBLIC	?VT@?$CVarTypeInfo@PAM@ATL@@2GB			; ATL::CVarTypeInfo<float *>::VT
PUBLIC	__GUID_00020400_0000_0000_c000_000000000046
PUBLIC	?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ ; ATL::CVarTypeInfo<float *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@N@ATL@@2GB			; ATL::CVarTypeInfo<double>::VT
PUBLIC	?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ ; ATL::CVarTypeInfo<double>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAN@ATL@@2GB			; ATL::CVarTypeInfo<double *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ ; ATL::CVarTypeInfo<double *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB	; ATL::CVarTypeInfo<tagVARIANT *>::VT
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	__GUID_0002e012_0000_0000_c000_000000000046
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?VT@?$CVarTypeInfo@PA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ ; ATL::CVarTypeInfo<wchar_t *>::pmField
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t * *>::VT
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ ; ATL::CVarTypeInfo<wchar_t * *>::pmField
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown *>::VT
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown *>::pmField
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown * *>::pmField
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	__GUID_0000010c_0000_0000_c000_000000000046
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch *>::VT
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch *>::pmField
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	??_C@_05GIBEAPNE@CLSID?$AA@			; `string'
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	_IID_IAxWinHostWindow
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch * *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY>::VT
PUBLIC	?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY>::pmField
PUBLIC	??_C@_05PDIKPLII@AppID?$AA@			; `string'
PUBLIC	?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY *>::VT
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY *>::pmField
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?chDirSep@ATL@@3DB				; ATL::chDirSep
PUBLIC	?chRightBracket@ATL@@3DB			; ATL::chRightBracket
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?chLeftBracket@ATL@@3DB				; ATL::chLeftBracket
PUBLIC	?chQuote@ATL@@3DB				; ATL::chQuote
PUBLIC	?chEquals@ATL@@3DB				; ATL::chEquals
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?szStringVal@ATL@@3QBDB				; ATL::szStringVal
PUBLIC	??_C@_01CPLAODJH@S?$AA@				; `string'
PUBLIC	?multiszStringVal@ATL@@3QBDB			; ATL::multiszStringVal
PUBLIC	_IID_IAxWinHostWindowLic
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	??_C@_01PLPBNMEI@M?$AA@				; `string'
PUBLIC	?szDwordVal@ATL@@3QBDB				; ATL::szDwordVal
PUBLIC	??_C@_01CKDDGHAB@D?$AA@				; `string'
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?szBinaryVal@ATL@@3QBDB				; ATL::szBinaryVal
PUBLIC	??_C@_01HMGJMAIH@B?$AA@				; `string'
PUBLIC	?szValToken@ATL@@3QBDB				; ATL::szValToken
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	??_C@_03LAIAPFCB@Val?$AA@			; `string'
PUBLIC	?szForceRemove@ATL@@3QBDB			; ATL::szForceRemove
PUBLIC	??_C@_0M@DBGDLGLL@ForceRemove?$AA@		; `string'
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?szNoRemove@ATL@@3QBDB				; ATL::szNoRemove
PUBLIC	??_C@_08KAAPDIAN@NoRemove?$AA@			; `string'
PUBLIC	?szDelete@ATL@@3QBDB				; ATL::szDelete
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	??_C@_06JBKGCNBB@Delete?$AA@			; `string'
PUBLIC	?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA	; ATL::CComApartment::ATL_CREATE_OBJECT
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	_IID_IAxWinAmbientDispatch
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A ; ATL::_pAtlAutoThreadModule
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?m_bInitFailed@CAtlBaseModule@ATL@@2_NA		; ATL::CAtlBaseModule::m_bInitFailed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	__GUID_00000000_0000_0000_0000_000000000000
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?MAX_VALUE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_VALUE
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?rgszNeverDelete@CRegParser@ATL@@1QBQBDB	; ATL::CRegParser::rgszNeverDelete
PUBLIC	?cbNeverDelete@CRegParser@ATL@@1HB		; ATL::CRegParser::cbNeverDelete
PUBLIC	?MAX_TYPE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_TYPE
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	_IID_IAxWinAmbientDispatchEx
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	_IID_IInternalConnection
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	__GUID_1cf2b120_547d_101b_8e65_08002b2bd119
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?_pAtlModule@ATL@@3PAVCAtlModule@1@A		; ATL::_pAtlModule
PUBLIC	?m_libid@CAtlModule@ATL@@2U_GUID@@A		; ATL::CAtlModule::m_libid
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	__GUID_00000146_0000_0000_c000_000000000046
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?VT@?$CVarTypeInfo@D@ATL@@2GB			; ATL::CVarTypeInfo<char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ ; ATL::CVarTypeInfo<char>::pmField
PUBLIC	?VT@?$CVarTypeInfo@E@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ ; ATL::CVarTypeInfo<unsigned char>::pmField
PUBLIC	_CLSID_Registrar
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?_Min@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Min
PUBLIC	?VT@?$CVarTypeInfo@PAD@ATL@@2GB			; ATL::CVarTypeInfo<char *>::VT
PUBLIC	?_Max@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Max
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ ; ATL::CVarTypeInfo<char *>::pmField
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?_Min@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Min
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?_Max@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Max
PUBLIC	?VT@?$CVarTypeInfo@PAE@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char *>::VT
PUBLIC	__GUID_00000109_0000_0000_c000_000000000046
PUBLIC	?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ ; ATL::CVarTypeInfo<unsigned char *>::pmField
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?_Min@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Min
PUBLIC	__GUID_b196b284_bab4_101a_b69c_00aa00341d07
PUBLIC	?_Max@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Max
PUBLIC	?VT@?$CVarTypeInfo@F@ATL@@2GB			; ATL::CVarTypeInfo<short>::VT
PUBLIC	_IID_IRegistrar
PUBLIC	?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ ; ATL::CVarTypeInfo<short>::pmField
PUBLIC	?_Min@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Min
PUBLIC	?_Max@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Max
PUBLIC	?VT@?$CVarTypeInfo@PAF@ATL@@2GB			; ATL::CVarTypeInfo<short *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ ; ATL::CVarTypeInfo<short *>::pmField
PUBLIC	?_Min@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Min
PUBLIC	__GUID_00000001_0000_0000_c000_000000000046
PUBLIC	?_Max@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Max
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?VT@?$CVarTypeInfo@G@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short>::VT
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ ; ATL::CVarTypeInfo<unsigned short>::pmField
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	__GUID_00020401_0000_0000_c000_000000000046
PUBLIC	?_Min@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Min
PUBLIC	_LIBID_ATLLib
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?_Max@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Max
PUBLIC	__GUID_00020412_0000_0000_c000_000000000046
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?VT@?$CVarTypeInfo@PAG@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short *>::VT
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ ; ATL::CVarTypeInfo<unsigned short *>::pmField
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?VT@?$CVarTypeInfo@H@ATL@@2GB			; ATL::CVarTypeInfo<int>::VT
PUBLIC	?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ ; ATL::CVarTypeInfo<int>::pmField
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?VT@?$CVarTypeInfo@PAH@ATL@@2GB			; ATL::CVarTypeInfo<int *>::VT
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ ; ATL::CVarTypeInfo<int *>::pmField
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?VT@?$CVarTypeInfo@I@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int>::VT
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ ; ATL::CVarTypeInfo<unsigned int>::pmField
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?VT@?$CVarTypeInfo@PAI@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ ; ATL::CVarTypeInfo<unsigned int *>::pmField
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?VT@?$CVarTypeInfo@J@ATL@@2GB			; ATL::CVarTypeInfo<long>::VT
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ ; ATL::CVarTypeInfo<long>::pmField
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?_pModule@ATL@@3PAVCComModule@1@A		; ATL::_pModule
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?VT@?$CVarTypeInfo@PAJ@ATL@@2GB			; ATL::CVarTypeInfo<long *>::VT
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ ; ATL::CVarTypeInfo<long *>::pmField
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	_IID_IDocHostUIHandlerDispatch
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?VT@?$CVarTypeInfo@K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long>::VT
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ ; ATL::CVarTypeInfo<unsigned long>::pmField
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?VT@?$CVarTypeInfo@PAK@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long *>::VT
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA
_BSS	SEGMENT
?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA DD 01H DUP (?) ; ATL::_pPerfRegFunc
_BSS	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZA
_BSS	SEGMENT
?_pPerfUnRegFunc@ATL@@3P6AJXZA DD 01H DUP (?)		; ATL::_pPerfUnRegFunc
_BSS	ENDS
;	COMDAT ?_AtlRegisterPerUser@ATL@@3_NA
_BSS	SEGMENT
?_AtlRegisterPerUser@ATL@@3_NA DB 01H DUP (?)		; ATL::_AtlRegisterPerUser
_BSS	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_BSS	SEGMENT
?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA DD 01H DUP (?) ; ATL::CComApartment::ATL_CREATE_OBJECT
_BSS	ENDS
;	COMDAT ?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A
_BSS	SEGMENT
?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A DD 01H DUP (?) ; ATL::_pAtlAutoThreadModule
_BSS	ENDS
;	COMDAT ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA
_BSS	SEGMENT
?m_bInitFailed@CAtlBaseModule@ATL@@2_NA DB 01H DUP (?)	; ATL::CAtlBaseModule::m_bInitFailed
_BSS	ENDS
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_BSS	SEGMENT
?_pAtlModule@ATL@@3PAVCAtlModule@1@A DD 01H DUP (?)	; ATL::_pAtlModule
_BSS	ENDS
;	COMDAT ?m_libid@CAtlModule@ATL@@2U_GUID@@A
_BSS	SEGMENT
?m_libid@CAtlModule@ATL@@2U_GUID@@A DB 010H DUP (?)	; ATL::CAtlModule::m_libid
_BSS	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_BSS	SEGMENT
?_pModule@ATL@@3PAVCComModule@1@A DD 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAK@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAK@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned long *>::VT
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long>::pmField
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@K@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned long>::VT
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
_IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ DD 08H ; ATL::CVarTypeInfo<long *>::pmField
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAJ@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAJ@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<long *>::VT
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ DD 08H ; ATL::CVarTypeInfo<long>::pmField
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@J@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<long>::VT
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAI@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAI@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned int *>::VT
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int>::pmField
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@I@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@I@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned int>::VT
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ DD 08H ; ATL::CVarTypeInfo<int *>::pmField
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAH@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAH@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<int *>::VT
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ DD 08H ; ATL::CVarTypeInfo<int>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@H@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@H@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<int>::VT
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short *>::pmField
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAG@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAG@ATL@@2GB DW 04012H		; ATL::CVarTypeInfo<unsigned short *>::VT
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT __GUID_00020412_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020412_0000_0000_c000_000000000046 DD 020412H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Max@?$AtlLimits@_K@ATL@@2_KB DQ ffffffffffffffffH	; ATL::AtlLimits<unsigned __int64>::_Max
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT
_LIBID_ATLLib DD 044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Min@?$AtlLimits@_K@ATL@@2_KB DQ 0000000000000000H	; ATL::AtlLimits<unsigned __int64>::_Min
CONST	ENDS
;	COMDAT __GUID_00020401_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020401_0000_0000_c000_000000000046 DD 020401H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short>::pmField
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@G@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@G@ATL@@2GB DW 012H			; ATL::CVarTypeInfo<unsigned short>::VT
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Max@?$AtlLimits@_J@ATL@@2_JB DQ 7fffffffffffffffH	; ATL::AtlLimits<__int64>::_Max
CONST	ENDS
;	COMDAT __GUID_00000001_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000001_0000_0000_c000_000000000046 DD 01H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Min@?$AtlLimits@_J@ATL@@2_JB DQ 8000000000000000H	; ATL::AtlLimits<__int64>::_Min
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ DD 08H ; ATL::CVarTypeInfo<short *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAF@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAF@ATL@@2GB DW 04002H		; ATL::CVarTypeInfo<short *>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Max@?$AtlLimits@K@ATL@@2KB DD 0ffffffffH		; ATL::AtlLimits<unsigned long>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Min@?$AtlLimits@K@ATL@@2KB DD 00H			; ATL::AtlLimits<unsigned long>::_Min
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ DD 08H ; ATL::CVarTypeInfo<short>::pmField
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT
_IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@F@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@F@ATL@@2GB DW 02H			; ATL::CVarTypeInfo<short>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Max@?$AtlLimits@J@ATL@@2JB DD 07fffffffH		; ATL::AtlLimits<long>::_Max
CONST	ENDS
;	COMDAT __GUID_b196b284_bab4_101a_b69c_00aa00341d07
CONST	SEGMENT
__GUID_b196b284_bab4_101a_b69c_00aa00341d07 DD 0b196b284H
	DW	0bab4H
	DW	0101aH
	DB	0b6H
	DB	09cH
	DB	00H
	DB	0aaH
	DB	00H
	DB	034H
	DB	01dH
	DB	07H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Min@?$AtlLimits@J@ATL@@2JB DD 080000000H		; ATL::AtlLimits<long>::_Min
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT __GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
CONST	SEGMENT
__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713 DD 07fd52380H
	DW	04e07H
	DW	0101bH
	DB	0aeH
	DB	02dH
	DB	08H
	DB	00H
	DB	02bH
	DB	02eH
	DB	0c7H
	DB	013H
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char *>::pmField
CONST	ENDS
;	COMDAT __GUID_00000109_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000109_0000_0000_c000_000000000046 DD 0109H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAE@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAE@ATL@@2GB DW 04011H		; ATL::CVarTypeInfo<unsigned char *>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Max@?$AtlLimits@I@ATL@@2IB DD 0ffffffffH		; ATL::AtlLimits<unsigned int>::_Max
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Min@?$AtlLimits@I@ATL@@2IB DD 00H			; ATL::AtlLimits<unsigned int>::_Min
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ DD 08H ; ATL::CVarTypeInfo<char *>::pmField
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Max@?$AtlLimits@H@ATL@@2HB DD 07fffffffH		; ATL::AtlLimits<int>::_Max
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAD@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAD@ATL@@2GB DW 04010H		; ATL::CVarTypeInfo<char *>::VT
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Min@?$AtlLimits@H@ATL@@2HB DD 080000000H		; ATL::AtlLimits<int>::_Min
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT
_CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@E@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@E@ATL@@2GB DW 011H			; ATL::CVarTypeInfo<unsigned char>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ DD 08H ; ATL::CVarTypeInfo<char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@D@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@D@ATL@@2GB DW 010H			; ATL::CVarTypeInfo<char>::VT
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT __GUID_00000146_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000146_0000_0000_c000_000000000046 DD 0146H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT __GUID_1cf2b120_547d_101b_8e65_08002b2bd119
CONST	SEGMENT
__GUID_1cf2b120_547d_101b_8e65_08002b2bd119 DD 01cf2b120H
	DW	0547dH
	DW	0101bH
	DB	08eH
	DB	065H
	DB	08H
	DB	00H
	DB	02bH
	DB	02bH
	DB	0d1H
	DB	019H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT
_IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatchEx
CONST	SEGMENT
_IID_IAxWinAmbientDispatchEx DD 0b2d0778bH
	DW	0ac99H
	DW	04c58H
	DB	0a5H
	DB	0c8H
	DB	0e7H
	DB	072H
	DB	04eH
	DB	053H
	DB	016H
	DB	0b5H
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT __GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
CONST	SEGMENT
__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352 DD 0fc4801a3H
	DW	02ba9H
	DW	011cfH
	DB	0a2H
	DB	029H
	DB	00H
	DB	0aaH
	DB	00H
	DB	03dH
	DB	073H
	DB	052H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?MAX_TYPE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_TYPE@CRegParser@ATL@@1HB DD 01000H			; ATL::CRegParser::MAX_TYPE
CONST	ENDS
;	COMDAT ?cbNeverDelete@CRegParser@ATL@@1HB
CONST	SEGMENT
?cbNeverDelete@CRegParser@ATL@@1HB DD 0cH		; ATL::CRegParser::cbNeverDelete
CONST	ENDS
;	COMDAT ?rgszNeverDelete@CRegParser@ATL@@1QBQBDB
CONST	SEGMENT
?rgszNeverDelete@CRegParser@ATL@@1QBQBDB DD FLAT:??_C@_05PDIKPLII@AppID?$AA@ ; ATL::CRegParser::rgszNeverDelete
	DD	FLAT:??_C@_05GIBEAPNE@CLSID?$AA@
	DD	FLAT:??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
	DD	FLAT:??_C@_08PICKODJL@FileType?$AA@
	DD	FLAT:??_C@_09JKPGEJCH@Interface?$AA@
	DD	FLAT:??_C@_08PPIOJEA@Hardware?$AA@
	DD	FLAT:??_C@_04IHBFOLAC@Mime?$AA@
	DD	FLAT:??_C@_03DDIMFGBA@SAM?$AA@
	DD	FLAT:??_C@_08LOPHEHKG@SECURITY?$AA@
	DD	FLAT:??_C@_06FDHFNJBJ@SYSTEM?$AA@
	DD	FLAT:??_C@_08KEKAJNJI@Software?$AA@
	DD	FLAT:??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?MAX_VALUE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_VALUE@CRegParser@ATL@@1HB DD 01000H		; ATL::CRegParser::MAX_VALUE
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
CONST	SEGMENT
__GUID_00000000_0000_0000_0000_000000000000 DD 00H
	DW	00H
	DW	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT
_IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ??_C@_06JBKGCNBB@Delete?$AA@
CONST	SEGMENT
??_C@_06JBKGCNBB@Delete?$AA@ DB 'Delete', 00H		; `string'
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?szDelete@ATL@@3QBDB
CONST	SEGMENT
?szDelete@ATL@@3QBDB DD FLAT:??_C@_06JBKGCNBB@Delete?$AA@ ; ATL::szDelete
CONST	ENDS
;	COMDAT ??_C@_08KAAPDIAN@NoRemove?$AA@
CONST	SEGMENT
??_C@_08KAAPDIAN@NoRemove?$AA@ DB 'NoRemove', 00H	; `string'
CONST	ENDS
;	COMDAT ?szNoRemove@ATL@@3QBDB
CONST	SEGMENT
?szNoRemove@ATL@@3QBDB DD FLAT:??_C@_08KAAPDIAN@NoRemove?$AA@ ; ATL::szNoRemove
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ??_C@_0M@DBGDLGLL@ForceRemove?$AA@
CONST	SEGMENT
??_C@_0M@DBGDLGLL@ForceRemove?$AA@ DB 'ForceRemove', 00H ; `string'
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?szForceRemove@ATL@@3QBDB
CONST	SEGMENT
?szForceRemove@ATL@@3QBDB DD FLAT:??_C@_0M@DBGDLGLL@ForceRemove?$AA@ ; ATL::szForceRemove
CONST	ENDS
;	COMDAT ??_C@_03LAIAPFCB@Val?$AA@
CONST	SEGMENT
??_C@_03LAIAPFCB@Val?$AA@ DB 'Val', 00H			; `string'
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?szValToken@ATL@@3QBDB
CONST	SEGMENT
?szValToken@ATL@@3QBDB DD FLAT:??_C@_03LAIAPFCB@Val?$AA@ ; ATL::szValToken
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B?$AA@
CONST	SEGMENT
??_C@_01HMGJMAIH@B?$AA@ DB 'B', 00H			; `string'
CONST	ENDS
;	COMDAT ?szBinaryVal@ATL@@3QBDB
CONST	SEGMENT
?szBinaryVal@ATL@@3QBDB DD FLAT:??_C@_01HMGJMAIH@B?$AA@	; ATL::szBinaryVal
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D?$AA@
CONST	SEGMENT
??_C@_01CKDDGHAB@D?$AA@ DB 'D', 00H			; `string'
CONST	ENDS
;	COMDAT ?szDwordVal@ATL@@3QBDB
CONST	SEGMENT
?szDwordVal@ATL@@3QBDB DD FLAT:??_C@_01CKDDGHAB@D?$AA@	; ATL::szDwordVal
CONST	ENDS
;	COMDAT ??_C@_01PLPBNMEI@M?$AA@
CONST	SEGMENT
??_C@_01PLPBNMEI@M?$AA@ DB 'M', 00H			; `string'
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindowLic
CONST	SEGMENT
_IID_IAxWinHostWindowLic DD 03935bda8H
	DW	04ed9H
	DW	0495cH
	DB	086H
	DB	050H
	DB	0e0H
	DB	01fH
	DB	0c1H
	DB	0e3H
	DB	08aH
	DB	04bH
CONST	ENDS
;	COMDAT ?multiszStringVal@ATL@@3QBDB
CONST	SEGMENT
?multiszStringVal@ATL@@3QBDB DD FLAT:??_C@_01PLPBNMEI@M?$AA@ ; ATL::multiszStringVal
CONST	ENDS
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT
??_C@_01CPLAODJH@S?$AA@ DB 'S', 00H			; `string'
CONST	ENDS
;	COMDAT ?szStringVal@ATL@@3QBDB
CONST	SEGMENT
?szStringVal@ATL@@3QBDB DD FLAT:??_C@_01CPLAODJH@S?$AA@	; ATL::szStringVal
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?chEquals@ATL@@3DB
CONST	SEGMENT
?chEquals@ATL@@3DB DB 03dH				; ATL::chEquals
CONST	ENDS
;	COMDAT ?chQuote@ATL@@3DB
CONST	SEGMENT
?chQuote@ATL@@3DB DB 027H				; ATL::chQuote
CONST	ENDS
;	COMDAT ?chLeftBracket@ATL@@3DB
CONST	SEGMENT
?chLeftBracket@ATL@@3DB DB 07bH				; ATL::chLeftBracket
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?chRightBracket@ATL@@3DB
CONST	SEGMENT
?chRightBracket@ATL@@3DB DB 07dH			; ATL::chRightBracket
CONST	ENDS
;	COMDAT ?chDirSep@ATL@@3DB
CONST	SEGMENT
?chDirSep@ATL@@3DB DB 05cH				; ATL::chDirSep
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY *>::pmField
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB DW 04006H	; ATL::CVarTypeInfo<tagCY *>::VT
CONST	ENDS
;	COMDAT ??_C@_05PDIKPLII@AppID?$AA@
CONST	SEGMENT
??_C@_05PDIKPLII@AppID?$AA@ DB 'AppID', 00H		; `string'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB DW 06H		; ATL::CVarTypeInfo<tagCY>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB DW 04009H	; ATL::CVarTypeInfo<IDispatch * *>::VT
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT
_IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ??_C@_05GIBEAPNE@CLSID?$AA@
CONST	SEGMENT
??_C@_05GIBEAPNE@CLSID?$AA@ DB 'CLSID', 00H		; `string'
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch *>::pmField
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB DW 09H	; ATL::CVarTypeInfo<IDispatch *>::VT
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT __GUID_0000010c_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_0000010c_0000_0000_c000_000000000046 DD 010cH
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB DW 0400dH	; ATL::CVarTypeInfo<IUnknown * *>::VT
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown *>::pmField
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB DW 0dH	; ATL::CVarTypeInfo<IUnknown *>::VT
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t * *>::pmField
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB DW 04008H		; ATL::CVarTypeInfo<wchar_t * *>::VT
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_W@ATL@@2GB DW 08H			; ATL::CVarTypeInfo<wchar_t *>::VT
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT __GUID_0002e012_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_0002e012_0000_0000_c000_000000000046 DD 02e012H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB DW 0400cH	; ATL::CVarTypeInfo<tagVARIANT *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ DD 08H ; ATL::CVarTypeInfo<double *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAN@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAN@ATL@@2GB DW 04005H		; ATL::CVarTypeInfo<double *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ DD 08H ; ATL::CVarTypeInfo<double>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@N@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@N@ATL@@2GB DW 05H			; ATL::CVarTypeInfo<double>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ DD 08H ; ATL::CVarTypeInfo<float *>::pmField
CONST	ENDS
;	COMDAT __GUID_00020400_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020400_0000_0000_c000_000000000046 DD 020400H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAM@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAM@ATL@@2GB DW 04004H		; ATL::CVarTypeInfo<float *>::VT
CONST	ENDS
;	COMDAT __GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
CONST	SEGMENT
__GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851 DD 0a6bc3ac0H
	DW	0dbaaH
	DW	011ceH
	DB	09dH
	DB	0e3H
	DB	00H
	DB	0aaH
	DB	00H
	DB	04bH
	DB	0b8H
	DB	051H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ DD 08H ; ATL::CVarTypeInfo<float>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@M@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@M@ATL@@2GB DW 04H			; ATL::CVarTypeInfo<float>::VT
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000000_0000_0000_c000_000000000046 DD 00H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_K@ATL@@2GB DW 04015H		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
CONST	ENDS
;	COMDAT ??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	SEGMENT
??_C@_07KJLOKDKB@TypeLib?$AA@ DB 'TypeLib', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KEKAJNJI@Software?$AA@
CONST	SEGMENT
??_C@_08KEKAJNJI@Software?$AA@ DB 'Software', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDHFNJBJ@SYSTEM?$AA@
CONST	SEGMENT
??_C@_06FDHFNJBJ@SYSTEM?$AA@ DB 'SYSTEM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LOPHEHKG@SECURITY?$AA@
CONST	SEGMENT
??_C@_08LOPHEHKG@SECURITY?$AA@ DB 'SECURITY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03DDIMFGBA@SAM?$AA@
CONST	SEGMENT
??_C@_03DDIMFGBA@SAM?$AA@ DB 'SAM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IHBFOLAC@Mime?$AA@
CONST	SEGMENT
??_C@_04IHBFOLAC@Mime?$AA@ DB 'Mime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPIOJEA@Hardware?$AA@
CONST	SEGMENT
??_C@_08PPIOJEA@Hardware?$AA@ DB 'Hardware', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JKPGEJCH@Interface?$AA@
CONST	SEGMENT
??_C@_09JKPGEJCH@Interface?$AA@ DB 'Interface', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PICKODJL@FileType?$AA@
CONST	SEGMENT
??_C@_08PICKODJL@FileType?$AA@ DB 'FileType', 00H	; `string'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64>::pmField
CONST	ENDS
;	COMDAT ??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
CONST	SEGMENT
??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@ DB 'Component Categories', 00H ; `string'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_K@ATL@@2GB DW 015H			; ATL::CVarTypeInfo<unsigned __int64>::VT
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_J@ATL@@2GB DW 04014H		; ATL::CVarTypeInfo<__int64 *>::VT
CONST	ENDS
;	COMDAT ___pobjMapEntryLast
ATL$__z	SEGMENT
___pobjMapEntryLast DD 00H
ATL$__z	ENDS
;	COMDAT ___pobjMapEntryFirst
ATL$__a	SEGMENT
___pobjMapEntryFirst DD 00H
ATL$__a	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_J@ATL@@2GB DW 014H			; ATL::CVarTypeInfo<__int64>::VT
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long *>::pmField
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??1CComBSTR@ATL@@QAE@XZ				; ATL::CComBSTR::~CComBSTR
PUBLIC	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
PUBLIC	??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?Blit8BitFast@IMAGE_RSC@@AAEXPAG@Z		; IMAGE_RSC::Blit8BitFast
PUBLIC	?Blit8Bit@IMAGE_RSC@@AAEXJJPAG@Z		; IMAGE_RSC::Blit8Bit
PUBLIC	?Blit8BitTransparentFast@IMAGE_RSC@@AAEXPAG@Z	; IMAGE_RSC::Blit8BitTransparentFast
PUBLIC	?Blit8BitTransparent@IMAGE_RSC@@AAEXJJPAG@Z	; IMAGE_RSC::Blit8BitTransparent
PUBLIC	?Blit8BitPart@IMAGE_RSC@@AAEXJJJJJPAG@Z		; IMAGE_RSC::Blit8BitPart
PUBLIC	?Blit8BitTransparentPart@IMAGE_RSC@@AAEXJJJJJPAG@Z ; IMAGE_RSC::Blit8BitTransparentPart
PUBLIC	?Blit16BitFast@IMAGE_RSC@@AAEXPAG@Z		; IMAGE_RSC::Blit16BitFast
PUBLIC	?Blit16Bit@IMAGE_RSC@@AAEXJJPAG@Z		; IMAGE_RSC::Blit16Bit
PUBLIC	?Blit16BitTransparentFast@IMAGE_RSC@@AAEXPAG@Z	; IMAGE_RSC::Blit16BitTransparentFast
PUBLIC	?Blit16BitTransparent@IMAGE_RSC@@AAEXJJPAG@Z	; IMAGE_RSC::Blit16BitTransparent
PUBLIC	?Blit16BitPart@IMAGE_RSC@@AAEXJJJJJPAG@Z	; IMAGE_RSC::Blit16BitPart
PUBLIC	?Blit16BitTransparentPart@IMAGE_RSC@@AAEXJJJJJPAG@Z ; IMAGE_RSC::Blit16BitTransparentPart
PUBLIC	?_Blit16BitTo32@IMAGE_RSC@@AAEXJJPAK@Z		; IMAGE_RSC::_Blit16BitTo32
PUBLIC	?_Blit16BitTransparentTo32@IMAGE_RSC@@AAEXJJPAK@Z ; IMAGE_RSC::_Blit16BitTransparentTo32
PUBLIC	?_Blit16BitPartTo32@IMAGE_RSC@@AAEXJJJJJPAK@Z	; IMAGE_RSC::_Blit16BitPartTo32
PUBLIC	?_Blit16BitTransparentPartTo32@IMAGE_RSC@@AAEXJJJJJPAK@Z ; IMAGE_RSC::_Blit16BitTransparentPartTo32
PUBLIC	?_Blit8BitTo32@IMAGE_RSC@@AAEXJJPAK@Z		; IMAGE_RSC::_Blit8BitTo32
PUBLIC	?_Blit8BitTransparentTo32@IMAGE_RSC@@AAEXJJPAK@Z ; IMAGE_RSC::_Blit8BitTransparentTo32
PUBLIC	?_Blit8BitPartTo32@IMAGE_RSC@@AAEXJJJJJPAK@Z	; IMAGE_RSC::_Blit8BitPartTo32
PUBLIC	?_Blit8BitTransparentPartTo32@IMAGE_RSC@@AAEXJJJJJPAK@Z ; IMAGE_RSC::_Blit8BitTransparentPartTo32
PUBLIC	?Blend8BitFast@IMAGE_RSC@@AAEXPAGJJ@Z		; IMAGE_RSC::Blend8BitFast
PUBLIC	?Blend8Bit@IMAGE_RSC@@AAEXJJPAGJJ_N@Z		; IMAGE_RSC::Blend8Bit
PUBLIC	?Blend8BitTransparentFast@IMAGE_RSC@@AAEXPAGJJ@Z ; IMAGE_RSC::Blend8BitTransparentFast
PUBLIC	?Blend8BitTransparent@IMAGE_RSC@@AAEXJJPAGJJ_N@Z ; IMAGE_RSC::Blend8BitTransparent
PUBLIC	?Blend8BitPart@IMAGE_RSC@@AAEXJJJJJPAGJJ_N@Z	; IMAGE_RSC::Blend8BitPart
PUBLIC	?Blend8BitTransparentPart@IMAGE_RSC@@AAEXJJJJJPAGJJ_N@Z ; IMAGE_RSC::Blend8BitTransparentPart
PUBLIC	?Blend16BitFast@IMAGE_RSC@@AAEXPAGJJ@Z		; IMAGE_RSC::Blend16BitFast
PUBLIC	?Blend16Bit@IMAGE_RSC@@AAEXJJPAGJJ_N@Z		; IMAGE_RSC::Blend16Bit
PUBLIC	?Blend16BitTransparentFast@IMAGE_RSC@@AAEXPAGJJ@Z ; IMAGE_RSC::Blend16BitTransparentFast
PUBLIC	?Blend16BitTransparent@IMAGE_RSC@@AAEXJJPAGJJ_N@Z ; IMAGE_RSC::Blend16BitTransparent
PUBLIC	?Blend16BitPart@IMAGE_RSC@@AAEXJJJJJPAGJJ_N@Z	; IMAGE_RSC::Blend16BitPart
PUBLIC	?Blend16BitTransparentPart@IMAGE_RSC@@AAEXJJJJJPAGJJ_N@Z ; IMAGE_RSC::Blend16BitTransparentPart
PUBLIC	?GetImage@IMAGE_RSC@@QAEPADXZ			; IMAGE_RSC::GetImage
PUBLIC	?GetPalette@IMAGE_RSC@@QAEPAGXZ			; IMAGE_RSC::GetPalette
PUBLIC	?Blit@IMAGE_RSC@@QAEXPAVSCREEN@@JJJJJJ@Z	; IMAGE_RSC::Blit
PUBLIC	?Blend@IMAGE_RSC@@QAEXPAVSCREEN@@JJJJJJJJ@Z	; IMAGE_RSC::Blend
PUBLIC	?ScaleDown8@IMAGE_RSC@@QAEXPAVSCREEN@@PAJ1JJJJJJ@Z ; IMAGE_RSC::ScaleDown8
PUBLIC	?ScaleUp8@IMAGE_RSC@@QAEXPAVSCREEN@@PAJ1JJJJ@Z	; IMAGE_RSC::ScaleUp8
PUBLIC	?ScaleDown8Overlay@IMAGE_RSC@@QAEXPAVSCREEN@@PAJ1JJJJJJPAEQAPAG@Z ; IMAGE_RSC::ScaleDown8Overlay
PUBLIC	?ScaleUp8Overlay@IMAGE_RSC@@QAEXPAVSCREEN@@PAJ1JJJJPAEQAPAG@Z ; IMAGE_RSC::ScaleUp8Overlay
PUBLIC	?RGB565toRGB8@@YAKG@Z				; RGB565toRGB8
PUBLIC	?RGB8toRGB565@@YAGK@Z				; RGB8toRGB565
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__imp__SysFreeString@4:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?UIColorTable@@3PAY0BAA@GA:BYTE			; UIColorTable
EXTRN	?rShift@@3PAGA:BYTE				; rShift
EXTRN	?bShift@@3PAGA:BYTE				; bShift
EXTRN	?gShift@@3PAGA:BYTE				; gShift
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
_b$ = -12						; size = 4
_g$ = -8						; size = 4
_r$ = -4						; size = 4
_sc$ = 8						; size = 4
?RGB8toRGB565@@YAGK@Z PROC				; RGB8toRGB565

; 25   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 26   : 	//unpack rgb565
; 27   : 	DWORD r = (sc >> 16) & 255;

	mov	eax, DWORD PTR _sc$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 255				; 000000ffH
	mov	DWORD PTR _r$[ebp], eax

; 28   : 	DWORD g = (sc >> 8) & 255;

	mov	ecx, DWORD PTR _sc$[ebp]
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	mov	DWORD PTR _g$[ebp], ecx

; 29   : 	DWORD b = (sc & 255);

	mov	edx, DWORD PTR _sc$[ebp]
	and	edx, 255				; 000000ffH
	mov	DWORD PTR _b$[ebp], edx

; 30   : 	r >>= 3;//scale to 0..31 from 0..255

	mov	eax, DWORD PTR _r$[ebp]
	shr	eax, 3
	mov	DWORD PTR _r$[ebp], eax

; 31   : 	g >>= 2;//scale to 0..63 from 0..255

	mov	ecx, DWORD PTR _g$[ebp]
	shr	ecx, 2
	mov	DWORD PTR _g$[ebp], ecx

; 32   : 	b >>= 3;

	mov	edx, DWORD PTR _b$[ebp]
	shr	edx, 3
	mov	DWORD PTR _b$[ebp], edx

; 33   : 	//pack rgb565
; 34   : 	return static_cast<WORD>( (r<<11) | (g<<5) | b );//ARGB

	mov	eax, DWORD PTR _r$[ebp]
	shl	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR _g$[ebp]
	shl	ecx, 5
	or	eax, ecx
	or	eax, DWORD PTR _b$[ebp]

; 35   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RGB8toRGB565@@YAGK@Z ENDP				; RGB8toRGB565
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
_b$ = -12						; size = 4
_g$ = -8						; size = 4
_r$ = -4						; size = 4
_sc$ = 8						; size = 2
?RGB565toRGB8@@YAKG@Z PROC				; RGB565toRGB8

; 12   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 13   : 	//unpack rgb565
; 14   : 	DWORD r = (sc >> 11) & 31;

	movzx	eax, WORD PTR _sc$[ebp]
	sar	eax, 11					; 0000000bH
	and	eax, 31					; 0000001fH
	mov	DWORD PTR _r$[ebp], eax

; 15   : 	DWORD g = (sc >> 5) & 63;

	movzx	ecx, WORD PTR _sc$[ebp]
	sar	ecx, 5
	and	ecx, 63					; 0000003fH
	mov	DWORD PTR _g$[ebp], ecx

; 16   : 	DWORD b = (sc & 31);

	movzx	edx, WORD PTR _sc$[ebp]
	and	edx, 31					; 0000001fH
	mov	DWORD PTR _b$[ebp], edx

; 17   : 	r <<= 3;//scale 0..31 to 0..255

	mov	eax, DWORD PTR _r$[ebp]
	shl	eax, 3
	mov	DWORD PTR _r$[ebp], eax

; 18   : 	g <<= 2;//scale 0..63 to 0..255

	mov	ecx, DWORD PTR _g$[ebp]
	shl	ecx, 2
	mov	DWORD PTR _g$[ebp], ecx

; 19   : 	b <<= 3;

	mov	edx, DWORD PTR _b$[ebp]
	shl	edx, 3
	mov	DWORD PTR _b$[ebp], edx

; 20   : 	//pack rgb888
; 21   : 	return (r<<16) | (g<<8) | b;//ARGB

	mov	eax, DWORD PTR _r$[ebp]
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _g$[ebp]
	shl	ecx, 8
	or	eax, ecx
	or	eax, DWORD PTR _b$[ebp]

; 22   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RGB565toRGB8@@YAKG@Z ENDP				; RGB565toRGB8
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
$T1 = -68						; size = 4
$T2 = -64						; size = 4
_sptr$ = -60						; size = 4
_dptr$ = -56						; size = 4
$T3 = -52						; size = 4
$T4 = -48						; size = 4
_cpyline2$ = -44					; size = 4
_cpyline$ = -40						; size = 4
_rval$ = -36						; size = 4
_sline$ = -32						; size = 4
_oline$ = -28						; size = 4
_this$ = -24						; size = 4
_palno$ = -20						; size = 4
_count$ = -16						; size = 4
_dline$ = -12						; size = 4
_i$ = -8						; size = 4
_j$ = -4						; size = 4
_surface$ = 8						; size = 4
_Rows$ = 12						; size = 4
_Cols$ = 16						; size = 4
_dx$ = 20						; size = 4
_dy$ = 24						; size = 4
_dw$ = 28						; size = 4
_dh$ = 32						; size = 4
_overlay$ = 36						; size = 4
_Palette$ = 40						; size = 4
?ScaleUp8Overlay@IMAGE_RSC@@QAEXPAVSCREEN@@PAJ1JJJJPAEQAPAG@Z PROC ; IMAGE_RSC::ScaleUp8Overlay
; _this$ = ecx

; 2030 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2031 : 	unsigned char *sptr,*sline,*oline;
; 2032 : 	WORD *dptr,*dline;
; 2033 : 	WORD *cpyline;
; 2034 : 	long i,j,rval,count;
; 2035 : 	long palno;
; 2036 : 	DWORD* cpyline2;
; 2037 : 
; 2038 : 	sptr=(unsigned char *)(Owner->Data_ + Header->imageoffset);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+36]
	add	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _sptr$[ebp], ecx

; 2039 : 
; 2040 : 	dptr=surface->mem;

	mov	edx, DWORD PTR _surface$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _dptr$[ebp], eax

; 2041 : 	cpyline=new WORD[dw];

	xor	ecx, ecx
	mov	eax, DWORD PTR _dw$[ebp]
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR _cpyline$[ebp], eax

; 2042 : 	cpyline2 = new DWORD[dw];//XX

	xor	ecx, ecx
	mov	eax, DWORD PTR _dw$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR _cpyline2$[ebp], eax

; 2043 : 
; 2044 : 	rval=-1;

	mov	DWORD PTR _rval$[ebp], -1

; 2045 : 	dline=&dptr[(dy*surface->width)+dx];

	mov	ecx, DWORD PTR _surface$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	imul	edx, DWORD PTR _dy$[ebp]
	add	edx, DWORD PTR _dx$[ebp]
	mov	eax, DWORD PTR _dptr$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _dline$[ebp], ecx

; 2046 : 	if( surface->bpp == 32 )//XX

	mov	edx, DWORD PTR _surface$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN26@ScaleUp8Ov

; 2047 : 		dline += (dy*surface->width)+dx;//*2;

	mov	ecx, DWORD PTR _surface$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	imul	edx, DWORD PTR _dy$[ebp]
	add	edx, DWORD PTR _dx$[ebp]
	mov	eax, DWORD PTR _dline$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _dline$[ebp], ecx
$LN26@ScaleUp8Ov:

; 2048 : 
; 2049 : 	for(i=0;i<dh;i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN25@ScaleUp8Ov
$LN24@ScaleUp8Ov:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN25@ScaleUp8Ov:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _dh$[ebp]
	jge	$LN23@ScaleUp8Ov

; 2050 : 	{
; 2051 : 		sline=&sptr[Rows[i]*Header->w];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, WORD PTR [edx+44]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _Rows$[ebp]
	imul	eax, DWORD PTR [edx+ecx*4]
	add	eax, DWORD PTR _sptr$[ebp]
	mov	DWORD PTR _sline$[ebp], eax

; 2052 : 		oline=&overlay[Rows[i]*Header->w];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, WORD PTR [ecx+44]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _Rows$[ebp]
	imul	edx, DWORD PTR [ecx+eax*4]
	add	edx, DWORD PTR _overlay$[ebp]
	mov	DWORD PTR _oline$[ebp], edx

; 2053 : 
; 2054 : 		if( surface->bpp == 32 )

	mov	edx, DWORD PTR _surface$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	cmp	eax, 32					; 00000020H
	jne	$LN22@ScaleUp8Ov

; 2055 : 		{
; 2056 : 			if(Rows[i] == rval)

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _Rows$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	cmp	eax, DWORD PTR _rval$[ebp]
	jne	SHORT $LN21@ScaleUp8Ov

; 2059 : 				{
; 2060 : 					mov ECX,count

	mov	ecx, DWORD PTR _count$[ebp]

; 2061 : 					mov ESI,cpyline2

	mov	esi, DWORD PTR _cpyline2$[ebp]

; 2062 : 					mov EDI,dline

	mov	edi, DWORD PTR _dline$[ebp]

; 2063 : 					rep movsd

	rep	 movsd

; 2057 : 			{
; 2058 : 				__asm

	jmp	$LN20@ScaleUp8Ov
$LN21@ScaleUp8Ov:

; 2064 : 				};				
; 2065 : 			}
; 2066 : 			else if(Rows[i] != Rows[i+1])

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _Rows$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _Rows$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	cmp	ecx, DWORD PTR [esi+eax*4+4]
	je	SHORT $LN19@ScaleUp8Ov

; 2067 : 			{
; 2068 : 				for(j=0;j<dw;j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN18@ScaleUp8Ov
$LN17@ScaleUp8Ov:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN18@ScaleUp8Ov:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _dw$[ebp]
	jge	SHORT $LN16@ScaleUp8Ov

; 2069 : 				{
; 2070 : 					palno=(long)(oline[Cols[j]] & 0x0f);

	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _Cols$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _oline$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	and	edx, 15					; 0000000fH
	mov	DWORD PTR _palno$[ebp], edx

; 2071 : 					((DWORD*)dline)[j] = RGB565toRGB8( Palette[palno][sline[Cols[j]]] );

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _Cols$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _sline$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	mov	edx, DWORD PTR _palno$[ebp]
	mov	eax, DWORD PTR _Palette$[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	movzx	eax, WORD PTR [edx+ecx*2]
	push	eax
	call	?RGB565toRGB8@@YAKG@Z			; RGB565toRGB8
	add	esp, 4
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _dline$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 2072 : 				}

	jmp	SHORT $LN17@ScaleUp8Ov
$LN16@ScaleUp8Ov:

; 2073 : 			}
; 2074 : 			else

	jmp	$LN20@ScaleUp8Ov
$LN19@ScaleUp8Ov:

; 2075 : 			{
; 2076 : 				count=0;

	mov	DWORD PTR _count$[ebp], 0

; 2077 : 				for(j=0;j<dw;j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN14@ScaleUp8Ov
$LN13@ScaleUp8Ov:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN14@ScaleUp8Ov:
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR _dw$[ebp]
	jge	SHORT $LN12@ScaleUp8Ov

; 2078 : 				{
; 2079 : 					palno=(long)(oline[Cols[j+1]] & 0x0f);

	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _Cols$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+4]
	mov	edx, DWORD PTR _oline$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	and	eax, 15					; 0000000fH
	mov	DWORD PTR _palno$[ebp], eax

; 2080 : 					cpyline2[count++] = RGB565toRGB8( Palette[palno][sline[Cols[j+1]]] );

	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _Cols$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+4]
	mov	ecx, DWORD PTR _sline$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, DWORD PTR _palno$[ebp]
	mov	ecx, DWORD PTR _Palette$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	movzx	ecx, WORD PTR [eax+edx*2]
	push	ecx
	call	?RGB565toRGB8@@YAKG@Z			; RGB565toRGB8
	add	esp, 4
	mov	edx, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _cpyline2$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
	mov	edx, DWORD PTR _count$[ebp]
	add	edx, 1
	mov	DWORD PTR _count$[ebp], edx

; 2081 : 				}

	jmp	SHORT $LN13@ScaleUp8Ov
$LN12@ScaleUp8Ov:

; 2082 : 				rval=Rows[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _Rows$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _rval$[ebp], edx

; 2083 : 				__asm
; 2084 : 				{
; 2085 : 					mov ECX,count

	mov	ecx, DWORD PTR _count$[ebp]

; 2086 : 					mov ESI,cpyline2

	mov	esi, DWORD PTR _cpyline2$[ebp]

; 2087 : 					mov EDI,dline

	mov	edi, DWORD PTR _dline$[ebp]

; 2088 : 					rep movsd

	rep	 movsd
$LN20@ScaleUp8Ov:

; 2089 : 				};
; 2090 : 				
; 2091 : 			}
; 2092 : 			dline += surface->width*2;

	mov	eax, DWORD PTR _surface$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	shl	ecx, 1
	mov	edx, DWORD PTR _dline$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _dline$[ebp], eax

; 2093 : 		}
; 2094 : 		else

	jmp	$LN11@ScaleUp8Ov
$LN22@ScaleUp8Ov:

; 2095 : 		{//16bits
; 2096 : 		if(Rows[i] == rval)

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _Rows$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	cmp	eax, DWORD PTR _rval$[ebp]
	jne	SHORT $LN10@ScaleUp8Ov

; 2099 : 			{
; 2100 : 				mov ECX,count

	mov	ecx, DWORD PTR _count$[ebp]

; 2101 : 				mov ESI,cpyline

	mov	esi, DWORD PTR _cpyline$[ebp]

; 2102 : 				mov EDI,dline

	mov	edi, DWORD PTR _dline$[ebp]

; 2103 : 				rep movsw

	rep	 movsw

; 2097 : 		{
; 2098 : 			__asm

	jmp	$LN9@ScaleUp8Ov
$LN10@ScaleUp8Ov:

; 2104 : 			};
; 2105 : //			memcpy(&dline[first],cpyline,count*sizeof(WORD));
; 2106 : 		}
; 2107 : 		else if(Rows[i] != Rows[i+1])

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _Rows$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _Rows$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	cmp	ecx, DWORD PTR [esi+eax*4+4]
	je	SHORT $LN8@ScaleUp8Ov

; 2108 : 		{
; 2109 : 			for(j=0;j<dw;j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@ScaleUp8Ov
$LN6@ScaleUp8Ov:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN7@ScaleUp8Ov:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _dw$[ebp]
	jge	SHORT $LN5@ScaleUp8Ov

; 2110 : 			{
; 2111 : 				palno=(long)(oline[Cols[j]] & 0x0f);

	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _Cols$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _oline$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	and	edx, 15					; 0000000fH
	mov	DWORD PTR _palno$[ebp], edx

; 2112 : 				dline[j]=Palette[palno][sline[Cols[j]]];

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _Cols$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _sline$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	mov	edx, DWORD PTR _palno$[ebp]
	mov	eax, DWORD PTR _Palette$[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _dline$[ebp]
	mov	cx, WORD PTR [edx+ecx*2]
	mov	WORD PTR [esi+eax*2], cx

; 2113 : 			}

	jmp	SHORT $LN6@ScaleUp8Ov
$LN5@ScaleUp8Ov:

; 2114 : 		}
; 2115 : 		else

	jmp	$LN9@ScaleUp8Ov
$LN8@ScaleUp8Ov:

; 2116 : 		{
; 2117 : 			count=0;

	mov	DWORD PTR _count$[ebp], 0

; 2118 : 			for(j=0;j<dw;j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN3@ScaleUp8Ov
$LN2@ScaleUp8Ov:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN3@ScaleUp8Ov:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _dw$[ebp]
	jge	SHORT $LN1@ScaleUp8Ov

; 2119 : 			{
; 2120 : 				palno=(long)(oline[Cols[j+1]] & 0x0f);

	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _Cols$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+4]
	mov	ecx, DWORD PTR _oline$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	and	edx, 15					; 0000000fH
	mov	DWORD PTR _palno$[ebp], edx

; 2121 : 				cpyline[count++]=Palette[palno][sline[Cols[j+1]]];

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _Cols$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	mov	eax, DWORD PTR _sline$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	mov	edx, DWORD PTR _palno$[ebp]
	mov	eax, DWORD PTR _Palette$[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR _count$[ebp]
	mov	esi, DWORD PTR _cpyline$[ebp]
	mov	cx, WORD PTR [edx+ecx*2]
	mov	WORD PTR [esi+eax*2], cx
	mov	edx, DWORD PTR _count$[ebp]
	add	edx, 1
	mov	DWORD PTR _count$[ebp], edx

; 2122 : 			}

	jmp	SHORT $LN2@ScaleUp8Ov
$LN1@ScaleUp8Ov:

; 2123 : 			rval=Rows[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _Rows$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _rval$[ebp], edx

; 2124 : 			__asm
; 2125 : 			{
; 2126 : 				mov ECX,count

	mov	ecx, DWORD PTR _count$[ebp]

; 2127 : 				mov ESI,cpyline

	mov	esi, DWORD PTR _cpyline$[ebp]

; 2128 : 				mov EDI,dline

	mov	edi, DWORD PTR _dline$[ebp]

; 2129 : 				rep movsw

	rep	 movsw
$LN9@ScaleUp8Ov:

; 2130 : 			};
; 2131 : //			memcpy(&dline[first],cpyline,count*sizeof(WORD));
; 2132 : 		}
; 2133 : 		dline+=surface->width;

	mov	eax, DWORD PTR _surface$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _dline$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _dline$[ebp], eax
$LN11@ScaleUp8Ov:

; 2134 : 	}
; 2135 : 	}

	jmp	$LN24@ScaleUp8Ov
$LN23@ScaleUp8Ov:

; 2136 : 	delete cpyline;

	mov	ecx, DWORD PTR _cpyline$[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 2137 : 	delete cpyline2;

	mov	eax, DWORD PTR _cpyline2$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 2138 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
?ScaleUp8Overlay@IMAGE_RSC@@QAEXPAVSCREEN@@PAJ1JJJJPAEQAPAG@Z ENDP ; IMAGE_RSC::ScaleUp8Overlay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
_overidx$ = -44						; size = 4
_oline$ = -40						; size = 4
_sptr$ = -36						; size = 4
_dptr$ = -32						; size = 4
_palno$ = -28						; size = 4
_sline$ = -24						; size = 4
_this$ = -20						; size = 4
_i$ = -16						; size = 4
_count$ = -12						; size = 4
_j$ = -8						; size = 4
_dline$ = -4						; size = 4
_surface$ = 8						; size = 4
_Rows$ = 12						; size = 4
_Cols$ = 16						; size = 4
_dx$ = 20						; size = 4
_dy$ = 24						; size = 4
_dw$ = 28						; size = 4
_dh$ = 32						; size = 4
_offx$ = 36						; size = 4
_offy$ = 40						; size = 4
_overlay$ = 44						; size = 4
_Palette$ = 48						; size = 4
?ScaleDown8Overlay@IMAGE_RSC@@QAEXPAVSCREEN@@PAJ1JJJJJJPAEQAPAG@Z PROC ; IMAGE_RSC::ScaleDown8Overlay
; _this$ = ecx

; 1890 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1891 : 	unsigned char *sptr,*sline,*oline;
; 1892 : 	WORD *dptr,*dline;
; 1893 : 	int i,j,count;
; 1894 : 	long palno,overidx;
; 1895 : 
; 1896 : 	sptr=(unsigned char *)(Owner->Data_ + Header->imageoffset);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+36]
	add	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _sptr$[ebp], ecx

; 1897 : 
; 1898 : 	dptr=surface->mem;

	mov	edx, DWORD PTR _surface$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _dptr$[ebp], eax

; 1899 : 	dline=&dptr[(dy*surface->width)+dx];

	mov	ecx, DWORD PTR _surface$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	imul	edx, DWORD PTR _dy$[ebp]
	add	edx, DWORD PTR _dx$[ebp]
	mov	eax, DWORD PTR _dptr$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _dline$[ebp], ecx

; 1900 : 	if(surface->bpp == 32 )//XX

	mov	edx, DWORD PTR _surface$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN10@ScaleDown8

; 1901 : 		dline += (dy*surface->width)+dx;//*=2;// w->dw

	mov	ecx, DWORD PTR _surface$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	imul	edx, DWORD PTR _dy$[ebp]
	add	edx, DWORD PTR _dx$[ebp]
	mov	eax, DWORD PTR _dline$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _dline$[ebp], ecx
$LN10@ScaleDown8:

; 1902 : 
; 1903 : 	overidx=(dy*surface->width)+dx;

	mov	edx, DWORD PTR _surface$[ebp]
	movsx	eax, WORD PTR [edx+4]
	imul	eax, DWORD PTR _dy$[ebp]
	add	eax, DWORD PTR _dx$[ebp]
	mov	DWORD PTR _overidx$[ebp], eax

; 1904 : 
; 1905 : 	for(i=offy;i<(offy+dh);i++)

	mov	ecx, DWORD PTR _offy$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN9@ScaleDown8
$LN8@ScaleDown8:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN9@ScaleDown8:
	mov	eax, DWORD PTR _offy$[ebp]
	add	eax, DWORD PTR _dh$[ebp]
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN11@ScaleDown8

; 1906 : 	{
; 1907 : 		sline=&sptr[Rows[i]*Header->w];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, WORD PTR [edx+44]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _Rows$[ebp]
	imul	eax, DWORD PTR [edx+ecx*4]
	add	eax, DWORD PTR _sptr$[ebp]
	mov	DWORD PTR _sline$[ebp], eax

; 1908 : 		oline=&overlay[Rows[i]*Header->w];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, WORD PTR [ecx+44]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _Rows$[ebp]
	imul	edx, DWORD PTR [ecx+eax*4]
	add	edx, DWORD PTR _overlay$[ebp]
	mov	DWORD PTR _oline$[ebp], edx

; 1909 : 		count=0;

	mov	DWORD PTR _count$[ebp], 0

; 1910 : 		for(j=offx;j<(offx+dw);j++)

	mov	edx, DWORD PTR _offx$[ebp]
	mov	DWORD PTR _j$[ebp], edx
	jmp	SHORT $LN6@ScaleDown8
$LN5@ScaleDown8:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN6@ScaleDown8:
	mov	ecx, DWORD PTR _offx$[ebp]
	add	ecx, DWORD PTR _dw$[ebp]
	cmp	DWORD PTR _j$[ebp], ecx
	jge	$LN4@ScaleDown8

; 1911 : 		{
; 1912 : 			palno=(long)(oline[Cols[j]] & 0x0f);

	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _Cols$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _oline$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	and	eax, 15					; 0000000fH
	mov	DWORD PTR _palno$[ebp], eax

; 1913 : 			if(surface->bpp == 32 )

	mov	ecx, DWORD PTR _surface$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	cmp	edx, 32					; 00000020H
	jne	SHORT $LN3@ScaleDown8

; 1914 : 			{//XX
; 1915 : 				((DWORD*)dline)[count++] = RGB565toRGB8( Palette[palno][sline[Cols[j]]] );				

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _Cols$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _sline$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	mov	edx, DWORD PTR _palno$[ebp]
	mov	eax, DWORD PTR _Palette$[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	movzx	eax, WORD PTR [edx+ecx*2]
	push	eax
	call	?RGB565toRGB8@@YAKG@Z			; RGB565toRGB8
	add	esp, 4
	mov	ecx, DWORD PTR _count$[ebp]
	mov	edx, DWORD PTR _dline$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax

; 1916 : 			}
; 1917 : 			else

	jmp	SHORT $LN2@ScaleDown8
$LN3@ScaleDown8:

; 1918 : 			dline[count++]=Palette[palno][sline[Cols[j]]];

	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _Cols$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _sline$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, DWORD PTR _palno$[ebp]
	mov	ecx, DWORD PTR _Palette$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _count$[ebp]
	mov	esi, DWORD PTR _dline$[ebp]
	mov	dx, WORD PTR [eax+edx*2]
	mov	WORD PTR [esi+ecx*2], dx
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
$LN2@ScaleDown8:

; 1919 : 		}

	jmp	$LN5@ScaleDown8
$LN4@ScaleDown8:

; 1920 : 		dline+=surface->width;

	mov	ecx, DWORD PTR _surface$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	mov	eax, DWORD PTR _dline$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _dline$[ebp], ecx

; 1921 : 		if(surface->bpp == 32) //XX

	mov	edx, DWORD PTR _surface$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN1@ScaleDown8

; 1922 : 			dline+=surface->width;//w -> dw

	mov	ecx, DWORD PTR _surface$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	mov	eax, DWORD PTR _dline$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _dline$[ebp], ecx
$LN1@ScaleDown8:

; 1923 : 	}

	jmp	$LN8@ScaleDown8
$LN11@ScaleDown8:

; 1924 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	44					; 0000002cH
?ScaleDown8Overlay@IMAGE_RSC@@QAEXPAVSCREEN@@PAJ1JJJJJJPAEQAPAG@Z ENDP ; IMAGE_RSC::ScaleDown8Overlay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
$T1 = -64						; size = 4
$T2 = -60						; size = 4
_sptr$ = -56						; size = 4
_dptr$ = -52						; size = 4
$T3 = -48						; size = 4
$T4 = -44						; size = 4
_cpyline2$ = -40					; size = 4
_cpyline$ = -36						; size = 4
_rval$ = -32						; size = 4
_Palette$ = -28						; size = 4
_sline$ = -24						; size = 4
_this$ = -20						; size = 4
_count$ = -16						; size = 4
_dline$ = -12						; size = 4
_i$ = -8						; size = 4
_j$ = -4						; size = 4
_surface$ = 8						; size = 4
_Rows$ = 12						; size = 4
_Cols$ = 16						; size = 4
_dx$ = 20						; size = 4
_dy$ = 24						; size = 4
_dw$ = 28						; size = 4
_dh$ = 32						; size = 4
?ScaleUp8@IMAGE_RSC@@QAEXPAVSCREEN@@PAJ1JJJJ@Z PROC	; IMAGE_RSC::ScaleUp8
; _this$ = ecx

; 1930 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1931 : 	unsigned char *sptr,*sline;
; 1932 : 	WORD *dptr,*dline;
; 1933 : 	WORD *Palette;
; 1934 : 	WORD *cpyline;
; 1935 : 	long i,j,rval,count;
; 1936 : 	DWORD* cpyline2;
; 1937 : 
; 1938 : 	sptr=(unsigned char *)(Owner->Data_ + Header->imageoffset);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+36]
	add	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _sptr$[ebp], ecx

; 1939 : 	Palette=(WORD*)(Owner->Data_ + Header->paletteoffset);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax+36]
	add	eax, DWORD PTR [edx+56]
	mov	DWORD PTR _Palette$[ebp], eax

; 1940 : 
; 1941 : 	dptr=surface->mem;

	mov	ecx, DWORD PTR _surface$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _dptr$[ebp], edx

; 1942 : 	cpyline=new WORD[dw];

	xor	ecx, ecx
	mov	eax, DWORD PTR _dw$[ebp]
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR _cpyline$[ebp], eax

; 1943 : 	cpyline2 = new DWORD[dw];//XX

	xor	ecx, ecx
	mov	eax, DWORD PTR _dw$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR _cpyline2$[ebp], eax

; 1944 : 
; 1945 : 	rval=-1;

	mov	DWORD PTR _rval$[ebp], -1

; 1946 : 	dline=&dptr[(dy*surface->width)+dx];

	mov	ecx, DWORD PTR _surface$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	imul	edx, DWORD PTR _dy$[ebp]
	add	edx, DWORD PTR _dx$[ebp]
	mov	eax, DWORD PTR _dptr$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _dline$[ebp], ecx

; 1947 : 	if( surface->bpp == 32 )//XX

	mov	edx, DWORD PTR _surface$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN26@ScaleUp8

; 1948 : 		dline += (dy*surface->width) + dx;//*2;//w->dw offset

	mov	ecx, DWORD PTR _surface$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	imul	edx, DWORD PTR _dy$[ebp]
	add	edx, DWORD PTR _dx$[ebp]
	mov	eax, DWORD PTR _dline$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _dline$[ebp], ecx
$LN26@ScaleUp8:

; 1949 : 
; 1950 : 	for(i=0;i<dh;i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN25@ScaleUp8
$LN24@ScaleUp8:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN25@ScaleUp8:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _dh$[ebp]
	jge	$LN23@ScaleUp8

; 1951 : 	{
; 1952 : 		sline=&sptr[Rows[i]*Header->w];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, WORD PTR [edx+44]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _Rows$[ebp]
	imul	eax, DWORD PTR [edx+ecx*4]
	add	eax, DWORD PTR _sptr$[ebp]
	mov	DWORD PTR _sline$[ebp], eax

; 1953 : 
; 1954 : 		if( surface->bpp == 32 )//XX

	mov	eax, DWORD PTR _surface$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 32					; 00000020H
	jne	$LN22@ScaleUp8

; 1955 : 		{
; 1956 : 			if(Rows[i] == rval)

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _Rows$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	cmp	ecx, DWORD PTR _rval$[ebp]
	jne	SHORT $LN21@ScaleUp8

; 1959 : 				{
; 1960 : 					mov ECX,count

	mov	ecx, DWORD PTR _count$[ebp]

; 1961 : 					mov ESI,cpyline2

	mov	esi, DWORD PTR _cpyline2$[ebp]

; 1962 : 					mov EDI,dline

	mov	edi, DWORD PTR _dline$[ebp]

; 1963 : 					rep movsd

	rep	 movsd

; 1957 : 			{
; 1958 : 				__asm

	jmp	$LN20@ScaleUp8
$LN21@ScaleUp8:

; 1964 : 				};				
; 1965 : 			}
; 1966 : 			else if(Rows[i] != Rows[i+1])

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _Rows$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _Rows$[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	cmp	edx, DWORD PTR [esi+ecx*4+4]
	je	SHORT $LN19@ScaleUp8

; 1967 : 			{
; 1968 : 				for(j=0;j<dw;j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN18@ScaleUp8
$LN17@ScaleUp8:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN18@ScaleUp8:
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR _dw$[ebp]
	jge	SHORT $LN16@ScaleUp8

; 1969 : 					((DWORD*)dline)[j] = RGB565toRGB8( Palette[sline[Cols[j]]] );

	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _Cols$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _sline$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, DWORD PTR _Palette$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	?RGB565toRGB8@@YAKG@Z			; RGB565toRGB8
	add	esp, 4
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _dline$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	jmp	SHORT $LN17@ScaleUp8
$LN16@ScaleUp8:

; 1970 : 			}
; 1971 : 			else

	jmp	SHORT $LN20@ScaleUp8
$LN19@ScaleUp8:

; 1972 : 			{
; 1973 : 				count=0;

	mov	DWORD PTR _count$[ebp], 0

; 1974 : 				for(j=0;j<dw;j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN14@ScaleUp8
$LN13@ScaleUp8:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN14@ScaleUp8:
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR _dw$[ebp]
	jge	SHORT $LN12@ScaleUp8

; 1975 : 					cpyline2[count++] = RGB565toRGB8( Palette[sline[Cols[j+1]]] );

	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _Cols$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+4]
	mov	edx, DWORD PTR _sline$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, DWORD PTR _Palette$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	?RGB565toRGB8@@YAKG@Z			; RGB565toRGB8
	add	esp, 4
	mov	ecx, DWORD PTR _count$[ebp]
	mov	edx, DWORD PTR _cpyline2$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
	jmp	SHORT $LN13@ScaleUp8
$LN12@ScaleUp8:

; 1976 : 
; 1977 : 				rval=Rows[i];

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _Rows$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _rval$[ebp], eax

; 1978 : 				__asm
; 1979 : 				{
; 1980 : 					mov ECX,count

	mov	ecx, DWORD PTR _count$[ebp]

; 1981 : 					mov ESI,cpyline2

	mov	esi, DWORD PTR _cpyline2$[ebp]

; 1982 : 					mov EDI,dline

	mov	edi, DWORD PTR _dline$[ebp]

; 1983 : 					rep movsd

	rep	 movsd
$LN20@ScaleUp8:

; 1984 : 				};				
; 1985 : 			}		
; 1986 : 
; 1987 : 			dline += surface->width*2;

	mov	ecx, DWORD PTR _surface$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	shl	edx, 1
	mov	eax, DWORD PTR _dline$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _dline$[ebp], ecx

; 1988 : 		}
; 1989 : 		else 

	jmp	$LN11@ScaleUp8
$LN22@ScaleUp8:

; 1990 : 		{//16bits		
; 1991 : 		if(Rows[i] == rval)

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _Rows$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	cmp	ecx, DWORD PTR _rval$[ebp]
	jne	SHORT $LN10@ScaleUp8

; 1994 : 			{
; 1995 : 				mov ECX,count

	mov	ecx, DWORD PTR _count$[ebp]

; 1996 : 				mov ESI,cpyline

	mov	esi, DWORD PTR _cpyline$[ebp]

; 1997 : 				mov EDI,dline

	mov	edi, DWORD PTR _dline$[ebp]

; 1998 : 				rep movsw

	rep	 movsw

; 1992 : 		{
; 1993 : 			__asm

	jmp	$LN9@ScaleUp8
$LN10@ScaleUp8:

; 1999 : 			};
; 2000 : //			memcpy(&dline[first],cpyline,count*sizeof(WORD));
; 2001 : 		}
; 2002 : 		else if(Rows[i] != Rows[i+1])

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _Rows$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _Rows$[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	cmp	edx, DWORD PTR [esi+ecx*4+4]
	je	SHORT $LN8@ScaleUp8

; 2003 : 		{
; 2004 : 			for(j=0;j<dw;j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@ScaleUp8
$LN6@ScaleUp8:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN7@ScaleUp8:
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR _dw$[ebp]
	jge	SHORT $LN5@ScaleUp8

; 2005 : 				dline[j]=Palette[sline[Cols[j]]];

	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _Cols$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _sline$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _dline$[ebp]
	mov	esi, DWORD PTR _Palette$[ebp]
	mov	ax, WORD PTR [esi+eax*2]
	mov	WORD PTR [edx+ecx*2], ax
	jmp	SHORT $LN6@ScaleUp8
$LN5@ScaleUp8:

; 2006 : 		}
; 2007 : 		else

	jmp	SHORT $LN9@ScaleUp8
$LN8@ScaleUp8:

; 2008 : 		{
; 2009 : 			count=0;

	mov	DWORD PTR _count$[ebp], 0

; 2010 : 			for(j=0;j<dw;j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN3@ScaleUp8
$LN2@ScaleUp8:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN3@ScaleUp8:
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR _dw$[ebp]
	jge	SHORT $LN1@ScaleUp8

; 2011 : 				cpyline[count++]=Palette[sline[Cols[j+1]]];

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _Cols$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	mov	eax, DWORD PTR _sline$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	mov	edx, DWORD PTR _count$[ebp]
	mov	eax, DWORD PTR _cpyline$[ebp]
	mov	esi, DWORD PTR _Palette$[ebp]
	mov	cx, WORD PTR [esi+ecx*2]
	mov	WORD PTR [eax+edx*2], cx
	mov	edx, DWORD PTR _count$[ebp]
	add	edx, 1
	mov	DWORD PTR _count$[ebp], edx
	jmp	SHORT $LN2@ScaleUp8
$LN1@ScaleUp8:

; 2012 : 			rval=Rows[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _Rows$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _rval$[ebp], edx

; 2013 : 			__asm
; 2014 : 			{
; 2015 : 				mov ECX,count

	mov	ecx, DWORD PTR _count$[ebp]

; 2016 : 				mov ESI,cpyline

	mov	esi, DWORD PTR _cpyline$[ebp]

; 2017 : 				mov EDI,dline

	mov	edi, DWORD PTR _dline$[ebp]

; 2018 : 				rep movsw

	rep	 movsw
$LN9@ScaleUp8:

; 2019 : 			};
; 2020 : //			memcpy(&dline[first],cpyline,count*sizeof(WORD));
; 2021 : 		}
; 2022 : 		dline+=surface->width;

	mov	eax, DWORD PTR _surface$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _dline$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _dline$[ebp], eax
$LN11@ScaleUp8:

; 2023 : 	}
; 2024 : 	}

	jmp	$LN24@ScaleUp8
$LN23@ScaleUp8:

; 2025 : 	delete cpyline;

	mov	ecx, DWORD PTR _cpyline$[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 2026 : 	delete cpyline2;

	mov	eax, DWORD PTR _cpyline2$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 2027 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
?ScaleUp8@IMAGE_RSC@@QAEXPAVSCREEN@@PAJ1JJJJ@Z ENDP	; IMAGE_RSC::ScaleUp8
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
_sptr$ = -36						; size = 4
_dptr$ = -32						; size = 4
_Palette$ = -28						; size = 4
_sline$ = -24						; size = 4
_i$ = -20						; size = 4
_j$ = -16						; size = 4
_count$ = -12						; size = 4
_this$ = -8						; size = 4
_dline$ = -4						; size = 4
_surface$ = 8						; size = 4
_Rows$ = 12						; size = 4
_Cols$ = 16						; size = 4
_dx$ = 20						; size = 4
_dy$ = 24						; size = 4
_dw$ = 28						; size = 4
_dh$ = 32						; size = 4
_offx$ = 36						; size = 4
_offy$ = 40						; size = 4
?ScaleDown8@IMAGE_RSC@@QAEXPAVSCREEN@@PAJ1JJJJJJ@Z PROC	; IMAGE_RSC::ScaleDown8
; _this$ = ecx

; 1850 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1851 : 	unsigned char *sptr,*sline;
; 1852 : 	WORD *dptr,*dline;
; 1853 : 	WORD *Palette;
; 1854 : 	int i,j,count;
; 1855 : 
; 1856 : 	if(!Owner)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN12@ScaleDown8

; 1857 : 		return;

	jmp	$LN13@ScaleDown8
$LN12@ScaleDown8:

; 1858 : 	if(!Owner->Data_)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+36], 0
	jne	SHORT $LN11@ScaleDown8

; 1859 : 		return;

	jmp	$LN13@ScaleDown8
$LN11@ScaleDown8:

; 1860 : 
; 1861 : 	sptr=(unsigned char *)(Owner->Data_ + Header->imageoffset);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+36]
	add	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _sptr$[ebp], ecx

; 1862 : 	Palette=(WORD*)(Owner->Data_ + Header->paletteoffset);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax+36]
	add	eax, DWORD PTR [edx+56]
	mov	DWORD PTR _Palette$[ebp], eax

; 1863 : 
; 1864 : 	dptr=surface->mem;

	mov	ecx, DWORD PTR _surface$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _dptr$[ebp], edx

; 1865 : 
; 1866 : 	dline=&dptr[(dy*surface->width)+dx];

	mov	eax, DWORD PTR _surface$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	imul	ecx, DWORD PTR _dy$[ebp]
	add	ecx, DWORD PTR _dx$[ebp]
	mov	edx, DWORD PTR _dptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _dline$[ebp], eax

; 1867 : 	if(surface->bpp == 32)//XX w->dw

	mov	ecx, DWORD PTR _surface$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	cmp	edx, 32					; 00000020H
	jne	SHORT $LN10@ScaleDown8

; 1868 : 		dline += (dy*surface->width) + dx;//*2;

	mov	eax, DWORD PTR _surface$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	imul	ecx, DWORD PTR _dy$[ebp]
	add	ecx, DWORD PTR _dx$[ebp]
	mov	edx, DWORD PTR _dline$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _dline$[ebp], eax
$LN10@ScaleDown8:

; 1869 : 
; 1870 : 	for(i=offy;i<(offy+dh);i++)

	mov	ecx, DWORD PTR _offy$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN9@ScaleDown8
$LN8@ScaleDown8:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN9@ScaleDown8:
	mov	eax, DWORD PTR _offy$[ebp]
	add	eax, DWORD PTR _dh$[ebp]
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN13@ScaleDown8

; 1871 : 	{
; 1872 : 		sline=&sptr[Rows[i]*Header->w];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, WORD PTR [edx+44]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _Rows$[ebp]
	imul	eax, DWORD PTR [edx+ecx*4]
	add	eax, DWORD PTR _sptr$[ebp]
	mov	DWORD PTR _sline$[ebp], eax

; 1873 : 		count=0;

	mov	DWORD PTR _count$[ebp], 0

; 1874 : 		for(j=offx;j<(offx+dw);j++)

	mov	eax, DWORD PTR _offx$[ebp]
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $LN6@ScaleDown8
$LN5@ScaleDown8:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN6@ScaleDown8:
	mov	edx, DWORD PTR _offx$[ebp]
	add	edx, DWORD PTR _dw$[ebp]
	cmp	DWORD PTR _j$[ebp], edx
	jge	SHORT $LN4@ScaleDown8

; 1875 : 		{
; 1876 : 			if(surface->bpp == 32 )//XX			

	mov	eax, DWORD PTR _surface$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 32					; 00000020H
	jne	SHORT $LN3@ScaleDown8

; 1877 : 				((DWORD*)dline)[count++] = RGB565toRGB8( Palette[ sline[Cols[j]] ] );			

	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _Cols$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _sline$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, DWORD PTR _Palette$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	?RGB565toRGB8@@YAKG@Z			; RGB565toRGB8
	add	esp, 4
	mov	ecx, DWORD PTR _count$[ebp]
	mov	edx, DWORD PTR _dline$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax

; 1878 : 			else

	jmp	SHORT $LN2@ScaleDown8
$LN3@ScaleDown8:

; 1879 : 			dline[count++]=Palette[sline[Cols[j]]];

	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _Cols$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _sline$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _dline$[ebp]
	mov	esi, DWORD PTR _Palette$[ebp]
	mov	dx, WORD PTR [esi+edx*2]
	mov	WORD PTR [ecx+eax*2], dx
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
$LN2@ScaleDown8:

; 1880 : 		}

	jmp	SHORT $LN5@ScaleDown8
$LN4@ScaleDown8:

; 1881 : 		dline+=surface->width;

	mov	ecx, DWORD PTR _surface$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	mov	eax, DWORD PTR _dline$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _dline$[ebp], ecx

; 1882 : 		if(surface->bpp == 32)//XX w->dw

	mov	edx, DWORD PTR _surface$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN1@ScaleDown8

; 1883 : 		dline+=surface->width;

	mov	ecx, DWORD PTR _surface$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	mov	eax, DWORD PTR _dline$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _dline$[ebp], ecx
$LN1@ScaleDown8:

; 1884 : 
; 1885 : 	}

	jmp	$LN8@ScaleDown8
$LN13@ScaleDown8:

; 1886 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
?ScaleDown8@IMAGE_RSC@@QAEXPAVSCREEN@@PAJ1JJJJJJ@Z ENDP	; IMAGE_RSC::ScaleDown8
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
_doff$ = -24						; size = 4
_soff$ = -20						; size = 4
_ssize$ = -16						; size = 4
_this$ = -12						; size = 4
tv314 = -8						; size = 1
tv293 = -7						; size = 1
tv268 = -6						; size = 1
tv247 = -5						; size = 1
tv187 = -4						; size = 1
tv169 = -3						; size = 1
tv147 = -2						; size = 1
tv129 = -1						; size = 1
_surface$ = 8						; size = 4
_sx$ = 12						; size = 4
_sy$ = 16						; size = 4
_sw$ = 20						; size = 4
_sh$ = 24						; size = 4
_dx$ = 28						; size = 4
_dy$ = 32						; size = 4
_front$ = 36						; size = 4
_back$ = 40						; size = 4
?Blend@IMAGE_RSC@@QAEXPAVSCREEN@@JJJJJJJJ@Z PROC	; IMAGE_RSC::Blend
; _this$ = ecx

; 1768 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1769 : 	long soff,doff,ssize;
; 1770 : 
; 1771 : 	if(!Owner->Data_)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+36], 0
	jne	SHORT $LN20@Blend

; 1772 : 		return;

	jmp	$LN21@Blend
$LN20@Blend:

; 1773 : 
; 1774 : 	if(sx >= Header->w || sy >= Header->h)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	cmp	DWORD PTR _sx$[ebp], ecx
	jge	SHORT $LN18@Blend
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+46]
	cmp	DWORD PTR _sy$[ebp], ecx
	jl	SHORT $LN19@Blend
$LN18@Blend:

; 1775 : 		return;

	jmp	$LN21@Blend
$LN19@Blend:

; 1776 : 
; 1777 : 	if(!sx && !sy && sw >= Header->w && sh >= Header->h)

	cmp	DWORD PTR _sx$[ebp], 0
	jne	$LN17@Blend
	cmp	DWORD PTR _sy$[ebp], 0
	jne	$LN17@Blend
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	cmp	DWORD PTR _sw$[ebp], ecx
	jl	$LN17@Blend
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+46]
	cmp	DWORD PTR _sh$[ebp], ecx
	jl	$LN17@Blend

; 1778 : 	{
; 1779 : 		if(Header->flags & _RSC_USECOLORKEY_)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+36]
	and	ecx, 1073741824				; 40000000H
	je	$LN16@Blend

; 1780 : 		{
; 1781 : 			if(Header->flags & _RSC_8_BIT_)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+36]
	and	ecx, 1
	je	SHORT $LN15@Blend

; 1782 : 			{
; 1783 : 				//if(Header->w == surface->width)
; 1784 : 				//	Blend8BitTransparentFast(surface->mem,front,back);
; 1785 : 				//else
; 1786 : 					Blend8BitTransparent(dy*surface->width+dx,surface->width,surface->mem,front,back, surface->bpp == 32);//XX

	mov	edx, DWORD PTR _surface$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN23@Blend
	mov	BYTE PTR tv129[ebp], 1
	jmp	SHORT $LN24@Blend
$LN23@Blend:
	mov	BYTE PTR tv129[ebp], 0
$LN24@Blend:
	movzx	ecx, BYTE PTR tv129[ebp]
	push	ecx
	mov	edx, DWORD PTR _back$[ebp]
	push	edx
	mov	eax, DWORD PTR _front$[ebp]
	push	eax
	mov	ecx, DWORD PTR _surface$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _surface$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _surface$[ebp]
	movsx	eax, WORD PTR [edx+4]
	imul	eax, DWORD PTR _dy$[ebp]
	add	eax, DWORD PTR _dx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Blend8BitTransparent@IMAGE_RSC@@AAEXJJPAGJJ_N@Z ; IMAGE_RSC::Blend8BitTransparent

; 1787 : 			}
; 1788 : 			else

	jmp	SHORT $LN14@Blend
$LN15@Blend:

; 1789 : 			{
; 1790 : 				//if(Header->w == surface->width)
; 1791 : 				//	Blend16BitTransparentFast(surface->mem,front,back);
; 1792 : 				//else
; 1793 : 				//XX
; 1794 : 					Blend16BitTransparent(dy*surface->width+dx,surface->width,surface->mem,front,back, surface->bpp == 32);

	mov	ecx, DWORD PTR _surface$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	cmp	edx, 32					; 00000020H
	jne	SHORT $LN25@Blend
	mov	BYTE PTR tv147[ebp], 1
	jmp	SHORT $LN26@Blend
$LN25@Blend:
	mov	BYTE PTR tv147[ebp], 0
$LN26@Blend:
	movzx	eax, BYTE PTR tv147[ebp]
	push	eax
	mov	ecx, DWORD PTR _back$[ebp]
	push	ecx
	mov	edx, DWORD PTR _front$[ebp]
	push	edx
	mov	eax, DWORD PTR _surface$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _surface$[ebp]
	movsx	eax, WORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _surface$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	imul	edx, DWORD PTR _dy$[ebp]
	add	edx, DWORD PTR _dx$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Blend16BitTransparent@IMAGE_RSC@@AAEXJJPAGJJ_N@Z ; IMAGE_RSC::Blend16BitTransparent
$LN14@Blend:

; 1795 : 			}
; 1796 : 		}
; 1797 : 		else

	jmp	$LN13@Blend
$LN16@Blend:

; 1798 : 		{
; 1799 : 			if(Header->flags & _RSC_8_BIT_)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+36]
	and	edx, 1
	je	SHORT $LN12@Blend

; 1800 : 			{
; 1801 : 				//if(Header->w == surface->width)
; 1802 : 				//	Blend8BitFast(surface->mem,front,back);
; 1803 : 				//else				
; 1804 : 					Blend8Bit(dy*surface->width+dx,surface->width,surface->mem,front,back, surface->bpp == 32);//XX

	mov	eax, DWORD PTR _surface$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 32					; 00000020H
	jne	SHORT $LN27@Blend
	mov	BYTE PTR tv169[ebp], 1
	jmp	SHORT $LN28@Blend
$LN27@Blend:
	mov	BYTE PTR tv169[ebp], 0
$LN28@Blend:
	movzx	edx, BYTE PTR tv169[ebp]
	push	edx
	mov	eax, DWORD PTR _back$[ebp]
	push	eax
	mov	ecx, DWORD PTR _front$[ebp]
	push	ecx
	mov	edx, DWORD PTR _surface$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _surface$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _surface$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	imul	ecx, DWORD PTR _dy$[ebp]
	add	ecx, DWORD PTR _dx$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Blend8Bit@IMAGE_RSC@@AAEXJJPAGJJ_N@Z	; IMAGE_RSC::Blend8Bit

; 1805 : 			}
; 1806 : 			else

	jmp	SHORT $LN13@Blend
$LN12@Blend:

; 1807 : 			{
; 1808 : 				//if(Header->w == surface->width)
; 1809 : 				//	Blend16BitFast(surface->mem,front,back);
; 1810 : 				//else
; 1811 : 				//XX
; 1812 : 					Blend16Bit(dy*surface->width+dx,surface->width,surface->mem,front,back, surface->bpp == 32);//XX

	mov	edx, DWORD PTR _surface$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN29@Blend
	mov	BYTE PTR tv187[ebp], 1
	jmp	SHORT $LN30@Blend
$LN29@Blend:
	mov	BYTE PTR tv187[ebp], 0
$LN30@Blend:
	movzx	ecx, BYTE PTR tv187[ebp]
	push	ecx
	mov	edx, DWORD PTR _back$[ebp]
	push	edx
	mov	eax, DWORD PTR _front$[ebp]
	push	eax
	mov	ecx, DWORD PTR _surface$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _surface$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _surface$[ebp]
	movsx	eax, WORD PTR [edx+4]
	imul	eax, DWORD PTR _dy$[ebp]
	add	eax, DWORD PTR _dx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Blend16Bit@IMAGE_RSC@@AAEXJJPAGJJ_N@Z	; IMAGE_RSC::Blend16Bit
$LN13@Blend:

; 1813 : 			}
; 1814 : 		}
; 1815 : 		return;

	jmp	$LN21@Blend
$LN17@Blend:

; 1816 : 	}
; 1817 : 	if((sx + sw) > Header->w)

	mov	ecx, DWORD PTR _sx$[ebp]
	add	ecx, DWORD PTR _sw$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	edx, WORD PTR [eax+44]
	cmp	ecx, edx
	jle	SHORT $LN10@Blend

; 1818 : 		sw=Header->w-sx;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, WORD PTR [ecx+44]
	sub	edx, DWORD PTR _sx$[ebp]
	mov	DWORD PTR _sw$[ebp], edx
$LN10@Blend:

; 1819 : 
; 1820 : 	if((sy + sh) > Header->h)

	mov	eax, DWORD PTR _sy$[ebp]
	add	eax, DWORD PTR _sh$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	ecx, WORD PTR [edx+46]
	cmp	eax, ecx
	jle	SHORT $LN9@Blend

; 1821 : 		sw=Header->h-sy;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+46]
	sub	ecx, DWORD PTR _sy$[ebp]
	mov	DWORD PTR _sw$[ebp], ecx
$LN9@Blend:

; 1822 : 
; 1823 : 	if(sw < 1 || sh < 1)

	cmp	DWORD PTR _sw$[ebp], 1
	jl	SHORT $LN7@Blend
	cmp	DWORD PTR _sh$[ebp], 1
	jge	SHORT $LN8@Blend
$LN7@Blend:

; 1824 : 		return;

	jmp	$LN21@Blend
$LN8@Blend:

; 1825 : 
; 1826 : 	soff=sy*Header->w + sx;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	imul	ecx, DWORD PTR _sy$[ebp]
	add	ecx, DWORD PTR _sx$[ebp]
	mov	DWORD PTR _soff$[ebp], ecx

; 1827 : 	doff=dy*surface->width + dx;

	mov	edx, DWORD PTR _surface$[ebp]
	movsx	eax, WORD PTR [edx+4]
	imul	eax, DWORD PTR _dy$[ebp]
	add	eax, DWORD PTR _dx$[ebp]
	mov	DWORD PTR _doff$[ebp], eax

; 1828 : 	ssize=Header->w * (sy+sh);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, WORD PTR [edx+44]
	mov	ecx, DWORD PTR _sy$[ebp]
	add	ecx, DWORD PTR _sh$[ebp]
	imul	eax, ecx
	mov	DWORD PTR _ssize$[ebp], eax

; 1829 : 
; 1830 : 	if(Header->flags & _RSC_USECOLORKEY_)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+36]
	and	ecx, 1073741824				; 40000000H
	je	$LN6@Blend

; 1831 : 	{
; 1832 : 		if(Header->flags & _RSC_8_BIT_)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+36]
	and	ecx, 1
	je	SHORT $LN5@Blend

; 1833 : 			Blend8BitTransparentPart(soff,sw,ssize,dy*surface->width+dx,surface->width,surface->mem,front,back,surface->bpp==32);//XX

	mov	edx, DWORD PTR _surface$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN31@Blend
	mov	BYTE PTR tv247[ebp], 1
	jmp	SHORT $LN32@Blend
$LN31@Blend:
	mov	BYTE PTR tv247[ebp], 0
$LN32@Blend:
	movzx	ecx, BYTE PTR tv247[ebp]
	push	ecx
	mov	edx, DWORD PTR _back$[ebp]
	push	edx
	mov	eax, DWORD PTR _front$[ebp]
	push	eax
	mov	ecx, DWORD PTR _surface$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _surface$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _surface$[ebp]
	movsx	eax, WORD PTR [edx+4]
	imul	eax, DWORD PTR _dy$[ebp]
	add	eax, DWORD PTR _dx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ssize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sw$[ebp]
	push	edx
	mov	eax, DWORD PTR _soff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Blend8BitTransparentPart@IMAGE_RSC@@AAEXJJJJJPAGJJ_N@Z ; IMAGE_RSC::Blend8BitTransparentPart

; 1834 : 		else

	jmp	SHORT $LN4@Blend
$LN5@Blend:

; 1835 : 			Blend16BitTransparentPart(soff,sw,ssize,dy*surface->width+dx,surface->width,surface->mem,front,back,surface->bpp==32);//XX

	mov	ecx, DWORD PTR _surface$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	cmp	edx, 32					; 00000020H
	jne	SHORT $LN33@Blend
	mov	BYTE PTR tv268[ebp], 1
	jmp	SHORT $LN34@Blend
$LN33@Blend:
	mov	BYTE PTR tv268[ebp], 0
$LN34@Blend:
	movzx	eax, BYTE PTR tv268[ebp]
	push	eax
	mov	ecx, DWORD PTR _back$[ebp]
	push	ecx
	mov	edx, DWORD PTR _front$[ebp]
	push	edx
	mov	eax, DWORD PTR _surface$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _surface$[ebp]
	movsx	eax, WORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _surface$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	imul	edx, DWORD PTR _dy$[ebp]
	add	edx, DWORD PTR _dx$[ebp]
	push	edx
	mov	eax, DWORD PTR _ssize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sw$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soff$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Blend16BitTransparentPart@IMAGE_RSC@@AAEXJJJJJPAGJJ_N@Z ; IMAGE_RSC::Blend16BitTransparentPart
$LN4@Blend:

; 1836 : 	}
; 1837 : 	else

	jmp	$LN21@Blend
$LN6@Blend:

; 1838 : 	{
; 1839 : 		if(Header->flags & _RSC_8_BIT_)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+36]
	and	edx, 1
	je	SHORT $LN2@Blend

; 1840 : 			Blend8BitPart(soff,sw,ssize,dy*surface->width+dx,surface->width,surface->mem,front,back,surface->bpp==32);//XX

	mov	eax, DWORD PTR _surface$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 32					; 00000020H
	jne	SHORT $LN35@Blend
	mov	BYTE PTR tv293[ebp], 1
	jmp	SHORT $LN36@Blend
$LN35@Blend:
	mov	BYTE PTR tv293[ebp], 0
$LN36@Blend:
	movzx	edx, BYTE PTR tv293[ebp]
	push	edx
	mov	eax, DWORD PTR _back$[ebp]
	push	eax
	mov	ecx, DWORD PTR _front$[ebp]
	push	ecx
	mov	edx, DWORD PTR _surface$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _surface$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _surface$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	imul	ecx, DWORD PTR _dy$[ebp]
	add	ecx, DWORD PTR _dx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ssize$[ebp]
	push	edx
	mov	eax, DWORD PTR _sw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soff$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Blend8BitPart@IMAGE_RSC@@AAEXJJJJJPAGJJ_N@Z ; IMAGE_RSC::Blend8BitPart

; 1841 : 		else

	jmp	SHORT $LN21@Blend
$LN2@Blend:

; 1842 : 			Blend16BitPart(soff,sw,ssize,dy*surface->width+dx,surface->width,surface->mem,front,back,surface->bpp==32);//XX

	mov	edx, DWORD PTR _surface$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN37@Blend
	mov	BYTE PTR tv314[ebp], 1
	jmp	SHORT $LN38@Blend
$LN37@Blend:
	mov	BYTE PTR tv314[ebp], 0
$LN38@Blend:
	movzx	ecx, BYTE PTR tv314[ebp]
	push	ecx
	mov	edx, DWORD PTR _back$[ebp]
	push	edx
	mov	eax, DWORD PTR _front$[ebp]
	push	eax
	mov	ecx, DWORD PTR _surface$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _surface$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _surface$[ebp]
	movsx	eax, WORD PTR [edx+4]
	imul	eax, DWORD PTR _dy$[ebp]
	add	eax, DWORD PTR _dx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ssize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sw$[ebp]
	push	edx
	mov	eax, DWORD PTR _soff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Blend16BitPart@IMAGE_RSC@@AAEXJJJJJPAGJJ_N@Z ; IMAGE_RSC::Blend16BitPart
$LN21@Blend:

; 1843 : 	}
; 1844 : }

	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
?Blend@IMAGE_RSC@@QAEXPAVSCREEN@@JJJJJJJJ@Z ENDP	; IMAGE_RSC::Blend
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
_doff$ = -16						; size = 4
_soff$ = -12						; size = 4
_ssize$ = -8						; size = 4
_this$ = -4						; size = 4
_surface$ = 8						; size = 4
_sx$ = 12						; size = 4
_sy$ = 16						; size = 4
_sw$ = 20						; size = 4
_sh$ = 24						; size = 4
_dx$ = 28						; size = 4
_dy$ = 32						; size = 4
?Blit@IMAGE_RSC@@QAEXPAVSCREEN@@JJJJJJ@Z PROC		; IMAGE_RSC::Blit
; _this$ = ecx

; 1642 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1643 : 	long soff,doff,ssize;
; 1644 : 
; 1645 : 	if(!Owner)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN37@Blit

; 1646 : 		return;

	jmp	$LN38@Blit
$LN37@Blit:

; 1647 : 	if(!Owner->Data_)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+36], 0
	jne	SHORT $LN36@Blit

; 1648 : 		return;

	jmp	$LN38@Blit
$LN36@Blit:

; 1649 : 
; 1650 : 	if(sx >= Header->w || sy >= Header->h)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, WORD PTR [ecx+44]
	cmp	DWORD PTR _sx$[ebp], edx
	jge	SHORT $LN34@Blit
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, WORD PTR [ecx+46]
	cmp	DWORD PTR _sy$[ebp], edx
	jl	SHORT $LN35@Blit
$LN34@Blit:

; 1651 : 		return;

	jmp	$LN38@Blit
$LN35@Blit:

; 1652 : 
; 1653 : 	if(!sx && !sy && sw >= Header->w && sh >= Header->h)

	cmp	DWORD PTR _sx$[ebp], 0
	jne	$LN33@Blit
	cmp	DWORD PTR _sy$[ebp], 0
	jne	$LN33@Blit
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, WORD PTR [ecx+44]
	cmp	DWORD PTR _sw$[ebp], edx
	jl	$LN33@Blit
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, WORD PTR [ecx+46]
	cmp	DWORD PTR _sh$[ebp], edx
	jl	$LN33@Blit

; 1654 : 	{
; 1655 : 		if(Header->flags & _RSC_USECOLORKEY_)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+36]
	and	edx, 1073741824				; 40000000H
	je	$LN32@Blit

; 1656 : 		{
; 1657 : 			if(Header->flags & _RSC_8_BIT_)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+36]
	and	edx, 1
	je	SHORT $LN31@Blit

; 1658 : 			{
; 1659 : 				//XX
; 1660 : 				//if(Header->w == surface->width)
; 1661 : 				//	Blit8BitTransparentFast(surface->mem);
; 1662 : 				//else
; 1663 : 				if( surface->bpp == 32 )//XX

	mov	eax, DWORD PTR _surface$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 32					; 00000020H
	jne	SHORT $LN30@Blit

; 1664 : 					_Blit8BitTransparentTo32(dy*surface->width+dx,surface->width, (DWORD*)surface->mem);

	mov	edx, DWORD PTR _surface$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _surface$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _surface$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	imul	ecx, DWORD PTR _dy$[ebp]
	add	ecx, DWORD PTR _dx$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Blit8BitTransparentTo32@IMAGE_RSC@@AAEXJJPAK@Z ; IMAGE_RSC::_Blit8BitTransparentTo32

; 1665 : 				else

	jmp	SHORT $LN29@Blit
$LN30@Blit:

; 1666 : 					Blit8BitTransparent(dy*surface->width+dx,surface->width,surface->mem);

	mov	edx, DWORD PTR _surface$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _surface$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _surface$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	imul	ecx, DWORD PTR _dy$[ebp]
	add	ecx, DWORD PTR _dx$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Blit8BitTransparent@IMAGE_RSC@@AAEXJJPAG@Z ; IMAGE_RSC::Blit8BitTransparent
$LN29@Blit:

; 1667 : 			}
; 1668 : 			else

	jmp	SHORT $LN28@Blit
$LN31@Blit:

; 1669 : 			{
; 1670 : 			//XX
; 1671 : 				//if(Header->w == surface->width)
; 1672 : 				//	Blit16BitTransparentFast(surface->mem);
; 1673 : 				//else
; 1674 : 				if( surface->bpp == 32 )//XX

	mov	edx, DWORD PTR _surface$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN27@Blit

; 1675 : 					_Blit16BitTransparentTo32(dy*surface->width + dx, surface->width, (DWORD*)surface->mem);

	mov	ecx, DWORD PTR _surface$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _surface$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _surface$[ebp]
	movsx	eax, WORD PTR [edx+4]
	imul	eax, DWORD PTR _dy$[ebp]
	add	eax, DWORD PTR _dx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Blit16BitTransparentTo32@IMAGE_RSC@@AAEXJJPAK@Z ; IMAGE_RSC::_Blit16BitTransparentTo32

; 1676 : 				else

	jmp	SHORT $LN28@Blit
$LN27@Blit:

; 1677 : 					Blit16BitTransparent(dy*surface->width+dx,surface->width,surface->mem);

	mov	ecx, DWORD PTR _surface$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _surface$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _surface$[ebp]
	movsx	eax, WORD PTR [edx+4]
	imul	eax, DWORD PTR _dy$[ebp]
	add	eax, DWORD PTR _dx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Blit16BitTransparent@IMAGE_RSC@@AAEXJJPAG@Z ; IMAGE_RSC::Blit16BitTransparent
$LN28@Blit:

; 1678 : 			}
; 1679 : 		}
; 1680 : 		else

	jmp	$LN25@Blit
$LN32@Blit:

; 1681 : 		{
; 1682 : 			if(Header->flags & _RSC_8_BIT_)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+36]
	and	eax, 1
	je	SHORT $LN24@Blit

; 1683 : 			{
; 1684 : //XX
; 1685 : //				if(0)
; 1686 : ////				if(Header->w == surface->width)
; 1687 : //					Blit8BitFast(surface->mem);
; 1688 : //				else
; 1689 : 				if( surface->bpp == 32 )//XX

	mov	ecx, DWORD PTR _surface$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	cmp	edx, 32					; 00000020H
	jne	SHORT $LN23@Blit

; 1690 : 					_Blit8BitTo32(dy*surface->width+dx,surface->width, (DWORD*)surface->mem);

	mov	eax, DWORD PTR _surface$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _surface$[ebp]
	movsx	eax, WORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _surface$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	imul	edx, DWORD PTR _dy$[ebp]
	add	edx, DWORD PTR _dx$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Blit8BitTo32@IMAGE_RSC@@AAEXJJPAK@Z	; IMAGE_RSC::_Blit8BitTo32

; 1691 : 				else

	jmp	SHORT $LN22@Blit
$LN23@Blit:

; 1692 : 					Blit8Bit(dy*surface->width+dx,surface->width,surface->mem);

	mov	eax, DWORD PTR _surface$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _surface$[ebp]
	movsx	eax, WORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _surface$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	imul	edx, DWORD PTR _dy$[ebp]
	add	edx, DWORD PTR _dx$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Blit8Bit@IMAGE_RSC@@AAEXJJPAG@Z	; IMAGE_RSC::Blit8Bit
$LN22@Blit:

; 1693 : 			}
; 1694 : 			else

	jmp	SHORT $LN25@Blit
$LN24@Blit:

; 1695 : 			{
; 1696 : 			//XX
; 1697 : 				//if(Header->w == surface->width)
; 1698 : 				//	Blit16BitFast(surface->mem);
; 1699 : 				//else
; 1700 : 				{
; 1701 : 					if( surface->bpp == 32 )//XX

	mov	eax, DWORD PTR _surface$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 32					; 00000020H
	jne	SHORT $LN20@Blit

; 1702 : 						_Blit16BitTo32( dy*surface->width + dx, surface->width, (DWORD*)surface->mem );//XX

	mov	edx, DWORD PTR _surface$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _surface$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _surface$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	imul	ecx, DWORD PTR _dy$[ebp]
	add	ecx, DWORD PTR _dx$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Blit16BitTo32@IMAGE_RSC@@AAEXJJPAK@Z	; IMAGE_RSC::_Blit16BitTo32

; 1703 : 				else

	jmp	SHORT $LN25@Blit
$LN20@Blit:

; 1704 : 					Blit16Bit(dy*surface->width+dx,surface->width,surface->mem);

	mov	edx, DWORD PTR _surface$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _surface$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _surface$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	imul	ecx, DWORD PTR _dy$[ebp]
	add	ecx, DWORD PTR _dx$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Blit16Bit@IMAGE_RSC@@AAEXJJPAG@Z	; IMAGE_RSC::Blit16Bit
$LN25@Blit:

; 1705 : 			}
; 1706 : 		}
; 1707 : 		}
; 1708 : 		return;

	jmp	$LN38@Blit
$LN33@Blit:

; 1709 : 	}
; 1710 : 	if((sx + sw) > Header->w)

	mov	edx, DWORD PTR _sx$[ebp]
	add	edx, DWORD PTR _sw$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	eax, WORD PTR [ecx+44]
	cmp	edx, eax
	jle	SHORT $LN18@Blit

; 1711 : 		sw=Header->w-sx;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, WORD PTR [edx+44]
	sub	eax, DWORD PTR _sx$[ebp]
	mov	DWORD PTR _sw$[ebp], eax
$LN18@Blit:

; 1712 : 
; 1713 : 	if((sy + sh) > Header->h)

	mov	ecx, DWORD PTR _sy$[ebp]
	add	ecx, DWORD PTR _sh$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	edx, WORD PTR [eax+46]
	cmp	ecx, edx
	jle	SHORT $LN17@Blit

; 1714 : 		sw=Header->h-sy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, WORD PTR [ecx+46]
	sub	edx, DWORD PTR _sy$[ebp]
	mov	DWORD PTR _sw$[ebp], edx
$LN17@Blit:

; 1715 : 
; 1716 : 	if(sw < 1 || sh < 1)

	cmp	DWORD PTR _sw$[ebp], 1
	jl	SHORT $LN15@Blit
	cmp	DWORD PTR _sh$[ebp], 1
	jge	SHORT $LN16@Blit
$LN15@Blit:

; 1717 : 		return;

	jmp	$LN38@Blit
$LN16@Blit:

; 1718 : 
; 1719 : 	soff=sy*Header->w + sx;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, WORD PTR [ecx+44]
	imul	edx, DWORD PTR _sy$[ebp]
	add	edx, DWORD PTR _sx$[ebp]
	mov	DWORD PTR _soff$[ebp], edx

; 1720 : 	doff=dy*surface->width + dx;

	mov	eax, DWORD PTR _surface$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	imul	ecx, DWORD PTR _dy$[ebp]
	add	ecx, DWORD PTR _dx$[ebp]
	mov	DWORD PTR _doff$[ebp], ecx

; 1721 : 	ssize=Header->w * (sy+sh);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	mov	edx, DWORD PTR _sy$[ebp]
	add	edx, DWORD PTR _sh$[ebp]
	imul	ecx, edx
	mov	DWORD PTR _ssize$[ebp], ecx

; 1722 : 
; 1723 : 	if(Header->flags & _RSC_USECOLORKEY_)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+36]
	and	edx, 1073741824				; 40000000H
	je	$LN14@Blit

; 1724 : 	{
; 1725 : 		if(Header->flags & _RSC_8_BIT_)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+36]
	and	edx, 1
	je	SHORT $LN13@Blit

; 1726 : 		{
; 1727 : 			if(  surface->bpp == 32 ) //XX

	mov	eax, DWORD PTR _surface$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 32					; 00000020H
	jne	SHORT $LN12@Blit

; 1728 : 				_Blit8BitTransparentPartTo32(soff,sw,ssize,dy*surface->width+dx,surface->width, (DWORD*)surface->mem);

	mov	edx, DWORD PTR _surface$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _surface$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _surface$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	imul	ecx, DWORD PTR _dy$[ebp]
	add	ecx, DWORD PTR _dx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ssize$[ebp]
	push	edx
	mov	eax, DWORD PTR _sw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soff$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Blit8BitTransparentPartTo32@IMAGE_RSC@@AAEXJJJJJPAK@Z ; IMAGE_RSC::_Blit8BitTransparentPartTo32

; 1729 : 			else

	jmp	SHORT $LN11@Blit
$LN12@Blit:

; 1730 : 			Blit8BitTransparentPart(soff,sw,ssize,dy*surface->width+dx,surface->width,surface->mem);

	mov	edx, DWORD PTR _surface$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _surface$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _surface$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	imul	ecx, DWORD PTR _dy$[ebp]
	add	ecx, DWORD PTR _dx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ssize$[ebp]
	push	edx
	mov	eax, DWORD PTR _sw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soff$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Blit8BitTransparentPart@IMAGE_RSC@@AAEXJJJJJPAG@Z ; IMAGE_RSC::Blit8BitTransparentPart
$LN11@Blit:

; 1731 : 		}
; 1732 : 		else

	jmp	SHORT $LN10@Blit
$LN13@Blit:

; 1733 : 		{
; 1734 : 			if(  surface->bpp == 32 ) //XX

	mov	edx, DWORD PTR _surface$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN9@Blit

; 1735 : 				_Blit16BitTransparentPartTo32(soff,sw,ssize,dy*surface->width+dx,surface->width, (DWORD*) surface->mem);

	mov	ecx, DWORD PTR _surface$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _surface$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _surface$[ebp]
	movsx	eax, WORD PTR [edx+4]
	imul	eax, DWORD PTR _dy$[ebp]
	add	eax, DWORD PTR _dx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ssize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sw$[ebp]
	push	edx
	mov	eax, DWORD PTR _soff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Blit16BitTransparentPartTo32@IMAGE_RSC@@AAEXJJJJJPAK@Z ; IMAGE_RSC::_Blit16BitTransparentPartTo32

; 1736 : 		else

	jmp	SHORT $LN10@Blit
$LN9@Blit:

; 1737 : 			Blit16BitTransparentPart(soff,sw,ssize,dy*surface->width+dx,surface->width,surface->mem);

	mov	ecx, DWORD PTR _surface$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _surface$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _surface$[ebp]
	movsx	eax, WORD PTR [edx+4]
	imul	eax, DWORD PTR _dy$[ebp]
	add	eax, DWORD PTR _dx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ssize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sw$[ebp]
	push	edx
	mov	eax, DWORD PTR _soff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Blit16BitTransparentPart@IMAGE_RSC@@AAEXJJJJJPAG@Z ; IMAGE_RSC::Blit16BitTransparentPart
$LN10@Blit:

; 1738 : 	}
; 1739 : 	}
; 1740 : 	else

	jmp	$LN38@Blit
$LN14@Blit:

; 1741 : 	{
; 1742 : 		if(Header->flags & _RSC_8_BIT_)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+36]
	and	eax, 1
	je	SHORT $LN6@Blit

; 1743 : 		{
; 1744 : 			if( surface->bpp == 32 ) //XX

	mov	ecx, DWORD PTR _surface$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	cmp	edx, 32					; 00000020H
	jne	SHORT $LN5@Blit

; 1745 : 				_Blit8BitPartTo32(soff,sw,ssize,dy*surface->width+dx,surface->width, (DWORD*) surface->mem);

	mov	eax, DWORD PTR _surface$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _surface$[ebp]
	movsx	eax, WORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _surface$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	imul	edx, DWORD PTR _dy$[ebp]
	add	edx, DWORD PTR _dx$[ebp]
	push	edx
	mov	eax, DWORD PTR _ssize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sw$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soff$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Blit8BitPartTo32@IMAGE_RSC@@AAEXJJJJJPAK@Z ; IMAGE_RSC::_Blit8BitPartTo32

; 1746 : 			else

	jmp	SHORT $LN4@Blit
$LN5@Blit:

; 1747 : 			Blit8BitPart(soff,sw,ssize,dy*surface->width+dx,surface->width,surface->mem);

	mov	eax, DWORD PTR _surface$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _surface$[ebp]
	movsx	eax, WORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _surface$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	imul	edx, DWORD PTR _dy$[ebp]
	add	edx, DWORD PTR _dx$[ebp]
	push	edx
	mov	eax, DWORD PTR _ssize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sw$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soff$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Blit8BitPart@IMAGE_RSC@@AAEXJJJJJPAG@Z	; IMAGE_RSC::Blit8BitPart
$LN4@Blit:

; 1748 : 		}
; 1749 : 		else

	jmp	SHORT $LN38@Blit
$LN6@Blit:

; 1750 : 		{
; 1751 : 			if( surface->bpp == 32 ) //XX

	mov	eax, DWORD PTR _surface$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 32					; 00000020H
	jne	SHORT $LN2@Blit

; 1752 : 				_Blit16BitPartTo32(soff,sw,ssize,dy*surface->width+dx,surface->width, (DWORD*)surface->mem );

	mov	edx, DWORD PTR _surface$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _surface$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _surface$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	imul	ecx, DWORD PTR _dy$[ebp]
	add	ecx, DWORD PTR _dx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ssize$[ebp]
	push	edx
	mov	eax, DWORD PTR _sw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soff$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Blit16BitPartTo32@IMAGE_RSC@@AAEXJJJJJPAK@Z ; IMAGE_RSC::_Blit16BitPartTo32

; 1753 : 		else

	jmp	SHORT $LN38@Blit
$LN2@Blit:

; 1754 : 			Blit16BitPart(soff,sw,ssize,dy*surface->width+dx,surface->width,surface->mem);

	mov	edx, DWORD PTR _surface$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _surface$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _surface$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	imul	ecx, DWORD PTR _dy$[ebp]
	add	ecx, DWORD PTR _dx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ssize$[ebp]
	push	edx
	mov	eax, DWORD PTR _sw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soff$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Blit16BitPart@IMAGE_RSC@@AAEXJJJJJPAG@Z ; IMAGE_RSC::Blit16BitPart
$LN38@Blit:

; 1755 : 	}
; 1756 : }
; 1757 : }

	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
?Blit@IMAGE_RSC@@QAEXPAVSCREEN@@JJJJJJ@Z ENDP		; IMAGE_RSC::Blit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPalette@IMAGE_RSC@@QAEPAGXZ PROC			; IMAGE_RSC::GetPalette
; _this$ = ecx

; 1622 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1623 : 	if(!Owner) return(NULL);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN4@GetPalette
	xor	eax, eax
	jmp	SHORT $LN5@GetPalette
$LN4@GetPalette:

; 1624 : 	if(!Owner->Data_)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+36], 0
	jne	SHORT $LN3@GetPalette

; 1625 : 		return(NULL);

	xor	eax, eax
	jmp	SHORT $LN5@GetPalette
$LN3@GetPalette:

; 1626 : 
; 1627 : 	if(Header->Type == _RSC_IS_IMAGE_)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx], 100			; 00000064H
	jne	SHORT $LN2@GetPalette

; 1628 : 		if(Header->flags & _RSC_8_BIT_)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+36]
	and	ecx, 1
	je	SHORT $LN2@GetPalette

; 1629 : 			return((WORD*)(Owner->Data_ + Header->paletteoffset));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax+36]
	add	eax, DWORD PTR [edx+56]
	jmp	SHORT $LN5@GetPalette
$LN2@GetPalette:

; 1630 : 	return(NULL);

	xor	eax, eax
$LN5@GetPalette:

; 1631 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPalette@IMAGE_RSC@@QAEPAGXZ ENDP			; IMAGE_RSC::GetPalette
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetImage@IMAGE_RSC@@QAEPADXZ PROC			; IMAGE_RSC::GetImage
; _this$ = ecx

; 1611 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1612 : 	if(!Owner) return(NULL);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN3@GetImage
	xor	eax, eax
	jmp	SHORT $LN4@GetImage
$LN3@GetImage:

; 1613 : 	if(!Owner->Data_)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+36], 0
	jne	SHORT $LN2@GetImage

; 1614 : 		return(NULL);

	xor	eax, eax
	jmp	SHORT $LN4@GetImage
$LN2@GetImage:

; 1615 : 
; 1616 : 	if(Header->Type == _RSC_IS_IMAGE_)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx], 100			; 00000064H
	jne	SHORT $LN1@GetImage

; 1617 : 		return(Owner->Data_ + Header->imageoffset);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax+36]
	add	eax, DWORD PTR [edx+48]
	jmp	SHORT $LN4@GetImage
$LN1@GetImage:

; 1618 : 	return(NULL);

	xor	eax, eax
$LN4@GetImage:

; 1619 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetImage@IMAGE_RSC@@QAEPADXZ ENDP			; IMAGE_RSC::GetImage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
_sadd$ = -52						; size = 4
tv130 = -48						; size = 4
_srcsize$ = -44						; size = 4
_dadd$ = -40						; size = 4
_operc$ = -36						; size = 4
_i$ = -32						; size = 4
_sptr$ = -28						; size = 4
_this$ = -24						; size = 4
_dptr$ = -20						; size = 4
_b$ = -16						; size = 2
_g$ = -12						; size = 2
_r$ = -8						; size = 2
_dc$1 = -4						; size = 2
_soffset$ = 8						; size = 4
_scopy$ = 12						; size = 4
_ssize$ = 16						; size = 4
_doffset$ = 20						; size = 4
_dwidth$ = 24						; size = 4
_dest$ = 28						; size = 4
_front$ = 32						; size = 4
_back$ = 36						; size = 4
_b32$ = 40						; size = 1
?Blend16BitTransparentPart@IMAGE_RSC@@AAEXJJJJJPAGJJ_N@Z PROC ; IMAGE_RSC::Blend16BitTransparentPart
; _this$ = ecx

; 1531 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1532 : 	WORD *sptr,*srcsize;
; 1533 : 	WORD *dptr;
; 1534 : 	WORD r,g,b;
; 1535 : 	long operc;
; 1536 : 	long i;
; 1537 : 	long sadd,dadd;
; 1538 : 
; 1539 : 	operc=front+back;

	mov	eax, DWORD PTR _front$[ebp]
	add	eax, DWORD PTR _back$[ebp]
	mov	DWORD PTR _operc$[ebp], eax

; 1540 : 
; 1541 : 	sptr   =(WORD *)(Owner->Data_ + Header->imageoffset) + soffset;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx+36]
	add	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR _soffset$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	DWORD PTR _sptr$[ebp], ecx

; 1542 : 	srcsize=(WORD *)(Owner->Data_ + Header->imageoffset) + ssize;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax+36]
	add	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR _ssize$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR _srcsize$[ebp], edx

; 1543 : 	if(!b32)

	movzx	eax, BYTE PTR _b32$[ebp]
	test	eax, eax
	jne	SHORT $LN16@Blend16Bit

; 1544 : 	dptr=dest+doffset;

	mov	ecx, DWORD PTR _doffset$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _dptr$[ebp], eax

; 1545 : 	else

	jmp	SHORT $LN15@Blend16Bit
$LN16@Blend16Bit:

; 1546 : 		dptr=dest + doffset*2;

	mov	ecx, DWORD PTR _doffset$[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR _dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _dptr$[ebp], eax
$LN15@Blend16Bit:

; 1547 : 
; 1548 : 	sadd=Header->w - scopy;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, WORD PTR [edx+44]
	sub	eax, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _sadd$[ebp], eax

; 1549 : 
; 1550 : 	if(!b32)

	movzx	ecx, BYTE PTR _b32$[ebp]
	test	ecx, ecx
	jne	SHORT $LN14@Blend16Bit

; 1551 : 	dadd=dwidth - scopy;

	mov	edx, DWORD PTR _dwidth$[ebp]
	sub	edx, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _dadd$[ebp], edx

; 1552 : 	else

	jmp	SHORT $LN12@Blend16Bit
$LN14@Blend16Bit:

; 1553 : 		dadd = (dwidth - scopy)*2;

	mov	eax, DWORD PTR _dwidth$[ebp]
	sub	eax, DWORD PTR _scopy$[ebp]
	shl	eax, 1
	mov	DWORD PTR _dadd$[ebp], eax
$LN12@Blend16Bit:

; 1554 : 
; 1555 : 
; 1556 : 	while(sptr < srcsize)

	mov	ecx, DWORD PTR _sptr$[ebp]
	cmp	ecx, DWORD PTR _srcsize$[ebp]
	jae	$LN17@Blend16Bit

; 1557 : 	{
; 1558 : 		i=scopy;

	mov	edx, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _i$[ebp], edx
$LN10@Blend16Bit:

; 1559 : 		while(i--)

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv130[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	cmp	DWORD PTR tv130[ebp], 0
	je	$LN9@Blend16Bit

; 1560 : 		{
; 1561 : 			if(*sptr ^ Owner->ColorKey_)

	mov	edx, DWORD PTR _sptr$[ebp]
	movzx	eax, WORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movzx	ecx, WORD PTR [edx+40]
	xor	eax, ecx
	je	$LN8@Blend16Bit

; 1562 : 			{
; 1563 : 				WORD dc;  				
; 1564 : 				if(!b32)

	movzx	edx, BYTE PTR _b32$[ebp]
	test	edx, edx
	jne	SHORT $LN7@Blend16Bit

; 1565 : 					dc = *dptr;

	mov	eax, DWORD PTR _dptr$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _dc$1[ebp], cx

; 1566 : 				else

	jmp	SHORT $LN6@Blend16Bit
$LN7@Blend16Bit:

; 1567 : 					dc = RGB8toRGB565( *(reinterpret_cast<DWORD*>(dptr)) );

	mov	edx, DWORD PTR _dptr$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?RGB8toRGB565@@YAGK@Z			; RGB8toRGB565
	add	esp, 4
	mov	WORD PTR _dc$1[ebp], ax
$LN6@Blend16Bit:

; 1568 : 
; 1569 : 				r=rShift[UIColorTable[operc][
; 1570 : 					UIColorTable[front][(*sptr >> Owner->reds) & 0x1f]+
; 1571 : 					UIColorTable[back][(dc >> Owner->reds) & 0x1f]
; 1572 : 					]];

	mov	edx, DWORD PTR _operc$[ebp]
	shl	edx, 9
	mov	eax, DWORD PTR _front$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	esi, WORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+16]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	eax, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	movzx	edi, WORD PTR _dc$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+16]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	eax, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+eax*2]
	mov	ax, WORD PTR ?rShift@@3PAGA[edx*2]
	mov	WORD PTR _r$[ebp], ax

; 1573 : 
; 1574 : 				g=gShift[UIColorTable[operc][
; 1575 : 					UIColorTable[front][(*sptr >> Owner->greens) & 0x1f]+
; 1576 : 					UIColorTable[back][(dc >> Owner->greens) & 0x1f]
; 1577 : 					]];

	mov	edx, DWORD PTR _operc$[ebp]
	shl	edx, 9
	mov	eax, DWORD PTR _front$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	esi, WORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+18]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	eax, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	movzx	edi, WORD PTR _dc$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+18]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	eax, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+eax*2]
	mov	ax, WORD PTR ?gShift@@3PAGA[edx*2]
	mov	WORD PTR _g$[ebp], ax

; 1578 : 
; 1579 : 				b=bShift[UIColorTable[operc][
; 1580 : 					UIColorTable[front][(*sptr >> Owner->blues) & 0x1f]+
; 1581 : 					UIColorTable[back][(dc >> Owner->blues) & 0x1f]
; 1582 : 					]];

	mov	edx, DWORD PTR _operc$[ebp]
	shl	edx, 9
	mov	eax, DWORD PTR _front$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	esi, WORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+20]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	eax, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	movzx	edi, WORD PTR _dc$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+20]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	eax, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+eax*2]
	mov	ax, WORD PTR ?bShift@@3PAGA[edx*2]
	mov	WORD PTR _b$[ebp], ax

; 1583 : 
; 1584 : 				sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _sptr$[ebp], ecx

; 1585 : 
; 1586 : 
; 1587 : 				//XX *dptr++=static_cast<WORD>(r|g|b);
; 1588 : 				if(!b32)

	movzx	edx, BYTE PTR _b32$[ebp]
	test	edx, edx
	jne	SHORT $LN5@Blend16Bit

; 1589 : 				*dptr++=static_cast<WORD>(r|g|b);

	movzx	eax, WORD PTR _r$[ebp]
	movzx	ecx, WORD PTR _g$[ebp]
	or	eax, ecx
	movzx	edx, WORD PTR _b$[ebp]
	or	eax, edx
	mov	ecx, DWORD PTR _dptr$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _dptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _dptr$[ebp], edx

; 1590 : 				else

	jmp	SHORT $LN4@Blend16Bit
$LN5@Blend16Bit:

; 1591 : 				{
; 1592 : 					*(reinterpret_cast<DWORD*>(dptr)) = RGB565toRGB8( static_cast<WORD>(r|g|b) );

	movzx	eax, WORD PTR _r$[ebp]
	movzx	ecx, WORD PTR _g$[ebp]
	or	eax, ecx
	movzx	edx, WORD PTR _b$[ebp]
	or	eax, edx
	push	eax
	call	?RGB565toRGB8@@YAKG@Z			; RGB565toRGB8
	add	esp, 4
	mov	ecx, DWORD PTR _dptr$[ebp]
	mov	DWORD PTR [ecx], eax

; 1593 : 					*dptr += 2;

	mov	edx, DWORD PTR _dptr$[ebp]
	movzx	eax, WORD PTR [edx]
	add	eax, 2
	mov	ecx, DWORD PTR _dptr$[ebp]
	mov	WORD PTR [ecx], ax
$LN4@Blend16Bit:

; 1594 : 				}
; 1595 : 			}
; 1596 : 			else

	jmp	SHORT $LN3@Blend16Bit
$LN8@Blend16Bit:

; 1597 : 			{
; 1598 : 				sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _sptr$[ebp], edx

; 1599 : 				if(!b32)

	movzx	eax, BYTE PTR _b32$[ebp]
	test	eax, eax
	jne	SHORT $LN2@Blend16Bit

; 1600 : 				dptr++;

	mov	ecx, DWORD PTR _dptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _dptr$[ebp], ecx

; 1601 : 				else

	jmp	SHORT $LN3@Blend16Bit
$LN2@Blend16Bit:

; 1602 : 					dptr += 2;

	mov	edx, DWORD PTR _dptr$[ebp]
	add	edx, 4
	mov	DWORD PTR _dptr$[ebp], edx
$LN3@Blend16Bit:

; 1603 : 			}
; 1604 : 		}

	jmp	$LN10@Blend16Bit
$LN9@Blend16Bit:

; 1605 : 		sptr+=sadd;

	mov	eax, DWORD PTR _sadd$[ebp]
	mov	ecx, DWORD PTR _sptr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _sptr$[ebp], edx

; 1606 : 		dptr+=dadd;

	mov	eax, DWORD PTR _dadd$[ebp]
	mov	ecx, DWORD PTR _dptr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _dptr$[ebp], edx

; 1607 : 	}

	jmp	$LN12@Blend16Bit
$LN17@Blend16Bit:

; 1608 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
?Blend16BitTransparentPart@IMAGE_RSC@@AAEXJJJJJPAGJJ_N@Z ENDP ; IMAGE_RSC::Blend16BitTransparentPart
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
_sadd$ = -52						; size = 4
tv130 = -48						; size = 4
_srcsize$ = -44						; size = 4
_dadd$ = -40						; size = 4
_operc$ = -36						; size = 4
_i$ = -32						; size = 4
_sptr$ = -28						; size = 4
_dptr$ = -24						; size = 4
_this$ = -20						; size = 4
_b$ = -16						; size = 2
_g$ = -12						; size = 2
_r$ = -8						; size = 2
_dc$1 = -4						; size = 2
_soffset$ = 8						; size = 4
_scopy$ = 12						; size = 4
_ssize$ = 16						; size = 4
_doffset$ = 20						; size = 4
_dwidth$ = 24						; size = 4
_dest$ = 28						; size = 4
_front$ = 32						; size = 4
_back$ = 36						; size = 4
_b32$ = 40						; size = 1
?Blend16BitPart@IMAGE_RSC@@AAEXJJJJJPAGJJ_N@Z PROC	; IMAGE_RSC::Blend16BitPart
; _this$ = ecx

; 1463 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1464 : 	WORD *sptr,*srcsize;
; 1465 : 	WORD *dptr;
; 1466 : 	WORD r,g,b;
; 1467 : 	long operc;
; 1468 : 	long i;
; 1469 : 	long sadd,dadd;
; 1470 : 
; 1471 : 	operc=front+back;

	mov	eax, DWORD PTR _front$[ebp]
	add	eax, DWORD PTR _back$[ebp]
	mov	DWORD PTR _operc$[ebp], eax

; 1472 : 
; 1473 : 	sptr   =(WORD *)(Owner->Data_ + Header->imageoffset) + soffset;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx+36]
	add	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR _soffset$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	DWORD PTR _sptr$[ebp], ecx

; 1474 : 	srcsize=(WORD *)(Owner->Data_ + Header->imageoffset) + ssize;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax+36]
	add	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR _ssize$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR _srcsize$[ebp], edx

; 1475 : 	if(!b32)

	movzx	eax, BYTE PTR _b32$[ebp]
	test	eax, eax
	jne	SHORT $LN12@Blend16Bit

; 1476 : 	dptr=dest+doffset;

	mov	ecx, DWORD PTR _doffset$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _dptr$[ebp], eax

; 1477 : 	else

	jmp	SHORT $LN11@Blend16Bit
$LN12@Blend16Bit:

; 1478 : 		dptr = dest + doffset*2;

	mov	ecx, DWORD PTR _doffset$[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR _dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _dptr$[ebp], eax
$LN11@Blend16Bit:

; 1479 : 
; 1480 : 	sadd=Header->w - scopy;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, WORD PTR [edx+44]
	sub	eax, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _sadd$[ebp], eax

; 1481 : 
; 1482 : 	if( !b32 )

	movzx	ecx, BYTE PTR _b32$[ebp]
	test	ecx, ecx
	jne	SHORT $LN10@Blend16Bit

; 1483 : 	dadd=dwidth - scopy;

	mov	edx, DWORD PTR _dwidth$[ebp]
	sub	edx, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _dadd$[ebp], edx

; 1484 : 	else

	jmp	SHORT $LN8@Blend16Bit
$LN10@Blend16Bit:

; 1485 : 		dadd = (dwidth - scopy)*2;

	mov	eax, DWORD PTR _dwidth$[ebp]
	sub	eax, DWORD PTR _scopy$[ebp]
	shl	eax, 1
	mov	DWORD PTR _dadd$[ebp], eax
$LN8@Blend16Bit:

; 1486 : 
; 1487 : 	while(sptr < srcsize)

	mov	ecx, DWORD PTR _sptr$[ebp]
	cmp	ecx, DWORD PTR _srcsize$[ebp]
	jae	$LN13@Blend16Bit

; 1488 : 	{
; 1489 : 		i=scopy;

	mov	edx, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _i$[ebp], edx
$LN6@Blend16Bit:

; 1490 : 		while(i--)

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv130[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	cmp	DWORD PTR tv130[ebp], 0
	je	$LN5@Blend16Bit

; 1491 : 		{
; 1492 : 			WORD dc;  				
; 1493 : 			if(!b32)

	movzx	edx, BYTE PTR _b32$[ebp]
	test	edx, edx
	jne	SHORT $LN4@Blend16Bit

; 1494 : 				dc = *dptr;

	mov	eax, DWORD PTR _dptr$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _dc$1[ebp], cx

; 1495 : 			else

	jmp	SHORT $LN3@Blend16Bit
$LN4@Blend16Bit:

; 1496 : 				dc = RGB8toRGB565( *(reinterpret_cast<DWORD*>(dptr)) );

	mov	edx, DWORD PTR _dptr$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?RGB8toRGB565@@YAGK@Z			; RGB8toRGB565
	add	esp, 4
	mov	WORD PTR _dc$1[ebp], ax
$LN3@Blend16Bit:

; 1497 : 
; 1498 : 			r=rShift[UIColorTable[operc][
; 1499 : 				UIColorTable[front][(*sptr >> Owner->reds) & 0x1f]+
; 1500 : 				UIColorTable[back][(dc >> Owner->reds) & 0x1f]
; 1501 : 				]];

	mov	edx, DWORD PTR _operc$[ebp]
	shl	edx, 9
	mov	eax, DWORD PTR _front$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	esi, WORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+16]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	eax, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	movzx	edi, WORD PTR _dc$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+16]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	eax, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+eax*2]
	mov	ax, WORD PTR ?rShift@@3PAGA[edx*2]
	mov	WORD PTR _r$[ebp], ax

; 1502 : 
; 1503 : 			g=gShift[UIColorTable[operc][
; 1504 : 				UIColorTable[front][(*sptr >> Owner->greens) & 0x1f]+
; 1505 : 				UIColorTable[back][(dc >> Owner->greens) & 0x1f]
; 1506 : 				]];

	mov	edx, DWORD PTR _operc$[ebp]
	shl	edx, 9
	mov	eax, DWORD PTR _front$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	esi, WORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+18]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	eax, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	movzx	edi, WORD PTR _dc$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+18]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	eax, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+eax*2]
	mov	ax, WORD PTR ?gShift@@3PAGA[edx*2]
	mov	WORD PTR _g$[ebp], ax

; 1507 : 
; 1508 : 			b=bShift[UIColorTable[operc][
; 1509 : 				UIColorTable[front][(*sptr >> Owner->blues) & 0x1f]+
; 1510 : 				UIColorTable[back][(dc >> Owner->blues) & 0x1f]
; 1511 : 				]];

	mov	edx, DWORD PTR _operc$[ebp]
	shl	edx, 9
	mov	eax, DWORD PTR _front$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	esi, WORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+20]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	eax, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	movzx	edi, WORD PTR _dc$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+20]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	eax, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+eax*2]
	mov	ax, WORD PTR ?bShift@@3PAGA[edx*2]
	mov	WORD PTR _b$[ebp], ax

; 1512 : 
; 1513 : 			sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _sptr$[ebp], ecx

; 1514 : 
; 1515 : 			if(!b32)

	movzx	edx, BYTE PTR _b32$[ebp]
	test	edx, edx
	jne	SHORT $LN2@Blend16Bit

; 1516 : 			*dptr++=static_cast<WORD>(r|g|b);

	movzx	eax, WORD PTR _r$[ebp]
	movzx	ecx, WORD PTR _g$[ebp]
	or	eax, ecx
	movzx	edx, WORD PTR _b$[ebp]
	or	eax, edx
	mov	ecx, DWORD PTR _dptr$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _dptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _dptr$[ebp], edx

; 1517 : 			else

	jmp	SHORT $LN1@Blend16Bit
$LN2@Blend16Bit:

; 1518 : 			{
; 1519 : 				*(reinterpret_cast<DWORD*>(dptr)) = RGB565toRGB8( static_cast<WORD>(r|g|b) );

	movzx	eax, WORD PTR _r$[ebp]
	movzx	ecx, WORD PTR _g$[ebp]
	or	eax, ecx
	movzx	edx, WORD PTR _b$[ebp]
	or	eax, edx
	push	eax
	call	?RGB565toRGB8@@YAKG@Z			; RGB565toRGB8
	add	esp, 4
	mov	ecx, DWORD PTR _dptr$[ebp]
	mov	DWORD PTR [ecx], eax

; 1520 : 				*dptr += 2;

	mov	edx, DWORD PTR _dptr$[ebp]
	movzx	eax, WORD PTR [edx]
	add	eax, 2
	mov	ecx, DWORD PTR _dptr$[ebp]
	mov	WORD PTR [ecx], ax
$LN1@Blend16Bit:

; 1521 : 			}
; 1522 : 
; 1523 : 		}

	jmp	$LN6@Blend16Bit
$LN5@Blend16Bit:

; 1524 : 		sptr+=sadd;

	mov	edx, DWORD PTR _sadd$[ebp]
	mov	eax, DWORD PTR _sptr$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _sptr$[ebp], ecx

; 1525 : 		dptr += dadd;//dadd corrected in begin depending WORD,DWORD dest mem

	mov	edx, DWORD PTR _dadd$[ebp]
	mov	eax, DWORD PTR _dptr$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _dptr$[ebp], ecx

; 1526 : 	}

	jmp	$LN8@Blend16Bit
$LN13@Blend16Bit:

; 1527 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
?Blend16BitPart@IMAGE_RSC@@AAEXJJJJJPAGJJ_N@Z ENDP	; IMAGE_RSC::Blend16BitPart
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
tv135 = -48						; size = 4
_srcsize$ = -44						; size = 4
_dadd$ = -40						; size = 4
_operc$ = -36						; size = 4
_i$ = -32						; size = 4
_sptr$ = -28						; size = 4
_this$ = -24						; size = 4
_dptr$ = -20						; size = 4
_b$ = -16						; size = 2
_g$ = -12						; size = 2
_r$ = -8						; size = 2
_dc$1 = -4						; size = 2
_doffset$ = 8						; size = 4
_dwidth$ = 12						; size = 4
_dest$ = 16						; size = 4
_front$ = 20						; size = 4
_back$ = 24						; size = 4
_b32$ = 28						; size = 1
?Blend16BitTransparent@IMAGE_RSC@@AAEXJJPAGJJ_N@Z PROC	; IMAGE_RSC::Blend16BitTransparent
; _this$ = ecx

; 1384 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1385 : 	WORD *sptr,*srcsize;
; 1386 : 	WORD *dptr;
; 1387 : 	WORD r,g,b;
; 1388 : 	long operc;
; 1389 : 	long i;
; 1390 : 	long dadd;
; 1391 : 
; 1392 : 	operc=front+back;

	mov	eax, DWORD PTR _front$[ebp]
	add	eax, DWORD PTR _back$[ebp]
	mov	DWORD PTR _operc$[ebp], eax

; 1393 : 
; 1394 : 	sptr   =(WORD *)(Owner->Data_ + Header->imageoffset);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx+36]
	add	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR _sptr$[ebp], edx

; 1395 : 	srcsize=(WORD *)(sptr  + Header->w * Header->h);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, WORD PTR [ecx+44]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	eax, WORD PTR [ecx+46]
	imul	edx, eax
	mov	ecx, DWORD PTR _sptr$[ebp]
	lea	edx, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR _srcsize$[ebp], edx

; 1396 : 
; 1397 : 	if(!b32)

	movzx	eax, BYTE PTR _b32$[ebp]
	test	eax, eax
	jne	SHORT $LN16@Blend16Bit

; 1398 : 	dptr=dest+doffset;

	mov	ecx, DWORD PTR _doffset$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _dptr$[ebp], eax

; 1399 : 	else

	jmp	SHORT $LN15@Blend16Bit
$LN16@Blend16Bit:

; 1400 : 		dptr = dest + doffset*2;

	mov	ecx, DWORD PTR _doffset$[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR _dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _dptr$[ebp], eax
$LN15@Blend16Bit:

; 1401 : 
; 1402 : 	if( !b32 )

	movzx	ecx, BYTE PTR _b32$[ebp]
	test	ecx, ecx
	jne	SHORT $LN14@Blend16Bit

; 1403 : 	dadd=dwidth - Header->w;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	mov	edx, DWORD PTR _dwidth$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _dadd$[ebp], edx

; 1404 : 	else

	jmp	SHORT $LN12@Blend16Bit
$LN14@Blend16Bit:

; 1405 : 		dadd = (dwidth - Header->w)*2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, WORD PTR [ecx+44]
	mov	eax, DWORD PTR _dwidth$[ebp]
	sub	eax, edx
	shl	eax, 1
	mov	DWORD PTR _dadd$[ebp], eax
$LN12@Blend16Bit:

; 1406 : 
; 1407 : 	while(sptr < srcsize)

	mov	ecx, DWORD PTR _sptr$[ebp]
	cmp	ecx, DWORD PTR _srcsize$[ebp]
	jae	$LN17@Blend16Bit

; 1408 : 	{
; 1409 : 		i=Header->w;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	mov	DWORD PTR _i$[ebp], ecx
$LN10@Blend16Bit:

; 1410 : 		while(i--)

	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv135[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	cmp	DWORD PTR tv135[ebp], 0
	je	$LN9@Blend16Bit

; 1411 : 		{
; 1412 : 			if(*sptr ^ Owner->ColorKey_)

	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	eax, WORD PTR [ecx+40]
	xor	edx, eax
	je	$LN8@Blend16Bit

; 1413 : 			{
; 1414 : 				WORD dc;  				
; 1415 : 				if(!b32)

	movzx	ecx, BYTE PTR _b32$[ebp]
	test	ecx, ecx
	jne	SHORT $LN7@Blend16Bit

; 1416 : 					dc = *dptr;

	mov	edx, DWORD PTR _dptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR _dc$1[ebp], ax

; 1417 : 				else

	jmp	SHORT $LN6@Blend16Bit
$LN7@Blend16Bit:

; 1418 : 					dc = RGB8toRGB565( *(reinterpret_cast<DWORD*>(dptr)) );

	mov	ecx, DWORD PTR _dptr$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?RGB8toRGB565@@YAGK@Z			; RGB8toRGB565
	add	esp, 4
	mov	WORD PTR _dc$1[ebp], ax
$LN6@Blend16Bit:

; 1419 : 
; 1420 : 				r=rShift[UIColorTable[operc][
; 1421 : 					UIColorTable[front][(*sptr >> Owner->reds) & 0x1f]+
; 1422 : 					UIColorTable[back][(dc >> Owner->reds) & 0x1f]
; 1423 : 					]];

	mov	eax, DWORD PTR _operc$[ebp]
	shl	eax, 9
	mov	edx, DWORD PTR _front$[ebp]
	shl	edx, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	esi, WORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+16]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	movzx	edi, WORD PTR _dc$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+16]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	edx, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+edx*2]
	mov	ax, WORD PTR ?rShift@@3PAGA[edx*2]
	mov	WORD PTR _r$[ebp], ax

; 1424 : 
; 1425 : 				g=gShift[UIColorTable[operc][
; 1426 : 					UIColorTable[front][(*sptr >> Owner->greens) & 0x1f]+
; 1427 : 					UIColorTable[back][(dc >> Owner->greens) & 0x1f]
; 1428 : 					]];

	mov	edx, DWORD PTR _operc$[ebp]
	shl	edx, 9
	mov	eax, DWORD PTR _front$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	esi, WORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+18]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	eax, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	movzx	edi, WORD PTR _dc$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+18]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	eax, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+eax*2]
	mov	ax, WORD PTR ?gShift@@3PAGA[edx*2]
	mov	WORD PTR _g$[ebp], ax

; 1429 : 
; 1430 : 				b=bShift[UIColorTable[operc][
; 1431 : 					UIColorTable[front][(*sptr >> Owner->blues) & 0x1f]+
; 1432 : 					UIColorTable[back][(dc >> Owner->blues) & 0x1f]
; 1433 : 					]];

	mov	edx, DWORD PTR _operc$[ebp]
	shl	edx, 9
	mov	eax, DWORD PTR _front$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	esi, WORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+20]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	eax, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	movzx	edi, WORD PTR _dc$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+20]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	eax, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+eax*2]
	mov	ax, WORD PTR ?bShift@@3PAGA[edx*2]
	mov	WORD PTR _b$[ebp], ax

; 1434 : 
; 1435 : 				sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _sptr$[ebp], ecx

; 1436 : 
; 1437 : 				if( !b32 )

	movzx	edx, BYTE PTR _b32$[ebp]
	test	edx, edx
	jne	SHORT $LN5@Blend16Bit

; 1438 : 				*dptr++=static_cast<WORD>(r|g|b);

	movzx	eax, WORD PTR _r$[ebp]
	movzx	ecx, WORD PTR _g$[ebp]
	or	eax, ecx
	movzx	edx, WORD PTR _b$[ebp]
	or	eax, edx
	mov	ecx, DWORD PTR _dptr$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _dptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _dptr$[ebp], edx

; 1439 : 				else

	jmp	SHORT $LN4@Blend16Bit
$LN5@Blend16Bit:

; 1440 : 				{
; 1441 : 					*(reinterpret_cast<DWORD*>(dptr)) = RGB565toRGB8( static_cast<WORD>(r|g|b) );

	movzx	eax, WORD PTR _r$[ebp]
	movzx	ecx, WORD PTR _g$[ebp]
	or	eax, ecx
	movzx	edx, WORD PTR _b$[ebp]
	or	eax, edx
	push	eax
	call	?RGB565toRGB8@@YAKG@Z			; RGB565toRGB8
	add	esp, 4
	mov	ecx, DWORD PTR _dptr$[ebp]
	mov	DWORD PTR [ecx], eax

; 1442 : 					*dptr += 2;

	mov	edx, DWORD PTR _dptr$[ebp]
	movzx	eax, WORD PTR [edx]
	add	eax, 2
	mov	ecx, DWORD PTR _dptr$[ebp]
	mov	WORD PTR [ecx], ax
$LN4@Blend16Bit:

; 1443 : 				}
; 1444 : 			}
; 1445 : 			else

	jmp	SHORT $LN3@Blend16Bit
$LN8@Blend16Bit:

; 1446 : 			{
; 1447 : 				sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _sptr$[ebp], edx

; 1448 : 
; 1449 : 				if(!b32)

	movzx	eax, BYTE PTR _b32$[ebp]
	test	eax, eax
	jne	SHORT $LN2@Blend16Bit

; 1450 : 				dptr++;

	mov	ecx, DWORD PTR _dptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _dptr$[ebp], ecx

; 1451 : 				else

	jmp	SHORT $LN3@Blend16Bit
$LN2@Blend16Bit:

; 1452 : 					dptr += 2;

	mov	edx, DWORD PTR _dptr$[ebp]
	add	edx, 4
	mov	DWORD PTR _dptr$[ebp], edx
$LN3@Blend16Bit:

; 1453 : 			}
; 1454 : 		}

	jmp	$LN10@Blend16Bit
$LN9@Blend16Bit:

; 1455 : 
; 1456 : 		//add calc in begin dep WORD|DWORD		
; 1457 : 		dptr+=dadd;

	mov	eax, DWORD PTR _dadd$[ebp]
	mov	ecx, DWORD PTR _dptr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _dptr$[ebp], edx

; 1458 : 	}

	jmp	$LN12@Blend16Bit
$LN17@Blend16Bit:

; 1459 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Blend16BitTransparent@IMAGE_RSC@@AAEXJJPAGJJ_N@Z ENDP	; IMAGE_RSC::Blend16BitTransparent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
tv79 = -40						; size = 4
_operc$ = -36						; size = 4
_count$ = -32						; size = 4
_sptr$ = -28						; size = 4
_dptr$ = -24						; size = 4
_this$ = -20						; size = 4
_b$ = -16						; size = 2
_g$ = -12						; size = 2
_r$ = -8						; size = 2
_dc$1 = -4						; size = 2
_dest$ = 8						; size = 4
_front$ = 12						; size = 4
_back$ = 16						; size = 4
?Blend16BitTransparentFast@IMAGE_RSC@@AAEXPAGJJ@Z PROC	; IMAGE_RSC::Blend16BitTransparentFast
; _this$ = ecx

; 1272 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1273 : 	WORD *sptr;
; 1274 : 	WORD *dptr;
; 1275 : 	long count;
; 1276 : 	WORD r,g,b;
; 1277 : 	long operc;
; 1278 : 
; 1279 : 	operc=front+back;

	mov	eax, DWORD PTR _front$[ebp]
	add	eax, DWORD PTR _back$[ebp]
	mov	DWORD PTR _operc$[ebp], eax

; 1280 : 
; 1281 : 	sptr=(WORD *)(Owner->Data_ + Header->imageoffset);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx+36]
	add	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR _sptr$[ebp], edx

; 1282 : 	dptr=dest;

	mov	eax, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _dptr$[ebp], eax

; 1283 : 	count=Header->w*Header->h;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, WORD PTR [edx+44]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	ecx, WORD PTR [edx+46]
	imul	eax, ecx
	mov	DWORD PTR _count$[ebp], eax
$LN4@Blend16Bit:

; 1284 : 
; 1285 : 	while(count--)

	mov	edx, DWORD PTR _count$[ebp]
	mov	DWORD PTR tv79[ebp], edx
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
	cmp	DWORD PTR tv79[ebp], 0
	je	$LN5@Blend16Bit

; 1286 : 	{
; 1287 : 		if(*sptr ^ Owner->ColorKey_)

	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	eax, WORD PTR [ecx+40]
	xor	edx, eax
	je	$LN2@Blend16Bit

; 1288 : 		{
; 1289 : 			WORD dc;  						
; 1290 : 			dc = *dptr;

	mov	ecx, DWORD PTR _dptr$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR _dc$1[ebp], dx

; 1291 : 
; 1292 : 			r=rShift[UIColorTable[operc][
; 1293 : 				UIColorTable[front][(*sptr >> Owner->reds) & 0x1f]+
; 1294 : 				UIColorTable[back][(dc >> Owner->reds) & 0x1f]
; 1295 : 				]];

	mov	eax, DWORD PTR _operc$[ebp]
	shl	eax, 9
	mov	edx, DWORD PTR _front$[ebp]
	shl	edx, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	esi, WORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+16]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	movzx	edi, WORD PTR _dc$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+16]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	edx, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+edx*2]
	mov	ax, WORD PTR ?rShift@@3PAGA[edx*2]
	mov	WORD PTR _r$[ebp], ax

; 1296 : 
; 1297 : 			g=gShift[UIColorTable[operc][
; 1298 : 				UIColorTable[front][(*sptr >> Owner->greens) & 0x1f]+
; 1299 : 				UIColorTable[back][(dc >> Owner->greens) & 0x1f]
; 1300 : 				]];

	mov	edx, DWORD PTR _operc$[ebp]
	shl	edx, 9
	mov	eax, DWORD PTR _front$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	esi, WORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+18]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	eax, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	movzx	edi, WORD PTR _dc$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+18]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	eax, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+eax*2]
	mov	ax, WORD PTR ?gShift@@3PAGA[edx*2]
	mov	WORD PTR _g$[ebp], ax

; 1301 : 
; 1302 : 			b=bShift[UIColorTable[operc][
; 1303 : 				UIColorTable[front][(*sptr >> Owner->blues) & 0x1f]+
; 1304 : 				UIColorTable[back][(dc >> Owner->blues) & 0x1f]
; 1305 : 				]];

	mov	edx, DWORD PTR _operc$[ebp]
	shl	edx, 9
	mov	eax, DWORD PTR _front$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	esi, WORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+20]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	eax, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	movzx	edi, WORD PTR _dc$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+20]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	eax, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+eax*2]
	mov	ax, WORD PTR ?bShift@@3PAGA[edx*2]
	mov	WORD PTR _b$[ebp], ax

; 1306 : 			*dptr++=static_cast<WORD>(r|g|b);

	movzx	ecx, WORD PTR _r$[ebp]
	movzx	edx, WORD PTR _g$[ebp]
	or	ecx, edx
	movzx	eax, WORD PTR _b$[ebp]
	or	ecx, eax
	mov	edx, DWORD PTR _dptr$[ebp]
	mov	WORD PTR [edx], cx
	mov	eax, DWORD PTR _dptr$[ebp]
	add	eax, 2
	mov	DWORD PTR _dptr$[ebp], eax

; 1307 : 		}
; 1308 : 		else

	jmp	SHORT $LN1@Blend16Bit
$LN2@Blend16Bit:

; 1309 : 			dptr++;

	mov	ecx, DWORD PTR _dptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _dptr$[ebp], ecx
$LN1@Blend16Bit:

; 1310 : 		sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _sptr$[ebp], edx

; 1311 : 	}

	jmp	$LN4@Blend16Bit
$LN5@Blend16Bit:

; 1312 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Blend16BitTransparentFast@IMAGE_RSC@@AAEXPAGJJ@Z ENDP	; IMAGE_RSC::Blend16BitTransparentFast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
tv135 = -48						; size = 4
_srcsize$ = -44						; size = 4
_dadd$ = -40						; size = 4
_operc$ = -36						; size = 4
_i$ = -32						; size = 4
_sptr$ = -28						; size = 4
_dptr$ = -24						; size = 4
_this$ = -20						; size = 4
_b$ = -16						; size = 2
_g$ = -12						; size = 2
_r$ = -8						; size = 2
_dc$1 = -4						; size = 2
_doffset$ = 8						; size = 4
_dwidth$ = 12						; size = 4
_dest$ = 16						; size = 4
_front$ = 20						; size = 4
_back$ = 24						; size = 4
_b32$ = 28						; size = 1
?Blend16Bit@IMAGE_RSC@@AAEXJJPAGJJ_N@Z PROC		; IMAGE_RSC::Blend16Bit
; _this$ = ecx

; 1316 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1317 : 	WORD *sptr,*srcsize;
; 1318 : 	WORD *dptr;
; 1319 : 	WORD r,g,b;
; 1320 : 	long operc;
; 1321 : 	long i;
; 1322 : 	long dadd;
; 1323 : 
; 1324 : 	operc=front+back;

	mov	eax, DWORD PTR _front$[ebp]
	add	eax, DWORD PTR _back$[ebp]
	mov	DWORD PTR _operc$[ebp], eax

; 1325 : 
; 1326 : 	sptr   =(WORD *)(Owner->Data_ + Header->imageoffset);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx+36]
	add	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR _sptr$[ebp], edx

; 1327 : 	srcsize=(WORD *)(sptr  + Header->w * Header->h);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, WORD PTR [ecx+44]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	eax, WORD PTR [ecx+46]
	imul	edx, eax
	mov	ecx, DWORD PTR _sptr$[ebp]
	lea	edx, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR _srcsize$[ebp], edx

; 1328 : 
; 1329 : 	if(!b32)

	movzx	eax, BYTE PTR _b32$[ebp]
	test	eax, eax
	jne	SHORT $LN12@Blend16Bit

; 1330 : 	dptr=dest+doffset;

	mov	ecx, DWORD PTR _doffset$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _dptr$[ebp], eax

; 1331 : 	else

	jmp	SHORT $LN11@Blend16Bit
$LN12@Blend16Bit:

; 1332 : 		dptr=dest+doffset*2;

	mov	ecx, DWORD PTR _doffset$[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR _dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _dptr$[ebp], eax
$LN11@Blend16Bit:

; 1333 : 
; 1334 : 	if(!b32)

	movzx	ecx, BYTE PTR _b32$[ebp]
	test	ecx, ecx
	jne	SHORT $LN10@Blend16Bit

; 1335 : 	dadd=dwidth - Header->w;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	mov	edx, DWORD PTR _dwidth$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _dadd$[ebp], edx

; 1336 : 	else

	jmp	SHORT $LN8@Blend16Bit
$LN10@Blend16Bit:

; 1337 : 		dadd = (dwidth - Header->w)*2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, WORD PTR [ecx+44]
	mov	eax, DWORD PTR _dwidth$[ebp]
	sub	eax, edx
	shl	eax, 1
	mov	DWORD PTR _dadd$[ebp], eax
$LN8@Blend16Bit:

; 1338 : 
; 1339 : 	while(sptr < srcsize)

	mov	ecx, DWORD PTR _sptr$[ebp]
	cmp	ecx, DWORD PTR _srcsize$[ebp]
	jae	$LN13@Blend16Bit

; 1340 : 	{
; 1341 : 		i=Header->w;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	mov	DWORD PTR _i$[ebp], ecx
$LN6@Blend16Bit:

; 1342 : 		while(i--)

	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv135[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	cmp	DWORD PTR tv135[ebp], 0
	je	$LN5@Blend16Bit

; 1343 : 		{
; 1344 : 			WORD dc;  				
; 1345 : 			if(!b32)

	movzx	ecx, BYTE PTR _b32$[ebp]
	test	ecx, ecx
	jne	SHORT $LN4@Blend16Bit

; 1346 : 				dc = *dptr;

	mov	edx, DWORD PTR _dptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR _dc$1[ebp], ax

; 1347 : 			else

	jmp	SHORT $LN3@Blend16Bit
$LN4@Blend16Bit:

; 1348 : 				dc = RGB8toRGB565( *(reinterpret_cast<DWORD*>(dptr)) );

	mov	ecx, DWORD PTR _dptr$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?RGB8toRGB565@@YAGK@Z			; RGB8toRGB565
	add	esp, 4
	mov	WORD PTR _dc$1[ebp], ax
$LN3@Blend16Bit:

; 1349 : 
; 1350 : 
; 1351 : 			r=rShift[UIColorTable[operc][
; 1352 : 				UIColorTable[front][(*sptr >> Owner->reds) & 0x1f]+
; 1353 : 				UIColorTable[back][(dc >> Owner->reds) & 0x1f]
; 1354 : 				]];

	mov	eax, DWORD PTR _operc$[ebp]
	shl	eax, 9
	mov	edx, DWORD PTR _front$[ebp]
	shl	edx, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	esi, WORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+16]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	movzx	edi, WORD PTR _dc$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+16]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	edx, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+edx*2]
	mov	ax, WORD PTR ?rShift@@3PAGA[edx*2]
	mov	WORD PTR _r$[ebp], ax

; 1355 : 
; 1356 : 			g=gShift[UIColorTable[operc][
; 1357 : 				UIColorTable[front][(*sptr >> Owner->greens) & 0x1f]+
; 1358 : 				UIColorTable[back][(dc >> Owner->greens) & 0x1f]
; 1359 : 				]];

	mov	edx, DWORD PTR _operc$[ebp]
	shl	edx, 9
	mov	eax, DWORD PTR _front$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	esi, WORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+18]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	eax, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	movzx	edi, WORD PTR _dc$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+18]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	eax, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+eax*2]
	mov	ax, WORD PTR ?gShift@@3PAGA[edx*2]
	mov	WORD PTR _g$[ebp], ax

; 1360 : 
; 1361 : 			b=bShift[UIColorTable[operc][
; 1362 : 				UIColorTable[front][(*sptr >> Owner->blues) & 0x1f]+
; 1363 : 				UIColorTable[back][(dc >> Owner->blues) & 0x1f]
; 1364 : 				]];

	mov	edx, DWORD PTR _operc$[ebp]
	shl	edx, 9
	mov	eax, DWORD PTR _front$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	esi, WORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+20]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	eax, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	movzx	edi, WORD PTR _dc$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+20]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	eax, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+eax*2]
	mov	ax, WORD PTR ?bShift@@3PAGA[edx*2]
	mov	WORD PTR _b$[ebp], ax

; 1365 : 
; 1366 : 			sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _sptr$[ebp], ecx

; 1367 : 
; 1368 : 			if(!b32)

	movzx	edx, BYTE PTR _b32$[ebp]
	test	edx, edx
	jne	SHORT $LN2@Blend16Bit

; 1369 : 			*dptr++=static_cast<WORD>(r|g|b);

	movzx	eax, WORD PTR _r$[ebp]
	movzx	ecx, WORD PTR _g$[ebp]
	or	eax, ecx
	movzx	edx, WORD PTR _b$[ebp]
	or	eax, edx
	mov	ecx, DWORD PTR _dptr$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _dptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _dptr$[ebp], edx

; 1370 : 			else

	jmp	SHORT $LN1@Blend16Bit
$LN2@Blend16Bit:

; 1371 : 			{				
; 1372 : 				*(reinterpret_cast<DWORD*>(dptr)) = RGB565toRGB8( static_cast<WORD>(r|g|b) );

	movzx	eax, WORD PTR _r$[ebp]
	movzx	ecx, WORD PTR _g$[ebp]
	or	eax, ecx
	movzx	edx, WORD PTR _b$[ebp]
	or	eax, edx
	push	eax
	call	?RGB565toRGB8@@YAKG@Z			; RGB565toRGB8
	add	esp, 4
	mov	ecx, DWORD PTR _dptr$[ebp]
	mov	DWORD PTR [ecx], eax

; 1373 : 
; 1374 : 				*dptr += 2;

	mov	edx, DWORD PTR _dptr$[ebp]
	movzx	eax, WORD PTR [edx]
	add	eax, 2
	mov	ecx, DWORD PTR _dptr$[ebp]
	mov	WORD PTR [ecx], ax
$LN1@Blend16Bit:

; 1375 : 			}
; 1376 : 		}

	jmp	$LN6@Blend16Bit
$LN5@Blend16Bit:

; 1377 : 		
; 1378 : 		dptr+=dadd;

	mov	edx, DWORD PTR _dadd$[ebp]
	mov	eax, DWORD PTR _dptr$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _dptr$[ebp], ecx

; 1379 : 	}

	jmp	$LN8@Blend16Bit
$LN13@Blend16Bit:

; 1380 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Blend16Bit@IMAGE_RSC@@AAEXJJPAGJJ_N@Z ENDP		; IMAGE_RSC::Blend16Bit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
tv79 = -40						; size = 4
_operc$ = -36						; size = 4
_count$ = -32						; size = 4
_dptr$ = -28						; size = 4
_sptr$ = -24						; size = 4
_this$ = -20						; size = 4
_b$ = -16						; size = 2
_g$ = -12						; size = 2
_r$ = -8						; size = 2
_dc$1 = -4						; size = 2
_dest$ = 8						; size = 4
_front$ = 12						; size = 4
_back$ = 16						; size = 4
?Blend16BitFast@IMAGE_RSC@@AAEXPAGJJ@Z PROC		; IMAGE_RSC::Blend16BitFast
; _this$ = ecx

; 1232 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1233 : 	WORD *sptr;
; 1234 : 	WORD *dptr;
; 1235 : 	long count;
; 1236 : 	WORD r,g,b;
; 1237 : 	long operc;
; 1238 : 
; 1239 : 	operc=front+back;

	mov	eax, DWORD PTR _front$[ebp]
	add	eax, DWORD PTR _back$[ebp]
	mov	DWORD PTR _operc$[ebp], eax

; 1240 : 
; 1241 : 	sptr=(WORD *)(Owner->Data_ + Header->imageoffset);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx+36]
	add	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR _sptr$[ebp], edx

; 1242 : 	dptr=dest;

	mov	eax, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _dptr$[ebp], eax

; 1243 : 	count=Header->w*Header->h;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, WORD PTR [edx+44]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	ecx, WORD PTR [edx+46]
	imul	eax, ecx
	mov	DWORD PTR _count$[ebp], eax
$LN2@Blend16Bit:

; 1244 : 
; 1245 : 	while(count--)

	mov	edx, DWORD PTR _count$[ebp]
	mov	DWORD PTR tv79[ebp], edx
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
	cmp	DWORD PTR tv79[ebp], 0
	je	$LN3@Blend16Bit

; 1246 : 	{
; 1247 : 		WORD dc;  				
; 1248 : 		dc = *dptr;

	mov	ecx, DWORD PTR _dptr$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR _dc$1[ebp], dx

; 1249 : 
; 1250 : 		r=rShift[UIColorTable[operc][
; 1251 : 			UIColorTable[front][(*sptr >> Owner->reds) & 0x1f]+
; 1252 : 			UIColorTable[back][(dc >> Owner->reds) & 0x1f]
; 1253 : 			]];

	mov	eax, DWORD PTR _operc$[ebp]
	shl	eax, 9
	mov	edx, DWORD PTR _front$[ebp]
	shl	edx, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	esi, WORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+16]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	movzx	edi, WORD PTR _dc$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+16]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	edx, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+edx*2]
	mov	ax, WORD PTR ?rShift@@3PAGA[edx*2]
	mov	WORD PTR _r$[ebp], ax

; 1254 : 
; 1255 : 		g=gShift[UIColorTable[operc][
; 1256 : 			UIColorTable[front][(*sptr >> Owner->greens) & 0x1f]+
; 1257 : 			UIColorTable[back][(dc >> Owner->greens) & 0x1f]
; 1258 : 			]];

	mov	edx, DWORD PTR _operc$[ebp]
	shl	edx, 9
	mov	eax, DWORD PTR _front$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	esi, WORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+18]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	eax, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	movzx	edi, WORD PTR _dc$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+18]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	eax, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+eax*2]
	mov	ax, WORD PTR ?gShift@@3PAGA[edx*2]
	mov	WORD PTR _g$[ebp], ax

; 1259 : 
; 1260 : 		b=bShift[UIColorTable[operc][
; 1261 : 			UIColorTable[front][(*sptr >> Owner->blues) & 0x1f]+
; 1262 : 			UIColorTable[back][(dc >> Owner->blues) & 0x1f]
; 1263 : 			]];

	mov	edx, DWORD PTR _operc$[ebp]
	shl	edx, 9
	mov	eax, DWORD PTR _front$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	esi, WORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+20]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	eax, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	movzx	edi, WORD PTR _dc$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+20]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	eax, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+eax*2]
	mov	ax, WORD PTR ?bShift@@3PAGA[edx*2]
	mov	WORD PTR _b$[ebp], ax

; 1264 : 
; 1265 : 		sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _sptr$[ebp], ecx

; 1266 : 		*dptr++=static_cast<WORD>(r|g|b);

	movzx	edx, WORD PTR _r$[ebp]
	movzx	eax, WORD PTR _g$[ebp]
	or	edx, eax
	movzx	ecx, WORD PTR _b$[ebp]
	or	edx, ecx
	mov	eax, DWORD PTR _dptr$[ebp]
	mov	WORD PTR [eax], dx
	mov	ecx, DWORD PTR _dptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _dptr$[ebp], ecx

; 1267 : 	}

	jmp	$LN2@Blend16Bit
$LN3@Blend16Bit:

; 1268 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Blend16BitFast@IMAGE_RSC@@AAEXPAGJJ@Z ENDP		; IMAGE_RSC::Blend16BitFast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
_sadd$ = -60						; size = 4
_dc$1 = -56						; size = 4
tv133 = -52						; size = 4
_srcsize$ = -48						; size = 4
_dadd$ = -44						; size = 4
_b$ = -40						; size = 4
_g$ = -36						; size = 4
_r$ = -32						; size = 4
_Palette$ = -28						; size = 4
_operc$ = -24						; size = 4
_i$ = -20						; size = 4
_sptr$ = -16						; size = 4
_this$ = -12						; size = 4
_dptr$ = -8						; size = 4
_dc$2 = -4						; size = 2
_soffset$ = 8						; size = 4
_scopy$ = 12						; size = 4
_ssize$ = 16						; size = 4
_doffset$ = 20						; size = 4
_dwidth$ = 24						; size = 4
_dest$ = 28						; size = 4
_front$ = 32						; size = 4
_back$ = 36						; size = 4
_b32$ = 40						; size = 1
?Blend8BitTransparentPart@IMAGE_RSC@@AAEXJJJJJPAGJJ_N@Z PROC ; IMAGE_RSC::Blend8BitTransparentPart
; _this$ = ecx

; 1146 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1147 : 	uchar *sptr,*srcsize;
; 1148 : 	WORD *Palette;
; 1149 : 	WORD *dptr;
; 1150 : 	DWORD r,g,b;
; 1151 : 	long operc;
; 1152 : 	long i;
; 1153 : 	long sadd,dadd;
; 1154 : 
; 1155 : 	operc=front+back;

	mov	eax, DWORD PTR _front$[ebp]
	add	eax, DWORD PTR _back$[ebp]
	mov	DWORD PTR _operc$[ebp], eax

; 1156 : 
; 1157 : 	Palette=(WORD *)(Owner->Data_ + Header->paletteoffset);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx+36]
	add	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR _Palette$[ebp], edx

; 1158 : 	sptr   =(uchar *)(Owner->Data_ + Header->imageoffset + soffset);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+36]
	add	ecx, DWORD PTR [eax+48]
	add	ecx, DWORD PTR _soffset$[ebp]
	mov	DWORD PTR _sptr$[ebp], ecx

; 1159 : 	srcsize=(uchar *)(Owner->Data_ + Header->imageoffset + ssize);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax+36]
	add	eax, DWORD PTR [edx+48]
	add	eax, DWORD PTR _ssize$[ebp]
	mov	DWORD PTR _srcsize$[ebp], eax

; 1160 : 
; 1161 : 	if(!b32)

	movzx	ecx, BYTE PTR _b32$[ebp]
	test	ecx, ecx
	jne	SHORT $LN15@Blend8BitT

; 1162 : 	dptr=dest+doffset;

	mov	edx, DWORD PTR _doffset$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _dptr$[ebp], ecx

; 1163 : 	else

	jmp	SHORT $LN14@Blend8BitT
$LN15@Blend8BitT:

; 1164 : 		dptr=dest + doffset*2;

	mov	edx, DWORD PTR _doffset$[ebp]
	shl	edx, 1
	mov	eax, DWORD PTR _dest$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _dptr$[ebp], ecx
$LN14@Blend8BitT:

; 1165 : 
; 1166 : 	sadd=Header->w - scopy;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	sub	ecx, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _sadd$[ebp], ecx

; 1167 : 
; 1168 : 	if(!b32)

	movzx	edx, BYTE PTR _b32$[ebp]
	test	edx, edx
	jne	SHORT $LN13@Blend8BitT

; 1169 : 	dadd=dwidth - scopy;

	mov	eax, DWORD PTR _dwidth$[ebp]
	sub	eax, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _dadd$[ebp], eax

; 1170 : 	else

	jmp	SHORT $LN11@Blend8BitT
$LN13@Blend8BitT:

; 1171 : 		dadd= (dwidth - scopy)*2;

	mov	ecx, DWORD PTR _dwidth$[ebp]
	sub	ecx, DWORD PTR _scopy$[ebp]
	shl	ecx, 1
	mov	DWORD PTR _dadd$[ebp], ecx
$LN11@Blend8BitT:

; 1172 : 
; 1173 : 
; 1174 : 	while(sptr < srcsize)

	mov	edx, DWORD PTR _sptr$[ebp]
	cmp	edx, DWORD PTR _srcsize$[ebp]
	jae	$LN16@Blend8BitT

; 1175 : 	{
; 1176 : 		i=scopy;

	mov	eax, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN9@Blend8BitT:

; 1177 : 		while(i--)

	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv133[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	cmp	DWORD PTR tv133[ebp], 0
	je	$LN8@Blend8BitT

; 1178 : 		{
; 1179 : 			if(*sptr)

	mov	eax, DWORD PTR _sptr$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN7@Blend8BitT

; 1180 : 			{
; 1181 : 				WORD dc;  				
; 1182 : 				if(!b32)

	movzx	edx, BYTE PTR _b32$[ebp]
	test	edx, edx
	jne	SHORT $LN6@Blend8BitT

; 1183 : 					dc = *dptr;

	mov	eax, DWORD PTR _dptr$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _dc$2[ebp], cx

; 1184 : 				else

	jmp	SHORT $LN5@Blend8BitT
$LN6@Blend8BitT:

; 1185 : 					dc = RGB8toRGB565( *(reinterpret_cast<DWORD*>(dptr)) );

	mov	edx, DWORD PTR _dptr$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?RGB8toRGB565@@YAGK@Z			; RGB8toRGB565
	add	esp, 4
	mov	WORD PTR _dc$2[ebp], ax
$LN5@Blend8BitT:

; 1186 : 
; 1187 : 
; 1188 : 				r=rShift[UIColorTable[operc][
; 1189 : 					UIColorTable[front][(Palette[*sptr] >> Owner->reds) & 0x1f]+
; 1190 : 					UIColorTable[back][(dc >> Owner->reds) & 0x1f]
; 1191 : 					]];

	mov	edx, DWORD PTR _operc$[ebp]
	shl	edx, 9
	mov	eax, DWORD PTR _front$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	ecx, BYTE PTR [ecx]
	mov	esi, DWORD PTR _Palette$[ebp]
	movzx	esi, WORD PTR [esi+ecx*2]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+16]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	eax, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	movzx	edi, WORD PTR _dc$2[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+16]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	eax, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+eax*2]
	movzx	eax, WORD PTR ?rShift@@3PAGA[edx*2]
	mov	DWORD PTR _r$[ebp], eax

; 1192 : 
; 1193 : 				g=gShift[UIColorTable[operc][
; 1194 : 					UIColorTable[front][(Palette[*sptr] >> Owner->greens) & 0x1f]+
; 1195 : 					UIColorTable[back][(dc >> Owner->greens) & 0x1f]
; 1196 : 					]];

	mov	edx, DWORD PTR _operc$[ebp]
	shl	edx, 9
	mov	eax, DWORD PTR _front$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	ecx, BYTE PTR [ecx]
	mov	esi, DWORD PTR _Palette$[ebp]
	movzx	esi, WORD PTR [esi+ecx*2]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+18]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	eax, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	movzx	edi, WORD PTR _dc$2[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+18]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	eax, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+eax*2]
	movzx	eax, WORD PTR ?gShift@@3PAGA[edx*2]
	mov	DWORD PTR _g$[ebp], eax

; 1197 : 
; 1198 : 				b=bShift[UIColorTable[operc][
; 1199 : 					UIColorTable[front][(Palette[*sptr] >> Owner->blues) & 0x1f]+
; 1200 : 					UIColorTable[back][(dc >> Owner->blues) & 0x1f]
; 1201 : 					]];

	mov	edx, DWORD PTR _operc$[ebp]
	shl	edx, 9
	mov	eax, DWORD PTR _front$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	ecx, BYTE PTR [ecx]
	mov	esi, DWORD PTR _Palette$[ebp]
	movzx	esi, WORD PTR [esi+ecx*2]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+20]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	eax, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	movzx	edi, WORD PTR _dc$2[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+20]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	eax, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+eax*2]
	movzx	eax, WORD PTR ?bShift@@3PAGA[edx*2]
	mov	DWORD PTR _b$[ebp], eax

; 1202 : 
; 1203 : 				sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sptr$[ebp], ecx

; 1204 : 
; 1205 : //XX				*dptr++=static_cast<WORD>(r|g|b);
; 1206 : 				if(!b32)

	movzx	edx, BYTE PTR _b32$[ebp]
	test	edx, edx
	jne	SHORT $LN4@Blend8BitT

; 1207 : 				*dptr++=static_cast<WORD>(r|g|b);

	mov	eax, DWORD PTR _r$[ebp]
	or	eax, DWORD PTR _g$[ebp]
	or	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _dptr$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _dptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _dptr$[ebp], edx

; 1208 : 				else

	jmp	SHORT $LN3@Blend8BitT
$LN4@Blend8BitT:

; 1209 : 				{
; 1210 : 					DWORD dc = RGB565toRGB8( static_cast<WORD>(r|g|b) );

	mov	eax, DWORD PTR _r$[ebp]
	or	eax, DWORD PTR _g$[ebp]
	or	eax, DWORD PTR _b$[ebp]
	push	eax
	call	?RGB565toRGB8@@YAKG@Z			; RGB565toRGB8
	add	esp, 4
	mov	DWORD PTR _dc$1[ebp], eax

; 1211 : 					*(reinterpret_cast<DWORD*>(dptr)) = dc;

	mov	ecx, DWORD PTR _dptr$[ebp]
	mov	edx, DWORD PTR _dc$1[ebp]
	mov	DWORD PTR [ecx], edx

; 1212 : 
; 1213 : 					*dptr += 2;

	mov	eax, DWORD PTR _dptr$[ebp]
	movzx	ecx, WORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _dptr$[ebp]
	mov	WORD PTR [edx], cx
$LN3@Blend8BitT:

; 1214 : 				}
; 1215 : 			}
; 1216 : 			else

	jmp	SHORT $LN2@Blend8BitT
$LN7@Blend8BitT:

; 1217 : 			{
; 1218 : 				sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax

; 1219 : 				dptr++;

	mov	ecx, DWORD PTR _dptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _dptr$[ebp], ecx

; 1220 : 				if(b32) dptr++;//to dword

	movzx	edx, BYTE PTR _b32$[ebp]
	test	edx, edx
	je	SHORT $LN2@Blend8BitT
	mov	eax, DWORD PTR _dptr$[ebp]
	add	eax, 2
	mov	DWORD PTR _dptr$[ebp], eax
$LN2@Blend8BitT:

; 1221 : 			}
; 1222 : 		}

	jmp	$LN9@Blend8BitT
$LN8@Blend8BitT:

; 1223 : 		sptr+=sadd;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, DWORD PTR _sadd$[ebp]
	mov	DWORD PTR _sptr$[ebp], ecx

; 1224 : 		dptr+=dadd;

	mov	edx, DWORD PTR _dadd$[ebp]
	mov	eax, DWORD PTR _dptr$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _dptr$[ebp], ecx

; 1225 : 	}

	jmp	$LN11@Blend8BitT
$LN16@Blend8BitT:

; 1226 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
?Blend8BitTransparentPart@IMAGE_RSC@@AAEXJJJJJPAGJJ_N@Z ENDP ; IMAGE_RSC::Blend8BitTransparentPart
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
_sadd$ = -60						; size = 4
_dc$1 = -56						; size = 4
tv132 = -52						; size = 4
_srcsize$ = -48						; size = 4
_b$ = -44						; size = 4
_g$ = -40						; size = 4
_r$ = -36						; size = 4
_dadd$ = -32						; size = 4
_Palette$ = -28						; size = 4
_operc$ = -24						; size = 4
_i$ = -20						; size = 4
_sptr$ = -16						; size = 4
_dptr$ = -12						; size = 4
_this$ = -8						; size = 4
_dc$2 = -4						; size = 2
_soffset$ = 8						; size = 4
_scopy$ = 12						; size = 4
_ssize$ = 16						; size = 4
_doffset$ = 20						; size = 4
_dwidth$ = 24						; size = 4
_dest$ = 28						; size = 4
_front$ = 32						; size = 4
_back$ = 36						; size = 4
_b32$ = 40						; size = 1
?Blend8BitPart@IMAGE_RSC@@AAEXJJJJJPAGJJ_N@Z PROC	; IMAGE_RSC::Blend8BitPart
; _this$ = ecx

; 1075 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1076 : 	uchar *sptr,*srcsize;
; 1077 : 	WORD *Palette;
; 1078 : 	WORD *dptr;
; 1079 : 	DWORD r,g,b;
; 1080 : 	long operc;
; 1081 : 	long i;
; 1082 : 	long sadd,dadd;
; 1083 : 
; 1084 : 	operc=front+back;

	mov	eax, DWORD PTR _front$[ebp]
	add	eax, DWORD PTR _back$[ebp]
	mov	DWORD PTR _operc$[ebp], eax

; 1085 : 
; 1086 : 	Palette=(WORD *)(Owner->Data_ + Header->paletteoffset);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx+36]
	add	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR _Palette$[ebp], edx

; 1087 : 	sptr   =(uchar *)(Owner->Data_ + Header->imageoffset + soffset);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+36]
	add	ecx, DWORD PTR [eax+48]
	add	ecx, DWORD PTR _soffset$[ebp]
	mov	DWORD PTR _sptr$[ebp], ecx

; 1088 : 	srcsize=(uchar *)(Owner->Data_ + Header->imageoffset + ssize);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax+36]
	add	eax, DWORD PTR [edx+48]
	add	eax, DWORD PTR _ssize$[ebp]
	mov	DWORD PTR _srcsize$[ebp], eax

; 1089 : 	if(!b32)

	movzx	ecx, BYTE PTR _b32$[ebp]
	test	ecx, ecx
	jne	SHORT $LN11@Blend8BitP

; 1090 : 	dptr=dest+doffset;

	mov	edx, DWORD PTR _doffset$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _dptr$[ebp], ecx

; 1091 : 	else

	jmp	SHORT $LN10@Blend8BitP
$LN11@Blend8BitP:

; 1092 : 		dptr=dest + doffset*2;

	mov	edx, DWORD PTR _doffset$[ebp]
	shl	edx, 1
	mov	eax, DWORD PTR _dest$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _dptr$[ebp], ecx
$LN10@Blend8BitP:

; 1093 : 
; 1094 : 	sadd=Header->w - scopy;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	sub	ecx, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _sadd$[ebp], ecx

; 1095 : 	dadd=dwidth - scopy;

	mov	edx, DWORD PTR _dwidth$[ebp]
	sub	edx, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _dadd$[ebp], edx

; 1096 : 	if(b32) 

	movzx	eax, BYTE PTR _b32$[ebp]
	test	eax, eax
	je	SHORT $LN8@Blend8BitP

; 1097 : 		dadd *= 2;

	mov	ecx, DWORD PTR _dadd$[ebp]
	shl	ecx, 1
	mov	DWORD PTR _dadd$[ebp], ecx
$LN8@Blend8BitP:

; 1098 : 
; 1099 : 
; 1100 : 	while(sptr < srcsize)

	mov	edx, DWORD PTR _sptr$[ebp]
	cmp	edx, DWORD PTR _srcsize$[ebp]
	jae	$LN12@Blend8BitP

; 1101 : 	{
; 1102 : 		i=scopy;

	mov	eax, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN6@Blend8BitP:

; 1103 : 		while(i--)

	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv132[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	cmp	DWORD PTR tv132[ebp], 0
	je	$LN5@Blend8BitP

; 1104 : 		{
; 1105 : 			WORD dc;  				
; 1106 : 			if(!b32)

	movzx	eax, BYTE PTR _b32$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Blend8BitP

; 1107 : 				dc = *dptr;

	mov	ecx, DWORD PTR _dptr$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR _dc$2[ebp], dx

; 1108 : 			else

	jmp	SHORT $LN3@Blend8BitP
$LN4@Blend8BitP:

; 1109 : 				dc = RGB8toRGB565( *(reinterpret_cast<DWORD*>(dptr)) );

	mov	eax, DWORD PTR _dptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?RGB8toRGB565@@YAGK@Z			; RGB8toRGB565
	add	esp, 4
	mov	WORD PTR _dc$2[ebp], ax
$LN3@Blend8BitP:

; 1110 : 
; 1111 : 
; 1112 : 			r=rShift[UIColorTable[operc][
; 1113 : 				UIColorTable[front][(Palette[*sptr] >> Owner->reds) & 0x1f]+
; 1114 : 				UIColorTable[back][(dc >> Owner->reds) & 0x1f]
; 1115 : 				]];

	mov	edx, DWORD PTR _operc$[ebp]
	shl	edx, 9
	mov	eax, DWORD PTR _front$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	ecx, BYTE PTR [ecx]
	mov	esi, DWORD PTR _Palette$[ebp]
	movzx	esi, WORD PTR [esi+ecx*2]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+16]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	eax, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	movzx	edi, WORD PTR _dc$2[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+16]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	eax, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+eax*2]
	movzx	eax, WORD PTR ?rShift@@3PAGA[edx*2]
	mov	DWORD PTR _r$[ebp], eax

; 1116 : 
; 1117 : 			g=gShift[UIColorTable[operc][
; 1118 : 				UIColorTable[front][(Palette[*sptr] >> Owner->greens) & 0x1f]+
; 1119 : 				UIColorTable[back][(dc >> Owner->greens) & 0x1f]
; 1120 : 				]];

	mov	edx, DWORD PTR _operc$[ebp]
	shl	edx, 9
	mov	eax, DWORD PTR _front$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	ecx, BYTE PTR [ecx]
	mov	esi, DWORD PTR _Palette$[ebp]
	movzx	esi, WORD PTR [esi+ecx*2]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+18]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	eax, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	movzx	edi, WORD PTR _dc$2[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+18]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	eax, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+eax*2]
	movzx	eax, WORD PTR ?gShift@@3PAGA[edx*2]
	mov	DWORD PTR _g$[ebp], eax

; 1121 : 
; 1122 : 			b=bShift[UIColorTable[operc][
; 1123 : 				UIColorTable[front][(Palette[*sptr] >> Owner->blues) & 0x1f]+
; 1124 : 				UIColorTable[back][(dc >> Owner->blues) & 0x1f]
; 1125 : 				]];

	mov	edx, DWORD PTR _operc$[ebp]
	shl	edx, 9
	mov	eax, DWORD PTR _front$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	ecx, BYTE PTR [ecx]
	mov	esi, DWORD PTR _Palette$[ebp]
	movzx	esi, WORD PTR [esi+ecx*2]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+20]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	eax, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	movzx	edi, WORD PTR _dc$2[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+20]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	eax, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+eax*2]
	movzx	eax, WORD PTR ?bShift@@3PAGA[edx*2]
	mov	DWORD PTR _b$[ebp], eax

; 1126 : 
; 1127 : 			sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sptr$[ebp], ecx

; 1128 : //XX			*dptr++=static_cast<WORD>(r|g|b);
; 1129 : 			if(!b32)

	movzx	edx, BYTE PTR _b32$[ebp]
	test	edx, edx
	jne	SHORT $LN2@Blend8BitP

; 1130 : 			*dptr++=static_cast<WORD>(r|g|b);

	mov	eax, DWORD PTR _r$[ebp]
	or	eax, DWORD PTR _g$[ebp]
	or	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _dptr$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _dptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _dptr$[ebp], edx

; 1131 : 			else

	jmp	SHORT $LN1@Blend8BitP
$LN2@Blend8BitP:

; 1132 : 			{
; 1133 : 				DWORD dc = RGB565toRGB8( static_cast<WORD>(r|g|b) );

	mov	eax, DWORD PTR _r$[ebp]
	or	eax, DWORD PTR _g$[ebp]
	or	eax, DWORD PTR _b$[ebp]
	push	eax
	call	?RGB565toRGB8@@YAKG@Z			; RGB565toRGB8
	add	esp, 4
	mov	DWORD PTR _dc$1[ebp], eax

; 1134 : 				*(reinterpret_cast<DWORD*>(dptr)) = dc;

	mov	ecx, DWORD PTR _dptr$[ebp]
	mov	edx, DWORD PTR _dc$1[ebp]
	mov	DWORD PTR [ecx], edx

; 1135 : 				*dptr += 2;

	mov	eax, DWORD PTR _dptr$[ebp]
	movzx	ecx, WORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _dptr$[ebp]
	mov	WORD PTR [edx], cx
$LN1@Blend8BitP:

; 1136 : 			}
; 1137 : 
; 1138 : 		}

	jmp	$LN6@Blend8BitP
$LN5@Blend8BitP:

; 1139 : 		sptr+=sadd;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, DWORD PTR _sadd$[ebp]
	mov	DWORD PTR _sptr$[ebp], eax

; 1140 : 		dptr+=dadd;

	mov	ecx, DWORD PTR _dadd$[ebp]
	mov	edx, DWORD PTR _dptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _dptr$[ebp], eax

; 1141 : 	}

	jmp	$LN8@Blend8BitP
$LN12@Blend8BitP:

; 1142 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
?Blend8BitPart@IMAGE_RSC@@AAEXJJJJJPAGJJ_N@Z ENDP	; IMAGE_RSC::Blend8BitPart
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
_dc$1 = -56						; size = 4
tv135 = -52						; size = 4
_srcsize$ = -48						; size = 4
_b$ = -44						; size = 4
_g$ = -40						; size = 4
_r$ = -36						; size = 4
_dadd$ = -32						; size = 4
_Palette$ = -28						; size = 4
_operc$ = -24						; size = 4
_i$ = -20						; size = 4
_sptr$ = -16						; size = 4
_this$ = -12						; size = 4
_dptr$ = -8						; size = 4
_dc$2 = -4						; size = 2
_doffset$ = 8						; size = 4
_dwidth$ = 12						; size = 4
_dest$ = 16						; size = 4
_front$ = 20						; size = 4
_back$ = 24						; size = 4
_b32$ = 28						; size = 1
?Blend8BitTransparent@IMAGE_RSC@@AAEXJJPAGJJ_N@Z PROC	; IMAGE_RSC::Blend8BitTransparent
; _this$ = ecx

; 996  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 997  : 	uchar *sptr,*srcsize;
; 998  : 	WORD *Palette;
; 999  : 	WORD *dptr;
; 1000 : 	DWORD r,g,b;
; 1001 : 	long operc;
; 1002 : 	long i;
; 1003 : 	long dadd;
; 1004 : 
; 1005 : 	operc=front+back;

	mov	eax, DWORD PTR _front$[ebp]
	add	eax, DWORD PTR _back$[ebp]
	mov	DWORD PTR _operc$[ebp], eax

; 1006 : 
; 1007 : 	Palette=(WORD *)(Owner->Data_ + Header->paletteoffset);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx+36]
	add	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR _Palette$[ebp], edx

; 1008 : 	sptr   =(uchar *)(Owner->Data_ + Header->imageoffset);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+36]
	add	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _sptr$[ebp], ecx

; 1009 : 	srcsize=(uchar *)(sptr  + Header->w * Header->h);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	edx, WORD PTR [eax+46]
	imul	ecx, edx
	add	ecx, DWORD PTR _sptr$[ebp]
	mov	DWORD PTR _srcsize$[ebp], ecx

; 1010 : 
; 1011 : 	if( !b32 )

	movzx	eax, BYTE PTR _b32$[ebp]
	test	eax, eax
	jne	SHORT $LN14@Blend8BitT

; 1012 : 	dptr=dest+doffset;

	mov	ecx, DWORD PTR _doffset$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _dptr$[ebp], eax

; 1013 : 	else

	jmp	SHORT $LN13@Blend8BitT
$LN14@Blend8BitT:

; 1014 : 		dptr=dest + doffset*2;

	mov	ecx, DWORD PTR _doffset$[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR _dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _dptr$[ebp], eax
$LN13@Blend8BitT:

; 1015 : 
; 1016 : 	dadd=dwidth - Header->w;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, WORD PTR [edx+44]
	mov	ecx, DWORD PTR _dwidth$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _dadd$[ebp], ecx

; 1017 : 	if(b32)

	movzx	edx, BYTE PTR _b32$[ebp]
	test	edx, edx
	je	SHORT $LN11@Blend8BitT

; 1018 : 		dadd *= 2;//word->dword

	mov	eax, DWORD PTR _dadd$[ebp]
	shl	eax, 1
	mov	DWORD PTR _dadd$[ebp], eax
$LN11@Blend8BitT:

; 1019 : 
; 1020 : 	while(sptr < srcsize)

	mov	ecx, DWORD PTR _sptr$[ebp]
	cmp	ecx, DWORD PTR _srcsize$[ebp]
	jae	$LN15@Blend8BitT

; 1021 : 	{
; 1022 : 		i=Header->w;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	mov	DWORD PTR _i$[ebp], ecx
$LN9@Blend8BitT:

; 1023 : 		while(i--)

	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv135[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	cmp	DWORD PTR tv135[ebp], 0
	je	$LN8@Blend8BitT

; 1024 : 		{
; 1025 : 			if(*sptr)

	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	$LN7@Blend8BitT

; 1026 : 			{
; 1027 : 				WORD dc;  				
; 1028 : 				if(!b32)

	movzx	eax, BYTE PTR _b32$[ebp]
	test	eax, eax
	jne	SHORT $LN6@Blend8BitT

; 1029 : 					dc = *dptr;

	mov	ecx, DWORD PTR _dptr$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR _dc$2[ebp], dx

; 1030 : 				else

	jmp	SHORT $LN5@Blend8BitT
$LN6@Blend8BitT:

; 1031 : 					dc = RGB8toRGB565( *(reinterpret_cast<DWORD*>(dptr)) );

	mov	eax, DWORD PTR _dptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?RGB8toRGB565@@YAGK@Z			; RGB8toRGB565
	add	esp, 4
	mov	WORD PTR _dc$2[ebp], ax
$LN5@Blend8BitT:

; 1032 : 
; 1033 : 
; 1034 : 				r=rShift[UIColorTable[operc][
; 1035 : 					UIColorTable[front][(Palette[*sptr] >> Owner->reds) & 0x1f]+
; 1036 : 					UIColorTable[back][(dc >> Owner->reds) & 0x1f]
; 1037 : 					]];

	mov	edx, DWORD PTR _operc$[ebp]
	shl	edx, 9
	mov	eax, DWORD PTR _front$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	ecx, BYTE PTR [ecx]
	mov	esi, DWORD PTR _Palette$[ebp]
	movzx	esi, WORD PTR [esi+ecx*2]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+16]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	eax, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	movzx	edi, WORD PTR _dc$2[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+16]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	eax, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+eax*2]
	movzx	eax, WORD PTR ?rShift@@3PAGA[edx*2]
	mov	DWORD PTR _r$[ebp], eax

; 1038 : 
; 1039 : 				g=gShift[UIColorTable[operc][
; 1040 : 					UIColorTable[front][(Palette[*sptr] >> Owner->greens) & 0x1f]+
; 1041 : 					UIColorTable[back][(dc >> Owner->greens) & 0x1f]
; 1042 : 					]];

	mov	edx, DWORD PTR _operc$[ebp]
	shl	edx, 9
	mov	eax, DWORD PTR _front$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	ecx, BYTE PTR [ecx]
	mov	esi, DWORD PTR _Palette$[ebp]
	movzx	esi, WORD PTR [esi+ecx*2]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+18]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	eax, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	movzx	edi, WORD PTR _dc$2[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+18]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	eax, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+eax*2]
	movzx	eax, WORD PTR ?gShift@@3PAGA[edx*2]
	mov	DWORD PTR _g$[ebp], eax

; 1043 : 
; 1044 : 				b=bShift[UIColorTable[operc][
; 1045 : 					UIColorTable[front][(Palette[*sptr] >> Owner->blues) & 0x1f]+
; 1046 : 					UIColorTable[back][(dc >> Owner->blues) & 0x1f]
; 1047 : 					]];

	mov	edx, DWORD PTR _operc$[ebp]
	shl	edx, 9
	mov	eax, DWORD PTR _front$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	ecx, BYTE PTR [ecx]
	mov	esi, DWORD PTR _Palette$[ebp]
	movzx	esi, WORD PTR [esi+ecx*2]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+20]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	eax, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	movzx	edi, WORD PTR _dc$2[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+20]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	eax, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+eax*2]
	movzx	eax, WORD PTR ?bShift@@3PAGA[edx*2]
	mov	DWORD PTR _b$[ebp], eax

; 1048 : 
; 1049 : 				sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sptr$[ebp], ecx

; 1050 : 
; 1051 : 				if(!b32 )

	movzx	edx, BYTE PTR _b32$[ebp]
	test	edx, edx
	jne	SHORT $LN4@Blend8BitT

; 1052 : 				*dptr++=static_cast<WORD>(r|g|b);

	mov	eax, DWORD PTR _r$[ebp]
	or	eax, DWORD PTR _g$[ebp]
	or	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _dptr$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _dptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _dptr$[ebp], edx

; 1053 : 				else

	jmp	SHORT $LN3@Blend8BitT
$LN4@Blend8BitT:

; 1054 : 				{
; 1055 : 					DWORD dc = RGB565toRGB8( static_cast<WORD>(r|g|b) );

	mov	eax, DWORD PTR _r$[ebp]
	or	eax, DWORD PTR _g$[ebp]
	or	eax, DWORD PTR _b$[ebp]
	push	eax
	call	?RGB565toRGB8@@YAKG@Z			; RGB565toRGB8
	add	esp, 4
	mov	DWORD PTR _dc$1[ebp], eax

; 1056 : 					*(reinterpret_cast<DWORD*>(dptr)) = dc;

	mov	ecx, DWORD PTR _dptr$[ebp]
	mov	edx, DWORD PTR _dc$1[ebp]
	mov	DWORD PTR [ecx], edx

; 1057 : 					dptr += 2;

	mov	eax, DWORD PTR _dptr$[ebp]
	add	eax, 4
	mov	DWORD PTR _dptr$[ebp], eax
$LN3@Blend8BitT:

; 1058 : 				}
; 1059 : 			}
; 1060 : 			else

	jmp	SHORT $LN2@Blend8BitT
$LN7@Blend8BitT:

; 1061 : 			{
; 1062 : 				sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sptr$[ebp], ecx

; 1063 : 				
; 1064 : 				dptr++;

	mov	edx, DWORD PTR _dptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _dptr$[ebp], edx

; 1065 : 				if(b32) dptr++;

	movzx	eax, BYTE PTR _b32$[ebp]
	test	eax, eax
	je	SHORT $LN2@Blend8BitT
	mov	ecx, DWORD PTR _dptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _dptr$[ebp], ecx
$LN2@Blend8BitT:

; 1066 : 			}
; 1067 : 		}

	jmp	$LN9@Blend8BitT
$LN8@Blend8BitT:

; 1068 : 
; 1069 : 		dptr+=dadd;

	mov	edx, DWORD PTR _dadd$[ebp]
	mov	eax, DWORD PTR _dptr$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _dptr$[ebp], ecx

; 1070 : 	}

	jmp	$LN11@Blend8BitT
$LN15@Blend8BitT:

; 1071 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Blend8BitTransparent@IMAGE_RSC@@AAEXJJPAGJJ_N@Z ENDP	; IMAGE_RSC::Blend8BitTransparent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
tv84 = -40						; size = 4
_Palette$ = -36						; size = 4
_operc$ = -32						; size = 4
_count$ = -28						; size = 4
_sptr$ = -24						; size = 4
_dptr$ = -20						; size = 4
_this$ = -16						; size = 4
_b$ = -12						; size = 2
_g$ = -8						; size = 2
_r$ = -4						; size = 2
_dest$ = 8						; size = 4
_front$ = 12						; size = 4
_back$ = 16						; size = 4
?Blend8BitTransparentFast@IMAGE_RSC@@AAEXPAGJJ@Z PROC	; IMAGE_RSC::Blend8BitTransparentFast
; _this$ = ecx

; 835  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 836  : 	unsigned char *sptr;
; 837  : 	WORD *Palette;
; 838  : 	WORD *dptr;
; 839  : 	long count;
; 840  : 	WORD r,g,b;
; 841  : 	long operc;
; 842  : 
; 843  : 	operc=front+back;

	mov	eax, DWORD PTR _front$[ebp]
	add	eax, DWORD PTR _back$[ebp]
	mov	DWORD PTR _operc$[ebp], eax

; 844  : 
; 845  : 	Palette=(WORD *)(Owner->Data_ + Header->paletteoffset);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx+36]
	add	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR _Palette$[ebp], edx

; 846  : 	sptr=(unsigned char *)(Owner->Data_ + Header->imageoffset);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+36]
	add	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _sptr$[ebp], ecx

; 847  : 	dptr=dest;

	mov	edx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _dptr$[ebp], edx

; 848  : 	count=Header->w*Header->h;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, WORD PTR [ecx+44]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	eax, WORD PTR [ecx+46]
	imul	edx, eax
	mov	DWORD PTR _count$[ebp], edx
$LN4@Blend8BitT:

; 849  : 
; 850  : 	while(count--)

	mov	ecx, DWORD PTR _count$[ebp]
	mov	DWORD PTR tv84[ebp], ecx
	mov	edx, DWORD PTR _count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _count$[ebp], edx
	cmp	DWORD PTR tv84[ebp], 0
	je	$LN5@Blend8BitT

; 851  : 	{
; 852  : 		if(*sptr)

	mov	eax, DWORD PTR _sptr$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN2@Blend8BitT

; 853  : 		{
; 854  : 			r=rShift[UIColorTable[operc][
; 855  : 				UIColorTable[front][(Palette[*sptr] >> Owner->reds) & 0x1f]+
; 856  : 				UIColorTable[back][(*dptr >> Owner->reds) & 0x1f]
; 857  : 				]];

	mov	edx, DWORD PTR _operc$[ebp]
	shl	edx, 9
	mov	eax, DWORD PTR _front$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	ecx, BYTE PTR [ecx]
	mov	esi, DWORD PTR _Palette$[ebp]
	movzx	esi, WORD PTR [esi+ecx*2]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+16]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	eax, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	mov	ecx, DWORD PTR _dptr$[ebp]
	movzx	edi, WORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+16]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	eax, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+eax*2]
	mov	ax, WORD PTR ?rShift@@3PAGA[edx*2]
	mov	WORD PTR _r$[ebp], ax

; 858  : 
; 859  : 			g=gShift[UIColorTable[operc][
; 860  : 				UIColorTable[front][(Palette[*sptr] >> Owner->greens) & 0x1f]+
; 861  : 				UIColorTable[back][(*dptr >> Owner->greens) & 0x1f]
; 862  : 				]];

	mov	edx, DWORD PTR _operc$[ebp]
	shl	edx, 9
	mov	eax, DWORD PTR _front$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	ecx, BYTE PTR [ecx]
	mov	esi, DWORD PTR _Palette$[ebp]
	movzx	esi, WORD PTR [esi+ecx*2]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+18]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	eax, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	mov	ecx, DWORD PTR _dptr$[ebp]
	movzx	edi, WORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+18]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	eax, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+eax*2]
	mov	ax, WORD PTR ?gShift@@3PAGA[edx*2]
	mov	WORD PTR _g$[ebp], ax

; 863  : 
; 864  : 			b=bShift[UIColorTable[operc][
; 865  : 				UIColorTable[front][(Palette[*sptr] >> Owner->blues) & 0x1f]+
; 866  : 				UIColorTable[back][(*dptr >> Owner->blues) & 0x1f]
; 867  : 				]];

	mov	edx, DWORD PTR _operc$[ebp]
	shl	edx, 9
	mov	eax, DWORD PTR _front$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	ecx, BYTE PTR [ecx]
	mov	esi, DWORD PTR _Palette$[ebp]
	movzx	esi, WORD PTR [esi+ecx*2]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+20]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	eax, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	mov	ecx, DWORD PTR _dptr$[ebp]
	movzx	edi, WORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+20]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	eax, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+eax*2]
	mov	ax, WORD PTR ?bShift@@3PAGA[edx*2]
	mov	WORD PTR _b$[ebp], ax

; 868  : 			*dptr++=static_cast<WORD>(r|g|b);

	movzx	ecx, WORD PTR _r$[ebp]
	movzx	edx, WORD PTR _g$[ebp]
	or	ecx, edx
	movzx	eax, WORD PTR _b$[ebp]
	or	ecx, eax
	mov	edx, DWORD PTR _dptr$[ebp]
	mov	WORD PTR [edx], cx
	mov	eax, DWORD PTR _dptr$[ebp]
	add	eax, 2
	mov	DWORD PTR _dptr$[ebp], eax

; 869  : 		}
; 870  : 		else

	jmp	SHORT $LN1@Blend8BitT
$LN2@Blend8BitT:

; 871  : 			dptr++;

	mov	ecx, DWORD PTR _dptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _dptr$[ebp], ecx
$LN1@Blend8BitT:

; 872  : 		sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx

; 873  : 	}

	jmp	$LN4@Blend8BitT
$LN5@Blend8BitT:

; 874  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Blend8BitTransparentFast@IMAGE_RSC@@AAEXPAGJJ@Z ENDP	; IMAGE_RSC::Blend8BitTransparentFast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
tv129 = -56						; size = 4
_srcsize$ = -52						; size = 4
_dadd$ = -48						; size = 4
_b$ = -44						; size = 4
_g$ = -40						; size = 4
_r$ = -36						; size = 4
_Palette$ = -32						; size = 4
_operc$ = -28						; size = 4
_i$ = -24						; size = 4
_dptr2$ = -20						; size = 4
_dptr$ = -16						; size = 4
_sptr$ = -12						; size = 4
_this$ = -8						; size = 4
_dc$1 = -4						; size = 2
_doffset$ = 8						; size = 4
_dwidth$ = 12						; size = 4
_dest$ = 16						; size = 4
_front$ = 20						; size = 4
_back$ = 24						; size = 4
_b32$ = 28						; size = 1
?Blend8Bit@IMAGE_RSC@@AAEXJJPAGJJ_N@Z PROC		; IMAGE_RSC::Blend8Bit
; _this$ = ecx

; 926  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 927  : 	uchar *sptr,*srcsize;
; 928  : 	WORD *Palette;
; 929  : 	WORD *dptr;
; 930  : 	DWORD r,g,b;
; 931  : 	long operc;
; 932  : 	long i;
; 933  : 	long dadd;
; 934  : 	DWORD* dptr2;
; 935  : 
; 936  : 	operc=front+back;

	mov	eax, DWORD PTR _front$[ebp]
	add	eax, DWORD PTR _back$[ebp]
	mov	DWORD PTR _operc$[ebp], eax

; 937  : 
; 938  : 	Palette=(WORD *)(Owner->Data_ + Header->paletteoffset);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx+36]
	add	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR _Palette$[ebp], edx

; 939  : 	sptr   =(uchar *)(Owner->Data_ + Header->imageoffset);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+36]
	add	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _sptr$[ebp], ecx

; 940  : 	srcsize=(uchar *)(sptr  + Header->w * Header->h);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	edx, WORD PTR [eax+46]
	imul	ecx, edx
	add	ecx, DWORD PTR _sptr$[ebp]
	mov	DWORD PTR _srcsize$[ebp], ecx

; 941  : 
; 942  : 	//word dest	
; 943  : 		dptr = dest+doffset;

	mov	eax, DWORD PTR _doffset$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _dptr$[ebp], edx

; 944  : 
; 945  : 	dadd=dwidth - Header->w;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, WORD PTR [ecx+44]
	mov	eax, DWORD PTR _dwidth$[ebp]
	sub	eax, edx
	mov	DWORD PTR _dadd$[ebp], eax

; 946  : 	//dword
; 947  : 	dptr2 = ((DWORD*)dest) + doffset;

	mov	ecx, DWORD PTR _doffset$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _dptr2$[ebp], eax
$LN8@Blend8Bit:

; 948  : 
; 949  : 	while(sptr < srcsize)

	mov	ecx, DWORD PTR _sptr$[ebp]
	cmp	ecx, DWORD PTR _srcsize$[ebp]
	jae	$LN9@Blend8Bit

; 950  : 	{
; 951  : 		i=Header->w;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	mov	DWORD PTR _i$[ebp], ecx
$LN6@Blend8Bit:

; 952  : 		while(i--)

	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	cmp	DWORD PTR tv129[ebp], 0
	je	$LN5@Blend8Bit

; 953  : 		{
; 954  : 			WORD dc;  				
; 955  : 			if(!b32)

	movzx	ecx, BYTE PTR _b32$[ebp]
	test	ecx, ecx
	jne	SHORT $LN4@Blend8Bit

; 956  : 				dc = *dptr;

	mov	edx, DWORD PTR _dptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR _dc$1[ebp], ax

; 957  : 			else

	jmp	SHORT $LN3@Blend8Bit
$LN4@Blend8Bit:

; 958  : 				dc = RGB8toRGB565( *dptr2 );

	mov	ecx, DWORD PTR _dptr2$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?RGB8toRGB565@@YAGK@Z			; RGB8toRGB565
	add	esp, 4
	mov	WORD PTR _dc$1[ebp], ax
$LN3@Blend8Bit:

; 959  : 
; 960  : 			r=rShift[UIColorTable[operc][
; 961  : 				UIColorTable[front][(Palette[*sptr] >> Owner->reds) & 0x1f]+
; 962  : 				UIColorTable[back][(dc >> Owner->reds) & 0x1f]
; 963  : 				]];

	mov	eax, DWORD PTR _operc$[ebp]
	shl	eax, 9
	mov	edx, DWORD PTR _front$[ebp]
	shl	edx, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	ecx, BYTE PTR [ecx]
	mov	esi, DWORD PTR _Palette$[ebp]
	movzx	esi, WORD PTR [esi+ecx*2]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+16]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	movzx	edi, WORD PTR _dc$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+16]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	edx, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+edx*2]
	movzx	eax, WORD PTR ?rShift@@3PAGA[edx*2]
	mov	DWORD PTR _r$[ebp], eax

; 964  : 
; 965  : 			g=gShift[UIColorTable[operc][
; 966  : 				UIColorTable[front][(Palette[*sptr] >> Owner->greens) & 0x1f]+
; 967  : 				UIColorTable[back][(dc >> Owner->greens) & 0x1f]
; 968  : 				]];

	mov	edx, DWORD PTR _operc$[ebp]
	shl	edx, 9
	mov	eax, DWORD PTR _front$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	ecx, BYTE PTR [ecx]
	mov	esi, DWORD PTR _Palette$[ebp]
	movzx	esi, WORD PTR [esi+ecx*2]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+18]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	eax, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	movzx	edi, WORD PTR _dc$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+18]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	eax, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+eax*2]
	movzx	eax, WORD PTR ?gShift@@3PAGA[edx*2]
	mov	DWORD PTR _g$[ebp], eax

; 969  : 
; 970  : 			b=bShift[UIColorTable[operc][
; 971  : 				UIColorTable[front][(Palette[*sptr] >> Owner->blues) & 0x1f]+
; 972  : 				UIColorTable[back][(dc >> Owner->blues) & 0x1f]
; 973  : 				]];

	mov	edx, DWORD PTR _operc$[ebp]
	shl	edx, 9
	mov	eax, DWORD PTR _front$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	ecx, BYTE PTR [ecx]
	mov	esi, DWORD PTR _Palette$[ebp]
	movzx	esi, WORD PTR [esi+ecx*2]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+20]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	eax, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	movzx	edi, WORD PTR _dc$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+20]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	eax, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+eax*2]
	movzx	eax, WORD PTR ?bShift@@3PAGA[edx*2]
	mov	DWORD PTR _b$[ebp], eax

; 974  : 
; 975  : 			sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sptr$[ebp], ecx

; 976  : 
; 977  : 
; 978  : 			if( !b32 )

	movzx	edx, BYTE PTR _b32$[ebp]
	test	edx, edx
	jne	SHORT $LN2@Blend8Bit

; 979  : 				*dptr = static_cast<WORD>(r|g|b);//565

	mov	eax, DWORD PTR _r$[ebp]
	or	eax, DWORD PTR _g$[ebp]
	or	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _dptr$[ebp]
	mov	WORD PTR [ecx], ax

; 980  : 			else

	jmp	SHORT $LN1@Blend8Bit
$LN2@Blend8Bit:

; 981  : 				*dptr2  = RGB565toRGB8( static_cast<WORD>(r|g|b) );				

	mov	edx, DWORD PTR _r$[ebp]
	or	edx, DWORD PTR _g$[ebp]
	or	edx, DWORD PTR _b$[ebp]
	push	edx
	call	?RGB565toRGB8@@YAKG@Z			; RGB565toRGB8
	add	esp, 4
	mov	ecx, DWORD PTR _dptr2$[ebp]
	mov	DWORD PTR [ecx], eax
$LN1@Blend8Bit:

; 982  : 
; 983  : 			++dptr;

	mov	edx, DWORD PTR _dptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _dptr$[ebp], edx

; 984  : 			++dptr2;

	mov	eax, DWORD PTR _dptr2$[ebp]
	add	eax, 4
	mov	DWORD PTR _dptr2$[ebp], eax

; 985  : 		}

	jmp	$LN6@Blend8Bit
$LN5@Blend8Bit:

; 986  : 
; 987  : 		dptr += dadd;

	mov	ecx, DWORD PTR _dadd$[ebp]
	mov	edx, DWORD PTR _dptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _dptr$[ebp], eax

; 988  : 		dptr2 += dadd;

	mov	ecx, DWORD PTR _dadd$[ebp]
	mov	edx, DWORD PTR _dptr2$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _dptr2$[ebp], eax

; 989  : 	}

	jmp	$LN8@Blend8Bit
$LN9@Blend8Bit:

; 990  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Blend8Bit@IMAGE_RSC@@AAEXJJPAGJJ_N@Z ENDP		; IMAGE_RSC::Blend8Bit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
tv84 = -40						; size = 4
_Palette$ = -36						; size = 4
_operc$ = -32						; size = 4
_count$ = -28						; size = 4
_sptr$ = -24						; size = 4
_dptr$ = -20						; size = 4
_this$ = -16						; size = 4
_b$ = -12						; size = 2
_g$ = -8						; size = 2
_r$ = -4						; size = 2
_dest$ = 8						; size = 4
_front$ = 12						; size = 4
_back$ = 16						; size = 4
?Blend8BitFast@IMAGE_RSC@@AAEXPAGJJ@Z PROC		; IMAGE_RSC::Blend8BitFast
; _this$ = ecx

; 796  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 797  : 	unsigned char *sptr;
; 798  : 	WORD *Palette;
; 799  : 	WORD *dptr;
; 800  : 	long count;
; 801  : 	WORD r,g,b;
; 802  : 	long operc;
; 803  : 
; 804  : 	operc=front+back;

	mov	eax, DWORD PTR _front$[ebp]
	add	eax, DWORD PTR _back$[ebp]
	mov	DWORD PTR _operc$[ebp], eax

; 805  : 
; 806  : 	Palette=(WORD *)(Owner->Data_ + Header->paletteoffset);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx+36]
	add	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR _Palette$[ebp], edx

; 807  : 	sptr=(unsigned char *)(Owner->Data_ + Header->imageoffset);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+36]
	add	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _sptr$[ebp], ecx

; 808  : 	dptr=dest;

	mov	edx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _dptr$[ebp], edx

; 809  : 	count=Header->w*Header->h;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, WORD PTR [ecx+44]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	eax, WORD PTR [ecx+46]
	imul	edx, eax
	mov	DWORD PTR _count$[ebp], edx
$LN2@Blend8BitF:

; 810  : 
; 811  : 	while(count--)

	mov	ecx, DWORD PTR _count$[ebp]
	mov	DWORD PTR tv84[ebp], ecx
	mov	edx, DWORD PTR _count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _count$[ebp], edx
	cmp	DWORD PTR tv84[ebp], 0
	je	$LN3@Blend8BitF

; 812  : 	{
; 813  : 		r=rShift[UIColorTable[operc][
; 814  : 			UIColorTable[front][(Palette[*sptr] >> Owner->reds) & 0x1f]+
; 815  : 			UIColorTable[back][(*dptr >> Owner->reds) & 0x1f]
; 816  : 			]];

	mov	eax, DWORD PTR _operc$[ebp]
	shl	eax, 9
	mov	edx, DWORD PTR _front$[ebp]
	shl	edx, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	ecx, BYTE PTR [ecx]
	mov	esi, DWORD PTR _Palette$[ebp]
	movzx	esi, WORD PTR [esi+ecx*2]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+16]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	mov	ecx, DWORD PTR _dptr$[ebp]
	movzx	edi, WORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+16]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	edx, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+edx*2]
	mov	ax, WORD PTR ?rShift@@3PAGA[edx*2]
	mov	WORD PTR _r$[ebp], ax

; 817  : 
; 818  : 		g=gShift[UIColorTable[operc][
; 819  : 			UIColorTable[front][(Palette[*sptr] >> Owner->greens) & 0x1f]+
; 820  : 			UIColorTable[back][(*dptr >> Owner->greens) & 0x1f]
; 821  : 			]];

	mov	edx, DWORD PTR _operc$[ebp]
	shl	edx, 9
	mov	eax, DWORD PTR _front$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	ecx, BYTE PTR [ecx]
	mov	esi, DWORD PTR _Palette$[ebp]
	movzx	esi, WORD PTR [esi+ecx*2]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+18]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	eax, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	mov	ecx, DWORD PTR _dptr$[ebp]
	movzx	edi, WORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+18]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	eax, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+eax*2]
	mov	ax, WORD PTR ?gShift@@3PAGA[edx*2]
	mov	WORD PTR _g$[ebp], ax

; 822  : 
; 823  : 		b=bShift[UIColorTable[operc][
; 824  : 			UIColorTable[front][(Palette[*sptr] >> Owner->blues) & 0x1f]+
; 825  : 			UIColorTable[back][(*dptr >> Owner->blues) & 0x1f]
; 826  : 			]];

	mov	edx, DWORD PTR _operc$[ebp]
	shl	edx, 9
	mov	eax, DWORD PTR _front$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	ecx, BYTE PTR [ecx]
	mov	esi, DWORD PTR _Palette$[ebp]
	movzx	esi, WORD PTR [esi+ecx*2]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+20]
	sar	esi, cl
	and	esi, 31					; 0000001fH
	movzx	eax, WORD PTR ?UIColorTable@@3PAY0BAA@GA[eax+esi*2]
	mov	esi, DWORD PTR _back$[ebp]
	shl	esi, 9
	mov	ecx, DWORD PTR _dptr$[ebp]
	movzx	edi, WORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, WORD PTR [ecx+20]
	sar	edi, cl
	and	edi, 31					; 0000001fH
	movzx	ecx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[esi+edi*2]
	add	eax, ecx
	movzx	edx, WORD PTR ?UIColorTable@@3PAY0BAA@GA[edx+eax*2]
	mov	ax, WORD PTR ?bShift@@3PAGA[edx*2]
	mov	WORD PTR _b$[ebp], ax

; 827  : 
; 828  : 		sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sptr$[ebp], ecx

; 829  : 		*dptr++=static_cast<WORD>(r|g|b);

	movzx	edx, WORD PTR _r$[ebp]
	movzx	eax, WORD PTR _g$[ebp]
	or	edx, eax
	movzx	ecx, WORD PTR _b$[ebp]
	or	edx, ecx
	mov	eax, DWORD PTR _dptr$[ebp]
	mov	WORD PTR [eax], dx
	mov	ecx, DWORD PTR _dptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _dptr$[ebp], ecx

; 830  : 	}

	jmp	$LN2@Blend8BitF
$LN3@Blend8BitF:

; 831  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Blend8BitFast@IMAGE_RSC@@AAEXPAGJJ@Z ENDP		; IMAGE_RSC::Blend8BitFast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
_dadd$ = -44						; size = 4
_sadd$ = -40						; size = 4
_dc$ = -36						; size = 4
_Palette$ = -32						; size = 4
tv91 = -28						; size = 4
_srcsize$ = -24						; size = 4
_i$ = -20						; size = 4
_dptr$ = -16						; size = 4
_this$ = -12						; size = 4
_sptr$ = -8						; size = 4
_sc$ = -4						; size = 2
_soffset$ = 8						; size = 4
_scopy$ = 12						; size = 4
_ssize$ = 16						; size = 4
_doffset$ = 20						; size = 4
_dwidth$ = 24						; size = 4
_dest$ = 28						; size = 4
?_Blit8BitTransparentPartTo32@IMAGE_RSC@@AAEXJJJJJPAK@Z PROC ; IMAGE_RSC::_Blit8BitTransparentPartTo32
; _this$ = ecx

; 328  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 329  : 	uchar *sptr,*srcsize;
; 330  : 	WORD *Palette;
; 331  : 	DWORD *dptr;
; 332  : 	long i;
; 333  : 	long sadd,dadd;
; 334  : 	WORD sc;
; 335  : 	DWORD dc;
; 336  : 
; 337  : 	Palette=(WORD *)(Owner->Data_ + Header->paletteoffset);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+36]
	add	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _Palette$[ebp], ecx

; 338  : 	sptr   =(uchar *)(Owner->Data_ + Header->imageoffset + soffset);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax+36]
	add	eax, DWORD PTR [edx+48]
	add	eax, DWORD PTR _soffset$[ebp]
	mov	DWORD PTR _sptr$[ebp], eax

; 339  : 	srcsize=(uchar *)(Owner->Data_ + Header->imageoffset + ssize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx+36]
	add	edx, DWORD PTR [ecx+48]
	add	edx, DWORD PTR _ssize$[ebp]
	mov	DWORD PTR _srcsize$[ebp], edx

; 340  : 	dptr=dest+doffset;

	mov	eax, DWORD PTR _doffset$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _dptr$[ebp], edx

; 341  : 
; 342  : 	sadd=Header->w - scopy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, WORD PTR [ecx+44]
	sub	edx, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _sadd$[ebp], edx

; 343  : 	dadd=dwidth - scopy;

	mov	eax, DWORD PTR _dwidth$[ebp]
	sub	eax, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _dadd$[ebp], eax
$LN6@Blit8BitTr:

; 344  : 	while(sptr < srcsize)

	mov	ecx, DWORD PTR _sptr$[ebp]
	cmp	ecx, DWORD PTR _srcsize$[ebp]
	jae	$LN7@Blit8BitTr

; 345  : 	{
; 346  : 		i=scopy;

	mov	edx, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _i$[ebp], edx
$LN4@Blit8BitTr:

; 347  : 		while(i--)

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv91[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	cmp	DWORD PTR tv91[ebp], 0
	je	SHORT $LN3@Blit8BitTr

; 348  : 		{
; 349  : 			if(*sptr)

	mov	edx, DWORD PTR _sptr$[ebp]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN2@Blit8BitTr

; 350  : 			{
; 351  : 				//*dptr++=Palette[*sptr++];
; 352  : 				sc = Palette[*sptr++];

	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _Palette$[ebp]
	mov	cx, WORD PTR [eax+edx*2]
	mov	WORD PTR _sc$[ebp], cx
	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx

; 353  : 				dc = RGB565toRGB8( sc );

	movzx	eax, WORD PTR _sc$[ebp]
	push	eax
	call	?RGB565toRGB8@@YAKG@Z			; RGB565toRGB8
	add	esp, 4
	mov	DWORD PTR _dc$[ebp], eax

; 354  : 				*dptr++ = dc;

	mov	ecx, DWORD PTR _dptr$[ebp]
	mov	edx, DWORD PTR _dc$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _dptr$[ebp]
	add	eax, 4
	mov	DWORD PTR _dptr$[ebp], eax

; 355  : 			}
; 356  : 			else

	jmp	SHORT $LN1@Blit8BitTr
$LN2@Blit8BitTr:

; 357  : 			{
; 358  : 				sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sptr$[ebp], ecx

; 359  : 				dptr++;

	mov	edx, DWORD PTR _dptr$[ebp]
	add	edx, 4
	mov	DWORD PTR _dptr$[ebp], edx
$LN1@Blit8BitTr:

; 360  : 			}
; 361  : 		}

	jmp	SHORT $LN4@Blit8BitTr
$LN3@Blit8BitTr:

; 362  : 		sptr+=sadd;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, DWORD PTR _sadd$[ebp]
	mov	DWORD PTR _sptr$[ebp], eax

; 363  : 		dptr+=dadd;

	mov	ecx, DWORD PTR _dadd$[ebp]
	mov	edx, DWORD PTR _dptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _dptr$[ebp], eax

; 364  : 	}

	jmp	$LN6@Blit8BitTr
$LN7@Blit8BitTr:

; 365  : }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?_Blit8BitTransparentPartTo32@IMAGE_RSC@@AAEXJJJJJPAK@Z ENDP ; IMAGE_RSC::_Blit8BitTransparentPartTo32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
_dadd$ = -44						; size = 4
_sadd$ = -40						; size = 4
_dc$ = -36						; size = 4
_Palette$ = -32						; size = 4
tv91 = -28						; size = 4
_srcsize$ = -24						; size = 4
_i$ = -20						; size = 4
_dptr$ = -16						; size = 4
_sptr$ = -12						; size = 4
_this$ = -8						; size = 4
_sc$ = -4						; size = 2
_soffset$ = 8						; size = 4
_scopy$ = 12						; size = 4
_ssize$ = 16						; size = 4
_doffset$ = 20						; size = 4
_dwidth$ = 24						; size = 4
_dest$ = 28						; size = 4
?_Blit8BitPartTo32@IMAGE_RSC@@AAEXJJJJJPAK@Z PROC	; IMAGE_RSC::_Blit8BitPartTo32
; _this$ = ecx

; 295  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 296  : 	uchar *sptr,*srcsize;
; 297  : 	WORD *Palette;
; 298  : 	DWORD *dptr;
; 299  : 	long i;
; 300  : 	long sadd,dadd;
; 301  : 	WORD sc;
; 302  : 	DWORD dc;
; 303  : 
; 304  : 	Palette=(WORD *)(Owner->Data_ + Header->paletteoffset);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+36]
	add	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _Palette$[ebp], ecx

; 305  : 	sptr   =(uchar *)(Owner->Data_ + Header->imageoffset + soffset);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax+36]
	add	eax, DWORD PTR [edx+48]
	add	eax, DWORD PTR _soffset$[ebp]
	mov	DWORD PTR _sptr$[ebp], eax

; 306  : 	srcsize=(uchar *)(Owner->Data_ + Header->imageoffset + ssize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx+36]
	add	edx, DWORD PTR [ecx+48]
	add	edx, DWORD PTR _ssize$[ebp]
	mov	DWORD PTR _srcsize$[ebp], edx

; 307  : 	dptr=dest+doffset;

	mov	eax, DWORD PTR _doffset$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _dptr$[ebp], edx

; 308  : 
; 309  : 	sadd=Header->w - scopy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, WORD PTR [ecx+44]
	sub	edx, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _sadd$[ebp], edx

; 310  : 	dadd=dwidth - scopy;

	mov	eax, DWORD PTR _dwidth$[ebp]
	sub	eax, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _dadd$[ebp], eax
$LN4@Blit8BitPa:

; 311  : 	while(sptr < srcsize)

	mov	ecx, DWORD PTR _sptr$[ebp]
	cmp	ecx, DWORD PTR _srcsize$[ebp]
	jae	SHORT $LN5@Blit8BitPa

; 312  : 	{
; 313  : 		i=scopy;

	mov	edx, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _i$[ebp], edx
$LN2@Blit8BitPa:

; 314  : 		while(i--)

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv91[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	cmp	DWORD PTR tv91[ebp], 0
	je	SHORT $LN1@Blit8BitPa

; 315  : 		{
; 316  : 			//	*dptr++=Palette[*sptr++];
; 317  : 			sc = Palette[*sptr++];

	mov	edx, DWORD PTR _sptr$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _Palette$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _sc$[ebp], dx
	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax

; 318  : 			dc = RGB565toRGB8( sc );

	movzx	ecx, WORD PTR _sc$[ebp]
	push	ecx
	call	?RGB565toRGB8@@YAKG@Z			; RGB565toRGB8
	add	esp, 4
	mov	DWORD PTR _dc$[ebp], eax

; 319  : 			*dptr++ = dc;

	mov	edx, DWORD PTR _dptr$[ebp]
	mov	eax, DWORD PTR _dc$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _dptr$[ebp]
	add	ecx, 4
	mov	DWORD PTR _dptr$[ebp], ecx

; 320  : 		}

	jmp	SHORT $LN2@Blit8BitPa
$LN1@Blit8BitPa:

; 321  : 		sptr+=sadd;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, DWORD PTR _sadd$[ebp]
	mov	DWORD PTR _sptr$[ebp], edx

; 322  : 		dptr+=dadd;

	mov	eax, DWORD PTR _dadd$[ebp]
	mov	ecx, DWORD PTR _dptr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _dptr$[ebp], edx

; 323  : 	}

	jmp	SHORT $LN4@Blit8BitPa
$LN5@Blit8BitPa:

; 324  : }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?_Blit8BitPartTo32@IMAGE_RSC@@AAEXJJJJJPAK@Z ENDP	; IMAGE_RSC::_Blit8BitPartTo32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
_dadd$ = -40						; size = 4
_dc$ = -36						; size = 4
_Palette$ = -32						; size = 4
tv94 = -28						; size = 4
_srcsize$ = -24						; size = 4
_i$ = -20						; size = 4
_dptr$ = -16						; size = 4
_sptr$ = -12						; size = 4
_this$ = -8						; size = 4
_sc$ = -4						; size = 2
_doffset$ = 8						; size = 4
_dwidth$ = 12						; size = 4
_dest$ = 16						; size = 4
?_Blit8BitTransparentTo32@IMAGE_RSC@@AAEXJJPAK@Z PROC	; IMAGE_RSC::_Blit8BitTransparentTo32
; _this$ = ecx

; 255  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 256  : 	uchar *sptr,*srcsize;
; 257  : 	WORD *Palette;
; 258  : 	DWORD *dptr;
; 259  : 	long i;
; 260  : 	long dadd;
; 261  : 	WORD sc;
; 262  : 	DWORD dc;
; 263  : 
; 264  : 
; 265  : 	Palette=(WORD *)(Owner->Data_ + Header->paletteoffset);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+36]
	add	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _Palette$[ebp], ecx

; 266  : 	sptr   =(uchar *)(Owner->Data_ + Header->imageoffset);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax+36]
	add	eax, DWORD PTR [edx+48]
	mov	DWORD PTR _sptr$[ebp], eax

; 267  : 	srcsize=(uchar *)(sptr  + Header->w * Header->h);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, WORD PTR [edx+44]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	ecx, WORD PTR [edx+46]
	imul	eax, ecx
	add	eax, DWORD PTR _sptr$[ebp]
	mov	DWORD PTR _srcsize$[ebp], eax

; 268  : 	dptr=dest+doffset;

	mov	edx, DWORD PTR _doffset$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _dptr$[ebp], ecx

; 269  : 
; 270  : 	dadd=dwidth - Header->w;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	mov	edx, DWORD PTR _dwidth$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _dadd$[ebp], edx
$LN6@Blit8BitTr:

; 271  : 	while(sptr < srcsize)

	mov	eax, DWORD PTR _sptr$[ebp]
	cmp	eax, DWORD PTR _srcsize$[ebp]
	jae	$LN7@Blit8BitTr

; 272  : 	{
; 273  : 		i=Header->w;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, WORD PTR [edx+44]
	mov	DWORD PTR _i$[ebp], eax
$LN4@Blit8BitTr:

; 274  : 		while(i--)

	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv94[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	cmp	DWORD PTR tv94[ebp], 0
	je	SHORT $LN3@Blit8BitTr

; 275  : 		{
; 276  : 			if(*sptr)

	mov	eax, DWORD PTR _sptr$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@Blit8BitTr

; 277  : 			{
; 278  : 				//*dptr++=Palette[*sptr++];
; 279  : 				sc = Palette[*sptr++];

	mov	edx, DWORD PTR _sptr$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _Palette$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _sc$[ebp], dx
	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax

; 280  : 				dc = RGB565toRGB8( sc );

	movzx	ecx, WORD PTR _sc$[ebp]
	push	ecx
	call	?RGB565toRGB8@@YAKG@Z			; RGB565toRGB8
	add	esp, 4
	mov	DWORD PTR _dc$[ebp], eax

; 281  : 				*dptr++ = dc;

	mov	edx, DWORD PTR _dptr$[ebp]
	mov	eax, DWORD PTR _dc$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _dptr$[ebp]
	add	ecx, 4
	mov	DWORD PTR _dptr$[ebp], ecx

; 282  : 			}
; 283  : 			else

	jmp	SHORT $LN1@Blit8BitTr
$LN2@Blit8BitTr:

; 284  : 			{
; 285  : 				sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx

; 286  : 				dptr++;

	mov	eax, DWORD PTR _dptr$[ebp]
	add	eax, 4
	mov	DWORD PTR _dptr$[ebp], eax
$LN1@Blit8BitTr:

; 287  : 			}
; 288  : 		}

	jmp	SHORT $LN4@Blit8BitTr
$LN3@Blit8BitTr:

; 289  : 		dptr+=dadd;

	mov	ecx, DWORD PTR _dadd$[ebp]
	mov	edx, DWORD PTR _dptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _dptr$[ebp], eax

; 290  : 	}

	jmp	$LN6@Blit8BitTr
$LN7@Blit8BitTr:

; 291  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Blit8BitTransparentTo32@IMAGE_RSC@@AAEXJJPAK@Z ENDP	; IMAGE_RSC::_Blit8BitTransparentTo32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
_dadd$ = -40						; size = 4
_dc$ = -36						; size = 4
_Palette$ = -32						; size = 4
tv94 = -28						; size = 4
_srcsize$ = -24						; size = 4
_i$ = -20						; size = 4
_dptr$ = -16						; size = 4
_sptr$ = -12						; size = 4
_this$ = -8						; size = 4
_sc$ = -4						; size = 2
_doffset$ = 8						; size = 4
_dwidth$ = 12						; size = 4
_dest$ = 16						; size = 4
?_Blit8BitTo32@IMAGE_RSC@@AAEXJJPAK@Z PROC		; IMAGE_RSC::_Blit8BitTo32
; _this$ = ecx

; 223  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 224  : 	uchar *sptr,*srcsize;
; 225  : 	WORD *Palette;
; 226  : 	DWORD *dptr;
; 227  : 	long i;
; 228  : 	long dadd;
; 229  : 	WORD sc;
; 230  : 	DWORD dc;
; 231  : 
; 232  : 	Palette=(WORD *)(Owner->Data_ + Header->paletteoffset);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+36]
	add	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _Palette$[ebp], ecx

; 233  : 	sptr   =(uchar *)(Owner->Data_ + Header->imageoffset);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax+36]
	add	eax, DWORD PTR [edx+48]
	mov	DWORD PTR _sptr$[ebp], eax

; 234  : 	srcsize=(uchar *)(sptr  + Header->w * Header->h);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, WORD PTR [edx+44]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	ecx, WORD PTR [edx+46]
	imul	eax, ecx
	add	eax, DWORD PTR _sptr$[ebp]
	mov	DWORD PTR _srcsize$[ebp], eax

; 235  : 	dptr=dest+doffset;

	mov	edx, DWORD PTR _doffset$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _dptr$[ebp], ecx

; 236  : 
; 237  : 	dadd=dwidth - Header->w;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	mov	edx, DWORD PTR _dwidth$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _dadd$[ebp], edx
$LN4@Blit8BitTo:

; 238  : 	while(sptr < srcsize)

	mov	eax, DWORD PTR _sptr$[ebp]
	cmp	eax, DWORD PTR _srcsize$[ebp]
	jae	SHORT $LN5@Blit8BitTo

; 239  : 	{
; 240  : 		i=Header->w;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, WORD PTR [edx+44]
	mov	DWORD PTR _i$[ebp], eax
$LN2@Blit8BitTo:

; 241  : 		while(i--)

	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv94[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	cmp	DWORD PTR tv94[ebp], 0
	je	SHORT $LN1@Blit8BitTo

; 242  : 		{
; 243  : 			 sc = Palette[ *sptr++ ];

	mov	eax, DWORD PTR _sptr$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _Palette$[ebp]
	mov	ax, WORD PTR [edx+ecx*2]
	mov	WORD PTR _sc$[ebp], ax
	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sptr$[ebp], ecx

; 244  : 
; 245  : 			 dc = RGB565toRGB8( sc );

	movzx	edx, WORD PTR _sc$[ebp]
	push	edx
	call	?RGB565toRGB8@@YAKG@Z			; RGB565toRGB8
	add	esp, 4
	mov	DWORD PTR _dc$[ebp], eax

; 246  : 
; 247  : 			 *dptr++ = dc;

	mov	eax, DWORD PTR _dptr$[ebp]
	mov	ecx, DWORD PTR _dc$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _dptr$[ebp]
	add	edx, 4
	mov	DWORD PTR _dptr$[ebp], edx

; 248  : 		}

	jmp	SHORT $LN2@Blit8BitTo
$LN1@Blit8BitTo:

; 249  : 		dptr+=dadd;

	mov	eax, DWORD PTR _dadd$[ebp]
	mov	ecx, DWORD PTR _dptr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _dptr$[ebp], edx

; 250  : 	}

	jmp	SHORT $LN4@Blit8BitTo
$LN5@Blit8BitTo:

; 251  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Blit8BitTo32@IMAGE_RSC@@AAEXJJPAK@Z ENDP		; IMAGE_RSC::_Blit8BitTo32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
_dadd$ = -40						; size = 4
_sadd$ = -36						; size = 4
_dc$ = -32						; size = 4
tv88 = -28						; size = 4
_srcsize$ = -24						; size = 4
_i$ = -20						; size = 4
_this$ = -16						; size = 4
_dptr$ = -12						; size = 4
_sptr$ = -8						; size = 4
_sc$ = -4						; size = 2
_soffset$ = 8						; size = 4
_scopy$ = 12						; size = 4
_ssize$ = 16						; size = 4
_doffset$ = 20						; size = 4
_dwidth$ = 24						; size = 4
_dest$ = 28						; size = 4
?_Blit16BitTransparentPartTo32@IMAGE_RSC@@AAEXJJJJJPAK@Z PROC ; IMAGE_RSC::_Blit16BitTransparentPartTo32
; _this$ = ecx

; 606  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 	WORD *sptr,*srcsize;
; 608  : 	DWORD *dptr;
; 609  : 	long i;
; 610  : 	long sadd,dadd;
; 611  : 	WORD sc;
; 612  : 	DWORD dc;
; 613  : 
; 614  : 	sptr   =(WORD *)(Owner->Data_ + Header->imageoffset) + soffset;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+36]
	add	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _soffset$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR _sptr$[ebp], eax

; 615  : 	srcsize=(WORD *)(Owner->Data_ + Header->imageoffset) + ssize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx+36]
	add	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR _ssize$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	DWORD PTR _srcsize$[ebp], ecx

; 616  : 	dptr=dest+doffset;

	mov	edx, DWORD PTR _doffset$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _dptr$[ebp], ecx

; 617  : 
; 618  : 	sadd=Header->w - scopy;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	sub	ecx, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _sadd$[ebp], ecx

; 619  : 	dadd=dwidth - scopy;

	mov	edx, DWORD PTR _dwidth$[ebp]
	sub	edx, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _dadd$[ebp], edx
$LN6@Blit16BitT:

; 620  : 	while(sptr < srcsize)

	mov	eax, DWORD PTR _sptr$[ebp]
	cmp	eax, DWORD PTR _srcsize$[ebp]
	jae	$LN7@Blit16BitT

; 621  : 	{
; 622  : 		i=scopy;

	mov	ecx, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
$LN4@Blit16BitT:

; 623  : 		while(i--)

	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv88[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	cmp	DWORD PTR tv88[ebp], 0
	je	SHORT $LN3@Blit16BitT

; 624  : 		{
; 625  : 			if(*sptr ^ Owner->ColorKey_)

	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	eax, WORD PTR [ecx+40]
	xor	edx, eax
	je	SHORT $LN2@Blit16BitT

; 626  : 			{
; 627  : 				//*dptr++=*sptr++;
; 628  : 				sc = *sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR _sc$[ebp], dx
	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 2
	mov	DWORD PTR _sptr$[ebp], eax

; 629  : 				dc = RGB565toRGB8( sc );

	movzx	ecx, WORD PTR _sc$[ebp]
	push	ecx
	call	?RGB565toRGB8@@YAKG@Z			; RGB565toRGB8
	add	esp, 4
	mov	DWORD PTR _dc$[ebp], eax

; 630  : 				*dptr++ = dc;

	mov	edx, DWORD PTR _dptr$[ebp]
	mov	eax, DWORD PTR _dc$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _dptr$[ebp]
	add	ecx, 4
	mov	DWORD PTR _dptr$[ebp], ecx

; 631  : 
; 632  : 			}
; 633  : 			else

	jmp	SHORT $LN1@Blit16BitT
$LN2@Blit16BitT:

; 634  : 			{
; 635  : 				sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _sptr$[ebp], edx

; 636  : 				dptr++;

	mov	eax, DWORD PTR _dptr$[ebp]
	add	eax, 4
	mov	DWORD PTR _dptr$[ebp], eax
$LN1@Blit16BitT:

; 637  : 			}
; 638  : 		}

	jmp	SHORT $LN4@Blit16BitT
$LN3@Blit16BitT:

; 639  : 		sptr+=sadd;

	mov	ecx, DWORD PTR _sadd$[ebp]
	mov	edx, DWORD PTR _sptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _sptr$[ebp], eax

; 640  : 		dptr+=dadd;

	mov	ecx, DWORD PTR _dadd$[ebp]
	mov	edx, DWORD PTR _dptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _dptr$[ebp], eax

; 641  : 	}

	jmp	$LN6@Blit16BitT
$LN7@Blit16BitT:

; 642  : }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?_Blit16BitTransparentPartTo32@IMAGE_RSC@@AAEXJJJJJPAK@Z ENDP ; IMAGE_RSC::_Blit16BitTransparentPartTo32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
_dadd$ = -40						; size = 4
_sadd$ = -36						; size = 4
_dc$ = -32						; size = 4
tv88 = -28						; size = 4
_srcsize$ = -24						; size = 4
_i$ = -20						; size = 4
_dptr$ = -16						; size = 4
_this$ = -12						; size = 4
_sptr$ = -8						; size = 4
_sc$ = -4						; size = 2
_soffset$ = 8						; size = 4
_scopy$ = 12						; size = 4
_ssize$ = 16						; size = 4
_doffset$ = 20						; size = 4
_dwidth$ = 24						; size = 4
_dest$ = 28						; size = 4
?_Blit16BitPartTo32@IMAGE_RSC@@AAEXJJJJJPAK@Z PROC	; IMAGE_RSC::_Blit16BitPartTo32
; _this$ = ecx

; 571  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 572  : 	WORD *sptr,*srcsize;
; 573  : 	DWORD *dptr;
; 574  : 	long i;
; 575  : 	long sadd,dadd;
; 576  : 	WORD sc;
; 577  : 	DWORD dc;
; 578  : 
; 579  : 	sptr   =(WORD *)(Owner->Data_ + Header->imageoffset) + soffset;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+36]
	add	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _soffset$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR _sptr$[ebp], eax

; 580  : 	srcsize=(WORD *)(Owner->Data_ + Header->imageoffset) + ssize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx+36]
	add	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR _ssize$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	DWORD PTR _srcsize$[ebp], ecx

; 581  : 	dptr = dest + doffset;

	mov	edx, DWORD PTR _doffset$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _dptr$[ebp], ecx

; 582  : 
; 583  : 	sadd = Header->w - scopy;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	sub	ecx, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _sadd$[ebp], ecx

; 584  : 	dadd = dwidth - scopy;

	mov	edx, DWORD PTR _dwidth$[ebp]
	sub	edx, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _dadd$[ebp], edx
$LN4@Blit16BitP:

; 585  : 
; 586  : 	while(sptr < srcsize)

	mov	eax, DWORD PTR _sptr$[ebp]
	cmp	eax, DWORD PTR _srcsize$[ebp]
	jae	SHORT $LN5@Blit16BitP

; 587  : 	{
; 588  : 		i=scopy;

	mov	ecx, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
$LN2@Blit16BitP:

; 589  : 
; 590  : 		while(i--)

	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv88[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	cmp	DWORD PTR tv88[ebp], 0
	je	SHORT $LN1@Blit16BitP

; 591  : 		{
; 592  : 			sc = *sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR _sc$[ebp], dx
	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 2
	mov	DWORD PTR _sptr$[ebp], eax

; 593  : 			dc = RGB565toRGB8( sc );				 

	movzx	ecx, WORD PTR _sc$[ebp]
	push	ecx
	call	?RGB565toRGB8@@YAKG@Z			; RGB565toRGB8
	add	esp, 4
	mov	DWORD PTR _dc$[ebp], eax

; 594  : 			//set
; 595  : 			*dptr++ = dc;				

	mov	edx, DWORD PTR _dptr$[ebp]
	mov	eax, DWORD PTR _dc$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _dptr$[ebp]
	add	ecx, 4
	mov	DWORD PTR _dptr$[ebp], ecx

; 596  : 		}

	jmp	SHORT $LN2@Blit16BitP
$LN1@Blit16BitP:

; 597  : 
; 598  : 		sptr += sadd;

	mov	edx, DWORD PTR _sadd$[ebp]
	mov	eax, DWORD PTR _sptr$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _sptr$[ebp], ecx

; 599  : 		dptr += dadd;

	mov	edx, DWORD PTR _dadd$[ebp]
	mov	eax, DWORD PTR _dptr$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _dptr$[ebp], ecx

; 600  : 	}

	jmp	SHORT $LN4@Blit16BitP
$LN5@Blit16BitP:

; 601  : }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?_Blit16BitPartTo32@IMAGE_RSC@@AAEXJJJJJPAK@Z ENDP	; IMAGE_RSC::_Blit16BitPartTo32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
_dadd$ = -40						; size = 4
_dc$ = -36						; size = 4
tv92 = -32						; size = 4
_srcsize$ = -28						; size = 4
_i$ = -24						; size = 4
_dptr$ = -20						; size = 4
_sptr$ = -16						; size = 4
_this$ = -12						; size = 4
_Key$ = -8						; size = 2
_sc$ = -4						; size = 2
_doffset$ = 8						; size = 4
_dwidth$ = 12						; size = 4
_dest$ = 16						; size = 4
?_Blit16BitTransparentTo32@IMAGE_RSC@@AAEXJJPAK@Z PROC	; IMAGE_RSC::_Blit16BitTransparentTo32
; _this$ = ecx

; 531  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 532  : 	WORD *sptr,*srcsize;
; 533  : 	WORD Key=Owner->ColorKey_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dx, WORD PTR [ecx+40]
	mov	WORD PTR _Key$[ebp], dx

; 534  : 	long i;
; 535  : 	long dadd;
; 536  : 	DWORD *dptr;
; 537  : 	WORD sc;
; 538  : 	DWORD dc;
; 539  : 
; 540  : 	sptr   =(WORD *)(Owner->Data_ + Header->imageoffset);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+36]
	add	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _sptr$[ebp], ecx

; 541  : 	srcsize=(WORD *)(sptr  + Header->w * Header->h);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	edx, WORD PTR [eax+46]
	imul	ecx, edx
	mov	eax, DWORD PTR _sptr$[ebp]
	lea	ecx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR _srcsize$[ebp], ecx

; 542  : 
; 543  : 	dptr=dest+doffset;

	mov	edx, DWORD PTR _doffset$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _dptr$[ebp], ecx

; 544  : 
; 545  : 	dadd = dwidth - Header->w;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	mov	edx, DWORD PTR _dwidth$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _dadd$[ebp], edx
$LN6@Blit16BitT:

; 546  : 
; 547  : 	while(sptr < srcsize)

	mov	eax, DWORD PTR _sptr$[ebp]
	cmp	eax, DWORD PTR _srcsize$[ebp]
	jae	$LN7@Blit16BitT

; 548  : 	{
; 549  : 		i=Header->w;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, WORD PTR [edx+44]
	mov	DWORD PTR _i$[ebp], eax
$LN4@Blit16BitT:

; 550  : 		while(i--)

	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv92[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	cmp	DWORD PTR tv92[ebp], 0
	je	SHORT $LN3@Blit16BitT

; 551  : 		{
; 552  : 			if( *sptr ^ Owner->ColorKey_ )

	mov	eax, DWORD PTR _sptr$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movzx	edx, WORD PTR [eax+40]
	xor	ecx, edx
	je	SHORT $LN2@Blit16BitT

; 553  : 			{
; 554  : 				sc = *sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _sc$[ebp], cx
	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _sptr$[ebp], edx

; 555  : 				dc = RGB565toRGB8( sc );				 

	movzx	eax, WORD PTR _sc$[ebp]
	push	eax
	call	?RGB565toRGB8@@YAKG@Z			; RGB565toRGB8
	add	esp, 4
	mov	DWORD PTR _dc$[ebp], eax

; 556  : 				//set
; 557  : 				*dptr++ = dc;				

	mov	ecx, DWORD PTR _dptr$[ebp]
	mov	edx, DWORD PTR _dc$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _dptr$[ebp]
	add	eax, 4
	mov	DWORD PTR _dptr$[ebp], eax

; 558  : 			}
; 559  : 			else

	jmp	SHORT $LN1@Blit16BitT
$LN2@Blit16BitT:

; 560  : 			{
; 561  : 				sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _sptr$[ebp], ecx

; 562  : 				dptr++;

	mov	edx, DWORD PTR _dptr$[ebp]
	add	edx, 4
	mov	DWORD PTR _dptr$[ebp], edx
$LN1@Blit16BitT:

; 563  : 			}
; 564  : 		}

	jmp	SHORT $LN4@Blit16BitT
$LN3@Blit16BitT:

; 565  : 		dptr += dadd;

	mov	eax, DWORD PTR _dadd$[ebp]
	mov	ecx, DWORD PTR _dptr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _dptr$[ebp], edx

; 566  : 	}

	jmp	$LN6@Blit16BitT
$LN7@Blit16BitT:

; 567  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Blit16BitTransparentTo32@IMAGE_RSC@@AAEXJJPAK@Z ENDP	; IMAGE_RSC::_Blit16BitTransparentTo32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
_dadd$ = -36						; size = 4
_dc$ = -32						; size = 4
tv90 = -28						; size = 4
_srcsize$ = -24						; size = 4
_i$ = -20						; size = 4
_dptr$ = -16						; size = 4
_sptr$ = -12						; size = 4
_this$ = -8						; size = 4
_sc$ = -4						; size = 2
_doffset$ = 8						; size = 4
_dwidth$ = 12						; size = 4
_dest$ = 16						; size = 4
?_Blit16BitTo32@IMAGE_RSC@@AAEXJJPAK@Z PROC		; IMAGE_RSC::_Blit16BitTo32
; _this$ = ecx

; 500  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 501  : 	WORD *sptr,*srcsize;
; 502  : 	DWORD *dptr;
; 503  : 	long i;
; 504  : 	long dadd;
; 505  : 	WORD sc;
; 506  : 	DWORD dc;
; 507  : 
; 508  : 	sptr   =(WORD *)(Owner->Data_ + Header->imageoffset);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+36]
	add	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _sptr$[ebp], ecx

; 509  : 	srcsize=(WORD *)(sptr  + Header->w * Header->h);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	edx, WORD PTR [eax+46]
	imul	ecx, edx
	mov	eax, DWORD PTR _sptr$[ebp]
	lea	ecx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR _srcsize$[ebp], ecx

; 510  : 
; 511  : 	dptr = dest + doffset;

	mov	edx, DWORD PTR _doffset$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _dptr$[ebp], ecx

; 512  : 
; 513  : 	dadd = dwidth - Header->w;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	mov	edx, DWORD PTR _dwidth$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _dadd$[ebp], edx
$LN4@Blit16BitT:

; 514  : 
; 515  : 	while(sptr < srcsize)

	mov	eax, DWORD PTR _sptr$[ebp]
	cmp	eax, DWORD PTR _srcsize$[ebp]
	jae	SHORT $LN5@Blit16BitT

; 516  : 	{
; 517  : 		i = Header->w;//width => row

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, WORD PTR [edx+44]
	mov	DWORD PTR _i$[ebp], eax
$LN2@Blit16BitT:

; 518  : 		while(i--)

	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv90[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	cmp	DWORD PTR tv90[ebp], 0
	je	SHORT $LN1@Blit16BitT

; 519  : 		{
; 520  : 			sc = *sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _sc$[ebp], cx
	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _sptr$[ebp], edx

; 521  : 			dc = RGB565toRGB8( sc );

	movzx	eax, WORD PTR _sc$[ebp]
	push	eax
	call	?RGB565toRGB8@@YAKG@Z			; RGB565toRGB8
	add	esp, 4
	mov	DWORD PTR _dc$[ebp], eax

; 522  : 			*dptr++ = dc;

	mov	ecx, DWORD PTR _dptr$[ebp]
	mov	edx, DWORD PTR _dc$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _dptr$[ebp]
	add	eax, 4
	mov	DWORD PTR _dptr$[ebp], eax

; 523  : 		}

	jmp	SHORT $LN2@Blit16BitT
$LN1@Blit16BitT:

; 524  : 
; 525  : 		dptr += dadd;

	mov	ecx, DWORD PTR _dadd$[ebp]
	mov	edx, DWORD PTR _dptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _dptr$[ebp], eax

; 526  : 	}

	jmp	SHORT $LN4@Blit16BitT
$LN5@Blit16BitT:

; 527  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Blit16BitTo32@IMAGE_RSC@@AAEXJJPAK@Z ENDP		; IMAGE_RSC::_Blit16BitTo32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
_dadd$ = -32						; size = 4
_sadd$ = -28						; size = 4
tv88 = -24						; size = 4
_srcsize$ = -20						; size = 4
_i$ = -16						; size = 4
_this$ = -12						; size = 4
_dptr$ = -8						; size = 4
_sptr$ = -4						; size = 4
_soffset$ = 8						; size = 4
_scopy$ = 12						; size = 4
_ssize$ = 16						; size = 4
_doffset$ = 20						; size = 4
_dwidth$ = 24						; size = 4
_dest$ = 28						; size = 4
?Blit16BitTransparentPart@IMAGE_RSC@@AAEXJJJJJPAG@Z PROC ; IMAGE_RSC::Blit16BitTransparentPart
; _this$ = ecx

; 759  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 760  : 	WORD *sptr,*srcsize;
; 761  : 	WORD *dptr;
; 762  : 	long i;
; 763  : 	long sadd,dadd;
; 764  : 
; 765  : 	sptr   =(WORD *)(Owner->Data_ + Header->imageoffset) + soffset;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+36]
	add	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _soffset$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR _sptr$[ebp], eax

; 766  : 	srcsize=(WORD *)(Owner->Data_ + Header->imageoffset) + ssize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx+36]
	add	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR _ssize$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	DWORD PTR _srcsize$[ebp], ecx

; 767  : 	dptr=dest+doffset;

	mov	edx, DWORD PTR _doffset$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _dptr$[ebp], ecx

; 768  : 
; 769  : 	sadd=Header->w - scopy;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	sub	ecx, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _sadd$[ebp], ecx

; 770  : 	dadd=dwidth - scopy;

	mov	edx, DWORD PTR _dwidth$[ebp]
	sub	edx, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _dadd$[ebp], edx
$LN6@Blit16BitT:

; 771  : 	while(sptr < srcsize)

	mov	eax, DWORD PTR _sptr$[ebp]
	cmp	eax, DWORD PTR _srcsize$[ebp]
	jae	$LN7@Blit16BitT

; 772  : 	{
; 773  : 		i=scopy;

	mov	ecx, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
$LN4@Blit16BitT:

; 774  : 		while(i--)

	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv88[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	cmp	DWORD PTR tv88[ebp], 0
	je	SHORT $LN3@Blit16BitT

; 775  : 		{
; 776  : 			if(*sptr ^ Owner->ColorKey_)

	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	eax, WORD PTR [ecx+40]
	xor	edx, eax
	je	SHORT $LN2@Blit16BitT

; 777  : 				*dptr++=*sptr++;

	mov	ecx, DWORD PTR _dptr$[ebp]
	mov	edx, DWORD PTR _sptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ecx, DWORD PTR _dptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _dptr$[ebp], ecx
	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _sptr$[ebp], edx

; 778  : 			else

	jmp	SHORT $LN1@Blit16BitT
$LN2@Blit16BitT:

; 779  : 			{
; 780  : 				sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 2
	mov	DWORD PTR _sptr$[ebp], eax

; 781  : 				dptr++;

	mov	ecx, DWORD PTR _dptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _dptr$[ebp], ecx
$LN1@Blit16BitT:

; 782  : 			}
; 783  : 		}

	jmp	SHORT $LN4@Blit16BitT
$LN3@Blit16BitT:

; 784  : 		sptr+=sadd;

	mov	edx, DWORD PTR _sadd$[ebp]
	mov	eax, DWORD PTR _sptr$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _sptr$[ebp], ecx

; 785  : 		dptr+=dadd;

	mov	edx, DWORD PTR _dadd$[ebp]
	mov	eax, DWORD PTR _dptr$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _dptr$[ebp], ecx

; 786  : 	}

	jmp	$LN6@Blit16BitT
$LN7@Blit16BitT:

; 787  : }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Blit16BitTransparentPart@IMAGE_RSC@@AAEXJJJJJPAG@Z ENDP ; IMAGE_RSC::Blit16BitTransparentPart
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
_i$ = -28						; size = 4
_dadd$ = -24						; size = 4
_sadd$ = -20						; size = 4
_srcsize$ = -16						; size = 4
_dptr$ = -12						; size = 4
_sptr$ = -8						; size = 4
_this$ = -4						; size = 4
_soffset$ = 8						; size = 4
_scopy$ = 12						; size = 4
_ssize$ = 16						; size = 4
_doffset$ = 20						; size = 4
_dwidth$ = 24						; size = 4
_dest$ = 28						; size = 4
?Blit16BitPart@IMAGE_RSC@@AAEXJJJJJPAG@Z PROC		; IMAGE_RSC::Blit16BitPart
; _this$ = ecx

; 722  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 723  : 	WORD *sptr,*srcsize;
; 724  : 	WORD *dptr;
; 725  : 	long i;
; 726  : 	long sadd,dadd;
; 727  : 
; 728  : 	sptr   =(WORD *)(Owner->Data_ + Header->imageoffset) + soffset;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+36]
	add	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _soffset$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR _sptr$[ebp], eax

; 729  : 	srcsize=(WORD *)(Owner->Data_ + Header->imageoffset) + ssize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx+36]
	add	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR _ssize$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	DWORD PTR _srcsize$[ebp], ecx

; 730  : 	dptr=dest+doffset;

	mov	edx, DWORD PTR _doffset$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _dptr$[ebp], ecx

; 731  : 
; 732  : 	sadd=Header->w - scopy;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	sub	ecx, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _sadd$[ebp], ecx

; 733  : 	dadd=dwidth - scopy;

	mov	edx, DWORD PTR _dwidth$[ebp]
	sub	edx, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _dadd$[ebp], edx
$LN2@Blit16BitP:

; 734  : 	while(sptr < srcsize)

	mov	eax, DWORD PTR _sptr$[ebp]
	cmp	eax, DWORD PTR _srcsize$[ebp]
	jae	SHORT $LN3@Blit16BitP

; 735  : 	{
; 736  : 		i=scopy;

	mov	ecx, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _i$[ebp], ecx

; 737  : #if 0
; 738  : 		while(i--)
; 739  : 			*dptr++=*sptr++;
; 740  : #else
; 741  : 		__asm
; 742  : 		{
; 743  : 			mov ECX,scopy

	mov	ecx, DWORD PTR _scopy$[ebp]

; 744  : 			mov ESI,sptr

	mov	esi, DWORD PTR _sptr$[ebp]

; 745  : 			mov EDI,dptr

	mov	edi, DWORD PTR _dptr$[ebp]

; 746  : 			rep movsw

	rep	 movsw

; 747  : 
; 748  : 			mov sptr, ESI

	mov	DWORD PTR _sptr$[ebp], esi

; 749  : 			mov dptr, EDI

	mov	DWORD PTR _dptr$[ebp], edi

; 750  : 		};
; 751  : #endif
; 752  : 		sptr+=sadd;

	mov	edx, DWORD PTR _sadd$[ebp]
	mov	eax, DWORD PTR _sptr$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _sptr$[ebp], ecx

; 753  : 		dptr+=dadd;

	mov	edx, DWORD PTR _dadd$[ebp]
	mov	eax, DWORD PTR _dptr$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _dptr$[ebp], ecx

; 754  : 	}

	jmp	SHORT $LN2@Blit16BitP
$LN3@Blit16BitP:

; 755  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Blit16BitPart@IMAGE_RSC@@AAEXJJJJJPAG@Z ENDP		; IMAGE_RSC::Blit16BitPart
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
_i$ = -28						; size = 4
_dptr$ = -24						; size = 4
_srcsize$ = -20						; size = 4
_sptr$ = -16						; size = 4
_dadd$ = -12						; size = 4
_this$ = -8						; size = 4
_Key$ = -4						; size = 2
_doffset$ = 8						; size = 4
_dwidth$ = 12						; size = 4
_dest$ = 16						; size = 4
?Blit16BitTransparent@IMAGE_RSC@@AAEXJJPAG@Z PROC	; IMAGE_RSC::Blit16BitTransparent
; _this$ = ecx

; 648  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 649  : 	WORD *sptr,*srcsize;
; 650  : 	WORD *dptr,Key=Owner->ColorKey_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dx, WORD PTR [ecx+40]
	mov	WORD PTR _Key$[ebp], dx

; 651  : 	long i;
; 652  : 	long dadd;
; 653  : 
; 654  : 	sptr   =(WORD *)(Owner->Data_ + Header->imageoffset);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+36]
	add	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _sptr$[ebp], ecx

; 655  : 	srcsize=(WORD *)(sptr  + Header->w * Header->h);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	edx, WORD PTR [eax+46]
	imul	ecx, edx
	mov	eax, DWORD PTR _sptr$[ebp]
	lea	ecx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR _srcsize$[ebp], ecx

; 656  : 	dptr=dest+doffset;

	mov	edx, DWORD PTR _doffset$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _dptr$[ebp], ecx

; 657  : 
; 658  : 	dadd=dwidth - Header->w;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	mov	edx, DWORD PTR _dwidth$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _dadd$[ebp], edx

; 659  : #if 0
; 660  : 	while(sptr < srcsize)
; 661  : 	{
; 662  : 		i=Header->w;
; 663  : 		while(i--)
; 664  : 		{
; 665  : 			if(*sptr ^ Owner->ColorKey_)
; 666  : 				*dptr++=*sptr++;
; 667  : 			else
; 668  : 			{
; 669  : 				sptr++;
; 670  : 				dptr++;
; 671  : 			}
; 672  : 		}
; 673  : 		dptr+=dadd;
; 674  : 	}
; 675  : #else
; 676  : 	i=Header->w;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, WORD PTR [ecx+44]
	mov	DWORD PTR _i$[ebp], edx

; 677  : 	__asm
; 678  : 	{
; 679  : 		mov	EDX, srcsize

	mov	edx, DWORD PTR _srcsize$[ebp]

; 680  : 		mov BX,  Key

	mov	bx, WORD PTR _Key$[ebp]

; 681  : 		mov ESI, sptr

	mov	esi, DWORD PTR _sptr$[ebp]

; 682  : 		mov EDI, dptr

	mov	edi, DWORD PTR _dptr$[ebp]
$start_blit$3:

; 683  : 	};
; 684  : start_blit:
; 685  : 	__asm
; 686  : 	{
; 687  : 		mov ECX, i

	mov	ecx, DWORD PTR _i$[ebp]
$loop_here$4:

; 688  : 	};
; 689  : loop_here:
; 690  : 	__asm
; 691  : 	{
; 692  : 		lodsw

	lodsw

; 693  : 		cmp AX, BX

	cmp	ax, bx

; 694  : 		je  Skip_Byte

	je	SHORT $Skip_Byte$5

; 695  : 		stosw

	stosw

; 696  : 		loop loop_here

	loop	$loop_here$4

; 697  : 
; 698  : 		add	EDI, dadd

	add	edi, DWORD PTR _dadd$[ebp]

; 699  : 		add	EDI, dadd

	add	edi, DWORD PTR _dadd$[ebp]

; 700  : 		cmp ESI, EDX

	cmp	esi, edx

; 701  : 		jl	start_blit

	jl	SHORT $start_blit$3

; 702  : 		jmp Blit_Done

	jmp	SHORT $Blit_Done$6
$Skip_Byte$5:

; 703  : 	};
; 704  : Skip_Byte:
; 705  : 	__asm
; 706  : 	{
; 707  : 		add	EDI, 2

	add	edi, 2

; 708  : 		loop loop_here

	loop	$loop_here$4

; 709  : 
; 710  : 		add	EDI, dadd

	add	edi, DWORD PTR _dadd$[ebp]

; 711  : 		add	EDI, dadd

	add	edi, DWORD PTR _dadd$[ebp]

; 712  : 		cmp ESI, EDX

	cmp	esi, edx

; 713  : 		jl	start_blit

	jl	SHORT $start_blit$3
$Blit_Done$6:

; 714  : 	};
; 715  : Blit_Done:
; 716  : #endif
; 717  : 	return;
; 718  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Blit16BitTransparent@IMAGE_RSC@@AAEXJJPAG@Z ENDP	; IMAGE_RSC::Blit16BitTransparent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
_dptr$ = -20						; size = 4
_sptr$ = -16						; size = 4
_count$ = -12						; size = 4
_this$ = -8						; size = 4
_key$ = -4						; size = 2
_dest$ = 8						; size = 4
?Blit16BitTransparentFast@IMAGE_RSC@@AAEXPAG@Z PROC	; IMAGE_RSC::Blit16BitTransparentFast
; _this$ = ecx

; 399  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 400  : 	WORD *sptr;
; 401  : 	WORD *dptr;
; 402  : 	long count;
; 403  : 
; 404  : 	sptr=(WORD *)(Owner->Data_ + Header->imageoffset);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+36]
	add	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _sptr$[ebp], ecx

; 405  : 	dptr=dest;

	mov	edx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _dptr$[ebp], edx

; 406  : 	count=Header->w*Header->h;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, WORD PTR [ecx+44]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	eax, WORD PTR [ecx+46]
	imul	edx, eax
	mov	DWORD PTR _count$[ebp], edx

; 407  : #if 0
; 408  : 	while(count--)
; 409  : 	{
; 410  : 		if(*sptr ^ Owner->ColorKey_)
; 411  : 			*dptr++=*sptr++;
; 412  : 		else
; 413  : 		{
; 414  : 			sptr++;
; 415  : 			dptr++;
; 416  : 		}
; 417  : 	}
; 418  : #else
; 419  : 	WORD key=Owner->ColorKey_;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ax, WORD PTR [edx+40]
	mov	WORD PTR _key$[ebp], ax

; 420  : 	__asm
; 421  : 	{
; 422  : 		mov	ECX, count

	mov	ecx, DWORD PTR _count$[ebp]

; 423  : 		mov	DX,  key

	mov	dx, WORD PTR _key$[ebp]

; 424  : 		mov ESI, sptr

	mov	esi, DWORD PTR _sptr$[ebp]

; 425  : 		mov EDI, dptr

	mov	edi, DWORD PTR _dptr$[ebp]
$loop_here$3:

; 426  : 	};
; 427  : loop_here:
; 428  : 	__asm
; 429  : 	{
; 430  : 		lodsw

	lodsw

; 431  : 		cmp AX, DX

	cmp	ax, dx

; 432  : 		je	Skip_Byte

	je	SHORT $Skip_Byte$4

; 433  : 		stosw

	stosw

; 434  : 		loop loop_here

	loop	$loop_here$3

; 435  : 		jmp  blit_done

	jmp	SHORT $blit_done$5
$Skip_Byte$4:

; 436  : 	};
; 437  : Skip_Byte:
; 438  : 	__asm
; 439  : 	{
; 440  : 		add	EDI, 2

	add	edi, 2

; 441  : 		loop loop_here

	loop	$loop_here$3
$blit_done$5:

; 442  : 	};
; 443  : blit_done:
; 444  : #endif
; 445  : 	return;
; 446  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?Blit16BitTransparentFast@IMAGE_RSC@@AAEXPAG@Z ENDP	; IMAGE_RSC::Blit16BitTransparentFast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
_dptr$ = -24						; size = 4
_dadd$ = -20						; size = 4
_srcsize$ = -16						; size = 4
_i$ = -12						; size = 4
_sptr$ = -8						; size = 4
_this$ = -4						; size = 4
_doffset$ = 8						; size = 4
_dwidth$ = 12						; size = 4
_dest$ = 16						; size = 4
?Blit16Bit@IMAGE_RSC@@AAEXJJPAG@Z PROC			; IMAGE_RSC::Blit16Bit
; _this$ = ecx

; 450  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 451  : 	WORD *sptr,*srcsize;
; 452  : 	WORD *dptr;
; 453  : 	long i;
; 454  : 	long dadd;
; 455  : 
; 456  : 	sptr   =(WORD *)(Owner->Data_ + Header->imageoffset);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+36]
	add	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _sptr$[ebp], ecx

; 457  : 	srcsize=(WORD *)(sptr  + Header->w * Header->h);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	edx, WORD PTR [eax+46]
	imul	ecx, edx
	mov	eax, DWORD PTR _sptr$[ebp]
	lea	ecx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR _srcsize$[ebp], ecx

; 458  : 	dptr=dest+doffset;

	mov	edx, DWORD PTR _doffset$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _dptr$[ebp], ecx

; 459  : 
; 460  : 	dadd=dwidth - Header->w;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	mov	edx, DWORD PTR _dwidth$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _dadd$[ebp], edx

; 461  : #if 0
; 462  : 	while(sptr < srcsize)
; 463  : 	{
; 464  : 		i=Header->w;
; 465  : 		while(i--)
; 466  : 			*dptr++=*sptr++;
; 467  : 		dptr+=dadd;
; 468  : 	}
; 469  : #else
; 470  : 	i=Header->w;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, WORD PTR [ecx+44]
	mov	DWORD PTR _i$[ebp], edx

; 471  : 	__asm
; 472  : 	{
; 473  : 		mov	EAX, i

	mov	eax, DWORD PTR _i$[ebp]

; 474  : 		mov	EDX, srcsize

	mov	edx, DWORD PTR _srcsize$[ebp]

; 475  : 		mov EBX, dadd

	mov	ebx, DWORD PTR _dadd$[ebp]

; 476  : 		add	EBX, EBX

	add	ebx, ebx

; 477  : 		mov ESI, sptr

	mov	esi, DWORD PTR _sptr$[ebp]

; 478  : 		mov EDI, dptr

	mov	edi, DWORD PTR _dptr$[ebp]
$loop_here$3:

; 479  : 	};
; 480  : loop_here:
; 481  : 	__asm
; 482  : 	{
; 483  : 		mov ECX,EAX

	mov	ecx, eax

; 484  : 		rep movsw

	rep	 movsw

; 485  : 
; 486  : 		add	EDI, EBX

	add	edi, ebx

; 487  : 		cmp ESI, EDX

	cmp	esi, edx

; 488  : 		jl	loop_here

	jl	SHORT $loop_here$3

; 489  : 	};
; 490  : #endif
; 491  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Blit16Bit@IMAGE_RSC@@AAEXJJPAG@Z ENDP			; IMAGE_RSC::Blit16Bit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
_dptr$ = -16						; size = 4
_sptr$ = -12						; size = 4
_count$ = -8						; size = 4
_this$ = -4						; size = 4
_dest$ = 8						; size = 4
?Blit16BitFast@IMAGE_RSC@@AAEXPAG@Z PROC		; IMAGE_RSC::Blit16BitFast
; _this$ = ecx

; 375  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 376  : 	WORD *sptr;
; 377  : 	WORD *dptr;
; 378  : 	long count;
; 379  : 
; 380  : 	sptr=(WORD *)(Owner->Data_ + Header->imageoffset);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+36]
	add	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _sptr$[ebp], ecx

; 381  : 	dptr=dest;

	mov	edx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _dptr$[ebp], edx

; 382  : 	count=Header->w*Header->h;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, WORD PTR [ecx+44]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	eax, WORD PTR [ecx+46]
	imul	edx, eax
	mov	DWORD PTR _count$[ebp], edx

; 383  : #if 0
; 384  : 	while(count--)
; 385  : 		*dptr++=*sptr++;
; 386  : #else
; 387  : 	__asm
; 388  : 	{
; 389  : 		mov ECX,count

	mov	ecx, DWORD PTR _count$[ebp]

; 390  : 		mov ESI,sptr

	mov	esi, DWORD PTR _sptr$[ebp]

; 391  : 		mov EDI,dptr

	mov	edi, DWORD PTR _dptr$[ebp]

; 392  : 		rep movsw

	rep	 movsw

; 393  : 	};
; 394  : #endif
; 395  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?Blit16BitFast@IMAGE_RSC@@AAEXPAG@Z ENDP		; IMAGE_RSC::Blit16BitFast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
_dadd$ = -36						; size = 4
_sadd$ = -32						; size = 4
_Palette$ = -28						; size = 4
tv91 = -24						; size = 4
_srcsize$ = -20						; size = 4
_i$ = -16						; size = 4
_dptr$ = -12						; size = 4
_this$ = -8						; size = 4
_sptr$ = -4						; size = 4
_soffset$ = 8						; size = 4
_scopy$ = 12						; size = 4
_ssize$ = 16						; size = 4
_doffset$ = 20						; size = 4
_dwidth$ = 24						; size = 4
_dest$ = 28						; size = 4
?Blit8BitTransparentPart@IMAGE_RSC@@AAEXJJJJJPAG@Z PROC	; IMAGE_RSC::Blit8BitTransparentPart
; _this$ = ecx

; 186  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 	uchar *sptr,*srcsize;
; 188  : 	WORD *Palette;
; 189  : 	WORD *dptr;
; 190  : 	long i;
; 191  : 	long sadd,dadd;
; 192  : 
; 193  : 	Palette=(WORD *)(Owner->Data_ + Header->paletteoffset);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+36]
	add	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _Palette$[ebp], ecx

; 194  : 	sptr   =(uchar *)(Owner->Data_ + Header->imageoffset + soffset);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax+36]
	add	eax, DWORD PTR [edx+48]
	add	eax, DWORD PTR _soffset$[ebp]
	mov	DWORD PTR _sptr$[ebp], eax

; 195  : 	srcsize=(uchar *)(Owner->Data_ + Header->imageoffset + ssize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx+36]
	add	edx, DWORD PTR [ecx+48]
	add	edx, DWORD PTR _ssize$[ebp]
	mov	DWORD PTR _srcsize$[ebp], edx

; 196  : 	dptr=dest+doffset;

	mov	eax, DWORD PTR _doffset$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _dptr$[ebp], edx

; 197  : 
; 198  : 	sadd=Header->w - scopy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, WORD PTR [ecx+44]
	sub	edx, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _sadd$[ebp], edx

; 199  : 	dadd=dwidth - scopy;

	mov	eax, DWORD PTR _dwidth$[ebp]
	sub	eax, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _dadd$[ebp], eax
$LN6@Blit8BitTr:

; 200  : 	while(sptr < srcsize)

	mov	ecx, DWORD PTR _sptr$[ebp]
	cmp	ecx, DWORD PTR _srcsize$[ebp]
	jae	SHORT $LN7@Blit8BitTr

; 201  : 	{
; 202  : 		i=scopy;

	mov	edx, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _i$[ebp], edx
$LN4@Blit8BitTr:

; 203  : 		while(i--)

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv91[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	cmp	DWORD PTR tv91[ebp], 0
	je	SHORT $LN3@Blit8BitTr

; 204  : 		{
; 205  : 			if(*sptr)

	mov	edx, DWORD PTR _sptr$[ebp]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN2@Blit8BitTr

; 206  : 				*dptr++=Palette[*sptr++];

	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _dptr$[ebp]
	mov	ecx, DWORD PTR _Palette$[ebp]
	mov	dx, WORD PTR [ecx+edx*2]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _dptr$[ebp]
	add	eax, 2
	mov	DWORD PTR _dptr$[ebp], eax
	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sptr$[ebp], ecx

; 207  : 			else

	jmp	SHORT $LN1@Blit8BitTr
$LN2@Blit8BitTr:

; 208  : 			{
; 209  : 				sptr++;

	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx

; 210  : 				dptr++;

	mov	eax, DWORD PTR _dptr$[ebp]
	add	eax, 2
	mov	DWORD PTR _dptr$[ebp], eax
$LN1@Blit8BitTr:

; 211  : 			}
; 212  : 		}

	jmp	SHORT $LN4@Blit8BitTr
$LN3@Blit8BitTr:

; 213  : 		sptr+=sadd;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, DWORD PTR _sadd$[ebp]
	mov	DWORD PTR _sptr$[ebp], ecx

; 214  : 		dptr+=dadd;

	mov	edx, DWORD PTR _dadd$[ebp]
	mov	eax, DWORD PTR _dptr$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _dptr$[ebp], ecx

; 215  : 	}

	jmp	SHORT $LN6@Blit8BitTr
$LN7@Blit8BitTr:

; 216  : }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Blit8BitTransparentPart@IMAGE_RSC@@AAEXJJJJJPAG@Z ENDP	; IMAGE_RSC::Blit8BitTransparentPart
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
_dadd$ = -36						; size = 4
_sadd$ = -32						; size = 4
_Palette$ = -28						; size = 4
tv91 = -24						; size = 4
_srcsize$ = -20						; size = 4
_i$ = -16						; size = 4
_dptr$ = -12						; size = 4
_sptr$ = -8						; size = 4
_this$ = -4						; size = 4
_soffset$ = 8						; size = 4
_scopy$ = 12						; size = 4
_ssize$ = 16						; size = 4
_doffset$ = 20						; size = 4
_dwidth$ = 24						; size = 4
_dest$ = 28						; size = 4
?Blit8BitPart@IMAGE_RSC@@AAEXJJJJJPAG@Z PROC		; IMAGE_RSC::Blit8BitPart
; _this$ = ecx

; 160  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 161  : 	uchar *sptr,*srcsize;
; 162  : 	WORD *Palette;
; 163  : 	WORD *dptr;
; 164  : 	long i;
; 165  : 	long sadd,dadd;
; 166  : 
; 167  : 	Palette=(WORD *)(Owner->Data_ + Header->paletteoffset);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+36]
	add	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _Palette$[ebp], ecx

; 168  : 	sptr   =(uchar *)(Owner->Data_ + Header->imageoffset + soffset);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax+36]
	add	eax, DWORD PTR [edx+48]
	add	eax, DWORD PTR _soffset$[ebp]
	mov	DWORD PTR _sptr$[ebp], eax

; 169  : 	srcsize=(uchar *)(Owner->Data_ + Header->imageoffset + ssize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx+36]
	add	edx, DWORD PTR [ecx+48]
	add	edx, DWORD PTR _ssize$[ebp]
	mov	DWORD PTR _srcsize$[ebp], edx

; 170  : 	dptr=dest+doffset;

	mov	eax, DWORD PTR _doffset$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _dptr$[ebp], edx

; 171  : 
; 172  : 	sadd=Header->w - scopy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, WORD PTR [ecx+44]
	sub	edx, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _sadd$[ebp], edx

; 173  : 	dadd=dwidth - scopy;

	mov	eax, DWORD PTR _dwidth$[ebp]
	sub	eax, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _dadd$[ebp], eax
$LN4@Blit8BitPa:

; 174  : 	while(sptr < srcsize)

	mov	ecx, DWORD PTR _sptr$[ebp]
	cmp	ecx, DWORD PTR _srcsize$[ebp]
	jae	SHORT $LN5@Blit8BitPa

; 175  : 	{
; 176  : 		i=scopy;

	mov	edx, DWORD PTR _scopy$[ebp]
	mov	DWORD PTR _i$[ebp], edx
$LN2@Blit8BitPa:

; 177  : 		while(i--)

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv91[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	cmp	DWORD PTR tv91[ebp], 0
	je	SHORT $LN1@Blit8BitPa

; 178  : 			*dptr++=Palette[*sptr++];

	mov	edx, DWORD PTR _sptr$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _dptr$[ebp]
	mov	edx, DWORD PTR _Palette$[ebp]
	mov	ax, WORD PTR [edx+eax*2]
	mov	WORD PTR [ecx], ax
	mov	ecx, DWORD PTR _dptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _dptr$[ebp], ecx
	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx
	jmp	SHORT $LN2@Blit8BitPa
$LN1@Blit8BitPa:

; 179  : 		sptr+=sadd;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, DWORD PTR _sadd$[ebp]
	mov	DWORD PTR _sptr$[ebp], eax

; 180  : 		dptr+=dadd;

	mov	ecx, DWORD PTR _dadd$[ebp]
	mov	edx, DWORD PTR _dptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _dptr$[ebp], eax

; 181  : 	}

	jmp	SHORT $LN4@Blit8BitPa
$LN5@Blit8BitPa:

; 182  : }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Blit8BitPart@IMAGE_RSC@@AAEXJJJJJPAG@Z ENDP		; IMAGE_RSC::Blit8BitPart
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
_dadd$ = -32						; size = 4
_Palette$ = -28						; size = 4
tv94 = -24						; size = 4
_srcsize$ = -20						; size = 4
_i$ = -16						; size = 4
_dptr$ = -12						; size = 4
_sptr$ = -8						; size = 4
_this$ = -4						; size = 4
_doffset$ = 8						; size = 4
_dwidth$ = 12						; size = 4
_dest$ = 16						; size = 4
?Blit8BitTransparent@IMAGE_RSC@@AAEXJJPAG@Z PROC	; IMAGE_RSC::Blit8BitTransparent
; _this$ = ecx

; 128  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 	uchar *sptr,*srcsize;
; 130  : 	WORD *Palette;
; 131  : 	WORD *dptr;
; 132  : 	long i;
; 133  : 	long dadd;
; 134  : 
; 135  : 	Palette=(WORD *)(Owner->Data_ + Header->paletteoffset);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+36]
	add	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _Palette$[ebp], ecx

; 136  : 	sptr   =(uchar *)(Owner->Data_ + Header->imageoffset);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax+36]
	add	eax, DWORD PTR [edx+48]
	mov	DWORD PTR _sptr$[ebp], eax

; 137  : 	srcsize=(uchar *)(sptr  + Header->w * Header->h);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, WORD PTR [edx+44]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	ecx, WORD PTR [edx+46]
	imul	eax, ecx
	add	eax, DWORD PTR _sptr$[ebp]
	mov	DWORD PTR _srcsize$[ebp], eax

; 138  : 	dptr=dest+doffset;

	mov	edx, DWORD PTR _doffset$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _dptr$[ebp], ecx

; 139  : 
; 140  : 	dadd=dwidth - Header->w;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	mov	edx, DWORD PTR _dwidth$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _dadd$[ebp], edx
$LN6@Blit8BitTr:

; 141  : 	while(sptr < srcsize)

	mov	eax, DWORD PTR _sptr$[ebp]
	cmp	eax, DWORD PTR _srcsize$[ebp]
	jae	SHORT $LN7@Blit8BitTr

; 142  : 	{
; 143  : 		i=Header->w;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, WORD PTR [edx+44]
	mov	DWORD PTR _i$[ebp], eax
$LN4@Blit8BitTr:

; 144  : 		while(i--)

	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv94[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	cmp	DWORD PTR tv94[ebp], 0
	je	SHORT $LN3@Blit8BitTr

; 145  : 		{
; 146  : 			if(*sptr)

	mov	eax, DWORD PTR _sptr$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@Blit8BitTr

; 147  : 				*dptr++=Palette[*sptr++];

	mov	edx, DWORD PTR _sptr$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _dptr$[ebp]
	mov	edx, DWORD PTR _Palette$[ebp]
	mov	ax, WORD PTR [edx+eax*2]
	mov	WORD PTR [ecx], ax
	mov	ecx, DWORD PTR _dptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _dptr$[ebp], ecx
	mov	edx, DWORD PTR _sptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _sptr$[ebp], edx

; 148  : 			else

	jmp	SHORT $LN1@Blit8BitTr
$LN2@Blit8BitTr:

; 149  : 			{
; 150  : 				sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax

; 151  : 				dptr++;

	mov	ecx, DWORD PTR _dptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _dptr$[ebp], ecx
$LN1@Blit8BitTr:

; 152  : 			}
; 153  : 		}

	jmp	SHORT $LN4@Blit8BitTr
$LN3@Blit8BitTr:

; 154  : 		dptr+=dadd;

	mov	edx, DWORD PTR _dadd$[ebp]
	mov	eax, DWORD PTR _dptr$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _dptr$[ebp], ecx

; 155  : 	}

	jmp	SHORT $LN6@Blit8BitTr
$LN7@Blit8BitTr:

; 156  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Blit8BitTransparent@IMAGE_RSC@@AAEXJJPAG@Z ENDP	; IMAGE_RSC::Blit8BitTransparent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
_Palette$ = -24						; size = 4
tv83 = -20						; size = 4
_count$ = -16						; size = 4
_dptr$ = -12						; size = 4
_sptr$ = -8						; size = 4
_this$ = -4						; size = 4
_dest$ = 8						; size = 4
?Blit8BitTransparentFast@IMAGE_RSC@@AAEXPAG@Z PROC	; IMAGE_RSC::Blit8BitTransparentFast
; _this$ = ecx

; 80   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 81   : 	unsigned char *sptr;
; 82   : 	WORD *Palette;
; 83   : 	WORD *dptr;
; 84   : 	long count;
; 85   : 
; 86   : 	Palette=(WORD *)(Owner->Data_ + Header->paletteoffset);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+36]
	add	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _Palette$[ebp], ecx

; 87   : 	sptr=(unsigned char *)(Owner->Data_ + Header->imageoffset);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax+36]
	add	eax, DWORD PTR [edx+48]
	mov	DWORD PTR _sptr$[ebp], eax

; 88   : 	dptr=dest;

	mov	ecx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _dptr$[ebp], ecx

; 89   : 	count=Header->w*Header->h;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	edx, WORD PTR [eax+46]
	imul	ecx, edx
	mov	DWORD PTR _count$[ebp], ecx
$LN4@Blit8BitTr:

; 90   : 	while(count--)

	mov	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR tv83[ebp], eax
	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
	cmp	DWORD PTR tv83[ebp], 0
	je	SHORT $LN5@Blit8BitTr

; 91   : 	{
; 92   : 		if(*sptr)

	mov	edx, DWORD PTR _sptr$[ebp]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN2@Blit8BitTr

; 93   : 			*dptr++=Palette[*sptr++];

	mov	ecx, DWORD PTR _sptr$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _dptr$[ebp]
	mov	ecx, DWORD PTR _Palette$[ebp]
	mov	dx, WORD PTR [ecx+edx*2]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _dptr$[ebp]
	add	eax, 2
	mov	DWORD PTR _dptr$[ebp], eax
	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sptr$[ebp], ecx

; 94   : 		else

	jmp	SHORT $LN1@Blit8BitTr
$LN2@Blit8BitTr:

; 95   : 		{
; 96   : 			dptr++;

	mov	edx, DWORD PTR _dptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _dptr$[ebp], edx

; 97   : 			sptr++;

	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax
$LN1@Blit8BitTr:

; 98   : 		}
; 99   : 	}

	jmp	SHORT $LN4@Blit8BitTr
$LN5@Blit8BitTr:

; 100  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Blit8BitTransparentFast@IMAGE_RSC@@AAEXPAG@Z ENDP	; IMAGE_RSC::Blit8BitTransparentFast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
_dadd$ = -32						; size = 4
_Palette$ = -28						; size = 4
tv94 = -24						; size = 4
_srcsize$ = -20						; size = 4
_i$ = -16						; size = 4
_dptr$ = -12						; size = 4
_sptr$ = -8						; size = 4
_this$ = -4						; size = 4
_doffset$ = 8						; size = 4
_dwidth$ = 12						; size = 4
_dest$ = 16						; size = 4
?Blit8Bit@IMAGE_RSC@@AAEXJJPAG@Z PROC			; IMAGE_RSC::Blit8Bit
; _this$ = ecx

; 104  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 	uchar *sptr,*srcsize;
; 106  : 	WORD *Palette;
; 107  : 	WORD *dptr;
; 108  : 	long i;
; 109  : 	long dadd;
; 110  : 
; 111  : 	Palette=(WORD *)(Owner->Data_ + Header->paletteoffset);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+36]
	add	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _Palette$[ebp], ecx

; 112  : 	sptr   =(uchar *)(Owner->Data_ + Header->imageoffset);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax+36]
	add	eax, DWORD PTR [edx+48]
	mov	DWORD PTR _sptr$[ebp], eax

; 113  : 	srcsize=(uchar *)(sptr  + Header->w * Header->h);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, WORD PTR [edx+44]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	ecx, WORD PTR [edx+46]
	imul	eax, ecx
	add	eax, DWORD PTR _sptr$[ebp]
	mov	DWORD PTR _srcsize$[ebp], eax

; 114  : 	dptr=dest+doffset;

	mov	edx, DWORD PTR _doffset$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _dptr$[ebp], ecx

; 115  : 
; 116  : 	dadd=dwidth - Header->w;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	mov	edx, DWORD PTR _dwidth$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _dadd$[ebp], edx
$LN4@Blit8Bit:

; 117  : 	while(sptr < srcsize)

	mov	eax, DWORD PTR _sptr$[ebp]
	cmp	eax, DWORD PTR _srcsize$[ebp]
	jae	SHORT $LN5@Blit8Bit

; 118  : 	{
; 119  : 		i=Header->w;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, WORD PTR [edx+44]
	mov	DWORD PTR _i$[ebp], eax
$LN2@Blit8Bit:

; 120  : 		while(i--)

	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv94[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	cmp	DWORD PTR tv94[ebp], 0
	je	SHORT $LN1@Blit8Bit

; 121  : 			*dptr++=Palette[*sptr++];

	mov	eax, DWORD PTR _sptr$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _dptr$[ebp]
	mov	eax, DWORD PTR _Palette$[ebp]
	mov	cx, WORD PTR [eax+ecx*2]
	mov	WORD PTR [edx], cx
	mov	edx, DWORD PTR _dptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _dptr$[ebp], edx
	mov	eax, DWORD PTR _sptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _sptr$[ebp], eax
	jmp	SHORT $LN2@Blit8Bit
$LN1@Blit8Bit:

; 122  : 		dptr+=dadd;

	mov	ecx, DWORD PTR _dadd$[ebp]
	mov	edx, DWORD PTR _dptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _dptr$[ebp], eax

; 123  : 	}

	jmp	SHORT $LN4@Blit8Bit
$LN5@Blit8Bit:

; 124  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Blit8Bit@IMAGE_RSC@@AAEXJJPAG@Z ENDP			; IMAGE_RSC::Blit8Bit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\imagersc.cpp
_TEXT	SEGMENT
_count$ = -20						; size = 4
_Palette$ = -16						; size = 4
_dptr$ = -12						; size = 4
_sptr$ = -8						; size = 4
_this$ = -4						; size = 4
_dest$ = 8						; size = 4
?Blit8BitFast@IMAGE_RSC@@AAEXPAG@Z PROC			; IMAGE_RSC::Blit8BitFast
; _this$ = ecx

; 42   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 43   : 	unsigned char *sptr;
; 44   : 	WORD *Palette;
; 45   : 	WORD *dptr;
; 46   : 	long count;
; 47   : 
; 48   : 	Palette=(WORD *)(Owner->Data_ + Header->paletteoffset);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+36]
	add	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _Palette$[ebp], ecx

; 49   : 	sptr=(unsigned char *)(Owner->Data_ + Header->imageoffset);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax+36]
	add	eax, DWORD PTR [edx+48]
	mov	DWORD PTR _sptr$[ebp], eax

; 50   : 	dptr=dest;

	mov	ecx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _dptr$[ebp], ecx

; 51   : 	count=Header->w*Header->h;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	edx, WORD PTR [eax+46]
	imul	ecx, edx
	mov	DWORD PTR _count$[ebp], ecx

; 52   : #if 0
; 53   : 	while(count--)
; 54   : 		*dptr++=Palette[*sptr++];
; 55   : #else
; 56   : 	__asm
; 57   : 	{
; 58   : 		mov	ESI, sptr

	mov	esi, DWORD PTR _sptr$[ebp]

; 59   : 		mov	EDI, dptr

	mov	edi, DWORD PTR _dptr$[ebp]

; 60   : 		mov	EBX, Palette

	mov	ebx, DWORD PTR _Palette$[ebp]

; 61   : 		mov	ECX, count

	mov	ecx, DWORD PTR _count$[ebp]

; 62   : 		xor EDX, EDX

	xor	edx, edx
$loop_here$3:

; 63   : 	};
; 64   : loop_here:
; 65   : 	_asm
; 66   : 	{
; 67   : 		xor EAX, EAX

	xor	eax, eax

; 68   : 		lodsb

	lodsb

; 69   : 		mov	EDX, EAX

	mov	edx, eax

; 70   : 		ADD	EDX, EDX

	add	edx, edx

; 71   : 		mov	AX,  [EBX+EDX]

	mov	ax, WORD PTR [ebx+edx]

; 72   : 		stosw

	stosw

; 73   : 		loop	 loop_here

	loop	$loop_here$3

; 74   : 	};
; 75   : #endif
; 76   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Blit8BitFast@IMAGE_RSC@@AAEXPAG@Z ENDP			; IMAGE_RSC::Blit8BitFast
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z PROC	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ENDP	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ PROC	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CComBSTR@ATL@@QAE@XZ			; ATL::CComBSTR::~CComBSTR
	mov	esp, ebp
	pop	ebp
	ret	0
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ ENDP	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\atlmfc\include\atlcomcli.h
;	COMDAT ??1CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CComBSTR@ATL@@QAE@XZ PROC				; ATL::CComBSTR::~CComBSTR, COMDAT
; _this$ = ecx

; 1656 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1657 :     ::SysFreeString(m_str);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__SysFreeString@4

; 1658 : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1CComBSTR@ATL@@QAE@XZ ENDP				; ATL::CComBSTR::~CComBSTR
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Where$[ebp]
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
